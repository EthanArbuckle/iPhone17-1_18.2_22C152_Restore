uint64_t ContactDisambiguationPromptResponse.debugDescription.getter(char *a1, char a2)
{
  char *v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  Swift::String v9;
  void *v10;
  unsigned __int8 v11;
  uint64_t v12;
  char *v14;
  char *v15;
  Swift::String v16;
  unint64_t v17;
  void v18[2];

  switch(a2)
  {
    case 1:
      v4 = a1;
      _StringGuts.grow(_:)(21);
      swift_bridgeObjectRelease();
      v18[0] = 0xD000000000000012;
      v18[1] = 0x800000000049D230;
      v5 = [v4 description];
      v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v8 = v7;

      v9._countAndFlagsBits = v6;
      v9._object = v8;
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_4_107();
      v10 = a1;
      v11 = 1;
      goto LABEL_9;
    case 2:
      _StringGuts.grow(_:)(18);
      swift_bridgeObjectRelease();
      v18[0] = 0x657463656C65732ELL;
      v18[1] = 0xEF287865646E4964;
      v12 = dispatch thunk of CustomStringConvertible.description.getter();
      goto LABEL_19;
    case 3:
      v14 = a1;
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease();
      v18[0] = 0xD00000000000001BLL;
      v18[1] = 0x800000000049D210;
      v15 = v14;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INPerson?);
      v16._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_4_107();
      v10 = a1;
      v11 = 3;
LABEL_9:
      outlined consume of ContactDisambiguationPromptResponse(v10, v11);
      return v18[0];
    case 4:
      v17 = 0xD00000000000001BLL;
      if (a1 != (unsigned char *)&dword_0 + 1) {
        v17 = 0x65537974706D652ELL;
      }
      if (a1) {
        return v17;
      }
      else {
        return 0xD000000000000019;
      }
    default:
      switch(a1)
      {
        case 5u:
          return 0x6E776F6E6B6E752ELL;
        case 6u:
          return 0xD000000000000015;
        case 7u:
          return 0x6F4374657365722ELL;
      }
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease();
      strcpy((char *)v18, ".confirmation(");
      HIBYTE(v18[1]) = -18;
      v12 = PhoneCallConfirmation.rawValue.getter((char)a1);
LABEL_19:
      String.append(_:)(*(Swift::String *)&v12);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_4_107();
      return v18[0];
  }
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ContactDisambiguationPromptResponse()
{
  return ContactDisambiguationPromptResponse.debugDescription.getter(*(char **)v0, *(unsigned char *)(v0 + 8));
}

uint64_t ContactDisambiguationPromptResponseParser.referenceResolver.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + 8, a1);
}

uint64_t ContactDisambiguationPromptResponseParser.sharedGlobals.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + 48, a1);
}

Class ContactDisambiguationPromptResponseParser.parseDisambiguationResponse(from:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CommonDirectAction?);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  v5 = (uint64_t *)((char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v3);
  v7 = (char *)&v15 - v6;
  static CommonDirectAction.from(_:)(a1, (uint64_t *)((char *)&v15 - v6));
  uint64_t v8 = type metadata accessor for CommonDirectAction();
  if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v8) == 1) {
    goto LABEL_9;
  }
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0((uint64_t)v7, (uint64_t)v5, &demangling cache variable for type metadata for CommonDirectAction?);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v12 = *v5;
    v11 = (void *)v5[1];
    type metadata accessor for INPerson();
    v13._countAndFlagsBits = v12;
    v13._object = v11;
    Class isa = INPerson.init(contactIdentifier:)(v13).super.isa;
    goto LABEL_10;
  }
  if (EnumCaseMultiPayload == 2)
  {
    Class isa = (Class)*v5;
    goto LABEL_10;
  }
  if (EnumCaseMultiPayload != 1)
  {
    _s27PhoneCallFlowDelegatePlugin18CommonDirectActionOWOhTm_2((uint64_t)v5, (void (*)(void))type metadata accessor for CommonDirectAction);
LABEL_9:
    Class isa = 0;
    goto LABEL_10;
  }
  Class isa = (Class)*v5;
LABEL_10:
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v7, &demangling cache variable for type metadata for CommonDirectAction?);
  return isa;
}

uint64_t ContactDisambiguationPromptResponseParser.parseDisambiguationResponse(from:parse:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for PhoneCallNLv3Intent(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v42[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)__dst);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
  if (swift_dynamicCast())
  {
    _s27PhoneCallFlowDelegatePlugin18CommonDirectActionOWOhTm_2((uint64_t)v6, (void (*)(void))type metadata accessor for PhoneCallNLv3Intent);
    uint64_t v7 = a1[3];
    uint64_t v8 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v7, v8);
    specialized Collection.first.getter(__dst);
    swift_bridgeObjectRelease();
    uint64_t v9 = __dst[3];
    if (__dst[3])
    {
      uint64_t v10 = __dst[4];
      __swift_project_boxed_opaque_existential_1(__dst, __dst[3]);
      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 32))(v9, v10);
      uint64_t v13 = v12;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)__dst);
      if (v13)
      {
        type metadata accessor for INPerson();
        id v14 = static INPerson.from(base64ContactId:)(v11, v13);
        swift_bridgeObjectRelease();
        if (v14) {
          return (uint64_t)v14;
        }
      }
    }
    else
    {
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)__dst, &demangling cache variable for type metadata for SiriPhoneContact?);
    }
  }
  outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v43);
  if (!swift_dynamicCast())
  {
    memset(v46, 0, sizeof(v46));
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v46, &demangling cache variable for type metadata for PhoneCallNLv4Intent?);
    return 0;
  }
  memcpy(__dst, v46, 0x68uLL);
  outlined init with copy of SignalProviding((uint64_t)(v2 + 1), (uint64_t)v46);
  id v14 = DisambiguationReferenceResolver.resolveDisambiguationReference(_:)();
  outlined destroy of DisambiguationReferenceResolver((uint64_t)v46);
  if (v14)
  {
    outlined destroy of PhoneCallNLv4Intent((uint64_t)__dst);
    return (uint64_t)v14;
  }
  if ((specialized PhoneCallNLIntent.isEmergencyServicesCall()() & 1) == 0)
  {
    if (*(void *)(__dst[1] + 16) == 1)
    {
      specialized Collection.first.getter(v46);
      if (v46[3])
      {
        __swift_project_boxed_opaque_existential_1(v46, v46[3]);
        Class isa = SiriPhoneContact.toINPerson()().super.isa;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
        unsigned __int8 v25 = INPerson.isUnnamedHandleLabel.getter();

        if (v25)
        {
          if (one-time initialization token for siriPhone != -1) {
            swift_once();
          }
          uint64_t v26 = type metadata accessor for Logger();
          __swift_project_value_buffer(v26, (uint64_t)static Logger.siriPhone);
          v27 = Logger.logObject.getter();
          os_log_type_t v28 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v27, v28))
          {
            v29 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v29 = 0;
            _os_log_impl(&dword_0, v27, v28, "#ContactDisambiguationPromptResponseParser user called an unknown label", v29, 2u);
            swift_slowDealloc();
          }

          v30 = v2 + 6;
          uint64_t v32 = v2[9];
          uint64_t v31 = v2[10];
          __swift_project_boxed_opaque_existential_1(v30, v32);
          uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 72))(v32, v31);
          (*(void (**)(uint64_t *__return_ptr))(*(void *)v33 + 240))(v46);
          swift_release();
          if (v46[4] == 1)
          {
            outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v46, (uint64_t *)&demangling cache variable for type metadata for TransformationResult?);
            memset(v44, 0, sizeof(v44));
            uint64_t v45 = 0;
          }
          else
          {
            _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0((uint64_t)&v46[1], (uint64_t)v44, &demangling cache variable for type metadata for PhoneCallNLIntent?);
            outlined destroy of TransformationResult((uint64_t)v46);
          }
          _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0((uint64_t)v44, (uint64_t)v42, &demangling cache variable for type metadata for PhoneCallNLIntent?);
          if (v42[3])
          {
            if (swift_dynamicCast())
            {
              if (v43[0])
              {
                memcpy(v46, v43, sizeof(v46));
                Swift::Bool v36 = PhoneCallNLv4Intent.isCallLabelOnly()();
                outlined init with copy of PhoneCallNLv4Intent((uint64_t)v46, (uint64_t)v43);
                if (v36)
                {
                  Swift::Bool v37 = PhoneCallNLv4Intent.isCallLabelOnly()();
                  outlined destroy of PhoneCallNLv4Intent((uint64_t)v43);
                  if (v37)
                  {
                    v38 = Logger.logObject.getter();
                    os_log_type_t v39 = static os_log_type_t.debug.getter();
                    if (os_log_type_enabled(v38, v39))
                    {
                      v40 = (uint8_t *)swift_slowAlloc();
                      *(_WORD *)v40 = 0;
                      _os_log_impl(&dword_0, v38, v39, "#ContactDisambiguationPromptResponseParser user may actually want to call the handle specified on the meCard (if existing). Skipping the current disambiguation flow..", v40, 2u);
                      swift_slowDealloc();
                    }

                    outlined destroy of PhoneCallNLv4Intent((uint64_t)v46);
                    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v44, &demangling cache variable for type metadata for PhoneCallNLIntent?);
                    outlined destroy of PhoneCallNLv4Intent((uint64_t)__dst);
                    return 7;
                  }
                }
                else
                {
                  outlined destroy of PhoneCallNLv4Intent((uint64_t)v43);
                }
                outlined destroy of PhoneCallNLv4Intent((uint64_t)v46);
                outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v44, &demangling cache variable for type metadata for PhoneCallNLIntent?);
                outlined destroy of PhoneCallNLv4Intent((uint64_t)__dst);
                return 0;
              }
            }
            else
            {
              memset(v43, 0, 104);
            }
          }
          else
          {
            outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v42, &demangling cache variable for type metadata for PhoneCallNLIntent?);
            memset(v43, 0, 104);
          }
          outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v44, &demangling cache variable for type metadata for PhoneCallNLIntent?);
          outlined destroy of PhoneCallNLv4Intent((uint64_t)__dst);
          outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v43, &demangling cache variable for type metadata for PhoneCallNLv4Intent?);
          return 0;
        }
      }
      else
      {
        outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v46, &demangling cache variable for type metadata for SiriPhoneContact?);
      }
    }
    uint64_t v34 = swift_bridgeObjectRetain();
    char v35 = Array<A>.hasQueryableContactInformation.getter(v34);
    swift_bridgeObjectRelease();
    outlined destroy of PhoneCallNLv4Intent((uint64_t)__dst);
    if (v35) {
      return 1;
    }
    else {
      return 2;
    }
  }
  uint64_t v16 = *v2;
  if ((unint64_t)*v2 >> 62) {
    goto LABEL_55;
  }
  uint64_t v17 = *(void *)((char *)&dword_10 + (v16 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain_n();
  for (; v17; uint64_t v17 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v18 = 4;
    while (1)
    {
      id v19 = (v16 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(v16 + 8 * v18);
      id v14 = v19;
      uint64_t v20 = v18 - 3;
      if (__OFADD__(v18 - 4, 1)) {
        break;
      }
      id v21 = [v19 personHandle];
      if (v21)
      {
        v22 = v21;
        v23 = (char *)[v21 emergencyType];

        if (v23 == (unsigned char *)&dword_0 + 1)
        {
          swift_bridgeObjectRelease_n();
          outlined destroy of PhoneCallNLv4Intent((uint64_t)__dst);
          return (uint64_t)v14;
        }
      }

      ++v18;
      if (v20 == v17) {
        goto LABEL_24;
      }
    }
    __break(1u);
LABEL_55:
    swift_bridgeObjectRetain_n();
  }
LABEL_24:
  swift_bridgeObjectRelease_n();
  outlined destroy of PhoneCallNLv4Intent((uint64_t)__dst);
  return 0;
}

uint64_t initializeBufferWithCopyOfBuffer for ContactDisambiguationPromptResponse(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  unsigned __int8 v4 = *(unsigned char *)(a2 + 8);
  outlined copy of ContactDisambiguationPromptResponse(*(id *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

void destroy for ContactDisambiguationPromptResponse(uint64_t a1)
{
}

uint64_t assignWithCopy for ContactDisambiguationPromptResponse(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  unsigned __int8 v4 = *(unsigned char *)(a2 + 8);
  outlined copy of ContactDisambiguationPromptResponse(*(id *)a2, v4);
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v3;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of ContactDisambiguationPromptResponse(v5, v6);
  return a1;
}

uint64_t assignWithTake for ContactDisambiguationPromptResponse(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  unsigned __int8 v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  unsigned __int8 v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  outlined consume of ContactDisambiguationPromptResponse(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContactDisambiguationPromptResponse(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFC && *(unsigned char *)(a1 + 9))
    {
      int v2 = *(_DWORD *)a1 + 251;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 4) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContactDisambiguationPromptResponse(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for ContactDisambiguationPromptResponse(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 3u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 4);
  }
}

uint64_t destructiveInjectEnumTag for ContactDisambiguationPromptResponse(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(void *)result = a2 - 4;
    LOBYTE(a2) = 4;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ContactDisambiguationPromptResponse()
{
  return &type metadata for ContactDisambiguationPromptResponse;
}

uint64_t destroy for ContactDisambiguationPromptResponseParser(uint64_t a1)
{
  uint64_t v2 = a1 + 48;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);

  return __swift_destroy_boxed_opaque_existential_1(v2);
}

uint64_t initializeWithCopy for ContactDisambiguationPromptResponseParser(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = a2 + 8;
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v5;
  uint64_t v6 = v5;
  uint64_t v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_bridgeObjectRetain();
  v7(a1 + 8, v4, v6);
  long long v8 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 48, a2 + 48);
  return a1;
}

void *assignWithCopy for ContactDisambiguationPromptResponseParser(void *a1, void *a2)
{
  uint64_t v4 = a2 + 6;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1(a1 + 1, a2 + 1);
  __swift_assign_boxed_opaque_existential_1(a1 + 6, v4);
  return a1;
}

uint64_t assignWithTake for ContactDisambiguationPromptResponseParser(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  __swift_destroy_boxed_opaque_existential_1(a1 + 48);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContactDisambiguationPromptResponseParser(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 88))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContactDisambiguationPromptResponseParser(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContactDisambiguationPromptResponseParser()
{
  return &type metadata for ContactDisambiguationPromptResponseParser;
}

uint64_t outlined destroy of DisambiguationReferenceResolver(uint64_t a1)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_1_112()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_2_127()
{
  return v0;
}

void OUTLINED_FUNCTION_4_107()
{
  uint64_t v1 = 41;
  unint64_t v2 = 0xE100000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t PhoneCallControlAction.isMicrophoneAction.getter(char a1)
{
  if (PhoneCallControlAction.rawValue.getter(a1) == 0x7263694D6574756DLL && v1 == 0xEE00656E6F68706FLL)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    _stringCompareWithSmolCheck(_:_:expecting:)();
    OUTLINED_FUNCTION_12_4();
  }
  return 1;
}

uint64_t PhoneCallControlAction.isHoldAction.getter(char a1)
{
  BOOL v4 = PhoneCallControlAction.rawValue.getter(a1) == 0x6F48656C62616E65 && v3 == 0xEA0000000000646CLL;
  if (v4
    || ((OUTLINED_FUNCTION_14_52(),
         _stringCompareWithSmolCheck(_:_:expecting:)(),
         OUTLINED_FUNCTION_12_4(),
         v2 == 0x48656C6261736964)
      ? (BOOL v5 = v1 == 0xEB00000000646C6FLL)
      : (BOOL v5 = 0),
        v5))
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    OUTLINED_FUNCTION_17_43();
    _stringCompareWithSmolCheck(_:_:expecting:)();
    OUTLINED_FUNCTION_15_0();
    return v2 & 1;
  }
}

unint64_t PhoneCallControlAction.description.getter(char a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000013;
      break;
    case 2:
      unint64_t result = OUTLINED_FUNCTION_2_128();
      break;
    case 3:
    case 8:
      unint64_t result = OUTLINED_FUNCTION_7_1();
      break;
    case 4:
      unint64_t result = OUTLINED_FUNCTION_3_111();
      break;
    case 5:
      unint64_t result = OUTLINED_FUNCTION_1_113();
      break;
    case 6:
      unint64_t result = OUTLINED_FUNCTION_8_101();
      break;
    case 7:
      unint64_t result = OUTLINED_FUNCTION_5_80();
      break;
    case 9:
      unint64_t result = 0xD000000000000015;
      break;
    case 10:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t PhoneCallControlNLIntent.Target.rawValue.getter(char a1)
{
  uint64_t result = 0x6172656D6163;
  switch(a1)
  {
    case 1:
      uint64_t result = OUTLINED_FUNCTION_13_60();
      break;
    case 2:
      uint64_t result = OUTLINED_FUNCTION_7_90();
      break;
    case 3:
      uint64_t result = OUTLINED_FUNCTION_66_2();
      break;
    case 4:
      uint64_t result = 0x656D756C6F76;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t PhoneCallControlAction.isCameraAction.getter(char a1)
{
  if (PhoneCallControlAction.rawValue.getter(a1) == 0x6143656C62616E65 && v1 == 0xEC0000006172656DLL)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_14_52();
    _stringCompareWithSmolCheck(_:_:expecting:)();
    OUTLINED_FUNCTION_12_4();
  }
  return 1;
}

uint64_t PhoneCallControlAction.isSpeakerphoneAction.getter(char a1)
{
  unint64_t v2 = PhoneCallControlAction.rawValue.getter(a1);
  if (v2 == 0xD000000000000012)
  {
    OUTLINED_FUNCTION_4_108((uint64_t)"turnOnSpeakerPhone");
    if (v3) {
      goto LABEL_4;
    }
  }
  _stringCompareWithSmolCheck(_:_:expecting:)();
  OUTLINED_FUNCTION_12_4();
  if (v1) {
    return 1;
  }
  if (v2 == 0xD000000000000013)
  {
    OUTLINED_FUNCTION_4_108((uint64_t)"turnOffSpeakerPhone");
    if (v3)
    {
LABEL_4:
      swift_bridgeObjectRelease();
      return 1;
    }
  }
  OUTLINED_FUNCTION_1_84();
  OUTLINED_FUNCTION_15_0();
  return v2 & 1;
}

uint64_t PhoneCallControlAction.isSwitchToFaceTimeAction.getter(char a1)
{
  unint64_t v2 = PhoneCallControlAction.rawValue.getter(a1);
  if (v2 == 0xD000000000000010)
  {
    OUTLINED_FUNCTION_4_108((uint64_t)"switchToFaceTime");
    if (v3) {
      goto LABEL_4;
    }
  }
  OUTLINED_FUNCTION_9_79();
  OUTLINED_FUNCTION_12_4();
  if (v1) {
    return 1;
  }
  if (v2 == 0xD000000000000015)
  {
    OUTLINED_FUNCTION_4_108((uint64_t)"switchToFaceTimeAudio");
    if (v3)
    {
LABEL_4:
      swift_bridgeObjectRelease();
      return 1;
    }
  }
  OUTLINED_FUNCTION_1_84();
  OUTLINED_FUNCTION_15_0();
  return v2 & 1;
}

unsigned char *PhoneCallControlNLIntent.__allocating_init(verb:target:)(char a1, char a2)
{
  uint64_t result = (unsigned char *)swift_allocObject();
  result[18] = 11;
  result[16] = a1;
  result[17] = a2;
  return result;
}

uint64_t PhoneCallControlAction.toSpeakableString.getter(char a1)
{
  PhoneCallControlAction.rawValue.getter(a1);
  String.toSpeakableString.getter();

  return swift_bridgeObjectRelease();
}

uint64_t PhoneCallControlNLIntent.target.getter()
{
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t PhoneCallControlNLIntent.action(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(unsigned __int8 *)(v2 + 18);
  if (result == 11)
  {
    uint64_t result = static PhoneCallControlAction.from(nlIntent:for:)(v2, a1, a2);
    *(unsigned char *)(v2 + 18) = result;
  }
  return result;
}

uint64_t static PhoneCallControlAction.from(nlIntent:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(unsigned __int8 *)(a1 + 17);
  switch(*(unsigned char *)(a1 + 16))
  {
    case 0:
      uint64_t result = 6;
      switch(v4)
      {
        case 1:
          return result;
        case 2:
          uint64_t result = 3;
          break;
        case 3:
          uint64_t result = 0;
          break;
        case 4:
        case 5:
          goto LABEL_5;
        default:
          swift_getObjectType();
          goto LABEL_25;
      }
      break;
    case 1:
      uint64_t result = 0xA0A01020705uLL >> (8 * v4);
      break;
    case 2:
      switch(*(unsigned char *)(a1 + 17))
      {
        case 1:
          swift_getObjectType();
          OUTLINED_FUNCTION_16_61();
          if (v12() == 2) {
            uint64_t result = 7;
          }
          else {
            uint64_t result = 6;
          }
          break;
        case 2:
          swift_getObjectType();
          OUTLINED_FUNCTION_16_61();
          if (v13()) {
            uint64_t result = 3;
          }
          else {
            uint64_t result = 2;
          }
          break;
        case 3:
          swift_getObjectType();
          OUTLINED_FUNCTION_16_61();
          uint64_t result = v14() & 1;
          break;
        case 4:
        case 5:
          goto LABEL_5;
        default:
          uint64_t ObjectType = swift_getObjectType();
          if ((*(uint64_t (**)(uint64_t, uint64_t))(a3 + 144))(ObjectType, a3)) {
            goto LABEL_15;
          }
LABEL_25:
          OUTLINED_FUNCTION_16_61();
          if (v15()) {
            uint64_t result = 4;
          }
          else {
            uint64_t result = 8;
          }
          break;
      }
      break;
    case 3:
      swift_getObjectType();
      if ((SPHCall.isFTVideo.getter() & 1) != 0 && (uint64_t v9 = OUTLINED_FUNCTION_12_62(), (v10(v9) & 1) == 0)) {
        uint64_t result = 4;
      }
      else {
        uint64_t result = 8;
      }
      break;
    case 4:
      swift_getObjectType();
      OUTLINED_FUNCTION_16_61();
      if (v6() & 1) != 0 && (uint64_t v7 = OUTLINED_FUNCTION_12_62(), (v8(v7))) {
LABEL_15:
      }
        uint64_t result = 5;
      else {
        uint64_t result = 9;
      }
      break;
    default:
LABEL_5:
      uint64_t result = 10;
      break;
  }
  return result;
}

void PhoneCallControlNLIntent.Verb.rawValue.getter(char a1)
{
  switch(a1)
  {
    case 1:
      OUTLINED_FUNCTION_11_76();
      break;
    case 2:
      OUTLINED_FUNCTION_20_50();
      break;
    case 3:
      OUTLINED_FUNCTION_7_1();
      break;
    case 4:
      OUTLINED_FUNCTION_24_10();
      break;
    case 5:
      OUTLINED_FUNCTION_10_72();
      break;
    default:
      return;
  }
}

PhoneCallFlowDelegatePlugin::PhoneCallControlNLIntent::Verb_optional __swiftcall PhoneCallControlNLIntent.Verb.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PhoneCallControlNLIntent.Verb.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 7) {
    return (PhoneCallFlowDelegatePlugin::PhoneCallControlNLIntent::Verb_optional)7;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::PhoneCallControlNLIntent::Verb_optional)v3;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallControlNLIntent.Verb()
{
  return specialized == infix<A>(_:_:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PhoneCallControlNLIntent.Verb()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneCallControlNLIntent.Verb()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallControlNLIntent.Verb(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::PhoneCallControlNLIntent::Verb_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallControlNLIntent.Verb@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallControlNLIntent::Verb_optional *a2@<X8>)
{
  result.value = PhoneCallControlNLIntent.Verb.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallControlNLIntent.Verb(void *a1@<X8>)
{
  PhoneCallControlNLIntent.Verb.rawValue.getter(*v1);
  *a1 = v3;
  a1[1] = v4;
}

void protocol witness for CustomStringConvertible.description.getter in conformance PhoneCallControlNLIntent.Verb()
{
  PhoneCallControlNLIntent.Verb.description.getter(*v0);
}

PhoneCallFlowDelegatePlugin::PhoneCallControlNLIntent::Target_optional __swiftcall PhoneCallControlNLIntent.Target.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PhoneCallControlNLIntent.Target.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return (PhoneCallFlowDelegatePlugin::PhoneCallControlNLIntent::Target_optional)5;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::PhoneCallControlNLIntent::Target_optional)v3;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallControlNLIntent.Target()
{
  return specialized == infix<A>(_:_:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PhoneCallControlNLIntent.Target()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneCallControlNLIntent.Target()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallControlNLIntent.Target(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::PhoneCallControlNLIntent::Target_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallControlNLIntent.Target@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallControlNLIntent::Target_optional *a2@<X8>)
{
  result.value = PhoneCallControlNLIntent.Target.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallControlNLIntent.Target@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = PhoneCallControlNLIntent.Target.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PhoneCallControlNLIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))();
}

unint64_t PhoneCallControlAction.rawValue.getter(char a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000013;
      break;
    case 2:
      unint64_t result = OUTLINED_FUNCTION_2_128();
      break;
    case 3:
    case 8:
      unint64_t result = OUTLINED_FUNCTION_7_1();
      break;
    case 4:
      unint64_t result = OUTLINED_FUNCTION_3_111();
      break;
    case 5:
      unint64_t result = OUTLINED_FUNCTION_1_113();
      break;
    case 6:
      unint64_t result = OUTLINED_FUNCTION_8_101();
      break;
    case 7:
      unint64_t result = OUTLINED_FUNCTION_5_80();
      break;
    case 9:
      unint64_t result = 0xD000000000000015;
      break;
    case 10:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

PhoneCallFlowDelegatePlugin::PhoneCallControlAction_optional __swiftcall PhoneCallControlAction.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PhoneCallControlAction.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xB) {
    return (PhoneCallFlowDelegatePlugin::PhoneCallControlAction_optional)11;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::PhoneCallControlAction_optional)v3;
  }
}

_UNKNOWN **static PhoneCallControlAction.allCases.getter()
{
  return &outlined read-only object #0 of static PhoneCallControlAction.allCases.getter;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallControlAction(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PhoneCallControlAction()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneCallControlAction(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallControlAction(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::PhoneCallControlAction_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallControlAction@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallControlAction_optional *a2@<X8>)
{
  result.value = PhoneCallControlAction.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallControlAction@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = PhoneCallControlAction.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance PhoneCallControlAction(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static PhoneCallControlAction.allCases.getter;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance PhoneCallControlAction()
{
  return PhoneCallControlAction.description.getter(*v0);
}

unint64_t lazy protocol witness table accessor for type PhoneCallControlNLIntent.Verb and conformance PhoneCallControlNLIntent.Verb()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallControlNLIntent.Verb and conformance PhoneCallControlNLIntent.Verb;
  if (!lazy protocol witness table cache variable for type PhoneCallControlNLIntent.Verb and conformance PhoneCallControlNLIntent.Verb)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallControlNLIntent.Verb and conformance PhoneCallControlNLIntent.Verb);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PhoneCallControlNLIntent.Target and conformance PhoneCallControlNLIntent.Target()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallControlNLIntent.Target and conformance PhoneCallControlNLIntent.Target;
  if (!lazy protocol witness table cache variable for type PhoneCallControlNLIntent.Target and conformance PhoneCallControlNLIntent.Target)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallControlNLIntent.Target and conformance PhoneCallControlNLIntent.Target);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PhoneCallControlAction and conformance PhoneCallControlAction()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallControlAction and conformance PhoneCallControlAction;
  if (!lazy protocol witness table cache variable for type PhoneCallControlAction and conformance PhoneCallControlAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallControlAction and conformance PhoneCallControlAction);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [PhoneCallControlAction] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [PhoneCallControlAction] and conformance [A];
  if (!lazy protocol witness table cache variable for type [PhoneCallControlAction] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [PhoneCallControlAction]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [PhoneCallControlAction] and conformance [A]);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PhoneCallControlNLIntent.Verb(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x40D95CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

void type metadata accessor for PhoneCallControlNLIntent.Verb()
{
}

unsigned char *storeEnumTagSinglePayload for PhoneCallControlNLIntent.Target(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x40DA5CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

void type metadata accessor for PhoneCallControlNLIntent.Target()
{
}

unsigned char *storeEnumTagSinglePayload for PhoneCallControlAction(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *unint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x40DB5CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

void type metadata accessor for PhoneCallControlAction()
{
}

uint64_t OUTLINED_FUNCTION_1_113()
{
  return 0x43656C6261736964;
}

uint64_t OUTLINED_FUNCTION_2_128()
{
  return 0x7263694D6574756DLL;
}

uint64_t OUTLINED_FUNCTION_3_111()
{
  return 0x6143656C62616E65;
}

unint64_t OUTLINED_FUNCTION_4_108@<X0>(uint64_t a1@<X8>)
{
  return (a1 - 32) | 0x8000000000000000;
}

uint64_t OUTLINED_FUNCTION_7_90()
{
  return 0x6F68706F7263696DLL;
}

uint64_t OUTLINED_FUNCTION_8_101()
{
  return 0x6F48656C62616E65;
}

uint64_t OUTLINED_FUNCTION_9_79()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_10_72()
{
  return 0x6C6576654C746573;
}

uint64_t OUTLINED_FUNCTION_11_76()
{
  return 0x656C6261736964;
}

uint64_t OUTLINED_FUNCTION_12_62()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_13_60()
{
  return 1684828008;
}

uint64_t OUTLINED_FUNCTION_17_43()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_20_50()
{
  return 0x656C67676F74;
}

uint64_t BusinessCompositionFlow.__allocating_init(parse:sharedGlobals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for CATOption();
  uint64_t v6 = OUTLINED_FUNCTION_11_0(v5);
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_4();
  uint64_t v7 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_4();
  uint64_t v13 = v12 - v11;
  OUTLINED_FUNCTION_12();
  v14();
  outlined init with copy of SignalProviding(a2, (uint64_t)v18);
  type metadata accessor for StartCallCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v15 = CATWrapperSimple.__allocating_init(options:globals:)();
  (*(void (**)(uint64_t, unsigned char *, ValueMetadata *, _UNKNOWN **, uint64_t))(v2 + 144))(v13, v18, &type metadata for PhoneCallFlowFactory, &protocol witness table for PhoneCallFlowFactory, v15);
  uint64_t v16 = OUTLINED_FUNCTION_48_21();
  __swift_destroy_boxed_opaque_existential_1(v16);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v7);
  return v2;
}

uint64_t BusinessCompositionFlow.__allocating_init(parse:sharedGlobals:phoneCallFactoryType:startCallCATsSimple:)()
{
  OUTLINED_FUNCTION_37_5();
  uint64_t v0 = swift_allocObject();
  BusinessCompositionFlow.init(parse:sharedGlobals:phoneCallFactoryType:startCallCATsSimple:)();
  return v0;
}

uint64_t BusinessCompositionFlow.init(parse:sharedGlobals:phoneCallFactoryType:startCallCATsSimple:)()
{
  OUTLINED_FUNCTION_37_5();
  uint64_t v6 = v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23BusinessCompositionFlow_parse;
  type metadata accessor for Parse();
  OUTLINED_FUNCTION_15();
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, v5);
  outlined init with take of AppSelectionSignalComponent(v4, v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23BusinessCompositionFlow_sharedGlobals);
  uint64_t v8 = v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23BusinessCompositionFlow_state;
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 2;
  uint64_t v9 = (void *)(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23BusinessCompositionFlow_phoneCallFactoryType);
  *uint64_t v9 = v3;
  v9[1] = v2;
  *(void *)(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23BusinessCompositionFlow_startCallCATsSimple) = v0;
  return v1;
}

uint64_t BusinessCompositionFlow.on(input:)()
{
  type metadata accessor for Input();
  OUTLINED_FUNCTION_0_0();
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_52();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.siriPhone);
  OUTLINED_FUNCTION_12();
  v3();
  swift_retain_n();
  unsigned int v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  p_vtable = &OBJC_METACLASS____TtC27PhoneCallFlowDelegatePlugin21PluginPrewarmProvider.vtable;
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315394;
    outlined copy of BusinessCompositionFlow.State(*(void *)(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23BusinessCompositionFlow_state), *(unsigned char *)(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23BusinessCompositionFlow_state + 8));
    uint64_t v8 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_39_10();
    *(_WORD *)(v7 + 12) = 2080;
    uint64_t v10 = Input.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v23);
    p_vtable = (void **)(&OBJC_METACLASS____TtC27PhoneCallFlowDelegatePlugin21PluginPrewarmProvider + 24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v12 = OUTLINED_FUNCTION_28_18();
    v13(v12);
    _os_log_impl(&dword_0, v4, v5, "#BusinessCompositionFlow entering on with state: %s, input: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
    OUTLINED_FUNCTION_39_10();
    uint64_t v14 = OUTLINED_FUNCTION_28_18();
    v15(v14);
  }

  uint64_t v16 = (char *)p_vtable[232] + v0;
  BOOL v17 = v16[8] == 2 && *(void *)v16 == 0;
  uint64_t v18 = v17;
  if (!v17)
  {
    id v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      id v21 = (uint8_t *)OUTLINED_FUNCTION_7_2();
      *(_WORD *)id v21 = 0;
      _os_log_impl(&dword_0, v19, v20, "#BusinessCompositionFlow ignoring focus since flow is not in initiated state", v21, 2u);
      OUTLINED_FUNCTION_6();
    }
  }
  return v18;
}

uint64_t BusinessCompositionFlow.execute()()
{
  OUTLINED_FUNCTION_1_0();
  v1[27] = v2;
  v1[28] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneError?);
  OUTLINED_FUNCTION_11_0(v3);
  v1[29] = OUTLINED_FUNCTION_35();
  uint64_t v4 = type metadata accessor for DialogPhase();
  OUTLINED_FUNCTION_11_0(v4);
  v1[30] = OUTLINED_FUNCTION_35();
  uint64_t v5 = type metadata accessor for CATOption();
  OUTLINED_FUNCTION_11_0(v5);
  v1[31] = OUTLINED_FUNCTION_35();
  uint64_t v6 = type metadata accessor for PhoneError();
  v1[32] = v6;
  OUTLINED_FUNCTION_11_0(v6);
  v1[33] = swift_task_alloc();
  v1[34] = swift_task_alloc();
  v1[35] = swift_task_alloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  long long *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **p_vtable;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  os_log_type_t v26;
  _WORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  void *v39;
  os_log_type_t v40;
  _WORD *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int EnumCaseMultiPayload;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  void *v58;
  uint64_t v59;
  void (*v60)(void);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  os_log_type_t v67;
  _WORD *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v74[2];
  uint64_t v75;

  v75 = v0;
  uint64_t v1 = (long long *)(v0 + 56);
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  *(void *)(v0 + 288) = __swift_project_value_buffer(v2, (uint64_t)static Logger.siriPhone);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.debug.getter();
  uint64_t v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = *(void *)(v0 + 224);
  if (v5)
  {
    uint64_t v7 = (_DWORD *)swift_slowAlloc();
    v74[0] = swift_slowAlloc();
    char *v7 = 136315138;
    uint64_t v8 = *(void *)(v6 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23BusinessCompositionFlow_state);
    uint64_t v9 = *(unsigned char *)(v6 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23BusinessCompositionFlow_state + 8);
    *(void *)(v0 + 136) = v8;
    *(unsigned char *)(v0 + 144) = v9;
    outlined copy of BusinessCompositionFlow.State(v8, v9);
    uint64_t v10 = String.init<A>(describing:)();
    *(void *)(v0 + 208) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v74);
    uint64_t v1 = (long long *)(v0 + 56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_39_10();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_33_9(&dword_0, v12, v13, "#BusinessCompositionFlow entering execute with state: %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {

    OUTLINED_FUNCTION_39_10();
  }
  uint64_t v14 = *(void *)(v0 + 224);
  uint64_t v15 = OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23BusinessCompositionFlow_sharedGlobals;
  *(void *)(v0 + 296) = OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23BusinessCompositionFlow_sharedGlobals;
  uint64_t v16 = v14 + v15;
  BOOL v17 = *(void *)(v14 + v15 + 24);
  uint64_t v18 = *(void *)(v14 + v15 + 32);
  __swift_project_boxed_opaque_existential_1((void *)(v14 + v15), v17);
  id v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 72))(v17, v18);
  os_log_type_t v20 = OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23BusinessCompositionFlow_parse;
  *(void *)(v0 + 304) = OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23BusinessCompositionFlow_parse;
  (*(void (**)(uint64_t))(*(void *)v19 + 192))(v14 + v20);
  swift_release();
  if (!*(void *)(v0 + 80))
  {
    outlined destroy of UUID?((uint64_t)v1, &demangling cache variable for type metadata for PhoneCallNLIntent?);
    unsigned __int8 v25 = (void *)Logger.logObject.getter();
    uint64_t v26 = static os_log_type_t.debug.getter();
    p_vtable = (void **)(&OBJC_METACLASS____TtC27PhoneCallFlowDelegatePlugin21PluginPrewarmProvider + 24);
    if (OUTLINED_FUNCTION_18(v26))
    {
      v27 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_32_2(v27);
      OUTLINED_FUNCTION_25_4(&dword_0, v28, v29, "#BusinessCompositionFlow parse is not .uso and/or failed to transform parse to NLIntent, cannot redirect to composition resolution flow");
      OUTLINED_FUNCTION_6();
    }
    v30 = *(void *)(v0 + 280);

    swift_storeEnumTagMultiPayload();
    _s27PhoneCallFlowDelegatePlugin0A5ErrorOACs0F0AAWlTm_15((unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError, (void (*)(uint64_t))type metadata accessor for PhoneError);
    v24 = OUTLINED_FUNCTION_20_0();
    PhoneError.logged()(v31);
    outlined destroy of PhoneError(v30);
    swift_willThrow();
    goto LABEL_25;
  }
  id v21 = *(void *)(v0 + 224);
  outlined init with take of AppSelectionSignalComponent(v1, v0 + 16);
  p_vtable = &OBJC_METACLASS____TtC27PhoneCallFlowDelegatePlugin21PluginPrewarmProvider.vtable;
  uint64_t v23 = v21 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23BusinessCompositionFlow_state;
  v24 = *(void *)(v21 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23BusinessCompositionFlow_state);
  if (!*(unsigned char *)(v21 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23BusinessCompositionFlow_state + 8))
  {
    outlined copy of BusinessCompositionFlow.State(*(void *)(v21 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23BusinessCompositionFlow_state), 0);
    outlined copy of BusinessCompositionFlow.State(v24, 0);
    outlined copy of BusinessCompositionFlow.State(v24, 0);
    outlined copy of BusinessCompositionFlow.State(v24, 0);
    swift_bridgeObjectRetain();
    uint64_t v32 = Logger.logObject.getter();
    uint64_t v33 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = swift_slowAlloc();
      v74[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 134218242;
      if (v24 >> 62)
      {
        swift_bridgeObjectRetain();
        char v35 = _CocoaArrayWrapper.endIndex.getter();
        OUTLINED_FUNCTION_11_77();
      }
      else
      {
        char v35 = *(void *)((char *)&dword_10 + (v24 & 0xFFFFFFFFFFFFFF8));
      }
      OUTLINED_FUNCTION_11_77();
      *(void *)(v0 + 176) = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_11_77();
      *(_WORD *)(v34 + 12) = 2080;
      type metadata accessor for CompositionResolutionEntity();
      swift_bridgeObjectRetain();
      Swift::Bool v36 = Array.description.getter();
      v38 = v37;
      OUTLINED_FUNCTION_11_77();
      *(void *)(v0 + 184) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v38, v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of BusinessCompositionFlow.State(v24, 0);
      OUTLINED_FUNCTION_11_77();
      _os_log_impl(&dword_0, v32, v33, "#BusinessCompositionFlow resolution completed with %ld entities %s", (uint8_t *)v34, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {
      outlined consume of BusinessCompositionFlow.State(v24, 0);
      OUTLINED_FUNCTION_11_77();

      swift_bridgeObjectRelease_n();
    }
    BusinessCompositionFlow.createMainFlow(entities:phoneCallNLIntent:)(v24, (void *)(v0 + 16));
    OUTLINED_FUNCTION_11_77();
    static ExecuteResponse.complete(next:)();
LABEL_38:
    swift_release();
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    goto LABEL_34;
  }
  if (*(unsigned char *)(v21 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23BusinessCompositionFlow_state + 8) == 1)
  {
    swift_errorRetain();
LABEL_24:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
LABEL_25:
    v46 = *(void *)(v0 + 256);
    v47 = (char *)p_vtable[232] + *(void *)(v0 + 224);
    v48 = *(void *)v47;
    *(void *)v47 = v24;
    v49 = v47[8];
    v47[8] = 1;
    swift_errorRetain();
    outlined consume of BusinessCompositionFlow.State(v48, v49);
    *(void *)(v0 + 200) = v24;
    swift_errorRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (swift_dynamicCast())
    {
      v50 = *(void *)(v0 + 264);
      v51 = *(void *)(v0 + 272);
      v52 = *(void *)(v0 + 232);
      __swift_storeEnumTagSinglePayload(v52, 0, 1, *(void *)(v0 + 256));
      outlined init with take of PhoneError(v52, v51);
      outlined init with copy of PhoneError(v51, v50);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v46 = *(void *)(v0 + 264);
      v54 = *(void *)(v0 + 272);
      if (EnumCaseMultiPayload == 21)
      {
        outlined destroy of PhoneError(*(void *)(v0 + 264));
        static ExecuteResponse.complete()();
        swift_errorRelease();
        outlined destroy of PhoneError(v54);
        goto LABEL_34;
      }
      outlined destroy of PhoneError(*(void *)(v0 + 272));
      outlined destroy of PhoneError(v46);
    }
    else
    {
      OUTLINED_FUNCTION_31_38();
      outlined destroy of UUID?(v0 + 200, &demangling cache variable for type metadata for PhoneError?);
    }
    swift_errorRetain();
    swift_errorRetain();
    v55 = Logger.logObject.getter();
    v56 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_18(v56))
    {
      v57 = (uint8_t *)OUTLINED_FUNCTION_30_34();
      v58 = (void *)swift_slowAlloc();
      *(_DWORD *)v57 = 138412290;
      swift_errorRetain();
      v59 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v58 = v59;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl(&dword_0, v55, (os_log_type_t)v46, "#BusinessCompositionFlow ERROR - %@. Falling back to MainFlow", v57, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    OUTLINED_FUNCTION_15_62();
    v60();
    static ExecuteResponse.complete(next:)();
    swift_release();
    swift_errorRelease();
LABEL_34:
    OUTLINED_FUNCTION_13_61();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_47_0();
    OUTLINED_FUNCTION_27_3();
    __asm { BRAA            X1, X16 }
  }
  switch(v24)
  {
    case 1uLL:
      os_log_type_t v39 = (void *)Logger.logObject.getter();
      v40 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_18(v40))
      {
        v41 = (_WORD *)OUTLINED_FUNCTION_7_2();
        OUTLINED_FUNCTION_32_2(v41);
        OUTLINED_FUNCTION_25_4(&dword_0, v42, v43, "#BusinessCompositionFlow unexpected state: resolutionInProgress");
        OUTLINED_FUNCTION_6();
      }
      v44 = *(void **)(v0 + 280);

      *v44 = 0x7469736F706D6F43;
      v44[1] = 0xEF776F6C466E6F69;
      v44[2] = 0xD000000000000014;
      v44[3] = 0x800000000049D2C0;
      swift_storeEnumTagMultiPayload();
      _s27PhoneCallFlowDelegatePlugin0A5ErrorOACs0F0AAWlTm_15((unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError, (void (*)(uint64_t))type metadata accessor for PhoneError);
      v24 = OUTLINED_FUNCTION_20_0();
      PhoneError.logged()(v45);
      outlined destroy of PhoneError((uint64_t)v44);
      goto LABEL_24;
    case 2uLL:
      type metadata accessor for PhoneCallCommonCATsSimple();
      static CATOption.defaultMode.getter();
      CATWrapperSimple.__allocating_init(options:globals:)();
      swift_retain();
      static DialogPhase.canceled.getter();
      outlined init with copy of SignalProviding(v16, v0 + 96);
      type metadata accessor for DialogOutputFactory();
      OUTLINED_FUNCTION_21_0();
      v63 = DialogOutputFactory.init(dialog:dialogPhase:sharedGlobals:)();
      v64 = swift_release();
      v65 = (*(uint64_t (**)(uint64_t))(*(void *)v63 + 112))(v64);
      swift_release();
      *(void *)(v0 + 168) = v65;
      type metadata accessor for SimpleOutputFlowAsync();
      static ExecuteResponse.complete<A>(next:)();
      goto LABEL_38;
    case 3uLL:
      v66 = (void *)Logger.logObject.getter();
      v67 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_18(v67))
      {
        v68 = (_WORD *)OUTLINED_FUNCTION_7_2();
        OUTLINED_FUNCTION_32_2(v68);
        OUTLINED_FUNCTION_25_4(&dword_0, v69, v70, "#BusinessCompositionFlow returns feature is disabled, start to render an error dialog");
        OUTLINED_FUNCTION_6();
      }

      v71 = (void *)swift_task_alloc();
      *(void *)(v0 + 312) = v71;
      *v71 = v0;
      v71[1] = BusinessCompositionFlow.execute();
      OUTLINED_FUNCTION_27_3();
      return BusinessCompositionFlow.makeOutputFlowForUnsupportedRequest()();
    default:
      *(void *)uint64_t v23 = 1;
      *(unsigned char *)(v23 + 8) = 2;
      outlined consume of BusinessCompositionFlow.State(0, 2);
      *(void *)(v0 + 192) = BusinessCompositionFlow.createCompositionResolutionFlow(phoneCallNLIntent:)((void *)(v0 + 16));
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConditionalFlow<CompositionResolutionResponse>);
      lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type ConditionalFlow<CompositionResolutionResponse> and conformance ConditionalFlow<A>, &demangling cache variable for type metadata for ConditionalFlow<CompositionResolutionResponse>);
      static ExecuteResponse.ongoing<A>(next:childCompletion:)();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1(v0 + 16);
      swift_release();
      goto LABEL_34;
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(void *)(v0 + 152) = *(void *)(v0 + 328);
  type metadata accessor for SimpleOutputFlowAsync();
  static ExecuteResponse.complete<A>(next:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  OUTLINED_FUNCTION_13_61();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  void *v15;
  uint64_t v16;
  void (*v17)(void);
  uint64_t (*v18)(void);
  uint64_t v20;

  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  uint64_t v1 = v0[40];
  uint64_t v2 = v0[32];
  uint64_t v3 = v0[28] + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23BusinessCompositionFlow_state;
  uint64_t v4 = *(void *)v3;
  *(void *)uint64_t v3 = v1;
  uint64_t v5 = *(unsigned char *)(v3 + 8);
  *(unsigned char *)(v3 + 8) = 1;
  swift_errorRetain();
  outlined consume of BusinessCompositionFlow.State(v4, v5);
  v0[25] = v1;
  swift_errorRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0)
  {
    OUTLINED_FUNCTION_31_38();
    outlined destroy of UUID?(v2, &demangling cache variable for type metadata for PhoneError?);
LABEL_6:
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v12 = Logger.logObject.getter();
    uint64_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)OUTLINED_FUNCTION_30_34();
      uint64_t v15 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 138412290;
      swift_errorRetain();
      uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
      v0[20] = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v15 = v16;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl(&dword_0, v12, v13, "#BusinessCompositionFlow ERROR - %@. Falling back to MainFlow", v14, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    OUTLINED_FUNCTION_15_62();
    v17();
    static ExecuteResponse.complete(next:)();
    swift_release();
    swift_errorRelease();
    goto LABEL_10;
  }
  uint64_t v7 = v0[33];
  uint64_t v6 = v0[34];
  uint64_t v8 = v0[29];
  __swift_storeEnumTagSinglePayload(v8, 0, 1, v0[32]);
  outlined init with take of PhoneError(v8, v6);
  outlined init with copy of PhoneError(v6, v7);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v11 = v0[33];
  uint64_t v10 = v0[34];
  if (EnumCaseMultiPayload != 21)
  {
    outlined destroy of PhoneError(v0[34]);
    outlined destroy of PhoneError(v11);
    goto LABEL_6;
  }
  outlined destroy of PhoneError(v0[33]);
  static ExecuteResponse.complete()();
  swift_errorRelease();
  outlined destroy of PhoneError(v10);
LABEL_10:
  OUTLINED_FUNCTION_13_61();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v18();
}

uint64_t BusinessCompositionFlow.execute()(uint64_t a1)
{
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_4_2();
  void *v7 = v6;
  *(void *)(v5 + 320) = v1;
  swift_task_dealloc();
  if (!v1) {
    *(void *)(v5 + 328) = a1;
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t closure #1 in BusinessCompositionFlow.execute()(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CompositionResolutionError?);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  __chkstk_darwin(v5);
  uint64_t v6 = type metadata accessor for CompositionResolutionError();
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v8 = __chkstk_darwin(v7);
  __chkstk_darwin(v8);
  uint64_t v9 = *a1;
  v15[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConditionalFlowResult<CompositionResolutionResponse>);
  v15[0] = v9;
  swift_retain();
  uint64_t v10 = BusinessCompositionFlow.extractResolutionResult(anyResolutionResult:)((uint64_t)v15);
  outlined destroy of UUID?((uint64_t)v15, &demangling cache variable for type metadata for Any?);
  uint64_t v11 = a2 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23BusinessCompositionFlow_state;
  uint64_t v12 = *(void *)(a2 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23BusinessCompositionFlow_state);
  *(void *)uint64_t v11 = v10;
  char v13 = *(unsigned char *)(v11 + 8);
  *(unsigned char *)(v11 + 8) = 0;
  return outlined consume of BusinessCompositionFlow.State(v12, v13);
}

uint64_t BusinessCompositionFlow.makeOutputFlowForUnsupportedRequest()()
{
  OUTLINED_FUNCTION_1_0();
  v1[13] = v0;
  uint64_t v2 = type metadata accessor for DialogPhase();
  OUTLINED_FUNCTION_11_0(v2);
  v1[14] = OUTLINED_FUNCTION_35();
  uint64_t v3 = type metadata accessor for OutputGenerationManifest();
  v1[15] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v1[16] = v4;
  v1[17] = *(void *)(v4 + 64);
  v1[18] = swift_task_alloc();
  v1[19] = swift_task_alloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v5, v6, v7);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v10)(uint64_t, void);
  void v11[5];
  void *v12;
  uint64_t v13;

  uint64_t v12 = v0;
  uint64_t v1 = v0[13];
  static DialogPhase.completion.getter();
  OutputGenerationManifest.init(dialogPhase:_:)();
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23BusinessCompositionFlow_startCallCATsSimple);
  type metadata accessor for SirikitDeviceState();
  uint64_t v3 = OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23BusinessCompositionFlow_sharedGlobals;
  v0[20] = OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23BusinessCompositionFlow_sharedGlobals;
  uint64_t v4 = (void *)(v1 + v3);
  uint64_t v5 = *(void *)(v1 + v3 + 24);
  uint64_t v6 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v5);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 8))(v11, v5, v6);
  uint64_t v7 = SirikitDeviceState.__allocating_init(from:)();
  v0[21] = v7;
  uint64_t v10 = (uint64_t (*)(uint64_t, void))(*(void *)(class metadata base offset for StartCallCATsSimple
                                                            + *v2
                                                            + 1072)
                                                + **(int **)(class metadata base offset for StartCallCATsSimple
                                                           + *v2
                                                           + 1072));
  uint64_t v8 = (void *)swift_task_alloc();
  v0[22] = v8;
  *uint64_t v8 = v0;
  v8[1] = BusinessCompositionFlow.makeOutputFlowForUnsupportedRequest();
  return v10(v7, 0);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[16] + 8))(v0[19], v0[15]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v1();
}

uint64_t BusinessCompositionFlow.makeOutputFlowForUnsupportedRequest()(uint64_t a1)
{
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_4_2();
  void *v7 = v6;
  *(void *)(v5 + 184) = v1;
  swift_task_dealloc();
  swift_release();
  if (!v1) {
    *(void *)(v5 + 192) = a1;
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v8, v9, v10);
}

void BusinessCompositionFlow.makeOutputFlowForUnsupportedRequest()()
{
  uint64_t v1 = v0[19];
  uint64_t v17 = v0[18];
  uint64_t v2 = v0[16];
  uint64_t v18 = v0[24];
  uint64_t v3 = v0[15];
  uint64_t v4 = v0[13];
  uint64_t v5 = (void *)(v4 + v0[20]);
  uint64_t v7 = v5[3];
  uint64_t v6 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v7, v6);
  uint64_t v8 = v0[5];
  uint64_t v9 = v0[7];
  uint64_t v10 = __swift_project_boxed_opaque_existential_1(v0 + 2, v8);
  v0[11] = v8;
  v0[12] = v9;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 8);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(boxed_opaque_existential_1, v10, v8);
  OUTLINED_FUNCTION_12();
  v12();
  unint64_t v13 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v4;
  *(void *)(v14 + 24) = v18;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 32))(v14 + v13, v17, v3);
  type metadata accessor for SimpleOutputFlowAsync();
  OUTLINED_FUNCTION_21_0();
  swift_retain();
  SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_27_3();
  __asm { BRAA            X2, X16 }
}

uint64_t closure #1 in BusinessCompositionFlow.makeOutputFlowForUnsupportedRequest()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[9] = a3;
  v4[10] = a4;
  v4[7] = a1;
  v4[8] = a2;
  return _swift_task_switch(closure #1 in BusinessCompositionFlow.makeOutputFlowForUnsupportedRequest(), 0, 0);
}

uint64_t closure #1 in BusinessCompositionFlow.makeOutputFlowForUnsupportedRequest()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = (void *)v10[9];
  uint64_t v12 = (void *)(v10[8] + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23BusinessCompositionFlow_sharedGlobals);
  uint64_t v13 = v12[3];
  uint64_t v14 = v12[4];
  __swift_project_boxed_opaque_existential_1(v12, v13);
  (*(void (**)(uint64_t, uint64_t))(v14 + 136))(v13, v14);
  uint64_t v15 = v10[5];
  uint64_t v16 = v10[6];
  __swift_project_boxed_opaque_existential_1(v10 + 2, v15);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_46A030;
  *(void *)(v17 + 32) = v11;
  uint64_t v27 = v17;
  specialized Array._endMutation()();
  v10[11] = v27;
  uint64_t v18 = *(void *)(v16 + 8);
  id v19 = v11;
  uint64_t v23 = (void *)swift_task_alloc();
  v10[12] = v23;
  void *v23 = v10;
  v23[1] = closure #1 in BusinessCompositionFlow.makeOutputFlowForUnsupportedRequest();
  uint64_t v24 = v10[10];
  uint64_t v25 = v10[7];
  return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v25, v27, v24, v15, v18, v20, v21, v22, a9, a10);
}

uint64_t closure #1 in BusinessCompositionFlow.makeOutputFlowForUnsupportedRequest()()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  OUTLINED_FUNCTION_47_0();
  return v1();
}

uint64_t BusinessCompositionFlow.createBusinessEntity(businessName:)()
{
  type metadata accessor for PhoneError();
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_2_1();
  type metadata accessor for UsoEntityBuilder_common_LocalBusiness();
  swift_allocObject();
  UsoEntityBuilder_common_LocalBusiness.init()();
  dispatch thunk of UsoEntityBuilder_common_LocalBusiness.setName(value:)();
  uint64_t v2 = static UsoBuilderConversionUtils.convertEntityBuilderToEntity(entityBuilder:)();
  if (v2)
  {
    uint64_t v3 = v2;
    swift_release();
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    uint64_t v5 = (void *)OUTLINED_FUNCTION_25_0(v4, (uint64_t)static Logger.siriPhone);
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_8_4(v6))
    {
      *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
      OUTLINED_FUNCTION_84(&dword_0, v7, v8, "#BusinessCompositionFlow failed to build common_LocalBusiness entity");
      OUTLINED_FUNCTION_6();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_LocalBusiness.Type);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_LocalBusiness.Type.Type);
    uint64_t v9 = String.init<A>(describing:)();
    OUTLINED_FUNCTION_36_32(v9, v10);
    _s27PhoneCallFlowDelegatePlugin0A5ErrorOACs0F0AAWlTm_15((unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError, (void (*)(uint64_t))type metadata accessor for PhoneError);
    OUTLINED_FUNCTION_4_8();
    uint64_t v3 = v0;
    PhoneError.logged()(v11);
    outlined destroy of PhoneError(v0);
    swift_willThrow();
    swift_release();
  }
  return v3;
}

uint64_t BusinessCompositionFlow.createPersonEntity()()
{
  type metadata accessor for PhoneError();
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_2_1();
  type metadata accessor for UsoEntityBuilder_common_Person();
  swift_allocObject();
  UsoEntityBuilder_common_Person.init()();
  uint64_t v2 = static UsoBuilderConversionUtils.convertEntityBuilderToEntity(entityBuilder:)();
  if (v2)
  {
    uint64_t v3 = v2;
    swift_release();
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    uint64_t v5 = (void *)OUTLINED_FUNCTION_25_0(v4, (uint64_t)static Logger.siriPhone);
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_8_4(v6))
    {
      *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
      OUTLINED_FUNCTION_84(&dword_0, v7, v8, "#BusinessCompositionFlow failed to build common_person entity");
      OUTLINED_FUNCTION_6();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Person.Type);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Person.Type.Type);
    uint64_t v9 = String.init<A>(describing:)();
    OUTLINED_FUNCTION_36_32(v9, v10);
    _s27PhoneCallFlowDelegatePlugin0A5ErrorOACs0F0AAWlTm_15((unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError, (void (*)(uint64_t))type metadata accessor for PhoneError);
    OUTLINED_FUNCTION_4_8();
    uint64_t v3 = v0;
    PhoneError.logged()(v11);
    outlined destroy of PhoneError(v0);
    swift_willThrow();
    swift_release();
  }
  return v3;
}

uint64_t BusinessCompositionFlow.updateNLContext()()
{
  uint64_t v1 = type metadata accessor for PommesContext.Source();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_4();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  uint64_t v9 = OUTLINED_FUNCTION_11_0(v8);
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_5_1();
  NLContextUpdate.init()();
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v7, enum case for PommesContext.Source.pluginDefined(_:), v1);
  PommesContext.init(source:domain:listenAfterSpeaking:)();
  uint64_t v10 = type metadata accessor for PommesContext();
  __swift_storeEnumTagSinglePayload(v0, 0, 1, v10);
  return NLContextUpdate.pommesContext.setter();
}

NSObject *BusinessCompositionFlow.createCompositionResolutionFlow(phoneCallNLIntent:)(void *a1)
{
  uint64_t v5 = v1;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v8 = OUTLINED_FUNCTION_11_0(v7);
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_52();
  uint64_t v9 = type metadata accessor for NLContextUpdate();
  OUTLINED_FUNCTION_0_0();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_65_0();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v13 = OUTLINED_FUNCTION_44_26();
  uint64_t v15 = v14(v13);
  specialized Collection.first.getter(v47);
  swift_bridgeObjectRelease();
  os_log_type_t v16 = v48;
  if (!v48)
  {
    outlined destroy of UUID?((uint64_t)v47, &demangling cache variable for type metadata for SiriPhoneContact?);
    goto LABEL_8;
  }
  __swift_project_boxed_opaque_existential_1(v47, v48);
  uint64_t v17 = OUTLINED_FUNCTION_44_26();
  uint64_t v19 = v18(v17);
  unint64_t v21 = v20;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
  if (!v21)
  {
LABEL_8:
    lazy protocol witness table accessor for type ParseError and conformance ParseError();
    OUTLINED_FUNCTION_4_8();
    *uint64_t v26 = xmmword_467750;
    swift_willThrow();
    return v15;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Logger.siriPhone);
  swift_bridgeObjectRetain_n();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  uint64_t v44 = v11;
  uint64_t v45 = v9;
  if (OUTLINED_FUNCTION_8_4(v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    v47[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, v47);
    OUTLINED_FUNCTION_27_41(v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v15, v16, "#BusinessCompositionFlow preparing to start a composition resolution flow for %s with location guard", v24, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v27 = BusinessCompositionFlow.createBusinessEntity(businessName:)();
  swift_bridgeObjectRelease();
  if (!v2)
  {
    uint64_t v46 = BusinessCompositionFlow.createPersonEntity()();
    BusinessCompositionFlow.updateNLContext()();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v29 = swift_allocObject();
    *(_OWORD *)(v29 + 16) = xmmword_46A030;
    v30 = (void *)(v5 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23BusinessCompositionFlow_sharedGlobals);
    uint64_t v31 = *(void *)(v5 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23BusinessCompositionFlow_sharedGlobals + 24);
    uint64_t v32 = *(void *)(v5 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23BusinessCompositionFlow_sharedGlobals + 32);
    __swift_project_boxed_opaque_existential_1(v30, v31);
    OUTLINED_FUNCTION_50_25();
    v33(v31, v32);
    uint64_t v34 = v48;
    uint64_t v35 = v49;
    __swift_project_boxed_opaque_existential_1(v47, v48);
    *(void *)(v29 + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 112))(v34, v35);
    uint64_t v50 = v29;
    specialized Array._endMutation()();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
    uint64_t v36 = v30[3];
    uint64_t v37 = v30[4];
    __swift_project_boxed_opaque_existential_1(v30, v36);
    OUTLINED_FUNCTION_50_25();
    v38(v36, v37);
    uint64_t v39 = v48;
    uint64_t v40 = v49;
    __swift_project_boxed_opaque_existential_1(v47, v48);
    OUTLINED_FUNCTION_12();
    v41();
    __swift_storeEnumTagSinglePayload(v3, 0, 1, v45);
    type metadata accessor for SiriEnvironment();
    static SiriEnvironment.default.getter();
    uint64_t v42 = SiriEnvironment.currentRequest.getter();
    swift_release();
    uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 120))(v27, v46, 0, v3, v42, v39, v40);
    swift_release();
    outlined destroy of UUID?(v3, &demangling cache variable for type metadata for NLContextUpdate?);
    uint64_t v50 = v43;
    type metadata accessor for GuardFlow();
    swift_allocObject();
    GuardFlow.init(preconditionFlows:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyValueFlow<CompositionResolutionResponse>);
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type AnyValueFlow<CompositionResolutionResponse> and conformance AnyValueFlow<A>, &demangling cache variable for type metadata for AnyValueFlow<CompositionResolutionResponse>);
    uint64_t v15 = Flow.guarded<A>(by:)();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v4, v45);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
  }
  return v15;
}

uint64_t BusinessCompositionFlow.createMainFlow(entities:phoneCallNLIntent:)(unint64_t a1, void *a2)
{
  uint64_t v6 = v2;
  type metadata accessor for PhoneError();
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_65_0();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse?);
  uint64_t v11 = OUTLINED_FUNCTION_11_0(v10);
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_21_46();
  uint64_t v12 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v14 = v13;
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_12();
  v16();
  if (!(a1 >> 62))
  {
    if (*(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8))) {
      goto LABEL_3;
    }
LABEL_11:
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    uint64_t v27 = OUTLINED_FUNCTION_25_0(v26, (uint64_t)static Logger.siriPhone);
    os_log_type_t v28 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)OUTLINED_FUNCTION_7_2();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl(&dword_0, v27, v28, "#BusinessCompositionFlow no entities found.", v29, 2u);
      OUTLINED_FUNCTION_6();
    }

    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v25) {
    goto LABEL_11;
  }
LABEL_3:
  BusinessCompositionFlow.constructCallParse(with:phoneCallNLIntent:)(a1, a2, v5);
  if (__swift_getEnumTagSinglePayload(v5, 1, v12) != 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v3, v12);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v3, v5, v12);
LABEL_16:
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6
                                                                  + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23BusinessCompositionFlow_phoneCallFactoryType
                                                                  + 8)
                                                      + 8))(v3, v6 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23BusinessCompositionFlow_sharedGlobals);
    uint64_t v30 = OUTLINED_FUNCTION_42_31();
    v31(v30);
    return v21;
  }
  outlined destroy of UUID?(v5, &demangling cache variable for type metadata for Parse?);
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = OUTLINED_FUNCTION_25_0(v17, (uint64_t)static Logger.siriPhone);
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    unint64_t v20 = (uint8_t *)OUTLINED_FUNCTION_7_2();
    *(_WORD *)unint64_t v20 = 0;
    _os_log_impl(&dword_0, v18, v19, "#BusinessCompositionFlow failed to construct a new parse after receiving composition resolution result", v20, 2u);
    OUTLINED_FUNCTION_6();
  }

  swift_storeEnumTagMultiPayload();
  _s27PhoneCallFlowDelegatePlugin0A5ErrorOACs0F0AAWlTm_15((unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError, (void (*)(uint64_t))type metadata accessor for PhoneError);
  OUTLINED_FUNCTION_4_8();
  uint64_t v21 = v4;
  PhoneError.logged()(v22);
  outlined destroy of PhoneError(v4);
  swift_willThrow();
  uint64_t v23 = OUTLINED_FUNCTION_42_31();
  v24(v23);
  return v21;
}

uint8_t *BusinessCompositionFlow.extractResolutionResult(anyResolutionResult:)(uint64_t a1)
{
  type metadata accessor for PhoneError();
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_52();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CompositionResolutionError?);
  uint64_t v6 = OUTLINED_FUNCTION_11_0(v5);
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_21_46();
  uint64_t v7 = type metadata accessor for CompositionResolutionError();
  OUTLINED_FUNCTION_0_0();
  uint64_t v9 = v8;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v46 - v14;
  outlined init with copy of Any?(a1, (uint64_t)v52);
  if (!v52[3])
  {
    outlined destroy of UUID?((uint64_t)v52, &demangling cache variable for type metadata for Any?);
    goto LABEL_10;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConditionalFlowResult<CompositionResolutionResponse>);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_10:
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    uint64_t v24 = OUTLINED_FUNCTION_25_0(v23, (uint64_t)static Logger.siriPhone);
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
      OUTLINED_FUNCTION_26_30(&dword_0, v26, v27, "#BusinessCompositionFlow failed to get CompositionResolutionResponse from the composition resolution flow");
      OUTLINED_FUNCTION_6();
    }

    *uint64_t v1 = 1;
    goto LABEL_15;
  }
  if (!v53)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    uint64_t v31 = OUTLINED_FUNCTION_25_0(v30, (uint64_t)static Logger.siriPhone);
    os_log_type_t v32 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v31, v32))
    {
      *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
      OUTLINED_FUNCTION_26_30(&dword_0, v33, v34, "#BusinessCompositionFlow location guard flow failed.");
      OUTLINED_FUNCTION_6();
    }

LABEL_15:
    swift_storeEnumTagMultiPayload();
    _s27PhoneCallFlowDelegatePlugin0A5ErrorOACs0F0AAWlTm_15((unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError, (void (*)(uint64_t))type metadata accessor for PhoneError);
    OUTLINED_FUNCTION_4_8();
    PhoneError.logged()(v28);
    outlined destroy of PhoneError((uint64_t)v1);
    swift_willThrow();
    return v1;
  }
  uint64_t v1 = (uint8_t *)v9;
  swift_retain();
  CompositionResolutionResponse.error.getter();
  if (__swift_getEnumTagSinglePayload(v2, 1, v7) == 1)
  {
    outlined destroy of UUID?(v2, &demangling cache variable for type metadata for CompositionResolutionError?);
    uint64_t v1 = (uint8_t *)CompositionResolutionResponse.entities.getter();
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.siriPhone);
    swift_bridgeObjectRetain_n();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      os_log_type_t v19 = (uint8_t *)swift_slowAlloc();
      v51 = (void (*)(char *, char *, uint64_t))swift_slowAlloc();
      v52[0] = (uint64_t)v51;
      *(_DWORD *)os_log_type_t v19 = 136315138;
      uint64_t v50 = v19 + 4;
      type metadata accessor for CompositionResolutionEntity();
      swift_bridgeObjectRetain();
      uint64_t v20 = Array.description.getter();
      unint64_t v22 = v21;
      swift_bridgeObjectRelease();
      uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v17, v18, "#BusinessCompositionFlow successfully resolved composition entity to %s", v19, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_release_n();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v15, v2, v7);
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)static Logger.siriPhone);
    v51 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    v51(v13, v15, v7);
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    v38 = (void (*)(uint64_t))v37;
    if (os_log_type_enabled(v36, v37))
    {
      LODWORD(v50) = v38;
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      uint64_t v49 = swift_slowAlloc();
      v52[0] = v49;
      v47 = v39;
      os_log_t v48 = v36;
      *(_DWORD *)uint64_t v39 = 136315138;
      _s27PhoneCallFlowDelegatePlugin0A5ErrorOACs0F0AAWlTm_15(&lazy protocol witness table cache variable for type CompositionResolutionError and conformance CompositionResolutionError, (void (*)(uint64_t))&type metadata accessor for CompositionResolutionError);
      uint64_t v40 = Error.localizedDescription.getter();
      v38 = (void (*)(uint64_t))v41;
      uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, v52);
      OUTLINED_FUNCTION_27_41(v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v43 = OUTLINED_FUNCTION_23_48();
      v38(v43);
      uint64_t v1 = v47;
      uint64_t v36 = v48;
      _os_log_impl(&dword_0, v48, (os_log_type_t)v50, "#BusinessCompositionFlow composition resolution failed with error: %s", v47, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {
      uint64_t v44 = OUTLINED_FUNCTION_23_48();
      v38(v44);
    }

    _s27PhoneCallFlowDelegatePlugin0A5ErrorOACs0F0AAWlTm_15(&lazy protocol witness table cache variable for type CompositionResolutionError and conformance CompositionResolutionError, (void (*)(uint64_t))&type metadata accessor for CompositionResolutionError);
    OUTLINED_FUNCTION_4_8();
    v51(v45, v15, v7);
    swift_willThrow();
    swift_release_n();
    ((void (*)(char *, uint64_t))v38)(v15, v7);
  }
  return v1;
}

uint64_t BusinessCompositionFlow.constructCallParse(with:phoneCallNLIntent:)@<X0>(unint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  v103 = a2;
  uint64_t v108 = a3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  uint64_t v5 = OUTLINED_FUNCTION_11_0(v4);
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_3_1();
  uint64_t v95 = v6;
  OUTLINED_FUNCTION_36();
  type metadata accessor for USOParse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v97 = v8;
  uint64_t v98 = v7;
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_3_1();
  uint64_t v96 = v9;
  OUTLINED_FUNCTION_36();
  uint64_t v94 = type metadata accessor for Siri_Nlu_External_UserParse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v93 = v10;
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_5_8();
  uint64_t v90 = v12;
  __chkstk_darwin(v13);
  v92 = (char *)v88 - v14;
  OUTLINED_FUNCTION_36();
  uint64_t v102 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  OUTLINED_FUNCTION_0_0();
  uint64_t v91 = v15;
  __chkstk_darwin(v16);
  OUTLINED_FUNCTION_3_1();
  uint64_t v89 = v17;
  OUTLINED_FUNCTION_36();
  uint64_t v18 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v19 = OUTLINED_FUNCTION_11_0(v18);
  __chkstk_darwin(v19);
  OUTLINED_FUNCTION_3_1();
  uint64_t v107 = v20;
  OUTLINED_FUNCTION_36();
  type metadata accessor for Siri_Nlu_External_UserStatedTask();
  OUTLINED_FUNCTION_0_0();
  uint64_t v109 = v22;
  uint64_t v110 = v21;
  __chkstk_darwin(v21);
  OUTLINED_FUNCTION_5_8();
  v88[1] = v23;
  __chkstk_darwin(v24);
  v112 = (char *)v88 - v25;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoBuilderOptions?);
  uint64_t v27 = OUTLINED_FUNCTION_11_0(v26);
  __chkstk_darwin(v27);
  OUTLINED_FUNCTION_3_1();
  uint64_t v106 = v28;
  OUTLINED_FUNCTION_36();
  type metadata accessor for UsoIdentifier();
  OUTLINED_FUNCTION_0_0();
  uint64_t v104 = v30;
  uint64_t v105 = v29;
  __chkstk_darwin(v29);
  OUTLINED_FUNCTION_5_1();
  type metadata accessor for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues();
  OUTLINED_FUNCTION_0_0();
  uint64_t v100 = v32;
  uint64_t v101 = v31;
  __chkstk_darwin(v31);
  OUTLINED_FUNCTION_3_1();
  uint64_t v99 = v33;
  OUTLINED_FUNCTION_36();
  type metadata accessor for UsoTaskBuilder_call_common_PhoneCall();
  OUTLINED_FUNCTION_21_0();
  uint64_t v111 = UsoTaskBuilder_call_common_PhoneCall.init()();
  type metadata accessor for UsoEntityBuilder_common_PhoneCall();
  OUTLINED_FUNCTION_21_0();
  UsoEntityBuilder_common_PhoneCall.init()();
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
    if (!v34) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v34 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (!v34) {
      goto LABEL_9;
    }
  }
  if (v34 < 1)
  {
    __break(1u);
    swift_once();
    uint64_t v53 = type metadata accessor for Logger();
    __swift_project_value_buffer(v53, (uint64_t)static Logger.siriPhone);
    OUTLINED_FUNCTION_48_21();
    swift_errorRetain();
    swift_errorRetain();
    v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (_DWORD *)OUTLINED_FUNCTION_30_34();
      v57 = (void *)swift_slowAlloc();
      _DWORD *v56 = 138412290;
      swift_errorRetain();
      uint64_t v58 = _swift_stdlib_bridgeErrorToNSError();
      v113[0] = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v57 = v58;
      swift_errorRelease();
      swift_errorRelease();
      OUTLINED_FUNCTION_33_9(&dword_0, v59, v60, "#BusinessCompositionFlow encountered error while constructing call parse %@");
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();

      swift_release();
      swift_release();
    }
    else
    {

      swift_release();
      swift_release();
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_errorRelease();
    swift_release();
    OUTLINED_FUNCTION_11();
    v86();
    uint64_t v85 = type metadata accessor for Parse();
    uint64_t v83 = v108;
    uint64_t v84 = 1;
    return __swift_storeEnumTagSinglePayload(v83, v84, 1, v85);
  }
  uint64_t v35 = 0;
  do
  {
    if ((a1 & 0xC000000000000001) != 0) {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      swift_retain();
    }
    ++v35;
    type metadata accessor for UsoEntityBuilder_common_Person();
    OUTLINED_FUNCTION_21_0();
    UsoEntityBuilder_common_Person.init()();
    CompositionResolutionEntity.usoEntity.getter();
    OUTLINED_FUNCTION_48_21();
    static UsoBuilderConversionUtils.copyEntityDataToEntityBuilder(entityBuilder:entity:copyValueType:copyIdentifiers:copyUtteranceAlignments:)();
    swift_release();
    swift_retain();
    dispatch thunk of UsoEntityBuilder_common_PhoneCall.addRecipients(value:)();
    swift_release();
    swift_release_n();
  }
  while (v34 != v35);
LABEL_9:
  swift_bridgeObjectRelease();
  uint64_t v36 = v111;
  dispatch thunk of Uso_VerbTemplateBuilder_Target.setTarget(value:)();
  uint64_t v37 = v103[3];
  uint64_t v38 = v103[4];
  __swift_project_boxed_opaque_existential_1(v103, v37);
  uint64_t v39 = OUTLINED_FUNCTION_48_21();
  switch(v40(v39, v38))
  {
    case 1u:
    case 2u:
    case 3u:
      uint64_t v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v37) {
        goto LABEL_12;
      }
      break;
    case 4u:
      break;
    default:
      swift_bridgeObjectRelease();
LABEL_12:
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v41 = type metadata accessor for Logger();
      __swift_project_value_buffer(v41, (uint64_t)static Logger.siriPhone);
      uint64_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = (_WORD *)OUTLINED_FUNCTION_7_2();
        OUTLINED_FUNCTION_32_2(v44);
        _os_log_impl(&dword_0, v42, v43, "#BusinessCompositionFlow found speakerphone attribute - adding it to new parse", (uint8_t *)v37, 2u);
        OUTLINED_FUNCTION_6();
      }

      type metadata accessor for UsoEntityBuilder_applePhoneCall_PhoneCallAttribute();
      OUTLINED_FUNCTION_21_0();
      UsoEntityBuilder_applePhoneCall_PhoneCallAttribute.init()();
      uint64_t v45 = v99;
      uint64_t v46 = v100;
      uint64_t v47 = v101;
      (*(void (**)(uint64_t, void, uint64_t))(v100 + 104))(v99, enum case for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues.applePhoneCall_PhoneCallAttribute_PhoneCallNounSpeakerphone(_:), v101);
      dispatch thunk of UsoEntityBuilder_applePhoneCall_PhoneCallAttribute.setDefinedValue(value:)();
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v47);
      swift_retain();
      dispatch thunk of UsoEntityBuilder_common_PhoneCall.addAttributes(value:)();
      swift_release_n();
      break;
  }
  UsoIdentifier.init(value:appBundleId:namespace:probability:)();
  dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)();
  OUTLINED_FUNCTION_11();
  v48();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v49 = swift_allocObject();
  *(_OWORD *)(v49 + 16) = xmmword_46A030;
  *(void *)(v49 + 32) = v36;
  v113[0] = v49;
  specialized Array._endMutation()();
  uint64_t v50 = type metadata accessor for UsoBuilderOptions();
  uint64_t v51 = v106;
  __swift_storeEnumTagSinglePayload(v106, 1, 1, v50);
  swift_retain();
  uint64_t v52 = static UsoGraphBuilder.buildGraphWithOptions(taskBuilders:options:)();
  swift_bridgeObjectRelease();
  outlined destroy of UUID?(v51, &demangling cache variable for type metadata for UsoBuilderOptions?);
  Siri_Nlu_External_UserStatedTask.init()();
  static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)();
  Siri_Nlu_External_UserStatedTask.task.setter();
  uint64_t v61 = v89;
  Siri_Nlu_External_UserDialogAct.init()();
  OUTLINED_FUNCTION_12();
  v62();
  Siri_Nlu_External_UserDialogAct.userStatedTask.setter();
  uint64_t v107 = v52;
  v63 = v92;
  Siri_Nlu_External_UserParse.init()();
  Siri_Nlu_External_UserParse.probability.setter();
  v64 = (void (*)(uint64_t *, void))Siri_Nlu_External_UserParse.userDialogActs.modify();
  uint64_t v66 = v65;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  uint64_t v67 = *(void *)(*(void *)v66 + 16);
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  *(void *)(*(void *)v66 + 16) = v67 + 1;
  uint64_t v68 = v91;
  OUTLINED_FUNCTION_12();
  v69();
  v64(v113, 0);
  uint64_t v70 = v93;
  uint64_t v71 = v94;
  OUTLINED_FUNCTION_12();
  v72();
  uint64_t v73 = enum case for Siri_Nlu_External_Parser.ParserIdentifier.overrides(_:);
  uint64_t v74 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  OUTLINED_FUNCTION_15();
  uint64_t v76 = v95;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v75 + 104))(v95, v73, v74);
  __swift_storeEnumTagSinglePayload(v76, 0, 1, v74);
  uint64_t v77 = v96;
  USOParse.init(userParse:parserIdentifier:appBundleId:)();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v70 + 8))(v63, v71);
  (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v61, v102);
  OUTLINED_FUNCTION_11();
  v78();
  uint64_t v79 = v108;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v97 + 32))(v108, v77, v98);
  uint64_t v80 = enum case for Parse.uso(_:);
  uint64_t v81 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_15();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v82 + 104))(v79, v80, v81);
  uint64_t v83 = v79;
  uint64_t v84 = 0;
  uint64_t v85 = v81;
  return __swift_storeEnumTagSinglePayload(v83, v84, 1, v85);
}

uint64_t BusinessCompositionFlow.execute(completion:)()
{
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t BusinessCompositionFlow.deinit()
{
  type metadata accessor for Parse();
  OUTLINED_FUNCTION_15();
  OUTLINED_FUNCTION_11();
  v1();
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23BusinessCompositionFlow_sharedGlobals);
  outlined consume of BusinessCompositionFlow.State(*(void *)(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23BusinessCompositionFlow_state), *(unsigned char *)(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23BusinessCompositionFlow_state + 8));
  swift_release();
  return v0;
}

uint64_t BusinessCompositionFlow.__deallocating_deinit()
{
  BusinessCompositionFlow.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Flow.on(input:) in conformance BusinessCompositionFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance BusinessCompositionFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 232))();
}

uint64_t protocol witness for Flow.execute() in conformance BusinessCompositionFlow(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 160) + **(int **)(**(void **)v1 + 160));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return v6(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance BusinessCompositionFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for BusinessCompositionFlow();

  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t outlined copy of BusinessCompositionFlow.State(uint64_t a1, char a2)
{
  if (a2 == 1) {
    return swift_errorRetain();
  }
  if (!a2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of BusinessCompositionFlow.State(uint64_t a1, char a2)
{
  if (a2 == 1) {
    return swift_errorRelease();
  }
  if (!a2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t partial apply for closure #1 in BusinessCompositionFlow.execute()(uint64_t *a1)
{
  return closure #1 in BusinessCompositionFlow.execute()(a1, v1);
}

uint64_t type metadata accessor for BusinessCompositionFlow()
{
  uint64_t result = type metadata singleton initialization cache for BusinessCompositionFlow;
  if (!type metadata singleton initialization cache for BusinessCompositionFlow) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t base witness table accessor for Flow in BusinessCompositionFlow()
{
  return _s27PhoneCallFlowDelegatePlugin0A5ErrorOACs0F0AAWlTm_15(&lazy protocol witness table cache variable for type BusinessCompositionFlow and conformance BusinessCompositionFlow, (void (*)(uint64_t))type metadata accessor for BusinessCompositionFlow);
}

uint64_t base witness table accessor for SiriEnvironmentLocating in BusinessCompositionFlow()
{
  return _s27PhoneCallFlowDelegatePlugin0A5ErrorOACs0F0AAWlTm_15(&lazy protocol witness table cache variable for type BusinessCompositionFlow and conformance BusinessCompositionFlow, (void (*)(uint64_t))type metadata accessor for BusinessCompositionFlow);
}

uint64_t ObjC metadata update function for BusinessCompositionFlow()
{
  return type metadata accessor for BusinessCompositionFlow();
}

uint64_t type metadata completion function for BusinessCompositionFlow()
{
  uint64_t result = type metadata accessor for Parse();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for BusinessCompositionFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of BusinessCompositionFlow.State(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for BusinessCompositionFlow.State(uint64_t a1)
{
  return outlined consume of BusinessCompositionFlow.State(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t assignWithCopy for BusinessCompositionFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of BusinessCompositionFlow.State(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  *(void *)a1 = v3;
  char v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of BusinessCompositionFlow.State(v5, v6);
  return a1;
}

uint64_t assignWithTake for BusinessCompositionFlow.State(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  outlined consume of BusinessCompositionFlow.State(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for BusinessCompositionFlow.State(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(unsigned char *)(a1 + 9))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BusinessCompositionFlow.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for BusinessCompositionFlow.State(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for BusinessCompositionFlow.State(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

void *type metadata accessor for BusinessCompositionFlow.State()
{
  return &unk_56D210;
}

uint64_t _s27PhoneCallFlowDelegatePlugin0A5ErrorOACs0F0AAWlTm_15(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_4129F8()
{
  uint64_t v1 = type metadata accessor for OutputGenerationManifest();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = (v6 + 32) & ~v6;
  uint64_t v8 = v7 + *(void *)(v5 + 64);
  uint64_t v9 = v6 | 7;
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v7, v1);

  return _swift_deallocObject(v0, v8, v9);
}

uint64_t partial apply for closure #1 in BusinessCompositionFlow.makeOutputFlowForUnsupportedRequest()(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for OutputGenerationManifest() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return closure #1 in BusinessCompositionFlow.makeOutputFlowForUnsupportedRequest()(a1, v5, v6, v7);
}

uint64_t OUTLINED_FUNCTION_11_77()
{
  return outlined consume of BusinessCompositionFlow.State(v0, 0);
}

uint64_t OUTLINED_FUNCTION_13_61()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_23_48()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_30_34()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_31_38()
{
  uint64_t v2 = *(void *)(v0 + 256);
  uint64_t v3 = *(void *)(v0 + 232);
  return __swift_storeEnumTagSinglePayload(v3, 1, 1, v2);
}

uint64_t OUTLINED_FUNCTION_36_32(uint64_t a1, uint64_t a2)
{
  *uint64_t v2 = a1;
  v2[1] = a2;
  v2[2] = 0;
  v2[3] = 0;
  return swift_storeEnumTagMultiPayload();
}

uint64_t OUTLINED_FUNCTION_42_31()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_44_26()
{
  return v0;
}

uint64_t OutputPublisherWrapper.publish(output:_:)()
{
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
  return dispatch thunk of OutputPublisher.publish(output:_:)();
}

uint64_t OutputPublisherWrapper.publish(output:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return _swift_task_switch(OutputPublisherWrapper.publish(output:), 0, 0);
}

uint64_t OutputPublisherWrapper.publish(output:)()
{
  uint64_t v1 = (void *)v0[3];
  uint64_t v2 = v1[10];
  uint64_t v3 = v1[11];
  __swift_project_boxed_opaque_existential_1(v1 + 7, v2);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[4] = v4;
  *uint64_t v4 = v0;
  v4[1] = OutputPublisherWrapper.publish(output:);
  uint64_t v5 = v0[2];
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v5, v2, v3);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t protocol witness for OutputPublisher.publish(output:_:) in conformance OutputPublisherWrapper()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))();
}

uint64_t protocol witness for OutputPublisherAsync.publish(output:) in conformance OutputPublisherWrapper(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 112) + **(int **)(**(void **)v1 + 112));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for Flow.execute() in conformance PhoneFlow<A, B>;
  return v6(a1);
}

uint64_t type metadata accessor for OutputPublisherWrapper()
{
  return self;
}

PhoneCallFlowDelegatePlugin::UnsupportedFlowCATsSimple::Properties_optional __swiftcall UnsupportedFlowCATsSimple.Properties.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v3._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of UnsupportedFlowCATsSimple.Properties.init(rawValue:), v3);
  OUTLINED_FUNCTION_15_0();
  if (v1 >= 7) {
    return (PhoneCallFlowDelegatePlugin::UnsupportedFlowCATsSimple::Properties_optional)7;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::UnsupportedFlowCATsSimple::Properties_optional)v1;
  }
}

void UnsupportedFlowCATsSimple.Properties.rawValue.getter(char a1)
{
  switch(a1)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      OUTLINED_FUNCTION_24_10();
      break;
    default:
      return;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance UnsupportedFlowCATsSimple.Properties(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance UnsupportedFlowCATsSimple.Properties()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance UnsupportedFlowCATsSimple.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UnsupportedFlowCATsSimple.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::UnsupportedFlowCATsSimple::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance UnsupportedFlowCATsSimple.Properties@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::UnsupportedFlowCATsSimple::Properties_optional *a2@<X8>)
{
  result.value = UnsupportedFlowCATsSimple.Properties.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance UnsupportedFlowCATsSimple.Properties()
{
  char v1 = OUTLINED_FUNCTION_32();
  UnsupportedFlowCATsSimple.Properties.rawValue.getter(v1);
  *uint64_t v0 = v2;
  v0[1] = v3;
}

uint64_t UnsupportedFlowCATsSimple.deleteCallHistory()()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  char v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *char v1 = v2;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  OUTLINED_FUNCTION_24_10();
  unint64_t v3 = OUTLINED_FUNCTION_44_0(33);
  return v4(v3);
}

BOOL UnsupportedFlowCATsSimple.DeleteCallHistoryDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of UnsupportedFlowCATsSimple.DeleteCallHistoryDialogIds.init(rawValue:);
  return PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds.init(rawValue:)(a1, v1);
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance UnsupportedFlowCATsSimple.DeleteCallHistoryDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = UnsupportedFlowCATsSimple.DeleteCallHistoryDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t UnsupportedFlowCATsSimple.deleteCallHistoryAsLabels()()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v1 = OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_19_5(v1);
  lazy protocol witness table accessor for type UnsupportedFlowCATsSimple.DeleteCallHistoryDialogIds and conformance UnsupportedFlowCATsSimple.DeleteCallHistoryDialogIds();
  OUTLINED_FUNCTION_25_1();
  *uint64_t v0 = v2;
  v0[1] = UnsupportedFlowCATs.deleteVoicemail();
  OUTLINED_FUNCTION_24_10();
  unint64_t v3 = OUTLINED_FUNCTION_21(33);
  return v4(v3);
}

unint64_t lazy protocol witness table accessor for type UnsupportedFlowCATsSimple.DeleteCallHistoryDialogIds and conformance UnsupportedFlowCATsSimple.DeleteCallHistoryDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.DeleteCallHistoryDialogIds and conformance UnsupportedFlowCATsSimple.DeleteCallHistoryDialogIds;
  if (!lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.DeleteCallHistoryDialogIds and conformance UnsupportedFlowCATsSimple.DeleteCallHistoryDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.DeleteCallHistoryDialogIds and conformance UnsupportedFlowCATsSimple.DeleteCallHistoryDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.DeleteCallHistoryDialogIds and conformance UnsupportedFlowCATsSimple.DeleteCallHistoryDialogIds;
  if (!lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.DeleteCallHistoryDialogIds and conformance UnsupportedFlowCATsSimple.DeleteCallHistoryDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.DeleteCallHistoryDialogIds and conformance UnsupportedFlowCATsSimple.DeleteCallHistoryDialogIds);
  }
  return result;
}

uint64_t UnsupportedFlowCATsSimple.deleteVoicemail()()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *uint64_t v1 = v2;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  OUTLINED_FUNCTION_24_10();
  unint64_t v3 = OUTLINED_FUNCTION_44_0(31);
  return v4(v3);
}

BOOL UnsupportedFlowCATsSimple.DeleteVoicemailDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of UnsupportedFlowCATsSimple.DeleteVoicemailDialogIds.init(rawValue:);
  return PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds.init(rawValue:)(a1, v1);
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance UnsupportedFlowCATsSimple.DeleteVoicemailDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = UnsupportedFlowCATsSimple.DeleteVoicemailDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t UnsupportedFlowCATsSimple.deleteVoicemailAsLabels()()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v1 = OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_19_5(v1);
  lazy protocol witness table accessor for type UnsupportedFlowCATsSimple.DeleteVoicemailDialogIds and conformance UnsupportedFlowCATsSimple.DeleteVoicemailDialogIds();
  OUTLINED_FUNCTION_25_1();
  *uint64_t v0 = v2;
  v0[1] = UnsupportedFlowCATs.deleteVoicemail();
  OUTLINED_FUNCTION_24_10();
  unint64_t v3 = OUTLINED_FUNCTION_21(31);
  return v4(v3);
}

unint64_t lazy protocol witness table accessor for type UnsupportedFlowCATsSimple.DeleteVoicemailDialogIds and conformance UnsupportedFlowCATsSimple.DeleteVoicemailDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.DeleteVoicemailDialogIds and conformance UnsupportedFlowCATsSimple.DeleteVoicemailDialogIds;
  if (!lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.DeleteVoicemailDialogIds and conformance UnsupportedFlowCATsSimple.DeleteVoicemailDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.DeleteVoicemailDialogIds and conformance UnsupportedFlowCATsSimple.DeleteVoicemailDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.DeleteVoicemailDialogIds and conformance UnsupportedFlowCATsSimple.DeleteVoicemailDialogIds;
  if (!lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.DeleteVoicemailDialogIds and conformance UnsupportedFlowCATsSimple.DeleteVoicemailDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.DeleteVoicemailDialogIds and conformance UnsupportedFlowCATsSimple.DeleteVoicemailDialogIds);
  }
  return result;
}

uint64_t UnsupportedFlowCATsSimple.searchCallHistory(supportsAppLaunch:nonDefaultAppName:isVoicemail:device:)()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_36_33(v1, v2, v3, v4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v5);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v6, v7, v8);
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void (*v12)(void);
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v18;

  OUTLINED_FUNCTION_29_0();
  uint64_t v18 = v5;
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_26_39();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v6 = swift_allocObject();
  *(void *)(v2 + 48) = v6;
  *(_OWORD *)(v6 + 16) = xmmword_469650;
  uint64_t v7 = OUTLINED_FUNCTION_19_7(v6, (uint64_t)"supportsAppLaunch");
  *(unsigned char *)(v7 + 48) = v0;
  uint64_t v8 = (uint64_t *)(v7 + 96);
  *(void *)(v7 + 72) = &type metadata for Bool;
  *(void *)(v7 + 80) = v4;
  *(void *)(v7 + 88) = 0x80000000004916B0;
  OUTLINED_FUNCTION_18_7(v7, v9, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v10 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_38_3(v10);
  if (v11)
  {
    outlined destroy of SubmitCommandError?(v3, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_42_1();
  }
  else
  {
    *(void *)(v6 + 120) = v1;
    __swift_allocate_boxed_opaque_existential_1(v8);
    OUTLINED_FUNCTION_9_3();
    OUTLINED_FUNCTION_17();
    v12();
  }
  uint64_t v13 = OUTLINED_FUNCTION_2_129();
  if (v8)
  {
    uint64_t v13 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v6 + 200) = 0;
    *(void *)(v6 + 208) = 0;
  }
  *(void *)(v6 + 192) = v8;
  *(void *)(v6 + 216) = v13;
  OUTLINED_FUNCTION_8_1();
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v2 + 56) = v14;
  *uint64_t v14 = v2;
  v14[1] = SuggestionsCATsSimple.phoneCall_StartCallAsLabels(name:hasReference:thirdPartyAppName:);
  uint64_t v15 = OUTLINED_FUNCTION_26_2(v4 + 16);
  return v16(v15);
}

PhoneCallFlowDelegatePlugin::UnsupportedFlowCATsSimple::SearchCallHistoryDialogIds_optional __swiftcall UnsupportedFlowCATsSimple.SearchCallHistoryDialogIds.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of UnsupportedFlowCATsSimple.SearchCallHistoryDialogIds.init(rawValue:);
  return (PhoneCallFlowDelegatePlugin::UnsupportedFlowCATsSimple::SearchCallHistoryDialogIds_optional)PhoneCallCapability.init(rawValue:)(rawValue, v1);
}

PhoneCallFlowDelegatePlugin::UnsupportedFlowCATsSimple::SearchCallHistoryDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance UnsupportedFlowCATsSimple.SearchCallHistoryDialogIds@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::UnsupportedFlowCATsSimple::SearchCallHistoryDialogIds_optional *a2@<X8>)
{
  result.value = UnsupportedFlowCATsSimple.SearchCallHistoryDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t UnsupportedFlowCATsSimple.searchCallHistoryAsLabels(supportsAppLaunch:nonDefaultAppName:isVoicemail:device:)()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_36_33(v1, v2, v3, v4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v5);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v6, v7, v8);
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void (*v12)(void);
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t (*v17)(void);
  uint64_t v18;

  OUTLINED_FUNCTION_29_0();
  uint64_t v18 = v5;
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_26_39();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v6 = swift_allocObject();
  *(void *)(v2 + 48) = v6;
  *(_OWORD *)(v6 + 16) = xmmword_469650;
  uint64_t v7 = OUTLINED_FUNCTION_19_7(v6, (uint64_t)"supportsAppLaunch");
  *(unsigned char *)(v7 + 48) = v0;
  uint64_t v8 = (uint64_t *)(v7 + 96);
  *(void *)(v7 + 72) = &type metadata for Bool;
  *(void *)(v7 + 80) = v4;
  *(void *)(v7 + 88) = 0x80000000004916B0;
  OUTLINED_FUNCTION_18_7(v7, v9, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v10 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_38_3(v10);
  if (v11)
  {
    outlined destroy of SubmitCommandError?(v3, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_42_1();
  }
  else
  {
    *(void *)(v6 + 120) = v1;
    __swift_allocate_boxed_opaque_existential_1(v8);
    OUTLINED_FUNCTION_9_3();
    OUTLINED_FUNCTION_17();
    v12();
  }
  uint64_t v13 = OUTLINED_FUNCTION_2_129();
  if (v8)
  {
    uint64_t v13 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v6 + 200) = 0;
    *(void *)(v6 + 208) = 0;
  }
  *(void *)(v6 + 192) = v8;
  *(void *)(v6 + 216) = v13;
  OUTLINED_FUNCTION_8_1();
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v2 + 56) = v14;
  lazy protocol witness table accessor for type UnsupportedFlowCATsSimple.SearchCallHistoryDialogIds and conformance UnsupportedFlowCATsSimple.SearchCallHistoryDialogIds();
  OUTLINED_FUNCTION_25_1();
  *uint64_t v14 = v15;
  v14[1] = UnsupportedFlowCATs.searchCallHistory(supportsAppLaunch:nonDefaultAppName:isVoicemail:device:);
  OUTLINED_FUNCTION_24_10();
  return v17();
}

unint64_t lazy protocol witness table accessor for type UnsupportedFlowCATsSimple.SearchCallHistoryDialogIds and conformance UnsupportedFlowCATsSimple.SearchCallHistoryDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.SearchCallHistoryDialogIds and conformance UnsupportedFlowCATsSimple.SearchCallHistoryDialogIds;
  if (!lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.SearchCallHistoryDialogIds and conformance UnsupportedFlowCATsSimple.SearchCallHistoryDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.SearchCallHistoryDialogIds and conformance UnsupportedFlowCATsSimple.SearchCallHistoryDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.SearchCallHistoryDialogIds and conformance UnsupportedFlowCATsSimple.SearchCallHistoryDialogIds;
  if (!lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.SearchCallHistoryDialogIds and conformance UnsupportedFlowCATsSimple.SearchCallHistoryDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.SearchCallHistoryDialogIds and conformance UnsupportedFlowCATsSimple.SearchCallHistoryDialogIds);
  }
  return result;
}

uint64_t UnsupportedFlowCATsSimple.startCallEmergency()()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *uint64_t v1 = v2;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  OUTLINED_FUNCTION_24_10();
  unint64_t v3 = OUTLINED_FUNCTION_44_0(34);
  return v4(v3);
}

BOOL UnsupportedFlowCATsSimple.StartCallEmergencyDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of UnsupportedFlowCATsSimple.StartCallEmergencyDialogIds.init(rawValue:);
  return PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds.init(rawValue:)(a1, v1);
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance UnsupportedFlowCATsSimple.StartCallEmergencyDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = UnsupportedFlowCATsSimple.StartCallEmergencyDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t UnsupportedFlowCATsSimple.startCallEmergencyAsLabels()()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v1 = OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_19_5(v1);
  lazy protocol witness table accessor for type UnsupportedFlowCATsSimple.StartCallEmergencyDialogIds and conformance UnsupportedFlowCATsSimple.StartCallEmergencyDialogIds();
  OUTLINED_FUNCTION_25_1();
  *uint64_t v0 = v2;
  v0[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  OUTLINED_FUNCTION_24_10();
  unint64_t v3 = OUTLINED_FUNCTION_21(34);
  return v4(v3);
}

unint64_t lazy protocol witness table accessor for type UnsupportedFlowCATsSimple.StartCallEmergencyDialogIds and conformance UnsupportedFlowCATsSimple.StartCallEmergencyDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.StartCallEmergencyDialogIds and conformance UnsupportedFlowCATsSimple.StartCallEmergencyDialogIds;
  if (!lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.StartCallEmergencyDialogIds and conformance UnsupportedFlowCATsSimple.StartCallEmergencyDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.StartCallEmergencyDialogIds and conformance UnsupportedFlowCATsSimple.StartCallEmergencyDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.StartCallEmergencyDialogIds and conformance UnsupportedFlowCATsSimple.StartCallEmergencyDialogIds;
  if (!lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.StartCallEmergencyDialogIds and conformance UnsupportedFlowCATsSimple.StartCallEmergencyDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.StartCallEmergencyDialogIds and conformance UnsupportedFlowCATsSimple.StartCallEmergencyDialogIds);
  }
  return result;
}

uint64_t UnsupportedFlowCATsSimple.startCallEmergencyInRetailStore()()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *uint64_t v1 = v2;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  OUTLINED_FUNCTION_24_10();
  unint64_t v3 = OUTLINED_FUNCTION_44_0(47);
  return v4(v3);
}

BOOL UnsupportedFlowCATsSimple.StartCallEmergencyInRetailStoreDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of UnsupportedFlowCATsSimple.StartCallEmergencyInRetailStoreDialogIds.init(rawValue:);
  return PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds.init(rawValue:)(a1, v1);
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance UnsupportedFlowCATsSimple.StartCallEmergencyInRetailStoreDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = UnsupportedFlowCATsSimple.StartCallEmergencyInRetailStoreDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t UnsupportedFlowCATsSimple.startCallEmergencyInRetailStoreAsLabels()()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v1 = OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_19_5(v1);
  lazy protocol witness table accessor for type UnsupportedFlowCATsSimple.StartCallEmergencyInRetailStoreDialogIds and conformance UnsupportedFlowCATsSimple.StartCallEmergencyInRetailStoreDialogIds();
  OUTLINED_FUNCTION_25_1();
  *uint64_t v0 = v2;
  v0[1] = UnsupportedFlowCATs.deleteVoicemail();
  OUTLINED_FUNCTION_24_10();
  unint64_t v3 = OUTLINED_FUNCTION_21(47);
  return v4(v3);
}

unint64_t lazy protocol witness table accessor for type UnsupportedFlowCATsSimple.StartCallEmergencyInRetailStoreDialogIds and conformance UnsupportedFlowCATsSimple.StartCallEmergencyInRetailStoreDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.StartCallEmergencyInRetailStoreDialogIds and conformance UnsupportedFlowCATsSimple.StartCallEmergencyInRetailStoreDialogIds;
  if (!lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.StartCallEmergencyInRetailStoreDialogIds and conformance UnsupportedFlowCATsSimple.StartCallEmergencyInRetailStoreDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.StartCallEmergencyInRetailStoreDialogIds and conformance UnsupportedFlowCATsSimple.StartCallEmergencyInRetailStoreDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.StartCallEmergencyInRetailStoreDialogIds and conformance UnsupportedFlowCATsSimple.StartCallEmergencyInRetailStoreDialogIds;
  if (!lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.StartCallEmergencyInRetailStoreDialogIds and conformance UnsupportedFlowCATsSimple.StartCallEmergencyInRetailStoreDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.StartCallEmergencyInRetailStoreDialogIds and conformance UnsupportedFlowCATsSimple.StartCallEmergencyInRetailStoreDialogIds);
  }
  return result;
}

uint64_t UnsupportedFlowCATsSimple.unsupportedEmergencyContactCall(thirdPartyAppName:isFaceTime:)()
{
  OUTLINED_FUNCTION_1_0();
  *(unsigned char *)(v1 + 64) = v2;
  *(void *)(v1 + 16) = v3;
  *(void *)(v1 + 24) = v0;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v4);
  *(void *)(v1 + 32) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void (*v10)(void);
  char v11;
  void *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v16;

  OUTLINED_FUNCTION_29_0();
  uint64_t v16 = v4;
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_4_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = swift_allocObject();
  *(void *)(v1 + 40) = v5;
  *(_OWORD *)(v5 + 16) = xmmword_467720;
  uint64_t v6 = OUTLINED_FUNCTION_19_7(v5, (uint64_t)"thirdPartyAppName");
  OUTLINED_FUNCTION_18_7(v6, v7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_1_4(v8);
  if (v9)
  {
    outlined destroy of SubmitCommandError?(v2, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_42_1();
  }
  else
  {
    *(void *)(v5 + 72) = v0;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v5 + 48));
    OUTLINED_FUNCTION_9_3();
    OUTLINED_FUNCTION_17();
    v10();
  }
  OUTLINED_FUNCTION_17_44();
  *(void *)(v5 + 120) = &type metadata for Bool;
  *(unsigned char *)(v5 + 96) = v11;
  uint64_t v12 = (void *)OUTLINED_FUNCTION_3_0();
  *(void *)(v1 + 48) = v12;
  *uint64_t v12 = v1;
  v12[1] = UnsupportedFlowCATs.unsupportedEmergencyContactCall(thirdPartyAppName:isFaceTime:);
  uint64_t v13 = OUTLINED_FUNCTION_26_2(v3 + 30);
  return v14(v13);
}

PhoneCallFlowDelegatePlugin::UnsupportedFlowCATsSimple::UnsupportedEmergencyContactCallDialogIds_optional __swiftcall UnsupportedFlowCATsSimple.UnsupportedEmergencyContactCallDialogIds.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v3._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of UnsupportedFlowCATsSimple.UnsupportedEmergencyContactCallDialogIds.init(rawValue:), v3);
  OUTLINED_FUNCTION_15_0();
  if (v1 >= 3) {
    return (PhoneCallFlowDelegatePlugin::UnsupportedFlowCATsSimple::UnsupportedEmergencyContactCallDialogIds_optional)3;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::UnsupportedFlowCATsSimple::UnsupportedEmergencyContactCallDialogIds_optional)v1;
  }
}

PhoneCallFlowDelegatePlugin::UnsupportedFlowCATsSimple::UnsupportedEmergencyContactCallDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance UnsupportedFlowCATsSimple.UnsupportedEmergencyContactCallDialogIds@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::UnsupportedFlowCATsSimple::UnsupportedEmergencyContactCallDialogIds_optional *a2@<X8>)
{
  result.value = UnsupportedFlowCATsSimple.UnsupportedEmergencyContactCallDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t UnsupportedFlowCATsSimple.unsupportedEmergencyContactCallAsLabels(thirdPartyAppName:isFaceTime:)()
{
  OUTLINED_FUNCTION_1_0();
  *(unsigned char *)(v1 + 64) = v2;
  *(void *)(v1 + 16) = v3;
  *(void *)(v1 + 24) = v0;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v4);
  *(void *)(v1 + 32) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void (*v9)(void);
  char v10;
  void *v11;
  uint64_t v12;
  uint64_t (*v14)(void);
  uint64_t v15;

  OUTLINED_FUNCTION_29_0();
  uint64_t v15 = v3;
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_4_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = swift_allocObject();
  *(void *)(v1 + 40) = v4;
  *(_OWORD *)(v4 + 16) = xmmword_467720;
  uint64_t v5 = OUTLINED_FUNCTION_19_7(v4, (uint64_t)"thirdPartyAppName");
  OUTLINED_FUNCTION_18_7(v5, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_1_4(v7);
  if (v8)
  {
    outlined destroy of SubmitCommandError?(v2, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_42_1();
  }
  else
  {
    *(void *)(v4 + 72) = v0;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v4 + 48));
    OUTLINED_FUNCTION_9_3();
    OUTLINED_FUNCTION_17();
    v9();
  }
  OUTLINED_FUNCTION_17_44();
  *(void *)(v4 + 120) = &type metadata for Bool;
  *(unsigned char *)(v4 + 96) = v10;
  uint64_t v11 = (void *)OUTLINED_FUNCTION_3_0();
  *(void *)(v1 + 48) = v11;
  lazy protocol witness table accessor for type UnsupportedFlowCATsSimple.UnsupportedEmergencyContactCallDialogIds and conformance UnsupportedFlowCATsSimple.UnsupportedEmergencyContactCallDialogIds();
  OUTLINED_FUNCTION_25_1();
  void *v11 = v12;
  v11[1] = SuggestionsCATsSimple.phoneCall_StartFTCallAsLabels(name:hasReference:);
  OUTLINED_FUNCTION_24_10();
  return v14();
}

unint64_t lazy protocol witness table accessor for type UnsupportedFlowCATsSimple.UnsupportedEmergencyContactCallDialogIds and conformance UnsupportedFlowCATsSimple.UnsupportedEmergencyContactCallDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.UnsupportedEmergencyContactCallDialogIds and conformance UnsupportedFlowCATsSimple.UnsupportedEmergencyContactCallDialogIds;
  if (!lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.UnsupportedEmergencyContactCallDialogIds and conformance UnsupportedFlowCATsSimple.UnsupportedEmergencyContactCallDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.UnsupportedEmergencyContactCallDialogIds and conformance UnsupportedFlowCATsSimple.UnsupportedEmergencyContactCallDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.UnsupportedEmergencyContactCallDialogIds and conformance UnsupportedFlowCATsSimple.UnsupportedEmergencyContactCallDialogIds;
  if (!lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.UnsupportedEmergencyContactCallDialogIds and conformance UnsupportedFlowCATsSimple.UnsupportedEmergencyContactCallDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.UnsupportedEmergencyContactCallDialogIds and conformance UnsupportedFlowCATsSimple.UnsupportedEmergencyContactCallDialogIds);
  }
  return result;
}

uint64_t UnsupportedFlowCATsSimple.unsupportedOnDeviceType(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_21_1((uint64_t)UnsupportedFlowCATsSimple.unsupportedOnDeviceType(device:));
}

uint64_t UnsupportedFlowCATsSimple.unsupportedOnDeviceType(device:)()
{
  unint64_t v1 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = (__n128 *)swift_allocObject();
  v0[4] = v2;
  uint64_t v3 = OUTLINED_FUNCTION_24_7(v2, (__n128)xmmword_467710);
  if (v1)
  {
    uint64_t v3 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v2[3].n128_u64[1] = 0;
    v2[4].n128_u64[0] = 0;
  }
  v2[3].n128_u64[0] = v1;
  v2[4].n128_u64[1] = v3;
  OUTLINED_FUNCTION_8_1();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[5] = v4;
  *uint64_t v4 = v0;
  v4[1] = AnnounceIncomingCallCATsSimple.intentHandledResponse(incomingCallConcept:);
  OUTLINED_FUNCTION_24_10();
  return v6(0xD000000000000027);
}

PhoneCallFlowDelegatePlugin::UnsupportedFlowCATsSimple::UnsupportedOnDeviceTypeDialogIds_optional __swiftcall UnsupportedFlowCATsSimple.UnsupportedOnDeviceTypeDialogIds.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of UnsupportedFlowCATsSimple.UnsupportedOnDeviceTypeDialogIds.init(rawValue:);
  return (PhoneCallFlowDelegatePlugin::UnsupportedFlowCATsSimple::UnsupportedOnDeviceTypeDialogIds_optional)PhoneCallCapability.init(rawValue:)(rawValue, v1);
}

void UnsupportedFlowCATsSimple.UnsupportedOnDeviceTypeDialogIds.rawValue.getter()
{
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance UnsupportedFlowCATsSimple.UnsupportedOnDeviceTypeDialogIds()
{
  return specialized == infix<A>(_:_:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance UnsupportedFlowCATsSimple.UnsupportedOnDeviceTypeDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance UnsupportedFlowCATsSimple.UnsupportedOnDeviceTypeDialogIds()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UnsupportedFlowCATsSimple.UnsupportedOnDeviceTypeDialogIds()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

PhoneCallFlowDelegatePlugin::UnsupportedFlowCATsSimple::UnsupportedOnDeviceTypeDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance UnsupportedFlowCATsSimple.UnsupportedOnDeviceTypeDialogIds@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::UnsupportedFlowCATsSimple::UnsupportedOnDeviceTypeDialogIds_optional *a2@<X8>)
{
  result.value = UnsupportedFlowCATsSimple.UnsupportedOnDeviceTypeDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance UnsupportedFlowCATsSimple.UnsupportedOnDeviceTypeDialogIds()
{
  OUTLINED_FUNCTION_32();
  UnsupportedFlowCATsSimple.UnsupportedOnDeviceTypeDialogIds.rawValue.getter();
  *uint64_t v0 = v1;
  v0[1] = 0xE700000000000000;
}

uint64_t UnsupportedFlowCATsSimple.unsupportedOnDeviceTypeAsLabels(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_21_1((uint64_t)UnsupportedFlowCATsSimple.unsupportedOnDeviceTypeAsLabels(device:));
}

uint64_t UnsupportedFlowCATsSimple.unsupportedOnDeviceTypeAsLabels(device:)()
{
  unint64_t v1 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = (__n128 *)swift_allocObject();
  v0[4] = v2;
  uint64_t v3 = OUTLINED_FUNCTION_24_7(v2, (__n128)xmmword_467710);
  if (v1)
  {
    uint64_t v3 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v2[3].n128_u64[1] = 0;
    v2[4].n128_u64[0] = 0;
  }
  v2[3].n128_u64[0] = v1;
  v2[4].n128_u64[1] = v3;
  OUTLINED_FUNCTION_8_1();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[5] = v4;
  lazy protocol witness table accessor for type UnsupportedFlowCATsSimple.UnsupportedOnDeviceTypeDialogIds and conformance UnsupportedFlowCATsSimple.UnsupportedOnDeviceTypeDialogIds();
  OUTLINED_FUNCTION_25_1();
  *uint64_t v4 = v5;
  v4[1] = AnnounceIncomingCallCATsSimple.intentHandledResponseAsLabels(incomingCallConcept:);
  OUTLINED_FUNCTION_24_10();
  return v7(0xD000000000000027);
}

unint64_t lazy protocol witness table accessor for type UnsupportedFlowCATsSimple.UnsupportedOnDeviceTypeDialogIds and conformance UnsupportedFlowCATsSimple.UnsupportedOnDeviceTypeDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.UnsupportedOnDeviceTypeDialogIds and conformance UnsupportedFlowCATsSimple.UnsupportedOnDeviceTypeDialogIds;
  if (!lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.UnsupportedOnDeviceTypeDialogIds and conformance UnsupportedFlowCATsSimple.UnsupportedOnDeviceTypeDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.UnsupportedOnDeviceTypeDialogIds and conformance UnsupportedFlowCATsSimple.UnsupportedOnDeviceTypeDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.UnsupportedOnDeviceTypeDialogIds and conformance UnsupportedFlowCATsSimple.UnsupportedOnDeviceTypeDialogIds;
  if (!lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.UnsupportedOnDeviceTypeDialogIds and conformance UnsupportedFlowCATsSimple.UnsupportedOnDeviceTypeDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.UnsupportedOnDeviceTypeDialogIds and conformance UnsupportedFlowCATsSimple.UnsupportedOnDeviceTypeDialogIds);
  }
  return result;
}

uint64_t UnsupportedFlowCATsSimple.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return UnsupportedFlowCATsSimple.init(templateDir:options:globals:)(a1, a2);
}

uint64_t UnsupportedFlowCATsSimple.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_8_18();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  uint64_t v11 = OUTLINED_FUNCTION_11_0(v10);
  __chkstk_darwin(v11);
  outlined init with copy of Result<TemplatingResult, Error>(a1, (uint64_t)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a2, v2);
  uint64_t v13 = CATWrapperSimple.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a2, v2);
  outlined destroy of SubmitCommandError?(a1, (uint64_t *)&demangling cache variable for type metadata for URL?);
  return v13;
}

uint64_t UnsupportedFlowCATsSimple.__allocating_init(useResponseMode:options:)()
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_8_18();
  __chkstk_darwin(v0);
  OUTLINED_FUNCTION_52();
  uint64_t v1 = swift_allocObject();
  uint64_t v2 = OUTLINED_FUNCTION_28_0();
  v3(v2);
  CATWrapperSimple.init(useResponseMode:options:)();
  uint64_t v4 = OUTLINED_FUNCTION_30_1();
  v5(v4);
  return v1;
}

uint64_t UnsupportedFlowCATsSimple.init(useResponseMode:options:)()
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_8_18();
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_52();
  uint64_t v2 = OUTLINED_FUNCTION_28_0();
  v3(v2);
  CATWrapperSimple.init(useResponseMode:options:)();
  uint64_t v4 = OUTLINED_FUNCTION_30_1();
  v5(v4);
  return v0;
}

unint64_t lazy protocol witness table accessor for type UnsupportedFlowCATsSimple.Properties and conformance UnsupportedFlowCATsSimple.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.Properties and conformance UnsupportedFlowCATsSimple.Properties;
  if (!lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.Properties and conformance UnsupportedFlowCATsSimple.Properties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsupportedFlowCATsSimple.Properties and conformance UnsupportedFlowCATsSimple.Properties);
  }
  return result;
}

uint64_t type metadata accessor for UnsupportedFlowCATsSimple()
{
  uint64_t result = type metadata singleton initialization cache for UnsupportedFlowCATsSimple;
  if (!type metadata singleton initialization cache for UnsupportedFlowCATsSimple) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for UnsupportedFlowCATsSimple()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for UnsupportedFlowCATsSimple()
{
  return type metadata accessor for UnsupportedFlowCATsSimple();
}

unsigned char *storeEnumTagSinglePayload for UnsupportedFlowCATsSimple.Properties(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x414C80);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

void type metadata accessor for UnsupportedFlowCATsSimple.Properties()
{
}

void type metadata accessor for UnsupportedFlowCATsSimple.DeleteCallHistoryDialogIds()
{
}

void type metadata accessor for UnsupportedFlowCATsSimple.DeleteVoicemailDialogIds()
{
}

void type metadata accessor for UnsupportedFlowCATsSimple.SearchCallHistoryDialogIds()
{
}

void type metadata accessor for UnsupportedFlowCATsSimple.StartCallEmergencyDialogIds()
{
}

unsigned char *storeEnumTagSinglePayload for UnsupportedFlowCATsSimple.DeleteCallHistoryDialogIds(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x414D88);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for UnsupportedFlowCATsSimple.StartCallEmergencyInRetailStoreDialogIds()
{
}

unsigned char *storeEnumTagSinglePayload for UnsupportedFlowCATsSimple.UnsupportedEmergencyContactCallDialogIds(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x414E88);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for UnsupportedFlowCATsSimple.UnsupportedEmergencyContactCallDialogIds()
{
}

unsigned char *storeEnumTagSinglePayload for UnsupportedFlowCATsSimple.SearchCallHistoryDialogIds(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x414F88);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for UnsupportedFlowCATsSimple.UnsupportedOnDeviceTypeDialogIds()
{
}

uint64_t OUTLINED_FUNCTION_2_129()
{
  char v3 = *(unsigned char *)(v1 + 73);
  *(void *)(v2 + 128) = 0x6D6563696F567369;
  *(void *)(v2 + 136) = 0xEB000000006C6961;
  *(unsigned char *)(v2 + 144) = v3;
  *(void *)(v2 + 168) = v0;
  *(void *)(v2 + 176) = 0x656369766564;
  *(void *)(v2 + 184) = 0xE600000000000000;
  return 0;
}

void OUTLINED_FUNCTION_17_44()
{
  *(void *)(v0 + 80) = 0x6954656361467369;
  *(void *)(v0 + 88) = 0xEA0000000000656DLL;
}

uint64_t OUTLINED_FUNCTION_36_33(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  *(void *)(v5 + 24) = a4;
  *(void *)(v5 + 32) = v4;
  *(unsigned char *)(v5 + 73) = a3;
  *(void *)(v5 + 16) = a2;
  *(unsigned char *)(v5 + 72) = result;
  return result;
}

PhoneCallFlowDelegatePlugin::SearchCallHistoryCATPatternsIdentifiers_optional __swiftcall SearchCallHistoryCATPatternsIdentifiers.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SearchCallHistoryCATPatternsIdentifiers.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xF) {
    return (PhoneCallFlowDelegatePlugin::SearchCallHistoryCATPatternsIdentifiers_optional)15;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::SearchCallHistoryCATPatternsIdentifiers_optional)v3;
  }
}

unint64_t SearchCallHistoryCATPatternsIdentifiers.rawValue.getter(char a1)
{
  unint64_t result = 0xD00000000000002CLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD00000000000002ALL;
      break;
    case 2:
      unint64_t result = 0xD000000000000029;
      break;
    case 3:
      unint64_t result = 0xD000000000000029;
      break;
    case 4:
      unint64_t result = 0xD00000000000002ELL;
      break;
    case 6:
      unint64_t result = 0xD000000000000026;
      break;
    case 7:
      unint64_t result = 0xD000000000000034;
      break;
    case 8:
      unint64_t result = 0xD00000000000002BLL;
      break;
    case 10:
      unint64_t result = 0xD000000000000021;
      break;
    case 11:
      unint64_t result = 0xD000000000000020;
      break;
    case 12:
      unint64_t result = 0xD00000000000002DLL;
      break;
    case 13:
      unint64_t result = 0xD000000000000030;
      break;
    case 14:
      unint64_t result = 0xD000000000000027;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SearchCallHistoryCATPatternsIdentifiers(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SearchCallHistoryCATPatternsIdentifiers()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SearchCallHistoryCATPatternsIdentifiers(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SearchCallHistoryCATPatternsIdentifiers(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::SearchCallHistoryCATPatternsIdentifiers_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SearchCallHistoryCATPatternsIdentifiers@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::SearchCallHistoryCATPatternsIdentifiers_optional *a2@<X8>)
{
  result.value = SearchCallHistoryCATPatternsIdentifiers.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SearchCallHistoryCATPatternsIdentifiers@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = SearchCallHistoryCATPatternsIdentifiers.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

double SearchCallHistoryOfferToReadMoreCallRecordsParameters.asKeyValuePairs()(char a1)
{
  return SearchCallHistoryOfferToReadMoreCallRecordsParameters.asKeyValuePairs()(a1, 0x69577473614C7369, 0xEC000000776F646ELL);
}

uint64_t SearchCallHistoryReadCannotFindCallRecordParameters.appName.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_71_0();
  return outlined init with copy of SpeakableString?(v0, v1, &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t SearchCallHistoryReadCannotFindCallRecordParameters.callRecordCount.getter()
{
  uint64_t v0 = type metadata accessor for SearchCallHistoryReadCannotFindCallRecordParameters(0);
  return OUTLINED_FUNCTION_60_16(*(int *)(v0 + 20));
}

uint64_t type metadata accessor for SearchCallHistoryReadCannotFindCallRecordParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for SearchCallHistoryReadCannotFindCallRecordParameters);
}

void SearchCallHistoryReadCannotFindCallRecordParameters.callRecordCount.setter()
{
  uint64_t v0 = type metadata accessor for SearchCallHistoryReadCannotFindCallRecordParameters(0);
  OUTLINED_FUNCTION_7_66(*(int *)(v0 + 20));
}

Swift::Void (__swiftcall *SearchCallHistoryReadCannotFindCallRecordParameters.callRecordCount.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t SearchCallHistoryReadCannotFindCallRecordParameters.device.getter()
{
  return SearchCallHistoryReadCannotFindCallRecordParameters.device.getter((void (*)(void))type metadata accessor for SearchCallHistoryReadCannotFindCallRecordParameters);
}

uint64_t SearchCallHistoryReadCannotFindCallRecordParameters.device.setter()
{
  return SearchCallHistoryReadCannotFindCallRecordParameters.device.setter();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t result;

  Swift::String v2 = OUTLINED_FUNCTION_37_6();
  unint64_t v4 = *(int *)(v3(v2) + 24);
  unint64_t result = swift_release();
  *(void *)(v1 + v4) = v0;
  return result;
}

Swift::Void (__swiftcall *SearchCallHistoryReadCannotFindCallRecordParameters.device.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t SearchCallHistoryReadCannotFindCallRecordParameters.intent.getter()
{
  type metadata accessor for SearchCallHistoryReadCannotFindCallRecordParameters(0);

  return swift_retain();
}

uint64_t SearchCallHistoryReadCannotFindCallRecordParameters.intent.setter()
{
  uint64_t v2 = *(int *)(OUTLINED_FUNCTION_84_12() + 28);
  uint64_t result = swift_release();
  *(void *)(v1 + v2) = v0;
  return result;
}

Swift::Void (__swiftcall *SearchCallHistoryReadCannotFindCallRecordParameters.intent.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t SearchCallHistoryReadCannotFindCallRecordParameters.isFirstPartyApp.getter()
{
  uint64_t v0 = type metadata accessor for SearchCallHistoryReadCannotFindCallRecordParameters(0);
  return OUTLINED_FUNCTION_68_15(v0);
}

uint64_t SearchCallHistoryReadCannotFindCallRecordParameters.isShowingMissedCall.getter()
{
  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for SearchCallHistoryReadCannotFindCallRecordParameters(0)
                                     + 36));
}

uint64_t SearchCallHistoryReadCannotFindCallRecordParameters.totalCallRecordCount.getter()
{
  uint64_t v0 = type metadata accessor for SearchCallHistoryReadCannotFindCallRecordParameters(0);
  return OUTLINED_FUNCTION_60_16(*(int *)(v0 + 40));
}

void SearchCallHistoryReadCannotFindCallRecordParameters.totalCallRecordCount.setter()
{
  uint64_t v0 = type metadata accessor for SearchCallHistoryReadCannotFindCallRecordParameters(0);
  OUTLINED_FUNCTION_7_66(*(int *)(v0 + 40));
}

Swift::Void (__swiftcall *SearchCallHistoryReadCannotFindCallRecordParameters.totalCallRecordCount.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t SearchCallHistoryReadCannotFindCallRecordParameters.asKeyValuePairs()()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v3 = OUTLINED_FUNCTION_11_0(v2);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_12_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_474610;
  uint64_t v5 = (uint64_t *)(v4 + 48);
  *(void *)(v4 + 32) = 0x656D614E707061;
  *(void *)(v4 + 40) = 0xE700000000000000;
  outlined init with copy of SpeakableString?(v0, v1, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_30_0(v1);
  if (v7)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v1, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v5 = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
  }
  else
  {
    *(void *)(v4 + 72) = v6;
    __swift_allocate_boxed_opaque_existential_1(v5);
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_99();
    v8();
  }
  *(void *)(v4 + 80) = 0x6F6365526C6C6163;
  *(void *)(v4 + 88) = 0xEF746E756F436472;
  uint64_t v9 = (int *)type metadata accessor for SearchCallHistoryReadCannotFindCallRecordParameters(0);
  OUTLINED_FUNCTION_57_19();
  if (v11)
  {
    uint64_t v12 = 0;
    *(void *)(v4 + 104) = 0;
    *(void *)(v4 + 112) = 0;
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = *v10;
    uint64_t v12 = &type metadata for Double;
  }
  *(void *)(v4 + 96) = v13;
  *(void *)(v4 + 120) = v12;
  *(void *)(v4 + 128) = 0x656369766564;
  *(void *)(v4 + 136) = 0xE600000000000000;
  uint64_t v14 = *(void *)(v0 + v9[6]);
  if (v14)
  {
    type metadata accessor for SirikitDeviceState();
    uint64_t v15 = v14;
  }
  else
  {
    uint64_t v15 = 0;
    *(void *)(v4 + 152) = 0;
    *(void *)(v4 + 160) = 0;
  }
  *(void *)(v4 + 144) = v15;
  OUTLINED_FUNCTION_66_5();
  *(void *)(v4 + 168) = v16;
  *(void *)(v4 + 176) = v17;
  *(void *)(v4 + 184) = 0xE600000000000000;
  uint64_t v18 = *(void *)(v0 + v9[7]);
  if (v18)
  {
    type metadata accessor for PhoneSearchCallHistoryIntent(0);
    uint64_t v19 = v18;
  }
  else
  {
    OUTLINED_FUNCTION_34();
    *(void *)(v4 + 200) = 0;
    *(void *)(v4 + 208) = 0;
  }
  *(void *)(v4 + 192) = v19;
  OUTLINED_FUNCTION_132();
  *(void *)(v4 + 216) = v20;
  *(void *)(v4 + 224) = v21;
  OUTLINED_FUNCTION_142();
  *(void *)(v4 + 232) = v22;
  *(unsigned char *)(v4 + 240) = *(unsigned char *)(v0 + v9[8]);
  *(void *)(v4 + 264) = &type metadata for Bool;
  *(void *)(v4 + 272) = 0xD000000000000013;
  *(void *)(v4 + 280) = 0x8000000000497370;
  *(unsigned char *)(v4 + 288) = *(unsigned char *)(v0 + v9[9]);
  *(void *)(v4 + 312) = &type metadata for Bool;
  *(void *)(v4 + 320) = 0xD000000000000014;
  OUTLINED_FUNCTION_105_5((uint64_t)"totalCallRecordCount");
  OUTLINED_FUNCTION_57_19();
  if (v24)
  {
    uint64_t v25 = 0;
    *(void *)(v4 + 344) = 0;
    *(void *)(v4 + 352) = 0;
    uint64_t v26 = 0;
  }
  else
  {
    uint64_t v26 = *v23;
    uint64_t v25 = &type metadata for Double;
  }
  *(void *)(v4 + 336) = v26;
  *(void *)(v4 + 360) = v25;
  swift_retain();
  swift_retain();
  return OUTLINED_FUNCTION_111_5();
}

void SearchCallHistoryReadCannotFindCallRecordParameters.init(appName:callRecordCount:device:intent:isFirstPartyApp:isShowingMissedCall:totalCallRecordCount:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v22 = v21;
  char v24 = v23;
  char v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  char v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  outlined init with take of URL?(v37, v35, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v38 = (int *)type metadata accessor for SearchCallHistoryReadCannotFindCallRecordParameters(0);
  uint64_t v39 = v36 + v38[5];
  *(void *)uint64_t v39 = v34;
  *(unsigned char *)(v39 + 8) = v32 & 1;
  *(void *)(v36 + v38[6]) = v30;
  *(void *)(v36 + v38[7]) = v28;
  *(unsigned char *)(v36 + v38[8]) = v26;
  *(unsigned char *)(v36 + v38[9]) = v24;
  uint64_t v40 = v36 + v38[10];
  *(void *)uint64_t v40 = v22;
  *(unsigned char *)(v40 + 8) = a21 & 1;
  OUTLINED_FUNCTION_26_1();
}

uint64_t SearchCallHistoryReadCannotFindVoicemailParameters.newRecordsCount.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t SearchCallHistoryReadCannotFindVoicemailParameters.newRecordsCount.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 8) = result;
  *(unsigned char *)(v2 + 16) = a2 & 1;
  return result;
}

uint64_t SearchCallHistoryReadCannotFindVoicemailParameters.savedRecordsCount.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 24) = result;
  *(unsigned char *)(v2 + 32) = a2 & 1;
  return result;
}

uint64_t outlined retain of PhoneSearchCallHistoryIntent?(uint64_t a1)
{
  return a1;
}

void SearchCallHistoryReadCannotFindVoicemailParameters.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 1;
}

uint64_t SearchCallHistoryReadCannotFindVoicemailParameters.init(intent:newRecordsCount:savedRecordsCount:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  *(void *)a6 = result;
  *(void *)(a6 + 8) = a2;
  *(unsigned char *)(a6 + 16) = a3 & 1;
  *(void *)(a6 + 24) = a4;
  *(unsigned char *)(a6 + 32) = a5 & 1;
  return result;
}

uint64_t SearchCallHistoryReadMultipleCallRecordsParameters.appName.getter@<X0>(uint64_t a1@<X8>)
{
  return SearchCallHistoryReadMultipleCallRecordsParameters.appName.getter(type metadata accessor for SearchCallHistoryReadMultipleCallRecordsParameters, a1);
}

uint64_t type metadata accessor for SearchCallHistoryReadMultipleCallRecordsParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for SearchCallHistoryReadMultipleCallRecordsParameters);
}

uint64_t SearchCallHistoryReadMultipleCallRecordsParameters.appName.setter()
{
  return SearchCallHistoryReadMultipleCallRecordsParameters.appName.setter();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t vars8;

  uint64_t v1 = OUTLINED_FUNCTION_37_6();
  v2(v1);
  OUTLINED_FUNCTION_69();

  return outlined assign with take of SpeakableString?(v0, v3);
}

Swift::Void (__swiftcall *SearchCallHistoryReadMultipleCallRecordsParameters.appName.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t SearchCallHistoryReadMultipleCallRecordsParameters.callRecordCount.getter()
{
  return SearchCallHistoryReadMultipleCallRecordsParameters.callRecordCount.getter(type metadata accessor for SearchCallHistoryReadMultipleCallRecordsParameters);
}

void SearchCallHistoryReadMultipleCallRecordsParameters.callRecordCount.setter()
{
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  uint64_t v0 = OUTLINED_FUNCTION_85_10();
  uint64_t v2 = v1(v0);
  OUTLINED_FUNCTION_7_66(*(int *)(v2 + 24));
}

Swift::Void (__swiftcall *SearchCallHistoryReadMultipleCallRecordsParameters.callRecordCount.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t SearchCallHistoryReadMultipleCallRecordsParameters.callRecords.getter()
{
  return SearchCallHistoryReadMultipleCallRecordsParameters.callRecords.getter((void (*)(void))type metadata accessor for SearchCallHistoryReadMultipleCallRecordsParameters);
}

uint64_t SearchCallHistoryReadMultipleCallRecordsParameters.callRecordsItem1.getter()
{
  type metadata accessor for SearchCallHistoryReadMultipleCallRecordsParameters(0);

  return swift_bridgeObjectRetain();
}

uint64_t SearchCallHistoryReadMultipleCallRecordsParameters.callRecordsItem2.getter()
{
  type metadata accessor for SearchCallHistoryReadMultipleCallRecordsParameters(0);

  return swift_bridgeObjectRetain();
}

uint64_t SearchCallHistoryReadMultipleCallRecordsParameters.callRecordsItem3.getter()
{
  type metadata accessor for SearchCallHistoryReadMultipleCallRecordsParameters(0);

  return swift_bridgeObjectRetain();
}

uint64_t SearchCallHistoryReadMultipleCallRecordsParameters.callRecordsItem4.getter()
{
  type metadata accessor for SearchCallHistoryReadMultipleCallRecordsParameters(0);

  return swift_bridgeObjectRetain();
}

uint64_t SearchCallHistoryReadMultipleCallRecordsParameters.device.getter()
{
  type metadata accessor for SearchCallHistoryReadMultipleCallRecordsParameters(0);

  return swift_retain();
}

uint64_t SearchCallHistoryReadMultipleCallRecordsParameters.device.setter()
{
  uint64_t v2 = *(int *)(OUTLINED_FUNCTION_47_27() + 48);
  uint64_t result = swift_release();
  *(void *)(v1 + v2) = v0;
  return result;
}

Swift::Void (__swiftcall *SearchCallHistoryReadMultipleCallRecordsParameters.device.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t SearchCallHistoryReadMultipleCallRecordsParameters.intent.getter()
{
  type metadata accessor for SearchCallHistoryReadMultipleCallRecordsParameters(0);

  return swift_retain();
}

uint64_t SearchCallHistoryReadMultipleCallRecordsParameters.intent.setter()
{
  uint64_t v2 = *(int *)(OUTLINED_FUNCTION_47_27() + 52);
  uint64_t result = swift_release();
  *(void *)(v1 + v2) = v0;
  return result;
}

Swift::Void (__swiftcall *SearchCallHistoryReadMultipleCallRecordsParameters.intent.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t SearchCallHistoryReadMultipleCallRecordsParameters.isFirstPartyApp.getter()
{
  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for SearchCallHistoryReadMultipleCallRecordsParameters(0)
                                     + 56));
}

uint64_t SearchCallHistoryReadMultipleCallRecordsParameters.isFirstWindow.getter()
{
  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for SearchCallHistoryReadMultipleCallRecordsParameters(0)
                                     + 60));
}

uint64_t SearchCallHistoryReadMultipleCallRecordsParameters.isLastWindow.getter()
{
  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for SearchCallHistoryReadMultipleCallRecordsParameters(0)
                                     + 64));
}

uint64_t SearchCallHistoryReadMultipleCallRecordsParameters.isShowingMissedCall.getter()
{
  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for SearchCallHistoryReadMultipleCallRecordsParameters(0)
                                     + 68));
}

uint64_t SearchCallHistoryReadMultipleCallRecordsParameters.isSingleDateRequest.getter()
{
  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for SearchCallHistoryReadMultipleCallRecordsParameters(0)
                                     + 72));
}

uint64_t SearchCallHistoryReadMultipleCallRecordsParameters.isTimeRangeRequest.getter()
{
  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for SearchCallHistoryReadMultipleCallRecordsParameters(0)
                                     + 76));
}

uint64_t SearchCallHistoryReadMultipleCallRecordsParameters.totalCallRecordCount.getter()
{
  uint64_t v0 = type metadata accessor for SearchCallHistoryReadMultipleCallRecordsParameters(0);
  return OUTLINED_FUNCTION_60_16(*(int *)(v0 + 80));
}

void SearchCallHistoryReadMultipleCallRecordsParameters.totalCallRecordCount.setter()
{
  uint64_t v0 = type metadata accessor for SearchCallHistoryReadMultipleCallRecordsParameters(0);
  OUTLINED_FUNCTION_7_66(*(int *)(v0 + 80));
}

Swift::Void (__swiftcall *SearchCallHistoryReadMultipleCallRecordsParameters.totalCallRecordCount.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t SearchCallHistoryReadMultipleCallRecordsParameters.windowSize.getter()
{
  uint64_t v0 = type metadata accessor for SearchCallHistoryReadMultipleCallRecordsParameters(0);
  return OUTLINED_FUNCTION_60_16(*(int *)(v0 + 84));
}

void SearchCallHistoryReadMultipleCallRecordsParameters.windowSize.setter()
{
  uint64_t v0 = type metadata accessor for SearchCallHistoryReadMultipleCallRecordsParameters(0);
  OUTLINED_FUNCTION_7_66(*(int *)(v0 + 84));
}

Swift::Void (__swiftcall *SearchCallHistoryReadMultipleCallRecordsParameters.windowSize.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

void SearchCallHistoryReadMultipleCallRecordsParameters.asKeyValuePairs()()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v3 = OUTLINED_FUNCTION_11_0(v2);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_27();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v55 - v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_48A2E0;
  uint64_t v8 = (uint64_t *)(v7 + 48);
  OUTLINED_FUNCTION_14_53(v7);
  uint64_t v9 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_30_0((uint64_t)v6);
  if (v10)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0((uint64_t)v6, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_90_11();
  }
  else
  {
    *(void *)(v7 + 72) = v9;
    __swift_allocate_boxed_opaque_existential_1(v8);
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_99();
    v11();
  }
  uint64_t v12 = OUTLINED_FUNCTION_46_26();
  uint64_t v13 = (int *)type metadata accessor for SearchCallHistoryReadMultipleCallRecordsParameters(v12);
  uint64_t v14 = OUTLINED_FUNCTION_94((uint64_t)v13);
  outlined init with copy of SpeakableString?(v14, v1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_30_0(v1);
  if (v10)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_90_11();
  }
  else
  {
    *(void *)(v7 + 120) = v9;
    __swift_allocate_boxed_opaque_existential_1(v8);
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v15 + 32))();
  }
  OUTLINED_FUNCTION_26_40();
  if (v18)
  {
    *(void *)(v7 + 152) = 0;
    *(void *)(v7 + 160) = 0;
    double v19 = 0.0;
  }
  else
  {
    double v19 = *v17;
  }
  OUTLINED_FUNCTION_51_22(v16, v19);
  uint64_t v21 = *(void *)(v0 + v20);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PhoneCallRecord]);
  v55[1] = v21;
  *(void *)(v7 + 192) = v21;
  *(void *)(v7 + 216) = v22;
  *(void *)(v7 + 224) = 0xD000000000000010;
  OUTLINED_FUNCTION_88_7((uint64_t)"callRecordsItem1");
  *(void *)(v7 + 240) = *(void *)(v0 + v13[8]);
  *(void *)(v7 + 264) = v23;
  *(void *)(v7 + 272) = 0xD000000000000010;
  OUTLINED_FUNCTION_41_0();
  *(void *)(v7 + 280) = v24;
  *(void *)(v7 + 288) = *(void *)(v0 + v13[9]);
  *(void *)(v7 + 312) = v25;
  *(void *)(v7 + 320) = 0xD000000000000010;
  OUTLINED_FUNCTION_105_5((uint64_t)"callRecordsItem3");
  *(void *)(v7 + 336) = *(void *)(v0 + v26);
  *(void *)(v7 + 360) = v27;
  *(void *)(v7 + 368) = 0xD000000000000010;
  OUTLINED_FUNCTION_41_0();
  *(void *)(v7 + 376) = v28;
  *(void *)(v7 + 384) = *(void *)(v0 + v13[11]);
  *(void *)(v7 + 408) = v29;
  *(void *)(v7 + 416) = 0x656369766564;
  *(void *)(v7 + 424) = 0xE600000000000000;
  uint64_t v30 = *(void *)(v0 + v13[12]);
  if (v30)
  {
    type metadata accessor for SirikitDeviceState();
    uint64_t v31 = v30;
  }
  else
  {
    OUTLINED_FUNCTION_34();
    *(void *)(v7 + 440) = 0;
    *(void *)(v7 + 448) = 0;
  }
  *(void *)(v7 + 432) = v31;
  OUTLINED_FUNCTION_66_5();
  *(void *)(v7 + 456) = v32;
  *(void *)(v7 + 464) = v33;
  *(void *)(v7 + 472) = 0xE600000000000000;
  uint64_t v34 = *(void *)(v0 + v13[13]);
  if (v34)
  {
    type metadata accessor for PhoneSearchCallHistoryIntent(0);
    uint64_t v35 = v34;
  }
  else
  {
    OUTLINED_FUNCTION_34();
    *(void *)(v7 + 488) = 0;
    *(void *)(v7 + 496) = 0;
  }
  *(void *)(v7 + 480) = v35;
  OUTLINED_FUNCTION_132();
  *(void *)(v7 + 504) = v36;
  *(void *)(v7 + 512) = v37;
  OUTLINED_FUNCTION_142();
  *(void *)(v7 + 520) = v38;
  LOBYTE(v38) = *(unsigned char *)(v0 + v13[14]);
  *(void *)(v7 + 552) = &type metadata for Bool;
  *(unsigned char *)(v7 + 528) = v38;
  strcpy((char *)(v7 + 560), "isFirstWindow");
  *(_WORD *)(v7 + 574) = -4864;
  LOBYTE(v38) = *(unsigned char *)(v0 + v13[15]);
  *(void *)(v7 + 600) = &type metadata for Bool;
  *(unsigned char *)(v7 + 576) = v38;
  OUTLINED_FUNCTION_103_4();
  *(void *)(v7 + 608) = v39;
  *(void *)(v7 + 616) = 0xEC000000776F646ELL;
  LOBYTE(v39) = *(unsigned char *)(v0 + v13[16]);
  *(void *)(v7 + 648) = v40;
  *(unsigned char *)(v7 + 624) = v39;
  *(void *)(v7 + 656) = 0xD000000000000013;
  *(void *)(v7 + 664) = 0x8000000000497370;
  char v41 = *(unsigned char *)(v0 + v13[17]);
  *(void *)(v7 + 696) = v40;
  *(unsigned char *)(v7 + 672) = v41;
  *(void *)(v7 + 704) = 0xD000000000000013;
  OUTLINED_FUNCTION_41_0();
  *(void *)(v7 + 712) = v42;
  LOBYTE(v42) = *(unsigned char *)(v0 + v13[18]);
  *(void *)(v7 + 744) = v43;
  *(unsigned char *)(v7 + 720) = v42;
  *(void *)(v7 + 752) = 0xD000000000000012;
  OUTLINED_FUNCTION_41_0();
  *(void *)(v7 + 760) = v44;
  LOBYTE(v44) = *(unsigned char *)(v0 + v13[19]);
  *(void *)(v7 + 792) = v45;
  *(unsigned char *)(v7 + 768) = v44;
  *(void *)(v7 + 800) = 0xD000000000000014;
  OUTLINED_FUNCTION_41_0();
  *(void *)(v7 + 808) = v46;
  OUTLINED_FUNCTION_57_19();
  if (v48)
  {
    uint64_t v49 = 0;
    *(_OWORD *)(v7 + 824) = 0u;
    uint64_t v50 = 0;
  }
  else
  {
    uint64_t v50 = *v47;
    uint64_t v49 = &type metadata for Double;
  }
  *(void *)(v7 + 816) = v50;
  *(void *)(v7 + 840) = v49;
  *(void *)(v7 + 848) = 0x6953776F646E6977;
  *(void *)(v7 + 856) = 0xEA0000000000657ALL;
  OUTLINED_FUNCTION_57_19();
  if (v52)
  {
    uint64_t v53 = 0;
    *(_OWORD *)(v7 + 872) = 0u;
    uint64_t v54 = 0;
  }
  else
  {
    uint64_t v54 = *v51;
    uint64_t v53 = &type metadata for Double;
  }
  *(void *)(v7 + 864) = v54;
  *(void *)(v7 + 888) = v53;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  OUTLINED_FUNCTION_26_1();
}

uint64_t SearchCallHistoryReadMultipleCallRecordsParameters.init(appBundleId:appName:callRecordCount:callRecords:callRecordsItem1:callRecordsItem2:callRecordsItem3:callRecordsItem4:device:intent:isFirstPartyApp:isFirstWindow:isLastWindow:isShowingMissedCall:isSingleDateRequest:isTimeRangeRequest:totalCallRecordCount:windowSize:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char a14, char a15, char a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  outlined init with take of URL?(a1, a9, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v26 = (int *)type metadata accessor for SearchCallHistoryReadMultipleCallRecordsParameters(0);
  uint64_t result = outlined init with take of URL?(a2, a9 + v26[5], &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v28 = a9 + v26[6];
  *(void *)uint64_t v28 = a3;
  *(unsigned char *)(v28 + 8) = a4 & 1;
  *(void *)(a9 + v26[7]) = a5;
  *(void *)(a9 + v26[8]) = a6;
  *(void *)(a9 + v26[9]) = a7;
  *(void *)(a9 + v26[10]) = a8;
  *(void *)(a9 + v26[11]) = a10;
  *(void *)(a9 + v26[12]) = a11;
  *(void *)(a9 + v26[13]) = a12;
  *(unsigned char *)(a9 + v26[14]) = a13;
  *(unsigned char *)(a9 + v26[15]) = a14;
  *(unsigned char *)(a9 + v26[16]) = a15;
  *(unsigned char *)(a9 + v26[17]) = a16;
  *(unsigned char *)(a9 + v26[18]) = a17;
  *(unsigned char *)(a9 + v26[19]) = a18;
  uint64_t v29 = a9 + v26[20];
  *(void *)uint64_t v29 = a19;
  *(unsigned char *)(v29 + 8) = a20 & 1;
  uint64_t v30 = a9 + v26[21];
  *(void *)uint64_t v30 = a21;
  *(unsigned char *)(v30 + 8) = a22 & 1;
  return result;
}

uint64_t SearchCallHistoryReadMultipleVoiceMailRecordsParameters.callRecord.getter()
{
  return SearchCallHistoryReadMultipleVoiceMailRecordsParameters.callRecord.getter((void (*)(void))type metadata accessor for SearchCallHistoryReadMultipleVoiceMailRecordsParameters);
}

uint64_t type metadata accessor for SearchCallHistoryReadMultipleVoiceMailRecordsParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for SearchCallHistoryReadMultipleVoiceMailRecordsParameters);
}

uint64_t SearchCallHistoryReadMultipleVoiceMailRecordsParameters.callRecord.setter()
{
  return SearchCallHistoryReadMultipleVoiceMailRecordsParameters.callRecord.setter();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t result;

  uint64_t v2 = OUTLINED_FUNCTION_37_6();
  uint64_t v4 = *(int *)(v3(v2) + 20);
  uint64_t result = swift_release();
  *(void *)(v1 + v4) = v0;
  return result;
}

Swift::Void (__swiftcall *SearchCallHistoryReadMultipleVoiceMailRecordsParameters.callRecord.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t SearchCallHistoryReadMultipleVoiceMailRecordsParameters.intent.getter()
{
  return SearchCallHistoryReadCannotFindCallRecordParameters.device.getter((void (*)(void))type metadata accessor for SearchCallHistoryReadMultipleVoiceMailRecordsParameters);
}

uint64_t SearchCallHistoryReadCannotFindCallRecordParameters.device.getter(void (*a1)(void))
{
  a1(0);

  return swift_retain();
}

uint64_t SearchCallHistoryReadMultipleVoiceMailRecordsParameters.intent.setter()
{
  return SearchCallHistoryReadCannotFindCallRecordParameters.device.setter();
}

Swift::Void (__swiftcall *SearchCallHistoryReadMultipleVoiceMailRecordsParameters.intent.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t SearchCallHistoryReadMultipleVoiceMailRecordsParameters.isLeadingSavedVoiceMailPostPrompt.getter()
{
  uint64_t v0 = type metadata accessor for SearchCallHistoryReadMultipleVoiceMailRecordsParameters(0);
  return OUTLINED_FUNCTION_98_8(v0);
}

uint64_t SearchCallHistoryReadMultipleVoiceMailRecordsParameters.isNewVoicemail.getter()
{
  uint64_t v0 = type metadata accessor for SearchCallHistoryReadMultipleVoiceMailRecordsParameters(0);
  return OUTLINED_FUNCTION_68_15(v0);
}

uint64_t SearchCallHistoryReadMultipleVoiceMailRecordsParameters.isSingleDateRequest.getter()
{
  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for SearchCallHistoryReadMultipleVoiceMailRecordsParameters(0)
                                     + 36));
}

uint64_t SearchCallHistoryReadMultipleVoiceMailRecordsParameters.isTimeRangeRequest.getter()
{
  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for SearchCallHistoryReadMultipleVoiceMailRecordsParameters(0)
                                     + 40));
}

uint64_t SearchCallHistoryReadMultipleVoiceMailRecordsParameters.newRecordsCount.getter()
{
  uint64_t v0 = type metadata accessor for SearchCallHistoryReadMultipleVoiceMailRecordsParameters(0);
  return OUTLINED_FUNCTION_60_16(*(int *)(v0 + 44));
}

void SearchCallHistoryReadMultipleVoiceMailRecordsParameters.newRecordsCount.setter()
{
  uint64_t v0 = OUTLINED_FUNCTION_85_10();
  uint64_t v1 = type metadata accessor for SearchCallHistoryReadMultipleVoiceMailRecordsParameters(v0);
  OUTLINED_FUNCTION_7_66(*(int *)(v1 + 44));
}

Swift::Void (__swiftcall *SearchCallHistoryReadMultipleVoiceMailRecordsParameters.newRecordsCount.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t SearchCallHistoryReadMultipleVoiceMailRecordsParameters.savedRecordsCount.getter()
{
  return SearchCallHistoryReadMultipleVoiceMailRecordsParameters.savedRecordsCount.getter(type metadata accessor for SearchCallHistoryReadMultipleVoiceMailRecordsParameters);
}

void SearchCallHistoryReadMultipleVoiceMailRecordsParameters.savedRecordsCount.setter()
{
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  uint64_t v0 = OUTLINED_FUNCTION_85_10();
  uint64_t v2 = v1(v0);
  OUTLINED_FUNCTION_7_66(*(int *)(v2 + 48));
}

Swift::Void (__swiftcall *SearchCallHistoryReadMultipleVoiceMailRecordsParameters.savedRecordsCount.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t SearchCallHistoryReadMultipleVoiceMailRecordsParameters.voiceMailPosition.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SearchCallHistoryReadMultipleVoiceMailRecordsParameters(0);
  return outlined init with copy of SpeakableString?(v1 + *(int *)(v3 + 52), a1, &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t SearchCallHistoryReadMultipleVoiceMailRecordsParameters.voiceMailPosition.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SearchCallHistoryReadMultipleVoiceMailRecordsParameters(0) + 52);

  return outlined assign with take of SpeakableString?(a1, v3);
}

Swift::Void (__swiftcall *SearchCallHistoryReadMultipleVoiceMailRecordsParameters.voiceMailPosition.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t SearchCallHistoryReadMultipleVoiceMailRecordsParameters.asKeyValuePairs()()
{
  uint64_t v2 = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v4 = OUTLINED_FUNCTION_11_0(v3);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_29_9();
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v40 - v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_46DE30;
  *(void *)(v8 + 32) = 0x6C646E7542707061;
  *(void *)(v8 + 40) = 0xEB00000000644965;
  outlined init with copy of SpeakableString?(v2, (uint64_t)v7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_4_6((uint64_t)v7);
  if (v10)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0((uint64_t)v7, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_90_11();
  }
  else
  {
    *(void *)(v8 + 72) = v9;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v8 + 48));
    OUTLINED_FUNCTION_9_80();
    OUTLINED_FUNCTION_139();
    v11();
  }
  OUTLINED_FUNCTION_74_11();
  *(void *)(v8 + 80) = v12;
  *(void *)(v8 + 88) = v13;
  uint64_t v14 = (int *)type metadata accessor for SearchCallHistoryReadMultipleVoiceMailRecordsParameters(0);
  uint64_t v15 = *(void *)(v2 + v14[5]);
  if (v15)
  {
    type metadata accessor for PhoneCallRecord(0);
    uint64_t v16 = v15;
  }
  else
  {
    OUTLINED_FUNCTION_34();
    *(void *)(v8 + 104) = 0;
    *(void *)(v8 + 112) = 0;
  }
  *(void *)(v8 + 96) = v16;
  OUTLINED_FUNCTION_66_5();
  *(void *)(v8 + 120) = v17;
  *(void *)(v8 + 128) = v18;
  *(void *)(v8 + 136) = 0xE600000000000000;
  uint64_t v19 = *(void *)(v2 + v14[6]);
  if (v19)
  {
    uint64_t v20 = type metadata accessor for PhoneSearchCallHistoryIntent(0);
    uint64_t v21 = v19;
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v20 = 0;
    *(void *)(v8 + 152) = 0;
    *(void *)(v8 + 160) = 0;
  }
  *(void *)(v8 + 144) = v21;
  *(void *)(v8 + 168) = v20;
  *(void *)(v8 + 176) = 0xD000000000000021;
  OUTLINED_FUNCTION_134();
  *(void *)(v8 + 184) = v22;
  *(unsigned char *)(v8 + 192) = *(unsigned char *)(v2 + v14[7]);
  *(void *)(v8 + 216) = &type metadata for Bool;
  strcpy((char *)(v8 + 224), "isNewVoicemail");
  *(unsigned char *)(v8 + 239) = -18;
  *(unsigned char *)(v8 + 240) = *(unsigned char *)(v2 + v14[8]);
  *(void *)(v8 + 264) = &type metadata for Bool;
  *(void *)(v8 + 272) = v23 | 2;
  OUTLINED_FUNCTION_134();
  *(void *)(v8 + 280) = v24;
  *(unsigned char *)(v8 + 288) = *(unsigned char *)(v2 + v14[9]);
  *(void *)(v8 + 312) = v26;
  *(void *)(v8 + 320) = v25 + 1;
  OUTLINED_FUNCTION_134();
  *(void *)(v8 + 328) = v28;
  *(unsigned char *)(v8 + 336) = *(unsigned char *)(v2 + v14[10]);
  *(void *)(v8 + 360) = v29;
  *(void *)(v8 + 368) = 0x726F63655277656ELL;
  *(void *)(v8 + 376) = 0xEF746E756F437364;
  uint64_t v30 = v2 + v14[11];
  if (*(unsigned char *)(v30 + 8))
  {
    uint64_t v31 = 0;
    *(void *)(v8 + 392) = 0;
    *(void *)(v8 + 400) = 0;
    uint64_t v32 = 0;
  }
  else
  {
    uint64_t v32 = *(void *)v30;
    uint64_t v31 = &type metadata for Double;
  }
  *(void *)(v8 + 384) = v32;
  *(void *)(v8 + 408) = v31;
  *(void *)(v8 + 416) = v27;
  OUTLINED_FUNCTION_134();
  *(void *)(v8 + 424) = v34;
  uint64_t v35 = v2 + v14[12];
  if (*(unsigned char *)(v35 + 8))
  {
    uint64_t v36 = 0;
    *(void *)(v8 + 440) = 0;
    *(void *)(v8 + 448) = 0;
    uint64_t v37 = 0;
  }
  else
  {
    uint64_t v37 = *(void *)v35;
    uint64_t v36 = &type metadata for Double;
  }
  *(void *)(v8 + 432) = v37;
  *(void *)(v8 + 456) = v36;
  *(void *)(v8 + 464) = v33;
  *(void *)(v8 + 472) = 0x8000000000497330;
  outlined init with copy of SpeakableString?(v2 + v14[13], v0, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_4_6(v0);
  if (v10)
  {
    swift_retain();
    swift_retain();
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v0, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_103();
  }
  else
  {
    *(void *)(v8 + 504) = v9;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v8 + 480));
    OUTLINED_FUNCTION_9_80();
    OUTLINED_FUNCTION_52_22();
    v38();
    swift_retain();
    swift_retain();
  }
  return v8;
}

uint64_t SearchCallHistoryReadMultipleVoiceMailRecordsParameters.init(appBundleId:callRecord:intent:isLeadingSavedVoiceMailPostPrompt:isNewVoicemail:isSingleDateRequest:isTimeRangeRequest:newRecordsCount:savedRecordsCount:voiceMailPosition:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6, char a7, uint64_t a8, char a9, uint64_t a10, char a11, uint64_t a12)
{
  OUTLINED_FUNCTION_86_10();
  outlined init with take of URL?(v19, v14, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v20 = (int *)type metadata accessor for SearchCallHistoryReadMultipleVoiceMailRecordsParameters(0);
  *(void *)(v14 + v20[5]) = v13;
  *(void *)(v14 + v20[6]) = v12;
  *(unsigned char *)(v14 + v20[7]) = a4;
  *(unsigned char *)(v14 + v20[8]) = a5;
  *(unsigned char *)(v14 + v20[9]) = a6;
  *(unsigned char *)(v14 + v20[10]) = a7;
  uint64_t v21 = v14 + v20[11];
  *(void *)uint64_t v21 = a8;
  *(unsigned char *)(v21 + 8) = a9 & 1;
  uint64_t v22 = v14 + v20[12];
  *(void *)uint64_t v22 = a10;
  *(unsigned char *)(v22 + 8) = a11 & 1;
  return outlined init with take of URL?(a12, v14 + v20[13], &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t SearchCallHistoryReadSingleCallRecordParameters.callRecord.getter()
{
  return SearchCallHistoryReadMultipleVoiceMailRecordsParameters.callRecord.getter((void (*)(void))type metadata accessor for SearchCallHistoryReadSingleCallRecordParameters);
}

uint64_t SearchCallHistoryReadMultipleVoiceMailRecordsParameters.callRecord.getter(void (*a1)(void))
{
  a1(0);

  return swift_retain();
}

uint64_t type metadata accessor for SearchCallHistoryReadSingleCallRecordParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for SearchCallHistoryReadSingleCallRecordParameters);
}

uint64_t SearchCallHistoryReadSingleCallRecordParameters.callRecord.setter()
{
  return SearchCallHistoryReadMultipleVoiceMailRecordsParameters.callRecord.setter();
}

Swift::Void (__swiftcall *SearchCallHistoryReadSingleCallRecordParameters.callRecord.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t SearchCallHistoryReadSingleCallRecordParameters.intent.getter()
{
  return SearchCallHistoryReadCannotFindCallRecordParameters.device.getter((void (*)(void))type metadata accessor for SearchCallHistoryReadSingleCallRecordParameters);
}

uint64_t SearchCallHistoryReadSingleCallRecordParameters.intent.setter()
{
  return SearchCallHistoryReadCannotFindCallRecordParameters.device.setter();
}

Swift::Void (__swiftcall *SearchCallHistoryReadSingleCallRecordParameters.intent.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t SearchCallHistoryReadSingleCallRecordParameters.isSingleDateRequest.getter()
{
  uint64_t v0 = type metadata accessor for SearchCallHistoryReadSingleCallRecordParameters(0);
  return OUTLINED_FUNCTION_98_8(v0);
}

uint64_t SearchCallHistoryReadSingleCallRecordParameters.isTimeRangeRequest.getter()
{
  uint64_t v0 = type metadata accessor for SearchCallHistoryReadSingleCallRecordParameters(0);
  return OUTLINED_FUNCTION_68_15(v0);
}

uint64_t SearchCallHistoryReadSingleCallRecordParameters.asKeyValuePairs()()
{
  return SearchCallHistoryReadSingleCallRecordParameters.asKeyValuePairs()(type metadata accessor for SearchCallHistoryReadSingleCallRecordParameters);
}

int *SearchCallHistoryReadSingleCallRecordParameters.init(appBundleId:callRecord:intent:isSingleDateRequest:isTimeRangeRequest:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, uint64_t a6@<X8>)
{
  return SearchCallHistoryReadSingleCallRecordParameters.init(appBundleId:callRecord:intent:isSingleDateRequest:isTimeRangeRequest:)(a1, a2, a3, a4, a5, type metadata accessor for SearchCallHistoryReadSingleCallRecordParameters, a6);
}

uint64_t SearchCallHistoryReadSingleCallRecordDisplayForwardParameters.callRecord.getter()
{
  return SearchCallHistoryReadMultipleVoiceMailRecordsParameters.callRecord.getter((void (*)(void))type metadata accessor for SearchCallHistoryReadSingleCallRecordDisplayForwardParameters);
}

uint64_t type metadata accessor for SearchCallHistoryReadSingleCallRecordDisplayForwardParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for SearchCallHistoryReadSingleCallRecordDisplayForwardParameters);
}

uint64_t SearchCallHistoryReadSingleCallRecordDisplayForwardParameters.callRecord.setter()
{
  return SearchCallHistoryReadMultipleVoiceMailRecordsParameters.callRecord.setter();
}

Swift::Void (__swiftcall *SearchCallHistoryReadSingleCallRecordDisplayForwardParameters.callRecord.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t SearchCallHistoryReadSingleCallRecordDisplayForwardParameters.intent.getter()
{
  return SearchCallHistoryReadCannotFindCallRecordParameters.device.getter((void (*)(void))type metadata accessor for SearchCallHistoryReadSingleCallRecordDisplayForwardParameters);
}

uint64_t SearchCallHistoryReadSingleCallRecordDisplayForwardParameters.intent.setter()
{
  return SearchCallHistoryReadCannotFindCallRecordParameters.device.setter();
}

Swift::Void (__swiftcall *SearchCallHistoryReadSingleCallRecordDisplayForwardParameters.intent.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t SearchCallHistoryReadSingleCallRecordDisplayForwardParameters.isSingleDateRequest.getter()
{
  uint64_t v0 = type metadata accessor for SearchCallHistoryReadSingleCallRecordDisplayForwardParameters(0);
  return OUTLINED_FUNCTION_98_8(v0);
}

uint64_t SearchCallHistoryReadSingleCallRecordDisplayForwardParameters.isTimeRangeRequest.getter()
{
  uint64_t v0 = type metadata accessor for SearchCallHistoryReadSingleCallRecordDisplayForwardParameters(0);
  return OUTLINED_FUNCTION_68_15(v0);
}

uint64_t SearchCallHistoryReadSingleCallRecordDisplayForwardParameters.asKeyValuePairs()()
{
  return SearchCallHistoryReadSingleCallRecordParameters.asKeyValuePairs()(type metadata accessor for SearchCallHistoryReadSingleCallRecordDisplayForwardParameters);
}

uint64_t SearchCallHistoryReadSingleCallRecordParameters.asKeyValuePairs()(uint64_t (*a1)(void))
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v4 = OUTLINED_FUNCTION_11_0(v3);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_4();
  uint64_t v7 = v6 - v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_46DE40;
  uint64_t v9 = (uint64_t *)(v8 + 48);
  uint64_t v10 = OUTLINED_FUNCTION_44_27(v8);
  outlined init with copy of SpeakableString?(v10, v7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v11 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload(v7, 1, v11) == 1)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v7, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v9 = 0u;
    *(_OWORD *)(v8 + 64) = 0u;
  }
  else
  {
    *(void *)(v8 + 72) = v11;
    __swift_allocate_boxed_opaque_existential_1(v9);
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v12 + 32))();
  }
  OUTLINED_FUNCTION_74_11();
  *(void *)(v8 + 80) = v13;
  *(void *)(v8 + 88) = v14;
  uint64_t v15 = (int *)a1(0);
  uint64_t v16 = *(void *)(v1 + v15[5]);
  if (v16)
  {
    uint64_t v17 = type metadata accessor for PhoneCallRecord(0);
    uint64_t v18 = v16;
  }
  else
  {
    uint64_t v17 = OUTLINED_FUNCTION_34();
    *(void *)(v8 + 104) = 0;
    *(void *)(v8 + 112) = 0;
  }
  *(void *)(v8 + 96) = v18;
  OUTLINED_FUNCTION_73_13(v17);
  uint64_t v19 = *(void *)(v1 + v15[6]);
  if (v19)
  {
    uint64_t v20 = type metadata accessor for PhoneSearchCallHistoryIntent(0);
  }
  else
  {
    uint64_t v20 = 0;
    *(void *)(v8 + 152) = 0;
    *(void *)(v8 + 160) = 0;
  }
  *(void *)(v8 + 144) = v19;
  *(void *)(v8 + 168) = v20;
  *(void *)(v8 + 176) = 0xD000000000000013;
  OUTLINED_FUNCTION_134();
  *(void *)(v8 + 184) = v21;
  *(unsigned char *)(v8 + 192) = *(unsigned char *)(v1 + v15[7]);
  *(void *)(v8 + 216) = &type metadata for Bool;
  *(void *)(v8 + 224) = v22;
  OUTLINED_FUNCTION_88_7((uint64_t)"isTimeRangeRequest");
  char v23 = *(unsigned char *)(v1 + v15[8]);
  *(void *)(v8 + 264) = v24;
  *(unsigned char *)(v8 + 240) = v23;
  swift_retain();
  swift_retain();
  return OUTLINED_FUNCTION_111_5();
}

int *SearchCallHistoryReadSingleCallRecordDisplayForwardParameters.init(appBundleId:callRecord:intent:isSingleDateRequest:isTimeRangeRequest:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, uint64_t a6@<X8>)
{
  return SearchCallHistoryReadSingleCallRecordParameters.init(appBundleId:callRecord:intent:isSingleDateRequest:isTimeRangeRequest:)(a1, a2, a3, a4, a5, type metadata accessor for SearchCallHistoryReadSingleCallRecordDisplayForwardParameters, a6);
}

int *SearchCallHistoryReadSingleCallRecordParameters.init(appBundleId:callRecord:intent:isSingleDateRequest:isTimeRangeRequest:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, uint64_t (*a6)(void)@<X5>, uint64_t a7@<X8>)
{
  outlined init with take of URL?(a1, a7, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t result = (int *)a6(0);
  *(void *)(a7 + result[5]) = a2;
  *(void *)(a7 + result[6]) = a3;
  *(unsigned char *)(a7 + result[7]) = a4;
  *(unsigned char *)(a7 + result[8]) = a5;
  return result;
}

uint64_t SearchCallHistoryReadSingleVoiceMailRecordParameters.callRecord.getter()
{
  return SearchCallHistoryReadMultipleVoiceMailRecordsParameters.callRecord.getter((void (*)(void))type metadata accessor for SearchCallHistoryReadSingleVoiceMailRecordParameters);
}

uint64_t type metadata accessor for SearchCallHistoryReadSingleVoiceMailRecordParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for SearchCallHistoryReadSingleVoiceMailRecordParameters);
}

uint64_t SearchCallHistoryReadSingleVoiceMailRecordParameters.callRecord.setter()
{
  return SearchCallHistoryReadMultipleVoiceMailRecordsParameters.callRecord.setter();
}

Swift::Void (__swiftcall *SearchCallHistoryReadSingleVoiceMailRecordParameters.callRecord.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t SearchCallHistoryReadSingleVoiceMailRecordParameters.intent.getter()
{
  return SearchCallHistoryReadCannotFindCallRecordParameters.device.getter((void (*)(void))type metadata accessor for SearchCallHistoryReadSingleVoiceMailRecordParameters);
}

uint64_t SearchCallHistoryReadSingleVoiceMailRecordParameters.intent.setter()
{
  return SearchCallHistoryReadCannotFindCallRecordParameters.device.setter();
}

Swift::Void (__swiftcall *SearchCallHistoryReadSingleVoiceMailRecordParameters.intent.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t SearchCallHistoryReadSingleVoiceMailRecordParameters.isSingleDateRequest.getter()
{
  uint64_t v0 = type metadata accessor for SearchCallHistoryReadSingleVoiceMailRecordParameters(0);
  return OUTLINED_FUNCTION_98_8(v0);
}

uint64_t SearchCallHistoryReadSingleVoiceMailRecordParameters.isTimeRangeRequest.getter()
{
  uint64_t v0 = type metadata accessor for SearchCallHistoryReadSingleVoiceMailRecordParameters(0);
  return OUTLINED_FUNCTION_68_15(v0);
}

uint64_t SearchCallHistoryReadSingleVoiceMailRecordParameters.asKeyValuePairs()()
{
  return SearchCallHistoryReadSingleCallRecordParameters.asKeyValuePairs()(type metadata accessor for SearchCallHistoryReadSingleVoiceMailRecordParameters);
}

int *SearchCallHistoryReadSingleVoiceMailRecordParameters.init(appBundleId:callRecord:intent:isSingleDateRequest:isTimeRangeRequest:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, uint64_t a6@<X8>)
{
  return SearchCallHistoryReadSingleCallRecordParameters.init(appBundleId:callRecord:intent:isSingleDateRequest:isTimeRangeRequest:)(a1, a2, a3, a4, a5, type metadata accessor for SearchCallHistoryReadSingleVoiceMailRecordParameters, a6);
}

__n128 *SearchCallHistoryReadCannotFindVoicemailParameters.asKeyValuePairs()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v1 = (__n128 *)swift_allocObject();
  OUTLINED_FUNCTION_106(v1, (__n128)xmmword_46A250);
  outlined init with take of URL?(v0, (uint64_t)v14, &demangling cache variable for type metadata for PhoneSearchCallHistoryIntent?);
  outlined init with take of URL?((uint64_t)v14, (uint64_t)&v15, &demangling cache variable for type metadata for PhoneSearchCallHistoryIntent?);
  unint64_t v2 = v15;
  if (v15)
  {
    type metadata accessor for PhoneSearchCallHistoryIntent(0);
  }
  else
  {
    v1[3].n128_u64[1] = 0;
    v1[4].n128_u64[0] = 0;
  }
  v1[3].n128_u64[0] = v2;
  OUTLINED_FUNCTION_108_6();
  v1[4].n128_u64[1] = v3;
  v1[5].n128_u64[0] = v4;
  OUTLINED_FUNCTION_106_5();
  v1[5].n128_u64[1] = v5;
  outlined init with take of URL?(v0 + 8, (uint64_t)v13, &demangling cache variable for type metadata for Double?);
  outlined init with take of URL?((uint64_t)v13, (uint64_t)&v16, &demangling cache variable for type metadata for Double?);
  if (v17)
  {
    uint64_t v6 = 0;
    v1[6].n128_u64[1] = 0;
    v1[7].n128_u64[0] = 0;
    unint64_t v7 = 0;
  }
  else
  {
    uint64_t v6 = &type metadata for Double;
    unint64_t v7 = v16;
  }
  v1[6].n128_u64[0] = v7;
  v1[7].n128_u64[1] = (unint64_t)v6;
  v1[8].n128_u64[0] = 0xD000000000000011;
  OUTLINED_FUNCTION_41_0();
  v1[8].n128_u64[1] = v8;
  outlined init with take of URL?(v0 + 24, (uint64_t)v12, &demangling cache variable for type metadata for Double?);
  outlined init with take of URL?((uint64_t)v12, (uint64_t)&v18, &demangling cache variable for type metadata for Double?);
  if (v19)
  {
    uint64_t v9 = 0;
    v1[9].n128_u64[1] = 0;
    v1[10].n128_u64[0] = 0;
    unint64_t v10 = 0;
  }
  else
  {
    uint64_t v9 = &type metadata for Double;
    unint64_t v10 = v18;
  }
  v1[9].n128_u64[0] = v10;
  v1[10].n128_u64[1] = (unint64_t)v9;
  outlined retain of PhoneSearchCallHistoryIntent?((uint64_t)v14);
  return v1;
}

uint64_t SearchCallHistoryShowCallHistoryParameters.appName.getter@<X0>(uint64_t a1@<X8>)
{
  return SearchCallHistoryReadMultipleCallRecordsParameters.appName.getter(type metadata accessor for SearchCallHistoryShowCallHistoryParameters, a1);
}

uint64_t SearchCallHistoryReadMultipleCallRecordsParameters.appName.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  uint64_t v4 = OUTLINED_FUNCTION_94(v3);
  return outlined init with copy of SpeakableString?(v4, a2, &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t type metadata accessor for SearchCallHistoryShowCallHistoryParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for SearchCallHistoryShowCallHistoryParameters);
}

uint64_t SearchCallHistoryShowCallHistoryParameters.appName.setter()
{
  return SearchCallHistoryReadMultipleCallRecordsParameters.appName.setter();
}

Swift::Void (__swiftcall *SearchCallHistoryShowCallHistoryParameters.appName.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t SearchCallHistoryShowCallHistoryParameters.callRecordCount.getter()
{
  return SearchCallHistoryReadMultipleCallRecordsParameters.callRecordCount.getter(type metadata accessor for SearchCallHistoryShowCallHistoryParameters);
}

uint64_t SearchCallHistoryReadMultipleCallRecordsParameters.callRecordCount.getter(uint64_t (*a1)(void))
{
  uint64_t v1 = a1(0);
  return OUTLINED_FUNCTION_60_16(*(int *)(v1 + 24));
}

void SearchCallHistoryShowCallHistoryParameters.callRecordCount.setter()
{
}

Swift::Void (__swiftcall *SearchCallHistoryShowCallHistoryParameters.callRecordCount.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t SearchCallHistoryShowCallHistoryParameters.callRecords.getter()
{
  return SearchCallHistoryReadMultipleCallRecordsParameters.callRecords.getter((void (*)(void))type metadata accessor for SearchCallHistoryShowCallHistoryParameters);
}

uint64_t SearchCallHistoryReadMultipleCallRecordsParameters.callRecords.getter(void (*a1)(void))
{
  a1(0);

  return swift_bridgeObjectRetain();
}

uint64_t SearchCallHistoryShowCallHistoryParameters.device.getter()
{
  type metadata accessor for SearchCallHistoryShowCallHistoryParameters(0);

  return swift_retain();
}

uint64_t SearchCallHistoryShowCallHistoryParameters.device.setter()
{
  uint64_t v2 = *(int *)(OUTLINED_FUNCTION_53_24() + 32);
  uint64_t result = swift_release();
  *(void *)(v1 + v2) = v0;
  return result;
}

Swift::Void (__swiftcall *SearchCallHistoryShowCallHistoryParameters.device.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t SearchCallHistoryShowCallHistoryParameters.intent.getter()
{
  type metadata accessor for SearchCallHistoryShowCallHistoryParameters(0);

  return swift_retain();
}

uint64_t SearchCallHistoryShowCallHistoryParameters.intent.setter()
{
  uint64_t v2 = *(int *)(OUTLINED_FUNCTION_53_24() + 36);
  uint64_t result = swift_release();
  *(void *)(v1 + v2) = v0;
  return result;
}

Swift::Void (__swiftcall *SearchCallHistoryShowCallHistoryParameters.intent.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t SearchCallHistoryShowCallHistoryParameters.isFirstPartyApp.getter()
{
  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for SearchCallHistoryShowCallHistoryParameters(0) + 40));
}

uint64_t SearchCallHistoryShowCallHistoryParameters.isShowingMissedCall.getter()
{
  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for SearchCallHistoryShowCallHistoryParameters(0) + 44));
}

uint64_t SearchCallHistoryShowCallHistoryParameters.totalCallRecordCount.getter()
{
  return SearchCallHistoryReadMultipleVoiceMailRecordsParameters.savedRecordsCount.getter(type metadata accessor for SearchCallHistoryShowCallHistoryParameters);
}

uint64_t SearchCallHistoryReadMultipleVoiceMailRecordsParameters.savedRecordsCount.getter(uint64_t (*a1)(void))
{
  uint64_t v1 = a1(0);
  return OUTLINED_FUNCTION_60_16(*(int *)(v1 + 48));
}

void SearchCallHistoryShowCallHistoryParameters.totalCallRecordCount.setter()
{
}

Swift::Void (__swiftcall *SearchCallHistoryShowCallHistoryParameters.totalCallRecordCount.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t SearchCallHistoryShowCallHistoryParameters.asKeyValuePairs()()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v3 = OUTLINED_FUNCTION_11_0(v2);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_27();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v38 - v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_4771A0;
  unint64_t v8 = (uint64_t *)(v7 + 48);
  OUTLINED_FUNCTION_14_53(v7);
  uint64_t v9 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_30_0((uint64_t)v6);
  if (v10)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0((uint64_t)v6, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_90_11();
  }
  else
  {
    *(void *)(v7 + 72) = v9;
    __swift_allocate_boxed_opaque_existential_1(v8);
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_99();
    v11();
  }
  uint64_t v12 = OUTLINED_FUNCTION_46_26();
  uint64_t v13 = (int *)type metadata accessor for SearchCallHistoryShowCallHistoryParameters(v12);
  uint64_t v14 = OUTLINED_FUNCTION_94((uint64_t)v13);
  outlined init with copy of SpeakableString?(v14, v1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_30_0(v1);
  if (v10)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_90_11();
  }
  else
  {
    *(void *)(v7 + 120) = v9;
    __swift_allocate_boxed_opaque_existential_1(v8);
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v15 + 32))();
  }
  OUTLINED_FUNCTION_26_40();
  if (v18)
  {
    *(void *)(v7 + 152) = 0;
    *(void *)(v7 + 160) = 0;
    double v19 = 0.0;
  }
  else
  {
    double v19 = *v17;
  }
  OUTLINED_FUNCTION_51_22(v16, v19);
  uint64_t v21 = *(void *)(v0 + v20);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PhoneCallRecord]);
  *(void *)(v7 + 192) = v21;
  *(void *)(v7 + 216) = v22;
  *(void *)(v7 + 224) = 0x656369766564;
  *(void *)(v7 + 232) = 0xE600000000000000;
  uint64_t v23 = *(void *)(v0 + v13[8]);
  if (v23)
  {
    type metadata accessor for SirikitDeviceState();
    uint64_t v24 = v23;
  }
  else
  {
    OUTLINED_FUNCTION_34();
    *(void *)(v7 + 248) = 0;
    *(void *)(v7 + 256) = 0;
  }
  *(void *)(v7 + 240) = v24;
  OUTLINED_FUNCTION_66_5();
  *(void *)(v7 + 264) = v25;
  *(void *)(v7 + 272) = v26;
  *(void *)(v7 + 280) = 0xE600000000000000;
  uint64_t v27 = *(void *)(v0 + v13[9]);
  if (v27)
  {
    type metadata accessor for PhoneSearchCallHistoryIntent(0);
    uint64_t v28 = v27;
  }
  else
  {
    OUTLINED_FUNCTION_34();
    *(void *)(v7 + 296) = 0;
    *(void *)(v7 + 304) = 0;
  }
  *(void *)(v7 + 288) = v28;
  OUTLINED_FUNCTION_132();
  *(void *)(v7 + 312) = v29;
  *(void *)(v7 + 320) = v30;
  OUTLINED_FUNCTION_142();
  *(void *)(v7 + 328) = v31;
  *(unsigned char *)(v7 + 336) = *(unsigned char *)(v0 + v13[10]);
  *(void *)(v7 + 360) = &type metadata for Bool;
  *(void *)(v7 + 368) = 0xD000000000000013;
  *(void *)(v7 + 376) = 0x8000000000497370;
  *(unsigned char *)(v7 + 384) = *(unsigned char *)(v0 + v13[11]);
  *(void *)(v7 + 408) = &type metadata for Bool;
  *(void *)(v7 + 416) = 0xD000000000000014;
  OUTLINED_FUNCTION_41_0();
  *(void *)(v7 + 424) = v32;
  OUTLINED_FUNCTION_57_19();
  if (v34)
  {
    uint64_t v35 = 0;
    *(void *)(v7 + 440) = 0;
    *(void *)(v7 + 448) = 0;
    uint64_t v36 = 0;
  }
  else
  {
    uint64_t v36 = *v33;
    uint64_t v35 = &type metadata for Double;
  }
  *(void *)(v7 + 432) = v36;
  *(void *)(v7 + 456) = v35;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return OUTLINED_FUNCTION_111_5();
}

uint64_t SearchCallHistoryShowCallHistoryParameters.init(appBundleId:appName:callRecordCount:callRecords:device:intent:isFirstPartyApp:isShowingMissedCall:totalCallRecordCount:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9, uint64_t a10, char a11)
{
  OUTLINED_FUNCTION_86_10();
  outlined init with take of URL?(v17, v12, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v18 = type metadata accessor for SearchCallHistoryShowCallHistoryParameters(0);
  uint64_t result = OUTLINED_FUNCTION_91_12(v18);
  uint64_t v20 = v12 + v13[6];
  *(void *)uint64_t v20 = v11;
  *(unsigned char *)(v20 + 8) = a4 & 1;
  *(void *)(v12 + v13[7]) = a5;
  *(void *)(v12 + v13[8]) = a6;
  *(void *)(v12 + v13[9]) = a7;
  *(unsigned char *)(v12 + v13[10]) = a8;
  *(unsigned char *)(v12 + v13[11]) = a9;
  uint64_t v21 = v12 + v13[12];
  *(void *)uint64_t v21 = a10;
  *(unsigned char *)(v21 + 8) = a11 & 1;
  return result;
}

uint64_t SearchCallHistoryShowVoicemailsParameters.callRecords.getter()
{
  type metadata accessor for SearchCallHistoryShowVoicemailsParameters(0);

  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for SearchCallHistoryShowVoicemailsParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for SearchCallHistoryShowVoicemailsParameters);
}

uint64_t SearchCallHistoryShowVoicemailsParameters.intent.getter()
{
  return SearchCallHistoryReadCannotFindCallRecordParameters.device.getter((void (*)(void))type metadata accessor for SearchCallHistoryShowVoicemailsParameters);
}

uint64_t SearchCallHistoryShowVoicemailsParameters.intent.setter()
{
  return SearchCallHistoryReadCannotFindCallRecordParameters.device.setter();
}

Swift::Void (__swiftcall *SearchCallHistoryShowVoicemailsParameters.intent.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t SearchCallHistoryShowVoicemailsParameters.newRecordsCount.getter()
{
  uint64_t v0 = type metadata accessor for SearchCallHistoryShowVoicemailsParameters(0);
  return OUTLINED_FUNCTION_60_16(*(int *)(v0 + 28));
}

void SearchCallHistoryShowVoicemailsParameters.newRecordsCount.setter()
{
  uint64_t v0 = type metadata accessor for SearchCallHistoryShowVoicemailsParameters(0);
  OUTLINED_FUNCTION_7_66(*(int *)(v0 + 28));
}

Swift::Void (__swiftcall *SearchCallHistoryShowVoicemailsParameters.newRecordsCount.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t SearchCallHistoryShowVoicemailsParameters.savedRecordsCount.getter()
{
  uint64_t v0 = type metadata accessor for SearchCallHistoryShowVoicemailsParameters(0);
  return OUTLINED_FUNCTION_60_16(*(int *)(v0 + 32));
}

void SearchCallHistoryShowVoicemailsParameters.savedRecordsCount.setter()
{
  uint64_t v0 = type metadata accessor for SearchCallHistoryShowVoicemailsParameters(0);
  OUTLINED_FUNCTION_7_66(*(int *)(v0 + 32));
}

Swift::Void (__swiftcall *SearchCallHistoryShowVoicemailsParameters.savedRecordsCount.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t SearchCallHistoryShowVoicemailsParameters.asKeyValuePairs()()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v3 = OUTLINED_FUNCTION_11_0(v2);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_12_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_46DE40;
  uint64_t v5 = (uint64_t *)(v4 + 48);
  OUTLINED_FUNCTION_14_53(v4);
  uint64_t v6 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_30_0(v1);
  if (v7)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v1, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v5 = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
  }
  else
  {
    *(void *)(v4 + 72) = v6;
    __swift_allocate_boxed_opaque_existential_1(v5);
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_99();
    v8();
  }
  *(void *)(v4 + 80) = 0x6F6365526C6C6163;
  *(void *)(v4 + 88) = 0xEB00000000736472;
  uint64_t v9 = type metadata accessor for SearchCallHistoryShowVoicemailsParameters(0);
  uint64_t v10 = *(void *)(v0 + *(int *)(v9 + 20));
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PhoneCallRecord]);
  *(void *)(v4 + 96) = v10;
  OUTLINED_FUNCTION_73_13(v11);
  uint64_t v12 = *(void *)(v0 + *(int *)(v9 + 24));
  if (v12)
  {
    type metadata accessor for PhoneSearchCallHistoryIntent(0);
    uint64_t v13 = v12;
  }
  else
  {
    uint64_t v13 = 0;
    *(void *)(v4 + 152) = 0;
    *(void *)(v4 + 160) = 0;
  }
  *(void *)(v4 + 144) = v13;
  OUTLINED_FUNCTION_108_6();
  *(void *)(v4 + 168) = v14;
  *(void *)(v4 + 176) = v15;
  OUTLINED_FUNCTION_106_5();
  *(void *)(v4 + 184) = v16;
  OUTLINED_FUNCTION_57_19();
  if (v18)
  {
    double v19 = 0;
    *(void *)(v4 + 200) = 0;
    *(void *)(v4 + 208) = 0;
    uint64_t v20 = 0;
  }
  else
  {
    uint64_t v20 = *v17;
    double v19 = &type metadata for Double;
  }
  *(void *)(v4 + 192) = v20;
  *(void *)(v4 + 216) = v19;
  *(void *)(v4 + 224) = 0xD000000000000011;
  OUTLINED_FUNCTION_88_7((uint64_t)"savedRecordsCount");
  OUTLINED_FUNCTION_57_19();
  if (v22)
  {
    uint64_t v23 = 0;
    *(void *)(v4 + 248) = 0;
    *(void *)(v4 + 256) = 0;
    uint64_t v24 = 0;
  }
  else
  {
    uint64_t v24 = *v21;
    uint64_t v23 = &type metadata for Double;
  }
  *(void *)(v4 + 240) = v24;
  *(void *)(v4 + 264) = v23;
  swift_retain();
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_111_5();
}

int *SearchCallHistoryShowVoicemailsParameters.init(appBundleId:callRecords:intent:newRecordsCount:savedRecordsCount:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  outlined init with take of URL?(a1, a8, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t result = (int *)type metadata accessor for SearchCallHistoryShowVoicemailsParameters(0);
  *(void *)(a8 + result[5]) = a2;
  *(void *)(a8 + result[6]) = a3;
  uint64_t v16 = a8 + result[7];
  *(void *)uint64_t v16 = a4;
  *(unsigned char *)(v16 + 8) = a5 & 1;
  uint64_t v17 = a8 + result[8];
  *(void *)uint64_t v17 = a6;
  *(unsigned char *)(v17 + 8) = a7 & 1;
  return result;
}

uint64_t SearchCallHistoryUnsupportedSearchParametersParameters.confirmAction.getter@<X0>(uint64_t a1@<X8>)
{
  return SearchCallHistoryReadMultipleCallRecordsParameters.appName.getter(type metadata accessor for SearchCallHistoryUnsupportedSearchParametersParameters, a1);
}

uint64_t type metadata accessor for SearchCallHistoryUnsupportedSearchParametersParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for SearchCallHistoryUnsupportedSearchParametersParameters);
}

uint64_t SearchCallHistoryUnsupportedSearchParametersParameters.confirmAction.setter()
{
  return SearchCallHistoryReadMultipleCallRecordsParameters.appName.setter();
}

Swift::Void (__swiftcall *SearchCallHistoryUnsupportedSearchParametersParameters.confirmAction.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t SearchCallHistoryUnsupportedSearchParametersParameters.contactToConfirm.getter()
{
  return SearchCallHistoryReadCannotFindCallRecordParameters.device.getter((void (*)(void))type metadata accessor for SearchCallHistoryUnsupportedSearchParametersParameters);
}

uint64_t SearchCallHistoryUnsupportedSearchParametersParameters.contactToConfirm.setter()
{
  return SearchCallHistoryReadCannotFindCallRecordParameters.device.setter();
}

Swift::Void (__swiftcall *SearchCallHistoryUnsupportedSearchParametersParameters.contactToConfirm.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t SearchCallHistoryUnsupportedSearchParametersParameters.displayText.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SearchCallHistoryUnsupportedSearchParametersParameters(0);
  return outlined init with copy of SpeakableString?(v1 + *(int *)(v3 + 28), a1, &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t SearchCallHistoryUnsupportedSearchParametersParameters.displayText.setter(uint64_t a1)
{
  type metadata accessor for SearchCallHistoryUnsupportedSearchParametersParameters(0);
  OUTLINED_FUNCTION_92_0();

  return outlined assign with take of SpeakableString?(a1, v2);
}

Swift::Void (__swiftcall *SearchCallHistoryUnsupportedSearchParametersParameters.displayText.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t SearchCallHistoryUnsupportedSearchParametersParameters.isLatest.getter()
{
  uint64_t v0 = type metadata accessor for SearchCallHistoryUnsupportedSearchParametersParameters(0);
  return OUTLINED_FUNCTION_68_15(v0);
}

uint64_t SearchCallHistoryUnsupportedSearchParametersParameters.isMissed.getter()
{
  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for SearchCallHistoryUnsupportedSearchParametersParameters(0)
                                     + 36));
}

uint64_t SearchCallHistoryUnsupportedSearchParametersParameters.isVoicemail.getter()
{
  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for SearchCallHistoryUnsupportedSearchParametersParameters(0)
                                     + 40));
}

uint64_t SearchCallHistoryUnsupportedSearchParametersParameters.rejectAction.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SearchCallHistoryUnsupportedSearchParametersParameters(0);
  return outlined init with copy of SpeakableString?(v1 + *(int *)(v3 + 44), a1, &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t SearchCallHistoryUnsupportedSearchParametersParameters.rejectAction.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SearchCallHistoryUnsupportedSearchParametersParameters(0) + 44);

  return outlined assign with take of SpeakableString?(a1, v3);
}

Swift::Void (__swiftcall *SearchCallHistoryUnsupportedSearchParametersParameters.rejectAction.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t SearchCallHistoryUnsupportedSearchParametersParameters.asKeyValuePairs()()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v3 = OUTLINED_FUNCTION_11_0(v2);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_29_9();
  uint64_t v5 = __chkstk_darwin(v4);
  char v7 = (char *)&v29 - v6;
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v29 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v29 - v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_46DE50;
  uint64_t v14 = OUTLINED_FUNCTION_44_27(v13);
  outlined init with copy of SpeakableString?(v14, (uint64_t)v12, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v15 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_4_6((uint64_t)v12);
  if (v16)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0((uint64_t)v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_103();
  }
  else
  {
    *(void *)(v13 + 72) = v15;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v13 + 48));
    OUTLINED_FUNCTION_9_80();
    OUTLINED_FUNCTION_139();
    v17();
  }
  strcpy((char *)(v13 + 80), "confirmAction");
  *(_WORD *)(v13 + 94) = -4864;
  char v18 = (int *)type metadata accessor for SearchCallHistoryUnsupportedSearchParametersParameters(0);
  uint64_t v19 = OUTLINED_FUNCTION_94((uint64_t)v18);
  outlined init with copy of SpeakableString?(v19, (uint64_t)v10, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_4_6((uint64_t)v10);
  if (v16)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0((uint64_t)v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_103();
  }
  else
  {
    *(void *)(v13 + 120) = v15;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v13 + 96));
    OUTLINED_FUNCTION_9_80();
    OUTLINED_FUNCTION_139();
    v20();
  }
  OUTLINED_FUNCTION_134();
  *(void *)(v13 + 128) = v21;
  *(void *)(v13 + 136) = v22;
  uint64_t v23 = *(void *)(v1 + v18[6]);
  if (v23)
  {
    uint64_t v24 = type metadata accessor for DialogPerson();
    uint64_t v25 = v23;
  }
  else
  {
    uint64_t v24 = OUTLINED_FUNCTION_34();
    *(void *)(v13 + 152) = 0;
    *(void *)(v13 + 160) = 0;
  }
  *(void *)(v13 + 144) = v25;
  *(void *)(v13 + 168) = v24;
  *(void *)(v13 + 176) = 0x5479616C70736964;
  *(void *)(v13 + 184) = 0xEB00000000747865;
  outlined init with copy of SpeakableString?(v1 + v18[7], (uint64_t)v7, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_4_6((uint64_t)v7);
  if (v16)
  {
    swift_retain();
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0((uint64_t)v7, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_103();
  }
  else
  {
    *(void *)(v13 + 216) = v15;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v13 + 192));
    OUTLINED_FUNCTION_9_80();
    OUTLINED_FUNCTION_52_22();
    v26();
    swift_retain();
  }
  *(void *)(v13 + 224) = 0x74736574614C7369;
  *(void *)(v13 + 232) = 0xE800000000000000;
  *(unsigned char *)(v13 + 240) = *(unsigned char *)(v1 + v18[8]);
  *(void *)(v13 + 264) = &type metadata for Bool;
  *(void *)(v13 + 272) = 0x64657373694D7369;
  *(void *)(v13 + 280) = 0xE800000000000000;
  *(unsigned char *)(v13 + 288) = *(unsigned char *)(v1 + v18[9]);
  *(void *)(v13 + 312) = &type metadata for Bool;
  *(void *)(v13 + 320) = 0x6D6563696F567369;
  *(void *)(v13 + 328) = 0xEB000000006C6961;
  *(unsigned char *)(v13 + 336) = *(unsigned char *)(v1 + v18[10]);
  *(void *)(v13 + 360) = &type metadata for Bool;
  strcpy((char *)(v13 + 368), "rejectAction");
  *(unsigned char *)(v13 + 381) = 0;
  *(_WORD *)(v13 + 382) = -5120;
  outlined init with copy of SpeakableString?(v1 + v18[11], v0, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_4_6(v0);
  if (v16)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v0, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v13 + 384) = 0u;
    *(_OWORD *)(v13 + 400) = 0u;
  }
  else
  {
    *(void *)(v13 + 408) = v15;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v13 + 384));
    OUTLINED_FUNCTION_9_80();
    OUTLINED_FUNCTION_139();
    v27();
  }
  return v13;
}

void SearchCallHistoryUnsupportedSearchParametersParameters.init(appBundleId:confirmAction:contactToConfirm:displayText:isLatest:isMissed:isVoicemail:rejectAction:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v4 = v3;
  char v6 = v5;
  char v8 = v7;
  char v10 = v9;
  uint64_t v12 = v11;
  OUTLINED_FUNCTION_86_10();
  outlined init with take of URL?(v13, v14, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v15 = type metadata accessor for SearchCallHistoryUnsupportedSearchParametersParameters(0);
  OUTLINED_FUNCTION_91_12(v15);
  *(void *)(v1 + v2[6]) = v0;
  outlined init with take of URL?(v12, v1 + v2[7], &demangling cache variable for type metadata for SpeakableString?);
  *(unsigned char *)(v1 + v2[8]) = v10;
  *(unsigned char *)(v1 + v2[9]) = v8;
  *(unsigned char *)(v1 + v2[10]) = v6;
  outlined init with take of URL?(v4, v1 + v2[11], &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_26_1();
}

double SearchCallHistoryVoiceMailOfferToFollowUpActionParameters.asKeyValuePairs()(char a1)
{
  return SearchCallHistoryOfferToReadMoreCallRecordsParameters.asKeyValuePairs()(a1, 0x61507473614C7369, 0xEA00000000006567);
}

double SearchCallHistoryOfferToReadMoreCallRecordsParameters.asKeyValuePairs()(char a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v6 = swift_allocObject();
  *(void *)&double result = 1;
  *(_OWORD *)(v6 + 16) = xmmword_467710;
  *(void *)(v6 + 32) = a2;
  *(void *)(v6 + 40) = a3;
  *(void *)(v6 + 72) = &type metadata for Bool;
  *(unsigned char *)(v6 + 48) = a1;
  return result;
}

uint64_t SearchCallHistoryCATPatternsExecutor.offerToReadMoreCallRecords(isLastWindow:)(char a1)
{
  *(void *)(v2 + 16) = v1;
  *(unsigned char *)(v2 + 48) = a1;
  return OUTLINED_FUNCTION_21_1((uint64_t)SearchCallHistoryCATPatternsExecutor.offerToReadMoreCallRecords(isLastWindow:));
}

uint64_t SearchCallHistoryCATPatternsExecutor.offerToReadMoreCallRecords(isLastWindow:)()
{
  OUTLINED_FUNCTION_16_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  swift_allocObject();
  OUTLINED_FUNCTION_103_4();
  v1[4] = v2;
  v1[5] = 0xEC000000776F646ELL;
  v1[9] = &type metadata for Bool;
  uint64_t v4 = (void *)OUTLINED_FUNCTION_86_5((uint64_t)v1, v3);
  *(void *)(v0 + 32) = v4;
  *uint64_t v4 = v0;
  v4[1] = AddCallParticipantCATsSimple.promptForParticipant(isUnsupportedFollowup:);
  OUTLINED_FUNCTION_10_16();
  return v6(0xD00000000000002CLL);
}

uint64_t SearchCallHistoryCATPatternsExecutor.readCannotFindCallRecord(isFirstPartyApp:isShowingMissedCall:_:)()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v5 = OUTLINED_FUNCTION_22_56(v1, v2, v3, v4);
  uint64_t v6 = type metadata accessor for SearchCallHistoryReadCannotFindCallRecordParameters(v5);
  *(void *)(v0 + 40) = v6;
  OUTLINED_FUNCTION_11_0(v6);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  int *v1;
  void (*v2)(uint64_t);
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t (*v14)(unint64_t);
  uint64_t v16;

  OUTLINED_FUNCTION_40_0();
  uint64_t v5 = OUTLINED_FUNCTION_21_47();
  __swift_storeEnumTagSinglePayload(v0, 1, 1, v5);
  uint64_t v6 = v0 + v1[5];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  *(void *)(v0 + v1[6]) = 0;
  *(void *)(v0 + v1[7]) = 0;
  *(unsigned char *)(v0 + v1[8]) = v4;
  *(unsigned char *)(v0 + v1[9]) = v3;
  uint64_t v7 = v0 + v1[10];
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  uint64_t v8 = OUTLINED_FUNCTION_39_6();
  v2(v8);
  uint64_t v9 = SearchCallHistoryReadCannotFindCallRecordParameters.asKeyValuePairs()();
  OUTLINED_FUNCTION_47_4(v9);
  char v10 = OUTLINED_FUNCTION_9_0();
  uint64_t v11 = (void *)OUTLINED_FUNCTION_33(v10);
  void *v11 = v12;
  v11[1] = SearchCallHistoryCATPatternsExecutor.readCannotFindCallRecord(isFirstPartyApp:isShowingMissedCall:_:);
  OUTLINED_FUNCTION_10_16();
  uint64_t v13 = OUTLINED_FUNCTION_74_1(42);
  return v14(v13);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_0_14();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_5_7();
  uint64_t *v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_4_2();
  char *v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  OUTLINED_FUNCTION_7_27();
  OUTLINED_FUNCTION_20_2();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of SearchCallHistoryReadCannotFindCallRecordParameters();
  swift_task_dealloc();
  uint64_t v0 = OUTLINED_FUNCTION_4_31();
  return v1(v0);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of SearchCallHistoryReadCannotFindCallRecordParameters();
  swift_task_dealloc();
  OUTLINED_FUNCTION_13_0();
  return v0();
}

uint64_t SearchCallHistoryCATPatternsExecutor.readCannotFindVoicemail(_:)(uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  return OUTLINED_FUNCTION_21_1((uint64_t)SearchCallHistoryCATPatternsExecutor.readCannotFindVoicemail(_:));
}

uint64_t SearchCallHistoryCATPatternsExecutor.readCannotFindVoicemail(_:)()
{
  OUTLINED_FUNCTION_40_0();
  uint64_t v6 = OUTLINED_FUNCTION_33_30();
  v7(v6);
  OUTLINED_FUNCTION_70_10();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v8 = (__n128 *)swift_allocObject();
  *(void *)(v2 + 72) = v8;
  OUTLINED_FUNCTION_106(v8, (__n128)xmmword_46A250);
  if (v0)
  {
    uint64_t v9 = type metadata accessor for PhoneSearchCallHistoryIntent(0);
    uint64_t v10 = v0;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0;
    v8[3].n128_u64[1] = 0;
    v8[4].n128_u64[0] = 0;
  }
  OUTLINED_FUNCTION_28_42(v9, v10);
  if (v4)
  {
    uint64_t v11 = 0;
    v8[6].n128_u64[1] = 0;
    v8[7].n128_u64[0] = 0;
  }
  else
  {
    uint64_t v11 = &type metadata for Double;
  }
  OUTLINED_FUNCTION_94_9((uint64_t)v11);
  v8[8].n128_u64[1] = 0x8000000000497350;
  if (v1)
  {
    uint64_t v12 = 0;
    v8[9].n128_u64[1] = 0;
    v8[10].n128_u64[0] = 0;
    unint64_t v5 = 0;
  }
  else
  {
    uint64_t v12 = &type metadata for Double;
  }
  v8[9].n128_u64[0] = v5;
  v8[10].n128_u64[1] = (unint64_t)v12;
  OUTLINED_FUNCTION_19_2();
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v3 + 96) = v13;
  *uint64_t v13 = v3;
  v13[1] = SearchCallHistoryCATPatternsExecutor.readCannotFindVoicemail(_:);
  uint64_t v14 = OUTLINED_FUNCTION_32_0(v4 + 24);
  return v15(v14);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_0_14();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_5_7();
  uint64_t *v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_4_2();
  char *v7 = v6;
  *(void *)(v4 + 104) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 112) = v1;
  }
  OUTLINED_FUNCTION_7_27();
  OUTLINED_FUNCTION_20_2();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_1_0();
  swift_release();
  int v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 112);
  return v1(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  swift_release();
  int v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t SearchCallHistoryCATPatternsExecutor.readMultipleCallRecords(callRecords:callRecordsItem1:callRecordsItem2:callRecordsItem3:callRecordsItem4:isFirstPartyApp:isFirstWindow:isLastWindow:isShowingMissedCall:isSingleDateRequest:isTimeRangeRequest:_:)()
{
  OUTLINED_FUNCTION_1_0();
  *(void *)(v1 + 64) = v20;
  *(void *)(v1 + 72) = v0;
  *(unsigned char *)(v1 + 133) = v18;
  *(unsigned char *)(v1 + 132) = v17;
  *(unsigned char *)(v1 + 131) = v16;
  *(unsigned char *)(v1 + 130) = v2;
  *(unsigned char *)(v1 + 129) = v3;
  *(unsigned char *)(v1 + 128) = v4;
  *(void *)(v1 + 48) = v5;
  *(void *)(v1 + 56) = v19;
  *(void *)(v1 + 32) = v6;
  *(void *)(v1 + 40) = v7;
  *(void *)(v1 + 16) = v8;
  *(void *)(v1 + 24) = v9;
  uint64_t v10 = type metadata accessor for SearchCallHistoryReadMultipleCallRecordsParameters(0);
  *(void *)(v1 + 80) = v10;
  OUTLINED_FUNCTION_11_0(v10);
  *(void *)(v1 + 88) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v11, v12, v13);
}

{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  void *v13;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  void (*v20)(uint64_t);
  uint64_t (*v21)(unint64_t);
  uint64_t v22;

  char v2 = *(int **)(v0 + 80);
  uint64_t v1 = *(void *)(v0 + 88);
  char v18 = *(unsigned char *)(v0 + 132);
  uint64_t v19 = *(unsigned char *)(v0 + 133);
  char v16 = *(unsigned char *)(v0 + 130);
  char v17 = *(unsigned char *)(v0 + 131);
  uint64_t v15 = *(unsigned char *)(v0 + 129);
  char v3 = *(unsigned char *)(v0 + 128);
  char v4 = *(void *)(v0 + 48);
  uint64_t v20 = *(void (**)(uint64_t))(v0 + 56);
  uint64_t v6 = *(void *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v8 = *(void *)(v0 + 16);
  uint64_t v7 = *(void *)(v0 + 24);
  uint64_t v9 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v9);
  __swift_storeEnumTagSinglePayload(v1 + v2[5], 1, 1, v9);
  OUTLINED_FUNCTION_62_21(v2[6]);
  *(void *)(v1 + v2[7]) = v8;
  *(void *)(v1 + v2[8]) = v7;
  *(void *)(v1 + v2[9]) = v6;
  *(void *)(v1 + v2[10]) = v5;
  *(void *)(v1 + v2[11]) = v4;
  *(void *)(v1 + v2[12]) = 0;
  *(void *)(v1 + v2[13]) = 0;
  *(unsigned char *)(v1 + v2[14]) = v3;
  *(unsigned char *)(v1 + v2[15]) = v15;
  *(unsigned char *)(v1 + v2[16]) = v16;
  *(unsigned char *)(v1 + v2[17]) = v17;
  *(unsigned char *)(v1 + v2[18]) = v18;
  *(unsigned char *)(v1 + v2[19]) = v19;
  OUTLINED_FUNCTION_62_21(v2[20]);
  uint64_t v10 = v1 + v2[21];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v20(v1);
  SearchCallHistoryReadMultipleCallRecordsParameters.asKeyValuePairs()();
  *(void *)(v0 + 96) = v12;
  uint64_t v21 = (uint64_t (*)(unint64_t))((char *)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:)
                                                 + async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v13;
  *uint64_t v13 = v0;
  v13[1] = SearchCallHistoryCATPatternsExecutor.readMultipleCallRecords(callRecords:callRecordsItem1:callRecordsItem2:callRecordsItem3:callRecordsItem4:isFirstPartyApp:isFirstWindow:isLastWindow:isShowingMissedCall:isSingleDateRequest:isTimeRangeRequest:_:);
  OUTLINED_FUNCTION_10_16();
  return v21(0xD000000000000029);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_0_14();
  char v4 = v3;
  OUTLINED_FUNCTION_5_7();
  uint64_t *v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_4_2();
  char *v7 = v6;
  *(void *)(v4 + 112) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 120) = v1;
  }
  OUTLINED_FUNCTION_7_27();
  OUTLINED_FUNCTION_20_2();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of SearchCallHistoryReadCannotFindCallRecordParameters();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  char v2 = *(void *)(v0 + 120);
  return v1(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of SearchCallHistoryReadCannotFindCallRecordParameters();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t outlined destroy of SearchCallHistoryReadCannotFindCallRecordParameters()
{
  uint64_t v1 = OUTLINED_FUNCTION_37_6();
  v2(v1);
  OUTLINED_FUNCTION_10();
  (*(void (**)(uint64_t))(v3 + 8))(v0);
  return v0;
}

uint64_t SearchCallHistoryCATPatternsExecutor.readMultipleVoiceMailRecords(isLeadingSavedVoiceMailPostPrompt:isNewVoicemail:isSingleDateRequest:isTimeRangeRequest:_:)()
{
  OUTLINED_FUNCTION_1_0();
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v0;
  *(void *)(v1 + 16) = v3;
  *(unsigned char *)(v1 + 91) = v4;
  uint64_t v8 = OUTLINED_FUNCTION_102_7(v5, v6, v7);
  uint64_t v9 = type metadata accessor for SearchCallHistoryReadMultipleVoiceMailRecordsParameters(v8);
  *(void *)(v1 + 40) = v9;
  OUTLINED_FUNCTION_11_0(v9);
  *(void *)(v1 + 48) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v10, v11, v12);
}

{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  void (*v3)(uint64_t);
  char v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t (*v16)(unint64_t);
  uint64_t v18;

  uint64_t v2 = *(int **)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void (**)(uint64_t))(v0 + 16);
  char v4 = *(unsigned char *)(v0 + 91);
  char v5 = *(unsigned char *)(v0 + 90);
  char v6 = *(unsigned char *)(v0 + 89);
  char v7 = *(unsigned char *)(v0 + 88);
  type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_14_1(v1);
  OUTLINED_FUNCTION_14_1(v1 + v2[13]);
  *(void *)(v1 + v2[5]) = 0;
  *(void *)(v1 + v2[6]) = 0;
  *(unsigned char *)(v1 + v2[7]) = v7;
  *(unsigned char *)(v1 + v2[8]) = v6;
  *(unsigned char *)(v1 + v2[9]) = v5;
  *(unsigned char *)(v1 + v2[10]) = v4;
  OUTLINED_FUNCTION_62_21(v2[11]);
  uint64_t v8 = v1 + v2[12];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = v9;
  uint64_t v10 = OUTLINED_FUNCTION_39_6();
  v3(v10);
  uint64_t v11 = SearchCallHistoryReadMultipleVoiceMailRecordsParameters.asKeyValuePairs()();
  OUTLINED_FUNCTION_47_4(v11);
  uint64_t v12 = OUTLINED_FUNCTION_9_0();
  uint64_t v13 = (void *)OUTLINED_FUNCTION_33(v12);
  *uint64_t v13 = v14;
  v13[1] = SearchCallHistoryCATPatternsExecutor.readMultipleVoiceMailRecords(isLeadingSavedVoiceMailPostPrompt:isNewVoicemail:isSingleDateRequest:isTimeRangeRequest:_:);
  OUTLINED_FUNCTION_10_16();
  uint64_t v15 = OUTLINED_FUNCTION_74_1(46);
  return v16(v15);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_0_14();
  char v4 = v3;
  OUTLINED_FUNCTION_5_7();
  uint64_t *v5 = v4;
  char v6 = *v2;
  OUTLINED_FUNCTION_4_2();
  char *v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  OUTLINED_FUNCTION_7_27();
  OUTLINED_FUNCTION_20_2();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of SearchCallHistoryReadCannotFindCallRecordParameters();
  swift_task_dealloc();
  uint64_t v0 = OUTLINED_FUNCTION_4_31();
  return v1(v0);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of SearchCallHistoryReadCannotFindCallRecordParameters();
  swift_task_dealloc();
  OUTLINED_FUNCTION_13_0();
  return v0();
}

uint64_t SearchCallHistoryCATPatternsExecutor.readPlayVoiceMailPrePrompt()()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_9_0();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v3(0xD00000000000002CLL, 0x800000000048EBC0, _swiftEmptyArrayStorage);
}

uint64_t SearchCallHistoryCATPatternsExecutor.readSingleCallRecord(isSingleDateRequest:isTimeRangeRequest:_:)()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v5 = OUTLINED_FUNCTION_22_56(v1, v2, v3, v4);
  uint64_t v6 = type metadata accessor for SearchCallHistoryReadSingleCallRecordParameters(v5);
  *(void *)(v0 + 40) = v6;
  OUTLINED_FUNCTION_11_0(v6);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  void (*v0)(uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t (*v9)(unint64_t);
  uint64_t v11;

  OUTLINED_FUNCTION_29_0();
  uint64_t v11 = v1;
  OUTLINED_FUNCTION_40_0();
  char v2 = OUTLINED_FUNCTION_21_47();
  uint64_t v3 = OUTLINED_FUNCTION_6_99(v2);
  v0(v3);
  uint64_t v4 = SearchCallHistoryReadSingleCallRecordParameters.asKeyValuePairs()();
  OUTLINED_FUNCTION_47_4(v4);
  uint64_t v5 = OUTLINED_FUNCTION_3_0();
  uint64_t v6 = (void *)OUTLINED_FUNCTION_33(v5);
  *uint64_t v6 = v7;
  v6[1] = SearchCallHistoryCATPatternsExecutor.readSingleCallRecord(isSingleDateRequest:isTimeRangeRequest:_:);
  OUTLINED_FUNCTION_10_16();
  uint64_t v8 = OUTLINED_FUNCTION_38_8(38);
  return v9(v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_0_14();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_5_7();
  uint64_t *v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_4_2();
  char *v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  OUTLINED_FUNCTION_7_27();
  OUTLINED_FUNCTION_20_2();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of SearchCallHistoryReadCannotFindCallRecordParameters();
  swift_task_dealloc();
  uint64_t v0 = OUTLINED_FUNCTION_4_31();
  return v1(v0);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of SearchCallHistoryReadCannotFindCallRecordParameters();
  swift_task_dealloc();
  OUTLINED_FUNCTION_13_0();
  return v0();
}

uint64_t SearchCallHistoryCATPatternsExecutor.readSingleCallRecordDisplayForward(isSingleDateRequest:isTimeRangeRequest:_:)()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v5 = OUTLINED_FUNCTION_22_56(v1, v2, v3, v4);
  uint64_t v6 = type metadata accessor for SearchCallHistoryReadSingleCallRecordDisplayForwardParameters(v5);
  *(void *)(v0 + 40) = v6;
  OUTLINED_FUNCTION_11_0(v6);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  void (*v0)(uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t (*v9)(unint64_t);
  uint64_t v11;

  OUTLINED_FUNCTION_29_0();
  uint64_t v11 = v1;
  OUTLINED_FUNCTION_40_0();
  char v2 = OUTLINED_FUNCTION_21_47();
  uint64_t v3 = OUTLINED_FUNCTION_6_99(v2);
  v0(v3);
  uint64_t v4 = SearchCallHistoryReadSingleCallRecordDisplayForwardParameters.asKeyValuePairs()();
  OUTLINED_FUNCTION_47_4(v4);
  uint64_t v5 = OUTLINED_FUNCTION_3_0();
  uint64_t v6 = (void *)OUTLINED_FUNCTION_33(v5);
  *uint64_t v6 = v7;
  v6[1] = SearchCallHistoryCATPatternsExecutor.readSingleCallRecordDisplayForward(isSingleDateRequest:isTimeRangeRequest:_:);
  OUTLINED_FUNCTION_10_16();
  uint64_t v8 = OUTLINED_FUNCTION_38_8(52);
  return v9(v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_0_14();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_5_7();
  uint64_t *v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_4_2();
  char *v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  OUTLINED_FUNCTION_7_27();
  OUTLINED_FUNCTION_20_2();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of SearchCallHistoryReadCannotFindCallRecordParameters();
  swift_task_dealloc();
  uint64_t v0 = OUTLINED_FUNCTION_4_31();
  return v1(v0);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of SearchCallHistoryReadCannotFindCallRecordParameters();
  swift_task_dealloc();
  OUTLINED_FUNCTION_13_0();
  return v0();
}

uint64_t SearchCallHistoryCATPatternsExecutor.readSingleVoiceMailRecord(isSingleDateRequest:isTimeRangeRequest:_:)()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v5 = OUTLINED_FUNCTION_22_56(v1, v2, v3, v4);
  uint64_t v6 = type metadata accessor for SearchCallHistoryReadSingleVoiceMailRecordParameters(v5);
  *(void *)(v0 + 40) = v6;
  OUTLINED_FUNCTION_11_0(v6);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  void (*v0)(uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t (*v9)(unint64_t);
  uint64_t v11;

  OUTLINED_FUNCTION_29_0();
  uint64_t v11 = v1;
  OUTLINED_FUNCTION_40_0();
  char v2 = OUTLINED_FUNCTION_21_47();
  uint64_t v3 = OUTLINED_FUNCTION_6_99(v2);
  v0(v3);
  uint64_t v4 = SearchCallHistoryReadSingleVoiceMailRecordParameters.asKeyValuePairs()();
  OUTLINED_FUNCTION_47_4(v4);
  uint64_t v5 = OUTLINED_FUNCTION_3_0();
  uint64_t v6 = (void *)OUTLINED_FUNCTION_33(v5);
  *uint64_t v6 = v7;
  v6[1] = SearchCallHistoryCATPatternsExecutor.readSingleVoiceMailRecord(isSingleDateRequest:isTimeRangeRequest:_:);
  OUTLINED_FUNCTION_10_16();
  uint64_t v8 = OUTLINED_FUNCTION_38_8(43);
  return v9(v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_0_14();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_5_7();
  uint64_t *v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_4_2();
  char *v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  OUTLINED_FUNCTION_7_27();
  OUTLINED_FUNCTION_20_2();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of SearchCallHistoryReadCannotFindCallRecordParameters();
  swift_task_dealloc();
  uint64_t v0 = OUTLINED_FUNCTION_4_31();
  return v1(v0);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of SearchCallHistoryReadCannotFindCallRecordParameters();
  swift_task_dealloc();
  OUTLINED_FUNCTION_13_0();
  return v0();
}

uint64_t SearchCallHistoryCATPatternsExecutor.readVoicemailsIntroduction(_:)(uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  return OUTLINED_FUNCTION_21_1((uint64_t)SearchCallHistoryCATPatternsExecutor.readVoicemailsIntroduction(_:));
}

uint64_t SearchCallHistoryCATPatternsExecutor.readVoicemailsIntroduction(_:)()
{
  OUTLINED_FUNCTION_40_0();
  uint64_t v6 = OUTLINED_FUNCTION_33_30();
  v7(v6);
  OUTLINED_FUNCTION_70_10();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v8 = (__n128 *)swift_allocObject();
  *(void *)(v2 + 72) = v8;
  OUTLINED_FUNCTION_106(v8, (__n128)xmmword_46A250);
  if (v0)
  {
    uint64_t v9 = type metadata accessor for PhoneSearchCallHistoryIntent(0);
    uint64_t v10 = v0;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0;
    v8[3].n128_u64[1] = 0;
    v8[4].n128_u64[0] = 0;
  }
  OUTLINED_FUNCTION_28_42(v9, v10);
  if (v4)
  {
    uint64_t v11 = 0;
    v8[6].n128_u64[1] = 0;
    v8[7].n128_u64[0] = 0;
  }
  else
  {
    uint64_t v11 = &type metadata for Double;
  }
  OUTLINED_FUNCTION_94_9((uint64_t)v11);
  v8[8].n128_u64[1] = 0x8000000000497350;
  if (v1)
  {
    uint64_t v12 = 0;
    v8[9].n128_u64[1] = 0;
    v8[10].n128_u64[0] = 0;
    unint64_t v5 = 0;
  }
  else
  {
    uint64_t v12 = &type metadata for Double;
  }
  v8[9].n128_u64[0] = v5;
  v8[10].n128_u64[1] = (unint64_t)v12;
  OUTLINED_FUNCTION_19_2();
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v3 + 96) = v13;
  *uint64_t v13 = v3;
  v13[1] = SearchCallHistoryCATPatternsExecutor.readVoicemailsIntroduction(_:);
  uint64_t v14 = OUTLINED_FUNCTION_32_0(v4 + 27);
  return v15(v14);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_0_14();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_5_7();
  uint64_t *v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_4_2();
  char *v7 = v6;
  *(void *)(v4 + 104) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 112) = v1;
  }
  OUTLINED_FUNCTION_7_27();
  OUTLINED_FUNCTION_20_2();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t SearchCallHistoryCATPatternsExecutor.showCallHistory(callRecords:isFirstPartyApp:isShowingMissedCall:_:)()
{
  OUTLINED_FUNCTION_1_0();
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v0;
  *(unsigned char *)(v1 + 97) = v3;
  *(unsigned char *)(v1 + 96) = v4;
  *(void *)(v1 + 16) = v5;
  *(void *)(v1 + 24) = v6;
  uint64_t v7 = type metadata accessor for SearchCallHistoryShowCallHistoryParameters(0);
  *(void *)(v1 + 48) = v7;
  OUTLINED_FUNCTION_11_0(v7);
  *(void *)(v1 + 56) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  void (*v3)(uint64_t);
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t (*v13)(unint64_t);
  uint64_t v15;

  uint64_t v2 = *(int **)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  char v3 = *(void (**)(uint64_t))(v0 + 24);
  char v4 = *(unsigned char *)(v0 + 97);
  uint64_t v5 = *(unsigned char *)(v0 + 96);
  uint64_t v6 = *(void *)(v0 + 16);
  uint64_t v7 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v7);
  __swift_storeEnumTagSinglePayload(v1 + v2[5], 1, 1, v7);
  uint64_t v8 = v1 + v2[6];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  *(void *)(v1 + v2[7]) = v6;
  *(void *)(v1 + v2[8]) = 0;
  *(void *)(v1 + v2[9]) = 0;
  *(unsigned char *)(v1 + v2[10]) = v5;
  *(unsigned char *)(v1 + v2[11]) = v4;
  uint64_t v9 = v1 + v2[12];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  swift_bridgeObjectRetain();
  uint64_t v10 = OUTLINED_FUNCTION_39_6();
  v3(v10);
  *(void *)(v0 + 64) = SearchCallHistoryShowCallHistoryParameters.asKeyValuePairs()();
  uint64_t v11 = (void *)OUTLINED_FUNCTION_9_0();
  *(void *)(v0 + 72) = v11;
  void *v11 = v0;
  v11[1] = SearchCallHistoryCATPatternsExecutor.showCallHistory(callRecords:isFirstPartyApp:isShowingMissedCall:_:);
  OUTLINED_FUNCTION_10_16();
  uint64_t v12 = OUTLINED_FUNCTION_74_1(33);
  return v13(v12);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_0_14();
  char v4 = v3;
  OUTLINED_FUNCTION_5_7();
  uint64_t *v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_4_2();
  char *v7 = v6;
  *(void *)(v4 + 80) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 88) = v1;
  }
  OUTLINED_FUNCTION_7_27();
  OUTLINED_FUNCTION_20_2();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of SearchCallHistoryReadCannotFindCallRecordParameters();
  swift_task_dealloc();
  uint64_t v0 = OUTLINED_FUNCTION_143();
  return v1(v0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of SearchCallHistoryReadCannotFindCallRecordParameters();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t SearchCallHistoryCATPatternsExecutor.showVoicemails(callRecords:_:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[4] = v2;
  v1[5] = v0;
  v1[2] = v3;
  v1[3] = v4;
  uint64_t v5 = type metadata accessor for SearchCallHistoryShowVoicemailsParameters(0);
  v1[6] = v5;
  OUTLINED_FUNCTION_11_0(v5);
  v1[7] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v6, v7, v8);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  uint64_t (*v12)(unint64_t);
  uint64_t v14;

  OUTLINED_FUNCTION_29_0();
  uint64_t v14 = v1;
  OUTLINED_FUNCTION_40_0();
  uint64_t v3 = (int *)v0[6];
  uint64_t v2 = v0[7];
  uint64_t v4 = (void (*)(uint64_t))v0[3];
  uint64_t v5 = v0[2];
  uint64_t v6 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v2, 1, 1, v6);
  *(void *)(v2 + v3[5]) = v5;
  *(void *)(v2 + v3[6]) = 0;
  uint64_t v7 = v2 + v3[7];
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  uint64_t v8 = v2 + v3[8];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  swift_bridgeObjectRetain();
  uint64_t v9 = OUTLINED_FUNCTION_39_6();
  v4(v9);
  v0[8] = SearchCallHistoryShowVoicemailsParameters.asKeyValuePairs()();
  uint64_t v10 = (void *)OUTLINED_FUNCTION_3_0();
  v0[9] = v10;
  *uint64_t v10 = v0;
  v10[1] = SearchCallHistoryCATPatternsExecutor.showVoicemails(callRecords:_:);
  OUTLINED_FUNCTION_10_16();
  uint64_t v11 = OUTLINED_FUNCTION_38_8(32);
  return v12(v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_0_14();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_5_7();
  uint64_t *v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_4_2();
  char *v7 = v6;
  *(void *)(v4 + 80) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 88) = v1;
  }
  OUTLINED_FUNCTION_7_27();
  OUTLINED_FUNCTION_20_2();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of SearchCallHistoryReadCannotFindCallRecordParameters();
  swift_task_dealloc();
  uint64_t v0 = OUTLINED_FUNCTION_143();
  return v1(v0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of SearchCallHistoryReadCannotFindCallRecordParameters();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t SearchCallHistoryCATPatternsExecutor.unsupportedSearchParameters(isLatest:isMissed:isVoicemail:_:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  uint64_t v7 = OUTLINED_FUNCTION_102_7(v4, v5, v6);
  uint64_t v8 = type metadata accessor for SearchCallHistoryUnsupportedSearchParametersParameters(v7);
  v1[5] = v8;
  OUTLINED_FUNCTION_11_0(v8);
  v1[6] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  void (*v3)(uint64_t);
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t (*v13)(unint64_t);
  uint64_t v14;

  uint64_t v2 = *(int **)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void (**)(uint64_t))(v0 + 16);
  char v4 = *(unsigned char *)(v0 + 90);
  char v5 = *(unsigned char *)(v0 + 89);
  char v6 = *(unsigned char *)(v0 + 88);
  type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_14_1(v1);
  OUTLINED_FUNCTION_14_1(v1 + v2[5]);
  OUTLINED_FUNCTION_14_1(v1 + v2[7]);
  OUTLINED_FUNCTION_14_1(v1 + v2[11]);
  *(void *)(v1 + v2[6]) = 0;
  *(unsigned char *)(v1 + v2[8]) = v6;
  *(unsigned char *)(v1 + v2[9]) = v5;
  *(unsigned char *)(v1 + v2[10]) = v4;
  uint64_t v7 = OUTLINED_FUNCTION_39_6();
  v3(v7);
  uint64_t v8 = SearchCallHistoryUnsupportedSearchParametersParameters.asKeyValuePairs()();
  OUTLINED_FUNCTION_47_4(v8);
  uint64_t v9 = OUTLINED_FUNCTION_3_0();
  uint64_t v10 = (void *)OUTLINED_FUNCTION_33(v9);
  *uint64_t v10 = v11;
  v10[1] = SearchCallHistoryCATPatternsExecutor.unsupportedSearchParameters(isLatest:isMissed:isVoicemail:_:);
  OUTLINED_FUNCTION_10_16();
  return v13(0xD00000000000002DLL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_0_14();
  char v4 = v3;
  OUTLINED_FUNCTION_5_7();
  uint64_t *v5 = v4;
  char v6 = *v2;
  OUTLINED_FUNCTION_4_2();
  char *v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  OUTLINED_FUNCTION_7_27();
  OUTLINED_FUNCTION_20_2();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of SearchCallHistoryReadCannotFindCallRecordParameters();
  swift_task_dealloc();
  uint64_t v0 = OUTLINED_FUNCTION_4_31();
  return v1(v0);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of SearchCallHistoryReadCannotFindCallRecordParameters();
  swift_task_dealloc();
  OUTLINED_FUNCTION_13_0();
  return v0();
}

uint64_t SearchCallHistoryCATPatternsExecutor.voiceMailOfferToFollowUpAction(isLastPage:)(char a1)
{
  *(void *)(v2 + 16) = v1;
  *(unsigned char *)(v2 + 48) = a1;
  return OUTLINED_FUNCTION_21_1((uint64_t)SearchCallHistoryCATPatternsExecutor.voiceMailOfferToFollowUpAction(isLastPage:));
}

uint64_t SearchCallHistoryCATPatternsExecutor.voiceMailOfferToFollowUpAction(isLastPage:)()
{
  OUTLINED_FUNCTION_16_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v1 = (void *)swift_allocObject();
  v1[4] = 0x61507473614C7369;
  v1[5] = 0xEA00000000006567;
  v1[9] = &type metadata for Bool;
  uint64_t v2 = (void *)OUTLINED_FUNCTION_86_5((uint64_t)v1, (__n128)xmmword_467710);
  *(void *)(v0 + 32) = v2;
  *uint64_t v2 = v0;
  v2[1] = AddCallParticipantCATsSimple.promptForParticipantAsLabels(isUnsupportedFollowup:);
  OUTLINED_FUNCTION_10_16();
  return v4(0xD000000000000030);
}

uint64_t SearchCallHistoryCATPatternsExecutor.voiceMailPromptToPlay()()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_9_0();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = StartCallCATPatternsExecutor.unsupportedCallCapability();
  return v3(0xD000000000000027, 0x800000000048EEF0, _swiftEmptyArrayStorage);
}

void SearchCallHistoryCATPatternsExecutor.__allocating_init(templateDir:options:globals:)()
{
}

void SearchCallHistoryCATPatternsExecutor.init(templateDir:options:globals:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_37_6();
  uint64_t v3 = type metadata accessor for CATOption();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_4();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  uint64_t v9 = OUTLINED_FUNCTION_11_0(v8);
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_4();
  outlined init with copy of SpeakableString?(v0, v11 - v10, (uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v7, v2, v3);
  CATWrapper.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v0, (uint64_t *)&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_26_1();
}

unint64_t lazy protocol witness table accessor for type SearchCallHistoryCATPatternsIdentifiers and conformance SearchCallHistoryCATPatternsIdentifiers()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryCATPatternsIdentifiers and conformance SearchCallHistoryCATPatternsIdentifiers;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryCATPatternsIdentifiers and conformance SearchCallHistoryCATPatternsIdentifiers)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryCATPatternsIdentifiers and conformance SearchCallHistoryCATPatternsIdentifiers);
  }
  return result;
}

uint64_t protocol witness for SearchCallHistoryCATPatternsExecuting.offerToReadMoreCallRecords(isLastWindow:) in conformance SearchCallHistoryCATPatternsExecutor(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**v1
                                                   + class metadata base offset for SearchCallHistoryCATPatternsExecutor)
                                       + **(int **)(**v1
                                                  + class metadata base offset for SearchCallHistoryCATPatternsExecutor));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v6(a1);
}

uint64_t protocol witness for SearchCallHistoryCATPatternsExecuting.readCannotFindCallRecord(isFirstPartyApp:isShowingMissedCall:_:) in conformance SearchCallHistoryCATPatternsExecutor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *(int **)(class metadata base offset for SearchCallHistoryCATPatternsExecutor + **v4 + 8);
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v10 + *v10);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  void *v11 = v5;
  v11[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v13(a1, a2, a3, a4);
}

uint64_t protocol witness for SearchCallHistoryCATPatternsExecuting.readCannotFindVoicemail(_:) in conformance SearchCallHistoryCATPatternsExecutor(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(class metadata base offset for SearchCallHistoryCATPatternsExecutor + **v2 + 16);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v9(a1, a2);
}

uint64_t protocol witness for SearchCallHistoryCATPatternsExecuting.readMultipleCallRecords(callRecords:callRecordsItem1:callRecordsItem2:callRecordsItem3:callRecordsItem4:isFirstPartyApp:isFirstWindow:isLastWindow:isShowingMissedCall:isSingleDateRequest:isTimeRangeRequest:_:) in conformance SearchCallHistoryCATPatternsExecutor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7, unsigned int a8, uint64_t a9)
{
  uint64_t v14 = *(int **)(class metadata base offset for SearchCallHistoryCATPatternsExecutor + **v9 + 24);
  uint64_t v17 = (int *)((char *)v14 + *v14);
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v10 + 16) = v15;
  *uint64_t v15 = v10;
  v15[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  BYTE2(a9) = v25;
  LOWORD(a9) = v24;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t))v17)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t protocol witness for SearchCallHistoryCATPatternsExecuting.readMultipleVoiceMailRecords(isLeadingSavedVoiceMailPostPrompt:isNewVoicemail:isSingleDateRequest:isTimeRangeRequest:_:) in conformance SearchCallHistoryCATPatternsExecutor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v14 = *(int **)(class metadata base offset for SearchCallHistoryCATPatternsExecutor + **v6 + 32);
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v14 + *v14);
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v15;
  *uint64_t v15 = v7;
  v15[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v17(a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for SearchCallHistoryCATPatternsExecuting.readPlayVoiceMailPrePrompt() in conformance SearchCallHistoryCATPatternsExecutor()
{
  uint64_t v2 = *(int **)(class metadata base offset for SearchCallHistoryCATPatternsExecutor + **v0 + 40);
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v5();
}

uint64_t protocol witness for SearchCallHistoryCATPatternsExecuting.readSingleCallRecord(isSingleDateRequest:isTimeRangeRequest:_:) in conformance SearchCallHistoryCATPatternsExecutor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *(int **)(class metadata base offset for SearchCallHistoryCATPatternsExecutor + **v4 + 48);
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v10 + *v10);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  void *v11 = v5;
  v11[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v13(a1, a2, a3, a4);
}

uint64_t protocol witness for SearchCallHistoryCATPatternsExecuting.readSingleCallRecordDisplayForward(isSingleDateRequest:isTimeRangeRequest:_:) in conformance SearchCallHistoryCATPatternsExecutor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *(int **)(class metadata base offset for SearchCallHistoryCATPatternsExecutor + **v4 + 56);
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v10 + *v10);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  void *v11 = v5;
  v11[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v13(a1, a2, a3, a4);
}

uint64_t protocol witness for SearchCallHistoryCATPatternsExecuting.readSingleVoiceMailRecord(isSingleDateRequest:isTimeRangeRequest:_:) in conformance SearchCallHistoryCATPatternsExecutor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *(int **)(class metadata base offset for SearchCallHistoryCATPatternsExecutor + **v4 + 64);
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v10 + *v10);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  void *v11 = v5;
  v11[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v13(a1, a2, a3, a4);
}

uint64_t protocol witness for SearchCallHistoryCATPatternsExecuting.readVoicemailsIntroduction(_:) in conformance SearchCallHistoryCATPatternsExecutor(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(class metadata base offset for SearchCallHistoryCATPatternsExecutor + **v2 + 72);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v9(a1, a2);
}

uint64_t protocol witness for SearchCallHistoryCATPatternsExecuting.showCallHistory(callRecords:isFirstPartyApp:isShowingMissedCall:_:) in conformance SearchCallHistoryCATPatternsExecutor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = *(int **)(class metadata base offset for SearchCallHistoryCATPatternsExecutor + **v5 + 80);
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v12 + *v12);
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v15(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for SearchCallHistoryCATPatternsExecuting.showVoicemails(callRecords:_:) in conformance SearchCallHistoryCATPatternsExecutor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(int **)(class metadata base offset for SearchCallHistoryCATPatternsExecutor + **v3 + 88);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v11(a1, a2, a3);
}

uint64_t protocol witness for SearchCallHistoryCATPatternsExecuting.unsupportedSearchParameters(isLatest:isMissed:isVoicemail:_:) in conformance SearchCallHistoryCATPatternsExecutor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = *(int **)(class metadata base offset for SearchCallHistoryCATPatternsExecutor + **v5 + 96);
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v12 + *v12);
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v15(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for SearchCallHistoryCATPatternsExecuting.voiceMailOfferToFollowUpAction(isLastPage:) in conformance SearchCallHistoryCATPatternsExecutor(uint64_t a1)
{
  uint64_t v4 = *(int **)(class metadata base offset for SearchCallHistoryCATPatternsExecutor + **v1 + 104);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v7(a1);
}

uint64_t protocol witness for SearchCallHistoryCATPatternsExecuting.voiceMailPromptToPlay() in conformance SearchCallHistoryCATPatternsExecutor()
{
  uint64_t v2 = *(int **)(class metadata base offset for SearchCallHistoryCATPatternsExecutor + **v0 + 112);
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v5();
}

uint64_t getEnumTagSinglePayload for SearchCallHistoryCATPatternsIdentifiers(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF2)
  {
    if (a2 + 14 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 14) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 15;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xF;
  int v5 = v6 - 15;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for SearchCallHistoryCATPatternsIdentifiers(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 14 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 14) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF1)
  {
    unsigned int v6 = ((a2 - 242) >> 8) + 1;
    *unint64_t result = a2 + 14;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x41CC24);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 14;
        break;
    }
  }
  return result;
}

void type metadata accessor for SearchCallHistoryCATPatternsIdentifiers()
{
}

void type metadata accessor for SearchCallHistoryOfferToReadMoreCallRecordsParameters()
{
}

char *initializeBufferWithCopyOfBuffer for SearchCallHistoryReadCannotFindCallRecordParameters(char *a1, uint64_t *a2, int *a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)a1 = *a2;
    unsigned int v4 = (char *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v4, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)v4, 0, 1, v7);
    }
    uint64_t v10 = a3[5];
    uint64_t v11 = a3[6];
    uint64_t v12 = &v4[v10];
    uint64_t v13 = (char *)a2 + v10;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    *(void *)&v4[v11] = *(uint64_t *)((char *)a2 + v11);
    uint64_t v14 = a3[8];
    *(void *)&v4[a3[7]] = *(uint64_t *)((char *)a2 + a3[7]);
    v4[v14] = *((unsigned char *)a2 + v14);
    uint64_t v15 = a3[10];
    v4[a3[9]] = *((unsigned char *)a2 + a3[9]);
    uint64_t v16 = &v4[v15];
    uint64_t v17 = (char *)a2 + v15;
    *(void *)uint64_t v16 = *(void *)v17;
    v16[8] = v17[8];
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for SearchCallHistoryReadCannotFindCallRecordParameters(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SpeakableString();
  if (!__swift_getEnumTagSinglePayload(a1, 1, v2)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  }
  swift_release();

  return swift_release();
}

char *initializeWithCopy for SearchCallHistoryReadCannotFindCallRecordParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  *(void *)uint64_t v10 = *(void *)v11;
  v10[8] = v11[8];
  *(void *)&a1[v9] = *(void *)&a2[v9];
  uint64_t v12 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  a1[v12] = a2[v12];
  uint64_t v13 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  *(void *)uint64_t v14 = *(void *)v15;
  char v14[8] = v15[8];
  swift_retain();
  swift_retain();
  return a1;
}

char *assignWithCopy for SearchCallHistoryReadCannotFindCallRecordParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = *(void *)v13;
  v12[8] = v13[8];
  *(void *)uint64_t v12 = v14;
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_retain();
  swift_release();
  a1[a3[8]] = a2[a3[8]];
  a1[a3[9]] = a2[a3[9]];
  uint64_t v15 = a3[10];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = *(void *)v17;
  v16[8] = v17[8];
  *(void *)uint64_t v16 = v18;
  return a1;
}

char *initializeWithTake for SearchCallHistoryReadCannotFindCallRecordParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  *(void *)uint64_t v10 = *(void *)v11;
  v10[8] = v11[8];
  *(void *)&a1[v9] = *(void *)&a2[v9];
  uint64_t v12 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  a1[v12] = a2[v12];
  uint64_t v13 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  *(void *)uint64_t v14 = *(void *)v15;
  char v14[8] = v15[8];
  return a1;
}

char *assignWithTake for SearchCallHistoryReadCannotFindCallRecordParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v11];
  uint64_t v14 = &a2[v11];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  *(void *)&a1[v12] = *(void *)&a2[v12];
  swift_release();
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_release();
  uint64_t v15 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  a1[v15] = a2[v15];
  uint64_t v16 = a3[10];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchCallHistoryReadCannotFindCallRecordParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, j____swift_get_extra_inhabitant_indexTm);
}

uint64_t storeEnumTagSinglePayload for SearchCallHistoryReadCannotFindCallRecordParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm);
}

void type metadata completion function for SearchCallHistoryReadCannotFindCallRecordParameters()
{
  type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t initializeWithCopy for SearchCallHistoryReadCannotFindVoicemailParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_retain();
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void type metadata accessor for SearchCallHistoryReadCannotFindVoicemailParameters()
{
}

char *initializeBufferWithCopyOfBuffer for SearchCallHistoryReadMultipleCallRecordsParameters(char *a1, uint64_t *a2, int *a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)a1 = *a2;
    unsigned int v4 = (char *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v4, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)v4, 0, 1, v7);
    }
    uint64_t v10 = a3[5];
    uint64_t v11 = &v4[v10];
    uint64_t v12 = (char *)a2 + v10;
    if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v10, 1, v7))
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v11, v12, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v7);
    }
    uint64_t v14 = a3[6];
    uint64_t v15 = a3[7];
    uint64_t v16 = &v4[v14];
    uint64_t v17 = (char *)a2 + v14;
    *(void *)uint64_t v16 = *(void *)v17;
    v16[8] = v17[8];
    *(void *)&v4[v15] = *(uint64_t *)((char *)a2 + v15);
    uint64_t v18 = a3[9];
    *(void *)&v4[a3[8]] = *(uint64_t *)((char *)a2 + a3[8]);
    *(void *)&v4[v18] = *(uint64_t *)((char *)a2 + v18);
    uint64_t v19 = a3[11];
    *(void *)&v4[a3[10]] = *(uint64_t *)((char *)a2 + a3[10]);
    *(void *)&v4[v19] = *(uint64_t *)((char *)a2 + v19);
    uint64_t v20 = a3[13];
    *(void *)&v4[a3[12]] = *(uint64_t *)((char *)a2 + a3[12]);
    *(void *)&v4[v20] = *(uint64_t *)((char *)a2 + v20);
    uint64_t v21 = a3[15];
    v4[a3[14]] = *((unsigned char *)a2 + a3[14]);
    v4[v21] = *((unsigned char *)a2 + v21);
    uint64_t v22 = a3[17];
    v4[a3[16]] = *((unsigned char *)a2 + a3[16]);
    v4[v22] = *((unsigned char *)a2 + v22);
    uint64_t v23 = a3[19];
    v4[a3[18]] = *((unsigned char *)a2 + a3[18]);
    v4[v23] = *((unsigned char *)a2 + v23);
    uint64_t v24 = a3[20];
    uint64_t v25 = a3[21];
    uint64_t v26 = &v4[v24];
    uint64_t v27 = (char *)a2 + v24;
    *(void *)uint64_t v26 = *(void *)v27;
    v26[8] = v27[8];
    uint64_t v28 = &v4[v25];
    uint64_t v29 = (char *)a2 + v25;
    *(void *)uint64_t v28 = *(void *)v29;
    v28[8] = v29[8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for SearchCallHistoryReadMultipleCallRecordsParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString();
  if (!__swift_getEnumTagSinglePayload(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  if (!__swift_getEnumTagSinglePayload(v5, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v5, v4);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

char *initializeWithCopy for SearchCallHistoryReadMultipleCallRecordsParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v8], 1, v6))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v9, v10, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = &a1[v12];
  uint64_t v15 = &a2[v12];
  *(void *)uint64_t v14 = *(void *)v15;
  char v14[8] = v15[8];
  *(void *)&a1[v13] = *(void *)&a2[v13];
  uint64_t v16 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  *(void *)&a1[v16] = *(void *)&a2[v16];
  uint64_t v17 = a3[11];
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  *(void *)&a1[v17] = *(void *)&a2[v17];
  uint64_t v18 = a3[13];
  *(void *)&a1[a3[12]] = *(void *)&a2[a3[12]];
  *(void *)&a1[v18] = *(void *)&a2[v18];
  uint64_t v19 = a3[15];
  a1[a3[14]] = a2[a3[14]];
  a1[v19] = a2[v19];
  uint64_t v20 = a3[17];
  a1[a3[16]] = a2[a3[16]];
  a1[v20] = a2[v20];
  uint64_t v21 = a3[19];
  a1[a3[18]] = a2[a3[18]];
  a1[v21] = a2[v21];
  uint64_t v22 = a3[20];
  uint64_t v23 = a3[21];
  uint64_t v24 = &a1[v22];
  uint64_t v25 = &a2[v22];
  *(void *)uint64_t v24 = *(void *)v25;
  v24[8] = v25[8];
  uint64_t v26 = &a1[v23];
  uint64_t v27 = &a2[v23];
  *(void *)uint64_t v26 = *(void *)v27;
  v26[8] = v27[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

char *assignWithCopy for SearchCallHistoryReadMultipleCallRecordsParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (EnumTagSinglePayload)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = __swift_getEnumTagSinglePayload((uint64_t)&a1[v11], 1, v6);
  int v15 = __swift_getEnumTagSinglePayload((uint64_t)v13, 1, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }
  if (v15)
  {
LABEL_12:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v12, v13, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v6);
LABEL_13:
  uint64_t v18 = a3[6];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = *(void *)v20;
  v19[8] = v20[8];
  *(void *)uint64_t v19 = v21;
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[11]] = *(void *)&a2[a3[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[12]] = *(void *)&a2[a3[12]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[13]] = *(void *)&a2[a3[13]];
  swift_retain();
  swift_release();
  a1[a3[14]] = a2[a3[14]];
  a1[a3[15]] = a2[a3[15]];
  a1[a3[16]] = a2[a3[16]];
  a1[a3[17]] = a2[a3[17]];
  a1[a3[18]] = a2[a3[18]];
  a1[a3[19]] = a2[a3[19]];
  uint64_t v22 = a3[20];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v25 = *(void *)v24;
  v23[8] = v24[8];
  *(void *)uint64_t v23 = v25;
  uint64_t v26 = a3[21];
  uint64_t v27 = &a1[v26];
  uint64_t v28 = &a2[v26];
  uint64_t v29 = *(void *)v28;
  v27[8] = v28[8];
  *(void *)uint64_t v27 = v29;
  return a1;
}

char *initializeWithTake for SearchCallHistoryReadMultipleCallRecordsParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v8], 1, v6))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v9, v10, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  int v14 = &a1[v12];
  int v15 = &a2[v12];
  *(void *)int v14 = *(void *)v15;
  char v14[8] = v15[8];
  *(void *)&a1[v13] = *(void *)&a2[v13];
  uint64_t v16 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  *(void *)&a1[v16] = *(void *)&a2[v16];
  uint64_t v17 = a3[11];
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  *(void *)&a1[v17] = *(void *)&a2[v17];
  uint64_t v18 = a3[13];
  *(void *)&a1[a3[12]] = *(void *)&a2[a3[12]];
  *(void *)&a1[v18] = *(void *)&a2[v18];
  uint64_t v19 = a3[15];
  a1[a3[14]] = a2[a3[14]];
  a1[v19] = a2[v19];
  uint64_t v20 = a3[17];
  a1[a3[16]] = a2[a3[16]];
  a1[v20] = a2[v20];
  uint64_t v21 = a3[19];
  a1[a3[18]] = a2[a3[18]];
  a1[v21] = a2[v21];
  uint64_t v22 = a3[20];
  uint64_t v23 = a3[21];
  uint64_t v24 = &a1[v22];
  uint64_t v25 = &a2[v22];
  *(void *)uint64_t v24 = *(void *)v25;
  v24[8] = v25[8];
  uint64_t v26 = &a1[v23];
  uint64_t v27 = &a2[v23];
  *(void *)uint64_t v26 = *(void *)v27;
  v26[8] = v27[8];
  return a1;
}

char *assignWithTake for SearchCallHistoryReadMultipleCallRecordsParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (EnumTagSinglePayload)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = __swift_getEnumTagSinglePayload((uint64_t)&a1[v11], 1, v6);
  int v15 = __swift_getEnumTagSinglePayload((uint64_t)v13, 1, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }
  if (v15)
  {
LABEL_12:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v12, v13, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v6);
LABEL_13:
  uint64_t v18 = a3[6];
  uint64_t v19 = a3[7];
  uint64_t v20 = &a1[v18];
  uint64_t v21 = &a2[v18];
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  *(void *)&a1[v19] = *(void *)&a2[v19];
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[11]] = *(void *)&a2[a3[11]];
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[12]] = *(void *)&a2[a3[12]];
  swift_release();
  *(void *)&a1[a3[13]] = *(void *)&a2[a3[13]];
  swift_release();
  uint64_t v22 = a3[15];
  a1[a3[14]] = a2[a3[14]];
  a1[v22] = a2[v22];
  uint64_t v23 = a3[17];
  a1[a3[16]] = a2[a3[16]];
  a1[v23] = a2[v23];
  uint64_t v24 = a3[19];
  a1[a3[18]] = a2[a3[18]];
  a1[v24] = a2[v24];
  uint64_t v25 = a3[20];
  uint64_t v26 = a3[21];
  uint64_t v27 = &a1[v25];
  uint64_t v28 = &a2[v25];
  *(void *)uint64_t v27 = *(void *)v28;
  v27[8] = v28[8];
  uint64_t v29 = &a1[v26];
  uint64_t v30 = &a2[v26];
  v29[8] = v30[8];
  *(void *)uint64_t v29 = *(void *)v30;
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchCallHistoryReadMultipleCallRecordsParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, j____swift_get_extra_inhabitant_index_56Tm);
}

uint64_t storeEnumTagSinglePayload for SearchCallHistoryReadMultipleCallRecordsParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_57Tm);
}

void type metadata completion function for SearchCallHistoryReadMultipleCallRecordsParameters()
{
  type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for SearchCallHistoryReadMultipleVoiceMailRecordsParameters(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v7);
    }
    uint64_t v10 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)a1 + v10) = *(uint64_t *)((char *)a2 + v10);
    uint64_t v11 = a3[8];
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    *((unsigned char *)a1 + v11) = *((unsigned char *)a2 + v11);
    uint64_t v12 = a3[10];
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    *((unsigned char *)a1 + v12) = *((unsigned char *)a2 + v12);
    uint64_t v13 = a3[11];
    uint64_t v14 = a3[12];
    int v15 = (char *)a1 + v13;
    uint64_t v16 = (char *)a2 + v13;
    *(void *)int v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = (char *)a1 + v14;
    uint64_t v18 = (char *)a2 + v14;
    v17[8] = v18[8];
    uint64_t v19 = a3[13];
    uint64_t v20 = (char *)a1 + v19;
    uint64_t v21 = (char *)a2 + v19;
    *(void *)uint64_t v17 = *(void *)v18;
    swift_retain();
    swift_retain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v21, 1, v7))
    {
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v20, v21, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)v20, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for SearchCallHistoryReadMultipleVoiceMailRecordsParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString();
  if (!__swift_getEnumTagSinglePayload(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  swift_release();
  swift_release();
  uint64_t v5 = a1 + *(int *)(a2 + 52);
  uint64_t result = __swift_getEnumTagSinglePayload(v5, 1, v4);
  if (!result)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    return v7(v5, v4);
  }
  return result;
}

char *initializeWithCopy for SearchCallHistoryReadMultipleVoiceMailRecordsParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  *(void *)&a1[v8] = *(void *)&a2[v8];
  uint64_t v9 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  a1[v9] = a2[v9];
  uint64_t v10 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v10] = a2[v10];
  uint64_t v11 = a3[11];
  uint64_t v12 = a3[12];
  uint64_t v13 = &a1[v11];
  uint64_t v14 = &a2[v11];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  int v15 = &a1[v12];
  uint64_t v16 = &a2[v12];
  v15[8] = v16[8];
  uint64_t v17 = a3[13];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  *(void *)int v15 = *(void *)v16;
  swift_retain();
  swift_retain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v19, 1, v6))
  {
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v18, v19, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v6);
  }
  return a1;
}

char *assignWithCopy for SearchCallHistoryReadMultipleVoiceMailRecordsParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (EnumTagSinglePayload)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_retain();
  swift_release();
  a1[a3[7]] = a2[a3[7]];
  a1[a3[8]] = a2[a3[8]];
  a1[a3[9]] = a2[a3[9]];
  a1[a3[10]] = a2[a3[10]];
  uint64_t v11 = a3[11];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = *(void *)v13;
  v12[8] = v13[8];
  *(void *)uint64_t v12 = v14;
  uint64_t v15 = a3[12];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = *(void *)v17;
  v16[8] = v17[8];
  *(void *)uint64_t v16 = v18;
  uint64_t v19 = a3[13];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  int v22 = __swift_getEnumTagSinglePayload((uint64_t)&a1[v19], 1, v6);
  int v23 = __swift_getEnumTagSinglePayload((uint64_t)v21, 1, v6);
  if (!v22)
  {
    uint64_t v24 = *(void *)(v6 - 8);
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 24))(v20, v21, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v24 + 8))(v20, v6);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v20, v21, *(void *)(*(void *)(v25 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v20, v21, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v20, 0, 1, v6);
  return a1;
}

char *initializeWithTake for SearchCallHistoryReadMultipleVoiceMailRecordsParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  *(void *)&a1[v8] = *(void *)&a2[v8];
  uint64_t v9 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  a1[v9] = a2[v9];
  uint64_t v10 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v10] = a2[v10];
  uint64_t v11 = a3[11];
  uint64_t v12 = a3[12];
  uint64_t v13 = &a1[v11];
  uint64_t v14 = &a2[v11];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = &a1[v12];
  uint64_t v16 = &a2[v12];
  v15[8] = v16[8];
  uint64_t v17 = a3[13];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  *(void *)uint64_t v15 = *(void *)v16;
  if (__swift_getEnumTagSinglePayload((uint64_t)v19, 1, v6))
  {
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v18, v19, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v6);
  }
  return a1;
}

char *assignWithTake for SearchCallHistoryReadMultipleVoiceMailRecordsParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (EnumTagSinglePayload)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  swift_release();
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_release();
  uint64_t v11 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  a1[v11] = a2[v11];
  uint64_t v12 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v12] = a2[v12];
  uint64_t v13 = a3[11];
  uint64_t v14 = a3[12];
  uint64_t v15 = &a1[v13];
  uint64_t v16 = &a2[v13];
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v16[8];
  uint64_t v17 = &a1[v14];
  uint64_t v18 = &a2[v14];
  v17[8] = v18[8];
  uint64_t v19 = a3[13];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  *(void *)uint64_t v17 = *(void *)v18;
  int v22 = __swift_getEnumTagSinglePayload((uint64_t)&a1[v19], 1, v6);
  int v23 = __swift_getEnumTagSinglePayload((uint64_t)v21, 1, v6);
  if (!v22)
  {
    uint64_t v24 = *(void *)(v6 - 8);
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 40))(v20, v21, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v24 + 8))(v20, v6);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v20, v21, *(void *)(*(void *)(v25 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v20, v21, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v20, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchCallHistoryReadMultipleVoiceMailRecordsParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, j____swift_get_extra_inhabitant_index_59Tm);
}

uint64_t storeEnumTagSinglePayload for SearchCallHistoryReadMultipleVoiceMailRecordsParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_112Tm_0);
}

void type metadata completion function for SearchCallHistoryReadMultipleVoiceMailRecordsParameters()
{
  type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t destroy for SearchCallHistoryReadSingleCallRecordParameters()
{
  return destroy for SearchCallHistoryReadSingleCallRecordParameters();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  long long v3 = OUTLINED_FUNCTION_20_51();
  if (!__swift_getEnumTagSinglePayload(v0, 1, v3))
  {
    OUTLINED_FUNCTION_9_80();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0, v3);
  }
  v2(*(void *)(v0 + *(int *)(v1 + 20)));

  return swift_release();
}

uint64_t getEnumTagSinglePayload for SearchCallHistoryReadSingleCallRecordParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, j____swift_get_extra_inhabitant_index_59Tm_0);
}

uint64_t storeEnumTagSinglePayload for SearchCallHistoryReadSingleCallRecordParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_112Tm_1);
}

void type metadata completion function for SearchCallHistoryReadSingleCallRecordParameters()
{
}

{
  unint64_t v0;

  type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t getEnumTagSinglePayload for SearchCallHistoryReadSingleCallRecordDisplayForwardParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, j____swift_get_extra_inhabitant_index_59Tm_1);
}

uint64_t storeEnumTagSinglePayload for SearchCallHistoryReadSingleCallRecordDisplayForwardParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_112Tm_2);
}

uint64_t *initializeBufferWithCopyOfBuffer for SearchCallHistoryReadSingleCallRecordParameters(uint64_t *a1, uint64_t *a2)
{
  OUTLINED_FUNCTION_1_44();
  int v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    type metadata accessor for SpeakableString();
    if (OUTLINED_FUNCTION_42_32())
    {
      uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      uint64_t v7 = OUTLINED_FUNCTION_11_0(v6);
      OUTLINED_FUNCTION_128(v7, v9, *(void *)(v8 + 64));
    }
    else
    {
      OUTLINED_FUNCTION_9_80();
      uint64_t v11 = OUTLINED_FUNCTION_43_30();
      v12(v11);
      OUTLINED_FUNCTION_25_45();
    }
    OUTLINED_FUNCTION_32_30();
  }
  swift_retain();
  return a1;
}

uint64_t initializeWithCopy for SearchCallHistoryReadSingleCallRecordParameters()
{
  OUTLINED_FUNCTION_20_51();
  if (OUTLINED_FUNCTION_42_32())
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v2 = OUTLINED_FUNCTION_11_0(v1);
    OUTLINED_FUNCTION_128(v2, v4, *(void *)(v3 + 64));
  }
  else
  {
    OUTLINED_FUNCTION_9_80();
    uint64_t v5 = OUTLINED_FUNCTION_43_30();
    v6(v5);
    OUTLINED_FUNCTION_25_45();
  }
  OUTLINED_FUNCTION_32_30();
  swift_retain();
  return v0;
}

uint64_t assignWithCopy for SearchCallHistoryReadSingleCallRecordParameters()
{
  uint64_t v3 = OUTLINED_FUNCTION_20_51();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v0, 1, v3);
  int v5 = OUTLINED_FUNCTION_42_32();
  if (!EnumTagSinglePayload)
  {
    OUTLINED_FUNCTION_1_44();
    if (!v8)
    {
      uint64_t v16 = OUTLINED_FUNCTION_110_5();
      v17(v16);
      goto LABEL_7;
    }
    uint64_t v9 = OUTLINED_FUNCTION_95_8();
    v10(v9);
    goto LABEL_6;
  }
  if (v5)
  {
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v12 = OUTLINED_FUNCTION_11_0(v11);
    OUTLINED_FUNCTION_128(v12, v14, *(void *)(v13 + 64));
    goto LABEL_7;
  }
  OUTLINED_FUNCTION_9_80();
  uint64_t v6 = OUTLINED_FUNCTION_43_30();
  v7(v6);
  OUTLINED_FUNCTION_25_45();
LABEL_7:
  *(void *)(v0 + v2[5]) = *(void *)(v1 + v2[5]);
  swift_retain();
  swift_release();
  *(void *)(v0 + v2[6]) = *(void *)(v1 + v2[6]);
  swift_retain();
  swift_release();
  *(unsigned char *)(v0 + v2[7]) = *(unsigned char *)(v1 + v2[7]);
  *(unsigned char *)(v0 + v2[8]) = *(unsigned char *)(v1 + v2[8]);
  return v0;
}

uint64_t initializeWithTake for SearchCallHistoryReadSingleCallRecordParameters()
{
  OUTLINED_FUNCTION_20_51();
  if (OUTLINED_FUNCTION_42_32())
  {
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v4 = OUTLINED_FUNCTION_11_0(v3);
    OUTLINED_FUNCTION_128(v4, v6, *(void *)(v5 + 64));
  }
  else
  {
    OUTLINED_FUNCTION_9_80();
    OUTLINED_FUNCTION_52_22();
    v7();
    OUTLINED_FUNCTION_25_45();
  }
  uint64_t v8 = *(int *)(v2 + 24);
  *(void *)(v0 + *(int *)(v2 + 20)) = *(void *)(v1 + *(int *)(v2 + 20));
  *(void *)(v0 + v8) = *(void *)(v1 + v8);
  return OUTLINED_FUNCTION_69_15();
}

uint64_t assignWithTake for SearchCallHistoryReadSingleCallRecordParameters()
{
  uint64_t v3 = OUTLINED_FUNCTION_20_51();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v0, 1, v3);
  int v5 = OUTLINED_FUNCTION_42_32();
  if (!EnumTagSinglePayload)
  {
    OUTLINED_FUNCTION_1_44();
    if (!v7)
    {
      uint64_t v15 = OUTLINED_FUNCTION_110_5();
      v16(v15);
      goto LABEL_7;
    }
    uint64_t v8 = OUTLINED_FUNCTION_95_8();
    v9(v8);
    goto LABEL_6;
  }
  if (v5)
  {
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v11 = OUTLINED_FUNCTION_11_0(v10);
    OUTLINED_FUNCTION_128(v11, v13, *(void *)(v12 + 64));
    goto LABEL_7;
  }
  OUTLINED_FUNCTION_9_80();
  OUTLINED_FUNCTION_52_22();
  v6();
  OUTLINED_FUNCTION_25_45();
LABEL_7:
  *(void *)(v0 + *(int *)(v2 + 20)) = *(void *)(v1 + *(int *)(v2 + 20));
  swift_release();
  *(void *)(v0 + *(int *)(v2 + 24)) = *(void *)(v1 + *(int *)(v2 + 24));
  swift_release();
  return OUTLINED_FUNCTION_69_15();
}

uint64_t getEnumTagSinglePayload for SearchCallHistoryReadSingleVoiceMailRecordParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_41F96C);
}

uint64_t __swift_get_extra_inhabitant_index_59Tm()
{
  OUTLINED_FUNCTION_125();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_1_44();
  if (*(_DWORD *)(v2 + 84) != v0) {
    return OUTLINED_FUNCTION_45_25(*(int *)(v1 + 20));
  }
  uint64_t v3 = OUTLINED_FUNCTION_115();

  return __swift_getEnumTagSinglePayload(v3, v4, v5);
}

uint64_t storeEnumTagSinglePayload for SearchCallHistoryReadSingleVoiceMailRecordParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_112Tm_3);
}

uint64_t assignWithCopy for SearchCallHistoryReadCannotFindVoicemailParameters(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v5;
  return a1;
}

uint64_t assignWithTake for SearchCallHistoryReadCannotFindVoicemailParameters(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchCallHistoryReadCannotFindVoicemailParameters(uint64_t *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 33))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      uint64_t v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SearchCallHistoryReadCannotFindVoicemailParameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

void type metadata accessor for SearchCallHistoryReadVoicemailsIntroductionParameters()
{
}

char *initializeBufferWithCopyOfBuffer for SearchCallHistoryShowCallHistoryParameters(char *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)a1 = *a2;
    uint64_t v4 = (char *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v4, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)v4, 0, 1, v7);
    }
    uint64_t v10 = a3[5];
    uint64_t v11 = &v4[v10];
    uint64_t v12 = (char *)a2 + v10;
    if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v10, 1, v7))
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v11, v12, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v7);
    }
    uint64_t v14 = a3[6];
    uint64_t v15 = a3[7];
    uint64_t v16 = &v4[v14];
    uint64_t v17 = (char *)a2 + v14;
    *(void *)uint64_t v16 = *(void *)v17;
    v16[8] = v17[8];
    *(void *)&v4[v15] = *(uint64_t *)((char *)a2 + v15);
    uint64_t v18 = a3[9];
    *(void *)&v4[a3[8]] = *(uint64_t *)((char *)a2 + a3[8]);
    *(void *)&v4[v18] = *(uint64_t *)((char *)a2 + v18);
    uint64_t v19 = a3[11];
    v4[a3[10]] = *((unsigned char *)a2 + a3[10]);
    v4[v19] = *((unsigned char *)a2 + v19);
    uint64_t v20 = a3[12];
    uint64_t v21 = &v4[v20];
    int v22 = (char *)a2 + v20;
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    swift_bridgeObjectRetain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for SearchCallHistoryShowCallHistoryParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString();
  if (!__swift_getEnumTagSinglePayload(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  if (!__swift_getEnumTagSinglePayload(v5, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v5, v4);
  }
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

char *initializeWithCopy for SearchCallHistoryShowCallHistoryParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v8], 1, v6))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v9, v10, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = &a1[v12];
  uint64_t v15 = &a2[v12];
  *(void *)uint64_t v14 = *(void *)v15;
  char v14[8] = v15[8];
  *(void *)&a1[v13] = *(void *)&a2[v13];
  uint64_t v16 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  *(void *)&a1[v16] = *(void *)&a2[v16];
  uint64_t v17 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  a1[v17] = a2[v17];
  uint64_t v18 = a3[12];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

char *assignWithCopy for SearchCallHistoryShowCallHistoryParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (EnumTagSinglePayload)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = __swift_getEnumTagSinglePayload((uint64_t)&a1[v11], 1, v6);
  int v15 = __swift_getEnumTagSinglePayload((uint64_t)v13, 1, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }
  if (v15)
  {
LABEL_12:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v12, v13, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v6);
LABEL_13:
  uint64_t v18 = a3[6];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = *(void *)v20;
  v19[8] = v20[8];
  *(void *)uint64_t v19 = v21;
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  swift_retain();
  swift_release();
  a1[a3[10]] = a2[a3[10]];
  a1[a3[11]] = a2[a3[11]];
  uint64_t v22 = a3[12];
  int v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v25 = *(void *)v24;
  v23[8] = v24[8];
  *(void *)int v23 = v25;
  return a1;
}

char *initializeWithTake for SearchCallHistoryShowCallHistoryParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v8], 1, v6))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v9, v10, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  int v14 = &a1[v12];
  int v15 = &a2[v12];
  *(void *)int v14 = *(void *)v15;
  char v14[8] = v15[8];
  *(void *)&a1[v13] = *(void *)&a2[v13];
  uint64_t v16 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  *(void *)&a1[v16] = *(void *)&a2[v16];
  uint64_t v17 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  a1[v17] = a2[v17];
  uint64_t v18 = a3[12];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  return a1;
}

char *assignWithTake for SearchCallHistoryShowCallHistoryParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (EnumTagSinglePayload)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = __swift_getEnumTagSinglePayload((uint64_t)&a1[v11], 1, v6);
  int v15 = __swift_getEnumTagSinglePayload((uint64_t)v13, 1, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }
  if (v15)
  {
LABEL_12:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v12, v13, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v6);
LABEL_13:
  uint64_t v18 = a3[6];
  uint64_t v19 = a3[7];
  uint64_t v20 = &a1[v18];
  uint64_t v21 = &a2[v18];
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  *(void *)&a1[v19] = *(void *)&a2[v19];
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_release();
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  swift_release();
  uint64_t v22 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  a1[v22] = a2[v22];
  uint64_t v23 = a3[12];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  *(void *)uint64_t v24 = *(void *)v25;
  v24[8] = v25[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchCallHistoryShowCallHistoryParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_420880);
}

uint64_t __swift_get_extra_inhabitant_index_56Tm()
{
  OUTLINED_FUNCTION_125();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_1_44();
  if (*(_DWORD *)(v2 + 84) != v0) {
    return OUTLINED_FUNCTION_77_11(*(int *)(v1 + 28));
  }
  uint64_t v3 = OUTLINED_FUNCTION_115();

  return __swift_getEnumTagSinglePayload(v3, v4, v5);
}

uint64_t storeEnumTagSinglePayload for SearchCallHistoryShowCallHistoryParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_42090C);
}

void __swift_store_extra_inhabitant_index_57Tm()
{
  OUTLINED_FUNCTION_85();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_1_44();
  if (*(_DWORD *)(v4 + 84) == v3)
  {
    uint64_t v5 = OUTLINED_FUNCTION_63_1();
    __swift_storeEnumTagSinglePayload(v5, v6, v7, v8);
  }
  else
  {
    *(void *)(v1 + *(int *)(v2 + 28)) = (v0 - 1);
  }
}

void type metadata completion function for SearchCallHistoryShowCallHistoryParameters()
{
  type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

char *initializeBufferWithCopyOfBuffer for SearchCallHistoryShowVoicemailsParameters(char *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)a1 = *a2;
    uint64_t v4 = (char *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v4, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)v4, 0, 1, v7);
    }
    uint64_t v10 = a3[6];
    *(void *)&v4[a3[5]] = *(uint64_t *)((char *)a2 + a3[5]);
    *(void *)&v4[v10] = *(uint64_t *)((char *)a2 + v10);
    uint64_t v11 = a3[7];
    uint64_t v12 = a3[8];
    uint64_t v13 = &v4[v11];
    int v14 = (char *)a2 + v11;
    *(void *)uint64_t v13 = *(void *)v14;
    v13[8] = v14[8];
    int v15 = &v4[v12];
    uint64_t v16 = (char *)a2 + v12;
    *(void *)int v15 = *(void *)v16;
    v15[8] = v16[8];
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for SearchCallHistoryShowVoicemailsParameters()
{
  return destroy for SearchCallHistoryReadSingleCallRecordParameters();
}

char *initializeWithCopy for SearchCallHistoryShowVoicemailsParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  *(void *)&a1[v8] = *(void *)&a2[v8];
  uint64_t v9 = a3[7];
  uint64_t v10 = a3[8];
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v12[8];
  uint64_t v13 = &a1[v10];
  int v14 = &a2[v10];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

char *assignWithCopy for SearchCallHistoryShowVoicemailsParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
LABEL_7:
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_retain();
  swift_release();
  uint64_t v11 = a3[7];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = *(void *)v13;
  v12[8] = v13[8];
  *(void *)uint64_t v12 = v14;
  uint64_t v15 = a3[8];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = *(void *)v17;
  v16[8] = v17[8];
  *(void *)uint64_t v16 = v18;
  return a1;
}

char *initializeWithTake for SearchCallHistoryShowVoicemailsParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  *(void *)&a1[v8] = *(void *)&a2[v8];
  uint64_t v9 = a3[7];
  uint64_t v10 = a3[8];
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v12[8];
  uint64_t v13 = &a1[v10];
  uint64_t v14 = &a2[v10];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  return a1;
}

char *assignWithTake for SearchCallHistoryShowVoicemailsParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
LABEL_7:
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_release();
  uint64_t v11 = a3[7];
  uint64_t v12 = a3[8];
  uint64_t v13 = &a1[v11];
  uint64_t v14 = &a2[v11];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = &a1[v12];
  uint64_t v16 = &a2[v12];
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v16[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchCallHistoryShowVoicemailsParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_421218);
}

uint64_t sub_421218()
{
  OUTLINED_FUNCTION_125();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_1_44();
  if (*(_DWORD *)(v2 + 84) != v0) {
    return OUTLINED_FUNCTION_77_11(*(int *)(v1 + 20));
  }
  uint64_t v3 = OUTLINED_FUNCTION_115();

  return __swift_getEnumTagSinglePayload(v3, v4, v5);
}

uint64_t storeEnumTagSinglePayload for SearchCallHistoryShowVoicemailsParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_4212A0);
}

void sub_4212A0()
{
  OUTLINED_FUNCTION_85();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_1_44();
  if (*(_DWORD *)(v4 + 84) == v3)
  {
    uint64_t v5 = OUTLINED_FUNCTION_63_1();
    __swift_storeEnumTagSinglePayload(v5, v6, v7, v8);
  }
  else
  {
    *(void *)(v1 + *(int *)(v2 + 20)) = (v0 - 1);
  }
}

void type metadata completion function for SearchCallHistoryShowVoicemailsParameters()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for SearchCallHistoryUnsupportedSearchParametersParameters(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v7);
    }
    uint64_t v10 = a3[5];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v10, 1, v7))
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v11, v12, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v7);
    }
    uint64_t v14 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    swift_retain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v7))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v15, v16, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v7);
    }
    uint64_t v18 = a3[9];
    *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
    *((unsigned char *)a1 + v18) = *((unsigned char *)a2 + v18);
    uint64_t v19 = a3[11];
    *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
    uint64_t v20 = (char *)a1 + v19;
    uint64_t v21 = (char *)a2 + v19;
    if (__swift_getEnumTagSinglePayload((uint64_t)v21, 1, v7))
    {
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v20, v21, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)v20, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for SearchCallHistoryUnsupportedSearchParametersParameters(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString();
  if (!__swift_getEnumTagSinglePayload(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  uint64_t v5 = a1 + a2[5];
  if (!__swift_getEnumTagSinglePayload(v5, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v5, v4);
  }
  swift_release();
  uint64_t v6 = a1 + a2[7];
  if (!__swift_getEnumTagSinglePayload(v6, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v6, v4);
  }
  uint64_t v7 = a1 + a2[11];
  uint64_t result = __swift_getEnumTagSinglePayload(v7, 1, v4);
  if (!result)
  {
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    return v9(v7, v4);
  }
  return result;
}

char *initializeWithCopy for SearchCallHistoryUnsupportedSearchParametersParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v8], 1, v6))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v9, v10, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  swift_retain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v6))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v13, v14, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v6);
  }
  uint64_t v16 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  a1[v16] = a2[v16];
  uint64_t v17 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  if (__swift_getEnumTagSinglePayload((uint64_t)v19, 1, v6))
  {
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v18, v19, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v6);
  }
  return a1;
}

char *assignWithCopy for SearchCallHistoryUnsupportedSearchParametersParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (EnumTagSinglePayload)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = __swift_getEnumTagSinglePayload((uint64_t)&a1[v11], 1, v6);
  int v15 = __swift_getEnumTagSinglePayload((uint64_t)v13, 1, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v12, v13, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
LABEL_13:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_retain();
  swift_release();
  uint64_t v18 = a3[7];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  int v21 = __swift_getEnumTagSinglePayload((uint64_t)&a1[v18], 1, v6);
  int v22 = __swift_getEnumTagSinglePayload((uint64_t)v20, 1, v6);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v19, v20, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)v19, 0, 1, v6);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v23 = *(void *)(v6 - 8);
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v19, v6);
LABEL_18:
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v19, v20, v6);
LABEL_19:
  a1[a3[8]] = a2[a3[8]];
  a1[a3[9]] = a2[a3[9]];
  a1[a3[10]] = a2[a3[10]];
  uint64_t v25 = a3[11];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  int v28 = __swift_getEnumTagSinglePayload((uint64_t)&a1[v25], 1, v6);
  int v29 = __swift_getEnumTagSinglePayload((uint64_t)v27, 1, v6);
  if (!v28)
  {
    uint64_t v30 = *(void *)(v6 - 8);
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 24))(v26, v27, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v30 + 8))(v26, v6);
    goto LABEL_24;
  }
  if (v29)
  {
LABEL_24:
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v26, v27, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v26, 0, 1, v6);
  return a1;
}

char *initializeWithTake for SearchCallHistoryUnsupportedSearchParametersParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v8], 1, v6))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v9, v10, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  uint64_t v13 = &a1[v12];
  int v14 = &a2[v12];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v12], 1, v6))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v13, v14, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v6);
  }
  uint64_t v16 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  a1[v16] = a2[v16];
  uint64_t v17 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  if (__swift_getEnumTagSinglePayload((uint64_t)v19, 1, v6))
  {
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v18, v19, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v6);
  }
  return a1;
}

char *assignWithTake for SearchCallHistoryUnsupportedSearchParametersParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (EnumTagSinglePayload)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = __swift_getEnumTagSinglePayload((uint64_t)&a1[v11], 1, v6);
  int v15 = __swift_getEnumTagSinglePayload((uint64_t)v13, 1, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v12, v13, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
LABEL_13:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_release();
  uint64_t v18 = a3[7];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  int v21 = __swift_getEnumTagSinglePayload((uint64_t)&a1[v18], 1, v6);
  int v22 = __swift_getEnumTagSinglePayload((uint64_t)v20, 1, v6);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v19, v20, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)v19, 0, 1, v6);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v23 = *(void *)(v6 - 8);
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v19, v6);
LABEL_18:
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 40))(v19, v20, v6);
LABEL_19:
  uint64_t v25 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  a1[v25] = a2[v25];
  uint64_t v26 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  uint64_t v27 = &a1[v26];
  int v28 = &a2[v26];
  int v29 = __swift_getEnumTagSinglePayload((uint64_t)&a1[v26], 1, v6);
  int v30 = __swift_getEnumTagSinglePayload((uint64_t)v28, 1, v6);
  if (!v29)
  {
    uint64_t v31 = *(void *)(v6 - 8);
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 40))(v27, v28, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v31 + 8))(v27, v6);
    goto LABEL_24;
  }
  if (v30)
  {
LABEL_24:
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v27, v28, *(void *)(*(void *)(v32 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v27, v28, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v27, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchCallHistoryUnsupportedSearchParametersParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_4227C8);
}

uint64_t __swift_get_extra_inhabitant_indexTm()
{
  OUTLINED_FUNCTION_125();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_1_44();
  if (*(_DWORD *)(v2 + 84) != v0) {
    return OUTLINED_FUNCTION_45_25(*(int *)(v1 + 24));
  }
  uint64_t v3 = OUTLINED_FUNCTION_115();

  return __swift_getEnumTagSinglePayload(v3, v4, v5);
}

uint64_t storeEnumTagSinglePayload for SearchCallHistoryUnsupportedSearchParametersParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_422854);
}

void __swift_store_extra_inhabitant_indexTm()
{
  OUTLINED_FUNCTION_85();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_1_44();
  if (*(_DWORD *)(v4 + 84) == v3)
  {
    uint64_t v5 = OUTLINED_FUNCTION_63_1();
    __swift_storeEnumTagSinglePayload(v5, v6, v7, v8);
  }
  else
  {
    *(void *)(v1 + *(int *)(v2 + 24)) = v0;
  }
}

void type metadata completion function for SearchCallHistoryUnsupportedSearchParametersParameters()
{
  type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unsigned char *storeEnumTagSinglePayload for SearchCallHistoryOfferToReadMoreCallRecordsParameters(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x422A44);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for SearchCallHistoryVoiceMailOfferToFollowUpActionParameters()
{
}

uint64_t type metadata accessor for SearchCallHistoryCATPatternsExecutor(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for SearchCallHistoryCATPatternsExecutor);
}

uint64_t type metadata completion function for SearchCallHistoryCATPatternsExecutor()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for SearchCallHistoryCATPatternsExecutor()
{
  return type metadata accessor for SearchCallHistoryCATPatternsExecutor(0);
}

uint64_t OUTLINED_FUNCTION_6_99(uint64_t a1)
{
  __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
  *(void *)(v1 + v2[5]) = 0;
  *(void *)(v1 + v2[6]) = 0;
  *(unsigned char *)(v1 + v2[7]) = v4;
  *(unsigned char *)(v1 + v2[8]) = v3;
  return v1;
}

uint64_t OUTLINED_FUNCTION_14_53(uint64_t a1)
{
  *(void *)(a1 + 32) = 0x6C646E7542707061;
  *(void *)(a1 + 40) = 0xEB00000000644965;
  return outlined init with copy of SpeakableString?(v1, v2, v3);
}

uint64_t OUTLINED_FUNCTION_20_51()
{
  return type metadata accessor for SpeakableString();
}

uint64_t OUTLINED_FUNCTION_22_56(char a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 24) = a4;
  *(void *)(v5 + 32) = v4;
  *(void *)(v5 + 16) = a3;
  *(unsigned char *)(v5 + 89) = a2;
  *(unsigned char *)(v5 + 88) = a1;
  return 0;
}

void OUTLINED_FUNCTION_26_40()
{
  *(void *)(v0 + 128) = 0x6F6365526C6C6163;
  *(void *)(v0 + 136) = 0xEF746E756F436472;
}

uint64_t OUTLINED_FUNCTION_28_42@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  v2[6] = a2;
  v2[9] = result;
  v2[10] = 0x726F63655277656ELL;
  v2[11] = 0xEF746E756F437364;
  return result;
}

uint64_t OUTLINED_FUNCTION_32_30()
{
  uint64_t v4 = v2[6];
  *(void *)(v0 + v2[5]) = *(void *)(v1 + v2[5]);
  *(void *)(v0 + v4) = *(void *)(v1 + v4);
  uint64_t v5 = v2[8];
  *(unsigned char *)(v0 + v2[7]) = *(unsigned char *)(v1 + v2[7]);
  *(unsigned char *)(v0 + v5) = *(unsigned char *)(v1 + v5);
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_33_30()
{
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0;
  *(unsigned char *)(v0 + 32) = 1;
  *(void *)(v0 + 40) = 0;
  *(unsigned char *)(v0 + 48) = 1;
  return v0 + 16;
}

uint64_t OUTLINED_FUNCTION_42_32()
{
  return __swift_getEnumTagSinglePayload(v0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_43_30()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_44_27(uint64_t a1)
{
  *(void *)(a1 + 32) = 0x6C646E7542707061;
  *(void *)(a1 + 40) = 0xEB00000000644965;
  return v1;
}

uint64_t OUTLINED_FUNCTION_45_25@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2 = *(void *)(v1 + a1);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  int v3 = v2 - 1;
  if (v3 < 0) {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t OUTLINED_FUNCTION_46_26()
{
  *(void *)(v0 + 80) = 0x656D614E707061;
  *(void *)(v0 + 88) = 0xE700000000000000;
  return 0;
}

uint64_t OUTLINED_FUNCTION_47_27()
{
  return type metadata accessor for SearchCallHistoryReadMultipleCallRecordsParameters(0);
}

void OUTLINED_FUNCTION_51_22(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)(v3 + 144) = a2;
  *(void *)(v3 + 168) = v2;
  *(void *)(v3 + 176) = a1;
  *(void *)(v3 + 184) = 0xEB00000000736472;
}

uint64_t OUTLINED_FUNCTION_53_24()
{
  return type metadata accessor for SearchCallHistoryShowCallHistoryParameters(0);
}

void OUTLINED_FUNCTION_62_21(uint64_t a1@<X8>)
{
  uint64_t v2 = v1 + a1;
  *(void *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 8) = 1;
}

uint64_t OUTLINED_FUNCTION_68_15(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 32));
}

uint64_t OUTLINED_FUNCTION_69_15()
{
  uint64_t v3 = *(int *)(v2 + 32);
  *(unsigned char *)(v0 + *(int *)(v2 + 28)) = *(unsigned char *)(v1 + *(int *)(v2 + 28));
  *(unsigned char *)(v0 + v3) = *(unsigned char *)(v1 + v3);
  return v0;
}

void OUTLINED_FUNCTION_70_10()
{
  v0[8] = *v0;
}

uint64_t OUTLINED_FUNCTION_73_13(uint64_t result)
{
  v1[15] = result;
  v1[16] = 0x746E65746E69;
  v1[17] = 0xE600000000000000;
  return result;
}

uint64_t OUTLINED_FUNCTION_77_11@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2 = *(void *)(v1 + a1);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t OUTLINED_FUNCTION_84_12()
{
  return type metadata accessor for SearchCallHistoryReadCannotFindCallRecordParameters(0);
}

uint64_t OUTLINED_FUNCTION_85_10()
{
  return 0;
}

void OUTLINED_FUNCTION_88_7(uint64_t a1@<X8>)
{
  *(void *)(v1 + 232) = (a1 - 32) | 0x8000000000000000;
}

double OUTLINED_FUNCTION_90_11()
{
  double result = 0.0;
  *uint64_t v0 = 0u;
  v0[1] = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_91_12(uint64_t a1)
{
  uint64_t v5 = v2 + *(int *)(a1 + 20);
  return outlined init with take of URL?(v1, v5, v3);
}

void OUTLINED_FUNCTION_94_9(uint64_t a1@<X8>)
{
  v1[12] = v2;
  v1[15] = a1;
  v1[16] = 0xD000000000000011;
}

uint64_t OUTLINED_FUNCTION_98_8(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 28));
}

uint64_t OUTLINED_FUNCTION_101_7()
{
  return type metadata accessor for SearchCallHistoryReadMultipleVoiceMailRecordsParameters(0);
}

uint64_t OUTLINED_FUNCTION_102_7(char a1, char a2, char a3)
{
  v3[90] = a3;
  v3[89] = a2;
  v3[88] = a1;
  return 0;
}

void OUTLINED_FUNCTION_105_5(uint64_t a1@<X8>)
{
  *(void *)(v1 + 328) = (a1 - 32) | 0x8000000000000000;
}

uint64_t OUTLINED_FUNCTION_110_5()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_111_5()
{
  return v0;
}

PhoneCallFlowDelegatePlugin::AnnounceGroupFaceTimeInviteCATs::Properties_optional __swiftcall AnnounceGroupFaceTimeInviteCATs.Properties.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AnnounceGroupFaceTimeInviteCATs.Properties.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.value = PhoneCallFlowDelegatePlugin_AnnounceGroupFaceTimeInviteCATs_Properties_readGroupFaceTimeInviteAnnouncement;
  }
  else {
    v4.value = PhoneCallFlowDelegatePlugin_AnnounceGroupFaceTimeInviteCATs_Properties_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

PhoneCallFlowDelegatePlugin::AnnounceGroupFaceTimeInviteCATs::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AnnounceGroupFaceTimeInviteCATs.Properties@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::AnnounceGroupFaceTimeInviteCATs::Properties_optional *a2@<X8>)
{
  result.value = AnnounceGroupFaceTimeInviteCATs.Properties.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t AnnounceGroupFaceTimeInviteCATs.offerFollowUpIntent(completion:)()
{
  return dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
}

uint64_t AnnounceGroupFaceTimeInviteCATs.offerFollowUpIntent()(uint64_t a1)
{
  uint64_t v5 = (char *)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:)
     + async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:);
  Swift::Int v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *Swift::Int v3 = v1;
  v3[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return ((uint64_t (*)(uint64_t, unint64_t, unint64_t, void *))v5)(a1, 0xD00000000000002FLL, 0x80000000004900C0, _swiftEmptyArrayStorage);
}

uint64_t AnnounceGroupFaceTimeInviteCATs.offerFollowUpIntent()()
{
  OUTLINED_FUNCTION_1_0();
  Swift::Int v3 = (char *)&async function pointer to dispatch thunk of CATWrapper.executeDialog(catId:parameters:)
     + async function pointer to dispatch thunk of CATWrapper.executeDialog(catId:parameters:);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return ((uint64_t (*)(unint64_t, unint64_t, void *))v3)(0xD00000000000002FLL, 0x80000000004900C0, _swiftEmptyArrayStorage);
}

{
  return dispatch thunk of CATWrapper.execute(catId:parameters:)();
}

uint64_t AnnounceGroupFaceTimeInviteCATs.readGroupFaceTimeInviteAnnouncement(messagesGroupName:caller:participants:burstIndex:numberOfParticipants:numberOfParticipantsNotAnnounced:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v13 = OUTLINED_FUNCTION_11_0(v12);
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_4();
  uint64_t v16 = v15 - v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v17 = OUTLINED_FUNCTION_196_0();
  *(_OWORD *)(v17 + 16) = xmmword_472F90;
  uint64_t v18 = (uint64_t *)(v17 + 48);
  *(void *)(v17 + 32) = 0xD000000000000011;
  *(void *)(v17 + 40) = 0x8000000000497C30;
  outlined init with copy of SpeakableString?(a1, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v19 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload(v16, 1, v19) == 1)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v16, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v18 = 0u;
    *(_OWORD *)(v17 + 64) = 0u;
  }
  else
  {
    *(void *)(v17 + 72) = v19;
    __swift_allocate_boxed_opaque_existential_1(v18);
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v20 + 32))();
  }
  *(void *)(v17 + 80) = 0x72656C6C6163;
  *(void *)(v17 + 88) = 0xE600000000000000;
  if (a2)
  {
    uint64_t v21 = type metadata accessor for PhonePerson(0);
    uint64_t v22 = a2;
  }
  else
  {
    uint64_t v22 = 0;
    uint64_t v21 = 0;
    *(void *)(v17 + 104) = 0;
    *(void *)(v17 + 112) = 0;
  }
  *(void *)(v17 + 96) = v22;
  *(void *)(v17 + 120) = v21;
  strcpy((char *)(v17 + 128), "participants");
  *(unsigned char *)(v17 + 141) = 0;
  *(_WORD *)(v17 + 142) = -5120;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PhonePerson]);
  *(void *)(v17 + 144) = a3;
  *(void *)(v17 + 168) = v23;
  *(void *)(v17 + 176) = 0x646E497473727562;
  *(void *)(v17 + 184) = 0xEA00000000007865;
  if (a5)
  {
    OUTLINED_FUNCTION_13_62();
    *(void *)(v17 + 200) = 0;
    *(void *)(v17 + 208) = 0;
  }
  else
  {
    uint64_t v24 = &type metadata for Double;
    uint64_t v25 = a4;
  }
  *(void *)(v17 + 192) = v25;
  *(void *)(v17 + 216) = v24;
  *(void *)(v17 + 224) = 0xD000000000000014;
  OUTLINED_FUNCTION_134();
  *(void *)(v17 + 232) = v26;
  if (v27)
  {
    OUTLINED_FUNCTION_13_62();
    *(void *)(v17 + 248) = 0;
    *(void *)(v17 + 256) = 0;
  }
  else
  {
    int v28 = &type metadata for Double;
    uint64_t v29 = a6;
  }
  *(void *)(v17 + 240) = v29;
  *(void *)(v17 + 264) = v28;
  *(void *)(v17 + 272) = 0xD000000000000020;
  OUTLINED_FUNCTION_134();
  *(void *)(v17 + 280) = v30;
  if (v31)
  {
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    *(void *)(v17 + 296) = 0;
    *(void *)(v17 + 304) = 0;
  }
  else
  {
    uint64_t v32 = &type metadata for Double;
    uint64_t v33 = a8;
  }
  *(void *)(v17 + 312) = v32;
  *(void *)(v17 + 288) = v33;
  swift_retain();
  swift_bridgeObjectRetain();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  return swift_bridgeObjectRelease();
}

uint64_t AnnounceGroupFaceTimeInviteCATs.readGroupFaceTimeInviteAnnouncement(messagesGroupName:caller:participants:burstIndex:numberOfParticipants:numberOfParticipantsNotAnnounced:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  OUTLINED_FUNCTION_1_0();
  *(unsigned char *)(v11 + 114) = a10;
  *(void *)(v11 + 64) = a9;
  *(void *)(v11 + 72) = v10;
  *(unsigned char *)(v11 + 113) = v12;
  *(unsigned char *)(v11 + 112) = v13;
  *(void *)(v11 + 48) = v14;
  *(void *)(v11 + 56) = v15;
  *(void *)(v11 + 32) = v16;
  *(void *)(v11 + 40) = v17;
  *(void *)(v11 + 16) = v18;
  *(void *)(v11 + 24) = v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v20);
  *(void *)(v11 + 80) = swift_task_alloc();
  OUTLINED_FUNCTION_11_1();
  return OUTLINED_FUNCTION_27_22(v21, v22, v23);
}

uint64_t AnnounceGroupFaceTimeInviteCATs.readGroupFaceTimeInviteAnnouncement(messagesGroupName:caller:participants:burstIndex:numberOfParticipants:numberOfParticipantsNotAnnounced:)()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_196_0();
  *(void *)(v0 + 88) = v3;
  *(_OWORD *)(v3 + 16) = xmmword_472F90;
  uint64_t v4 = (uint64_t *)(v3 + 48);
  *(void *)(v3 + 32) = 0xD000000000000011;
  *(void *)(v3 + 40) = 0x8000000000497C30;
  outlined init with copy of SpeakableString?(v2, v1, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  if (OUTLINED_FUNCTION_37_2(v5) == 1)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(*(void *)(v0 + 80), &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v4 = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
  }
  else
  {
    *(void *)(v3 + 72) = v2;
    __swift_allocate_boxed_opaque_existential_1(v4);
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v6 + 32))();
  }
  uint64_t v7 = *(void *)(v0 + 32);
  OUTLINED_FUNCTION_3_112();
  if (v7)
  {
    uint64_t v8 = type metadata accessor for PhonePerson(0);
    uint64_t v9 = v7;
  }
  else
  {
    uint64_t v8 = OUTLINED_FUNCTION_165_0();
  }
  char v10 = *(unsigned char *)(v0 + 112);
  OUTLINED_FUNCTION_1_114(v8, v9);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PhonePerson]);
  OUTLINED_FUNCTION_3_75(v11);
  if (v10)
  {
    char v13 = 0;
    uint64_t v12 = 0;
    *(void *)(v3 + 200) = 0;
    *(void *)(v3 + 208) = 0;
  }
  else
  {
    uint64_t v12 = *(void *)(v0 + 48);
    char v13 = &type metadata for Double;
  }
  char v14 = *(unsigned char *)(v0 + 113);
  *(void *)(v3 + 192) = v12;
  *(void *)(v3 + 216) = v13;
  *(void *)(v3 + 224) = 0xD000000000000014;
  *(void *)(v3 + 232) = 0x8000000000497C50;
  if (v14)
  {
    uint64_t v16 = 0;
    uint64_t v15 = 0;
    *(void *)(v3 + 248) = 0;
    *(void *)(v3 + 256) = 0;
  }
  else
  {
    uint64_t v15 = *(void *)(v0 + 56);
    uint64_t v16 = &type metadata for Double;
  }
  char v17 = *(unsigned char *)(v0 + 114);
  *(void *)(v3 + 240) = v15;
  *(void *)(v3 + 264) = v16;
  *(void *)(v3 + 272) = 0xD000000000000020;
  *(void *)(v3 + 280) = 0x8000000000497C70;
  if (v17)
  {
    uint64_t v19 = 0;
    uint64_t v18 = 0;
    *(void *)(v3 + 296) = 0;
    *(void *)(v3 + 304) = 0;
  }
  else
  {
    uint64_t v18 = *(void *)(v0 + 64);
    uint64_t v19 = &type metadata for Double;
  }
  *(void *)(v3 + 312) = v19;
  *(void *)(v3 + 288) = v18;
  OUTLINED_FUNCTION_11_46();
  swift_bridgeObjectRetain();
  uint64_t v20 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v20;
  *uint64_t v20 = v0;
  v20[1] = AnnounceGroupFaceTimeInviteCATs.readGroupFaceTimeInviteAnnouncement(messagesGroupName:caller:participants:burstIndex:numberOfParticipants:numberOfParticipantsNotAnnounced:);
  uint64_t v21 = *(void *)(v0 + 16);
  return v23(v21, 0xD00000000000003FLL, 0x80000000004900F0, v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_2();
  char *v5 = v4;
  *(void *)(v3 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v6, v7, v8);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    OUTLINED_FUNCTION_47_0();
    return v9();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char v14;
  uint64_t v15;
  void *v16;
  char v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t (*v22)(unint64_t, unint64_t, uint64_t);
  uint64_t v23;

  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_196_0();
  *(void *)(v0 + 80) = v3;
  *(_OWORD *)(v3 + 16) = xmmword_472F90;
  uint64_t v4 = (uint64_t *)(v3 + 48);
  *(void *)(v3 + 32) = 0xD000000000000011;
  *(void *)(v3 + 40) = 0x8000000000497C30;
  outlined init with copy of SpeakableString?(v2, v1, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  if (OUTLINED_FUNCTION_37_2(v5) == 1)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(*(void *)(v0 + 72), &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v4 = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
  }
  else
  {
    *(void *)(v3 + 72) = v2;
    __swift_allocate_boxed_opaque_existential_1(v4);
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v6 + 32))();
  }
  uint64_t v7 = *(void *)(v0 + 24);
  OUTLINED_FUNCTION_3_112();
  if (v7)
  {
    uint64_t v8 = type metadata accessor for PhonePerson(0);
    uint64_t v9 = v7;
  }
  else
  {
    uint64_t v8 = OUTLINED_FUNCTION_165_0();
  }
  char v10 = *(unsigned char *)(v0 + 104);
  OUTLINED_FUNCTION_1_114(v8, v9);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PhonePerson]);
  OUTLINED_FUNCTION_3_75(v11);
  if (v10)
  {
    char v13 = 0;
    uint64_t v12 = 0;
    *(void *)(v3 + 200) = 0;
    *(void *)(v3 + 208) = 0;
  }
  else
  {
    uint64_t v12 = *(void *)(v0 + 40);
    char v13 = &type metadata for Double;
  }
  char v14 = *(unsigned char *)(v0 + 105);
  *(void *)(v3 + 192) = v12;
  *(void *)(v3 + 216) = v13;
  *(void *)(v3 + 224) = 0xD000000000000014;
  *(void *)(v3 + 232) = 0x8000000000497C50;
  if (v14)
  {
    uint64_t v16 = 0;
    uint64_t v15 = 0;
    *(void *)(v3 + 248) = 0;
    *(void *)(v3 + 256) = 0;
  }
  else
  {
    uint64_t v15 = *(void *)(v0 + 48);
    uint64_t v16 = &type metadata for Double;
  }
  char v17 = *(unsigned char *)(v0 + 106);
  *(void *)(v3 + 240) = v15;
  *(void *)(v3 + 264) = v16;
  *(void *)(v3 + 272) = 0xD000000000000020;
  *(void *)(v3 + 280) = 0x8000000000497C70;
  if (v17)
  {
    uint64_t v19 = 0;
    uint64_t v18 = 0;
    *(void *)(v3 + 296) = 0;
    *(void *)(v3 + 304) = 0;
  }
  else
  {
    uint64_t v18 = *(void *)(v0 + 56);
    uint64_t v19 = &type metadata for Double;
  }
  *(void *)(v3 + 312) = v19;
  *(void *)(v3 + 288) = v18;
  OUTLINED_FUNCTION_11_46();
  swift_bridgeObjectRetain();
  uint64_t v20 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v20;
  *uint64_t v20 = v0;
  v20[1] = AnnounceGroupFaceTimeInviteCATs.readGroupFaceTimeInviteAnnouncement(messagesGroupName:caller:participants:burstIndex:numberOfParticipants:numberOfParticipantsNotAnnounced:);
  return v22(0xD00000000000003FLL, 0x80000000004900F0, v3);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v0();
}

uint64_t AnnounceGroupFaceTimeInviteCATs.readGroupFaceTimeInviteAnnouncement(messagesGroupName:caller:participants:burstIndex:numberOfParticipants:numberOfParticipantsNotAnnounced:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  OUTLINED_FUNCTION_1_0();
  *(void *)(v10 + 56) = v11;
  *(void *)(v10 + 64) = v9;
  *(unsigned char *)(v10 + 106) = a9;
  *(unsigned char *)(v10 + 105) = v12;
  *(void *)(v10 + 40) = v13;
  *(void *)(v10 + 48) = v14;
  *(unsigned char *)(v10 + 104) = v15;
  *(void *)(v10 + 24) = v16;
  *(void *)(v10 + 32) = v17;
  *(void *)(v10 + 16) = v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v19);
  *(void *)(v10 + 72) = swift_task_alloc();
  OUTLINED_FUNCTION_11_1();
  return OUTLINED_FUNCTION_27_22(v20, v21, v22);
}

uint64_t AnnounceGroupFaceTimeInviteCATs.readGroupFaceTimeInviteAnnouncement(messagesGroupName:caller:participants:burstIndex:numberOfParticipants:numberOfParticipantsNotAnnounced:)(uint64_t a1)
{
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_4_2();
  void *v7 = v6;
  *(void *)(v5 + 96) = v1;
  swift_task_dealloc();
  if (v1)
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v8, v9, v10);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(uint64_t))(v6 + 8);
    return v11(a1);
  }
}

uint64_t AnnounceGroupFaceTimeInviteCATs.readGroupFaceTimeInviteAnnouncement(messagesGroupName:caller:participants:burstIndex:numberOfParticipants:numberOfParticipantsNotAnnounced:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v12 = OUTLINED_FUNCTION_11_0(v11);
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_4();
  uint64_t v15 = v14 - v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v16 = OUTLINED_FUNCTION_196_0();
  *(_OWORD *)(v16 + 16) = xmmword_472F90;
  uint64_t v17 = (uint64_t *)(v16 + 48);
  *(void *)(v16 + 32) = 0xD000000000000011;
  *(void *)(v16 + 40) = 0x8000000000497C30;
  outlined init with copy of SpeakableString?(a1, v15, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v18 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload(v15, 1, v18) == 1)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v15, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v17 = 0u;
    *(_OWORD *)(v16 + 64) = 0u;
  }
  else
  {
    *(void *)(v16 + 72) = v18;
    __swift_allocate_boxed_opaque_existential_1(v17);
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v19 + 32))();
  }
  OUTLINED_FUNCTION_3_112();
  if (a2)
  {
    uint64_t v20 = type metadata accessor for PhonePerson(0);
    uint64_t v21 = a2;
  }
  else
  {
    uint64_t v20 = OUTLINED_FUNCTION_165_0();
  }
  OUTLINED_FUNCTION_1_114(v20, v21);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PhonePerson]);
  OUTLINED_FUNCTION_3_75(v22);
  if (a5)
  {
    OUTLINED_FUNCTION_13_62();
    *(void *)(v16 + 200) = 0;
    *(void *)(v16 + 208) = 0;
  }
  else
  {
    uint64_t v23 = &type metadata for Double;
    uint64_t v24 = a4;
  }
  *(void *)(v16 + 192) = v24;
  *(void *)(v16 + 216) = v23;
  *(void *)(v16 + 224) = 0xD000000000000014;
  OUTLINED_FUNCTION_134();
  *(void *)(v16 + 232) = v25;
  if (v26)
  {
    OUTLINED_FUNCTION_13_62();
    *(void *)(v16 + 248) = 0;
    *(void *)(v16 + 256) = 0;
  }
  else
  {
    char v27 = &type metadata for Double;
    uint64_t v28 = a6;
  }
  *(void *)(v16 + 240) = v28;
  *(void *)(v16 + 264) = v27;
  *(void *)(v16 + 272) = 0xD000000000000020;
  OUTLINED_FUNCTION_134();
  *(void *)(v16 + 280) = v29;
  if (v30)
  {
    char v31 = 0;
    uint64_t v32 = 0;
    *(void *)(v16 + 296) = 0;
    *(void *)(v16 + 304) = 0;
  }
  else
  {
    char v31 = &type metadata for Double;
    uint64_t v32 = a8;
  }
  *(void *)(v16 + 312) = v31;
  *(void *)(v16 + 288) = v32;
  swift_retain();
  swift_bridgeObjectRetain();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  return swift_bridgeObjectRelease();
}

uint64_t AnnounceGroupFaceTimeInviteCATs.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return AnnounceGroupFaceTimeInviteCATs.init(templateDir:options:globals:)(a1, a2);
}

uint64_t AnnounceGroupFaceTimeInviteCATs.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CATOption();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_4();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  uint64_t v10 = OUTLINED_FUNCTION_11_0(v9);
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_4();
  outlined init with copy of SpeakableString?(a1, v12 - v11, (uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
  uint64_t v13 = CATWrapper.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(a1, (uint64_t *)&demangling cache variable for type metadata for URL?);
  return v13;
}

unint64_t lazy protocol witness table accessor for type AnnounceGroupFaceTimeInviteCATs.Properties and conformance AnnounceGroupFaceTimeInviteCATs.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type AnnounceGroupFaceTimeInviteCATs.Properties and conformance AnnounceGroupFaceTimeInviteCATs.Properties;
  if (!lazy protocol witness table cache variable for type AnnounceGroupFaceTimeInviteCATs.Properties and conformance AnnounceGroupFaceTimeInviteCATs.Properties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnounceGroupFaceTimeInviteCATs.Properties and conformance AnnounceGroupFaceTimeInviteCATs.Properties);
  }
  return result;
}

uint64_t type metadata accessor for AnnounceGroupFaceTimeInviteCATs()
{
  uint64_t result = type metadata singleton initialization cache for AnnounceGroupFaceTimeInviteCATs;
  if (!type metadata singleton initialization cache for AnnounceGroupFaceTimeInviteCATs) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for AnnounceGroupFaceTimeInviteCATs()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for AnnounceGroupFaceTimeInviteCATs()
{
  return type metadata accessor for AnnounceGroupFaceTimeInviteCATs();
}

unsigned char *storeEnumTagSinglePayload for AnnounceGroupFaceTimeInviteCATs.Properties(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x4243F4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnnounceGroupFaceTimeInviteCATs.Properties()
{
  return &type metadata for AnnounceGroupFaceTimeInviteCATs.Properties;
}

uint64_t OUTLINED_FUNCTION_1_114@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 + 96) = a2;
  *(void *)(v2 + 120) = result;
  strcpy((char *)(v2 + 128), "participants");
  *(unsigned char *)(v2 + 141) = 0;
  *(_WORD *)(v2 + 142) = -5120;
  return result;
}

void OUTLINED_FUNCTION_3_112()
{
  *(void *)(v0 + 80) = 0x72656C6C6163;
  *(void *)(v0 + 88) = 0xE600000000000000;
}

uint64_t Locale.underscoredIdentifier.getter()
{
  Locale.identifier.getter();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v0 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF12SiriOntology21NonTerminalIntentNodeV_s5NeverO27PhoneCallFlowDelegatePlugin0jK3App_pTg5@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v14 = a1;
  uint64_t v5 = type metadata accessor for NonTerminalIntentNode();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NonTerminalIntentNode?);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PersonOntologyNode.PersonSelfReference?(v3, (uint64_t)v11, &demangling cache variable for type metadata for NonTerminalIntentNode?);
  uint64_t result = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v5);
  if (result == 1)
  {
    *(void *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
    v14(v8);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return result;
}

uint64_t *PhoneCallNLv3Intent.appName.unsafeMutableAddressor()
{
  if (one-time initialization token for appName != -1) {
    swift_once();
  }
  return &static PhoneCallNLv3Intent.appName;
}

uint64_t *PhoneCallNLv3Intent.reference.unsafeMutableAddressor()
{
  if (one-time initialization token for reference != -1) {
    swift_once();
  }
  return &static PhoneCallNLv3Intent.reference;
}

uint64_t *PhoneCallNLv3Intent.confirmation.unsafeMutableAddressor()
{
  if (one-time initialization token for confirmation != -1) {
    swift_once();
  }
  return &static PhoneCallNLv3Intent.confirmation;
}

uint64_t specialized PhoneCallNLIntent.hasVideoCallSemantic()()
{
  type metadata accessor for PhoneCallNLv3Intent(0);
  lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent, (void (*)(uint64_t))type metadata accessor for PhoneCallNLv3Intent);
  IntentNodeTraversable.value<A>(forNode:)();
  if (v13 == 9)
  {
    char v0 = 0;
  }
  else if (PhoneCallNoun.rawValue.getter(v13) == 0x656D697465636166 && v1 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    char v0 = 1;
  }
  else
  {
    char v0 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
  IntentNodeTraversable.value<A>(forNode:)();
  if (v12 == 17)
  {
    char v3 = 0;
  }
  else if (PhoneCallVerb.rawValue.getter(v12) == 0x656D697465636166 && v4 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    char v3 = 1;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
  IntentNodeTraversable.value<A>(forNode:)();
  if (v11 == 9)
  {
    char v6 = 0;
  }
  else if (PhoneCallNoun.rawValue.getter(v11) == 0x61665F70756F7267 && v7 == 0xEE00656D69746563)
  {
    swift_bridgeObjectRelease();
    char v6 = 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
  if (v0) {
    char v9 = 1;
  }
  else {
    char v9 = v3 | v6;
  }
  return v9 & 1;
}

uint64_t specialized PhoneCallNLIntent.hasAudioCallSemantic()()
{
  type metadata accessor for PhoneCallNLv3Intent(0);
  lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent, (void (*)(uint64_t))type metadata accessor for PhoneCallNLv3Intent);
  IntentNodeTraversable.value<A>(forNode:)();
  if (v8 == 9)
  {
    int v0 = 0;
  }
  else if (PhoneCallNoun.rawValue.getter(v8) == 0x656D697465636166 && v1 == 0xEE006F6964756120)
  {
    swift_bridgeObjectRelease();
    int v0 = 1;
  }
  else
  {
    int v0 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
  IntentNodeTraversable.value<A>(forNode:)();
  if (v7 == 17)
  {
    int v3 = 0;
  }
  else if (PhoneCallVerb.rawValue.getter(v7) == 0x656D697465636166 && v4 == 0xEE006F6964756120)
  {
    swift_bridgeObjectRelease();
    int v3 = 1;
  }
  else
  {
    int v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
  return (v0 | v3) & 1;
}

uint64_t *PhoneCallNLv3Intent.callId.unsafeMutableAddressor()
{
  if (one-time initialization token for callId != -1) {
    swift_once();
  }
  return &static PhoneCallNLv3Intent.callId;
}

uint64_t static PhoneCallNLv3Intent.placeCallBack()@<X0>(uint64_t a1@<X8>)
{
  return static PhoneCallNLv3Intent.placeCall()(a1);
}

uint64_t *PhoneCallNLv3Intent.applicationId.unsafeMutableAddressor()
{
  if (one-time initialization token for applicationId != -1) {
    swift_once();
  }
  return &static PhoneCallNLv3Intent.applicationId;
}

uint64_t PhoneCallNLv3Intent.intent.getter()
{
  return PhoneCallNLv3Intent.intent.getter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t vars8;

  int v0 = OUTLINED_FUNCTION_60_19();
  v1(v0);
  OUTLINED_FUNCTION_15();
  uint64_t v2 = OUTLINED_FUNCTION_7_0();

  return v3(v2);
}

uint64_t PhoneCallNLv3Intent.appNode.getter()
{
  return PhoneCallNLv3Intent.appNode.getter((void (*)(void))type metadata accessor for PhoneCallNLv3Intent);
}

uint64_t PhoneCallNLv3Intent.domainOntologyNode.getter()
{
  type metadata accessor for PhoneCallNLv3Intent(0);

  return swift_retain();
}

uint64_t one-time initialization function for appName(uint64_t a1)
{
  return one-time initialization function for appName(a1, &demangling cache variable for type metadata for TerminalOntologyNode<String>, 0x656D614E707061, 0xE700000000000000, &static PhoneCallNLv3Intent.appName);
}

uint64_t static PhoneCallNLv3Intent.appName.getter()
{
  return static PhoneCallNLv3Intent.appName.getter();
}

{
  char v0;
  uint64_t vars8;

  OUTLINED_FUNCTION_31_39();
  if (!v0) {
    swift_once();
  }

  return swift_retain();
}

uint64_t one-time initialization function for applicationId(uint64_t a1)
{
  return one-time initialization function for appName(a1, &demangling cache variable for type metadata for TerminalOntologyNode<String>, 0x746163696C707061, 0xED000064496E6F69, &static PhoneCallNLv3Intent.applicationId);
}

uint64_t static PhoneCallNLv3Intent.applicationId.getter()
{
  return static PhoneCallNLv3Intent.appName.getter();
}

uint64_t one-time initialization function for callId(uint64_t a1)
{
  return one-time initialization function for appName(a1, &demangling cache variable for type metadata for TerminalOntologyNode<String>, 0x6C6143656E6F6870, 0xEB0000000064496CLL, &static PhoneCallNLv3Intent.callId);
}

uint64_t static PhoneCallNLv3Intent.callId.getter()
{
  return static PhoneCallNLv3Intent.appName.getter();
}

uint64_t one-time initialization function for confirmation(uint64_t a1)
{
  return OUTLINED_FUNCTION_37_32(a1, &demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallConfirmation>, 21, 0x800000000048D290, &static PhoneCallNLv3Intent.confirmation);
}

uint64_t static PhoneCallNLv3Intent.confirmation.getter()
{
  return static PhoneCallNLv3Intent.appName.getter();
}

uint64_t one-time initialization function for reference(uint64_t a1)
{
  return OUTLINED_FUNCTION_37_32(a1, &demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallReference>, 18, 0x800000000049D650, &static PhoneCallNLv3Intent.reference);
}

uint64_t static PhoneCallNLv3Intent.reference.getter()
{
  return static PhoneCallNLv3Intent.appName.getter();
}

uint64_t PhoneCallContactOntologyNode.__allocating_init(name:multicardinal:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PhoneCallContactOntologyNode.__allocating_init(name:multicardinal:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))PhoneCallContactOntologyNode.init(name:multicardinal:));
}

uint64_t SmsGroupOntologyNode.__allocating_init(name:multicardinal:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PhoneCallContactOntologyNode.__allocating_init(name:multicardinal:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))SmsGroupOntologyNode.init(name:multicardinal:));
}

uint64_t PhoneCallContactOntologyNode.__allocating_init(name:multicardinal:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  return a4(a1, a2, a3);
}

uint64_t closure #1 in PhoneCallNLv3Intent.app.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for AppIntentNode(0);
  a3[3] = v6;
  a3[4] = (uint64_t)&protocol witness table for AppIntentNode;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3);
  uint64_t v8 = type metadata accessor for NonTerminalIntentNode();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(boxed_opaque_existential_1, a1, v8);
  *(uint64_t *)((char *)boxed_opaque_existential_1 + *(int *)(v6 + 20)) = *(void *)(a2
                                                                                   + *(int *)(type metadata accessor for PhoneCallNLv3Intent(0)
                                                                                            + 20));
  return swift_retain();
}

uint64_t AppIntentNode.init(intentNode:ontologyNode:)()
{
  return AppIntentNode.init(intentNode:ontologyNode:)();
}

{
  uint64_t (*v0)(void);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t result;

  OUTLINED_FUNCTION_43_31();
  OUTLINED_FUNCTION_15();
  int v3 = OUTLINED_FUNCTION_7_5();
  v4(v3);
  uint64_t result = v0(0);
  *(void *)(v2 + *(int *)(result + 20)) = v1;
  return result;
}

uint64_t PhoneCallNLv3Intent.phoneCallAVMode.getter()
{
  if (specialized PhoneCallNLIntent.hasVideoCallSemantic()()) {
    return 1;
  }
  if (specialized PhoneCallNLIntent.hasAudioCallSemantic()()) {
    return 0;
  }
  return 2;
}

uint64_t PhoneCallNLv3Intent.phoneCallCapability.getter()
{
  OUTLINED_FUNCTION_12_63();
  lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent, (void (*)(uint64_t))type metadata accessor for PhoneCallNLv3Intent);
  OUTLINED_FUNCTION_10_73();
  return v1;
}

uint64_t PhoneCallNLv3Intent.phoneCallPreferredProvider.getter()
{
  OUTLINED_FUNCTION_12_63();
  lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent, (void (*)(uint64_t))type metadata accessor for PhoneCallNLv3Intent);
  OUTLINED_FUNCTION_10_73();
  return v1;
}

uint64_t PhoneCallNLv3Intent.phoneCallReference.getter()
{
  return PhoneCallNLv3Intent.phoneCallConfirmation.getter();
}

uint64_t PhoneCallContactIntentNode.__allocating_init(intentNode:ontologyNode:)()
{
  OUTLINED_FUNCTION_6_5();
  uint64_t v0 = swift_allocObject();
  PhoneCallContactIntentNode.init(intentNode:ontologyNode:)();
  return v0;
}

uint64_t closure #1 in PhoneCallNLv3Intent.smsGroups.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for SmsGroupIntentNode(0);
  a3[3] = v6;
  a3[4] = (uint64_t)&protocol witness table for SmsGroupIntentNode;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3);
  uint64_t v8 = type metadata accessor for NonTerminalIntentNode();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(boxed_opaque_existential_1, a1, v8);
  *(uint64_t *)((char *)boxed_opaque_existential_1 + *(int *)(v6 + 20)) = *(void *)(a2
                                                                                   + *(int *)(type metadata accessor for PhoneCallNLv3Intent(0)
                                                                                            + 68));
  return swift_retain();
}

uint64_t SmsGroupIntentNode.init(intentNode:ontologyNode:)()
{
  return AppIntentNode.init(intentNode:ontologyNode:)();
}

uint64_t PhoneCallNLv3Intent.hash(into:)()
{
  type metadata accessor for NLIntent();
  lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type NLIntent and conformance NLIntent, (void (*)(uint64_t))&type metadata accessor for NLIntent);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for PhoneCallNLv3Intent(0);
  type metadata accessor for AppOntologyNode();
  lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type AppOntologyNode and conformance NonTerminalOntologyNode, (void (*)(uint64_t))&type metadata accessor for AppOntologyNode);
  OUTLINED_FUNCTION_36_34();
  OUTLINED_FUNCTION_34_33();
  type metadata accessor for DomainOntologyNode();
  lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type DomainOntologyNode and conformance NonTerminalOntologyNode, (void (*)(uint64_t))&type metadata accessor for DomainOntologyNode);
  OUTLINED_FUNCTION_36_34();
  OUTLINED_FUNCTION_29_33();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallAttribute>);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type TerminalOntologyNode<PhoneCallAttribute> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallAttribute>);
  OUTLINED_FUNCTION_5_81();
  OUTLINED_FUNCTION_29_33();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallAudioRoute>);
  OUTLINED_FUNCTION_32_31(&lazy protocol witness table cache variable for type TerminalOntologyNode<PhoneCallAudioRoute> and conformance TerminalOntologyNode<A>);
  OUTLINED_FUNCTION_5_81();
  OUTLINED_FUNCTION_29_33();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallCapability>);
  OUTLINED_FUNCTION_32_31(&lazy protocol witness table cache variable for type TerminalOntologyNode<PhoneCallCapability> and conformance TerminalOntologyNode<A>);
  OUTLINED_FUNCTION_5_81();
  OUTLINED_FUNCTION_29_33();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallPreferredProvider>);
  OUTLINED_FUNCTION_32_31(&lazy protocol witness table cache variable for type TerminalOntologyNode<PhoneCallPreferredProvider> and conformance TerminalOntologyNode<A>);
  OUTLINED_FUNCTION_5_81();
  OUTLINED_FUNCTION_29_33();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallDestinationType>);
  OUTLINED_FUNCTION_32_31(&lazy protocol witness table cache variable for type TerminalOntologyNode<PhoneCallDestinationType> and conformance TerminalOntologyNode<A>);
  OUTLINED_FUNCTION_5_81();
  uint64_t v0 = OUTLINED_FUNCTION_34_33();
  type metadata accessor for PhoneCallContactOntologyNode(v0);
  lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type PhoneCallContactOntologyNode and conformance NonTerminalOntologyNode, (void (*)(uint64_t))type metadata accessor for PhoneCallContactOntologyNode);
  OUTLINED_FUNCTION_5_81();
  OUTLINED_FUNCTION_29_33();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<String>);
  OUTLINED_FUNCTION_32_31(&lazy protocol witness table cache variable for type TerminalOntologyNode<String> and conformance TerminalOntologyNode<A>);
  OUTLINED_FUNCTION_5_81();
  OUTLINED_FUNCTION_29_33();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallNoun>);
  OUTLINED_FUNCTION_32_31(&lazy protocol witness table cache variable for type TerminalOntologyNode<PhoneCallNoun> and conformance TerminalOntologyNode<A>);
  OUTLINED_FUNCTION_5_81();
  OUTLINED_FUNCTION_29_33();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallVerb>);
  OUTLINED_FUNCTION_32_31(&lazy protocol witness table cache variable for type TerminalOntologyNode<PhoneCallVerb> and conformance TerminalOntologyNode<A>);
  OUTLINED_FUNCTION_5_81();
  OUTLINED_FUNCTION_34_33();
  type metadata accessor for NonTerminalOntologyNode();
  lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type NonTerminalOntologyNode and conformance NonTerminalOntologyNode, (void (*)(uint64_t))&type metadata accessor for NonTerminalOntologyNode);
  OUTLINED_FUNCTION_36_34();
  uint64_t v1 = OUTLINED_FUNCTION_34_33();
  type metadata accessor for SmsGroupOntologyNode(v1);
  lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type SmsGroupOntologyNode and conformance NonTerminalOntologyNode, (void (*)(uint64_t))type metadata accessor for SmsGroupOntologyNode);
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t static PhoneCallNLv3Intent.__derived_struct_equals(_:_:)()
{
  OUTLINED_FUNCTION_6_5();
  if ((static NLIntent.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  type metadata accessor for NonTerminalOntologyNode();
  uint64_t v0 = (int *)type metadata accessor for PhoneCallNLv3Intent(0);
  if ((OUTLINED_FUNCTION_24_42(v0[5]) & 1) == 0) {
    return 0;
  }
  if ((OUTLINED_FUNCTION_24_42(v0[6]) & 1) == 0) {
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallAttribute>);
  if ((OUTLINED_FUNCTION_28_43(v0[7]) & 1) == 0) {
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallAudioRoute>);
  if ((OUTLINED_FUNCTION_28_43(v0[8]) & 1) != 0
    && (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallCapability>),
        (OUTLINED_FUNCTION_28_43(v0[9]) & 1) != 0)
    && (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallPreferredProvider>),
        (OUTLINED_FUNCTION_28_43(v0[10]) & 1) != 0)
    && (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallDestinationType>),
        (OUTLINED_FUNCTION_28_43(v0[11]) & 1) != 0)
    && (OUTLINED_FUNCTION_24_42(v0[12]) & 1) != 0
    && (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<String>),
        (OUTLINED_FUNCTION_28_43(v0[13]) & 1) != 0)
    && (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallNoun>),
        (OUTLINED_FUNCTION_28_43(v0[14]) & 1) != 0)
    && (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallVerb>),
        (OUTLINED_FUNCTION_28_43(v0[15]) & 1) != 0)
    && (OUTLINED_FUNCTION_24_42(v0[16]) & 1) != 0)
  {
    return OUTLINED_FUNCTION_24_42(v0[17]) & 1;
  }
  else
  {
    return 0;
  }
}

Swift::Int PhoneCallNLv3Intent.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallNLv3Intent()
{
  return Hasher._finalize()();
}

uint64_t key path setter for PhoneCallContactIntentNode.intentNode : PhoneCallContactIntentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NonTerminalIntentNode();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 128))(v6);
}

uint64_t PhoneCallContactIntentNode.intentNode.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin26PhoneCallContactIntentNode_intentNode;
  swift_beginAccess();
  type metadata accessor for NonTerminalIntentNode();
  OUTLINED_FUNCTION_15();
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v3, a1);
  return swift_endAccess();
}

uint64_t (*PhoneCallContactIntentNode.intentNode.modify())()
{
  return static SingleResultVoicemailModel.resultViewID.modify;
}

uint64_t key path setter for PhoneCallContactIntentNode.ontologyNode : PhoneCallContactIntentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 152);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t PhoneCallContactIntentNode.ontologyNode.setter(uint64_t a1)
{
  OUTLINED_FUNCTION_36_21();
  *uint64_t v1 = a1;
  return swift_release();
}

uint64_t (*PhoneCallContactIntentNode.ontologyNode.modify())()
{
  return PhoneFlow.state.modify;
}

uint64_t static PhoneCallContactIntentNode.from(intentNode:ontologyNode:)()
{
  OUTLINED_FUNCTION_6_5();
  type metadata accessor for NonTerminalIntentNode();
  OUTLINED_FUNCTION_1();
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v6 + 16))(v5, v2);
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t))(v1 + 168);
  swift_retain();
  return v7(v5, v0);
}

uint64_t *PhoneCallContactOntologyNode.personNode.unsafeMutableAddressor()
{
  if (one-time initialization token for personNode != -1) {
    swift_once();
  }
  return &static PhoneCallContactOntologyNode.personNode;
}

uint64_t key path setter for PhoneCallContactIntentNode.contactId : PhoneCallContactIntentNode(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 192);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t *PhoneCallContactOntologyNode.phoneCallContactIdNode.unsafeMutableAddressor()
{
  if (one-time initialization token for phoneCallContactIdNode != -1) {
    swift_once();
  }
  return &static PhoneCallContactOntologyNode.phoneCallContactIdNode;
}

uint64_t (*PhoneCallContactIntentNode.contactId.modify(uint64_t *a1))()
{
  *a1 = PhoneCallContactIntentNode.contactId.getter();
  a1[1] = v2;
  return PhoneCallContactIntentNode.contactId.modify;
}

uint64_t *PhoneCallContactOntologyNode.phoneCallContactReferenceNode.unsafeMutableAddressor()
{
  if (one-time initialization token for phoneCallContactReferenceNode != -1) {
    swift_once();
  }
  return &static PhoneCallContactOntologyNode.phoneCallContactReferenceNode;
}

Swift::Void (__swiftcall *PhoneCallContactIntentNode.contactReference.modify(unsigned char *a1))(Swift::OpaquePointer newCallGroups)
{
  *a1 = PhoneCallContactIntentNode.contactReference.getter();
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t key path setter for PhoneCallContactIntentNode.emailAddress : PhoneCallContactIntentNode(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 240);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t *PhoneCallContactOntologyNode.emailAddressNode.unsafeMutableAddressor()
{
  if (one-time initialization token for emailAddressNode != -1) {
    swift_once();
  }
  return &static PhoneCallContactOntologyNode.emailAddressNode;
}

uint64_t (*PhoneCallContactIntentNode.emailAddress.modify(uint64_t *a1))()
{
  *a1 = PhoneCallContactIntentNode.emailAddress.getter();
  a1[1] = v2;
  return PhoneCallContactIntentNode.contactId.modify;
}

uint64_t key path setter for PhoneCallContactIntentNode.contactName : PhoneCallContactIntentNode(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 264);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t *PhoneCallContactOntologyNode.phoneCallContactNameNode.unsafeMutableAddressor()
{
  if (one-time initialization token for phoneCallContactNameNode != -1) {
    swift_once();
  }
  return &static PhoneCallContactOntologyNode.phoneCallContactNameNode;
}

uint64_t (*PhoneCallContactIntentNode.contactName.modify(uint64_t *a1))()
{
  *a1 = PhoneCallContactIntentNode.contactName.getter();
  a1[1] = v2;
  return PhoneCallContactIntentNode.contactId.modify;
}

Swift::Void (__swiftcall *PhoneCallContactIntentNode.isMe.modify())(Swift::OpaquePointer newCallGroups)
{
  PhoneCallContactIntentNode.isMe.getter();
  OUTLINED_FUNCTION_56_20(v0);
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t key path getter for PhoneCallContactIntentNode.personName : PhoneCallContactIntentNode@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void *__return_ptr))(**(void **)a1 + 304))(v4);
  return outlined init with take of PhoneCallPersonName?((uint64_t)v4, a2);
}

uint64_t key path setter for PhoneCallContactIntentNode.personName : PhoneCallContactIntentNode(uint64_t a1, uint64_t a2)
{
  outlined init with take of PhoneCallPersonName?(a1, (uint64_t)v5);
  uint64_t v3 = *(uint64_t (**)(void *))(**(void **)a2 + 312);
  outlined release of PhoneCallPersonName?(v5, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of PhoneCallPersonName?);
  return v3(v5);
}

void *PhoneCallContactIntentNode.personName.setter(void *a1)
{
  return outlined release of PhoneCallPersonName?(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of PhoneCallPersonName?);
}

void (*PhoneCallContactIntentNode.personName.modify(void *a1))(uint64_t a1)
{
  uint64_t v2 = malloc(0xE0uLL);
  *a1 = v2;
  PhoneCallContactIntentNode.personName.getter();
  outlined init with take of PhoneCallPersonName?((uint64_t)v2, (uint64_t)v2 + 112);
  return PhoneCallContactIntentNode.personName.modify;
}

void PhoneCallContactIntentNode.personName.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  outlined consume of PhoneCallPersonName?(*(void *)(*(void *)a1 + 112), *(void *)(*(void *)a1 + 120));

  free(v1);
}

uint64_t key path setter for PhoneCallContactIntentNode.organizationName : PhoneCallContactIntentNode(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 336);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t (*PhoneCallContactIntentNode.organizationName.modify(uint64_t *a1))()
{
  *a1 = PhoneCallContactIntentNode.organizationName.getter();
  a1[1] = v2;
  return PhoneCallContactIntentNode.contactId.modify;
}

uint64_t key path setter for PhoneCallContactIntentNode.telephoneNumber : PhoneCallContactIntentNode(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 360);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t *PhoneCallContactOntologyNode.phoneNumberNode.unsafeMutableAddressor()
{
  if (one-time initialization token for phoneNumberNode != -1) {
    swift_once();
  }
  return &static PhoneCallContactOntologyNode.phoneNumberNode;
}

uint64_t (*PhoneCallContactIntentNode.telephoneNumber.modify(uint64_t *a1))()
{
  *a1 = PhoneCallContactIntentNode.telephoneNumber.getter();
  a1[1] = v2;
  return PhoneCallContactIntentNode.contactId.modify;
}

uint64_t key path setter for PhoneCallContactIntentNode.relationship : PhoneCallContactIntentNode(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 384);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t (*PhoneCallContactIntentNode.relationship.modify(uint64_t *a1))()
{
  *a1 = PhoneCallContactIntentNode.relationship.getter();
  a1[1] = v2;
  return PhoneCallContactIntentNode.contactId.modify;
}

uint64_t key path setter for PhoneCallContactIntentNode.handleType : PhoneCallContactIntentNode(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 408);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t *PhoneCallContactOntologyNode.contactTypeNode.unsafeMutableAddressor()
{
  if (one-time initialization token for contactTypeNode != -1) {
    swift_once();
  }
  return &static PhoneCallContactOntologyNode.contactTypeNode;
}

uint64_t PhoneCallContactIntentNode.handleType.setter()
{
  return swift_bridgeObjectRelease();
}

uint64_t (*PhoneCallContactIntentNode.handleType.modify(uint64_t *a1))()
{
  *a1 = PhoneCallContactIntentNode.handleType.getter();
  a1[1] = v2;
  return destroy for AppQuery.Override;
}

uint64_t key path setter for PhoneCallContactIntentNode.handleLabel : PhoneCallContactIntentNode(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 432);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t PhoneCallContactIntentNode.handleLabel.setter()
{
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_36_21();
  *uint64_t v1 = v2;
  v1[1] = v0;
  return swift_bridgeObjectRelease();
}

uint64_t (*PhoneCallContactIntentNode.handleLabel.modify())()
{
  return PhoneFlow.state.modify;
}

uint64_t key path setter for PhoneCallContactIntentNode.emergencyType : PhoneCallContactIntentNode(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, unint64_t))(**(void **)a2 + 456);
  outlined copy of PhoneCallEmergencyType?(*a1, v3);
  return v4(v2, v3);
}

uint64_t (*PhoneCallContactIntentNode.emergencyType.modify(void *a1))(uint64_t a1)
{
  PhoneCallContactIntentNode.emergencyType.getter();
  *a1 = 0;
  a1[1] = v2;
  return PhoneCallContactIntentNode.emergencyType.modify;
}

uint64_t PhoneCallContactIntentNode.emergencyType.modify(uint64_t a1)
{
  return outlined consume of PhoneCallEmergencyType?(*(void *)a1, *(void *)(a1 + 8));
}

BOOL PhoneCallContactIntentNode.isAmbiguousHandle.getter()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement?);
  uint64_t v4 = OUTLINED_FUNCTION_11_0(v3);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_12_0();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalIntentNode?);
  uint64_t v6 = OUTLINED_FUNCTION_11_0(v5);
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_27();
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v23 - v8;
  uint64_t v24 = v0;
  if (one-time initialization token for contactTypeNode != -1) {
    swift_once();
  }
  type metadata accessor for PhoneCallContactIntentNode(0);
  lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type PhoneCallContactIntentNode and conformance PhoneCallContactIntentNode, (void (*)(uint64_t))type metadata accessor for PhoneCallContactIntentNode);
  IntentNodeTraversable.intentNode<A>(forOntologyNode:)();
  outlined init with copy of PersonOntologyNode.PersonSelfReference?((uint64_t)v9, v2, &demangling cache variable for type metadata for TerminalIntentNode?);
  uint64_t v10 = type metadata accessor for TerminalIntentNode();
  uint64_t v11 = OUTLINED_FUNCTION_44_28();
  OUTLINED_FUNCTION_28_6(v11, v12, v10);
  if (v18)
  {
    char v13 = &demangling cache variable for type metadata for TerminalIntentNode?;
    uint64_t v14 = v2;
LABEL_9:
    outlined destroy of UUID?(v14, v13);
    outlined destroy of UUID?((uint64_t)v9, &demangling cache variable for type metadata for TerminalIntentNode?);
    return 0;
  }
  uint64_t v15 = TerminalIntentNode.elements.getter();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_11();
  v16();
  specialized BidirectionalCollection.last.getter(v15, v1);
  swift_bridgeObjectRelease();
  uint64_t v17 = type metadata accessor for TerminalElement();
  OUTLINED_FUNCTION_28_6(v1, 1, v17);
  if (v18)
  {
    char v13 = &demangling cache variable for type metadata for TerminalElement?;
    uint64_t v14 = v1;
    goto LABEL_9;
  }
  uint64_t v20 = (void *)TerminalElement.semanticTags.getter();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_11();
  v21();
  char v22 = specialized Sequence<>.contains(_:)(0x756F756769626D41, 0xEF656C646E614873, v20);
  outlined destroy of UUID?((uint64_t)v9, &demangling cache variable for type metadata for TerminalIntentNode?);
  swift_bridgeObjectRelease();
  return (v22 & 1) != 0;
}

uint64_t SemanticTag.value.getter()
{
  return OUTLINED_FUNCTION_26_41(0x6D41u);
}

Swift::Void (__swiftcall *PhoneCallContactIntentNode.isAmbiguousHandle.modify())(Swift::OpaquePointer newCallGroups)
{
  BOOL v0 = PhoneCallContactIntentNode.isAmbiguousHandle.getter();
  OUTLINED_FUNCTION_56_20(v0);
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t PhoneCallContactIntentNode.emergencyLocationType.getter()
{
  OUTLINED_FUNCTION_4_7();
  return *v0;
}

uint64_t PhoneCallContactIntentNode.emergencyLocationType.setter(char a1)
{
  uint64_t result = OUTLINED_FUNCTION_36_21();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*PhoneCallContactIntentNode.emergencyLocationType.modify())()
{
  return PhoneFlow.state.modify;
}

uint64_t *PhoneCallContactOntologyNode.phoneCallContactRole.unsafeMutableAddressor()
{
  if (one-time initialization token for phoneCallContactRole != -1) {
    swift_once();
  }
  return &static PhoneCallContactOntologyNode.phoneCallContactRole;
}

uint64_t key path setter for PhoneCallContactIntentNode.backingContact : PhoneCallContactIntentNode(uint64_t a1, uint64_t a2)
{
  outlined init with copy of PersonOntologyNode.PersonSelfReference?(a1, (uint64_t)v4, &demangling cache variable for type metadata for BackingContact?);
  return (*(uint64_t (**)(unsigned char *))(**(void **)a2 + 544))(v4);
}

uint64_t PhoneCallContactIntentNode.backingContact.getter@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 40) = 1;
  return swift_retain();
}

uint64_t PhoneCallContactIntentNode.backingContact.setter(uint64_t a1)
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.siriPhone);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "Cannot set a backing contact for an NLv3 intent!", v5, 2u);
    swift_slowDealloc();
  }

  return outlined destroy of UUID?(a1, &demangling cache variable for type metadata for BackingContact?);
}

void (*PhoneCallContactIntentNode.backingContact.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[12] = v1;
  *uint64_t v3 = v1;
  *((unsigned char *)v3 + 40) = 1;
  swift_retain();
  return PhoneCallContactIntentNode.backingContact.modify;
}

void PhoneCallContactIntentNode.backingContact.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = (void *)*a1;
  if (a2)
  {
    uint64_t v3 = OUTLINED_FUNCTION_7_0();
    outlined init with copy of PersonOntologyNode.PersonSelfReference?(v3, v4, &demangling cache variable for type metadata for BackingContact?);
    PhoneCallContactIntentNode.backingContact.setter((uint64_t)v2 + 48);
    outlined destroy of UUID?((uint64_t)v2, &demangling cache variable for type metadata for BackingContact?);
  }
  else
  {
    PhoneCallContactIntentNode.backingContact.setter(*a1);
  }

  free(v2);
}

uint64_t PhoneCallContactIntentNode.contactSource.getter()
{
  OUTLINED_FUNCTION_4_7();
  return *v0;
}

uint64_t PhoneCallContactIntentNode.contactSource.setter(char a1)
{
  uint64_t result = OUTLINED_FUNCTION_36_21();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*PhoneCallContactIntentNode.contactSource.modify())()
{
  return PhoneFlow.state.modify;
}

uint64_t protocol witness for SiriPhoneContact.isMe.setter in conformance PhoneCallContactIntentNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 288))();
}

uint64_t (*protocol witness for SiriPhoneContact.isMe.modify in conformance PhoneCallContactIntentNode(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 296))();
  return protocol witness for SiriPhoneContact.isMe.modify in conformance PhoneCallNLv4Contact;
}

uint64_t protocol witness for SiriPhoneContact.contactId.setter in conformance PhoneCallContactIntentNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 192))();
}

uint64_t (*protocol witness for SiriPhoneContact.contactId.modify in conformance PhoneCallContactIntentNode(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 200))();
  return protocol witness for SiriPhoneContact.isMe.modify in conformance PhoneCallNLv4Contact;
}

uint64_t protocol witness for SiriPhoneContact.contactName.setter in conformance PhoneCallContactIntentNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 264))();
}

uint64_t (*protocol witness for SiriPhoneContact.contactName.modify in conformance PhoneCallContactIntentNode(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 272))();
  return protocol witness for SiriPhoneContact.isMe.modify in conformance PhoneCallNLv4Contact;
}

uint64_t protocol witness for SiriPhoneContact.contactSource.getter in conformance PhoneCallContactIntentNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 560))();
}

uint64_t protocol witness for SiriPhoneContact.contactSource.setter in conformance PhoneCallContactIntentNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 568))();
}

uint64_t (*protocol witness for SiriPhoneContact.contactSource.modify in conformance PhoneCallContactIntentNode(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 576))();
  return protocol witness for SiriPhoneContact.isMe.modify in conformance PhoneCallNLv4Contact;
}

uint64_t protocol witness for SiriPhoneContact.personName.setter in conformance PhoneCallContactIntentNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 312))();
}

uint64_t (*protocol witness for SiriPhoneContact.personName.modify in conformance PhoneCallContactIntentNode(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 320))();
  return protocol witness for SiriPhoneContact.isMe.modify in conformance PhoneCallNLv4Contact;
}

uint64_t protocol witness for SiriPhoneContact.organizationName.setter in conformance PhoneCallContactIntentNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 336))();
}

uint64_t (*protocol witness for SiriPhoneContact.organizationName.modify in conformance PhoneCallContactIntentNode(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 344))();
  return protocol witness for SiriPhoneContact.isMe.modify in conformance PhoneCallNLv4Contact;
}

uint64_t protocol witness for SiriPhoneContact.telephoneNumber.setter in conformance PhoneCallContactIntentNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 360))();
}

uint64_t (*protocol witness for SiriPhoneContact.telephoneNumber.modify in conformance PhoneCallContactIntentNode(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 368))();
  return protocol witness for SiriPhoneContact.isMe.modify in conformance PhoneCallNLv4Contact;
}

uint64_t protocol witness for SiriPhoneContact.emailAddress.setter in conformance PhoneCallContactIntentNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 240))();
}

uint64_t (*protocol witness for SiriPhoneContact.emailAddress.modify in conformance PhoneCallContactIntentNode(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 248))();
  return protocol witness for SiriPhoneContact.isMe.modify in conformance PhoneCallNLv4Contact;
}

uint64_t protocol witness for SiriPhoneContact.relationship.setter in conformance PhoneCallContactIntentNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 384))();
}

uint64_t (*protocol witness for SiriPhoneContact.relationship.modify in conformance PhoneCallContactIntentNode(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 392))();
  return protocol witness for SiriPhoneContact.isMe.modify in conformance PhoneCallNLv4Contact;
}

uint64_t protocol witness for SiriPhoneContact.handleType.setter in conformance PhoneCallContactIntentNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 408))();
}

uint64_t (*protocol witness for SiriPhoneContact.handleType.modify in conformance PhoneCallContactIntentNode(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 416))();
  return protocol witness for SiriPhoneContact.isMe.modify in conformance PhoneCallNLv4Contact;
}

uint64_t protocol witness for SiriPhoneContact.handleLabel.setter in conformance PhoneCallContactIntentNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 432))();
}

uint64_t (*protocol witness for SiriPhoneContact.handleLabel.modify in conformance PhoneCallContactIntentNode(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 440))();
  return protocol witness for SiriPhoneContact.isMe.modify in conformance PhoneCallNLv4Contact;
}

uint64_t protocol witness for SiriPhoneContact.emergencyType.setter in conformance PhoneCallContactIntentNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 456))();
}

uint64_t (*protocol witness for SiriPhoneContact.emergencyType.modify in conformance PhoneCallContactIntentNode(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 464))();
  return protocol witness for SiriPhoneContact.isMe.modify in conformance PhoneCallNLv4Contact;
}

uint64_t protocol witness for SiriPhoneContact.emergencyLocationType.getter in conformance PhoneCallContactIntentNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 496))();
}

uint64_t protocol witness for SiriPhoneContact.emergencyLocationType.setter in conformance PhoneCallContactIntentNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 504))();
}

uint64_t (*protocol witness for SiriPhoneContact.emergencyLocationType.modify in conformance PhoneCallContactIntentNode(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 512))();
  return protocol witness for SiriPhoneContact.isMe.modify in conformance PhoneCallNLv4Contact;
}

uint64_t protocol witness for SiriPhoneContact.contactReference.setter in conformance PhoneCallContactIntentNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 216))();
}

uint64_t (*protocol witness for SiriPhoneContact.contactReference.modify in conformance PhoneCallContactIntentNode(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 224))();
  return protocol witness for SiriPhoneContact.isMe.modify in conformance PhoneCallNLv4Contact;
}

uint64_t protocol witness for SiriPhoneContact.isAmbiguousHandle.getter in conformance PhoneCallContactIntentNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 472))() & 1;
}

uint64_t protocol witness for SiriPhoneContact.isAmbiguousHandle.setter in conformance PhoneCallContactIntentNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 480))();
}

uint64_t (*protocol witness for SiriPhoneContact.isAmbiguousHandle.modify in conformance PhoneCallContactIntentNode(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 488))();
  return protocol witness for SiriPhoneContact.isMe.modify in conformance PhoneCallNLv4Contact;
}

uint64_t protocol witness for SiriPhoneContact.backingContact.getter in conformance PhoneCallContactIntentNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 536))();
}

uint64_t protocol witness for SiriPhoneContact.backingContact.setter in conformance PhoneCallContactIntentNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 544))();
}

uint64_t (*protocol witness for SiriPhoneContact.backingContact.modify in conformance PhoneCallContactIntentNode(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 552))();
  return protocol witness for SiriPhoneContact.isMe.modify in conformance PhoneCallNLv4Contact;
}

uint64_t protocol witness for static NonTerminalIntentNodeWrapper.from(intentNode:ontologyNode:) in conformance PhoneCallContactIntentNode@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static PhoneCallContactIntentNode.from(intentNode:ontologyNode:)();
  *a1 = result;
  return result;
}

uint64_t one-time initialization function for personNode()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OntologyNode>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_467710;
  uint64_t v1 = type metadata accessor for PersonOntologyNode();
  swift_allocObject();
  uint64_t v2 = PersonOntologyNode.init(name:multicardinal:)();
  *(void *)(v0 + 56) = v1;
  *(void *)(v0 + 64) = &protocol witness table for NonTerminalOntologyNode;
  *(void *)(v0 + 32) = v2;
  type metadata accessor for NonTerminalOntologyNode();
  swift_allocObject();
  uint64_t result = NonTerminalOntologyNode.init(name:multicardinal:childNodes:)();
  static PhoneCallContactOntologyNode.personNode = result;
  return result;
}

uint64_t static PhoneCallContactOntologyNode.personNode.getter()
{
  return static PhoneCallNLv3Intent.appName.getter();
}

uint64_t one-time initialization function for phoneCallContactNameNode(uint64_t a1)
{
  return one-time initialization function for appName(a1, &demangling cache variable for type metadata for TerminalOntologyNode<String>, 0xD000000000000014, 0x800000000048D250, &static PhoneCallContactOntologyNode.phoneCallContactNameNode);
}

uint64_t static PhoneCallContactOntologyNode.phoneCallContactNameNode.getter()
{
  return static PhoneCallNLv3Intent.appName.getter();
}

uint64_t one-time initialization function for phoneCallContactIdNode(uint64_t a1)
{
  return one-time initialization function for appName(a1, &demangling cache variable for type metadata for TerminalOntologyNode<String>, 0xD000000000000012, 0x800000000048D210, &static PhoneCallContactOntologyNode.phoneCallContactIdNode);
}

uint64_t static PhoneCallContactOntologyNode.phoneCallContactIdNode.getter()
{
  return static PhoneCallNLv3Intent.appName.getter();
}

uint64_t one-time initialization function for phoneCallContactReferenceNode(uint64_t a1)
{
  return one-time initialization function for appName(a1, &demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallContactReference>, 0xD000000000000019, 0x800000000048D270, &static PhoneCallContactOntologyNode.phoneCallContactReferenceNode);
}

uint64_t static PhoneCallContactOntologyNode.phoneCallContactReferenceNode.getter()
{
  return static PhoneCallNLv3Intent.appName.getter();
}

uint64_t one-time initialization function for phoneNumberNode(uint64_t a1)
{
  return one-time initialization function for appName(a1, &demangling cache variable for type metadata for TerminalOntologyNode<String>, 0x6D754E656E6F6870, 0xEB00000000726562, &static PhoneCallContactOntologyNode.phoneNumberNode);
}

uint64_t static PhoneCallContactOntologyNode.phoneNumberNode.getter()
{
  return static PhoneCallNLv3Intent.appName.getter();
}

uint64_t one-time initialization function for emailAddressNode(uint64_t a1)
{
  return one-time initialization function for appName(a1, &demangling cache variable for type metadata for TerminalOntologyNode<String>, 0x6464416C69616D65, 0xEC00000073736572, &static PhoneCallContactOntologyNode.emailAddressNode);
}

uint64_t static PhoneCallContactOntologyNode.emailAddressNode.getter()
{
  return static PhoneCallNLv3Intent.appName.getter();
}

uint64_t one-time initialization function for contactTypeNode(uint64_t a1)
{
  return one-time initialization function for appName(a1, &demangling cache variable for type metadata for TerminalOntologyNode<String>, 0x54746361746E6F63, 0xEB00000000657079, &static PhoneCallContactOntologyNode.contactTypeNode);
}

uint64_t static PhoneCallContactOntologyNode.contactTypeNode.getter()
{
  return static PhoneCallNLv3Intent.appName.getter();
}

uint64_t one-time initialization function for phoneCallContactRole(uint64_t a1)
{
  return one-time initialization function for appName(a1, &demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallContactRole.NLv3>, 0xD000000000000014, 0x800000000049D630, &static PhoneCallContactOntologyNode.phoneCallContactRole);
}

uint64_t static PhoneCallContactOntologyNode.phoneCallContactRole.getter()
{
  return static PhoneCallNLv3Intent.appName.getter();
}

void PhoneCallContactOntologyNode.init(name:multicardinal:childNodes:)()
{
}

uint64_t SmsGroupIntentNode.intentNode.getter()
{
  return PhoneCallNLv3Intent.intent.getter();
}

uint64_t SmsGroupIntentNode.ontologyNode.getter()
{
  return PhoneCallNLv3Intent.appNode.getter((void (*)(void))type metadata accessor for SmsGroupIntentNode);
}

uint64_t PhoneCallNLv3Intent.appNode.getter(void (*a1)(void))
{
  a1(0);

  return swift_retain();
}

uint64_t static SmsGroupIntentNode.from(intentNode:ontologyNode:)()
{
  return static SmsGroupIntentNode.from(intentNode:ontologyNode:)();
}

{
  uint64_t (*v0)(void);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  OUTLINED_FUNCTION_43_31();
  OUTLINED_FUNCTION_15();
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v3, v2);
  *(void *)(v3 + *(int *)(v0(0) + 20)) = v1;

  return swift_retain();
}

uint64_t SmsGroupIntentNode.smsGroupName.getter()
{
  return SmsGroupIntentNode.smsGroupName.getter();
}

{
  char v0;
  uint64_t v2;

  OUTLINED_FUNCTION_31_39();
  if (!v0) {
    swift_once();
  }
  type metadata accessor for SmsGroupIntentNode(0);
  lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type SmsGroupIntentNode and conformance SmsGroupIntentNode, (void (*)(uint64_t))type metadata accessor for SmsGroupIntentNode);
  OUTLINED_FUNCTION_46_27();
  return v2;
}

uint64_t *SmsGroupOntologyNode.smsGroupName.unsafeMutableAddressor()
{
  if (one-time initialization token for smsGroupName != -1) {
    swift_once();
  }
  return &static SmsGroupOntologyNode.smsGroupName;
}

uint64_t SmsGroupIntentNode.smsGroupNameId.getter()
{
  return SmsGroupIntentNode.smsGroupName.getter();
}

uint64_t *SmsGroupOntologyNode.smsGroupNameId.unsafeMutableAddressor()
{
  if (one-time initialization token for smsGroupNameId != -1) {
    swift_once();
  }
  return &static SmsGroupOntologyNode.smsGroupNameId;
}

uint64_t protocol witness for NonTerminalIntentNodeWrapper.intentNode.getter in conformance SmsGroupIntentNode()
{
  return protocol witness for NLIntentWrapper.intent.getter in conformance PhoneCallNLv3Intent();
}

uint64_t protocol witness for IntentNodeTraversable.traversableIntentNode.getter in conformance SmsGroupIntentNode(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type SmsGroupIntentNode and conformance SmsGroupIntentNode, (void (*)(uint64_t))type metadata accessor for SmsGroupIntentNode);

  return NonTerminalIntentNodeWrapper.traversableIntentNode.getter(a1, v2);
}

uint64_t protocol witness for IntentNodeTraversable.traversableOntologyNode.getter in conformance SmsGroupIntentNode(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type SmsGroupIntentNode and conformance SmsGroupIntentNode, (void (*)(uint64_t))type metadata accessor for SmsGroupIntentNode);

  return NonTerminalIntentNodeWrapper.traversableOntologyNode.getter(a1, v2);
}

uint64_t one-time initialization function for smsGroupName(uint64_t a1)
{
  return one-time initialization function for appName(a1, &demangling cache variable for type metadata for TerminalOntologyNode<String>, 0x70756F7247736D73, 0xEC000000656D614ELL, &static SmsGroupOntologyNode.smsGroupName);
}

uint64_t static SmsGroupOntologyNode.smsGroupName.getter()
{
  return static PhoneCallNLv3Intent.appName.getter();
}

uint64_t one-time initialization function for smsGroupNameId(uint64_t a1)
{
  return one-time initialization function for appName(a1, &demangling cache variable for type metadata for TerminalOntologyNode<String>, 0x70756F7247736D73, 0xEE006449656D614ELL, &static SmsGroupOntologyNode.smsGroupNameId);
}

uint64_t one-time initialization function for appName(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_54_23();
  uint64_t result = TerminalOntologyNode.init(name:multicardinal:)();
  *a5 = result;
  return result;
}

uint64_t static SmsGroupOntologyNode.smsGroupNameId.getter()
{
  return static PhoneCallNLv3Intent.appName.getter();
}

uint64_t partial apply for closure #1 in PhoneCallNLv3Intent.app.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in PhoneCallNLv3Intent.app.getter(a1, *(void *)(v2 + 16), a2);
}

uint64_t type metadata accessor for AppIntentNode(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for AppIntentNode);
}

void SmsGroupOntologyNode.init(name:multicardinal:childNodes:)()
{
}

void PhoneCallContactOntologyNode.__allocating_init(name:multicardinal:childNodes:)()
{
}

uint64_t AppIntentNode.ontologyNode.getter()
{
  return PhoneCallNLv3Intent.appNode.getter((void (*)(void))type metadata accessor for AppIntentNode);
}

uint64_t static AppIntentNode.from(intentNode:ontologyNode:)()
{
  return static SmsGroupIntentNode.from(intentNode:ontologyNode:)();
}

void AppIntentNode.applicationId.getter()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.Origin?);
  uint64_t v3 = OUTLINED_FUNCTION_11_0(v2);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_3_1();
  uint64_t v79 = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.OriginDetail?);
  uint64_t v6 = OUTLINED_FUNCTION_11_0(v5);
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_3_1();
  uint64_t v78 = v7;
  v76[1] = type metadata accessor for TerminalElement.MatchingSpan();
  OUTLINED_FUNCTION_1();
  uint64_t v77 = v8;
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_3_1();
  v76[2] = v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.Value?);
  uint64_t v12 = OUTLINED_FUNCTION_11_0(v11);
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_3_1();
  uint64_t v80 = v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalIntentNode?);
  uint64_t v15 = OUTLINED_FUNCTION_11_0(v14);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement?);
  uint64_t v19 = OUTLINED_FUNCTION_11_0(v18);
  __chkstk_darwin(v19);
  OUTLINED_FUNCTION_8_7();
  uint64_t v20 = type metadata accessor for TerminalElement();
  OUTLINED_FUNCTION_1();
  uint64_t v81 = v21;
  __chkstk_darwin(v22);
  OUTLINED_FUNCTION_12_0();
  type metadata accessor for AppOntologyNode();
  static AppOntologyNode.applicationIdNode.getter();
  type metadata accessor for AppIntentNode(0);
  lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type AppIntentNode and conformance AppIntentNode, (void (*)(uint64_t))type metadata accessor for AppIntentNode);
  IntentNodeTraversable.value<A>(forNode:)();
  swift_release();
  if (v82) {
    goto LABEL_9;
  }
  v76[0] = v0;
  static AppOntologyNode.appNameNode.getter();
  IntentNodeTraversable.intentNode<A>(forOntologyNode:)();
  swift_release();
  uint64_t v23 = type metadata accessor for TerminalIntentNode();
  OUTLINED_FUNCTION_28_6((uint64_t)v17, 1, v23);
  if (v30)
  {
    outlined destroy of UUID?((uint64_t)v17, &demangling cache variable for type metadata for TerminalIntentNode?);
    uint64_t v24 = OUTLINED_FUNCTION_44_28();
    __swift_storeEnumTagSinglePayload(v24, v25, 1, v20);
LABEL_7:
    char v31 = &demangling cache variable for type metadata for TerminalElement?;
    uint64_t v32 = v1;
LABEL_8:
    outlined destroy of UUID?(v32, v31);
    goto LABEL_9;
  }
  uint64_t v26 = TerminalIntentNode.elements.getter();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_11();
  v27();
  specialized BidirectionalCollection.last.getter(v26, v1);
  swift_bridgeObjectRelease();
  uint64_t v28 = OUTLINED_FUNCTION_44_28();
  OUTLINED_FUNCTION_28_6(v28, v29, v20);
  if (v30) {
    goto LABEL_7;
  }
  uint64_t v33 = OUTLINED_FUNCTION_40_31();
  v34(v33);
  uint64_t v35 = v80;
  TerminalElement.value.getter();
  uint64_t v36 = type metadata accessor for TerminalElement.Value();
  OUTLINED_FUNCTION_28_6(v35, 1, v36);
  if (v37)
  {
    uint64_t v38 = OUTLINED_FUNCTION_17_45();
    v39(v38);
    char v31 = &demangling cache variable for type metadata for TerminalElement.Value?;
    uint64_t v32 = v35;
    goto LABEL_8;
  }
  OUTLINED_FUNCTION_1();
  uint64_t v41 = v40;
  uint64_t v42 = OUTLINED_FUNCTION_23_49();
  int v44 = v43(v42);
  if (v44 != enum case for TerminalElement.Value.string(_:))
  {
    uint64_t v50 = OUTLINED_FUNCTION_17_45();
    v51(v50);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v35, v36);
    goto LABEL_9;
  }
  uint64_t v45 = OUTLINED_FUNCTION_54_23();
  v46(v45);
  uint64_t v47 = v79;
  TerminalElement.origin.getter();
  uint64_t v48 = type metadata accessor for TerminalElement.Origin();
  OUTLINED_FUNCTION_28_6(v47, 1, v48);
  if (v30)
  {
    outlined destroy of UUID?(v47, &demangling cache variable for type metadata for TerminalElement.Origin?);
    uint64_t v49 = type metadata accessor for TerminalElement.OriginDetail();
    uint64_t v52 = v78;
    __swift_storeEnumTagSinglePayload(v78, 1, 1, v49);
LABEL_20:
    swift_bridgeObjectRelease();
    uint64_t v56 = OUTLINED_FUNCTION_17_45();
    v57(v56);
    char v31 = &demangling cache variable for type metadata for TerminalElement.OriginDetail?;
    uint64_t v32 = v52;
    goto LABEL_8;
  }
  uint64_t v52 = v78;
  TerminalElement.Origin.originDetail.getter();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_11();
  v53();
  uint64_t v54 = type metadata accessor for TerminalElement.OriginDetail();
  OUTLINED_FUNCTION_28_6(v52, 1, v54);
  if (v55) {
    goto LABEL_20;
  }
  OUTLINED_FUNCTION_1();
  uint64_t v59 = v58;
  int v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v60 + 88))(v52, v54);
  if (v61 == enum case for TerminalElement.OriginDetail.matchingSpan(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v59 + 96))(v52, v54);
    (*(void (**)(void))(v77 + 32))();
    v62 = (void *)TerminalElement.MatchingSpan.matcherNames.getter();
    char v63 = specialized Sequence<>.contains(_:)(0xD000000000000010, 0x800000000049D510, v62);
    swift_bridgeObjectRelease();
    if (v63)
    {
      v64._countAndFlagsBits = 0xD000000000000017;
      v64._object = (void *)0x800000000049A2A0;
      if (String.hasSuffix(_:)(v64))
      {
        uint64_t v65 = String.count.getter();
        specialized BidirectionalCollection.dropLast(_:)(v65);
        static String._fromSubstring(_:)();
        swift_bridgeObjectRelease();
      }
      uint64_t v66 = OUTLINED_FUNCTION_42_33();
      v67(v66);
      uint64_t v68 = OUTLINED_FUNCTION_41_31();
      v69(v68);
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v72 = OUTLINED_FUNCTION_42_33();
      v73(v72);
      uint64_t v74 = OUTLINED_FUNCTION_41_31();
      v75(v74);
    }
  }
  else
  {
    uint64_t v70 = OUTLINED_FUNCTION_17_45();
    v71(v70);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v52, v54);
  }
LABEL_9:
  OUTLINED_FUNCTION_26_1();
}

uint64_t specialized BidirectionalCollection.dropLast(_:)(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    String.index(_:offsetBy:limitedBy:)();
    uint64_t v1 = String.subscript.getter();
    swift_bridgeObjectRelease();
    return v1;
  }
  return result;
}

uint64_t AppIntentNode.appName.getter()
{
  type metadata accessor for AppOntologyNode();
  static AppOntologyNode.appNameNode.getter();
  type metadata accessor for AppIntentNode(0);
  lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type AppIntentNode and conformance AppIntentNode, (void (*)(uint64_t))type metadata accessor for AppIntentNode);
  OUTLINED_FUNCTION_54_23();
  IntentNodeTraversable.value<A>(forNode:)();
  swift_release();
  return v1;
}

uint64_t protocol witness for IntentNodeTraversable.traversableIntentNode.getter in conformance AppIntentNode(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type AppIntentNode and conformance AppIntentNode, (void (*)(uint64_t))type metadata accessor for AppIntentNode);

  return NonTerminalIntentNodeWrapper.traversableIntentNode.getter(a1, v2);
}

uint64_t protocol witness for IntentNodeTraversable.traversableOntologyNode.getter in conformance AppIntentNode(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type AppIntentNode and conformance AppIntentNode, (void (*)(uint64_t))type metadata accessor for AppIntentNode);

  return NonTerminalIntentNodeWrapper.traversableOntologyNode.getter(a1, v2);
}

PhoneCallFlowDelegatePlugin::PhonePreferredCallProvider_optional __swiftcall PhonePreferredCallProvider.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v3._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PhonePreferredCallProvider.init(rawValue:), v3);
  OUTLINED_FUNCTION_15_0();
  if (v1 >= 3) {
    return (PhoneCallFlowDelegatePlugin::PhonePreferredCallProvider_optional)3;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::PhonePreferredCallProvider_optional)v1;
  }
}

_UNKNOWN **static PhonePreferredCallProvider.allCases.getter()
{
  return &outlined read-only object #0 of static PhonePreferredCallProvider.allCases.getter;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhonePreferredCallProvider(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PhonePreferredCallProvider()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

PhoneCallFlowDelegatePlugin::PhonePreferredCallProvider_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhonePreferredCallProvider@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhonePreferredCallProvider_optional *a2@<X8>)
{
  result.value = PhonePreferredCallProvider.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PhonePreferredCallProvider@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = PhoneCallPreferredProvider.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance PhonePreferredCallProvider(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static PhonePreferredCallProvider.allCases.getter;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance PhonePreferredCallProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v12 = lazy protocol witness table accessor for type PhonePreferredCallProvider and conformance PhonePreferredCallProvider();
  unint64_t v13 = lazy protocol witness table accessor for type PhonePreferredCallProvider and conformance PhonePreferredCallProvider();
  unint64_t v14 = lazy protocol witness table accessor for type PhonePreferredCallProvider and conformance PhonePreferredCallProvider();

  return static TerminalNodeBoundedSemanticValue<>.fromIntentNodeValue(_:)(a1, a2, v12, v13, v14, v15, v16, v17, a9, a10);
}

BOOL SemanticTag.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SemanticTag.init(rawValue:), v3);
  OUTLINED_FUNCTION_15_0();
  return v1 != 0;
}

uint64_t SemanticTag.rawValue.getter()
{
  return OUTLINED_FUNCTION_26_41(0x6D61u);
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance SemanticTag@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = SemanticTag.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SemanticTag(void *a1@<X8>)
{
  *a1 = 0x756F756769626D61;
  a1[1] = 0xEF656C646E614873;
}

uint64_t partial apply for closure #1 in PhoneCallNLv3Intent.smsGroups.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in PhoneCallNLv3Intent.smsGroups.getter(a1, *(void *)(v2 + 16), a2);
}

uint64_t type metadata accessor for SmsGroupIntentNode(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for SmsGroupIntentNode);
}

uint64_t base witness table accessor for IntentNodeTraversable in PhoneCallNLv3Intent()
{
  return lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent, (void (*)(uint64_t))type metadata accessor for PhoneCallNLv3Intent);
}

uint64_t base witness table accessor for CustomStringConvertible in PhoneCallNLv3Intent()
{
  return lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent((unint64_t *)&lazy protocol witness table cache variable for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent, (void (*)(uint64_t))type metadata accessor for PhoneCallNLv3Intent);
}

uint64_t base witness table accessor for Equatable in PhoneCallNLv3Intent()
{
  return lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent, (void (*)(uint64_t))type metadata accessor for PhoneCallNLv3Intent);
}

uint64_t base witness table accessor for IntentNodeTraversable in PhoneCallContactIntentNode()
{
  return lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type PhoneCallContactIntentNode and conformance PhoneCallContactIntentNode, (void (*)(uint64_t))type metadata accessor for PhoneCallContactIntentNode);
}

uint64_t base witness table accessor for IntentNodeTraversable in SmsGroupIntentNode()
{
  return lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type SmsGroupIntentNode and conformance SmsGroupIntentNode, (void (*)(uint64_t))type metadata accessor for SmsGroupIntentNode);
}

uint64_t base witness table accessor for IntentNodeTraversable in AppIntentNode()
{
  return lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type AppIntentNode and conformance AppIntentNode, (void (*)(uint64_t))type metadata accessor for AppIntentNode);
}

unint64_t lazy protocol witness table accessor for type PhonePreferredCallProvider and conformance PhonePreferredCallProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type PhonePreferredCallProvider and conformance PhonePreferredCallProvider;
  if (!lazy protocol witness table cache variable for type PhonePreferredCallProvider and conformance PhonePreferredCallProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhonePreferredCallProvider and conformance PhonePreferredCallProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhonePreferredCallProvider and conformance PhonePreferredCallProvider;
  if (!lazy protocol witness table cache variable for type PhonePreferredCallProvider and conformance PhonePreferredCallProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhonePreferredCallProvider and conformance PhonePreferredCallProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhonePreferredCallProvider and conformance PhonePreferredCallProvider;
  if (!lazy protocol witness table cache variable for type PhonePreferredCallProvider and conformance PhonePreferredCallProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhonePreferredCallProvider and conformance PhonePreferredCallProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhonePreferredCallProvider and conformance PhonePreferredCallProvider;
  if (!lazy protocol witness table cache variable for type PhonePreferredCallProvider and conformance PhonePreferredCallProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhonePreferredCallProvider and conformance PhonePreferredCallProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhonePreferredCallProvider and conformance PhonePreferredCallProvider;
  if (!lazy protocol witness table cache variable for type PhonePreferredCallProvider and conformance PhonePreferredCallProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhonePreferredCallProvider and conformance PhonePreferredCallProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhonePreferredCallProvider and conformance PhonePreferredCallProvider;
  if (!lazy protocol witness table cache variable for type PhonePreferredCallProvider and conformance PhonePreferredCallProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhonePreferredCallProvider and conformance PhonePreferredCallProvider);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PhonePreferredCallProvider()
{
  return lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type [PhonePreferredCallProvider] and conformance [A], &demangling cache variable for type metadata for [PhonePreferredCallProvider]);
}

unint64_t lazy protocol witness table accessor for type SemanticTag and conformance SemanticTag()
{
  unint64_t result = lazy protocol witness table cache variable for type SemanticTag and conformance SemanticTag;
  if (!lazy protocol witness table cache variable for type SemanticTag and conformance SemanticTag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SemanticTag and conformance SemanticTag);
  }
  return result;
}

uint64_t sub_429358()
{
  OUTLINED_FUNCTION_22();
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t sub_42939C()
{
  OUTLINED_FUNCTION_2_27();
  uint64_t result = (*(uint64_t (**)(void))(v1 + 144))();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_4293E0()
{
  OUTLINED_FUNCTION_2_27();
  uint64_t result = (*(uint64_t (**)(void))(v1 + 184))();
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t sub_429424()
{
  OUTLINED_FUNCTION_2_27();
  uint64_t result = (*(uint64_t (**)(void))(v1 + 208))();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_429464()
{
  OUTLINED_FUNCTION_22();
  return (*(uint64_t (**)(void))(v0 + 216))(*v1);
}

uint64_t sub_4294A8()
{
  OUTLINED_FUNCTION_2_27();
  uint64_t result = (*(uint64_t (**)(void))(v1 + 232))();
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t sub_4294EC()
{
  OUTLINED_FUNCTION_2_27();
  uint64_t result = (*(uint64_t (**)(void))(v1 + 256))();
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t sub_429538()
{
  OUTLINED_FUNCTION_2_27();
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 280))();
  return OUTLINED_FUNCTION_56_20(v1);
}

uint64_t sub_429580()
{
  OUTLINED_FUNCTION_22();
  return (*(uint64_t (**)(void))(v0 + 288))();
}

uint64_t sub_4295D4()
{
  OUTLINED_FUNCTION_2_27();
  uint64_t result = (*(uint64_t (**)(void))(v1 + 328))();
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t sub_429620()
{
  OUTLINED_FUNCTION_2_27();
  uint64_t result = (*(uint64_t (**)(void))(v1 + 352))();
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t sub_42966C()
{
  OUTLINED_FUNCTION_2_27();
  uint64_t result = (*(uint64_t (**)(void))(v1 + 376))();
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t sub_4296B8()
{
  OUTLINED_FUNCTION_2_27();
  uint64_t result = (*(uint64_t (**)(void))(v1 + 400))();
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t sub_429704()
{
  OUTLINED_FUNCTION_2_27();
  uint64_t result = (*(uint64_t (**)(void))(v1 + 424))();
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t sub_429750()
{
  OUTLINED_FUNCTION_2_27();
  uint64_t result = (*(uint64_t (**)(void))(v1 + 448))();
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t sub_42979C()
{
  OUTLINED_FUNCTION_2_27();
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 472))();
  return OUTLINED_FUNCTION_56_20(v1);
}

uint64_t sub_4297E4()
{
  OUTLINED_FUNCTION_22();
  return (*(uint64_t (**)(void))(v0 + 480))();
}

uint64_t sub_429830()
{
  OUTLINED_FUNCTION_2_27();
  uint64_t result = (*(uint64_t (**)(void))(v1 + 496))();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_429878()
{
  OUTLINED_FUNCTION_22();
  return (*(uint64_t (**)(void))(v0 + 504))(*v1);
}

uint64_t sub_4298C4()
{
  OUTLINED_FUNCTION_22();
  return (*(uint64_t (**)(void))(v0 + 536))();
}

uint64_t sub_429910()
{
  OUTLINED_FUNCTION_2_27();
  uint64_t result = (*(uint64_t (**)(void))(v1 + 560))();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_429958()
{
  OUTLINED_FUNCTION_22();
  return (*(uint64_t (**)(void))(v0 + 568))(*v1);
}

uint64_t assignWithCopy for PhoneCallNLv3Intent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for NLIntent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[15]) = *(void *)(a2 + a3[15]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[16]) = *(void *)(a2 + a3[16]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[17]) = *(void *)(a2 + a3[17]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for PhoneCallNLv3Intent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for NLIntent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  uint64_t v10 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  *(void *)(a1 + v10) = *(void *)(a2 + v10);
  uint64_t v11 = a3[14];
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  uint64_t v12 = a3[16];
  *(void *)(a1 + a3[15]) = *(void *)(a2 + a3[15]);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  *(void *)(a1 + a3[17]) = *(void *)(a2 + a3[17]);
  return a1;
}

uint64_t assignWithTake for PhoneCallNLv3Intent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for NLIntent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_release();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_release();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_release();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_release();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_release();
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_release();
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  swift_release();
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_release();
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  swift_release();
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  swift_release();
  *(void *)(a1 + a3[15]) = *(void *)(a2 + a3[15]);
  swift_release();
  *(void *)(a1 + a3[16]) = *(void *)(a2 + a3[16]);
  swift_release();
  *(void *)(a1 + a3[17]) = *(void *)(a2 + a3[17]);
  swift_release();
  return a1;
}

uint64_t sub_429DE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_0(a1, a2, a3);
}

void sub_429E00(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
}

uint64_t type metadata completion function for PhoneCallNLv3Intent()
{
  uint64_t result = type metadata accessor for NLIntent();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t ObjC metadata update function for PhoneCallContactIntentNode()
{
  return type metadata accessor for PhoneCallContactIntentNode(0);
}

uint64_t type metadata completion function for PhoneCallContactIntentNode()
{
  uint64_t result = type metadata accessor for NonTerminalIntentNode();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata completion function for PhoneCallContactOntologyNode()
{
  return type metadata completion function for PhonePerson();
}

uint64_t ObjC metadata update function for PhoneCallContactOntologyNode()
{
  return type metadata accessor for PhoneCallContactOntologyNode(0);
}

uint64_t getEnumTagSinglePayload for SmsGroupIntentNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_429FC4);
}

uint64_t sub_429FC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_0(a1, a2, a3);
}

uint64_t storeEnumTagSinglePayload for SmsGroupIntentNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_429FF0);
}

void sub_429FF0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
}

uint64_t type metadata completion function for SmsGroupOntologyNode()
{
  return type metadata completion function for PhonePerson();
}

uint64_t ObjC metadata update function for SmsGroupOntologyNode()
{
  return type metadata accessor for SmsGroupOntologyNode(0);
}

uint64_t *initializeBufferWithCopyOfBuffer for SmsGroupIntentNode(uint64_t *a1, uint64_t *a2)
{
  OUTLINED_FUNCTION_1_44();
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
  }
  else
  {
    uint64_t v7 = v4;
    type metadata accessor for NonTerminalIntentNode();
    OUTLINED_FUNCTION_15();
    OUTLINED_FUNCTION_33_31();
    v8();
    *(uint64_t *)((char *)a1 + *(int *)(v7 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v7 + 20));
  }
  swift_retain();
  return a1;
}

uint64_t destroy for SmsGroupIntentNode()
{
  type metadata accessor for NonTerminalIntentNode();
  OUTLINED_FUNCTION_15();
  OUTLINED_FUNCTION_11();
  v0();

  return swift_release();
}

uint64_t initializeWithCopy for SmsGroupIntentNode()
{
  OUTLINED_FUNCTION_22_57();
  OUTLINED_FUNCTION_15();
  uint64_t v3 = OUTLINED_FUNCTION_23_49();
  v4(v3);
  *(void *)(v2 + *(int *)(v0 + 20)) = *(void *)(v1 + *(int *)(v0 + 20));
  swift_retain();
  return v2;
}

uint64_t assignWithCopy for SmsGroupIntentNode()
{
  OUTLINED_FUNCTION_22_57();
  OUTLINED_FUNCTION_15();
  uint64_t v3 = OUTLINED_FUNCTION_23_49();
  v4(v3);
  *(void *)(v2 + *(int *)(v0 + 20)) = *(void *)(v1 + *(int *)(v0 + 20));
  swift_retain();
  swift_release();
  return v2;
}

uint64_t initializeWithTake for SmsGroupIntentNode()
{
  OUTLINED_FUNCTION_22_57();
  OUTLINED_FUNCTION_15();
  uint64_t v3 = OUTLINED_FUNCTION_23_49();
  v4(v3);
  *(void *)(v2 + *(int *)(v0 + 20)) = *(void *)(v1 + *(int *)(v0 + 20));
  return v2;
}

uint64_t assignWithTake for SmsGroupIntentNode()
{
  OUTLINED_FUNCTION_22_57();
  OUTLINED_FUNCTION_15();
  uint64_t v3 = OUTLINED_FUNCTION_23_49();
  v4(v3);
  *(void *)(v2 + *(int *)(v0 + 20)) = *(void *)(v1 + *(int *)(v0 + 20));
  swift_release();
  return v2;
}

uint64_t getEnumTagSinglePayload for AppIntentNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_42A2D4);
}

uint64_t sub_42A2D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_0(a1, a2, a3);
}

uint64_t __swift_get_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = OUTLINED_FUNCTION_60_19();
  v7(v6);
  OUTLINED_FUNCTION_1_44();
  if (*(_DWORD *)(v9 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(a1, a2, v8);
  }
  else
  {
    unint64_t v11 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for AppIntentNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_42A390);
}

void sub_42A390(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
}

void __swift_store_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = OUTLINED_FUNCTION_60_19();
  v9(v8);
  OUTLINED_FUNCTION_1_44();
  if (*(_DWORD *)(v11 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
}

uint64_t type metadata completion function for SmsGroupIntentNode()
{
  uint64_t result = type metadata accessor for NonTerminalIntentNode();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PhonePreferredCallProvider(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x42A598);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PhonePreferredCallProvider()
{
  return &type metadata for PhonePreferredCallProvider;
}

unsigned char *storeEnumTagSinglePayload for SemanticTag(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x42A66CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SemanticTag()
{
  return &type metadata for SemanticTag;
}

uint64_t OUTLINED_FUNCTION_10_73()
{
  return IntentNodeTraversable.value<A>(forNode:)();
}

uint64_t OUTLINED_FUNCTION_12_63()
{
  return type metadata accessor for PhoneCallNLv3Intent(0);
}

uint64_t OUTLINED_FUNCTION_17_45()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_22_57()
{
  return type metadata accessor for NonTerminalIntentNode();
}

uint64_t OUTLINED_FUNCTION_23_49()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_24_42@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *(void *)(v2 + a1);
  uint64_t v5 = *(void *)(v1 + a1);
  return static NonTerminalOntologyNode.== infix(_:_:)(v4, v5);
}

uint64_t OUTLINED_FUNCTION_26_41(unsigned __int16 a1)
{
  return a1 | 0x756F756769620000;
}

uint64_t OUTLINED_FUNCTION_28_43@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *(void *)(v2 + a1);
  uint64_t v5 = *(void *)(v1 + a1);
  return static TerminalOntologyNode.== infix(_:_:)(v4, v5);
}

uint64_t OUTLINED_FUNCTION_30_35(uint64_t result)
{
  *(void *)(v1 + v2) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_32_31(unint64_t *a1)
{
  return lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](a1, v1);
}

uint64_t OUTLINED_FUNCTION_34_33()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_35_37()
{
  return static PersonIntentNode.getProcessedNameField(person:terminalNode:)();
}

uint64_t OUTLINED_FUNCTION_36_34()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_37_32(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return one-time initialization function for appName(a1, a2, a3 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a4, a5);
}

uint64_t OUTLINED_FUNCTION_38_32()
{
  return type metadata accessor for PhoneCallNLv3Intent(0);
}

uint64_t OUTLINED_FUNCTION_41_31()
{
  return *(void *)(v0 - 160);
}

uint64_t OUTLINED_FUNCTION_42_33()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_43_31()
{
  return type metadata accessor for NonTerminalIntentNode();
}

uint64_t OUTLINED_FUNCTION_44_28()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_45_26()
{
  return TerminalOntologyNode.init(name:multicardinal:)();
}

uint64_t OUTLINED_FUNCTION_46_27()
{
  return IntentNodeTraversable.value<A>(forNode:)();
}

uint64_t OUTLINED_FUNCTION_51_23()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_52_23()
{
  return 0x6C6143656E6F6870;
}

uint64_t OUTLINED_FUNCTION_53_25()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_54_23()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_56_20(uint64_t result)
{
  *uint64_t v1 = result & 1;
  return result;
}

uint64_t OUTLINED_FUNCTION_60_19()
{
  return 0;
}

void CameraControlFlow.executeAction(currentCall:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v7 = *(unsigned char *)(v3 + 56);
  if ((PhoneCallControlAction.isCameraAction.getter(v7) & 1) == 0)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.siriPhone);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      OUTLINED_FUNCTION_26_30(&dword_0, v18, v19, "#CameraControlFlow used to handle a call control not related to the camera.");
      OUTLINED_FUNCTION_6();
    }

    lazy protocol witness table accessor for type ActionableCallControlFlow.ActionableCallControlFlowError and conformance ActionableCallControlFlow.ActionableCallControlFlowError();
    swift_allocError();
    uint64_t v21 = v20;
    char v22 = 0;
    *uint64_t v20 = v7;
    goto LABEL_29;
  }
  uint64_t v62 = a3;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.siriPhone);
  swift_unknownObjectRetain();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = a2;
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 67109120;
    uint64_t ObjectType = swift_getObjectType();
    unint64_t v14 = *(void (**)(uint64_t, uint64_t))(v11 + 32);
    v14(ObjectType, v11);
    OUTLINED_FUNCTION_1_13();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease();
    _os_log_impl(&dword_0, v9, v10, "#CameraControlFlow isFaceTime: %{BOOL}d", v12, 8u);
    a2 = v11;
    OUTLINED_FUNCTION_6();
  }
  else
  {

    swift_unknownObjectRelease();
    unint64_t v14 = *(void (**)(uint64_t, uint64_t))(a2 + 32);
  }
  uint64_t v23 = swift_getObjectType();
  if ((((uint64_t (*)(uint64_t, uint64_t))v14)(v23, a2) & 1) == 0)
  {
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v33, v34))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      OUTLINED_FUNCTION_26_30(&dword_0, v35, v36, "#CameraControlFlow requesting to turn on camera while on Telephony call. Throwing ActionableCallControlFlow.unsupportedAction.");
      OUTLINED_FUNCTION_6();
    }

    lazy protocol witness table accessor for type ActionableCallControlFlow.ActionableCallControlFlowError and conformance ActionableCallControlFlow.ActionableCallControlFlowError();
    swift_allocError();
    uint64_t v21 = (char *)v37;
    *(void *)(v37 + 24) = &type metadata for ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason;
    *(void *)(v37 + 32) = lazy protocol witness table accessor for type ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason and conformance ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason();
    *uint64_t v21 = 9;
    goto LABEL_28;
  }
  uint64_t v24 = static PhoneCallControlRequestSupportPolicy.unsupportedCameraControlReason(for:action:sharedGlobals:)(a1, a2, v7);
  if (v24 != 10)
  {
    uint64_t v38 = v24;
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      v63[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v41 = 136315138;
      uint64_t v42 = specialized UnsupportedAction.description.getter(v38);
      uint64_t v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v39, v40, "#CameraControlFlow unsupported reason=%s", v41, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }

    lazy protocol witness table accessor for type ActionableCallControlFlow.ActionableCallControlFlowError and conformance ActionableCallControlFlow.ActionableCallControlFlowError();
    swift_allocError();
    uint64_t v21 = (char *)v44;
    *(void *)(v44 + 24) = &type metadata for ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason;
    *(void *)(v44 + 32) = lazy protocol witness table accessor for type ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason and conformance ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason();
    *uint64_t v21 = v38;
LABEL_28:
    char v22 = 1;
LABEL_29:
    v21[40] = v22;
    swift_willThrow();
    return;
  }
  int v61 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 144);
  char v25 = v61(v23, a2);
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = a2;
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v29 = 67109120;
    OUTLINED_FUNCTION_1_13();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v26, v27, "#CameraControlFlow cameraIsEnabled = %{BOOL}d", v29, 8u);
    a2 = v28;
    OUTLINED_FUNCTION_6();
  }

  unint64_t v30 = PhoneCallControlAction.rawValue.getter(v7);
  if (v25)
  {
    if (v30 != 0x43656C6261736964 || v31 != 0xED00006172656D61) {
      goto LABEL_34;
    }
LABEL_43:
    swift_bridgeObjectRelease();
    goto LABEL_44;
  }
  if (v30 == 0x6143656C62616E65 && v31 == 0xEC0000006172656DLL) {
    goto LABEL_43;
  }
LABEL_34:
  char v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v46 & 1) == 0)
  {
    swift_retain_n();
    uint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = swift_slowAlloc();
      v63[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v49 = 136315394;
      if (v25) {
        uint64_t v50 = 0x64656C62616E65;
      }
      else {
        uint64_t v50 = 0x64656C6261736964;
      }
      if (v25) {
        unint64_t v51 = 0xE700000000000000;
      }
      else {
        unint64_t v51 = 0xE800000000000000;
      }
      uint64_t v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v49 + 12) = 2080;
      unint64_t v52 = PhoneCallControlAction.description.getter(v7);
      uint64_t v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v53, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v47, v48, "#CameraControlFlow not changing camera state because camera is %s and action is %s", (uint8_t *)v49, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {

      swift_release_n();
    }
    goto LABEL_48;
  }
LABEL_44:
  uint64_t v54 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a2 + 160))(v63, v23, a2);
  *char v55 = !*v55;
  v54(v63, 0);
  swift_unknownObjectRetain();
  uint64_t v56 = Logger.logObject.getter();
  os_log_type_t v57 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v56, v57))
  {
    uint64_t v58 = (uint8_t *)swift_slowAlloc();
    uint64_t v59 = a2;
    uint64_t v60 = v58;
    *(_DWORD *)uint64_t v58 = 67109120;
    LOBYTE(v63[0]) = v61(v23, v59) & 1;
    LODWORD(v63[0]) = LOBYTE(v63[0]);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease();
    _os_log_impl(&dword_0, v56, v57, "#CameraControlFlow camera is enabled: %{BOOL}d", v60, 8u);
    OUTLINED_FUNCTION_6();
  }
  else
  {

    swift_unknownObjectRelease();
  }
LABEL_48:
  *(void *)uint64_t v62 = 0;
  *(void *)(v62 + 8) = 0;
  *(void *)(v62 + 16) = 0;
  *(_OWORD *)(v62 + 24) = xmmword_469B30;
}

uint64_t type metadata accessor for CameraControlFlow()
{
  return self;
}

PhoneCallFlowDelegatePlugin::PostCallInquiryAnswerCallCATs::Properties_optional __swiftcall PostCallInquiryAnswerCallCATs.Properties.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PostCallInquiryAnswerCallCATs.Properties.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.value = PhoneCallFlowDelegatePlugin_PostCallInquiryAnswerCallCATs_Properties_offerFollowUpIntent;
  }
  else {
    v4.value = PhoneCallFlowDelegatePlugin_PostCallInquiryAnswerCallCATs_Properties_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

PhoneCallFlowDelegatePlugin::PostCallInquiryAnswerCallCATs::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PostCallInquiryAnswerCallCATs.Properties@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PostCallInquiryAnswerCallCATs::Properties_optional *a2@<X8>)
{
  result.value = PostCallInquiryAnswerCallCATs.Properties.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t PostCallInquiryAnswerCallCATs.intentHandledResponse(incomingCallConcept:completion:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_31_0();
  *(_OWORD *)(v2 + 16) = xmmword_467710;
  *(void *)(v2 + 32) = 0xD000000000000013;
  *(void *)(v2 + 40) = 0x8000000000493CB0;
  if (a1)
  {
    uint64_t v3 = type metadata accessor for PhoneIncomingCall();
    uint64_t v4 = a1;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
    *(void *)(v2 + 56) = 0;
    *(void *)(v2 + 64) = 0;
  }
  *(void *)(v2 + 48) = v4;
  *(void *)(v2 + 72) = v3;
  swift_retain();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();

  return swift_bridgeObjectRelease();
}

uint64_t PostCallInquiryAnswerCallCATs.intentHandledResponse(incomingCallConcept:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_21_1((uint64_t)PostCallInquiryAnswerCallCATs.intentHandledResponse(incomingCallConcept:));
}

uint64_t PostCallInquiryAnswerCallCATs.intentHandledResponse(incomingCallConcept:)()
{
  uint64_t v1 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_31_0();
  v0[5] = v2;
  *(_OWORD *)(v2 + 16) = xmmword_467710;
  uint64_t v3 = OUTLINED_FUNCTION_10_1(v2, (uint64_t)"incomingCallConcept");
  if (v1)
  {
    uint64_t v3 = type metadata accessor for PhoneIncomingCall();
  }
  else
  {
    *(void *)(v2 + 56) = 0;
    *(void *)(v2 + 64) = 0;
  }
  *(void *)(v2 + 48) = v1;
  *(void *)(v2 + 72) = v3;
  OUTLINED_FUNCTION_19_2();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *uint64_t v4 = v0;
  v4[1] = AnswerCallCATs.intentHandledResponse(incomingCallConcept:);
  uint64_t v5 = v0[2];
  return v7(v5, 0xD00000000000002FLL, 0x80000000004907E0, v2);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;

  uint64_t v1 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_31_0();
  v0[4] = v2;
  *(_OWORD *)(v2 + 16) = xmmword_467710;
  uint64_t v3 = OUTLINED_FUNCTION_10_1(v2, (uint64_t)"incomingCallConcept");
  if (v1)
  {
    uint64_t v3 = type metadata accessor for PhoneIncomingCall();
  }
  else
  {
    *(void *)(v2 + 56) = 0;
    *(void *)(v2 + 64) = 0;
  }
  *(void *)(v2 + 48) = v1;
  *(void *)(v2 + 72) = v3;
  OUTLINED_FUNCTION_19_2();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[5] = v4;
  *uint64_t v4 = v0;
  v4[1] = AnswerCallCATs.intentHandledResponse(incomingCallConcept:);
  uint64_t v5 = OUTLINED_FUNCTION_11_6(0xD00000000000002FLL);
  return v7(v5);
}

uint64_t PostCallInquiryAnswerCallCATs.intentHandledResponse(incomingCallConcept:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_21_1((uint64_t)PostCallInquiryAnswerCallCATs.intentHandledResponse(incomingCallConcept:));
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_31_0();
  *(_OWORD *)(v2 + 16) = xmmword_467710;
  *(void *)(v2 + 32) = 0xD000000000000013;
  *(void *)(v2 + 40) = 0x8000000000493CB0;
  if (a1)
  {
    uint64_t v3 = type metadata accessor for PhoneIncomingCall();
    uint64_t v4 = a1;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
    *(void *)(v2 + 56) = 0;
    *(void *)(v2 + 64) = 0;
  }
  *(void *)(v2 + 48) = v4;
  *(void *)(v2 + 72) = v3;
  swift_retain();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();

  return swift_bridgeObjectRelease();
}

uint64_t PostCallInquiryAnswerCallCATs.offerFollowUpIntent(followUpOfferType:completion:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v3 = OUTLINED_FUNCTION_11_0(v2);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_4();
  uint64_t v6 = v5 - v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v7 = OUTLINED_FUNCTION_31_0();
  *(_OWORD *)(v7 + 16) = xmmword_467710;
  uint64_t v8 = (uint64_t *)(v7 + 48);
  *(void *)(v7 + 32) = 0xD000000000000011;
  *(void *)(v7 + 40) = 0x8000000000493CD0;
  outlined init with copy of SpeakableString?(a1, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload(v6, 1, v9) == 1)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v6, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v8 = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
  }
  else
  {
    *(void *)(v7 + 72) = v9;
    __swift_allocate_boxed_opaque_existential_1(v8);
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v10 + 32))();
  }
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  return swift_bridgeObjectRelease();
}

uint64_t PostCallInquiryAnswerCallCATs.offerFollowUpIntent(followUpOfferType:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v4);
  v1[5] = swift_task_alloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v5, v6, v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t (*v10)(uint64_t, unint64_t, unint64_t, uint64_t);
  uint64_t v11;

  uint64_t v1 = v0[5];
  uint64_t v2 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_31_0();
  v0[6] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_467710;
  uint64_t v4 = (uint64_t *)(v3 + 48);
  *(void *)(v3 + 32) = 0xD000000000000011;
  *(void *)(v3 + 40) = 0x8000000000493CD0;
  outlined init with copy of SpeakableString?(v2, v1, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  if (OUTLINED_FUNCTION_37_2(v5) == 1)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v0[5], &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v4 = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
  }
  else
  {
    *(void *)(v3 + 72) = v2;
    __swift_allocate_boxed_opaque_existential_1(v4);
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v6 + 32))();
  }
  uint64_t v7 = (void *)OUTLINED_FUNCTION_3_0();
  v0[7] = v7;
  void *v7 = v0;
  v7[1] = AnswerCallCATs.offerFollowUpIntent(followUpOfferType:);
  uint64_t v8 = v0[2];
  return v10(v8, 0xD00000000000002DLL, 0x8000000000490810, v3);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_1_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v3);
  v1[4] = swift_task_alloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v4, v5, v6);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;

  uint64_t v1 = v0[4];
  uint64_t v2 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_31_0();
  v0[5] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_467710;
  uint64_t v4 = (uint64_t *)(v3 + 48);
  *(void *)(v3 + 32) = 0xD000000000000011;
  *(void *)(v3 + 40) = 0x8000000000493CD0;
  outlined init with copy of SpeakableString?(v2, v1, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  if (OUTLINED_FUNCTION_37_2(v5) == 1)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v0[4], &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v4 = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
  }
  else
  {
    *(void *)(v3 + 72) = v2;
    __swift_allocate_boxed_opaque_existential_1(v4);
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v6 + 32))();
  }
  uint64_t v7 = (void *)OUTLINED_FUNCTION_3_0();
  v0[6] = v7;
  void *v7 = v0;
  v7[1] = AnswerCallCATs.offerFollowUpIntent(followUpOfferType:);
  uint64_t v8 = OUTLINED_FUNCTION_11_6(0xD00000000000002DLL);
  return v10(v8);
}

uint64_t PostCallInquiryAnswerCallCATs.offerFollowUpIntent(followUpOfferType:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v3 = OUTLINED_FUNCTION_11_0(v2);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_4();
  uint64_t v6 = v5 - v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v7 = OUTLINED_FUNCTION_31_0();
  *(_OWORD *)(v7 + 16) = xmmword_467710;
  uint64_t v8 = (uint64_t *)(v7 + 48);
  *(void *)(v7 + 32) = 0xD000000000000011;
  *(void *)(v7 + 40) = 0x8000000000493CD0;
  outlined init with copy of SpeakableString?(a1, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload(v6, 1, v9) == 1)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v6, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v8 = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
  }
  else
  {
    *(void *)(v7 + 72) = v9;
    __swift_allocate_boxed_opaque_existential_1(v8);
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v10 + 32))();
  }
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  return swift_bridgeObjectRelease();
}

uint64_t PostCallInquiryAnswerCallCATs.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return PostCallInquiryAnswerCallCATs.init(templateDir:options:globals:)(a1, a2);
}

uint64_t PostCallInquiryAnswerCallCATs.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CATOption();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_4();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  uint64_t v10 = OUTLINED_FUNCTION_11_0(v9);
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_4();
  outlined init with copy of SpeakableString?(a1, v12 - v11, (uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
  uint64_t v13 = CATWrapper.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(a1, (uint64_t *)&demangling cache variable for type metadata for URL?);
  return v13;
}

unint64_t lazy protocol witness table accessor for type PostCallInquiryAnswerCallCATs.Properties and conformance PostCallInquiryAnswerCallCATs.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type PostCallInquiryAnswerCallCATs.Properties and conformance PostCallInquiryAnswerCallCATs.Properties;
  if (!lazy protocol witness table cache variable for type PostCallInquiryAnswerCallCATs.Properties and conformance PostCallInquiryAnswerCallCATs.Properties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PostCallInquiryAnswerCallCATs.Properties and conformance PostCallInquiryAnswerCallCATs.Properties);
  }
  return result;
}

uint64_t type metadata accessor for PostCallInquiryAnswerCallCATs()
{
  uint64_t result = type metadata singleton initialization cache for PostCallInquiryAnswerCallCATs;
  if (!type metadata singleton initialization cache for PostCallInquiryAnswerCallCATs) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for PostCallInquiryAnswerCallCATs()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for PostCallInquiryAnswerCallCATs()
{
  return type metadata accessor for PostCallInquiryAnswerCallCATs();
}

unsigned char *storeEnumTagSinglePayload for PostCallInquiryAnswerCallCATs.Properties(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x42C270);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PostCallInquiryAnswerCallCATs.Properties()
{
  return &type metadata for PostCallInquiryAnswerCallCATs.Properties;
}

uint64_t PhonePersonWithAliasesListProperties<>.allSameFamilyName.getter(uint64_t a1)
{
  unint64_t v2 = *(void *)(v1 + 24);
  v5[2] = a1;
  swift_bridgeObjectRetain();
  char v3 = specialized Sequence.allSatisfy(_:)((uint64_t (*)(uint64_t *))partial apply for closure #1 in PhonePersonWithAliasesListProperties<>.allSameFamilyName.getter, (uint64_t)v5, v2);
  swift_bridgeObjectRelease();
  return v3 & 1;
}

void protocol witness for PhonePersonWithAliasesListProperties.numOfOthers.getter in conformance PhonePersonWithAliasesList()
{
}

uint64_t protocol witness for PhonePersonWithAliasesListProperties.allSameFamilyName.getter in conformance PhonePersonWithAliasesList(uint64_t a1)
{
  return PhonePersonWithAliasesListProperties<>.allSameFamilyName.getter(a1) & 1;
}

uint64_t closure #1 in PhonePersonWithAliasesListProperties<>.allSameFamilyName.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for SpeakableString();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v28 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SpeakableString?, SpeakableString?));
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v27 - v14;
  __chkstk_darwin(v13);
  os_log_type_t v17 = (char *)&v27 - v16;
  DialogPerson.familyName.getter();
  unint64_t v18 = *(void *)(a2 + 24);
  if (v18 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v19 = *(void *)((char *)&dword_10 + (v18 & 0xFFFFFFFFFFFFFF8));
  }
  if (v19 < 1)
  {
    __swift_storeEnumTagSinglePayload((uint64_t)v15, 1, 1, v3);
  }
  else
  {
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v18 & 0xC000000000000001) == 0);
    if ((v18 & 0xC000000000000001) != 0) {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      swift_retain();
    }
    DialogPerson.familyName.getter();
    swift_release();
  }
  uint64_t v20 = (uint64_t)&v8[*(int *)(v6 + 48)];
  outlined init with copy of SpeakableString?((uint64_t)v17, (uint64_t)v8);
  outlined init with copy of SpeakableString?((uint64_t)v15, v20);
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v3) == 1)
  {
    uint64_t v21 = &demangling cache variable for type metadata for SpeakableString?;
    outlined destroy of SubmitCommandError?((uint64_t)v15, &demangling cache variable for type metadata for SpeakableString?);
    outlined destroy of SubmitCommandError?((uint64_t)v17, &demangling cache variable for type metadata for SpeakableString?);
    if (__swift_getEnumTagSinglePayload(v20, 1, v3) == 1)
    {
      char v22 = -1;
    }
    else
    {
      uint64_t v21 = &demangling cache variable for type metadata for (SpeakableString?, SpeakableString?);
      char v22 = 0;
    }
  }
  else
  {
    uint64_t v23 = v12;
    outlined init with copy of SpeakableString?((uint64_t)v8, (uint64_t)v12);
    if (__swift_getEnumTagSinglePayload(v20, 1, v3) == 1)
    {
      outlined destroy of SubmitCommandError?((uint64_t)v15, &demangling cache variable for type metadata for SpeakableString?);
      outlined destroy of SubmitCommandError?((uint64_t)v17, &demangling cache variable for type metadata for SpeakableString?);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v12, v3);
      char v22 = 0;
      uint64_t v21 = &demangling cache variable for type metadata for (SpeakableString?, SpeakableString?);
    }
    else
    {
      uint64_t v24 = v28;
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v28, v20, v3);
      lazy protocol witness table accessor for type SpeakableString and conformance SpeakableString();
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      os_log_type_t v27 = v23;
      char v25 = *(void (**)(char *, uint64_t))(v4 + 8);
      v25(v24, v3);
      uint64_t v21 = &demangling cache variable for type metadata for SpeakableString?;
      outlined destroy of SubmitCommandError?((uint64_t)v15, &demangling cache variable for type metadata for SpeakableString?);
      outlined destroy of SubmitCommandError?((uint64_t)v17, &demangling cache variable for type metadata for SpeakableString?);
      v25(v27, v3);
    }
  }
  outlined destroy of SubmitCommandError?((uint64_t)v8, v21);
  return v22 & 1;
}

uint64_t partial apply for closure #1 in PhonePersonWithAliasesListProperties<>.allSameFamilyName.getter(uint64_t a1)
{
  return closure #1 in PhonePersonWithAliasesListProperties<>.allSameFamilyName.getter(a1, *(void *)(v1 + 24)) & 1;
}

void *CallingIntentContactNeedsDisambiguationFlowStrategy.__allocating_init(delegate:startCallCATs:startCallCatPatterns:startCallCATsSimple:phoneCallCommonCATs:phoneCallCommonCATsSimple:phoneCallCommonCatPatterns:phoneCallDisplayTextCATsSimple:responseGenerator:siriKitEventSender:appInfoBuilder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return CallingIntentContactNeedsDisambiguationFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:startCallCATsSimple:phoneCallCommonCATs:phoneCallCommonCATsSimple:phoneCallCommonCatPatterns:phoneCallDisplayTextCATsSimple:responseGenerator:siriKitEventSender:appInfoBuilder:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

PhoneCallFlowDelegatePlugin::EmergencyType_optional __swiftcall EmergencyType.init(for:)(Swift::OpaquePointer a1)
{
  if ((specialized Sequence.contains(where:)((unint64_t)a1._rawValue, (char *)&dword_0 + 2) & 1) != 0
    && (specialized Sequence.contains(where:)((unint64_t)a1._rawValue, (char *)&dword_0 + 1) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    char v3 = specialized Sequence.allSatisfy(_:)((unint64_t)a1._rawValue, (char *)&dword_0 + 1);
    swift_bridgeObjectRelease();
    if (v3) {
      return (PhoneCallFlowDelegatePlugin::EmergencyType_optional)1;
    }
    else {
      return (PhoneCallFlowDelegatePlugin::EmergencyType_optional)2;
    }
  }
}

uint64_t EmergencyType.description.getter(char a1)
{
  BOOL v1 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v2 = 0x6C61636F6CLL;
  }
  else {
    uint64_t v2 = 0x6E676965726F66;
  }
  if (v1) {
    unint64_t v3 = 0xE700000000000000;
  }
  else {
    unint64_t v3 = 0xE500000000000000;
  }
  unint64_t v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  return 46;
}

uint64_t EmergencyType.rawValue.getter(char a1)
{
  if (a1) {
    return 0x6C61636F6CLL;
  }
  else {
    return 0x6E676965726F66;
  }
}

PhoneCallFlowDelegatePlugin::EmergencyType_optional __swiftcall EmergencyType.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of EmergencyType.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.value = PhoneCallFlowDelegatePlugin_EmergencyType_local;
  }
  else {
    v4.value = PhoneCallFlowDelegatePlugin_EmergencyType_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance EmergencyType(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance EmergencyType()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance EmergencyType()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance EmergencyType()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

PhoneCallFlowDelegatePlugin::EmergencyType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance EmergencyType@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::EmergencyType_optional *a2@<X8>)
{
  result.value = EmergencyType.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance EmergencyType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EmergencyType.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance EmergencyType()
{
  return EmergencyType.description.getter(*v0);
}

uint64_t key path setter for CallingIntentContactNeedsDisambiguationFlowStrategy.personsToDisambiguate : <A>CallingIntentContactNeedsDisambiguationFlowStrategy<A>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  Swift::Int v3 = (void *)(*a2 + direct field offset for CallingIntentContactNeedsDisambiguationFlowStrategy.personsToDisambiguate);
  swift_beginAccess();
  *Swift::Int v3 = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t CallingIntentContactNeedsDisambiguationFlowStrategy.personsToDisambiguate.getter()
{
  return swift_bridgeObjectRetain();
}

void key path setter for CallingIntentContactNeedsDisambiguationFlowStrategy.selectedPerson : <A>CallingIntentContactNeedsDisambiguationFlowStrategy<A>(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  Swift::Int v3 = (void **)(*a2 + direct field offset for CallingIntentContactNeedsDisambiguationFlowStrategy.selectedPerson);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *Swift::Int v3 = v2;
  id v5 = v2;
}

void *CallingIntentContactNeedsDisambiguationFlowStrategy.selectedPerson.getter()
{
  OUTLINED_FUNCTION_4_7();
  BOOL v1 = *v0;
  id v2 = v1;
  return v1;
}

void CallingIntentContactNeedsDisambiguationFlowStrategy.actionForInput(_:resolveRecord:)()
{
  uint64_t v2 = v0;
  type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_0();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_35_7();
  type metadata accessor for Input();
  OUTLINED_FUNCTION_0_0();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_4();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  os_log_type_t v6 = __swift_project_value_buffer(v5, (uint64_t)static Logger.siriPhone);
  OUTLINED_FUNCTION_12();
  v7();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  os_log_type_t v100 = v6;
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v102 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315394;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000020, 0x8000000000499A50, &v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 12) = 2080;
    _s11SiriKitFlow5InputVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, (void (*)(uint64_t))&type metadata accessor for Input);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v101 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v13 = OUTLINED_FUNCTION_128_5();
    v14(v13);
    _os_log_impl(&dword_0, v8, v9, "#CallingIntentContactNeedsDisambiguationFlowStrategy %s input: %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    uint64_t v2 = v0;
    OUTLINED_FUNCTION_6();
  }
  else
  {
    uint64_t v15 = OUTLINED_FUNCTION_128_5();
    v16(v15);
  }

  os_log_type_t v17 = *(uint64_t (**)(void))(*(void *)v2 + 320);
  OUTLINED_FUNCTION_90_12();
  uint64_t v18 = v17();
  outlined init with copy of SignalProviding(v2 + 264, (uint64_t)&v103);
  outlined init with copy of SignalProviding(v2 + 24, (uint64_t)&v104);
  uint64_t v102 = v18;
  Input.parse.getter();
  uint64_t v19 = (uint64_t)ContactDisambiguationPromptResponseParser.parseDisambiguationResponse(from:)(v1);
  unsigned __int8 v21 = v20;
  OUTLINED_FUNCTION_11();
  v22();
  outlined destroy of ContactDisambiguationPromptResponseParser((uint64_t)&v102);
  switch(v21)
  {
    case 0u:
      switch((char)v19)
      {
        case 0:
          uint64_t v83 = (void *)Logger.logObject.getter();
          os_log_type_t v84 = static os_log_type_t.debug.getter();
          if (OUTLINED_FUNCTION_8_2(v84))
          {
            uint64_t v85 = (_WORD *)OUTLINED_FUNCTION_7_2();
            OUTLINED_FUNCTION_28_14(v85);
            OUTLINED_FUNCTION_26_30(&dword_0, v86, v87, "#CallingIntentContactNeedsDisambiguationFlowStrategy user said yes to options");
            OUTLINED_FUNCTION_6();
          }

          *(unsigned char *)(v2 + direct field offset for CallingIntentContactNeedsDisambiguationFlowStrategy.requiresReprompt) = 1;
          goto LABEL_61;
        case 1:
        case 2:
          OUTLINED_FUNCTION_55_23();
          swift_getAssociatedTypeWitness();
          OUTLINED_FUNCTION_94_2();
          uint64_t v23 = (void *)ParameterResolutionRecord.intent.getter();
          self;
          uint64_t v24 = (void *)swift_dynamicCastObjCClass();
          if (!v24) {
            goto LABEL_53;
          }
          id v25 = [v24 isGroupCall];
          type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
          v26.super.super.Class isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
          if (v25)
          {
            id v27 = v25;
            char v28 = static NSObject.== infix(_:_:)();

            if (v28)
            {
              uint64_t v29 = Logger.logObject.getter();
              os_log_type_t v30 = static os_log_type_t.debug.getter();
              if (OUTLINED_FUNCTION_21_19(v30))
              {
                uint64_t v31 = (_WORD *)OUTLINED_FUNCTION_7_2();
                OUTLINED_FUNCTION_34_8(v31);
                OUTLINED_FUNCTION_138_3(&dword_0, v29, (os_log_type_t)v26.super.super.isa, "#CallingIntentContactNeedsDisambiguationFlowStrategy user said no, but this is a GFT call, so remove the contact and proceed.");
                OUTLINED_FUNCTION_6();
              }

              static ActionForInput.handle()();
              goto LABEL_66;
            }
LABEL_53:
            v26.super.super.Class isa = (Class)v23;
          }
          else
          {
          }
          uint64_t v95 = (void *)Logger.logObject.getter();
          os_log_type_t v96 = static os_log_type_t.debug.getter();
          if (OUTLINED_FUNCTION_8_2(v96))
          {
            uint64_t v97 = (_WORD *)OUTLINED_FUNCTION_7_2();
            OUTLINED_FUNCTION_28_14(v97);
            OUTLINED_FUNCTION_26_30(&dword_0, v98, v99, "#CallingIntentContactNeedsDisambiguationFlowStrategy Intent cancelled");
            OUTLINED_FUNCTION_6();
          }

          static ActionForInput.cancel()();
LABEL_66:
          uint64_t v68 = (void *)v19;
          unsigned __int8 v69 = 0;
          break;
        case 5:
        case 6:
          goto LABEL_30;
        case 7:
          v88 = (void *)Logger.logObject.getter();
          os_log_type_t v89 = static os_log_type_t.debug.getter();
          if (OUTLINED_FUNCTION_8_2(v89))
          {
            uint64_t v90 = (_WORD *)OUTLINED_FUNCTION_7_2();
            OUTLINED_FUNCTION_28_14(v90);
            OUTLINED_FUNCTION_26_30(&dword_0, v91, v92, "#CallingIntentContactNeedsDisambiguationFlowStrategy intent resetting context");
            OUTLINED_FUNCTION_6();
          }

          uint64_t v93 = (void **)(v2 + direct field offset for CallingIntentContactNeedsDisambiguationFlowStrategy.selectedPerson);
          OUTLINED_FUNCTION_73_14();
          uint64_t v94 = *v93;
          *uint64_t v93 = 0;

          *(unsigned char *)(v2 + direct field offset for CallingIntentContactNeedsDisambiguationFlowStrategy.shouldClearContext) = 1;
LABEL_61:
          static ActionForInput.handle()();
          goto LABEL_66;
        default:
          goto LABEL_14;
      }
      goto LABEL_67;
    case 1u:
      uint64_t v101 = v19;
      outlined copy of ContactDisambiguationPromptResponse((id)v19, 1u);
      type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INPerson);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INPerson?);
      swift_dynamicCast();
      uint64_t v38 = v102;
      goto LABEL_26;
    case 2u:
      if (v19 < 0
        || ((OUTLINED_FUNCTION_90_12(), unint64_t v39 = v17(), v39 >> 62)
          ? (uint64_t v40 = _CocoaArrayWrapper.endIndex.getter())
          : (uint64_t v40 = *(void *)((char *)&dword_10 + (v39 & 0xFFFFFFFFFFFFFF8))),
            swift_bridgeObjectRelease(),
            v19 >= v40))
      {
        uint64_t v70 = Logger.logObject.getter();
        os_log_type_t v71 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v70, v71))
        {
          uint64_t v72 = (_DWORD *)OUTLINED_FUNCTION_47();
          uint64_t v102 = OUTLINED_FUNCTION_14_0();
          *uint64_t v72 = 136315138;
          uint64_t v73 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v101 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v74, &v102);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_93_11(&dword_0, v70, v75, "#CallingIntentContactNeedsDisambiguationFlowStrategy selectedIndex: %s is out of bounds");
          OUTLINED_FUNCTION_20_1();
          OUTLINED_FUNCTION_6();
          OUTLINED_FUNCTION_6();
        }
      }
      else
      {
        OUTLINED_FUNCTION_90_12();
        uint64_t v41 = v17();
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v19, (v41 & 0xC000000000000001) == 0);
        if ((v41 & 0xC000000000000001) != 0) {
          id v42 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v42 = *(id *)(v41 + 8 * v19 + 32);
        }
        id v43 = v42;
        swift_bridgeObjectRelease();
        uint64_t v44 = (void **)(v2 + direct field offset for CallingIntentContactNeedsDisambiguationFlowStrategy.selectedPerson);
        OUTLINED_FUNCTION_73_14();
        uint64_t v45 = *v44;
        *uint64_t v44 = v43;

        swift_retain_n();
        char v46 = Logger.logObject.getter();
        os_log_type_t v47 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v46, v47))
        {
          uint64_t v48 = swift_slowAlloc();
          uint64_t v101 = swift_slowAlloc();
          *(_DWORD *)uint64_t v48 = 136315394;
          uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, &v101);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v51 = swift_bridgeObjectRelease();
          *(_WORD *)(v48 + 12) = 2080;
          (*(void (**)(uint64_t))(*(void *)v2 + 344))(v51);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INPerson?);
          uint64_t v52 = String.init<A>(describing:)();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v53, &v101);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_0, v46, v47, "#CallingIntentContactNeedsDisambiguationFlowStrategy selectedIndex: %s. selectedPerson:%s", (uint8_t *)v48, 0x16u);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_6();
          OUTLINED_FUNCTION_6();
        }
        else
        {

          swift_release_n();
        }
      }
      uint64_t v76 = (void *)(*(uint64_t (**)(void))(*(void *)v2 + 344))();

      if (v76) {
        static ActionForInput.handle()();
      }
      else {
        static ActionForInput.ignore()();
      }
      uint64_t v68 = (void *)v19;
      unsigned __int8 v69 = 2;
      goto LABEL_67;
    case 3u:
      id v54 = (id)v19;
      uint64_t v38 = v19;
LABEL_26:
      char v55 = (void **)(v2 + direct field offset for CallingIntentContactNeedsDisambiguationFlowStrategy.selectedPerson);
      OUTLINED_FUNCTION_73_14();
      uint64_t v56 = *v55;
      *char v55 = (void *)v38;

      swift_retain_n();
      os_log_type_t v57 = Logger.logObject.getter();
      os_log_type_t v58 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v57, v58))
      {
        uint64_t v59 = (_DWORD *)OUTLINED_FUNCTION_47();
        uint64_t v101 = OUTLINED_FUNCTION_14_0();
        *uint64_t v59 = 136315138;
        OUTLINED_FUNCTION_2();
        (*(void (**)(void))(v60 + 344))();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INPerson?);
        uint64_t v61 = String.init<A>(describing:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v62, &v101);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_93_11(&dword_0, v57, v63, "#CallingIntentContactNeedsDisambiguationFlowStrategy selectedPerson: %s");
        OUTLINED_FUNCTION_14_30();
        OUTLINED_FUNCTION_6();
        OUTLINED_FUNCTION_6();
      }
      else
      {

        uint64_t v64 = swift_release_n();
      }
      uint64_t v67 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 344))(v64);

      if (!v67) {
        goto LABEL_37;
      }
      static ActionForInput.handle()();
      goto LABEL_38;
    case 4u:
      if (!v19)
      {
        uint64_t v77 = Logger.logObject.getter();
        os_log_type_t v78 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_8_2(v78))
        {
          uint64_t v79 = (_WORD *)OUTLINED_FUNCTION_7_2();
          OUTLINED_FUNCTION_32_2(v79);
          OUTLINED_FUNCTION_10_24(&dword_0, v77, v100, "#CallingIntentContactNeedsDisambiguationFlowStrategy selectedNonMatchingLabel: reprompting…");
          OUTLINED_FUNCTION_6();
        }

        *(unsigned char *)(v2 + direct field offset for CallingIntentContactNeedsDisambiguationFlowStrategy.requiresReprompt) = 1;
        static ActionForInput.handle()();
        uint64_t v68 = 0;
        goto LABEL_52;
      }
      if (v19 != 1)
      {
        uint64_t v80 = Logger.logObject.getter();
        os_log_type_t v81 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_8_2(v81))
        {
          uint64_t v82 = (_WORD *)OUTLINED_FUNCTION_7_2();
          OUTLINED_FUNCTION_32_2(v82);
          OUTLINED_FUNCTION_10_24(&dword_0, v80, v100, "#CallingIntentContactNeedsDisambiguationFlowStrategy intent belongs to this task, but no contact selected, reprompting…");
          OUTLINED_FUNCTION_6();
        }

        *(unsigned char *)(v2 + direct field offset for CallingIntentContactNeedsDisambiguationFlowStrategy.requiresReprompt) = 1;
        static ActionForInput.handle()();
        uint64_t v68 = &dword_0 + 2;
LABEL_52:
        unsigned __int8 v69 = 4;
        goto LABEL_67;
      }
LABEL_30:
      uint64_t v32 = (void *)Logger.logObject.getter();
      os_log_type_t v65 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_8_2(v65))
      {
        uint64_t v66 = (_WORD *)OUTLINED_FUNCTION_7_2();
        OUTLINED_FUNCTION_28_14(v66);
        uint64_t v37 = "#CallingIntentContactNeedsDisambiguationFlowStrategy intent does not belong to this task, ignoring…";
LABEL_32:
        OUTLINED_FUNCTION_26_30(&dword_0, v35, v36, v37);
        OUTLINED_FUNCTION_6();
      }
LABEL_33:

LABEL_37:
      static ActionForInput.ignore()();
LABEL_38:
      uint64_t v68 = (void *)v19;
      unsigned __int8 v69 = v21;
LABEL_67:
      outlined consume of ContactDisambiguationPromptResponse?(v68, v69);
      return;
    default:
LABEL_14:
      uint64_t v32 = (void *)Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.error.getter();
      if (!OUTLINED_FUNCTION_8_2(v33)) {
        goto LABEL_33;
      }
      os_log_type_t v34 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_28_14(v34);
      uint64_t v37 = "#CallingIntentContactNeedsDisambiguationFlowStrategy Coudln't parse response at disambiguation, ignoring…";
      goto LABEL_32;
  }
}

unint64_t CallingIntentContactNeedsDisambiguationFlowStrategy.updateForConfirmedContact(selectedIndex:confirmedContact:currentContacts:)(unint64_t a1, void *a2, unint64_t a3)
{
  unint64_t v6 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v32 = (unint64_t)_swiftEmptyArrayStorage;
  if (!a3) {
    goto LABEL_8;
  }
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_4;
    }
LABEL_6:
    unint64_t v6 = (unint64_t)_swiftEmptyArrayStorage;
    goto LABEL_7;
  }
  uint64_t v8 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  if (!v8) {
    goto LABEL_6;
  }
LABEL_4:
  unint64_t v6 = a3;
  unint64_t v32 = a3;
LABEL_7:
  swift_bridgeObjectRelease();
LABEL_8:
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = *(void *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFFF8));
  }
  if (v9 > (uint64_t)a1)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    uint64_t v11 = OUTLINED_FUNCTION_25_0(v10, (uint64_t)static Logger.siriPhone);
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_8_4(v12))
    {
      uint64_t v13 = (uint8_t *)OUTLINED_FUNCTION_47();
      *(_DWORD *)uint64_t v13 = 134217984;
      v31[0] = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_0, v11, v3, "#CallingIntentContactNeedsDisambiguationFlowStrategy updateForDisambiguatedContact: Updating confirmed contact at selectedIndex=%ld", v13, 0xCu);
      OUTLINED_FUNCTION_6();
    }

    id v14 = a2;
    unint64_t v32 = v6;
    if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
      || (v6 & 0x8000000000000000) != 0
      || (v6 & 0x4000000000000000) != 0)
    {
      unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew()(v6);
      unint64_t v32 = v6;
    }
    if ((a1 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFFF8)) > a1)
    {
      uint64_t v15 = *(void **)((char *)&stru_20.cmd + 8 * a1 + (v6 & 0xFFFFFFFFFFFFFF8));
      *(void *)((char *)&stru_20.cmd + 8 * a1 + (v6 & 0xFFFFFFFFFFFFFF8)) = v14;

      goto LABEL_28;
    }
    __break(1u);
    goto LABEL_37;
  }
  if (one-time initialization token for siriPhone != -1) {
LABEL_37:
  }
    swift_once();
  uint64_t v16 = type metadata accessor for Logger();
  os_log_type_t v17 = OUTLINED_FUNCTION_25_0(v16, (uint64_t)static Logger.siriPhone);
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_21_19(v18))
  {
    uint64_t v19 = (_WORD *)OUTLINED_FUNCTION_7_2();
    OUTLINED_FUNCTION_34_8(v19);
    OUTLINED_FUNCTION_138_3(&dword_0, v17, (os_log_type_t)a1, "#CallingIntentContactNeedsDisambiguationFlowStrategy updateForDisambiguatedContact: Adding confirmed contact to the contacts");
    OUTLINED_FUNCTION_6();
  }

  id v20 = a2;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  a1 = *(void *)((char *)&dword_10 + (v32 & 0xFFFFFFFFFFFFFF8));
  if (a1 >= *(void *)((char *)&dword_18 + (v32 & 0xFFFFFFFFFFFFFF8)) >> 1) {
    OUTLINED_FUNCTION_159_4();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
LABEL_28:
  specialized Array._endMutation()();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_4_24(v21, (uint64_t)static Logger.siriPhone);
  char v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_21_19(v23))
  {
    uint64_t v24 = swift_slowAlloc();
    v31[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 136315394;
    OUTLINED_FUNCTION_26_6();
    uint64_t v25 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_6_2();
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 12) = 2080;
    swift_beginAccess();
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INPerson);
    swift_bridgeObjectRetain();
    uint64_t v27 = Array.description.getter();
    unint64_t v29 = v28;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v22, (os_log_type_t)a1, "#%s updated contacts : %s)", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {

    OUTLINED_FUNCTION_6_2();
  }
  swift_beginAccess();
  return v32;
}

unint64_t CallingIntentContactNeedsDisambiguationFlowStrategy.updateForRejectedContact(selectedIndex:currentContacts:)(int64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  if (!a2) {
    goto LABEL_19;
  }
  unint64_t v24 = a2;
  if (!(a2 >> 62))
  {
    uint64_t v4 = *(void *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter())
  {
LABEL_18:
    swift_bridgeObjectRelease();
LABEL_19:
    swift_bridgeObjectRetain();
    return v2;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_4:
  if (v4 <= a1)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_4_24(v14, (uint64_t)static Logger.siriPhone);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_63_0(v16))
    {
      os_log_type_t v17 = (_DWORD *)OUTLINED_FUNCTION_47();
      uint64_t v18 = OUTLINED_FUNCTION_14_0();
      *os_log_type_t v17 = 136315138;
      uint64_t v23 = v18;
      OUTLINED_FUNCTION_26_6();
      uint64_t v19 = _typeName(_:qualified:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v23);
      OUTLINED_FUNCTION_89_10();
      OUTLINED_FUNCTION_6_2();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_93_11(&dword_0, v15, v21, "#%s index to be removed is out-of-range.");
      OUTLINED_FUNCTION_20_1();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {

      OUTLINED_FUNCTION_6_2();
    }
    goto LABEL_19;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_4_24(v5, (uint64_t)static Logger.siriPhone);
  unint64_t v6 = (void *)Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_63_0(v7))
  {
    uint64_t v8 = (_DWORD *)OUTLINED_FUNCTION_47();
    uint64_t v9 = OUTLINED_FUNCTION_14_0();
    *uint64_t v8 = 136315138;
    uint64_t v23 = v9;
    OUTLINED_FUNCTION_26_6();
    uint64_t v10 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v23);
    OUTLINED_FUNCTION_89_10();
    OUTLINED_FUNCTION_6_2();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_25_14(&dword_0, v12, v13, "#%s contact was not confirmed. Removing from the list.");
    OUTLINED_FUNCTION_20_1();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {

    OUTLINED_FUNCTION_6_2();
  }

  return v24;
}

uint64_t CallingIntentContactNeedsDisambiguationFlowStrategy.makeDisambiguationItemContainer(resolveRecord:)(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return OUTLINED_FUNCTION_21_1((uint64_t)CallingIntentContactNeedsDisambiguationFlowStrategy.makeDisambiguationItemContainer(resolveRecord:));
}

uint64_t CallingIntentContactNeedsDisambiguationFlowStrategy.makeDisambiguationItemContainer(resolveRecord:)()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v1 = (int8x16_t *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  v1[1] = vextq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 24), 8uLL);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  type metadata accessor for SiriKitDisambiguationListAdapter();
  *uint64_t v2 = v0;
  v2[1] = CallingIntentContactNeedsDisambiguationFlowStrategy.makeDisambiguationItemContainer(resolveRecord:);
  OUTLINED_FUNCTION_19_45();
  OUTLINED_FUNCTION_11_1();
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.makeDisambiguationItemContainer(resolveRecord:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v27 = a1;
  uint64_t v3 = *a2;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<SiriKitDisambiguationListAdapter, Never>);
  uint64_t v4 = *(void *)(v25 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v25);
  uint64_t v23 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ParameterIdentifier();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = a2[2];
  uint64_t v22 = *(void *)(v3 + 272);
  uint64_t v24 = *(void *)(*(void *)(v22 + 8) + 16);
  uint64_t v20 = *(void *)(v3 + 264);
  swift_getAssociatedTypeWitness();
  type metadata accessor for ParameterResolutionRecord();
  uint64_t v21 = ParameterResolutionRecord.app.getter();
  uint64_t v19 = ParameterResolutionRecord.intent.getter();
  ParameterResolutionRecord.parameter.getter();
  uint64_t v18 = ParameterIdentifier.name.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v10 = (void *)ParameterResolutionRecord.result.getter();
  unint64_t v11 = v23;
  uint64_t v12 = v25;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v23, v27, v25);
  unint64_t v13 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v14 = (char *)swift_allocObject();
  uint64_t v15 = v22;
  *((void *)v14 + 2) = v20;
  *((void *)v14 + 3) = v15;
  *((void *)v14 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(&v14[v13], v11, v12);
  swift_retain();
  os_log_type_t v16 = (void *)v19;
  dispatch thunk of RCHFlowDelegate.makeDisambiguationList(app:intent:parameterName:intentResolutionResult:_:)();

  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.makeDisambiguationItemContainer(resolveRecord:)(uint64_t a1, void *a2)
{
  void *(*v6)(uint64_t *__return_ptr, uint64_t, uint64_t);
  void *v7;
  uint64_t v9[5];

  uint64_t v3 = type metadata accessor for UnlockDevicePolicy();
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = a2[6];
  uint64_t v5 = a2[7];
  __swift_project_boxed_opaque_existential_1(a2 + 3, v4);
  uint64_t v6 = *(void *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v5 + 8);
  swift_retain();
  uint64_t v7 = v6(v9, v4, v5);
  (*(void (**)(void *))(*a2 + 312))(v7);
  type metadata accessor for SiriKitDisambiguationListAdapter();
  swift_allocObject();
  v9[0] = SiriKitDisambiguationListAdapter.init(disambiguationList:deviceState:authenticationPolicy:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<SiriKitDisambiguationListAdapter, Never>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t CallingIntentContactNeedsDisambiguationFlowStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[50] = v2;
  v1[51] = v0;
  v1[48] = v3;
  v1[49] = v4;
  uint64_t v5 = type metadata accessor for ParameterIdentifier();
  v1[52] = v5;
  OUTLINED_FUNCTION_19_0(v5);
  v1[53] = v6;
  v1[54] = OUTLINED_FUNCTION_35();
  uint64_t v7 = type metadata accessor for Parse();
  v1[55] = v7;
  OUTLINED_FUNCTION_19_0(v7);
  v1[56] = v8;
  v1[57] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_86_2();
  v1[58] = *(void *)(v9 + 272);
  OUTLINED_FUNCTION_86_2();
  v1[59] = *(void *)(v10 + 264);
  v1[60] = swift_getAssociatedTypeWitness();
  uint64_t v11 = type metadata accessor for IntentPromptAnswer();
  v1[61] = v11;
  OUTLINED_FUNCTION_19_0(v11);
  v1[62] = v12;
  v1[63] = OUTLINED_FUNCTION_28_2();
  v1[64] = swift_task_alloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v13, v14, v15);
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _DWORD *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _WORD *v8;
  void *v9;
  void (*v10)(void);
  uint64_t (**v11)(void);
  uint64_t (*v12)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t);
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  void *v44;
  void *v45;
  id v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  id v50;
  void *v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t);
  unint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t);
  unint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t);
  uint64_t (*v74)(void);
  id v76;
  void *v77;
  os_log_type_t v78;
  _DWORD *v79;
  void *v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int8x16_t *v86;
  void *v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t (*v92)(void);
  void *v93;
  int8x16_t v94;
  long long v95;
  long long v96;
  uint64_t v97;
  uint64_t v98;

  uint64_t v97 = v0;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.siriPhone);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_8_4(v3))
  {
    uint64_t v4 = (_DWORD *)OUTLINED_FUNCTION_47();
    *(void *)&uint64_t v95 = OUTLINED_FUNCTION_14_0();
    *uint64_t v4 = 136315138;
    *(void *)(v0 + 376) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000003ELL, 0x800000000049D700, (uint64_t *)&v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_24_5(&dword_0, v2, v5, "#CallingIntentContactNeedsDisambiguationFlowStrategy %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }

  if (*(unsigned char *)(*(void *)(v0 + 408)
                + direct field offset for CallingIntentContactNeedsDisambiguationFlowStrategy.shouldClearContext) == 1)
  {
    uint64_t v6 = Logger.logObject.getter();
    uint64_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_34_8(v8);
      OUTLINED_FUNCTION_138_3(&dword_0, v6, v7, "#CallingIntentContactNeedsDisambiguationFlowStrategy clearing context (clearing all existing selected contacts) so we can start over...");
      OUTLINED_FUNCTION_6();
    }

    type metadata accessor for ParameterResolutionRecord();
    uint64_t v9 = (void *)ParameterResolutionRecord.intent.getter();
    *(void *)(v0 + 344) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
    *(void *)(v0 + 320) = _swiftEmptyArrayStorage;
    OUTLINED_FUNCTION_100_5(v0 + 320);

    __swift_destroy_boxed_opaque_existential_1(v0 + 320);
    CallingIntentContactNeedsDisambiguationFlowStrategy.resetStates()();
    uint64_t v95 = 0u;
    os_log_type_t v96 = 0u;
    ParameterResolutionRecord.intent.getter();
    IntentPromptAnswer.init(answeredValue:updatedIntent:)();
    OUTLINED_FUNCTION_20_7();
    static DisambiguationResult.chosenItem(_:)();
    OUTLINED_FUNCTION_5_30();
    v10();
    goto LABEL_48;
  }
  OUTLINED_FUNCTION_22();
  v11 += 43;
  uint64_t v12 = *v11;
  uint64_t v13 = (*v11)();
  uint64_t v92 = v12;
  if (v13)
  {
    uint64_t v93 = (void *)v13;
    uint64_t v14 = *(void *)(v0 + 448);
    uint64_t v15 = *(void *)(v0 + 456);
    os_log_type_t v16 = *(void **)(v0 + 408);
    uint64_t v90 = *(void *)(v0 + 440);
    __swift_project_boxed_opaque_existential_1(v16 + 3, v16[6]);
    uint64_t v17 = OUTLINED_FUNCTION_20_7();
    uint64_t v19 = v18(v17);
    Input.parse.getter();
    (*(void (**)(uint64_t))(*(void *)v19 + 192))(v15);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v90);
    if (*(void *)(v0 + 232))
    {
      outlined init with take of AppSelectionSignalComponent((long long *)(v0 + 208), v0 + 248);
      uint64_t v12 = v92;
      uint64_t v20 = v16 + 3;
    }
    else
    {
      uint64_t v21 = v16[6];
      uint64_t v22 = v16[7];
      __swift_project_boxed_opaque_existential_1(v16 + 3, v21);
      (*(void (**)(uint64_t, uint64_t))(v22 + 72))(v21, v22);
      OUTLINED_FUNCTION_23();
      (*(void (**)(void))(v23 + 152))();
      swift_release();
      uint64_t v20 = v16 + 3;
      if (*(void *)(v0 + 152) == 1)
      {
        outlined destroy of UUID?(v0 + 120, (uint64_t *)&demangling cache variable for type metadata for TransformationResult?);
        *(_OWORD *)(v0 + 248) = 0u;
        *(_OWORD *)(v0 + 264) = 0u;
        *(void *)(v0 + 280) = 0;
      }
      else
      {
        outlined init with copy of ConfirmationResponse?(v0 + 128, v0 + 248, &demangling cache variable for type metadata for PhoneCallNLIntent?);
        outlined destroy of TransformationResult(v0 + 120);
      }
      uint64_t v12 = v92;
      outlined destroy of UUID?(v0 + 208, &demangling cache variable for type metadata for PhoneCallNLIntent?);
    }
    if (*(void *)(v0 + 272))
    {
      outlined init with take of AppSelectionSignalComponent((long long *)(v0 + 248), v0 + 168);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = xmmword_46A030;
      *(void *)(v24 + 32) = v93;
      *(void *)&uint64_t v95 = v24;
      specialized Array._endMutation()();
      uint64_t v25 = v95;
      uint64_t v26 = one-time initialization token for instance;
      uint64_t v27 = v93;
      if (v26 != -1) {
        swift_once();
      }
      unint64_t v28 = static EligibleAppFinder.instance;
      swift_retain();
      specialized static AppSelectionSignalsGatheringHelper.triggerSignalCollection(sharedGlobals:contacts:phoneCallNLIntent:smartAppSelection:eligibleAppsFinder:skIntent:)(v20, v25, (void *)(v0 + 168), 0, v28);
      swift_release();

      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1(v0 + 168);
    }
    else
    {

      outlined destroy of UUID?(v0 + 248, &demangling cache variable for type metadata for PhoneCallNLIntent?);
    }
  }
  type metadata accessor for ParameterResolutionRecord();
  ParameterResolutionRecord.parameter.getter();
  unint64_t v29 = ParameterIdentifier.multicardinalIndex.getter();
  uint64_t v31 = v30;
  unint64_t v32 = OUTLINED_FUNCTION_38();
  os_log_type_t v34 = v33(v32);
  if (v31) {
    uint64_t v35 = 0;
  }
  else {
    uint64_t v35 = v29;
  }
  uint64_t v91 = v35;
  uint64_t v36 = ((uint64_t (*)(uint64_t))v12)(v34);
  *(void *)(v0 + 520) = v36;
  if (!v36)
  {
LABEL_32:
    if ((*(unsigned char *)(*(void *)(v0 + 408)
                   + direct field offset for CallingIntentContactNeedsDisambiguationFlowStrategy.requiresReprompt) & 1) == 0)
    {
      uint64_t v44 = (void *)v12();
      if (v44)
      {
        uint64_t v45 = v44;
        char v46 = v44;
        os_log_type_t v47 = Logger.logObject.getter();
        uint64_t v48 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v47, v48))
        {
          uint64_t v49 = (uint8_t *)OUTLINED_FUNCTION_47();
          os_log_type_t v89 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v49 = 138412290;
          *(void *)(v0 + 360) = v46;
          unint64_t v50 = v46;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *os_log_type_t v89 = v45;

          _os_log_impl(&dword_0, v47, v48, "#CallingIntentContactNeedsDisambiguationFlowStrategy parseDisambiguationResult confirmed contact: %@", v49, 0xCu);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_6();
          OUTLINED_FUNCTION_6();
        }
        else
        {
        }
        uint64_t v12 = v92;

        uint64_t v56 = (void *)OUTLINED_FUNCTION_148_3();
        swift_getAssociatedConformanceWitness();
        os_log_type_t v57 = OUTLINED_FUNCTION_77_12();
        uint64_t v59 = v58(v57);

        CallingIntentContactNeedsDisambiguationFlowStrategy.updateForConfirmedContact(selectedIndex:confirmedContact:currentContacts:)(v91, v46, v59);
        swift_bridgeObjectRelease();
        goto LABEL_40;
      }
      uint64_t v51 = (void *)OUTLINED_FUNCTION_148_3();
      swift_getAssociatedConformanceWitness();
      uint64_t v52 = OUTLINED_FUNCTION_77_12();
      id v54 = v53(v52);

      char v55 = CallingIntentContactNeedsDisambiguationFlowStrategy.updateForRejectedContact(selectedIndex:currentContacts:)(v91, v54);
      swift_bridgeObjectRelease();
      uint64_t v12 = v92;
      if (v55)
      {
LABEL_40:
        uint64_t v60 = v0 + 288;
        swift_bridgeObjectRetain_n();
        uint64_t v61 = Logger.logObject.getter();
        unint64_t v62 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v61, v62))
        {
          uint64_t v63 = (uint8_t *)OUTLINED_FUNCTION_47();
          *(void *)&uint64_t v95 = OUTLINED_FUNCTION_14_0();
          *(_DWORD *)uint64_t v63 = 136315138;
          type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INPerson);
          swift_bridgeObjectRetain();
          uint64_t v64 = Array.description.getter();
          uint64_t v66 = v65;
          swift_bridgeObjectRelease();
          *(void *)(v0 + 368) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v66, (uint64_t *)&v95);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_0, v61, v62, "#CallingIntentContactNeedsDisambiguationFlowStrategy updated contacts: %s", v63, 0xCu);
          swift_arrayDestroy();
          uint64_t v12 = v92;
          OUTLINED_FUNCTION_6();
          uint64_t v60 = v0 + 288;
          OUTLINED_FUNCTION_6();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v67 = static ContactResolution.dedupeContacts(contacts:)();
        swift_bridgeObjectRelease();
        uint64_t v68 = (void *)ParameterResolutionRecord.intent.getter();
        *(void *)(v0 + 312) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
        *(void *)(v0 + 288) = v67;
        OUTLINED_FUNCTION_100_5(v60);

        __swift_destroy_boxed_opaque_existential_1(v60);
      }
    }
    unsigned __int8 v69 = CallingIntentContactNeedsDisambiguationFlowStrategy.resetStates()();
    uint64_t v70 = ((uint64_t (*)(uint64_t))v12)(v69);
    if (v70)
    {
      os_log_type_t v71 = v70;
      *((void *)&v96 + 1) = type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INPerson);
      *(void *)&uint64_t v95 = v71;
    }
    else
    {
      uint64_t v95 = 0u;
      os_log_type_t v96 = 0u;
    }
    ParameterResolutionRecord.intent.getter();
    IntentPromptAnswer.init(answeredValue:updatedIntent:)();
    OUTLINED_FUNCTION_38();
    static DisambiguationResult.chosenItem(_:)();
    uint64_t v72 = OUTLINED_FUNCTION_38();
    v73(v72);
LABEL_48:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_6_0();
    return v74();
  }
  uint64_t v37 = (void *)v36;
  if (INPerson.hasHandleValue.getter()) {
    goto LABEL_31;
  }
  uint64_t v38 = [v37 customIdentifier];
  if (v38)
  {
    unint64_t v39 = v38;
    uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v42 = v41;
  }
  else
  {
    uint64_t v40 = 0;
    id v42 = 0;
  }
  id v43 = specialized Optional<A>.isNilOrEmpty.getter(v40, v42);
  swift_bridgeObjectRelease();
  if (v43 & 1) == 0 || (INPerson.isEmergency.getter())
  {
LABEL_31:

    goto LABEL_32;
  }
  uint64_t v76 = v37;
  uint64_t v77 = (void *)Logger.logObject.getter();
  os_log_type_t v78 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_63_0(v78))
  {
    uint64_t v79 = (_DWORD *)OUTLINED_FUNCTION_47();
    uint64_t v80 = (void *)swift_slowAlloc();
    *uint64_t v79 = 138412290;
    *(void *)(v0 + 352) = v76;
    os_log_type_t v81 = v76;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v80 = v37;

    OUTLINED_FUNCTION_25_14(&dword_0, v82, v83, "#CallingIntentContactNeedsDisambiguationFlowStrategy with CRRHandleRecommendation for selectedPerson %@");
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
  }
  *(_OWORD *)(v0 + 32) = 0u;
  *(void *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ContactQuery>);
  OUTLINED_FUNCTION_62_0();
  os_log_type_t v84 = type metadata accessor for ContactQuery();
  OUTLINED_FUNCTION_19_0(v84);
  uint64_t v85 = swift_allocObject();
  *(_OWORD *)(v85 + 16) = xmmword_467710;
  uint64_t v94 = *(int8x16_t *)(v0 + 400);
  INPerson.toContactQuery()();
  *(void *)(v0 + 56) = _swiftEmptyArrayStorage;
  *(unsigned char *)(v0 + 64) = 2;
  *(void *)(v0 + 72) = 0;
  *(void *)(v0 + 80) = 0x1123030905050204;
  *(_WORD *)(v0 + 88) = 518;
  *(void *)(v0 + 96) = _swiftEmptyArrayStorage;
  *(void *)(v0 + 104) = v85;
  *(void *)(v0 + 112) = _swiftEmptyArrayStorage;
  uint64_t v86 = (int8x16_t *)swift_task_alloc();
  *(void *)(v0 + 528) = v86;
  v86[1] = vextq_s8(v94, v94, 8uLL);
  v86[2].i64[0] = v0 + 16;
  v86[2].i64[1] = v91;
  uint64_t v87 = (void *)swift_task_alloc();
  *(void *)(v0 + 536) = v87;
  type metadata accessor for DisambiguationResult();
  OUTLINED_FUNCTION_53_22();
  *uint64_t v87 = v88;
  v87[1] = CallingIntentContactNeedsDisambiguationFlowStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:);
  OUTLINED_FUNCTION_19_45();
  OUTLINED_FUNCTION_11_1();
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_16_1();

  outlined destroy of PhoneCallDirectInvocationNLIntent(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  return v1();
}

uint64_t closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v22 = a5;
  uint64_t v20 = a1;
  uint64_t v7 = *a2;
  uint64_t v21 = *(void *)(*a2 + 272);
  uint64_t v8 = *(void *)(v7 + 264);
  swift_getAssociatedTypeWitness();
  type metadata accessor for IntentPromptAnswer();
  type metadata accessor for DisambiguationResult();
  uint64_t v9 = type metadata accessor for CheckedContinuation();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v20 - v11;
  type metadata accessor for ParameterResolutionRecord();
  uint64_t v13 = (void *)ParameterResolutionRecord.intent.getter();
  v23[3] = &type metadata for PhoneCallDirectInvocationNLIntent;
  v23[4] = &protocol witness table for PhoneCallDirectInvocationNLIntent;
  v23[0] = swift_allocObject();
  outlined init with copy of PhoneCallDirectInvocationNLIntent(a4, v23[0] + 16);
  uint64_t v14 = ParameterResolutionRecord.app.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v20, v9);
  unint64_t v15 = (*(unsigned __int8 *)(v10 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  os_log_type_t v16 = (char *)swift_allocObject();
  uint64_t v17 = v21;
  *((void *)v16 + 2) = v8;
  *((void *)v16 + 3) = v17;
  *((void *)v16 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v16[v15], v12, v9);
  uint64_t v18 = *(void (**)(void *, void *, uint64_t, uint64_t, uint64_t (*)(), char *))(*a2 + 248);
  swift_retain();
  v18(v13, v23, v14, v22, partial apply for closure #1 in closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:), v16);
  swift_release();

  swift_release();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
}

uint64_t closure #1 in closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(void *a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for IntentPromptAnswer();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v19 - v6;
  uint64_t v8 = type metadata accessor for DisambiguationResult();
  __chkstk_darwin(v8);
  v19[1] = (char *)v19 - v9;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.siriPhone);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    v19[0] = v8;
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_0, v11, v12, "#CallingIntentContactNeedsDisambiguationFlowStrategy updated contact slot", v13, 2u);
    swift_slowDealloc();
  }

  uint64_t v14 = CallingIntentContactNeedsDisambiguationFlowStrategy.resetStates()();
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 344))(v14);
  if (v15)
  {
    uint64_t v16 = v15;
    *((void *)&v21 + 1) = type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INPerson);
    *(void *)&long long v20 = v16;
  }
  else
  {
    long long v20 = 0u;
    long long v21 = 0u;
  }
  id v17 = a1;
  IntentPromptAnswer.init(answeredValue:updatedIntent:)();
  static DisambiguationResult.chosenItem(_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  type metadata accessor for CheckedContinuation();
  return CheckedContinuation.resume(returning:)();
}

uint64_t CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[23] = v2;
  v1[24] = v0;
  v1[21] = v3;
  v1[22] = v4;
  OUTLINED_FUNCTION_2();
  v1[25] = v5;
  uint64_t v6 = type metadata accessor for PhoneError();
  v1[26] = v6;
  OUTLINED_FUNCTION_11_0(v6);
  v1[27] = OUTLINED_FUNCTION_35();
  uint64_t v7 = type metadata accessor for ParameterIdentifier();
  v1[28] = v7;
  OUTLINED_FUNCTION_19_0(v7);
  v1[29] = v8;
  v1[30] = OUTLINED_FUNCTION_35();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v1[31] = v9;
  OUTLINED_FUNCTION_11_0(v9);
  v1[32] = OUTLINED_FUNCTION_35();
  uint64_t v10 = type metadata accessor for SiriKitDisambiguationItemPair();
  v1[33] = v10;
  OUTLINED_FUNCTION_19_0(v10);
  v1[34] = v11;
  v1[35] = OUTLINED_FUNCTION_28_2();
  v1[36] = swift_task_alloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v12, v13, v14);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 344) = v0;
  swift_task_dealloc();
  if (v0) {
    swift_errorRelease();
  }
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  unint64_t v1;
  char v2;
  NSObject *v3;
  os_log_type_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  os_log_type_t v12;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v28;

  OUTLINED_FUNCTION_72_4();
  uint64_t v1 = swift_bridgeObjectRetain();
  if ((specialized Sequence.contains(where:)(v1, (char *)&dword_0 + 2) & 1) != 0
    && (specialized Sequence.contains(where:)(*(void *)(v0 + 320), (char *)&dword_0 + 1) & 1) != 0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = specialized Sequence.allSatisfy(_:)(*(void *)(v0 + 320), (char *)&dword_0 + 1);
    swift_bridgeObjectRelease();
    if ((v2 & 1) == 0)
    {
      Logger.logObject.getter();
      uint64_t v12 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_18(v12))
      {
        uint64_t v13 = (_WORD *)OUTLINED_FUNCTION_7_2();
        OUTLINED_FUNCTION_32_2(v13);
        OUTLINED_FUNCTION_25_4(&dword_0, v14, v15, "#CallingIntentContactNeedsDisambiguationFlowStrategy making disambiguation output for non emergency.");
        OUTLINED_FUNCTION_6();
      }
      OUTLINED_FUNCTION_83_6();
      OUTLINED_FUNCTION_55_23();
      swift_getAssociatedTypeWitness();
      OUTLINED_FUNCTION_94_2();
      *(void *)(v0 + 384) = ParameterResolutionRecord.app.getter();
      uint64_t v16 = ParameterResolutionRecord.intent.getter();
      OUTLINED_FUNCTION_156_5(v16);
      id v17 = ParameterIdentifier.name.getter();
      uint64_t v19 = OUTLINED_FUNCTION_63_15(v17, v18);
      v20(v19);
      long long v21 = ParameterResolutionRecord.result.getter();
      uint64_t v22 = OUTLINED_FUNCTION_37_33(v21);
      v23(v22);
      *(void *)(v0 + 88) = 0;
      *(_OWORD *)(v0 + 72) = 0u;
      *(_OWORD *)(v0 + 56) = 0u;
      OUTLINED_FUNCTION_26_6();
      uint64_t v24 = swift_task_alloc();
      uint64_t v25 = (void *)OUTLINED_FUNCTION_121_4(v24);
      *uint64_t v25 = v26;
      v25[1] = CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:);
      OUTLINED_FUNCTION_38_33();
      __asm { BRAA            X9, X16 }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_48_25(v4))
  {
    uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_7_2();
    OUTLINED_FUNCTION_32_2(v5);
    OUTLINED_FUNCTION_12_64(&dword_0, v3, v6, "#CallingIntentContactNeedsDisambiguationFlowStrategy making disambiguation output for emergency.");
    OUTLINED_FUNCTION_6();
  }

  OUTLINED_FUNCTION_55_23();
  swift_getAssociatedTypeWitness();
  OUTLINED_FUNCTION_94_2();
  uint64_t v7 = ParameterResolutionRecord.app.getter();
  *(void *)(v0 + 360) = OUTLINED_FUNCTION_154_3(v7);
  uint64_t v8 = swift_task_alloc();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_122_5(v8);
  *uint64_t v9 = v10;
  v9[1] = CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:);
  OUTLINED_FUNCTION_84_13();
  return CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForEmergencyNeedsDisambiguation(app:disambiguationItems:nlContextUpdate:)();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_21();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 376) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_24_6();
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_138_4();
  outlined destroy of UUID?(v0, &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_137_3();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_19_13();
  OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_21_21();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  uint64_t v5 = v3 + 16;
  uint64_t v6 = v3 + 56;
  OUTLINED_FUNCTION_24_6();
  char *v7 = *v2;
  *(void *)(v8 + 424) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_24_6();
  uint64_t v10 = *(void **)(v9 + 408);
  uint64_t v11 = *(void **)(v1 + 392);
  swift_bridgeObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  outlined destroy of UUID?(v6, &demangling cache variable for type metadata for ContactResolutionSnippetGenerating?);
  __swift_destroy_boxed_opaque_existential_1(v5);
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_4_3();
  return _swift_task_switch(v12, v13, v14);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  NSObject *v5;
  os_log_type_t v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  os_log_type_t v14;
  _WORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t);
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v30;

  OUTLINED_FUNCTION_72_4();
  uint64_t v1 = *(void *)(v0 + 256);
  uint64_t v2 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  uint64_t v3 = swift_bridgeObjectRetain();
  if ((specialized Sequence.contains(where:)(v3, (char *)&dword_0 + 2) & 1) != 0
    && (specialized Sequence.contains(where:)(*(void *)(v0 + 320), (char *)&dword_0 + 1) & 1) != 0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = specialized Sequence.allSatisfy(_:)(*(void *)(v0 + 320), (char *)&dword_0 + 1);
    swift_bridgeObjectRelease();
    if ((v4 & 1) == 0)
    {
      Logger.logObject.getter();
      uint64_t v14 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_18(v14))
      {
        uint64_t v15 = (_WORD *)OUTLINED_FUNCTION_7_2();
        OUTLINED_FUNCTION_32_2(v15);
        OUTLINED_FUNCTION_25_4(&dword_0, v16, v17, "#CallingIntentContactNeedsDisambiguationFlowStrategy making disambiguation output for non emergency.");
        OUTLINED_FUNCTION_6();
      }
      OUTLINED_FUNCTION_83_6();
      OUTLINED_FUNCTION_55_23();
      swift_getAssociatedTypeWitness();
      OUTLINED_FUNCTION_94_2();
      *(void *)(v0 + 384) = ParameterResolutionRecord.app.getter();
      uint64_t v18 = ParameterResolutionRecord.intent.getter();
      OUTLINED_FUNCTION_156_5(v18);
      uint64_t v19 = ParameterIdentifier.name.getter();
      long long v21 = OUTLINED_FUNCTION_63_15(v19, v20);
      v22(v21);
      uint64_t v23 = ParameterResolutionRecord.result.getter();
      uint64_t v24 = OUTLINED_FUNCTION_37_33(v23);
      v25(v24);
      *(void *)(v0 + 88) = 0;
      *(_OWORD *)(v0 + 72) = 0u;
      *(_OWORD *)(v0 + 56) = 0u;
      OUTLINED_FUNCTION_26_6();
      uint64_t v26 = swift_task_alloc();
      uint64_t v27 = (void *)OUTLINED_FUNCTION_121_4(v26);
      char *v27 = v28;
      v27[1] = CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:);
      OUTLINED_FUNCTION_38_33();
      __asm { BRAA            X9, X16 }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_48_25(v6))
  {
    uint64_t v7 = (_WORD *)OUTLINED_FUNCTION_7_2();
    OUTLINED_FUNCTION_32_2(v7);
    OUTLINED_FUNCTION_12_64(&dword_0, v5, v8, "#CallingIntentContactNeedsDisambiguationFlowStrategy making disambiguation output for emergency.");
    OUTLINED_FUNCTION_6();
  }

  OUTLINED_FUNCTION_55_23();
  swift_getAssociatedTypeWitness();
  OUTLINED_FUNCTION_94_2();
  uint64_t v9 = ParameterResolutionRecord.app.getter();
  *(void *)(v0 + 360) = OUTLINED_FUNCTION_154_3(v9);
  uint64_t v10 = swift_task_alloc();
  uint64_t v11 = (void *)OUTLINED_FUNCTION_122_5(v10);
  NSObject *v11 = v12;
  v11[1] = CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:);
  OUTLINED_FUNCTION_84_13();
  return CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForEmergencyNeedsDisambiguation(app:disambiguationItems:nlContextUpdate:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_138_4();
  outlined destroy of UUID?(v0, &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_71_10();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_20_2();
  return v2(v1, v2, v3, v4, v5, v6, v7, v8);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  v0[20] = v0[53];
  swift_errorRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {
    uint64_t v1 = v0[27];
    if (swift_getEnumCaseMultiPayload() == 4)
    {
      swift_errorRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_task_alloc();
      OUTLINED_FUNCTION_31_2();
      v0[54] = v2;
      *uint64_t v2 = v3;
      v2[1] = CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:);
      OUTLINED_FUNCTION_20_2();
      return CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:)();
    }
    outlined destroy of UUID?(v0[32], &demangling cache variable for type metadata for NLContextUpdate?);
    swift_release();
    _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_11(v1, (void (*)(void))type metadata accessor for PhoneError);
  }
  else
  {
    outlined destroy of UUID?(v0[32], &demangling cache variable for type metadata for NLContextUpdate?);
    swift_release();
  }
  swift_errorRelease();
  OUTLINED_FUNCTION_71_10();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_20_2();
  return v7(v6, v7, v8, v9, v10, v11, v12, v13);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_7();
  uint8_t *v5 = v4;
  *(void *)(v6 + 440) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_138_4();
  outlined destroy of UUID?(v0, &demangling cache variable for type metadata for NLContextUpdate?);
  swift_errorRelease();
  OUTLINED_FUNCTION_137_3();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_138_4();
  outlined destroy of UUID?(v0, &demangling cache variable for type metadata for NLContextUpdate?);
  swift_errorRelease();
  OUTLINED_FUNCTION_71_10();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_20_2();
  return v2(v1, v2, v3, v4, v5, v6, v7, v8);
}

uint64_t CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  v12[37] = __swift_project_value_buffer(v13, (uint64_t)static Logger.siriPhone);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_48_25(v15))
  {
    uint64_t v16 = (_WORD *)OUTLINED_FUNCTION_7_2();
    OUTLINED_FUNCTION_32_2(v16);
    OUTLINED_FUNCTION_12_64(&dword_0, v14, v17, "#CallingIntentContactNeedsDisambiguationFlowStrategy makePromptForDisambiguation");
    OUTLINED_FUNCTION_6();
  }

  v12[38] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<SiriKitDisambiguationItemPair>);
  uint64_t v18 = PaginatedItemContainer.items.getter();
  uint64_t v19 = *(void *)(v18 + 16);
  if (v19)
  {
    uint64_t v20 = v12[34];
    uint64_t v22 = *(void (**)(void, unint64_t, void))(v20 + 16);
    uint64_t v21 = v20 + 16;
    unint64_t v23 = v18 + ((*(unsigned __int8 *)(v21 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 64));
    uint64_t v57 = *(void *)(v21 + 56);
    os_log_type_t v58 = v22;
    do
    {
      v58(v12[36], v23, v12[33]);
      SiriKitDisambiguationItemPair.rawItem.getter();
      type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INPerson);
      if ((swift_dynamicCast() & 1) == 0) {
        v12[19] = 0;
      }
      (*(void (**)(void, void))(v21 - 8))(v12[36], v12[33]);
      if (v12[19])
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((char *)&dword_10 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >> 1) {
          OUTLINED_FUNCTION_159_4();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v23 += v57;
      --v19;
    }
    while (v19);
  }
  uint64_t v24 = v12[24];
  swift_bridgeObjectRelease();
  uint64_t v25 = (void *)(v24
                 + direct field offset for CallingIntentContactNeedsDisambiguationFlowStrategy.personsToDisambiguate);
  swift_beginAccess();
  *uint64_t v25 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  uint64_t v26 = PaginatedItemContainer.items.getter();
  uint64_t v27 = *(void *)(v26 + 16);
  if (v27)
  {
    uint64_t v28 = v12[34];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v31 = *(void (**)(uint64_t, unint64_t, uint64_t))(v28 + 16);
    uint64_t v29 = v28 + 16;
    os_log_type_t v30 = v31;
    unint64_t v32 = v26 + ((*(unsigned __int8 *)(v29 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 64));
    uint64_t v33 = *(void *)(v29 + 56);
    do
    {
      uint64_t v34 = v12[35];
      uint64_t v35 = v12[33];
      v30(v34, v32, v35);
      SiriKitDisambiguationItemPair.formattedItem.getter();
      (*(void (**)(uint64_t, uint64_t))(v29 - 8))(v34, v35);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v32 += v33;
      --v27;
    }
    while (v27);
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_22();
  v36 += 40;
  uint64_t v37 = *v36;
  unint64_t v38 = (*v36)();
  unint64_t v39 = v37();
  specialized _arrayForceCast<A, B>(_:)(v39);
  swift_bridgeObjectRelease();
  if (v38 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v40 = *(void *)((char *)&dword_10 + (v38 & 0xFFFFFFFFFFFFFF8));
  }
  if (v40 <= 5 || (PhoneContactDisambiguationProperties.isHandleDisambiguation.getter(v38))
    && (specialized Sequence.contains(where:)(v38, (char *)&dword_0 + 2) & 1) != 0)
  {
    specialized Sequence.contains(where:)(v38, (char *)&dword_0 + 1);
  }
  swift_bridgeObjectRelease();
  uint64_t v42 = v12[23];
  uint64_t v41 = v12[24];
  type metadata accessor for SiriKitDisambiguationList();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_96();
  v12[39] = SiriKitDisambiguationList.init(rawItems:disambiguationItems:shouldReadItemsInVox:requestUnlockForEmptyOrDuplicateItems:)();
  unint64_t v43 = v37();
  v12[40] = specialized Sequence.compactMap<A>(_:)((uint64_t)partial apply for closure #3 in CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:), v41, v43);
  swift_bridgeObjectRelease();
  uint64_t v44 = swift_task_alloc();
  v12[41] = v44;
  *(void *)(v44 + 16) = v41;
  *(void *)(v44 + 24) = v42;
  swift_task_alloc();
  OUTLINED_FUNCTION_31_2();
  v12[42] = v45;
  *uint64_t v45 = v46;
  v45[1] = CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:);
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_2_49();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v47, v48, v49, v50, v51, v52, v53, v54, a9, a10, a11, a12);
}

uint64_t closure #3 in CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Locale();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Class isa = INPerson.mutableCopyOrCrash()().super.isa;
  uint64_t v9 = a1 + 3;
  uint64_t v11 = a1[6];
  uint64_t v10 = a1[7];
  __swift_project_boxed_opaque_existential_1(v9, v11);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v10 + 8))(v15, v11, v10);
  __swift_project_boxed_opaque_existential_1(v15, v15[3]);
  dispatch thunk of DeviceState.siriLocale.getter();
  uint64_t v12 = INPerson.withTranslatedHandleLabel(locale:)();

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  *a2 = v12;
  return result;
}

uint64_t CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:)()
{
  OUTLINED_FUNCTION_16_1();
  v1[221] = v0;
  v1[215] = v2;
  v1[209] = v3;
  v1[203] = v4;
  uint64_t v5 = type metadata accessor for PhoneError();
  v1[222] = v5;
  OUTLINED_FUNCTION_11_0(v5);
  v1[223] = OUTLINED_FUNCTION_35();
  uint64_t v6 = type metadata accessor for NLContextUpdate();
  v1[224] = v6;
  OUTLINED_FUNCTION_19_0(v6);
  v1[225] = v7;
  v1[226] = OUTLINED_FUNCTION_35();
  uint64_t v8 = type metadata accessor for TemplatingResult();
  v1[227] = v8;
  OUTLINED_FUNCTION_19_0(v8);
  v1[228] = v9;
  v1[229] = swift_task_alloc();
  v1[230] = swift_task_alloc();
  OUTLINED_FUNCTION_86_2();
  v1[231] = *(void *)(v10 + 272);
  OUTLINED_FUNCTION_86_2();
  v1[232] = *(void *)(v11 + 264);
  swift_getAssociatedTypeWitness();
  uint64_t v12 = OUTLINED_FUNCTION_94_2();
  v1[233] = v12;
  OUTLINED_FUNCTION_19_0(v12);
  v1[234] = v13;
  v1[235] = *(void *)(v14 + 64);
  v1[236] = OUTLINED_FUNCTION_28_2();
  v1[237] = swift_task_alloc();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v1[238] = v15;
  OUTLINED_FUNCTION_11_0(v15);
  v1[239] = OUTLINED_FUNCTION_28_2();
  v1[240] = swift_task_alloc();
  v1[241] = swift_task_alloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v16, v17, v18);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  *(void *)(v3 + 1952) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  uint64_t v1 = v0[237];
  uint64_t v18 = v0[236];
  uint64_t v2 = v0[235];
  uint64_t v3 = v0[234];
  uint64_t v4 = v0[233];
  uint64_t v5 = v0[232];
  uint64_t v6 = v0[231];
  uint64_t v15 = v5;
  uint64_t v7 = v0[221];
  uint64_t v19 = v0[215];
  uint64_t v8 = v0[209];
  v0[245] = v0[197];
  uint64_t v16 = *(void (**)(uint64_t))(v3 + 16);
  uint64_t v17 = v8;
  v16(v1);
  uint64_t v9 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v10 = (char *)swift_allocObject();
  v0[246] = v10;
  *((void *)v10 + 2) = v5;
  *((void *)v10 + 3) = v6;
  *((void *)v10 + 4) = v7;
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 32);
  v14(&v10[v9], v1, v4);
  swift_retain();
  swift_retain();
  swift_asyncLet_begin();
  ((void (*)(uint64_t, uint64_t, uint64_t))v16)(v18, v17, v4);
  uint64_t v11 = (char *)swift_allocObject();
  v0[247] = v11;
  *((void *)v11 + 2) = v15;
  *((void *)v11 + 3) = v6;
  *((void *)v11 + 4) = v7;
  v14(&v11[v9], v18, v4);
  *(void *)&v11[(v9 + v2 + 7) & 0xFFFFFFFFFFFFFFF8] = v19;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_asyncLet_begin();
  uint64_t v12 = v0[241];
  return _swift_asyncLet_get(v0 + 82, v12, CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:), v0 + 172);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:));
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v11;

  uint64_t v1 = v0[240];
  uint64_t v2 = v0[224];
  outlined init with copy of ConfirmationResponse?(v0[241], v1, &demangling cache variable for type metadata for NLContextUpdate?);
  if (__swift_getEnumTagSinglePayload(v1, 1, v2) == 1)
  {
    uint64_t v3 = v0[240];
    uint64_t v4 = v0[223];
    swift_bridgeObjectRelease();
    outlined destroy of UUID?(v3, &demangling cache variable for type metadata for NLContextUpdate?);
    swift_storeEnumTagMultiPayload();
    _s11SiriKitFlow5InputVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError, (void (*)(uint64_t))type metadata accessor for PhoneError);
    v0[250] = OUTLINED_FUNCTION_4_8();
    PhoneError.logged()(v5);
    _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_11(v4, (void (*)(void))type metadata accessor for PhoneError);
    swift_willThrow();
    return _swift_asyncLet_finish(v0 + 2);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[225] + 32))(v0[226], v0[240], v0[224]);
    uint64_t v6 = [objc_allocWithZone((Class)SAAceConfirmationContext) init];
    v0[248] = v6;
    [v6 setReason:SAAceConfirmationReasonCONFIRM_CONTACTValue];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_46A030;
    *(void *)(v7 + 32) = v6;
    specialized Array._endMutation()();
    uint64_t v8 = v6;
    NLContextUpdate.conversationStateAttachments.setter();
    uint64_t v9 = v0[230];
    return _swift_asyncLet_get_throwing(v0 + 2, v9, CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:), v0 + 198);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  OUTLINED_FUNCTION_1_0();
  *(void *)(v1 + 1992) = v0;
  if (v0) {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v2, v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  void (*v4)(void);
  void (*v5)(void);
  void (*v6)(void);
  void (*v7)(void);
  uint64_t v8;
  void (*v9)(void);
  void (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  void *v15;

  OUTLINED_FUNCTION_65_15();
  OUTLINED_FUNCTION_140_2();
  uint64_t v15 = *(void **)(v0 + 1984);
  uint64_t v1 = *(void *)(v0 + 1912);
  uint64_t v14 = *(void *)(v0 + 1792);
  uint64_t v2 = *(void *)(v0 + 1768);
  uint64_t v3 = *(uint64_t **)(v0 + 1624);
  OUTLINED_FUNCTION_12();
  v4();
  __swift_project_boxed_opaque_existential_1((void *)(v2 + 24), *(void *)(v2 + 48));
  OUTLINED_FUNCTION_24_2();
  v5();
  __swift_project_boxed_opaque_existential_1((void *)(v2 + 24), *(void *)(v2 + 48));
  OUTLINED_FUNCTION_24_2();
  v6();
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 1416), *(void *)(v0 + 1440));
  OUTLINED_FUNCTION_78_2();
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  OUTLINED_FUNCTION_12();
  v7();
  __swift_storeEnumTagSinglePayload(v1, 0, 1, v14);
  uint64_t v8 = type metadata accessor for AceOutput();
  *(_OWORD *)(v0 + 1496) = 0u;
  *(_OWORD *)(v0 + 1512) = 0u;
  *(void *)(v0 + 1528) = 0;
  v3[3] = v8;
  v3[4] = (uint64_t)&protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v3);
  static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();

  outlined destroy of UUID?(v0 + 1496, &demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of UUID?(v1, &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_destroy_boxed_opaque_existential_1(v0 + 1336);
  OUTLINED_FUNCTION_26_0();
  v9();
  OUTLINED_FUNCTION_78_2();
  OUTLINED_FUNCTION_11();
  v10();
  __swift_destroy_boxed_opaque_existential_1(v0 + 1416);
  OUTLINED_FUNCTION_11_5();
  return _swift_asyncLet_finish(v11);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:));
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  swift_release();
  uint64_t v0 = OUTLINED_FUNCTION_117_4();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:));
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:));
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  swift_release();
  uint64_t v0 = OUTLINED_FUNCTION_117_4();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:));
}

{
  uint64_t v0;
  void (*v1)(void);
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();

  OUTLINED_FUNCTION_5_30();
  v1();
  OUTLINED_FUNCTION_20_2();
  return _swift_asyncLet_finish(v2);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:));
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  swift_release();
  uint64_t v0 = OUTLINED_FUNCTION_117_4();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:));
}

uint64_t CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  uint64_t v13 = v12[221];
  uint64_t v14 = v12[215];
  uint64_t v15 = v12[209];
  uint64_t v16 = (void *)swift_task_alloc();
  v12[242] = v16;
  v16[2] = v13;
  v16[3] = v15;
  v16[4] = v14;
  uint64_t v17 = (void *)swift_task_alloc();
  v12[243] = v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SAAceView]);
  *uint64_t v17 = v12;
  v17[1] = CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:);
  OUTLINED_FUNCTION_19_45();
  OUTLINED_FUNCTION_20_2();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10, a11, a12);
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  OUTLINED_FUNCTION_19_13();
  OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_64_10();
  uint64_t v22 = v12;
  swift_release_n();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_4_3();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20, v22, a10, a11, a12);
}

uint64_t CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_72_4();
  swift_release();
  uint64_t v29 = *(void *)(v17 + 1968);
  uint64_t v30 = *(void *)(v17 + 1976);
  OUTLINED_FUNCTION_22();
  uint64_t v18 = OUTLINED_FUNCTION_76_12();
  v19(v18);
  if (v16) {
    swift_errorRelease();
  }
  else {
    swift_willThrow();
  }
  OUTLINED_FUNCTION_56_21();
  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)&async function pointer to partial apply for implicit closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:));
  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)&async function pointer to partial apply for implicit closure #2 in CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_63_10();
  OUTLINED_FUNCTION_27_3();
  return v21(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10, v29, v30, a13, a14, a15, a16);
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  uint64_t (*v21)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;

  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_72_4();
  swift_release();
  uint64_t v29 = *(void *)(v17 + 1968);
  uint64_t v30 = *(void *)(v17 + 1976);
  OUTLINED_FUNCTION_22();
  uint64_t v18 = OUTLINED_FUNCTION_76_12();
  v19(v18);
  if (v16) {
    swift_errorRelease();
  }
  else {
    swift_willThrow();
  }
  OUTLINED_FUNCTION_56_21();
  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)&async function pointer to partial apply for implicit closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:));
  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)&async function pointer to partial apply for implicit closure #2 in CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_63_10();
  OUTLINED_FUNCTION_27_3();
  return v21(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10, v29, v30, a13, a14, a15, a16);
}

uint64_t CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_30_12();
  swift_task_dealloc();
  OUTLINED_FUNCTION_22();
  uint64_t v15 = OUTLINED_FUNCTION_76_12();
  v16(v15);
  if (v14) {
    swift_errorRelease();
  }
  else {
    swift_willThrow();
  }
  OUTLINED_FUNCTION_64_10();
  uint64_t v27 = v17;
  outlined consume of (@escaping @callee_guaranteed () -> ())?(0);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_63_10();
  OUTLINED_FUNCTION_28_1();
  return v19(v18, v19, v20, v21, v22, v23, v24, v25, a9, v27, a11, a12, a13, a14);
}

uint64_t closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v30 = a4;
  uint64_t v28 = a1;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[SAAceView], Error>);
  uint64_t v5 = *(void *)(v27 - 8);
  uint64_t v26 = *(void *)(v5 + 64);
  __chkstk_darwin(v27);
  uint64_t v25 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[0] = type metadata accessor for ParameterIdentifier();
  uint64_t v7 = *(void *)(v23[0] - 8);
  __chkstk_darwin(v23[0]);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v29 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v11 = (char *)v23 - v10;
  dispatch thunk of RCHFlowDelegate.makeAceViewProvider()();
  swift_getAssociatedTypeWitness();
  type metadata accessor for ParameterResolutionRecord();
  v23[3] = ParameterResolutionRecord.app.getter();
  ParameterResolutionRecord.parameter.getter();
  uint64_t v12 = ParameterIdentifier.name.getter();
  v23[1] = v13;
  v23[2] = v12;
  (*(void (**)(char *, void))(v7 + 8))(v9, v23[0]);
  uint64_t v14 = (void *)ParameterResolutionRecord.intent.getter();
  uint64_t v15 = a2[6];
  uint64_t v16 = a2[7];
  __swift_project_boxed_opaque_existential_1(a2 + 3, v15);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v16 + 8))(v31, v15, v16);
  __swift_project_boxed_opaque_existential_1(v31, v31[3]);
  DeviceState.isAuthenticatedForPhone.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  uint64_t v17 = v25;
  uint64_t v18 = v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v25, v28, v27);
  unint64_t v19 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v20 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v20 + v19, v17, v18);
  uint64_t v22 = AssociatedTypeWitness;
  swift_getAssociatedConformanceWitness();
  dispatch thunk of AceViewProviding.makeAceViewsForResolveNeedsDisambiguation(app:parameterName:intent:utteranceViews:disambiguationList:deviceIsLocked:_:)();
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v11, v22);
}

uint64_t implicit closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(implicit closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:), 0, 0);
}

uint64_t implicit closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:)()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_53_22();
  *uint64_t v2 = v3;
  v2[1] = implicit closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:);
  OUTLINED_FUNCTION_19_45();
  OUTLINED_FUNCTION_81_12();
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  return v3();
}

uint64_t closure #4 in CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v33 = a5;
  uint64_t v34 = a6;
  uint64_t v32 = a1;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(a4);
  OUTLINED_FUNCTION_0_0();
  uint64_t v7 = v6;
  uint64_t v29 = *(void *)(v8 + 64);
  __chkstk_darwin(v9);
  uint64_t v28 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for ParameterIdentifier();
  OUTLINED_FUNCTION_0_0();
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_4();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  OUTLINED_FUNCTION_0_0();
  uint64_t v31 = v12;
  __chkstk_darwin(v13);
  dispatch thunk of RCHFlowDelegate.makeNLContextProvider()();
  swift_getAssociatedTypeWitness();
  OUTLINED_FUNCTION_94_2();
  uint64_t v25 = ParameterResolutionRecord.intent.getter();
  ParameterResolutionRecord.parameter.getter();
  v24[1] = ParameterIdentifier.name.getter();
  OUTLINED_FUNCTION_5_30();
  v14();
  uint64_t v15 = (void *)ParameterResolutionRecord.result.getter();
  uint64_t v16 = v28;
  uint64_t v17 = v30;
  OUTLINED_FUNCTION_12();
  v18();
  unint64_t v19 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v20 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v20 + v19, v16, v17);
  swift_getAssociatedConformanceWitness();
  uint64_t v21 = (void *)v25;
  dispatch thunk of NLContextProviding.makeNeedsDisambiguationContextFor(intent:parameter:resolutionResult:_:)();

  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_11();
  return v22();
}

uint64_t closure #1 in closure #4 in CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v5 = OUTLINED_FUNCTION_11_0(v4);
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_4();
  uint64_t v6 = OUTLINED_FUNCTION_20_7();
  outlined init with copy of ConfirmationResponse?(v6, v7, &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_instantiateConcreteTypeFromMangledName(a3);
  return CheckedContinuation.resume(returning:)();
}

uint64_t implicit closure #2 in CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return _swift_task_switch(implicit closure #2 in CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:), 0, 0);
}

uint64_t implicit closure #2 in CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v13 = *(void *)(v12 + 40);
  uint64_t v14 = swift_task_alloc();
  *(void *)(v12 + 48) = v14;
  *(_OWORD *)(v14 + 16) = *(_OWORD *)(v12 + 24);
  *(void *)(v14 + 32) = v13;
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v12 + 56) = v15;
  type metadata accessor for TemplatingResult();
  OUTLINED_FUNCTION_53_22();
  *uint64_t v15 = v16;
  v15[1] = implicit closure #2 in CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:);
  OUTLINED_FUNCTION_19_45();
  OUTLINED_FUNCTION_81_12();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10, a11, a12);
}

uint64_t implicit closure #2 in CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:)()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_47_0();
    return v10();
  }
}

uint64_t closure #3 in implicit closure #2 in CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = a4;
  uint64_t v32 = a1;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TemplatingResult, Error>);
  uint64_t v5 = *(void *)(v31 - 8);
  uint64_t v30 = *(void *)(v5 + 64);
  __chkstk_darwin(v31);
  uint64_t v29 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ParameterIdentifier();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v33 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v28 = (char *)v26 - v11;
  dispatch thunk of RCHFlowDelegate.makeDialogTemplating()();
  swift_getAssociatedTypeWitness();
  type metadata accessor for ParameterResolutionRecord();
  v26[2] = ParameterResolutionRecord.app.getter();
  ParameterResolutionRecord.parameter.getter();
  uint64_t v12 = ParameterIdentifier.name.getter();
  v26[0] = v13;
  v26[1] = v12;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v14 = (void *)ParameterResolutionRecord.result.getter();
  uint64_t v15 = a2 + 3;
  uint64_t v17 = a2[6];
  uint64_t v16 = a2[7];
  __swift_project_boxed_opaque_existential_1(v15, v17);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v16 + 8))(v35, v17, v16);
  __swift_project_boxed_opaque_existential_1(v35, v35[3]);
  DeviceState.isAuthenticatedForPhone.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  uint64_t v18 = (void *)ParameterResolutionRecord.intent.getter();
  uint64_t v19 = v29;
  uint64_t v20 = v31;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v29, v32, v31);
  unint64_t v21 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v22 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v22 + v21, v19, v20);
  uint64_t v25 = AssociatedTypeWitness;
  swift_getAssociatedConformanceWitness();
  uint64_t v23 = v28;
  dispatch thunk of DialogTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:_:)();
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v23, v25);
}

uint64_t closure #1 in closure #3 in implicit closure #2 in CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TemplatingResult();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin(v6);
  uint64_t v8 = (void *)((char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of ConfirmationResponse?(a1, (uint64_t)v8, &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10[1] = *v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TemplatingResult, Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    (*(void (**)(char *, void *, uint64_t))(v3 + 32))(v5, v8, v2);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TemplatingResult, Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t CallingIntentContactNeedsDisambiguationFlowStrategy.resetStates()()
{
  uint64_t v1 = (void *)(v0 + direct field offset for CallingIntentContactNeedsDisambiguationFlowStrategy.personsToDisambiguate);
  swift_beginAccess();
  *uint64_t v1 = _swiftEmptyArrayStorage;
  uint64_t result = swift_bridgeObjectRelease();
  *(unsigned char *)(v0 + direct field offset for CallingIntentContactNeedsDisambiguationFlowStrategy.shouldClearContext) = 0;
  *(unsigned char *)(v0 + direct field offset for CallingIntentContactNeedsDisambiguationFlowStrategy.requiresReprompt) = 0;
  return result;
}

uint64_t CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForNeedsDisambiguationOutput(app:persons:intent:parameterName:intentResolutionResult:responseGenerator:device:nlContextUpdate:crrOutputGenerator:)()
{
  OUTLINED_FUNCTION_1_0();
  *(void *)(v1 + 176) = v22;
  *(void *)(v1 + 184) = v0;
  *(_OWORD *)(v1 + 160) = v21;
  *(void *)(v1 + 144) = v2;
  *(void *)(v1 + 152) = v3;
  *(void *)(v1 + 128) = v4;
  *(void *)(v1 + 136) = v5;
  *(void *)(v1 + 120) = v6;
  OUTLINED_FUNCTION_2();
  *(void *)(v1 + 192) = v7;
  uint64_t v8 = type metadata accessor for PhoneError();
  *(void *)(v1 + 200) = v8;
  OUTLINED_FUNCTION_11_0(v8);
  *(void *)(v1 + 208) = OUTLINED_FUNCTION_35();
  uint64_t v9 = type metadata accessor for ContactResolutionPatternID();
  *(void *)(v1 + 216) = v9;
  OUTLINED_FUNCTION_19_0(v9);
  *(void *)(v1 + 224) = v10;
  *(void *)(v1 + 232) = OUTLINED_FUNCTION_35();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (needsAuthentication: Bool, patternId: ContactResolutionPatternID));
  *(void *)(v1 + 240) = v11;
  OUTLINED_FUNCTION_11_0(v11);
  *(void *)(v1 + 248) = OUTLINED_FUNCTION_28_2();
  *(void *)(v1 + 256) = swift_task_alloc();
  *(void *)(v1 + 264) = swift_task_alloc();
  *(void *)(v1 + 272) = swift_task_alloc();
  *(void *)(v1 + 280) = swift_task_alloc();
  *(void *)(v1 + 288) = swift_task_alloc();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_11_0(v12);
  *(void *)(v1 + 296) = OUTLINED_FUNCTION_35();
  uint64_t v13 = type metadata accessor for DialogPhase();
  OUTLINED_FUNCTION_11_0(v13);
  *(void *)(v1 + 304) = OUTLINED_FUNCTION_35();
  uint64_t v14 = type metadata accessor for OutputGenerationManifest();
  *(void *)(v1 + 312) = v14;
  OUTLINED_FUNCTION_19_0(v14);
  *(void *)(v1 + 320) = v15;
  *(void *)(v1 + 328) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v16, v17, v18);
}

{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned char *v17;
  uint64_t v18;
  char v19;
  unsigned char *v20;
  unsigned char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(void);
  void (*v25)(void);
  NSObject *v26;
  os_log_type_t v27;
  BOOL v28;
  unsigned char *v29;
  unsigned char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(void);
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  void (*v40)(void);
  uint64_t v41;
  uint64_t *v42;
  void (*v43)(void);
  uint64_t v44;
  uint64_t (*v45)(uint64_t);
  int v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  os_log_type_t v94;
  _WORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  Swift::String v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(void);
  void (*v104)(void);
  uint64_t v106;
  void (*v107)(void);
  unsigned __int8 *v108;
  NSObject *log;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;

  App.appIdentifier.getter();
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0xE000000000000000;
  }
  if (App.isFirstParty()())
  {
    uint64_t v3 = *(void **)(v0 + 160);
    swift_getAssociatedTypeWitness();
    OUTLINED_FUNCTION_78_2();
    uint64_t v4 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness() + 8) + 16);
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
    uint64_t v6 = swift_checkMetadataState();
    uint64_t v7 = v5(v6, v4);
    static UserFacingCallingAppUtils.getAppBundleId(preferredCallProvider:deviceState:)(v7, v3);
    uint64_t v9 = v8;
    swift_bridgeObjectRelease();
    uint64_t v2 = v9;
  }
  *(void *)(v0 + 336) = v2;
  uint64_t v10 = *(void *)(v0 + 296);
  uint64_t v11 = *(void *)(v0 + 168);
  static DialogPhase.clarification.getter();
  OutputGenerationManifest.init(dialogPhase:_:)();
  outlined init with copy of ConfirmationResponse?(v11, v10, &demangling cache variable for type metadata for NLContextUpdate?);
  OutputGenerationManifest.nlContextUpdate.setter();
  type metadata accessor for CATGlobals();
  swift_bridgeObjectRetain();
  CATGlobals.__allocating_init()();
  OUTLINED_FUNCTION_62_0();
  type metadata accessor for ContactResolutionPatternGenerator();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_116_3();
  *(void *)(v0 + 344) = ContactResolutionPatternGenerator.init(appBundleId:globals:)();
  uint64_t v12 = OUTLINED_FUNCTION_38();
  outlined init with copy of ConfirmationResponse?(v12, v13, v14);
  if (*(void *)(v0 + 80))
  {
    outlined init with take of AppSelectionSignalComponent((long long *)(v0 + 56), v0 + 16);
  }
  else
  {
    swift_bridgeObjectRetain();
    CATGlobals.__allocating_init()();
    OUTLINED_FUNCTION_62_0();
    uint64_t v15 = type metadata accessor for ContactResolutionSnippetGenerator();
    OUTLINED_FUNCTION_21_0();
    OUTLINED_FUNCTION_116_3();
    uint64_t v16 = ContactResolutionSnippetGenerator.init(appBundleId:globals:)();
    *(void *)(v0 + 40) = v15;
    *(void *)(v0 + 48) = &protocol witness table for ContactResolutionSnippetGenerator;
    *(void *)(v0 + 16) = v16;
    outlined destroy of UUID?(v0 + 56, &demangling cache variable for type metadata for ContactResolutionSnippetGenerating?);
  }
  uint64_t v17 = *(unsigned char **)(v0 + 288);
  uint64_t v18 = *(void *)(v0 + 240);
  uint64_t v19 = static ContactResolutionHelper.nullHandleLabelHelper(contacts:)() & 1;
  *uint64_t v17 = v19;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v20 = *(unsigned char **)(v0 + 280);
  v112 = *(void *)(v0 + 272);
  long long v21 = *(unsigned char **)(v0 + 264);
  uint64_t v110 = *(void *)(v0 + 256);
  uint64_t v22 = *(void *)(v0 + 224);
  uint64_t v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.siriPhone);
  *uint64_t v20 = v19;
  uint64_t v24 = *(void (**)(void))(v22 + 16);
  OUTLINED_FUNCTION_150_3();
  v24();
  outlined init with take of AnnotatedApp?((uint64_t)v20, v112, &demangling cache variable for type metadata for (needsAuthentication: Bool, patternId: ContactResolutionPatternID));
  uint64_t v111 = v18;
  *long long v21 = v19;
  uint64_t v25 = v24;
  OUTLINED_FUNCTION_150_3();
  v24();
  outlined init with take of AnnotatedApp?((uint64_t)v21, v110, &demangling cache variable for type metadata for (needsAuthentication: Bool, patternId: ContactResolutionPatternID));
  uint64_t v26 = Logger.logObject.getter();
  uint64_t v27 = static os_log_type_t.debug.getter();
  uint64_t v28 = os_log_type_enabled(v26, v27);
  uint64_t v29 = *(unsigned char **)(v0 + 272);
  if (v28)
  {
    uint64_t v108 = *(unsigned __int8 **)(v0 + 256);
    log = v26;
    uint64_t v30 = *(unsigned char **)(v0 + 248);
    uint64_t v31 = *(void *)(v0 + 216);
    uint64_t v32 = swift_slowAlloc();
    OUTLINED_FUNCTION_14_0();
    *(_DWORD *)uint64_t v32 = 136315394;
    uint64_t v33 = *(int *)(v111 + 48);
    char *v30 = *v29;
    ((void (*)(unsigned char *, unsigned char *, uint64_t))v25)(&v30[v33], &v29[v33], v31);
    ContactResolutionPatternID.rawValue.getter();
    uint64_t v107 = v25;
    OUTLINED_FUNCTION_26_0();
    v34();
    uint64_t v35 = OUTLINED_FUNCTION_38();
    *(void *)(v0 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of UUID?((uint64_t)v29, &demangling cache variable for type metadata for (needsAuthentication: Bool, patternId: ContactResolutionPatternID));
    *(_WORD *)(v32 + 12) = 1024;
    unint64_t v38 = *(int *)(v111 + 48);
    unint64_t v39 = *v108;
    char *v30 = v39;
    ((void (*)(unsigned char *, unsigned __int8 *, uint64_t))v107)(&v30[v38], &v108[v38], v31);
    OUTLINED_FUNCTION_26_0();
    v40();
    uint64_t v41 = OUTLINED_FUNCTION_78_2();
    outlined destroy of UUID?(v41, v42);
    *(_DWORD *)(v0 + 432) = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, log, v27, "#CallingIntentContactNeedsDisambiguationFlowStrategy ContactResolutionHelper.NullLabelHelper results - Pattern: %s NeedsAuth: %{BOOL}d", (uint8_t *)v32, 0x12u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
    outlined destroy of UUID?(*(void *)(v0 + 256), &demangling cache variable for type metadata for (needsAuthentication: Bool, patternId: ContactResolutionPatternID));
    outlined destroy of UUID?((uint64_t)v29, &demangling cache variable for type metadata for (needsAuthentication: Bool, patternId: ContactResolutionPatternID));
  }
  OUTLINED_FUNCTION_12();
  v43();
  uint64_t v44 = OUTLINED_FUNCTION_96();
  uint64_t v46 = v45(v44);
  if (v46 == enum case for ContactResolutionPatternID.detailedDisambiguationContactNames(_:))
  {
    OUTLINED_FUNCTION_95_9();
    uint64_t v47 = swift_task_alloc();
    uint64_t v48 = (void *)OUTLINED_FUNCTION_121_4(v47);
    *uint64_t v48 = v49;
    v48[1] = CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForNeedsDisambiguationOutput(app:persons:intent:parameterName:intentResolutionResult:responseGenerator:device:nlContextUpdate:crrOutputGenerator:);
    OUTLINED_FUNCTION_16_62();
    OUTLINED_FUNCTION_12_45();
    return CallingIntentContactNeedsDisambiguationFlowStrategy.getDetailedDisambiguationContactNames(sharedGlobals:outputManifest:responseGenerator:crrPatternGenerator:crrOutputGenerator:persons:)();
  }
  else if (v46 == enum case for ContactResolutionPatternID.simpleDisambiguationUniqueLabels(_:))
  {
    OUTLINED_FUNCTION_95_9();
    swift_task_alloc();
    OUTLINED_FUNCTION_31_2();
    *(void *)(v0 + 352) = v52;
    *uint64_t v52 = v53;
    v52[1] = CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForNeedsDisambiguationOutput(app:persons:intent:parameterName:intentResolutionResult:responseGenerator:device:nlContextUpdate:crrOutputGenerator:);
    OUTLINED_FUNCTION_16_62();
    OUTLINED_FUNCTION_12_45();
    return CallingIntentContactNeedsDisambiguationFlowStrategy.getSimpleDisambiguationUniqueLabels(sharedGlobals:outputManifest:responseGenerator:crrPatternGenerator:crrOutputGenerator:persons:)(v54, v55, v56, v57, v58, v59, v60);
  }
  else if (v46 == enum case for ContactResolutionPatternID.simpleDisambiguationMixedLabels(_:))
  {
    OUTLINED_FUNCTION_95_9();
    swift_task_alloc();
    OUTLINED_FUNCTION_31_2();
    *(void *)(v0 + 384) = v62;
    void *v62 = v63;
    v62[1] = CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForNeedsDisambiguationOutput(app:persons:intent:parameterName:intentResolutionResult:responseGenerator:device:nlContextUpdate:crrOutputGenerator:);
    OUTLINED_FUNCTION_16_62();
    OUTLINED_FUNCTION_12_45();
    return CallingIntentContactNeedsDisambiguationFlowStrategy.getSimpleDisambiguationMixedLabels(sharedGlobals:outputManifest:responseGenerator:crrPatternGenerator:crrOutputGenerator:persons:)(v64, v65, v66, v67, v68, v69, v70);
  }
  else if (v46 == enum case for ContactResolutionPatternID.detailedDisambiguationMixedLabelsNoWindowing(_:))
  {
    OUTLINED_FUNCTION_95_9();
    swift_task_alloc();
    OUTLINED_FUNCTION_31_2();
    *(void *)(v0 + 400) = v72;
    *uint64_t v72 = v73;
    v72[1] = CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForNeedsDisambiguationOutput(app:persons:intent:parameterName:intentResolutionResult:responseGenerator:device:nlContextUpdate:crrOutputGenerator:);
    OUTLINED_FUNCTION_16_62();
    OUTLINED_FUNCTION_12_45();
    return CallingIntentContactNeedsDisambiguationFlowStrategy.getDetailedDisambiguationMixedLabels(sharedGlobals:outputManifest:responseGenerator:crrPatternGenerator:crrOutputGenerator:persons:)(v74, v75, v76, v77, v78, v79, v80);
  }
  else
  {
    if (v46 != enum case for ContactResolutionPatternID.detailedDisambiguationMultipleHandlesSameLabelNoWindowing(_:))
    {
      uint64_t v93 = (void *)Logger.logObject.getter();
      uint64_t v94 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_18(v94))
      {
        uint64_t v95 = (_WORD *)OUTLINED_FUNCTION_7_2();
        OUTLINED_FUNCTION_32_2(v95);
        OUTLINED_FUNCTION_25_4(&dword_0, v96, v97, "#CallingIntentContactNeedsDisambiguationFlowStrategy makePromptForNeedsDisambiguationOutput: chose ContactResolutionPattern that is not supported");
        OUTLINED_FUNCTION_6();
      }
      uint64_t v98 = *(void *)(v0 + 288);
      uint64_t v99 = *(void **)(v0 + 208);

      _StringGuts.grow(_:)(23);
      *(void *)(v0 + 96) = 0;
      *(void *)(v0 + 104) = 0xE000000000000000;
      v100._object = (void *)0x800000000049D780;
      v100._countAndFlagsBits = 0xD000000000000015;
      String.append(_:)(v100);
      _print_unlocked<A, B>(_:_:)();
      uint64_t v101 = *(void *)(v0 + 104);
      *uint64_t v99 = *(void *)(v0 + 96);
      v99[1] = v101;
      v99[2] = 0xD000000000000055;
      v99[3] = 0x800000000049D7A0;
      v99[4] = 0xD00000000000009CLL;
      v99[5] = 0x800000000049D800;
      v99[6] = 367;
      swift_storeEnumTagMultiPayload();
      _s11SiriKitFlow5InputVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError, (void (*)(uint64_t))type metadata accessor for PhoneError);
      OUTLINED_FUNCTION_4_8();
      PhoneError.logged()(v102);
      _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_11((uint64_t)v99, (void (*)(void))type metadata accessor for PhoneError);
      swift_willThrow();
      swift_release();
      swift_bridgeObjectRelease();
      outlined destroy of UUID?(v98, &demangling cache variable for type metadata for (needsAuthentication: Bool, patternId: ContactResolutionPatternID));
      OUTLINED_FUNCTION_26_0();
      v103();
      __swift_destroy_boxed_opaque_existential_1(v0 + 16);
      OUTLINED_FUNCTION_5_30();
      v104();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      OUTLINED_FUNCTION_47_0();
      OUTLINED_FUNCTION_12_45();
      __asm { BRAA            X1, X16 }
    }
    OUTLINED_FUNCTION_95_9();
    uint64_t v82 = swift_task_alloc();
    uint64_t v83 = (void *)OUTLINED_FUNCTION_122_5(v82);
    *uint64_t v83 = v84;
    v83[1] = CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForNeedsDisambiguationOutput(app:persons:intent:parameterName:intentResolutionResult:responseGenerator:device:nlContextUpdate:crrOutputGenerator:);
    OUTLINED_FUNCTION_16_62();
    OUTLINED_FUNCTION_12_45();
    return CallingIntentContactNeedsDisambiguationFlowStrategy.getDetailedDisambiguationMultipleHandlesSameLabel(sharedGlobals:outputManifest:responseGenerator:crrPatternGenerator:crrOutputGenerator:persons:)(v85, v86, v87, v88, v89, v90, v91);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_7();
  char *v5 = v4;
  *(void *)(v6 + 360) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_7();
  char *v5 = v4;
  *(void *)(v6 + 376) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_7();
  char *v5 = v4;
  *(void *)(v6 + 392) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_7();
  char *v5 = v4;
  *(void *)(v6 + 408) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_7();
  char *v5 = v4;
  *(void *)(v6 + 424) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = v0[40];
  uint64_t v2 = v0[41];
  uint64_t v3 = v0[39];
  uint64_t v4 = v0[36];
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of UUID?(v4, &demangling cache variable for type metadata for (needsAuthentication: Bool, patternId: ContactResolutionPatternID));
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  return v5();
}

uint64_t CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForNeedsDisambiguationOutput(app:persons:intent:parameterName:intentResolutionResult:responseGenerator:device:nlContextUpdate:crrOutputGenerator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_30_12();
  OUTLINED_FUNCTION_34_34();
  swift_bridgeObjectRelease();
  outlined destroy of UUID?(v15, &demangling cache variable for type metadata for (needsAuthentication: Bool, patternId: ContactResolutionPatternID));
  uint64_t v16 = OUTLINED_FUNCTION_76_1();
  v17(v16);
  __swift_destroy_boxed_opaque_existential_1(v14);
  OUTLINED_FUNCTION_19_46();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_22_15();
  OUTLINED_FUNCTION_28_1();
  return v19(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10, a11, a12, a13, a14);
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  uint64_t v18;
  uint64_t (*v19)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_30_12();
  OUTLINED_FUNCTION_34_34();
  swift_bridgeObjectRelease();
  outlined destroy of UUID?(v15, &demangling cache variable for type metadata for (needsAuthentication: Bool, patternId: ContactResolutionPatternID));
  uint64_t v16 = OUTLINED_FUNCTION_76_1();
  v17(v16);
  __swift_destroy_boxed_opaque_existential_1(v14);
  OUTLINED_FUNCTION_19_46();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_22_15();
  OUTLINED_FUNCTION_28_1();
  return v19(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10, a11, a12, a13, a14);
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  uint64_t v18;
  uint64_t (*v19)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_30_12();
  OUTLINED_FUNCTION_34_34();
  swift_bridgeObjectRelease();
  outlined destroy of UUID?(v15, &demangling cache variable for type metadata for (needsAuthentication: Bool, patternId: ContactResolutionPatternID));
  uint64_t v16 = OUTLINED_FUNCTION_76_1();
  v17(v16);
  __swift_destroy_boxed_opaque_existential_1(v14);
  OUTLINED_FUNCTION_19_46();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_22_15();
  OUTLINED_FUNCTION_28_1();
  return v19(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10, a11, a12, a13, a14);
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  uint64_t v18;
  uint64_t (*v19)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_30_12();
  OUTLINED_FUNCTION_34_34();
  swift_bridgeObjectRelease();
  outlined destroy of UUID?(v15, &demangling cache variable for type metadata for (needsAuthentication: Bool, patternId: ContactResolutionPatternID));
  uint64_t v16 = OUTLINED_FUNCTION_76_1();
  v17(v16);
  __swift_destroy_boxed_opaque_existential_1(v14);
  OUTLINED_FUNCTION_19_46();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_22_15();
  OUTLINED_FUNCTION_28_1();
  return v19(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10, a11, a12, a13, a14);
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  uint64_t v18;
  uint64_t (*v19)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_30_12();
  OUTLINED_FUNCTION_34_34();
  swift_bridgeObjectRelease();
  outlined destroy of UUID?(v15, &demangling cache variable for type metadata for (needsAuthentication: Bool, patternId: ContactResolutionPatternID));
  uint64_t v16 = OUTLINED_FUNCTION_76_1();
  v17(v16);
  __swift_destroy_boxed_opaque_existential_1(v14);
  OUTLINED_FUNCTION_19_46();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_22_15();
  OUTLINED_FUNCTION_28_1();
  return v19(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10, a11, a12, a13, a14);
}

uint64_t closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForNeedsDisambiguationOutput(app:persons:intent:parameterName:intentResolutionResult:responseGenerator:device:nlContextUpdate:crrOutputGenerator:)()
{
  return OutputGenerationManifest.responseViewId.setter();
}

uint64_t CallingIntentContactNeedsDisambiguationFlowStrategy.getSimpleDisambiguationUniqueLabels(sharedGlobals:outputManifest:responseGenerator:crrPatternGenerator:crrOutputGenerator:persons:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return OUTLINED_FUNCTION_21_1((uint64_t)CallingIntentContactNeedsDisambiguationFlowStrategy.getSimpleDisambiguationUniqueLabels(sharedGlobals:outputManifest:responseGenerator:crrPatternGenerator:crrOutputGenerator:persons:));
}

uint64_t CallingIntentContactNeedsDisambiguationFlowStrategy.getSimpleDisambiguationUniqueLabels(sharedGlobals:outputManifest:responseGenerator:crrPatternGenerator:crrOutputGenerator:persons:)()
{
  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = OUTLINED_FUNCTION_10_74();
  v2(v1);
  OUTLINED_FUNCTION_23();
  (*(void (**)(void))(v3 + 248))();
  OUTLINED_FUNCTION_24_22();
  if (v0)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_25_0(v4, (uint64_t)static Logger.siriPhone);
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_18(v5))
    {
      uint64_t v6 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_32_2(v6);
      OUTLINED_FUNCTION_25_4(&dword_0, v7, v8, "#CallingIntentContactNeedsDisambiguationFlowStrategy makePromptForNeedsDisambiguationOutput: generating simple disambiguation for unique labels by using output result generator");
      OUTLINED_FUNCTION_6();
    }
    OUTLINED_FUNCTION_114_3();
    OUTLINED_FUNCTION_40_32();
    uint64_t v9 = swift_task_alloc();
    uint64_t v10 = (void *)OUTLINED_FUNCTION_78_9(v9);
    *uint64_t v10 = v11;
    v10[1] = CallingIntentContactNeedsDisambiguationFlowStrategy.getSimpleDisambiguationUniqueLabels(sharedGlobals:outputManifest:responseGenerator:crrPatternGenerator:crrOutputGenerator:persons:);
    OUTLINED_FUNCTION_109_3();
    OUTLINED_FUNCTION_18_43();
    OUTLINED_FUNCTION_20_2();
    return dispatch thunk of ContactResolutionSnippetGenerating.generateSimpleDisambiguationUniqueLabels(contacts:directInvocationID:outputGenerationManifest:)(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    uint64_t v21 = (void *)OUTLINED_FUNCTION_25_0(v20, (uint64_t)static Logger.siriPhone);
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_18(v22))
    {
      uint64_t v23 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_32_2(v23);
      OUTLINED_FUNCTION_25_4(&dword_0, v24, v25, "#CallingIntentContactNeedsDisambiguationFlowStrategy makePromptForNeedsDisambiguationOutput: generating simple disambiguation for unique labels by using pattern generator");
      OUTLINED_FUNCTION_6();
    }

    uint64_t v26 = swift_task_alloc();
    uint64_t v27 = (void *)OUTLINED_FUNCTION_127_3(v26);
    void *v27 = v28;
    v27[1] = CallingIntentContactNeedsDisambiguationFlowStrategy.getSimpleDisambiguationUniqueLabels(sharedGlobals:outputManifest:responseGenerator:crrPatternGenerator:crrOutputGenerator:persons:);
    OUTLINED_FUNCTION_144_5();
    OUTLINED_FUNCTION_24_43(v29);
    OUTLINED_FUNCTION_20_2();
    return ContactResolutionPatternGenerator.generateSimpleDisambiguationUniqueLabels(contacts:directInvocationID:)(v30, v31, v32, v33, v34, v35, v36, v37);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_7();
  char *v5 = v4;
  *(void *)(v6 + 120) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  OUTLINED_FUNCTION_143_5(v4);
  if (v0)
  {
    OUTLINED_FUNCTION_47_0();
    return v5();
  }
  else
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v7, v8, v9);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_39_29();
  char v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_79_10(v0);
  *uint64_t v1 = v2;
  v1[1] = CallingIntentContactNeedsDisambiguationFlowStrategy.getSimpleDisambiguationUniqueLabels(sharedGlobals:outputManifest:responseGenerator:crrPatternGenerator:crrOutputGenerator:persons:);
  uint64_t v3 = OUTLINED_FUNCTION_31_40();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)(v3, v4, v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_7();
  char *v5 = v4;
  *(void *)(v6 + 152) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t CallingIntentContactNeedsDisambiguationFlowStrategy.getDetailedDisambiguationMultipleHandlesSameLabel(sharedGlobals:outputManifest:responseGenerator:crrPatternGenerator:crrOutputGenerator:persons:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return OUTLINED_FUNCTION_21_1((uint64_t)CallingIntentContactNeedsDisambiguationFlowStrategy.getDetailedDisambiguationMultipleHandlesSameLabel(sharedGlobals:outputManifest:responseGenerator:crrPatternGenerator:crrOutputGenerator:persons:));
}

uint64_t CallingIntentContactNeedsDisambiguationFlowStrategy.getDetailedDisambiguationMultipleHandlesSameLabel(sharedGlobals:outputManifest:responseGenerator:crrPatternGenerator:crrOutputGenerator:persons:)()
{
  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = OUTLINED_FUNCTION_10_74();
  v2(v1);
  OUTLINED_FUNCTION_23();
  (*(void (**)(void))(v3 + 248))();
  OUTLINED_FUNCTION_24_22();
  if (v0)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_25_0(v4, (uint64_t)static Logger.siriPhone);
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_18(v5))
    {
      uint64_t v6 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_32_2(v6);
      OUTLINED_FUNCTION_25_4(&dword_0, v7, v8, "#CallingIntentContactNeedsDisambiguationFlowStrategy makePromptForNeedsDisambiguationOutput: generating detailed disambiguation for multiple handles with the same label by using output result generator");
      OUTLINED_FUNCTION_6();
    }
    OUTLINED_FUNCTION_114_3();
    OUTLINED_FUNCTION_40_32();
    uint64_t v9 = swift_task_alloc();
    uint64_t v10 = (void *)OUTLINED_FUNCTION_78_9(v9);
    *uint64_t v10 = v11;
    v10[1] = CallingIntentContactNeedsDisambiguationFlowStrategy.getSimpleDisambiguationUniqueLabels(sharedGlobals:outputManifest:responseGenerator:crrPatternGenerator:crrOutputGenerator:persons:);
    OUTLINED_FUNCTION_109_3();
    OUTLINED_FUNCTION_18_43();
    OUTLINED_FUNCTION_20_2();
    return dispatch thunk of ContactResolutionSnippetGenerating.generateDetailedDisambiguationForMultipleHandlesWithSameLabel(contacts:directInvocationID:outputGenerationManifest:)(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    uint64_t v21 = (void *)OUTLINED_FUNCTION_25_0(v20, (uint64_t)static Logger.siriPhone);
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_18(v22))
    {
      uint64_t v23 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_32_2(v23);
      OUTLINED_FUNCTION_25_4(&dword_0, v24, v25, "#CallingIntentContactNeedsDisambiguationFlowStrategy makePromptForNeedsDisambiguationOutput: generating detailed disambiguation for multiple handles with the same label by using pattern generator");
      OUTLINED_FUNCTION_6();
    }

    uint64_t v26 = swift_task_alloc();
    uint64_t v27 = (void *)OUTLINED_FUNCTION_127_3(v26);
    void *v27 = v28;
    v27[1] = CallingIntentContactNeedsDisambiguationFlowStrategy.getSimpleDisambiguationUniqueLabels(sharedGlobals:outputManifest:responseGenerator:crrPatternGenerator:crrOutputGenerator:persons:);
    OUTLINED_FUNCTION_144_5();
    OUTLINED_FUNCTION_24_43(v29);
    OUTLINED_FUNCTION_20_2();
    return ContactResolutionPatternGenerator.generateDetailedDisambiguationMultipleHandlesSameLabelNoWindowing(contacts:disambiguationResultDirectInvocation:)(v30, v31, v32, v33, v34, v35, v36, v37);
  }
}

uint64_t CallingIntentContactNeedsDisambiguationFlowStrategy.getSimpleDisambiguationMixedLabels(sharedGlobals:outputManifest:responseGenerator:crrPatternGenerator:crrOutputGenerator:persons:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return OUTLINED_FUNCTION_21_1((uint64_t)CallingIntentContactNeedsDisambiguationFlowStrategy.getSimpleDisambiguationMixedLabels(sharedGlobals:outputManifest:responseGenerator:crrPatternGenerator:crrOutputGenerator:persons:));
}

uint64_t CallingIntentContactNeedsDisambiguationFlowStrategy.getSimpleDisambiguationMixedLabels(sharedGlobals:outputManifest:responseGenerator:crrPatternGenerator:crrOutputGenerator:persons:)()
{
  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = OUTLINED_FUNCTION_10_74();
  v2(v1);
  OUTLINED_FUNCTION_23();
  (*(void (**)(void))(v3 + 248))();
  OUTLINED_FUNCTION_24_22();
  if (v0)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_25_0(v4, (uint64_t)static Logger.siriPhone);
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_18(v5))
    {
      uint64_t v6 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_32_2(v6);
      OUTLINED_FUNCTION_25_4(&dword_0, v7, v8, "#CallingIntentContactNeedsDisambiguationFlowStrategy makePromptForNeedsDisambiguationOutput: generating simple disambiguation for 2 or 3 mixed handles by using output result generator");
      OUTLINED_FUNCTION_6();
    }
    OUTLINED_FUNCTION_114_3();
    OUTLINED_FUNCTION_40_32();
    uint64_t v9 = swift_task_alloc();
    uint64_t v10 = (void *)OUTLINED_FUNCTION_78_9(v9);
    *uint64_t v10 = v11;
    v10[1] = CallingIntentContactNeedsDisambiguationFlowStrategy.getSimpleDisambiguationUniqueLabels(sharedGlobals:outputManifest:responseGenerator:crrPatternGenerator:crrOutputGenerator:persons:);
    OUTLINED_FUNCTION_109_3();
    OUTLINED_FUNCTION_18_43();
    OUTLINED_FUNCTION_20_2();
    return dispatch thunk of ContactResolutionSnippetGenerating.generateSimpleDisambiguationMixedLabels(contacts:directInvocationID:outputGenerationManifest:)(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    uint64_t v21 = (void *)OUTLINED_FUNCTION_25_0(v20, (uint64_t)static Logger.siriPhone);
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_18(v22))
    {
      uint64_t v23 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_32_2(v23);
      OUTLINED_FUNCTION_25_4(&dword_0, v24, v25, "#CallingIntentContactNeedsDisambiguationFlowStrategy makePromptForNeedsDisambiguationOutput: generating simple disambiguation for 2 or 3 mixed handles by using pattern generator");
      OUTLINED_FUNCTION_6();
    }

    uint64_t v26 = swift_task_alloc();
    uint64_t v27 = (void *)OUTLINED_FUNCTION_127_3(v26);
    void *v27 = v28;
    v27[1] = CallingIntentContactNeedsDisambiguationFlowStrategy.getSimpleDisambiguationUniqueLabels(sharedGlobals:outputManifest:responseGenerator:crrPatternGenerator:crrOutputGenerator:persons:);
    OUTLINED_FUNCTION_144_5();
    OUTLINED_FUNCTION_24_43(v29);
    OUTLINED_FUNCTION_20_2();
    return ContactResolutionPatternGenerator.generateSimpleDisambiguationMixedLabels(contacts:directInvocationID:)(v30, v31, v32, v33, v34, v35, v36, v37);
  }
}

uint64_t CallingIntentContactNeedsDisambiguationFlowStrategy.getDetailedDisambiguationMixedLabels(sharedGlobals:outputManifest:responseGenerator:crrPatternGenerator:crrOutputGenerator:persons:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return OUTLINED_FUNCTION_21_1((uint64_t)CallingIntentContactNeedsDisambiguationFlowStrategy.getDetailedDisambiguationMixedLabels(sharedGlobals:outputManifest:responseGenerator:crrPatternGenerator:crrOutputGenerator:persons:));
}

uint64_t CallingIntentContactNeedsDisambiguationFlowStrategy.getDetailedDisambiguationMixedLabels(sharedGlobals:outputManifest:responseGenerator:crrPatternGenerator:crrOutputGenerator:persons:)()
{
  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = OUTLINED_FUNCTION_10_74();
  v2(v1);
  OUTLINED_FUNCTION_23();
  (*(void (**)(void))(v3 + 248))();
  OUTLINED_FUNCTION_24_22();
  if (v0)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_25_0(v4, (uint64_t)static Logger.siriPhone);
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_18(v5))
    {
      uint64_t v6 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_32_2(v6);
      OUTLINED_FUNCTION_25_4(&dword_0, v7, v8, "#CallingIntentContactNeedsDisambiguationFlowStrategy makePromptForNeedsDisambiguationOutput: generating detailed disambiguation for more than 3 mixed handles by using output result generator");
      OUTLINED_FUNCTION_6();
    }
    OUTLINED_FUNCTION_114_3();
    OUTLINED_FUNCTION_40_32();
    uint64_t v9 = swift_task_alloc();
    uint64_t v10 = (void *)OUTLINED_FUNCTION_78_9(v9);
    *uint64_t v10 = v11;
    v10[1] = CallingIntentContactNeedsDisambiguationFlowStrategy.getDetailedDisambiguationMixedLabels(sharedGlobals:outputManifest:responseGenerator:crrPatternGenerator:crrOutputGenerator:persons:);
    OUTLINED_FUNCTION_109_3();
    OUTLINED_FUNCTION_18_43();
    OUTLINED_FUNCTION_20_2();
    return dispatch thunk of ContactResolutionSnippetGenerating.generateDetailedDisambiguationForMixedLabels(contacts:directInvocationID:outputGenerationManifest:)(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    uint64_t v21 = (void *)OUTLINED_FUNCTION_25_0(v20, (uint64_t)static Logger.siriPhone);
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_18(v22))
    {
      uint64_t v23 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_32_2(v23);
      OUTLINED_FUNCTION_25_4(&dword_0, v24, v25, "#CallingIntentContactNeedsDisambiguationFlowStrategy makePromptForNeedsDisambiguationOutput: generating detailed disambiguation for more than 3 mixed handles by using pattern generator");
      OUTLINED_FUNCTION_6();
    }

    uint64_t v26 = swift_task_alloc();
    uint64_t v27 = (void *)OUTLINED_FUNCTION_127_3(v26);
    void *v27 = v28;
    v27[1] = CallingIntentContactNeedsDisambiguationFlowStrategy.getDetailedDisambiguationMixedLabels(sharedGlobals:outputManifest:responseGenerator:crrPatternGenerator:crrOutputGenerator:persons:);
    OUTLINED_FUNCTION_144_5();
    OUTLINED_FUNCTION_24_43(v29);
    OUTLINED_FUNCTION_20_2();
    return ContactResolutionPatternGenerator.generateDetailedDisambiguationMixedLabelsNoWindowing(contacts:disambiguationResultDirectInvocation:)(v30, v31, v32, v33, v34, v35, v36, v37);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_7();
  char *v5 = v4;
  *(void *)(v6 + 120) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  outlined init with take of AppSelectionSignalComponent((long long *)(v0 + 16), *(void *)(v0 + 56));
  OUTLINED_FUNCTION_6_0();
  return v1();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  OUTLINED_FUNCTION_143_5(v4);
  if (v0)
  {
    OUTLINED_FUNCTION_47_0();
    return v5();
  }
  else
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v7, v8, v9);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_39_29();
  char v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_79_10(v0);
  *uint64_t v1 = v2;
  v1[1] = CallingIntentContactNeedsDisambiguationFlowStrategy.getDetailedDisambiguationMixedLabels(sharedGlobals:outputManifest:responseGenerator:crrPatternGenerator:crrOutputGenerator:persons:);
  uint64_t v3 = OUTLINED_FUNCTION_31_40();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)(v3, v4, v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_7();
  char *v5 = v4;
  *(void *)(v6 + 152) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();

  OUTLINED_FUNCTION_6_0();
  return v1();
}

{
  uint64_t (*v0)(void);

  OUTLINED_FUNCTION_47_0();
  return v0();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();

  OUTLINED_FUNCTION_47_0();
  return v1();
}

uint64_t CallingIntentContactNeedsDisambiguationFlowStrategy.getDetailedDisambiguationContactNames(sharedGlobals:outputManifest:responseGenerator:crrPatternGenerator:crrOutputGenerator:persons:)()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_111_6(v1, v2, v3, v4, v5, v6, v7);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WindowedPaginationParameters?);
  OUTLINED_FUNCTION_11_0(v8);
  *(void *)(v0 + 112) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  char v0;
  uint64_t *v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  os_log_type_t v22;
  _WORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  uint64_t v2 = OUTLINED_FUNCTION_10_74();
  v3(v2);
  OUTLINED_FUNCTION_23();
  (*(void (**)(void))(v4 + 248))();
  OUTLINED_FUNCTION_24_22();
  if (v0)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_25_0(v5, (uint64_t)static Logger.siriPhone);
    uint64_t v6 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_18(v6))
    {
      uint64_t v7 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_32_2(v7);
      OUTLINED_FUNCTION_25_4(&dword_0, v8, v9, "#CallingIntentContactNeedsDisambiguationFlowStrategy makePromptForNeedsDisambiguationOutput: generating contact name disambiguation by using output result generator");
      OUTLINED_FUNCTION_6();
    }
    OUTLINED_FUNCTION_114_3();
    OUTLINED_FUNCTION_40_32();
    swift_task_alloc();
    OUTLINED_FUNCTION_31_2();
    v1[15] = (uint64_t)v10;
    *uint64_t v10 = v11;
    v10[1] = CallingIntentContactNeedsDisambiguationFlowStrategy.getDetailedDisambiguationContactNames(sharedGlobals:outputManifest:responseGenerator:crrPatternGenerator:crrOutputGenerator:persons:);
    OUTLINED_FUNCTION_109_3();
    OUTLINED_FUNCTION_18_43();
    OUTLINED_FUNCTION_20_2();
    return dispatch thunk of ContactResolutionSnippetGenerating.generateDetailedDisambiguationContactNames(contacts:directInvocationID:outputGenerationManifest:)(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    uint64_t v21 = (void *)OUTLINED_FUNCTION_25_0(v20, (uint64_t)static Logger.siriPhone);
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_18(v22))
    {
      uint64_t v23 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_32_2(v23);
      OUTLINED_FUNCTION_25_4(&dword_0, v24, v25, "#CallingIntentContactNeedsDisambiguationFlowStrategy makePromptForNeedsDisambiguationOutput: generating contact name disambiguation by using pattern generator");
      OUTLINED_FUNCTION_6();
    }
    uint64_t v26 = v1[14];

    uint64_t v27 = type metadata accessor for WindowedPaginationParameters();
    __swift_storeEnumTagSinglePayload(v26, 1, 1, v27);
    uint64_t v28 = (void *)swift_task_alloc();
    v1[17] = (uint64_t)v28;
    *uint64_t v28 = v1;
    v28[1] = CallingIntentContactNeedsDisambiguationFlowStrategy.getDetailedDisambiguationContactNames(sharedGlobals:outputManifest:responseGenerator:crrPatternGenerator:crrOutputGenerator:persons:);
    OUTLINED_FUNCTION_24_43(v1[13]);
    OUTLINED_FUNCTION_20_2();
    return ContactResolutionPatternGenerator.generateDetailedDisambiguationContactNames(contacts:contactSelectionDirectInvocationID:windowedPaginationParameters:)(v29, v30, v31, v32, v33, v34, v35, v36);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_7();
  char *v5 = v4;
  *(void *)(v6 + 128) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  outlined init with take of AppSelectionSignalComponent((long long *)(v0 + 16), *(void *)(v0 + 56));
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  return v1();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v4 + 112);
  uint64_t v6 = *v1;
  OUTLINED_FUNCTION_5_7();
  char *v7 = v6;
  *(void *)(v9 + 144) = v8;
  *(void *)(v9 + 152) = v0;
  swift_task_dealloc();
  outlined destroy of UUID?(v5, &demangling cache variable for type metadata for WindowedPaginationParameters?);
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v10, v11, v12);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_39_29();
  swift_task_alloc();
  OUTLINED_FUNCTION_31_2();
  *(void *)(v0 + 160) = v1;
  *uint64_t v1 = v2;
  v1[1] = CallingIntentContactNeedsDisambiguationFlowStrategy.getDetailedDisambiguationContactNames(sharedGlobals:outputManifest:responseGenerator:crrPatternGenerator:crrOutputGenerator:persons:);
  uint64_t v3 = OUTLINED_FUNCTION_31_40();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)(v3, v4, v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_7();
  char *v5 = v4;
  *(void *)(v6 + 168) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();

  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  return v1();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v0();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v0();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();

  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v1();
}

uint64_t CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForEmergencyNeedsDisambiguation(app:disambiguationItems:nlContextUpdate:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[7] = v2;
  v1[8] = v0;
  v1[5] = v3;
  v1[6] = v4;
  v1[4] = v5;
  uint64_t v6 = type metadata accessor for PhoneError();
  v1[9] = v6;
  OUTLINED_FUNCTION_11_0(v6);
  v1[10] = OUTLINED_FUNCTION_35();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationItemWithDirectInvocationModel?);
  OUTLINED_FUNCTION_11_0(v7);
  v1[11] = OUTLINED_FUNCTION_35();
  uint64_t v8 = type metadata accessor for DisambiguationItemWithDirectInvocationModel(0);
  v1[12] = v8;
  OUTLINED_FUNCTION_19_0(v8);
  v1[13] = v9;
  v1[14] = OUTLINED_FUNCTION_28_2();
  v1[15] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for DialogPhase();
  OUTLINED_FUNCTION_11_0(v10);
  v1[16] = OUTLINED_FUNCTION_35();
  uint64_t v11 = type metadata accessor for OutputGenerationManifest();
  v1[17] = v11;
  OUTLINED_FUNCTION_19_0(v11);
  v1[18] = v12;
  v1[19] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v13, v14, v15);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  if (v0) {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  BOOL v16;
  void *v17;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;

  uint64_t v1 = *(void *)(v0 + 88);
  if (__swift_getEnumTagSinglePayload(v1, 1, *(void *)(v0 + 96)) == 1)
  {
    outlined destroy of UUID?(v1, &demangling cache variable for type metadata for DisambiguationItemWithDirectInvocationModel?);
    uint64_t v2 = *(void *)(v0 + 200);
  }
  else
  {
    outlined init with take of DisambiguationItemWithDirectInvocationModel(v1, *(void *)(v0 + 120));
    uint64_t v3 = OUTLINED_FUNCTION_20_7();
    outlined init with copy of LocalEmergencyCallDisambiguationModel(v3, v4);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v2 = *(void *)(v0 + 200);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, *(void *)(v0 + 200));
    }
    uint64_t v7 = *(void *)(v2 + 16);
    uint64_t v6 = *(void *)(v2 + 24);
    if (v7 >= v6 >> 1) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1, v2);
    }
    uint64_t v8 = *(void *)(v0 + 112);
    uint64_t v9 = *(void *)(v0 + 120);
    uint64_t v10 = *(void *)(v0 + 104);
    *(void *)(v2 + 16) = v7 + 1;
    outlined init with take of DisambiguationItemWithDirectInvocationModel(v8, v2+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(void *)(v10 + 72) * v7);
    _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_11(v9, (void (*)(void))type metadata accessor for DisambiguationItemWithDirectInvocationModel);
  }
  uint64_t v11 = *(void *)(v0 + 192) + 1;
  if (v11 == *(void *)(v0 + 168))
  {
    swift_bridgeObjectRelease();
    *(void *)(v0 + 184) = v2;
    uint64_t v12 = *(unsigned __int8 *)(v0 + 252);
    uint64_t v13 = *(void *)(v0 + 56);
    static DialogPhase.clarification.getter();
    *(void *)(swift_task_alloc() + 16) = v13;
    OutputGenerationManifest.init(dialogPhase:_:)();
    swift_task_dealloc();
    uint64_t v14 = Logger.logObject.getter();
    uint64_t v15 = static os_log_type_t.debug.getter();
    uint64_t v16 = os_log_type_enabled(v14, v15);
    if (v12)
    {
      if (v16)
      {
        *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
        OUTLINED_FUNCTION_138_3(&dword_0, v14, v15, "#CallingIntentContactNeedsDisambiguationFlowStrategy makePromptForEmergencyNeedsDisambiguation for local emergency");
        OUTLINED_FUNCTION_6();
      }

      uint64_t v17 = (void *)swift_task_alloc();
      *(void *)(v0 + 232) = v17;
      *uint64_t v17 = v0;
      v17[1] = CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForEmergencyNeedsDisambiguation(app:disambiguationItems:nlContextUpdate:);
      return CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForLocalEmergencyDisambiguation(app:disambiguationItems:outputGenerationManifest:)();
    }
    else
    {
      if (v16)
      {
        *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
        OUTLINED_FUNCTION_138_3(&dword_0, v14, v15, "#CallingIntentContactNeedsDisambiguationFlowStrategy makePromptForEmergencyNeedsDisambiguation for foreign emergency");
        OUTLINED_FUNCTION_6();
      }

      uint64_t v24 = (void *)swift_task_alloc();
      *(void *)(v0 + 216) = v24;
      *uint64_t v24 = v0;
      v24[1] = CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForEmergencyNeedsDisambiguation(app:disambiguationItems:nlContextUpdate:);
      return CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForForeignEmergencyDisambiguation(disambiguationItems:outputGenerationManifest:)();
    }
  }
  else
  {
    *(void *)(v0 + 192) = v11;
    *(void *)(v0 + 200) = v2;
    uint64_t v19 = *(void *)(v0 + 48)
        + ((*(unsigned __int8 *)(v0 + 248) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 248))
        + *(void *)(v0 + 176) * v11;
    uint64_t v20 = (void *)swift_task_alloc();
    *(void *)(v0 + 208) = v20;
    *uint64_t v20 = v0;
    v20[1] = CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForEmergencyNeedsDisambiguation(app:disambiguationItems:nlContextUpdate:);
    uint64_t v21 = OUTLINED_FUNCTION_130_4();
    return closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForEmergencyNeedsDisambiguation(app:disambiguationItems:nlContextUpdate:)(v21, v19, v22, v23);
  }
}

{
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_21();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 224) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_24_6();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v4, v5, v6);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_18_3();
  (*(void (**)(void, void))(v0[18] + 8))(v0[19], v0[17]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  return v1();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_21();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 240) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_24_6();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v4, v5, v6);
}

{
  void (*v0)(void);
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_30_28();
  v0();
  OUTLINED_FUNCTION_129_5();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v1();
}

{
  void (*v0)(void);
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_30_28();
  v0();
  OUTLINED_FUNCTION_129_5();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v1();
}

uint64_t CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForEmergencyNeedsDisambiguation(app:disambiguationItems:nlContextUpdate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  OUTLINED_FUNCTION_30();
  a23 = v25;
  a24 = v26;
  OUTLINED_FUNCTION_72_4();
  a22 = v24;
  OUTLINED_FUNCTION_22();
  v27 += 40;
  uint64_t v28 = *v27;
  v29._rawValue = (void *)((uint64_t (*)(void))*v27)();
  v30.PhoneCallFlowDelegatePlugin::EmergencyType value = EmergencyType.init(for:)(v29).value;
  *(PhoneCallFlowDelegatePlugin::EmergencyType_optional *)(v24 + 252) = v30;
  if (v30.value == PhoneCallFlowDelegatePlugin_EmergencyType_unknownDefault)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)static Logger.siriPhone);
    swift_retain();
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      a10 = v24 + 16;
      a11 = v24 + 24;
      uint64_t v34 = (_DWORD *)OUTLINED_FUNCTION_47();
      a12 = OUTLINED_FUNCTION_14_0();
      *uint64_t v34 = 136315138;
      a9 = v34 + 1;
      v28();
      type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INPerson);
      uint64_t v35 = Array.description.getter();
      unint64_t v37 = v36;
      swift_bridgeObjectRelease();
      *(void *)(v24 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v37, &a12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      OUTLINED_FUNCTION_24_5(&dword_0, v32, v38, "#CallingIntentContactNeedsDisambiguationFlowStrategy makePromptForEmergencyNeedsDisambiguation called for neither a foreign or a local emergency. %s");
      OUTLINED_FUNCTION_14_30();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {
      swift_release();
    }

    uint64_t v58 = *(void *)(v24 + 80);
    OUTLINED_FUNCTION_96();
    swift_storeEnumTagMultiPayload();
    _s11SiriKitFlow5InputVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError, (void (*)(uint64_t))type metadata accessor for PhoneError);
    OUTLINED_FUNCTION_4_8();
    PhoneError.logged()(v59);
    _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_11(v58, (void (*)(void))type metadata accessor for PhoneError);
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_63_10();
    OUTLINED_FUNCTION_27_3();
    return v61(v60, v61, v62, v63, v64, v65, v66, v67, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  else
  {
    PhoneCallFlowDelegatePlugin::EmergencyType value = v30.value;
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    *(void *)(v24 + 160) = __swift_project_value_buffer(v40, (uint64_t)static Logger.siriPhone);
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_8_4(v42))
    {
      unint64_t v43 = (_DWORD *)OUTLINED_FUNCTION_47();
      a12 = OUTLINED_FUNCTION_14_0();
      *unint64_t v43 = 136315138;
      uint64_t v44 = EmergencyType.description.getter(value);
      *(void *)(v24 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, &a12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_24_5(&dword_0, v41, v46, "#CallingIntentContactNeedsDisambiguationFlowStrategy emergency type is %s");
      OUTLINED_FUNCTION_14_30();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }

    uint64_t v47 = *(void *)(*(void *)(v24 + 48) + 16);
    *(void *)(v24 + 168) = v47;
    if (v47)
    {
      uint64_t v48 = type metadata accessor for SiriKitDisambiguationItemPair();
      OUTLINED_FUNCTION_19_0(v48);
      *(_DWORD *)(v24 + 248) = *(_DWORD *)(v49 + 80);
      *(void *)(v24 + 176) = *(void *)(v50 + 72);
      *(void *)(v24 + 192) = 0;
      *(void *)(v24 + 200) = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      uint64_t v51 = (void *)swift_task_alloc();
      *(void *)(v24 + 208) = v51;
      *uint64_t v51 = v24;
      v51[1] = CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForEmergencyNeedsDisambiguation(app:disambiguationItems:nlContextUpdate:);
      OUTLINED_FUNCTION_130_4();
      OUTLINED_FUNCTION_27_3();
      return closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForEmergencyNeedsDisambiguation(app:disambiguationItems:nlContextUpdate:)(v52, v53, v54, v55);
    }
    else
    {
      *(void *)(v24 + 184) = _swiftEmptyArrayStorage;
      int v68 = *(unsigned __int8 *)(v24 + 252);
      uint64_t v69 = *(void *)(v24 + 56);
      static DialogPhase.clarification.getter();
      *(void *)(swift_task_alloc() + 16) = v69;
      OutputGenerationManifest.init(dialogPhase:_:)();
      swift_task_dealloc();
      uint64_t v70 = Logger.logObject.getter();
      os_log_type_t v71 = static os_log_type_t.debug.getter();
      BOOL v72 = os_log_type_enabled(v70, v71);
      if (v68)
      {
        if (v72)
        {
          *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
          OUTLINED_FUNCTION_10_24(&dword_0, v70, v71, "#CallingIntentContactNeedsDisambiguationFlowStrategy makePromptForEmergencyNeedsDisambiguation for local emergency");
          OUTLINED_FUNCTION_6();
        }

        uint64_t v73 = (void *)swift_task_alloc();
        *(void *)(v24 + 232) = v73;
        *uint64_t v73 = v24;
        v73[1] = CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForEmergencyNeedsDisambiguation(app:disambiguationItems:nlContextUpdate:);
        OUTLINED_FUNCTION_27_3();
        return CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForLocalEmergencyDisambiguation(app:disambiguationItems:outputGenerationManifest:)();
      }
      else
      {
        if (v72)
        {
          *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
          OUTLINED_FUNCTION_10_24(&dword_0, v70, v71, "#CallingIntentContactNeedsDisambiguationFlowStrategy makePromptForEmergencyNeedsDisambiguation for foreign emergency");
          OUTLINED_FUNCTION_6();
        }

        uint64_t v75 = (void *)swift_task_alloc();
        *(void *)(v24 + 216) = v75;
        *uint64_t v75 = v24;
        v75[1] = CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForEmergencyNeedsDisambiguation(app:disambiguationItems:nlContextUpdate:);
        OUTLINED_FUNCTION_27_3();
        return CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForForeignEmergencyDisambiguation(disambiguationItems:outputGenerationManifest:)();
      }
    }
  }
}

uint64_t closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForEmergencyNeedsDisambiguation(app:disambiguationItems:nlContextUpdate:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  *(void *)(v4 + 112) = a2;
  *(void *)(v4 + 120) = a4;
  *(unsigned char *)(v4 + 264) = a3;
  *(void *)(v4 + 104) = a1;
  type metadata accessor for UUID();
  *(void *)(v4 + 128) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v4 + 136) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SiriKitDisambiguationItemPair();
  *(void *)(v4 + 144) = v5;
  *(void *)(v4 + 152) = *(void *)(v5 - 8);
  *(void *)(v4 + 160) = swift_task_alloc();
  return _swift_task_switch(closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForEmergencyNeedsDisambiguation(app:disambiguationItems:nlContextUpdate:), 0, 0);
}

#error "437E1C: call analysis failed (funcsize=603)"

uint64_t closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForEmergencyNeedsDisambiguation(app:disambiguationItems:nlContextUpdate:)()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v9 = *(void *)(v5 + 136);
    swift_errorRelease();
    outlined destroy of UUID?(v9, &demangling cache variable for type metadata for SpeakableString?);
  }
  else
  {
    uint64_t v10 = *(void *)(v5 + 136);
    swift_bridgeObjectRelease();
    *(void *)(v5 + 256) = v3;
    outlined destroy of UUID?(v10, &demangling cache variable for type metadata for SpeakableString?);
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v11, v12, v13);
}

#error "438358: call analysis failed (funcsize=78)"

#error "438480: call analysis failed (funcsize=74)"

uint64_t closure #2 in CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForEmergencyNeedsDisambiguation(app:disambiguationItems:nlContextUpdate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for ResponseMode();
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = type metadata accessor for ResponseType();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  OutputGenerationManifest.canUseServerTTS.setter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  outlined init with copy of ConfirmationResponse?(a2, (uint64_t)v10, &demangling cache variable for type metadata for NLContextUpdate?);
  OutputGenerationManifest.nlContextUpdate.setter();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for ResponseType.disambiguation(_:), v4);
  OutputGenerationManifest.responseType.setter();
  static ResponseMode.voiceForward.getter();
  return OutputGenerationManifest.responseMode.setter();
}

uint64_t CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForForeignEmergencyDisambiguation(disambiguationItems:outputGenerationManifest:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[14] = v2;
  v1[15] = v0;
  v1[12] = v3;
  v1[13] = v4;
  uint64_t v5 = type metadata accessor for PhoneError();
  v1[16] = v5;
  OUTLINED_FUNCTION_11_0(v5);
  v1[17] = OUTLINED_FUNCTION_35();
  uint64_t v6 = type metadata accessor for OutputGenerationManifest();
  v1[18] = v6;
  OUTLINED_FUNCTION_19_0(v6);
  v1[19] = v7;
  v1[20] = OUTLINED_FUNCTION_35();
  uint64_t v8 = type metadata accessor for PhoneSnippetDataModels();
  v1[21] = v8;
  OUTLINED_FUNCTION_11_0(v8);
  v1[22] = OUTLINED_FUNCTION_35();
  uint64_t v9 = type metadata accessor for ForeignEmergencyCallDisambiguationModel(0);
  v1[23] = v9;
  OUTLINED_FUNCTION_11_0(v9);
  v1[24] = OUTLINED_FUNCTION_35();
  uint64_t v10 = type metadata accessor for Locale();
  v1[25] = v10;
  OUTLINED_FUNCTION_19_0(v10);
  v1[26] = v11;
  v1[27] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v12, v13, v14);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 256) = v4;
  *(void *)(v2 + 264) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v8 = v7;
  *(void *)(v5 + 288) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_release();
    swift_release();
    *(void *)(v5 + 296) = v3;
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;

  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_72_4();
  uint64_t v27 = (void *)v0[32];
  uint64_t v28 = (void *)v0[37];
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[24];
  uint64_t v4 = v0[21];
  uint64_t v3 = v0[22];
  uint64_t v6 = v0[19];
  uint64_t v5 = v0[20];
  uint64_t v26 = v0[18];
  uint64_t v7 = v0[14];
  uint64_t v8 = v0[15];
  specialized BidirectionalCollection.last.getter(v0[13], v2);
  specialized Collection.first.getter();
  uint64_t v9 = (void *)(v2 + *(int *)(v1 + 28));
  *uint64_t v9 = 0xD00000000000001ELL;
  v9[1] = 0x80000000004912E0;
  uint64_t v10 = (void *)(v2 + *(int *)(v1 + 24));
  *uint64_t v10 = 0;
  v10[1] = 0xE000000000000000;
  outlined init with copy of LocalEmergencyCallDisambiguationModel(v2, v3);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v7, v26);
  OutputGenerationManifest.responseViewId.setter();
  OutputGenerationManifest.printSupportingDialogInDisplayModes.setter();
  __swift_project_boxed_opaque_existential_1((void *)(v8 + 184), *(void *)(v8 + 208));
  v0[10] = v4;
  v0[11] = _s11SiriKitFlow5InputVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels and conformance PhoneSnippetDataModels, (void (*)(uint64_t))type metadata accessor for PhoneSnippetDataModels);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 7);
  outlined init with copy of LocalEmergencyCallDisambiguationModel(v3, (uint64_t)boxed_opaque_existential_1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_469DA0;
  *(void *)(v12 + 32) = v27;
  *(void *)(v12 + 40) = v28;
  Swift::OpaquePointer v29 = v12;
  specialized Array._endMutation()();
  v0[38] = v29;
  uint64_t v13 = v27;
  uint64_t v14 = v28;
  swift_task_alloc();
  OUTLINED_FUNCTION_31_2();
  v0[39] = (uint64_t)v15;
  *uint64_t v15 = v16;
  v15[1] = CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForForeignEmergencyDisambiguation(disambiguationItems:outputGenerationManifest:);
  OUTLINED_FUNCTION_27_3();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)(v17, v18, v19, v20, v21, v22, v23, v24, v26, v0 + 7);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 56;
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_5_7();
  char *v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v3);
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = *(void **)(v0 + 224);
  swift_release();

  OUTLINED_FUNCTION_96_7();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_20_2();
  return v3(v2, v3, v4, v5, v6, v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = *(void **)(v0 + 256);
  uint64_t v2 = *(void **)(v0 + 224);
  swift_release_n();

  swift_release();
  OUTLINED_FUNCTION_96_7();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_20_2();
  return v4(v3, v4, v5, v6, v7, v8, v9, v10);
}

void CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForForeignEmergencyDisambiguation(disambiguationItems:outputGenerationManifest:)()
{
  OUTLINED_FUNCTION_22();
  unint64_t v2 = (*(uint64_t (**)(void))(v1 + 320))();
  unint64_t v3 = v2;
  if (v2 >> 62) {
    goto LABEL_22;
  }
  uint64_t v4 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v5 = 0;
    while (1)
    {
      id v6 = (v3 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(v3 + 8 * v5 + 32);
      uint64_t v7 = v6;
      v0[28] = v6;
      uint64_t v8 = v5 + 1;
      if (__OFADD__(v5, 1)) {
        break;
      }
      id v9 = [v6 personHandle];
      if (v9)
      {
        uint64_t v10 = v9;
        uint64_t v11 = (char *)[v9 emergencyType];

        if (v11 == (unsigned char *)&dword_0 + 2)
        {
          os_log_type_t v22 = (void *)v0[15];
          swift_bridgeObjectRelease_n();
          type metadata accessor for SirikitDeviceState();
          (*(void (**)(void *__return_ptr))(*v22 + 208))(v26);
          v0[29] = SirikitDeviceState.__allocating_init(from:)();
          v0[30] = v22[14];
          uint64_t v23 = (void *)swift_task_alloc();
          v0[31] = v23;
          void *v23 = v0;
          v23[1] = CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForForeignEmergencyDisambiguation(disambiguationItems:outputGenerationManifest:);
          OUTLINED_FUNCTION_2_49();
          __asm { BRAA            X1, X16 }
        }
      }

      ++v5;
      if (v8 == v4) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_22:
    swift_bridgeObjectRetain();
  }
LABEL_11:
  swift_bridgeObjectRelease_n();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = (void *)OUTLINED_FUNCTION_25_0(v12, (uint64_t)static Logger.siriPhone);
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_18(v14))
  {
    uint64_t v15 = (_WORD *)OUTLINED_FUNCTION_7_2();
    OUTLINED_FUNCTION_32_2(v15);
    OUTLINED_FUNCTION_25_4(&dword_0, v16, v17, "#CallingIntentContactNeedsDisambiguationFlowStrategy Foreign emergency check should guarantee the presence of a nonLocal emergencyType INPerson");
    OUTLINED_FUNCTION_6();
  }
  uint64_t v18 = v0[17];

  OUTLINED_FUNCTION_38();
  swift_storeEnumTagMultiPayload();
  _s11SiriKitFlow5InputVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError, (void (*)(uint64_t))type metadata accessor for PhoneError);
  OUTLINED_FUNCTION_4_8();
  PhoneError.logged()(v19);
  _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_11(v18, (void (*)(void))type metadata accessor for PhoneError);
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_2_49();
  __asm { BRAA            X1, X16 }
}

uint64_t CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForForeignEmergencyDisambiguation(disambiguationItems:outputGenerationManifest:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_30_12();
  uint64_t v31 = (void *)v14[30];
  uint64_t v33 = v14[29];
  uint64_t v16 = v14[27];
  uint64_t v15 = (void *)v14[28];
  uint64_t v17 = v14[26];
  uint64_t v29 = v14[25];
  type metadata accessor for PhonePerson(0);
  swift_retain();
  id v18 = v15;
  static Device.current.getter();
  __swift_project_boxed_opaque_existential_1(v14 + 2, v14[5]);
  OUTLINED_FUNCTION_95_0();
  dispatch thunk of DeviceState.siriLocale.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v14 + 2));
  v14[34] = static PhonePerson.make(phonePerson:options:locale:)(v15, 0, v16);

  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v29);
  uint64_t v30 = *(void *)(class metadata base offset for StartCallCATsSimple + *v31 + 144)
      + **(int **)(class metadata base offset for StartCallCATsSimple + *v31 + 144);
  uint64_t v32 = class metadata base offset for StartCallCATsSimple + *v31 + 144;
  uint64_t v19 = (void *)swift_task_alloc();
  v14[35] = v19;
  *uint64_t v19 = v14;
  v19[1] = CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForForeignEmergencyDisambiguation(disambiguationItems:outputGenerationManifest:);
  OUTLINED_FUNCTION_28_1();
  return v23(v20, v21, v22, v23, v24, v25, v26, v27, v30, v32, v33, a12, a13, a14);
}

uint64_t CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForForeignEmergencyDisambiguation(disambiguationItems:outputGenerationManifest:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_19_13();
  OUTLINED_FUNCTION_48();
  uint64_t v13 = *(void **)(v12 + 256);
  os_log_type_t v14 = *(void **)(v12 + 224);
  uint64_t v15 = *(void *)(v12 + 192);
  uint64_t v16 = *(void *)(v12 + 176);
  uint64_t v18 = *(void *)(v12 + 152);
  uint64_t v17 = *(void *)(v12 + 160);
  uint64_t v19 = *(void *)(v12 + 144);
  uint64_t v29 = *(void *)(v12 + 136);

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_11(v16, (void (*)(void))type metadata accessor for PhoneSnippetDataModels);
  _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_11(v15, (void (*)(void))type metadata accessor for ForeignEmergencyCallDisambiguationModel);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_4_3();
  return v21(v20, v21, v22, v23, v24, v25, v26, v27, v29, a10, a11, a12);
}

uint64_t CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForLocalEmergencyDisambiguation(app:disambiguationItems:outputGenerationManifest:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[227] = v0;
  v1[221] = v2;
  v1[215] = v3;
  v1[209] = v4;
  uint64_t v5 = type metadata accessor for OutputGenerationManifest();
  v1[228] = v5;
  OUTLINED_FUNCTION_19_0(v5);
  v1[229] = v6;
  v1[230] = OUTLINED_FUNCTION_35();
  uint64_t v7 = type metadata accessor for PhoneSnippetDataModels();
  v1[231] = v7;
  OUTLINED_FUNCTION_11_0(v7);
  v1[232] = OUTLINED_FUNCTION_35();
  uint64_t v8 = type metadata accessor for LocalEmergencyCallDisambiguationModel(0);
  v1[233] = v8;
  OUTLINED_FUNCTION_11_0(v8);
  v1[234] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  void *v0;
  void (*v1)(void);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_19_13();
  OUTLINED_FUNCTION_48();
  __swift_project_boxed_opaque_existential_1((void *)(v0[227] + 24), *(void *)(v0[227] + 48));
  OUTLINED_FUNCTION_95_0();
  OUTLINED_FUNCTION_24_2();
  v1();
  v0[201] = static UserFacingCallingAppUtils.getAppBundleId(preferredCallProvider:deviceState:)(1, v0 + 177);
  v0[202] = v2;
  v0[235] = v2;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 177));
  swift_retain_n();
  type metadata accessor for CNContactStore(255, (unint64_t *)&lazy cache variable for type metadata for DialogExecutionResult);
  swift_asyncLet_begin();
  swift_retain_n();
  swift_asyncLet_begin();
  OUTLINED_FUNCTION_4_3();
  return _swift_asyncLet_get_throwing(v3, v4, v5, v6);
}

{
  uint64_t v0;
  void *v1;

  v1[236] = v0;
  if (v0) {
    return OUTLINED_FUNCTION_21_1((uint64_t)CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForLocalEmergencyDisambiguation(app:disambiguationItems:outputGenerationManifest:));
  }
  v1[237] = v1[201];
  return OUTLINED_FUNCTION_21_1((uint64_t)CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForLocalEmergencyDisambiguation(app:disambiguationItems:outputGenerationManifest:));
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  void *v10;
  long long v11;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v13;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  uint64_t v17 = *(void *)(v0 + 1880);
  uint64_t v18 = *(void *)(v0 + 1896);
  uint64_t v1 = *(void **)(v0 + 1872);
  uint64_t v2 = *(void *)(v0 + 1864);
  uint64_t v19 = *(void *)(v0 + 1856);
  uint64_t v20 = *(void *)(v0 + 1848);
  uint64_t v23 = *(void *)(v0 + 1840);
  uint64_t v24 = *(void *)(v0 + 1824);
  uint64_t v3 = *(void **)(v0 + 1816);
  uint64_t v21 = *(void *)(v0 + 1832);
  uint64_t v22 = *(void *)(v0 + 1768);
  uint64_t v4 = *(void *)(v0 + 1720);
  uint64_t v15 = v3;
  uint64_t v16 = *(void *)(v0 + 1576);
  uint64_t v5 = *(void *)(v0 + 1584);
  uint64_t v6 = v3[6];
  uint64_t v7 = v3[7];
  __swift_project_boxed_opaque_existential_1(v3 + 3, v6);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8(v6, v7);
  OUTLINED_FUNCTION_23();
  LOBYTE(v6) = (*(uint64_t (**)(void))(v9 + 248))();
  swift_release();
  uint64_t v10 = (void *)((char *)v1 + *(int *)(v2 + 36));
  *uint64_t v10 = 0xD00000000000001CLL;
  v10[1] = 0x8000000000491300;
  *uint64_t v1 = v18;
  v1[1] = v17;
  v1[2] = v4;
  UUID.init()();
  *(void *)(v0 + 1592) = v16;
  *(void *)(v0 + 1600) = v5;
  Loggable.init(wrappedValue:)();
  *((unsigned char *)v1 + *(int *)(v2 + 32)) = v6 & 1;
  outlined init with copy of LocalEmergencyCallDisambiguationModel((uint64_t)v1, v19);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v23, v22, v24);
  OutputGenerationManifest.responseViewId.setter();
  outlined init with copy of SignalProviding((uint64_t)(v15 + 23), v0 + 1336);
  uint64_t v11 = *(_OWORD *)(v0 + 1360);
  *(_OWORD *)(v0 + 1904) = v11;
  *(void *)(v0 + 1920) = __swift_project_boxed_opaque_existential_1((void *)(v0 + 1336), v11);
  *(void *)(v0 + 1520) = v20;
  *(void *)(v0 + 1528) = _s11SiriKitFlow5InputVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels and conformance PhoneSnippetDataModels, (void (*)(uint64_t))type metadata accessor for PhoneSnippetDataModels);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 1496));
  outlined init with copy of LocalEmergencyCallDisambiguationModel(v19, (uint64_t)boxed_opaque_existential_1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v13 = swift_allocObject();
  *(void *)(v0 + 1928) = v13;
  *(_OWORD *)(v13 + 16) = xmmword_46A030;
  return _swift_asyncLet_get_throwing(v0 + 656, v0 + 1624, CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForLocalEmergencyDisambiguation(app:disambiguationItems:outputGenerationManifest:), v0 + 1728);
}

{
  uint64_t v0;
  uint64_t v1;

  *(void *)(v1 + 1936) = v0;
  if (v0) {
    return OUTLINED_FUNCTION_21_1((uint64_t)CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForLocalEmergencyDisambiguation(app:disambiguationItems:outputGenerationManifest:));
  }
  else {
    return OUTLINED_FUNCTION_21_1((uint64_t)CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForLocalEmergencyDisambiguation(app:disambiguationItems:outputGenerationManifest:));
  }
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = v0[241];
  uint64_t v2 = (void *)v0[203];
  *(void *)(v1 + 32) = v2;
  os_log_type_t v14 = v1;
  specialized Array._endMutation()();
  v0[243] = v14;
  uint64_t v3 = v2;
  swift_task_alloc();
  OUTLINED_FUNCTION_31_2();
  v0[244] = v4;
  *uint64_t v4 = v5;
  v4[1] = CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForLocalEmergencyDisambiguation(app:disambiguationItems:outputGenerationManifest:);
  OUTLINED_FUNCTION_20_2();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(resultModel:dialog:outputGenerationManifest:)(v6, v7, v8, v9, v10, v11);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 1496;
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_5_7();
  char *v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v3);
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = *(void *)(v0 + 1872);
  uint64_t v2 = *(void *)(v0 + 1856);
  OUTLINED_FUNCTION_30_28();
  v3();
  _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_11(v2, (void (*)(void))type metadata accessor for PhoneSnippetDataModels);
  _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_11(v1, (void (*)(void))type metadata accessor for LocalEmergencyCallDisambiguationModel);
  __swift_destroy_boxed_opaque_existential_1(v0 + 1336);
  return _swift_asyncLet_finish(v0 + 16);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForLocalEmergencyDisambiguation(app:disambiguationItems:outputGenerationManifest:));
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  swift_release();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForLocalEmergencyDisambiguation(app:disambiguationItems:outputGenerationManifest:));
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  swift_release_n();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  return v0();
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  swift_bridgeObjectRelease();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForLocalEmergencyDisambiguation(app:disambiguationItems:outputGenerationManifest:));
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  swift_release();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForLocalEmergencyDisambiguation(app:disambiguationItems:outputGenerationManifest:));
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_99_9();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v0();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_19_13();
  OUTLINED_FUNCTION_48();
  uint64_t v1 = v0[234];
  uint64_t v2 = v0[232];
  uint64_t v3 = v0[230];
  uint64_t v4 = v0[229];
  uint64_t v5 = v0[228];
  *(void *)(v0[241] + 16) = 0;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_11(v2, (void (*)(void))type metadata accessor for PhoneSnippetDataModels);
  _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_11(v1, (void (*)(void))type metadata accessor for LocalEmergencyCallDisambiguationModel);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 187));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 167));
  OUTLINED_FUNCTION_4_3();
  return _swift_asyncLet_finish(v6);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForLocalEmergencyDisambiguation(app:disambiguationItems:outputGenerationManifest:));
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  swift_release();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForLocalEmergencyDisambiguation(app:disambiguationItems:outputGenerationManifest:));
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_99_9();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v0();
}

uint64_t implicit closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForLocalEmergencyDisambiguation(app:disambiguationItems:outputGenerationManifest:)(uint64_t a1, uint64_t a2)
{
  v2[7] = a1;
  v2[8] = a2;
  uint64_t v3 = type metadata accessor for Locale();
  v2[9] = v3;
  v2[10] = *(void *)(v3 - 8);
  v2[11] = swift_task_alloc();
  return _swift_task_switch(implicit closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForLocalEmergencyDisambiguation(app:disambiguationItems:outputGenerationManifest:), 0, 0);
}

uint64_t implicit closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForLocalEmergencyDisambiguation(app:disambiguationItems:outputGenerationManifest:)()
{
  uint64_t v1 = *(void **)(v0[8] + 112);
  OUTLINED_FUNCTION_22();
  unint64_t v3 = (*(uint64_t (**)(void))(v2 + 320))();
  unint64_t v4 = v3;
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    if (v5) {
      goto LABEL_3;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  uint64_t v5 = *(void *)((char *)&dword_10 + (v3 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  if (!v5) {
    goto LABEL_15;
  }
LABEL_3:
  uint64_t result = type metadata accessor for PhonePerson(0);
  if (v5 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v7 = 0;
  os_log_type_t v14 = v1;
  unint64_t v15 = v4 & 0xC000000000000001;
  unint64_t v16 = v4;
  do
  {
    if (v15) {
      id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v8 = *(id *)(v4 + 8 * v7 + 32);
    }
    uint64_t v9 = v8;
    uint64_t v10 = v0[11];
    static Device.current.getter();
    __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
    OUTLINED_FUNCTION_95_0();
    dispatch thunk of DeviceState.siriLocale.getter();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
    uint64_t v11 = static PhonePerson.make(phonePerson:options:locale:)(v9, 0, v10);
    OUTLINED_FUNCTION_38();
    OUTLINED_FUNCTION_5_30();
    v12();

    if (v11)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((char *)&dword_10 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    ++v7;
    unint64_t v4 = v16;
  }
  while (v5 != v7);
  swift_bridgeObjectRelease();
  uint64_t v1 = v14;
LABEL_16:
  v0[12] = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  uint64_t v17 = (uint64_t (*)(void *))(*(void *)(class metadata base offset for StartCallCATsSimple + *v1 + 176)
                                         + **(int **)(class metadata base offset for StartCallCATsSimple + *v1 + 176));
  uint64_t v13 = (void *)swift_task_alloc();
  v0[13] = v13;
  *uint64_t v13 = v0;
  v13[1] = implicit closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForLocalEmergencyDisambiguation(app:disambiguationItems:outputGenerationManifest:);
  return v17(_swiftEmptyArrayStorage);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  unint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_5_7();
  *id v8 = v7;
  *(void *)(v5 + 112) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_bridgeObjectRelease();
    *(void *)(v5 + 120) = v3;
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  **(void **)(v0 + 56) = *(void *)(v0 + 120);
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  return v1();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v0();
}

uint64_t implicit closure #2 in CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForLocalEmergencyDisambiguation(app:disambiguationItems:outputGenerationManifest:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(implicit closure #2 in CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForLocalEmergencyDisambiguation(app:disambiguationItems:outputGenerationManifest:), 0, 0);
}

uint64_t implicit closure #2 in CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForLocalEmergencyDisambiguation(app:disambiguationItems:outputGenerationManifest:)()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v1 = *(int **)(class metadata base offset for PhoneCallDisplayTextCATsSimple
               + **(void **)(*(void *)(v0 + 24) + 176)
               + 168);
  unint64_t v4 = (uint64_t (*)(void))((char *)v1 + *v1);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v2;
  *uint64_t v2 = v0;
  v2[1] = implicit closure #2 in CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForLocalEmergencyDisambiguation(app:disambiguationItems:outputGenerationManifest:);
  return v4();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_16_1();
  unint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_5_7();
  *id v8 = v7;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v9 = *(uint64_t (**)(void))(v7 + 8);
    return v9();
  }
  else
  {
    *(void *)(v5 + 40) = v3;
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v11, v12, v13);
  }
}

void *CallingIntentContactNeedsDisambiguationFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:startCallCATsSimple:phoneCallCommonCATs:phoneCallCommonCATsSimple:phoneCallCommonCatPatterns:phoneCallDisplayTextCATsSimple:responseGenerator:siriKitEventSender:appInfoBuilder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v11 + direct field offset for CallingIntentContactNeedsDisambiguationFlowStrategy.personsToDisambiguate) = _swiftEmptyArrayStorage;
  *(void *)(v11 + direct field offset for CallingIntentContactNeedsDisambiguationFlowStrategy.selectedPerson) = 0;
  *(unsigned char *)(v11 + direct field offset for CallingIntentContactNeedsDisambiguationFlowStrategy.requiresReprompt) = 0;
  *(unsigned char *)(v11 + direct field offset for CallingIntentContactNeedsDisambiguationFlowStrategy.shouldClearContext) = 0;
  outlined init with copy of SignalProviding(a3, (uint64_t)v26);
  outlined init with copy of SignalProviding(a7, (uint64_t)v25);
  outlined init with copy of SignalProviding(a9, (uint64_t)v24);
  outlined init with copy of SignalProviding(a10, (uint64_t)v23);
  outlined init with copy of SignalProviding(a11, (uint64_t)v22);
  uint64_t v17 = CallingIntentBaseFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:startCallCATsSimple:phoneCallCommonCATs:phoneCallCommonCATsSimple:phoneCallCommonCatPatterns:phoneCallDisplayTextCATsSimple:responseGenerator:siriKitEventSender:appInfoBuilder:)(a1, a2, (uint64_t)v26, a4, a5, a6, (uint64_t)v25, a8, (uint64_t)v24, (uint64_t)v23, v22);
  __swift_destroy_boxed_opaque_existential_1(a11);
  __swift_destroy_boxed_opaque_existential_1(a10);
  __swift_destroy_boxed_opaque_existential_1(a9);
  __swift_destroy_boxed_opaque_existential_1(a7);
  __swift_destroy_boxed_opaque_existential_1(a3);
  return v17;
}

void CallingIntentContactNeedsDisambiguationFlowStrategy.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void **)(v0 + direct field offset for CallingIntentContactNeedsDisambiguationFlowStrategy.selectedPerson);
}

uint64_t CallingIntentContactNeedsDisambiguationFlowStrategy.deinit()
{
  uint64_t v0 = CallingIntentBaseFlowStrategy.deinit();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t CallingIntentContactNeedsDisambiguationFlowStrategy.__deallocating_deinit()
{
  CallingIntentContactNeedsDisambiguationFlowStrategy.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.authenticationPolicy.getter in conformance CallingIntentContactNeedsDisambiguationFlowStrategy<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 312))();
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.paginationStyle(resolveRecord:) in conformance CallingIntentContactNeedsDisambiguationFlowStrategy<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for CallingIntentContactNeedsDisambiguationFlowStrategy();

  return NeedsDisambiguationFlowStrategyAsync.paginationStyle(resolveRecord:)(a1, v5, a3);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.actionForInput(_:resolveRecord:) in conformance CallingIntentContactNeedsDisambiguationFlowStrategy<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 416))();
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeDisambiguationItemContainer(resolveRecord:) in conformance CallingIntentContactNeedsDisambiguationFlowStrategy<A>(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 16) = a1;
  uint64_t v7 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v2 + 440) + **(int **)(**(void **)v2 + 440));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 24) = v5;
  void *v5 = v3;
  v5[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.makeDisambiguationItemContainer(resolveRecord:) in conformance CallingIntentContactNeedsDisambiguationFlowStrategy<A>;
  return v7(a2);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeDisambiguationItemContainer(resolveRecord:) in conformance CallingIntentContactNeedsDisambiguationFlowStrategy<A>()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (!v0) {
    **(void **)(v5 + 16) = v3;
  }
  uint64_t v9 = *(uint64_t (**)(void))(v7 + 8);
  return v9();
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.parseDisambiguationResult(input:paginatedItems:resolveRecord:) in conformance CallingIntentContactNeedsDisambiguationFlowStrategy<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(**(void **)v4 + 448)
                                                                   + **(int **)(**(void **)v4 + 448));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = protocol witness for PromptForConfirmationFlowStrategyAsync.parseConfirmationResponse(input:) in conformance UnsupportedSearchParametersFlowStrategy;
  return v12(a1, a2, a3, a4);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makePromptForDisambiguation(paginatedItems:resolveRecord:) in conformance CallingIntentContactNeedsDisambiguationFlowStrategy<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(**(void **)v3 + 456)
                                                          + **(int **)(**(void **)v3 + 456));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = protocol witness for YesNoPromptFlowStrategy.makePromptForYesNoResponse() in conformance UnsupportedSearchParametersFlowStrategy;
  return v10(a1, a2, a3);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:) in conformance CallingIntentContactNeedsDisambiguationFlowStrategy<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for CallingIntentContactNeedsDisambiguationFlowStrategy();
  *uint64_t v10 = v5;
  v10[1] = protocol witness for PromptForConfirmationFlowStrategyAsync.parseConfirmationResponse(input:) in conformance UnsupportedSearchParametersFlowStrategy;
  return NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:)(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:resolveRecord:) in conformance CallingIntentContactNeedsDisambiguationFlowStrategy<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for CallingIntentContactNeedsDisambiguationFlowStrategy();
  *uint64_t v10 = v5;
  v10[1] = protocol witness for PromptForConfirmationFlowStrategyAsync.parseConfirmationResponse(input:) in conformance UnsupportedSearchParametersFlowStrategy;
  return NeedsDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:resolveRecord:)(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:) in conformance CallingIntentContactNeedsDisambiguationFlowStrategy<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for CallingIntentContactNeedsDisambiguationFlowStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForConfirmationFlowStrategyAsync.parseConfirmationResponse(input:) in conformance UnsupportedSearchParametersFlowStrategy;
  return NeedsDisambiguationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:) in conformance CallingIntentContactNeedsDisambiguationFlowStrategy<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for CallingIntentContactNeedsDisambiguationFlowStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for PromptForConfirmationFlowStrategyAsync.parseConfirmationResponse(input:) in conformance UnsupportedSearchParametersFlowStrategy;
  return NeedsDisambiguationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.pervasiveUseCaseDescription(resolveRecord:) in conformance CallingIntentContactNeedsDisambiguationFlowStrategy<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for CallingIntentContactNeedsDisambiguationFlowStrategy();

  return NeedsDisambiguationFlowStrategyAsync.pervasiveUseCaseDescription(resolveRecord:)(a1, v5, a3);
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:) in conformance CallingIntentContactNeedsDisambiguationFlowStrategy<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  uint64_t v13 = type metadata accessor for CallingIntentContactNeedsDisambiguationFlowStrategy();
  *uint64_t v12 = v6;
  v12[1] = protocol witness for PromptForConfirmationFlowStrategyAsync.parseConfirmationResponse(input:) in conformance UnsupportedSearchParametersFlowStrategy;
  return ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:)(a1, a2, a3, a4, v13, a6);
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:) in conformance CallingIntentContactNeedsDisambiguationFlowStrategy<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  os_log_type_t v14 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v14;
  uint64_t v15 = type metadata accessor for CallingIntentContactNeedsDisambiguationFlowStrategy();
  *os_log_type_t v14 = v7;
  v14[1] = protocol witness for PromptForConfirmationFlowStrategyAsync.parseConfirmationResponse(input:) in conformance UnsupportedSearchParametersFlowStrategy;
  return ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:)(a1, a2, a3, a4, a5, v15, a7);
}

uint64_t partial apply for closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.makeDisambiguationItemContainer(resolveRecord:)(uint64_t a1)
{
  return closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.makeDisambiguationItemContainer(resolveRecord:)(a1, *(uint64_t **)(v1 + 16));
}

uint64_t partial apply for closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(uint64_t a1)
{
  return closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(a1, *(uint64_t **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t specialized static AppSelectionSignalsGatheringHelper.triggerSignalCollection(sharedGlobals:contacts:phoneCallNLIntent:smartAppSelection:eligibleAppsFinder:skIntent:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for AppResolver();
  uint64_t v11 = OUTLINED_FUNCTION_11_0(v10);
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_35_7();
  swift_retain();
  uint64_t v12 = static AppSelectionSignalsGatheringHelper.getShowedForcedAppDisambiguationList(sharedGlobals:)(a1);
  outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v38);
  if (a4)
  {
    swift_retain();
  }
  else
  {
    outlined init with copy of SignalProviding((uint64_t)v38, (uint64_t)&v43);
    id v13 = [self clientWithIdentifier:112];
    type metadata accessor for TrialSmartAppSelectionConfigProvider();
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = v13;
    type metadata accessor for DiagnosticLogPermission();
    uint64_t v15 = swift_allocObject();
    type metadata accessor for SmartAppSelectionFeatureManager();
    swift_allocObject();
    a4 = SmartAppSelectionFeatureManager.init(sharedGlobals:trialSmartAppSelectionConfigProvider:diagnosticLogPermission:)(&v43, v14, v15);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
  outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)&v43);
  type metadata accessor for AppUsageProvider();
  long long v40 = 0u;
  long long v41 = 0u;
  *(void *)&long long v42 = 0;
  uint64_t v16 = swift_allocObject();
  swift_retain();
  AppResolver.init(appResolutionRules:)();
  type metadata accessor for PhoneAppResolutionHelper();
  uint64_t v17 = OUTLINED_FUNCTION_21_0();
  swift_retain();
  specialized PhoneAppResolutionHelper.init(sharedGlobals:eligibleAppsFinder:smartAppSelection:phoneAppResolutionLogger:appUsageProvider:appResolver:)((uint64_t)&v43, a5, a4, (uint64_t)&v40, v16, v5, v17);
  if (v12[2])
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    uint64_t v18 = OUTLINED_FUNCTION_5_48();
    v19(v18);
    __swift_project_boxed_opaque_existential_1(v37, v37[3]);
    uint64_t v20 = OUTLINED_FUNCTION_5_48();
    v21(v20);
    outlined init with take of AnnotatedApp?((uint64_t)v39, (uint64_t)&v40, &demangling cache variable for type metadata for AnnotatedApp?);
    if ((void)v40)
    {
      long long v43 = v40;
      long long v44 = v41;
      long long v45 = v42;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
      if (v45 == 4)
      {
        App.appIdentifier.getter();
        if (v22) {
          uint64_t v23 = v22;
        }
        else {
          uint64_t v23 = 0xE000000000000000;
        }
        uint64_t v24 = OUTLINED_FUNCTION_102_8();
        static AppSelectionSignalsGatheringHelper.triggerForcedAppDisambiguationSignalCollection(sharedGlobals:contacts:phoneCallNLIntent:phoneAppResolutionHelper:appBundleIds:selectedAppId:skIntent:)(v24, v25, v26, v27, (uint64_t)v12, v28, v23);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        uint64_t v46 = *((void *)&v43 + 1);
        outlined release of Set<String>((uint64_t)&v46);
        outlined init with take of AnnotatedApp?((uint64_t)&v44, (uint64_t)v37, &demangling cache variable for type metadata for String?);
        outlined release of String?((uint64_t)v37);
        uint64_t v47 = *((void *)&v45 + 1);
        outlined release of Set<String>((uint64_t)&v47);
        swift_release();
        return swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v46 = *((void *)&v43 + 1);
      outlined release of Set<String>((uint64_t)&v46);
      outlined init with take of AnnotatedApp?((uint64_t)&v44, (uint64_t)v37, &demangling cache variable for type metadata for String?);
      outlined release of String?((uint64_t)v37);
      uint64_t v47 = *((void *)&v45 + 1);
      outlined release of Set<String>((uint64_t)&v47);
    }
    else
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  __swift_project_boxed_opaque_existential_1(a3, a3[3]);
  PhoneCallNLIntent.applicationId.getter();
  uint64_t v31 = v30;
  uint64_t v32 = swift_bridgeObjectRelease();
  if (v31 && ((*(uint64_t (**)(uint64_t))(*a4 + 128))(v32) & 1) != 0)
  {
    uint64_t v33 = OUTLINED_FUNCTION_102_8();
    static AppSelectionSignalsGatheringHelper.triggerAppNameSpecifiedSignalCollection(sharedGlobals:contacts:phoneCallNLIntent:phoneAppResolutionHelper:skIntent:)(v33, v34, v35, v36);
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t partial apply for closure #3 in CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)@<X0>(void *a1@<X8>)
{
  return closure #3 in CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(v1, a1);
}

uint64_t partial apply for closure #4 in CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(uint64_t a1)
{
  return closure #4 in CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), &demangling cache variable for type metadata for CheckedContinuation<NLContextUpdate?, Error>, (uint64_t)&unk_56E2D0, (uint64_t)partial apply for closure #1 in closure #4 in CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:));
}

unint64_t lazy protocol witness table accessor for type EmergencyType and conformance EmergencyType()
{
  unint64_t result = lazy protocol witness table cache variable for type EmergencyType and conformance EmergencyType;
  if (!lazy protocol witness table cache variable for type EmergencyType and conformance EmergencyType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmergencyType and conformance EmergencyType);
  }
  return result;
}

uint64_t base witness table accessor for ParameterResolutionHandlingAsync in CallingIntentContactNeedsDisambiguationFlowStrategy<A>()
{
  return swift_getWitnessTable();
}

uint64_t sub_43BBEC@<X0>(uint64_t *a1@<X8>)
{
  OUTLINED_FUNCTION_22();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 320))();
  *a1 = result;
  return result;
}

uint64_t sub_43BC48@<X0>(uint64_t *a1@<X8>)
{
  OUTLINED_FUNCTION_22();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 344))();
  *a1 = result;
  return result;
}

unsigned char *storeEnumTagSinglePayload for EmergencyType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x43BD70);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EmergencyType()
{
  return &type metadata for EmergencyType;
}

uint64_t type metadata completion function for CallingIntentContactNeedsDisambiguationFlowStrategy()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for CallingIntentContactNeedsDisambiguationFlowStrategy()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for implicit closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForLocalEmergencyDisambiguation(app:disambiguationItems:outputGenerationManifest:)()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v2 = v1;
  uint64_t v3 = swift_task_alloc();
  unsigned int v4 = (void *)OUTLINED_FUNCTION_17_0(v3);
  *unsigned int v4 = v5;
  v4[1] = protocol witness for PromptForConfirmationFlowStrategyAsync.parseConfirmationResponse(input:) in conformance UnsupportedSearchParametersFlowStrategy;
  return implicit closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForLocalEmergencyDisambiguation(app:disambiguationItems:outputGenerationManifest:)(v2, v0);
}

uint64_t partial apply for implicit closure #2 in CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForLocalEmergencyDisambiguation(app:disambiguationItems:outputGenerationManifest:)()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v2 = v1;
  uint64_t v3 = swift_task_alloc();
  unsigned int v4 = (void *)OUTLINED_FUNCTION_17_0(v3);
  *unsigned int v4 = v5;
  v4[1] = protocol witness for PromptForConfirmationFlowStrategyAsync.parseConfirmationResponse(input:) in conformance UnsupportedSearchParametersFlowStrategy;
  return implicit closure #2 in CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForLocalEmergencyDisambiguation(app:disambiguationItems:outputGenerationManifest:)(v2, v0);
}

uint64_t partial apply for closure #2 in CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForEmergencyNeedsDisambiguation(app:disambiguationItems:nlContextUpdate:)(uint64_t a1)
{
  return closure #2 in CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForEmergencyNeedsDisambiguation(app:disambiguationItems:nlContextUpdate:)(a1, *(void *)(v1 + 16));
}

uint64_t outlined init with take of DisambiguationItemWithDirectInvocationModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DisambiguationItemWithDirectInvocationModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of LocalEmergencyCallDisambiguationModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = OUTLINED_FUNCTION_62_0();
  v4(v3);
  OUTLINED_FUNCTION_15();
  uint64_t v5 = OUTLINED_FUNCTION_74();
  v6(v5);
  return a2;
}

uint64_t _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_11(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_15();
  OUTLINED_FUNCTION_11();
  v3();
  return a1;
}

uint64_t partial apply for closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:)(uint64_t a1)
{
  return closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_43C058()
{
  OUTLINED_FUNCTION_47_28();
  swift_getAssociatedTypeWitness();
  OUTLINED_FUNCTION_94_2();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_101_8();
  uint64_t v0 = OUTLINED_FUNCTION_2_83();
  v1(v0);
  uint64_t v2 = OUTLINED_FUNCTION_125_4();

  return _swift_deallocObject(v2, v3, v4);
}

uint64_t partial apply for implicit closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:)()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_47_28();
  swift_getAssociatedTypeWitness();
  uint64_t v3 = OUTLINED_FUNCTION_94_2();
  OUTLINED_FUNCTION_13(v3);
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v6 = v0 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v7 = swift_task_alloc();
  uint64_t v8 = (void *)OUTLINED_FUNCTION_17_0(v7);
  *uint64_t v8 = v9;
  v8[1] = protocol witness for YesNoPromptFlowStrategy.makePromptForYesNoResponse() in conformance UnsupportedSearchParametersFlowStrategy;
  return implicit closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:)(v2, v5, v6);
}

uint64_t sub_43C1C4()
{
  OUTLINED_FUNCTION_47_28();
  swift_getAssociatedTypeWitness();
  OUTLINED_FUNCTION_94_2();
  OUTLINED_FUNCTION_0_0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v6 = v5 | 7;
  unint64_t v7 = ((*(void *)(v4 + 64) + ((v5 + 40) & ~v5) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  uint64_t v8 = OUTLINED_FUNCTION_2_83();
  v9(v8);
  swift_release();

  return _swift_deallocObject(v0, v7, v6);
}

uint64_t partial apply for implicit closure #2 in CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:)()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_47_28();
  swift_getAssociatedTypeWitness();
  uint64_t v5 = OUTLINED_FUNCTION_94_2();
  OUTLINED_FUNCTION_19_0(v5);
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = *(void *)(v0 + 32);
  uint64_t v12 = v0 + v10;
  uint64_t v13 = *(void *)(v0 + ((*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v14;
  *uint64_t v14 = v2;
  v14[1] = protocol witness for PromptForConfirmationFlowStrategyAsync.parseConfirmationResponse(input:) in conformance UnsupportedSearchParametersFlowStrategy;
  return implicit closure #2 in CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:)(v4, v11, v12, v13);
}

uint64_t partial apply for closure #3 in implicit closure #2 in CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:)(uint64_t a1)
{
  return closure #3 in implicit closure #2 in CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_43C3A4()
{
  return objectdestroyTm_18(&demangling cache variable for type metadata for CheckedContinuation<TemplatingResult, Error>);
}

uint64_t partial apply for closure #1 in closure #3 in implicit closure #2 in CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TemplatingResult, Error>);
  OUTLINED_FUNCTION_13(v2);

  return closure #1 in closure #3 in implicit closure #2 in CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:)(a1);
}

uint64_t partial apply for closure #2 in implicit closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:)(uint64_t a1)
{
  return closure #4 in CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), &demangling cache variable for type metadata for CheckedContinuation<NLContextUpdate?, Never>, (uint64_t)&unk_56E280, (uint64_t)partial apply for closure #1 in closure #2 in implicit closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:));
}

uint64_t sub_43C444()
{
  return objectdestroyTm_18(&demangling cache variable for type metadata for CheckedContinuation<NLContextUpdate?, Never>);
}

uint64_t partial apply for closure #1 in closure #2 in implicit closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #2 in implicit closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:)(a1, &demangling cache variable for type metadata for CheckedContinuation<NLContextUpdate?, Never>);
}

uint64_t sub_43C45C()
{
  return objectdestroyTm_18(&demangling cache variable for type metadata for CheckedContinuation<[SAAceView], Error>);
}

uint64_t sub_43C468()
{
  return objectdestroyTm_18(&demangling cache variable for type metadata for CheckedContinuation<NLContextUpdate?, Error>);
}

uint64_t partial apply for closure #1 in closure #4 in CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #2 in implicit closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:)(a1, &demangling cache variable for type metadata for CheckedContinuation<NLContextUpdate?, Error>);
}

uint64_t partial apply for closure #1 in closure #2 in implicit closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.makeLegacyPromptForDisambiguation(resolveRecord:disambiguationList:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_13(v5);
  return closure #1 in closure #4 in CallingIntentContactNeedsDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(a1, v2 + ((*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), a2);
}

uint64_t specialized PhoneAppResolutionHelper.init(sharedGlobals:eligibleAppsFinder:smartAppSelection:phoneAppResolutionLogger:appUsageProvider:appResolver:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for EligibleAppFinder();
  v42[3] = v13;
  v42[4] = &protocol witness table for EligibleAppFinder;
  v42[0] = a2;
  uint64_t v14 = (uint64_t *)(a7 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin24PhoneAppResolutionHelper_logPrefix);
  *uint64_t v14 = type metadata accessor for PhoneAppResolutionHelper();
  v14[1] = (uint64_t)&outlined read-only object #0 of specialized PhoneAppResolutionHelper.init(sharedGlobals:eligibleAppsFinder:smartAppSelection:phoneAppResolutionLogger:appUsageProvider:appResolver:);
  v14[2] = 0;
  v14[3] = 0;
  outlined init with copy of SignalProviding(a1, a7 + 56);
  outlined init with copy of SignalProviding((uint64_t)v42, a7 + 16);
  type metadata accessor for AppResolver();
  OUTLINED_FUNCTION_12();
  v15();
  *(void *)(a7 + 144) = a5;
  if (a3)
  {
    swift_retain();
    uint64_t v16 = a3;
  }
  else
  {
    outlined init with copy of SignalProviding(a1, (uint64_t)&v39);
    uint64_t v17 = self;
    swift_retain();
    id v18 = [v17 clientWithIdentifier:112];
    type metadata accessor for TrialSmartAppSelectionConfigProvider();
    uint64_t v19 = v13;
    uint64_t v20 = a4;
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = v18;
    type metadata accessor for DiagnosticLogPermission();
    uint64_t v22 = swift_allocObject();
    type metadata accessor for SmartAppSelectionFeatureManager();
    swift_allocObject();
    uint64_t v23 = v21;
    a4 = v20;
    uint64_t v13 = v19;
    uint64_t v16 = SmartAppSelectionFeatureManager.init(sharedGlobals:trialSmartAppSelectionConfigProvider:diagnosticLogPermission:)(&v39, v23, v22);
  }
  *(void *)(a7 + 96) = v16;
  outlined init with copy of ConfirmationResponse?(a4, (uint64_t)&v37, &demangling cache variable for type metadata for PhoneAppResolutionLogging?);
  if (v38)
  {
    swift_release();
    uint64_t v24 = OUTLINED_FUNCTION_9_39();
    v25(v24);
    outlined destroy of UUID?(a4, &demangling cache variable for type metadata for PhoneAppResolutionLogging?);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
    __swift_destroy_boxed_opaque_existential_1(a1);
    outlined init with take of AppSelectionSignalComponent(&v37, (uint64_t)&v39);
  }
  else
  {
    uint64_t v33 = a4;
    swift_retain();
    outlined destroy of UUID?((uint64_t)&v37, &demangling cache variable for type metadata for PhoneAppResolutionLogging?);
    outlined init with copy of SignalProviding(a1, (uint64_t)&v37);
    id v26 = [self sharedAnalytics];
    id v27 = [v26 defaultMessageStream];

    if (one-time initialization token for instance != -1) {
      swift_once();
    }
    uint64_t v35 = v13;
    unint64_t v36 = &protocol witness table for EligibleAppFinder;
    *(void *)&long long v34 = static EligibleAppFinder.instance;
    long long v40 = &type metadata for PhoneAppResolutionLogger;
    long long v41 = &protocol witness table for PhoneAppResolutionLogger;
    uint64_t v28 = swift_allocObject();
    uint64_t v29 = (void *)(v28 + 16);
    *(void *)&long long v39 = v28;
    swift_retain();
    PhoneAppResolutionLogger.init(sharedGlobals:messageStream:eligibleAppsFinder:)(&v37, (uint64_t)v27, &v34, v29);
    swift_release();
    swift_release();
    uint64_t v30 = OUTLINED_FUNCTION_9_39();
    v31(v30);
    outlined destroy of UUID?(v33, &demangling cache variable for type metadata for PhoneAppResolutionLogging?);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  outlined init with take of AppSelectionSignalComponent(&v39, a7 + 104);
  return a7;
}

uint64_t sub_43C880()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  __swift_destroy_boxed_opaque_existential_1(v0 + 80);
  __swift_destroy_boxed_opaque_existential_1(v0 + 120);

  return _swift_deallocObject(v0, 160, 7);
}

uint64_t sub_43C8D8()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 120, 7);
}

uint64_t sub_43C940()
{
  OUTLINED_FUNCTION_47_28();
  swift_getAssociatedTypeWitness();
  type metadata accessor for IntentPromptAnswer();
  type metadata accessor for DisambiguationResult();
  type metadata accessor for CheckedContinuation();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_101_8();
  uint64_t v0 = OUTLINED_FUNCTION_2_83();
  v1(v0);
  uint64_t v2 = OUTLINED_FUNCTION_125_4();

  return _swift_deallocObject(v2, v3, v4);
}

uint64_t partial apply for closure #1 in closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)()
{
  OUTLINED_FUNCTION_47_28();
  swift_getAssociatedTypeWitness();
  type metadata accessor for IntentPromptAnswer();
  type metadata accessor for DisambiguationResult();
  uint64_t v0 = type metadata accessor for CheckedContinuation();
  OUTLINED_FUNCTION_13(v0);
  uint64_t v1 = (void *)OUTLINED_FUNCTION_126_3();

  return closure #1 in closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(v1, v2);
}

uint64_t sub_43CA94()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<SiriKitDisambiguationListAdapter, Never>);
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_101_8();
  uint64_t v0 = OUTLINED_FUNCTION_2_83();
  v1(v0);
  uint64_t v2 = OUTLINED_FUNCTION_125_4();

  return _swift_deallocObject(v2, v3, v4);
}

uint64_t partial apply for closure #1 in closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.makeDisambiguationItemContainer(resolveRecord:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<SiriKitDisambiguationListAdapter, Never>);
  OUTLINED_FUNCTION_13(v0);
  uint64_t v1 = OUTLINED_FUNCTION_126_3();

  return closure #1 in closure #1 in CallingIntentContactNeedsDisambiguationFlowStrategy.makeDisambiguationItemContainer(resolveRecord:)(v1, v2);
}

uint64_t OUTLINED_FUNCTION_10_74()
{
  uint64_t v1 = *(void **)(v0 + 64);
  uint64_t v2 = v1[3];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  return v2;
}

void OUTLINED_FUNCTION_12_64(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, a2, v4, a4, v5, 2u);
}

uint64_t OUTLINED_FUNCTION_16_62()
{
  return *(void *)(v0 + 120);
}

uint64_t OUTLINED_FUNCTION_18_43()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_19_46()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_24_43@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_31_40()
{
  return *(void *)(v0 + 56);
}

uint64_t OUTLINED_FUNCTION_34_34()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_37_33(uint64_t a1)
{
  *(void *)(v2 + 408) = a1;
  uint64_t v3 = *(void *)(v1 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 24), v3);
  return v3;
}

uint64_t OUTLINED_FUNCTION_38_33()
{
  uint64_t result = *(void *)(v0 + 168);
  v3[3] = *(void *)(v0 + 256);
  v3[4] = v1;
  v3[2] = v2;
  return result;
}

void *OUTLINED_FUNCTION_39_29()
{
  return __swift_project_boxed_opaque_existential_1(*(void **)(v0 + 80), *(void *)(*(void *)(v0 + 80) + 24));
}

uint64_t OUTLINED_FUNCTION_60_20(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return DeviceState.asInvocationContext.getter();
}

uint64_t OUTLINED_FUNCTION_63_15(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 400) = a2;
  return v3;
}

uint64_t OUTLINED_FUNCTION_71_10()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_73_14()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_76_12()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_77_12()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_78_9(uint64_t result)
{
  *(void *)(v1 + 112) = result;
  return result;
}

void OUTLINED_FUNCTION_83_6()
{
}

uint64_t OUTLINED_FUNCTION_84_13()
{
  return *(void *)(v0 + 168);
}

uint64_t OUTLINED_FUNCTION_89_10()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_93_11(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, a2, v5, a4, v4, 0xCu);
}

uint64_t OUTLINED_FUNCTION_99_9()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_100_5(uint64_t a1)
{
  return NSObject.update(with:at:)(a1, 0x73746361746E6F63, 0xE800000000000000);
}

uint64_t OUTLINED_FUNCTION_101_8()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_102_8()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_111_6(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[12] = a6;
  v7[13] = a7;
  v7[10] = a4;
  v7[11] = a5;
  v7[8] = a2;
  v7[9] = a3;
  v7[7] = result;
  return result;
}

void OUTLINED_FUNCTION_114_3()
{
}

uint64_t OUTLINED_FUNCTION_116_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_117_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_121_4(uint64_t result)
{
  *(void *)(v1 + 416) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_122_5(uint64_t result)
{
  *(void *)(v1 + 368) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_125_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_126_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_127_3(uint64_t result)
{
  *(void *)(v1 + 128) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_129_5()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_130_4()
{
  return *(void *)(v0 + 88);
}

uint64_t OUTLINED_FUNCTION_131_4()
{
  return type metadata accessor for DisambiguationItemWithDirectInvocationModel(0);
}

void *OUTLINED_FUNCTION_133_3()
{
  return __swift_project_boxed_opaque_existential_1((void *)(v0 + 24), *(void *)(v0 + 48));
}

uint64_t OUTLINED_FUNCTION_137_3()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_138_4()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_139_3()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t OUTLINED_FUNCTION_143_5(uint64_t a1)
{
  *(void *)(v1 + 136) = a1;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_145_5(uint64_t a1)
{
  __swift_storeEnumTagSinglePayload(v1, 0, 1, a1);
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_148_3()
{
  return ParameterResolutionRecord.intent.getter();
}

uint64_t OUTLINED_FUNCTION_154_3(uint64_t a1)
{
  *(void *)(v1 + 352) = a1;
  return PaginatedItemContainer.items.getter();
}

uint64_t OUTLINED_FUNCTION_156_5(uint64_t a1)
{
  *(void *)(v1 + 392) = a1;
  return ParameterResolutionRecord.parameter.getter();
}

unint64_t specialized INPersonContainingIntent.hasSiriMatches.getter()
{
  unint64_t result = outlined bridged method (pb) of @objc INAddCallParticipantIntent.participants.getter(v0);
  if (!result) {
    return result;
  }
  unint64_t v2 = result;
  if (!(result >> 62))
  {
    if (*(void *)((char *)&dword_10 + (result & 0xFFFFFFFFFFFFFF8))) {
      goto LABEL_4;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_11;
  }
LABEL_4:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v2 & 0xC000000000000001) == 0);
  if ((v2 & 0xC000000000000001) != 0) {
    id v3 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v3 = *(id *)(v2 + 32);
  }
  os_log_type_t v4 = v3;
  swift_bridgeObjectRelease();
  id v5 = [v4 siriMatches];

  if (!v5) {
    return 0;
  }
  type metadata accessor for INPerson();
  unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = *(void *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFFF8));
  }
  swift_bridgeObjectRelease();
  return v7 != 0;
}

uint64_t specialized INPersonContainingIntent.hasSiriMatches.getter(uint64_t (*a1)(uint64_t))
{
  uint64_t result = a1(v1);
  if (!result) {
    return result;
  }
  uint64_t v3 = result;
  OUTLINED_FUNCTION_24_16();
  if (!v5)
  {
    uint64_t v6 = *(void *)(v4 + 16);
    if (v6) {
      goto LABEL_4;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  if (!v6) {
    goto LABEL_11;
  }
LABEL_4:
  OUTLINED_FUNCTION_111_7(v6, (v3 & 0xC000000000000001) == 0);
  if ((v3 & 0xC000000000000001) != 0) {
    id v7 = (id)OUTLINED_FUNCTION_65_16();
  }
  else {
    id v7 = *(id *)(v3 + 32);
  }
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  id v9 = [v8 siriMatches];

  if (!v9) {
    return 0;
  }
  type metadata accessor for INPerson();
  unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v10 >> 62)
  {
    OUTLINED_FUNCTION_32_3();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = *(void *)((char *)&dword_10 + (v10 & 0xFFFFFFFFFFFFFF8));
  }
  swift_bridgeObjectRelease();
  return v11 != 0;
}

uint64_t specialized INPersonContainingIntent.isFirstContactRelatedOrMyself.getter()
{
  unint64_t v1 = outlined bridged method (pb) of @objc INAddCallParticipantIntent.participants.getter(v0);
  if (!v1) {
    goto LABEL_9;
  }
  unint64_t v2 = v1;
  if (v1 >> 62)
  {
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  if (!*(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8)))
  {
LABEL_8:
    swift_bridgeObjectRelease();
LABEL_9:
    uint64_t v4 = 0;
    goto LABEL_10;
  }
LABEL_4:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v2 & 0xC000000000000001) == 0);
  if ((v2 & 0xC000000000000001) != 0) {
    id v3 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v3 = *(id *)(v2 + 32);
  }
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
LABEL_10:
  id v5 = [v4 relationship];

  if (!v4) {
    return v5 != 0;
  }
  unsigned int v6 = [v4 isMe];

  if (v5) {
    return 1;
  }
  else {
    return v6;
  }
}

uint64_t specialized INPersonContainingIntent.isFirstContactRelatedOrMyself.getter(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = a1(v1);
  if (!v2) {
    goto LABEL_9;
  }
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_24_16();
  if (v5)
  {
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  uint64_t v6 = *(void *)(v4 + 16);
  if (!v6)
  {
LABEL_8:
    swift_bridgeObjectRelease();
LABEL_9:
    uint64_t v8 = 0;
    goto LABEL_10;
  }
LABEL_4:
  OUTLINED_FUNCTION_111_7(v6, (v3 & 0xC000000000000001) == 0);
  if ((v3 & 0xC000000000000001) != 0) {
    id v7 = (id)OUTLINED_FUNCTION_65_16();
  }
  else {
    id v7 = *(id *)(v3 + 32);
  }
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
LABEL_10:
  id v9 = [v8 relationship];

  if (!v8) {
    return v9 != 0;
  }
  unsigned int v10 = [v8 isMe];

  if (v9) {
    return 1;
  }
  else {
    return v10;
  }
}

uint64_t specialized SlotTemplating.toAnySlotTemplating()()
{
  uint64_t v1 = OUTLINED_FUNCTION_88_8();
  outlined init with copy of Result<TemplatingResult, Error>(v1, (uint64_t)v71, &demangling cache variable for type metadata for ContactsSlotTemplating<INStartCallIntent, INIntentResponse>);
  OUTLINED_FUNCTION_12_65((uint64_t)v71, v2, v3, v4, v5, v6, v7, v8, v63);
  uint64_t v9 = OUTLINED_FUNCTION_58_22();
  OUTLINED_FUNCTION_16_63(v9, v10, v11, v12, v13, v14, v15, v16, v64);
  OUTLINED_FUNCTION_12_65((uint64_t)v71, v17, v18, v19, v20, v21, v22, v23, v65);
  uint64_t v24 = OUTLINED_FUNCTION_58_22();
  OUTLINED_FUNCTION_16_63(v24, v25, v26, v27, v28, v29, v30, v31, v66);
  OUTLINED_FUNCTION_12_65((uint64_t)v71, v32, v33, v34, v35, v36, v37, v38, v67);
  uint64_t v39 = OUTLINED_FUNCTION_58_22();
  OUTLINED_FUNCTION_16_63(v39, v40, v41, v42, v43, v44, v45, v46, v68);
  OUTLINED_FUNCTION_12_65((uint64_t)v71, v47, v48, v49, v50, v51, v52, v53, v69);
  uint64_t v54 = OUTLINED_FUNCTION_58_22();
  OUTLINED_FUNCTION_16_63(v54, v55, v56, v57, v58, v59, v60, v61, v70);
  uint64_t result = outlined destroy of SpeakableString?((uint64_t)v71, &demangling cache variable for type metadata for ContactsSlotTemplating<INStartCallIntent, INIntentResponse>);
  *uint64_t v0 = partial apply for specialized implicit closure #2 in implicit closure #1 in AnySlotTemplating.init<A>(delegate:);
  v0[1] = v9;
  v0[2] = partial apply for specialized implicit closure #4 in implicit closure #3 in AnySlotTemplating.init<A>(delegate:);
  v0[3] = v24;
  v0[4] = partial apply for specialized implicit closure #6 in implicit closure #5 in AnySlotTemplating.init<A>(delegate:);
  v0[5] = v39;
  v0[6] = partial apply for specialized implicit closure #8 in implicit closure #7 in AnySlotTemplating.init<A>(delegate:);
  v0[7] = v54;
  return result;
}

{
  uint64_t (**v0)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  long long v27;
  uint64_t result;
  long long v29;
  long long v30;
  long long v31;
  uint64_t v32;
  char v33[56];

  uint64_t v1 = OUTLINED_FUNCTION_88_8();
  outlined init with copy of RecipientSlotTemplating(v1, (uint64_t)v33);
  outlined init with copy of RecipientSlotTemplating((uint64_t)v33, (uint64_t)&v29);
  uint64_t v2 = OUTLINED_FUNCTION_113_2();
  OUTLINED_FUNCTION_14_54(v2, v3, v4, v5, v6, v7, v8, v9, v29, v30, v31, v32, v33[0]);
  uint64_t v10 = OUTLINED_FUNCTION_113_2();
  OUTLINED_FUNCTION_14_54(v10, v11, v12, v13, v14, v15, v16, v17, v29, v30, v31, v32, v33[0]);
  uint64_t v18 = OUTLINED_FUNCTION_113_2();
  OUTLINED_FUNCTION_14_54(v18, v19, v20, v21, v22, v23, v24, v25, v29, v30, v31, v32, v33[0]);
  uint64_t v26 = OUTLINED_FUNCTION_113_2();
  uint64_t v27 = v30;
  *(_OWORD *)(v26 + 16) = v29;
  *(_OWORD *)(v26 + 32) = v27;
  *(_OWORD *)(v26 + 48) = v31;
  *(void *)(v26 + 64) = v32;
  uint64_t result = outlined destroy of RecipientSlotTemplating((uint64_t)v33);
  *uint64_t v0 = partial apply for specialized implicit closure #2 in implicit closure #1 in AnySlotTemplating.init<A>(delegate:);
  v0[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v2;
  v0[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))partial apply for specialized implicit closure #4 in implicit closure #3 in AnySlotTemplating.init<A>(delegate:);
  v0[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v10;
  v0[4] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))partial apply for specialized implicit closure #6 in implicit closure #5 in AnySlotTemplating.init<A>(delegate:);
  v0[5] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v18;
  v0[6] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))partial apply for specialized implicit closure #8 in implicit closure #7 in AnySlotTemplating.init<A>(delegate:);
  v0[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v26;
  return result;
}

{
  uint64_t (**v0)(uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t result;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned char v71[104];

  uint64_t v1 = OUTLINED_FUNCTION_88_8();
  outlined init with copy of Result<TemplatingResult, Error>(v1, (uint64_t)v71, &demangling cache variable for type metadata for ContactsSlotTemplating<INStartVideoCallIntent, INIntentResponse>);
  OUTLINED_FUNCTION_12_65((uint64_t)v71, v2, v3, v4, v5, v6, v7, v8, v63);
  uint64_t v9 = OUTLINED_FUNCTION_58_22();
  OUTLINED_FUNCTION_16_63(v9, v10, v11, v12, v13, v14, v15, v16, v64);
  OUTLINED_FUNCTION_12_65((uint64_t)v71, v17, v18, v19, v20, v21, v22, v23, v65);
  uint64_t v24 = OUTLINED_FUNCTION_58_22();
  OUTLINED_FUNCTION_16_63(v24, v25, v26, v27, v28, v29, v30, v31, v66);
  OUTLINED_FUNCTION_12_65((uint64_t)v71, v32, v33, v34, v35, v36, v37, v38, v67);
  uint64_t v39 = OUTLINED_FUNCTION_58_22();
  OUTLINED_FUNCTION_16_63(v39, v40, v41, v42, v43, v44, v45, v46, v68);
  OUTLINED_FUNCTION_12_65((uint64_t)v71, v47, v48, v49, v50, v51, v52, v53, v69);
  uint64_t v54 = OUTLINED_FUNCTION_58_22();
  OUTLINED_FUNCTION_16_63(v54, v55, v56, v57, v58, v59, v60, v61, v70);
  uint64_t result = outlined destroy of SpeakableString?((uint64_t)v71, &demangling cache variable for type metadata for ContactsSlotTemplating<INStartVideoCallIntent, INIntentResponse>);
  *uint64_t v0 = partial apply for specialized implicit closure #2 in implicit closure #1 in AnySlotTemplating.init<A>(delegate:);
  v0[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t))v9;
  v0[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t))partial apply for specialized implicit closure #4 in implicit closure #3 in AnySlotTemplating.init<A>(delegate:);
  v0[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t))v24;
  v0[4] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t))partial apply for specialized implicit closure #6 in implicit closure #5 in AnySlotTemplating.init<A>(delegate:);
  v0[5] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t))v39;
  v0[6] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t))partial apply for specialized implicit closure #8 in implicit closure #7 in AnySlotTemplating.init<A>(delegate:);
  v0[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t))v54;
  return result;
}

#error "43D7BC: call analysis failed (funcsize=49)"

#error "43D8A4: call analysis failed (funcsize=49)"

#error "43D990: call analysis failed (funcsize=48)"

#error "43DA70: call analysis failed (funcsize=48)"

#error "43DB50: call analysis failed (funcsize=48)"

#error "43DC30: call analysis failed (funcsize=48)"

#error "43DE18: call analysis failed (funcsize=48)"

uint64_t specialized SlotTemplating.toAnySlotTemplating()@<X0>(void *a1@<X8>)
{
  outlined init with copy of Result<TemplatingResult, Error>(v1, (uint64_t)v9, &demangling cache variable for type metadata for ContactsSlotTemplating<INStartAudioCallIntent, INIntentResponse>);
  outlined init with copy of Result<TemplatingResult, Error>((uint64_t)v9, (uint64_t)v8, &demangling cache variable for type metadata for ContactsSlotTemplating<INStartAudioCallIntent, INIntentResponse>);
  uint64_t v3 = swift_allocObject();
  memcpy((void *)(v3 + 16), v8, 0x68uLL);
  outlined init with copy of Result<TemplatingResult, Error>((uint64_t)v9, (uint64_t)v8, &demangling cache variable for type metadata for ContactsSlotTemplating<INStartAudioCallIntent, INIntentResponse>);
  uint64_t v4 = swift_allocObject();
  memcpy((void *)(v4 + 16), v8, 0x68uLL);
  outlined init with copy of Result<TemplatingResult, Error>((uint64_t)v9, (uint64_t)v8, &demangling cache variable for type metadata for ContactsSlotTemplating<INStartAudioCallIntent, INIntentResponse>);
  uint64_t v5 = swift_allocObject();
  memcpy((void *)(v5 + 16), v8, 0x68uLL);
  outlined init with copy of Result<TemplatingResult, Error>((uint64_t)v9, (uint64_t)v8, &demangling cache variable for type metadata for ContactsSlotTemplating<INStartAudioCallIntent, INIntentResponse>);
  uint64_t v6 = swift_allocObject();
  memcpy((void *)(v6 + 16), v8, 0x68uLL);
  uint64_t result = outlined destroy of SpeakableString?((uint64_t)v9, &demangling cache variable for type metadata for ContactsSlotTemplating<INStartAudioCallIntent, INIntentResponse>);
  *a1 = partial apply for specialized implicit closure #2 in implicit closure #1 in AnySlotTemplating.init<A>(delegate:);
  a1[1] = v3;
  a1[2] = partial apply for specialized implicit closure #4 in implicit closure #3 in AnySlotTemplating.init<A>(delegate:);
  a1[3] = v4;
  a1[4] = partial apply for specialized implicit closure #6 in implicit closure #5 in AnySlotTemplating.init<A>(delegate:);
  a1[5] = v5;
  a1[6] = partial apply for specialized implicit closure #8 in implicit closure #7 in AnySlotTemplating.init<A>(delegate:);
  a1[7] = v6;
  return result;
}

{
  uint64_t v1;
  _OWORD *v3;
  long long v4;
  _OWORD *v5;
  long long v6;
  _OWORD *v7;
  long long v8;
  _OWORD *v9;
  long long v10;
  uint64_t result;
  long long v12;
  long long v13;
  long long v14;
  unsigned char v15[48];

  outlined init with copy of Result<TemplatingResult, Error>(v1, (uint64_t)v15, &demangling cache variable for type metadata for DestinationTypeSlotTemplating<INStartAudioCallIntent, INIntentResponse>);
  outlined init with copy of Result<TemplatingResult, Error>((uint64_t)v15, (uint64_t)&v12, &demangling cache variable for type metadata for DestinationTypeSlotTemplating<INStartAudioCallIntent, INIntentResponse>);
  uint64_t v3 = (_OWORD *)swift_allocObject();
  uint64_t v4 = v13;
  v3[1] = v12;
  v3[2] = v4;
  v3[3] = v14;
  outlined init with copy of Result<TemplatingResult, Error>((uint64_t)v15, (uint64_t)&v12, &demangling cache variable for type metadata for DestinationTypeSlotTemplating<INStartAudioCallIntent, INIntentResponse>);
  uint64_t v5 = (_OWORD *)swift_allocObject();
  uint64_t v6 = v13;
  v5[1] = v12;
  v5[2] = v6;
  void v5[3] = v14;
  outlined init with copy of Result<TemplatingResult, Error>((uint64_t)v15, (uint64_t)&v12, &demangling cache variable for type metadata for DestinationTypeSlotTemplating<INStartAudioCallIntent, INIntentResponse>);
  uint64_t v7 = (_OWORD *)swift_allocObject();
  uint64_t v8 = v13;
  v7[1] = v12;
  v7[2] = v8;
  v7[3] = v14;
  outlined init with copy of Result<TemplatingResult, Error>((uint64_t)v15, (uint64_t)&v12, &demangling cache variable for type metadata for DestinationTypeSlotTemplating<INStartAudioCallIntent, INIntentResponse>);
  uint64_t v9 = (_OWORD *)swift_allocObject();
  uint64_t v10 = v13;
  v9[1] = v12;
  v9[2] = v10;
  v9[3] = v14;
  uint64_t result = outlined destroy of SpeakableString?((uint64_t)v15, &demangling cache variable for type metadata for DestinationTypeSlotTemplating<INStartAudioCallIntent, INIntentResponse>);
  *a1 = partial apply for specialized implicit closure #2 in implicit closure #1 in AnySlotTemplating.init<A>(delegate:);
  a1[1] = v3;
  a1[2] = partial apply for specialized implicit closure #4 in implicit closure #3 in AnySlotTemplating.init<A>(delegate:);
  a1[3] = v5;
  a1[4] = partial apply for specialized implicit closure #6 in implicit closure #5 in AnySlotTemplating.init<A>(delegate:);
  a1[5] = v7;
  a1[6] = partial apply for specialized implicit closure #8 in implicit closure #7 in AnySlotTemplating.init<A>(delegate:);
  a1[7] = v9;
  return result;
}

{
  uint64_t v1;
  _OWORD *v3;
  long long v4;
  _OWORD *v5;
  long long v6;
  _OWORD *v7;
  long long v8;
  _OWORD *v9;
  long long v10;
  uint64_t result;
  long long v12;
  long long v13;
  long long v14;
  unsigned char v15[48];

  outlined init with copy of Result<TemplatingResult, Error>(v1, (uint64_t)v15, &demangling cache variable for type metadata for PreferredCallProviderSlotTemplating<INStartAudioCallIntent, INIntentResponse>);
  outlined init with copy of Result<TemplatingResult, Error>((uint64_t)v15, (uint64_t)&v12, &demangling cache variable for type metadata for PreferredCallProviderSlotTemplating<INStartAudioCallIntent, INIntentResponse>);
  uint64_t v3 = (_OWORD *)swift_allocObject();
  uint64_t v4 = v13;
  v3[1] = v12;
  v3[2] = v4;
  v3[3] = v14;
  outlined init with copy of Result<TemplatingResult, Error>((uint64_t)v15, (uint64_t)&v12, &demangling cache variable for type metadata for PreferredCallProviderSlotTemplating<INStartAudioCallIntent, INIntentResponse>);
  uint64_t v5 = (_OWORD *)swift_allocObject();
  uint64_t v6 = v13;
  v5[1] = v12;
  v5[2] = v6;
  void v5[3] = v14;
  outlined init with copy of Result<TemplatingResult, Error>((uint64_t)v15, (uint64_t)&v12, &demangling cache variable for type metadata for PreferredCallProviderSlotTemplating<INStartAudioCallIntent, INIntentResponse>);
  uint64_t v7 = (_OWORD *)swift_allocObject();
  uint64_t v8 = v13;
  v7[1] = v12;
  v7[2] = v8;
  v7[3] = v14;
  outlined init with copy of Result<TemplatingResult, Error>((uint64_t)v15, (uint64_t)&v12, &demangling cache variable for type metadata for PreferredCallProviderSlotTemplating<INStartAudioCallIntent, INIntentResponse>);
  uint64_t v9 = (_OWORD *)swift_allocObject();
  uint64_t v10 = v13;
  v9[1] = v12;
  v9[2] = v10;
  v9[3] = v14;
  uint64_t result = outlined destroy of SpeakableString?((uint64_t)v15, &demangling cache variable for type metadata for PreferredCallProviderSlotTemplating<INStartAudioCallIntent, INIntentResponse>);
  *a1 = partial apply for specialized implicit closure #2 in implicit closure #1 in AnySlotTemplating.init<A>(delegate:);
  a1[1] = v3;
  a1[2] = partial apply for specialized implicit closure #4 in implicit closure #3 in AnySlotTemplating.init<A>(delegate:);
  a1[3] = v5;
  a1[4] = partial apply for specialized implicit closure #6 in implicit closure #5 in AnySlotTemplating.init<A>(delegate:);
  a1[5] = v7;
  a1[6] = partial apply for specialized implicit closure #8 in implicit closure #7 in AnySlotTemplating.init<A>(delegate:);
  a1[7] = v9;
  return result;
}

uint64_t specialized implicit closure #4 in implicit closure #3 in AnySlotTemplating.init<A>(delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12 = *(void **)(a9 + 40);
  type metadata accessor for PhoneSearchCallHistoryIntent(0);
  uint64_t v13 = PhoneSearchCallHistoryIntent.__allocating_init(intent:)(a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(class metadata base offset for SearchCallHistoryCATs + *v12 + 160))(v13, a7, a8);

  return swift_release();
}

uint64_t specialized implicit closure #4 in implicit closure #3 in AnySlotTemplating.init<A>(delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v22 = a8;
  uint64_t v12 = type metadata accessor for Locale();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v16 = [a4 itemToConfirm];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for INPerson();
  if (swift_dynamicCast()) {
    id v17 = (id)v23[5];
  }
  else {
    id v17 = [a5 recipient];
  }
  uint64_t v18 = *(void **)(a9 + 40);
  type metadata accessor for PhonePerson(0);
  static Device.current.getter();
  __swift_project_boxed_opaque_existential_1(v23, v23[3]);
  dispatch thunk of DeviceState.siriLocale.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  uint64_t v19 = static PhonePerson.make(phonePerson:options:locale:)(v17, 0, (uint64_t)v15);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(class metadata base offset for SearchCallHistoryCATs + *v18 + 128))(v19, a7, v22);

  return swift_release();
}

uint64_t specialized implicit closure #4 in implicit closure #3 in AnySlotTemplating.init<A>(delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))
{
  return a10(a1, a2, a3, a4, a5, a6 & 1);
}

{
  return a10(a1, a2, a3, a4, a5, a6 & 1);
}

uint64_t specialized implicit closure #4 in implicit closure #3 in AnySlotTemplating.init<A>(delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, char a6, uint64_t a7, uint64_t a8)
{
  return specialized ContactsSlotTemplating.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:inferenceSource:_:)(a1, a2, a3, a4, a5, a6 & 1, a7, a8);
}

#error "43E80C: call analysis failed (funcsize=13)"

uint64_t specialized implicit closure #6 in implicit closure #5 in AnySlotTemplating.init<A>(delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void **)(a10 + 48);
  uint64_t v15 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload((uint64_t)v13, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(class metadata base offset for StartCallCATs + *v14 + 256))(v13, a8, a9);
  return outlined destroy of SpeakableString?((uint64_t)v13, &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t specialized implicit closure #8 in implicit closure #7 in AnySlotTemplating.init<A>(delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = *(void **)(a10 + 40);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a8;
  *(void *)(v12 + 24) = a9;
  uint64_t v13 = *(void (**)(uint64_t (*)(uint64_t), uint64_t))(class metadata base offset for StartCallCATs
                                                                        + *v11
                                                                        + 1696);
  swift_retain();
  v13(partial apply for closure #1 in CallRecordToCallBackSlotTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:), v12);

  return swift_release();
}

uint64_t specialized implicit closure #8 in implicit closure #7 in AnySlotTemplating.init<A>(delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  return CallCapabilitySlotTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:)(a1, a2, a3, a4, a5, a6, a7 & 1, a8, a9);
}

uint64_t specialized implicit closure #8 in implicit closure #7 in AnySlotTemplating.init<A>(delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = *(void **)(a10 + 40);
  type metadata accessor for PhoneSearchCallHistoryIntent(0);
  uint64_t v13 = PhoneSearchCallHistoryIntent.__allocating_init(intent:)(a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(class metadata base offset for SearchCallHistoryCATs + *v12 + 1088))(v13, a8, a9);

  return swift_release();
}

void specialized implicit closure #8 in implicit closure #7 in AnySlotTemplating.init<A>(delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
}

uint64_t specialized implicit closure #8 in implicit closure #7 in AnySlotTemplating.init<A>(delegate:)(int a1, int a2, int a3, void *a4, void *a5, int a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(void *, void))
{
  return specialized PreferredCallProviderSlotTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:)(a1, a2, a3, a4, a5, a6, a7 & 1, a8, a9, a11);
}

#error "43EB84: call analysis failed (funcsize=17)"

uint64_t specialized ContactsSlotTemplating.makeParameterPromptDialog(app:parameterName:intent:_:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v44 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v44 - v18;
  if ((specialized static ContactsSlotTemplating.isMissingMeCardCase(intent:)((uint64_t)a4, (uint64_t (*)(void))outlined bridged method (pb) of @objc INStartVideoCallIntent.contacts.getter, (uint64_t (*)(uint64_t))outlined bridged method (pb) of @objc INStartVideoCallIntent.contacts.getter) & 1) == 0)
  {
    uint64_t v28 = *(void **)(v6 + 40);
    uint64_t v29 = type metadata accessor for SpeakableString();
    __swift_storeEnumTagSinglePayload((uint64_t)v19, 1, 1, v29);
    (*(void (**)(char *, void, void, void, void, void, uint64_t, uint64_t))(class metadata base offset for StartCallCATs
                                                                                             + *v28
                                                                                             + 1312))(v19, 0, 0, 0, 0, 0, a5, a6);
    uint64_t v17 = v19;
    return outlined destroy of SpeakableString?((uint64_t)v17, &demangling cache variable for type metadata for SpeakableString?);
  }
  uint64_t v45 = a5;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.siriPhone);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl(&dword_0, v21, v22, "User requested a handle label with inferred isMe=true, but no MeCard person exists. Provide specific prompt dialog for this case StartCall#PromptForContactsKnownLabel.", v23, 2u);
    swift_slowDealloc();
  }

  unint64_t v24 = outlined bridged method (pb) of @objc INStartVideoCallIntent.contacts.getter(a4);
  unint64_t v25 = v24;
  if (!v24) {
    goto LABEL_18;
  }
  if (v24 >> 62)
  {
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_9;
    }
LABEL_14:
    uint64_t v27 = 0;
    goto LABEL_15;
  }
  if (!*(void *)((char *)&dword_10 + (v24 & 0xFFFFFFFFFFFFFF8))) {
    goto LABEL_14;
  }
LABEL_9:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v25 & 0xC000000000000001) == 0);
  if ((v25 & 0xC000000000000001) != 0) {
    id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v26 = *(id *)(v25 + 32);
  }
  uint64_t v27 = v26;
LABEL_15:
  swift_bridgeObjectRelease();
  unint64_t v25 = (unint64_t)[v27 personHandle];

  if (!v25 || (id v30 = [(id)v25 label]) == 0)
  {
LABEL_18:
    uint64_t v33 = type metadata accessor for SpeakableString();
    __swift_storeEnumTagSinglePayload((uint64_t)v17, 1, 1, v33);
    goto LABEL_19;
  }
  uint64_t v31 = v30;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  swift_bridgeObjectRetain();
  SpeakableString.init(print:speak:)();
  uint64_t v32 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v32);
  swift_bridgeObjectRelease();
LABEL_19:
  type metadata accessor for DialogPersonHandle();
  uint64_t v34 = (id *)(id)v25;
  uint64_t v35 = DialogPersonHandle.__allocating_init(handle:)();
  type metadata accessor for DialogPersonHandle.Builder();
  swift_allocObject();
  DialogPersonHandle.Builder.init()();
  uint64_t v44 = v34;
  uint64_t v36 = a6;
  if (v35)
  {
    swift_retain();
    DialogPersonHandle.label.getter();
    swift_release();
  }
  else
  {
    uint64_t v37 = type metadata accessor for SpeakableString();
    __swift_storeEnumTagSinglePayload((uint64_t)v14, 1, 1, v37);
  }
  dispatch thunk of DialogPersonHandle.Builder.withLabel(_:)();
  swift_release();
  outlined destroy of SpeakableString?((uint64_t)v14, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v38 = @"PhoneNumber";
  uint64_t v39 = @"PhoneNumber";
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  SpeakableString.init(print:speak:)();
  uint64_t v40 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload((uint64_t)v19, 0, 1, v40);
  dispatch thunk of DialogPersonHandle.Builder.withType(_:)();
  swift_release();
  outlined destroy of SpeakableString?((uint64_t)v19, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v41 = dispatch thunk of DialogPersonHandle.Builder.build()();
  swift_release();
  uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(class metadata base offset for StartCallCATs
                                                                 + **(void **)(v7 + 40)
                                                                 + 1344);
  swift_retain();
  v42(v17, v41, v45, v36);

  swift_release();
  swift_release_n();
  return outlined destroy of SpeakableString?((uint64_t)v17, &demangling cache variable for type metadata for SpeakableString?);
}

void specialized ContactsSlotTemplating.makeParameterPromptDialog(app:parameterName:intent:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t (*a21)(uint64_t))
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v23 = v22;
  unint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v33 = OUTLINED_FUNCTION_11_0(v32);
  __chkstk_darwin(v33);
  OUTLINED_FUNCTION_46_0();
  uint64_t v36 = v34 - v35;
  uint64_t v38 = __chkstk_darwin(v37);
  uint64_t v40 = (char *)v74 - v39;
  __chkstk_darwin(v38);
  uint64_t v42 = (char *)v74 - v41;
  if ((specialized static ContactsSlotTemplating.isMissingMeCardCase(intent:)((uint64_t)v31, v25, v23) & 1) == 0)
  {
    uint64_t v52 = *(void **)(v21 + 40);
    uint64_t v53 = type metadata accessor for SpeakableString();
    OUTLINED_FUNCTION_14_16((uint64_t)v42, v54, v55, v53);
    BOOL v56 = [v31 preferredCallProvider] == (char *)&dword_0 + 2;
    (*(void (**)(char *, BOOL, void, void, void, void, uint64_t, uint64_t))(class metadata base offset for StartCallCATs
                                                                                             + *v52
                                                                                             + 1312))(v42, v56, 0, 0, 0, 0, v29, v27);
    uint64_t v40 = v42;
    goto LABEL_23;
  }
  v74[0] = v21;
  v74[1] = v29;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v43 = type metadata accessor for Logger();
  __swift_project_value_buffer(v43, (uint64_t)static Logger.siriPhone);
  uint64_t v44 = Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v44, v45))
  {
    uint64_t v46 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v46 = 0;
    _os_log_impl(&dword_0, v44, v45, "User requested a handle label with inferred isMe=true, but no MeCard person exists. Provide specific prompt dialog for this case StartCall#PromptForContactsKnownLabel.", v46, 2u);
    OUTLINED_FUNCTION_6();
  }

  uint64_t v47 = OUTLINED_FUNCTION_55_24();
  unint64_t v48 = a21(v47);
  unint64_t v49 = v48;
  if (!v48) {
    goto LABEL_18;
  }
  if (v48 >> 62)
  {
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_9;
    }
LABEL_14:
    uint64_t v51 = 0;
    goto LABEL_15;
  }
  if (!*(void *)((char *)&dword_10 + (v48 & 0xFFFFFFFFFFFFFF8))) {
    goto LABEL_14;
  }
LABEL_9:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v49 & 0xC000000000000001) == 0, v49);
  if ((v49 & 0xC000000000000001) != 0) {
    id v50 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v50 = *(id *)(v49 + 32);
  }
  uint64_t v51 = v50;
LABEL_15:
  swift_bridgeObjectRelease();
  unint64_t v49 = (unint64_t)objc_msgSend(v51, "personHandle", v74[0]);

  if (!v49 || (id v57 = [(id)v49 label]) == 0)
  {
LABEL_18:
    uint64_t v60 = type metadata accessor for SpeakableString();
    OUTLINED_FUNCTION_14_16((uint64_t)v40, v61, v62, v60);
    goto LABEL_19;
  }
  uint64_t v58 = v57;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_11_2();
  uint64_t v59 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload((uint64_t)v40, 0, 1, v59);
  swift_bridgeObjectRelease();
LABEL_19:
  type metadata accessor for DialogPersonHandle();
  uint64_t v63 = (id *)(id)v49;
  uint64_t v64 = DialogPersonHandle.__allocating_init(handle:)();
  type metadata accessor for DialogPersonHandle.Builder();
  swift_allocObject();
  DialogPersonHandle.Builder.init()();
  if (v64)
  {
    swift_retain();
    DialogPersonHandle.label.getter();
    swift_release();
  }
  else
  {
    uint64_t v65 = type metadata accessor for SpeakableString();
    OUTLINED_FUNCTION_14_16(v36, v66, v67, v65);
  }
  dispatch thunk of DialogPersonHandle.Builder.withLabel(_:)();
  swift_release();
  outlined destroy of SpeakableString?(v36, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v68 = @"PhoneNumber";
  uint64_t v69 = @"PhoneNumber";
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  OUTLINED_FUNCTION_11_2();
  uint64_t v70 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_29_8(v70);
  dispatch thunk of DialogPersonHandle.Builder.withType(_:)();
  swift_release();
  outlined destroy of SpeakableString?((uint64_t)v42, &demangling cache variable for type metadata for SpeakableString?);
  dispatch thunk of DialogPersonHandle.Builder.build()();
  swift_release();
  OUTLINED_FUNCTION_13_63();
  BOOL v72 = *(void (**)(uint64_t))(class metadata base offset for StartCallCATs + v71 + 1344);
  swift_retain();
  uint64_t v73 = OUTLINED_FUNCTION_6_23();
  v72(v73);

  swift_release();
  swift_release_n();
LABEL_23:
  outlined destroy of SpeakableString?((uint64_t)v40, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_26_1();
}

uint64_t specialized static ContactsSlotTemplating.isMissingMeCardCase(intent:)(void *a1)
{
  unint64_t v1 = outlined bridged method (pb) of @objc INAddCallParticipantIntent.participants.getter(a1);
  unint64_t v2 = v1;
  if (!v1)
  {
    uint64_t v6 = 0;
    unint64_t v8 = 0;
LABEL_10:
    uint64_t v4 = 0;
    goto LABEL_11;
  }
  if (v1 >> 62)
  {
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  if (!*(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8)))
  {
LABEL_9:
    swift_bridgeObjectRelease();
    uint64_t v6 = 0;
    unint64_t v8 = 0;
    LODWORD(v2) = 0;
    goto LABEL_10;
  }
LABEL_4:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v2 & 0xC000000000000001) == 0);
  if ((v2 & 0xC000000000000001) != 0) {
    id v3 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v3 = *(id *)(v2 + 32);
  }
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  LODWORD(v2) = [v4 isMe];
  id v5 = [v4 displayName];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v8 = v7;

LABEL_11:
  char v9 = specialized Optional<A>.isNilOrEmpty.getter(v6, v8);
  swift_bridgeObjectRelease();
  if (!v4)
  {
LABEL_15:
    uint64_t v13 = 0;
    uint64_t v11 = 0;
    goto LABEL_17;
  }
  id v10 = [v4 personHandle];
  uint64_t v11 = v10;
  if (v10)
  {
    id v12 = [v10 label];

    if (v12)
    {
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v11 = v14;

      goto LABEL_17;
    }
    goto LABEL_15;
  }
  uint64_t v13 = 0;
LABEL_17:
  char v15 = specialized Optional<A>.isNilOrEmpty.getter(v13, (unint64_t)v11);
  swift_bridgeObjectRelease();
  if (v2)
  {
    char v16 = specialized INPersonContainingIntent.hasSiriMatches.getter();

    char v17 = (v16 ^ 1) & v9 & (v15 ^ 1);
  }
  else
  {

    char v17 = 0;
  }
  return v17 & 1;
}

uint64_t specialized static ContactsSlotTemplating.isMissingMeCardCase(intent:)(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t))
{
  unint64_t v4 = a2();
  unint64_t v5 = v4;
  if (!v4)
  {
    uint64_t v9 = 0;
    unint64_t v11 = 0;
LABEL_10:
    unint64_t v7 = 0;
    goto LABEL_11;
  }
  if (v4 >> 62)
  {
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  if (!*(void *)((char *)&dword_10 + (v4 & 0xFFFFFFFFFFFFFF8)))
  {
LABEL_9:
    swift_bridgeObjectRelease();
    uint64_t v9 = 0;
    unint64_t v11 = 0;
    LODWORD(v5) = 0;
    goto LABEL_10;
  }
LABEL_4:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v5 & 0xC000000000000001) == 0, v5);
  if ((v5 & 0xC000000000000001) != 0) {
    id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v6 = *(id *)(v5 + 32);
  }
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();
  LODWORD(v5) = [v7 isMe];
  id v8 = [v7 displayName];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v11 = v10;

LABEL_11:
  char v12 = specialized Optional<A>.isNilOrEmpty.getter(v9, v11);
  swift_bridgeObjectRelease();
  if (!v7)
  {
LABEL_15:
    uint64_t v16 = 0;
    uint64_t v14 = 0;
    goto LABEL_17;
  }
  id v13 = [v7 personHandle];
  uint64_t v14 = v13;
  if (v13)
  {
    id v15 = [v13 label];

    if (v15)
    {
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v17;

      goto LABEL_17;
    }
    goto LABEL_15;
  }
  uint64_t v16 = 0;
LABEL_17:
  char v18 = specialized Optional<A>.isNilOrEmpty.getter(v16, (unint64_t)v14);
  swift_bridgeObjectRelease();
  if (v5)
  {
    char v19 = specialized INPersonContainingIntent.hasSiriMatches.getter(a3);

    char v20 = (v19 ^ 1) & v12 & (v18 ^ 1);
  }
  else
  {

    char v20 = 0;
  }
  return v20 & 1;
}

uint64_t specialized ContactsSlotTemplating.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:inferenceSource:_:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = type metadata accessor for Locale();
  uint64_t v45 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v18 = __chkstk_darwin(v17 - 8);
  char v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  os_log_type_t v22 = (char *)&v40 - v21;
  unint64_t v44 = (unint64_t)[a4 confirmationReason];
  id v23 = [a4 itemToConfirm];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for INPerson();
  int v24 = swift_dynamicCast();
  uint64_t v46 = a7;
  uint64_t v47 = a8;
  if (v24)
  {
    unint64_t v25 = v50;
    goto LABEL_12;
  }
  unint64_t v26 = outlined bridged method (pb) of @objc INStartVideoCallIntent.contacts.getter(a5);
  if (!v26) {
    goto LABEL_11;
  }
  unint64_t v27 = v26;
  if (v26 >> 62)
  {
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_6;
    }
    goto LABEL_10;
  }
  if (!*(void *)((char *)&dword_10 + (v26 & 0xFFFFFFFFFFFFFF8)))
  {
LABEL_10:
    swift_bridgeObjectRelease();
LABEL_11:
    unint64_t v25 = 0;
    goto LABEL_12;
  }
LABEL_6:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v27 & 0xC000000000000001) == 0);
  if ((v27 & 0xC000000000000001) != 0) {
    id v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v28 = *(id *)(v27 + 32);
  }
  unint64_t v25 = v28;
  swift_bridgeObjectRelease();
LABEL_12:
  unint64_t v29 = outlined bridged method (pb) of @objc INStartVideoCallIntent.contacts.getter(a5);
  if (!v29) {
    goto LABEL_21;
  }
  unint64_t v30 = v29;
  if (!(v29 >> 62))
  {
    if (*(void *)((char *)&dword_10 + (v29 & 0xFFFFFFFFFFFFFF8))) {
      goto LABEL_15;
    }
LABEL_20:
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_20;
  }
LABEL_15:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v30 & 0xC000000000000001) == 0);
  if ((v30 & 0xC000000000000001) != 0) {
    id v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v31 = *(id *)(v30 + 32);
  }
  uint64_t v32 = v31;
  swift_bridgeObjectRelease();
  id v33 = [v32 personHandle];

  if (v33)
  {
    unsigned int v43 = [v33 isSuggested];

    goto LABEL_22;
  }
LABEL_21:
  unsigned int v43 = 0;
LABEL_22:
  uint64_t v34 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload((uint64_t)v22, 1, 1, v34);
  if ((a6 & 1) == 0)
  {
    SpeakableString.init(print:speak:)();
    outlined destroy of SpeakableString?((uint64_t)v22, &demangling cache variable for type metadata for SpeakableString?);
    __swift_storeEnumTagSinglePayload((uint64_t)v20, 0, 1, v34);
    outlined init with take of SpeakableString?((uint64_t)v20, (uint64_t)v22);
  }
  uint64_t v42 = *(void **)(v8 + 40);
  type metadata accessor for PhonePerson(0);
  static Device.current.getter();
  __swift_project_boxed_opaque_existential_1(v48, v49);
  dispatch thunk of DeviceState.siriLocale.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
  uint64_t v35 = static PhonePerson.make(phonePerson:options:locale:)(v25, 0, (uint64_t)v16);
  uint64_t v41 = v22;
  uint64_t v36 = *(void (**)(char *, uint64_t))(v45 + 8);
  v36(v16, v14);
  static Device.current.getter();
  __swift_project_boxed_opaque_existential_1(v48, v49);
  dispatch thunk of DeviceState.siriLocale.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
  uint64_t v37 = static PhonePerson.make(phonePerson:options:locale:)(v25, 0, (uint64_t)v16);
  v36(v16, v14);
  uint64_t v38 = (uint64_t)v41;
  (*(void (**)(void, uint64_t, uint64_t, BOOL, void, char *, uint64_t, uint64_t))(class metadata base offset for StartCallCATs
                                                                                           + *v42
                                                                                           + 64))(0, v35, v37, (v44 & 0xFFFFFFFFFFFFFFFELL) == 2, v43, v41, v46, v47);
  swift_release();
  swift_release();

  return outlined destroy of SpeakableString?(v38, &demangling cache variable for type metadata for SpeakableString?);
}

void specialized ContactsSlotTemplating.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:inferenceSource:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t (*a21)(uint64_t))
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v73 = v21;
  uint64_t v76 = v22;
  uint64_t v77 = v23;
  char v25 = v24;
  unint64_t v27 = v26;
  unint64_t v29 = v28;
  uint64_t v75 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_1();
  uint64_t v72 = v30;
  __chkstk_darwin(v31);
  OUTLINED_FUNCTION_3_1();
  uint64_t v33 = v32;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v35 = OUTLINED_FUNCTION_11_0(v34);
  __chkstk_darwin(v35);
  OUTLINED_FUNCTION_46_0();
  uint64_t v38 = v36 - v37;
  __chkstk_darwin(v39);
  uint64_t v41 = (char *)&v68 - v40;
  unint64_t v74 = (unint64_t)[v29 confirmationReason];
  id v42 = [v29 itemToConfirm];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for INPerson();
  if (swift_dynamicCast())
  {
    unsigned int v43 = v80;
    goto LABEL_12;
  }
  uint64_t v44 = OUTLINED_FUNCTION_55_24();
  uint64_t v45 = a21(v44);
  if (!v45) {
    goto LABEL_11;
  }
  uint64_t v46 = v45;
  OUTLINED_FUNCTION_24_16();
  if (v48)
  {
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_6;
    }
    goto LABEL_10;
  }
  if (!*(void *)(v47 + 16))
  {
LABEL_10:
    swift_bridgeObjectRelease();
LABEL_11:
    unsigned int v43 = 0;
    goto LABEL_12;
  }
LABEL_6:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v46 & 0xC000000000000001) == 0, v46);
  if ((v46 & 0xC000000000000001) != 0) {
    id v49 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v49 = *(id *)(v46 + 32);
  }
  unsigned int v43 = v49;
  swift_bridgeObjectRelease();
LABEL_12:
  uint64_t v50 = OUTLINED_FUNCTION_55_24();
  uint64_t v51 = a21(v50);
  if (v51)
  {
    uint64_t v52 = v51;
    OUTLINED_FUNCTION_24_16();
    if (v54)
    {
      if (_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_15;
      }
    }
    else if (*(void *)(v53 + 16))
    {
LABEL_15:
      uint64_t v55 = v43;
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v52 & 0xC000000000000001) == 0, v52);
      BOOL v56 = v41;
      if ((v52 & 0xC000000000000001) != 0) {
        id v57 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v57 = *(id *)(v52 + 32);
      }
      uint64_t v58 = v57;
      swift_bridgeObjectRelease();
      id v59 = [v58 personHandle];

      if (v59)
      {
        unsigned int v71 = [v59 isSuggested];
      }
      else
      {
        unsigned int v71 = 0;
      }
      uint64_t v41 = v56;
      unsigned int v43 = v55;
      goto LABEL_24;
    }
    swift_bridgeObjectRelease();
  }
  unsigned int v71 = 0;
LABEL_24:
  uint64_t v60 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload((uint64_t)v41, 1, 1, v60);
  if ((v25 & 1) == 0)
  {
    SpeakableString.init(print:speak:)();
    outlined destroy of SpeakableString?((uint64_t)v41, &demangling cache variable for type metadata for SpeakableString?);
    __swift_storeEnumTagSinglePayload(v38, 0, 1, v60);
    outlined init with take of SpeakableString?(v38, (uint64_t)v41);
  }
  uint64_t v69 = (void *)v73[5];
  uint64_t v70 = v41;
  uint64_t v73 = [v27 preferredCallProvider];
  type metadata accessor for PhonePerson(0);
  static Device.current.getter();
  __swift_project_boxed_opaque_existential_1(v78, v79);
  dispatch thunk of DeviceState.siriLocale.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v78);
  uint64_t v61 = static PhonePerson.make(phonePerson:options:locale:)(v43, 0, v33);
  uint64_t v62 = v43;
  uint64_t v63 = *(void (**)(void))(v72 + 8);
  OUTLINED_FUNCTION_3_86();
  v63();
  static Device.current.getter();
  __swift_project_boxed_opaque_existential_1(v78, v79);
  dispatch thunk of DeviceState.siriLocale.getter();
  uint64_t v64 = (void *)OUTLINED_FUNCTION_99_10((uint64_t)v78);
  uint64_t v66 = static PhonePerson.make(phonePerson:options:locale:)(v64, v65, v33);
  OUTLINED_FUNCTION_3_86();
  v63();
  uint64_t v67 = (uint64_t)v70;
  (*(void (**)(BOOL, uint64_t, uint64_t, BOOL, void, char *, uint64_t, uint64_t))(class metadata base offset for StartCallCATs
                                                                                         + *v69
                                                                                         + 64))(v73 == (void *)((char *)&dword_0 + 2), v61, v66, (v74 & 0xFFFFFFFFFFFFFFFELL) == 2, v71, v70, v76, v77);
  swift_release();
  swift_release();

  outlined destroy of SpeakableString?(v67, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_26_1();
}

void specialized ContactsSlotTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  OUTLINED_FUNCTION_24_0();
  a19 = v22;
  a20 = v23;
  uint64_t v24 = v20;
  unint64_t v26 = v25;
  OUTLINED_FUNCTION_70_11();
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v28 = OUTLINED_FUNCTION_11_0(v27);
  __chkstk_darwin(v28);
  OUTLINED_FUNCTION_3_1();
  uint64_t v136 = v29;
  uint64_t v140 = type metadata accessor for InteractionType();
  OUTLINED_FUNCTION_1();
  uint64_t v139 = v30;
  __chkstk_darwin(v31);
  OUTLINED_FUNCTION_5_8();
  OUTLINED_FUNCTION_15_1();
  __chkstk_darwin(v32);
  OUTLINED_FUNCTION_10_14();
  OUTLINED_FUNCTION_93_12(v33);
  uint64_t v148 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_1();
  __chkstk_darwin(v34);
  OUTLINED_FUNCTION_15_1();
  __chkstk_darwin(v35);
  OUTLINED_FUNCTION_15_1();
  uint64_t v37 = __chkstk_darwin(v36);
  uint64_t v135 = OUTLINED_FUNCTION_49_2(v37, v38, v39, v40, v41, v42, v43, v44, v134);
  OUTLINED_FUNCTION_1();
  __chkstk_darwin(v45);
  OUTLINED_FUNCTION_3_1();
  v145 = v26;
  uint64_t v46 = outlined bridged method (pb) of @objc INAddCallParticipantIntent.participants.getter(v26);
  id v47 = [v21 disambiguationItems];
  static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_bridgeObjectRelease();
  id v48 = OUTLINED_FUNCTION_89_11((const char **)&selRef_alternatives);
  uint64_t v49 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v50 = specialized _arrayConditionalCast<A, B>(_:)(v49);
  uint64_t v51 = _swiftEmptyArrayStorage;
  if (v50) {
    unint64_t v52 = (unint64_t)v50;
  }
  else {
    unint64_t v52 = (unint64_t)_swiftEmptyArrayStorage;
  }
  p_name = (char **)((unint64_t)v46 >> 62);
  if (v46)
  {
    if (p_name)
    {
      swift_bridgeObjectRetain();
      uint64_t v55 = _CocoaArrayWrapper.endIndex.getter();
      if (v55) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v54 = *(void *)((char *)&dword_10 + (v46 & 0xFFFFFFFFFFFFFF8));
      uint64_t v55 = swift_bridgeObjectRetain();
      if (v54)
      {
LABEL_7:
        OUTLINED_FUNCTION_64_11(v55, (v46 & 0xC000000000000001) == 0);
        if ((v46 & 0xC000000000000001) != 0) {
          goto LABEL_92;
        }
        id v56 = *(id *)(v46 + 32);
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  while (1)
  {
    App.isFirstParty()();
    swift_bridgeObjectRelease();
    unint64_t v60 = v52 >> 62;
    if ((specialized Sequence.contains(where:)(v52, (char *)&dword_0 + 2) & 1) == 0
      || (specialized Sequence.contains(where:)(v52, (char *)&dword_0 + 1) & 1) == 0)
    {
      break;
    }
    uint64_t v142 = v24;
    swift_bridgeObjectRelease();
    if (v60)
    {
      uint64_t v24 = v52;
      swift_bridgeObjectRetain();
      uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
      if (!v61)
      {
LABEL_97:
        swift_bridgeObjectRelease_n();
        if (one-time initialization token for siriPhone != -1) {
          swift_once();
        }
        __swift_project_value_buffer(v135, (uint64_t)static Logger.siriPhone);
        uint64_t v113 = OUTLINED_FUNCTION_69_16();
        v114(v113);
        uint64_t v24 = Logger.logObject.getter();
        os_log_type_t v115 = static os_log_type_t.error.getter();
        uint64_t v46 = (uint64_t)"Foreign emergency check should guarantee the presence of a nonLocal emergencyType INPerson";
        if (OUTLINED_FUNCTION_1_34(v115))
        {
          OUTLINED_FUNCTION_3_36();
          v151[0] = OUTLINED_FUNCTION_9_35();
          uint64_t v116 = OUTLINED_FUNCTION_32_32(4.8149e-34);
          OUTLINED_FUNCTION_52_24(v116);
          OUTLINED_FUNCTION_9_27(&dword_0, v117, v118, "%s");
          OUTLINED_FUNCTION_78_10();
          OUTLINED_FUNCTION_6();
          OUTLINED_FUNCTION_6();
        }

        OUTLINED_FUNCTION_66_12();
        OUTLINED_FUNCTION_77();
        OUTLINED_FUNCTION_13_17();
        __break(1u);
        goto LABEL_102;
      }
    }
    else
    {
      uint64_t v61 = *(void *)((char *)&dword_10 + (v52 & 0xFFFFFFFFFFFFFF8));
      uint64_t v24 = v52;
      swift_bridgeObjectRetain();
      if (!v61) {
        goto LABEL_97;
      }
    }
    uint64_t v51 = (void *)(v24 & 0xC000000000000001);
    unint64_t v52 = 4;
    p_name = &TemplatingOperationManager.name;
    while (1)
    {
      id v62 = v51 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v24 + 8 * v52);
      uint64_t v63 = v62;
      unint64_t v64 = v52 - 3;
      if (__OFADD__(v52 - 4, 1)) {
        break;
      }
      id v65 = [v62 personHandle];
      if (v65)
      {
        uint64_t v66 = v65;
        uint64_t v46 = (uint64_t)[v65 emergencyType];

        if (v46 == 2)
        {
          swift_bridgeObjectRelease_n();
          OUTLINED_FUNCTION_108_7();
          type metadata accessor for SirikitDeviceState();
          outlined init with copy of SignalProviding(v24, (uint64_t)v151);
          SirikitDeviceState.__allocating_init(from:)();
          type metadata accessor for PhonePerson(0);
          id v86 = v63;
          static Device.current.getter();
          __swift_project_boxed_opaque_existential_1(v151, v152);
          OUTLINED_FUNCTION_47_29();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v151);
          static PhonePerson.make(phonePerson:options:locale:)(v63, 0, v147);

          OUTLINED_FUNCTION_22_58();
          v87();
          OUTLINED_FUNCTION_105_6();
          OUTLINED_FUNCTION_104_4();
          v88();

          swift_release();
          goto LABEL_58;
        }
      }

      ++v52;
      if (v64 == v61) {
        goto LABEL_97;
      }
    }
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    id v56 = (id)OUTLINED_FUNCTION_63_16();
LABEL_9:
    id v57 = v56;
    swift_bridgeObjectRelease();
    id v58 = [v57 siriMatches];

    uint64_t v51 = _swiftEmptyArrayStorage;
    if (v58)
    {
      type metadata accessor for INPerson();
      unint64_t v59 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (!(v59 >> 62))
      {
        OUTLINED_FUNCTION_113_4();
        goto LABEL_12;
      }
LABEL_102:
      OUTLINED_FUNCTION_112_3();
      _CocoaArrayWrapper.endIndex.getter();
      OUTLINED_FUNCTION_115_4();
    }
    else
    {
LABEL_16:
      if (p_name)
      {
        swift_bridgeObjectRetain();
        _CocoaArrayWrapper.endIndex.getter();
LABEL_12:
        swift_bridgeObjectRelease();
      }
    }
  }
  if ((specialized Sequence.allSatisfy(_:)(v52, (char *)&dword_0 + 1) & 1) == 0)
  {
    uint64_t v142 = v24;
    unint64_t v77 = swift_bridgeObjectRetain();
    char v78 = PhoneContactDisambiguationProperties.isHandleDisambiguation.getter(v77);
    uint64_t v79 = swift_bridgeObjectRelease();
    if (v78) {
      goto LABEL_51;
    }
    if (!v60)
    {
      uint64_t v80 = *(void *)((char *)&dword_10 + (v52 & 0xFFFFFFFFFFFFFF8));
LABEL_47:
      if (v80 == 1)
      {
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v52 & 0xC000000000000001) == 0);
        id v81 = (v52 & 0xC000000000000001) != 0
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
            : *(id *)(v52 + 32);
        uint64_t v82 = v81;
        BOOL v83 = INPerson.hasHandleLabel.getter();

        if (v83)
        {
LABEL_51:
          if (v46)
          {
            if (p_name)
            {
              if (v46 >= 0) {
                uint64_t v119 = v46 & 0xFFFFFFFFFFFFFF8;
              }
              else {
                uint64_t v119 = v46;
              }
              swift_bridgeObjectRetain();
              _CocoaArrayWrapper.endIndex.getter();
              uint64_t v79 = OUTLINED_FUNCTION_114_4();
              if (v119) {
                goto LABEL_54;
              }
            }
            else if (*(void *)((char *)&dword_10 + (v46 & 0xFFFFFFFFFFFFFF8)))
            {
LABEL_54:
              OUTLINED_FUNCTION_64_11(v79, (v46 & 0xC000000000000001) == 0);
              if ((v46 & 0xC000000000000001) != 0) {
                OUTLINED_FUNCTION_63_16();
              }
              else {
                id v84 = *(id *)(v46 + 32);
              }
              OUTLINED_FUNCTION_114_4();
              id v85 = (id)(v46 & 0xC000000000000001);
              INPerson.hasHandleLabel.getter();
              v144 = v85;

              goto LABEL_111;
            }
            swift_bridgeObjectRelease();
          }
          v144 = 0;
LABEL_111:
          v120 = (char **)v142;
          LOBYTE(v121) = specialized INPersonContainingIntent.isFirstContactRelatedOrMyself.getter();
          if (v60) {
            goto LABEL_126;
          }
          uint64_t v122 = *(void *)((char *)&dword_10 + (v52 & 0xFFFFFFFFFFFFFF8));
          swift_bridgeObjectRetain();
          for (; v122; uint64_t v122 = _CocoaArrayWrapper.endIndex.getter())
          {
            char v146 = v121;
            unint64_t v123 = v52 & 0xC000000000000001;
            uint64_t v124 = 4;
            v120 = &TemplatingOperationManager.name;
            while (1)
            {
              id v125 = v123
                   ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
                   : *(id *)(v52 + 8 * v124);
              v126 = v125;
              uint64_t v121 = v124 - 3;
              if (__OFADD__(v124 - 4, 1)) {
                break;
              }
              id v127 = [v125 personHandle];
              if (!v127)
              {
                swift_bridgeObjectRelease();

LABEL_124:
                v120 = (char **)v142;
                LOBYTE(v121) = v146;
                goto LABEL_128;
              }
              v128 = v127;
              v129 = (char *)[v127 type];

              if (v129 == (unsigned char *)&dword_0 + 2)
              {
                ++v124;
                if (v121 != v122) {
                  continue;
                }
              }
              swift_bridgeObjectRelease();
              goto LABEL_124;
            }
            __break(1u);
LABEL_126:
            swift_bridgeObjectRetain();
          }
          swift_bridgeObjectRelease();
          unint64_t v123 = v52 & 0xC000000000000001;
LABEL_128:
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, v123 == 0);
          if (v123) {
            id v130 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v130 = *(id *)(v52 + 32);
          }
          v131 = v130;
          swift_bridgeObjectRelease();
          type metadata accessor for PhonePerson(0);
          __swift_project_boxed_opaque_existential_1(v120, (uint64_t)v120[3]);
          OUTLINED_FUNCTION_47_29();
          static PhonePerson.make(phonePerson:options:locale:)(v131, v121 & 1, v141);

          OUTLINED_FUNCTION_22_58();
          v132();
          v133 = *(void (**)(void))(class metadata base offset for StartCallCATs + *(void *)v120[5] + 320);
          swift_retain();
          OUTLINED_FUNCTION_94_10();
          v133();

          swift_release_n();
          goto LABEL_131;
        }
      }
      outlined init with copy of Result<TemplatingResult, Error>(v142, (uint64_t)v151, &demangling cache variable for type metadata for ContactsSlotTemplating<INAddCallParticipantIntent, INAddCallParticipantIntentResponse>);
      if (v80 >= 6)
      {
        __swift_project_boxed_opaque_existential_1(v151, v152);
        OUTLINED_FUNCTION_18_22();
        dispatch thunk of DeviceState.interactionType.getter();
        (*(void (**)(uint64_t, void, uint64_t))(v139 + 104))(v138, enum case for InteractionType.dialogDriven(_:), v140);
        char v89 = specialized == infix<A>(_:_:)(v137, v138);
        uint64_t v90 = *(void (**)(void))(v139 + 8);
        OUTLINED_FUNCTION_3_23();
        v90();
        OUTLINED_FUNCTION_3_23();
        v90();
        outlined destroy of SpeakableString?((uint64_t)v151, &demangling cache variable for type metadata for ContactsSlotTemplating<INAddCallParticipantIntent, INAddCallParticipantIntentResponse>);
        if ((v89 & 1) == 0) {
          goto LABEL_64;
        }
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_109_4();
        uint64_t v24 = *(void *)(v91 + 40);
        unint64_t v150 = (unint64_t)_swiftEmptyArrayStorage;
        if (v60)
        {
          swift_bridgeObjectRetain();
          OUTLINED_FUNCTION_91_13();
          uint64_t v92 = _CocoaArrayWrapper.endIndex.getter();
        }
        else
        {
          uint64_t v92 = *(void *)((char *)&dword_10 + (v52 & 0xFFFFFFFFFFFFFF8));
          swift_bridgeObjectRetain();
          OUTLINED_FUNCTION_91_13();
        }
        if (!v92)
        {
LABEL_89:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          type metadata accessor for PhonePersonList();
          OUTLINED_FUNCTION_85_11();
          OUTLINED_FUNCTION_54_24();
          v111();
LABEL_58:
          swift_release();
          goto LABEL_131;
        }
        uint64_t v141 = v24;
        unint64_t v147 = v52 & 0xC000000000000001;
        uint64_t v105 = type metadata accessor for PhonePerson(0);
        OUTLINED_FUNCTION_53_26(v105, (uint64_t)&a12);
        uint64_t v46 = 4;
        while (1)
        {
          uint64_t v106 = v147
               ? (char **)specialized _ArrayBuffer._getElementSlowPath(_:)()
               : (char **)*(id *)(v52 + 8 * v46);
          p_name = v106;
          uint64_t v107 = v46 - 3;
          if (__OFADD__(v46 - 4, 1)) {
            goto LABEL_91;
          }
          char ContactRelatedOr = specialized INPersonContainingIntent.isFirstContactRelatedOrMyself.getter();
          static Device.current.getter();
          uint64_t v24 = v149[4];
          OUTLINED_FUNCTION_96_8(v149);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v149);
          uint64_t v109 = static PhonePerson.make(phonePerson:options:locale:)(p_name, ContactRelatedOr & 1, v143);
          OUTLINED_FUNCTION_22_58();
          v110();

          if (v109)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((char *)&dword_10 + (v150 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                            + (v150 & 0xFFFFFFFFFFFFFF8)) >> 1)
              OUTLINED_FUNCTION_4_21();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          ++v46;
          if (v107 == v92) {
            goto LABEL_89;
          }
        }
      }
      outlined destroy of SpeakableString?((uint64_t)v151, &demangling cache variable for type metadata for ContactsSlotTemplating<INAddCallParticipantIntent, INAddCallParticipantIntentResponse>);
LABEL_64:
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_83_7();
      if (v93)
      {
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_109_4();
        OUTLINED_FUNCTION_13_63();
        uint64_t v94 = OUTLINED_FUNCTION_33_32();
        v95(v94);
        goto LABEL_131;
      }
      OUTLINED_FUNCTION_108_7();
      if (!v46) {
        goto LABEL_75;
      }
      if (p_name)
      {
        if (v46 >= 0) {
          uint64_t v97 = (void *)(v46 & 0xFFFFFFFFFFFFFF8);
        }
        else {
          uint64_t v97 = (void *)v46;
        }
        swift_bridgeObjectRetain();
        _CocoaArrayWrapper.endIndex.getter();
        uint64_t v96 = OUTLINED_FUNCTION_114_4();
        if (!v97)
        {
LABEL_73:
          swift_bridgeObjectRelease();
          id v99 = [v97 relationship];

          OUTLINED_FUNCTION_108_7();
          if (v99)
          {
            uint64_t v100 = v136;
            INPersonRelationship.toSpeakableString(startCallCats:)();

LABEL_76:
            OUTLINED_FUNCTION_57_20();
            v104();
            outlined destroy of SpeakableString?(v100, &demangling cache variable for type metadata for SpeakableString?);
            goto LABEL_131;
          }
LABEL_75:
          uint64_t v101 = type metadata accessor for SpeakableString();
          uint64_t v100 = v136;
          OUTLINED_FUNCTION_14_16(v136, v102, v103, v101);
          goto LABEL_76;
        }
      }
      else
      {
        uint64_t v97 = *(void **)((char *)&dword_10 + (v46 & 0xFFFFFFFFFFFFFF8));
        if (!v97) {
          goto LABEL_73;
        }
      }
      OUTLINED_FUNCTION_64_11(v96, (v46 & 0xC000000000000001) == 0);
      if ((v46 & 0xC000000000000001) != 0) {
        id v98 = (id)OUTLINED_FUNCTION_63_16();
      }
      else {
        id v98 = *(id *)(v46 + 32);
      }
      uint64_t v97 = v98;
      goto LABEL_73;
    }
LABEL_104:
    swift_bridgeObjectRetain();
    uint64_t v80 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_47;
  }
  swift_bridgeObjectRelease();
  uint64_t v67 = *(void *)(v24 + 40);
  v149[0] = v51;
  if (v60)
  {
    swift_bridgeObjectRetain();
    uint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
    if (!v46) {
      goto LABEL_95;
    }
  }
  else
  {
    uint64_t v46 = *(void *)((char *)&dword_10 + (v52 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (!v46) {
      goto LABEL_95;
    }
  }
  uint64_t v143 = v67;
  v145 = (void *)type metadata accessor for PhonePerson(0);
  if (v46 < 1)
  {
    __break(1u);
    goto LABEL_104;
  }
  uint64_t v68 = 0;
  OUTLINED_FUNCTION_106_6();
  uint64_t v70 = *(void *)(v69 - 256);
  do
  {
    if ((v52 & 0xC000000000000001) != 0) {
      id v71 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v71 = *(id *)(v52 + 8 * v68 + 32);
    }
    uint64_t v72 = v71;
    static Device.current.getter();
    __swift_project_boxed_opaque_existential_1(v151, v152);
    dispatch thunk of DeviceState.siriLocale.getter();
    uint64_t v73 = (void *)OUTLINED_FUNCTION_99_10((uint64_t)v151);
    uint64_t v75 = static PhonePerson.make(phonePerson:options:locale:)(v73, v74, v70);
    (*(void (**)(uint64_t, uint64_t))v52)(v70, v148);

    if (v75)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      OUTLINED_FUNCTION_13_14();
      if (v76) {
        OUTLINED_FUNCTION_4_21();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    ++v68;
  }
  while (v46 != v68);
LABEL_95:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_58_23();
  v112();
  swift_bridgeObjectRelease();
LABEL_131:
  OUTLINED_FUNCTION_26_1();
}

void specialized ContactsSlotTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t (*a22)(void *),uint64_t a23,uint64_t *a24)
{
  OUTLINED_FUNCTION_24_0();
  a19 = v26;
  a20 = v27;
  uint64_t v28 = v24;
  uint64_t v165 = v29;
  uint64_t v31 = v30;
  OUTLINED_FUNCTION_70_11();
  uint64_t v32 = a22;
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v34 = OUTLINED_FUNCTION_11_0(v33);
  __chkstk_darwin(v34);
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_93_12(v35);
  uint64_t v160 = type metadata accessor for InteractionType();
  OUTLINED_FUNCTION_1();
  uint64_t v159 = v36;
  __chkstk_darwin(v37);
  OUTLINED_FUNCTION_5_8();
  OUTLINED_FUNCTION_15_1();
  __chkstk_darwin(v38);
  OUTLINED_FUNCTION_10_14();
  uint64_t v157 = v39;
  uint64_t v168 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_1();
  uint64_t v164 = v40;
  __chkstk_darwin(v41);
  OUTLINED_FUNCTION_15_1();
  uint64_t v43 = __chkstk_darwin(v42);
  uint64_t v45 = (uint64_t)&v153 - v44;
  uint64_t v46 = __chkstk_darwin(v43);
  uint64_t v155 = OUTLINED_FUNCTION_49_2(v46, v47, v48, v49, v50, v51, v52, v53, v153);
  OUTLINED_FUNCTION_1();
  uint64_t v154 = v54;
  __chkstk_darwin(v55);
  OUTLINED_FUNCTION_3_1();
  uint64_t v153 = v56;
  id v166 = v31;
  uint64_t v57 = v32(v31);
  id v58 = [v25 disambiguationItems];
  static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_bridgeObjectRelease();
  id v59 = OUTLINED_FUNCTION_89_11((const char **)&selRef_alternatives);
  unint64_t v60 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v61 = specialized _arrayConditionalCast<A, B>(_:)((uint64_t)v60);
  id v62 = _swiftEmptyArrayStorage;
  if (v61) {
    unint64_t v63 = (unint64_t)v61;
  }
  else {
    unint64_t v63 = (unint64_t)_swiftEmptyArrayStorage;
  }
  uint64_t v64 = (unint64_t)v57 >> 62;
  if (v57)
  {
    if (v64)
    {
      swift_bridgeObjectRetain();
      uint64_t v66 = _CocoaArrayWrapper.endIndex.getter();
      if (v66) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v65 = *(void *)((char *)&dword_10 + (v57 & 0xFFFFFFFFFFFFFF8));
      uint64_t v66 = swift_bridgeObjectRetain();
      if (v65)
      {
LABEL_7:
        OUTLINED_FUNCTION_64_11(v66, (v57 & 0xC000000000000001) == 0);
        if ((v57 & 0xC000000000000001) != 0) {
          goto LABEL_95;
        }
        id v67 = *(id *)(v57 + 32);
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  unint64_t p_name = 0;
  while (1)
  {
    BOOL v71 = App.isFirstParty()();
    uint64_t v161 = v60[2];
    swift_bridgeObjectRelease();
    unint64_t v60 = 0;
    unint64_t v72 = v63 >> 62;
    if ((specialized Sequence.contains(where:)(v63, (char *)&dword_0 + 2) & 1) == 0
      || (specialized Sequence.contains(where:)(v63, (char *)&dword_0 + 1) & 1) == 0)
    {
      break;
    }
    swift_bridgeObjectRelease();
    unint64_t v162 = v28;
    if (v72)
    {
      uint64_t v28 = v63;
      swift_bridgeObjectRetain();
      uint64_t v73 = _CocoaArrayWrapper.endIndex.getter();
      if (!v73)
      {
LABEL_100:
        swift_bridgeObjectRelease_n();
        if (one-time initialization token for siriPhone != -1) {
          swift_once();
        }
        __swift_project_value_buffer(v155, (uint64_t)static Logger.siriPhone);
        uint64_t v130 = OUTLINED_FUNCTION_69_16();
        v131(v130);
        unint64_t v63 = Logger.logObject.getter();
        os_log_type_t v132 = static os_log_type_t.error.getter();
        uint64_t v57 = (uint64_t)"Foreign emergency check should guarantee the presence of a nonLocal emergencyType INPerson";
        if (OUTLINED_FUNCTION_1_34(v132))
        {
          OUTLINED_FUNCTION_3_36();
          uint64_t v28 = OUTLINED_FUNCTION_9_35();
          v173[0] = v28;
          uint64_t v133 = OUTLINED_FUNCTION_32_32(4.8149e-34);
          OUTLINED_FUNCTION_52_24(v133);
          OUTLINED_FUNCTION_9_27(&dword_0, v134, v135, "%s");
          OUTLINED_FUNCTION_78_10();
          OUTLINED_FUNCTION_6();
          OUTLINED_FUNCTION_6();
        }

        OUTLINED_FUNCTION_66_12();
        OUTLINED_FUNCTION_77();
        OUTLINED_FUNCTION_13_17();
        __break(1u);
        goto LABEL_105;
      }
    }
    else
    {
      uint64_t v73 = *(void *)((char *)&dword_10 + (v63 & 0xFFFFFFFFFFFFFF8));
      uint64_t v28 = v63;
      swift_bridgeObjectRetain();
      if (!v73) {
        goto LABEL_100;
      }
    }
    id v62 = (void *)(v28 & 0xC000000000000001);
    uint64_t v64 = 4;
    unint64_t p_name = (unint64_t)&TemplatingOperationManager.name;
    while (1)
    {
      unint64_t v60 = (void *)(v64 - 4);
      id v74 = v62 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v28 + 8 * v64);
      unint64_t v63 = (unint64_t)v74;
      uint64_t v45 = v64 - 3;
      if (__OFADD__(v60, 1)) {
        break;
      }
      uint64_t v75 = [v74 personHandle];
      if (v75)
      {
        unint64_t v60 = v75;
        uint64_t v57 = (uint64_t)[v75 emergencyType];

        if (v57 == 2)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v96 = v162;
          type metadata accessor for SirikitDeviceState();
          outlined init with copy of SignalProviding(v96, (uint64_t)v173);
          SirikitDeviceState.__allocating_init(from:)();
          type metadata accessor for PhonePerson(0);
          id v97 = (id)v63;
          static Device.current.getter();
          __swift_project_boxed_opaque_existential_1(v173, v174);
          uint64_t v98 = v167;
          OUTLINED_FUNCTION_47_29();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v173);
          static PhonePerson.make(phonePerson:options:locale:)((void *)v63, 0, v98);

          OUTLINED_FUNCTION_22_58();
          v99();
          OUTLINED_FUNCTION_105_6();
          v100();

          swift_release();
          goto LABEL_59;
        }
      }

      ++v64;
      if (v45 == v73) {
        goto LABEL_100;
      }
    }
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    id v67 = (id)OUTLINED_FUNCTION_63_16();
LABEL_9:
    uint64_t v68 = v67;
    swift_bridgeObjectRelease();
    id v69 = [v68 siriMatches];

    id v62 = _swiftEmptyArrayStorage;
    if (v69)
    {
      type metadata accessor for INPerson();
      unint64_t p_name = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (!(p_name >> 62))
      {
        OUTLINED_FUNCTION_113_4();
        goto LABEL_12;
      }
LABEL_105:
      OUTLINED_FUNCTION_112_3();
      _CocoaArrayWrapper.endIndex.getter();
      OUTLINED_FUNCTION_115_4();
    }
    else
    {
LABEL_16:
      if (v64)
      {
        swift_bridgeObjectRetain();
        unint64_t p_name = _CocoaArrayWrapper.endIndex.getter();
LABEL_12:
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t p_name = *(void *)((char *)&dword_10 + (v57 & 0xFFFFFFFFFFFFFF8));
      }
    }
  }
  if ((specialized Sequence.allSatisfy(_:)(v63, (char *)&dword_0 + 1) & 1) == 0)
  {
    LODWORD(v154) = v71;
    uint64_t v155 = v45;
    unint64_t v162 = v28;
    uint64_t v167 = a23;
    unint64_t v86 = swift_bridgeObjectRetain();
    char v87 = PhoneContactDisambiguationProperties.isHandleDisambiguation.getter(v86);
    uint64_t v88 = swift_bridgeObjectRelease();
    if (v87) {
      goto LABEL_52;
    }
    if (!v72)
    {
      uint64_t v89 = *(void *)((char *)&dword_10 + (v63 & 0xFFFFFFFFFFFFFF8));
LABEL_48:
      if (v89 == 1)
      {
        OUTLINED_FUNCTION_111_7(v88, (v63 & 0xC000000000000001) == 0);
        id v90 = (v63 & 0xC000000000000001) != 0 ? (id)OUTLINED_FUNCTION_65_16() : *(id *)(v63 + 32);
        uint64_t v91 = v90;
        BOOL v92 = INPerson.hasHandleLabel.getter();

        if (v92)
        {
LABEL_52:
          if (v57)
          {
            if (v64)
            {
              swift_bridgeObjectRetain();
              uint64_t v136 = _CocoaArrayWrapper.endIndex.getter();
              uint64_t v88 = swift_bridgeObjectRelease();
              if (v136) {
                goto LABEL_55;
              }
            }
            else if (*(void *)((char *)&dword_10 + (v57 & 0xFFFFFFFFFFFFFF8)))
            {
LABEL_55:
              OUTLINED_FUNCTION_64_11(v88, (v57 & 0xC000000000000001) == 0);
              if ((v57 & 0xC000000000000001) != 0) {
                id v93 = (id)OUTLINED_FUNCTION_63_16();
              }
              else {
                id v93 = *(id *)(v57 + 32);
              }
              uint64_t v94 = v93;
              swift_bridgeObjectRelease();
              id v95 = v94;
              LODWORD(v161) = INPerson.hasHandleLabel.getter();
              id v163 = v95;

              goto LABEL_111;
            }
            swift_bridgeObjectRelease();
          }
          LODWORD(v161) = 0;
          id v163 = 0;
LABEL_111:
          uint64_t v137 = OUTLINED_FUNCTION_90_13();
          if (v72) {
            goto LABEL_126;
          }
          uint64_t v138 = *(void *)((char *)&dword_10 + (v63 & 0xFFFFFFFFFFFFFF8));
          swift_bridgeObjectRetain();
          for (; v138; uint64_t v138 = _CocoaArrayWrapper.endIndex.getter())
          {
            uint64_t v167 = v137;
            unint64_t v139 = v63;
            unint64_t v140 = v63 & 0xC000000000000001;
            uint64_t v141 = 4;
            unint64_t v63 = (unint64_t)&TemplatingOperationManager.name;
            while (1)
            {
              id v142 = v140
                   ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
                   : *(id *)(v139 + 8 * v141);
              uint64_t v143 = v142;
              uint64_t v137 = v141 - 3;
              if (__OFADD__(v141 - 4, 1)) {
                break;
              }
              id v144 = [v142 personHandle];
              if (!v144)
              {
                unint64_t v63 = v139;
                swift_bridgeObjectRelease();

LABEL_124:
                LOBYTE(v137) = v167;
                goto LABEL_128;
              }
              v145 = v144;
              char v146 = (char *)[v144 type];

              if (v146 == (unsigned char *)&dword_0 + 2)
              {
                ++v141;
                if (v137 != v138) {
                  continue;
                }
              }
              unint64_t v63 = v139;
              uint64_t v147 = swift_bridgeObjectRelease();
              goto LABEL_124;
            }
            __break(1u);
LABEL_126:
            swift_bridgeObjectRetain();
          }
          uint64_t v147 = swift_bridgeObjectRelease();
          unint64_t v140 = v63 & 0xC000000000000001;
LABEL_128:
          OUTLINED_FUNCTION_111_7(v147, v140 == 0);
          if (v140) {
            id v148 = (id)OUTLINED_FUNCTION_65_16();
          }
          else {
            id v148 = *(id *)(v63 + 32);
          }
          v149 = v148;
          swift_bridgeObjectRelease();
          type metadata accessor for PhonePerson(0);
          OUTLINED_FUNCTION_108_7();
          __swift_project_boxed_opaque_existential_1((void *)v63, *(void *)(v63 + 24));
          uint64_t v150 = v155;
          OUTLINED_FUNCTION_47_29();
          static PhonePerson.make(phonePerson:options:locale:)(v149, v137 & 1, v150);

          OUTLINED_FUNCTION_22_58();
          v151();
          uint64_t v152 = *(void (**)(void))(class metadata base offset for StartCallCATs + **(void **)(v63 + 40) + 320);
          swift_retain();
          OUTLINED_FUNCTION_94_10();
          v152();

          swift_release_n();
          goto LABEL_131;
        }
      }
      uint64_t v101 = a24;
      outlined init with copy of Result<TemplatingResult, Error>(v162, (uint64_t)v173, a24);
      if (v89 >= 6)
      {
        __swift_project_boxed_opaque_existential_1(v173, v174);
        uint64_t v155 = p_name;
        uint64_t v102 = v157;
        OUTLINED_FUNCTION_6_23();
        dispatch thunk of DeviceState.interactionType.getter();
        uint64_t v103 = v159;
        uint64_t v104 = v64;
        uint64_t v105 = v158;
        (*(void (**)(uint64_t, void, uint64_t))(v159 + 104))(v158, enum case for InteractionType.dialogDriven(_:), v160);
        LODWORD(v153) = specialized == infix<A>(_:_:)(v102, v105);
        unint64_t v60 = *(void **)(v103 + 8);
        uint64_t v64 = v104;
        OUTLINED_FUNCTION_3_23();
        ((void (*)(void))v60)();
        OUTLINED_FUNCTION_3_23();
        ((void (*)(void))v60)();
        outlined destroy of SpeakableString?((uint64_t)v173, v101);
        if ((v153 & 1) == 0) {
          goto LABEL_65;
        }
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_109_4();
        uint64_t v28 = *(void *)(v106 + 40);
        v172 = _swiftEmptyArrayStorage;
        if (v72)
        {
          swift_bridgeObjectRetain();
          OUTLINED_FUNCTION_91_13();
          uint64_t v57 = _CocoaArrayWrapper.endIndex.getter();
        }
        else
        {
          uint64_t v57 = *(void *)((char *)&dword_10 + (v63 & 0xFFFFFFFFFFFFFF8));
          swift_bridgeObjectRetain();
          OUTLINED_FUNCTION_91_13();
        }
        if (!v57)
        {
          swift_bridgeObjectRelease();
          id v127 = _swiftEmptyArrayStorage;
LABEL_92:
          swift_bridgeObjectRelease();

          type metadata accessor for PhonePersonList();
          PhonePersonList.__allocating_init(list:)((uint64_t)v127);
          OUTLINED_FUNCTION_54_24();
          OUTLINED_FUNCTION_104_4();
          v128();
LABEL_59:
          swift_release();
          goto LABEL_131;
        }
        uint64_t v160 = v28;
        unint64_t v162 = v63 & 0xC000000000000001;
        uint64_t v119 = type metadata accessor for PhonePerson(0);
        OUTLINED_FUNCTION_53_26(v119, (uint64_t)&a11);
        uint64_t v45 = 4;
        uint64_t v64 = (uint64_t)v163;
        while (1)
        {
          OUTLINED_FUNCTION_109_4();
          id v121 = v120 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v63 + 8 * v45);
          uint64_t v122 = v121;
          uint64_t v123 = v45 - 3;
          if (__OFADD__(v45 - 4, 1)) {
            goto LABEL_94;
          }
          char v124 = OUTLINED_FUNCTION_90_13();
          static Device.current.getter();
          uint64_t v28 = v170;
          unint64_t v60 = v171;
          __swift_project_boxed_opaque_existential_1(v169, v170);
          OUTLINED_FUNCTION_6_23();
          dispatch thunk of DeviceState.siriLocale.getter();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v169);
          uint64_t v125 = static PhonePerson.make(phonePerson:options:locale:)(v122, v124 & 1, v64);
          OUTLINED_FUNCTION_22_58();
          v126();

          if (v125)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            OUTLINED_FUNCTION_13_14();
            if (v85) {
              OUTLINED_FUNCTION_4_21();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          ++v45;
          if (v123 == v57)
          {
            swift_bridgeObjectRelease();
            id v127 = v172;
            goto LABEL_92;
          }
        }
      }
      outlined destroy of SpeakableString?((uint64_t)v173, v101);
LABEL_65:
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_83_7();
      if (v108)
      {
        swift_bridgeObjectRelease();
        uint64_t v109 = OUTLINED_FUNCTION_33_32();
        v110(v109);
        goto LABEL_131;
      }
      if (!v57) {
        goto LABEL_76;
      }
      if (v64)
      {
        if (v57 >= 0) {
          uint64_t v111 = (void *)(v57 & 0xFFFFFFFFFFFFFF8);
        }
        else {
          uint64_t v111 = (void *)v57;
        }
        swift_bridgeObjectRetain();
        _CocoaArrayWrapper.endIndex.getter();
        uint64_t v107 = OUTLINED_FUNCTION_114_4();
        if (!v111)
        {
LABEL_74:
          swift_bridgeObjectRelease();
          id v113 = [v111 relationship];

          if (v113)
          {
            uint64_t v114 = v156;
            INPersonRelationship.toSpeakableString(startCallCats:)();

LABEL_77:
            OUTLINED_FUNCTION_57_20();
            v118();
            outlined destroy of SpeakableString?(v114, &demangling cache variable for type metadata for SpeakableString?);
            goto LABEL_131;
          }
LABEL_76:
          uint64_t v115 = type metadata accessor for SpeakableString();
          uint64_t v114 = v156;
          OUTLINED_FUNCTION_14_16(v156, v116, v117, v115);
          goto LABEL_77;
        }
      }
      else
      {
        uint64_t v111 = *(void **)((char *)&dword_10 + (v57 & 0xFFFFFFFFFFFFFF8));
        if (!v111) {
          goto LABEL_74;
        }
      }
      OUTLINED_FUNCTION_64_11(v107, (v57 & 0xC000000000000001) == 0);
      if ((v57 & 0xC000000000000001) != 0) {
        id v112 = (id)OUTLINED_FUNCTION_63_16();
      }
      else {
        id v112 = *(id *)(v57 + 32);
      }
      uint64_t v111 = v112;
      goto LABEL_74;
    }
LABEL_107:
    swift_bridgeObjectRetain();
    uint64_t v89 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v88 = swift_bridgeObjectRelease();
    goto LABEL_48;
  }
  swift_bridgeObjectRelease();
  char v76 = *(void **)(v28 + 40);
  v169[0] = v62;
  if (v72)
  {
    swift_bridgeObjectRetain();
    uint64_t v57 = _CocoaArrayWrapper.endIndex.getter();
    if (!v57) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v57 = *(void *)((char *)&dword_10 + (v63 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (!v57) {
      goto LABEL_98;
    }
  }
  id v163 = v76;
  id v166 = (id)type metadata accessor for PhonePerson(0);
  if (v57 < 1)
  {
    __break(1u);
    goto LABEL_107;
  }
  uint64_t v77 = 0;
  OUTLINED_FUNCTION_106_6();
  uint64_t v79 = *(void *)(v78 - 256);
  do
  {
    if ((v63 & 0xC000000000000001) != 0) {
      id v80 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v80 = *(id *)(v63 + 8 * v77 + 32);
    }
    id v81 = v80;
    static Device.current.getter();
    OUTLINED_FUNCTION_96_8(v173);
    uint64_t v82 = (void *)OUTLINED_FUNCTION_99_10((uint64_t)v173);
    uint64_t v84 = static PhonePerson.make(phonePerson:options:locale:)(v82, v83, v79);
    (*(void (**)(uint64_t, uint64_t))v64)(v79, v168);

    if (v84)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      OUTLINED_FUNCTION_13_14();
      if (v85) {
        OUTLINED_FUNCTION_4_21();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    ++v77;
  }
  while (v57 != v77);
LABEL_98:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_58_23();
  v129();
  swift_bridgeObjectRelease();
LABEL_131:
  OUTLINED_FUNCTION_26_1();
}

void specialized ContactsSlotTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v129 = v23;
  uint64_t v130 = v21;
  char v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v125 = v32;
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v34 = OUTLINED_FUNCTION_11_0(v33);
  __chkstk_darwin(v34);
  OUTLINED_FUNCTION_46_0();
  uint64_t v37 = v35 - v36;
  uint64_t v39 = __chkstk_darwin(v38);
  uint64_t v41 = (char *)&v122 - v40;
  __chkstk_darwin(v39);
  OUTLINED_FUNCTION_10_14();
  uint64_t v127 = v42;
  uint64_t v128 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_1();
  uint64_t v126 = v43;
  __chkstk_darwin(v44);
  OUTLINED_FUNCTION_46_0();
  uint64_t v47 = v45 - v46;
  __chkstk_darwin(v48);
  uint64_t v50 = (char *)&v122 - v49;
  uint64_t v51 = outlined bridged method (pb) of @objc INAddCallParticipantIntent.participants.getter(v29);
  if (v51)
  {
    uint64_t v22 = v51;
    if ((v25 & 1) == 0)
    {
      unint64_t v52 = v51 & 0xC000000000000001;
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v27, (v51 & 0xC000000000000001) == 0);
      if (v52) {
        id v53 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v53 = *(id *)(v22 + 8 * v27 + 32);
      }
      id v131 = v53;
LABEL_13:
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    swift_bridgeObjectRelease();
  }
  unint64_t v54 = outlined bridged method (pb) of @objc INAddCallParticipantIntent.participants.getter(v29);
  if (v54)
  {
    unint64_t v55 = v54;
    if (v54 >> 62)
    {
      if (_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_10;
      }
    }
    else if (*(void *)((char *)&dword_10 + (v54 & 0xFFFFFFFFFFFFFF8)))
    {
LABEL_10:
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v55 & 0xC000000000000001) == 0);
      if ((v55 & 0xC000000000000001) != 0) {
        id v56 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v56 = *(id *)(v55 + 32);
      }
      id v131 = v56;
      goto LABEL_13;
    }
    swift_bridgeObjectRelease();
    id v131 = 0;
  }
  else
  {
    id v131 = 0;
  }
LABEL_17:
  id v57 = [v31 unsupportedReason];
  if ((id)_INStartCallContactUnsupportedReasonForeignEmergencyDisambiguation == v57)
  {
LABEL_18:
    OUTLINED_FUNCTION_13_63();
    OUTLINED_FUNCTION_59_19();
    v58();
    OUTLINED_FUNCTION_26_1();

    return;
  }
  switch((unint64_t)v57)
  {
    case 2uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
      goto LABEL_18;
    case 3uLL:
      uint64_t v22 = specialized static PhoneStartCallIntent.makeForSlotTemplating(intent:isRelationshipRequest:)(v29, 0);
      if (v131
        && (id v61 = [v131 personHandle]) != 0
        && (v62 = v61, id v63 = [v61 label], v62, v63)
        && (static String._unconditionallyBridgeFromObjectiveC(_:)(), uint64_t v65 = v64, v63, v65))
      {
        swift_bridgeObjectRetain();
        uint64_t v66 = v127;
        OUTLINED_FUNCTION_11_2();
        uint64_t v67 = type metadata accessor for SpeakableString();
        __swift_storeEnumTagSinglePayload(v66, 0, 1, v67);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v80 = type metadata accessor for SpeakableString();
        OUTLINED_FUNCTION_14_16(v127, v81, v82, v80);
      }
      uint64_t v83 = *(void *)(v22 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_contacts);
      if (!v83) {
        goto LABEL_64;
      }
      unint64_t v84 = *(void *)(v83 + 24);
      if (v84 >> 62)
      {
        OUTLINED_FUNCTION_32_3();
        if (_CocoaArrayWrapper.endIndex.getter()) {
          goto LABEL_47;
        }
LABEL_63:
        swift_bridgeObjectRelease();
LABEL_64:
        uint64_t v86 = 0;
        goto LABEL_65;
      }
      uint64_t v85 = *(void *)((char *)&dword_10 + (v84 & 0xFFFFFFFFFFFFFF8));
      swift_bridgeObjectRetain();
      if (!v85) {
        goto LABEL_63;
      }
LABEL_47:
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v84 & 0xC000000000000001) == 0);
      if ((v84 & 0xC000000000000001) != 0) {
        goto LABEL_88;
      }
      swift_retain();
LABEL_49:
      swift_bridgeObjectRelease();
      uint64_t v86 = DialogPerson.personHandle.getter();
      swift_release();
LABEL_65:
      char v107 = specialized INPersonContainingIntent.hasSiriMatches.getter();
      uint64_t v124 = v86;
      if (v107)
      {
        if (v131)
        {
          id v108 = [v131 siriMatches];
          if (!v108) {
            goto LABEL_76;
          }
          type metadata accessor for INPerson();
          unint64_t v109 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          if (v109 >> 62)
          {
            swift_bridgeObjectRetain();
            id v108 = (id)_CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (v108) {
              goto LABEL_70;
            }
          }
          else
          {
            id v108 = *(id *)((char *)&dword_10 + (v109 & 0xFFFFFFFFFFFFFF8));
            if (v108)
            {
LABEL_70:
              specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v109 & 0xC000000000000001) == 0);
              if ((v109 & 0xC000000000000001) != 0) {
                id v110 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else {
                id v110 = *(id *)(v109 + 32);
              }
              id v108 = v110;
            }
          }
          swift_bridgeObjectRelease();
          goto LABEL_76;
        }
        id v108 = 0;
      }
      else
      {
        id v111 = v131;
        id v108 = v131;
      }
LABEL_76:
      id v112 = (void *)v130[5];
      swift_retain();
      uint64_t v113 = INPreferredCallProviderGetBackingType();
      uint64_t v125 = v22;
      switch(v113)
      {
        case 4:
          uint64_t v114 = @"THIRD_PARTY_PROVIDER";
          break;
        case 3:
          uint64_t v114 = @"FACETIME_PROVIDER";
          break;
        case 2:
          uint64_t v114 = @"TELEPHONY_PROVIDER";
          break;
        default:
          uint64_t v114 = +[NSString stringWithFormat:@"(unknown: %i)", v113];
          goto LABEL_84;
      }
      uint64_t v115 = v114;
LABEL_84:
      uint64_t v116 = v114;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      OUTLINED_FUNCTION_11_2();
      uint64_t v117 = type metadata accessor for SpeakableString();
      OUTLINED_FUNCTION_92_8(v117);
      type metadata accessor for PhonePerson(0);
      char ContactRelatedOr = specialized INPersonContainingIntent.isFirstContactRelatedOrMyself.getter();
      static Device.current.getter();
      __swift_project_boxed_opaque_existential_1(v133, v134);
      dispatch thunk of DeviceState.siriLocale.getter();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v133);
      uint64_t v119 = static PhonePerson.make(phonePerson:options:locale:)(v108, ContactRelatedOr & 1, v47);
      OUTLINED_FUNCTION_11();
      v120();
      uint64_t v121 = v127;
      (*(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(class metadata base offset for StartCallCATs
                                                                                           + *v112
                                                                                           + 1792))(v125, v41, v119, v127, v124, v129, a21);
      swift_release_n();
      swift_release();

      swift_release();
      outlined destroy of SpeakableString?((uint64_t)v41, &demangling cache variable for type metadata for SpeakableString?);
      uint64_t v105 = v121;
LABEL_85:
      outlined destroy of SpeakableString?(v105, &demangling cache variable for type metadata for SpeakableString?);
LABEL_86:

      OUTLINED_FUNCTION_26_1();
      return;
    case 4uLL:
      uint64_t v68 = outlined bridged method (pb) of @objc INAddCallParticipantIntent.participants.getter(v29);
      if (!v68) {
        goto LABEL_61;
      }
      uint64_t v69 = v68;
      unint64_t v132 = (unint64_t)_swiftEmptyArrayStorage;
      OUTLINED_FUNCTION_24_16();
      if (v71)
      {
        swift_bridgeObjectRetain();
        uint64_t v72 = _CocoaArrayWrapper.endIndex.getter();
        if (!v72) {
          goto LABEL_60;
        }
      }
      else
      {
        uint64_t v72 = *(void *)(v70 + 16);
        swift_bridgeObjectRetain();
        if (!v72) {
          goto LABEL_60;
        }
      }
      uint64_t v123 = a21;
      uint64_t v127 = type metadata accessor for PhonePerson(0);
      if (v72 < 1)
      {
        __break(1u);
LABEL_88:
        OUTLINED_FUNCTION_65_16();
        goto LABEL_49;
      }
      uint64_t v73 = 0;
      unint64_t v74 = v69 & 0xC000000000000001;
      uint64_t v75 = (void (**)(char *, uint64_t))(v126 + 8);
      uint64_t v76 = v69;
      do
      {
        if (v74) {
          id v77 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v77 = *(id *)(v69 + 8 * v73 + 32);
        }
        uint64_t v78 = v77;
        static Device.current.getter();
        OUTLINED_FUNCTION_98_9(v133);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v133);
        uint64_t v79 = static PhonePerson.make(phonePerson:options:locale:)(v78, 0, (uint64_t)v50);
        (*v75)(v50, v128);

        if (v79)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((char *)&dword_10 + (v132 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                          + (v132 & 0xFFFFFFFFFFFFFF8)) >> 1)
            OUTLINED_FUNCTION_4_21();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        ++v73;
        uint64_t v69 = v76;
      }
      while (v72 != v73);
LABEL_60:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_61:
      type metadata accessor for PhonePersonList();
      OUTLINED_FUNCTION_85_11();
      OUTLINED_FUNCTION_13_63();
      (*(void (**)(void))(class metadata base offset for StartCallCATs + v106 + 1632))();
      swift_release();
      goto LABEL_86;
    default:
      if (specialized static ContactsSlotTemplating.isMissingMeCardCase(intent:)(v29)) {
        goto LABEL_18;
      }
      uint64_t v123 = a21;
      if (v131)
      {
        id v87 = v131;
        id v88 = INPerson.nameLowercasedWithFirstUppercased.getter();
      }
      else
      {
        id v88 = 0;
      }
      type metadata accessor for PhonePerson(0);
      static Device.current.getter();
      __swift_project_boxed_opaque_existential_1(v133, v134);
      dispatch thunk of DeviceState.siriLocale.getter();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v133);
      uint64_t v127 = static PhonePerson.make(phonePerson:options:locale:)(v88, 0, (uint64_t)v50);

      uint64_t v126 = *(void *)(v126 + 8);
      OUTLINED_FUNCTION_3_86();
      v89();
      id v90 = v130;
      __swift_project_boxed_opaque_existential_1(v130 + 8, v130[11]);
      OUTLINED_FUNCTION_98_9(v90);
      OUTLINED_FUNCTION_95_10();
      v91();
      uint64_t v93 = v92;
      OUTLINED_FUNCTION_3_86();
      v94();
      if (v93)
      {
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_11_2();
        uint64_t v95 = type metadata accessor for SpeakableString();
        OUTLINED_FUNCTION_87_7(v37, v96, v97, v95);
      }
      else
      {
        uint64_t v98 = type metadata accessor for SpeakableString();
        OUTLINED_FUNCTION_14_16(v37, v99, v100, v98);
      }
      uint64_t v101 = v123;
      uint64_t v102 = (void *)v130[5];
      uint64_t v103 = v127;
      swift_retain();
      Swift::Bool v104 = App.isFirstParty()();
      (*(void (**)(uint64_t, uint64_t, Swift::Bool, uint64_t, uint64_t))(class metadata base offset for StartCallCATs
                                                                              + *v102
                                                                              + 1728))(v103, v37, v104, v129, v101);
      swift_release_n();
      uint64_t v105 = v37;
      goto LABEL_85;
  }
}

void specialized ContactsSlotTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  uint64_t v95 = a8;
  uint64_t v91 = a1;
  uint64_t v14 = a9;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v18 = (char *)&v88 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v88 - v20;
  __chkstk_darwin(v19);
  uint64_t v93 = (uint64_t)&v88 - v22;
  uint64_t v94 = type metadata accessor for Locale();
  uint64_t v92 = *(void *)(v94 - 8);
  uint64_t v23 = __chkstk_darwin(v94);
  char v25 = (char *)&v88 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v88 - v26;
  uint64_t v28 = outlined bridged method (pb) of @objc INStartVideoCallIntent.contacts.getter(a5);
  if (v28)
  {
    uint64_t v9 = v28;
    if ((a7 & 1) == 0)
    {
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(a6, (v28 & 0xC000000000000001) == 0);
      if ((v9 & 0xC000000000000001) != 0) {
        id v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v29 = *(id *)(v9 + 8 * a6 + 32);
      }
      id v97 = v29;
LABEL_13:
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    swift_bridgeObjectRelease();
  }
  unint64_t v30 = outlined bridged method (pb) of @objc INStartVideoCallIntent.contacts.getter(a5);
  if (v30)
  {
    unint64_t v31 = v30;
    if (v30 >> 62)
    {
      if (_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_10;
      }
    }
    else if (*(void *)((char *)&dword_10 + (v30 & 0xFFFFFFFFFFFFFF8)))
    {
LABEL_10:
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v31 & 0xC000000000000001) == 0);
      if ((v31 & 0xC000000000000001) != 0) {
        id v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v32 = *(id *)(v31 + 32);
      }
      id v97 = v32;
      goto LABEL_13;
    }
    swift_bridgeObjectRelease();
    id v97 = 0;
  }
  else
  {
    id v97 = 0;
  }
LABEL_17:
  id v33 = [a4 unsupportedReason];
  if ((id)_INStartCallContactUnsupportedReasonForeignEmergencyDisambiguation == v33)
  {
    (*(void (**)(uint64_t, uint64_t))(class metadata base offset for StartCallCATs
                                             + **(void **)(v96 + 40)
                                             + 1600))(v95, a9);
LABEL_19:
    id v34 = v97;

    return;
  }
  switch((unint64_t)v33)
  {
    case 2uLL:
      (*(void (**)(uint64_t, uint64_t))(class metadata base offset for StartCallCATs
                                               + **(void **)(v96 + 40)
                                               + 1664))(v95, a9);
      goto LABEL_19;
    case 3uLL:
      uint64_t v9 = specialized static PhoneStartCallIntent.makeForSlotTemplating(intent:isRelationshipRequest:)(a5, 0);
      if (v97
        && (id v35 = [v97 personHandle]) != 0
        && (uint64_t v36 = v35, v37 = [v35 label], v36, v37)
        && (static String._unconditionallyBridgeFromObjectiveC(_:)(), uint64_t v39 = v38, v37, v39))
      {
        swift_bridgeObjectRetain();
        uint64_t v40 = v93;
        SpeakableString.init(print:speak:)();
        uint64_t v41 = type metadata accessor for SpeakableString();
        __swift_storeEnumTagSinglePayload(v40, 0, 1, v41);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v53 = type metadata accessor for SpeakableString();
        __swift_storeEnumTagSinglePayload(v93, 1, 1, v53);
      }
      uint64_t v54 = *(void *)(v9 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_contacts);
      if (!v54) {
        goto LABEL_70;
      }
      unint64_t v55 = *(void *)(v54 + 24);
      if (v55 >> 62)
      {
        swift_bridgeObjectRetain();
        if (_CocoaArrayWrapper.endIndex.getter()) {
          goto LABEL_52;
        }
LABEL_69:
        swift_bridgeObjectRelease();
LABEL_70:
        uint64_t v57 = 0;
        goto LABEL_71;
      }
      uint64_t v56 = *(void *)((char *)&dword_10 + (v55 & 0xFFFFFFFFFFFFFF8));
      swift_bridgeObjectRetain();
      if (!v56) {
        goto LABEL_69;
      }
LABEL_52:
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v55 & 0xC000000000000001) == 0);
      if ((v55 & 0xC000000000000001) != 0) {
        goto LABEL_94;
      }
      swift_retain();
LABEL_54:
      swift_bridgeObjectRelease();
      uint64_t v57 = DialogPerson.personHandle.getter();
      swift_release();
LABEL_71:
      char v74 = specialized INPersonContainingIntent.hasSiriMatches.getter((uint64_t (*)(uint64_t))outlined bridged method (pb) of @objc INStartVideoCallIntent.contacts.getter);
      uint64_t v90 = v57;
      if (v74)
      {
        if (v97)
        {
          id v75 = [v97 siriMatches];
          if (!v75) {
            goto LABEL_82;
          }
          type metadata accessor for INPerson();
          unint64_t v76 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          if (v76 >> 62)
          {
            swift_bridgeObjectRetain();
            id v75 = (id)_CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (v75) {
              goto LABEL_76;
            }
          }
          else
          {
            id v75 = *(id *)((char *)&dword_10 + (v76 & 0xFFFFFFFFFFFFFF8));
            if (v75)
            {
LABEL_76:
              specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v76 & 0xC000000000000001) == 0);
              if ((v76 & 0xC000000000000001) != 0) {
                id v77 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else {
                id v77 = *(id *)(v76 + 32);
              }
              id v75 = v77;
            }
          }
          swift_bridgeObjectRelease();
          goto LABEL_82;
        }
        id v75 = 0;
      }
      else
      {
        id v78 = v97;
        id v75 = v97;
      }
LABEL_82:
      uint64_t v79 = *(void **)(v96 + 40);
      swift_retain();
      uint64_t v80 = INPreferredCallProviderGetBackingType();
      uint64_t v91 = v9;
      switch(v80)
      {
        case 4:
          uint64_t v81 = @"THIRD_PARTY_PROVIDER";
          goto LABEL_88;
        case 3:
          uint64_t v81 = @"FACETIME_PROVIDER";
          goto LABEL_88;
        case 2:
          uint64_t v81 = @"TELEPHONY_PROVIDER";
LABEL_88:
          uint64_t v82 = v81;
          goto LABEL_90;
      }
      uint64_t v81 = +[NSString stringWithFormat:@"(unknown: %i)", v80];
LABEL_90:
      uint64_t v83 = v81;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      SpeakableString.init(print:speak:)();
      uint64_t v84 = type metadata accessor for SpeakableString();
      __swift_storeEnumTagSinglePayload((uint64_t)v21, 0, 1, v84);
      type metadata accessor for PhonePerson(0);
      char ContactRelatedOr = specialized INPersonContainingIntent.isFirstContactRelatedOrMyself.getter((uint64_t (*)(uint64_t))outlined bridged method (pb) of @objc INStartVideoCallIntent.contacts.getter);
      static Device.current.getter();
      __swift_project_boxed_opaque_existential_1(v99, v100);
      dispatch thunk of DeviceState.siriLocale.getter();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v99);
      uint64_t v86 = static PhonePerson.make(phonePerson:options:locale:)(v75, ContactRelatedOr & 1, (uint64_t)v25);
      (*(void (**)(char *, uint64_t))(v92 + 8))(v25, v94);
      uint64_t v87 = v93;
      (*(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(class metadata base offset for StartCallCATs
                                                                                           + *v79
                                                                                           + 1792))(v91, v21, v86, v93, v90, v95, a9);
      swift_release_n();
      swift_release();

      swift_release();
      outlined destroy of SpeakableString?((uint64_t)v21, &demangling cache variable for type metadata for SpeakableString?);
      uint64_t v72 = v87;
LABEL_91:
      outlined destroy of SpeakableString?(v72, &demangling cache variable for type metadata for SpeakableString?);
LABEL_92:

      return;
    case 4uLL:
      unint64_t v42 = outlined bridged method (pb) of @objc INStartVideoCallIntent.contacts.getter(a5);
      uint64_t v43 = _swiftEmptyArrayStorage;
      if (!v42) {
        goto LABEL_67;
      }
      unint64_t v44 = v42;
      unint64_t v98 = (unint64_t)_swiftEmptyArrayStorage;
      if (v42 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
        if (v45) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v45 = *(void *)((char *)&dword_10 + (v42 & 0xFFFFFFFFFFFFFF8));
        swift_bridgeObjectRetain();
        if (v45)
        {
LABEL_34:
          uint64_t v89 = a9;
          uint64_t v93 = type metadata accessor for PhonePerson(0);
          if (v45 < 1)
          {
            __break(1u);
LABEL_94:
            specialized _ArrayBuffer._getElementSlowPath(_:)();
            goto LABEL_54;
          }
          uint64_t v46 = 0;
          unint64_t v47 = v44 & 0xC000000000000001;
          uint64_t v48 = (void (**)(char *, uint64_t))(v92 + 8);
          unint64_t v49 = v44;
          do
          {
            if (v47) {
              id v50 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v50 = *(id *)(v44 + 8 * v46 + 32);
            }
            uint64_t v51 = v50;
            static Device.current.getter();
            __swift_project_boxed_opaque_existential_1(v99, v100);
            dispatch thunk of DeviceState.siriLocale.getter();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v99);
            uint64_t v52 = static PhonePerson.make(phonePerson:options:locale:)(v51, 0, (uint64_t)v27);
            (*v48)(v27, v94);

            if (v52)
            {
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              if (*(void *)((char *)&dword_10 + (v98 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                             + (v98 & 0xFFFFFFFFFFFFFF8)) >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
            }
            ++v46;
            unint64_t v44 = v49;
          }
          while (v45 != v46);
          swift_bridgeObjectRelease();
          uint64_t v43 = (void *)v98;
          uint64_t v14 = v89;
LABEL_66:
          swift_bridgeObjectRelease();
LABEL_67:
          type metadata accessor for PhonePersonList();
          uint64_t v73 = PhonePersonList.__allocating_init(list:)((uint64_t)v43);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(class metadata base offset for StartCallCATs
                                                            + **(void **)(v96 + 40)
                                                            + 1632))(v73, v95, v14);
          swift_release();
          goto LABEL_92;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v43 = _swiftEmptyArrayStorage;
      goto LABEL_66;
    case 5uLL:
      (*(void (**)(uint64_t, uint64_t))(class metadata base offset for StartCallCATs
                                               + **(void **)(v96 + 40)
                                               + 1856))(v95, a9);
      goto LABEL_19;
    case 6uLL:
      (*(void (**)(uint64_t, uint64_t))(class metadata base offset for StartCallCATs
                                               + **(void **)(v96 + 40)
                                               + 1696))(v95, a9);
      goto LABEL_19;
    case 7uLL:
      (*(void (**)(uint64_t, uint64_t))(class metadata base offset for StartCallCATs
                                               + **(void **)(v96 + 40)
                                               + 1824))(v95, a9);
      goto LABEL_19;
    default:
      if (specialized static ContactsSlotTemplating.isMissingMeCardCase(intent:)((uint64_t)a5, (uint64_t (*)(void))outlined bridged method (pb) of @objc INStartVideoCallIntent.contacts.getter, (uint64_t (*)(uint64_t))outlined bridged method (pb) of @objc INStartVideoCallIntent.contacts.getter))
      {
        (*(void (**)(uint64_t, uint64_t))(class metadata base offset for StartCallCATs
                                                 + **(void **)(v96 + 40)
                                                 + 1760))(v95, a9);
        goto LABEL_19;
      }
      uint64_t v89 = a9;
      if (v97)
      {
        id v58 = v97;
        id v59 = INPerson.nameLowercasedWithFirstUppercased.getter();
      }
      else
      {
        id v59 = 0;
      }
      type metadata accessor for PhonePerson(0);
      static Device.current.getter();
      __swift_project_boxed_opaque_existential_1(v99, v100);
      dispatch thunk of DeviceState.siriLocale.getter();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v99);
      uint64_t v93 = static PhonePerson.make(phonePerson:options:locale:)(v59, 0, (uint64_t)v27);

      uint64_t v92 = *(void *)(v92 + 8);
      uint64_t v60 = v94;
      ((void (*)(char *, uint64_t))v92)(v27, v94);
      id v61 = (void *)v96;
      uint64_t v62 = *(void *)(v96 + 88);
      uint64_t v63 = *(void *)(v96 + 96);
      __swift_project_boxed_opaque_existential_1((void *)(v96 + 64), v62);
      __swift_project_boxed_opaque_existential_1(v61, v61[3]);
      dispatch thunk of DeviceState.siriLocale.getter();
      (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v63 + 16))(v91, v27, v62, v63);
      uint64_t v65 = v64;
      ((void (*)(char *, uint64_t))v92)(v27, v60);
      if (v65)
      {
        swift_bridgeObjectRetain();
        SpeakableString.init(print:speak:)();
        uint64_t v66 = type metadata accessor for SpeakableString();
        __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v66);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v67 = type metadata accessor for SpeakableString();
        __swift_storeEnumTagSinglePayload((uint64_t)v18, 1, 1, v67);
      }
      uint64_t v68 = v89;
      uint64_t v69 = *(void **)(v96 + 40);
      uint64_t v70 = v93;
      swift_retain();
      Swift::Bool v71 = App.isFirstParty()();
      (*(void (**)(uint64_t, char *, Swift::Bool, uint64_t, uint64_t))(class metadata base offset for StartCallCATs
                                                                             + *v69
                                                                             + 1728))(v70, v18, v71, v95, v68);
      swift_release_n();
      uint64_t v72 = (uint64_t)v18;
      goto LABEL_91;
  }
}

void specialized ContactsSlotTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t (*a22)(void),uint64_t a23,uint64_t (*a24)(void),uint64_t (*a25)(uint64_t))
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v134 = v26;
  uint64_t v135 = v25;
  char v28 = v27;
  uint64_t v30 = v29;
  id v32 = v31;
  id v34 = v33;
  uint64_t v126 = v35;
  id v131 = a25;
  uint64_t v36 = a22;
  uint64_t v133 = a21;
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v38 = OUTLINED_FUNCTION_11_0(v37);
  __chkstk_darwin(v38);
  OUTLINED_FUNCTION_46_0();
  uint64_t v41 = v39 - v40;
  uint64_t v43 = __chkstk_darwin(v42);
  uint64_t v128 = (char *)&v126 - v44;
  __chkstk_darwin(v43);
  OUTLINED_FUNCTION_10_14();
  uint64_t v130 = v45;
  uint64_t v132 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_1();
  uint64_t v129 = v46;
  __chkstk_darwin(v47);
  OUTLINED_FUNCTION_5_8();
  uint64_t v127 = v48;
  __chkstk_darwin(v49);
  uint64_t v51 = (char *)&v126 - v50;
  uint64_t v52 = OUTLINED_FUNCTION_55_24();
  uint64_t v53 = a22(v52);
  if (v53)
  {
    uint64_t v54 = v53;
    if ((v28 & 1) == 0)
    {
      unint64_t v55 = v53 & 0xC000000000000001;
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v30, (v53 & 0xC000000000000001) == 0, v53);
      if (v55) {
        id v56 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v56 = *(id *)(v54 + 8 * v30 + 32);
      }
      id v136 = v56;
LABEL_13:
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v57 = OUTLINED_FUNCTION_55_24();
  uint64_t v58 = a22(v57);
  if (v58)
  {
    uint64_t v59 = v58;
    OUTLINED_FUNCTION_24_16();
    if (v61)
    {
      if (_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_10;
      }
    }
    else if (*(void *)(v60 + 16))
    {
LABEL_10:
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v59 & 0xC000000000000001) == 0, v59);
      if ((v59 & 0xC000000000000001) != 0) {
        id v62 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v62 = *(id *)(v59 + 32);
      }
      id v136 = v62;
      goto LABEL_13;
    }
    swift_bridgeObjectRelease();
  }
  id v136 = 0;
LABEL_17:
  id v63 = objc_msgSend(v34, "unsupportedReason", v126);
  if ((id)_INStartCallContactUnsupportedReasonForeignEmergencyDisambiguation == v63)
  {
LABEL_18:
    OUTLINED_FUNCTION_13_63();
    OUTLINED_FUNCTION_61_17();
    v64();
    OUTLINED_FUNCTION_26_1();

    return;
  }
  switch((unint64_t)v63)
  {
    case 2uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
      goto LABEL_18;
    case 3uLL:
      specialized static PhoneStartCallIntent.makeForSlotTemplating(intent:isRelationshipRequest:)();
      uint64_t v36 = v67;
      if (v136
        && (id v68 = [v136 personHandle]) != 0
        && (v69 = v68, id v70 = [v68 label], v69, v70)
        && (static String._unconditionallyBridgeFromObjectiveC(_:)(), uint64_t v72 = v71, v70, v72))
      {
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_11_2();
        uint64_t v73 = type metadata accessor for SpeakableString();
        OUTLINED_FUNCTION_29_8(v73);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v87 = type metadata accessor for SpeakableString();
        OUTLINED_FUNCTION_14_16((uint64_t)v130, v88, v89, v87);
      }
      uint64_t v90 = *(void *)((char *)v36 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_contacts);
      if (!v90) {
        goto LABEL_64;
      }
      unint64_t v91 = *(void *)(v90 + 24);
      if (v91 >> 62)
      {
        OUTLINED_FUNCTION_32_3();
        if (_CocoaArrayWrapper.endIndex.getter()) {
          goto LABEL_47;
        }
LABEL_63:
        swift_bridgeObjectRelease();
LABEL_64:
        uint64_t v126 = 0;
        goto LABEL_65;
      }
      uint64_t v92 = *(void *)((char *)&dword_10 + (v91 & 0xFFFFFFFFFFFFFF8));
      swift_bridgeObjectRetain();
      if (!v92) {
        goto LABEL_63;
      }
LABEL_47:
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v91 & 0xC000000000000001) == 0, v91);
      if ((v91 & 0xC000000000000001) != 0) {
        goto LABEL_91;
      }
      swift_retain();
LABEL_49:
      swift_bridgeObjectRelease();
      uint64_t v126 = DialogPerson.personHandle.getter();
      swift_release();
LABEL_65:
      if (specialized INPersonContainingIntent.hasSiriMatches.getter(v131))
      {
        if (v136)
        {
          id v110 = [v136 siriMatches];
          if (!v110) {
            goto LABEL_76;
          }
          type metadata accessor for INPerson();
          unint64_t v111 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          if (v111 >> 62)
          {
            swift_bridgeObjectRetain();
            id v110 = (id)_CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (v110) {
              goto LABEL_70;
            }
          }
          else
          {
            id v110 = *(id *)((char *)&dword_10 + (v111 & 0xFFFFFFFFFFFFFF8));
            if (v110)
            {
LABEL_70:
              specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v111 & 0xC000000000000001) == 0, v111);
              if ((v111 & 0xC000000000000001) != 0) {
                id v112 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else {
                id v112 = *(id *)(v111 + 32);
              }
              id v110 = v112;
            }
          }
          swift_bridgeObjectRelease();
          goto LABEL_76;
        }
        id v110 = 0;
      }
      else
      {
        id v113 = v136;
        id v110 = v136;
      }
LABEL_76:
      uint64_t v114 = (void *)v135[5];
      swift_retain();
      if (![v32 preferredCallProvider]) {
        goto LABEL_87;
      }
      uint64_t v115 = INPreferredCallProviderGetBackingType();
      switch(v115)
      {
        case 4:
          uint64_t v116 = @"THIRD_PARTY_PROVIDER";
          break;
        case 3:
          uint64_t v116 = @"FACETIME_PROVIDER";
          break;
        case 2:
          uint64_t v116 = @"TELEPHONY_PROVIDER";
          break;
        default:
          uint64_t v116 = +[NSString stringWithFormat:@"(unknown: %i)", v115];
          goto LABEL_86;
      }
      uint64_t v117 = v116;
LABEL_86:
      uint64_t v118 = v116;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

LABEL_87:
      uint64_t v119 = (uint64_t)v128;
      OUTLINED_FUNCTION_11_2();
      uint64_t v120 = type metadata accessor for SpeakableString();
      __swift_storeEnumTagSinglePayload(v119, 0, 1, v120);
      type metadata accessor for PhonePerson(0);
      char ContactRelatedOr = specialized INPersonContainingIntent.isFirstContactRelatedOrMyself.getter(v131);
      static Device.current.getter();
      __swift_project_boxed_opaque_existential_1(v138, v139);
      uint64_t v122 = v127;
      OUTLINED_FUNCTION_62();
      dispatch thunk of DeviceState.siriLocale.getter();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v138);
      uint64_t v123 = static PhonePerson.make(phonePerson:options:locale:)(v110, ContactRelatedOr & 1, v122);
      OUTLINED_FUNCTION_11();
      v124();
      uint64_t v125 = v130;
      (*(void (**)(uint64_t (*)(void), uint64_t, uint64_t, void (*)(void, void), uint64_t, uint64_t, uint64_t))(class metadata base offset for StartCallCATs + *v114 + 1792))(v36, v119, v123, v130, v126, v134, v133);
      swift_release_n();
      swift_release();

      swift_release();
      outlined destroy of SpeakableString?(v119, &demangling cache variable for type metadata for SpeakableString?);
      uint64_t v108 = (uint64_t)v125;
LABEL_88:
      outlined destroy of SpeakableString?(v108, &demangling cache variable for type metadata for SpeakableString?);
LABEL_89:

      OUTLINED_FUNCTION_26_1();
      return;
    case 4uLL:
      uint64_t v74 = OUTLINED_FUNCTION_55_24();
      uint64_t v75 = a22(v74);
      if (!v75) {
        goto LABEL_61;
      }
      uint64_t v76 = v75;
      unint64_t v137 = (unint64_t)_swiftEmptyArrayStorage;
      OUTLINED_FUNCTION_24_16();
      if (v78)
      {
        swift_bridgeObjectRetain();
        uint64_t v79 = _CocoaArrayWrapper.endIndex.getter();
        if (!v79) {
          goto LABEL_60;
        }
      }
      else
      {
        uint64_t v79 = *(void *)(v77 + 16);
        swift_bridgeObjectRetain();
        if (!v79) {
          goto LABEL_60;
        }
      }
      id v131 = (uint64_t (*)(uint64_t))type metadata accessor for PhonePerson(0);
      if (v79 < 1)
      {
        __break(1u);
LABEL_91:
        OUTLINED_FUNCTION_65_16();
        goto LABEL_49;
      }
      uint64_t v80 = 0;
      unint64_t v81 = v76 & 0xC000000000000001;
      uint64_t v82 = v76;
      do
      {
        if (v81) {
          id v83 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v83 = *(id *)(v76 + 8 * v80 + 32);
        }
        uint64_t v84 = v83;
        static Device.current.getter();
        __swift_project_boxed_opaque_existential_1(v138, v139);
        OUTLINED_FUNCTION_62();
        dispatch thunk of DeviceState.siriLocale.getter();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v138);
        uint64_t v85 = static PhonePerson.make(phonePerson:options:locale:)(v84, 0, (uint64_t)v51);
        OUTLINED_FUNCTION_3_23();
        v86();

        if (v85)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((char *)&dword_10 + (v137 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                          + (v137 & 0xFFFFFFFFFFFFFF8)) >> 1)
            OUTLINED_FUNCTION_4_21();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        ++v80;
        uint64_t v76 = v82;
      }
      while (v79 != v80);
LABEL_60:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_61:
      type metadata accessor for PhonePersonList();
      OUTLINED_FUNCTION_85_11();
      OUTLINED_FUNCTION_13_63();
      (*(void (**)(void))(class metadata base offset for StartCallCATs + v109 + 1632))();
      swift_release();
      goto LABEL_89;
    default:
      if (specialized static ContactsSlotTemplating.isMissingMeCardCase(intent:)((uint64_t)v32, a24, v131)) {
        goto LABEL_18;
      }
      if (v136)
      {
        id v93 = v136;
        id v94 = INPerson.nameLowercasedWithFirstUppercased.getter();
      }
      else
      {
        id v94 = 0;
      }
      type metadata accessor for PhonePerson(0);
      static Device.current.getter();
      __swift_project_boxed_opaque_existential_1(v138, v139);
      OUTLINED_FUNCTION_62();
      dispatch thunk of DeviceState.siriLocale.getter();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v138);
      id v131 = (uint64_t (*)(uint64_t))static PhonePerson.make(phonePerson:options:locale:)(v94, 0, (uint64_t)v51);

      uint64_t v130 = *(void (**)(void, void))(v129 + 8);
      uint64_t v95 = v132;
      v130(v51, v132);
      uint64_t v96 = v135;
      __swift_project_boxed_opaque_existential_1(v135 + 8, v135[11]);
      __swift_project_boxed_opaque_existential_1(v96, v96[3]);
      OUTLINED_FUNCTION_62();
      dispatch thunk of DeviceState.siriLocale.getter();
      OUTLINED_FUNCTION_95_10();
      v97();
      uint64_t v99 = v98;
      v130(v51, v95);
      if (v99)
      {
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_11_2();
        uint64_t v100 = type metadata accessor for SpeakableString();
        OUTLINED_FUNCTION_87_7(v41, v101, v102, v100);
      }
      else
      {
        uint64_t v103 = type metadata accessor for SpeakableString();
        OUTLINED_FUNCTION_14_16(v41, v104, v105, v103);
      }
      swift_retain();
      App.isFirstParty()();
      uint64_t v106 = OUTLINED_FUNCTION_6_23();
      v107(v106);
      swift_release_n();
      uint64_t v108 = v41;
      goto LABEL_88;
  }
}

#error "444DCC: call analysis failed (funcsize=42)"

uint64_t specialized DestinationTypeSlotTemplating.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:inferenceSource:_:)()
{
  OUTLINED_FUNCTION_100_6();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v4 = OUTLINED_FUNCTION_11_0(v3);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_12_0();
  id v5 = [v2 itemToConfirm];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for INCallDestinationType(0);
  if (OUTLINED_FUNCTION_101_9()) {
    id v6 = v15;
  }
  else {
    id v6 = [v1 destinationType];
  }
  if (v6)
  {
    uint64_t BackingType = INCallDestinationTypeGetBackingType();
    switch((int)BackingType)
    {
      case 1:
        uint64_t v8 = @"NORMAL_DESTINATION";
        goto LABEL_13;
      case 2:
        uint64_t v8 = @"EMERGENCY_DESTINATION";
        goto LABEL_13;
      case 3:
        uint64_t v8 = @"VOICEMAIL_DESTINATION";
        goto LABEL_13;
      case 4:
        uint64_t v8 = @"REDIAL_DESTINATION";
        goto LABEL_13;
      case 5:
        uint64_t v8 = @"CALL_BACK_DESTINATION";
LABEL_13:
        uint64_t v9 = v8;
        break;
      default:
        uint64_t v8 = +[NSString stringWithFormat:@"(unknown: %i)", BackingType];
        break;
    }
    unint64_t v10 = v8;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    OUTLINED_FUNCTION_75_11();
  }
  OUTLINED_FUNCTION_11_2();
  uint64_t v11 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v0, 0, 1, v11);
  uint64_t v12 = OUTLINED_FUNCTION_107_4();
  v13(v12);
  return outlined destroy of SpeakableString?(v0, &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t specialized PreferredCallProviderSlotTemplating.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:inferenceSource:_:)()
{
  OUTLINED_FUNCTION_100_6();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v4 = OUTLINED_FUNCTION_11_0(v3);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_12_0();
  id v5 = [v2 itemToConfirm];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for INPreferredCallProvider(0);
  if (OUTLINED_FUNCTION_101_9()) {
    id v6 = v15;
  }
  else {
    id v6 = [v1 preferredCallProvider];
  }
  if (v6)
  {
    uint64_t v7 = INPreferredCallProviderGetBackingType();
    switch(v7)
    {
      case 4:
        uint64_t v8 = @"THIRD_PARTY_PROVIDER";
        break;
      case 3:
        uint64_t v8 = @"FACETIME_PROVIDER";
        break;
      case 2:
        uint64_t v8 = @"TELEPHONY_PROVIDER";
        break;
      default:
        uint64_t v8 = +[NSString stringWithFormat:@"(unknown: %i)", v7];
        goto LABEL_14;
    }
    uint64_t v9 = v8;
LABEL_14:
    unint64_t v10 = v8;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    goto LABEL_15;
  }
  OUTLINED_FUNCTION_75_11();
LABEL_15:
  OUTLINED_FUNCTION_11_2();
  uint64_t v11 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v0, 0, 1, v11);
  uint64_t v12 = OUTLINED_FUNCTION_107_4();
  v13(v12);
  return outlined destroy of SpeakableString?(v0, &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t specialized PreferredCallProviderSlotTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:)(int a1, int a2, int a3, id a4, void *a5, int a6, int a7, uint64_t a8, uint64_t a9, void (*a10)(void *, void))
{
  switch((unint64_t)[a4 unsupportedReason])
  {
    case 1uLL:
      type metadata accessor for SirikitDeviceState();
      outlined init with copy of SignalProviding(v10, (uint64_t)v18);
      SirikitDeviceState.__allocating_init(from:)();
      OUTLINED_FUNCTION_104_4();
      v13();
      goto LABEL_5;
    case 3uLL:
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(class metadata base offset for StartCallCATs
                                                           + **(void **)(v10 + 40)
                                                           + 2048))(a8, a9);
      break;
    case 6uLL:
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(class metadata base offset for StartCallCATs
                                                           + **(void **)(v10 + 40)
                                                           + 2080))(a8, a9);
      break;
    default:
      a10(a5, 0);
      uint64_t v15 = type metadata accessor for SirikitDeviceState();
      OUTLINED_FUNCTION_3_102(v15);
      SirikitDeviceState.__allocating_init(from:)();
      uint64_t v16 = OUTLINED_FUNCTION_0_69();
      v17(v16);
      swift_release();
LABEL_5:
      uint64_t result = swift_release();
      break;
  }
  return result;
}

#error "4455E4: call analysis failed (funcsize=37)"

uint64_t StartAudioCallCatTemplatingService.slotTemplating(for:)@<X0>(char a1@<W0>, _OWORD *a2@<X8>)
{
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_1();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_12_0();
  switch(a1)
  {
    case 2:
      outlined init with copy of SignalProviding((uint64_t)v2 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *v2 + 40), (uint64_t)v30);
      uint64_t v31 = *(void *)((char *)v2 + direct field offset for StartAudioCallCatTemplatingService.catFamily);
      swift_retain();
      uint64_t v10 = v29;
      specialized SlotTemplating.toAnySlotTemplating()(v29);
      uint64_t v11 = &demangling cache variable for type metadata for DestinationTypeSlotTemplating<INStartAudioCallIntent, INIntentResponse>;
      goto LABEL_5;
    case 3:
      outlined init with copy of SignalProviding((uint64_t)v2 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *v2 + 40), (uint64_t)v30);
      uint64_t v31 = *(void *)((char *)v2 + direct field offset for StartAudioCallCatTemplatingService.catFamily);
      swift_retain();
      uint64_t v10 = v29;
      specialized SlotTemplating.toAnySlotTemplating()(v29);
      uint64_t v11 = &demangling cache variable for type metadata for PreferredCallProviderSlotTemplating<INStartAudioCallIntent, INIntentResponse>;
LABEL_5:
      uint64_t v12 = v30;
LABEL_8:
      uint64_t result = outlined destroy of SpeakableString?((uint64_t)v12, v11);
      long long v20 = *((_OWORD *)v10 + 1);
      long long v21 = *((_OWORD *)v10 + 2);
      long long v22 = *((_OWORD *)v10 + 3);
      *a2 = *(_OWORD *)v10;
      a2[1] = v20;
      a2[2] = v21;
      a2[3] = v22;
      return result;
    case 4:
      outlined init with copy of SignalProviding((uint64_t)v2 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *v2 + 40), (uint64_t)v29);
      uint64_t v13 = *(void *)((char *)v2 + direct field offset for StartAudioCallCatTemplatingService.catFamily);
      swift_retain();
      uint64_t v14 = DucTemplatingService.locale.getter();
      uint64_t v16 = v15;
      uint64_t v17 = type metadata accessor for AppInfoBuilder();
      uint64_t v18 = swift_allocObject();
      v29[11] = v17;
      v29[12] = (uint64_t)&protocol witness table for AppInfoBuilder;
      v29[5] = v13;
      v29[6] = v14;
      v29[7] = v16;
      v29[8] = v18;
      uint64_t v10 = v30;
      specialized SlotTemplating.toAnySlotTemplating()(v30);
      uint64_t v11 = &demangling cache variable for type metadata for ContactsSlotTemplating<INStartAudioCallIntent, INIntentResponse>;
      uint64_t v12 = v29;
      goto LABEL_8;
  }
  uint64_t v23 = v9;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v24 = __swift_project_value_buffer(v23, (uint64_t)static Logger.siriPhone);
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(v7 + 16))(v3, v24, v23);
  char v25 = (void *)Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_1_34(v26))
  {
    OUTLINED_FUNCTION_3_36();
    v29[0] = OUTLINED_FUNCTION_9_35();
    *uint64_t v3 = 136315138;
    v30[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000004FLL, 0x800000000049D9E0, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_9_27(&dword_0, v27, v28, "%s");
    OUTLINED_FUNCTION_78_10();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }

  static SiriKitLifecycle._logCrashToEventBus(_:)();
  OUTLINED_FUNCTION_77();
  uint64_t result = OUTLINED_FUNCTION_13_17();
  __break(1u);
  return result;
}

void StartAudioCallCatTemplatingService.makeIntentHandledDialog(app:intent:intentResponse:_:)()
{
  OUTLINED_FUNCTION_24_0();
  unint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v10 = OUTLINED_FUNCTION_11_0(v9);
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_53();
  type metadata accessor for Locale();
  OUTLINED_FUNCTION_1();
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_4();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = outlined bridged method (pb) of @objc INStartVideoCallIntent.contacts.getter(v8);
  uint64_t v60 = v6;
  uint64_t v61 = v4;
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v64 = _swiftEmptyArrayStorage;
    OUTLINED_FUNCTION_24_16();
    if (v18)
    {
      swift_bridgeObjectRetain();
      uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
      if (v19) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v19 = *(void *)(v17 + 16);
      swift_bridgeObjectRetain();
      if (v19)
      {
LABEL_4:
        uint64_t v58 = v8;
        type metadata accessor for PhonePerson(0);
        if (v19 < 1)
        {
          __break(1u);
          return;
        }
        unint64_t v55 = v2;
        uint64_t v56 = v1;
        uint64_t v20 = 0;
        uint64_t v21 = v16;
        unint64_t v22 = v16 & 0xC000000000000001;
        uint64_t v23 = v19;
        do
        {
          if (v22) {
            id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v24 = *(id *)(v21 + 8 * v20 + 32);
          }
          char v25 = v24;
          static Device.current.getter();
          __swift_project_boxed_opaque_existential_1(v63, v63[3]);
          OUTLINED_FUNCTION_18_22();
          dispatch thunk of DeviceState.siriLocale.getter();
          os_log_type_t v26 = (void *)OUTLINED_FUNCTION_99_10((uint64_t)v63);
          uint64_t v28 = static PhonePerson.make(phonePerson:options:locale:)(v26, v27, v14);
          OUTLINED_FUNCTION_3_86();
          v29();

          if (v28)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            OUTLINED_FUNCTION_13_14();
            if (v30) {
              OUTLINED_FUNCTION_4_21();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          ++v20;
        }
        while (v23 != v20);
        swift_bridgeObjectRelease();
        uint64_t v31 = v64;
        unint64_t v2 = v55;
        uint64_t v1 = v56;
        uint64_t v8 = v58;
        goto LABEL_18;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v31 = _swiftEmptyArrayStorage;
LABEL_18:
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  uint64_t v31 = _swiftEmptyArrayStorage;
LABEL_19:
  type metadata accessor for PhonePersonList.Builder();
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = _swiftEmptyArrayStorage;
  id v33 = (void *)(v32 + 16);
  swift_beginAccess();
  *id v33 = v31;
  swift_bridgeObjectRelease();
  type metadata accessor for PhonePersonList();
  swift_allocObject();
  uint64_t v34 = OUTLINED_FUNCTION_18_22();
  uint64_t v35 = PhonePersonList.init(builder:)(v34);
  uint64_t v36 = *(void **)((char *)v2 + direct field offset for StartAudioCallCatTemplatingService.catFamily);
  id v37 = v8;
  specialized PhoneStartCallIntent.__allocating_init(intent:isRelationshipRequest:)();
  uint64_t v59 = v38;
  type metadata accessor for SirikitDeviceState();
  uint64_t v39 = (void *)((char *)v2 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *v2 + 40));
  outlined init with copy of SignalProviding((uint64_t)v39, (uint64_t)v63);
  uint64_t v62 = v35;
  swift_retain();
  uint64_t v57 = SirikitDeviceState.__allocating_init(from:)();
  __swift_project_boxed_opaque_existential_1((void *)((char *)v2 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *v2 + 48)), *(void *)((char *)v2+ *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *v2 + 48)+ 24));
  __swift_project_boxed_opaque_existential_1(v39, v39[3]);
  dispatch thunk of DeviceState.siriLocale.getter();
  OUTLINED_FUNCTION_95_10();
  v40();
  uint64_t v42 = v41;
  OUTLINED_FUNCTION_11();
  v43();
  if (v42)
  {
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_11_2();
    uint64_t v44 = type metadata accessor for SpeakableString();
    OUTLINED_FUNCTION_92_8(v44);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v45 = type metadata accessor for SpeakableString();
    OUTLINED_FUNCTION_14_16(v1, v46, v47, v45);
  }
  Swift::Bool v48 = App.isFirstParty()();
  uint64_t v49 = App.appIdentifier.getter();
  if (v50)
  {
    uint64_t v51 = v62;
    uint64_t v53 = v57;
    uint64_t v52 = v59;
    if (v49 == 0xD000000000000010 && v50 == 0x8000000000495A40) {
      char v54 = 1;
    }
    else {
      char v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v54 = 0;
    uint64_t v51 = v62;
    uint64_t v53 = v57;
    uint64_t v52 = v59;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, Swift::Bool, void, void, uint64_t, uint64_t))(class metadata base offset for StartCallCATs + *v36 + 1120))(v52, v51, v53, v1, v48, v54 & 1, 0, v60, v61);
  swift_release();
  swift_release_n();
  swift_release();
  outlined destroy of SpeakableString?(v1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_26_1();
}

uint64_t StartAudioCallCatTemplatingService.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:_:)()
{
  OUTLINED_FUNCTION_7_75();
  swift_bridgeObjectRetain();
  v2._countAndFlagsBits = v1;
  v2._object = v0;
  v3.PhoneCallFlowDelegatePlugin::EmergencyType value = PhoneCallSlotNames.init(rawValue:)(v2).value;
  StartAudioCallCatTemplatingService.slotTemplating(for:)(v3.value, &v7);
  uint64_t v4 = OUTLINED_FUNCTION_9_69();
  v5(v4);
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

void StartAudioCallCatTemplatingService.makeFailureHandlingIntentDialog(app:intent:intentResponse:_:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v1 = v0;
  uint64_t v37 = v2;
  uint64_t v38 = v3;
  uint64_t v36 = v4;
  uint64_t v35 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_1();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_4();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v12 = OUTLINED_FUNCTION_11_0(v11);
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_4();
  uint64_t v15 = v14 - v13;
  OUTLINED_FUNCTION_2();
  __swift_project_boxed_opaque_existential_1((void *)(v0 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + v16 + 48)), *(void *)(v0 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + v16 + 48) + 24));
  OUTLINED_FUNCTION_2();
  uint64_t v34 = (void *)(v0 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + v17 + 40));
  __swift_project_boxed_opaque_existential_1(v34, v34[3]);
  OUTLINED_FUNCTION_18_22();
  dispatch thunk of DeviceState.siriLocale.getter();
  OUTLINED_FUNCTION_95_10();
  v18();
  uint64_t v20 = v19;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, v35);
  if (v20)
  {
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_11_2();
    uint64_t v21 = type metadata accessor for SpeakableString();
    OUTLINED_FUNCTION_87_7(v15, v22, v23, v21);
  }
  else
  {
    uint64_t v24 = type metadata accessor for SpeakableString();
    OUTLINED_FUNCTION_14_16(v15, v25, v26, v24);
  }
  switch((unint64_t)[v36 code])
  {
    case 5uLL:
    case 7uLL:
    case 8uLL:
      OUTLINED_FUNCTION_11_71();
      uint64_t v32 = OUTLINED_FUNCTION_8_97();
      v33(v32);
      break;
    case 6uLL:
      OUTLINED_FUNCTION_11_71();
      (*(void (**)(uint64_t, uint64_t))(class metadata base offset for StartCallCATs + v31 + 704))(v37, v38);
      break;
    default:
      char v27 = *(void **)(v1 + direct field offset for StartAudioCallCatTemplatingService.catFamily);
      type metadata accessor for SirikitDeviceState();
      outlined init with copy of SignalProviding((uint64_t)v34, (uint64_t)&v39);
      uint64_t v28 = SirikitDeviceState.__allocating_init(from:)();
      uint64_t v29 = swift_allocObject();
      *(void *)(v29 + 16) = v37;
      *(void *)(v29 + 24) = v38;
      char v30 = *(void (**)(uint64_t, uint64_t (*)(), uint64_t))(class metadata base offset for StartCallCATs
                                                                   + *v27
                                                                   + 544);
      swift_retain();
      v30(v28, partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TemplatingResult, Error>) -> (), v29);
      swift_release();
      swift_release();
      break;
  }
  outlined destroy of SpeakableString?(v15, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_26_1();
}

uint64_t StartAudioCallCatTemplatingService.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:)()
{
  OUTLINED_FUNCTION_7_75();
  swift_bridgeObjectRetain();
  v2._countAndFlagsBits = v1;
  v2._object = v0;
  v3.PhoneCallFlowDelegatePlugin::EmergencyType value = PhoneCallSlotNames.init(rawValue:)(v2).value;
  StartAudioCallCatTemplatingService.slotTemplating(for:)(v3.value, &v7);
  uint64_t v4 = OUTLINED_FUNCTION_9_69();
  v5(v4);
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t StartAudioCallCatTemplatingService.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:_:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  swift_bridgeObjectRetain();
  v18._countAndFlagsBits = a2;
  v18._object = a3;
  v19.PhoneCallFlowDelegatePlugin::EmergencyType value = PhoneCallSlotNames.init(rawValue:)(v18).value;
  StartAudioCallCatTemplatingService.slotTemplating(for:)(v19.value, &v23);
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(class metadata base offset for PhoneCallBaseCatTemplatingService
                                                             + *v9
                                                             + 216))(a5, a8, a9);
  v24(a1, a2, a3, a4, a5, a6, a7, v20, v21);
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t StartAudioCallCatTemplatingService.makeGenericErrorDialog(app:_:)()
{
  type metadata accessor for SirikitDeviceState();
  outlined init with copy of SignalProviding((uint64_t)v0 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *v0 + 40), (uint64_t)v3);
  SirikitDeviceState.__allocating_init(from:)();
  OUTLINED_FUNCTION_104_4();
  v1();
  return swift_release();
}

void StartAudioCallCatTemplatingService.init(ducFamily:sharedGlobals:displayTextCats:phoneCallCommonCats:appInfoBuilder:labelTemplating:startCallCats:)()
{
}

uint64_t StartAudioCallCatTemplatingService.__ivar_destroyer()
{
  return swift_release();
}

uint64_t StartAudioCallCatTemplatingService.deinit()
{
  uint64_t v0 = specialized PhoneCallBaseCatTemplatingService.deinit();
  swift_release();
  return v0;
}

uint64_t StartAudioCallCatTemplatingService.__deallocating_deinit()
{
  specialized PhoneCallBaseCatTemplatingService.deinit();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t specialized static PhoneStartCallIntent.makeForSlotTemplating(intent:isRelationshipRequest:)(void *a1, char a2)
{
  uint64_t v38 = type metadata accessor for Locale();
  uint64_t v4 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PhoneStartCallIntent.Builder(0);
  swift_allocObject();
  uint64_t v10 = PhoneStartCallIntent.Builder.init()();
  unint64_t v11 = outlined bridged method (pb) of @objc INAddCallParticipantIntent.participants.getter(a1);
  uint64_t v12 = _swiftEmptyArrayStorage;
  if (!v11)
  {
LABEL_18:
    type metadata accessor for PhonePersonList();
    uint64_t v23 = PhonePersonList.__allocating_init(list:)((uint64_t)v12);
    uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 352))(v23);
    swift_release();
    swift_release();
    uint64_t v25 = INPreferredCallProviderGetBackingType();
    switch(v25)
    {
      case 4:
        uint64_t v26 = @"THIRD_PARTY_PROVIDER";
        break;
      case 3:
        uint64_t v26 = @"FACETIME_PROVIDER";
        break;
      case 2:
        uint64_t v26 = @"TELEPHONY_PROVIDER";
        break;
      default:
        uint64_t v26 = +[NSString stringWithFormat:@"(unknown: %i)", v25];
        goto LABEL_26;
    }
    char v27 = v26;
LABEL_26:
    uint64_t v28 = v26;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    SpeakableString.init(print:speak:)();
    uint64_t v29 = type metadata accessor for SpeakableString();
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v29);
    uint64_t v30 = (*(uint64_t (**)(char *))(*(void *)v24 + 320))(v9);
    swift_release();
    uint64_t v31 = outlined destroy of SpeakableString?((uint64_t)v9, &demangling cache variable for type metadata for SpeakableString?);
    uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 376))(v31);
    swift_release();
    return v32;
  }
  unint64_t v13 = v11;
  unint64_t v40 = (unint64_t)_swiftEmptyArrayStorage;
  if (!(v11 >> 62))
  {
    uint64_t v14 = *(void *)((char *)&dword_10 + (v11 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (v14) {
      goto LABEL_4;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    uint64_t v12 = _swiftEmptyArrayStorage;
LABEL_17:
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
  if (!v14) {
    goto LABEL_16;
  }
LABEL_4:
  uint64_t result = type metadata accessor for PhonePerson(0);
  uint64_t v37 = result;
  if (v14 >= 1)
  {
    uint64_t v34 = v10;
    uint64_t v35 = v9;
    uint64_t v16 = 0;
    unint64_t v36 = v13 & 0xC000000000000001;
    char v17 = a2 & 1;
    unint64_t v18 = v13;
    do
    {
      uint64_t v19 = v14;
      if (v36) {
        id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v20 = *(id *)(v13 + 8 * v16 + 32);
      }
      uint64_t v21 = v20;
      static Device.current.getter();
      __swift_project_boxed_opaque_existential_1(v39, v39[3]);
      dispatch thunk of DeviceState.siriLocale.getter();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
      uint64_t v22 = static PhonePerson.make(phonePerson:options:locale:)(v21, v17, (uint64_t)v6);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v38);

      if (v22)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((char *)&dword_10 + (v40 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                       + (v40 & 0xFFFFFFFFFFFFFF8)) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      ++v16;
      uint64_t v14 = v19;
      unint64_t v13 = v18;
    }
    while (v19 != v16);
    swift_bridgeObjectRelease();
    uint64_t v12 = (void *)v40;
    uint64_t v10 = v34;
    uint64_t v9 = v35;
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __CFString *v26;
  __CFString *v27;
  __CFString *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void v39[4];
  unint64_t v40;

  uint64_t v38 = type metadata accessor for Locale();
  uint64_t v4 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PhoneStartCallIntent.Builder(0);
  swift_allocObject();
  uint64_t v10 = PhoneStartCallIntent.Builder.init()();
  unint64_t v11 = outlined bridged method (pb) of @objc INStartVideoCallIntent.contacts.getter(a1);
  uint64_t v12 = _swiftEmptyArrayStorage;
  if (!v11)
  {
LABEL_18:
    type metadata accessor for PhonePersonList();
    uint64_t v23 = PhonePersonList.__allocating_init(list:)((uint64_t)v12);
    uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 352))(v23);
    swift_release();
    swift_release();
    uint64_t v25 = INPreferredCallProviderGetBackingType();
    switch(v25)
    {
      case 4:
        uint64_t v26 = @"THIRD_PARTY_PROVIDER";
        break;
      case 3:
        uint64_t v26 = @"FACETIME_PROVIDER";
        break;
      case 2:
        uint64_t v26 = @"TELEPHONY_PROVIDER";
        break;
      default:
        uint64_t v26 = +[NSString stringWithFormat:@"(unknown: %i)", v25];
        goto LABEL_26;
    }
    char v27 = v26;
LABEL_26:
    uint64_t v28 = v26;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    SpeakableString.init(print:speak:)();
    uint64_t v29 = type metadata accessor for SpeakableString();
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v29);
    uint64_t v30 = (*(uint64_t (**)(char *))(*(void *)v24 + 320))(v9);
    swift_release();
    uint64_t v31 = outlined destroy of SpeakableString?((uint64_t)v9, &demangling cache variable for type metadata for SpeakableString?);
    uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 376))(v31);
    swift_release();
    return v32;
  }
  unint64_t v13 = v11;
  unint64_t v40 = (unint64_t)_swiftEmptyArrayStorage;
  if (!(v11 >> 62))
  {
    uint64_t v14 = *(void *)((char *)&dword_10 + (v11 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (v14) {
      goto LABEL_4;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    uint64_t v12 = _swiftEmptyArrayStorage;
LABEL_17:
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
  if (!v14) {
    goto LABEL_16;
  }
LABEL_4:
  uint64_t result = type metadata accessor for PhonePerson(0);
  uint64_t v37 = result;
  if (v14 >= 1)
  {
    uint64_t v34 = v10;
    uint64_t v35 = v9;
    uint64_t v16 = 0;
    unint64_t v36 = v13 & 0xC000000000000001;
    char v17 = a2 & 1;
    unint64_t v18 = v13;
    do
    {
      uint64_t v19 = v14;
      if (v36) {
        id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v20 = *(id *)(v13 + 8 * v16 + 32);
      }
      uint64_t v21 = v20;
      static Device.current.getter();
      __swift_project_boxed_opaque_existential_1(v39, v39[3]);
      dispatch thunk of DeviceState.siriLocale.getter();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
      uint64_t v22 = static PhonePerson.make(phonePerson:options:locale:)(v21, v17, (uint64_t)v6);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v38);

      if (v22)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((char *)&dword_10 + (v40 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                       + (v40 & 0xFFFFFFFFFFFFFF8)) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      ++v16;
      uint64_t v14 = v19;
      unint64_t v13 = v18;
    }
    while (v19 != v16);
    swift_bridgeObjectRelease();
    uint64_t v12 = (void *)v40;
    uint64_t v10 = v34;
    uint64_t v9 = v35;
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

void specialized static PhoneStartCallIntent.makeForSlotTemplating(intent:isRelationshipRequest:)()
{
  OUTLINED_FUNCTION_24_0();
  Swift::String v2 = v1;
  char v4 = v3;
  uint64_t v6 = v5;
  uint64_t v42 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_1();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_53();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v11 = OUTLINED_FUNCTION_11_0(v10);
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_4();
  uint64_t v14 = v13 - v12;
  type metadata accessor for PhoneStartCallIntent.Builder(0);
  swift_allocObject();
  uint64_t v15 = PhoneStartCallIntent.Builder.init()();
  uint64_t v16 = v2(v6);
  if (!v16)
  {
LABEL_18:
    type metadata accessor for PhonePersonList();
    uint64_t v29 = OUTLINED_FUNCTION_18_22();
    uint64_t v30 = PhonePersonList.__allocating_init(list:)(v29);
    (*(void (**)(uint64_t))(*(void *)v15 + 352))(v30);
    swift_release();
    swift_release();
    if (![v6 preferredCallProvider]) {
      goto LABEL_29;
    }
    uint64_t v31 = INPreferredCallProviderGetBackingType();
    switch(v31)
    {
      case 4:
        uint64_t v32 = @"THIRD_PARTY_PROVIDER";
        break;
      case 3:
        uint64_t v32 = @"FACETIME_PROVIDER";
        break;
      case 2:
        uint64_t v32 = @"TELEPHONY_PROVIDER";
        break;
      default:
        uint64_t v32 = +[NSString stringWithFormat:@"(unknown: %i)", v31];
        goto LABEL_28;
    }
    uint64_t v33 = v32;
LABEL_28:
    uint64_t v34 = v32;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

LABEL_29:
    OUTLINED_FUNCTION_11_2();
    uint64_t v35 = type metadata accessor for SpeakableString();
    OUTLINED_FUNCTION_29_8(v35);
    OUTLINED_FUNCTION_2();
    uint64_t v37 = (*(uint64_t (**)(uint64_t))(v36 + 320))(v14);
    swift_release();
    uint64_t v38 = outlined destroy of SpeakableString?(v14, &demangling cache variable for type metadata for SpeakableString?);
    (*(void (**)(uint64_t))(*(void *)v37 + 376))(v38);
    OUTLINED_FUNCTION_18_22();
    swift_release();
    OUTLINED_FUNCTION_26_1();
    return;
  }
  uint64_t v17 = v16;
  unint64_t v44 = (unint64_t)_swiftEmptyArrayStorage;
  OUTLINED_FUNCTION_24_16();
  if (!v19)
  {
    uint64_t v20 = *(void *)(v18 + 16);
    swift_bridgeObjectRetain();
    if (v20) {
      goto LABEL_4;
    }
LABEL_16:
    swift_bridgeObjectRelease();
LABEL_17:
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
  if (!v20) {
    goto LABEL_16;
  }
LABEL_4:
  type metadata accessor for PhonePerson(0);
  if (v20 >= 1)
  {
    uint64_t v39 = v15;
    unint64_t v40 = v6;
    uint64_t v21 = 0;
    unint64_t v41 = v17 & 0xC000000000000001;
    char v22 = v4 & 1;
    uint64_t v23 = (void (**)(uint64_t, uint64_t))(v8 + 8);
    uint64_t v24 = v17;
    do
    {
      uint64_t v25 = v20;
      if (v41) {
        id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v26 = *(id *)(v17 + 8 * v21 + 32);
      }
      char v27 = v26;
      static Device.current.getter();
      __swift_project_boxed_opaque_existential_1(v43, v43[3]);
      dispatch thunk of DeviceState.siriLocale.getter();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
      uint64_t v28 = static PhonePerson.make(phonePerson:options:locale:)(v27, v22, v0);
      (*v23)(v0, v42);

      if (v28)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((char *)&dword_10 + (v44 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                       + (v44 & 0xFFFFFFFFFFFFFF8)) >> 1)
          OUTLINED_FUNCTION_4_21();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      ++v21;
      uint64_t v20 = v25;
      uint64_t v17 = v24;
    }
    while (v25 != v21);
    swift_bridgeObjectRelease();
    uint64_t v6 = v40;
    uint64_t v15 = v39;
    goto LABEL_17;
  }
  __break(1u);
}

uint64_t specialized StartAudioCallCatTemplatingService.init(sharedGlobals:catFamily:displayTextCats:phoneCallCommonCats:appInfoBuilder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v22 = a3;
  uint64_t v23 = a4;
  uint64_t v14 = *(void *)(a7 - 8);
  __chkstk_darwin(a1);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for CATOption();
  __chkstk_darwin(v17 - 8);
  *(void *)(a6 + direct field offset for StartAudioCallCatTemplatingService.catFamily) = a2;
  outlined init with copy of SignalProviding(a1, (uint64_t)v24);
  type metadata accessor for StartCallCATs();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v18 = CATWrapper.__allocating_init(options:globals:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a5, a7);
  uint64_t v19 = specialized PhoneCallBaseCatTemplatingService.init(ducFamily:sharedGlobals:displayTextCats:phoneCallCommonCats:appInfoBuilder:labelTemplating:startCallCats:)(0xD000000000000014, 0x800000000048C930, v24, v22, v23, v16, 0, 0, 0, 0, v18, a6, a7, a8);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a5, a7);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v19;
}

uint64_t sub_447754()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t type metadata accessor for StartAudioCallCatTemplatingService()
{
  uint64_t result = type metadata singleton initialization cache for StartAudioCallCatTemplatingService;
  if (!type metadata singleton initialization cache for StartAudioCallCatTemplatingService) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for StartAudioCallCatTemplatingService()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for StartAudioCallCatTemplatingService()
{
  return type metadata accessor for StartAudioCallCatTemplatingService();
}

#error "447884: call analysis failed (funcsize=23)"

uint64_t partial apply for specialized implicit closure #4 in implicit closure #3 in AnySlotTemplating.init<A>(delegate:)()
{
  OUTLINED_FUNCTION_34_35();
  return specialized implicit closure #4 in implicit closure #3 in AnySlotTemplating.init<A>(delegate:)(v0, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_34_35();
  return specialized implicit closure #4 in implicit closure #3 in AnySlotTemplating.init<A>(delegate:)(v0, v1, v2, v3, v4, v5, v6, v7, v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))specialized DestinationTypeSlotTemplating.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:inferenceSource:_:));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_34_35();
  return specialized implicit closure #4 in implicit closure #3 in AnySlotTemplating.init<A>(delegate:)(v0, v1, v2, v3, v4, v5, v6, v7, v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))specialized PreferredCallProviderSlotTemplating.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:inferenceSource:_:));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_77_13();
  return specialized implicit closure #4 in implicit closure #3 in AnySlotTemplating.init<A>(delegate:)(v0, v1, v2, v3, v4, v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_34_35();
  return specialized implicit closure #4 in implicit closure #3 in AnySlotTemplating.init<A>(delegate:)(v0, v1, v2, v3, v4, v5, v6, v7, v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))CallTypesSlotTemplating.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:inferenceSource:_:));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_77_13();
  return specialized implicit closure #4 in implicit closure #3 in AnySlotTemplating.init<A>(delegate:)(v0, v1, v2, v3, v4, v5, v6, v7, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_77_13();
  return specialized implicit closure #4 in implicit closure #3 in AnySlotTemplating.init<A>(delegate:)(v0, v1, v2, v3, v4, v5, v6, v7, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_34_35();
  return specialized implicit closure #4 in implicit closure #3 in AnySlotTemplating.init<A>(delegate:)(v0, v1, v2, v3, v4, v5, v6, v7, v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))DateCreatedSlotTemplating.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:inferenceSource:_:));
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_34_35();
  return specialized implicit closure #4 in implicit closure #3 in AnySlotTemplating.init<A>(delegate:)(v0, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_34_35();
  return specialized implicit closure #4 in implicit closure #3 in AnySlotTemplating.init<A>(delegate:)(v0, v1, v2, v3, v4, v5, v6, v7, v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))CallCapabilitySlotTemplating.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:inferenceSource:_:));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_34_35();
  return specialized implicit closure #4 in implicit closure #3 in AnySlotTemplating.init<A>(delegate:)(v0, v1, v2, v3, v4, v5, v6, v7, v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))CallRecordToCallBackSlotTemplating.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:inferenceSource:_:));
}

uint64_t partial apply for specialized implicit closure #6 in implicit closure #5 in AnySlotTemplating.init<A>(delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return partial apply for specialized implicit closure #6 in implicit closure #5 in AnySlotTemplating.init<A>(delegate:)(a1, a2, a3, a4);
}

{
  return partial apply for specialized implicit closure #6 in implicit closure #5 in AnySlotTemplating.init<A>(delegate:)(a1, a2, a3, a4);
}

{
  return partial apply for specialized implicit closure #6 in implicit closure #5 in AnySlotTemplating.init<A>(delegate:)(a1, a2, a3, a4);
}

uint64_t partial apply for specialized implicit closure #8 in implicit closure #7 in AnySlotTemplating.init<A>(delegate:)()
{
  OUTLINED_FUNCTION_38_34();
  return specialized implicit closure #8 in implicit closure #7 in AnySlotTemplating.init<A>(delegate:)(v0, v1, v2, v3, v4);
}

{
  int v0;
  int v1;
  int v2;
  void *v3;
  void *v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_38_34();
  return specialized implicit closure #8 in implicit closure #7 in AnySlotTemplating.init<A>(delegate:)(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, (void (*)(void *, void))specialized PhoneStartCallIntent.__allocating_init(intent:isRelationshipRequest:));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_24_44();
  return specialized implicit closure #8 in implicit closure #7 in AnySlotTemplating.init<A>(delegate:)(v0, v1, v2, v3, v4, v5, v6, v7, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_38_34();
  return specialized implicit closure #8 in implicit closure #7 in AnySlotTemplating.init<A>(delegate:)(v0, v1, v2, v3, v4);
}

{
  int v0;
  int v1;
  int v2;
  void *v3;
  void *v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_38_34();
  return specialized implicit closure #8 in implicit closure #7 in AnySlotTemplating.init<A>(delegate:)(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, (void (*)(void *, void))specialized PhoneStartCallIntent.__allocating_init(intent:isRelationshipRequest:));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_24_44();
  return specialized implicit closure #8 in implicit closure #7 in AnySlotTemplating.init<A>(delegate:)(v0, v1, v2, v3, v4, v5, v6, v7, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_24_44();
  return specialized implicit closure #8 in implicit closure #7 in AnySlotTemplating.init<A>(delegate:)(v0, v1, v2, v3, v4, v5, v6, v7, v9, v10);
}

uint64_t partial apply for specialized implicit closure #2 in implicit closure #1 in AnySlotTemplating.init<A>(delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  return specialized ContactsSlotTemplating.makeParameterPromptDialog(app:parameterName:intent:_:)(a1, a2, a3, a4, a5, a6);
}

void partial apply for specialized implicit closure #8 in implicit closure #7 in AnySlotTemplating.init<A>(delegate:)()
{
  OUTLINED_FUNCTION_24_44();
  specialized implicit closure #8 in implicit closure #7 in AnySlotTemplating.init<A>(delegate:)(v0, v1, v2, v3, v4, v5, v6, v7, v8);
}

uint64_t outlined init with copy of CallTypesSlotTemplating(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t partial apply for specialized implicit closure #2 in implicit closure #1 in AnySlotTemplating.init<A>(delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = OUTLINED_FUNCTION_10_75(a1, a2, a3, a4, a5);
  return (*(uint64_t (**)(uint64_t))(class metadata base offset for SearchCallHistoryCATs + v6 + 416))(v5);
}

{
  uint64_t v5;
  uint64_t v6;

  uint64_t v5 = OUTLINED_FUNCTION_10_75(a1, a2, a3, a4, a5);
  return (*(uint64_t (**)(uint64_t))(class metadata base offset for SearchCallHistoryCATs + v6 + 480))(v5);
}

{
  uint64_t v5;
  uint64_t v6;

  uint64_t v5 = OUTLINED_FUNCTION_10_75(a1, a2, a3, a4, a5);
  return (*(uint64_t (**)(uint64_t))(class metadata base offset for SearchCallHistoryCATs + v6 + 512))(v5);
}

{
  uint64_t v5;
  uint64_t v6;

  uint64_t v5 = OUTLINED_FUNCTION_10_75(a1, a2, a3, a4, a5);
  return (*(uint64_t (**)(uint64_t))(class metadata base offset for SearchCallHistoryCATs + v6 + 448))(v5);
}

{
  uint64_t v5;
  uint64_t v6;

  uint64_t v5 = OUTLINED_FUNCTION_10_75(a1, a2, a3, a4, a5);
  return (*(uint64_t (**)(uint64_t))(class metadata base offset for StartCallCATs + v6 + 1376))(v5);
}

{
  uint64_t v5;
  uint64_t v6;

  uint64_t v5 = OUTLINED_FUNCTION_10_75(a1, a2, a3, a4, a5);
  return (*(uint64_t (**)(uint64_t))(class metadata base offset for StartCallCATs + v6 + 1408))(v5);
}

{
  uint64_t v5;
  uint64_t v6;

  uint64_t v5 = OUTLINED_FUNCTION_10_75(a1, a2, a3, a4, a5);
  return (*(uint64_t (**)(uint64_t))(class metadata base offset for StartCallCATs + v6 + 1280))(v5);
}

uint64_t partial apply for specialized implicit closure #8 in implicit closure #7 in AnySlotTemplating.init<A>(delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = OUTLINED_FUNCTION_7_91(a1, a2, a3, a4, a5, a6, a7, a8);
  return (*(uint64_t (**)(uint64_t))(class metadata base offset for SearchCallHistoryCATs + v9 + 960))(v8);
}

{
  uint64_t v8;
  uint64_t v9;

  uint64_t v8 = OUTLINED_FUNCTION_7_91(a1, a2, a3, a4, a5, a6, a7, a8);
  return (*(uint64_t (**)(uint64_t))(class metadata base offset for SearchCallHistoryCATs + v9 + 1024))(v8);
}

{
  uint64_t v8;
  uint64_t v9;

  uint64_t v8 = OUTLINED_FUNCTION_7_91(a1, a2, a3, a4, a5, a6, a7, a8);
  return (*(uint64_t (**)(uint64_t))(class metadata base offset for SearchCallHistoryCATs + v9 + 992))(v8);
}

{
  uint64_t v8;
  uint64_t v9;

  uint64_t v8 = OUTLINED_FUNCTION_7_91(a1, a2, a3, a4, a5, a6, a7, a8);
  return (*(uint64_t (**)(uint64_t))(class metadata base offset for StartCallCATs + v9 + 1888))(v8);
}

uint64_t outlined init with copy of RecipientSlotTemplating(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t partial apply for specialized implicit closure #6 in implicit closure #5 in AnySlotTemplating.init<A>(delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return specialized implicit closure #6 in implicit closure #5 in AnySlotTemplating.init<A>(delegate:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, v9 + 16);
}

uint64_t objectdestroy_62Tm()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t outlined init with copy of UnseenSlotTemplating(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with copy of DateCreatedSlotTemplating(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t partial apply for specialized implicit closure #6 in implicit closure #5 in AnySlotTemplating.init<A>(delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = OUTLINED_FUNCTION_7_91(a1, a2, a3, a4, a5, a6, a7, a8);
  return (*(uint64_t (**)(uint64_t))(class metadata base offset for SearchCallHistoryCATs + v9 + 192))(v8);
}

{
  uint64_t v8;
  uint64_t v9;

  uint64_t v8 = OUTLINED_FUNCTION_7_91(a1, a2, a3, a4, a5, a6, a7, a8);
  return (*(uint64_t (**)(uint64_t))(class metadata base offset for StartCallCATs + v9 + 448))(v8);
}

{
  uint64_t v8;
  uint64_t v9;

  uint64_t v8 = OUTLINED_FUNCTION_7_91(a1, a2, a3, a4, a5, a6, a7, a8);
  return (*(uint64_t (**)(uint64_t))(class metadata base offset for StartCallCATs + v9 + 480))(v8);
}

{
  uint64_t v8;
  uint64_t v9;

  uint64_t v8 = OUTLINED_FUNCTION_7_91(a1, a2, a3, a4, a5, a6, a7, a8);
  return (*(uint64_t (**)(uint64_t))(class metadata base offset for StartCallCATs + v9 + 224))(v8);
}

#error "4481BC: call analysis failed (funcsize=23)"

#error "44828C: call analysis failed (funcsize=15)"

uint64_t objectdestroy_2Tm_3()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 80);

  return _swift_deallocObject(v0, 120, 7);
}

uint64_t outlined init with copy of CallCapabilitySlotTemplating(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with copy of CallRecordToCallBackSlotTemplating(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t partial apply for specialized implicit closure #2 in implicit closure #1 in AnySlotTemplating.init<A>(delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  return CallRecordToCallBackSlotTemplating.makeParameterPromptDialog(app:parameterName:intent:_:)(a1, a2, a3, a4, a5);
}

uint64_t partial apply for specialized implicit closure #6 in implicit closure #5 in AnySlotTemplating.init<A>(delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t))
{
  return CallRecordToCallBackSlotTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:_:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t OUTLINED_FUNCTION_1_115(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10, long long a11, char a12)
{
  long long v14 = a10;
  a1[1] = a9;
  a1[2] = v14;
  a1[3] = a11;
  return outlined init with copy of Result<TemplatingResult, Error>((uint64_t)&a12, (uint64_t)&a9, v12);
}

double OUTLINED_FUNCTION_3_113(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10, long long a11)
{
  a1[1] = a9;
  a1[2] = a10;
  double result = *(double *)&a11;
  a1[3] = a11;
  return result;
}

double OUTLINED_FUNCTION_4_109(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10, long long a11)
{
  a1[1] = a9;
  a1[2] = a10;
  double result = *(double *)&a11;
  a1[3] = a11;
  return result;
}

uint64_t OUTLINED_FUNCTION_7_91(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a8;
}

__n128 OUTLINED_FUNCTION_8_102(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10, __n128 a11)
{
  a1[1] = a9;
  a1[2] = a10;
  __n128 result = a11;
  a1[3] = a11;
  return result;
}

uint64_t OUTLINED_FUNCTION_10_75(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return a5;
}

uint64_t OUTLINED_FUNCTION_12_65(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return outlined init with copy of Result<TemplatingResult, Error>(a1, (uint64_t)&a9, v9);
}

uint64_t OUTLINED_FUNCTION_14_54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10, long long a11, uint64_t a12, char a13)
{
  long long v14 = a10;
  *(_OWORD *)(a1 + 16) = a9;
  *(_OWORD *)(a1 + 32) = v14;
  *(_OWORD *)(a1 + 48) = a11;
  *(void *)(a1 + 64) = a12;
  return outlined init with copy of RecipientSlotTemplating((uint64_t)&a13, (uint64_t)&a9);
}

void *OUTLINED_FUNCTION_16_63(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = (void *)(a1 + 16);
  return memcpy(v10, &a9, 0x68uLL);
}

uint64_t OUTLINED_FUNCTION_19_47(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return partial apply for specialized implicit closure #6 in implicit closure #5 in AnySlotTemplating.init<A>(delegate:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t OUTLINED_FUNCTION_31_41()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_32_32(float a1)
{
  *uint64_t v1 = a1;
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000005ALL, (v2 - 32) | 0x8000000000000000, (uint64_t *)(v3 - 200));
}

uint64_t OUTLINED_FUNCTION_33_32()
{
  return *(void *)(v0 - 288);
}

uint64_t OUTLINED_FUNCTION_35_38()
{
  return specialized StartAudioCallCatTemplatingService.init(sharedGlobals:catFamily:displayTextCats:phoneCallCommonCats:appInfoBuilder:)(v4, v3, v2, v1, v7, v0, v5, v6);
}

uint64_t OUTLINED_FUNCTION_43_32(_OWORD *a1, long long a2, long long a3, long long a4, ...)
{
  va_start(va, a4);
  a1[1] = a2;
  a1[2] = a3;
  a1[3] = a4;
  return outlined destroy of SpeakableString?((uint64_t)va, v4);
}

uint64_t OUTLINED_FUNCTION_47_29()
{
  return dispatch thunk of DeviceState.siriLocale.getter();
}

uint64_t OUTLINED_FUNCTION_48_28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return partial apply for specialized implicit closure #6 in implicit closure #5 in AnySlotTemplating.init<A>(delegate:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t OUTLINED_FUNCTION_49_26(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return partial apply for specialized implicit closure #6 in implicit closure #5 in AnySlotTemplating.init<A>(delegate:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t OUTLINED_FUNCTION_50_26(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return partial apply for specialized implicit closure #8 in implicit closure #7 in AnySlotTemplating.init<A>(delegate:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t OUTLINED_FUNCTION_52_24(uint64_t a1)
{
  *(void *)(v1 - 248) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_53_26@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 - 256) = result;
  *(void *)(v2 - 296) += 8;
  return result;
}

uint64_t OUTLINED_FUNCTION_55_24()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_63_16()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t OUTLINED_FUNCTION_69_16()
{
  return *(void *)(v0 - 256);
}

void OUTLINED_FUNCTION_70_11()
{
  *(void *)(v0 - 280) = *(void *)(v0 + 16);
}

uint64_t OUTLINED_FUNCTION_78_10()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_85_11()
{
  return PhonePersonList.__allocating_init(list:)(v0);
}

uint64_t OUTLINED_FUNCTION_87_7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __swift_storeEnumTagSinglePayload(a1, 0, 1, a4);
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_88_8()
{
  return v0;
}

id OUTLINED_FUNCTION_89_11@<X0>(const char **a1@<X8>)
{
  if (v3) {
    a1 = v2;
  }
  uint64_t v5 = *a1;
  return [v1 v5];
}

uint64_t OUTLINED_FUNCTION_90_13()
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 - 264);
  return specialized INPersonContainingIntent.isFirstContactRelatedOrMyself.getter(v2);
}

id OUTLINED_FUNCTION_91_13()
{
  uint64_t v2 = *(void **)(v0 - 272);
  return v2;
}

uint64_t OUTLINED_FUNCTION_92_8(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, 0, 1, a1);
}

uint64_t OUTLINED_FUNCTION_93_12@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 360) = a1;
  return 0;
}

uint64_t OUTLINED_FUNCTION_98_9(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return dispatch thunk of DeviceState.siriLocale.getter();
}

uint64_t OUTLINED_FUNCTION_99_10(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v1;
}

uint64_t OUTLINED_FUNCTION_101_9()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_111_7(uint64_t a1, uint64_t a2)
{
  return specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, a2, v2);
}

uint64_t OUTLINED_FUNCTION_112_3()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_113_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_114_4()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_115_4()
{
  return swift_bridgeObjectRelease_n();
}

unint64_t SharedConfirmationRepromptContext.PromptType.description.getter()
{
  return 0xD000000000000016;
}

unint64_t SharedConfirmationRepromptContext.PromptType.rawValue.getter()
{
  return 0xD000000000000015;
}

BOOL SharedConfirmationRepromptContext.PromptType.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SharedConfirmationRepromptContext.PromptType.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  return v3 != 0;
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance SharedConfirmationRepromptContext.PromptType@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = SharedConfirmationRepromptContext.PromptType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SharedConfirmationRepromptContext.PromptType@<X0>(void *a1@<X8>)
{
  unint64_t result = SharedConfirmationRepromptContext.PromptType.rawValue.getter();
  *a1 = 0xD000000000000015;
  a1[1] = v3;
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance SharedConfirmationRepromptContext.PromptType()
{
  return 0xD000000000000016;
}

uint64_t SharedConfirmationRepromptContext.registerPrompt(type:)()
{
  uint64_t v1 = v0;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.siriPhone);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (_DWORD *)swift_slowAlloc();
    v26[0] = swift_slowAlloc();
    _DWORD *v5 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000016, 0x800000000049DA50, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_22_6(&dword_0, v6, v7, "#SharedConfirmationRepromptContext registering prompt type %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }

  uint64_t v8 = (uint64_t *)(v1 + 16);
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0x8000000000000000;
  uint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)();
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v16 = v11;
  char v17 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<SharedConfirmationRepromptContext.PromptType, Int>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v15))
  {
LABEL_9:
    *uint64_t v8 = v10;
    swift_bridgeObjectRelease();
    uint64_t v20 = *v8;
    if ((v17 & 1) == 0) {
      specialized _NativeDictionary._insert(at:key:value:)(v16, 0, *v8);
    }
    uint64_t v21 = *(void *)(v20 + 56);
    uint64_t v22 = *(void *)(v21 + 8 * v16);
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (!v23)
    {
      *(void *)(v21 + 8 * v16) = v24;
      return swift_endAccess();
    }
    goto LABEL_14;
  }
  uint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)();
  if ((v17 & 1) == (v19 & 1))
  {
    unint64_t v16 = v18;
    goto LABEL_9;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

BOOL SharedConfirmationRepromptContext.hasPrompted(for:times:)(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 16);
  if (*(void *)(v3 + 16))
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)();
    if (v5) {
      uint64_t v6 = *(void *)(*(void *)(v3 + 56) + 8 * v4);
    }
    else {
      uint64_t v6 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = 0;
  }
  return v6 >= a1;
}

uint64_t SharedConfirmationRepromptContext.reset(type:)()
{
  uint64_t result = swift_beginAccess();
  if (*(void *)(*(void *)(v0 + 16) + 16))
  {
    swift_bridgeObjectRetain();
    specialized __RawDictionaryStorage.find<A>(_:)();
    char v3 = v2;
    uint64_t result = swift_bridgeObjectRelease();
    if (v3)
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v4 = type metadata accessor for Logger();
      __swift_project_value_buffer(v4, (uint64_t)static Logger.siriPhone);
      char v5 = Logger.logObject.getter();
      os_log_type_t v6 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v5, v6))
      {
        uint64_t v7 = (_DWORD *)swift_slowAlloc();
        v10[0] = swift_slowAlloc();
        _DWORD *v7 = 136315138;
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000016, 0x800000000049DA50, v10);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_22_6(&dword_0, v8, v9, "#SharedConfirmationRepromptContext resetting prompt type %s");
        swift_arrayDestroy();
        OUTLINED_FUNCTION_6();
        OUTLINED_FUNCTION_6();
      }

      swift_beginAccess();
      specialized Dictionary._Variant.removeValue(forKey:)();
      return swift_endAccess();
    }
  }
  return result;
}

uint64_t SharedConfirmationRepromptContext.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  lazy protocol witness table accessor for type SharedConfirmationRepromptContext.PromptType and conformance SharedConfirmationRepromptContext.PromptType();
  *(void *)(v0 + 16) = Dictionary.init(dictionaryLiteral:)();
  return v0;
}

uint64_t SharedConfirmationRepromptContext.init()()
{
  lazy protocol witness table accessor for type SharedConfirmationRepromptContext.PromptType and conformance SharedConfirmationRepromptContext.PromptType();
  *(void *)(v0 + 16) = Dictionary.init(dictionaryLiteral:)();
  return v0;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    OUTLINED_FUNCTION_4_110();
    Swift::Int v12 = *(void *)(v11 + 24);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v12);
    swift_bridgeObjectRelease();
    outlined init with take of Any((_OWORD *)(*(void *)(v14 + 56) + 32 * v8), a3);
    _NativeDictionary._delete(at:)();
    *uint64_t v4 = v14;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1)
{
  char v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  OUTLINED_FUNCTION_4_110();
  Swift::Int v8 = *(void *)(v7 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<UUID, CallStateOneTimeTask>);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v8);
  uint64_t v9 = *(void *)(v13 + 48);
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9 + *(void *)(*(void *)(v10 - 8) + 72) * v4, v10);
  uint64_t v11 = *(void *)(*(void *)(v13 + 56) + 8 * v4);
  type metadata accessor for CallStateOneTimeTask();
  lazy protocol witness table accessor for type UUID and conformance UUID();
  _NativeDictionary._delete(at:)();
  *char v2 = v13;
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)()
{
  uint64_t v1 = v0;
  swift_bridgeObjectRetain();
  uint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)();
  char v4 = v3;
  swift_bridgeObjectRelease();
  if ((v4 & 1) == 0) {
    return 0;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *v0;
  uint64_t v6 = *v0;
  *uint64_t v0 = 0x8000000000000000;
  Swift::Int v7 = *(void *)(v6 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<SharedConfirmationRepromptContext.PromptType, Int>);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v7);
  uint64_t v8 = *(void *)(*(void *)(v10 + 56) + 8 * v2);
  lazy protocol witness table accessor for type SharedConfirmationRepromptContext.PromptType and conformance SharedConfirmationRepromptContext.PromptType();
  _NativeDictionary._delete(at:)();
  *uint64_t v1 = v10;
  swift_bridgeObjectRelease();
  return v8;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result = OUTLINED_FUNCTION_2_130(a1, a2, a3, a4);
  if (v7) {
    __break(1u);
  }
  else {
    *(void *)(v5 + 16) = v6;
  }
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = OUTLINED_FUNCTION_0_72(a1, a2, a3, a4, a5);
  unint64_t result = outlined init with take of Any(v8, (_OWORD *)(v7 + 32 * v6));
  uint64_t v10 = *(void *)(a5 + 16);
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    *(void *)(a5 + 16) = v12;
  }
  return result;
}

void specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  OUTLINED_FUNCTION_1_116(a1, a2, a3, a4);
  uint64_t v8 = type metadata accessor for ContactResolverConfigHashable();
  outlined init with take of ContactResolverConfigHashable(v5, v7 + *(void *)(*(void *)(v8 - 8) + 72) * v6);
  OUTLINED_FUNCTION_5_83();
  if (v10) {
    __break(1u);
  }
  else {
    *(void *)(v4 + 16) = v9;
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  OUTLINED_FUNCTION_1_116(a1, a2, a3, a4);
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v7 + *(void *)(*(void *)(v8 - 8) + 72) * v6, v5, v8);
  OUTLINED_FUNCTION_5_83();
  if (v10) {
    __break(1u);
  }
  else {
    *(void *)(v4 + 16) = v9;
  }
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t result = OUTLINED_FUNCTION_0_72(a1, a2, a3, a4, a5);
  uint64_t v8 = (_OWORD *)(v7 + 48 * result);
  long long v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  v8[2] = v9[2];
  uint64_t v11 = *(void *)(v6 + 16);
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    *(void *)(v6 + 16) = v13;
  }
  return result;
}

{
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  unint64_t result = OUTLINED_FUNCTION_0_72(a1, a2, a3, a4, a5);
  *(void *)(v8 + 8 * result) = v7;
  uint64_t v9 = *(void *)(v6 + 16);
  long long v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    *(void *)(v6 + 16) = v11;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 8 * (result >> 6) + 64) |= 1 << result;
  *(void *)(*(void *)(a3 + 56) + 8 * result) = a2;
  uint64_t v3 = *(void *)(a3 + 16);
  BOOL v4 = __OFADD__(v3, 1);
  uint64_t v5 = v3 + 1;
  if (v4) {
    __break(1u);
  }
  else {
    *(void *)(a3 + 16) = v5;
  }
  return result;
}

uint64_t type metadata accessor for SharedConfirmationRepromptContext()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for SharedConfirmationRepromptContext.PromptType(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x449AC0);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SharedConfirmationRepromptContext.PromptType()
{
  return &type metadata for SharedConfirmationRepromptContext.PromptType;
}

unint64_t OUTLINED_FUNCTION_0_72(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a5 + 8 * (result >> 6) + 64) |= 1 << result;
  uint64_t v5 = (void *)(*(void *)(a5 + 48) + 16 * result);
  void *v5 = a2;
  v5[1] = a3;
  return result;
}

uint64_t OUTLINED_FUNCTION_1_116(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a4 + 8 * (a1 >> 6) + 64) |= 1 << a1;
  return 0;
}

unint64_t OUTLINED_FUNCTION_2_130(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a4 + 8 * (result >> 6) + 64) |= 1 << result;
  *(void *)(*(void *)(a4 + 48) + 8 * result) = a2;
  *(void *)(*(void *)(a4 + 56) + 8 * result) = a3;
  return result;
}

void OUTLINED_FUNCTION_4_110()
{
  *uint64_t v0 = 0x8000000000000000;
}

uint64_t static ConfirmationViewUtils.makeYesNoConfirmationView(labelTemplatesProvider:sharedGlobals:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 216) = a1;
  *(void *)(v2 + 224) = a2;
  return _swift_task_switch(static ConfirmationViewUtils.makeYesNoConfirmationView(labelTemplatesProvider:sharedGlobals:), 0, 0);
}

uint64_t static ConfirmationViewUtils.makeYesNoConfirmationView(labelTemplatesProvider:sharedGlobals:)()
{
  uint64_t v1 = *(void **)(v0 + 216);
  uint64_t v3 = v1[3];
  uint64_t v2 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  unsigned int v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 232) = v4;
  *unsigned int v4 = v0;
  v4[1] = static ConfirmationViewUtils.makeYesNoConfirmationView(labelTemplatesProvider:sharedGlobals:);
  return LabelTemplatesProviding.yesAndNo()(v3, v2);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;

  uint64_t v1 = *(void **)(v0 + 224);
  static ConfirmationViewTemplate.makeDefaultConfirmationViewTemplate(labels:sharedGlobals:)(*(void *)(v0 + 264), *(void *)(v0 + 256), *(void *)(v0 + 248), *(void *)(v0 + 240), v1, v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with copy of SignalProviding((uint64_t)v1, v0 + 176);
  type metadata accessor for ConfirmationViewBuilder();
  uint64_t v2 = swift_allocObject();
  *(void *)(v0 + 272) = v2;
  memcpy((void *)(v2 + 16), (const void *)(v0 + 16), 0xA0uLL);
  outlined init with take of AppSelectionSignalComponent((long long *)(v0 + 176), v2 + 176);
  outlined retain of ConfirmationViewTemplate(v0 + 16);
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized IdiomSensitiveViewBuilding.makeViews(utteranceViews:)
                                       + async function pointer to specialized IdiomSensitiveViewBuilding.makeViews(utteranceViews:));
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 280) = v3;
  *uint64_t v3 = v0;
  v3[1] = static ConfirmationViewUtils.makeYesNoConfirmationView(labelTemplatesProvider:sharedGlobals:);
  return v5((uint64_t)_swiftEmptyArrayStorage);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_1_0();
  outlined release of ConfirmationViewTemplate(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 296);
  return v1(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  swift_release();
  outlined release of ConfirmationViewTemplate(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t static ConfirmationViewUtils.makeYesNoConfirmationView(labelTemplatesProvider:sharedGlobals:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  OUTLINED_FUNCTION_0_1();
  uint64_t v11 = v10;
  OUTLINED_FUNCTION_5_7();
  *BOOL v12 = v11;
  uint64_t v13 = *v5;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v14 = v13;
  swift_task_dealloc();
  if (v4)
  {
    Swift::Int v15 = *(uint64_t (**)(void))(v13 + 8);
    return v15();
  }
  else
  {
    v11[30] = a4;
    v11[31] = a3;
    v11[32] = a2;
    v11[33] = a1;
    return _swift_task_switch(static ConfirmationViewUtils.makeYesNoConfirmationView(labelTemplatesProvider:sharedGlobals:), 0, 0);
  }
}

uint64_t static ConfirmationViewUtils.makeYesNoConfirmationView(labelTemplatesProvider:sharedGlobals:)(uint64_t a1)
{
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v8 = v7;
  *(void *)(v5 + 288) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v9 = static ConfirmationViewUtils.makeYesNoConfirmationView(labelTemplatesProvider:sharedGlobals:);
  }
  else
  {
    swift_release();
    *(void *)(v5 + 296) = a1;
    uint64_t v9 = static ConfirmationViewUtils.makeYesNoConfirmationView(labelTemplatesProvider:sharedGlobals:);
  }
  return _swift_task_switch(v9, 0, 0);
}

uint64_t outlined retain of ConfirmationViewTemplate(uint64_t a1)
{
  return a1;
}

uint64_t specialized IdiomSensitiveViewBuilding.makeViews(utteranceViews:)(uint64_t a1)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 16) = v1;
  return _swift_task_switch(specialized IdiomSensitiveViewBuilding.makeViews(utteranceViews:), 0, 0);
}

uint64_t specialized IdiomSensitiveViewBuilding.makeViews(utteranceViews:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = v12[4];
  uint64_t v14 = swift_task_alloc();
  v12[5] = v14;
  *(void *)(v14 + 16) = v12 + 2;
  *(void *)(v14 + 24) = v13;
  Swift::Int v15 = (void *)swift_task_alloc();
  v12[6] = v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SAAceView]);
  *Swift::Int v15 = v12;
  v15[1] = specialized IdiomSensitiveViewBuilding.makeViews(utteranceViews:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v12 + 3, 0, 0, 0xD00000000000001ALL, 0x800000000049BC40, partial apply for specialized closure #1 in IdiomSensitiveViewBuilding.makeViews(utteranceViews:), v14, v16, a9, a10, a11, a12);
}

uint64_t specialized IdiomSensitiveViewBuilding.makeViews(utteranceViews:)()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = specialized IdiomSensitiveViewBuilding.makeViews(utteranceViews:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v7 = specialized IdiomSensitiveViewBuilding.makeViews(utteranceViews:);
  }
  return _swift_task_switch(v7, 0, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 24));
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

ValueMetadata *type metadata accessor for ConfirmationViewUtils()
{
  return &type metadata for ConfirmationViewUtils;
}

uint64_t specialized closure #1 in IdiomSensitiveViewBuilding.makeViews(utteranceViews:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[SAAceView], Error>);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  unint64_t v8 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v9 + v8, (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:_:)(a3, (uint64_t)partial apply for closure #1 in closure #1 in UnsupportedFaceTimeOutputProvider.makeLegacyUnsupportedResponse(), v9);
  return swift_release();
}

uint64_t specialized closure #1 in IdiomSensitiveViewBuilding.makeViews(utteranceViews:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return specialized closure #1 in IdiomSensitiveViewBuilding.makeViews(utteranceViews:)(a1, *a2, a3);
}

uint64_t partial apply for specialized closure #1 in IdiomSensitiveViewBuilding.makeViews(utteranceViews:)(uint64_t a1)
{
  return specialized closure #1 in IdiomSensitiveViewBuilding.makeViews(utteranceViews:)(a1, *(uint64_t **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_44A620()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[SAAceView], Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void *static PicsDisambiguationBuilder.makeMixedRichCardSectionDisambiguationSnippetPhone(disambiguationItems:deviceIsLocked:sharedGlobals:persons:imageSize:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  type metadata accessor for SiriKitDisambiguationItem();
  unint64_t v7 = dispatch thunk of static SiriKitDisambiguationItem.allowedItems(disambiguationItems:deviceLockedForDisambiguation:)();
  static PicsDisambiguationBuilder.mixedCardSectionsFromDetailedSelectionItems(disambiguationItems:deviceIsLocked:sharedGlobals:persons:imageSize:)(v7, a2, a3, a4);
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for SACardSnippet);
  long long v10 = (void *)static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:)();
  swift_bridgeObjectRelease();
  outlined bridged method (mbnn) of @objc SACardSnippet.referencedCommands.setter(v9, v10);
  return v10;
}

void _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySo8INPersonCGSay11SiriKitFlow0gH18DisambiguationItemCGG_So13SFCardSectionCs5NeverOTg505_sSo8f3C11gh9Flow0bC18jk5CSo13lm17CIgggo_AB_AEtAGs5N11OIegnrzr_TRAimQIgggo_Tf1cn_n(unint64_t a1, unint64_t a2, void (*a3)(void *, uint64_t))
{
  unint64_t v21 = a1 >> 62;
  if (a1 >> 62) {
    goto LABEL_63;
  }
  uint64_t v5 = *(void **)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  while (1)
  {
    unint64_t v25 = a2 >> 62;
    if (a2 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v6 = *(void *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFFF8));
    }
    if (v6 >= (uint64_t)v5) {
      uint64_t v7 = (uint64_t)v5;
    }
    else {
      uint64_t v7 = v6;
    }
    specialized ContiguousArray.reserveCapacity(_:)();
    if (v7 < 0)
    {
      __break(1u);
LABEL_66:

      __break(1u);
      return;
    }
    if (!v7) {
      break;
    }
    if (v21)
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v22 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    unint64_t v10 = 0;
    unint64_t v26 = a1 & 0xC000000000000001;
    uint64_t v9 = a2 & 0xFFFFFFFFFFFFFF8;
    unint64_t v24 = a2 & 0xC000000000000001;
    while (v7 != v10)
    {
      if (v22 == v10) {
        goto LABEL_55;
      }
      if (v26)
      {
        id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v10 >= *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8))) {
          goto LABEL_62;
        }
        id v11 = *(id *)(a1 + 8 * v10 + 32);
      }
      uint64_t v5 = v11;
      if (v25)
      {
        swift_bridgeObjectRetain();
        uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v12 = *(void *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFFF8));
      }
      if (v10 == v12) {
        goto LABEL_66;
      }
      if (v24)
      {
        uint64_t v13 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v10 >= *(void *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFFF8))) {
          goto LABEL_56;
        }
        uint64_t v13 = *(void *)(a2 + 8 * v10 + 32);
        swift_retain();
      }
      ++v10;
      a3(v5, v13);
      swift_release();

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v7 == v10)
      {
        uint64_t v8 = a1 & 0xFFFFFFFFFFFFFF8;
        goto LABEL_31;
      }
    }
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    swift_bridgeObjectRetain();
    uint64_t v5 = (void *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  uint64_t v8 = a1 & 0xFFFFFFFFFFFFFF8;
  unint64_t v26 = a1 & 0xC000000000000001;
  uint64_t v9 = a2 & 0xFFFFFFFFFFFFFF8;
  unint64_t v24 = a2 & 0xC000000000000001;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_31:
  for (uint64_t i = v7 + 4; ; ++i)
  {
    if (v21)
    {
      swift_bridgeObjectRetain();
      uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v15 = *(void *)(v8 + 16);
    }
    unint64_t v16 = i - 4;
    if (i - 4 == v15)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    if (v26)
    {
      id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if ((v16 & 0x8000000000000000) != 0) {
        goto LABEL_57;
      }
      if (v16 >= *(void *)(v8 + 16)) {
        goto LABEL_58;
      }
      id v17 = *(id *)(a1 + 8 * i);
    }
    uint64_t v18 = v17;
    if (__OFADD__(v16, 1)) {
      goto LABEL_59;
    }
    if (v25)
    {
      swift_bridgeObjectRetain();
      uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v19 = *(void *)(v9 + 16);
    }
    if (v16 == v19) {
      break;
    }
    if (v24)
    {
      uint64_t v20 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if ((v16 & 0x8000000000000000) != 0) {
        goto LABEL_60;
      }
      if (v16 >= *(void *)(v9 + 16)) {
        goto LABEL_61;
      }
      uint64_t v20 = *(void *)(a2 + 8 * i);
      swift_retain();
    }
    a3(v18, v20);
    swift_release();

    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

unint64_t static PicsDisambiguationBuilder.mixedCardSectionsFromDetailedSelectionItems(disambiguationItems:deviceIsLocked:sharedGlobals:persons:imageSize:)(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySo8INPersonCGSay11SiriKitFlow0gH18DisambiguationItemCGG_So13SFCardSectionCs5NeverOTg505_sSo8f3C11gh9Flow0bC18jk5CSo13lm17CIgggo_AB_AEtAGs5N11OIegnrzr_TRAimQIgggo_Tf1cn_n(a4, a1, (void (*)(void *, uint64_t))partial apply for closure #1 in static PicsDisambiguationBuilder.mixedCardSectionsFromDetailedSelectionItems(disambiguationItems:deviceIsLocked:sharedGlobals:persons:imageSize:));
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!(v7 >> 62))
  {
    uint64_t v8 = *(void *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    return v7;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  if (!v8) {
    goto LABEL_8;
  }
LABEL_3:
  BOOL v9 = __OFSUB__(v8, 1);
  uint64_t v10 = v8 - 1;
  if (v9)
  {
    __break(1u);
    goto LABEL_11;
  }
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v10, (v7 & 0xC000000000000001) == 0, v7);
  if ((v7 & 0xC000000000000001) != 0)
  {
LABEL_11:
    id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_6;
  }
  id v11 = *(id *)(v7 + 8 * v10 + 32);
LABEL_6:
  uint64_t v12 = v11;
  swift_bridgeObjectRelease();
  [v12 setSeparatorStyle:1];

  return v7;
}

id closure #1 in static PicsDisambiguationBuilder.mixedCardSectionsFromDetailedSelectionItems(disambiguationItems:deviceIsLocked:sharedGlobals:persons:imageSize:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  if (dispatch thunk of SiriKitDisambiguationItem.getFirstComponent()())
  {
    dispatch thunk of SiriKitDisambiguationItemComponent.toDisplayString(deviceLocked:)();
    swift_release();
  }
  if (dispatch thunk of SiriKitDisambiguationItem.getFirstComponent()())
  {
    char v7 = SiriKitDisambiguationItemComponent.printBlue.getter();
    swift_release();
  }
  else
  {
    char v7 = 0;
  }
  uint64_t v22 = a1;
  if (dispatch thunk of SiriKitDisambiguationItem.getSecondComponent()())
  {
    dispatch thunk of SiriKitDisambiguationItemComponent.toDisplayString(deviceLocked:)();
    swift_release();
  }
  if (dispatch thunk of SiriKitDisambiguationItem.getThirdComponent()())
  {
    dispatch thunk of SiriKitDisambiguationItemComponent.toDisplayString(deviceLocked:)();
    swift_release();
  }
  SiriKitDisambiguationItem.monogramLetters.getter();
  SiriKitDisambiguationItem.contactIdentifiers.getter();
  uint64_t v8 = (void *)SiriKitDisambiguationItem.displayImage.getter();
  int v9 = v7 & 1;
  uint64_t v10 = (void *)static CasinoFactory.makeRowCardSection(possibleTitle:imageSize:possibleLeadingSubtitle:possibleTrailingSubtitle:possibleImage:possibleMonogramLetters:possibleContactIdentifiers:possibleImageUri:maxLines:shouldCropToCircle:withBlueTitle:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  id v11 = v10;
  if (INPerson.isProvidedByPlus.getter())
  {
    static PicsDisambiguationBuilder.tryToAttachPicsSubtitle(person:cardSection:needsBlueTitle:maxLines:sharedGlobals:)(v22, v11, v9, 1, a5);
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.siriPhone);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_0, v13, v14, "#DefaultDisambiguationBuilder current person isn't provided by PLUS use regular SFCardSection", v15, 2u);
      swift_slowDealloc();
    }
  }
  uint64_t v16 = SiriKitDisambiguationItem.directInvocation.getter();
  if (v16)
  {
    id v17 = (void *)v16;
    static Device.current.getter();
    static PicsDisambiguationBuilder.makeStartRequestFromDirectInvocation(directInvocationPayload:deviceState:)((uint64_t)v17, v23);

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_46A030;
    swift_unknownObjectRetain();
    *(void *)(v18 + 32) = static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();
    v23[0] = v18;
    specialized Array._endMutation()();
    outlined bridged method (mbnn) of @objc SFCardSection.commands.setter(v23[0], v11);

    swift_unknownObjectRetain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(void *)((char *)&dword_10
                                                                                + (*a6 & 0xFFFFFFFFFFFFFF8)));
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_unknownObjectRelease_n();
  }
  else
  {
  }
  return v11;
}

void static PicsDisambiguationBuilder.tryToAttachPicsSubtitle(person:cardSection:needsBlueTitle:maxLines:sharedGlobals:)(void *a1, void *a2, int a3, uint64_t a4, void *a5)
{
  uint64_t v10 = type metadata accessor for Locale();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  self;
  uint64_t v14 = swift_dynamicCastObjCClass();
  uint64_t v15 = (void *)&unk_583000;
  uint64_t v16 = (void *)&unk_469000;
  if (v14)
  {
    id v17 = (void *)v14;
    v47[1] = a3;
    uint64_t v48 = a4;
    uint64_t v50 = a1;
    uint64_t v18 = a5[3];
    uint64_t v19 = a5[4];
    __swift_project_boxed_opaque_existential_1(a5, v18);
    uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t))(v19 + 176);
    id v49 = a2;
    unint64_t v21 = (void *)v20(v18, v19);
    type metadata accessor for PhoneCallFlowDelegatePlugin();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v23 = [self bundleForClass:ObjCClassFromMetadata];
    static Locale.current.getter();
    uint64_t v24 = Locale.identifier.getter();
    uint64_t v26 = v25;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    unint64_t v55 = v24;
    uint64_t v56 = v26;
    uint64_t v53 = 45;
    unint64_t v54 = 0xE100000000000000;
    uint64_t v51 = 95;
    unint64_t v52 = 0xE100000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v27 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    uint64_t v29 = v28;
    swift_bridgeObjectRelease();
    outlined bridged method (mbbnbnb) of @objc AFLocalization.localizedString(forKey:table:bundle:languageCode:)(0xD000000000000011, 0x8000000000493B90, 1396918608, 0xE400000000000000, (uint64_t)v23, v27, v29, v21);
    uint64_t v31 = v30;

    a1 = v50;
    uint64_t v16 = &unk_469000;
    if (v31)
    {
      uint64_t v32 = (void *)static CasinoFactory.makeRichText(text:bold:maxLines:textColor:)();
      swift_bridgeObjectRelease();
      [v17 setLeadingSubtitle:v32];

      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v33 = type metadata accessor for Logger();
      __swift_project_value_buffer(v33, (uint64_t)static Logger.siriPhone);
      uint64_t v34 = a1;
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v35, v36))
      {
        uint64_t v37 = (uint8_t *)swift_slowAlloc();
        uint64_t v38 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v37 = 138412290;
        unint64_t v55 = v34;
        uint64_t v39 = v34;
        a1 = v50;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v38 = v34;

        _os_log_impl(&dword_0, v35, v36, "#DefaultDisambiguationBuilder use PICS row section for person: %@ ", v37, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v35 = v34;
      }
    }
    uint64_t v15 = &unk_583000;
  }
  if (v15[466] != -1) {
    swift_once();
  }
  uint64_t v40 = type metadata accessor for Logger();
  __swift_project_value_buffer(v40, (uint64_t)static Logger.siriPhone);
  unint64_t v41 = a1;
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v42, v43))
  {
    unint64_t v44 = (uint8_t *)swift_slowAlloc();
    uint64_t v45 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v44 = v16[363];
    unint64_t v55 = v41;
    uint64_t v46 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v45 = v41;

    _os_log_impl(&dword_0, v42, v43, "#DefaultDisambiguationBuilder find PLUS flag but can't generate PICS row section for person:%@ ", v44, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v42 = v41;
  }
}

id static PicsDisambiguationBuilder.makeStartRequestFromDirectInvocation(directInvocationPayload:deviceState:)(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for InputOrigin();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  uint64_t v8 = (void *)DeviceState.asInvocationContext.getter();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for InputOrigin.dialogButtonTap(_:), v4);
  InputOrigin.aceInputOrigin.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v8 setInputOrigin:v9];

  uint64_t v10 = self;
  id v11 = [v10 runSiriKitExecutorCommandWithContext:v8 payload:a1];
  id v12 = [v10 wrapCommandInStartLocalRequest:v11];

  return v12;
}

void outlined bridged method (mbnn) of @objc SACardSnippet.referencedCommands.setter(uint64_t a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a2 setReferencedCommands:isa];
}

ValueMetadata *type metadata accessor for PicsDisambiguationBuilder()
{
  return &type metadata for PicsDisambiguationBuilder;
}

id partial apply for closure #1 in static PicsDisambiguationBuilder.mixedCardSectionsFromDetailedSelectionItems(disambiguationItems:deviceIsLocked:sharedGlobals:persons:imageSize:)(void *a1, uint64_t a2)
{
  return closure #1 in static PicsDisambiguationBuilder.mixedCardSectionsFromDetailedSelectionItems(disambiguationItems:deviceIsLocked:sharedGlobals:persons:imageSize:)(a1, a2, *(unsigned __int8 *)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32), *(void **)(v2 + 40));
}

void outlined bridged method (mbnn) of @objc SFCardSection.commands.setter(uint64_t a1, void *a2)
{
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for SFAbstractCommand);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a2 setCommands:isa];
}

void *CallStateProvider.instance.unsafeMutableAddressor()
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  return static CallStateProvider.instance;
}

uint64_t specialized CallStateProvider.onCallCenterQueue<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *v2;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for TUCallCenter);
  id v6 = v8;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TUCall?);
  SPHCallCenter.onQueue<A>(_:)();
  swift_release();

  return v9;
}

{
  void **v2;
  uint64_t v5;
  id v6;
  void *v8;
  uint64_t v9;

  uint64_t v8 = *v2;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for TUCallCenter);
  id v6 = v8;
  swift_retain();
  SPHCallCenter.onQueue<A>(_:)();
  swift_release();

  return v9;
}

void CallStateProvider.onCallCenterQueue<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *v3;
  char v7 = (void *)swift_allocObject();
  v7[2] = a3;
  v7[3] = a1;
  v7[4] = a2;
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for TUCallCenter);
  id v8 = v9;
  swift_retain();
  SPHCallCenter.onQueue<A>(_:)();
  swift_release();
}

uint64_t CallStateProvider.init()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v6);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v7 - 8);
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  static DispatchQoS.unspecified.getter();
  v11[1] = &_swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v2);
  id v8 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  id v9 = [objc_allocWithZone((Class)TUCallCenter) initWithQueue:v8];

  *a1 = v9;
  a1[4] = &type metadata for SPHTUBackedCallCapabilities;
  a1[5] = &protocol witness table for SPHTUBackedCallCapabilities;
  uint64_t result = type metadata accessor for SPHCallHandleFormatter();
  a1[6] = result;
  a1[7] = &protocol witness table for SPHCallHandleFormatter;
  return result;
}

uint64_t static CallStateProvider.instance.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }

  return outlined init with copy of CallStateProvider((uint64_t)static CallStateProvider.instance, a1);
}

uint64_t CallStateProvider.afCallStateSnapshot.getter@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.root.getter();
  uint64_t v2 = SiriEnvironment.callState.getter();
  swift_release();
  uint64_t result = type metadata accessor for CallStateEnvironmentProvider();
  a1[3] = result;
  a1[4] = (uint64_t)&protocol witness table for CallStateEnvironmentProvider;
  *a1 = v2;
  return result;
}

uint64_t CallStateProvider.currentCall.getter()
{
  return specialized CallStateProvider.onCallCenterQueue<A>(_:)((uint64_t)closure #1 in CallStateProvider.currentCall.getter, 0);
}

id closure #1 in CallStateProvider.currentCall.getter@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id result = [a1 frontmostAudioOrVideoCall];
  *a2 = result;
  return result;
}

uint64_t CallStateProvider.currentAudioAndVideoCallCount.getter()
{
  return specialized CallStateProvider.onCallCenterQueue<A>(_:)((uint64_t)closure #1 in CallStateProvider.currentAudioAndVideoCallCount.getter, 0);
}

id closure #1 in CallStateProvider.currentAudioAndVideoCallCount.getter@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id result = [a1 currentAudioAndVideoCallCount];
  *a2 = result;
  return result;
}

uint64_t CallStateProvider.callHandleFormatter.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t sub_44BFB4()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed TUCallCenter) -> (@out A)(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 24))(*a1);
}

uint64_t protocol witness for CallStateProviding.afCallStateSnapshot.getter in conformance CallStateProvider@<X0>(uint64_t *a1@<X8>)
{
  return CallStateProvider.afCallStateSnapshot.getter(a1);
}

uint64_t assignWithCopy for CallStateProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for CallStateProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

ValueMetadata *type metadata accessor for CallStateProvider()
{
  return &type metadata for CallStateProvider;
}

uint64_t sub_44C100()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for specialized thunk for @escaping @callee_guaranteed (@guaranteed TUCallCenter) -> (@out A)(uint64_t a1)
{
  uint64_t v2 = OUTLINED_FUNCTION_0_73(a1);
  uint64_t result = v3(v2);
  *uint64_t v1 = v5;
  return result;
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes()
{
  unint64_t result = lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_73(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t SharedGlobals.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppResolverResult?);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for SiriKitContactResolver();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ReferenceResolutionClient();
  uint64_t v9 = ReferenceResolutionClient.__allocating_init()();
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  memcpy(__dst, &static PhoneCallFeatureFlags.instance, sizeof(__dst));
  type metadata accessor for PhoneCallFeatureManager();
  uint64_t v10 = OUTLINED_FUNCTION_57_1();
  uint64_t v28 = &type metadata for PhoneCallFeatureFlags;
  uint64_t v29 = &protocol witness table for PhoneCallFeatureFlags;
  *(void *)&long long v27 = swift_allocObject();
  memcpy((void *)(v27 + 16), &static PhoneCallFeatureFlags.instance, 0xB0uLL);
  outlined init with take of AppSelectionSignalComponent(&v27, v10 + 16);
  type metadata accessor for NLTransformer();
  uint64_t v11 = swift_allocObject();
  outlined retain of PhoneCallFeatureFlags((uint64_t)__dst);
  *a1 = specialized NLTransformer.init(referenceResolver:featureManager:)(v9, v10, v11);
  uint64_t v12 = type metadata accessor for CallNotificationContextProvider();
  uint64_t v13 = OUTLINED_FUNCTION_15_17();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DictionaryBackedCache<String, CallNotificationContextProvider.CallNotification>);
  OUTLINED_FUNCTION_57_1();
  *(void *)(v13 + 16) = specialized DictionaryBackedCache.init(timeToLiveInSeconds:capacity:nowDateProvider:)(5, (uint64_t)closure #1 in default argument 2 of DictionaryBackedCache.init(timeToLiveInSeconds:capacity:nowDateProvider:), 0, 30.0);
  a1[4] = v12;
  a1[5] = (uint64_t)&protocol witness table for CallNotificationContextProvider;
  a1[1] = v13;
  type metadata accessor for ContactResolverConfigHashable();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ContactQuery]);
  lazy protocol witness table accessor for type ContactResolverConfigHashable and conformance ContactResolverConfigHashable(&lazy protocol witness table cache variable for type ContactResolverConfigHashable and conformance ContactResolverConfigHashable, (void (*)(uint64_t))type metadata accessor for ContactResolverConfigHashable);
  uint64_t v14 = Dictionary.init(minimumCapacity:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ResolvedSiriKitContact]);
  lazy protocol witness table accessor for type [ContactQuery] and conformance <A> [A]();
  uint64_t v15 = Dictionary.init(minimumCapacity:)();
  SiriKitContactResolver.init()();
  uint64_t v16 = type metadata accessor for PhoneContactResolver();
  uint64_t v17 = swift_allocObject();
  uint64_t v28 = (ValueMetadata *)v5;
  uint64_t v29 = &protocol witness table for SiriKitContactResolver;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v27);
  (*(void (**)(uint64_t *, char *, uint64_t))(v6 + 16))(boxed_opaque_existential_1, v8, v5);
  *(void *)(v17 + 16) = v14;
  *(void *)(v17 + 24) = v15;
  outlined init with take of AppSelectionSignalComponent(&v27, v17 + 32);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  a1[9] = v16;
  a1[10] = (uint64_t)&protocol witness table for PhoneContactResolver;
  a1[6] = v17;
  uint64_t v19 = type metadata accessor for AppResolverResult();
  __swift_storeEnumTagSinglePayload((uint64_t)v4, 1, 1, v19);
  type metadata accessor for AppSelectionState();
  uint64_t v20 = OUTLINED_FUNCTION_21_0();
  uint64_t v21 = v20 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17AppSelectionState_forcedDisambiguationShadowPrediction;
  __swift_storeEnumTagSinglePayload(v20 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17AppSelectionState_forcedDisambiguationShadowPrediction, 1, 1, v19);
  swift_beginAccess();
  outlined assign with take of AppResolverResult?((uint64_t)v4, v21);
  swift_endAccess();
  a1[11] = v20;
  id v22 = [self sharedAnalytics];
  id v23 = [v22 defaultMessageStream];

  type metadata accessor for PhoneAppSelectionSignalsGatherer();
  OUTLINED_FUNCTION_21_0();
  a1[12] = PhoneAppSelectionSignalsGatherer.init(messageStream:)((uint64_t)v23);
  type metadata accessor for SharedConfirmationRepromptContext();
  uint64_t v24 = OUTLINED_FUNCTION_15_17();
  lazy protocol witness table accessor for type SharedConfirmationRepromptContext.PromptType and conformance SharedConfirmationRepromptContext.PromptType();
  *(void *)(v24 + 16) = Dictionary.init(dictionaryLiteral:)();
  a1[13] = v24;
  type metadata accessor for SharedNeedsValueContext();
  uint64_t result = OUTLINED_FUNCTION_15_17();
  *(void *)(result + 16) = &_swiftEmptySetSingleton;
  a1[14] = result;
  return result;
}

uint64_t sub_44C69C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 192, 7);
}

uint64_t SharedGlobalsProviding.aceServiceInvokerAsync.getter()
{
  return static AceService.currentAsync.getter();
}

uint64_t SharedGlobalsProviding.outputPublisher.getter@<X0>(uint64_t *a1@<X8>)
{
  static OutputPublisherFactory.makeOutputPublisher()();
  static OutputPublisherFactory.makeOutputPublisherAsync()();
  uint64_t v2 = type metadata accessor for OutputPublisherWrapper();
  uint64_t v3 = swift_allocObject();
  outlined init with take of AppSelectionSignalComponent(&v6, v3 + 16);
  outlined init with take of AppSelectionSignalComponent(&v5, v3 + 56);
  a1[3] = v2;
  a1[4] = lazy protocol witness table accessor for type ContactResolverConfigHashable and conformance ContactResolverConfigHashable(&lazy protocol witness table cache variable for type OutputPublisherWrapper and conformance OutputPublisherWrapper, (void (*)(uint64_t))type metadata accessor for OutputPublisherWrapper);
  uint64_t result = lazy protocol witness table accessor for type ContactResolverConfigHashable and conformance ContactResolverConfigHashable(&lazy protocol witness table cache variable for type OutputPublisherWrapper and conformance OutputPublisherWrapper, (void (*)(uint64_t))type metadata accessor for OutputPublisherWrapper);
  a1[5] = result;
  *a1 = v3;
  return result;
}

uint64_t SharedGlobalsProviding.flowFinder.getter@<X0>(uint64_t *a1@<X8>)
{
  return SharedGlobalsProviding.flowFinder.getter((uint64_t (*)(void))type metadata accessor for FlowFinder, (uint64_t)&protocol witness table for FlowFinder, a1);
}

uint64_t specialized SharedGlobalsProviding.patternFlowProvider.getter@<X0>(uint64_t *a1@<X8>)
{
  SharedGlobalsProviding.outputPublisher.getter(v15);
  uint64_t v2 = v16;
  uint64_t v3 = v17;
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v15, v16);
  v14[3] = v2;
  v14[4] = v3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v14);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v2 - 8) + 16))(boxed_opaque_existential_1, v4, v2);
  uint64_t v6 = type metadata accessor for ResponseFactory();
  swift_allocObject();
  v13[3] = v6;
  v13[4] = &protocol witness table for ResponseFactory;
  v13[0] = ResponseFactory.init()();
  uint64_t v7 = __swift_project_boxed_opaque_existential_1(v13, v6);
  v12[3] = v6;
  v12[4] = (uint64_t)&protocol witness table for ResponseFactory;
  id v8 = __swift_allocate_boxed_opaque_existential_1(v12);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(v8, v7, v6);
  uint64_t v9 = type metadata accessor for PatternFlowProvider();
  swift_allocObject();
  uint64_t v10 = PatternFlowProvider.init(outputPublisher:responseGenerator:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  a1[3] = v9;
  a1[4] = (uint64_t)&protocol witness table for PatternFlowProvider;
  *a1 = v10;
  return result;
}

uint64_t SharedGlobalsProviding.patternFlowProvider.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  (*(void (**)(void *__return_ptr))(a2 + 16))(v20);
  uint64_t v6 = v21;
  uint64_t v7 = v22;
  __swift_project_boxed_opaque_existential_1(v20, v21);
  v19[3] = v6;
  v19[4] = v7;
  __swift_allocate_boxed_opaque_existential_1(v19);
  OUTLINED_FUNCTION_10();
  (*(void (**)(void))(v8 + 16))();
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a2 + 136))(v16, a1, a2);
  uint64_t v9 = v17;
  uint64_t v10 = v18;
  __swift_project_boxed_opaque_existential_1(v16, v17);
  uint64_t v15[3] = v9;
  void v15[4] = *(void *)(v10 + 8);
  __swift_allocate_boxed_opaque_existential_1(v15);
  OUTLINED_FUNCTION_10();
  (*(void (**)(void))(v11 + 16))();
  uint64_t v12 = type metadata accessor for PatternFlowProvider();
  OUTLINED_FUNCTION_21_0();
  uint64_t v13 = PatternFlowProvider.init(outputPublisher:responseGenerator:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  a3[3] = v12;
  a3[4] = (uint64_t)&protocol witness table for PatternFlowProvider;
  *a3 = v13;
  return result;
}

uint64_t specialized SharedGlobalsProviding.responseGenerator.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ResponseFactory();
  swift_allocObject();
  uint64_t result = ResponseFactory.init()();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for ResponseFactory;
  *a1 = result;
  return result;
}

uint64_t SharedGlobalsProviding.responseGenerator.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ResponseFactory();
  OUTLINED_FUNCTION_21_0();
  uint64_t result = ResponseFactory.init()();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for ResponseFactory;
  *a1 = result;
  return result;
}

uint64_t SharedGlobalsProviding.skTransformer.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  a3[3] = a1;
  a3[4] = a2;
  __swift_allocate_boxed_opaque_existential_1(a3);
  OUTLINED_FUNCTION_10();
  uint64_t v4 = *(uint64_t (**)(void))(v3 + 16);

  return v4();
}

void SharedGlobalsProviding.skIntentResolver.getter(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = &type metadata for PhoneIntentResolver;
  *(void *)(a1 + 32) = &protocol witness table for PhoneIntentResolver;
}

uint64_t SharedGlobalsProviding.skFlowFactory.getter@<X0>(uint64_t *a1@<X8>)
{
  return SharedGlobalsProviding.flowFinder.getter((uint64_t (*)(void))type metadata accessor for SiriKitFlowFactory, (uint64_t)&protocol witness table for SiriKitFlowFactory, a1);
}

uint64_t SharedGlobalsProviding.featureManager.getter()
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  memcpy(__dst, &static PhoneCallFeatureFlags.instance, sizeof(__dst));
  type metadata accessor for PhoneCallFeatureManager();
  uint64_t v0 = OUTLINED_FUNCTION_57_1();
  uint64_t v3 = &type metadata for PhoneCallFeatureFlags;
  uint64_t v4 = &protocol witness table for PhoneCallFeatureFlags;
  *(void *)&long long v2 = swift_allocObject();
  memcpy((void *)(v2 + 16), &static PhoneCallFeatureFlags.instance, 0xB0uLL);
  outlined init with take of AppSelectionSignalComponent(&v2, v0 + 16);
  outlined retain of PhoneCallFeatureFlags((uint64_t)__dst);
  return v0;
}

uint64_t specialized SharedGlobalsProviding.annotatedAppFinder.getter@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  memcpy(__dst, &static PhoneCallFeatureFlags.instance, sizeof(__dst));
  type metadata accessor for PhoneCallFeatureManager();
  uint64_t v2 = swift_allocObject();
  uint64_t v7 = &type metadata for PhoneCallFeatureFlags;
  uint64_t v8 = &protocol witness table for PhoneCallFeatureFlags;
  *(void *)&long long v6 = swift_allocObject();
  memcpy((void *)(v6 + 16), &static PhoneCallFeatureFlags.instance, 0xB0uLL);
  outlined init with take of AppSelectionSignalComponent(&v6, v2 + 16);
  outlined retain of PhoneCallFeatureFlags((uint64_t)__dst);
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  uint64_t v3 = static ThirdPartyAnnotatedAppStore.instance;
  a1[3] = &type metadata for AnnotatedAppFinder;
  a1[4] = &protocol witness table for AnnotatedAppFinder;
  uint64_t v4 = (void *)swift_allocObject();
  *a1 = v4;
  v4[8] = type metadata accessor for ThirdPartyAnnotatedAppStore();
  v4[9] = &protocol witness table for ThirdPartyAnnotatedAppStore;
  v4[4] = v2;
  v4[5] = v3;
  v4[2] = AnnotatedAppFinder.isInstalledOnDevice(appBundleId:);
  v4[3] = 0;
  return swift_retain();
}

uint64_t SharedGlobalsProviding.annotatedAppFinder.getter@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  memcpy(__dst, &static PhoneCallFeatureFlags.instance, sizeof(__dst));
  type metadata accessor for PhoneCallFeatureManager();
  uint64_t v2 = OUTLINED_FUNCTION_57_1();
  uint64_t v7 = &type metadata for PhoneCallFeatureFlags;
  uint64_t v8 = &protocol witness table for PhoneCallFeatureFlags;
  *(void *)&long long v6 = swift_allocObject();
  memcpy((void *)(v6 + 16), &static PhoneCallFeatureFlags.instance, 0xB0uLL);
  outlined init with take of AppSelectionSignalComponent(&v6, v2 + 16);
  outlined retain of PhoneCallFeatureFlags((uint64_t)__dst);
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  uint64_t v3 = static ThirdPartyAnnotatedAppStore.instance;
  a1[3] = &type metadata for AnnotatedAppFinder;
  a1[4] = &protocol witness table for AnnotatedAppFinder;
  uint64_t v4 = (void *)swift_allocObject();
  *a1 = v4;
  v4[8] = type metadata accessor for ThirdPartyAnnotatedAppStore();
  v4[9] = &protocol witness table for ThirdPartyAnnotatedAppStore;
  v4[4] = v2;
  v4[5] = v3;
  v4[2] = AnnotatedAppFinder.isInstalledOnDevice(appBundleId:);
  v4[3] = 0;
  return swift_retain();
}

uint64_t SharedGlobalsProviding.appInfoBuilder.getter@<X0>(uint64_t *a1@<X8>)
{
  return SharedGlobalsProviding.flowFinder.getter((uint64_t (*)(void))type metadata accessor for AppInfoBuilder, (uint64_t)&protocol witness table for AppInfoBuilder, a1);
}

id SharedGlobalsProviding.afLocalization.getter()
{
  id result = [self sharedInstance];
  if (!result) {
    __break(1u);
  }
  return result;
}

void SharedGlobalsProviding.assistantProperties.getter(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = &type metadata for AssistantProperties;
  *(void *)(a1 + 32) = &protocol witness table for AssistantProperties;
}

uint64_t specialized SharedGlobalsProviding.userPersonaCollector.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = default argument 0 of AppSelectionUserPersonaCollector.init(userPersonaSignal:)();
  uint64_t v3 = type metadata accessor for AppSelectionUserPersonaCollector();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v2;
  a1[3] = v3;
  a1[4] = (uint64_t)&protocol witness table for AppSelectionUserPersonaCollector;
  *a1 = result;
  return result;
}

uint64_t SharedGlobalsProviding.userPersonaCollector.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = default argument 0 of AppSelectionUserPersonaCollector.init(userPersonaSignal:)();
  uint64_t v3 = type metadata accessor for AppSelectionUserPersonaCollector();
  uint64_t result = OUTLINED_FUNCTION_15_17();
  *(void *)(result + 16) = v2;
  a1[3] = v3;
  a1[4] = (uint64_t)&protocol witness table for AppSelectionUserPersonaCollector;
  *a1 = result;
  return result;
}

uint64_t SharedGlobalsProviding.messageStore.getter@<X0>(uint64_t *a1@<X8>)
{
  return SharedGlobalsProviding.flowFinder.getter((uint64_t (*)(void))type metadata accessor for SiriPhoneMessageStoreController, (uint64_t)&protocol witness table for SiriPhoneMessageStoreController, a1);
}

uint64_t SharedGlobalsProviding.flowFinder.getter@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v5 = a1(0);
  uint64_t result = swift_allocObject();
  a3[3] = v5;
  a3[4] = a2;
  *a3 = result;
  return result;
}

uint64_t SharedGlobalsProviding.referenceResolver.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ReferenceResolutionClient();
  uint64_t result = ReferenceResolutionClient.__allocating_init()();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for ReferenceResolutionClient;
  *a1 = result;
  return result;
}

uint64_t protocol witness for SharedGlobalsProviding.flowFinder.getter in conformance SharedGlobals@<X0>(uint64_t *a1@<X8>)
{
  return specialized SharedGlobalsProviding.flowFinder.getter((uint64_t (*)(void))type metadata accessor for FlowFinder, (uint64_t)&protocol witness table for FlowFinder, a1);
}

uint64_t protocol witness for SharedGlobalsProviding.appInfoBuilder.getter in conformance SharedGlobals@<X0>(uint64_t *a1@<X8>)
{
  return specialized SharedGlobalsProviding.flowFinder.getter((uint64_t (*)(void))type metadata accessor for AppInfoBuilder, (uint64_t)&protocol witness table for AppInfoBuilder, a1);
}

uint64_t protocol witness for SharedGlobalsProviding.messageStore.getter in conformance SharedGlobals@<X0>(uint64_t *a1@<X8>)
{
  return specialized SharedGlobalsProviding.flowFinder.getter((uint64_t (*)(void))type metadata accessor for SiriPhoneMessageStoreController, (uint64_t)&protocol witness table for SiriPhoneMessageStoreController, a1);
}

void *specialized PhoneCallControlNLTransformer.init(cacheProvider:)(uint64_t a1, void *a2)
{
  a2[5] = type metadata accessor for SingleIntentCacheProvider();
  a2[6] = &protocol witness table for SingleIntentCacheProvider;
  a2[2] = a1;
  a2[7] = type metadata accessor for PhoneCallControlNLTransformer();
  a2[8] = &outlined read-only object #0 of specialized PhoneCallControlNLTransformer.init(cacheProvider:);
  a2[9] = 0;
  a2[10] = 0;
  return a2;
}

uint64_t specialized NLTransformer.init(referenceResolver:featureManager:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v24[3] = type metadata accessor for ReferenceResolutionClient();
  v24[4] = &protocol witness table for ReferenceResolutionClient;
  v24[0] = a1;
  *(void *)(a3 + 32) = type metadata accessor for NLTransformer();
  *(void *)(a3 + 40) = &outlined read-only object #0 of specialized NLTransformer.init(referenceResolver:featureManager:);
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = _swiftEmptyArrayStorage;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = xmmword_467740;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.siriPhone);
  swift_retain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    buf = v9;
    uint64_t v10 = a2;
    uint64_t v11 = *(void *)(a3 + 32);
    uint64_t v12 = *(void *)(a3 + 40);
    uint64_t v13 = *(void *)(a3 + 48);
    uint64_t v14 = *(void *)(a3 + 56);
    uint64_t v23 = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v15 = v11;
    a2 = v10;
    DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v15, v12, v13, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v7, v8, "%s is initialized, this function should be only be called once for each makeFlowFor", buf, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  type metadata accessor for NLv4Transformer(0);
  uint64_t v16 = swift_allocObject();
  swift_retain();
  swift_retain();
  *(void *)(a3 + 16) = specialized NLv4Transformer.init(referenceResolver:featureManager:)(a1, a2, v16);
  outlined init with copy of SharedGlobalsProviding((uint64_t)v24, a3 + 120);
  type metadata accessor for SingleIntentCacheProvider();
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_467730;
  type metadata accessor for PhoneCallControlNLTransformer();
  uint64_t v18 = (void *)swift_allocObject();
  uint64_t v19 = specialized PhoneCallControlNLTransformer.init(cacheProvider:)(v17, v18);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  *(void *)(a3 + 24) = v19;
  return a3;
}

uint64_t lazy protocol witness table accessor for type ContactResolverConfigHashable and conformance ContactResolverConfigHashable(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_44D690()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_44D6D0()
{
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 40);

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t destroy for SharedGlobals(uint64_t a1)
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  __swift_destroy_boxed_opaque_existential_1(a1 + 48);
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

void *assignWithCopy for SharedGlobals(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  __swift_assign_boxed_opaque_existential_1(a1 + 1, a2 + 1);
  __swift_assign_boxed_opaque_existential_1(a1 + 6, a2 + 6);
  a1[11] = a2[11];
  swift_retain();
  swift_release();
  a1[12] = a2[12];
  swift_retain();
  swift_release();
  a1[13] = a2[13];
  swift_retain();
  swift_release();
  a1[14] = a2[14];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SharedGlobals(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  __swift_destroy_boxed_opaque_existential_1(a1 + 48);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v5;
  swift_release();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_release();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_release();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for SharedGlobals()
{
  return &type metadata for SharedGlobals;
}

uint64_t sub_44D8F4()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 136, 7);
}

uint64_t specialized NLv4Transformer.init(referenceResolver:featureManager:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<TransformerInput, PhoneCallNLIntent?>);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[3] = type metadata accessor for ReferenceResolutionClient();
  v13[4] = &protocol witness table for ReferenceResolutionClient;
  v13[0] = a1;
  outlined init with copy of SharedGlobalsProviding((uint64_t)v13, (uint64_t)v12);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a2;
  outlined init with take of AppSelectionSignalComponent(v12, v10 + 24);
  type metadata accessor for TransformerInput(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallNLIntent?);
  Transformer.init(transform:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a3 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin15NLv4Transformer_transformer, v9, v6);
  return a3;
}

uint64_t sub_44DAD4()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);

  return _swift_deallocObject(v0, 64, 7);
}

unsigned char *AnnounceVoicemailDirectAction.identifier.unsafeMutableAddressor()
{
  if (one-time initialization token for identifier != -1) {
    swift_once();
  }
  return static AnnounceVoicemailDirectAction.identifier;
}

uint64_t static AnnounceVoicemailDirectAction.identifier.getter()
{
  if (one-time initialization token for identifier != -1) {
    swift_once();
  }
  uint64_t v0 = *(void *)static AnnounceVoicemailDirectAction.identifier;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t AnnounceVoicemailDirectAction.synchronousBurstIndex.getter()
{
  return *(void *)(v0 + 48);
}

void *AnnounceVoicemailDirectAction.__allocating_init(voicemailIdentifier:contactInfo:synchronousBurstIndex:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  OUTLINED_FUNCTION_7_92();
  uint64_t result = (void *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  result[5] = a4;
  result[6] = a5;
  return result;
}

void *AnnounceVoicemailDirectAction.init(voicemailIdentifier:contactInfo:synchronousBurstIndex:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a1;
  void v5[3] = a2;
  v5[4] = a3;
  v5[5] = a4;
  v5[6] = a5;
  return v5;
}

NSObject *AnnounceVoicemailDirectAction.toCallRecord(contactStore:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  __chkstk_darwin(v4 - 8);
  OUTLINED_FUNCTION_4();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = v2[5];
  if (v8)
  {
    uint64_t v9 = v2[4];
    uint64_t v10 = a1[3];
    uint64_t v11 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v10);
    unint64_t v12 = (*(uint64_t (**)(uint64_t, NSObject *, uint64_t, uint64_t))(v11 + 16))(v9, v8, v10, v11);
    unint64_t v33 = v12;
    if (v12)
    {
      unint64_t v34 = v12 >> 62;
      if (v12 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v35)
        {
LABEL_16:
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v33 & 0xC000000000000001) == 0);
          if ((v33 & 0xC000000000000001) != 0) {
            uint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            uint64_t result = *(id *)(v33 + 32);
          }
          uint64_t v8 = result;
          if (v35 < 1)
          {
            __break(1u);
LABEL_37:
            __break(1u);
            goto LABEL_38;
          }
          if (!v34)
          {
            uint64_t v36 = *(void *)((char *)&dword_10 + (v33 & 0xFFFFFFFFFFFFFF8));
            if (v36)
            {
LABEL_24:
              if (v36 >= v35)
              {
                if ((v33 & 0xC000000000000001) != 0 && v35 != 1)
                {
                  type metadata accessor for INPerson();
                  Swift::Int v38 = 1;
                  do
                  {
                    Swift::Int v39 = v38 + 1;
                    _ArrayBuffer._typeCheckSlowPath(_:)(v38);
                    Swift::Int v38 = v39;
                  }
                  while (v35 != v39);
                }
                if (v34)
                {
                  swift_bridgeObjectRetain();
                  uint64_t v40 = _CocoaArrayWrapper.subscript.getter();
                  uint64_t v41 = v44;
                  uint64_t v42 = v45;
                  unint64_t v43 = v46;
                  swift_bridgeObjectRelease_n();
                }
                else
                {
                  uint64_t v40 = v33 & 0xFFFFFFFFFFFFFF8;
                  uint64_t v41 = (v33 & 0xFFFFFFFFFFFFFF8) + 32;
                  uint64_t v42 = 1;
                  unint64_t v43 = (2 * v35) | 1;
                }
                uint64_t v47 = specialized Array.init<A>(_:)(v40, v41, v42, v43);
                outlined bridged method (mbgnn) of @objc INPerson.alternatives.setter((uint64_t)v47, v8);
                swift_bridgeObjectRelease();
                goto LABEL_4;
              }
              goto LABEL_37;
            }
            __break(1u);
          }
          swift_bridgeObjectRetain();
          uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
          uint64_t result = swift_bridgeObjectRelease();
          if (v37 < 1)
          {
LABEL_38:
            __break(1u);
            return result;
          }
          swift_bridgeObjectRetain();
          uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
          uint64_t result = swift_bridgeObjectRelease();
          goto LABEL_24;
        }
      }
      else
      {
        uint64_t v35 = *(void *)((char *)&dword_10 + (v12 & 0xFFFFFFFFFFFFFF8));
        if (v35) {
          goto LABEL_16;
        }
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v8 = 0;
  }
LABEL_4:
  uint64_t v14 = v2[2];
  uint64_t v13 = v2[3];
  uint64_t v15 = type metadata accessor for Date();
  __swift_storeEnumTagSinglePayload(v7, 1, 1, v15);
  if (v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_46A030;
    *(void *)(v16 + 32) = v8;
    uint64_t v48 = v16;
    specialized Array._endMutation()();
    uint64_t v17 = v48;
  }
  else
  {
    uint64_t v17 = 0;
  }
  id v18 = objc_allocWithZone((Class)NSNumber);
  swift_bridgeObjectRetain();
  uint64_t v19 = v8;
  id v20 = [v18 initWithInteger:1];
  id v21 = [objc_allocWithZone((Class)NSNumber) initWithInteger:0];
  id v22 = objc_allocWithZone((Class)INCallRecord);
  id v23 = @nonobjc INCallRecord.init(__identifier:dateCreated:callRecordType:callCapability:callDuration:unseen:preferredCallProvider:participants:numberOfCalls:providerId:providerBundleId:isCallerIdBlocked:)(v14, v13, v7, 5, 1, 0, 0, 1, v17, v20, 0, 0, 0, 0, v21);
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Logger.siriPhone);
  uint64_t v25 = v23;
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    uint64_t v29 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 138412290;
    uint64_t v30 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v29 = v25;

    _os_log_impl(&dword_0, v26, v27, "Voicemail INCallRecord to announce = %@", v28, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    uint64_t v31 = v19;
  }
  else
  {

    uint64_t v31 = v25;
    uint64_t v26 = v19;
  }

  return v25;
}

PhoneCallFlowDelegatePlugin::AnnounceVoicemailDirectAction::CodingKeys_optional __swiftcall AnnounceVoicemailDirectAction.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AnnounceVoicemailDirectAction.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return (PhoneCallFlowDelegatePlugin::AnnounceVoicemailDirectAction::CodingKeys_optional)4;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::AnnounceVoicemailDirectAction::CodingKeys_optional)v3;
  }
}

uint64_t AnnounceVoicemailDirectAction.CodingKeys.rawValue.getter(char a1)
{
  uint64_t result = 0xD000000000000015;
  switch(a1)
  {
    case 1:
      uint64_t result = 0xD000000000000011;
      break;
    case 2:
      uint64_t result = OUTLINED_FUNCTION_1_117();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t AnnounceVoicemailDirectAction.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0xD000000000000015;
  switch(a1)
  {
    case 1:
      uint64_t result = 0xD000000000000011;
      break;
    case 2:
      uint64_t result = OUTLINED_FUNCTION_1_117();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnnounceVoicemailDirectAction.CodingKeys(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnnounceVoicemailDirectAction.CodingKeys()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnnounceVoicemailDirectAction.CodingKeys()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnnounceVoicemailDirectAction.CodingKeys(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::AnnounceVoicemailDirectAction::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AnnounceVoicemailDirectAction.CodingKeys@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::AnnounceVoicemailDirectAction::CodingKeys_optional *a2@<X8>)
{
  result.PhoneCallFlowDelegatePlugin::EmergencyType value = AnnounceVoicemailDirectAction.CodingKeys.init(rawValue:)(*a1).value;
  a2->PhoneCallFlowDelegatePlugin::EmergencyType value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AnnounceVoicemailDirectAction.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AnnounceVoicemailDirectAction.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AnnounceVoicemailDirectAction.CodingKeys()
{
  return AnnounceVoicemailDirectAction.CodingKeys.stringValue.getter(*v0);
}

PhoneCallFlowDelegatePlugin::AnnounceVoicemailDirectAction::CodingKeys_optional protocol witness for CodingKey.init(stringValue:) in conformance AnnounceVoicemailDirectAction.CodingKeys@<W0>(uint64_t a1@<X0>, PhoneCallFlowDelegatePlugin::AnnounceVoicemailDirectAction::CodingKeys_optional *a2@<X8>)
{
  result.PhoneCallFlowDelegatePlugin::EmergencyType value = AnnounceVoicemailDirectAction.CodingKeys.init(stringValue:)(*(Swift::String *)&a1).value;
  a2->PhoneCallFlowDelegatePlugin::EmergencyType value = result.value;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnnounceVoicemailDirectAction.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnnounceVoicemailDirectAction.CodingKeys and conformance AnnounceVoicemailDirectAction.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnnounceVoicemailDirectAction.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnnounceVoicemailDirectAction.CodingKeys and conformance AnnounceVoicemailDirectAction.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AnnounceVoicemailDirectAction.__allocating_init(from:)(void *a1)
{
  OUTLINED_FUNCTION_7_92();
  uint64_t v2 = swift_allocObject();
  AnnounceVoicemailDirectAction.init(from:)(a1);
  return v2;
}

void *AnnounceVoicemailDirectAction.init(from:)(void *a1)
{
  unint64_t v3 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AnnounceVoicemailDirectAction.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_4();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AnnounceVoicemailDirectAction.CodingKeys and conformance AnnounceVoicemailDirectAction.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    type metadata accessor for AnnounceVoicemailDirectAction();
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v6 = OUTLINED_FUNCTION_10_76(1);
    unint64_t v9 = v7;
    if (v7)
    {
      uint64_t v10 = v6;
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v11 = type metadata accessor for Logger();
      __swift_project_value_buffer(v11, (uint64_t)static Logger.siriPhone);
      swift_bridgeObjectRetain_n();
      unint64_t v12 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v12, v30))
      {
        uint64_t v29 = (uint8_t *)swift_slowAlloc();
        uint64_t v32 = swift_slowAlloc();
        *(_DWORD *)uint64_t v29 = 136315138;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v9, &v32);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_0, v12, v30, "#AnnounceVoicemailDirectAction Using MessageIdentifier %s", v29, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_6();
        OUTLINED_FUNCTION_6();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
    }
    else
    {
      LOBYTE(v32) = 0;
      uint64_t v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      if (v14)
      {
        if (one-time initialization token for siriPhone != -1) {
          swift_once();
        }
        uint64_t v25 = type metadata accessor for Logger();
        __swift_project_value_buffer(v25, (uint64_t)static Logger.siriPhone);
        uint64_t v26 = Logger.logObject.getter();
        os_log_type_t v27 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v26, v27))
        {
          uint64_t v28 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v28 = 0;
          _os_log_impl(&dword_0, v26, v27, "#AnnounceVoicemailDirectAction Could not find a voicemail identifier in direct invocation payload", v28, 2u);
          OUTLINED_FUNCTION_6();
        }

        uint64_t v10 = 0;
        unint64_t v9 = 0xE000000000000000;
      }
      else
      {
        uint64_t v15 = v13;
        if (one-time initialization token for siriPhone != -1) {
          swift_once();
        }
        uint64_t v16 = type metadata accessor for Logger();
        __swift_project_value_buffer(v16, (uint64_t)static Logger.siriPhone);
        uint64_t v17 = Logger.logObject.getter();
        os_log_type_t v18 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v17, v18))
        {
          os_log_type_t v31 = v18;
          uint64_t v19 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v19 = 134217984;
          uint64_t v32 = v15;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_0, v17, v31, "#AnnounceVoicemailDirectAction Using VMVoicemailIdentifier %ld", v19, 0xCu);
          OUTLINED_FUNCTION_6();
        }

        uint64_t v32 = v15;
        uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v9 = v20;
      }
    }
    v3[2] = v10;
    v3[3] = v9;
    v3[4] = OUTLINED_FUNCTION_10_76(2);
    v3[5] = v21;
    LOBYTE(v32) = 3;
    uint64_t v22 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v23 = OUTLINED_FUNCTION_6_100();
    v24(v23);
    v3[6] = v22;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v3;
}

uint64_t AnnounceVoicemailDirectAction.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  __chkstk_darwin(v4 - 8);
  OUTLINED_FUNCTION_4();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_0();
  uint64_t v48 = v9;
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_4();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AnnounceVoicemailDirectAction.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v47 = v15;
  __chkstk_darwin(v16);
  OUTLINED_FUNCTION_4();
  uint64_t v19 = v18 - v17;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AnnounceVoicemailDirectAction.CodingKeys and conformance AnnounceVoicemailDirectAction.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v21 = *(void *)(v2 + 16);
  unint64_t v20 = *(void *)(v2 + 24);
  UUID.init(uuidString:)();
  if (__swift_getEnumTagSinglePayload(v7, 1, v8) != 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 32))(v13, v7, v8);
    _s10Foundation4UUIDVACSEAAWlTm_0(&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v28 = v49;
    uint64_t v27 = v14;
    if (v49)
    {
      uint64_t v30 = OUTLINED_FUNCTION_5_84();
      v31(v30);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 8))(v19, v14);
    }
    uint64_t v35 = OUTLINED_FUNCTION_5_84();
    v36(v35);
    goto LABEL_21;
  }
  uint64_t result = outlined destroy of UUID?(v7);
  uint64_t v23 = HIBYTE(v20) & 0xF;
  uint64_t v24 = v21 & 0xFFFFFFFFFFFFLL;
  if ((v20 & 0x2000000000000000) != 0) {
    uint64_t v25 = HIBYTE(v20) & 0xF;
  }
  else {
    uint64_t v25 = v21 & 0xFFFFFFFFFFFFLL;
  }
  if (!v25)
  {
    uint64_t v27 = v14;
    uint64_t v28 = v49;
LABEL_21:
    uint64_t v14 = v47;
LABEL_45:
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    if (!v28) {
      KeyedEncodingContainer.encode(_:forKey:)();
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v19, v27);
  }
  if ((v20 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    specialized _parseInteger<A, B>(ascii:radix:)(v21, v20, 10);
    LOBYTE(v8) = v46;
    swift_bridgeObjectRelease();
    goto LABEL_41;
  }
  if ((v20 & 0x2000000000000000) == 0)
  {
    if ((v21 & 0x1000000000000000) != 0) {
      uint64_t v26 = (unsigned __int8 *)((v20 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v26 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    uint64_t v27 = v14;
    specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v26, v24, 10);
    uint64_t v28 = v49;
    LOBYTE(v8) = v29 & 1;
    goto LABEL_42;
  }
  if (v21 == 43)
  {
    if (!v23) {
      goto LABEL_74;
    }
    if (v23 == 1) {
      goto LABEL_38;
    }
    OUTLINED_FUNCTION_4_111();
    if (!v34 & v33) {
      goto LABEL_38;
    }
    if (v37 == 2)
    {
LABEL_40:
      LOBYTE(v8) = 0;
      goto LABEL_41;
    }
    OUTLINED_FUNCTION_4_111();
    if (!v34 & v33) {
      goto LABEL_38;
    }
    uint64_t v27 = v14;
    uint64_t v28 = v49;
    if (v38 != 3)
    {
      OUTLINED_FUNCTION_14_55();
      while (1)
      {
        OUTLINED_FUNCTION_9_81();
        if (!v34 & v33) {
          goto LABEL_69;
        }
        OUTLINED_FUNCTION_3_114();
        if (!v34 || __OFADD__(v40, v39)) {
          goto LABEL_69;
        }
        OUTLINED_FUNCTION_11_78();
        if (v34) {
          goto LABEL_43;
        }
      }
    }
LABEL_60:
    LOBYTE(v8) = 0;
    goto LABEL_42;
  }
  if (v21 != 45)
  {
    if (!v23 || (v21 - 48) > 9u) {
      goto LABEL_38;
    }
    if (v23 == 1) {
      goto LABEL_40;
    }
    OUTLINED_FUNCTION_4_111();
    if (!v34 & v33) {
      goto LABEL_38;
    }
    uint64_t v27 = v14;
    uint64_t v28 = v49;
    if (v41 != 2)
    {
      uint64_t v14 = v47;
      while (1)
      {
        OUTLINED_FUNCTION_9_81();
        if (!v34 & v33) {
          goto LABEL_69;
        }
        OUTLINED_FUNCTION_3_114();
        if (!v34 || __OFADD__(v43, v42)) {
          goto LABEL_69;
        }
        OUTLINED_FUNCTION_11_78();
        if (v34) {
          goto LABEL_43;
        }
      }
    }
    goto LABEL_60;
  }
  if (v23)
  {
    if (v23 != 1)
    {
      OUTLINED_FUNCTION_4_111();
      if (!(!v34 & v33))
      {
        if (v32 == 2)
        {
          LOBYTE(v8) = 0;
LABEL_41:
          uint64_t v27 = v14;
          uint64_t v28 = v49;
LABEL_42:
          uint64_t v14 = v47;
LABEL_43:
          if ((v8 & 1) == 0)
          {
            KeyedEncodingContainer.encode(_:forKey:)();
            if (v28) {
              return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v19, v27);
            }
          }
          goto LABEL_45;
        }
        if ((BYTE2(v21) - 48) <= 9u)
        {
          uint64_t v27 = v14;
          uint64_t v28 = v49;
          if (v32 == 3) {
            goto LABEL_60;
          }
          OUTLINED_FUNCTION_14_55();
          while (1)
          {
            OUTLINED_FUNCTION_9_81();
            if (!v34 & v33) {
              break;
            }
            OUTLINED_FUNCTION_3_114();
            if (!v34 || __OFSUB__(v45, v44)) {
              break;
            }
            OUTLINED_FUNCTION_11_78();
            if (v34) {
              goto LABEL_43;
            }
          }
LABEL_69:
          LOBYTE(v8) = 1;
          goto LABEL_43;
        }
      }
    }
LABEL_38:
    LOBYTE(v8) = 1;
    goto LABEL_41;
  }
  __break(1u);
LABEL_74:
  __break(1u);
  return result;
}

uint64_t AnnounceVoicemailDirectAction.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AnnounceVoicemailDirectAction.__deallocating_deinit()
{
  AnnounceVoicemailDirectAction.deinit();
  OUTLINED_FUNCTION_7_92();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AnnounceVoicemailDirectAction@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 120))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AnnounceVoicemailDirectAction()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))();
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v6 = String.UTF16View.index(_:offsetBy:)();
    OUTLINED_FUNCTION_8_103(v6);
    return v7 | 4;
  }
  else
  {
    uint64_t v3 = String.UTF8View._foreignIndex(_:offsetBy:)();
    OUTLINED_FUNCTION_8_103(v3);
    return v4 | 8;
  }
}

unsigned __int8 *specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(a1, a2, a3);
}

unsigned __int8 *specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = static String._copying(_:)();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  uint64_t v11 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v15 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v16 = a3 + 48;
        unsigned __int8 v17 = a3 + 55;
        unsigned __int8 v18 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v16 = 58;
        }
        else
        {
          unsigned __int8 v18 = 97;
          unsigned __int8 v17 = 65;
        }
        if (result)
        {
          uint64_t v9 = 0;
          uint64_t v19 = result + 1;
          do
          {
            unsigned int v20 = *v19;
            if (v20 < 0x30 || v20 >= v16)
            {
              if (v20 < 0x41 || v20 >= v17)
              {
                uint64_t v13 = 0;
                if (v20 < 0x61 || v20 >= v18) {
                  return (unsigned __int8 *)v13;
                }
                char v21 = -87;
              }
              else
              {
                char v21 = -55;
              }
            }
            else
            {
              char v21 = -48;
            }
            uint64_t v22 = v9 * a3;
            if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
              return 0;
            }
            uint64_t v9 = v22 + (v20 + v21);
            if (__OFADD__(v22, (v20 + v21))) {
              return 0;
            }
            ++v19;
            --v15;
          }
          while (v15);
          return (unsigned __int8 *)v9;
        }
        return 0;
      }
      return 0;
    }
  }
  else
  {
    if (v4 != 45)
    {
      if (a2)
      {
        unsigned __int8 v23 = a3 + 48;
        unsigned __int8 v24 = a3 + 55;
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v23 = 58;
        }
        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v24 = 65;
        }
        if (result)
        {
          uint64_t v26 = 0;
          do
          {
            unsigned int v27 = *result;
            if (v27 < 0x30 || v27 >= v23)
            {
              if (v27 < 0x41 || v27 >= v24)
              {
                uint64_t v13 = 0;
                if (v27 < 0x61 || v27 >= v25) {
                  return (unsigned __int8 *)v13;
                }
                char v28 = -87;
              }
              else
              {
                char v28 = -55;
              }
            }
            else
            {
              char v28 = -48;
            }
            uint64_t v29 = v26 * a3;
            if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63) {
              return 0;
            }
            uint64_t v26 = v29 + (v27 + v28);
            if (__OFADD__(v29, (v27 + v28))) {
              return 0;
            }
            ++result;
            --v3;
          }
          while (v3);
          return (unsigned __int8 *)(v29 + (v27 + v28));
        }
        return 0;
      }
      return 0;
    }
    if (a2 >= 1)
    {
      uint64_t v5 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v6 = a3 + 48;
        unsigned __int8 v7 = a3 + 55;
        unsigned __int8 v8 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = 58;
        }
        else
        {
          unsigned __int8 v8 = 97;
          unsigned __int8 v7 = 65;
        }
        if (result)
        {
          uint64_t v9 = 0;
          for (uint64_t i = result + 1; ; ++i)
          {
            unsigned int v11 = *i;
            if (v11 < 0x30 || v11 >= v6)
            {
              if (v11 < 0x41 || v11 >= v7)
              {
                uint64_t v13 = 0;
                if (v11 < 0x61 || v11 >= v8) {
                  return (unsigned __int8 *)v13;
                }
                char v12 = -87;
              }
              else
              {
                char v12 = -55;
              }
            }
            else
            {
              char v12 = -48;
            }
            uint64_t v14 = v9 * a3;
            if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
              return 0;
            }
            uint64_t v9 = v14 - (v11 + v12);
            if (__OFSUB__(v14, (v11 + v12))) {
              return 0;
            }
            if (!--v5) {
              return (unsigned __int8 *)v9;
            }
          }
        }
        return 0;
      }
      return 0;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static String._copying(_:)()
{
  unint64_t v0 = specialized Collection.subscript.getter();
  uint64_t v4 = static String._copying(_:)(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t specialized Collection.subscript.getter()
{
  return String.subscript.getter();
}

uint64_t static String._copying(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = specialized Collection.count.getter(a1, a2, a3, a4);
    if (!v9
      || (uint64_t v10 = v9,
          unsigned int v11 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v9, 0),
          unint64_t v12 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4), swift_bridgeObjectRetain(), swift_bridgeObjectRelease(), v12 == v10))
    {
      uint64_t v13 = static String._uncheckedFromUTF8(_:)();
      swift_release();
      return v13;
    }
    __break(1u);
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v14[0] = a3;
      v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      return static String._uncheckedFromUTF8(_:)();
    }
    if ((a3 & 0x1000000000000000) != 0) {
      goto LABEL_4;
    }
  }
  _StringObject.sharedUTF8.getter();
LABEL_4:

  return static String._uncheckedFromUTF8(_:)();
}

uint64_t specialized Collection.count.getter(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v5 = a3;
  unint64_t v6 = a2;
  unint64_t v7 = a1;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((a1 & 0xC) == 4 << v8)
  {
    a1 = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, a3, a4);
    unint64_t v7 = a1;
  }
  if ((v6 & 0xC) == v9)
  {
    a1 = _StringGuts._slowEnsureMatchingEncoding(_:)(v6, v5, v4);
    unint64_t v6 = a1;
    if ((v4 & 0x1000000000000000) == 0) {
      return (v6 >> 16) - (v7 >> 16);
    }
  }
  else if ((v4 & 0x1000000000000000) == 0)
  {
    return (v6 >> 16) - (v7 >> 16);
  }
  unint64_t v11 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    unint64_t v11 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (v11 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v11 >= v6 >> 16)
  {
    a1 = v7;
    a2 = v6;
    a3 = v5;
    a4 = v4;
    return String.UTF8View._foreignDistance(from:to:)(a1, a2, a3, a4);
  }
  __break(1u);
  return String.UTF8View._foreignDistance(from:to:)(a1, a2, a3, a4);
}

unint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_35;
  }
  if (a3 < 0) {
    goto LABEL_38;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_35:
    *uint64_t v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    uint64_t result = v12;
    if ((v12 & 0xC) == v15) {
      uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
      }
      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
      }
    }
    if ((v12 & 0xC) == v15)
    {
      uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
      unint64_t v12 = result;
      if ((a7 & 0x1000000000000000) == 0)
      {
LABEL_27:
        unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_31;
      }
    }
    else if ((a7 & 0x1000000000000000) == 0)
    {
      goto LABEL_27;
    }
    if (v23 <= v12 >> 16) {
      goto LABEL_37;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_31:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_35;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_35;
    }
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type AnnounceVoicemailDirectAction.CodingKeys and conformance AnnounceVoicemailDirectAction.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AnnounceVoicemailDirectAction.CodingKeys and conformance AnnounceVoicemailDirectAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnnounceVoicemailDirectAction.CodingKeys and conformance AnnounceVoicemailDirectAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnounceVoicemailDirectAction.CodingKeys and conformance AnnounceVoicemailDirectAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnnounceVoicemailDirectAction.CodingKeys and conformance AnnounceVoicemailDirectAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnnounceVoicemailDirectAction.CodingKeys and conformance AnnounceVoicemailDirectAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnounceVoicemailDirectAction.CodingKeys and conformance AnnounceVoicemailDirectAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnnounceVoicemailDirectAction.CodingKeys and conformance AnnounceVoicemailDirectAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnnounceVoicemailDirectAction.CodingKeys and conformance AnnounceVoicemailDirectAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnounceVoicemailDirectAction.CodingKeys and conformance AnnounceVoicemailDirectAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnnounceVoicemailDirectAction.CodingKeys and conformance AnnounceVoicemailDirectAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnnounceVoicemailDirectAction.CodingKeys and conformance AnnounceVoicemailDirectAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnounceVoicemailDirectAction.CodingKeys and conformance AnnounceVoicemailDirectAction.CodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for AnnounceVoicemailDirectAction()
{
  return self;
}

uint64_t outlined destroy of UUID?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t instantiation function for generic protocol witness table for AnnounceVoicemailDirectAction(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = _s10Foundation4UUIDVACSEAAWlTm_0(&lazy protocol witness table cache variable for type AnnounceVoicemailDirectAction and conformance AnnounceVoicemailDirectAction, a2, (void (*)(uint64_t))type metadata accessor for AnnounceVoicemailDirectAction);
  uint64_t result = _s10Foundation4UUIDVACSEAAWlTm_0(&lazy protocol witness table cache variable for type AnnounceVoicemailDirectAction and conformance AnnounceVoicemailDirectAction, v3, (void (*)(uint64_t))type metadata accessor for AnnounceVoicemailDirectAction);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t _s10Foundation4UUIDVACSEAAWlTm_0(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AnnounceVoicemailDirectAction.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x44FC00);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnnounceVoicemailDirectAction.CodingKeys()
{
  return &type metadata for AnnounceVoicemailDirectAction.CodingKeys;
}

uint64_t OUTLINED_FUNCTION_1_117()
{
  return 0x49746361746E6F63;
}

uint64_t OUTLINED_FUNCTION_6_100()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_7_92()
{
  return v0;
}

unint64_t OUTLINED_FUNCTION_8_103(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFFFFCLL | v1 & 3;
}

uint64_t OUTLINED_FUNCTION_10_76@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 72) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_13_64()
{
  return v0;
}

void *CallingIntentConfirmationFlowStrategy.__allocating_init(delegate:startCallCATs:startCallCatPatterns:startCallCATsSimple:phoneCallCommonCATs:phoneCallCommonCATsSimple:phoneCallCommonCatPatterns:phoneCallDisplayTextCATsSimple:responseGenerator:siriKitEventSender:appInfoBuilder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return CallingIntentConfirmationFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:startCallCATsSimple:phoneCallCommonCATs:phoneCallCommonCATsSimple:phoneCallCommonCatPatterns:phoneCallDisplayTextCATsSimple:responseGenerator:siriKitEventSender:appInfoBuilder:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t specialized Collection.firstIndex(where:)(unint64_t a1, void *a2)
{
  if (a1 >> 62) {
    goto LABEL_41;
  }
  uint64_t v4 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  while (v4)
  {
    uint64_t v5 = 0;
    unsigned __int8 v24 = a2;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v6 = *(id *)(a1 + 8 * v5 + 32);
      }
      unint64_t v7 = v6;
      uint64_t v8 = outlined bridged method (pb) of @objc INPerson.contactIdentifier.getter(a2);
      uint64_t v10 = v9;
      uint64_t v11 = outlined bridged method (pb) of @objc INPerson.contactIdentifier.getter(v7);
      if (v12)
      {
        uint64_t v13 = v11;
        unint64_t v14 = v12;
        goto LABEL_9;
      }
      unint64_t v17 = outlined bridged method (pb) of @objc INPerson.siriMatches.getter(v7);
      unint64_t v14 = v17;
      if (!v17)
      {
        uint64_t v13 = 0;
        goto LABEL_9;
      }
      if (v17 >> 62)
      {
        if (!_CocoaArrayWrapper.endIndex.getter())
        {
LABEL_35:
          swift_bridgeObjectRelease();
          uint64_t v13 = 0;
          unint64_t v14 = 0;
          goto LABEL_9;
        }
      }
      else if (!*(void *)((char *)&dword_10 + (v17 & 0xFFFFFFFFFFFFFF8)))
      {
        goto LABEL_35;
      }
      if ((v14 & 0xC000000000000001) != 0)
      {
        id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((char *)&dword_10 + (v14 & 0xFFFFFFFFFFFFFF8))) {
          goto LABEL_40;
        }
        id v18 = *(id *)(v14 + 32);
      }
      char v19 = v18;
      swift_bridgeObjectRelease();
      id v20 = [v19 contactIdentifier];

      if (v20)
      {
        uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v14 = v21;
      }
      else
      {
        uint64_t v13 = 0;
        unint64_t v14 = 0;
      }
      a2 = v24;
LABEL_9:
      if (!v10)
      {
        if (!v14)
        {

          return v5;
        }
LABEL_27:

        swift_bridgeObjectRelease();
        goto LABEL_28;
      }
      if (!v14) {
        goto LABEL_27;
      }
      if (v8 == v13 && v10 == v14)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v5;
      }
      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v16)
      {

        return v5;
      }
LABEL_28:
      uint64_t v22 = v5 + 1;
      if (__OFADD__(v5, 1)) {
        break;
      }
      ++v5;
      if (v22 == v4) {
        goto LABEL_42;
      }
    }
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_42:

  return 0;
}

void key path setter for CallingIntentConfirmationFlowStrategy.personToConfirm : <A>CallingIntentConfirmationFlowStrategy<A>(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  int v3 = (void **)(*a2 + direct field offset for CallingIntentConfirmationFlowStrategy.personToConfirm);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *int v3 = v2;
  id v5 = v2;
}

void *CallingIntentConfirmationFlowStrategy.personToConfirm.getter()
{
  uint64_t v1 = (void **)(v0 + direct field offset for CallingIntentConfirmationFlowStrategy.personToConfirm);
  OUTLINED_FUNCTION_37_4();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

uint64_t CallingIntentConfirmationFlowStrategy.actionForInput(_:resolveRecord:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  uint64_t v7 = OUTLINED_FUNCTION_11_0(v6);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v51 = (char *)v46 - v11;
  type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v52 = v13;
  uint64_t v53 = v12;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Input();
  OUTLINED_FUNCTION_0_0();
  uint64_t v18 = v17;
  __chkstk_darwin(v19);
  unint64_t v21 = (char *)v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  uint64_t v23 = __swift_project_value_buffer(v22, (uint64_t)static Logger.siriPhone);
  unsigned __int8 v24 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  uint64_t v54 = a1;
  v24(v21, a1, v16);
  uint64_t v50 = v23;
  unsigned __int8 v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = OUTLINED_FUNCTION_47();
    uint64_t v49 = a2;
    char v28 = (uint8_t *)v27;
    uint64_t v29 = OUTLINED_FUNCTION_14_0();
    uint64_t v47 = v3;
    v56[0] = v29;
    uint64_t v48 = v10;
    *(_DWORD *)char v28 = 136315138;
    v46[1] = v28 + 4;
    Input.parse.getter();
    uint64_t v30 = String.init(describing:)((uint64_t)v15);
    uint64_t v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, v56);
    uint64_t v10 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_3_23();
    v32();
    _os_log_impl(&dword_0, v25, v26, "#CallingIntentConfirmationFlowStrategy input: %s", v28, 0xCu);
    swift_arrayDestroy();
    uint64_t v3 = v47;
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v16);
  }

  outlined init with copy of SignalProviding(v3 + 24, (uint64_t)v56);
  Input.parse.getter();
  unsigned __int8 v33 = ContactPromptResponseParser.parseResponse(from:)((uint64_t)v15);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v15, v53);
  outlined destroy of ContactPromptResponseParser((uint64_t)v56);
  if (v33 - 1 < 2)
  {
    char v34 = (unsigned int *)&enum case for ConfirmationResponse.rejected(_:);
LABEL_10:
    uint64_t v35 = *v34;
    uint64_t v36 = type metadata accessor for ConfirmationResponse();
    OUTLINED_FUNCTION_15();
    uint64_t v38 = (uint64_t)v51;
    (*(void (**)(char *, uint64_t, uint64_t))(v37 + 104))(v51, v35, v36);
    __swift_storeEnumTagSinglePayload(v38, 0, 1, v36);
    outlined init with take of ConfirmationResponse?(v38, (uint64_t)v10);
    uint64_t v39 = v3 + direct field offset for CallingIntentConfirmationFlowStrategy.confirmationResponse;
    swift_beginAccess();
    outlined assign with take of ConfirmationResponse?((uint64_t)v10, v39);
    swift_endAccess();
    return static ActionForInput.handle()();
  }
  if (!v33)
  {
    char v34 = (unsigned int *)&enum case for ConfirmationResponse.confirmed(_:);
    goto LABEL_10;
  }
  uint64_t v41 = (void *)Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_8_2(v42))
  {
    uint64_t v43 = (_WORD *)OUTLINED_FUNCTION_7_2();
    OUTLINED_FUNCTION_32_2(v43);
    OUTLINED_FUNCTION_1_3(&dword_0, v44, v45, "#CallingIntentConfirmationFlowStrategy Received unsupported parse while determining action which is not yet supported. Skipping..");
    OUTLINED_FUNCTION_6();
  }

  return static ActionForInput.ignore()();
}

uint64_t CallingIntentConfirmationFlowStrategy.parseConfirmationResponse(input:resolveRecord:)()
{
  OUTLINED_FUNCTION_16_1();
  v1[22] = v2;
  v1[23] = v0;
  v1[21] = v3;
  uint64_t v4 = *v0;
  uint64_t v5 = type metadata accessor for Logger();
  v1[24] = v5;
  OUTLINED_FUNCTION_19_0(v5);
  v1[25] = v6;
  v1[26] = OUTLINED_FUNCTION_35();
  uint64_t v7 = type metadata accessor for ConfirmationResponse();
  v1[27] = v7;
  OUTLINED_FUNCTION_19_0(v7);
  v1[28] = v8;
  v1[29] = OUTLINED_FUNCTION_35();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ConfirmationResponse?, ConfirmationResponse?));
  v1[30] = v9;
  OUTLINED_FUNCTION_11_0(v9);
  v1[31] = OUTLINED_FUNCTION_35();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  OUTLINED_FUNCTION_11_0(v10);
  v1[32] = swift_task_alloc();
  v1[33] = swift_task_alloc();
  v1[34] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for ParameterIdentifier();
  v1[35] = v11;
  OUTLINED_FUNCTION_19_0(v11);
  v1[36] = v12;
  v1[37] = swift_task_alloc();
  v1[38] = swift_task_alloc();
  v1[39] = *(void *)(v4 + 272);
  v1[40] = *(void *)(v4 + 264);
  v1[41] = swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for ParameterResolutionRecord();
  v1[42] = v13;
  OUTLINED_FUNCTION_19_0(v13);
  v1[43] = v14;
  v1[44] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v15, v16, v17);
}

void CallingIntentConfirmationFlowStrategy.parseConfirmationResponse(input:resolveRecord:)()
{
  uint64_t v82 = v0;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 344);
  uint64_t v2 = *(void *)(v0 + 352);
  uint64_t v3 = *(void *)(v0 + 336);
  uint64_t v4 = *(void *)(v0 + 176);
  uint64_t v5 = __swift_project_value_buffer(*(void *)(v0 + 192), (uint64_t)static Logger.siriPhone);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v2, v4, v3);
  uint64_t v80 = v5;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)OUTLINED_FUNCTION_47();
    uint64_t v81 = OUTLINED_FUNCTION_14_0();
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v9 = (void *)ParameterResolutionRecord.result.getter();
    id v10 = [v9 itemToConfirm];

    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    uint64_t v11 = String.init<A>(describing:)();
    *(void *)(v0 + 160) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v13 = OUTLINED_FUNCTION_46_28();
    v14(v13);
    _os_log_impl(&dword_0, v6, v7, "#CallingIntentConfirmationFlowStrategy intentResolutionResult: %s", v8, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
    uint64_t v15 = OUTLINED_FUNCTION_46_28();
    v16(v15);
  }

  uint64_t v18 = *(void *)(v0 + 296);
  uint64_t v17 = *(void *)(v0 + 304);
  uint64_t v19 = *(void *)(v0 + 280);
  uint64_t v20 = *(void *)(v0 + 288);
  ParameterResolutionRecord.parameter.getter();
  uint64_t v21 = ParameterIdentifier.multicardinalIndex.getter();
  char v23 = v22;
  unsigned __int8 v24 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
  v24(v17, v19);
  if (v23) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = v21;
  }
  ParameterResolutionRecord.parameter.getter();
  uint64_t v26 = ParameterIdentifier.name.getter();
  char v28 = v27;
  v24(v18, v19);
  v29._countAndFlagsBits = v26;
  v29._object = v28;
  if ((PhoneCallSlotNames.init(rawValue:)(v29).value & 0xFE) == 4)
  {
    uint64_t v78 = v25;
    uint64_t v30 = (void *)ParameterResolutionRecord.result.getter();
    id v31 = [v30 itemToConfirm];

    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for INPerson();
    if (swift_dynamicCast()) {
      uint64_t v32 = *(void **)(v0 + 152);
    }
    else {
      uint64_t v32 = (void *)(*(uint64_t (**)(void))(**(void **)(v0 + 184) + 328))();
    }
    uint64_t v37 = *(void *)(v0 + 272);
    uint64_t v38 = *(void *)(v0 + 240);
    uint64_t v39 = *(void *)(v0 + 248);
    uint64_t v41 = *(void *)(v0 + 216);
    uint64_t v40 = *(void *)(v0 + 224);
    uint64_t v42 = *(void *)(v0 + 184) + direct field offset for CallingIntentConfirmationFlowStrategy.confirmationResponse;
    OUTLINED_FUNCTION_37_4();
    (*(void (**)(uint64_t, void, uint64_t))(v40 + 104))(v37, enum case for ConfirmationResponse.confirmed(_:), v41);
    __swift_storeEnumTagSinglePayload(v37, 0, 1, v41);
    uint64_t v43 = v39 + *(int *)(v38 + 48);
    uint64_t v79 = v42;
    outlined init with copy of ConfirmationResponse?(v42, v39, &demangling cache variable for type metadata for ConfirmationResponse?);
    outlined init with copy of ConfirmationResponse?(v37, v43, &demangling cache variable for type metadata for ConfirmationResponse?);
    if (__swift_getEnumTagSinglePayload(v39, 1, v41) == 1)
    {
      uint64_t v44 = *(void *)(v0 + 216);
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(*(void *)(v0 + 272), &demangling cache variable for type metadata for ConfirmationResponse?);
      if (__swift_getEnumTagSinglePayload(v43, 1, v44) == 1)
      {
        outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(*(void *)(v0 + 248), &demangling cache variable for type metadata for ConfirmationResponse?);
LABEL_26:
        if (!v32) {
          goto LABEL_32;
        }
        uint64_t v51 = *(void *)(v0 + 320);
        uint64_t v77 = v32;
        id v62 = v32;
        id v63 = (void *)ParameterResolutionRecord.intent.getter();
        swift_getAssociatedConformanceWitness();
        uint64_t v64 = OUTLINED_FUNCTION_77_12();
        unint64_t v66 = v65(v64);

        unint64_t v57 = CallingIntentConfirmationFlowStrategy.updateForConfirmedContact(selectedIndex:confirmedContact:currentContacts:)(v78, v62, v66);
        swift_bridgeObjectRelease();
LABEL_28:
        uint64_t v67 = v0 + 16;
        swift_bridgeObjectRetain_n();
        id v68 = Logger.logObject.getter();
        os_log_type_t v69 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_14_2(v69))
        {
          id v70 = (uint8_t *)OUTLINED_FUNCTION_47();
          uint64_t v81 = OUTLINED_FUNCTION_14_0();
          *(_DWORD *)id v70 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v71 = Array.description.getter();
          unint64_t v73 = v72;
          swift_bridgeObjectRelease();
          *(void *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v73, &v81);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_0, v68, (os_log_type_t)v51, "#CallingIntentConfirmationFlowStrategy updated contacts: %s", v70, 0xCu);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_6();
          uint64_t v67 = v0 + 16;
          OUTLINED_FUNCTION_6();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

        uint64_t v74 = (void *)ParameterResolutionRecord.intent.getter();
        *(void *)(v0 + 40) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
        *(void *)(v0 + 16) = v57;
        NSObject.update(with:at:)(v67, 0x73746361746E6F63, 0xE800000000000000);

        __swift_destroy_boxed_opaque_existential_1(v67);
        uint64_t v32 = v77;
LABEL_32:
        outlined init with copy of ConfirmationResponse?(v79, *(void *)(v0 + 256), &demangling cache variable for type metadata for ConfirmationResponse?);
        ParameterResolutionRecord.intent.getter();
        NeedsConfirmationAnswer.init(answeredValue:updatedIntent:)();

        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        OUTLINED_FUNCTION_6_0();
        OUTLINED_FUNCTION_28_3();
        __asm { BRAA            X1, X16 }
      }
    }
    else
    {
      uint64_t v45 = *(void *)(v0 + 216);
      outlined init with copy of ConfirmationResponse?(*(void *)(v0 + 248), *(void *)(v0 + 264), &demangling cache variable for type metadata for ConfirmationResponse?);
      int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v43, 1, v45);
      uint64_t v47 = *(void *)(v0 + 264);
      uint64_t v48 = *(void *)(v0 + 272);
      if (EnumTagSinglePayload != 1)
      {
        uint64_t v58 = *(void *)(v0 + 248);
        uint64_t v59 = *(void *)(v0 + 224);
        (*(void (**)(void, uint64_t, void))(v59 + 32))(*(void *)(v0 + 232), v43, *(void *)(v0 + 216));
        _s11SiriKitFlow20ConfirmationResponseOACSQAAWlTm_0(&lazy protocol witness table cache variable for type ConfirmationResponse and conformance ConfirmationResponse, (void (*)(uint64_t))&type metadata accessor for ConfirmationResponse);
        char v60 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v61 = *(void (**)(void))(v59 + 8);
        OUTLINED_FUNCTION_3_23();
        v61();
        outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v48, &demangling cache variable for type metadata for ConfirmationResponse?);
        OUTLINED_FUNCTION_3_23();
        v61();
        outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v58, &demangling cache variable for type metadata for ConfirmationResponse?);
        if (v60) {
          goto LABEL_26;
        }
LABEL_22:
        if (!v32) {
          goto LABEL_32;
        }
        uint64_t v51 = *(void *)(v0 + 320);
        id v52 = v32;
        uint64_t v53 = (void *)ParameterResolutionRecord.intent.getter();
        swift_getAssociatedConformanceWitness();
        uint64_t v54 = OUTLINED_FUNCTION_77_12();
        unint64_t v56 = v55(v54);

        unint64_t v57 = CallingIntentConfirmationFlowStrategy.updateForRejectedContact(selectedIndex:rejectedContact:currentContacts:)(v78, v52, v56);
        swift_bridgeObjectRelease();
        if (!v57) {
          goto LABEL_32;
        }
        uint64_t v77 = v32;
        goto LABEL_28;
      }
      uint64_t v50 = *(void *)(v0 + 216);
      uint64_t v49 = *(void *)(v0 + 224);
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(*(void *)(v0 + 272), &demangling cache variable for type metadata for ConfirmationResponse?);
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v47, v50);
    }
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(*(void *)(v0 + 248), &demangling cache variable for type metadata for (ConfirmationResponse?, ConfirmationResponse?));
    goto LABEL_22;
  }
  (*(void (**)(void, uint64_t, void))(*(void *)(v0 + 200) + 16))(*(void *)(v0 + 208), v80, *(void *)(v0 + 192));
  unsigned __int8 v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_18(v34))
  {
    uint64_t v35 = (uint64_t *)(v0 + 136);
    uint64_t v36 = (uint8_t *)OUTLINED_FUNCTION_47();
    uint64_t v81 = OUTLINED_FUNCTION_14_0();
    *(_DWORD *)uint64_t v36 = 136315138;
    *uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000A2, 0x800000000049DB20, &v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v33, (os_log_type_t)v28, "%s", v36, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }

  static SiriKitLifecycle._logCrashToEventBus(_:)();
  _assertionFailure(_:_:file:line:flags:)();
  OUTLINED_FUNCTION_28_3();
}

uint64_t CallingIntentConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[9] = v2;
  v1[10] = v0;
  v1[7] = v3;
  v1[8] = v4;
  OUTLINED_FUNCTION_2();
  v1[11] = v5;
  uint64_t v6 = type metadata accessor for ParameterIdentifier();
  v1[12] = v6;
  OUTLINED_FUNCTION_19_0(v6);
  v1[13] = v7;
  v1[14] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;

  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  uint64_t v6 = *(void **)(v5 + 144);
  uint64_t v7 = *(void **)(v5 + 128);
  uint64_t v8 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v9 = v8;
  *(void *)(v3 + 160) = v0;
  swift_task_dealloc();
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v3 + 16, &demangling cache variable for type metadata for ContactResolutionSnippetGenerating?);

  swift_bridgeObjectRelease();
  swift_release();
  if (v0)
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v10, v11, v12);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void))(v8 + 8);
    return v13();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v0();
}

uint64_t CallingIntentConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_30_12();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v16 = (void *)OUTLINED_FUNCTION_25_0(v15, (uint64_t)static Logger.siriPhone);
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_18(v17))
  {
    uint64_t v18 = (_WORD *)OUTLINED_FUNCTION_7_2();
    OUTLINED_FUNCTION_32_2(v18);
    OUTLINED_FUNCTION_25_4(&dword_0, v19, v20, "#CallingIntentConfirmationFlowStrategy makePromptForConfirmation:");
    OUTLINED_FUNCTION_6();
  }
  uint64_t v22 = *(void *)(v14 + 104);
  uint64_t v21 = *(void *)(v14 + 112);
  uint64_t v39 = *(void *)(v14 + 96);
  uint64_t v23 = *(void *)(v14 + 80);

  swift_getAssociatedTypeWitness();
  type metadata accessor for ParameterResolutionRecord();
  *(void *)(v14 + 120) = ParameterResolutionRecord.app.getter();
  *(void *)(v14 + 128) = ParameterResolutionRecord.intent.getter();
  ParameterResolutionRecord.parameter.getter();
  uint64_t v41 = ParameterIdentifier.name.getter();
  *(void *)(v14 + 136) = v24;
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v39);
  *(void *)(v14 + 144) = ParameterResolutionRecord.result.getter();
  *(_OWORD *)(v14 + 32) = 0u;
  *(void *)(v14 + 48) = 0;
  *(_OWORD *)(v14 + 16) = 0u;
  uint64_t v38 = *(void *)(*(void *)v23 + 400) + **(int **)(*(void *)v23 + 400);
  uint64_t v40 = *(void *)v23 + 400;
  swift_task_alloc();
  OUTLINED_FUNCTION_31_2();
  *(void *)(v14 + 152) = v25;
  *uint64_t v25 = v26;
  v25[1] = CallingIntentConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:);
  OUTLINED_FUNCTION_28_1();
  return v35(v27, v28, v29, v30, v31, v32, v33, v34, v38, v40, v41, a12, a13, a14);
}

uint64_t CallingIntentConfirmationFlowStrategy.makeConfirmationRejectedResponse(app:intent:parameter:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[7] = v2;
  v1[8] = v0;
  uint64_t v3 = type metadata accessor for DialogPhase();
  OUTLINED_FUNCTION_11_0(v3);
  v1[9] = OUTLINED_FUNCTION_35();
  uint64_t v4 = type metadata accessor for CATOption();
  OUTLINED_FUNCTION_11_0(v4);
  v1[10] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v5, v6, v7);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;

  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_25_0(v1, (uint64_t)static Logger.siriPhone);
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_18(v3))
  {
    uint64_t v4 = (_WORD *)OUTLINED_FUNCTION_7_2();
    OUTLINED_FUNCTION_32_2(v4);
    OUTLINED_FUNCTION_25_4(&dword_0, v5, v6, "#CallingIntentConfirmationFlowStrategy makeConfirmationRejectedResponse: ");
    OUTLINED_FUNCTION_6();
  }
  uint64_t v7 = v0[8];

  type metadata accessor for PhoneCallCommonCATsSimple();
  static CATOption.defaultMode.getter();
  CATWrapperSimple.__allocating_init(options:globals:)();
  swift_retain();
  static DialogPhase.canceled.getter();
  outlined init with copy of SignalProviding(v7 + 24, (uint64_t)(v0 + 2));
  type metadata accessor for DialogOutputFactory();
  swift_allocObject();
  uint64_t v8 = DialogOutputFactory.init(dialog:dialogPhase:sharedGlobals:)();
  v0[11] = v8;
  swift_release();
  uint64_t v13 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v8 + 136) + **(int **)(*(void *)v8 + 136));
  swift_task_alloc();
  OUTLINED_FUNCTION_31_2();
  v0[12] = v9;
  *uint64_t v9 = v10;
  v9[1] = PhoneTCCFlowStrategy.makeTCCConfirmationRejectedResponse(app:intent:);
  uint64_t v11 = v0[7];
  return v13(v11);
}

uint64_t CallingIntentConfirmationFlowStrategy.updateForConfirmedContact(selectedIndex:confirmedContact:currentContacts:)(uint64_t a1, id a2, unint64_t a3)
{
  unint64_t v5 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v51 = (uint64_t)_swiftEmptyArrayStorage;
  if (!a3) {
    goto LABEL_6;
  }
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    if (!_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v7 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  if (v7)
  {
LABEL_4:
    unint64_t v5 = a3;
    uint64_t v51 = a3;
  }
LABEL_5:
  swift_bridgeObjectRelease();
LABEL_6:
  id v8 = [a2 contactIdentifier];
  if (v8)
  {
    uint64_t v9 = v8;
    unint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v12 = v11;
  }
  else
  {
    unint64_t v10 = 0;
    unint64_t v12 = 0;
  }
  LOBYTE(v10) = specialized Optional<A>.isNilOrEmpty.getter(v10, v12);
  swift_bridgeObjectRelease();
  uint64_t v13 = &unk_583000;
  if ((v10 & 1) == 0)
  {
    id v14 = a2;
    unint64_t v15 = swift_bridgeObjectRetain();
    unint64_t v10 = specialized Collection.firstIndex(where:)(v15, v14);
    char v17 = v16;
    swift_bridgeObjectRelease();
    if ((v17 & 1) == 0)
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v18 = type metadata accessor for Logger();
      __swift_project_value_buffer(v18, (uint64_t)static Logger.siriPhone);
      id v19 = v14;
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)OUTLINED_FUNCTION_47();
        v49[0] = OUTLINED_FUNCTION_14_0();
        *(_DWORD *)uint64_t v22 = 136315138;
        v50[0] = outlined bridged method (pb) of @objc INPerson.contactIdentifier.getter(v19);
        v50[1] = v23;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
        uint64_t v24 = String.init<A>(describing:)();
        v50[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        uint64_t v13 = (void *)&unk_583000;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_0, v20, v21, "#CallingIntentConfirmationFlowStrategy updateForConfirmedContact: Found confirmed contact with contactId=%s who is now confirmed", v22, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_6();
        OUTLINED_FUNCTION_6();

        unint64_t v5 = v51;
      }
      else
      {
      }
      id v31 = v19;
      uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
      uint64_t v51 = v5;
      if (!result || (v5 & 0x8000000000000000) != 0 || (v5 & 0x4000000000000000) != 0)
      {
        uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
        unint64_t v5 = result;
        uint64_t v51 = result;
      }
      if ((v10 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v10 < *(void *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFFF8)))
      {
        uint64_t v32 = (v5 & 0xFFFFFFFFFFFFFF8) + 8 * v10;
        goto LABEL_43;
      }
      __break(1u);
      return result;
    }
  }
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v26 = *(void *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFFF8));
  }
  if (v26 <= a1)
  {
    if (one-time initialization token for siriPhone == -1)
    {
LABEL_30:
      uint64_t v33 = type metadata accessor for Logger();
      uint64_t v34 = OUTLINED_FUNCTION_25_0(v33, (uint64_t)static Logger.siriPhone);
      os_log_type_t v35 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_14_2(v35))
      {
        uint64_t v36 = (uint8_t *)OUTLINED_FUNCTION_7_2();
        *(_WORD *)uint64_t v36 = 0;
        _os_log_impl(&dword_0, v34, (os_log_type_t)v10, "#CallingIntentConfirmationFlowStrategy updateForConfirmedContact: Adding confirmed contact to the contacts", v36, 2u);
        OUTLINED_FUNCTION_6();
      }

      id v37 = a2;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((char *)&dword_10 + (v51 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                     + (v51 & 0xFFFFFFFFFFFFFF8)) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      goto LABEL_44;
    }
LABEL_55:
    swift_once();
    goto LABEL_30;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  uint64_t v28 = OUTLINED_FUNCTION_25_0(v27, (uint64_t)static Logger.siriPhone);
  os_log_type_t v29 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_14_2(v29))
  {
    uint64_t v30 = (uint8_t *)OUTLINED_FUNCTION_47();
    *(_DWORD *)uint64_t v30 = 134217984;
    v50[0] = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v28, (os_log_type_t)v10, "#CallingIntentConfirmationFlowStrategy updateForConfirmedContact: Updating confirmed contact at selectedIndex=%ld", v30, 0xCu);
    OUTLINED_FUNCTION_6();
  }

  id v31 = a2;
  uint64_t v51 = v5;
  if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
    || (v5 & 0x8000000000000000) != 0
    || (v5 & 0x4000000000000000) != 0)
  {
    unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
    uint64_t v51 = v5;
  }
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_54;
  }
  if (*(void *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFFF8)) <= (unint64_t)a1)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  uint64_t v32 = (v5 & 0xFFFFFFFFFFFFFF8) + 8 * a1;
LABEL_43:
  uint64_t v39 = *(void **)(v32 + 32);
  *(void *)(v32 + 32) = v31;

LABEL_44:
  specialized Array._endMutation()();
  if (v13[466] != -1) {
    swift_once();
  }
  uint64_t v40 = type metadata accessor for Logger();
  __swift_project_value_buffer(v40, (uint64_t)static Logger.siriPhone);
  swift_retain_n();
  uint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v41, v42))
  {
    uint64_t v43 = swift_slowAlloc();
    v50[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v43 = 136315394;
    uint64_t v44 = _typeName(_:qualified:)();
    v49[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v43 + 12) = 2080;
    OUTLINED_FUNCTION_37_4();
    type metadata accessor for INPerson();
    swift_bridgeObjectRetain();
    uint64_t v46 = Array.description.getter();
    unint64_t v48 = v47;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v48, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v41, v42, "#%s updated contacts : %s)", (uint8_t *)v43, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {

    swift_release_n();
  }
  OUTLINED_FUNCTION_37_4();
  return v51;
}

unint64_t CallingIntentConfirmationFlowStrategy.updateForRejectedContact(selectedIndex:rejectedContact:currentContacts:)(int64_t a1, void *a2, unint64_t a3)
{
  unint64_t v3 = a3;
  if (a3)
  {
    unint64_t v36 = a3;
    swift_bridgeObjectRetain();
    id v6 = [a2 contactIdentifier];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v10 = v9;
    }
    else
    {
      uint64_t v8 = 0;
      unint64_t v10 = 0;
    }
    char v11 = specialized Optional<A>.isNilOrEmpty.getter(v8, v10);
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v12 = a2;
      unint64_t v10 = specialized Collection.firstIndex(where:)(v3, v12);
      char v14 = v13;
      swift_bridgeObjectRelease();
      if ((v14 & 1) == 0)
      {
        if (one-time initialization token for siriPhone != -1) {
          swift_once();
        }
        uint64_t v15 = type metadata accessor for Logger();
        __swift_project_value_buffer(v15, (uint64_t)static Logger.siriPhone);
        id v16 = v12;
        char v17 = Logger.logObject.getter();
        os_log_type_t v18 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v17, v18))
        {
          id v19 = (uint8_t *)OUTLINED_FUNCTION_47();
          uint64_t v35 = OUTLINED_FUNCTION_14_0();
          *(_DWORD *)id v19 = 136315138;
          outlined bridged method (pb) of @objc INPerson.contactIdentifier.getter(v16);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
          uint64_t v20 = String.init<A>(describing:)();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v35);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl(&dword_0, v17, v18, "#CallingIntentConfirmationFlowStrategy updateForRejectedContact: Contact to be confirmed with contactId=%s has been rejected", v19, 0xCu);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_6();
          OUTLINED_FUNCTION_6();
        }
        else
        {
        }
        unint64_t v27 = v10;
LABEL_27:

        return v36;
      }
    }
    if (v3 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v22 = *(void *)((char *)&dword_10 + (v3 & 0xFFFFFFFFFFFFFF8));
    }
    if (v22 > a1)
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      uint64_t v24 = OUTLINED_FUNCTION_25_0(v23, (uint64_t)static Logger.siriPhone);
      os_log_type_t v25 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_14_2(v25))
      {
        uint64_t v26 = (uint8_t *)OUTLINED_FUNCTION_47();
        *(_DWORD *)uint64_t v26 = 134217984;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_0, v24, (os_log_type_t)v10, "#CallingIntentConfirmationFlowStrategy updateForRejectedContact: Removing confirmed contact at selectedIndex=%ld", v26, 0xCu);
        OUTLINED_FUNCTION_6();
      }

      unint64_t v27 = a1;
      goto LABEL_27;
    }
    swift_bridgeObjectRelease();
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    os_log_type_t v29 = (void *)OUTLINED_FUNCTION_25_0(v28, (uint64_t)static Logger.siriPhone);
    os_log_type_t v30 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_8_2(v30))
    {
      id v31 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_32_2(v31);
      OUTLINED_FUNCTION_1_3(&dword_0, v32, v33, "#CallingIntentConfirmationFlowStrategy updateForRejectedContact: Rejected contact was not found.");
      OUTLINED_FUNCTION_6();
    }
  }
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t CallingIntentConfirmationFlowStrategy.makePromptForConfirmationOutput(app:itemToConfirm:intent:parameterName:intentResolutionResult:crrOutputGenerator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[17] = a8;
  v9[18] = v8;
  v9[15] = a6;
  v9[16] = a7;
  v9[13] = a4;
  v9[14] = a5;
  v9[11] = a2;
  v9[12] = a3;
  v9[10] = a1;
  OUTLINED_FUNCTION_2();
  v9[19] = v10;
  v9[20] = *v8;
  return OUTLINED_FUNCTION_21_1((uint64_t)CallingIntentConfirmationFlowStrategy.makePromptForConfirmationOutput(app:itemToConfirm:intent:parameterName:intentResolutionResult:crrOutputGenerator:));
}

uint64_t CallingIntentConfirmationFlowStrategy.makePromptForConfirmationOutput(app:itemToConfirm:intent:parameterName:intentResolutionResult:crrOutputGenerator:)()
{
  uint64_t v1 = v0[18];
  outlined init with copy of Any(v0[12], (uint64_t)(v0 + 2));
  type metadata accessor for INPerson();
  if (swift_dynamicCast()) {
    uint64_t v2 = (void *)v0[9];
  }
  else {
    uint64_t v2 = 0;
  }
  unint64_t v3 = (void **)(v1 + direct field offset for CallingIntentConfirmationFlowStrategy.personToConfirm);
  OUTLINED_FUNCTION_38();
  swift_beginAccess();
  uint64_t v4 = *v3;
  *unint64_t v3 = v2;

  swift_getAssociatedTypeWitness();
  OUTLINED_FUNCTION_38();
  uint64_t v5 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v6 = *(void *)(v5 + 8);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
  uint64_t v8 = swift_checkMetadataState();
  unint64_t v9 = v7(v8, v6);
  if (!v9) {
    goto LABEL_13;
  }
  unint64_t v10 = v9;
  if (!(v9 >> 62))
  {
    if (*(void *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFFF8))) {
      goto LABEL_7;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_12;
  }
LABEL_7:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v10 & 0xC000000000000001) == 0);
  if ((v10 & 0xC000000000000001) != 0) {
    id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v11 = *(id *)(v10 + 32);
  }
  id v12 = v11;
  swift_bridgeObjectRelease();
  id v13 = [v12 personHandle];

  if (v13)
  {
    [v13 isSuggested];
  }
LABEL_13:
  uint64_t v14 = v0[18];
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)(v5 + 16) + 8))(v8);
  v0[21] = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 328))(v15);
  swift_task_alloc();
  OUTLINED_FUNCTION_31_2();
  v0[22] = v16;
  *id v16 = v17;
  v16[1] = CallingIntentConfirmationFlowStrategy.makePromptForConfirmationOutput(app:itemToConfirm:intent:parameterName:intentResolutionResult:crrOutputGenerator:);
  OUTLINED_FUNCTION_4_3();
  return static CallingIntentConfirmationFlowStrategy.makePromptForConfirmationOutput(app:intent:isFoundInAppConfirmation:preferredCallProvider:sharedGlobals:parameterName:intentResolutionResult:startCallCATsSimple:phoneCallDisplayTextCATsSimple:responseGenerator:personToConfirm:crrOutputGenerator:)();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v2 = *(void **)(v1 + 168);
  unint64_t v3 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v4 = v3;
  swift_task_dealloc();

  OUTLINED_FUNCTION_47_0();
  return v5();
}

uint64_t static CallingIntentConfirmationFlowStrategy.makePromptForConfirmationOutput(app:intent:isFoundInAppConfirmation:preferredCallProvider:sharedGlobals:parameterName:intentResolutionResult:startCallCATsSimple:phoneCallDisplayTextCATsSimple:responseGenerator:personToConfirm:crrOutputGenerator:)()
{
  OUTLINED_FUNCTION_1_0();
  *(void *)(v1 + 376) = v30;
  *(void *)(v1 + 384) = v0;
  *(void *)(v1 + 368) = v29;
  *(_OWORD *)(v1 + 336) = v27;
  *(_OWORD *)(v1 + 352) = v28;
  *(void *)(v1 + 320) = v2;
  *(void *)(v1 + 328) = v3;
  *(void *)(v1 + 304) = v4;
  *(void *)(v1 + 312) = v5;
  *(unsigned char *)(v1 + 680) = v6;
  *(void *)(v1 + 288) = v7;
  *(void *)(v1 + 296) = v8;
  *(void *)(v1 + 280) = v9;
  uint64_t v10 = type metadata accessor for PhoneError();
  *(void *)(v1 + 392) = v10;
  OUTLINED_FUNCTION_11_0(v10);
  *(void *)(v1 + 400) = OUTLINED_FUNCTION_35();
  uint64_t v11 = type metadata accessor for ContactConfirmationModel();
  *(void *)(v1 + 408) = v11;
  OUTLINED_FUNCTION_11_0(v11);
  *(void *)(v1 + 416) = OUTLINED_FUNCTION_35();
  uint64_t v12 = type metadata accessor for YesNoConfirmationModel();
  OUTLINED_FUNCTION_11_0(v12);
  *(void *)(v1 + 424) = OUTLINED_FUNCTION_35();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v13);
  *(void *)(v1 + 432) = swift_task_alloc();
  *(void *)(v1 + 440) = swift_task_alloc();
  *(void *)(v1 + 448) = swift_task_alloc();
  uint64_t v14 = type metadata accessor for Locale();
  *(void *)(v1 + 456) = v14;
  OUTLINED_FUNCTION_19_0(v14);
  *(void *)(v1 + 464) = v15;
  *(void *)(v1 + 472) = OUTLINED_FUNCTION_35();
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_11_0(v16);
  *(void *)(v1 + 480) = swift_task_alloc();
  *(void *)(v1 + 488) = swift_task_alloc();
  uint64_t v17 = type metadata accessor for NLContextUpdate();
  *(void *)(v1 + 496) = v17;
  OUTLINED_FUNCTION_19_0(v17);
  *(void *)(v1 + 504) = v18;
  *(void *)(v1 + 512) = OUTLINED_FUNCTION_35();
  uint64_t v19 = type metadata accessor for DialogPhase();
  OUTLINED_FUNCTION_11_0(v19);
  *(void *)(v1 + 520) = OUTLINED_FUNCTION_35();
  uint64_t v20 = type metadata accessor for OutputGenerationManifest();
  *(void *)(v1 + 528) = v20;
  OUTLINED_FUNCTION_19_0(v20);
  *(void *)(v1 + 536) = v21;
  *(void *)(v1 + 544) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v22, v23, v24);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_18_3();
  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_7();
  *char v6 = v5;
  *(void *)(v8 + 600) = v7;
  *(void *)(v8 + 608) = v0;
  swift_task_dealloc();
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(*(void *)(v2 + 448), &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  char v4;
  void *v5;
  os_log_type_t v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  OUTLINED_FUNCTION_18_3();
  __swift_project_boxed_opaque_existential_1(*(void **)(v0 + 312), *(void *)(*(void *)(v0 + 312) + 24));
  uint64_t v1 = OUTLINED_FUNCTION_38();
  uint64_t v3 = v2(v1);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 248))(v3);
  swift_release();
  if (v4)
  {
    outlined init with copy of ConfirmationResponse?(*(void *)(v0 + 376), v0 + 216, &demangling cache variable for type metadata for ContactResolutionSnippetGenerating?);
    if (*(void *)(v0 + 240))
    {
      outlined init with take of AppSelectionSignalComponent((long long *)(v0 + 216), v0 + 16);
    }
    else
    {
      type metadata accessor for CATGlobals();
      swift_bridgeObjectRetain();
      CATGlobals.__allocating_init()();
      uint64_t v16 = type metadata accessor for ContactResolutionSnippetGenerator();
      swift_allocObject();
      uint64_t v17 = ContactResolutionSnippetGenerator.init(appBundleId:globals:)();
      *(void *)(v0 + 40) = v16;
      *(void *)(v0 + 48) = &protocol witness table for ContactResolutionSnippetGenerator;
      *(void *)(v0 + 16) = v17;
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v0 + 216, &demangling cache variable for type metadata for ContactResolutionSnippetGenerating?);
    }
    uint64_t v18 = *(void *)(v0 + 368);
    uint64_t v19 = *(void *)(v0 + 304);
    swift_task_alloc();
    OUTLINED_FUNCTION_31_2();
    *(void *)(v0 + 616) = v20;
    *uint64_t v20 = v21;
    v20[1] = static CallingIntentConfirmationFlowStrategy.makePromptForConfirmationOutput(app:intent:isFoundInAppConfirmation:preferredCallProvider:sharedGlobals:parameterName:intentResolutionResult:startCallCATsSimple:phoneCallDisplayTextCATsSimple:responseGenerator:personToConfirm:crrOutputGenerator:);
    uint64_t v22 = *(void *)(v0 + 600);
    uint64_t v23 = *(void *)(v0 + 544);
    uint64_t v24 = *(void *)(v0 + 360);
    os_log_type_t v25 = *(void *)(v0 + 312);
    uint64_t v26 = *(void *)(v0 + 280);
    return static CallingIntentConfirmationFlowStrategy.getYesNoClarificationContactName(sharedGlobals:outputManifest:responseGenerator:crrOutputGenerator:contactToConfirm:dialogOverride:isFaceTime:)(v26, v25, v23, v24, v0 + 16, v18, v22, v19 == 2);
  }
  else
  {
    uint64_t v5 = (void *)Logger.logObject.getter();
    char v6 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_18(v6))
    {
      uint64_t v7 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_32_2(v7);
      OUTLINED_FUNCTION_25_4(&dword_0, v8, v9, "#CallingIntentConfirmationFlowStrategy makePromptForConfirmationOutput: confirming");
      OUTLINED_FUNCTION_6();
    }
    uint64_t v10 = *(void **)(v0 + 368);

    uint64_t v11 = [v10 contactIdentifier];
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v15 = v14;
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v15 = 0xE000000000000000;
    }
    *(void *)(v0 + 640) = v15;
    *(void *)(v0 + 632) = v13;
    swift_task_alloc();
    OUTLINED_FUNCTION_31_2();
    *(void *)(v0 + 648) = v28;
    *long long v28 = v29;
    v28[1] = static CallingIntentConfirmationFlowStrategy.makePromptForConfirmationOutput(app:intent:isFoundInAppConfirmation:preferredCallProvider:sharedGlobals:parameterName:intentResolutionResult:startCallCATsSimple:phoneCallDisplayTextCATsSimple:responseGenerator:personToConfirm:crrOutputGenerator:);
    uint64_t v30 = *(void *)(v0 + 424);
    id v31 = *(void *)(v0 + 352);
    return static CallingIntentConfirmationFlowStrategy.buildYesNoConfirmationModel(phoneCallDisplayTextCATsSimple:)(v30, v31);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_2();
  void *v5 = v4;
  *(void *)(v6 + 624) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_2();
  *char v6 = v5;
  *(void *)(v3 + 656) = v0;
  swift_task_dealloc();
  if (v0) {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  int EnumTagSinglePayload;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  int *v20;
  void *v21;
  Swift::Bool v22;
  char *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;

  if (!v0[72])
  {
    uint64_t v35 = 0xE000000000000000;
    unint64_t v36 = 0;
LABEL_9:
    id v37 = 0xE000000000000000;
    uint64_t v38 = 0;
    goto LABEL_11;
  }
  uint64_t v1 = v0[55];
  swift_retain();
  dispatch thunk of DialogPerson.simpleName.getter();
  swift_release();
  uint64_t v2 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v1, 1, v2);
  uint64_t v4 = v0[55];
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v0[55], &demangling cache variable for type metadata for SpeakableString?);
    uint64_t v5 = 0;
    char v6 = 0xE000000000000000;
  }
  else
  {
    uint64_t v5 = SpeakableString.print.getter();
    char v6 = v7;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v4, v2);
  }
  swift_retain();
  uint64_t v8 = DialogPerson.personHandle.getter();
  swift_release();
  uint64_t v35 = v6;
  unint64_t v36 = v5;
  if (!v8) {
    goto LABEL_9;
  }
  uint64_t v9 = v0[54];
  DialogPersonHandle.label.getter();
  swift_release();
  uint64_t v10 = __swift_getEnumTagSinglePayload(v9, 1, v2);
  uint64_t v11 = v0[54];
  if (v10 == 1)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v0[54], &demangling cache variable for type metadata for SpeakableString?);
    goto LABEL_9;
  }
  uint64_t v12 = SpeakableString.print.getter();
  id v37 = v13;
  uint64_t v38 = v12;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v11, v2);
LABEL_11:
  uint64_t v14 = v0[80];
  uint64_t v15 = v0[79];
  uint64_t v39 = (void *)v0[75];
  uint64_t v16 = v0[71];
  uint64_t v17 = v0[70];
  uint64_t v18 = (void *)v0[52];
  uint64_t v19 = v0[53];
  uint64_t v20 = (int *)v0[51];
  uint64_t v21 = (void *)v0[45];
  swift_bridgeObjectRetain();
  uint64_t v22 = App.isFirstParty()();
  _s27PhoneCallFlowDelegatePlugin22YesNoConfirmationModelVWOcTm_0(v19, (uint64_t)v18 + v20[6], (void (*)(void))type metadata accessor for YesNoConfirmationModel);
  *uint64_t v18 = 0xD000000000000013;
  v18[1] = 0x8000000000491270;
  v18[2] = v17;
  v18[3] = v16;
  uint64_t v23 = (char *)v18 + v20[7];
  *(void *)uint64_t v23 = v17;
  *((void *)v23 + 1) = v16;
  *((void *)v23 + 2) = v15;
  *((void *)v23 + 3) = v14;
  *((void *)v23 + 4) = v36;
  *((void *)v23 + 5) = v35;
  *((void *)v23 + 6) = v38;
  *((void *)v23 + 7) = v37;
  v23[64] = v22;
  uint64_t v24 = (void *)((char *)v18 + v20[8]);
  *uint64_t v24 = 0;
  v24[1] = 0;
  os_log_type_t v25 = v21[3];
  uint64_t v26 = v21[4];
  __swift_project_boxed_opaque_existential_1(v21, v25);
  v0[20] = type metadata accessor for PhoneSnippetDataModels();
  v0[21] = _s11SiriKitFlow20ConfirmationResponseOACSQAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels and conformance PhoneSnippetDataModels, (void (*)(uint64_t))type metadata accessor for PhoneSnippetDataModels);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 17);
  _s27PhoneCallFlowDelegatePlugin22YesNoConfirmationModelVWOcTm_0((uint64_t)v18, (uint64_t)boxed_opaque_existential_1, (void (*)(void))type metadata accessor for ContactConfirmationModel);
  swift_storeEnumTagMultiPayload();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  long long v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_46A030;
  *(void *)(v28 + 32) = v39;
  uint64_t v40 = v28;
  specialized Array._endMutation()();
  v0[83] = v40;
  swift_bridgeObjectRetain();
  uint64_t v29 = v39;
  swift_task_alloc();
  OUTLINED_FUNCTION_31_2();
  v0[84] = (uint64_t)v30;
  uint8_t *v30 = v31;
  v30[1] = static CallingIntentConfirmationFlowStrategy.makePromptForConfirmationOutput(app:intent:isFoundInAppConfirmation:preferredCallProvider:sharedGlobals:parameterName:intentResolutionResult:startCallCATsSimple:phoneCallDisplayTextCATsSimple:responseGenerator:personToConfirm:crrOutputGenerator:);
  uint64_t v32 = v0[68];
  uint64_t v33 = v0[35];
  return dispatch thunk of ResponseGenerating.makeResponseOutput(resultModel:dialog:outputGenerationManifest:)(v33, v0 + 17, v40, v32, v25, v26);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 136;
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_4_2();
  void *v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v3);
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v6, v7, v8);
}

void static CallingIntentConfirmationFlowStrategy.makePromptForConfirmationOutput(app:intent:isFoundInAppConfirmation:preferredCallProvider:sharedGlobals:parameterName:intentResolutionResult:startCallCATsSimple:phoneCallDisplayTextCATsSimple:responseGenerator:personToConfirm:crrOutputGenerator:)()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[42];
  uint64_t v2 = type metadata accessor for Logger();
  v0[69] = __swift_project_value_buffer(v2, (uint64_t)static Logger.siriPhone);
  swift_bridgeObjectRetain_n();
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  unint64_t v8 = v0[41];
  uint64_t v7 = (void *)v0[42];
  if (v6)
  {
    uint64_t v9 = v0[40];
    uint64_t v10 = swift_slowAlloc();
    v56[0] = OUTLINED_FUNCTION_14_0();
    *(_DWORD *)uint64_t v10 = 136315394;
    swift_bridgeObjectRetain();
    v0[33] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v8, v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v10 + 12) = 2048;
    id v11 = [v7 confirmationReason];

    v0[34] = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_0, v4, v5, "#CallingIntentConfirmationFlowStrategy makePromptForConfirmationOutput: for parameter %s with confirmationReason=%ld", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }

  uint64_t v12 = (void *)v0[46];
  if (v12)
  {
    id v13 = v12;
    uint64_t v14 = App.appIdentifier.getter();
    if (v15) {
      uint64_t v16 = v14;
    }
    else {
      uint64_t v16 = 0;
    }
    if (v15) {
      unint64_t v17 = v15;
    }
    else {
      unint64_t v17 = 0xE000000000000000;
    }
    if (App.isFirstParty()())
    {
      uint64_t v19 = v0[38];
      uint64_t v18 = (void *)v0[39];
      uint64_t v20 = v18[3];
      uint64_t v21 = v18[4];
      __swift_project_boxed_opaque_existential_1(v18, v20);
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v21);
      uint64_t v16 = static UserFacingCallingAppUtils.getAppBundleId(preferredCallProvider:deviceState:)(v19, v0 + 22);
      unint64_t v23 = v22;
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 22));
      unint64_t v17 = v23;
    }
    v0[71] = v17;
    v0[70] = v16;
    uint64_t v25 = v0[61];
    uint64_t v24 = v0[62];
    static DialogPhase.confirmation.getter();
    OutputGenerationManifest.init(dialogPhase:_:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallNLContextProvider<INIntent, INIntentResponse>);
    specialized static PhoneCallNLContextProvider.needsConfirmationContext(parameter:resolutionResult:)();
    if (__swift_getEnumTagSinglePayload(v25, 1, v24) == 1)
    {
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v0[61], &demangling cache variable for type metadata for NLContextUpdate?);
      uint64_t v26 = (void *)Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_18(v27))
      {
        long long v28 = (_WORD *)OUTLINED_FUNCTION_7_2();
        OUTLINED_FUNCTION_32_2(v28);
        OUTLINED_FUNCTION_25_4(&dword_0, v29, v30, "#CallingIntentConfirmationFlowStrategy makePromptForConfirmationOutput: unable to build NL context update.");
        OUTLINED_FUNCTION_6();
      }
    }
    else
    {
      uint64_t v39 = v0[63];
      uint64_t v38 = v0[64];
      uint64_t v40 = v0[62];
      uint64_t v41 = v0[60];
      (*(void (**)(uint64_t, void, uint64_t))(v39 + 32))(v38, v0[61], v40);
      id v42 = [objc_allocWithZone((Class)SAAceConfirmationContext) init];
      [v42 setReason:SAAceConfirmationReasonCONFIRM_CONTACTValue];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v43 = swift_allocObject();
      *(_OWORD *)(v43 + 16) = xmmword_46A030;
      *(void *)(v43 + 32) = v42;
      v56[0] = v43;
      specialized Array._endMutation()();
      id v44 = v42;
      NLContextUpdate.conversationStateAttachments.setter();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v41, v38, v40);
      __swift_storeEnumTagSinglePayload(v41, 0, 1, v40);
      OutputGenerationManifest.nlContextUpdate.setter();

      uint64_t v45 = OUTLINED_FUNCTION_38();
      v46(v45);
    }
    uint64_t v48 = v0[58];
    uint64_t v47 = v0[59];
    uint64_t v55 = v0[56];
    uint64_t v49 = (void *)v0[46];
    uint64_t v54 = v0[57];
    type metadata accessor for PhonePerson(0);
    static Device.current.getter();
    OUTLINED_FUNCTION_45_27(v0 + 7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
    v0[72] = static PhonePerson.make(phonePerson:options:locale:)(v49, 0, v47);
    uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
    v50(v47, v54);
    swift_retain();
    static Device.current.getter();
    OUTLINED_FUNCTION_45_27(v0 + 12);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 12));
    v0[73] = static PhonePerson.make(phonePerson:options:locale:)(v49, 0, v47);
    v50(v47, v54);
    static CallingIntentConfirmationFlowStrategy.getContactsInferenceSource(intent:)(v55);
    uint64_t v51 = (void *)swift_task_alloc();
    v0[74] = v51;
    *uint64_t v51 = v0;
    v51[1] = static CallingIntentConfirmationFlowStrategy.makePromptForConfirmationOutput(app:intent:isFoundInAppConfirmation:preferredCallProvider:sharedGlobals:parameterName:intentResolutionResult:startCallCATsSimple:phoneCallDisplayTextCATsSimple:responseGenerator:personToConfirm:crrOutputGenerator:);
    OUTLINED_FUNCTION_28_3();
    __asm { BRAA            X7, X16 }
  }
  id v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)OUTLINED_FUNCTION_47();
    v56[0] = OUTLINED_FUNCTION_14_0();
    *(_DWORD *)uint64_t v33 = 136315138;
    v0[32] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000F6, 0x800000000049DBD0, v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v31, v32, "#%s: No item to confirm.", v33, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }

  uint64_t v34 = v0[50];
  swift_storeEnumTagMultiPayload();
  _s11SiriKitFlow20ConfirmationResponseOACSQAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError, (void (*)(uint64_t))type metadata accessor for PhoneError);
  swift_allocError();
  PhoneError.logged()(v35);
  _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_12(v34, (void (*)(void))type metadata accessor for PhoneError);
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_28_3();
  __asm { BRAA            X1, X16 }
}

uint64_t static CallingIntentConfirmationFlowStrategy.makePromptForConfirmationOutput(app:intent:isFoundInAppConfirmation:preferredCallProvider:sharedGlobals:parameterName:intentResolutionResult:startCallCATsSimple:phoneCallDisplayTextCATsSimple:responseGenerator:personToConfirm:crrOutputGenerator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_30_12();
  OUTLINED_FUNCTION_22_59();
  swift_bridgeObjectRelease();
  swift_release();

  uint64_t v16 = OUTLINED_FUNCTION_34_36();
  v17(v16);
  __swift_destroy_boxed_opaque_existential_1(v14);
  OUTLINED_FUNCTION_17_46();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_28_1();
  return v19(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10, a11, a12, a13, a14);
}

{
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_30_12();
  OUTLINED_FUNCTION_43_33();
  uint64_t v16 = v15[67];
  unint64_t v17 = v15[66];
  uint64_t v19 = v15[52];
  uint64_t v18 = v15[53];
  uint64_t v20 = (void *)v15[46];

  swift_bridgeObjectRelease();
  swift_release();

  _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_12(v19, (void (*)(void))type metadata accessor for ContactConfirmationModel);
  _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_12(v18, (void (*)(void))type metadata accessor for YesNoConfirmationModel);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v17);
  OUTLINED_FUNCTION_17_46();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_28_1();
  return v23(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10, a11, a12, a13, a14);
}

{
  uint64_t v14;
  void *v15;
  void (*v16)(void);
  uint64_t v17;
  uint64_t (*v18)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_30_12();
  unint64_t v15 = *(void **)(v14 + 368);
  swift_bridgeObjectRelease();
  swift_release();

  OUTLINED_FUNCTION_38();
  OUTLINED_FUNCTION_3_23();
  v16();
  OUTLINED_FUNCTION_6_101();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_22_15();
  OUTLINED_FUNCTION_28_1();
  return v18(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10, a11, a12, a13, a14);
}

{
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  uint64_t v18;
  uint64_t (*v19)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_30_12();
  OUTLINED_FUNCTION_22_59();
  swift_bridgeObjectRelease();
  swift_release();

  uint64_t v16 = OUTLINED_FUNCTION_34_36();
  v17(v16);
  __swift_destroy_boxed_opaque_existential_1(v14);
  OUTLINED_FUNCTION_6_101();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_22_15();
  OUTLINED_FUNCTION_28_1();
  return v19(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10, a11, a12, a13, a14);
}

{
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t (*v20)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_30_12();
  OUTLINED_FUNCTION_43_33();
  unint64_t v15 = *(void **)(v14 + 368);

  swift_bridgeObjectRelease();
  swift_release();

  unint64_t v17 = OUTLINED_FUNCTION_27_32();
  v18(v17);
  OUTLINED_FUNCTION_6_101();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_22_15();
  OUTLINED_FUNCTION_28_1();
  return v20(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10, a11, a12, a13, a14);
}

uint64_t closure #1 in static CallingIntentConfirmationFlowStrategy.makePromptForConfirmationOutput(app:intent:isFoundInAppConfirmation:preferredCallProvider:sharedGlobals:parameterName:intentResolutionResult:startCallCATsSimple:phoneCallDisplayTextCATsSimple:responseGenerator:personToConfirm:crrOutputGenerator:)()
{
  return OutputGenerationManifest.responseViewId.setter();
}

uint64_t static CallingIntentConfirmationFlowStrategy.getContactsInferenceSource(intent:)@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness() + 8) + 8);
  id v3 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8);
  uint64_t v4 = swift_checkMetadataState();
  unint64_t v5 = v3(v4, v2);
  if (v5)
  {
    unint64_t v6 = v5;
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v7 = *(void *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFFF8));
    }
    if (v7 == 1
      && ((specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v6 & 0xC000000000000001) == 0),
           (v6 & 0xC000000000000001) != 0)
        ? (id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)())
        : (id v8 = *(id *)(v6 + 32)),
          uint64_t v9 = v8,
          id v10 = [v8 siriMatches],
          v9,
          v10))
    {
      type metadata accessor for INPerson();
      uint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v11 & 0xC000000000000001) == 0);
      if ((v11 & 0xC000000000000001) != 0) {
        id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v12 = *(id *)(v11 + 32);
      }
      id v13 = v12;
      swift_bridgeObjectRelease();
      if (INPerson.isProvidedByPlus.getter())
      {
        if (one-time initialization token for siriPhone != -1) {
          swift_once();
        }
        uint64_t v14 = type metadata accessor for Logger();
        __swift_project_value_buffer(v14, (uint64_t)static Logger.siriPhone);
        swift_bridgeObjectRetain();
        unint64_t v15 = Logger.logObject.getter();
        os_log_type_t v16 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v15, v16))
        {
          unint64_t v17 = (uint8_t *)swift_slowAlloc();
          uint64_t v18 = (void *)swift_slowAlloc();
          *(_DWORD *)unint64_t v17 = 138412290;
          if ((v6 & 0xC000000000000001) != 0) {
            id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v19 = *(id *)(v6 + 32);
          }
          id v22 = v19;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v18 = v22;
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_0, v15, v16, "#CallingIntentConfirmationFlowStrategy Found a contact that is inferred by PLUS: %@", v17, 0xCu);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        SpeakableString.init(print:speak:)();

        uint64_t v23 = type metadata accessor for SpeakableString();
        return __swift_storeEnumTagSinglePayload(a1, 0, 1, v23);
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v20 = type metadata accessor for SpeakableString();

  return __swift_storeEnumTagSinglePayload(a1, 1, 1, v20);
}

uint64_t static CallingIntentConfirmationFlowStrategy.getYesNoClarificationContactName(sharedGlobals:outputManifest:responseGenerator:crrOutputGenerator:contactToConfirm:dialogOverride:isFaceTime:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  *(unsigned char *)(v8 + 96) = a8;
  *(void *)(v8 + 40) = a6;
  *(void *)(v8 + 48) = a7;
  *(void *)(v8 + 24) = a3;
  *(void *)(v8 + 32) = a5;
  *(void *)(v8 + 16) = a1;
  uint64_t v9 = type metadata accessor for ContactResolutionVerb();
  *(void *)(v8 + 56) = v9;
  *(void *)(v8 + 64) = *(void *)(v9 - 8);
  *(void *)(v8 + 72) = swift_task_alloc();
  return _swift_task_switch(static CallingIntentConfirmationFlowStrategy.getYesNoClarificationContactName(sharedGlobals:outputManifest:responseGenerator:crrOutputGenerator:contactToConfirm:dialogOverride:isFaceTime:), 0, 0);
}

uint64_t static CallingIntentConfirmationFlowStrategy.getYesNoClarificationContactName(sharedGlobals:outputManifest:responseGenerator:crrOutputGenerator:contactToConfirm:dialogOverride:isFaceTime:)()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_25_0(v1, (uint64_t)static Logger.siriPhone);
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_8_2(v3))
  {
    uint64_t v4 = (_WORD *)OUTLINED_FUNCTION_7_2();
    OUTLINED_FUNCTION_32_2(v4);
    OUTLINED_FUNCTION_1_3(&dword_0, v5, v6, "#CallingIntentConfirmationFlowStrategy getYesNoClarificationContactName: confirming by using output result generator");
    OUTLINED_FUNCTION_6();
  }
  uint64_t v8 = *(void *)(v0 + 64);
  uint64_t v7 = *(void *)(v0 + 72);
  int v9 = *(unsigned __int8 *)(v0 + 96);
  uint64_t v10 = *(void *)(v0 + 56);
  uint64_t v11 = *(void **)(v0 + 32);

  __swift_project_boxed_opaque_existential_1(v11, v11[3]);
  id v12 = (unsigned int *)&enum case for ContactResolutionVerb.facetime(_:);
  if (!v9) {
    id v12 = (unsigned int *)&enum case for ContactResolutionVerb.phoneCallOrFacetimeAudio(_:);
  }
  (*(void (**)(uint64_t, void, uint64_t))(v8 + 104))(v7, *v12, v10);
  swift_task_alloc();
  OUTLINED_FUNCTION_31_2();
  *(void *)(v0 + 80) = v13;
  *id v13 = v14;
  v13[1] = static CallingIntentConfirmationFlowStrategy.getYesNoClarificationContactName(sharedGlobals:outputManifest:responseGenerator:crrOutputGenerator:contactToConfirm:dialogOverride:isFaceTime:);
  OUTLINED_FUNCTION_4_3();
  return dispatch thunk of ContactResolutionSnippetGenerating.generateYesNoClarificationContactName(contact:contactVerb:primaryButtonInvocationID:secondaryButtonInvocationID:dialogOverride:outputGenerationManifest:)(v15);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v14;

  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_0_1();
  os_log_type_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  *(void *)(v3 + 88) = v0;
  swift_task_dealloc();
  uint64_t v7 = OUTLINED_FUNCTION_27_32();
  v8(v7);
  if (v0)
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v9, v10, v11);
  }
  else
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_47_0();
    return v12();
  }
}

uint64_t static CallingIntentConfirmationFlowStrategy.buildYesNoConfirmationModel(phoneCallDisplayTextCATsSimple:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 1376) = a2;
  *(void *)(v2 + 1368) = a1;
  return _swift_task_switch(static CallingIntentConfirmationFlowStrategy.buildYesNoConfirmationModel(phoneCallDisplayTextCATsSimple:), 0, 0);
}

uint64_t static CallingIntentConfirmationFlowStrategy.buildYesNoConfirmationModel(phoneCallDisplayTextCATsSimple:)()
{
  *(void *)(v0 + 1384) = static SiriPhoneActionFactory.makeConfirmAndRejectActions()();
  *(void *)(v0 + 1392) = v1;
  swift_retain_n();
  swift_asyncLet_begin();
  swift_retain_n();
  swift_asyncLet_begin();
  return _swift_asyncLet_get_throwing(v0 + 656, v0 + 1352, static CallingIntentConfirmationFlowStrategy.buildYesNoConfirmationModel(phoneCallDisplayTextCATsSimple:), v0 + 1296);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  OUTLINED_FUNCTION_16_1();
  v1[175] = v0;
  if (v0)
  {
    return _swift_asyncLet_finish(v1 + 2);
  }
  else
  {
    v1[176] = v1[169];
    v1[177] = v1[170];
    swift_bridgeObjectRetain();
    return _swift_asyncLet_get_throwing(v1 + 2, v1 + 167, static CallingIntentConfirmationFlowStrategy.buildYesNoConfirmationModel(phoneCallDisplayTextCATsSimple:), v1 + 162);
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(void *)(v1 + 1424) = v0;
  if (v0) {
    return OUTLINED_FUNCTION_21_1((uint64_t)StartCallConfirmIntentFlowStrategy.buildYesNoConfirmationUnderRestrictionModel());
  }
  else {
    return OUTLINED_FUNCTION_21_1((uint64_t)static CallingIntentConfirmationFlowStrategy.buildYesNoConfirmationModel(phoneCallDisplayTextCATsSimple:));
  }
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v1 = (void *)v0[174];
  uint64_t v2 = (void *)v0[173];
  uint64_t v3 = v0[171];
  swift_bridgeObjectRetain();
  uint64_t v4 = v1;
  YesNoConfirmationModel.init(yesText:yesAction:noText:noAction:)(v2, v3);
  OUTLINED_FUNCTION_4_3();
  return _swift_asyncLet_finish(v5);
}

uint64_t implicit closure #1 in static CallingIntentConfirmationFlowStrategy.buildYesNoConfirmationModel(phoneCallDisplayTextCATsSimple:)(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = swift_task_alloc();
  return _swift_task_switch(implicit closure #1 in static CallingIntentConfirmationFlowStrategy.buildYesNoConfirmationModel(phoneCallDisplayTextCATsSimple:), 0, 0);
}

uint64_t implicit closure #1 in static CallingIntentConfirmationFlowStrategy.buildYesNoConfirmationModel(phoneCallDisplayTextCATsSimple:)()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v1 = (void *)v0[3];
  uint64_t v2 = v0[4];
  uint64_t v3 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v2, 1, 1, v3);
  uint64_t v7 = (uint64_t (*)(uint64_t))(*(void *)(class metadata base offset for PhoneCallDisplayTextCATsSimple
                                                   + *v1
                                                   + 40)
                                       + **(int **)(class metadata base offset for PhoneCallDisplayTextCATsSimple
                                                  + *v1
                                                  + 40));
  uint64_t v4 = (void *)swift_task_alloc();
  v0[5] = v4;
  *uint64_t v4 = v0;
  v4[1] = implicit closure #1 in static CallingIntentConfirmationFlowStrategy.buildYesNoConfirmationModel(phoneCallDisplayTextCATsSimple:);
  uint64_t v5 = v0[4];
  return v7(v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_18_3();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v1;
  *(void *)(v5 + 48) = v0;
  swift_task_dealloc();
  uint64_t v7 = *(void *)(v4 + 32);
  if (!v0) {
    *(void *)(v5 + 56) = v3;
  }
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v7, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t implicit closure #2 in static CallingIntentConfirmationFlowStrategy.buildYesNoConfirmationModel(phoneCallDisplayTextCATsSimple:)(uint64_t a1, void *a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v5 = (uint64_t (*)(void))(*(void *)(class metadata base offset for PhoneCallDisplayTextCATsSimple + *a2 + 104)
                         + **(int **)(class metadata base offset for PhoneCallDisplayTextCATsSimple + *a2 + 104));
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v3;
  *uint64_t v3 = v2;
  v3[1] = implicit closure #2 in static SearchCallHistoryHelper.buildSearchCallHistoryCallCancelModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:);
  return v5();
}

void *CallingIntentConfirmationFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:startCallCATsSimple:phoneCallCommonCATs:phoneCallCommonCATsSimple:phoneCallCommonCatPatterns:phoneCallDisplayTextCATsSimple:responseGenerator:siriKitEventSender:appInfoBuilder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17 = v11 + direct field offset for CallingIntentConfirmationFlowStrategy.confirmationResponse;
  uint64_t v18 = type metadata accessor for ConfirmationResponse();
  __swift_storeEnumTagSinglePayload(v17, 1, 1, v18);
  *(void *)(v11 + direct field offset for CallingIntentConfirmationFlowStrategy.personToConfirm) = 0;
  outlined init with copy of SignalProviding(a3, (uint64_t)v28);
  outlined init with copy of SignalProviding(a7, (uint64_t)v27);
  outlined init with copy of SignalProviding(a9, (uint64_t)v26);
  outlined init with copy of SignalProviding(a10, (uint64_t)v25);
  outlined init with copy of SignalProviding(a11, (uint64_t)v24);
  id v19 = CallingIntentBaseFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:startCallCATsSimple:phoneCallCommonCATs:phoneCallCommonCATsSimple:phoneCallCommonCatPatterns:phoneCallDisplayTextCATsSimple:responseGenerator:siriKitEventSender:appInfoBuilder:)(a1, a2, (uint64_t)v28, a4, a5, a6, (uint64_t)v27, a8, (uint64_t)v26, (uint64_t)v25, v24);
  __swift_destroy_boxed_opaque_existential_1(a11);
  __swift_destroy_boxed_opaque_existential_1(a10);
  __swift_destroy_boxed_opaque_existential_1(a9);
  __swift_destroy_boxed_opaque_existential_1(a7);
  __swift_destroy_boxed_opaque_existential_1(a3);
  return v19;
}

void CallingIntentConfirmationFlowStrategy.__ivar_destroyer()
{
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v0 + direct field offset for CallingIntentConfirmationFlowStrategy.confirmationResponse, &demangling cache variable for type metadata for ConfirmationResponse?);
  uint64_t v1 = *(void **)(v0 + direct field offset for CallingIntentConfirmationFlowStrategy.personToConfirm);
}

uint64_t CallingIntentConfirmationFlowStrategy.deinit()
{
  uint64_t v0 = CallingIntentBaseFlowStrategy.deinit();
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v0 + direct field offset for CallingIntentConfirmationFlowStrategy.confirmationResponse, &demangling cache variable for type metadata for ConfirmationResponse?);

  return v0;
}

uint64_t CallingIntentConfirmationFlowStrategy.__deallocating_deinit()
{
  CallingIntentConfirmationFlowStrategy.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.authenticationPolicy.getter in conformance CallingIntentConfirmationFlowStrategy<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 296))();
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.actionForInput(_:resolveRecord:) in conformance CallingIntentConfirmationFlowStrategy<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 352))();
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.parseConfirmationResponse(input:resolveRecord:) in conformance CallingIntentConfirmationFlowStrategy<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(**(void **)v3 + 360)
                                                          + **(int **)(**(void **)v3 + 360));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = UnsupportedFlowCATs.deleteVoicemail();
  return v10(a1, a2, a3);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.shouldRequestUnlockForConfirmation(itemToConfirm:resolveRecord:) in conformance CallingIntentConfirmationFlowStrategy<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for CallingIntentConfirmationFlowStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for Flow.onAsync(input:) in conformance RedirectToCompanionFlow;
  return NeedsConfirmationFlowStrategyAsync.shouldRequestUnlockForConfirmation(itemToConfirm:resolveRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makePromptForConfirmation(itemToConfirm:resolveRecord:) in conformance CallingIntentConfirmationFlowStrategy<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(**(void **)v3 + 368)
                                                          + **(int **)(**(void **)v3 + 368));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return v10(a1, a2, a3);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:) in conformance CallingIntentConfirmationFlowStrategy<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for CallingIntentConfirmationFlowStrategy();
  *uint64_t v10 = v5;
  v10[1] = UnsupportedFlowCATs.deleteVoicemail();
  return NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:)(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:resolveRecord:) in conformance CallingIntentConfirmationFlowStrategy<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for CallingIntentConfirmationFlowStrategy();
  *uint64_t v10 = v5;
  v10[1] = UnsupportedFlowCATs.deleteVoicemail();
  return NeedsConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:resolveRecord:)(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:) in conformance CallingIntentConfirmationFlowStrategy<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for CallingIntentConfirmationFlowStrategy();
  *uint64_t v8 = v4;
  v8[1] = UnsupportedFlowCATs.deleteVoicemail();
  return NeedsConfirmationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:) in conformance CallingIntentConfirmationFlowStrategy<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for CallingIntentConfirmationFlowStrategy();
  *uint64_t v8 = v4;
  v8[1] = UnsupportedFlowCATs.deleteVoicemail();
  return NeedsConfirmationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makeConfirmationRejectedResponse(app:intent:parameter:) in conformance CallingIntentConfirmationFlowStrategy<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(**(void **)v4 + 376)
                                                                   + **(int **)(**(void **)v4 + 376));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = UnsupportedFlowCATs.deleteVoicemail();
  return v12(a1, a2, a3, a4);
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:) in conformance CallingIntentConfirmationFlowStrategy<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  uint64_t v13 = type metadata accessor for CallingIntentConfirmationFlowStrategy();
  *id v12 = v6;
  v12[1] = UnsupportedFlowCATs.deleteVoicemail();
  return ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:)(a1, a2, a3, a4, v13, a6);
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:) in conformance CallingIntentConfirmationFlowStrategy<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v14;
  uint64_t v15 = type metadata accessor for CallingIntentConfirmationFlowStrategy();
  *uint64_t v14 = v7;
  v14[1] = UnsupportedFlowCATs.deleteVoicemail();
  return ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:)(a1, a2, a3, a4, a5, v15, a7);
}

uint64_t outlined init with take of ConfirmationResponse?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of ConfirmationResponse?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t _s11SiriKitFlow20ConfirmationResponseOACSQAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_12(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_15();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t base witness table accessor for ParameterResolutionHandlingAsync in CallingIntentConfirmationFlowStrategy<A>()
{
  return swift_getWitnessTable();
}

uint64_t sub_45601C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 328))();
  *a2 = result;
  return result;
}

uint64_t sub_456074()
{
  return 16;
}

__n128 sub_456080(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void type metadata completion function for CallingIntentConfirmationFlowStrategy()
{
  type metadata accessor for ConfirmationResponse?();
  if (v0 <= 0x3F) {
    swift_initClassMetadata2();
  }
}

uint64_t type metadata accessor for CallingIntentConfirmationFlowStrategy()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for ConfirmationResponse?()
{
  if (!lazy cache variable for type metadata for ConfirmationResponse?)
  {
    type metadata accessor for ConfirmationResponse();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ConfirmationResponse?);
    }
  }
}

uint64_t partial apply for implicit closure #1 in static CallingIntentConfirmationFlowStrategy.buildYesNoConfirmationModel(phoneCallDisplayTextCATsSimple:)()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v3 = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = UnsupportedFlowCATs.deleteVoicemail();
  return implicit closure #1 in static CallingIntentConfirmationFlowStrategy.buildYesNoConfirmationModel(phoneCallDisplayTextCATsSimple:)(v3, v0);
}

uint64_t partial apply for implicit closure #2 in static CallingIntentConfirmationFlowStrategy.buildYesNoConfirmationModel(phoneCallDisplayTextCATsSimple:)()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v3 = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return implicit closure #2 in static CallingIntentConfirmationFlowStrategy.buildYesNoConfirmationModel(phoneCallDisplayTextCATsSimple:)(v3, v0);
}

uint64_t OUTLINED_FUNCTION_6_101()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_17_46()
{
  return swift_task_dealloc();
}

void OUTLINED_FUNCTION_22_59()
{
  uint64_t v2 = *(void **)(v0 + 600);
}

uint64_t OUTLINED_FUNCTION_34_36()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_45_27(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return dispatch thunk of DeviceState.siriLocale.getter();
}

uint64_t OUTLINED_FUNCTION_46_28()
{
  return v0;
}

uint64_t static StartCallViewBuilders.makeForeignEmergencyButtonsBuilder(templatingService:disambiguationList:sharedGlobals:isDirectInvocation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.siriPhone);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_0, v11, v12, "#StartCallViewBuilders Providing ForeignEmergencyButtonsBuilder", v13, 2u);
    swift_slowDealloc();
  }

  outlined init with copy of SignalProviding(a3, a5 + 16);
  *(void *)a5 = a1;
  *(void *)(a5 + 8) = a2;
  *(unsigned char *)(a5 + 56) = a4 & 1;
  swift_retain();

  return swift_retain();
}

void *_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay11SiriKitFlow0fG18DisambiguationItemCGG_So10SAUIButtonCs5NeverOTg506_sSi11fg9Flow0aB18ij5CSo10k32CIgygo_Si6offset_AC7elementtAEs5L11OIegnrzr_TRSiAjNIgygo_Tf1cn_n(unint64_t a1, void (*a2)(unint64_t, uint64_t))
{
  specialized ContiguousArray.reserveCapacity(_:)();
  if (a1 >> 62) {
    goto LABEL_13;
  }
  uint64_t v3 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  if (v3)
  {
    while (1)
    {
      unint64_t v4 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v5 = specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_7:
        unint64_t v6 = v4 + 1;
        if (__OFADD__(v4, 1)) {
          goto LABEL_12;
        }
        a2(v4, v5);
        swift_release();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        ++v4;
        if (v6 == v3) {
          goto LABEL_14;
        }
      }
      if (v4 < *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8))) {
        break;
      }
      __break(1u);
LABEL_12:
      __break(1u);
LABEL_13:
      swift_bridgeObjectRetain();
      uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
      if (!v3) {
        goto LABEL_14;
      }
    }
    uint64_t v5 = *(void *)(a1 + 8 * v4 + 32);
    swift_retain();
    goto LABEL_7;
  }
LABEL_14:
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t ForeignEmergencyButtonsBuilder.makeViewsForWatch(utteranceViews:_:)(uint64_t a1, void (*a2)(void))
{
  SiriKitDisambiguationList.disambiguationItems.getter();
  uint64_t v4 = v2[5];
  uint64_t v5 = v2[6];
  __swift_project_boxed_opaque_existential_1(v2 + 2, v4);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 8))(v10, v4, v5);
  __swift_project_boxed_opaque_existential_1(v10, v10[3]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  unint64_t v6 = (void *)static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetForWatch(disambiguationItems:textToSpeechIsEnabled:)();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  type metadata accessor for SiriKitAceViewBuilder();
  uint64_t v8 = v2[5];
  uint64_t v7 = v2[6];
  __swift_project_boxed_opaque_existential_1(v2 + 2, v8);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v10, v8, v7);
  dispatch thunk of static SiriKitAceViewBuilder.makeBuilder(deviceState:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  dispatch thunk of SiriKitAceViewBuilder.withUtteranceViews(utteranceViews:)();
  swift_release();
  dispatch thunk of SiriKitAceViewBuilder.addSnippet(snippet:)();
  swift_release();
  dispatch thunk of SiriKitAceViewBuilder.build()();
  swift_release();
  OUTLINED_FUNCTION_0_74();
  a2();

  return swift_bridgeObjectRelease();
}

uint64_t ForeignEmergencyButtonsBuilder.makeViewsForMac(utteranceViews:_:)(unint64_t a1, void (*a2)(void))
{
  if (a1 >> 62)
  {
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for SAAceView);
    swift_bridgeObjectRetain();
    _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for SAAceView);
  }
  OUTLINED_FUNCTION_0_74();
  a2();

  return swift_bridgeObjectRelease();
}

uint64_t ForeignEmergencyButtonsBuilder.makeViewsForCar(utteranceViews:_:)(unint64_t a1, void (*a2)(void))
{
  SiriKitDisambiguationList.disambiguationItems.getter();
  uint64_t v4 = (void *)static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetForCarPlay(disambiguationItems:deviceIsLocked:)();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_46A030;
  *(void *)(v5 + 32) = v4;
  specialized Array._endMutation()();
  if (a1 >> 62)
  {
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for SAAceView);
    id v8 = v4;
    swift_bridgeObjectRetain();
    _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v6 = v4;
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for SAAceView);
  }
  specialized Array.append<A>(contentsOf:)();
  OUTLINED_FUNCTION_0_74();
  a2();

  return swift_bridgeObjectRelease();
}

uint64_t ForeignEmergencyButtonsBuilder.makeViewsForIOS(utteranceViews:_:)(uint64_t a1, void (*a2)(uint64_t, void))
{
  uint64_t v4 = SiriKitDisambiguationList.rawItems.getter();
  specialized _arrayConditionalCast<A, B>(_:)(v4);
  swift_bridgeObjectRelease();
  unint64_t v5 = SiriKitDisambiguationList.disambiguationItems.getter();
  _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay11SiriKitFlow0fG18DisambiguationItemCGG_So10SAUIButtonCs5NeverOTg506_sSi11fg9Flow0aB18ij5CSo10k32CIgygo_Si6offset_AC7elementtAEs5L11OIegnrzr_TRSiAjNIgygo_Tf1cn_n(v5, (void (*)(unint64_t, uint64_t))partial apply for closure #1 in ForeignEmergencyButtonsBuilder.makeViewsForIOS(utteranceViews:_:));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for SiriKitAceViewBuilder();
  uint64_t v7 = v2[5];
  uint64_t v6 = v2[6];
  __swift_project_boxed_opaque_existential_1(v2 + 2, v7);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 8))(v10, v7, v6);
  dispatch thunk of static SiriKitAceViewBuilder.makeBuilder(deviceState:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  dispatch thunk of SiriKitAceViewBuilder.withUtteranceViews(utteranceViews:)();
  swift_release();
  dispatch thunk of SiriKitAceViewBuilder.withButtons(buttons:)();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v8 = dispatch thunk of SiriKitAceViewBuilder.build()();
  swift_release();
  a2(v8, 0);
  return swift_bridgeObjectRelease();
}

id closure #1 in ForeignEmergencyButtonsBuilder.makeViewsForIOS(utteranceViews:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a4) {
    goto LABEL_7;
  }
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(a1, (a4 & 0xC000000000000001) == 0, a4);
  if ((v4 & 0xC000000000000001) != 0) {
    id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v7 = *(id *)(v4 + 8 * a1 + 32);
  }
  uint64_t v8 = v7;
  id v9 = [v7 personHandle];

  if (!v9)
  {
    uint64_t v4 = 0;
LABEL_7:
    char v10 = 1;
    return ForeignEmergencyButtonsBuilder.makeButtonView(item:emergencyType:)(a2, v4, v10);
  }
  uint64_t v4 = (uint64_t)[v9 emergencyType];

  char v10 = 0;
  return ForeignEmergencyButtonsBuilder.makeButtonView(item:emergencyType:)(a2, v4, v10);
}

id ForeignEmergencyButtonsBuilder.makeButtonView(item:emergencyType:)(uint64_t a1, uint64_t a2, char a3)
{
  if (dispatch thunk of SiriKitDisambiguationItem.getFirstComponent()())
  {
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for SAUIButton);
    uint64_t v5 = SiriKitDisambiguationItemComponent.print.getter();
    uint64_t v7 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_46A030;
    *(void *)(v8 + 32) = ForeignEmergencyButtonsBuilder.getButtonCommands(_:)();
    specialized Array._endMutation()();
    id v9 = SAUIButton.init(text:commands:)(v5, v7, v8);
    if ((a3 & 1) == 0 && a2 == 1)
    {
      char v10 = (void *)static ColorFactory.white.getter();
      [v9 setTextColor:v10];

      uint64_t v11 = (void *)static ColorFactory.emergencyRed.getter();
      [v9 setBackgroundColor:v11];
    }
    swift_release();
    return v9;
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.siriPhone);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_0, v14, v15, "Missing first component display text for Foreign Emergency Disambiguation button", v16, 2u);
      swift_slowDealloc();
    }

    id v17 = objc_allocWithZone((Class)SAUIButton);
    return [v17 init];
  }
}

uint64_t ForeignEmergencyButtonsBuilder.getButtonCommands(_:)()
{
  if (*(unsigned char *)(v0 + 56) == 1 && (uint64_t v1 = SiriKitDisambiguationItem.directInvocation.getter()) != 0)
  {
    uint64_t v2 = (void *)v1;
    uint64_t v4 = *(void *)(v0 + 40);
    uint64_t v3 = *(void *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v4);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 8))(v7, v4, v3);
    uint64_t v5 = (uint64_t)SKIDirectInvocationPayload.toStartLocalRequest(deviceState:)(v7);

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  else
  {
    SiriKitDisambiguationItem.utterance.getter();
    uint64_t v5 = static CasinoFactory.makeSendCommandsFromMachineUtterance(machineUtterance:)();
    swift_bridgeObjectRelease();
  }
  return v5;
}

uint64_t protocol witness for IdiomSensitiveViewBuilder.makeViewsForMac(utteranceViews:_:) in conformance ForeignEmergencyButtonsBuilder(unint64_t a1, void (*a2)(void))
{
  return ForeignEmergencyButtonsBuilder.makeViewsForMac(utteranceViews:_:)(a1, a2);
}

_UNKNOWN **sub_456F7C()
{
  return &protocol witness table for ForeignEmergencyButtonsBuilder;
}

uint64_t destroy for ForeignEmergencyButtonsBuilder(uint64_t a1)
{
  swift_release();
  swift_release();

  return __swift_destroy_boxed_opaque_existential_1(a1 + 16);
}

uint64_t initializeWithCopy for ForeignEmergencyButtonsBuilder(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = a2 + 16;
  long long v6 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v6;
  uint64_t v7 = v6;
  uint64_t v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_retain();
  swift_retain();
  v8(a1 + 16, v5, v7);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t assignWithCopy for ForeignEmergencyButtonsBuilder(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for ForeignEmergencyButtonsBuilder(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for ForeignEmergencyButtonsBuilder(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 57))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ForeignEmergencyButtonsBuilder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 57) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ForeignEmergencyButtonsBuilder()
{
  return &type metadata for ForeignEmergencyButtonsBuilder;
}

uint64_t static EmergencyUtils.requiresEmergencyConfirmation(intent:intentResponse:)(void *a1, void *a2)
{
  uint64_t v3 = (char *)[a1 destinationType];
  id v4 = [a2 shouldDoEmergencyCountdown];
  type metadata accessor for NSNumber();
  v5.super.super.Class isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
  if (v4)
  {
    id v6 = v4;
    char v7 = static NSObject.== infix(_:_:)();
  }
  else
  {
    char v7 = 0;
  }

  return (v3 == (unsigned char *)&dword_0 + 2) | v7 & 1u;
}

uint64_t static EmergencyUtils.isForeignEmergencyDisambiguation(_:)(unint64_t a1)
{
  if (specialized Sequence.contains(where:)(a1, (char *)&dword_0 + 2)) {
    char v2 = specialized Sequence.contains(where:)(a1, (char *)&dword_0 + 1);
  }
  else {
    char v2 = 0;
  }
  return v2 & 1;
}

uint64_t static EmergencyUtils.isRegularEmergencyDisambiguation(_:)(unint64_t a1)
{
  return specialized Sequence.allSatisfy(_:)(a1, (char *)&dword_0 + 1) & 1;
}

uint64_t static EmergencyUtils.shouldShowEmergencyCountdown(intent:intentResponse:deviceState:)(void *a1, void *a2, uint64_t a3)
{
  char v5 = static EmergencyUtils.requiresEmergencyConfirmation(intent:intentResponse:)(a1, a2);
  outlined init with copy of SignalProviding(a3, (uint64_t)v8);
  if (v5) {
    char v6 = static EmergencyUtils.shouldOpenMicForEmergency(intent:deviceState:)(a1, (uint64_t)v8) ^ 1;
  }
  else {
    char v6 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v6 & 1;
}

uint64_t static EmergencyUtils.shouldConfirmEmergencyCallAsPrompt(intent:intentResponse:deviceState:)(void *a1, void *a2, uint64_t a3)
{
  char v5 = static EmergencyUtils.requiresEmergencyConfirmation(intent:intentResponse:)(a1, a2);
  outlined init with copy of SignalProviding(a3, (uint64_t)v8);
  if (v5) {
    char v6 = static EmergencyUtils.shouldOpenMicForEmergency(intent:deviceState:)(a1, (uint64_t)v8);
  }
  else {
    char v6 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v6 & 1;
}

id (*static EmergencyUtils.checkForEmergencyType(_:)(uint64_t a1))(void *a1)
{
  *(void *)(swift_allocObject() + 16) = a1;
  return partial apply for closure #1 in static EmergencyUtils.checkForEmergencyType(_:);
}

id closure #1 in static EmergencyUtils.checkForEmergencyType(_:)(void *a1, id a2)
{
  id result = [a1 personHandle];
  if (result)
  {
    id v4 = result;
    id v5 = [result emergencyType];

    return (id)(v5 == a2);
  }
  return result;
}

uint64_t static EmergencyUtils.shouldOpenMicForEmergency(intent:deviceState:)(void *a1, uint64_t a2)
{
  if ([a1 destinationType] == &dword_4)
  {
    outlined init with copy of SignalProviding(a2, (uint64_t)v11);
LABEL_4:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
    outlined init with copy of SignalProviding(a2, (uint64_t)v10);
LABEL_5:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    outlined init with copy of SignalProviding(a2, (uint64_t)v9);
    goto LABEL_6;
  }
  id v4 = (char *)[a1 destinationType];
  outlined init with copy of SignalProviding(a2, (uint64_t)v11);
  if (v4 == (unsigned char *)&dword_4 + 1) {
    goto LABEL_4;
  }
  __swift_project_boxed_opaque_existential_1(v11, v11[3]);
  char v7 = dispatch thunk of DeviceState.isHomePod.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  outlined init with copy of SignalProviding(a2, (uint64_t)v10);
  if (v7) {
    goto LABEL_5;
  }
  __swift_project_boxed_opaque_existential_1(v10, v10[3]);
  char v8 = dispatch thunk of DeviceState.isEyesFree.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  outlined init with copy of SignalProviding(a2, (uint64_t)v9);
  if ((v8 & 1) == 0)
  {
    __swift_project_boxed_opaque_existential_1(v9, v9[3]);
    char v5 = dispatch thunk of DeviceState.isCarDNDMode.getter();
    goto LABEL_7;
  }
LABEL_6:
  char v5 = 1;
LABEL_7:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  return v5 & 1;
}

uint64_t sub_457614()
{
  return _swift_deallocObject(v0, 24, 7);
}

id partial apply for closure #1 in static EmergencyUtils.checkForEmergencyType(_:)(void *a1)
{
  return closure #1 in static EmergencyUtils.checkForEmergencyType(_:)(a1, *(id *)(v1 + 16));
}

ValueMetadata *type metadata accessor for EmergencyUtils()
{
  return &type metadata for EmergencyUtils;
}

uint64_t PhoneIntentNoOpHandleIntentFlowStrategy.makeIntentHandledResponse(app:intent:intentResponse:_:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  type metadata accessor for EmptyOutput();
  static EmptyOutput.instance.getter();
  v6[40] = 0;
  a4(v6);
  return outlined destroy of Result<Output, Error>((uint64_t)v6);
}

uint64_t base witness table accessor for IntentExtensionCommunicating in PhoneIntentNoOpHandleIntentFlowStrategy<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t protocol witness for HandleIntentFlowStrategy.makePromptForDeviceUnlock(app:intent:intentResponse:_:) in conformance PhoneIntentNoOpHandleIntentFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return protocol witness for HandleIntentFlowStrategy.makePromptForDeviceUnlock(app:intent:intentResponse:_:) in conformance PhoneIntentNoOpHandleIntentFlowStrategy<A, B>(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&HandleIntentFlowStrategy.makePromptForDeviceUnlock(app:intent:intentResponse:_:));
}

uint64_t protocol witness for HandleIntentFlowStrategy.makeHandoffForAuthenticationResponse(app:intent:intentResponse:_:) in conformance PhoneIntentNoOpHandleIntentFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return protocol witness for HandleIntentFlowStrategy.makePromptForDeviceUnlock(app:intent:intentResponse:_:) in conformance PhoneIntentNoOpHandleIntentFlowStrategy<A, B>(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&HandleIntentFlowStrategy.makeHandoffForAuthenticationResponse(app:intent:intentResponse:_:));
}

uint64_t protocol witness for HandleIntentFlowStrategy.makePreHandleIntentOutput(app:intent:intentResponse:_:) in conformance PhoneIntentNoOpHandleIntentFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return protocol witness for HandleIntentFlowStrategy.makePromptForDeviceUnlock(app:intent:intentResponse:_:) in conformance PhoneIntentNoOpHandleIntentFlowStrategy<A, B>(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&HandleIntentFlowStrategy.makePreHandleIntentOutput(app:intent:intentResponse:_:));
}

uint64_t protocol witness for HandleIntentFlowStrategy.makeIntentHandledResponse(app:intent:intentResponse:_:) in conformance PhoneIntentNoOpHandleIntentFlowStrategy<A, B>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t protocol witness for HandleIntentFlowStrategy.makeContinueInAppResponse(app:intent:intentResponse:_:) in conformance PhoneIntentNoOpHandleIntentFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return protocol witness for HandleIntentFlowStrategy.makePromptForDeviceUnlock(app:intent:intentResponse:_:) in conformance PhoneIntentNoOpHandleIntentFlowStrategy<A, B>(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&HandleIntentFlowStrategy.makeContinueInAppResponse(app:intent:intentResponse:_:));
}

uint64_t protocol witness for HandleIntentFlowStrategy.makeInProgressResponse(app:intent:intentResponse:_:) in conformance PhoneIntentNoOpHandleIntentFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return protocol witness for HandleIntentFlowStrategy.makePromptForDeviceUnlock(app:intent:intentResponse:_:) in conformance PhoneIntentNoOpHandleIntentFlowStrategy<A, B>(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&HandleIntentFlowStrategy.makeInProgressResponse(app:intent:intentResponse:_:));
}

uint64_t protocol witness for HandleIntentFlowStrategy.makeFailureHandlingIntentResponse(app:intent:intentResponse:_:) in conformance PhoneIntentNoOpHandleIntentFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return protocol witness for HandleIntentFlowStrategy.makePromptForDeviceUnlock(app:intent:intentResponse:_:) in conformance PhoneIntentNoOpHandleIntentFlowStrategy<A, B>(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&HandleIntentFlowStrategy.makeFailureHandlingIntentResponse(app:intent:intentResponse:_:));
}

uint64_t protocol witness for HandleIntentFlowStrategy.makePromptForDeviceUnlock(app:intent:intentResponse:_:) in conformance PhoneIntentNoOpHandleIntentFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v14 = type metadata accessor for PhoneIntentNoOpHandleIntentFlowStrategy();

  return a8(a1, a2, a3, a4, a5, v14, a7);
}

uint64_t protocol witness for IntentExtensionCommunicating.shouldIntentBeExecutedOnRemoteCompanion(intent:) in conformance PhoneIntentNoOpHandleIntentFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for PhoneIntentNoOpHandleIntentFlowStrategy();

  return IntentExtensionCommunicating.shouldIntentBeExecutedOnRemoteCompanion(intent:)(a1, v5, a3);
}

uint64_t protocol witness for IntentExtensionCommunicating.makeSiriKitIntentHandler(app:intent:) in conformance PhoneIntentNoOpHandleIntentFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for PhoneIntentNoOpHandleIntentFlowStrategy();

  return IntentExtensionCommunicating.makeSiriKitIntentHandler(app:intent:)(a1, a2, v7, a4);
}

uint64_t protocol witness for IntentExtensionCommunicating.makeIntentExecutionBehavior(app:intent:) in conformance PhoneIntentNoOpHandleIntentFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for PhoneIntentNoOpHandleIntentFlowStrategy();

  return IntentExtensionCommunicating.makeIntentExecutionBehavior(app:intent:)(a1, a2, v7, a4);
}

uint64_t protocol witness for IntentExtensionCommunicating.makeIntentExecutionBehavior(app:intent:completion:) in conformance PhoneIntentNoOpHandleIntentFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for PhoneIntentNoOpHandleIntentFlowStrategy();

  return IntentExtensionCommunicating.makeIntentExecutionBehavior(app:intent:completion:)(a1, a2, a3, a4, v11, a6);
}

uint64_t type metadata accessor for PhoneIntentNoOpHandleIntentFlowStrategy()
{
  return __swift_instantiateGenericMetadata();
}

PhoneCallFlowDelegatePlugin::AnnounceCallBellCATPatternsIdentifiers_optional __swiftcall AnnounceCallBellCATPatternsIdentifiers.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AnnounceCallBellCATPatternsIdentifiers.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return (PhoneCallFlowDelegatePlugin::AnnounceCallBellCATPatternsIdentifiers_optional)3;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::AnnounceCallBellCATPatternsIdentifiers_optional)v3;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnnounceCallBellCATPatternsIdentifiers(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnnounceCallBellCATPatternsIdentifiers()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnnounceCallBellCATPatternsIdentifiers(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::AnnounceCallBellCATPatternsIdentifiers_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AnnounceCallBellCATPatternsIdentifiers@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::AnnounceCallBellCATPatternsIdentifiers_optional *a2@<X8>)
{
  result.PhoneCallFlowDelegatePlugin::EmergencyType value = AnnounceCallBellCATPatternsIdentifiers.init(rawValue:)(*a1).value;
  a2->PhoneCallFlowDelegatePlugin::EmergencyType value = result.value;
  return result;
}

uint64_t AnnounceCallBellCATPatternsExecutor.announceCallBellEnded()()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_9_0();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = HangUpCallCATs.errorWithCodeNoCallToHangUp();
  return v3(0xD000000000000026, 0x800000000048D450, _swiftEmptyArrayStorage);
}

uint64_t AnnounceCallBellCATPatternsExecutor.announceCallBellStarted(_:)(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return _swift_task_switch(AnnounceCallBellCATPatternsExecutor.announceCallBellStarted(_:), 0, 0);
}

uint64_t AnnounceCallBellCATPatternsExecutor.announceCallBellStarted(_:)()
{
  *(void *)(v0 + 16) = 0;
  (*(void (**)(uint64_t))(v0 + 24))(v0 + 16);
  unint64_t v1 = *(void *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = (__n128 *)swift_allocObject();
  *(void *)(v0 + 48) = v2;
  OUTLINED_FUNCTION_27_0(v2, (__n128)xmmword_467710);
  uint64_t v3 = 0;
  if (v1)
  {
    uint64_t v3 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v2[3].n128_u64[1] = 0;
    v2[4].n128_u64[0] = 0;
  }
  *(void *)(v0 + 56) = v1;
  v2[3].n128_u64[0] = v1;
  v2[4].n128_u64[1] = v3;
  char v6 = (uint64_t (*)(unint64_t, unint64_t, __n128 *))((char *)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:)
                                                                            + async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v4;
  *uint64_t v4 = v0;
  v4[1] = AnnounceCallBellCATPatternsExecutor.announceCallBellStarted(_:);
  return v6(0xD000000000000028, 0x800000000048D480, v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_1_0();
  swift_release();
  unint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 80);
  return v1(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  swift_release();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t AnnounceCallBellCATPatternsExecutor.announceCallBellStarted(_:)(uint64_t a1)
{
  OUTLINED_FUNCTION_0_1();
  uint64_t v4 = v3;
  *(void *)(v3 + 72) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v1)
  {
    uint64_t v5 = AnnounceCallBellCATPatternsExecutor.announceCallBellStarted(_:);
  }
  else
  {
    *(void *)(v4 + 80) = a1;
    uint64_t v5 = AnnounceCallBellCATPatternsExecutor.announceCallBellStarted(_:);
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t AnnounceCallBellCATPatternsExecutor.informDoubleTapToEnd()()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_9_0();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = HangUpCallCATs.errorWithCode();
  return v3(0xD000000000000025, 0x800000000048D4B0, _swiftEmptyArrayStorage);
}

uint64_t AnnounceCallBellCATPatternsExecutor.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return AnnounceCallBellCATPatternsExecutor.init(templateDir:options:globals:)(a1, a2);
}

uint64_t AnnounceCallBellCATPatternsExecutor.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CATOption();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v8 - 8);
  outlined init with copy of URL?(a1, (uint64_t)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  uint64_t v10 = CATWrapper.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  outlined destroy of URL?(a1);
  return v10;
}

unint64_t lazy protocol witness table accessor for type AnnounceCallBellCATPatternsIdentifiers and conformance AnnounceCallBellCATPatternsIdentifiers()
{
  unint64_t result = lazy protocol witness table cache variable for type AnnounceCallBellCATPatternsIdentifiers and conformance AnnounceCallBellCATPatternsIdentifiers;
  if (!lazy protocol witness table cache variable for type AnnounceCallBellCATPatternsIdentifiers and conformance AnnounceCallBellCATPatternsIdentifiers)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnounceCallBellCATPatternsIdentifiers and conformance AnnounceCallBellCATPatternsIdentifiers);
  }
  return result;
}

uint64_t protocol witness for AnnounceCallBellCATPatternsExecuting.announceCallBellEnded() in conformance AnnounceCallBellCATPatternsExecutor()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(**v0 + class metadata base offset for AnnounceCallBellCATPatternsExecutor)
                         + **(int **)(**v0 + class metadata base offset for AnnounceCallBellCATPatternsExecutor));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = HangUpCallCATs.errorWithCode();
  return v4();
}

uint64_t protocol witness for AnnounceCallBellCATPatternsExecuting.announceCallBellStarted(_:) in conformance AnnounceCallBellCATPatternsExecutor(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(class metadata base offset for AnnounceCallBellCATPatternsExecutor + **v2 + 8);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = HangUpCallCATs.errorWithCode();
  return v9(a1, a2);
}

uint64_t protocol witness for AnnounceCallBellCATPatternsExecuting.informDoubleTapToEnd() in conformance AnnounceCallBellCATPatternsExecutor()
{
  uint64_t v2 = *(int **)(class metadata base offset for AnnounceCallBellCATPatternsExecutor + **v0 + 16);
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = HangUpCallCATs.errorWithCode();
  return v5();
}

unsigned char *storeEnumTagSinglePayload for AnnounceCallBellCATPatternsIdentifiers(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x458528);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnnounceCallBellCATPatternsIdentifiers()
{
  return &type metadata for AnnounceCallBellCATPatternsIdentifiers;
}

ValueMetadata *type metadata accessor for AnnounceCallBellAnnounceCallBellStartedParameters()
{
  return &type metadata for AnnounceCallBellAnnounceCallBellStartedParameters;
}

uint64_t type metadata accessor for AnnounceCallBellCATPatternsExecutor()
{
  uint64_t result = type metadata singleton initialization cache for AnnounceCallBellCATPatternsExecutor;
  if (!type metadata singleton initialization cache for AnnounceCallBellCATPatternsExecutor) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for AnnounceCallBellCATPatternsExecutor()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for AnnounceCallBellCATPatternsExecutor()
{
  return type metadata accessor for AnnounceCallBellCATPatternsExecutor();
}

void INPerson.toRREntity()()
{
  void (*v4)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v5;
  os_log_type_t v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  OUTLINED_FUNCTION_24_0();
  uint64_t v1 = (void *)v0;
  id v22 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoEntity_common_Person, INPerson>);
  OUTLINED_FUNCTION_0_0();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_52();
  static Transformer<>.transformer.getter();
  unsigned int v4 = (void (*)(uint64_t *__return_ptr, uint64_t *))Transformer.reverseTransform.getter();
  uint64_t v24 = v0;
  v4(&v23, &v24);
  swift_release();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  unsigned int v6 = __swift_project_value_buffer(v5, (uint64_t)static Logger.siriPhone);
  uint64_t v7 = v1;
  swift_retain_n();
  uint64_t v8 = v7;
  uint64_t v9 = Logger.logObject.getter();
  uint64_t v10 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_8_2(v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = (void *)swift_slowAlloc();
    uint64_t v21 = OUTLINED_FUNCTION_14_0();
    uint64_t v23 = (uint64_t)v8;
    uint64_t v24 = v21;
    *(_DWORD *)uint64_t v11 = 138412546;
    uint64_t v20 = v9;
    uint64_t v13 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v12 = v8;

    *(_WORD *)(v11 + 12) = 2080;
    CodeGenBase.entity.getter();
    uint64_t v14 = UsoEntity.valueTypeString.getter();
    uint64_t v16 = v15;
    swift_release();
    uint64_t v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v20, v6, "#ReferenceResolution INPerson-SRR: Transformed person %@ to USO entity %s", (uint8_t *)v11, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {

    swift_release_n();
  }
  swift_retain();
  CodeGenBase.entity.getter();
  swift_release();
  INPerson.makeRREntity(usoEntity:)();
  id v17 = OUTLINED_FUNCTION_4_112();
  v18(v17);
  swift_release();
  swift_release();
  id v19 = type metadata accessor for RREntity();
  __swift_storeEnumTagSinglePayload(v22, 0, 1, v19);
  OUTLINED_FUNCTION_26_1();
}

void INPerson.identifier.getter()
{
  OUTLINED_FUNCTION_24_0();
  type metadata accessor for String.Encoding();
  OUTLINED_FUNCTION_0_0();
  uint64_t v2 = v1;
  __chkstk_darwin(v3);
  outlined bridged method (pb) of @objc INPerson.contactIdentifier.getter(v0);
  if (v4 || (outlined bridged method (pb) of @objc INPerson.customIdentifier.getter(v0), v5))
  {
    id v6 = [v0 personHandle];
    if (v6)
    {
      outlined bridged method (ob) of @objc INPersonHandle.value.getter(v6);
      if (v7)
      {
        static String.Encoding.utf8.getter();
        uint64_t v8 = String.data(using:allowLossyConversion:)();
        unint64_t v10 = v9;
        swift_bridgeObjectRelease();
        uint64_t v11 = *(void (**)(uint64_t))(v2 + 8);
        uint64_t v12 = OUTLINED_FUNCTION_12_66();
        v11(v12);
        if (v10 >> 60 != 15)
        {
          id v13 = [v0 personHandle];
          uint64_t v14 = v13;
          if (v13)
          {
            id v15 = [v13 label];

            if (v15)
            {
              static String._unconditionallyBridgeFromObjectiveC(_:)();
            }
          }
          static String.Encoding.utf8.getter();
          uint64_t v16 = String.data(using:allowLossyConversion:)();
          unint64_t v18 = v17;
          swift_bridgeObjectRelease();
          uint64_t v19 = OUTLINED_FUNCTION_12_66();
          v11(v19);
          if (v18 >> 60 != 15)
          {
            outlined copy of Data?(v8, v10);
            outlined copy of Data?(v16, v18);
            specialized Data.append<A>(contentsOf:)(v16, v18);
            outlined consume of Data?(v16, v18);
            Swift::String v20 = Data.base64EncodedString(options:)(0);
            String.append(_:)(v20);
            swift_bridgeObjectRelease();
            v21._countAndFlagsBits = 58;
            v21._object = (void *)0xE100000000000000;
            String.append(_:)(v21);
            swift_bridgeObjectRelease();
            outlined consume of Data._Representation(v8, v10);
            outlined consume of Data?(v16, v18);
          }
          outlined consume of Data?(v8, v10);
        }
      }
    }
  }
  else
  {
    INPerson.asBase64()();
  }
  OUTLINED_FUNCTION_26_1();
}

void RRReferenceResolverProtocol.resolveEntity(resolveQuery:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v97 = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRCandidate?);
  __chkstk_darwin(v2 - 8);
  uint64_t v92 = &v87[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for RRCandidate();
  OUTLINED_FUNCTION_0_0();
  uint64_t v94 = v5;
  uint64_t v95 = v4;
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_5_8();
  uint64_t v93 = v6;
  __chkstk_darwin(v7);
  uint64_t v96 = &v87[-v8];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRResult?);
  __chkstk_darwin(v9 - 8);
  OUTLINED_FUNCTION_52();
  uint64_t v10 = type metadata accessor for RRResult();
  OUTLINED_FUNCTION_0_0();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_5_8();
  uint64_t v91 = v14;
  uint64_t v16 = __chkstk_darwin(v15);
  unint64_t v18 = (uint64_t *)&v87[-v17];
  __chkstk_darwin(v16);
  Swift::String v20 = &v87[-v19];
  RRReferenceResolverProtocol.resolveReference(resolveQuery:)();
  if (__swift_getEnumTagSinglePayload(v0, 1, v10) == 1)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v0, &demangling cache variable for type metadata for RRResult?);
LABEL_37:
    uint64_t v50 = 1;
    uint64_t v49 = v97;
    goto LABEL_38;
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v12 + 32))(v20, v0, v10);
  Swift::String v21 = *(void (**)(uint64_t *, unsigned char *, uint64_t))(v12 + 16);
  uint64_t v90 = v20;
  v21(v18, v20, v10);
  int v22 = (*(uint64_t (**)(uint64_t *, uint64_t))(v12 + 88))(v18, v10);
  uint64_t v23 = v10;
  if (v22 == enum case for RRResult.foundMatch(_:))
  {
    uint64_t v92 = (unsigned char *)v12;
    uint64_t v24 = OUTLINED_FUNCTION_2_131();
    v25(v24);
    uint64_t v27 = v94;
    uint64_t v26 = v95;
    long long v28 = v96;
    (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v94 + 32))(v96, v18, v95);
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    int v30 = __swift_project_value_buffer(v29, (uint64_t)static Logger.siriPhone);
    uint64_t v31 = v93;
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v27 + 16))(v93, v28, v26);
    swift_retain_n();
    os_log_type_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_8_2(v33))
    {
      uint64_t v34 = swift_slowAlloc();
      uint64_t v89 = swift_slowAlloc();
      uint64_t v99 = v89;
      *(_DWORD *)uint64_t v34 = 136315394;
      lazy protocol witness table accessor for type RRResult and conformance RRResult(&lazy protocol witness table cache variable for type RRCandidate and conformance RRCandidate, (void (*)(uint64_t))&type metadata accessor for RRCandidate);
      int v88 = v30;
      uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v98 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &v99);
      uint64_t v91 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
      v37(v31, v26);
      *(_WORD *)(v34 + 12) = 2080;
      uint64_t v38 = dispatch thunk of ResolveQuery.description.getter();
      uint64_t v98 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, &v99);
      uint64_t v23 = v91;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v32, (os_log_type_t)v88, "#ReferenceResolution Found a candidate %s by using query:%s", (uint8_t *)v34, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {
      uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
      v37(v31, v26);

      swift_release_n();
    }
    uint64_t v48 = v96;
    uint64_t v49 = v97;
    RRCandidate.entity.getter();
    v37((uint64_t)v48, v26);
    (*((void (**)(unsigned char *, uint64_t))v92 + 1))(v90, v23);
    goto LABEL_16;
  }
  if (v22 == enum case for RRResult.needsDisambiguation(_:))
  {
    uint64_t v40 = OUTLINED_FUNCTION_2_131();
    v41(v40);
    swift_bridgeObjectRelease();
    id v42 = v90;
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    __swift_project_value_buffer(v43, (uint64_t)static Logger.siriPhone);
    id v44 = (void *)Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_8_2(v45))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      OUTLINED_FUNCTION_1_3(&dword_0, v46, v47, "#ReferenceResolution Found ambiguous entities -> nil");
      OUTLINED_FUNCTION_6();
    }

    (*(void (**)(unsigned char *, uint64_t))(v12 + 8))(v42, v10);
    goto LABEL_37;
  }
  uint64_t v51 = v90;
  if (v22 != enum case for RRResult.foundMatchPlural(_:))
  {
    if (v22 == enum case for RRResult.needsDisambiguationPlural(_:))
    {
      uint64_t v59 = v12;
      uint64_t v60 = OUTLINED_FUNCTION_2_131();
      v61(v60);
      swift_bridgeObjectRelease();
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v62 = type metadata accessor for Logger();
      __swift_project_value_buffer(v62, (uint64_t)static Logger.siriPhone);
      id v63 = (void *)Logger.logObject.getter();
      os_log_type_t v64 = static os_log_type_t.debug.getter();
      if (!OUTLINED_FUNCTION_8_2(v64)) {
        goto LABEL_36;
      }
      *(_WORD *)swift_slowAlloc() = 0;
      uint64_t v67 = "#ReferenceResolution Found plural disambiguation -> nil";
    }
    else
    {
      if (v22 != enum case for RRResult.noMatch(_:))
      {
        uint64_t v92 = (unsigned char *)v12;
        if (one-time initialization token for siriPhone != -1) {
          swift_once();
        }
        uint64_t v77 = type metadata accessor for Logger();
        __swift_project_value_buffer(v77, (uint64_t)static Logger.siriPhone);
        uint64_t v78 = v91;
        v21((uint64_t *)v91, v51, v23);
        uint64_t v79 = v23;
        uint64_t v80 = Logger.logObject.getter();
        os_log_type_t v81 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v80, v81))
        {
          uint64_t v82 = (uint8_t *)OUTLINED_FUNCTION_47();
          uint64_t v99 = OUTLINED_FUNCTION_14_0();
          *(_DWORD *)uint64_t v82 = 136315138;
          lazy protocol witness table accessor for type RRResult and conformance RRResult(&lazy protocol witness table cache variable for type RRResult and conformance RRResult, (void (*)(uint64_t))&type metadata accessor for RRResult);
          uint64_t v83 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v84, &v99);
          OUTLINED_FUNCTION_5_85(v85);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v86 = (void (*)(uint64_t, uint64_t))*((void *)v92 + 1);
          v86(v78, v79);
          _os_log_impl(&dword_0, v80, v81, "#ReferenceResolution Received unknown result type %s", v82, 0xCu);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_6();
          OUTLINED_FUNCTION_6();

          v86((uint64_t)v90, v79);
        }
        else
        {

          uint64_t v86 = (void (*)(uint64_t, uint64_t))*((void *)v92 + 1);
          v86(v78, v79);
          v86((uint64_t)v51, v79);
        }
        uint64_t v49 = v97;
        v86((uint64_t)v18, v79);
        goto LABEL_46;
      }
      uint64_t v59 = v12;
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v72 = type metadata accessor for Logger();
      __swift_project_value_buffer(v72, (uint64_t)static Logger.siriPhone);
      id v63 = (void *)Logger.logObject.getter();
      os_log_type_t v73 = static os_log_type_t.debug.getter();
      if (!OUTLINED_FUNCTION_8_2(v73))
      {
LABEL_36:

        (*(void (**)(unsigned char *, uint64_t))(v59 + 8))(v51, v23);
        goto LABEL_37;
      }
      *(_WORD *)swift_slowAlloc() = 0;
      uint64_t v67 = "#ReferenceResolution No matches found";
    }
    OUTLINED_FUNCTION_1_3(&dword_0, v65, v66, v67);
    OUTLINED_FUNCTION_6();
    goto LABEL_36;
  }
  uint64_t v52 = OUTLINED_FUNCTION_2_131();
  v53(v52);
  uint64_t v54 = *v18;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v55 = type metadata accessor for Logger();
  __swift_project_value_buffer(v55, (uint64_t)static Logger.siriPhone);
  swift_bridgeObjectRetain();
  unint64_t v56 = Logger.logObject.getter();
  os_log_type_t v57 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v56, v57))
  {
    uint64_t v58 = (uint8_t *)OUTLINED_FUNCTION_47();
    *(_DWORD *)uint64_t v58 = 134217984;
    uint64_t v99 = *(void *)(v54 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v56, v57, "#ReferenceResolution Found %ld candidates. Using the first one", v58, 0xCu);
    OUTLINED_FUNCTION_6();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  uint64_t v49 = v97;
  uint64_t v68 = v95;
  uint64_t v69 = (uint64_t)v92;
  specialized Collection.first.getter();
  swift_bridgeObjectRelease();
  if (__swift_getEnumTagSinglePayload(v69, 1, v68) == 1)
  {
    uint64_t v70 = OUTLINED_FUNCTION_6_102();
    v71(v70);
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v69, &demangling cache variable for type metadata for RRCandidate?);
LABEL_46:
    uint64_t v50 = 1;
    goto LABEL_38;
  }
  RRCandidate.entity.getter();
  uint64_t v75 = OUTLINED_FUNCTION_6_102();
  v76(v75);
  (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v69, v68);
LABEL_16:
  uint64_t v50 = 0;
LABEL_38:
  uint64_t v74 = type metadata accessor for RREntity();
  __swift_storeEnumTagSinglePayload(v49, v50, 1, v74);
  OUTLINED_FUNCTION_26_1();
}

void RRReferenceResolverProtocol.resolveReference(resolveQuery:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<RRResult, Error>);
  OUTLINED_FUNCTION_15();
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v25 - v6;
  static Signpost.begin(_:)();
  uint64_t v9 = v8;
  uint64_t v28 = v10;
  int v27 = v11;
  dispatch thunk of RRReferenceResolverProtocol.resolve(query:)();
  outlined init with copy of Result<RRResult, Error>((uint64_t)v7, (uint64_t)v5);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = *v5;
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.siriPhone);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v26 = v1;
      uint64_t v16 = (uint8_t *)OUTLINED_FUNCTION_47();
      uint64_t v17 = OUTLINED_FUNCTION_14_0();
      uint64_t v29 = v12;
      uint64_t v30 = v17;
      *(_DWORD *)uint64_t v16 = 136315138;
      uint64_t v25 = v9;
      swift_errorRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v18 = String.init<A>(describing:)();
      uint64_t v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v1 = v26;
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl(&dword_0, v14, v15, "#ReferenceResolution Received a failure: %s -> nil", v16, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    swift_errorRelease();
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v7, &demangling cache variable for type metadata for Result<RRResult, Error>);
    uint64_t v24 = type metadata accessor for RRResult();
    uint64_t v22 = v1;
    uint64_t v23 = 1;
  }
  else
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v7, &demangling cache variable for type metadata for Result<RRResult, Error>);
    uint64_t v20 = type metadata accessor for RRResult();
    OUTLINED_FUNCTION_15();
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v21 + 32))(v1, v5, v20);
    uint64_t v22 = v1;
    uint64_t v23 = 0;
    uint64_t v24 = v20;
  }
  __swift_storeEnumTagSinglePayload(v22, v23, 1, v24);
  Signpost.OpenSignpost.end()();
  swift_release();
  OUTLINED_FUNCTION_26_1();
}

uint64_t INPerson.makeRREntity(usoEntity:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupIdentifier?);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  INPerson.identifier.getter();
  uint64_t v4 = type metadata accessor for GroupIdentifier();
  __swift_storeEnumTagSinglePayload((uint64_t)v3, 1, 1, v4);
  type metadata accessor for INPerson();
  swift_retain();
  id v5 = v0;
  return RREntity.init<A>(id:appBundleId:usoEntity:intentEntity:group:)();
}

uint64_t outlined bridged method (pb) of @objc INPerson.customIdentifier.getter(void *a1)
{
  id v1 = [a1 customIdentifier];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t specialized Data.append<A>(contentsOf:)(uint64_t a1, unint64_t a2)
{
  uint64_t v10[3] = &type metadata for Data;
  void v10[4] = &protocol witness table for Data;
  v10[0] = a1;
  v10[1] = a2;
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v10, (uint64_t)&type metadata for Data);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < (int)v5)
      {
        __break(1u);
        JUMPOUT(0x459E9CLL);
      }
      outlined copy of Data._Representation(a1, a2);
      outlined copy of Data._Representation(v5, v6);
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v5, v5 >> 32);
      outlined consume of Data._Representation(v5, v6);
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(v5 + 16);
      uint64_t v8 = *(void *)(v5 + 24);
      outlined copy of Data._Representation(a1, a2);
      swift_retain();
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v7, v8);
      swift_release();
      swift_release();
      break;
    default:
      outlined copy of Data._Representation(a1, a2);
      _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_pytTg5037_s10Foundation4DataV06InlineB0V15withB31BytesyxxSWKXEKlFxSWKXEfU_yt_TG5SWxsAC_pRi_zRi0_zlyytIsgyrzo_SiTf1nnc_n0ghi30V6append10contentsOfyx_tSTRzs5F22V7ElementRtzlFySWXEfU_10Foundation0I0VTf1nncn_n();
      break;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

uint64_t outlined init with copy of Result<RRResult, Error>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<RRResult, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type SRRMatchType and conformance SRRMatchType()
{
  unint64_t result = lazy protocol witness table cache variable for type SRRMatchType and conformance SRRMatchType;
  if (!lazy protocol witness table cache variable for type SRRMatchType and conformance SRRMatchType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SRRMatchType and conformance SRRMatchType);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SRRMatchType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x45A030);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SRRMatchType()
{
  return &type metadata for SRRMatchType;
}

uint64_t _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_pytTg5037_s10Foundation4DataV06InlineB0V15withB31BytesyxxSWKXEKlFxSWKXEfU_yt_TG5SWxsAC_pRi_zRi0_zlyytIsgyrzo_SiTf1nnc_n0ghi30V6append10contentsOfyx_tSTRzs5F22V7ElementRtzlFySWXEfU_10Foundation0I0VTf1nncn_n()
{
  return Data._Representation.append(contentsOf:)();
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      return Data._Representation.append(contentsOf:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t OUTLINED_FUNCTION_2_131()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_4_112()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_6_102()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_12_66()
{
  return v0;
}

Swift::Int specialized RawRepresentable<>.hashValue.getter()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  OUTLINED_FUNCTION_3_115();
  OUTLINED_FUNCTION_5_55();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_2_132();
  OUTLINED_FUNCTION_5_55();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return OUTLINED_FUNCTION_5_86();
}

{
  OUTLINED_FUNCTION_2_132();
  OUTLINED_FUNCTION_5_55();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return OUTLINED_FUNCTION_5_86();
}

{
  return OUTLINED_FUNCTION_22_60();
}

{
  OUTLINED_FUNCTION_2_132();
  OUTLINED_FUNCTION_5_55();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return OUTLINED_FUNCTION_10_77();
}

{
  OUTLINED_FUNCTION_3_115();
  OUTLINED_FUNCTION_5_55();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_2_132();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_2_132();
  OUTLINED_FUNCTION_5_55();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_2_132();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_2_132();
  OUTLINED_FUNCTION_5_55();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_2_132();
  OUTLINED_FUNCTION_5_55();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_2_132();
  OUTLINED_FUNCTION_5_55();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_2_132();
  OUTLINED_FUNCTION_5_55();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_2_132();
  OUTLINED_FUNCTION_5_55();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_2_132();
  OUTLINED_FUNCTION_5_55();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return OUTLINED_FUNCTION_23_50();
}

{
  return OUTLINED_FUNCTION_11_79();
}

{
  return OUTLINED_FUNCTION_10_77();
}

{
  return OUTLINED_FUNCTION_9_82();
}

{
  return specialized RawRepresentable<>.hashValue.getter();
}

{
  return OUTLINED_FUNCTION_9_82();
}

{
  OUTLINED_FUNCTION_2_132();
  OUTLINED_FUNCTION_5_55();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return OUTLINED_FUNCTION_13_65();
}

{
  return OUTLINED_FUNCTION_5_86();
}

{
  return OUTLINED_FUNCTION_9_82();
}

{
  OUTLINED_FUNCTION_2_132();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return OUTLINED_FUNCTION_10_77();
}

{
  return OUTLINED_FUNCTION_1_118();
}

{
  return OUTLINED_FUNCTION_10_77();
}

{
  return OUTLINED_FUNCTION_1_118();
}

{
  return specialized RawRepresentable<>.hashValue.getter();
}

{
  return OUTLINED_FUNCTION_13_65();
}

{
  OUTLINED_FUNCTION_2_132();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return OUTLINED_FUNCTION_1_118();
}

{
  return OUTLINED_FUNCTION_13_65();
}

{
  OUTLINED_FUNCTION_2_132();
  OUTLINED_FUNCTION_5_55();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return OUTLINED_FUNCTION_11_79();
}

{
  return specialized RawRepresentable<>.hashValue.getter();
}

{
  return OUTLINED_FUNCTION_11_79();
}

{
  OUTLINED_FUNCTION_2_132();
  OUTLINED_FUNCTION_5_55();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_2_132();
  OUTLINED_FUNCTION_5_55();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_2_132();
  OUTLINED_FUNCTION_77_6();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_2_132();
  OUTLINED_FUNCTION_68_5();
  OUTLINED_FUNCTION_5_55();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_2_132();
  OUTLINED_FUNCTION_68_5();
  OUTLINED_FUNCTION_5_55();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_2_132();
  OUTLINED_FUNCTION_68_5();
  OUTLINED_FUNCTION_5_55();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return OUTLINED_FUNCTION_5_86();
}

{
  return OUTLINED_FUNCTION_1_118();
}

{
  OUTLINED_FUNCTION_2_132();
  OUTLINED_FUNCTION_5_55();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_2_132();
  OUTLINED_FUNCTION_5_55();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_2_132();
  OUTLINED_FUNCTION_68_5();
  OUTLINED_FUNCTION_5_55();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_3_115();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return OUTLINED_FUNCTION_23_50();
}

{
  OUTLINED_FUNCTION_2_132();
  OUTLINED_FUNCTION_5_55();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_3_115();
  OUTLINED_FUNCTION_5_55();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_2_132();
  OUTLINED_FUNCTION_5_55();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_2_132();
  OUTLINED_FUNCTION_5_55();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_2_132();
  OUTLINED_FUNCTION_5_55();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return specialized RawRepresentable<>.hashValue.getter();
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  OUTLINED_FUNCTION_2_132();
  OUTLINED_FUNCTION_5_55();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return OUTLINED_FUNCTION_11_79();
}

{
  OUTLINED_FUNCTION_2_132();
  OUTLINED_FUNCTION_5_55();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return OUTLINED_FUNCTION_22_60();
}

{
  OUTLINED_FUNCTION_2_132();
  OUTLINED_FUNCTION_5_55();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  char v0;

  OUTLINED_FUNCTION_2_132();
  if (!v0) {
    OUTLINED_FUNCTION_19_48();
  }
  OUTLINED_FUNCTION_5_55();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_2_132();
  OUTLINED_FUNCTION_5_55();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return OUTLINED_FUNCTION_5_86();
}

{
  OUTLINED_FUNCTION_2_132();
  OUTLINED_FUNCTION_77_6();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_2_132();
  OUTLINED_FUNCTION_77_6();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_2_132();
  OUTLINED_FUNCTION_77_6();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_2_132();
  OUTLINED_FUNCTION_5_55();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return specialized RawRepresentable<>.hashValue.getter();
}

{
  OUTLINED_FUNCTION_2_132();
  OUTLINED_FUNCTION_5_55();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return OUTLINED_FUNCTION_5_86();
}

{
  OUTLINED_FUNCTION_3_115();
  String.hash(into:)();
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>.hashValue.getter(uint64_t a1)
{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))UnsupportedFlowCATs.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))PhoneCallControlCATsSimple.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))PhoneCallControlCATsSimple.CallControlDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))PhoneCallSlotNames.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))PhoneCallProvider.CodingKeys.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))SuggestionsCATsSimple.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))PhoneIncomingCall.CodingKeys.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))UnsupportedFlowCATPatternsIdentifiers.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))PhoneCallCommonCATs.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))DucFamilyNames.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))StartCallCATPatternsIdentifiers.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))AnnounceIncomingCallCATsSimple.IntentHandledResponseDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))PhoneCallNLConstants.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))VoicemailVerbSemantics.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))PhoneCallVerbSemantics.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))AnnounceCallBellCATsSimple.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))PhoneCallDisplayTextCATs.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))LogTag.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))AnnounceCallBellCATs.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))PhoneCallAttribute.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))PhoneCallAudioRoute.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))PhoneCallConfirmation.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))PhoneCallNoun.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))PhoneCallReference.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))PhoneCallContactReference.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))PhoneCallVerb.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))VoiceMail.VoiceMailVerb.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))PhoneCallDestinationType.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))OngoingCallCATs.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))FollowUpOfferType.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))AddCallParticipantCATsSimple.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))StartCallCATs.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))PhoneCallDisplayTextCATsSimple.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))AnswerCallCATsSimple.IntentHandledResponseDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))IdentifyIncomingCallerCATsSimple.IntentHandledResponseDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))ContactSourceType.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))SearchCallHistoryCATs.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))StartCallCATsSimple.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))StartCallCATsSimple.ConfirmContactsDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))StartCallCATsSimple.DisambiguateContactsHandlesDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))StartCallCATsSimple.EmergencyCountdownDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))StartCallCATsSimple.IntentHandledResponseDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))StartCallCATsSimple.IntentHandledResponseEmergencyDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))StartCallCATsSimple.ErrorWithCodeAirplaneModeEnabledDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))StartCallCATsSimple.RelationshipDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))StartCallCATsSimple.UnsupportedContactsNoContactFoundDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))StartCallCATsSimple.UnsupportedContactsNoHandleForLabelDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))StartCallCATsSimple.UnsupportedPreferredCallProviderDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))StartCallCATsSimple.UnsupportedPreferredCallProviderTelephonyUnsupportedDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))ReaderNLConstants.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))PhoneCallCommonCATsSimple.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))AnnounceGroupFaceTimeInviteCATsSimple.ReadGroupFaceTimeInviteAnnouncementDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))UnsupportedPhoneCall.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))SearchCallHistoryCATsSimple.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))SearchCallHistoryCATsSimple.ConfirmCallTypesDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))PhoneCallControlCATs.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))SuggestionsCATs.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))PhoneStartCallIntent.CodingKeys.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))HangUpCallCATs.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))ActionableCallControlFlow.UnsupportedHoldActionReason.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))SiriPhoneDefaultsKey.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))FaceTimeMessageControllerFlow.State.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))AddCallParticipantCATPatternsIdentifiers.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))CallControlUsoIdentifiers.PhoneSetting.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))AddCallParticipantCATs.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))PhoneCallRecord.CodingKeys.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))UsoIdentifierNamespaceType.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))HangUpCallCATsSimple.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))OngoingCallCATsSimple.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))OngoingCallCATsSimple.NewCallPromptDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))TrialSmartAppSelectionConfigKey.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))PhoneSearchCallHistoryIntent.CodingKeys.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))ParseTypeLogging.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))PhoneCallControlNLIntent.Verb.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))PhoneCallControlNLIntent.Target.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))PhoneCallControlAction.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))UnsupportedFlowCATsSimple.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))SearchCallHistoryCATPatternsIdentifiers.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))AnnounceVoicemailDirectAction.CodingKeys.rawValue.getter);
}

Swift::Int specialized RawRepresentable<>.hashValue.getter(char a1)
{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))AnswerCallCATs.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))AnnounceIncomingCallCATs.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))IdentifyIncomingCallerCATsSimple.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))StartCallCATsSimple.ConfirmAppDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))StartCallCATsSimple.DisambiguateAppsVoiceModeDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))StartCallCATsSimple.DisambiguateContactsDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))StartCallCATsSimple.IntentConfirmationEmergencyDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))StartCallCATsSimple.IntentConfirmationWithRestrictedContactsDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))StartCallCATsSimple.UnsupportedContactsInvalidHandleDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))AnnounceVoicemailCATsSimple.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))AnnounceGroupFaceTimeInviteCATPatternsIdentifiers.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))SearchCallHistoryCATsSimple.ConfirmDateCreatedDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))SearchCallHistoryCATsSimple.ShowCallHistoryIntroDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))PhoneAppSelectionSignalsGathererType.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))PostCallInquiryAnswerCallCATs.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))SlotResolutionError.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))PhoneCallCommonCATPatternsIdentifiers.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))ForcedAppDisambiguationPhase.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))SpecifyingContactAddress.rawValue.getter);
}

{
  OUTLINED_FUNCTION_3_115();
  switch(a1)
  {
    case 1:
    case 2:
    case 3:
      OUTLINED_FUNCTION_19_48();
      break;
    default:
      break;
  }
  OUTLINED_FUNCTION_5_55();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))PhoneAppResolutionLogger.CodePathId.rawValue.getter);
}

uint64_t specialized RawRepresentable<>.hashValue.getter(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(0, a1);
}

Swift::Int specialized RawRepresentable<>.hashValue.getter(char a1, void (*a2)(uint64_t))
{
  uint64_t v3 = a1 & 1;
  OUTLINED_FUNCTION_3_115();
  a2(v3);
  OUTLINED_FUNCTION_61_8();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>.hashValue.getter(uint64_t a1, void (*a2)(uint64_t))
{
  return Hasher._finalize()();
}

PhoneCallFlowDelegatePlugin::AnnounceVoicemailCATsSimple::Properties_optional __swiftcall AnnounceVoicemailCATsSimple.Properties.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AnnounceVoicemailCATsSimple.Properties.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.PhoneCallFlowDelegatePlugin::EmergencyType value = PhoneCallFlowDelegatePlugin_AnnounceVoicemailCATsSimple_Properties_readVoicemailAnnouncementHint;
  }
  else {
    v4.PhoneCallFlowDelegatePlugin::EmergencyType value = PhoneCallFlowDelegatePlugin_AnnounceVoicemailCATsSimple_Properties_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnnounceVoicemailCATsSimple.Properties()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

PhoneCallFlowDelegatePlugin::AnnounceVoicemailCATsSimple::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AnnounceVoicemailCATsSimple.Properties@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::AnnounceVoicemailCATsSimple::Properties_optional *a2@<X8>)
{
  result.PhoneCallFlowDelegatePlugin::EmergencyType value = AnnounceVoicemailCATsSimple.Properties.init(rawValue:)(*a1).value;
  a2->PhoneCallFlowDelegatePlugin::EmergencyType value = result.value;
  return result;
}

uint64_t AnnounceVoicemailCATsSimple.readVoicemailAnnouncement(burstIndex:isPreviousNotificationVoicemail:voicemail:)(uint64_t a1, char a2, char a3, uint64_t a4)
{
  *(void *)(v5 + 24) = a4;
  *(void *)(v5 + 32) = v4;
  *(unsigned char *)(v5 + 65) = a3;
  *(unsigned char *)(v5 + 64) = a2;
  *(void *)(v5 + 16) = a1;
  return OUTLINED_FUNCTION_21_1((uint64_t)AnnounceVoicemailCATsSimple.readVoicemailAnnouncement(burstIndex:isPreviousNotificationVoicemail:voicemail:));
}

uint64_t AnnounceVoicemailCATsSimple.readVoicemailAnnouncement(burstIndex:isPreviousNotificationVoicemail:voicemail:)()
{
  char v3 = *(unsigned char *)(v1 + 64);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = (__n128 *)OUTLINED_FUNCTION_24_3();
  *(void *)(v1 + 40) = v4;
  OUTLINED_FUNCTION_1_73(v4, (__n128)xmmword_46A250);
  if (v3)
  {
    v4[3].n128_u64[1] = 0;
    v4[4].n128_u64[0] = 0;
  }
  OUTLINED_FUNCTION_25_46();
  OUTLINED_FUNCTION_32_33(v5);
  uint64_t v6 = OUTLINED_FUNCTION_3_71((uint64_t)&type metadata for Bool);
  if (v0)
  {
    uint64_t v6 = type metadata accessor for PhoneCallRecord(v6);
  }
  else
  {
    v4[9].n128_u64[1] = 0;
    v4[10].n128_u64[0] = 0;
  }
  v4[9].n128_u64[0] = v0;
  v4[10].n128_u64[1] = v6;
  OUTLINED_FUNCTION_19_2();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 48) = v7;
  void *v7 = v1;
  v7[1] = AnnounceVoicemailCATsSimple.readVoicemailAnnouncement(burstIndex:isPreviousNotificationVoicemail:voicemail:);
  uint64_t v8 = OUTLINED_FUNCTION_11_6(v2 + 12);
  return v10(v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_0_14();
  char v3 = v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_7_27();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = OUTLINED_FUNCTION_18_2();
    return v11(v10);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

PhoneCallFlowDelegatePlugin::AnnounceVoicemailCATsSimple::ReadVoicemailAnnouncementDialogIds_optional __swiftcall AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementDialogIds.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementDialogIds.init(rawValue:);
  return (PhoneCallFlowDelegatePlugin::AnnounceVoicemailCATsSimple::ReadVoicemailAnnouncementDialogIds_optional)AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementDialogIds.init(rawValue:)(rawValue, v1);
}

uint64_t AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementDialogIds.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x746361746E6F63;
  }
  if (a1 == 1) {
    return 0x72656C6C61436F6ELL;
  }
  return 0xD000000000000012;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementDialogIds()
{
  return specialized == infix<A>(_:_:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0, (void (*)(uint64_t))AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementDialogIds.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementDialogIds(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementDialogIds(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::AnnounceVoicemailCATsSimple::ReadVoicemailAnnouncementDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementDialogIds@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::AnnounceVoicemailCATsSimple::ReadVoicemailAnnouncementDialogIds_optional *a2@<X8>)
{
  result.PhoneCallFlowDelegatePlugin::EmergencyType value = AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementDialogIds.init(rawValue:)(*a1).value;
  a2->PhoneCallFlowDelegatePlugin::EmergencyType value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementDialogIds@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementDialogIds.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t AnnounceVoicemailCATsSimple.readVoicemailAnnouncementAsLabels(burstIndex:isPreviousNotificationVoicemail:voicemail:)(uint64_t a1, char a2, char a3, uint64_t a4)
{
  *(void *)(v5 + 24) = a4;
  *(void *)(v5 + 32) = v4;
  *(unsigned char *)(v5 + 65) = a3;
  *(unsigned char *)(v5 + 64) = a2;
  *(void *)(v5 + 16) = a1;
  return OUTLINED_FUNCTION_21_1((uint64_t)AnnounceVoicemailCATsSimple.readVoicemailAnnouncementAsLabels(burstIndex:isPreviousNotificationVoicemail:voicemail:));
}

uint64_t AnnounceVoicemailCATsSimple.readVoicemailAnnouncementAsLabels(burstIndex:isPreviousNotificationVoicemail:voicemail:)()
{
  char v3 = *(unsigned char *)(v1 + 64);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = (__n128 *)OUTLINED_FUNCTION_24_3();
  *(void *)(v1 + 40) = v4;
  OUTLINED_FUNCTION_1_73(v4, (__n128)xmmword_46A250);
  if (v3)
  {
    v4[3].n128_u64[1] = 0;
    v4[4].n128_u64[0] = 0;
  }
  OUTLINED_FUNCTION_25_46();
  OUTLINED_FUNCTION_32_33(v5);
  uint64_t v6 = OUTLINED_FUNCTION_3_71((uint64_t)&type metadata for Bool);
  if (v0)
  {
    uint64_t v6 = type metadata accessor for PhoneCallRecord(v6);
  }
  else
  {
    v4[9].n128_u64[1] = 0;
    v4[10].n128_u64[0] = 0;
  }
  v4[9].n128_u64[0] = v0;
  v4[10].n128_u64[1] = v6;
  OUTLINED_FUNCTION_19_2();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 48) = v7;
  unint64_t VoicemailAnnouncementDialogIds = lazy protocol witness table accessor for type AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementDialogIds and conformance AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementDialogIds();
  void *v7 = v1;
  v7[1] = AnnounceVoicemailCATsSimple.readVoicemailAnnouncementAsLabels(burstIndex:isPreviousNotificationVoicemail:voicemail:);
  return v10(v2 + 12, 0x8000000000490020, v4, &type metadata for AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementDialogIds, VoicemailAnnouncementDialogIds);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_0_14();
  char v3 = v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_7_27();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = OUTLINED_FUNCTION_18_2();
    return v11(v10);
  }
}

unint64_t lazy protocol witness table accessor for type AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementDialogIds and conformance AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementDialogIds and conformance AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementDialogIds;
  if (!lazy protocol witness table cache variable for type AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementDialogIds and conformance AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementDialogIds and conformance AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementDialogIds and conformance AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementDialogIds;
  if (!lazy protocol witness table cache variable for type AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementDialogIds and conformance AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementDialogIds and conformance AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementDialogIds);
  }
  return result;
}

uint64_t AnnounceVoicemailCATsSimple.readVoicemailAnnouncementHint(announcementCount:daysSinceLastHint:hintCount:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  *(unsigned char *)(v7 + 74) = a6;
  *(void *)(v7 + 32) = a5;
  *(void *)(v7 + 40) = v6;
  *(unsigned char *)(v7 + 73) = a4;
  *(unsigned char *)(v7 + 72) = a2;
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a3;
  return OUTLINED_FUNCTION_21_1((uint64_t)AnnounceVoicemailCATsSimple.readVoicemailAnnouncementHint(announcementCount:daysSinceLastHint:hintCount:));
}

uint64_t AnnounceVoicemailCATsSimple.readVoicemailAnnouncementHint(announcementCount:daysSinceLastHint:hintCount:)()
{
  OUTLINED_FUNCTION_16_1();
  char v1 = *(unsigned char *)(v0 + 72);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_24_3();
  *(void *)(v0 + 48) = v2;
  *(_OWORD *)(v2 + 16) = xmmword_46A250;
  OUTLINED_FUNCTION_41_0();
  *(void *)(v3 + 32) = 0xD000000000000011;
  *(void *)(v3 + 40) = v4;
  if (v1)
  {
    OUTLINED_FUNCTION_34_37();
    *(void *)(v2 + 56) = 0;
    *(void *)(v2 + 64) = 0;
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 16);
    uint64_t v6 = &type metadata for Double;
  }
  *(void *)(v2 + 48) = v5;
  *(void *)(v2 + 72) = v6;
  *(void *)(v2 + 80) = 0xD000000000000011;
  OUTLINED_FUNCTION_41_0();
  *(void *)(v2 + 88) = v7;
  if (v8)
  {
    uint64_t v9 = 0;
    *(void *)(v2 + 104) = 0;
    *(void *)(v2 + 112) = 0;
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 24);
  }
  *(void *)(v2 + 96) = v9;
  OUTLINED_FUNCTION_18_25();
  *(void *)(v2 + 120) = v10;
  *(void *)(v2 + 128) = v11;
  *(void *)(v2 + 136) = 0xE900000000000074;
  if (v12)
  {
    OUTLINED_FUNCTION_34_37();
    *(void *)(v2 + 152) = 0;
    *(void *)(v2 + 160) = 0;
  }
  else
  {
    uint64_t v13 = *(void *)(v0 + 32);
    uint64_t v14 = &type metadata for Double;
  }
  *(void *)(v2 + 168) = v14;
  *(void *)(v2 + 144) = v13;
  uint64_t v18 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:)
                                        + async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  os_log_type_t v15 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v15;
  *os_log_type_t v15 = v0;
  v15[1] = AnnounceVoicemailCATsSimple.readVoicemailAnnouncementHint(announcementCount:daysSinceLastHint:hintCount:);
  uint64_t v16 = OUTLINED_FUNCTION_11_6(0xD00000000000002FLL);
  return v18(v16);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_0_14();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_7_27();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = OUTLINED_FUNCTION_18_2();
    return v11(v10);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  char v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

PhoneCallFlowDelegatePlugin::AnnounceVoicemailCATsSimple::ReadVoicemailAnnouncementHintDialogIds_optional __swiftcall AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementHintDialogIds.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementHintDialogIds.init(rawValue:);
  return (PhoneCallFlowDelegatePlugin::AnnounceVoicemailCATsSimple::ReadVoicemailAnnouncementHintDialogIds_optional)AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementDialogIds.init(rawValue:)(rawValue, v1);
}

unint64_t AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementDialogIds.init(rawValue:)(Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease();
  if (v5 >= 3) {
    return 3;
  }
  else {
    return v5;
  }
}

unint64_t AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementHintDialogIds.rawValue.getter(unsigned __int8 a1)
{
  return ((unint64_t)a1 << 32) + 0x31746E6968;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementHintDialogIds(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementHintDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementHintDialogIds()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementHintDialogIds()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

PhoneCallFlowDelegatePlugin::AnnounceVoicemailCATsSimple::ReadVoicemailAnnouncementHintDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementHintDialogIds@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::AnnounceVoicemailCATsSimple::ReadVoicemailAnnouncementHintDialogIds_optional *a2@<X8>)
{
  result.PhoneCallFlowDelegatePlugin::EmergencyType value = AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementHintDialogIds.init(rawValue:)(*a1).value;
  a2->PhoneCallFlowDelegatePlugin::EmergencyType value = result.value;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementHintDialogIds@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementHintDialogIds.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = 0xE500000000000000;
  return result;
}

uint64_t AnnounceVoicemailCATsSimple.readVoicemailAnnouncementHintAsLabels(announcementCount:daysSinceLastHint:hintCount:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  *(unsigned char *)(v7 + 74) = a6;
  *(void *)(v7 + 32) = a5;
  *(void *)(v7 + 40) = v6;
  *(unsigned char *)(v7 + 73) = a4;
  *(unsigned char *)(v7 + 72) = a2;
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a3;
  return OUTLINED_FUNCTION_21_1((uint64_t)AnnounceVoicemailCATsSimple.readVoicemailAnnouncementHintAsLabels(announcementCount:daysSinceLastHint:hintCount:));
}

uint64_t AnnounceVoicemailCATsSimple.readVoicemailAnnouncementHintAsLabels(announcementCount:daysSinceLastHint:hintCount:)()
{
  char v1 = *(unsigned char *)(v0 + 72);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_24_3();
  *(void *)(v0 + 48) = v2;
  *(_OWORD *)(v2 + 16) = xmmword_46A250;
  OUTLINED_FUNCTION_41_0();
  *(void *)(v3 + 32) = 0xD000000000000011;
  *(void *)(v3 + 40) = v4;
  if (v1)
  {
    OUTLINED_FUNCTION_34_37();
    *(void *)(v2 + 56) = 0;
    *(void *)(v2 + 64) = 0;
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 16);
    uint64_t v6 = &type metadata for Double;
  }
  *(void *)(v2 + 48) = v5;
  *(void *)(v2 + 72) = v6;
  *(void *)(v2 + 80) = 0xD000000000000011;
  OUTLINED_FUNCTION_41_0();
  *(void *)(v2 + 88) = v7;
  if (v8)
  {
    uint64_t v9 = 0;
    *(void *)(v2 + 104) = 0;
    *(void *)(v2 + 112) = 0;
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 24);
  }
  *(void *)(v2 + 96) = v9;
  OUTLINED_FUNCTION_18_25();
  *(void *)(v2 + 120) = v10;
  *(void *)(v2 + 128) = v11;
  *(void *)(v2 + 136) = 0xE900000000000074;
  if (v12)
  {
    OUTLINED_FUNCTION_34_37();
    *(void *)(v2 + 152) = 0;
    *(void *)(v2 + 160) = 0;
  }
  else
  {
    uint64_t v13 = *(void *)(v0 + 32);
    uint64_t v14 = &type metadata for Double;
  }
  *(void *)(v2 + 168) = v14;
  *(void *)(v2 + 144) = v13;
  uint64_t v18 = (uint64_t (*)(unint64_t, unint64_t, uint64_t, ValueMetadata *, unint64_t))((char *)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:) + async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  os_log_type_t v15 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v15;
  unint64_t VoicemailAnnouncementHintDialogIds = lazy protocol witness table accessor for type AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementHintDialogIds and conformance AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementHintDialogIds();
  *os_log_type_t v15 = v0;
  v15[1] = AnnounceVoicemailCATsSimple.readVoicemailAnnouncementHintAsLabels(announcementCount:daysSinceLastHint:hintCount:);
  return v18(0xD00000000000002FLL, 0x8000000000490050, v2, &type metadata for AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementHintDialogIds, VoicemailAnnouncementHintDialogIds);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_0_14();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_7_27();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = OUTLINED_FUNCTION_18_2();
    return v11(v10);
  }
}

unint64_t lazy protocol witness table accessor for type AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementHintDialogIds and conformance AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementHintDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementHintDialogIds and conformance AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementHintDialogIds;
  if (!lazy protocol witness table cache variable for type AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementHintDialogIds and conformance AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementHintDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementHintDialogIds and conformance AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementHintDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementHintDialogIds and conformance AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementHintDialogIds;
  if (!lazy protocol witness table cache variable for type AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementHintDialogIds and conformance AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementHintDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementHintDialogIds and conformance AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementHintDialogIds);
  }
  return result;
}

uint64_t AnnounceVoicemailCATsSimple.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return AnnounceVoicemailCATsSimple.init(templateDir:options:globals:)(a1, a2);
}

uint64_t AnnounceVoicemailCATsSimple.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_8_18();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v10 - 8);
  outlined init with copy of URL?(a1, (uint64_t)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a2, v2);
  uint64_t v12 = CATWrapperSimple.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a2, v2);
  outlined destroy of URL?(a1);
  return v12;
}

uint64_t AnnounceVoicemailCATsSimple.__allocating_init(useResponseMode:options:)()
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_8_18();
  __chkstk_darwin(v0);
  OUTLINED_FUNCTION_52();
  uint64_t v1 = swift_allocObject();
  uint64_t v2 = OUTLINED_FUNCTION_28_0();
  v3(v2);
  CATWrapperSimple.init(useResponseMode:options:)();
  uint64_t v4 = OUTLINED_FUNCTION_30_1();
  v5(v4);
  return v1;
}

uint64_t AnnounceVoicemailCATsSimple.init(useResponseMode:options:)()
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_8_18();
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_52();
  uint64_t v2 = OUTLINED_FUNCTION_28_0();
  v3(v2);
  CATWrapperSimple.init(useResponseMode:options:)();
  uint64_t v4 = OUTLINED_FUNCTION_30_1();
  v5(v4);
  return v0;
}

unint64_t lazy protocol witness table accessor for type AnnounceVoicemailCATsSimple.Properties and conformance AnnounceVoicemailCATsSimple.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type AnnounceVoicemailCATsSimple.Properties and conformance AnnounceVoicemailCATsSimple.Properties;
  if (!lazy protocol witness table cache variable for type AnnounceVoicemailCATsSimple.Properties and conformance AnnounceVoicemailCATsSimple.Properties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnounceVoicemailCATsSimple.Properties and conformance AnnounceVoicemailCATsSimple.Properties);
  }
  return result;
}

uint64_t type metadata accessor for AnnounceVoicemailCATsSimple()
{
  uint64_t result = type metadata singleton initialization cache for AnnounceVoicemailCATsSimple;
  if (!type metadata singleton initialization cache for AnnounceVoicemailCATsSimple) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for AnnounceVoicemailCATsSimple()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for AnnounceVoicemailCATsSimple()
{
  return type metadata accessor for AnnounceVoicemailCATsSimple();
}

unsigned char *storeEnumTagSinglePayload for AnnounceVoicemailCATsSimple.Properties(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x45DBB4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for AnnounceVoicemailCATsSimple.Properties()
{
}

void type metadata accessor for AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementDialogIds()
{
}

unsigned char *storeEnumTagSinglePayload for AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementDialogIds(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x45DCC4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for AnnounceVoicemailCATsSimple.ReadVoicemailAnnouncementHintDialogIds()
{
}

Swift::Int OUTLINED_FUNCTION_0_75()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

Swift::Int OUTLINED_FUNCTION_1_118()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t OUTLINED_FUNCTION_2_132()
{
  return Hasher.init(_seed:)();
}

uint64_t OUTLINED_FUNCTION_3_115()
{
  return Hasher.init(_seed:)();
}

Swift::Int OUTLINED_FUNCTION_9_82()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

Swift::Int OUTLINED_FUNCTION_10_77()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

Swift::Int OUTLINED_FUNCTION_11_79()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

Swift::Int OUTLINED_FUNCTION_12_67()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

Swift::Int OUTLINED_FUNCTION_13_65()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

Swift::Int OUTLINED_FUNCTION_22_60()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

Swift::Int OUTLINED_FUNCTION_23_50()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

void OUTLINED_FUNCTION_32_33(uint64_t a1@<X8>)
{
  v2[9] = a1;
  v2[10] = v3;
  v2[11] = (v1 - 32) | 0x8000000000000000;
}

PhoneCallFlowDelegatePlugin::AppNameSpecifiedByUserSignalCollectionHistory __swiftcall AppNameSpecifiedByUserSignalCollectionHistory.init()()
{
  uint64_t v0 = type metadata accessor for Date();
  OUTLINED_FUNCTION_0_0();
  uint64_t v2 = v1;
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_4();
  uint64_t v6 = v5 - v4;
  static Date.distantPast.getter();
  Date.timeIntervalSince1970.getter();
  double v8 = v7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v6, v0);
  uint64_t v9 = _swiftEmptyArrayStorage;
  double v10 = v8;
  result.timestamp = v10;
  result.apps._rawValue = v9;
  return result;
}

void AppNameSpecifiedByUserSignalCollectionHistory.daysSinceLastShowed.getter()
{
  type metadata accessor for Date();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = v0;
  uint64_t v3 = __chkstk_darwin(v2);
  __chkstk_darwin(v3);
  Date.init(timeIntervalSince1970:)();
  Date.init()();
  Date.distance(to:)();
  double v5 = v4;
  uint64_t v6 = *(void (**)(void))(v1 + 8);
  OUTLINED_FUNCTION_2_112();
  v6();
  OUTLINED_FUNCTION_2_112();
  v6();
  if (v5 / 86400.0 < 0.0) {
    double v7 = 0.0;
  }
  else {
    double v7 = v5 / 86400.0;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.siriPhone);
  swift_bridgeObjectRetain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315394;
    Date.init(timeIntervalSince1970:)();
    lazy protocol witness table accessor for type Date and conformance Date();
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v14 = v13;
    OUTLINED_FUNCTION_2_112();
    v6();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2048;
    if ((~*(void *)&v7 & 0x7FF0000000000000) == 0)
    {
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    if (v7 <= -9.22337204e18)
    {
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    if (v7 >= 9.22337204e18)
    {
LABEL_20:
      __break(1u);
      return;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v9, v10, "#AppNameSpecifiedByUserSignalCollectionHistory is shown at %s, which is %ld days ago last time", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    if ((~*(void *)&v7 & 0x7FF0000000000000) == 0)
    {
      __break(1u);
      goto LABEL_16;
    }
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v7 >= 9.22337204e18)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
}

uint64_t AppNameSpecifiedByUserSignalCollectionHistory.init(date:apps:)(uint64_t a1, uint64_t a2)
{
  Date.timeIntervalSince1970.getter();
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a2;
}

uint64_t AppNameSpecifiedByUserSignalCollectionHistory.description.getter()
{
  _StringGuts.grow(_:)(27);
  v0._countAndFlagsBits = 0x203A737070610A7BLL;
  v0._object = (void *)0xE800000000000000;
  String.append(_:)(v0);
  swift_bridgeObjectRetain();
  v1._countAndFlagsBits = Array.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0x7473656D69740A2CLL;
  v2._object = (void *)0xED0000203A706D61;
  String.append(_:)(v2);
  Double.write<A>(to:)();
  v3._countAndFlagsBits = 32010;
  v3._object = (void *)0xE200000000000000;
  String.append(_:)(v3);
  return 0;
}

uint64_t static AppNameSpecifiedByUserSignalCollectionHistory.__derived_struct_equals(_:_:)(void *a1, void *a2, double a3, double a4)
{
  if (a3 == a4) {
    return specialized static Array<A>.== infix(_:_:)(a1, a2);
  }
  else {
    return 0;
  }
}

uint64_t AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1936748641 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 1936748641;
  }
  else {
    return 0x6D617473656D6974;
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys()
{
  return AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys and conformance AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys and conformance AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AppNameSpecifiedByUserSignalCollectionHistory.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_4();
  uint64_t v9 = v8 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys and conformance AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
}

void *AppNameSpecifiedByUserSignalCollectionHistory.init(from:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_4();
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys and conformance AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    KeyedDecodingContainer.decode(_:forKey:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v5 = OUTLINED_FUNCTION_2_133();
    v6(v5);
    uint64_t v4 = v8;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v4;
}

uint64_t protocol witness for SiriPhoneDefaultsCodable.init() in conformance AppNameSpecifiedByUserSignalCollectionHistory@<X0>(void **a1@<X8>)
{
  PhoneCallFlowDelegatePlugin::AppNameSpecifiedByUserSignalCollectionHistory v3 = AppNameSpecifiedByUserSignalCollectionHistory.init()();
  uint64_t result = *(uint64_t *)&v3.timestamp;
  *a1 = v3.apps._rawValue;
  a1[1] = _swiftEmptyArrayStorage;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AppNameSpecifiedByUserSignalCollectionHistory()
{
  return AppNameSpecifiedByUserSignalCollectionHistory.description.getter();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AppNameSpecifiedByUserSignalCollectionHistory(uint64_t a1, uint64_t a2)
{
  return static AppNameSpecifiedByUserSignalCollectionHistory.__derived_struct_equals(_:_:)(*(void **)(a1 + 8), *(void **)(a2 + 8), *(double *)a1, *(double *)a2);
}

void *protocol witness for Decodable.init(from:) in conformance AppNameSpecifiedByUserSignalCollectionHistory@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = AppNameSpecifiedByUserSignalCollectionHistory.init(from:)(a1);
  if (!v2)
  {
    *a2 = v5;
    a2[1] = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AppNameSpecifiedByUserSignalCollectionHistory(void *a1)
{
  return AppNameSpecifiedByUserSignalCollectionHistory.encode(to:)(a1);
}

unint64_t lazy protocol witness table accessor for type AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys and conformance AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys and conformance AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys;
  if (!lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys and conformance AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys and conformance AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys and conformance AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys;
  if (!lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys and conformance AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys and conformance AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys and conformance AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys;
  if (!lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys and conformance AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys and conformance AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys and conformance AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys;
  if (!lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys and conformance AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys and conformance AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AppNameSpecifiedByUserSignalCollectionHistory(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory();
  a1[2] = lazy protocol witness table accessor for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory();
  unint64_t result = lazy protocol witness table accessor for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory();
  a1[3] = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for AppNameSpecifiedByUserSignalCollectionHistory(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory();
  unint64_t result = lazy protocol witness table accessor for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory();
  *(void *)(a1 + 16) = result;
  return result;
}

void *assignWithCopy for AppNameSpecifiedByUserSignalCollectionHistory(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for AppNameSpecifiedByUserSignalCollectionHistory(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AppNameSpecifiedByUserSignalCollectionHistory()
{
  return &type metadata for AppNameSpecifiedByUserSignalCollectionHistory;
}

unsigned char *storeEnumTagSinglePayload for AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x45EBE0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for AppNameSpecifiedByUserSignalCollectionHistory.CodingKeys()
{
  return &unk_56F940;
}

uint64_t OUTLINED_FUNCTION_2_133()
{
  return v0;
}

uint64_t SiriInferenceContactSlotResolver.__allocating_init(rchFlowContext:sharedGlobals:updateStrategy:)(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5, char a6)
{
  char v11 = a6 & 1;
  uint64_t v12 = swift_allocObject();
  SiriInferenceContactSlotResolver.init(rchFlowContext:sharedGlobals:updateStrategy:)(a1, a2, a3, a4, a5, v11);
  return v12;
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed Result<[INPerson], SlotResolverError>) -> ()(uint64_t a1, uint64_t a2, __int16 a3, uint64_t (*a4)(void *))
{
  v5[0] = a1;
  v5[1] = a2;
  __int16 v6 = a3 & 0x1FF;
  return a4(v5);
}

uint64_t SiriInferenceContactSlotResolver.UpdateStrategy.multicardinalIndex.getter(uint64_t a1, char a2)
{
  if (a2) {
    return 0;
  }
  return result;
}

uint64_t SiriInferenceContactSlotResolver.updateStrategy.getter()
{
  return *(void *)(v0 + 80);
}

uint64_t SiriInferenceContactSlotResolver.init(rchFlowContext:sharedGlobals:updateStrategy:)(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5, char a6)
{
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  *(void *)(v6 + 32) = a3;
  outlined init with take of AppSelectionSignalComponent(a4, v6 + 40);
  *(void *)(v6 + 80) = a5;
  *(unsigned char *)(v6 + 88) = a6 & 1;
  return v6;
}

uint64_t SiriInferenceContactSlotResolver.resolveSlot(skIntent:nlIntent:_:)(uint64_t a1, void *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v56 = a4;
  os_log_type_t v57 = a3;
  uint64_t v55 = a1;
  uint64_t v50 = *(void *)v5;
  uint64_t v54 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_0_0();
  uint64_t v53 = v7;
  __chkstk_darwin(v8);
  uint64_t v51 = (uint64_t)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ContactQuery();
  OUTLINED_FUNCTION_0_0();
  uint64_t v12 = v11;
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v59 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (void (*)(void))((char *)&v49 - v17);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v49 - v19;
  uint64_t v21 = a2[3];
  uint64_t v22 = a2[4];
  uint64_t v52 = a2;
  __swift_project_boxed_opaque_existential_1(a2, v21);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 128))(v21, v22);
  uint64_t v24 = _swiftEmptyArrayStorage;
  v66[0] = _swiftEmptyArrayStorage;
  uint64_t v64 = *(void *)(result + 16);
  if (v64)
  {
    uint64_t v49 = v5;
    unint64_t v25 = 0;
    uint64_t v60 = v12;
    uint64_t v61 = v12 + 16;
    uint64_t v58 = (void (**)(uint64_t, char *, uint64_t))(v12 + 32);
    uint64_t v62 = result;
    id v63 = v18;
    while (1)
    {
      if (v25 >= *(void *)(result + 16))
      {
        __break(1u);
        return result;
      }
      unint64_t v26 = (*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
      uint64_t v27 = *(void *)(v60 + 72);
      uint64_t v28 = *(void (**)(char *, unint64_t, uint64_t))(v60 + 16);
      v28(v20, result + v26 + v27 * v25, v10);
      if (one-time initialization token for emptyQuery != -1) {
        swift_once();
      }
      __swift_project_value_buffer(v10, (uint64_t)static ContactQuery.emptyQuery);
      char v29 = static ContactQuery.== infix(_:_:)();
      v28((char *)v18, (unint64_t)v20, v10);
      if (v29)
      {
        uint64_t v30 = OUTLINED_FUNCTION_1_119();
        v18(v30);
      }
      else
      {
        if (one-time initialization token for emptyNLv4Query != -1) {
          swift_once();
        }
        __swift_project_value_buffer(v10, (uint64_t)static ContactQuery.emptyNLv4Query);
        char v31 = static ContactQuery.== infix(_:_:)();
        uint64_t v32 = OUTLINED_FUNCTION_1_119();
        v18(v32);
        if ((v31 & 1) == 0)
        {
          os_log_type_t v33 = *v58;
          (*v58)((uint64_t)v59, v20, v10);
          uint64_t v34 = v66[0];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v34 = v66[0];
          }
          unint64_t v35 = *(void *)(v34 + 16);
          if (v35 >= *(void *)(v34 + 24) >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v34 = v66[0];
          }
          *(void *)(v34 + 16) = v35 + 1;
          v33(v34 + v26 + v35 * v27, v59, v10);
          v66[0] = v34;
          goto LABEL_17;
        }
      }
      ((void (*)(char *, uint64_t))v18)(v20, v10);
LABEL_17:
      ++v25;
      uint64_t v18 = v63;
      uint64_t result = v62;
      if (v64 == v25)
      {
        uint64_t v24 = (void *)v66[0];
        uint64_t v5 = v49;
        break;
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v36 = *(void *)(v5 + 16);
  uint64_t v37 = v5 + 40;
  uint64_t v38 = *(void *)(v5 + 64);
  uint64_t v39 = *(void *)(v5 + 72);
  __swift_project_boxed_opaque_existential_1((void *)(v5 + 40), v38);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v39 + 8))(v66, v38, v39);
  __swift_project_boxed_opaque_existential_1(v66, v66[3]);
  uint64_t v40 = v51;
  dispatch thunk of DeviceState.siriLocale.getter();
  uint64_t v41 = *(void *)(v5 + 80);
  int v42 = *(unsigned __int8 *)(v5 + 88);
  uint64_t v43 = *(void *)(v50 + 80);
  uint64_t v44 = *(void *)(v50 + 88);
  if (v42) {
    uint64_t v45 = 0;
  }
  else {
    uint64_t v45 = v41;
  }
  static SiriKitEventSender.current.getter();
  type metadata accessor for EmergencyContactResolution();
  uint64_t v46 = swift_allocObject();
  LOBYTE(v47) = v42;
  specialized static ContactResolution.updateSiriKitIntent(siriKitIntent:contactQueries:hasEmergencyContact:app:locale:nlIntent:sharedGlobals:multicardinalIndex:siriKitEventSender:emergencyContactResolution:)(v55, (uint64_t)v24, 0, v36, v40, (uint64_t)v52, v37, v45, v47, (uint64_t)v65, v46, v43, v44, v48, v49, v50, v51, (uint64_t)v52, v53,
    v54,
    v55,
    v56,
    (uint64_t)v57,
    (uint64_t)v58,
    (uint64_t)v59);
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v40, v54);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v66);
  if (!(*(uint64_t (**)(uint64_t))(*(void *)(v44 + 8) + 8))(v43)) {
    return ((uint64_t (*)(void, void, uint64_t))v57)(0, 0, 258);
  }
  v57();
  return swift_bridgeObjectRelease();
}

uint64_t SiriInferenceContactSlotResolver.__deallocating_deinit()
{
  SiriInferenceContactSlotResolver.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for SlotResolver.resolveSlot(skIntent:nlIntent:_:) in conformance SiriInferenceContactSlotResolver<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a3;
  *(void *)(v9 + 24) = a4;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, __int16), uint64_t))(**(void **)v4 + 136);
  swift_retain();
  v10(a1, a2, _ss6ResultOySaySo8INPersonCG27PhoneCallFlowDelegatePlugin17SlotResolverErrorOGIegn_AIIegg_TRTA_1, v9);

  return swift_release();
}

uint64_t protocol witness for SlotResolver.updateIntent(value:skIntent:) in conformance SiriInferenceContactSlotResolver<A>(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)v1 + 144))(*a1);
}

uint64_t protocol witness for SharedGlobalsHolding.sharedGlobals.getter in conformance SiriInferenceContactSlotResolver<A>@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(*v1 + 40, a1);
}

uint64_t protocol witness for SKIntentResolver.shouldRunResolver(skIntent:nlIntent:) in conformance SiriInferenceContactSlotResolver<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))() & 1;
}

uint64_t instantiation function for generic protocol witness table for SiriInferenceContactSlotResolver<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata completion function for SiriInferenceContactSlotResolver()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for SiriInferenceContactSlotResolver()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTagSinglePayload for SiriInferenceContactSlotResolver.UpdateStrategy(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SiriInferenceContactSlotResolver.UpdateStrategy(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t getEnumTag for SiriInferenceContactSlotResolver.UpdateStrategy(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for SiriInferenceContactSlotResolver.UpdateStrategy(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    char v2 = 1;
  }
  else
  {
    char v2 = 0;
  }
  *(unsigned char *)(result + 8) = v2;
  return result;
}

uint64_t type metadata accessor for SiriInferenceContactSlotResolver.UpdateStrategy()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_45F69C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t _ss6ResultOySaySo8INPersonCG27PhoneCallFlowDelegatePlugin17SlotResolverErrorOGIegn_AIIegg_TRTA_1(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t v4 = *(uint64_t (**)(void *))(v3 + 16);
  v6[0] = a1;
  v6[1] = a2;
  __int16 v7 = a3 & 0x1FF;
  return v4(v6);
}

uint64_t OUTLINED_FUNCTION_1_119()
{
  return v0;
}

uint64_t type metadata accessor for IntentPerson.Identifier()
{
  return type metadata accessor for IntentPerson.Identifier();
}

uint64_t IntentPerson.init(identifier:name:handle:aliases:isMe:image:)()
{
  return IntentPerson.init(identifier:name:handle:aliases:isMe:image:)();
}

uint64_t type metadata accessor for IntentPerson.Name()
{
  return type metadata accessor for IntentPerson.Name();
}

uint64_t type metadata accessor for IntentPerson.Handle.Label()
{
  return type metadata accessor for IntentPerson.Handle.Label();
}

uint64_t type metadata accessor for IntentPerson.Handle.Value()
{
  return type metadata accessor for IntentPerson.Handle.Value();
}

uint64_t type metadata accessor for IntentPerson.Handle()
{
  return type metadata accessor for IntentPerson.Handle();
}

uint64_t IntentPerson.Handle.init(_:label:)()
{
  return IntentPerson.Handle.init(_:label:)();
}

uint64_t type metadata accessor for DisplayRepresentation.Image()
{
  return type metadata accessor for DisplayRepresentation.Image();
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return dispatch thunk of JSONDecoder.decode<A>(_:from:)();
}

uint64_t JSONDecoder.init()()
{
  return JSONDecoder.init()();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return type metadata accessor for JSONDecoder();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return dispatch thunk of JSONEncoder.encode<A>(_:)();
}

uint64_t JSONEncoder.init()()
{
  return JSONEncoder.init()();
}

uint64_t type metadata accessor for JSONEncoder()
{
  return type metadata accessor for JSONEncoder();
}

uint64_t CharacterSet.init(charactersIn:)()
{
  return CharacterSet.init(charactersIn:)();
}

uint64_t static CharacterSet.decimalDigits.getter()
{
  return static CharacterSet.decimalDigits.getter();
}

uint64_t static CharacterSet.controlCharacters.getter()
{
  return static CharacterSet.controlCharacters.getter();
}

uint64_t static CharacterSet.whitespacesAndNewlines.getter()
{
  return static CharacterSet.whitespacesAndNewlines.getter();
}

uint64_t static CharacterSet._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static CharacterSet._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t CharacterSet.union(_:)()
{
  return CharacterSet.union(_:)();
}

Swift::Void __swiftcall CharacterSet.insert(charactersIn:)(Swift::String charactersIn)
{
}

uint64_t CharacterSet.contains(_:)()
{
  return CharacterSet.contains(_:)();
}

uint64_t CharacterSet.formUnion(_:)()
{
  return CharacterSet.formUnion(_:)();
}

uint64_t type metadata accessor for CharacterSet()
{
  return type metadata accessor for CharacterSet();
}

uint64_t __DataStorage._bytes.getter()
{
  return __DataStorage._bytes.getter();
}

uint64_t __DataStorage._length.getter()
{
  return __DataStorage._length.getter();
}

uint64_t __DataStorage._offset.getter()
{
  return __DataStorage._offset.getter();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:)()
{
  return dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
}

uint64_t PropertyListDecoder.init()()
{
  return PropertyListDecoder.init()();
}

uint64_t type metadata accessor for PropertyListDecoder()
{
  return type metadata accessor for PropertyListDecoder();
}

uint64_t dispatch thunk of PropertyListEncoder.encode<A>(_:)()
{
  return dispatch thunk of PropertyListEncoder.encode<A>(_:)();
}

uint64_t PropertyListEncoder.init()()
{
  return PropertyListEncoder.init()();
}

uint64_t type metadata accessor for PropertyListEncoder()
{
  return type metadata accessor for PropertyListEncoder();
}

uint64_t PersonNameComponents.givenName.getter()
{
  return PersonNameComponents.givenName.getter();
}

uint64_t PersonNameComponents.givenName.setter()
{
  return PersonNameComponents.givenName.setter();
}

uint64_t PersonNameComponents.familyName.getter()
{
  return PersonNameComponents.familyName.getter();
}

uint64_t PersonNameComponents.familyName.setter()
{
  return PersonNameComponents.familyName.setter();
}

uint64_t PersonNameComponents.middleName.getter()
{
  return PersonNameComponents.middleName.getter();
}

uint64_t PersonNameComponents.middleName.setter()
{
  return PersonNameComponents.middleName.setter();
}

uint64_t PersonNameComponents.namePrefix.getter()
{
  return PersonNameComponents.namePrefix.getter();
}

uint64_t PersonNameComponents.namePrefix.setter()
{
  return PersonNameComponents.namePrefix.setter();
}

uint64_t PersonNameComponents.nameSuffix.getter()
{
  return PersonNameComponents.nameSuffix.getter();
}

uint64_t PersonNameComponents.nameSuffix.setter()
{
  return PersonNameComponents.nameSuffix.setter();
}

NSPersonNameComponents __swiftcall PersonNameComponents._bridgeToObjectiveC()()
{
  uint64_t v0 = (objc_class *)PersonNameComponents._bridgeToObjectiveC()();
  result._private = v1;
  result.super.Class isa = v0;
  return result;
}

uint64_t PersonNameComponents.phoneticRepresentation.getter()
{
  return PersonNameComponents.phoneticRepresentation.getter();
}

uint64_t PersonNameComponents.phoneticRepresentation.setter()
{
  return PersonNameComponents.phoneticRepresentation.setter();
}

uint64_t static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t PersonNameComponents.nickname.getter()
{
  return PersonNameComponents.nickname.getter();
}

uint64_t PersonNameComponents.nickname.setter()
{
  return PersonNameComponents.nickname.setter();
}

uint64_t PersonNameComponents.init()()
{
  return PersonNameComponents.init()();
}

uint64_t type metadata accessor for PersonNameComponents()
{
  return type metadata accessor for PersonNameComponents();
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

uint64_t URL.absoluteString.getter()
{
  return URL.absoluteString.getter();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t URL.init(string:)()
{
  return URL.init(string:)();
}

uint64_t type metadata accessor for URL()
{
  return type metadata accessor for URL();
}

uint64_t Data.init(base64Encoded:options:)()
{
  return Data.init(base64Encoded:options:)();
}

uint64_t Data._Representation.append(contentsOf:)()
{
  return Data._Representation.append(contentsOf:)();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)Data._bridgeToObjectiveC()();
}

Swift::String __swiftcall Data.base64EncodedString(options:)(NSDataBase64EncodingOptions options)
{
  uint64_t v1 = Data.base64EncodedString(options:)(options);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t static Date.distantPast.getter()
{
  return static Date.distantPast.getter();
}

uint64_t static Date.distantFuture.getter()
{
  return static Date.distantFuture.getter();
}

uint64_t Date.timeIntervalSince(_:)()
{
  return Date.timeIntervalSince(_:)();
}

uint64_t Date.addingTimeInterval(_:)()
{
  return Date.addingTimeInterval(_:)();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)Date._bridgeToObjectiveC()();
}

uint64_t static Date.< infix(_:_:)()
{
  return static Date.< infix(_:_:)();
}

uint64_t Date.init(timeIntervalSince1970:)()
{
  return Date.init(timeIntervalSince1970:)();
}

uint64_t Date.timeIntervalSince1970.getter()
{
  return Date.timeIntervalSince1970.getter();
}

uint64_t static Date.== infix(_:_:)()
{
  return static Date.== infix(_:_:)();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t static Date.now.getter()
{
  return static Date.now.getter();
}

uint64_t Date.distance(to:)()
{
  return Date.distance(to:)();
}

uint64_t Date.init()()
{
  return Date.init()();
}

uint64_t type metadata accessor for Date()
{
  return type metadata accessor for Date();
}

uint64_t UUID.init(uuidString:)()
{
  return UUID.init(uuidString:)();
}

uint64_t UUID.uuidString.getter()
{
  return UUID.uuidString.getter();
}

NSUUID __swiftcall UUID._bridgeToObjectiveC()()
{
  return (NSUUID)UUID._bridgeToObjectiveC()();
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t UUID.init()()
{
  return UUID.init()();
}

uint64_t type metadata accessor for UUID()
{
  return type metadata accessor for UUID();
}

uint64_t Locale.identifier.getter()
{
  return Locale.identifier.getter();
}

NSLocale __swiftcall Locale._bridgeToObjectiveC()()
{
  return (NSLocale)Locale._bridgeToObjectiveC()();
}

uint64_t Locale.Region.identifier.getter()
{
  return Locale.Region.identifier.getter();
}

uint64_t Locale.Region.init(stringLiteral:)()
{
  return Locale.Region.init(stringLiteral:)();
}

uint64_t type metadata accessor for Locale.Region()
{
  return type metadata accessor for Locale.Region();
}

uint64_t static Locale.current.getter()
{
  return static Locale.current.getter();
}

uint64_t type metadata accessor for Locale()
{
  return type metadata accessor for Locale();
}

uint64_t IndexSet.init(integersIn:)()
{
  return IndexSet.init(integersIn:)();
}

uint64_t IndexSet.remove(integersIn:)()
{
  return IndexSet.remove(integersIn:)();
}

uint64_t type metadata accessor for IndexSet.RangeView()
{
  return type metadata accessor for IndexSet.RangeView();
}

uint64_t IndexSet.rangeView.getter()
{
  return IndexSet.rangeView.getter();
}

uint64_t type metadata accessor for IndexSet()
{
  return type metadata accessor for IndexSet();
}

uint64_t Selector.init(_:)()
{
  return Selector.init(_:)();
}

uint64_t ContactImage.serializedData.getter()
{
  return ContactImage.serializedData.getter();
}

uint64_t type metadata accessor for ContactImage()
{
  return type metadata accessor for ContactImage();
}

uint64_t static RFFeatureFlags.ResponseFramework.SMART.getter()
{
  return static RFFeatureFlags.ResponseFramework.SMART.getter();
}

uint64_t CodableAceObject.init(wrappedValue:)()
{
  return CodableAceObject.init(wrappedValue:)();
}

uint64_t CodableAceObject.wrappedValue.modify()
{
  return CodableAceObject.wrappedValue.modify();
}

uint64_t CodableAceObject.wrappedValue.getter()
{
  return CodableAceObject.wrappedValue.getter();
}

uint64_t CodableAceObject.wrappedValue.setter()
{
  return CodableAceObject.wrappedValue.setter();
}

uint64_t type metadata accessor for CodableAceObject()
{
  return type metadata accessor for CodableAceObject();
}

uint64_t dispatch thunk of UpdateResponseCommand.serializeData()()
{
  return dispatch thunk of UpdateResponseCommand.serializeData()();
}

uint64_t UpdateResponseCommand<>.serializeData()()
{
  return UpdateResponseCommand<>.serializeData()();
}

uint64_t UpdateResponseCommand<>.init(_:)()
{
  return UpdateResponseCommand<>.init(_:)();
}

uint64_t Loggable.init(wrappedValue:)()
{
  return Loggable.init(wrappedValue:)();
}

uint64_t Loggable.wrappedValue.modify()
{
  return Loggable.wrappedValue.modify();
}

uint64_t Loggable.wrappedValue.getter()
{
  return Loggable.wrappedValue.getter();
}

uint64_t Loggable.wrappedValue.setter()
{
  return Loggable.wrappedValue.setter();
}

uint64_t type metadata accessor for Loggable()
{
  return type metadata accessor for Loggable();
}

uint64_t static CommonGuardFlowUtils.makeGuardFlow(withGuards:)()
{
  return static CommonGuardFlowUtils.makeGuardFlow(withGuards:)();
}

uint64_t dispatch thunk of ConditionalFlow.exitValue.getter()
{
  return dispatch thunk of ConditionalFlow.exitValue.getter();
}

uint64_t type metadata accessor for ConditionalFlow()
{
  return type metadata accessor for ConditionalFlow();
}

uint64_t type metadata accessor for ConditionalFlowResult()
{
  return type metadata accessor for ConditionalFlowResult();
}

uint64_t SimpleOutputFlow.init(outputPublisher:_:)()
{
  return SimpleOutputFlow.init(outputPublisher:_:)();
}

uint64_t type metadata accessor for SimpleOutputFlow()
{
  return type metadata accessor for SimpleOutputFlow();
}

uint64_t SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)()
{
  return SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
}

uint64_t type metadata accessor for SimpleOutputFlowAsync()
{
  return type metadata accessor for SimpleOutputFlowAsync();
}

uint64_t type metadata accessor for AppResolutionFlowResult()
{
  return type metadata accessor for AppResolutionFlowResult();
}

uint64_t PromptForValueFlowAsync.init<A>(strategy:outputPublisher:)()
{
  return PromptForValueFlowAsync.init<A>(strategy:outputPublisher:)();
}

uint64_t AnyHandleIntentFlow.init<A>(_:)()
{
  return AnyHandleIntentFlow.init<A>(_:)();
}

uint64_t ExecuteOnRemoteFlow.init(inputToExecute:device:outputPublisher:aceService:deviceState:)()
{
  return ExecuteOnRemoteFlow.init(inputToExecute:device:outputPublisher:aceService:deviceState:)();
}

uint64_t ExecuteOnRemoteFlow.init(inputToExecute:device:outputPublisher:)()
{
  return ExecuteOnRemoteFlow.init(inputToExecute:device:outputPublisher:)();
}

uint64_t type metadata accessor for ExecuteOnRemoteFlow()
{
  return type metadata accessor for ExecuteOnRemoteFlow();
}

uint64_t type metadata accessor for ExecuteOnRemoteFlowResult()
{
  return type metadata accessor for ExecuteOnRemoteFlowResult();
}

uint64_t type metadata accessor for AnyConfirmIntentFlow()
{
  return type metadata accessor for AnyConfirmIntentFlow();
}

uint64_t AnyConfirmIntentFlow.__allocating_init<A>(_:)()
{
  return AnyConfirmIntentFlow.__allocating_init<A>(_:)();
}

uint64_t AnyConfirmIntentFlow.init<A>(_:)()
{
  return AnyConfirmIntentFlow.init<A>(_:)();
}

uint64_t UserIdentityCheckFlowStrategy.init(allowsAnonymousUser:allowsUserInteraction:handoffConfiguration:requireSpeechProfile:)()
{
  return UserIdentityCheckFlowStrategy.init(allowsAnonymousUser:allowsUserInteraction:handoffConfiguration:requireSpeechProfile:)();
}

uint64_t UserIdentityCheckFlowStrategy.HandoffConfiguration.init(companionCompatiblityCheck:handoffStrategy:)()
{
  return UserIdentityCheckFlowStrategy.HandoffConfiguration.init(companionCompatiblityCheck:handoffStrategy:)();
}

uint64_t type metadata accessor for UserIdentityCheckFlowStrategy.HandoffConfiguration()
{
  return type metadata accessor for UserIdentityCheckFlowStrategy.HandoffConfiguration();
}

uint64_t type metadata accessor for UserIdentityCheckFlowStrategy()
{
  return type metadata accessor for UserIdentityCheckFlowStrategy();
}

uint64_t SharingPolicyCheckFlow.__allocating_init()()
{
  return SharingPolicyCheckFlow.__allocating_init()();
}

uint64_t type metadata accessor for SharingPolicyCheckFlow()
{
  return type metadata accessor for SharingPolicyCheckFlow();
}

uint64_t type metadata accessor for AnyUnsupportedValueFlow()
{
  return type metadata accessor for AnyUnsupportedValueFlow();
}

uint64_t AnyUnsupportedValueFlow.__allocating_init<A>(_:)()
{
  return AnyUnsupportedValueFlow.__allocating_init<A>(_:)();
}

uint64_t VoiceCommandsParityFlow.eraseToAnyVoiceCommandsParityFlow()()
{
  return VoiceCommandsParityFlow.eraseToAnyVoiceCommandsParityFlow()();
}

uint64_t CompositionResolutionFlow.init(from:to:expectMultipleResolutionResults:nlContextUpdate:targetedRequest:)()
{
  return CompositionResolutionFlow.init(from:to:expectMultipleResolutionResults:nlContextUpdate:targetedRequest:)();
}

uint64_t type metadata accessor for CompositionResolutionFlow()
{
  return type metadata accessor for CompositionResolutionFlow();
}

uint64_t PromptForConfirmationFlowAsync.__allocating_init<A>(itemToConfirm:strategy:outputPublisher:)()
{
  return PromptForConfirmationFlowAsync.__allocating_init<A>(itemToConfirm:strategy:outputPublisher:)();
}

uint64_t PromptForConfirmationFlowAsync.init<A>(itemToConfirm:strategy:outputPublisher:)()
{
  return PromptForConfirmationFlowAsync.init<A>(itemToConfirm:strategy:outputPublisher:)();
}

uint64_t type metadata accessor for PromptForConfirmationFlowAsync()
{
  return type metadata accessor for PromptForConfirmationFlowAsync();
}

uint64_t static CompanionCompatibilityCheckFlowStrategy.require(_:redirectToServerOnFailure:)()
{
  return static CompanionCompatibilityCheckFlowStrategy.require(_:redirectToServerOnFailure:)();
}

uint64_t type metadata accessor for CompanionCompatibilityCheckFlowStrategy()
{
  return type metadata accessor for CompanionCompatibilityCheckFlowStrategy();
}

uint64_t PostPersonalDomainActivityNotificationFlow.init(strategy:)()
{
  return PostPersonalDomainActivityNotificationFlow.init(strategy:)();
}

uint64_t type metadata accessor for PostPersonalDomainActivityNotificationFlow()
{
  return type metadata accessor for PostPersonalDomainActivityNotificationFlow();
}

uint64_t dispatch thunk of AnyFlow.on(input:)()
{
  return dispatch thunk of AnyFlow.on(input:)();
}

uint64_t type metadata accessor for AnyFlow()
{
  return type metadata accessor for AnyFlow();
}

uint64_t static AppFlowFactory.makeOnDeviceAppResolutionFlow<A>(resolving:appResolutionStrategy:unlockDeviceStrategy:protectedAppCheckStrategy:)()
{
  return static AppFlowFactory.makeOnDeviceAppResolutionFlow<A>(resolving:appResolutionStrategy:unlockDeviceStrategy:protectedAppCheckStrategy:)();
}

uint64_t TaskFlowConfiguration.init(taskName:taskType:)()
{
  return TaskFlowConfiguration.init(taskName:taskType:)();
}

uint64_t type metadata accessor for TaskFlowConfiguration()
{
  return type metadata accessor for TaskFlowConfiguration();
}

uint64_t type metadata accessor for TaskFlowType()
{
  return type metadata accessor for TaskFlowType();
}

uint64_t GuardFlow.init(preconditionFlows:)()
{
  return GuardFlow.init(preconditionFlows:)();
}

uint64_t type metadata accessor for GuardFlow()
{
  return type metadata accessor for GuardFlow();
}

uint64_t static CommonFlowGuard.ensuringUnlockedApp(_:)()
{
  return static CommonFlowGuard.ensuringUnlockedApp(_:)();
}

uint64_t static CommonFlowGuard.ensuringUserIdentity(using:)()
{
  return static CommonFlowGuard.ensuringUserIdentity(using:)();
}

uint64_t static CommonFlowGuard.ensuringDeviceIsAuthenticated(using:)()
{
  return static CommonFlowGuard.ensuringDeviceIsAuthenticated(using:)();
}

uint64_t static CommonFlowGuard.ensuringUserHasSupportedCompanion(using:)()
{
  return static CommonFlowGuard.ensuringUserHasSupportedCompanion(using:)();
}

uint64_t type metadata accessor for CommonFlowGuard()
{
  return type metadata accessor for CommonFlowGuard();
}

uint64_t static PromptFlowProviderType.continuation<A>(_:)()
{
  return static PromptFlowProviderType.continuation<A>(_:)();
}

uint64_t PatternFlowProvider.init(outputPublisher:responseGenerator:)()
{
  return PatternFlowProvider.init(outputPublisher:responseGenerator:)();
}

uint64_t type metadata accessor for PatternFlowProvider()
{
  return type metadata accessor for PatternFlowProvider();
}

uint64_t dispatch thunk of PatternFlowProviding.makeResponseFlow(patternExecutionResult:outputGenerationManifest:)()
{
  return dispatch thunk of PatternFlowProviding.makeResponseFlow(patternExecutionResult:outputGenerationManifest:)();
}

uint64_t dispatch thunk of PatternFlowProviding.makeResponseFlowWithContinuationPrompt<A>(strategy:)()
{
  return dispatch thunk of PatternFlowProviding.makeResponseFlowWithContinuationPrompt<A>(strategy:)();
}

uint64_t dispatch thunk of AnyValueFlow.exitValue.getter()
{
  return dispatch thunk of AnyValueFlow.exitValue.getter();
}

uint64_t dispatch thunk of AnyValueFlow.on(input:)()
{
  return dispatch thunk of AnyValueFlow.on(input:)();
}

uint64_t type metadata accessor for AnyValueFlow()
{
  return type metadata accessor for AnyValueFlow();
}

uint64_t static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)()
{
  return static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)();
}

uint64_t static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:responseFlowProducer:)()
{
  return static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:responseFlowProducer:)();
}

uint64_t static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)()
{
  return static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)();
}

{
  return static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)();
}

uint64_t static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B>(app:)()
{
  return static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B>(app:)();
}

uint64_t static RCHChildFlowFactoryHelper.makeContinueInAppFlowWithAutomaticPunchOutProducer<A>(strategy:)()
{
  return static RCHChildFlowFactoryHelper.makeContinueInAppFlowWithAutomaticPunchOutProducer<A>(strategy:)();
}

uint64_t static RCHChildFlowFactoryHelper.makeNeedsConfirmationFlowProducer<A>(strategy:)()
{
  return static RCHChildFlowFactoryHelper.makeNeedsConfirmationFlowProducer<A>(strategy:)();
}

uint64_t static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A>(strategy:)()
{
  return static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A>(strategy:)();
}

uint64_t static RCHChildFlowFactoryHelper.makeRequestTCCAcceptanceFlow<A, B>(strategy:)()
{
  return static RCHChildFlowFactoryHelper.makeRequestTCCAcceptanceFlow<A, B>(strategy:)();
}

uint64_t static RCHChildFlowFactoryHelper.makeUnsupportedValueAndCancelFlowProducer<A>(strategy:)()
{
  return static RCHChildFlowFactoryHelper.makeUnsupportedValueAndCancelFlowProducer<A>(strategy:)();
}

uint64_t static RCHChildFlowFactoryHelper.makeUnsupportedValueAndPromptFlowProducer<A>(strategy:)()
{
  return static RCHChildFlowFactoryHelper.makeUnsupportedValueAndPromptFlowProducer<A>(strategy:)();
}

uint64_t static RCHChildFlowFactoryHelper.makeUnsupportedUnsetRelationshipFlowProducer<A, B>(strategy:)()
{
  return static RCHChildFlowFactoryHelper.makeUnsupportedUnsetRelationshipFlowProducer<A, B>(strategy:)();
}

uint64_t RCHChildFlowProducersAsync.needsValueFlowProducer.setter()
{
  return RCHChildFlowProducersAsync.needsValueFlowProducer.setter();
}

uint64_t RCHChildFlowProducersAsync.handleIntentFlowProducer.setter()
{
  return RCHChildFlowProducersAsync.handleIntentFlowProducer.setter();
}

uint64_t RCHChildFlowProducersAsync.appResolutionFlowProducer.setter()
{
  return RCHChildFlowProducersAsync.appResolutionFlowProducer.setter();
}

uint64_t RCHChildFlowProducersAsync.confirmIntentFlowProducer.getter()
{
  return RCHChildFlowProducersAsync.confirmIntentFlowProducer.getter();
}

uint64_t RCHChildFlowProducersAsync.confirmIntentFlowProducer.setter()
{
  return RCHChildFlowProducersAsync.confirmIntentFlowProducer.setter();
}

uint64_t RCHChildFlowProducersAsync.continueInAppFlowProducer.setter()
{
  return RCHChildFlowProducersAsync.continueInAppFlowProducer.setter();
}

uint64_t RCHChildFlowProducersAsync.unsupportedValueFlowProducer.getter()
{
  return RCHChildFlowProducersAsync.unsupportedValueFlowProducer.getter();
}

uint64_t RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter()
{
  return RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter();
}

uint64_t RCHChildFlowProducersAsync.needsConfirmationFlowProducer.setter()
{
  return RCHChildFlowProducersAsync.needsConfirmationFlowProducer.setter();
}

uint64_t RCHChildFlowProducersAsync.needsDisambiguationFlowProducer.setter()
{
  return RCHChildFlowProducersAsync.needsDisambiguationFlowProducer.setter();
}

uint64_t RCHChildFlowProducersAsync.requestTCCAcceptanceFlowProducer.setter()
{
  return RCHChildFlowProducersAsync.requestTCCAcceptanceFlowProducer.setter();
}

uint64_t RCHChildFlowProducersAsync.appResolutionBeforeNextResolveFlowProducer.setter()
{
  return RCHChildFlowProducersAsync.appResolutionBeforeNextResolveFlowProducer.setter();
}

uint64_t RCHChildFlowProducersAsync.init()()
{
  return RCHChildFlowProducersAsync.init()();
}

uint64_t type metadata accessor for RCHChildFlowProducersAsync()
{
  return type metadata accessor for RCHChildFlowProducersAsync();
}

uint64_t RCHChildFlowFactory.init(producers:withFallbacks:)()
{
  return RCHChildFlowFactory.init(producers:withFallbacks:)();
}

uint64_t RCHChildFlowFactory.__allocating_init(producers:)()
{
  return RCHChildFlowFactory.__allocating_init(producers:)();
}

uint64_t RCHChildFlowFactory.init(producers:)()
{
  return RCHChildFlowFactory.init(producers:)();
}

uint64_t type metadata accessor for RCHChildFlowFactory()
{
  return type metadata accessor for RCHChildFlowFactory();
}

uint64_t RCHChildFlowProducers.handleIntentFlowCompletion.setter()
{
  return RCHChildFlowProducers.handleIntentFlowCompletion.setter();
}

uint64_t type metadata accessor for RCHChildFlowProducers()
{
  return type metadata accessor for RCHChildFlowProducers();
}

uint64_t ResultSetFlowProvider.makeNarrowingPromptFlowIfNeeded()()
{
  return ResultSetFlowProvider.makeNarrowingPromptFlowIfNeeded()();
}

uint64_t dispatch thunk of Flow.on(input:)()
{
  return dispatch thunk of Flow.on(input:)();
}

uint64_t Flow.eraseToAnyFlow()()
{
  return Flow.eraseToAnyFlow()();
}

uint64_t Flow.eraseToAnyValueFlow()()
{
  return Flow.eraseToAnyValueFlow()();
}

uint64_t Flow.deferToExecuteAsync(_:)()
{
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t Flow.guarded<A>(by:)()
{
  return Flow.guarded<A>(by:)();
}

uint64_t static FlowSearchResult.noFlow.getter()
{
  return static FlowSearchResult.noFlow.getter();
}

uint64_t static FlowSearchResult.flow(_:)()
{
  return static FlowSearchResult.flow(_:)();
}

uint64_t dispatch thunk of FlowTaskProvider.id.getter()
{
  return dispatch thunk of FlowTaskProvider.id.getter();
}

uint64_t type metadata accessor for FlowUnhandledReason()
{
  return type metadata accessor for FlowUnhandledReason();
}

Swift::Void __swiftcall FlowPlugin.warmup()()
{
}

uint64_t SiriLocationAccessGuardFlow.__allocating_init(needsPreciseLocation:)()
{
  return SiriLocationAccessGuardFlow.__allocating_init(needsPreciseLocation:)();
}

uint64_t type metadata accessor for SiriLocationAccessGuardFlow()
{
  return type metadata accessor for SiriLocationAccessGuardFlow();
}

uint64_t static SiriKitEventSender.current.getter()
{
  return static SiriKitEventSender.current.getter();
}

uint64_t dispatch thunk of SiriKitEventSending.send(_:)()
{
  return dispatch thunk of SiriKitEventSending.send(_:)();
}

uint64_t dispatch thunk of static SiriKitAceViewBuilder.makeBuilder(deviceState:)()
{
  return dispatch thunk of static SiriKitAceViewBuilder.makeBuilder(deviceState:)();
}

uint64_t dispatch thunk of SiriKitAceViewBuilder.addSnippet(snippet:)()
{
  return dispatch thunk of SiriKitAceViewBuilder.addSnippet(snippet:)();
}

uint64_t dispatch thunk of SiriKitAceViewBuilder.withButtons(buttons:)()
{
  return dispatch thunk of SiriKitAceViewBuilder.withButtons(buttons:)();
}

uint64_t dispatch thunk of SiriKitAceViewBuilder.addButtonGroup(buttonGroup:)()
{
  return dispatch thunk of SiriKitAceViewBuilder.addButtonGroup(buttonGroup:)();
}

uint64_t dispatch thunk of SiriKitAceViewBuilder.withUtteranceViews(utteranceViews:)()
{
  return dispatch thunk of SiriKitAceViewBuilder.withUtteranceViews(utteranceViews:)();
}

uint64_t dispatch thunk of SiriKitAceViewBuilder.withDisambiguationList(disambiguationList:)()
{
  return dispatch thunk of SiriKitAceViewBuilder.withDisambiguationList(disambiguationList:)();
}

uint64_t dispatch thunk of SiriKitAceViewBuilder.build()()
{
  return dispatch thunk of SiriKitAceViewBuilder.build()();
}

uint64_t dispatch thunk of SiriKitAceViewBuilder.addButton(button:)()
{
  return dispatch thunk of SiriKitAceViewBuilder.addButton(button:)();
}

uint64_t type metadata accessor for SiriKitAceViewBuilder()
{
  return type metadata accessor for SiriKitAceViewBuilder();
}

uint64_t SiriKitReliabilityCodes.rawValue.getter()
{
  return SiriKitReliabilityCodes.rawValue.getter();
}

uint64_t type metadata accessor for SiriKitReliabilityCodes()
{
  return type metadata accessor for SiriKitReliabilityCodes();
}

uint64_t SiriKitConfirmationState.rawValue.getter()
{
  return SiriKitConfirmationState.rawValue.getter();
}

uint64_t type metadata accessor for SiriKitConfirmationState()
{
  return type metadata accessor for SiriKitConfirmationState();
}

uint64_t SiriKitParameterMetadata.init(parameterName:shouldResolve:confirmationStates:)()
{
  return SiriKitParameterMetadata.init(parameterName:shouldResolve:confirmationStates:)();
}

uint64_t type metadata accessor for SiriKitParameterMetadata()
{
  return type metadata accessor for SiriKitParameterMetadata();
}

uint64_t SiriKitDisambiguationItem.init(components:image:directInvocation:allowLineWrapForDisplayText:)()
{
  return SiriKitDisambiguationItem.init(components:image:directInvocation:allowLineWrapForDisplayText:)();
}

uint64_t SiriKitDisambiguationItem.init(components:image:utterance:allowLineWrapForDisplayText:)()
{
  return SiriKitDisambiguationItem.init(components:image:utterance:allowLineWrapForDisplayText:)();
}

uint64_t SiriKitDisambiguationItem.init(components:utterance:allowLineWrapForDisplayText:)()
{
  return SiriKitDisambiguationItem.init(components:utterance:allowLineWrapForDisplayText:)();
}

uint64_t SiriKitDisambiguationItem.components.getter()
{
  return SiriKitDisambiguationItem.components.getter();
}

uint64_t dispatch thunk of static SiriKitDisambiguationItem.allowedItems(disambiguationItems:deviceLockedForDisambiguation:)()
{
  return dispatch thunk of static SiriKitDisambiguationItem.allowedItems(disambiguationItems:deviceLockedForDisambiguation:)();
}

uint64_t SiriKitDisambiguationItem.displayImage.getter()
{
  return SiriKitDisambiguationItem.displayImage.getter();
}

uint64_t dispatch thunk of SiriKitDisambiguationItem.toSpokenString(deviceLocked:)()
{
  return dispatch thunk of SiriKitDisambiguationItem.toSpokenString(deviceLocked:)();
}

uint64_t SiriKitDisambiguationItem.monogramLetters.getter()
{
  return SiriKitDisambiguationItem.monogramLetters.getter();
}

uint64_t SiriKitDisambiguationItem.directInvocation.getter()
{
  return SiriKitDisambiguationItem.directInvocation.getter();
}

uint64_t dispatch thunk of SiriKitDisambiguationItem.getFirstComponent()()
{
  return dispatch thunk of SiriKitDisambiguationItem.getFirstComponent()();
}

uint64_t dispatch thunk of SiriKitDisambiguationItem.getThirdComponent()()
{
  return dispatch thunk of SiriKitDisambiguationItem.getThirdComponent()();
}

uint64_t SiriKitDisambiguationItem.contactIdentifiers.getter()
{
  return SiriKitDisambiguationItem.contactIdentifiers.getter();
}

uint64_t dispatch thunk of SiriKitDisambiguationItem.getSecondComponent()()
{
  return dispatch thunk of SiriKitDisambiguationItem.getSecondComponent()();
}

uint64_t SiriKitDisambiguationItem.utterance.getter()
{
  return SiriKitDisambiguationItem.utterance.getter();
}

uint64_t type metadata accessor for SiriKitDisambiguationItem()
{
  return type metadata accessor for SiriKitDisambiguationItem();
}

uint64_t dispatch thunk of SiriKitDisambiguationList.makeSpeakableListItems(deviceIsLocked:)()
{
  return dispatch thunk of SiriKitDisambiguationList.makeSpeakableListItems(deviceIsLocked:)();
}

uint64_t SiriKitDisambiguationList.disambiguationItems.getter()
{
  return SiriKitDisambiguationList.disambiguationItems.getter();
}

uint64_t SiriKitDisambiguationList.shouldReadItemsInVox.getter()
{
  return SiriKitDisambiguationList.shouldReadItemsInVox.getter();
}

uint64_t SiriKitDisambiguationList.requestUnlockForEmptyOrDuplicateItems.getter()
{
  return SiriKitDisambiguationList.requestUnlockForEmptyOrDuplicateItems.getter();
}

uint64_t SiriKitDisambiguationList.init(rawItems:disambiguationItems:shouldReadItemsInVox:requestUnlockForEmptyOrDuplicateItems:)()
{
  return SiriKitDisambiguationList.init(rawItems:disambiguationItems:shouldReadItemsInVox:requestUnlockForEmptyOrDuplicateItems:)();
}

uint64_t SiriKitDisambiguationList.rawItems.getter()
{
  return SiriKitDisambiguationList.rawItems.getter();
}

uint64_t type metadata accessor for SiriKitDisambiguationList()
{
  return type metadata accessor for SiriKitDisambiguationList();
}

uint64_t SiriKitDisambiguationItemPair.rawItem.getter()
{
  return SiriKitDisambiguationItemPair.rawItem.getter();
}

uint64_t SiriKitDisambiguationItemPair.formattedItem.getter()
{
  return SiriKitDisambiguationItemPair.formattedItem.getter();
}

uint64_t type metadata accessor for SiriKitDisambiguationItemPair()
{
  return type metadata accessor for SiriKitDisambiguationItemPair();
}

uint64_t static SiriKitIntentExecutionBehavior.standard()()
{
  return static SiriKitIntentExecutionBehavior.standard()();
}

uint64_t type metadata accessor for SiriKitIntentExecutionBehavior()
{
  return type metadata accessor for SiriKitIntentExecutionBehavior();
}

uint64_t SiriKitDisambiguationListAdapter.init(disambiguationList:deviceState:authenticationPolicy:)()
{
  return SiriKitDisambiguationListAdapter.init(disambiguationList:deviceState:authenticationPolicy:)();
}

uint64_t type metadata accessor for SiriKitDisambiguationListAdapter()
{
  return type metadata accessor for SiriKitDisambiguationListAdapter();
}

uint64_t dispatch thunk of static SiriKitDisambiguationItemComponent.makeBuilder(_:)()
{
  return dispatch thunk of static SiriKitDisambiguationItemComponent.makeBuilder(_:)();
}

uint64_t dispatch thunk of SiriKitDisambiguationItemComponent.toSpokenString(deviceLocked:)()
{
  return dispatch thunk of SiriKitDisambiguationItemComponent.toSpokenString(deviceLocked:)();
}

uint64_t dispatch thunk of SiriKitDisambiguationItemComponent.toDisplayString(deviceLocked:)()
{
  return dispatch thunk of SiriKitDisambiguationItemComponent.toDisplayString(deviceLocked:)();
}

uint64_t SiriKitDisambiguationItemComponent.printOnLockScreen.getter()
{
  return SiriKitDisambiguationItemComponent.printOnLockScreen.getter();
}

uint64_t SiriKitDisambiguationItemComponent.speakOnLockScreen.getter()
{
  return SiriKitDisambiguationItemComponent.speakOnLockScreen.getter();
}

uint64_t SiriKitDisambiguationItemComponent.allowedOnLockScreen.getter()
{
  return SiriKitDisambiguationItemComponent.allowedOnLockScreen.getter();
}

uint64_t SiriKitDisambiguationItemComponent.print.getter()
{
  return SiriKitDisambiguationItemComponent.print.getter();
}

uint64_t SiriKitDisambiguationItemComponent.speak.getter()
{
  return SiriKitDisambiguationItemComponent.speak.getter();
}

uint64_t dispatch thunk of SiriKitDisambiguationItemComponent.Builder.withPrintBlue(_:)()
{
  return dispatch thunk of SiriKitDisambiguationItemComponent.Builder.withPrintBlue(_:)();
}

uint64_t dispatch thunk of SiriKitDisambiguationItemComponent.Builder.withPrintOnLockScreen(_:)()
{
  return dispatch thunk of SiriKitDisambiguationItemComponent.Builder.withPrintOnLockScreen(_:)();
}

uint64_t dispatch thunk of SiriKitDisambiguationItemComponent.Builder.withSpeakOnLockScreen(_:)()
{
  return dispatch thunk of SiriKitDisambiguationItemComponent.Builder.withSpeakOnLockScreen(_:)();
}

uint64_t dispatch thunk of SiriKitDisambiguationItemComponent.Builder.withAllowedOnLockScreen(_:)()
{
  return dispatch thunk of SiriKitDisambiguationItemComponent.Builder.withAllowedOnLockScreen(_:)();
}

uint64_t dispatch thunk of SiriKitDisambiguationItemComponent.Builder.build()()
{
  return dispatch thunk of SiriKitDisambiguationItemComponent.Builder.build()();
}

uint64_t dispatch thunk of SiriKitDisambiguationItemComponent.Builder.withSpeak(_:)()
{
  return dispatch thunk of SiriKitDisambiguationItemComponent.Builder.withSpeak(_:)();
}

uint64_t SiriKitDisambiguationItemComponent.printBlue.getter()
{
  return SiriKitDisambiguationItemComponent.printBlue.getter();
}

uint64_t type metadata accessor for SiriKitDisambiguationItemComponent()
{
  return type metadata accessor for SiriKitDisambiguationItemComponent();
}

uint64_t static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetForCarPlay(disambiguationItems:deviceIsLocked:)()
{
  return static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetForCarPlay(disambiguationItems:deviceIsLocked:)();
}

uint64_t static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetPhone(disambiguationItems:deviceIsLocked:imageSize:)()
{
  return static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetPhone(disambiguationItems:deviceIsLocked:imageSize:)();
}

uint64_t static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetForMac(disambiguationItems:deviceIsLocked:)()
{
  return static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetForMac(disambiguationItems:deviceIsLocked:)();
}

uint64_t static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetForWatch(disambiguationItems:textToSpeechIsEnabled:)()
{
  return static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetForWatch(disambiguationItems:textToSpeechIsEnabled:)();
}

uint64_t SiriKitEvent.__allocating_init(taskFlowConfiguration:_:)()
{
  return SiriKitEvent.__allocating_init(taskFlowConfiguration:_:)();
}

uint64_t dispatch thunk of SiriKitEvent.SiriKitEventBuilder.domainContext.setter()
{
  return dispatch thunk of SiriKitEvent.SiriKitEventBuilder.domainContext.setter();
}

uint64_t dispatch thunk of SiriKitEvent.SiriKitEventBuilder.parameterName.setter()
{
  return dispatch thunk of SiriKitEvent.SiriKitEventBuilder.parameterName.setter();
}

uint64_t dispatch thunk of SiriKitEvent.SiriKitEventBuilder.statusReasonDescription.setter()
{
  return dispatch thunk of SiriKitEvent.SiriKitEventBuilder.statusReasonDescription.setter();
}

uint64_t dispatch thunk of SiriKitEvent.SiriKitEventBuilder.app.setter()
{
  return dispatch thunk of SiriKitEvent.SiriKitEventBuilder.app.setter();
}

uint64_t SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)()
{
  return SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)();
}

uint64_t SiriKitEvent.debugDescription.getter()
{
  return SiriKitEvent.debugDescription.getter();
}

uint64_t SiriKitEvent.__allocating_init(taskType:domainPerfContext:_:)()
{
  return SiriKitEvent.__allocating_init(taskType:domainPerfContext:_:)();
}

uint64_t SiriKitEvent.__allocating_init(stateType:taskType:statusReason:_:)()
{
  return SiriKitEvent.__allocating_init(stateType:taskType:statusReason:_:)();
}

uint64_t static SiriKitEvent.uufrReady()()
{
  return static SiriKitEvent.uufrReady()();
}

uint64_t type metadata accessor for SiriKitEvent()
{
  return type metadata accessor for SiriKitEvent();
}

uint64_t static SiriKitLifecycle._logCrashToEventBus(_:)()
{
  return static SiriKitLifecycle._logCrashToEventBus(_:)();
}

uint64_t dispatch thunk of DeviceState.isEyesFree.getter()
{
  return dispatch thunk of DeviceState.isEyesFree.getter();
}

uint64_t dispatch thunk of DeviceState.isXRDevice.getter()
{
  return dispatch thunk of DeviceState.isXRDevice.getter();
}

uint64_t dispatch thunk of DeviceState.siriLocale.getter()
{
  return dispatch thunk of DeviceState.siriLocale.getter();
}

uint64_t dispatch thunk of DeviceState.inputOrigin.getter()
{
  return dispatch thunk of DeviceState.inputOrigin.getter();
}

uint64_t dispatch thunk of DeviceState.isCarDNDMode.getter()
{
  return dispatch thunk of DeviceState.isCarDNDMode.getter();
}

uint64_t dispatch thunk of DeviceState.interactionType.getter()
{
  return dispatch thunk of DeviceState.interactionType.getter();
}

uint64_t dispatch thunk of DeviceState.isAuthenticated(for:)()
{
  return dispatch thunk of DeviceState.isAuthenticated(for:)();
}

uint64_t dispatch thunk of DeviceState.restrictedCommands.getter()
{
  return dispatch thunk of DeviceState.restrictedCommands.getter();
}

uint64_t dispatch thunk of DeviceState.isTextToSpeechEnabled.getter()
{
  return dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
}

uint64_t dispatch thunk of DeviceState.preferencesLanguageCode.getter()
{
  return dispatch thunk of DeviceState.preferencesLanguageCode.getter();
}

uint64_t dispatch thunk of DeviceState.isMac.getter()
{
  return dispatch thunk of DeviceState.isMac.getter();
}

uint64_t dispatch thunk of DeviceState.isPad.getter()
{
  return dispatch thunk of DeviceState.isPad.getter();
}

uint64_t dispatch thunk of DeviceState.isPod.getter()
{
  return dispatch thunk of DeviceState.isPod.getter();
}

uint64_t dispatch thunk of DeviceState.isPhone.getter()
{
  return dispatch thunk of DeviceState.isPhone.getter();
}

uint64_t dispatch thunk of DeviceState.isWatch.getter()
{
  return dispatch thunk of DeviceState.isWatch.getter();
}

uint64_t dispatch thunk of DeviceState.isAppleTV.getter()
{
  return dispatch thunk of DeviceState.isAppleTV.getter();
}

uint64_t dispatch thunk of DeviceState.isCarPlay.getter()
{
  return dispatch thunk of DeviceState.isCarPlay.getter();
}

uint64_t dispatch thunk of DeviceState.isHomePod.getter()
{
  return dispatch thunk of DeviceState.isHomePod.getter();
}

uint64_t DeviceState.asInvocationContext.getter()
{
  return DeviceState.asInvocationContext.getter();
}

uint64_t DeviceState.isVox.getter()
{
  return DeviceState.isVox.getter();
}

uint64_t static DialogPhase.completion.getter()
{
  return static DialogPhase.completion.getter();
}

uint64_t static DialogPhase.confirmation.getter()
{
  return static DialogPhase.confirmation.getter();
}

uint64_t static DialogPhase.clarification.getter()
{
  return static DialogPhase.clarification.getter();
}

uint64_t static DialogPhase.error.getter()
{
  return static DialogPhase.error.getter();
}

uint64_t static DialogPhase.summary.getter()
{
  return static DialogPhase.summary.getter();
}

uint64_t static DialogPhase.canceled.getter()
{
  return static DialogPhase.canceled.getter();
}

uint64_t static DialogPhase.confirmed.getter()
{
  return static DialogPhase.confirmed.getter();
}

uint64_t type metadata accessor for DialogPhase()
{
  return type metadata accessor for DialogPhase();
}

uint64_t DisplayHint.displayValue.getter()
{
  return DisplayHint.displayValue.getter();
}

uint64_t DisplayHint.init(idValue:displayValue:)()
{
  return DisplayHint.init(idValue:displayValue:)();
}

uint64_t DisplayHint.idValue.getter()
{
  return DisplayHint.idValue.getter();
}

uint64_t type metadata accessor for DisplayHint()
{
  return type metadata accessor for DisplayHint();
}

uint64_t static EmptyOutput.instance.getter()
{
  return static EmptyOutput.instance.getter();
}

uint64_t type metadata accessor for EmptyOutput()
{
  return type metadata accessor for EmptyOutput();
}

uint64_t dispatch thunk of ViewFactory.makeSummaryView(templateResult:snippets:listenAfterSpeaking:canUseServerTTS:)()
{
  return dispatch thunk of ViewFactory.makeSummaryView(templateResult:snippets:listenAfterSpeaking:canUseServerTTS:)();
}

uint64_t ViewFactory.init(ttsEnabled:)()
{
  return ViewFactory.init(ttsEnabled:)();
}

uint64_t type metadata accessor for ViewFactory()
{
  return type metadata accessor for ViewFactory();
}

uint64_t type metadata accessor for ActivityType()
{
  return type metadata accessor for ActivityType();
}

uint64_t type metadata accessor for BargeInError()
{
  return type metadata accessor for BargeInError();
}

uint64_t static ColorFactory.emergencyRed.getter()
{
  return static ColorFactory.emergencyRed.getter();
}

uint64_t static ColorFactory.black.getter()
{
  return static ColorFactory.black.getter();
}

uint64_t static ColorFactory.white.getter()
{
  return static ColorFactory.white.getter();
}

uint64_t PluginAction.init(flowHandlerId:input:loggingId:)()
{
  return PluginAction.init(flowHandlerId:input:loggingId:)();
}

uint64_t PluginAction.loggingId.getter()
{
  return PluginAction.loggingId.getter();
}

uint64_t type metadata accessor for PluginAction()
{
  return type metadata accessor for PluginAction();
}

uint64_t type metadata accessor for PromptResult()
{
  return type metadata accessor for PromptResult();
}

uint64_t type metadata accessor for ResponseType()
{
  return type metadata accessor for ResponseType();
}

uint64_t TCCResponses.init()()
{
  return TCCResponses.init()();
}

uint64_t type metadata accessor for TCCResponses()
{
  return type metadata accessor for TCCResponses();
}

uint64_t static CasinoFactory.makeRichText(text:bold:maxLines:textColor:)()
{
  return static CasinoFactory.makeRichText(text:bold:maxLines:textColor:)();
}

uint64_t static CasinoFactory.makeRowCardSection(possibleTitle:possibleLeadingSubtitle:possibleTrailingSubtitle:possibleImage:possibleMonogramLetters:possibleContactIdentifiers:possibleImageUri:maxLines:shouldCropToCircle:shouldUseDefaultImageSize:)()
{
  return static CasinoFactory.makeRowCardSection(possibleTitle:possibleLeadingSubtitle:possibleTrailingSubtitle:possibleImage:possibleMonogramLetters:possibleContactIdentifiers:possibleImageUri:maxLines:shouldCropToCircle:shouldUseDefaultImageSize:)();
}

uint64_t static CasinoFactory.makeRowCardSection(possibleTitle:imageSize:possibleLeadingSubtitle:possibleTrailingSubtitle:possibleImage:possibleMonogramLetters:possibleContactIdentifiers:possibleImageUri:maxLines:shouldCropToCircle:withBlueTitle:)()
{
  return static CasinoFactory.makeRowCardSection(possibleTitle:imageSize:possibleLeadingSubtitle:possibleTrailingSubtitle:possibleImage:possibleMonogramLetters:possibleContactIdentifiers:possibleImageUri:maxLines:shouldCropToCircle:withBlueTitle:)();
}

uint64_t static CasinoFactory.makePlaceholderCardSection()()
{
  return static CasinoFactory.makePlaceholderCardSection()();
}

uint64_t static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)()
{
  return static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();
}

uint64_t static CasinoFactory.makeSendCommandsFromMachineUtterance(machineUtterance:)()
{
  return static CasinoFactory.makeSendCommandsFromMachineUtterance(machineUtterance:)();
}

uint64_t PaginatedItem.isLastItemInPage.getter()
{
  return PaginatedItem.isLastItemInPage.getter();
}

uint64_t PaginatedItem.item.getter()
{
  return PaginatedItem.item.getter();
}

uint64_t PaginatedItem.page.getter()
{
  return PaginatedItem.page.getter();
}

uint64_t type metadata accessor for PaginatedItem()
{
  return type metadata accessor for PaginatedItem();
}

uint64_t type metadata accessor for RCHFlowResult()
{
  return type metadata accessor for RCHFlowResult();
}

uint64_t SemanticValue.label.getter()
{
  return SemanticValue.label.getter();
}

uint64_t SemanticValue.label.setter()
{
  return SemanticValue.label.setter();
}

uint64_t SemanticValue.init(string:label:)()
{
  return SemanticValue.init(string:label:)();
}

uint64_t SemanticValue.string.getter()
{
  return SemanticValue.string.getter();
}

uint64_t SemanticValue.string.setter()
{
  return SemanticValue.string.setter();
}

uint64_t SemanticValue.nodeClass.setter()
{
  return SemanticValue.nodeClass.setter();
}

uint64_t SemanticValue.init()()
{
  return SemanticValue.init()();
}

uint64_t type metadata accessor for SemanticValue()
{
  return type metadata accessor for SemanticValue();
}

uint64_t static ActionForInput.== infix(_:_:)()
{
  return static ActionForInput.== infix(_:_:)();
}

uint64_t static ActionForInput.cancel()()
{
  return static ActionForInput.cancel()();
}

uint64_t static ActionForInput.handle()()
{
  return static ActionForInput.handle()();
}

uint64_t static ActionForInput.ignore()()
{
  return static ActionForInput.ignore()();
}

uint64_t type metadata accessor for ActionForInput()
{
  return type metadata accessor for ActionForInput();
}

uint64_t IdentifiedUser.personaId.getter()
{
  return IdentifiedUser.personaId.getter();
}

uint64_t type metadata accessor for IdentifiedUser()
{
  return type metadata accessor for IdentifiedUser();
}

uint64_t RCHFlowFactory.makeRCHFlowWithResolvedApp(_:intent:hasUserBeenAuthorizedForApp:)()
{
  return RCHFlowFactory.makeRCHFlowWithResolvedApp(_:intent:hasUserBeenAuthorizedForApp:)();
}

uint64_t RCHFlowFactory.makeRCHFlowWithResolvedApp(_:intent:)()
{
  return RCHFlowFactory.makeRCHFlowWithResolvedApp(_:intent:)();
}

uint64_t RCHFlowFactory.init(strategy:childFlowFactory:)()
{
  return RCHFlowFactory.init(strategy:childFlowFactory:)();
}

uint64_t type metadata accessor for RCHFlowFactory()
{
  return type metadata accessor for RCHFlowFactory();
}

uint64_t TemplatingText.text.getter()
{
  return TemplatingText.text.getter();
}

uint64_t type metadata accessor for TemplatingText()
{
  return type metadata accessor for TemplatingText();
}

uint64_t static AceOutputHelper.makeConfirmedViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)()
{
  return static AceOutputHelper.makeConfirmedViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
}

uint64_t static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)()
{
  return static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
}

uint64_t static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)()
{
  return static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
}

uint64_t static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)()
{
  return static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
}

uint64_t static AceOutputHelper.makeAceOutput(addDialogs:nlContextUpdate:additionalCommands:flowActivity:)()
{
  return static AceOutputHelper.makeAceOutput(addDialogs:nlContextUpdate:additionalCommands:flowActivity:)();
}

uint64_t static AceOutputHelper.makeAceOutput(allAddViews:nlContextUpdate:additionalCommands:flowActivity:)()
{
  return static AceOutputHelper.makeAceOutput(allAddViews:nlContextUpdate:additionalCommands:flowActivity:)();
}

uint64_t static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)()
{
  return static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
}

uint64_t static ExecuteResponse.replan(requireInput:)()
{
  return static ExecuteResponse.replan(requireInput:)();
}

uint64_t static ExecuteResponse.replan<A>(next:childCompletion:)()
{
  return static ExecuteResponse.replan<A>(next:childCompletion:)();
}

uint64_t static ExecuteResponse.ongoing(requireInput:)()
{
  return static ExecuteResponse.ongoing(requireInput:)();
}

uint64_t static ExecuteResponse.ongoing<A>(next:childCompletion:)()
{
  return static ExecuteResponse.ongoing<A>(next:childCompletion:)();
}

{
  return static ExecuteResponse.ongoing<A>(next:childCompletion:)();
}

uint64_t static ExecuteResponse.ongoing(next:childCompletion:)()
{
  return static ExecuteResponse.ongoing(next:childCompletion:)();
}

uint64_t static ExecuteResponse.ongoing<A>(next:)()
{
  return static ExecuteResponse.ongoing<A>(next:)();
}

{
  return static ExecuteResponse.ongoing<A>(next:)();
}

uint64_t static ExecuteResponse.ongoing(next:)()
{
  return static ExecuteResponse.ongoing(next:)();
}

uint64_t static ExecuteResponse.complete<A>(next:childCompletion:)()
{
  return static ExecuteResponse.complete<A>(next:childCompletion:)();
}

{
  return static ExecuteResponse.complete<A>(next:childCompletion:)();
}

uint64_t static ExecuteResponse.complete(next:childCompletion:)()
{
  return static ExecuteResponse.complete(next:childCompletion:)();
}

uint64_t static ExecuteResponse.complete<A>(next:)()
{
  return static ExecuteResponse.complete<A>(next:)();
}

{
  return static ExecuteResponse.complete<A>(next:)();
}

uint64_t static ExecuteResponse.complete(next:)()
{
  return static ExecuteResponse.complete(next:)();
}

uint64_t static ExecuteResponse.complete()()
{
  return static ExecuteResponse.complete()();
}

uint64_t static ExecuteResponse.redirect(nextPluginAction:)()
{
  return static ExecuteResponse.redirect(nextPluginAction:)();
}

uint64_t static ExecuteResponse.unhandled(reason:isComplete:)()
{
  return static ExecuteResponse.unhandled(reason:isComplete:)();
}

uint64_t static ExecuteResponse.unhandled(reason:)()
{
  return static ExecuteResponse.unhandled(reason:)();
}

uint64_t type metadata accessor for ExecuteResponse()
{
  return type metadata accessor for ExecuteResponse();
}

uint64_t NLContextUpdate.toAceContextUpdate()()
{
  return NLContextUpdate.toAceContextUpdate()();
}

uint64_t NLContextUpdate.rrEntities.setter()
{
  return NLContextUpdate.rrEntities.setter();
}

uint64_t NLContextUpdate.displayHints.setter()
{
  return NLContextUpdate.displayHints.setter();
}

uint64_t NLContextUpdate.pommesContext.setter()
{
  return NLContextUpdate.pommesContext.setter();
}

uint64_t NLContextUpdate.nluSystemDialogActs.setter()
{
  return NLContextUpdate.nluSystemDialogActs.setter();
}

uint64_t NLContextUpdate.weightedPromptStrict.setter()
{
  return NLContextUpdate.weightedPromptStrict.setter();
}

uint64_t NLContextUpdate.weightedPromptTargetDomain.setter()
{
  return NLContextUpdate.weightedPromptTargetDomain.setter();
}

uint64_t NLContextUpdate.conversationStateAttachments.setter()
{
  return NLContextUpdate.conversationStateAttachments.setter();
}

uint64_t NLContextUpdate.weightedPromptResponseOptions.modify()
{
  return NLContextUpdate.weightedPromptResponseOptions.modify();
}

uint64_t NLContextUpdate.weightedPromptResponseOptions.getter()
{
  return NLContextUpdate.weightedPromptResponseOptions.getter();
}

uint64_t NLContextUpdate.weightedPromptResponseOptions.setter()
{
  return NLContextUpdate.weightedPromptResponseOptions.setter();
}

uint64_t NLContextUpdate.weightedPromptResponseTargets.getter()
{
  return NLContextUpdate.weightedPromptResponseTargets.getter();
}

uint64_t NLContextUpdate.weightedPromptResponseTargets.setter()
{
  return NLContextUpdate.weightedPromptResponseTargets.setter();
}

uint64_t NLContextUpdate.submitAsSpokenNotificationContext.setter()
{
  return NLContextUpdate.submitAsSpokenNotificationContext.setter();
}

uint64_t NLContextUpdate.nlInput.setter()
{
  return NLContextUpdate.nlInput.setter();
}

uint64_t NLContextUpdate.init()()
{
  return NLContextUpdate.init()();
}

uint64_t type metadata accessor for NLContextUpdate()
{
  return type metadata accessor for NLContextUpdate();
}

uint64_t dispatch thunk of OutputPublisher.publish(output:_:)()
{
  return dispatch thunk of OutputPublisher.publish(output:_:)();
}

uint64_t static PrepareResponse.ongoing(needsExecute:)()
{
  return static PrepareResponse.ongoing(needsExecute:)();
}

uint64_t static PrepareResponse.ongoing<A>(next:childCompletion:)()
{
  return static PrepareResponse.ongoing<A>(next:childCompletion:)();
}

uint64_t static PrepareResponse.complete<A>(next:)()
{
  return static PrepareResponse.complete<A>(next:)();
}

uint64_t static PrepareResponse.complete()()
{
  return static PrepareResponse.complete()();
}

uint64_t type metadata accessor for PrepareResponse()
{
  return type metadata accessor for PrepareResponse();
}

uint64_t dispatch thunk of RCHFlowDelegate.makeAceViewProvider()()
{
  return dispatch thunk of RCHFlowDelegate.makeAceViewProvider()();
}

uint64_t dispatch thunk of RCHFlowDelegate.makeDialogTemplating()()
{
  return dispatch thunk of RCHFlowDelegate.makeDialogTemplating()();
}

uint64_t dispatch thunk of RCHFlowDelegate.makeNLContextProvider()()
{
  return dispatch thunk of RCHFlowDelegate.makeNLContextProvider()();
}

uint64_t dispatch thunk of RCHFlowDelegate.makeDisambiguationList(app:intent:parameterName:intentResolutionResult:_:)()
{
  return dispatch thunk of RCHFlowDelegate.makeDisambiguationList(app:intent:parameterName:intentResolutionResult:_:)();
}

uint64_t RCHFlowDelegate.makeRCHFlow(app:intent:producers:)()
{
  return RCHFlowDelegate.makeRCHFlow(app:intent:producers:)();
}

uint64_t RCHFlowDelegate.makeRCHFlow(producers:)()
{
  return RCHFlowDelegate.makeRCHFlow(producers:)();
}

uint64_t ResponseFactory.init()()
{
  return ResponseFactory.init()();
}

uint64_t type metadata accessor for ResponseFactory()
{
  return type metadata accessor for ResponseFactory();
}

uint64_t static WindowingAction.error(_:handled:)()
{
  return static WindowingAction.error(_:handled:)();
}

uint64_t static WindowingAction.complete(_:)()
{
  return static WindowingAction.complete(_:)();
}

uint64_t dispatch thunk of AceViewProviding.makeAceViewsForLaunchAppWithButton(app:intent:intentResolutionResult:intentResponse:utteranceViews:_:)()
{
  return dispatch thunk of AceViewProviding.makeAceViewsForLaunchAppWithButton(app:intent:intentResolutionResult:intentResponse:utteranceViews:_:)();
}

uint64_t dispatch thunk of AceViewProviding.makeAceViewsForResolveNeedsDisambiguation(app:parameterName:intent:utteranceViews:disambiguationList:deviceIsLocked:_:)()
{
  return dispatch thunk of AceViewProviding.makeAceViewsForResolveNeedsDisambiguation(app:parameterName:intent:utteranceViews:disambiguationList:deviceIsLocked:_:)();
}

uint64_t dispatch thunk of DialogTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:)()
{
  return dispatch thunk of DialogTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:)();
}

uint64_t dispatch thunk of DialogTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:_:)()
{
  return dispatch thunk of DialogTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:_:)();
}

uint64_t static LabelMappingUtil.translateINPersonHandleLabel(_:languageCode:)()
{
  return static LabelMappingUtil.translateINPersonHandleLabel(_:languageCode:)();
}

uint64_t static RCHExecutionStep.== infix(_:_:)()
{
  return static RCHExecutionStep.== infix(_:_:)();
}

uint64_t type metadata accessor for RCHExecutionStep()
{
  return type metadata accessor for RCHExecutionStep();
}

uint64_t TemplatingResult.dialogIdentifier.getter()
{
  return TemplatingResult.dialogIdentifier.getter();
}

uint64_t TemplatingResult.init(templateIdentifier:speak:print:behaviorAfterSpeaking:dialogIdentifier:)()
{
  return TemplatingResult.init(templateIdentifier:speak:print:behaviorAfterSpeaking:dialogIdentifier:)();
}

uint64_t TemplatingResult.init(templateIdentifier:speak:print:behaviorAfterSpeaking:)()
{
  return TemplatingResult.init(templateIdentifier:speak:print:behaviorAfterSpeaking:)();
}

uint64_t TemplatingResult.init(templateIdentifier:speak:print:)()
{
  return TemplatingResult.init(templateIdentifier:speak:print:)();
}

uint64_t TemplatingResult.templateIdentifier.getter()
{
  return TemplatingResult.templateIdentifier.getter();
}

uint64_t TemplatingResult.behaviorAfterSpeaking.getter()
{
  return TemplatingResult.behaviorAfterSpeaking.getter();
}

Swift::Bool __swiftcall TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(Swift::Bool defaultBehavior)
{
  return TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(defaultBehavior);
}

uint64_t TemplatingResult.print.getter()
{
  return TemplatingResult.print.getter();
}

uint64_t TemplatingResult.speak.getter()
{
  return TemplatingResult.speak.getter();
}

uint64_t TemplatingResult.sections.getter()
{
  return TemplatingResult.sections.getter();
}

uint64_t type metadata accessor for TemplatingResult()
{
  return type metadata accessor for TemplatingResult();
}

uint64_t dispatch thunk of AceServiceInvoker.submitAllSerial(_:_:)()
{
  return dispatch thunk of AceServiceInvoker.submitAllSerial(_:_:)();
}

uint64_t dispatch thunk of AceServiceInvoker.submitAndForget(_:)()
{
  return dispatch thunk of AceServiceInvoker.submitAndForget(_:)();
}

{
  return dispatch thunk of AceServiceInvoker.submitAndForget(_:)();
}

uint64_t dispatch thunk of AceServiceInvoker.currentStartRequestId()()
{
  return dispatch thunk of AceServiceInvoker.currentStartRequestId()();
}

uint64_t dispatch thunk of AceServiceInvoker.submit<A>(_:completion:)()
{
  return dispatch thunk of AceServiceInvoker.submit<A>(_:completion:)();
}

uint64_t dispatch thunk of AceServiceInvoker.peerInfo()()
{
  return dispatch thunk of AceServiceInvoker.peerInfo()();
}

uint64_t DismissalSettings.minimumAutoDismissalTimeInMs.setter()
{
  return DismissalSettings.minimumAutoDismissalTimeInMs.setter();
}

uint64_t DismissalSettings.premptivelyResumeMedia.setter()
{
  return DismissalSettings.premptivelyResumeMedia.setter();
}

uint64_t type metadata accessor for DismissalSettings()
{
  return type metadata accessor for DismissalSettings();
}

uint64_t DismissalSettings.init(_:)()
{
  return DismissalSettings.init(_:)();
}

uint64_t type metadata accessor for LaunchAppBehavior()
{
  return type metadata accessor for LaunchAppBehavior();
}

uint64_t static PaginationRequest.firstPage()()
{
  return static PaginationRequest.firstPage()();
}

uint64_t type metadata accessor for PaginationRequest()
{
  return type metadata accessor for PaginationRequest();
}

uint64_t dispatch thunk of PeerInfoProviding.getIdsIdentifier()()
{
  return dispatch thunk of PeerInfoProviding.getIdsIdentifier()();
}

uint64_t dispatch thunk of PeerInfoProviding.isOwnedByCurrentUser()()
{
  return dispatch thunk of PeerInfoProviding.isOwnedByCurrentUser()();
}

uint64_t dispatch thunk of PeerInfoProviding.getMediaRouteIdentifier()()
{
  return dispatch thunk of PeerInfoProviding.getMediaRouteIdentifier()();
}

uint64_t dispatch thunk of PeerInfoProviding.getMediaSystemIdentifier()()
{
  return dispatch thunk of PeerInfoProviding.getMediaSystemIdentifier()();
}

uint64_t dispatch thunk of PeerInfoProviding.getRapportEffectiveIdentifier()()
{
  return dispatch thunk of PeerInfoProviding.getRapportEffectiveIdentifier()();
}

uint64_t ProtectedAppCheck.appIDs.getter()
{
  return ProtectedAppCheck.appIDs.getter();
}

uint64_t type metadata accessor for RelationshipLabel()
{
  return type metadata accessor for RelationshipLabel();
}

uint64_t TemplatingSection.id.getter()
{
  return TemplatingSection.id.getter();
}

uint64_t TemplatingSection.content.getter()
{
  return TemplatingSection.content.getter();
}

uint64_t type metadata accessor for TemplatingSection()
{
  return type metadata accessor for TemplatingSection();
}

uint64_t IntentPromptAnswer.init(answeredValue:updatedIntent:)()
{
  return IntentPromptAnswer.init(answeredValue:updatedIntent:)();
}

uint64_t type metadata accessor for IntentPromptAnswer()
{
  return type metadata accessor for IntentPromptAnswer();
}

uint64_t dispatch thunk of NLContextProviding.makeNeedsDisambiguationContextFor(intent:parameter:resolutionResult:_:)()
{
  return dispatch thunk of NLContextProviding.makeNeedsDisambiguationContextFor(intent:parameter:resolutionResult:_:)();
}

uint64_t type metadata accessor for ProtectedAppStatus()
{
  return type metadata accessor for ProtectedAppStatus();
}

uint64_t type metadata accessor for SubmitCommandError()
{
  return type metadata accessor for SubmitCommandError();
}

uint64_t static UnlockDevicePolicy.default.getter()
{
  return static UnlockDevicePolicy.default.getter();
}

uint64_t type metadata accessor for UnlockDevicePolicy()
{
  return type metadata accessor for UnlockDevicePolicy();
}

uint64_t static AppResolutionAction.noAppFound()()
{
  return static AppResolutionAction.noAppFound()();
}

uint64_t static AppResolutionAction.appNotSupported(app:)()
{
  return static AppResolutionAction.appNotSupported(app:)();
}

uint64_t static AppResolutionAction.confirmAfterAuthorizationChecks(app:)()
{
  return static AppResolutionAction.confirmAfterAuthorizationChecks(app:)();
}

uint64_t static AppResolutionAction.disambiguateAfterAuthorizationChecks(apps:)()
{
  return static AppResolutionAction.disambiguateAfterAuthorizationChecks(apps:)();
}

uint64_t AppResolutionAction.result.getter()
{
  return AppResolutionAction.result.getter();
}

uint64_t static AppResolutionAction.select(app:)()
{
  return static AppResolutionAction.select(app:)();
}

uint64_t type metadata accessor for AppResolutionAction()
{
  return type metadata accessor for AppResolutionAction();
}

uint64_t dispatch thunk of BaseRCHFlowDelegate.canUseServerTTS(intent:)()
{
  return dispatch thunk of BaseRCHFlowDelegate.canUseServerTTS(intent:)();
}

uint64_t dispatch thunk of BaseRCHFlowDelegate.makeAceViewProvider()()
{
  return dispatch thunk of BaseRCHFlowDelegate.makeAceViewProvider()();
}

uint64_t dispatch thunk of BaseRCHFlowDelegate.makeDialogTemplating()()
{
  return dispatch thunk of BaseRCHFlowDelegate.makeDialogTemplating()();
}

uint64_t dispatch thunk of BaseRCHFlowDelegate.makeNLContextProvider()()
{
  return dispatch thunk of BaseRCHFlowDelegate.makeNLContextProvider()();
}

uint64_t BaseRCHFlowDelegate.init()()
{
  return BaseRCHFlowDelegate.init()();
}

uint64_t method lookup function for BaseRCHFlowDelegate()
{
  return method lookup function for BaseRCHFlowDelegate();
}

uint64_t BaseRCHFlowDelegate.deinit()
{
  return BaseRCHFlowDelegate.deinit();
}

uint64_t ConfirmIntentAnswer.init(confirmationResponse:intent:)()
{
  return ConfirmIntentAnswer.init(confirmationResponse:intent:)();
}

uint64_t type metadata accessor for ErrorDialogBehavior()
{
  return type metadata accessor for ErrorDialogBehavior();
}

uint64_t ParameterIdentifier.multicardinalIndex.getter()
{
  return ParameterIdentifier.multicardinalIndex.getter();
}

uint64_t ParameterIdentifier.name.getter()
{
  return ParameterIdentifier.name.getter();
}

uint64_t type metadata accessor for ParameterIdentifier()
{
  return type metadata accessor for ParameterIdentifier();
}

uint64_t static ConfirmationResponse.== infix(_:_:)()
{
  return static ConfirmationResponse.== infix(_:_:)();
}

uint64_t type metadata accessor for ConfirmationResponse()
{
  return type metadata accessor for ConfirmationResponse();
}

uint64_t static DisambiguationResult.chosenItem(_:)()
{
  return static DisambiguationResult.chosenItem(_:)();
}

uint64_t static DisambiguationResult.paginate(_:)()
{
  return static DisambiguationResult.paginate(_:)();
}

uint64_t type metadata accessor for DisambiguationResult()
{
  return type metadata accessor for DisambiguationResult();
}

uint64_t dispatch thunk of DucTemplatingService.makeOpenAppDialog(app:_:)()
{
  return dispatch thunk of DucTemplatingService.makeOpenAppDialog(app:_:)();
}

uint64_t dispatch thunk of DucTemplatingService.makeIntentConfirmationDialog(app:intent:intentResponse:_:)()
{
  return dispatch thunk of DucTemplatingService.makeIntentConfirmationDialog(app:intent:intentResponse:_:)();
}

uint64_t dispatch thunk of DucTemplatingService.makeFailureHandlingIntentDialog(app:intent:intentResponse:_:)()
{
  return dispatch thunk of DucTemplatingService.makeFailureHandlingIntentDialog(app:intent:intentResponse:_:)();
}

uint64_t DucTemplatingService.locale.getter()
{
  return DucTemplatingService.locale.getter();
}

uint64_t DucTemplatingService.init(ducFamily:locale:extensionValueTypeNamesByValueType:aceServiceInvoker:deviceState:localContext:)()
{
  return DucTemplatingService.init(ducFamily:locale:extensionValueTypeNamesByValueType:aceServiceInvoker:deviceState:localContext:)();
}

uint64_t method lookup function for DucTemplatingService()
{
  return method lookup function for DucTemplatingService();
}

uint64_t DucTemplatingService.deinit()
{
  return DucTemplatingService.deinit();
}

uint64_t dispatch thunk of UserIdentityProvider.identifiedUser.getter()
{
  return dispatch thunk of UserIdentityProvider.identifiedUser.getter();
}

uint64_t type metadata accessor for BehaviorAfterSpeaking()
{
  return type metadata accessor for BehaviorAfterSpeaking();
}

uint64_t AceServiceInvokerAsync.submitAndForget(_:)()
{
  return AceServiceInvokerAsync.submitAndForget(_:)();
}

uint64_t dispatch thunk of AppInformationResolver.getLocalizedAppDisplayName(inLocale:)()
{
  return dispatch thunk of AppInformationResolver.getLocalizedAppDisplayName(inLocale:)();
}

uint64_t AppInformationResolver.init(app:)()
{
  return AppInformationResolver.init(app:)();
}

uint64_t type metadata accessor for AppInformationResolver()
{
  return type metadata accessor for AppInformationResolver();
}

uint64_t dispatch thunk of DefaultAceViewProvider.makeCommandsAfterAceViewsForHandleIntentWithUser(app:intent:intentResponse:_:)()
{
  return dispatch thunk of DefaultAceViewProvider.makeCommandsAfterAceViewsForHandleIntentWithUser(app:intent:intentResponse:_:)();
}

uint64_t dispatch thunk of DefaultAceViewProvider.makeAceViewsForInterstitials(app:intent:intentResponse:_:)()
{
  return dispatch thunk of DefaultAceViewProvider.makeAceViewsForInterstitials(app:intent:intentResponse:_:)();
}

uint64_t dispatch thunk of DefaultAceViewProvider.makeAceViewsForHandleIntentWithUser(app:intent:intentResponse:_:)()
{
  return dispatch thunk of DefaultAceViewProvider.makeAceViewsForHandleIntentWithUser(app:intent:intentResponse:_:)();
}

uint64_t dispatch thunk of DefaultAceViewProvider.makeAceViewsForConfirmIntentWithUser(app:intent:intentResponse:_:)()
{
  return dispatch thunk of DefaultAceViewProvider.makeAceViewsForConfirmIntentWithUser(app:intent:intentResponse:_:)();
}

uint64_t DefaultAceViewProvider.init()()
{
  return DefaultAceViewProvider.init()();
}

uint64_t method lookup function for DefaultAceViewProvider()
{
  return method lookup function for DefaultAceViewProvider();
}

uint64_t DefaultAceViewProvider.deinit()
{
  return DefaultAceViewProvider.deinit();
}

uint64_t IntentResolutionRecord.intentResponse.getter()
{
  return IntentResolutionRecord.intentResponse.getter();
}

uint64_t IntentResolutionRecord.app.getter()
{
  return IntentResolutionRecord.app.getter();
}

uint64_t IntentResolutionRecord.init(app:intent:intentResponse:)()
{
  return IntentResolutionRecord.init(app:intent:intentResponse:)();
}

uint64_t IntentResolutionRecord.intent.getter()
{
  return IntentResolutionRecord.intent.getter();
}

uint64_t type metadata accessor for IntentResolutionRecord()
{
  return type metadata accessor for IntentResolutionRecord();
}

uint64_t static OutputPublisherFactory.makeOutputPublisher()()
{
  return static OutputPublisherFactory.makeOutputPublisher()();
}

uint64_t static OutputPublisherFactory.makeOutputPublisherAsync()()
{
  return static OutputPublisherFactory.makeOutputPublisherAsync()();
}

uint64_t PaginatedItemContainer.items.getter()
{
  return PaginatedItemContainer.items.getter();
}

uint64_t WindowingConfiguration.init(promptFlowProviderType:padding:windowSizeOverride:)()
{
  return WindowingConfiguration.init(promptFlowProviderType:padding:windowSizeOverride:)();
}

uint64_t static AppConfirmationResponse.disambiguate(apps:)()
{
  return static AppConfirmationResponse.disambiguate(apps:)();
}

uint64_t static AppConfirmationResponse.cancel()()
{
  return static AppConfirmationResponse.cancel()();
}

uint64_t static AppConfirmationResponse.ignore()()
{
  return static AppConfirmationResponse.ignore()();
}

uint64_t static AppConfirmationResponse.select(app:)()
{
  return static AppConfirmationResponse.select(app:)();
}

uint64_t static AppConfirmationResponse.select()()
{
  return static AppConfirmationResponse.select()();
}

uint64_t static AppConfirmationResponse.confirm(app:)()
{
  return static AppConfirmationResponse.confirm(app:)();
}

uint64_t type metadata accessor for AppConfirmationResponse()
{
  return type metadata accessor for AppConfirmationResponse();
}

uint64_t dispatch thunk of MachineUtteranceBuilder.addMapping(node:value:)()
{
  return dispatch thunk of MachineUtteranceBuilder.addMapping(node:value:)();
}

uint64_t dispatch thunk of MachineUtteranceBuilder.addMappingIfPresent(node:value:)()
{
  return dispatch thunk of MachineUtteranceBuilder.addMappingIfPresent(node:value:)();
}

uint64_t dispatch thunk of MachineUtteranceBuilder.build()()
{
  return dispatch thunk of MachineUtteranceBuilder.build()();
}

uint64_t MachineUtteranceBuilder.init()()
{
  return MachineUtteranceBuilder.init()();
}

uint64_t type metadata accessor for MachineUtteranceBuilder()
{
  return type metadata accessor for MachineUtteranceBuilder();
}

uint64_t NeedsConfirmationAnswer.init(answeredValue:updatedIntent:)()
{
  return NeedsConfirmationAnswer.init(answeredValue:updatedIntent:)();
}

uint64_t UnsetRelationshipPerson.middleName.getter()
{
  return UnsetRelationshipPerson.middleName.getter();
}

uint64_t UnsetRelationshipPerson.fullName.getter()
{
  return UnsetRelationshipPerson.fullName.getter();
}

uint64_t UnsetRelationshipPerson.lastName.getter()
{
  return UnsetRelationshipPerson.lastName.getter();
}

uint64_t UnsetRelationshipPerson.nickname.getter()
{
  return UnsetRelationshipPerson.nickname.getter();
}

uint64_t UnsetRelationshipPerson.init(firstName:lastName:middleName:fullName:nickname:)()
{
  return UnsetRelationshipPerson.init(firstName:lastName:middleName:fullName:nickname:)();
}

uint64_t UnsetRelationshipPerson.firstName.getter()
{
  return UnsetRelationshipPerson.firstName.getter();
}

uint64_t type metadata accessor for UnsetRelationshipPerson()
{
  return type metadata accessor for UnsetRelationshipPerson();
}

uint64_t dispatch thunk of DefaultNLContextProvider.makeContextForHandleIntent(intent:handleIntentResponse:_:)()
{
  return dispatch thunk of DefaultNLContextProvider.makeContextForHandleIntent(intent:handleIntentResponse:_:)();
}

uint64_t dispatch thunk of DefaultNLContextProvider.makeContextForConfirmIntent(intent:confirmIntentResponse:_:)()
{
  return dispatch thunk of DefaultNLContextProvider.makeContextForConfirmIntent(intent:confirmIntentResponse:_:)();
}

uint64_t DefaultNLContextProvider.init()()
{
  return DefaultNLContextProvider.init()();
}

uint64_t DefaultNLContextProvider.deinit()
{
  return DefaultNLContextProvider.deinit();
}

uint64_t OutputGenerationManifest.init(dialogPhase:_:)()
{
  return OutputGenerationManifest.init(dialogPhase:_:)();
}

uint64_t OutputGenerationManifest.responseMode.setter()
{
  return OutputGenerationManifest.responseMode.setter();
}

uint64_t OutputGenerationManifest.responseType.setter()
{
  return OutputGenerationManifest.responseType.setter();
}

uint64_t OutputGenerationManifest.resultViewId.setter()
{
  return OutputGenerationManifest.resultViewId.setter();
}

uint64_t OutputGenerationManifest.responseViewId.setter()
{
  return OutputGenerationManifest.responseViewId.setter();
}

uint64_t OutputGenerationManifest.canUseServerTTS.setter()
{
  return OutputGenerationManifest.canUseServerTTS.setter();
}

uint64_t OutputGenerationManifest.nlContextUpdate.setter()
{
  return OutputGenerationManifest.nlContextUpdate.setter();
}

uint64_t OutputGenerationManifest.dismissalSettings.setter()
{
  return OutputGenerationManifest.dismissalSettings.setter();
}

uint64_t OutputGenerationManifest.additionalCommands.setter()
{
  return OutputGenerationManifest.additionalCommands.setter();
}

uint64_t OutputGenerationManifest.listenAfterSpeaking.setter()
{
  return OutputGenerationManifest.listenAfterSpeaking.setter();
}

uint64_t OutputGenerationManifest.preserveResultSpaceIfPossible.setter()
{
  return OutputGenerationManifest.preserveResultSpaceIfPossible.setter();
}

uint64_t OutputGenerationManifest.printSupportingDialogInDisplayModes.setter()
{
  return OutputGenerationManifest.printSupportingDialogInDisplayModes.setter();
}

uint64_t type metadata accessor for OutputGenerationManifest()
{
  return type metadata accessor for OutputGenerationManifest();
}

uint64_t type metadata accessor for UnsupportedValueBehavior()
{
  return type metadata accessor for UnsupportedValueBehavior();
}

uint64_t static AppDisambiguationResponse.disambiguate(apps:)()
{
  return static AppDisambiguationResponse.disambiguate(apps:)();
}

uint64_t static AppDisambiguationResponse.cancel()()
{
  return static AppDisambiguationResponse.cancel()();
}

uint64_t static AppDisambiguationResponse.ignore()()
{
  return static AppDisambiguationResponse.ignore()();
}

uint64_t static AppDisambiguationResponse.select(app:)()
{
  return static AppDisambiguationResponse.select(app:)();
}

uint64_t type metadata accessor for AppDisambiguationResponse()
{
  return type metadata accessor for AppDisambiguationResponse();
}

uint64_t type metadata accessor for DucTemplatingLocalContext()
{
  return type metadata accessor for DucTemplatingLocalContext();
}

uint64_t ParameterResolutionRecord.app.getter()
{
  return ParameterResolutionRecord.app.getter();
}

uint64_t ParameterResolutionRecord.intent.getter()
{
  return ParameterResolutionRecord.intent.getter();
}

uint64_t ParameterResolutionRecord.result.getter()
{
  return ParameterResolutionRecord.result.getter();
}

uint64_t ParameterResolutionRecord.parameter.getter()
{
  return ParameterResolutionRecord.parameter.getter();
}

uint64_t type metadata accessor for ParameterResolutionRecord()
{
  return type metadata accessor for ParameterResolutionRecord();
}

uint64_t static CompositionResolutionError.== infix(_:_:)()
{
  return static CompositionResolutionError.== infix(_:_:)();
}

uint64_t type metadata accessor for CompositionResolutionError()
{
  return type metadata accessor for CompositionResolutionError();
}

uint64_t OrdinalDisplayHintsBuilder.init(referenceNode:)()
{
  return OrdinalDisplayHintsBuilder.init(referenceNode:)();
}

uint64_t OrdinalDisplayHintsBuilder.build(for:)()
{
  return OrdinalDisplayHintsBuilder.build(for:)();
}

uint64_t type metadata accessor for OrdinalDisplayHintsBuilder()
{
  return type metadata accessor for OrdinalDisplayHintsBuilder();
}

uint64_t CompositionResolutionEntity.usoEntity.getter()
{
  return CompositionResolutionEntity.usoEntity.getter();
}

uint64_t type metadata accessor for CompositionResolutionEntity()
{
  return type metadata accessor for CompositionResolutionEntity();
}

uint64_t dispatch thunk of CallStateEnvironmentProvider.callState.getter()
{
  return dispatch thunk of CallStateEnvironmentProvider.callState.getter();
}

uint64_t dispatch thunk of CallStateEnvironmentProvider.isDropInCall.getter()
{
  return dispatch thunk of CallStateEnvironmentProvider.isDropInCall.getter();
}

uint64_t type metadata accessor for CallStateEnvironmentProvider()
{
  return type metadata accessor for CallStateEnvironmentProvider();
}

uint64_t WindowedPaginationParameters.isLastWindow.getter()
{
  return WindowedPaginationParameters.isLastWindow.getter();
}

uint64_t WindowedPaginationParameters.isFirstWindow.getter()
{
  return WindowedPaginationParameters.isFirstWindow.getter();
}

uint64_t static WindowedPaginationParameters.makeLastWindow(windowSize:isFirstWindow:)()
{
  return static WindowedPaginationParameters.makeLastWindow(windowSize:isFirstWindow:)();
}

uint64_t type metadata accessor for WindowedPaginationParameters()
{
  return type metadata accessor for WindowedPaginationParameters();
}

uint64_t CompositionResolutionResponse.error.getter()
{
  return CompositionResolutionResponse.error.getter();
}

uint64_t CompositionResolutionResponse.entities.getter()
{
  return CompositionResolutionResponse.entities.getter();
}

uint64_t type metadata accessor for CompanionDeviceInfoRequirement()
{
  return type metadata accessor for CompanionDeviceInfoRequirement();
}

uint64_t BasicDisambiguationItemContainer.init(_:_:)()
{
  return BasicDisambiguationItemContainer.init(_:_:)();
}

uint64_t type metadata accessor for ExecuteOnRemoteDeviceSpecification()
{
  return type metadata accessor for ExecuteOnRemoteDeviceSpecification();
}

uint64_t SimpleConfirmationResponseProvider.confirmationResponse.getter()
{
  return SimpleConfirmationResponseProvider.confirmationResponse.getter();
}

uint64_t type metadata accessor for SimpleConfirmationResponseProvider()
{
  return type metadata accessor for SimpleConfirmationResponseProvider();
}

uint64_t SimpleConfirmationResponseProvider.init(_:)()
{
  return SimpleConfirmationResponseProvider.init(_:)();
}

uint64_t type metadata accessor for RCHDelegateToRCHFlowStrategyAdapter()
{
  return type metadata accessor for RCHDelegateToRCHFlowStrategyAdapter();
}

uint64_t Page.isFirstPage.getter()
{
  return Page.isFirstPage.getter();
}

uint64_t Page.pageIndex.getter()
{
  return Page.pageIndex.getter();
}

uint64_t type metadata accessor for Page()
{
  return type metadata accessor for Page();
}

uint64_t type metadata accessor for Image()
{
  return type metadata accessor for Image();
}

uint64_t Input.description.getter()
{
  return Input.description.getter();
}

uint64_t Input.parse.getter()
{
  return Input.parse.getter();
}

uint64_t Input.init(parse:)()
{
  return Input.init(parse:)();
}

uint64_t type metadata accessor for Input()
{
  return type metadata accessor for Input();
}

uint64_t Parse.DirectInvocation.init(identifier:userData:)()
{
  return Parse.DirectInvocation.init(identifier:userData:)();
}

uint64_t Parse.DirectInvocation.identifier.getter()
{
  return Parse.DirectInvocation.identifier.getter();
}

uint64_t Parse.DirectInvocation.userData.getter()
{
  return Parse.DirectInvocation.userData.getter();
}

uint64_t type metadata accessor for Parse.DirectInvocation()
{
  return type metadata accessor for Parse.DirectInvocation();
}

uint64_t Parse.ServerConversion.siriKitIntent.getter()
{
  return Parse.ServerConversion.siriKitIntent.getter();
}

uint64_t Parse.ServerConversion.appResolutionStateProviding.getter()
{
  return Parse.ServerConversion.appResolutionStateProviding.getter();
}

uint64_t type metadata accessor for Parse()
{
  return type metadata accessor for Parse();
}

uint64_t static Device.current.getter()
{
  return static Device.current.getter();
}

uint64_t type metadata accessor for RCHFlow()
{
  return type metadata accessor for RCHFlow();
}

uint64_t USOParse.userParse.getter()
{
  return USOParse.userParse.getter();
}

uint64_t USOParse.init(userParse:parserIdentifier:appBundleId:)()
{
  return USOParse.init(userParse:parserIdentifier:appBundleId:)();
}

uint64_t type metadata accessor for USOParse()
{
  return type metadata accessor for USOParse();
}

uint64_t AceOutput.flowActivity.getter()
{
  return AceOutput.flowActivity.getter();
}

uint64_t AceOutput.nlContextUpdate.getter()
{
  return AceOutput.nlContextUpdate.getter();
}

uint64_t AceOutput.init(commands:flowActivity:nlContextUpdate:)()
{
  return AceOutput.init(commands:flowActivity:nlContextUpdate:)();
}

uint64_t AceOutput.init(commands:flowActivity:)()
{
  return AceOutput.init(commands:flowActivity:)();
}

uint64_t AceOutput.commands.getter()
{
  return AceOutput.commands.getter();
}

uint64_t type metadata accessor for AceOutput()
{
  return type metadata accessor for AceOutput();
}

uint64_t type metadata accessor for ImageSize()
{
  return type metadata accessor for ImageSize();
}

uint64_t type metadata accessor for SignalValue()
{
  return type metadata accessor for SignalValue();
}

uint64_t DomainUseCase.rawValue.getter()
{
  return DomainUseCase.rawValue.getter();
}

uint64_t type metadata accessor for DomainUseCase()
{
  return type metadata accessor for DomainUseCase();
}

uint64_t SignalGatherer.ValuesWithTimings.values.getter()
{
  return SignalGatherer.ValuesWithTimings.values.getter();
}

uint64_t type metadata accessor for SignalGatherer.ValuesWithTimings()
{
  return type metadata accessor for SignalGatherer.ValuesWithTimings();
}

uint64_t dispatch thunk of SignalGatherer.gatherValuesAndTimings(completion:)()
{
  return dispatch thunk of SignalGatherer.gatherValuesAndTimings(completion:)();
}

uint64_t dispatch thunk of SignalGatherer.gatherValuesAndTimings(timeoutSeconds:completion:)()
{
  return dispatch thunk of SignalGatherer.gatherValuesAndTimings(timeoutSeconds:completion:)();
}

uint64_t SignalGatherer.init(signals:candidateAppBundleIds:)()
{
  return SignalGatherer.init(signals:candidateAppBundleIds:)();
}

uint64_t type metadata accessor for SignalGatherer()
{
  return type metadata accessor for SignalGatherer();
}

uint64_t static ClientLocaleSignal.instances()()
{
  return static ClientLocaleSignal.instances()();
}

uint64_t static TotalTimeSpentInApp.instances()()
{
  return static TotalTimeSpentInApp.instances()();
}

uint64_t static ClientLanguageSignal.instances()()
{
  return static ClientLanguageSignal.instances()();
}

uint64_t SignalGatheringResults.init(values:candidateAppBundleIds:)()
{
  return SignalGatheringResults.init(values:candidateAppBundleIds:)();
}

Swift::Void __swiftcall SignalGatheringResults.extract(name:for:to:)(Swift::String name, Swift::String_optional a2, Swift::Int32 *to)
{
}

uint64_t type metadata accessor for SignalGatheringResults()
{
  return type metadata accessor for SignalGatheringResults();
}

uint64_t CommunicationTypeSignal.init(communicationType:)()
{
  return CommunicationTypeSignal.init(communicationType:)();
}

uint64_t type metadata accessor for CommunicationTypeSignal.CommunicationType()
{
  return type metadata accessor for CommunicationTypeSignal.CommunicationType();
}

uint64_t type metadata accessor for CommunicationTypeSignal()
{
  return type metadata accessor for CommunicationTypeSignal();
}

uint64_t static DomainUserPersonaSignal.signalName.getter()
{
  return static DomainUserPersonaSignal.signalName.getter();
}

uint64_t static DomainUserPersonaSignal.instances(context:)()
{
  return static DomainUserPersonaSignal.instances(context:)();
}

uint64_t static ForegroundAppBiomeSignal.instances(context:)()
{
  return static ForegroundAppBiomeSignal.instances(context:)();
}

uint64_t SignalComputationContext.init(bundleIds:entityId:sharedUserId:domainUseCases:)()
{
  return SignalComputationContext.init(bundleIds:entityId:sharedUserId:domainUseCases:)();
}

uint64_t type metadata accessor for SignalComputationContext()
{
  return type metadata accessor for SignalComputationContext();
}

uint64_t static DomainAffinityScoreSignal.instances(context:)()
{
  return static DomainAffinityScoreSignal.instances(context:)();
}

uint64_t static DomainTotalFrequencySignal.instances(with:)()
{
  return static DomainTotalFrequencySignal.instances(with:)();
}

uint64_t static TimeSpentInAppAffinityScore.instances()()
{
  return static TimeSpentInAppAffinityScore.instances()();
}

uint64_t static TimeSinceAppLastLaunchedSignal.instances()()
{
  return static TimeSinceAppLastLaunchedSignal.instances()();
}

uint64_t dispatch thunk of SignalDefinitionParametersProvider.Builder.with(domainUseCases:)()
{
  return dispatch thunk of SignalDefinitionParametersProvider.Builder.with(domainUseCases:)();
}

uint64_t dispatch thunk of SignalDefinitionParametersProvider.Builder.with(intent:)()
{
  return dispatch thunk of SignalDefinitionParametersProvider.Builder.with(intent:)();
}

uint64_t dispatch thunk of SignalDefinitionParametersProvider.Builder.with(bundleIds:)()
{
  return dispatch thunk of SignalDefinitionParametersProvider.Builder.with(bundleIds:)();
}

uint64_t dispatch thunk of SignalDefinitionParametersProvider.Builder.create()()
{
  return dispatch thunk of SignalDefinitionParametersProvider.Builder.create()();
}

uint64_t SignalDefinitionParametersProvider.Builder.init()()
{
  return SignalDefinitionParametersProvider.Builder.init()();
}

uint64_t type metadata accessor for SignalDefinitionParametersProvider.Builder()
{
  return type metadata accessor for SignalDefinitionParametersProvider.Builder();
}

uint64_t type metadata accessor for SignalDefinitionParametersProvider()
{
  return type metadata accessor for SignalDefinitionParametersProvider();
}

uint64_t static DomainToContactFrequencyByIntentSignal.instances(with:)()
{
  return static DomainToContactFrequencyByIntentSignal.instances(with:)();
}

uint64_t static DomainToContactTimeSinceLastUsedSignal.instances(with:)()
{
  return static DomainToContactTimeSinceLastUsedSignal.instances(with:)();
}

uint64_t static DomainTotalFrequencyByCountryCodeSignal.instances(with:)()
{
  return static DomainTotalFrequencyByCountryCodeSignal.instances(with:)();
}

uint64_t static DomainToContactAffinityScoreByNameSignal.instances(context:)()
{
  return static DomainToContactAffinityScoreByNameSignal.instances(context:)();
}

uint64_t static DomainToContactAffinityScoreByIntentSignal.instances(with:)()
{
  return static DomainToContactAffinityScoreByIntentSignal.instances(with:)();
}

uint64_t static DomainToContactTotalFrequencyByIntentSignal.instances(with:)()
{
  return static DomainToContactTotalFrequencyByIntentSignal.instances(with:)();
}

uint64_t isFeatureEnabled(_:)()
{
  return isFeatureEnabled(_:)();
}

uint64_t type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier()
{
  return type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
}

uint64_t Siri_Nlu_External_UsoGraph.identifiers.getter()
{
  return Siri_Nlu_External_UsoGraph.identifiers.getter();
}

uint64_t type metadata accessor for Siri_Nlu_External_UsoGraph()
{
  return type metadata accessor for Siri_Nlu_External_UsoGraph();
}

uint64_t Siri_Nlu_External_UserParse.probability.setter()
{
  return Siri_Nlu_External_UserParse.probability.setter();
}

uint64_t Siri_Nlu_External_UserParse.userDialogActs.modify()
{
  return Siri_Nlu_External_UserParse.userDialogActs.modify();
}

uint64_t Siri_Nlu_External_UserParse.userDialogActs.getter()
{
  return Siri_Nlu_External_UserParse.userDialogActs.getter();
}

uint64_t Siri_Nlu_External_UserParse.correctionOutcome.getter()
{
  return Siri_Nlu_External_UserParse.correctionOutcome.getter();
}

uint64_t Siri_Nlu_External_UserParse.init()()
{
  return Siri_Nlu_External_UserParse.init()();
}

uint64_t type metadata accessor for Siri_Nlu_External_UserParse()
{
  return type metadata accessor for Siri_Nlu_External_UserParse();
}

uint64_t Siri_Nlu_External_SystemOffered.offeredAct.setter()
{
  return Siri_Nlu_External_SystemOffered.offeredAct.setter();
}

uint64_t Siri_Nlu_External_SystemOffered.init()()
{
  return Siri_Nlu_External_SystemOffered.init()();
}

uint64_t type metadata accessor for Siri_Nlu_External_SystemOffered()
{
  return type metadata accessor for Siri_Nlu_External_SystemOffered();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter()
{
  return Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasAccepted.getter()
{
  return Siri_Nlu_External_UserDialogAct.hasAccepted.getter();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasRejected.getter()
{
  return Siri_Nlu_External_UserDialogAct.hasRejected.getter();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasCancelled.getter()
{
  return Siri_Nlu_External_UserDialogAct.hasCancelled.getter();
}

uint64_t Siri_Nlu_External_UserDialogAct.userStatedTask.getter()
{
  return Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
}

uint64_t Siri_Nlu_External_UserDialogAct.userStatedTask.setter()
{
  return Siri_Nlu_External_UserDialogAct.userStatedTask.setter();
}

uint64_t Siri_Nlu_External_UserDialogAct.wantedToProceed.setter()
{
  return Siri_Nlu_External_UserDialogAct.wantedToProceed.setter();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasWantedToRepeat.getter()
{
  return Siri_Nlu_External_UserDialogAct.hasWantedToRepeat.getter();
}

uint64_t static Siri_Nlu_External_UserDialogAct.== infix(_:_:)()
{
  return static Siri_Nlu_External_UserDialogAct.== infix(_:_:)();
}

uint64_t Siri_Nlu_External_UserDialogAct.hashValue.getter()
{
  return Siri_Nlu_External_UserDialogAct.hashValue.getter();
}

uint64_t Siri_Nlu_External_UserDialogAct.init()()
{
  return Siri_Nlu_External_UserDialogAct.init()();
}

uint64_t type metadata accessor for Siri_Nlu_External_UserDialogAct()
{
  return type metadata accessor for Siri_Nlu_External_UserDialogAct();
}

uint64_t Siri_Nlu_External_SystemPrompted.target.setter()
{
  return Siri_Nlu_External_SystemPrompted.target.setter();
}

uint64_t Siri_Nlu_External_SystemPrompted.init()()
{
  return Siri_Nlu_External_SystemPrompted.init()();
}

uint64_t type metadata accessor for Siri_Nlu_External_SystemPrompted()
{
  return type metadata accessor for Siri_Nlu_External_SystemPrompted();
}

uint64_t Siri_Nlu_External_UserStatedTask.hasTask.getter()
{
  return Siri_Nlu_External_UserStatedTask.hasTask.getter();
}

uint64_t Siri_Nlu_External_UserStatedTask.task.getter()
{
  return Siri_Nlu_External_UserStatedTask.task.getter();
}

uint64_t Siri_Nlu_External_UserStatedTask.task.setter()
{
  return Siri_Nlu_External_UserStatedTask.task.setter();
}

uint64_t Siri_Nlu_External_UserStatedTask.init()()
{
  return Siri_Nlu_External_UserStatedTask.init()();
}

uint64_t type metadata accessor for Siri_Nlu_External_UserStatedTask()
{
  return type metadata accessor for Siri_Nlu_External_UserStatedTask();
}

uint64_t Siri_Nlu_External_SystemDialogAct.gaveOptions.setter()
{
  return Siri_Nlu_External_SystemDialogAct.gaveOptions.setter();
}

uint64_t Siri_Nlu_External_SystemDialogAct.offered.setter()
{
  return Siri_Nlu_External_SystemDialogAct.offered.setter();
}

uint64_t Siri_Nlu_External_SystemDialogAct.prompted.setter()
{
  return Siri_Nlu_External_SystemDialogAct.prompted.setter();
}

uint64_t Siri_Nlu_External_SystemDialogAct.init()()
{
  return Siri_Nlu_External_SystemDialogAct.init()();
}

uint64_t type metadata accessor for Siri_Nlu_External_SystemDialogAct()
{
  return type metadata accessor for Siri_Nlu_External_SystemDialogAct();
}

uint64_t type metadata accessor for Siri_Nlu_External_CorrectionOutcome.CorrectionType()
{
  return type metadata accessor for Siri_Nlu_External_CorrectionOutcome.CorrectionType();
}

uint64_t Siri_Nlu_External_CorrectionOutcome.type.getter()
{
  return Siri_Nlu_External_CorrectionOutcome.type.getter();
}

uint64_t type metadata accessor for Siri_Nlu_External_CorrectionOutcome()
{
  return type metadata accessor for Siri_Nlu_External_CorrectionOutcome();
}

uint64_t Siri_Nlu_External_SystemGaveOptions.choices.getter()
{
  return Siri_Nlu_External_SystemGaveOptions.choices.getter();
}

uint64_t Siri_Nlu_External_SystemGaveOptions.choices.setter()
{
  return Siri_Nlu_External_SystemGaveOptions.choices.setter();
}

uint64_t Siri_Nlu_External_SystemGaveOptions.init()()
{
  return Siri_Nlu_External_SystemGaveOptions.init()();
}

uint64_t type metadata accessor for Siri_Nlu_External_SystemGaveOptions()
{
  return type metadata accessor for Siri_Nlu_External_SystemGaveOptions();
}

uint64_t Siri_Nlu_External_UserWantedToProceed.reference.setter()
{
  return Siri_Nlu_External_UserWantedToProceed.reference.setter();
}

uint64_t Siri_Nlu_External_UserWantedToProceed.init()()
{
  return Siri_Nlu_External_UserWantedToProceed.init()();
}

uint64_t type metadata accessor for Siri_Nlu_External_UserWantedToProceed()
{
  return type metadata accessor for Siri_Nlu_External_UserWantedToProceed();
}

uint64_t Siri_Nlu_External_UsoEntityIdentifier.backingAppBundleID.getter()
{
  return Siri_Nlu_External_UsoEntityIdentifier.backingAppBundleID.getter();
}

uint64_t Siri_Nlu_External_UsoEntityIdentifier.namespace.getter()
{
  return Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
}

uint64_t type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier()
{
  return type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
}

uint64_t static SiriNLUTypesPrintUtils.printableProtoObject(object:)()
{
  return static SiriNLUTypesPrintUtils.printableProtoObject(object:)();
}

uint64_t type metadata accessor for SiriNLUTypesPrintUtils()
{
  return type metadata accessor for SiriNLUTypesPrintUtils();
}

uint64_t static ConversionUtils.toUserParse(from:)()
{
  return static ConversionUtils.toUserParse(from:)();
}

uint64_t static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)()
{
  return static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
}

uint64_t static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)()
{
  return static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)();
}

uint64_t NonTerminalOntologyNode.init(name:multicardinal:childNodes:)()
{
  return NonTerminalOntologyNode.init(name:multicardinal:childNodes:)();
}

uint64_t type metadata accessor for NonTerminalOntologyNode()
{
  return type metadata accessor for NonTerminalOntologyNode();
}

uint64_t NonTerminalOntologyNode.deinit()
{
  return NonTerminalOntologyNode.deinit();
}

uint64_t dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter()
{
  return dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
}

uint64_t UsoEntityBuilder_uso_NoEntity.init()()
{
  return UsoEntityBuilder_uso_NoEntity.init()();
}

uint64_t type metadata accessor for UsoEntityBuilder_uso_NoEntity()
{
  return type metadata accessor for UsoEntityBuilder_uso_NoEntity();
}

uint64_t dispatch thunk of UsoEntity_applePhoneCall_PhoneCallAttribute.definedValue.getter()
{
  return dispatch thunk of UsoEntity_applePhoneCall_PhoneCallAttribute.definedValue.getter();
}

uint64_t type metadata accessor for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues()
{
  return type metadata accessor for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues();
}

uint64_t type metadata accessor for UsoEntity_applePhoneCall_PhoneCallAttribute()
{
  return type metadata accessor for UsoEntity_applePhoneCall_PhoneCallAttribute();
}

uint64_t dispatch thunk of Uso_VerbTemplateBuilder_NoVerb.setEntity(value:)()
{
  return dispatch thunk of Uso_VerbTemplateBuilder_NoVerb.setEntity(value:)();
}

uint64_t dispatch thunk of UsoEntityBuilder_applePhoneCall_PhoneCallAttribute.setDefinedValue(value:)()
{
  return dispatch thunk of UsoEntityBuilder_applePhoneCall_PhoneCallAttribute.setDefinedValue(value:)();
}

uint64_t UsoEntityBuilder_applePhoneCall_PhoneCallAttribute.init()()
{
  return UsoEntityBuilder_applePhoneCall_PhoneCallAttribute.init()();
}

uint64_t type metadata accessor for UsoEntityBuilder_applePhoneCall_PhoneCallAttribute()
{
  return type metadata accessor for UsoEntityBuilder_applePhoneCall_PhoneCallAttribute();
}

uint64_t static AppOntologyNode.applicationIdNode.getter()
{
  return static AppOntologyNode.applicationIdNode.getter();
}

uint64_t static AppOntologyNode.appNameNode.getter()
{
  return static AppOntologyNode.appNameNode.getter();
}

uint64_t AppOntologyNode.init(name:multicardinal:)()
{
  return AppOntologyNode.init(name:multicardinal:)();
}

uint64_t type metadata accessor for AppOntologyNode()
{
  return type metadata accessor for AppOntologyNode();
}

uint64_t DomainOntologyNode.init(name:childNodes:isInEventTree:)()
{
  return DomainOntologyNode.init(name:childNodes:isInEventTree:)();
}

uint64_t type metadata accessor for DomainOntologyNode()
{
  return type metadata accessor for DomainOntologyNode();
}

uint64_t static PersonOntologyNode.personFullNameNode.getter()
{
  return static PersonOntologyNode.personFullNameNode.getter();
}

uint64_t static PersonOntologyNode.personLastNameNode.getter()
{
  return static PersonOntologyNode.personLastNameNode.getter();
}

uint64_t static PersonOntologyNode.personFirstNameNode.getter()
{
  return static PersonOntologyNode.personFirstNameNode.getter();
}

uint64_t static PersonOntologyNode.personMiddleNameNode.getter()
{
  return static PersonOntologyNode.personMiddleNameNode.getter();
}

uint64_t PersonOntologyNode.PersonNamePrefix.rawValue.getter()
{
  return PersonOntologyNode.PersonNamePrefix.rawValue.getter();
}

uint64_t type metadata accessor for PersonOntologyNode.PersonNamePrefix()
{
  return type metadata accessor for PersonOntologyNode.PersonNamePrefix();
}

uint64_t PersonOntologyNode.PersonNamePostfix.rawValue.getter()
{
  return PersonOntologyNode.PersonNamePostfix.rawValue.getter();
}

uint64_t type metadata accessor for PersonOntologyNode.PersonNamePostfix()
{
  return type metadata accessor for PersonOntologyNode.PersonNamePostfix();
}

uint64_t type metadata accessor for PersonOntologyNode.PersonSelfReference()
{
  return type metadata accessor for PersonOntologyNode.PersonSelfReference();
}

uint64_t PersonOntologyNode.init(name:multicardinal:)()
{
  return PersonOntologyNode.init(name:multicardinal:)();
}

uint64_t type metadata accessor for PersonOntologyNode()
{
  return type metadata accessor for PersonOntologyNode();
}

uint64_t TerminalOntologyNode.init(name:multicardinal:)()
{
  return TerminalOntologyNode.init(name:multicardinal:)();
}

uint64_t TerminalOntologyNode.name.getter()
{
  return TerminalOntologyNode.name.getter();
}

uint64_t type metadata accessor for Siri_Nl_Core_Protocol_UsoGraph()
{
  return type metadata accessor for Siri_Nl_Core_Protocol_UsoGraph();
}

uint64_t dispatch thunk of IntentNode.ontologyNodeName.getter()
{
  return dispatch thunk of IntentNode.ontologyNodeName.getter();
}

uint64_t dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)()
{
  return dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)();
}

uint64_t dispatch thunk of UsoBuilder.addUtteranceAlignment(utteranceAlignment:)()
{
  return dispatch thunk of UsoBuilder.addUtteranceAlignment(utteranceAlignment:)();
}

uint64_t dispatch thunk of CodeGenBase.usoIdentifiers.getter()
{
  return dispatch thunk of CodeGenBase.usoIdentifiers.getter();
}

uint64_t dispatch thunk of CodeGenBase.utteranceAlignments.getter()
{
  return dispatch thunk of CodeGenBase.utteranceAlignments.getter();
}

uint64_t CodeGenBase.entity.getter()
{
  return CodeGenBase.entity.getter();
}

uint64_t SpanProperty.key.getter()
{
  return SpanProperty.key.getter();
}

uint64_t type metadata accessor for SpanProperty()
{
  return type metadata accessor for SpanProperty();
}

uint64_t ListOperators.rawValue.getter()
{
  return ListOperators.rawValue.getter();
}

uint64_t type metadata accessor for ListOperators()
{
  return type metadata accessor for ListOperators();
}

uint64_t type metadata accessor for UsoEntitySpan.SpanSource()
{
  return type metadata accessor for UsoEntitySpan.SpanSource();
}

uint64_t UsoEntitySpan.properties.getter()
{
  return UsoEntitySpan.properties.getter();
}

uint64_t UsoEntitySpan.startIndex.getter()
{
  return UsoEntitySpan.startIndex.getter();
}

uint64_t UsoEntitySpan.sourceComponent.getter()
{
  return UsoEntitySpan.sourceComponent.getter();
}

uint64_t UsoEntitySpan.appBundleSemantic.getter()
{
  return UsoEntitySpan.appBundleSemantic.getter();
}

uint64_t UsoEntitySpan.payloadAttachmentInfo.getter()
{
  return UsoEntitySpan.payloadAttachmentInfo.getter();
}

uint64_t UsoEntitySpan.label.getter()
{
  return UsoEntitySpan.label.getter();
}

uint64_t UsoEntitySpan.endIndex.getter()
{
  return UsoEntitySpan.endIndex.getter();
}

uint64_t UsoEntitySpan.matchInfo.getter()
{
  return UsoEntitySpan.matchInfo.getter();
}

uint64_t type metadata accessor for UsoEntitySpan()
{
  return type metadata accessor for UsoEntitySpan();
}

uint64_t UsoIdentifier.appBundleId.getter()
{
  return UsoIdentifier.appBundleId.getter();
}

uint64_t type metadata accessor for UsoIdentifier.NluComponent()
{
  return type metadata accessor for UsoIdentifier.NluComponent();
}

uint64_t UsoIdentifier.valueSemantic.getter()
{
  return UsoIdentifier.valueSemantic.getter();
}

uint64_t UsoIdentifier.sourceComponent.getter()
{
  return UsoIdentifier.sourceComponent.getter();
}

uint64_t UsoIdentifier.appBundleSemantic.getter()
{
  return UsoIdentifier.appBundleSemantic.getter();
}

uint64_t UsoIdentifier.namespaceSemantic.getter()
{
  return UsoIdentifier.namespaceSemantic.getter();
}

uint64_t UsoIdentifier.init(value:appBundleId:namespace:probability:)()
{
  return UsoIdentifier.init(value:appBundleId:namespace:probability:)();
}

uint64_t UsoIdentifier.init(value:appBundleId:namespace:)()
{
  return UsoIdentifier.init(value:appBundleId:namespace:)();
}

uint64_t UsoIdentifier.value.getter()
{
  return UsoIdentifier.value.getter();
}

uint64_t UsoIdentifier.namespace.getter()
{
  return UsoIdentifier.namespace.getter();
}

uint64_t type metadata accessor for UsoIdentifier()
{
  return type metadata accessor for UsoIdentifier();
}

uint64_t UtteranceSpan.startIndex.getter()
{
  return UtteranceSpan.startIndex.getter();
}

uint64_t UtteranceSpan.endIndex.getter()
{
  return UtteranceSpan.endIndex.getter();
}

uint64_t type metadata accessor for UtteranceSpan()
{
  return type metadata accessor for UtteranceSpan();
}

uint64_t type metadata accessor for IdentifierValue()
{
  return type metadata accessor for IdentifierValue();
}

uint64_t TerminalElement.MatchingSpan.matcherNames.getter()
{
  return TerminalElement.MatchingSpan.matcherNames.getter();
}

uint64_t TerminalElement.MatchingSpan.alternateInterpretationConfidences.getter()
{
  return TerminalElement.MatchingSpan.alternateInterpretationConfidences.getter();
}

uint64_t type metadata accessor for TerminalElement.MatchingSpan()
{
  return type metadata accessor for TerminalElement.MatchingSpan();
}

uint64_t type metadata accessor for TerminalElement.OriginDetail()
{
  return type metadata accessor for TerminalElement.OriginDetail();
}

uint64_t TerminalElement.semanticTags.getter()
{
  return TerminalElement.semanticTags.getter();
}

uint64_t TerminalElement.SemanticValue.init(_:javaPojoName:)()
{
  return TerminalElement.SemanticValue.init(_:javaPojoName:)();
}

uint64_t type metadata accessor for TerminalElement.Value()
{
  return type metadata accessor for TerminalElement.Value();
}

uint64_t TerminalElement.value.getter()
{
  return TerminalElement.value.getter();
}

uint64_t TerminalElement.Origin.originDetail.getter()
{
  return TerminalElement.Origin.originDetail.getter();
}

uint64_t type metadata accessor for TerminalElement.Origin()
{
  return type metadata accessor for TerminalElement.Origin();
}

uint64_t TerminalElement.origin.getter()
{
  return TerminalElement.origin.getter();
}

uint64_t type metadata accessor for TerminalElement()
{
  return type metadata accessor for TerminalElement();
}

uint64_t static UsoGraphBuilder.buildGraphWithOptions(taskBuilders:options:)()
{
  return static UsoGraphBuilder.buildGraphWithOptions(taskBuilders:options:)();
}

uint64_t dispatch thunk of CodeGenListEntry.entryAsExpression.getter()
{
  return dispatch thunk of CodeGenListEntry.entryAsExpression.getter();
}

uint64_t dispatch thunk of CodeGenListEntry.entry.getter()
{
  return dispatch thunk of CodeGenListEntry.entry.getter();
}

uint64_t PersonIntentNode.init(intentNode:ontologyNode:)()
{
  return PersonIntentNode.init(intentNode:ontologyNode:)();
}

uint64_t type metadata accessor for PersonIntentNode()
{
  return type metadata accessor for PersonIntentNode();
}

uint64_t dispatch thunk of CodeGenExpression.operatorAsString.getter()
{
  return dispatch thunk of CodeGenExpression.operatorAsString.getter();
}

uint64_t dispatch thunk of CodeGenExpression.operand.getter()
{
  return dispatch thunk of CodeGenExpression.operand.getter();
}

uint64_t dispatch thunk of CodeGenGlobalArgs.usoQuantifier.getter()
{
  return dispatch thunk of CodeGenGlobalArgs.usoQuantifier.getter();
}

uint64_t dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter()
{
  return dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter();
}

uint64_t dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter()
{
  return dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
}

uint64_t dispatch thunk of CodeGenGlobalArgs.usoReferenceType.getter()
{
  return dispatch thunk of CodeGenGlobalArgs.usoReferenceType.getter();
}

uint64_t dispatch thunk of CodeGenGlobalArgs.usoSearchQualifier.getter()
{
  return dispatch thunk of CodeGenGlobalArgs.usoSearchQualifier.getter();
}

uint64_t dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)()
{
  return dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
}

uint64_t UsoBuilderOptions.init(longhandDefinedValues:)()
{
  return UsoBuilderOptions.init(longhandDefinedValues:)();
}

uint64_t type metadata accessor for UsoBuilderOptions()
{
  return type metadata accessor for UsoBuilderOptions();
}

uint64_t TerminalIntentNode.init(name:value:semanticTags:)()
{
  return TerminalIntentNode.init(name:value:semanticTags:)();
}

uint64_t TerminalIntentNode.elements.getter()
{
  return TerminalIntentNode.elements.getter();
}

uint64_t type metadata accessor for TerminalIntentNode()
{
  return type metadata accessor for TerminalIntentNode();
}

uint64_t static UsoConversionUtils.convertGraphToTasks(graph:)()
{
  return static UsoConversionUtils.convertGraphToTasks(graph:)();
}

uint64_t static UsoConversionUtils.extractFirstEntityFromGraph(graph:)()
{
  return static UsoConversionUtils.extractFirstEntityFromGraph(graph:)();
}

uint64_t UtteranceAlignment.spans.getter()
{
  return UtteranceAlignment.spans.getter();
}

uint64_t type metadata accessor for UtteranceAlignment()
{
  return type metadata accessor for UtteranceAlignment();
}

uint64_t static IdentifierAppBundle.== infix(_:_:)()
{
  return static IdentifierAppBundle.== infix(_:_:)();
}

uint64_t IdentifierAppBundle.rawValue.getter()
{
  return IdentifierAppBundle.rawValue.getter();
}

uint64_t type metadata accessor for IdentifierAppBundle()
{
  return type metadata accessor for IdentifierAppBundle();
}

uint64_t IdentifierNamespace.rawValue.getter()
{
  return IdentifierNamespace.rawValue.getter();
}

uint64_t type metadata accessor for IdentifierNamespace()
{
  return type metadata accessor for IdentifierNamespace();
}

uint64_t dispatch thunk of UsoEntity_common_App.name.getter()
{
  return dispatch thunk of UsoEntity_common_App.name.getter();
}

uint64_t type metadata accessor for UsoEntity_common_App()
{
  return type metadata accessor for UsoEntity_common_App();
}

uint64_t IntentNodeTraversable.intentNode(forOntologyNode:)()
{
  return IntentNodeTraversable.intentNode(forOntologyNode:)();
}

uint64_t IntentNodeTraversable.intentNode<A>(forOntologyNode:)()
{
  return IntentNodeTraversable.intentNode<A>(forOntologyNode:)();
}

uint64_t IntentNodeTraversable.intentNodes(forOntologyNode:)()
{
  return IntentNodeTraversable.intentNodes(forOntologyNode:)();
}

uint64_t IntentNodeTraversable.value<A>(forNode:)()
{
  return IntentNodeTraversable.value<A>(forNode:)();
}

uint64_t NonTerminalIntentNode.ontologyNodeName.getter()
{
  return NonTerminalIntentNode.ontologyNodeName.getter();
}

uint64_t NonTerminalIntentNode.childNodes.getter()
{
  return NonTerminalIntentNode.childNodes.getter();
}

uint64_t NonTerminalIntentNode.init(name:childNodes:resultIDs:)()
{
  return NonTerminalIntentNode.init(name:childNodes:resultIDs:)();
}

uint64_t type metadata accessor for NonTerminalIntentNode()
{
  return type metadata accessor for NonTerminalIntentNode();
}

uint64_t type metadata accessor for PayloadAttachmentInfo.AttachmentType()
{
  return type metadata accessor for PayloadAttachmentInfo.AttachmentType();
}

uint64_t PayloadAttachmentInfo.attachmentType.getter()
{
  return PayloadAttachmentInfo.attachmentType.getter();
}

uint64_t type metadata accessor for PayloadAttachmentInfo()
{
  return type metadata accessor for PayloadAttachmentInfo();
}

uint64_t UsoEntity_common_Agent.toContactQuery()()
{
  return UsoEntity_common_Agent.toContactQuery()();
}

uint64_t dispatch thunk of UsoEntity_common_Agent.specifyingContactAddress.getter()
{
  return dispatch thunk of UsoEntity_common_Agent.specifyingContactAddress.getter();
}

uint64_t dispatch thunk of UsoEntity_common_Agent.name.getter()
{
  return dispatch thunk of UsoEntity_common_Agent.name.getter();
}

uint64_t type metadata accessor for UsoEntity_common_Agent()
{
  return type metadata accessor for UsoEntity_common_Agent();
}

uint64_t dispatch thunk of UsoEntity_common_Group.name.getter()
{
  return dispatch thunk of UsoEntity_common_Group.name.getter();
}

uint64_t dispatch thunk of UsoEntity_common_Group.members.getter()
{
  return dispatch thunk of UsoEntity_common_Group.members.getter();
}

uint64_t type metadata accessor for UsoEntity_common_Group()
{
  return type metadata accessor for UsoEntity_common_Group();
}

uint64_t type metadata accessor for MitigatorClassification()
{
  return type metadata accessor for MitigatorClassification();
}

uint64_t UsoEntity_common_Person.toContactQuery()()
{
  return UsoEntity_common_Person.toContactQuery()();
}

uint64_t dispatch thunk of UsoEntity_common_Person.identifyingRelationship.getter()
{
  return dispatch thunk of UsoEntity_common_Person.identifyingRelationship.getter();
}

uint64_t dispatch thunk of UsoEntity_common_Person.specifyingContactAddress.getter()
{
  return dispatch thunk of UsoEntity_common_Person.specifyingContactAddress.getter();
}

uint64_t dispatch thunk of UsoEntity_common_Person.name.getter()
{
  return dispatch thunk of UsoEntity_common_Person.name.getter();
}

uint64_t type metadata accessor for UsoEntity_common_Person()
{
  return type metadata accessor for UsoEntity_common_Person();
}

uint64_t dispatch thunk of Uso_VerbTemplate_Target.target.getter()
{
  return dispatch thunk of Uso_VerbTemplate_Target.target.getter();
}

uint64_t dispatch thunk of UsoEntity_common_Setting.associatedSetting.getter()
{
  return dispatch thunk of UsoEntity_common_Setting.associatedSetting.getter();
}

uint64_t static UsoTask_CodegenConverter.convert(task:)()
{
  return static UsoTask_CodegenConverter.convert(task:)();
}

uint64_t static UsoBuilderConversionUtils.convertEntityBuilderToEntity(entityBuilder:)()
{
  return static UsoBuilderConversionUtils.convertEntityBuilderToEntity(entityBuilder:)();
}

uint64_t static UsoBuilderConversionUtils.copyEntityDataToEntityBuilder(entityBuilder:entity:copyValueType:copyIdentifiers:copyUtteranceAlignments:)()
{
  return static UsoBuilderConversionUtils.copyEntityDataToEntityBuilder(entityBuilder:entity:copyValueType:copyIdentifiers:copyUtteranceAlignments:)();
}

uint64_t static UsoBuilderConversionUtils.convertEntityToGraph(entity:)()
{
  return static UsoBuilderConversionUtils.convertEntityToGraph(entity:)();
}

uint64_t PersonIntentNodeContaining.namePrefix.getter()
{
  return PersonIntentNodeContaining.namePrefix.getter();
}

uint64_t PersonIntentNodeContaining.namePostfix.getter()
{
  return PersonIntentNodeContaining.namePostfix.getter();
}

uint64_t PersonIntentNodeContaining.selfReference.getter()
{
  return PersonIntentNodeContaining.selfReference.getter();
}

uint64_t PersonIntentNodeContaining.nickName.getter()
{
  return PersonIntentNodeContaining.nickName.getter();
}

uint64_t dispatch thunk of UsoEntityBuilderGlobalArgs.setUsoListPosition(value:)()
{
  return dispatch thunk of UsoEntityBuilderGlobalArgs.setUsoListPosition(value:)();
}

uint64_t dispatch thunk of UsoEntityBuilderGlobalArgs.setUsoAssociatedApp(value:)()
{
  return dispatch thunk of UsoEntityBuilderGlobalArgs.setUsoAssociatedApp(value:)();
}

uint64_t dispatch thunk of UsoEntityBuilderGlobalArgs.setUsoReferenceType(value:)()
{
  return dispatch thunk of UsoEntityBuilderGlobalArgs.setUsoReferenceType(value:)();
}

uint64_t static UsoEntity_CodeGenConverter.convert(entity:)()
{
  return static UsoEntity_CodeGenConverter.convert(entity:)();
}

uint64_t static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)()
{
  return static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
}

uint64_t dispatch thunk of UsoEntity_common_PhoneCall.attributes.getter()
{
  return dispatch thunk of UsoEntity_common_PhoneCall.attributes.getter();
}

uint64_t dispatch thunk of UsoEntity_common_PhoneCall.recipients.getter()
{
  return dispatch thunk of UsoEntity_common_PhoneCall.recipients.getter();
}

uint64_t dispatch thunk of UsoEntity_common_PhoneCall.participants.getter()
{
  return dispatch thunk of UsoEntity_common_PhoneCall.participants.getter();
}

uint64_t dispatch thunk of UsoEntity_common_PhoneCall.associatedDateTimeRange.getter()
{
  return dispatch thunk of UsoEntity_common_PhoneCall.associatedDateTimeRange.getter();
}

uint64_t dispatch thunk of UsoEntity_common_PhoneCall.mode.getter()
{
  return dispatch thunk of UsoEntity_common_PhoneCall.mode.getter();
}

uint64_t dispatch thunk of UsoEntity_common_PhoneCall.sender.getter()
{
  return dispatch thunk of UsoEntity_common_PhoneCall.sender.getter();
}

uint64_t dispatch thunk of UsoEntity_common_Voicemail.attributes.getter()
{
  return dispatch thunk of UsoEntity_common_Voicemail.attributes.getter();
}

uint64_t dispatch thunk of UsoEntity_common_Voicemail.associatedDateTimeRange.getter()
{
  return dispatch thunk of UsoEntity_common_Voicemail.associatedDateTimeRange.getter();
}

uint64_t dispatch thunk of UsoEntity_common_Voicemail.sender.getter()
{
  return dispatch thunk of UsoEntity_common_Voicemail.sender.getter();
}

uint64_t type metadata accessor for UsoTask_reply_uso_NoEntity()
{
  return type metadata accessor for UsoTask_reply_uso_NoEntity();
}

uint64_t type metadata accessor for UsoTask_set_common_Setting()
{
  return type metadata accessor for UsoTask_set_common_Setting();
}

uint64_t dispatch thunk of Uso_VerbTemplate_Reference.userEntities.getter()
{
  return dispatch thunk of Uso_VerbTemplate_Reference.userEntities.getter();
}

uint64_t dispatch thunk of Uso_VerbTemplate_Reference.reference.getter()
{
  return dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_App.name.getter()
{
  return dispatch thunk of UsoEntityBuilder_common_App.name.getter();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_App.setName(value:)()
{
  return dispatch thunk of UsoEntityBuilder_common_App.setName(value:)();
}

uint64_t UsoEntityBuilder_common_App.init()()
{
  return UsoEntityBuilder_common_App.init()();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_App()
{
  return type metadata accessor for UsoEntityBuilder_common_App();
}

uint64_t dispatch thunk of UsoEntity_common_Quantifier.definedValue.getter()
{
  return dispatch thunk of UsoEntity_common_Quantifier.definedValue.getter();
}

uint64_t type metadata accessor for UsoEntity_common_Quantifier.DefinedValues()
{
  return type metadata accessor for UsoEntity_common_Quantifier.DefinedValues();
}

uint64_t type metadata accessor for UsoTask_noVerb_uso_NoEntity()
{
  return type metadata accessor for UsoTask_noVerb_uso_NoEntity();
}

uint64_t dispatch thunk of UsoEntity_common_PhoneNumber.value.getter()
{
  return dispatch thunk of UsoEntity_common_PhoneNumber.value.getter();
}

uint64_t type metadata accessor for UsoEntity_common_PhoneNumber()
{
  return type metadata accessor for UsoEntity_common_PhoneNumber();
}

uint64_t dispatch thunk of UsoEntity_common_EmailAddress.value.getter()
{
  return dispatch thunk of UsoEntity_common_EmailAddress.value.getter();
}

uint64_t type metadata accessor for UsoEntity_common_EmailAddress()
{
  return type metadata accessor for UsoEntity_common_EmailAddress();
}

uint64_t dispatch thunk of UsoEntity_common_ListPosition.definedValue.getter()
{
  return dispatch thunk of UsoEntity_common_ListPosition.definedValue.getter();
}

uint64_t type metadata accessor for UsoEntity_common_ListPosition.DefinedValues()
{
  return type metadata accessor for UsoEntity_common_ListPosition.DefinedValues();
}

uint64_t type metadata accessor for UsoTask_call_common_PhoneCall()
{
  return type metadata accessor for UsoTask_call_common_PhoneCall();
}

uint64_t type metadata accessor for UsoTask_call_common_Voicemail()
{
  return type metadata accessor for UsoTask_call_common_Voicemail();
}

uint64_t type metadata accessor for UsoTask_enable_common_Setting()
{
  return type metadata accessor for UsoTask_enable_common_Setting();
}

uint64_t type metadata accessor for UsoTask_join_common_PhoneCall()
{
  return type metadata accessor for UsoTask_join_common_PhoneCall();
}

uint64_t type metadata accessor for UsoTask_noVerb_common_Setting()
{
  return type metadata accessor for UsoTask_noVerb_common_Setting();
}

uint64_t type metadata accessor for UsoTask_play_common_Voicemail()
{
  return type metadata accessor for UsoTask_play_common_Voicemail();
}

uint64_t type metadata accessor for UsoTask_read_common_PhoneCall()
{
  return type metadata accessor for UsoTask_read_common_PhoneCall();
}

uint64_t type metadata accessor for UsoTask_read_common_Voicemail()
{
  return type metadata accessor for UsoTask_read_common_Voicemail();
}

uint64_t type metadata accessor for UsoTask_skip_common_Voicemail()
{
  return type metadata accessor for UsoTask_skip_common_Voicemail();
}

uint64_t type metadata accessor for UsoTask_toggle_common_Setting()
{
  return type metadata accessor for UsoTask_toggle_common_Setting();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.setSpecifyingContactAddress(value:)()
{
  return dispatch thunk of UsoEntityBuilder_common_Person.setSpecifyingContactAddress(value:)();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.setName(value:)()
{
  return dispatch thunk of UsoEntityBuilder_common_Person.setName(value:)();
}

uint64_t UsoEntityBuilder_common_Person.init()()
{
  return UsoEntityBuilder_common_Person.init()();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Person()
{
  return type metadata accessor for UsoEntityBuilder_common_Person();
}

uint64_t dispatch thunk of UsoEntity_common_PhoneCallMode.definedValue.getter()
{
  return dispatch thunk of UsoEntity_common_PhoneCallMode.definedValue.getter();
}

uint64_t type metadata accessor for UsoEntity_common_PhoneCallMode.DefinedValues()
{
  return type metadata accessor for UsoEntity_common_PhoneCallMode.DefinedValues();
}

uint64_t type metadata accessor for UsoEntity_common_PostalAddress()
{
  return type metadata accessor for UsoEntity_common_PostalAddress();
}

uint64_t dispatch thunk of UsoEntity_common_ReferenceType.definedValue.getter()
{
  return dispatch thunk of UsoEntity_common_ReferenceType.definedValue.getter();
}

uint64_t type metadata accessor for UsoEntity_common_ReferenceType.DefinedValues()
{
  return type metadata accessor for UsoEntity_common_ReferenceType.DefinedValues();
}

uint64_t type metadata accessor for UsoTask_disable_common_Setting()
{
  return type metadata accessor for UsoTask_disable_common_Setting();
}

uint64_t type metadata accessor for UsoTask_pause_common_Voicemail()
{
  return type metadata accessor for UsoTask_pause_common_Voicemail();
}

uint64_t dispatch thunk of Uso_VerbTemplateBuilder_Target.setTarget(value:)()
{
  return dispatch thunk of Uso_VerbTemplateBuilder_Target.setTarget(value:)();
}

uint64_t dispatch thunk of UsoEntity_common_ContactAddress.label.getter()
{
  return dispatch thunk of UsoEntity_common_ContactAddress.label.getter();
}

uint64_t dispatch thunk of UsoEntity_common_ContactAddress.value.getter()
{
  return dispatch thunk of UsoEntity_common_ContactAddress.value.getter();
}

uint64_t type metadata accessor for UsoTask_answer_common_PhoneCall()
{
  return type metadata accessor for UsoTask_answer_common_PhoneCall();
}

uint64_t type metadata accessor for UsoTask_delete_common_PhoneCall()
{
  return type metadata accessor for UsoTask_delete_common_PhoneCall();
}

uint64_t type metadata accessor for UsoTask_delete_common_Voicemail()
{
  return type metadata accessor for UsoTask_delete_common_Voicemail();
}

uint64_t type metadata accessor for UsoTask_hangup_common_PhoneCall()
{
  return type metadata accessor for UsoTask_hangup_common_PhoneCall();
}

uint64_t type metadata accessor for UsoTask_noVerb_common_PhoneCall()
{
  return type metadata accessor for UsoTask_noVerb_common_PhoneCall();
}

uint64_t type metadata accessor for UsoTask_noVerb_common_Voicemail()
{
  return type metadata accessor for UsoTask_noVerb_common_Voicemail();
}

uint64_t type metadata accessor for UsoTask_redial_common_PhoneCall()
{
  return type metadata accessor for UsoTask_redial_common_PhoneCall();
}

uint64_t type metadata accessor for UsoTask_repeat_common_Voicemail()
{
  return type metadata accessor for UsoTask_repeat_common_Voicemail();
}

uint64_t type metadata accessor for UsoTask_resume_common_Voicemail()
{
  return type metadata accessor for UsoTask_resume_common_Voicemail();
}

uint64_t type metadata accessor for UsoTask_update_common_PhoneCall()
{
  return type metadata accessor for UsoTask_update_common_PhoneCall();
}

uint64_t dispatch thunk of UsoEntity_common_SearchQualifier.definedValue.getter()
{
  return dispatch thunk of UsoEntity_common_SearchQualifier.definedValue.getter();
}

uint64_t type metadata accessor for UsoEntity_common_SearchQualifier.DefinedValues()
{
  return type metadata accessor for UsoEntity_common_SearchQualifier.DefinedValues();
}

uint64_t type metadata accessor for UsoTask_request_common_PhoneCall()
{
  return type metadata accessor for UsoTask_request_common_PhoneCall();
}

uint64_t type metadata accessor for UsoTask_setNumber_common_Setting()
{
  return type metadata accessor for UsoTask_setNumber_common_Setting();
}

uint64_t type metadata accessor for UsoTask_summarise_common_Setting()
{
  return type metadata accessor for UsoTask_summarise_common_Setting();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceSelect.select.getter()
{
  return dispatch thunk of Uso_VerbTemplate_ReferenceSelect.select.getter();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter()
{
  return dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceTarget.userEntities.getter()
{
  return dispatch thunk of Uso_VerbTemplate_ReferenceTarget.userEntities.getter();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceTarget.target.getter()
{
  return dispatch thunk of Uso_VerbTemplate_ReferenceTarget.target.getter();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceTarget.reference.getter()
{
  return dispatch thunk of Uso_VerbTemplate_ReferenceTarget.reference.getter();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PhoneCall.addAttributes(value:)()
{
  return dispatch thunk of UsoEntityBuilder_common_PhoneCall.addAttributes(value:)();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PhoneCall.addRecipients(value:)()
{
  return dispatch thunk of UsoEntityBuilder_common_PhoneCall.addRecipients(value:)();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PhoneCall.addRecipientsListExpression(operatorValue:operand:)()
{
  return dispatch thunk of UsoEntityBuilder_common_PhoneCall.addRecipientsListExpression(operatorValue:operand:)();
}

uint64_t UsoEntityBuilder_common_PhoneCall.init()()
{
  return UsoEntityBuilder_common_PhoneCall.init()();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_PhoneCall()
{
  return type metadata accessor for UsoEntityBuilder_common_PhoneCall();
}

uint64_t UsoEntityBuilder_common_Voicemail.init()()
{
  return UsoEntityBuilder_common_Voicemail.init()();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Voicemail()
{
  return type metadata accessor for UsoEntityBuilder_common_Voicemail();
}

uint64_t type metadata accessor for UsoTask_callback_common_PhoneCall()
{
  return type metadata accessor for UsoTask_callback_common_PhoneCall();
}

uint64_t type metadata accessor for UsoTask_decreaseBy_common_Setting()
{
  return type metadata accessor for UsoTask_decreaseBy_common_Setting();
}

uint64_t type metadata accessor for UsoTask_increaseBy_common_Setting()
{
  return type metadata accessor for UsoTask_increaseBy_common_Setting();
}

uint64_t type metadata accessor for UsoTask_noVerb_common_PhoneNumber()
{
  return type metadata accessor for UsoTask_noVerb_common_PhoneNumber();
}

uint64_t dispatch thunk of Uso_VerbTemplateBuilder_Reference.setReference(value:)()
{
  return dispatch thunk of Uso_VerbTemplateBuilder_Reference.setReference(value:)();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceTrigger.userEntities.getter()
{
  return dispatch thunk of Uso_VerbTemplate_ReferenceTrigger.userEntities.getter();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceTrigger.reference.getter()
{
  return dispatch thunk of Uso_VerbTemplate_ReferenceTrigger.reference.getter();
}

uint64_t UsoTaskBuilder_noVerb_uso_NoEntity.init()()
{
  return UsoTaskBuilder_noVerb_uso_NoEntity.init()();
}

uint64_t type metadata accessor for UsoTaskBuilder_noVerb_uso_NoEntity()
{
  return type metadata accessor for UsoTaskBuilder_noVerb_uso_NoEntity();
}

uint64_t type metadata accessor for UsoTask_summarise_common_PhoneCall()
{
  return type metadata accessor for UsoTask_summarise_common_PhoneCall();
}

uint64_t type metadata accessor for UsoTask_summarise_common_Voicemail()
{
  return type metadata accessor for UsoTask_summarise_common_Voicemail();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PhoneNumber.setLabel(value:)()
{
  return dispatch thunk of UsoEntityBuilder_common_PhoneNumber.setLabel(value:)();
}

uint64_t UsoEntityBuilder_common_PhoneNumber.init()()
{
  return UsoEntityBuilder_common_PhoneNumber.init()();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_PhoneNumber()
{
  return type metadata accessor for UsoEntityBuilder_common_PhoneNumber();
}

uint64_t dispatch thunk of UsoEntity_common_PersonRelationship.relationshipType.getter()
{
  return dispatch thunk of UsoEntity_common_PersonRelationship.relationshipType.getter();
}

uint64_t dispatch thunk of UsoEntity_common_PersonRelationship.relationshipTypeAsExpression.getter()
{
  return dispatch thunk of UsoEntity_common_PersonRelationship.relationshipTypeAsExpression.getter();
}

uint64_t type metadata accessor for UsoEntity_common_PersonRelationship()
{
  return type metadata accessor for UsoEntity_common_PersonRelationship();
}

uint64_t UsoTaskBuilder_noVerb_common_Person.init()()
{
  return UsoTaskBuilder_noVerb_common_Person.init()();
}

uint64_t type metadata accessor for UsoTaskBuilder_noVerb_common_Person()
{
  return type metadata accessor for UsoTaskBuilder_noVerb_common_Person();
}

uint64_t type metadata accessor for UsoTask_update_common_Communication()
{
  return type metadata accessor for UsoTask_update_common_Communication();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ListPosition.setDefinedValue(value:)()
{
  return dispatch thunk of UsoEntityBuilder_common_ListPosition.setDefinedValue(value:)();
}

uint64_t UsoEntityBuilder_common_ListPosition.init()()
{
  return UsoEntityBuilder_common_ListPosition.init()();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_ListPosition()
{
  return type metadata accessor for UsoEntityBuilder_common_ListPosition();
}

uint64_t UsoTaskBuilder_call_common_PhoneCall.init()()
{
  return UsoTaskBuilder_call_common_PhoneCall.init()();
}

uint64_t type metadata accessor for UsoTaskBuilder_call_common_PhoneCall()
{
  return type metadata accessor for UsoTaskBuilder_call_common_PhoneCall();
}

uint64_t UsoTaskBuilder_play_common_Voicemail.init()()
{
  return UsoTaskBuilder_play_common_Voicemail.init()();
}

uint64_t type metadata accessor for UsoTaskBuilder_play_common_Voicemail()
{
  return type metadata accessor for UsoTaskBuilder_play_common_Voicemail();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_LocalBusiness.setName(value:)()
{
  return dispatch thunk of UsoEntityBuilder_common_LocalBusiness.setName(value:)();
}

uint64_t UsoEntityBuilder_common_LocalBusiness.init()()
{
  return UsoEntityBuilder_common_LocalBusiness.init()();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_LocalBusiness()
{
  return type metadata accessor for UsoEntityBuilder_common_LocalBusiness();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ReferenceType.setDefinedValue(value:)()
{
  return dispatch thunk of UsoEntityBuilder_common_ReferenceType.setDefinedValue(value:)();
}

uint64_t UsoEntityBuilder_common_ReferenceType.init()()
{
  return UsoEntityBuilder_common_ReferenceType.init()();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_ReferenceType()
{
  return type metadata accessor for UsoEntityBuilder_common_ReferenceType();
}

uint64_t type metadata accessor for UsoTask_checkExistence_common_Setting()
{
  return type metadata accessor for UsoTask_checkExistence_common_Setting();
}

uint64_t UsoEntityBuilder_common_ContactAddress.init()()
{
  return UsoEntityBuilder_common_ContactAddress.init()();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_ContactAddress()
{
  return type metadata accessor for UsoEntityBuilder_common_ContactAddress();
}

uint64_t UsoTaskBuilder_answer_common_PhoneCall.init()()
{
  return UsoTaskBuilder_answer_common_PhoneCall.init()();
}

uint64_t type metadata accessor for UsoTaskBuilder_answer_common_PhoneCall()
{
  return type metadata accessor for UsoTaskBuilder_answer_common_PhoneCall();
}

uint64_t UsoTaskBuilder_update_common_PhoneCall.init()()
{
  return UsoTaskBuilder_update_common_PhoneCall.init()();
}

uint64_t type metadata accessor for UsoTaskBuilder_update_common_PhoneCall()
{
  return type metadata accessor for UsoTaskBuilder_update_common_PhoneCall();
}

uint64_t dispatch thunk of Uso_VerbTemplateBuilder_ReferenceTarget.setTarget(value:)()
{
  return dispatch thunk of Uso_VerbTemplateBuilder_ReferenceTarget.setTarget(value:)();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceNumberTrigger.userEntities.getter()
{
  return dispatch thunk of Uso_VerbTemplate_ReferenceNumberTrigger.userEntities.getter();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceNumberTrigger.reference.getter()
{
  return dispatch thunk of Uso_VerbTemplate_ReferenceNumberTrigger.reference.getter();
}

uint64_t UsoTaskBuilder_callback_common_PhoneCall.init()()
{
  return UsoTaskBuilder_callback_common_PhoneCall.init()();
}

uint64_t type metadata accessor for UsoTaskBuilder_callback_common_PhoneCall()
{
  return type metadata accessor for UsoTaskBuilder_callback_common_PhoneCall();
}

uint64_t UsoTaskBuilder_summarise_common_PhoneCall.init()()
{
  return UsoTaskBuilder_summarise_common_PhoneCall.init()();
}

uint64_t type metadata accessor for UsoTaskBuilder_summarise_common_PhoneCall()
{
  return type metadata accessor for UsoTaskBuilder_summarise_common_PhoneCall();
}

uint64_t Graph.protobufGraphSiriNl(vocabManager:)()
{
  return Graph.protobufGraphSiriNl(vocabManager:)();
}

uint64_t type metadata accessor for Graph()
{
  return type metadata accessor for Graph();
}

uint64_t type metadata accessor for NLState()
{
  return type metadata accessor for NLState();
}

uint64_t UsoTask.verbString.getter()
{
  return UsoTask.verbString.getter();
}

uint64_t UsoTask.baseEntityAsString.getter()
{
  return UsoTask.baseEntityAsString.getter();
}

uint64_t type metadata accessor for UsoTask()
{
  return type metadata accessor for UsoTask();
}

uint64_t NLIntent.domainNode.getter()
{
  return NLIntent.domainNode.getter();
}

uint64_t NLIntent.init(protobufData:)()
{
  return NLIntent.init(protobufData:)();
}

uint64_t static NLIntent.== infix(_:_:)()
{
  return static NLIntent.== infix(_:_:)();
}

uint64_t NLIntent.init(rootNode:score:originalInput:allWordsMatched:primary:usingExplicitInput:intentRank:isNERBasedParse:intentID:nlState:mitigatorClassification:strippedVoiceTrigger:isInvalidVoiceTrigger:isSuggested:metaDomainActions:)()
{
  return NLIntent.init(rootNode:score:originalInput:allWordsMatched:primary:usingExplicitInput:intentRank:isNERBasedParse:intentID:nlState:mitigatorClassification:strippedVoiceTrigger:isInvalidVoiceTrigger:isSuggested:metaDomainActions:)();
}

uint64_t NLIntent.rootNode.getter()
{
  return NLIntent.rootNode.getter();
}

uint64_t NLIntent.hashValue.getter()
{
  return NLIntent.hashValue.getter();
}

uint64_t type metadata accessor for NLIntent()
{
  return type metadata accessor for NLIntent();
}

uint64_t MatchInfo.hasMatchSignals(_:)()
{
  return MatchInfo.hasMatchSignals(_:)();
}

uint64_t static MatchInfo.MatchSignals.exactMatch.getter()
{
  return static MatchInfo.MatchSignals.exactMatch.getter();
}

uint64_t type metadata accessor for MatchInfo.MatchSignals()
{
  return type metadata accessor for MatchInfo.MatchSignals();
}

uint64_t type metadata accessor for MatchInfo()
{
  return type metadata accessor for MatchInfo();
}

uint64_t UsoEntity.valueTypeString.getter()
{
  return UsoEntity.valueTypeString.getter();
}

uint64_t type metadata accessor for UsoEntity()
{
  return type metadata accessor for UsoEntity();
}

uint64_t ResolvedSiriKitContact.personType.getter()
{
  return ResolvedSiriKitContact.personType.getter();
}

uint64_t ResolvedSiriKitContact.person.getter()
{
  return ResolvedSiriKitContact.person.getter();
}

uint64_t type metadata accessor for ResolvedSiriKitContact()
{
  return type metadata accessor for ResolvedSiriKitContact();
}

uint64_t SiriKitContactResolver.resolveContacts(queries:config:)()
{
  return SiriKitContactResolver.resolveContacts(queries:config:)();
}

uint64_t SiriKitContactResolver.resolve(queries:config:)()
{
  return SiriKitContactResolver.resolve(queries:config:)();
}

uint64_t SiriKitContactResolver.init()()
{
  return SiriKitContactResolver.init()();
}

uint64_t type metadata accessor for SiriKitContactResolver()
{
  return type metadata accessor for SiriKitContactResolver();
}

uint64_t dispatch thunk of InferenceError.log()()
{
  return dispatch thunk of InferenceError.log()();
}

uint64_t type metadata accessor for InferenceError()
{
  return type metadata accessor for InferenceError();
}

uint64_t AppResolver.init(appResolutionRules:)()
{
  return AppResolver.init(appResolutionRules:)();
}

uint64_t type metadata accessor for AppResolver()
{
  return type metadata accessor for AppResolver();
}

uint64_t type metadata accessor for ContactGroup()
{
  return type metadata accessor for ContactGroup();
}

uint64_t ContactQuery.familyName.getter()
{
  return ContactQuery.familyName.getter();
}

uint64_t ContactQuery.familyName.setter()
{
  return ContactQuery.familyName.setter();
}

uint64_t ContactQuery.middleName.getter()
{
  return ContactQuery.middleName.getter();
}

uint64_t ContactQuery.middleName.setter()
{
  return ContactQuery.middleName.setter();
}

uint64_t ContactQuery.namePrefix.setter()
{
  return ContactQuery.namePrefix.setter();
}

uint64_t ContactQuery.nameSuffix.setter()
{
  return ContactQuery.nameSuffix.setter();
}

uint64_t ContactQuery.description.getter()
{
  return ContactQuery.description.getter();
}

uint64_t ContactQuery.relationship.getter()
{
  return ContactQuery.relationship.getter();
}

uint64_t ContactQuery.relationship.setter()
{
  return ContactQuery.relationship.setter();
}

uint64_t ContactQuery.organizationName.setter()
{
  return ContactQuery.organizationName.setter();
}

uint64_t static ContactQuery.== infix(_:_:)()
{
  return static ContactQuery.== infix(_:_:)();
}

uint64_t ContactQuery.isMe.setter()
{
  return ContactQuery.isMe.setter();
}

uint64_t ContactQuery.handle.setter()
{
  return ContactQuery.handle.setter();
}

uint64_t ContactQuery.fullName.setter()
{
  return ContactQuery.fullName.setter();
}

uint64_t ContactQuery.nickname.setter()
{
  return ContactQuery.nickname.setter();
}

uint64_t ContactQuery.givenName.getter()
{
  return ContactQuery.givenName.getter();
}

uint64_t ContactQuery.givenName.setter()
{
  return ContactQuery.givenName.setter();
}

uint64_t ContactQuery.init()()
{
  return ContactQuery.init()();
}

uint64_t type metadata accessor for ContactQuery()
{
  return type metadata accessor for ContactQuery();
}

uint64_t type metadata accessor for ContactHandle.HandleType()
{
  return type metadata accessor for ContactHandle.HandleType();
}

uint64_t CommsAppFeature.init(bundleID:isContactInApp:)()
{
  return CommsAppFeature.init(bundleID:isContactInApp:)();
}

uint64_t type metadata accessor for CommsAppFeature()
{
  return type metadata accessor for CommsAppFeature();
}

uint64_t static ContactResolver.refreshSharedCache()()
{
  return static ContactResolver.refreshSharedCache()();
}

uint64_t type metadata accessor for ContactResolver()
{
  return type metadata accessor for ContactResolver();
}

uint64_t type metadata accessor for RecommenderType()
{
  return type metadata accessor for RecommenderType();
}

uint64_t type metadata accessor for AppResolverResult()
{
  return type metadata accessor for AppResolverResult();
}

uint64_t type metadata accessor for ContactActionType()
{
  return type metadata accessor for ContactActionType();
}

uint64_t ContactGroupQuery.init(name:)()
{
  return ContactGroupQuery.init(name:)();
}

uint64_t type metadata accessor for ContactGroupQuery()
{
  return type metadata accessor for ContactGroupQuery();
}

uint64_t ContactHandleQuery.init(type:label:value:)()
{
  return ContactHandleQuery.init(type:label:value:)();
}

uint64_t type metadata accessor for ContactHandleQuery()
{
  return type metadata accessor for ContactHandleQuery();
}

uint64_t ContactGroupResolver.findGroups(query:config:)()
{
  return ContactGroupResolver.findGroups(query:config:)();
}

uint64_t ContactGroupResolver.init()()
{
  return ContactGroupResolver.init()();
}

uint64_t type metadata accessor for ContactGroupResolver()
{
  return type metadata accessor for ContactGroupResolver();
}

uint64_t ContactResolverConfig.actionType.getter()
{
  return ContactResolverConfig.actionType.getter();
}

uint64_t ContactResolverConfig.actionType.setter()
{
  return ContactResolverConfig.actionType.setter();
}

uint64_t ContactResolverConfig.init(intentId:intentTypeName:locale:logRunTimeData:processNLv3SpeechAlternatives:bundleIds:domainsToSearchForHistory:searchSuggestedContacts:handleTypePreference:recommender:customGenerator:)()
{
  return ContactResolverConfig.init(intentId:intentTypeName:locale:logRunTimeData:processNLv3SpeechAlternatives:bundleIds:domainsToSearchForHistory:searchSuggestedContacts:handleTypePreference:recommender:customGenerator:)();
}

uint64_t type metadata accessor for ContactResolverConfig()
{
  return type metadata accessor for ContactResolverConfig();
}

uint64_t static ContactResolverDomain.phone.getter()
{
  return static ContactResolverDomain.phone.getter();
}

uint64_t type metadata accessor for ContactResolverDomain()
{
  return type metadata accessor for ContactResolverDomain();
}

uint64_t type metadata accessor for SearchSuggestedContacts()
{
  return type metadata accessor for SearchSuggestedContacts();
}

uint64_t ContactRelationshipQuery.init(label:fromContact:)()
{
  return ContactRelationshipQuery.init(label:fromContact:)();
}

uint64_t type metadata accessor for ContactRelationshipQuery()
{
  return type metadata accessor for ContactRelationshipQuery();
}

uint64_t CommsAppResolutionFeature.init(intent:nlContactCount:appFeatures:communicationType:)()
{
  return CommsAppResolutionFeature.init(intent:nlContactCount:appFeatures:communicationType:)();
}

uint64_t type metadata accessor for CommsAppResolutionFeature()
{
  return type metadata accessor for CommsAppResolutionFeature();
}

uint64_t ContactGroupResolverConfig.init(locale:bundleIds:)()
{
  return ContactGroupResolverConfig.init(locale:bundleIds:)();
}

uint64_t type metadata accessor for ContactGroupResolverConfig()
{
  return type metadata accessor for ContactGroupResolverConfig();
}

uint64_t static ContactHandleTypePreference.requirePhone.getter()
{
  return static ContactHandleTypePreference.requirePhone.getter();
}

uint64_t type metadata accessor for ContactHandleTypePreference()
{
  return type metadata accessor for ContactHandleTypePreference();
}

uint64_t static PhoneAppSelectionModelCache.prewarm()()
{
  return static PhoneAppSelectionModelCache.prewarm()();
}

uint64_t type metadata accessor for PhoneAppSelectionModelCache()
{
  return type metadata accessor for PhoneAppSelectionModelCache();
}

uint64_t AppMatcher.resolve(intent:bundleIds:)()
{
  return AppMatcher.resolve(intent:bundleIds:)();
}

uint64_t AppMatcher.init()()
{
  return AppMatcher.init()();
}

uint64_t type metadata accessor for AppMatcher()
{
  return type metadata accessor for AppMatcher();
}

uint64_t AppMatcherResult.resolution.getter()
{
  return AppMatcherResult.resolution.getter();
}

uint64_t type metadata accessor for AppMatcherResult()
{
  return type metadata accessor for AppMatcherResult();
}

uint64_t type metadata accessor for AppMatchResolution()
{
  return type metadata accessor for AppMatchResolution();
}

uint64_t SiriEnvironment.userIdentity.getter()
{
  return SiriEnvironment.userIdentity.getter();
}

uint64_t SiriEnvironment.userIdentity.setter()
{
  return SiriEnvironment.userIdentity.setter();
}

uint64_t SiriEnvironment.flowTask.getter()
{
  return SiriEnvironment.flowTask.getter();
}

uint64_t SiriEnvironment.callState.getter()
{
  return SiriEnvironment.callState.getter();
}

uint64_t SiriEnvironment.currentRequest.getter()
{
  return SiriEnvironment.currentRequest.getter();
}

uint64_t SiriEnvironment.currentRequest.setter()
{
  return SiriEnvironment.currentRequest.setter();
}

uint64_t SiriEnvironment.currentDevice.getter()
{
  return SiriEnvironment.currentDevice.getter();
}

uint64_t static SiriEnvironment.forCurrentTask.getter()
{
  return static SiriEnvironment.forCurrentTask.getter();
}

uint64_t static SiriEnvironment.root.getter()
{
  return static SiriEnvironment.root.getter();
}

uint64_t static SiriEnvironment.default.getter()
{
  return static SiriEnvironment.default.getter();
}

uint64_t type metadata accessor for SiriEnvironment()
{
  return type metadata accessor for SiriEnvironment();
}

uint64_t static SiriEnvironmentValue.subscript.getter()
{
  return static SiriEnvironmentValue.subscript.getter();
}

uint64_t SiriEnvironmentValue.init(_:)()
{
  return SiriEnvironmentValue.init(_:)();
}

uint64_t SiriEnvironmentLocating<>.siriEnvironment.modify()
{
  return SiriEnvironmentLocating<>.siriEnvironment.modify();
}

uint64_t SiriEnvironmentLocating<>.siriEnvironment.getter()
{
  return SiriEnvironmentLocating<>.siriEnvironment.getter();
}

uint64_t SiriEnvironmentLocating<>.siriEnvironment.setter()
{
  return SiriEnvironmentLocating<>.siriEnvironment.setter();
}

uint64_t static AudioSource.bluetoothDoAPDevice.getter()
{
  return static AudioSource.bluetoothDoAPDevice.getter();
}

uint64_t AudioSource.aceValue.getter()
{
  return AudioSource.aceValue.getter();
}

uint64_t type metadata accessor for AudioSource()
{
  return type metadata accessor for AudioSource();
}

uint64_t static DeviceIdiom.== infix(_:_:)()
{
  return static DeviceIdiom.== infix(_:_:)();
}

uint64_t type metadata accessor for DeviceIdiom()
{
  return type metadata accessor for DeviceIdiom();
}

uint64_t InputOrigin.aceInputOrigin.getter()
{
  return InputOrigin.aceInputOrigin.getter();
}

uint64_t InputOrigin.rawValue.getter()
{
  return InputOrigin.rawValue.getter();
}

uint64_t type metadata accessor for InputOrigin()
{
  return type metadata accessor for InputOrigin();
}

uint64_t Transformer.reverseTransform.getter()
{
  return Transformer.reverseTransform.getter();
}

uint64_t Transformer.init(transform:reverseTransform:)()
{
  return Transformer.init(transform:reverseTransform:)();
}

uint64_t Transformer.init(transform:)()
{
  return Transformer.init(transform:)();
}

uint64_t Transformer.transform.getter()
{
  return Transformer.transform.getter();
}

uint64_t type metadata accessor for Transformer()
{
  return type metadata accessor for Transformer();
}

uint64_t static ResponseMode.voiceForward.getter()
{
  return static ResponseMode.voiceForward.getter();
}

uint64_t static ResponseMode.== infix(_:_:)()
{
  return static ResponseMode.== infix(_:_:)();
}

uint64_t static ResponseMode.voiceOnly.getter()
{
  return static ResponseMode.voiceOnly.getter();
}

uint64_t type metadata accessor for ResponseMode()
{
  return type metadata accessor for ResponseMode();
}

uint64_t Restrictions.deviceRestrictions.getter()
{
  return Restrictions.deviceRestrictions.getter();
}

uint64_t Restrictions.restrictedCommands.getter()
{
  return Restrictions.restrictedCommands.getter();
}

uint64_t type metadata accessor for Restrictions()
{
  return type metadata accessor for Restrictions();
}

uint64_t dispatch thunk of CurrentDevice.isPhone.getter()
{
  return dispatch thunk of CurrentDevice.isPhone.getter();
}

uint64_t dispatch thunk of CurrentDevice.isCarPlay.getter()
{
  return dispatch thunk of CurrentDevice.isCarPlay.getter();
}

uint64_t static ReducerBuilder.buildBlock(_:)()
{
  return static ReducerBuilder.buildBlock(_:)();
}

uint64_t static ReducerBuilder.buildExpression(_:)()
{
  return static ReducerBuilder.buildExpression(_:)();
}

uint64_t type metadata accessor for InteractionType()
{
  return type metadata accessor for InteractionType();
}

uint64_t static AudioDestination.builtInSpeaker.getter()
{
  return static AudioDestination.builtInSpeaker.getter();
}

uint64_t static AudioDestination.builtInReceiver.getter()
{
  return static AudioDestination.builtInReceiver.getter();
}

uint64_t AudioDestination.aceValue.getter()
{
  return AudioDestination.aceValue.getter();
}

uint64_t type metadata accessor for AudioDestination()
{
  return type metadata accessor for AudioDestination();
}

uint64_t static DeviceRestrictions.phoneFeaturesUnavailable.getter()
{
  return static DeviceRestrictions.phoneFeaturesUnavailable.getter();
}

uint64_t type metadata accessor for DeviceRestrictions()
{
  return type metadata accessor for DeviceRestrictions();
}

uint64_t type metadata accessor for TransformationError()
{
  return type metadata accessor for TransformationError();
}

uint64_t dispatch thunk of AutoBugCaptureManager.generateSnapshot(errorType:errorSubType:subTypeContext:completion:)()
{
  return dispatch thunk of AutoBugCaptureManager.generateSnapshot(errorType:errorSubType:subTypeContext:completion:)();
}

uint64_t AutoBugCaptureManager.init(domain:sessionDuration:)()
{
  return AutoBugCaptureManager.init(domain:sessionDuration:)();
}

uint64_t type metadata accessor for AutoBugCaptureManager()
{
  return type metadata accessor for AutoBugCaptureManager();
}

uint64_t -- infix<A, B, C>(_:_:)()
{
  return -- infix<A, B, C>(_:_:)();
}

uint64_t --> infix<A, B, C, D>(_:_:)()
{
  return --> infix<A, B, C, D>(_:_:)();
}

uint64_t Reducer.init(apply:)()
{
  return Reducer.init(apply:)();
}

uint64_t Reducer.reduce.getter()
{
  return Reducer.reduce.getter();
}

uint64_t Reducer.init(builder:)()
{
  return Reducer.init(builder:)();
}

uint64_t dispatch thunk of DialogPhoneNumber.Builder.withCountryCode(_:)()
{
  return dispatch thunk of DialogPhoneNumber.Builder.withCountryCode(_:)();
}

uint64_t dispatch thunk of DialogPhoneNumber.Builder.build()()
{
  return dispatch thunk of DialogPhoneNumber.Builder.build()();
}

uint64_t DialogPhoneNumber.Builder.init(value:)()
{
  return DialogPhoneNumber.Builder.init(value:)();
}

uint64_t type metadata accessor for DialogPhoneNumber.Builder()
{
  return type metadata accessor for DialogPhoneNumber.Builder();
}

uint64_t dispatch thunk of DialogPhoneNumber.toString.getter()
{
  return dispatch thunk of DialogPhoneNumber.toString.getter();
}

uint64_t DialogPersonHandle.label.getter()
{
  return DialogPersonHandle.label.getter();
}

uint64_t DialogPersonHandle.__allocating_init(handle:)()
{
  return DialogPersonHandle.__allocating_init(handle:)();
}

uint64_t dispatch thunk of DialogPersonHandle.Builder.build()()
{
  return dispatch thunk of DialogPersonHandle.Builder.build()();
}

uint64_t dispatch thunk of DialogPersonHandle.Builder.withType(_:)()
{
  return dispatch thunk of DialogPersonHandle.Builder.withType(_:)();
}

uint64_t dispatch thunk of DialogPersonHandle.Builder.withLabel(_:)()
{
  return dispatch thunk of DialogPersonHandle.Builder.withLabel(_:)();
}

uint64_t dispatch thunk of DialogPersonHandle.Builder.withValue(_:)()
{
  return dispatch thunk of DialogPersonHandle.Builder.withValue(_:)();
}

uint64_t DialogPersonHandle.Builder.init()()
{
  return DialogPersonHandle.Builder.init()();
}

uint64_t type metadata accessor for DialogPersonHandle.Builder()
{
  return type metadata accessor for DialogPersonHandle.Builder();
}

uint64_t type metadata accessor for DialogPersonHandle()
{
  return type metadata accessor for DialogPersonHandle();
}

uint64_t dispatch thunk of DialogLocationAddress.Builder.withCountryCode(_:)()
{
  return dispatch thunk of DialogLocationAddress.Builder.withCountryCode(_:)();
}

uint64_t dispatch thunk of DialogLocationAddress.Builder.build()()
{
  return dispatch thunk of DialogLocationAddress.Builder.build()();
}

uint64_t DialogLocationAddress.Builder.init()()
{
  return DialogLocationAddress.Builder.init()();
}

uint64_t type metadata accessor for DialogLocationAddress.Builder()
{
  return type metadata accessor for DialogLocationAddress.Builder();
}

uint64_t type metadata accessor for DialogLocationAddress()
{
  return type metadata accessor for DialogLocationAddress();
}

uint64_t DialogPerson.__allocating_init(unnamedPerson:)()
{
  return DialogPerson.__allocating_init(unnamedPerson:)();
}

uint64_t DialogPerson.familyName.getter()
{
  return DialogPerson.familyName.getter();
}

uint64_t DialogPerson.middleName.getter()
{
  return DialogPerson.middleName.getter();
}

uint64_t dispatch thunk of DialogPerson.simpleName.getter()
{
  return dispatch thunk of DialogPerson.simpleName.getter();
}

uint64_t DialogPerson.personHandle.getter()
{
  return DialogPerson.personHandle.getter();
}

uint64_t DialogPerson.relationship.getter()
{
  return DialogPerson.relationship.getter();
}

uint64_t DialogPerson.fullNameFromInput.getter()
{
  return DialogPerson.fullNameFromInput.getter();
}

uint64_t DialogPerson.useRelationshipName.getter()
{
  return DialogPerson.useRelationshipName.getter();
}

uint64_t DialogPerson.useConversationalName.getter()
{
  return DialogPerson.useConversationalName.getter();
}

uint64_t DialogPerson.friendlyPhoneNumberName.getter()
{
  return DialogPerson.friendlyPhoneNumberName.getter();
}

uint64_t DialogPerson.friendlyPhoneNumberNameShort.getter()
{
  return DialogPerson.friendlyPhoneNumberNameShort.getter();
}

uint64_t DialogPerson.init(from:)()
{
  return DialogPerson.init(from:)();
}

uint64_t DialogPerson.__allocating_init(person:locale:useConversationalName:)()
{
  return DialogPerson.__allocating_init(person:locale:useConversationalName:)();
}

uint64_t dispatch thunk of DialogPerson.Builder.withPersonHandle(_:)()
{
  return dispatch thunk of DialogPerson.Builder.withPersonHandle(_:)();
}

uint64_t dispatch thunk of DialogPerson.Builder.withCompany(_:)()
{
  return dispatch thunk of DialogPerson.Builder.withCompany(_:)();
}

uint64_t dispatch thunk of DialogPerson.Builder.withPronoun(_:)()
{
  return dispatch thunk of DialogPerson.Builder.withPronoun(_:)();
}

uint64_t dispatch thunk of DialogPerson.Builder.withRelated(_:)()
{
  return dispatch thunk of DialogPerson.Builder.withRelated(_:)();
}

uint64_t dispatch thunk of DialogPerson.Builder.withFullName(_:)()
{
  return dispatch thunk of DialogPerson.Builder.withFullName(_:)();
}

uint64_t dispatch thunk of DialogPerson.Builder.withNickname(_:)()
{
  return dispatch thunk of DialogPerson.Builder.withNickname(_:)();
}

uint64_t dispatch thunk of DialogPerson.Builder.withGivenName(_:)()
{
  return dispatch thunk of DialogPerson.Builder.withGivenName(_:)();
}

uint64_t dispatch thunk of DialogPerson.Builder.withFamilyName(_:)()
{
  return dispatch thunk of DialogPerson.Builder.withFamilyName(_:)();
}

uint64_t dispatch thunk of DialogPerson.Builder.withMiddleName(_:)()
{
  return dispatch thunk of DialogPerson.Builder.withMiddleName(_:)();
}

uint64_t dispatch thunk of DialogPerson.Builder.withRelationship(_:)()
{
  return dispatch thunk of DialogPerson.Builder.withRelationship(_:)();
}

uint64_t dispatch thunk of DialogPerson.Builder.withUseRelationshipName(_:)()
{
  return dispatch thunk of DialogPerson.Builder.withUseRelationshipName(_:)();
}

uint64_t dispatch thunk of DialogPerson.Builder.withUseConversationalName(_:)()
{
  return dispatch thunk of DialogPerson.Builder.withUseConversationalName(_:)();
}

uint64_t dispatch thunk of DialogPerson.Builder.withFriendlyPhoneNumberName(_:)()
{
  return dispatch thunk of DialogPerson.Builder.withFriendlyPhoneNumberName(_:)();
}

uint64_t dispatch thunk of DialogPerson.Builder.withFriendlyPhoneNumberNameShort(_:)()
{
  return dispatch thunk of DialogPerson.Builder.withFriendlyPhoneNumberNameShort(_:)();
}

uint64_t dispatch thunk of DialogPerson.Builder.build()()
{
  return dispatch thunk of DialogPerson.Builder.build()();
}

uint64_t DialogPerson.Builder.init()()
{
  return DialogPerson.Builder.init()();
}

uint64_t DialogPerson.Builder.deinit()
{
  return DialogPerson.Builder.deinit();
}

uint64_t DialogPerson.init(builder:)()
{
  return DialogPerson.init(builder:)();
}

uint64_t DialogPerson.company.getter()
{
  return DialogPerson.company.getter();
}

uint64_t DialogPerson.pronoun.getter()
{
  return DialogPerson.pronoun.getter();
}

uint64_t DialogPerson.related.getter()
{
  return DialogPerson.related.getter();
}

uint64_t dispatch thunk of DialogPerson.fullName.getter()
{
  return dispatch thunk of DialogPerson.fullName.getter();
}

uint64_t DialogPerson.nickname.getter()
{
  return DialogPerson.nickname.getter();
}

uint64_t dispatch thunk of DialogPerson.toString.getter()
{
  return dispatch thunk of DialogPerson.toString.getter();
}

uint64_t DialogPerson.givenName.getter()
{
  return DialogPerson.givenName.getter();
}

uint64_t type metadata accessor for DialogPerson()
{
  return type metadata accessor for DialogPerson();
}

uint64_t method lookup function for DialogPerson()
{
  return method lookup function for DialogPerson();
}

uint64_t DialogPerson.deinit()
{
  return DialogPerson.deinit();
}

uint64_t dispatch thunk of DialogCalendar.isThisWeek.getter()
{
  return dispatch thunk of DialogCalendar.isThisWeek.getter();
}

uint64_t dispatch thunk of DialogCalendar.isYesterday.getter()
{
  return dispatch thunk of DialogCalendar.isYesterday.getter();
}

uint64_t dispatch thunk of DialogCalendar.dateDescriptive.getter()
{
  return dispatch thunk of DialogCalendar.dateDescriptive.getter();
}

uint64_t dispatch thunk of DialogCalendar.timeDescriptive.getter()
{
  return dispatch thunk of DialogCalendar.timeDescriptive.getter();
}

uint64_t dispatch thunk of DialogCalendar.dateTimeDescriptive.getter()
{
  return dispatch thunk of DialogCalendar.dateTimeDescriptive.getter();
}

uint64_t DialogCalendar.Builder.init(secs:)()
{
  return DialogCalendar.Builder.init(secs:)();
}

uint64_t dispatch thunk of DialogCalendar.Builder.build()()
{
  return dispatch thunk of DialogCalendar.Builder.build()();
}

uint64_t type metadata accessor for DialogCalendar.Builder()
{
  return type metadata accessor for DialogCalendar.Builder();
}

uint64_t dispatch thunk of DialogCalendar.dayName.getter()
{
  return dispatch thunk of DialogCalendar.dayName.getter();
}

uint64_t dispatch thunk of DialogCalendar.isToday.getter()
{
  return dispatch thunk of DialogCalendar.isToday.getter();
}

uint64_t type metadata accessor for DialogCalendar()
{
  return type metadata accessor for DialogCalendar();
}

uint64_t dispatch thunk of CATGlobals.toDictionary.getter()
{
  return dispatch thunk of CATGlobals.toDictionary.getter();
}

uint64_t CATGlobals.__allocating_init(device:)()
{
  return CATGlobals.__allocating_init(device:)();
}

uint64_t CATGlobals.__allocating_init()()
{
  return CATGlobals.__allocating_init()();
}

uint64_t type metadata accessor for CATGlobals()
{
  return type metadata accessor for CATGlobals();
}

uint64_t CATWrapper.init(templateDir:options:globals:)()
{
  return CATWrapper.init(templateDir:options:globals:)();
}

uint64_t dispatch thunk of CATWrapper.execute(catId:parameters:completion:)()
{
  return dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
}

uint64_t dispatch thunk of CATWrapper.execute(catId:parameters:)()
{
  return dispatch thunk of CATWrapper.execute(catId:parameters:)();
}

uint64_t CATWrapper.__allocating_init(options:globals:)()
{
  return CATWrapper.__allocating_init(options:globals:)();
}

uint64_t CATWrapper.deinit()
{
  return CATWrapper.deinit();
}

uint64_t type metadata accessor for SirikitApp()
{
  return type metadata accessor for SirikitApp();
}

uint64_t static CATExecutor.registerBundle(bundle:)()
{
  return static CATExecutor.registerBundle(bundle:)();
}

uint64_t type metadata accessor for CATExecutor()
{
  return type metadata accessor for CATExecutor();
}

uint64_t SpeakableString.init(serializedValue:)()
{
  return SpeakableString.init(serializedValue:)();
}

uint64_t SpeakableString.init(print:speak:)()
{
  return SpeakableString.init(print:speak:)();
}

uint64_t SpeakableString.print.getter()
{
  return SpeakableString.print.getter();
}

uint64_t SpeakableString.speak.getter()
{
  return SpeakableString.speak.getter();
}

uint64_t type metadata accessor for SpeakableString()
{
  return type metadata accessor for SpeakableString();
}

uint64_t CATWrapperSimple.init(templateDir:options:globals:)()
{
  return CATWrapperSimple.init(templateDir:options:globals:)();
}

uint64_t CATWrapperSimple.init(useResponseMode:options:)()
{
  return CATWrapperSimple.init(useResponseMode:options:)();
}

uint64_t CATWrapperSimple.__allocating_init(options:globals:)()
{
  return CATWrapperSimple.__allocating_init(options:globals:)();
}

uint64_t CATWrapperSimple.deinit()
{
  return CATWrapperSimple.deinit();
}

uint64_t SirikitDeviceState.__allocating_init(from:)()
{
  return SirikitDeviceState.__allocating_init(from:)();
}

uint64_t type metadata accessor for SirikitDeviceState()
{
  return type metadata accessor for SirikitDeviceState();
}

uint64_t dispatch thunk of LabelExecutionResult.subscript.getter()
{
  return dispatch thunk of LabelExecutionResult.subscript.getter();
}

uint64_t static Log.siriDialogEngine.getter()
{
  return static Log.siriDialogEngine.getter();
}

uint64_t CATType.toDictionary.getter()
{
  return CATType.toDictionary.getter();
}

uint64_t static CATOption.defaultMode.getter()
{
  return static CATOption.defaultMode.getter();
}

uint64_t type metadata accessor for CATOption()
{
  return type metadata accessor for CATOption();
}

uint64_t SPHCallCenter.onQueue<A>(_:)()
{
  return SPHCallCenter.onQueue<A>(_:)();
}

uint64_t dispatch thunk of App.description.getter()
{
  return dispatch thunk of App.description.getter();
}

uint64_t App.__allocating_init(appIdentifier:pluginIdentifier:)()
{
  return App.__allocating_init(appIdentifier:pluginIdentifier:)();
}

uint64_t App.init(appIdentifier:systemExtensionBundleId:systemUIExtensionBundleId:pluginIdentifier:)()
{
  return App.init(appIdentifier:systemExtensionBundleId:systemUIExtensionBundleId:pluginIdentifier:)();
}

uint64_t App.__allocating_init(appIdentifier:)()
{
  return App.__allocating_init(appIdentifier:)();
}

uint64_t App.appIdentifier.getter()
{
  return App.appIdentifier.getter();
}

uint64_t dispatch thunk of App.debugDescription.getter()
{
  return dispatch thunk of App.debugDescription.getter();
}

uint64_t App.pluginIdentifier.getter()
{
  return App.pluginIdentifier.getter();
}

uint64_t App.systemExtensionBundleId.getter()
{
  return App.systemExtensionBundleId.getter();
}

uint64_t App.systemUIExtensionBundleId.getter()
{
  return App.systemUIExtensionBundleId.getter();
}

uint64_t static App.== infix(_:_:)()
{
  return static App.== infix(_:_:)();
}

uint64_t type metadata accessor for App()
{
  return type metadata accessor for App();
}

uint64_t AppDisplayInfo.init(displayName:isFirstParty:)()
{
  return AppDisplayInfo.init(displayName:isFirstParty:)();
}

uint64_t type metadata accessor for AppDisplayInfo()
{
  return type metadata accessor for AppDisplayInfo();
}

uint64_t AppResolutionStateProvider.init(appSelectionState:)()
{
  return AppResolutionStateProvider.init(appSelectionState:)();
}

uint64_t dispatch thunk of AppResolutionStateProviding.getRequestedApp()()
{
  return dispatch thunk of AppResolutionStateProviding.getRequestedApp()();
}

uint64_t dispatch thunk of AppResolutionStateProviding.getSuggestedApp()()
{
  return dispatch thunk of AppResolutionStateProviding.getSuggestedApp()();
}

uint64_t type metadata accessor for AppResolutionResult()
{
  return type metadata accessor for AppResolutionResult();
}

uint64_t type metadata accessor for ContactResolutionVerb()
{
  return type metadata accessor for ContactResolutionVerb();
}

uint64_t static ContactResolutionHelper.nullHandleLabelHelper(contacts:)()
{
  return static ContactResolutionHelper.nullHandleLabelHelper(contacts:)();
}

uint64_t ContactResolutionPatternID.rawValue.getter()
{
  return ContactResolutionPatternID.rawValue.getter();
}

uint64_t type metadata accessor for ContactResolutionPatternID()
{
  return type metadata accessor for ContactResolutionPatternID();
}

uint64_t type metadata accessor for ContactResolutionResponseHandler.DirectInvocationValue()
{
  return type metadata accessor for ContactResolutionResponseHandler.DirectInvocationValue();
}

uint64_t ContactResolutionResponseHandler.directInvocationValue.getter()
{
  return ContactResolutionResponseHandler.directInvocationValue.getter();
}

uint64_t ContactResolutionResponseHandler.init(userData:)()
{
  return ContactResolutionResponseHandler.init(userData:)();
}

uint64_t type metadata accessor for ContactResolutionResponseHandler()
{
  return type metadata accessor for ContactResolutionResponseHandler();
}

uint64_t ContactResolutionPatternGenerator.init(appBundleId:globals:)()
{
  return ContactResolutionPatternGenerator.init(appBundleId:globals:)();
}

uint64_t type metadata accessor for ContactResolutionPatternGenerator()
{
  return type metadata accessor for ContactResolutionPatternGenerator();
}

uint64_t ContactResolutionSnippetGenerator.init(appBundleId:globals:)()
{
  return ContactResolutionSnippetGenerator.init(appBundleId:globals:)();
}

uint64_t type metadata accessor for ContactResolutionSnippetGenerator()
{
  return type metadata accessor for ContactResolutionSnippetGenerator();
}

uint64_t IntentParameter.init(wrappedValue:)()
{
  return IntentParameter.init(wrappedValue:)();
}

uint64_t IntentParameter.wrappedValue.modify()
{
  return IntentParameter.wrappedValue.modify();
}

uint64_t IntentParameter.wrappedValue.getter()
{
  return IntentParameter.wrappedValue.getter();
}

uint64_t IntentParameter.wrappedValue.setter()
{
  return IntentParameter.wrappedValue.setter();
}

uint64_t IntentParameter.projectedValue.getter()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t CurrentRequest.executionRequestId.getter()
{
  return CurrentRequest.executionRequestId.getter();
}

uint64_t CurrentRequest.audioSource.getter()
{
  return CurrentRequest.audioSource.getter();
}

uint64_t CurrentRequest.inputOrigin.getter()
{
  return CurrentRequest.inputOrigin.getter();
}

uint64_t CurrentRequest.isInAmbient.getter()
{
  return CurrentRequest.isInAmbient.getter();
}

uint64_t CurrentRequest.responseMode.getter()
{
  return CurrentRequest.responseMode.getter();
}

uint64_t CurrentRequest.multiUserState.getter()
{
  return CurrentRequest.multiUserState.getter();
}

uint64_t CurrentRequest.audioDestination.getter()
{
  return CurrentRequest.audioDestination.getter();
}

uint64_t CurrentRequest.resultCandidateId.getter()
{
  return CurrentRequest.resultCandidateId.getter();
}

uint64_t CurrentRequest.refId.getter()
{
  return CurrentRequest.refId.getter();
}

uint64_t type metadata accessor for MultiUserState()
{
  return type metadata accessor for MultiUserState();
}

uint64_t TTRComponentInfo.init(componentName:componentVersion:componentID:)()
{
  return TTRComponentInfo.init(componentName:componentVersion:componentID:)();
}

uint64_t type metadata accessor for TTRComponentInfo()
{
  return type metadata accessor for TTRComponentInfo();
}

uint64_t RadarFilingExtras.init(attachmentURLs:extensionIDs:deviceIDs:displayReason:)()
{
  return RadarFilingExtras.init(attachmentURLs:extensionIDs:deviceIDs:displayReason:)();
}

uint64_t type metadata accessor for RadarFilingExtras()
{
  return type metadata accessor for RadarFilingExtras();
}

uint64_t dispatch thunk of TapToRadarManager.createProblem(errStatus:userDefaultSuiteName:radarComponentInfo:title:description:radarFilingExtras:completion:)()
{
  return dispatch thunk of TapToRadarManager.createProblem(errStatus:userDefaultSuiteName:radarComponentInfo:title:description:radarFilingExtras:completion:)();
}

uint64_t TapToRadarManager.init()()
{
  return TapToRadarManager.init()();
}

uint64_t type metadata accessor for TapToRadarManager()
{
  return type metadata accessor for TapToRadarManager();
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Message.getTranscriptString()()
{
  uint64_t v0 = Message.getTranscriptString()();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t static MessageStoreController.shared.getter()
{
  return static MessageStoreController.shared.getter();
}

uint64_t type metadata accessor for MessageStoreController()
{
  return type metadata accessor for MessageStoreController();
}

uint64_t Google_Protobuf_StringValue.value.getter()
{
  return Google_Protobuf_StringValue.value.getter();
}

uint64_t type metadata accessor for Google_Protobuf_StringValue()
{
  return type metadata accessor for Google_Protobuf_StringValue();
}

uint64_t BinaryDecodingOptions.init()()
{
  return BinaryDecodingOptions.init()();
}

uint64_t type metadata accessor for BinaryDecodingOptions()
{
  return type metadata accessor for BinaryDecodingOptions();
}

uint64_t Message.init(serializedData:extensions:partial:options:)()
{
  return Message.init(serializedData:extensions:partial:options:)();
}

uint64_t Message.serializedData(partial:)()
{
  return Message.serializedData(partial:)();
}

uint64_t type metadata accessor for PommesContext.Source()
{
  return type metadata accessor for PommesContext.Source();
}

uint64_t PommesContext.init(source:domain:listenAfterSpeaking:)()
{
  return PommesContext.init(source:domain:listenAfterSpeaking:)();
}

uint64_t type metadata accessor for PommesContext()
{
  return type metadata accessor for PommesContext();
}

uint64_t ReferenceResolutionClient.__allocating_init()()
{
  return ReferenceResolutionClient.__allocating_init()();
}

uint64_t type metadata accessor for ReferenceResolutionClient()
{
  return type metadata accessor for ReferenceResolutionClient();
}

uint64_t dispatch thunk of RRReferenceResolverProtocol.hasReference(usoEntity:)()
{
  return dispatch thunk of RRReferenceResolverProtocol.hasReference(usoEntity:)();
}

uint64_t dispatch thunk of RRReferenceResolverProtocol.resolve(query:)()
{
  return dispatch thunk of RRReferenceResolverProtocol.resolve(query:)();
}

uint64_t type metadata accessor for ExperimentationAnalyticsManager()
{
  return type metadata accessor for ExperimentationAnalyticsManager();
}

uint64_t os_log(_:dso:log:type:_:)()
{
  return os_log(_:dso:log:type:_:)();
}

uint64_t OSSignpostID.init(log:)()
{
  return OSSignpostID.init(log:)();
}

uint64_t OSSignpostID.rawValue.getter()
{
  return OSSignpostID.rawValue.getter();
}

uint64_t type metadata accessor for OSSignpostID()
{
  return type metadata accessor for OSSignpostID();
}

uint64_t OSSignposter.init(logger:)()
{
  return OSSignposter.init(logger:)();
}

uint64_t OSSignposter.logHandle.getter()
{
  return OSSignposter.logHandle.getter();
}

uint64_t type metadata accessor for OSSignposter()
{
  return type metadata accessor for OSSignposter();
}

uint64_t type metadata accessor for OSSignpostError()
{
  return type metadata accessor for OSSignpostError();
}

uint64_t static OSLogIntegerFormatting.decimal.getter()
{
  return static OSLogIntegerFormatting.decimal.getter();
}

uint64_t OSSignpostIntervalState.signpostID.getter()
{
  return OSSignpostIntervalState.signpostID.getter();
}

uint64_t type metadata accessor for OSSignpostIntervalState()
{
  return type metadata accessor for OSSignpostIntervalState();
}

uint64_t checkForErrorAndConsumeState(state:)()
{
  return checkForErrorAndConsumeState(state:)();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t Logger.init(subsystem:category:)()
{
  return Logger.init(subsystem:category:)();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

uint64_t RRCandidate.entity.getter()
{
  return RRCandidate.entity.getter();
}

uint64_t type metadata accessor for RRCandidate()
{
  return type metadata accessor for RRCandidate();
}

uint64_t dispatch thunk of ResolveQuery.description.getter()
{
  return dispatch thunk of ResolveQuery.description.getter();
}

uint64_t ResolveQuery.init(referenceEntity:alternativeEntityTypes:restrictedEntitiesKey:matchedResultsSetting:)()
{
  return ResolveQuery.init(referenceEntity:alternativeEntityTypes:restrictedEntitiesKey:matchedResultsSetting:)();
}

uint64_t type metadata accessor for ResolveQuery()
{
  return type metadata accessor for ResolveQuery();
}

uint64_t GroupIdentifier.init(id:seq:)()
{
  return GroupIdentifier.init(id:seq:)();
}

uint64_t type metadata accessor for GroupIdentifier()
{
  return type metadata accessor for GroupIdentifier();
}

uint64_t type metadata accessor for MatchedResultsSetting()
{
  return type metadata accessor for MatchedResultsSetting();
}

uint64_t RREntity.convertData<A>(to:)()
{
  return RREntity.convertData<A>(to:)();
}

uint64_t RREntity.appBundleId.getter()
{
  return RREntity.appBundleId.getter();
}

uint64_t RREntity.init<A>(id:appBundleId:usoEntity:intentEntity:group:)()
{
  return RREntity.init<A>(id:appBundleId:usoEntity:intentEntity:group:)();
}

uint64_t RREntity.init(id:appBundleId:usoEntity:dataType:data:group:)()
{
  return RREntity.init(id:appBundleId:usoEntity:dataType:data:group:)();
}

uint64_t RREntity.group.setter()
{
  return RREntity.group.setter();
}

uint64_t RREntity.usoEntity.getter()
{
  return RREntity.usoEntity.getter();
}

uint64_t type metadata accessor for RREntity()
{
  return type metadata accessor for RREntity();
}

uint64_t type metadata accessor for RRResult()
{
  return type metadata accessor for RRResult();
}

uint64_t type metadata accessor for Subscribers.Completion()
{
  return type metadata accessor for Subscribers.Completion();
}

uint64_t static Subscribers.Demand.unlimited.getter()
{
  return static Subscribers.Demand.unlimited.getter();
}

uint64_t Future.init(_:)()
{
  return Future.init(_:)();
}

uint64_t Publisher.eraseToAnyPublisher()()
{
  return Publisher.eraseToAnyPublisher()();
}

uint64_t Publisher.map<A>(_:)()
{
  return Publisher.map<A>(_:)();
}

uint64_t Publisher.zip<A, B>(_:_:)()
{
  return Publisher.zip<A, B>(_:_:)();
}

uint64_t Publisher.zip<A, B, C, D>(_:_:_:_:)()
{
  return Publisher.zip<A, B, C, D>(_:_:_:_:)();
}

uint64_t Publisher.sink(receiveCompletion:receiveValue:)()
{
  return Publisher.sink(receiveCompletion:receiveValue:)();
}

uint64_t Publisher.flatMap<A, B>(maxPublishers:_:)()
{
  return Publisher.flatMap<A, B>(maxPublishers:_:)();
}

uint64_t type metadata accessor for DispatchTimeInterval()
{
  return type metadata accessor for DispatchTimeInterval();
}

uint64_t static DispatchWorkItemFlags.barrier.getter()
{
  return static DispatchWorkItemFlags.barrier.getter();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t type metadata accessor for DispatchQoS.QoSClass()
{
  return type metadata accessor for DispatchQoS.QoSClass();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t static DispatchQoS.userInitiated.getter()
{
  return static DispatchQoS.userInitiated.getter();
}

uint64_t static DispatchQoS.userInteractive.getter()
{
  return static DispatchQoS.userInteractive.getter();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t static DispatchTime.now()()
{
  return static DispatchTime.now()();
}

uint64_t type metadata accessor for DispatchTime()
{
  return type metadata accessor for DispatchTime();
}

uint64_t + infix(_:_:)()
{
  return + infix(_:_:)();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Dictionary.description.getter()
{
  return Dictionary.description.getter();
}

uint64_t Dictionary.init(minimumCapacity:)()
{
  return Dictionary.init(minimumCapacity:)();
}

uint64_t Dictionary.init(dictionaryLiteral:)()
{
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t Dictionary.Keys.description.getter()
{
  return Dictionary.Keys.description.getter();
}

uint64_t Dictionary.count.getter()
{
  return Dictionary.count.getter();
}

uint64_t Dictionary.filter(_:)()
{
  return Dictionary.filter(_:)();
}

uint64_t Dictionary.isEmpty.getter()
{
  return Dictionary.isEmpty.getter();
}

Swift::Void __swiftcall Dictionary._Variant.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
}

uint64_t type metadata accessor for Dictionary()
{
  return type metadata accessor for Dictionary();
}

uint64_t Dictionary.subscript.getter()
{
  return Dictionary.subscript.getter();
}

uint64_t Dictionary.subscript.setter()
{
  return Dictionary.subscript.setter();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t Character.isWhitespace.getter()
{
  return Character.isWhitespace.getter();
}

uint64_t BidirectionalCollection<>.starts<A>(with:)()
{
  return BidirectionalCollection<>.starts<A>(with:)();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t dispatch thunk of static Comparable.< infix(_:_:)()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return static String._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static String._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.data(using:allowLossyConversion:)()
{
  return String.data(using:allowLossyConversion:)();
}

uint64_t static String.Encoding.utf8.getter()
{
  return static String.Encoding.utf8.getter();
}

uint64_t type metadata accessor for String.Encoding()
{
  return type metadata accessor for String.Encoding();
}

uint64_t String.init<A>(describing:)()
{
  return String.init<A>(describing:)();
}

{
  return String.init<A>(describing:)();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0 = String.lowercased()();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

Swift::String __swiftcall String.uppercased()()
{
  uint64_t v0 = String.uppercased()();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t static String._fromSubstring(_:)()
{
  return static String._fromSubstring(_:)();
}

uint64_t String.toSpeakableString.getter()
{
  return String.toSpeakableString.getter();
}

uint64_t String.debugDescription.getter()
{
  return String.debugDescription.getter();
}

uint64_t String.UnicodeScalarView.append(_:)()
{
  return String.UnicodeScalarView.append(_:)();
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return static String._uncheckedFromUTF8(_:)();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

uint64_t String.count.getter()
{
  return String.count.getter();
}

uint64_t String.index(after:)()
{
  return String.index(after:)();
}

uint64_t String.index(before:)()
{
  return String.index(before:)();
}

uint64_t String.index(_:offsetBy:limitedBy:)()
{
  return String.index(_:offsetBy:limitedBy:)();
}

uint64_t String.append<A>(contentsOf:)()
{
  return String.append<A>(contentsOf:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

Swift::String_optional __swiftcall String.Iterator.next()()
{
  uint64_t v0 = String.Iterator.next()();
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return String.UTF8View._foreignIndex(after:)();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return String.UTF8View._foreignIndex(_:offsetBy:)();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return String.UTF8View._foreignSubscript(position:)();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return String.UTF16View.index(_:offsetBy:)();
}

Swift::Bool __swiftcall String.hasPrefix(_:)(Swift::String a1)
{
  return String.hasPrefix(_:)(a1._countAndFlagsBits, a1._object);
}

Swift::Bool __swiftcall String.hasSuffix(_:)(Swift::String a1)
{
  return String.hasSuffix(_:)(a1._countAndFlagsBits, a1._object);
}

uint64_t String.hashValue.getter()
{
  return String.hashValue.getter();
}

uint64_t String.subscript.getter()
{
  return String.subscript.getter();
}

{
  return String.subscript.getter();
}

uint64_t String.init<A>(_:)()
{
  return String.init<A>(_:)();
}

uint64_t dispatch thunk of Sequence.makeIterator()()
{
  return dispatch thunk of Sequence.makeIterator()();
}

uint64_t Sequence.compactMap<A>(_:)()
{
  return Sequence.compactMap<A>(_:)();
}

uint64_t Sequence.enumerated()()
{
  return Sequence.enumerated()();
}

uint64_t Sequence.first(where:)()
{
  return Sequence.first(where:)();
}

uint64_t Sequence.filter(_:)()
{
  return Sequence.filter(_:)();
}

uint64_t Sequence<>.contains(_:)()
{
  return Sequence<>.contains(_:)();
}

uint64_t Sequence<>.joined(separator:)()
{
  return Sequence<>.joined(separator:)();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return RawRepresentable<>.init(from:)();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Array.startIndex.getter()
{
  return Array.startIndex.getter();
}

uint64_t Array.description.getter()
{
  return Array.description.getter();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t static Array._adoptStorage(_:count:)()
{
  return static Array._adoptStorage(_:count:)();
}

uint64_t Array._checkSubscript(_:wasNativeTypeChecked:)()
{
  return Array._checkSubscript(_:wasNativeTypeChecked:)();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t Array.debugDescription.getter()
{
  return Array.debugDescription.getter();
}

uint64_t static Array._allocateUninitialized(_:)()
{
  return static Array._allocateUninitialized(_:)();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)();
}

Swift::Bool __swiftcall Array._hoistableIsNativeTypeChecked()()
{
  return Array._hoistableIsNativeTypeChecked()();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t Array.count.getter()
{
  return Array.count.getter();
}

uint64_t Array.append(_:)()
{
  return Array.append(_:)();
}

uint64_t Array.endIndex.getter()
{
  return Array.endIndex.getter();
}

Swift::Int __swiftcall Array._getCount()()
{
  return Array._getCount()();
}

Swift::Void __swiftcall Array.formIndex(after:)(Swift::Int *after)
{
}

uint64_t type metadata accessor for Array()
{
  return type metadata accessor for Array();
}

uint64_t Array.subscript.getter()
{
  return Array.subscript.getter();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return CheckedContinuation.resume(throwing:)();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t type metadata accessor for CheckedContinuation()
{
  return type metadata accessor for CheckedContinuation();
}

uint64_t static TaskPriority.utility.getter()
{
  return static TaskPriority.utility.getter();
}

uint64_t TaskPriority.rawValue.getter()
{
  return TaskPriority.rawValue.getter();
}

uint64_t type metadata accessor for TaskPriority()
{
  return type metadata accessor for TaskPriority();
}

uint64_t Double.init(truncating:)()
{
  return Double.init(truncating:)();
}

uint64_t Double.write<A>(to:)()
{
  return Double.write<A>(to:)();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Set._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Set.description.getter()
{
  return Set.description.getter();
}

uint64_t Set.init(minimumCapacity:)()
{
  return Set.init(minimumCapacity:)();
}

uint64_t Set.Index._asCocoa.modify()
{
  return Set.Index._asCocoa.modify();
}

uint64_t Set.insert(_:)()
{
  return Set.insert(_:)();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return Set.Iterator.init(_cocoa:)();
}

uint64_t type metadata accessor for Set()
{
  return type metadata accessor for Set();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return dispatch thunk of Collection.startIndex.getter();
}

uint64_t dispatch thunk of Collection.count.getter()
{
  return dispatch thunk of Collection.count.getter();
}

uint64_t dispatch thunk of Collection.isEmpty.getter()
{
  return dispatch thunk of Collection.isEmpty.getter();
}

uint64_t dispatch thunk of Collection.formIndex(after:)()
{
  return dispatch thunk of Collection.formIndex(after:)();
}

uint64_t Collection.randomElement()()
{
  return Collection.randomElement()();
}

uint64_t dispatch thunk of Collection.subscript.read()
{
  return dispatch thunk of Collection.subscript.read();
}

uint64_t INCallRecord.callDuration.getter()
{
  return INCallRecord.callDuration.getter();
}

uint64_t INCallRecord.numberOfCalls.getter()
{
  return INCallRecord.numberOfCalls.getter();
}

uint64_t INCallRecord.unseen.getter()
{
  return INCallRecord.unseen.getter();
}

uint64_t static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:)()
{
  return static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:)();
}

uint64_t static SACardSnippet.makeFromCardSectionsWithIntentData(cardSections:intent:intentResponse:shouldGenerateAceId:)()
{
  return static SACardSnippet.makeFromCardSectionsWithIntentData(cardSections:intent:intentResponse:shouldGenerateAceId:)();
}

uint64_t static os_log_type_t.info.getter()
{
  return static os_log_type_t.info.getter();
}

uint64_t static os_log_type_t.debug.getter()
{
  return static os_log_type_t.debug.getter();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

uint64_t static os_log_type_t.fault.getter()
{
  return static os_log_type_t.fault.getter();
}

uint64_t static os_log_type_t.default.getter()
{
  return static os_log_type_t.default.getter();
}

uint64_t static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)()
{
  return static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
}

uint64_t OS_dispatch_group.wait(timeout:)()
{
  return OS_dispatch_group.wait(timeout:)();
}

Swift::Void __swiftcall OS_dispatch_group.wait()()
{
}

uint64_t OS_dispatch_group.notify(qos:flags:queue:execute:)()
{
  return OS_dispatch_group.notify(qos:flags:queue:execute:)();
}

uint64_t static OS_dispatch_queue.Attributes.concurrent.getter()
{
  return static OS_dispatch_queue.Attributes.concurrent.getter();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return static OS_dispatch_queue.main.getter();
}

uint64_t OS_dispatch_queue.sync<A>(flags:execute:)()
{
  return OS_dispatch_queue.sync<A>(flags:execute:)();
}

uint64_t OS_dispatch_queue.sync<A>(execute:)()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t static OS_dispatch_queue.global(qos:)()
{
  return static OS_dispatch_queue.global(qos:)();
}

uint64_t type metadata accessor for OS_dispatch_source.TimerFlags()
{
  return type metadata accessor for OS_dispatch_source.TimerFlags();
}

uint64_t static OS_dispatch_source.makeTimerSource(flags:queue:)()
{
  return static OS_dispatch_source.makeTimerSource(flags:queue:)();
}

uint64_t OS_dispatch_source.setEventHandler(qos:flags:handler:)()
{
  return OS_dispatch_source.setEventHandler(qos:flags:handler:)();
}

Swift::Void __swiftcall OS_dispatch_source.resume()()
{
}

uint64_t static USOSerializedGraph.fromProto(protoGraph:)()
{
  return static USOSerializedGraph.fromProto(protoGraph:)();
}

uint64_t static os_signpost_type_t.end.getter()
{
  return static os_signpost_type_t.end.getter();
}

uint64_t static os_signpost_type_t.begin.getter()
{
  return static os_signpost_type_t.begin.getter();
}

uint64_t static os_signpost_type_t.event.getter()
{
  return static os_signpost_type_t.event.getter();
}

uint64_t OS_dispatch_semaphore.wait(timeout:)()
{
  return OS_dispatch_semaphore.wait(timeout:)();
}

Swift::Int __swiftcall OS_dispatch_semaphore.signal()()
{
  return OS_dispatch_semaphore.signal()();
}

uint64_t OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)()
{
  return OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
}

INSearchCallHistoryIntent __swiftcall INSearchCallHistoryIntent.init(dateCreated:recipient:callCapabilities:callTypes:unseen:)(INDateComponentsRange_optional dateCreated, INPerson_optional recipient, __C::INCallCapabilityOptions callCapabilities, __C::INCallRecordTypeOptions callTypes, Swift::Bool_optional unseen)
{
  return (INSearchCallHistoryIntent)INSearchCallHistoryIntent.init(dateCreated:recipient:callCapabilities:callTypes:unseen:)(dateCreated.value.super.isa, *(void *)&dateCreated.is_nil, recipient.value.super.isa, *(void *)&recipient.is_nil, callCapabilities.rawValue, callTypes.rawValue, *(void *)&unseen);
}

uint64_t INSearchCallHistoryIntent.unseen.getter()
{
  return INSearchCallHistoryIntent.unseen.getter();
}

uint64_t static SAIntentGroupLaunchAppWithIntent.launchAppWithIntent(app:intent:intentResponse:)()
{
  return static SAIntentGroupLaunchAppWithIntent.launchAppWithIntent(app:intent:intentResponse:)();
}

uint64_t FLOWSchemaFLOWDomainExecutionType.description.getter()
{
  return FLOWSchemaFLOWDomainExecutionType.description.getter();
}

uint64_t INFERENCESchemaINFERENCEAppResolutionType.description.getter()
{
  return INFERENCESchemaINFERENCEAppResolutionType.description.getter();
}

uint64_t INIntent.debugDescriptionLite.getter()
{
  return INIntent.debugDescriptionLite.getter();
}

uint64_t INPerson.toContactQuery()()
{
  return INPerson.toContactQuery()();
}

NSNumber __swiftcall NSNumber.init(floatLiteral:)(Swift::Double floatLiteral)
{
  return (NSNumber)NSNumber.init(floatLiteral:)(floatLiteral);
}

NSNumber __swiftcall NSNumber.init(BOOLeanLiteral:)(Swift::Bool BOOLeanLiteral)
{
  return (NSNumber)NSNumber.init(BOOLeanLiteral:)(BOOLeanLiteral);
}

NSNumber __swiftcall NSNumber.init(integerLiteral:)(Swift::Int integerLiteral)
{
  return (NSNumber)NSNumber.init(integerLiteral:)(integerLiteral);
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return NSObject._rawHashValue(seed:)(seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)();
}

Swift::String_optional __swiftcall AceObject.serializeToBase64()()
{
  uint64_t v0 = AceObject.serializeToBase64()();
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

uint64_t OS_os_log.signpostsEnabled.getter()
{
  return OS_os_log.signpostsEnabled.getter();
}

uint64_t Optional.debugDescription.getter()
{
  return Optional.debugDescription.getter();
}

uint64_t type metadata accessor for Optional()
{
  return type metadata accessor for Optional();
}

Swift::String __swiftcall Substring.lowercased()()
{
  uint64_t v0 = Substring.lowercased()();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t Substring.init(_:)()
{
  return Substring.init(_:)();
}

uint64_t dispatch thunk of IteratorProtocol.next()()
{
  return dispatch thunk of IteratorProtocol.next()();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t StringProtocol.components(separatedBy:)()
{
  return StringProtocol.components(separatedBy:)();
}

uint64_t StringProtocol.capitalized.getter()
{
  return StringProtocol.capitalized.getter();
}

uint64_t StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t StringProtocol.contains<A>(_:)()
{
  return StringProtocol.contains<A>(_:)();
}

uint64_t StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)()
{
  return StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t dispatch thunk of SetAlgebra.isSuperset(of:)()
{
  return dispatch thunk of SetAlgebra.isSuperset(of:)();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t _HashTable.previousHole(before:)()
{
  return _HashTable.previousHole(before:)();
}

uint64_t __CocoaSet.startIndex.getter()
{
  return __CocoaSet.startIndex.getter();
}

uint64_t __CocoaSet.makeIterator()()
{
  return __CocoaSet.makeIterator()();
}

uint64_t __CocoaSet.Index.handleBitPattern.getter()
{
  return __CocoaSet.Index.handleBitPattern.getter();
}

uint64_t __CocoaSet.Index.age.getter()
{
  return __CocoaSet.Index.age.getter();
}

uint64_t __CocoaSet.Index.element.getter()
{
  return __CocoaSet.Index.element.getter();
}

uint64_t __CocoaSet.count.getter()
{
  return __CocoaSet.count.getter();
}

uint64_t __CocoaSet.member(for:)()
{
  return __CocoaSet.member(for:)();
}

uint64_t __CocoaSet.element(at:)()
{
  return __CocoaSet.element(at:)();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return __CocoaSet.Iterator.next()();
}

uint64_t __CocoaSet.formIndex(after:isUnique:)()
{
  return __CocoaSet.formIndex(after:isUnique:)();
}

uint64_t _expectEnd<A>(of:is:)()
{
  return _expectEnd<A>(of:is:)();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t static _SetStorage.copy(original:)()
{
  return static _SetStorage.copy(original:)();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return static _SetStorage.convert(_:capacity:)();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return static _SetStorage.allocate(capacity:)();
}

uint64_t type metadata accessor for _SetStorage()
{
  return type metadata accessor for _SetStorage();
}

uint64_t _StringGuts.foreignErrorCorrectedScalar(startingAt:)()
{
  return _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t StaticString.description.getter()
{
  return StaticString.description.getter();
}

Swift::Void __swiftcall _ArrayBuffer._typeCheckSlowPath(_:)(Swift::Int a1)
{
}

uint64_t _ArrayBuffer._getElementSlowPath(_:)()
{
  return _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
}

uint64_t type metadata accessor for DecodingError()
{
  return type metadata accessor for DecodingError();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t _decodeScalar(_:startingAt:)()
{
  return _decodeScalar(_:startingAt:)();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return specialized ContiguousArray._endMutation()();
}

Swift::Void __swiftcall ContiguousArray.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t ContiguousArray.append(_:)()
{
  return ContiguousArray.append(_:)();
}

uint64_t ContiguousArray.init()()
{
  return ContiguousArray.init()();
}

uint64_t type metadata accessor for ContiguousArray()
{
  return type metadata accessor for ContiguousArray();
}

uint64_t _arrayForceCast<A, B>(_:)()
{
  return _arrayForceCast<A, B>(_:)();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return _print_unlocked<A, B>(_:_:)();
}

uint64_t dispatch thunk of _AnyCollectionBox.subscript.getter()
{
  return dispatch thunk of _AnyCollectionBox.subscript.getter();
}

Swift::Bool __swiftcall _NativeDictionary.ensureUnique(isUnique:capacity:)(Swift::Bool isUnique, Swift::Int capacity)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, capacity);
}

uint64_t _NativeDictionary._delete(at:)()
{
  return _NativeDictionary._delete(at:)();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _bridgeCocoaArray<A>(_:)()
{
  return _bridgeCocoaArray<A>(_:)();
}

uint64_t EnumeratedSequence.makeIterator()()
{
  return EnumeratedSequence.makeIterator()();
}

uint64_t EnumeratedSequence.Iterator.next()()
{
  return EnumeratedSequence.Iterator.next()();
}

uint64_t type metadata accessor for EnumeratedSequence.Iterator()
{
  return type metadata accessor for EnumeratedSequence.Iterator();
}

uint64_t type metadata accessor for EnumeratedSequence()
{
  return type metadata accessor for EnumeratedSequence();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t _CocoaArrayWrapper.subscript.getter()
{
  return _CocoaArrayWrapper.subscript.getter();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return _findStringSwitchCase(cases:string:)(cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  return KeyedDecodingContainer.codingPath.getter();
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return KeyedDecodingContainer.allKeys.getter();
}

uint64_t type metadata accessor for KeyedDecodingContainer()
{
  return type metadata accessor for KeyedDecodingContainer();
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t type metadata accessor for KeyedEncodingContainer()
{
  return type metadata accessor for KeyedEncodingContainer();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return _minimumMergeRunLength(_:)(a1);
}

uint64_t _stringCompareInternal(_:_:_:_:expecting:)()
{
  return _stringCompareInternal(_:_:_:_:expecting:)();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t type metadata accessor for _ContiguousArrayStorage()
{
  return type metadata accessor for _ContiguousArrayStorage();
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:)()
{
  return DefaultStringInterpolation.appendInterpolation<A>(_:)();
}

{
  return DefaultStringInterpolation.appendInterpolation<A>(_:)();
}

uint64_t DefaultStringInterpolation.init(literalCapacity:interpolationCount:)()
{
  return DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return _bridgeAnythingToObjectiveC<A>(_:)();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)()
{
  return dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
}

uint64_t dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)()
{
  return dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
}

uint64_t dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter()
{
  return dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
}

uint64_t type metadata accessor for __ContiguousArrayStorageBase()
{
  return type metadata accessor for __ContiguousArrayStorageBase();
}

uint64_t _findStringSwitchCaseWithCache(cases:string:cache:)()
{
  return _findStringSwitchCaseWithCache(cases:string:cache:)();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t Error.localizedDescription.getter()
{
  return Error.localizedDescription.getter();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return static Hasher._hash(seed:_:)();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t Mirror.init(reflecting:)()
{
  return Mirror.init(reflecting:)();
}

uint64_t Mirror.children.getter()
{
  return Mirror.children.getter();
}

uint64_t type metadata accessor for Mirror()
{
  return type metadata accessor for Mirror();
}

uint64_t Result<>.firstPrint.getter()
{
  return Result<>.firstPrint.getter();
}

uint64_t type metadata accessor for Result()
{
  return type metadata accessor for Result();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t dispatch thunk of Encoder.singleValueContainer()()
{
  return dispatch thunk of Encoder.singleValueContainer()();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t static AnyIndex.== infix(_:_:)()
{
  return static AnyIndex.== infix(_:_:)();
}

uint64_t _typeName(_:qualified:)()
{
  return _typeName(_:qualified:)();
}

uint64_t AFCallStateGetNames()
{
  return _AFCallStateGetNames();
}

uint64_t AFIsInternalInstall()
{
  return _AFIsInternalInstall();
}

uint64_t AFProcessIsAssistantService()
{
  return _AFProcessIsAssistantService();
}

uint64_t BiomeLibrary()
{
  return _BiomeLibrary();
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return _CFEqual(cf1, cf2);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return _CFPreferencesGetAppBooleanValue(key, applicationID, keyExistsAndHasValidFormat);
}

uint64_t DiagnosticLogSubmissionEnabled()
{
  return _DiagnosticLogSubmissionEnabled();
}

uint64_t INAddCallParticipantIntentResponseCodeGetName()
{
  return _INAddCallParticipantIntentResponseCodeGetName();
}

uint64_t INCallAudioRouteGetBackingType()
{
  return _INCallAudioRouteGetBackingType();
}

uint64_t INCallCapabilityGetBackingType()
{
  return _INCallCapabilityGetBackingType();
}

uint64_t INCallCapabilityOptionsEnumerateBackingTypes()
{
  return _INCallCapabilityOptionsEnumerateBackingTypes();
}

uint64_t INCallDestinationTypeGetBackingType()
{
  return _INCallDestinationTypeGetBackingType();
}

uint64_t INCallInviteTypeGetBackingType()
{
  return _INCallInviteTypeGetBackingType();
}

uint64_t INCallRecordTypeGetBackingType()
{
  return _INCallRecordTypeGetBackingType();
}

uint64_t INCallRecordTypeOptionsEnumerateBackingTypes()
{
  return _INCallRecordTypeOptionsEnumerateBackingTypes();
}

uint64_t INIntentCreate()
{
  return _INIntentCreate();
}

uint64_t INIntentResponseCreate()
{
  return _INIntentResponseCreate();
}

uint64_t INIntentSlotValueTransformFromContact()
{
  return _INIntentSlotValueTransformFromContact();
}

uint64_t INIntentSlotValueTransformFromContactHandle()
{
  return _INIntentSlotValueTransformFromContactHandle();
}

uint64_t INIntentSlotValueTransformFromContactValue()
{
  return _INIntentSlotValueTransformFromContactValue();
}

uint64_t INIntentSlotValueTransformToContact()
{
  return _INIntentSlotValueTransformToContact();
}

uint64_t INIntentSlotValueTransformToContactHandle()
{
  return _INIntentSlotValueTransformToContactHandle();
}

uint64_t INIntentSlotValueTransformToContactValue()
{
  return _INIntentSlotValueTransformToContactValue();
}

uint64_t INIntentSlotValueTransformToContacts()
{
  return _INIntentSlotValueTransformToContacts();
}

uint64_t INPersonRelationshipGetBackingType()
{
  return _INPersonRelationshipGetBackingType();
}

uint64_t INPreferredCallProviderGetBackingType()
{
  return _INPreferredCallProviderGetBackingType();
}

uint64_t INTypedIntentWithIntent()
{
  return _INTypedIntentWithIntent();
}

uint64_t PNCopyBestGuessCountryCodeForNumber()
{
  return _PNCopyBestGuessCountryCodeForNumber();
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return _SecTaskCopyValueForEntitlement(task, entitlement, error);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return _SecTaskCreateWithAuditToken(allocator, token);
}

uint64_t SimulateCrash()
{
  return _SimulateCrash();
}

uint64_t TUHandlesAreCanonicallyEqual()
{
  return _TUHandlesAreCanonicallyEqual();
}

uint64_t TUHomeCountryCode()
{
  return _TUHomeCountryCode();
}

uint64_t TUNetworkCountryCode()
{
  return _TUNetworkCountryCode();
}

uint64_t TUPreferredFaceTimeBundleIdentifier()
{
  return _TUPreferredFaceTimeBundleIdentifier();
}

uint64_t TUStringForCallStatus()
{
  return _TUStringForCallStatus();
}

uint64_t _AFPreferencesCountryCode()
{
  return __AFPreferencesCountryCode();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_release(const void *aBlock)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return __swift_stdlib_bridgeErrorToNSError();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

void bzero(void *a1, size_t a2)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return _dispatch_group_create();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return _dispatch_semaphore_create(value);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

void free(void *a1)
{
}

pid_t getpid(void)
{
  return _getpid();
}

uint64_t mach_continuous_time(void)
{
  return _mach_continuous_time();
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_asyncLet_begin()
{
  return _swift_asyncLet_begin();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_checkMetadataState()
{
  return _swift_checkMetadataState();
}

uint64_t swift_conformsToProtocol2()
{
  return _swift_conformsToProtocol2();
}

uint64_t swift_continuation_init()
{
  return _swift_continuation_init();
}

uint64_t swift_continuation_resume()
{
  return _swift_continuation_resume();
}

uint64_t swift_deallocClassInstance()
{
  return _swift_deallocClassInstance();
}

uint64_t swift_deallocPartialClassInstance()
{
  return _swift_deallocPartialClassInstance();
}

uint64_t swift_deletedMethodError()
{
  return _swift_deletedMethodError();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastClass()
{
  return _swift_dynamicCastClass();
}

uint64_t swift_dynamicCastMetatype()
{
  return _swift_dynamicCastMetatype();
}

uint64_t swift_dynamicCastObjCClass()
{
  return _swift_dynamicCastObjCClass();
}

uint64_t swift_dynamicCastUnknownClass()
{
  return _swift_dynamicCastUnknownClass();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return _swift_getAssociatedConformanceWitness();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return _swift_getAssociatedTypeWitness();
}

uint64_t swift_getAtKeyPath()
{
  return _swift_getAtKeyPath();
}

uint64_t swift_getDynamicType()
{
  return _swift_getDynamicType();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return _swift_getEnumCaseMultiPayload();
}

uint64_t swift_getErrorValue()
{
  return _swift_getErrorValue();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getGenericMetadata()
{
  return _swift_getGenericMetadata();
}

uint64_t swift_getKeyPath()
{
  return _swift_getKeyPath();
}

uint64_t swift_getMetatypeMetadata()
{
  return _swift_getMetatypeMetadata();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTupleTypeLayout()
{
  return _swift_getTupleTypeLayout();
}

uint64_t swift_getTupleTypeLayout2()
{
  return _swift_getTupleTypeLayout2();
}

uint64_t swift_getTupleTypeLayout3()
{
  return _swift_getTupleTypeLayout3();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return _swift_getTupleTypeMetadata2();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initClassMetadata2()
{
  return _swift_initClassMetadata2();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return _swift_initEnumMetadataMultiPayload();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return _swift_initEnumMetadataSinglePayload();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return _swift_isEscapingClosureAtFileLocation();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return _swift_isUniquelyReferenced_nonNull_bridgeObject();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_makeBoxUnique()
{
  return _swift_makeBoxUnique();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_projectBox()
{
  return _swift_projectBox();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_setDeallocating()
{
  return _swift_setDeallocating();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return _swift_stdlib_isStackAllocationSafe();
}

uint64_t swift_stdlib_random()
{
  return _swift_stdlib_random();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return _swift_storeEnumTagMultiPayload();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRelease_n()
{
  return _swift_unknownObjectRelease_n();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectRetain_n()
{
  return _swift_unknownObjectRetain_n();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_weakDestroy()
{
  return _swift_weakDestroy();
}

uint64_t swift_weakInit()
{
  return _swift_weakInit();
}

uint64_t swift_weakLoadStrong()
{
  return _swift_weakLoadStrong();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

uint64_t swift_willThrowTypedImpl()
{
  return _swift_willThrowTypedImpl();
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}