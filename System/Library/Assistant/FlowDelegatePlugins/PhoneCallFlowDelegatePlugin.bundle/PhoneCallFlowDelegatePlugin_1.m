void static PhoneCallNLContextProvider.makeSDAForConfirmation()()
{
  const char *v0;
  uint64_t (*v1)(void);
  uint64_t (*v2)(void);
  void (*v3)(void);
  void (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 *v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(void);
  void (*v53)(void);
  char *v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(void);
  NSObject *v58;
  os_log_type_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  uint8_t *v63;
  uint64_t v64;
  void (*v65)(void);
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(void);
  void (*v73)(void);
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  OUTLINED_FUNCTION_24_0();
  v76 = v0;
  v2 = v1;
  v4 = v3;
  v85 = type metadata accessor for PhoneError();
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v5);
  v84 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_18_0();
  v8 = __chkstk_darwin(v7);
  v81 = OUTLINED_FUNCTION_49_2(v8, v9, v10, v11, v12, v13, v14, v15, v74);
  OUTLINED_FUNCTION_0_0();
  v82 = v16;
  __chkstk_darwin(v17);
  OUTLINED_FUNCTION_3_1();
  v79 = v18;
  OUTLINED_FUNCTION_36();
  v89 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  OUTLINED_FUNCTION_0_0();
  v86 = v19;
  __chkstk_darwin(v20);
  OUTLINED_FUNCTION_5_8();
  v75 = v21;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v22);
  v78 = (char *)&v74 - v23;
  OUTLINED_FUNCTION_36();
  type metadata accessor for Siri_Nlu_External_SystemOffered();
  OUTLINED_FUNCTION_0_0();
  v87 = v25;
  v88 = v24;
  __chkstk_darwin(v24);
  v77 = (char *)&v74 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v27);
  v29 = (char *)&v74 - v28;
  type metadata accessor for Siri_Nlu_External_UserDialogAct();
  OUTLINED_FUNCTION_0_0();
  v91 = v31;
  v92 = v30;
  __chkstk_darwin(v30);
  OUTLINED_FUNCTION_46_0();
  __chkstk_darwin(v32);
  v34 = (char *)&v74 - v33;
  v35 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  v36 = OUTLINED_FUNCTION_11_0(v35);
  __chkstk_darwin(v36);
  OUTLINED_FUNCTION_4();
  v37 = type metadata accessor for Siri_Nlu_External_UserWantedToProceed();
  OUTLINED_FUNCTION_0_0();
  v90 = v38;
  __chkstk_darwin(v39);
  OUTLINED_FUNCTION_46_0();
  __chkstk_darwin(v40);
  v42 = (char *)&v74 - v41;
  v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoBuilderOptions?);
  v44 = OUTLINED_FUNCTION_11_0(v43);
  __chkstk_darwin(v44);
  OUTLINED_FUNCTION_4();
  v47 = v46 - v45;
  v4(0);
  OUTLINED_FUNCTION_21_0();
  v48 = v2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v49 = (__n128 *)OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_89_0(v49, (__n128)xmmword_46A030);
  v50 = type metadata accessor for UsoBuilderOptions();
  __swift_storeEnumTagSinglePayload(v47, 1, 1, v50);
  v80 = v48;
  swift_retain();
  v51 = static UsoGraphBuilder.buildGraphWithOptions(taskBuilders:options:)();
  swift_bridgeObjectRelease();
  outlined destroy of UUID?(v47, &demangling cache variable for type metadata for UsoBuilderOptions?);
  Siri_Nlu_External_UserWantedToProceed.init()();
  static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)();
  v79 = v51;
  Siri_Nlu_External_UserWantedToProceed.reference.setter();
  Siri_Nlu_External_UserDialogAct.init()();
  v82 = v42;
  v83 = v37;
  OUTLINED_FUNCTION_12();
  v52();
  Siri_Nlu_External_UserDialogAct.wantedToProceed.setter();
  Siri_Nlu_External_SystemOffered.init()();
  v84 = v34;
  OUTLINED_FUNCTION_12();
  v53();
  Siri_Nlu_External_SystemOffered.offeredAct.setter();
  v54 = v78;
  Siri_Nlu_External_SystemDialogAct.init()();
  v56 = v87;
  v55 = v88;
  v85 = (uint64_t)v29;
  OUTLINED_FUNCTION_12();
  v57();
  Siri_Nlu_External_SystemDialogAct.offered.setter();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  v58 = OUTLINED_FUNCTION_25_0(v81, (uint64_t)static Logger.siriPhone);
  v59 = static os_log_type_t.debug.getter();
  v60 = os_log_type_enabled(v58, v59);
  v61 = v89;
  v62 = v86;
  if (v60)
  {
    v63 = (uint8_t *)OUTLINED_FUNCTION_47();
    v93 = OUTLINED_FUNCTION_14_0();
    *(_DWORD *)v63 = 136315138;
    OUTLINED_FUNCTION_37_4();
    v64 = v75;
    OUTLINED_FUNCTION_12();
    v65();
    v66 = specialized String.init(describing:)(v64, (uint64_t (*)(void))&type metadata accessor for Siri_Nlu_External_SystemDialogAct, &lazy protocol witness table cache variable for type Siri_Nlu_External_SystemDialogAct and conformance Siri_Nlu_External_SystemDialogAct, (void (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_SystemDialogAct);
    v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v67, &v93);
    OUTLINED_FUNCTION_92(v68);
    v56 = v87;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v61 = v89;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v58, v59, v76, v63, 0xCu);
    swift_arrayDestroy();
    v55 = v88;
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }

  v70 = v91;
  v69 = v92;
  v71 = v85;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  *(_OWORD *)(OUTLINED_FUNCTION_47_2() + 16) = xmmword_467710;
  OUTLINED_FUNCTION_37_4();
  OUTLINED_FUNCTION_12();
  v72();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v71, v55);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v84, v69);
  OUTLINED_FUNCTION_11();
  v73();
  (*(void (**)(char *, uint64_t))(v62 + 8))(v54, v61);
  OUTLINED_FUNCTION_26_1();
}

uint64_t static PhoneCallNLContextProvider.makeContextForPlayingVoicemails()()
{
  return NLContextUpdate.nluSystemDialogActs.setter();
}

void static PhoneCallNLContextProvider.makeSDAForNeedsValueForContact()()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v50 = type metadata accessor for PhoneError();
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v1);
  v49[2] = (uint64_t)v49 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_18_0();
  uint64_t v4 = __chkstk_darwin(v3);
  v54 = (char *)OUTLINED_FUNCTION_49_2(v4, v5, v6, v7, v8, v9, v10, v11, v49[0]);
  OUTLINED_FUNCTION_0_0();
  v49[0] = v12;
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_53();
  uint64_t v55 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  OUTLINED_FUNCTION_0_0();
  uint64_t v15 = v14;
  __chkstk_darwin(v16);
  OUTLINED_FUNCTION_52();
  uint64_t v17 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v18 = OUTLINED_FUNCTION_11_0(v17);
  __chkstk_darwin(v18);
  OUTLINED_FUNCTION_65_0();
  type metadata accessor for Siri_Nlu_External_SystemPrompted();
  OUTLINED_FUNCTION_0_0();
  uint64_t v56 = v20;
  uint64_t v57 = v19;
  __chkstk_darwin(v19);
  OUTLINED_FUNCTION_5_8();
  uint64_t v53 = v21;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v22);
  v24 = (char *)v49 - v23;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoBuilderOptions?);
  uint64_t v26 = OUTLINED_FUNCTION_11_0(v25);
  __chkstk_darwin(v26);
  OUTLINED_FUNCTION_4();
  uint64_t v29 = v28 - v27;
  type metadata accessor for UsoTaskBuilder_call_common_PhoneCall();
  OUTLINED_FUNCTION_21_0();
  uint64_t v30 = UsoTaskBuilder_call_common_PhoneCall.init()();
  type metadata accessor for UsoEntityBuilder_common_PhoneCall();
  OUTLINED_FUNCTION_21_0();
  uint64_t v31 = UsoEntityBuilder_common_PhoneCall.init()();
  type metadata accessor for UsoEntityBuilder_common_Person();
  OUTLINED_FUNCTION_21_0();
  UsoEntityBuilder_common_Person.init()();
  dispatch thunk of UsoEntityBuilder_common_PhoneCall.addRecipients(value:)();
  uint64_t v32 = (uint64_t)v24;
  swift_release();
  uint64_t v51 = v31;
  dispatch thunk of Uso_VerbTemplateBuilder_Target.setTarget(value:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v33 = (__n128 *)OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_89_0(v33, (__n128)xmmword_46A030);
  uint64_t v34 = type metadata accessor for UsoBuilderOptions();
  __swift_storeEnumTagSinglePayload(v29, 1, 1, v34);
  uint64_t v52 = v30;
  swift_retain();
  static UsoGraphBuilder.buildGraphWithOptions(taskBuilders:options:)();
  swift_bridgeObjectRelease();
  outlined destroy of UUID?(v29, &demangling cache variable for type metadata for UsoBuilderOptions?);
  Siri_Nlu_External_SystemPrompted.init()();
  static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)();
  Siri_Nlu_External_SystemPrompted.target.setter();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  v35 = OUTLINED_FUNCTION_25_0((uint64_t)v54, (uint64_t)static Logger.siriPhone);
  os_log_type_t v36 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v50 = v0;
    uint64_t v37 = OUTLINED_FUNCTION_47();
    v54 = v24;
    v38 = (uint8_t *)v37;
    uint64_t v58 = OUTLINED_FUNCTION_14_0();
    *(_DWORD *)v38 = 136315138;
    OUTLINED_FUNCTION_37_4();
    uint64_t v39 = v53;
    OUTLINED_FUNCTION_12();
    v40();
    uint64_t v41 = specialized String.init(describing:)(v39, (uint64_t (*)(void))&type metadata accessor for Siri_Nlu_External_SystemPrompted, &lazy protocol witness table cache variable for type Siri_Nlu_External_SystemPrompted and conformance Siri_Nlu_External_SystemPrompted, (void (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_SystemPrompted);
    uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v58);
    OUTLINED_FUNCTION_92(v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v0 = v50;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v35, v36, "#PhoneCallNLContextProvider Returning NLUSystemPrompted for prompt for start call: %s", v38, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    uint64_t v32 = (uint64_t)v54;
    OUTLINED_FUNCTION_6();
  }

  Siri_Nlu_External_SystemDialogAct.init()();
  OUTLINED_FUNCTION_37_4();
  uint64_t v45 = v56;
  uint64_t v44 = v57;
  OUTLINED_FUNCTION_12();
  v46();
  Siri_Nlu_External_SystemDialogAct.prompted.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  uint64_t v47 = v32;
  uint64_t v48 = OUTLINED_FUNCTION_47_2();
  *(_OWORD *)(v48 + 16) = xmmword_467710;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v48 + v0, v0, v55);
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v47, v44);
  OUTLINED_FUNCTION_26_1();
}

uint64_t static PhoneCallNLContextProvider.buildSingleVoiceMailFollowUpOfferContext()()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_25_0(v1, (uint64_t)static Logger.siriPhone);
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_14_2(v3))
  {
    *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
    OUTLINED_FUNCTION_24_1(&dword_0, v4, v5, "#PhoneCallNLContextProvider buildSingleVoiceMailFollowUpOfferContext");
    OUTLINED_FUNCTION_6();
  }

  NLContextUpdate.init()();
  PhoneCallNLConstants.canonicalName.getter(1);
  NLContextUpdate.weightedPromptTargetDomain.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_46A250;
  String.uppercased()();
  OUTLINED_FUNCTION_85_0();
  unint64_t v7 = lazy protocol witness table accessor for type String and conformance String();
  OUTLINED_FUNCTION_17_4(v7, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&type metadata for String, v7, v7, v7, 95, v0, v22);
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  unint64_t v23 = PhoneCallNLConstants.canonicalName.getter(14);
  uint64_t v26 = v15;
  OUTLINED_FUNCTION_5_13();
  Swift::String v16 = String.uppercased()();
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v6 + 32) = v23;
  *(void *)(v6 + 40) = v26;
  String.uppercased()();
  OUTLINED_FUNCTION_14_9();
  swift_bridgeObjectRelease();
  unint64_t v24 = PhoneCallNLConstants.canonicalName.getter(15);
  uint64_t v27 = v17;
  OUTLINED_FUNCTION_5_13();
  Swift::String v18 = String.uppercased()();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v6 + 48) = v24;
  *(void *)(v6 + 56) = v27;
  OUTLINED_FUNCTION_54_0();
  OUTLINED_FUNCTION_14_9();
  swift_bridgeObjectRelease();
  unint64_t v25 = PhoneCallNLConstants.canonicalName.getter(6);
  uint64_t v28 = v19;
  OUTLINED_FUNCTION_5_13();
  Swift::String v20 = String.uppercased()();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v6 + 64) = v25;
  *(void *)(v6 + 72) = v28;
  NLContextUpdate.weightedPromptResponseOptions.setter();
  return NLContextUpdate.weightedPromptStrict.setter();
}

uint64_t static PhoneCallNLContextProvider.buildSingleGroupFaceTimeInviteFollowUpOfferContext()()
{
  NLContextUpdate.init()();
  PhoneCallNLConstants.canonicalName.getter(1);
  NLContextUpdate.weightedPromptTargetDomain.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v0 = OUTLINED_FUNCTION_60_1();
  *(_OWORD *)(v0 + 16) = xmmword_467720;
  *(void *)(v0 + 32) = PhoneCallNLConstants.canonicalName.getter(6);
  *(void *)(v0 + 40) = v1;
  *(void *)(v0 + 48) = PhoneCallNLConstants.canonicalName.getter(15);
  *(void *)(v0 + 56) = v2;
  OUTLINED_FUNCTION_75_0();
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_46A250;
  OUTLINED_FUNCTION_64();
  lazy protocol witness table accessor for type String and conformance String();
  OUTLINED_FUNCTION_8_6();
  OUTLINED_FUNCTION_44_3();
  unint64_t v11 = PhoneCallNLConstants.canonicalName.getter(6);
  uint64_t v14 = v4;
  OUTLINED_FUNCTION_5_13();
  Swift::String v5 = String.uppercased()();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v3 + 32) = v11;
  *(void *)(v3 + 40) = v14;
  OUTLINED_FUNCTION_54_0();
  OUTLINED_FUNCTION_8_6();
  OUTLINED_FUNCTION_44_3();
  unint64_t v12 = PhoneCallNLConstants.canonicalName.getter(6);
  uint64_t v15 = v6;
  OUTLINED_FUNCTION_5_13();
  Swift::String v7 = String.uppercased()();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v3 + 48) = v12;
  *(void *)(v3 + 56) = v15;
  String.uppercased()();
  OUTLINED_FUNCTION_8_6();
  swift_bridgeObjectRelease();
  unint64_t v13 = PhoneCallNLConstants.canonicalName.getter(15);
  uint64_t v16 = v8;
  OUTLINED_FUNCTION_5_13();
  Swift::String v9 = String.uppercased()();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v3 + 64) = v13;
  *(void *)(v3 + 72) = v16;
  NLContextUpdate.weightedPromptResponseOptions.setter();
  static PhoneCallNLContextProvider.makeSDAForConfirmation()();
  return NLContextUpdate.nluSystemDialogActs.setter();
}

void static PhoneCallNLContextProvider.makeNLContextUpdateForDisambiguation(apps:device:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  unint64_t v5 = v4;
  uint64_t v53 = v6;
  uint64_t v7 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  OUTLINED_FUNCTION_0_0();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_5_8();
  v49[0] = v11;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v12);
  v59 = (char *)v49 - v13;
  OUTLINED_FUNCTION_36();
  type metadata accessor for Siri_Nlu_External_SystemGaveOptions();
  OUTLINED_FUNCTION_0_0();
  uint64_t v55 = v15;
  uint64_t v56 = v14;
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_46_0();
  __chkstk_darwin(v16);
  v54 = (char *)v49 - v17;
  OUTLINED_FUNCTION_36();
  type metadata accessor for NLContextUpdate();
  OUTLINED_FUNCTION_0_0();
  uint64_t v51 = v19;
  uint64_t v52 = v18;
  __chkstk_darwin(v18);
  OUTLINED_FUNCTION_8_7();
  type metadata accessor for AppInfoBuilder();
  swift_initStackObject();
  unint64_t v57 = v5;
  uint64_t v58 = v3;
  specialized static PhoneContactDisplayHintFactory.build(for:deviceState:appInfoBuilder:)();
  v49[1] = v20;
  NLContextUpdate.init()();
  PhoneCallNLConstants.canonicalName.getter(1);
  NLContextUpdate.weightedPromptTargetDomain.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_46A250;
  if (one-time initialization token for appName != -1) {
    swift_once();
  }
  *(void *)(v21 + 32) = TerminalOntologyNode.name.getter();
  *(void *)(v21 + 40) = v22;
  if (one-time initialization token for reference != -1) {
    swift_once();
  }
  *(void *)(v21 + 48) = TerminalOntologyNode.name.getter();
  *(void *)(v21 + 56) = v23;
  if (one-time initialization token for confirmation != -1) {
    swift_once();
  }
  *(void *)(v21 + 64) = TerminalOntologyNode.name.getter();
  *(void *)(v21 + 72) = v24;
  NLContextUpdate.weightedPromptResponseTargets.setter();
  uint64_t v25 = OUTLINED_FUNCTION_65();
  long long v50 = xmmword_467710;
  *(_OWORD *)(v25 + 16) = xmmword_467710;
  unint64_t v62 = OUTLINED_FUNCTION_54_0();
  uint64_t v63 = v26;
  uint64_t v60 = 32;
  unint64_t v61 = 0xE100000000000000;
  uint64_t v64 = 95;
  unint64_t v65 = 0xE100000000000000;
  uint64_t v47 = (void *)lazy protocol witness table accessor for type String and conformance String();
  uint64_t v48 = v47;
  *(void *)&long long v46 = &type metadata for String;
  *((void *)&v46 + 1) = v47;
  OUTLINED_FUNCTION_30_6();
  os_log_type_t v28 = v27;
  swift_bridgeObjectRelease();
  unint64_t v62 = PhoneCallNLConstants.canonicalName.getter(6);
  uint64_t v63 = v29;
  OUTLINED_FUNCTION_5_13();
  Swift::String v30 = String.uppercased()();
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v31 = v63;
  *(void *)(v25 + 32) = v62;
  *(void *)(v25 + 40) = v31;
  NLContextUpdate.weightedPromptResponseOptions.setter();
  NLContextUpdate.weightedPromptStrict.setter();
  uint64_t v32 = NLContextUpdate.displayHints.setter();
  __chkstk_darwin(v32);
  long long v46 = *(_OWORD *)((char *)v1 + class metadata base offset for PhoneCallNLContextProvider);
  uint64_t v47 = v58;
  uint64_t v48 = v1;
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay17SiriAppResolution0E0CG_0D8NLUTypes0D27_Nlu_External_UserDialogActVs5NeverOTg5((void (*)(uint64_t *))partial apply for closure #1 in static PhoneCallNLContextProvider.makeNLContextUpdateForDisambiguation(apps:device:), (uint64_t)&v49[-6], v57);
  Siri_Nlu_External_SystemGaveOptions.init()();
  Siri_Nlu_External_SystemGaveOptions.choices.setter();
  v33 = v59;
  Siri_Nlu_External_SystemDialogAct.init()();
  OUTLINED_FUNCTION_12();
  v34();
  Siri_Nlu_External_SystemDialogAct.gaveOptions.setter();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v35 = type metadata accessor for Logger();
  os_log_type_t v36 = OUTLINED_FUNCTION_25_0(v35, (uint64_t)static Logger.siriPhone);
  os_log_type_t v37 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_63_0(v37))
  {
    v38 = (uint8_t *)OUTLINED_FUNCTION_47();
    unint64_t v62 = OUTLINED_FUNCTION_14_0();
    *(_DWORD *)v38 = 136315138;
    OUTLINED_FUNCTION_37_4();
    uint64_t v39 = v49[0];
    OUTLINED_FUNCTION_12();
    v40();
    uint64_t v41 = specialized String.init(describing:)(v39, (uint64_t (*)(void))&type metadata accessor for Siri_Nlu_External_SystemDialogAct, &lazy protocol witness table cache variable for type Siri_Nlu_External_SystemDialogAct and conformance Siri_Nlu_External_SystemDialogAct, (void (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_SystemDialogAct);
    uint64_t v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, (uint64_t *)&v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v36, v28, "#PhoneCallNLContextProvider makeNLContextUpdateForDisambiguation: sending disambiguation system dialog acts: %s", v38, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    v33 = v59;
    OUTLINED_FUNCTION_6();
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  *(_OWORD *)(OUTLINED_FUNCTION_47_2() + 16) = v50;
  OUTLINED_FUNCTION_37_4();
  OUTLINED_FUNCTION_12();
  v43();
  NLContextUpdate.nluSystemDialogActs.setter();
  static PhoneReferenceResolution.appsToRrEntities(apps:device:)(v57, v58);
  NLContextUpdate.rrEntities.setter();
  OUTLINED_FUNCTION_11();
  v44();
  OUTLINED_FUNCTION_70();
  v45();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v33, v7);
  OUTLINED_FUNCTION_26_1();
}

uint64_t closure #1 in static PhoneCallNLContextProvider.makeNLContextUpdateForDisambiguation(apps:device:)@<X0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v49 = a2;
  uint64_t v51 = a3;
  uint64_t v45 = type metadata accessor for PhoneError();
  uint64_t v4 = __chkstk_darwin(v45);
  uint64_t v44 = (uint64_t *)((char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  uint64_t v43 = (char *)&v39 - v6;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v41 = *(void *)(v7 - 8);
  uint64_t v42 = v7;
  __chkstk_darwin(v7);
  v40 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Locale();
  uint64_t v47 = *(void *)(v9 - 8);
  uint64_t v48 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  __chkstk_darwin(v12 - 8);
  uint64_t v46 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  uint64_t v13 = *(void *)(v46 - 8);
  uint64_t v14 = __chkstk_darwin(v46);
  uint64_t v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v39 - v17;
  Siri_Nlu_External_UserStatedTask.init()();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of DeviceState.siriLocale.getter();
  uint64_t v19 = v50;
  static PhoneCallNLContextProvider.createUsoGraph(for:locale:)();
  if (v19)
  {
    uint64_t v23 = v41;
    uint64_t v22 = v42;
    uint64_t v24 = (uint64_t)v43;
    uint64_t v25 = v44;
    uint64_t v26 = v40;
    (*(void (**)(char *, uint64_t))(v47 + 8))(v11, v48);
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v27 = __swift_project_value_buffer(v22, (uint64_t)static Logger.siriPhone);
    (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v26, v27, v22);
    uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIRINLUUserWantedToProceed.Type);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIRINLUUserWantedToProceed.Type.Type);
    uint64_t v28 = String.init<A>(describing:)();
    uint64_t v30 = v29;
    swift_getErrorValue();
    uint64_t v31 = Error.localizedDescription.getter();
    *uint64_t v25 = v28;
    v25[1] = v30;
    v25[2] = v31;
    v25[3] = v32;
    swift_storeEnumTagMultiPayload();
    PhoneError.logged()(v24);
    outlined destroy of PhoneError((uint64_t)v25);
    lazy protocol witness table accessor for type RREntity and conformance RREntity((unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError, (void (*)(uint64_t))type metadata accessor for PhoneError);
    uint64_t v33 = Error.localizedDescription.getter();
    unint64_t v35 = v34;
    outlined destroy of PhoneError(v24);
    swift_bridgeObjectRetain_n();
    os_log_type_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc();
      uint64_t v53 = swift_slowAlloc();
      *(_DWORD *)v38 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v52 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v35, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_0, v36, v37, "%s", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    static SiriKitLifecycle._logCrashToEventBus(_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v11, v48);
    Siri_Nlu_External_UserStatedTask.task.setter();
    Siri_Nlu_External_UserDialogAct.init()();
    uint64_t v20 = v46;
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v18, v46);
    Siri_Nlu_External_UserDialogAct.userStatedTask.setter();
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v18, v20);
  }
  return result;
}

uint64_t static PhoneCallNLContextProvider.createUsoGraph(for:locale:)()
{
  return swift_release();
}

void PhoneCallNLContextProvider.__allocating_init()()
{
}

void PhoneCallNLContextProvider.init()()
{
}

uint64_t PhoneCallNLContextProvider.__ivar_destroyer()
{
  OUTLINED_FUNCTION_2();
  __swift_destroy_boxed_opaque_existential_1(v0 + *(void *)(class metadata base offset for PhoneCallNLContextProvider
                                                            + v1
                                                            + 16));
  OUTLINED_FUNCTION_2();
  uint64_t v3 = v0 + *(void *)(class metadata base offset for PhoneCallNLContextProvider + v2 + 24);

  return __swift_destroy_boxed_opaque_existential_1(v3);
}

void *PhoneCallNLContextProvider.deinit()
{
  uint64_t v0 = (void *)DefaultNLContextProvider.deinit();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v0 + *(void *)(class metadata base offset for PhoneCallNLContextProvider
                                                                     + *v0
                                                                     + 16));
  OUTLINED_FUNCTION_26_6();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v0 + *(void *)(class metadata base offset for PhoneCallNLContextProvider
                                                                     + v1
                                                                     + 24));
  return v0;
}

uint64_t PhoneCallNLContextProvider.__deallocating_deinit()
{
  PhoneCallNLContextProvider.deinit();

  return swift_deallocClassInstance();
}

void specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
}

{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

{
  uint64_t *v0;
  uint64_t v1;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v3;

  OUTLINED_FUNCTION_67();
  uint64_t v1 = *v0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v0 = v1;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    *uint64_t v0 = v3;
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v3;

  uint64_t v1 = *v0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v0 = v1;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    *uint64_t v0 = v3;
  }
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;

  uint64_t v1 = *v0;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v0 = v1;
  if (!result)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v1 + 16) + 1, 1, v1, &demangling cache variable for type metadata for _ContiguousArrayStorage<Result<TemplatingResult, Error>>, &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
    *uint64_t v0 = result;
  }
  return result;
}

{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(&demangling cache variable for type metadata for _ContiguousArrayStorage<DisplayHint>, (uint64_t (*)(void))&type metadata accessor for DisplayHint, (void (*)(void))&type metadata accessor for DisplayHint);
}

{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_UserDialogAct>, (uint64_t (*)(void))&type metadata accessor for Siri_Nlu_External_UserDialogAct, (void (*)(void))&type metadata accessor for Siri_Nlu_External_UserDialogAct);
}

{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(uint64_t *a1, uint64_t (*a2)(void), void (*a3)(void))
{
  uint64_t v7 = *v3;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v3 = v7;
  if (!result)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1, v7, a1, a2, a3);
    *uint64_t v3 = result;
  }
  return result;
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v3;
  if (!result)
  {
    uint64_t result = a1(result, *(void *)(v3 + 16) + 1, 1, v3);
    *uint64_t v1 = result;
  }
  return result;
}

void specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  char v5;
  char v6;

  OUTLINED_FUNCTION_21_6();
  if (!(v5 ^ v6 | v4)) {
    *uint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v1, 1, v2, &demangling cache variable for type metadata for _ContiguousArrayStorage<Result<TemplatingResult, Error>>, &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  }
}

{
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

{
  void *v0;
  unint64_t v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;

  OUTLINED_FUNCTION_21_6();
  if (!(v3 ^ v4 | v2))
  {
    OUTLINED_FUNCTION_80(v1);
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    *uint64_t v0 = v5;
  }
}

{
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

{
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

{
  uint64_t *v0;
  unint64_t v1;
  char v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t (*v10)(void);
  void (*v11)(void);

  OUTLINED_FUNCTION_21_6();
  if (!(v3 ^ v4 | v2))
  {
    uint64_t v5 = OUTLINED_FUNCTION_80(v1);
    *uint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v6, v7, v8, v9, v10, v11);
  }
}

{
  void *v0;
  char v1;
  char v2;
  char v3;
  uint64_t v4;

  OUTLINED_FUNCTION_21_6();
  if (!(v2 ^ v3 | v1))
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    *uint64_t v0 = v4;
  }
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t a1)
{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result)
{
  if (result + 1 > *(void *)((char *)&dword_18 + (*v1 & 0xFFFFFFFFFFFFFF8)) >> 1) {
    return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  return result;
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result, uint64_t (*a2)(BOOL))
{
  unint64_t v3 = *(void *)(*(void *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    uint64_t result = a2(v3 > 1);
    *(void *)uint64_t v2 = result;
  }
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), void (*a7)(void))
{
  if (a3)
  {
    OUTLINED_FUNCTION_8_17();
    if (v12 != v13)
    {
      OUTLINED_FUNCTION_23_4();
      if (v12)
      {
        __break(1u);
        goto LABEL_23;
      }
      OUTLINED_FUNCTION_7_16();
    }
  }
  else
  {
    uint64_t v11 = a2;
  }
  uint64_t v14 = *(void *)(a4 + 16);
  if (v11 <= v14) {
    uint64_t v15 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v15 = v11;
  }
  if (!v15)
  {
    uint64_t v21 = &_swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v16 = a6(0);
  OUTLINED_FUNCTION_19_0(v16);
  uint64_t v18 = *(void *)(v17 + 72);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (void *)swift_allocObject();
  size_t v22 = _swift_stdlib_malloc_size(v21);
  if (!v18 || (v22 - v20 == 0x8000000000000000 ? (BOOL v23 = v18 == -1) : (BOOL v23 = 0), v23))
  {
LABEL_23:
    OUTLINED_FUNCTION_1_18();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v21[2] = v14;
  v21[3] = 2 * ((uint64_t)(v22 - v20) / v18);
LABEL_18:
  a6(0);
  OUTLINED_FUNCTION_55_1();
  if (a1)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a4 + v24, v14);
    OUTLINED_FUNCTION_27_5();
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v14, (unint64_t)v21 + v24, a4, a7);
  }
  return (uint64_t)v21;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    uint64_t v6 = &__dst[8 * v4];
    if (v5 >= v6 || &v5[8 * v4] <= __dst)
    {
      memcpy(__dst, v5, 8 * v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + a1 + 32);
    uint64_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if ((v4 & 0x8000000000000000) != 0)
  {
LABEL_9:
    OUTLINED_FUNCTION_1_18();
    OUTLINED_FUNCTION_40_3();
    goto LABEL_11;
  }
  uint64_t v5 = (char *)(a4 + a1 + 32);
  uint64_t v6 = &__dst[v4];
  if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
  {
    memcpy(__dst, v5, v4);
    swift_bridgeObjectRelease();
    return v6;
  }
  OUTLINED_FUNCTION_1_18();
  OUTLINED_FUNCTION_39_2();
LABEL_11:
  uint64_t result = (char *)OUTLINED_FUNCTION_9_2();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void (*a5)(void))
{
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (a2 - a1 < 0)
  {
LABEL_9:
    OUTLINED_FUNCTION_1_18();
    OUTLINED_FUNCTION_40_3();
    goto LABEL_11;
  }
  a5(0);
  OUTLINED_FUNCTION_19_9();
  OUTLINED_FUNCTION_59_1();
  if (v8) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = v7 > a3;
  }
  if (!v9)
  {
    swift_arrayInitWithCopy();
    swift_bridgeObjectRelease();
    return a1;
  }
  OUTLINED_FUNCTION_1_18();
  OUTLINED_FUNCTION_39_2();
LABEL_11:
  uint64_t result = OUTLINED_FUNCTION_9_2();
  __break(1u);
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_1_18();
    uint64_t result = (char *)OUTLINED_FUNCTION_4_16();
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_3_19(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_1_18();
    uint64_t result = (char *)OUTLINED_FUNCTION_4_16();
    __break(1u);
  }
  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_3_19(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_1_18();
    uint64_t result = (char *)OUTLINED_FUNCTION_4_16();
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_3_19(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_1_18();
    uint64_t result = (char *)OUTLINED_FUNCTION_4_16();
    __break(1u);
  }
  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_3_19(a3, result);
  }
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[16 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

{
  uint64_t v3;

  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[48 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 48 * a2);
  }
  return __src;
}

{
  uint64_t v3;

  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[8 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 8 * a2);
  }
  return __src;
}

void specialized UnsafeMutablePointer.moveInitialize(from:count:)(uint64_t a1, uint64_t a2)
{
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_1_18();
    char v8 = OUTLINED_FUNCTION_4_16();
    __break(1u);
_swift_arrayInitWithTakeBackToFront:
    _swift_arrayInitWithTakeBackToFront(v8);
    return;
  }
  OUTLINED_FUNCTION_69_0();
  if (v6
    && (__swift_instantiateConcreteTypeFromMangledName(v5), OUTLINED_FUNCTION_15(), v3 + *(void *)(v7 + 72) * v2 > v4))
  {
    if (v4 != v3)
    {
      char v8 = OUTLINED_FUNCTION_20_8();
      goto _swift_arrayInitWithTakeBackToFront;
    }
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(v5);
    BOOL v9 = OUTLINED_FUNCTION_20_8();
    _swift_arrayInitWithTakeFrontToBack(v9);
  }
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void (*v5)(void);
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_1_18();
    char v8 = OUTLINED_FUNCTION_4_16();
    __break(1u);
_swift_arrayInitWithTakeBackToFront:
    _swift_arrayInitWithTakeBackToFront(v8);
    return;
  }
  OUTLINED_FUNCTION_69_0();
  if (v6 && (v5(0), OUTLINED_FUNCTION_15(), v3 + *(void *)(v7 + 72) * v2 > v4))
  {
    if (v4 != v3)
    {
      char v8 = OUTLINED_FUNCTION_20_8();
      goto _swift_arrayInitWithTakeBackToFront;
    }
  }
  else
  {
    v5(0);
    BOOL v9 = OUTLINED_FUNCTION_20_8();
    _swift_arrayInitWithTakeFrontToBack(v9);
  }
}

uint64_t sub_93B90()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for closure #1 in PhoneCallNLContextProvider.makeNeedsDisambiguationContextFor(intent:parameter:resolutionResult:_:)(uint64_t a1)
{
  return closure #1 in PhoneCallNLContextProvider.makeNeedsDisambiguationContextFor(intent:parameter:resolutionResult:_:)(a1, *(void (**)(char *))(v1 + 16));
}

uint64_t sub_93BD0()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t partial apply for closure #1 in PhoneCallNLContextProvider.makeNeedsDisambiguationContextFor(parameter:items:completion:)(uint64_t a1)
{
  return closure #1 in PhoneCallNLContextProvider.makeNeedsDisambiguationContextFor(parameter:items:completion:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void (**)(char *))(v1 + 40));
}

uint64_t outlined destroy of PhoneContactDisplayHintFactory(uint64_t a1)
{
  return a1;
}

uint64_t specialized String.init(describing:)(uint64_t a1)
{
  return specialized String.init(describing:)(a1, (uint64_t (*)(void))&type metadata accessor for Siri_Nlu_External_UserDialogAct, (unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_UserDialogAct and conformance Siri_Nlu_External_UserDialogAct, (void (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_UserDialogAct);
}

{
  return specialized String.init(describing:)(a1, (uint64_t (*)(void))&type metadata accessor for Siri_Nlu_External_SystemPrompted, &lazy protocol witness table cache variable for type Siri_Nlu_External_SystemPrompted and conformance Siri_Nlu_External_SystemPrompted, (void (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_SystemPrompted);
}

{
  return specialized String.init(describing:)(a1, (uint64_t (*)(void))&type metadata accessor for Siri_Nlu_External_SystemDialogAct, &lazy protocol witness table cache variable for type Siri_Nlu_External_SystemDialogAct and conformance Siri_Nlu_External_SystemDialogAct, (void (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_SystemDialogAct);
}

uint64_t specialized String.init(describing:)(uint64_t a1, uint64_t (*a2)(void), unint64_t *a3, void (*a4)(uint64_t))
{
  v9[3] = a2(0);
  v9[4] = lazy protocol witness table accessor for type RREntity and conformance RREntity(a3, a4);
  __swift_allocate_boxed_opaque_existential_1(v9);
  OUTLINED_FUNCTION_70();
  v6();
  type metadata accessor for SiriNLUTypesPrintUtils();
  static SiriNLUTypesPrintUtils.printableProtoObject(object:)();
  uint64_t v7 = String.init<A>(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  return v7;
}

void specialized static PhoneContactDisplayHintFactory.build(for:deviceState:appInfoBuilder:)()
{
  OUTLINED_FUNCTION_24_0();
  v86 = v3;
  unint64_t v5 = v4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SemanticValue?);
  uint64_t v7 = OUTLINED_FUNCTION_11_0(v6);
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_3_1();
  uint64_t v73 = v8;
  OUTLINED_FUNCTION_36();
  uint64_t v74 = type metadata accessor for DisplayHint();
  OUTLINED_FUNCTION_0_0();
  uint64_t v76 = v9;
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_3_1();
  uint64_t v84 = v11;
  OUTLINED_FUNCTION_36();
  uint64_t v87 = type metadata accessor for SemanticValue();
  OUTLINED_FUNCTION_0_0();
  uint64_t v75 = v12;
  __chkstk_darwin(v13);
  v72 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v15);
  v83 = (char *)&v65 - v16;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v17);
  v88 = (char *)&v65 - v18;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v19);
  OUTLINED_FUNCTION_74_0();
  uint64_t v81 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_0_0();
  uint64_t v21 = v20;
  __chkstk_darwin(v22);
  OUTLINED_FUNCTION_3_1();
  uint64_t v80 = v23;
  OUTLINED_FUNCTION_36();
  uint64_t v24 = type metadata accessor for OrdinalDisplayHintsBuilder();
  OUTLINED_FUNCTION_0_0();
  uint64_t v26 = v25;
  __chkstk_darwin(v27);
  OUTLINED_FUNCTION_53();
  v92 = _swiftEmptyArrayStorage;
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
    if (v28) {
      goto LABEL_3;
    }
LABEL_31:
    swift_bridgeObjectRelease();
    v89 = _swiftEmptyArrayStorage;
    goto LABEL_32;
  }
  uint64_t v28 = *(void *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  if (!v28) {
    goto LABEL_31;
  }
LABEL_3:
  if (v28 < 1)
  {
    __break(1u);
    return;
  }
  uint64_t v66 = v0;
  uint64_t v67 = v26;
  uint64_t v68 = v24;
  uint64_t v29 = 0;
  unint64_t v85 = v5 & 0xC000000000000001;
  uint64_t v78 = v21 + 8;
  v82 = (void (**)(void))(v75 + 16);
  uint64_t v71 = v75 + 32;
  uint64_t v70 = v76 + 32;
  v69 = (void (**)(void))(v75 + 8);
  v89 = _swiftEmptyArrayStorage;
  unint64_t v77 = v5;
  uint64_t v79 = v28;
  do
  {
    if (v85)
    {
      uint64_t v30 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v30 = *(void *)(v5 + 8 * v29 + 32);
      swift_retain();
    }
    swift_retain();
    if (App.isFirstParty()())
    {
      static UserFacingCallingAppUtils.getCommAppForLaunch(originalApp:preferredCallProvider:deviceState:)(v30, 0, v86);
      swift_release();
    }
    uint64_t v31 = App.appIdentifier.getter();
    if (v32)
    {
      unint64_t v2 = v31;
      __swift_project_boxed_opaque_existential_1(v86, v86[3]);
      dispatch thunk of DeviceState.siriLocale.getter();
      type metadata accessor for AppInfoBuilder();
      swift_initStackObject();
      AppInfoBuilder.getAppName(_:requestedLocale:)();
      uint64_t v34 = v33;
      OUTLINED_FUNCTION_11();
      v35();
      if (v34)
      {
        if (one-time initialization token for applicationId != -1) {
          swift_once();
        }
        TerminalOntologyNode.name.getter();
        SemanticValue.init(string:label:)();
        if (one-time initialization token for appName != -1) {
          swift_once();
        }
        TerminalOntologyNode.name.getter();
        SemanticValue.init(string:label:)();
        os_log_type_t v36 = *v82;
        OUTLINED_FUNCTION_12();
        v36();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v89 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v89[2] + 1, 1, (uint64_t)v89, &demangling cache variable for type metadata for _ContiguousArrayStorage<SemanticValue>, (uint64_t (*)(void))&type metadata accessor for SemanticValue, (void (*)(void))&type metadata accessor for SemanticValue);
        }
        unint64_t v5 = v77;
        unint64_t v38 = v89[2];
        unint64_t v37 = v89[3];
        if (v38 >= v37 >> 1)
        {
          char v47 = OUTLINED_FUNCTION_71(v37);
          v89 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v47, v38 + 1, 1, (uint64_t)v89, &demangling cache variable for type metadata for _ContiguousArrayStorage<SemanticValue>, (uint64_t (*)(void))&type metadata accessor for SemanticValue, (void (*)(void))&type metadata accessor for SemanticValue);
        }
        v89[2] = v38 + 1;
        OUTLINED_FUNCTION_55_1();
        uint64_t v39 = v87;
        OUTLINED_FUNCTION_70();
        v40();
        uint64_t v41 = v73;
        unint64_t v2 = (unint64_t)v82;
        ((void (*)(uint64_t, uint64_t, uint64_t))v36)(v73, v1, v39);
        __swift_storeEnumTagSinglePayload(v41, 0, 1, v39);
        ((void (*)(char *, char *, uint64_t))v36)(v72, v88, v39);
        DisplayHint.init(idValue:displayValue:)();
        uint64_t v42 = (uint64_t)v92;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_72_0();
          uint64_t v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v48, v49, v50, v51, &demangling cache variable for type metadata for _ContiguousArrayStorage<DisplayHint>, v52, v53);
        }
        unint64_t v44 = *(void *)(v42 + 16);
        unint64_t v43 = *(void *)(v42 + 24);
        if (v44 >= v43 >> 1)
        {
          OUTLINED_FUNCTION_71(v43);
          OUTLINED_FUNCTION_72_0();
          uint64_t v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v54, v55, v56, v57, &demangling cache variable for type metadata for _ContiguousArrayStorage<DisplayHint>, v58, v59);
        }
        *(void *)(v42 + 16) = v44 + 1;
        OUTLINED_FUNCTION_55_1();
        OUTLINED_FUNCTION_70();
        v45();
        swift_release();
        swift_release();
        v92 = (void *)v42;
        uint64_t v46 = *v69;
        OUTLINED_FUNCTION_36_5();
        v46();
        OUTLINED_FUNCTION_36_5();
        v46();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        unint64_t v5 = v77;
      }
      uint64_t v28 = v79;
    }
    else
    {
      swift_release();
      swift_release();
    }
    ++v29;
  }
  while (v28 != v29);
  swift_bridgeObjectRelease();
  uint64_t v24 = v68;
  uint64_t v26 = v67;
  uint64_t v0 = v66;
LABEL_32:
  if (one-time initialization token for reference != -1) {
    swift_once();
  }
  TerminalOntologyNode.name.getter();
  OrdinalDisplayHintsBuilder.init(referenceNode:)();
  uint64_t v60 = OrdinalDisplayHintsBuilder.build(for:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v0, v24);
  specialized Array.append<A>(contentsOf:)(v60);
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v61 = type metadata accessor for Logger();
  unint64_t v62 = OUTLINED_FUNCTION_25_0(v61, (uint64_t)static Logger.siriPhone);
  os_log_type_t v63 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v62, v63))
  {
    uint64_t v64 = (uint8_t *)OUTLINED_FUNCTION_47();
    uint64_t v91 = OUTLINED_FUNCTION_14_0();
    *(_DWORD *)uint64_t v64 = 136315138;
    OUTLINED_FUNCTION_37_4();
    swift_bridgeObjectRetain();
    Array.description.getter();
    OUTLINED_FUNCTION_44_3();
    uint64_t v90 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v1, v2, &v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v62, v63, "Built display hints for app disambiguation: %s'", v64, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }

  OUTLINED_FUNCTION_37_4();
  OUTLINED_FUNCTION_26_1();
}

uint64_t partial apply for closure #1 in static PhoneCallNLContextProvider.makeNLContextUpdateForDisambiguation(apps:device:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in static PhoneCallNLContextProvider.makeNLContextUpdateForDisambiguation(apps:device:)(*(void **)(v1 + 32), *(void *)(v1 + 40), a1);
}

uint64_t type metadata completion function for PhoneCallNLContextProvider()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for PhoneCallNLContextProvider()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t type metadata accessor for INPerson()
{
  unint64_t result = lazy cache variable for type metadata for INPerson;
  if (!lazy cache variable for type metadata for INPerson)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for INPerson);
  }
  return result;
}

void *OUTLINED_FUNCTION_3_19@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  return memmove(__dst, a2, v2);
}

uint64_t OUTLINED_FUNCTION_4_16()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_14_9()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

char *OUTLINED_FUNCTION_17_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  return &a15;
}

uint64_t OUTLINED_FUNCTION_20_8()
{
  return v0;
}

void OUTLINED_FUNCTION_22_4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t OUTLINED_FUNCTION_30_6()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t OUTLINED_FUNCTION_37_4()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_43_4()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_44_3()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_47_2()
{
  return swift_allocObject();
}

BOOL OUTLINED_FUNCTION_48_2(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_49_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 264) = (char *)&a9 - v9;
  return type metadata accessor for Logger();
}

uint64_t OUTLINED_FUNCTION_50_0()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_51_0(uint64_t a1)
{
  *(void *)(v1 - 176) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_52_0()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t OUTLINED_FUNCTION_54_0()
{
  return String.uppercased()()._countAndFlagsBits;
}

uint64_t OUTLINED_FUNCTION_56_1(uint64_t a1)
{
  __swift_storeEnumTagSinglePayload(v1, 0, 1, a1);
  return v1;
}

uint64_t OUTLINED_FUNCTION_58_1(uint64_t result)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = 2 * ((result - 32) / 16);
  return result;
}

uint64_t OUTLINED_FUNCTION_60_1()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_61_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_62_2()
{
  return swift_getErrorValue();
}

BOOL OUTLINED_FUNCTION_63_0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

BOOL OUTLINED_FUNCTION_71@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t OUTLINED_FUNCTION_73()
{
  return v0 + 32;
}

uint64_t OUTLINED_FUNCTION_74_0()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_75_0()
{
  return NLContextUpdate.weightedPromptResponseTargets.setter();
}

uint64_t OUTLINED_FUNCTION_76()
{
  return swift_allocObject();
}

BOOL OUTLINED_FUNCTION_80@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

_WORD *OUTLINED_FUNCTION_81(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

void OUTLINED_FUNCTION_82(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_88_0()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_89_0(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[2].n128_u64[0] = v2;
  *(void *)(v3 - 152) = a1;
  return specialized Array._endMutation()();
}

uint64_t OUTLINED_FUNCTION_91_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_92(uint64_t a1)
{
  *(void *)(v1 - 184) = a1;
  return v1 - 184;
}

uint64_t one-time initialization function for faceTimeUsoApp()
{
  uint64_t result = closure #1 in variable initialization expression of static AddOrCallPromptForValueStrategy.faceTimeUsoApp();
  static AddOrCallPromptForValueStrategy.faceTimeUsoApp = result;
  return result;
}

uint64_t closure #1 in variable initialization expression of static AddOrCallPromptForValueStrategy.faceTimeUsoApp()
{
  uint64_t v0 = type metadata accessor for UsoIdentifier();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UsoEntityBuilder_common_App();
  swift_allocObject();
  uint64_t v4 = UsoEntityBuilder_common_App.init()();
  dispatch thunk of UsoEntityBuilder_common_App.setName(value:)();
  UsoIdentifier.init(value:appBundleId:namespace:)();
  dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t EmergencyCountdownOutputBuilder.sharedGlobals.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + 24, a1);
}

uint64_t CallingIntentContinueInAppStrategy.phoneCallDisplayTextCATsSimple.getter()
{
  return swift_retain();
}

uint64_t ParticipantOutputProvider.cats.getter()
{
  return swift_retain();
}

uint64_t ParticipantOutputProvider.startCallCats.getter()
{
  return swift_retain();
}

uint64_t ParticipantOutputProvider.startCallCatPatterns.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + 88, a1);
}

#error "94FFC: call analysis failed (funcsize=42)"

#error "95094: call analysis failed (funcsize=37)"

void AddOrCallPromptForValueStrategy.actionForInput(_:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_1();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptResult<OngoingCallConfirmIntentFlow.Action>);
  OUTLINED_FUNCTION_1();
  uint64_t v12 = v11;
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (unsigned __int8 *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  Input.parse.getter();
  AddOrCallPromptForValueStrategy.parsePromptResponse(from:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v4);
  OUTLINED_FUNCTION_12();
  v17();
  int v18 = (*(uint64_t (**)(unsigned __int8 *, uint64_t))(v12 + 88))(v16, v10);
  if (v18 == enum case for PromptResult.answered<A>(_:))
  {
    (*(void (**)(unsigned __int8 *, uint64_t))(v12 + 96))(v16, v10);
    int v19 = *v16;
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.siriPhone);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      int v44 = v19;
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      uint64_t v42 = v1;
      uint64_t v43 = v3;
      *(_DWORD *)uint64_t v23 = 136315138;
      uint64_t v46 = v24;
      if (v44) {
        uint64_t v25 = 0x6C61436F54646461;
      }
      else {
        uint64_t v25 = 0x6C6C614377656ELL;
      }
      if (v44) {
        unint64_t v26 = 0xE90000000000006CLL;
      }
      else {
        unint64_t v26 = 0xE700000000000000;
      }
      uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v46);
      LOBYTE(v19) = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v1 = v42;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v21, v22, "#AddOrCallPromptForValueStrategy received response: %s", v23, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }

    *(unsigned char *)(v1 + 16) = v19;
    static ActionForInput.handle()();
LABEL_19:
    uint64_t v32 = OUTLINED_FUNCTION_43_5();
    v33(v32);
    goto LABEL_25;
  }
  if (v18 == enum case for PromptResult.cancelled<A>(_:))
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.siriPhone);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      OUTLINED_FUNCTION_42_3(&dword_0, v30, v31, "#AddOrCallPromptForValueStrategy response is cancellation");
      OUTLINED_FUNCTION_6();
    }

    static ActionForInput.cancel()();
    goto LABEL_19;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v34 = type metadata accessor for Logger();
  __swift_project_value_buffer(v34, (uint64_t)static Logger.siriPhone);
  unint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v35, v36))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    OUTLINED_FUNCTION_42_3(&dword_0, v37, v38, "#AddOrCallPromptForValueStrategy response not recognized, ignoring");
    OUTLINED_FUNCTION_6();
  }

  static ActionForInput.ignore()();
  uint64_t v39 = *(void (**)(uint64_t))(v12 + 8);
  uint64_t v40 = OUTLINED_FUNCTION_43_5();
  v39(v40);
  ((void (*)(unsigned __int8 *, uint64_t))v39)(v16, v10);
LABEL_25:
  OUTLINED_FUNCTION_26_1();
}

uint64_t AddOrCallPromptForValueStrategy.parseValueResponse(input:)()
{
  *(void *)(v1 + 16) = v0;
  return OUTLINED_FUNCTION_21_1((uint64_t)AddOrCallPromptForValueStrategy.parseValueResponse(input:));
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))(*(unsigned __int8 *)(*(void *)(v0 + 16) + 16));
}

uint64_t AddOrCallPromptForValueStrategy.makePromptForValue()()
{
  OUTLINED_FUNCTION_1_0();
  v1[395] = v0;
  v1[389] = v2;
  type metadata accessor for DialogPhase();
  v1[401] = OUTLINED_FUNCTION_35();
  uint64_t v3 = type metadata accessor for OutputGenerationManifest();
  v1[407] = v3;
  OUTLINED_FUNCTION_19_0(v3);
  v1[413] = v4;
  v1[419] = OUTLINED_FUNCTION_35();
  uint64_t v5 = type metadata accessor for UUID();
  v1[425] = v5;
  OUTLINED_FUNCTION_19_0(v5);
  v1[431] = v6;
  v1[437] = OUTLINED_FUNCTION_35();
  v1[443] = type metadata accessor for CommonDirectAction();
  v1[449] = OUTLINED_FUNCTION_35();
  uint64_t v7 = type metadata accessor for NLContextUpdate();
  v1[455] = v7;
  OUTLINED_FUNCTION_19_0(v7);
  v1[461] = v8;
  v1[467] = OUTLINED_FUNCTION_35();
  return _swift_task_switch(AddOrCallPromptForValueStrategy.makePromptForValue(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  AddOrCallPromptForValueStrategy.getNLContextUpdate()();
  OUTLINED_FUNCTION_44_4();
  type metadata accessor for CNContactStore(255, (unint64_t *)&lazy cache variable for type metadata for DialogExecutionResult);
  swift_asyncLet_begin();
  OUTLINED_FUNCTION_44_4();
  OUTLINED_FUNCTION_30_7();
  swift_asyncLet_begin();
  OUTLINED_FUNCTION_44_4();
  OUTLINED_FUNCTION_30_7();
  swift_asyncLet_begin();
  OUTLINED_FUNCTION_44_4();
  OUTLINED_FUNCTION_30_7();
  swift_asyncLet_begin();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ButtonConfigurationModel>);
  uint64_t v1 = type metadata accessor for ButtonConfigurationModel();
  *(void *)(v0 + 3784) = v1;
  OUTLINED_FUNCTION_19_0(v1);
  *(void *)(v0 + 3832) = *(void *)(v2 + 72);
  *(_DWORD *)(v0 + 4040) = *(_DWORD *)(v3 + 80);
  uint64_t v4 = swift_allocObject();
  *(void *)(v0 + 3880) = v4;
  *(_OWORD *)(v4 + 16) = xmmword_46A250;
  return _swift_asyncLet_get_throwing(v0 + 1936, v0 + 3016, AddOrCallPromptForValueStrategy.makePromptForValue(), v0 + 2896);
}

{
  uint64_t v0;
  uint64_t v1;

  *(void *)(v1 + 3928) = v0;
  if (v0) {
    return OUTLINED_FUNCTION_21_1((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
  }
  else {
    return OUTLINED_FUNCTION_21_1((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  uint64_t v1 = *(void *)(v0 + 3784);
  uint64_t v2 = *(void *)(v0 + 3592);
  uint64_t v14 = *(void *)(v0 + 3496);
  uint64_t v3 = *(void *)(v0 + 3448);
  uint64_t v15 = *(void *)(v0 + 3400);
  uint64_t v4 = *(void **)(v0 + 3160);
  uint64_t v5 = (void *)(*(void *)(v0 + 3880)
                + ((*(unsigned __int8 *)(v0 + 4040) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 4040)));
  uint64_t v13 = *(void *)(v0 + 3016);
  uint64_t v6 = *(void *)(v0 + 3024);
  type metadata accessor for UsoTaskBuilder_call_common_PhoneCall();
  OUTLINED_FUNCTION_21_0();
  swift_bridgeObjectRetain();
  UsoTaskBuilder_call_common_PhoneCall.init()();
  UsoTaskBuilder.toUserStatedTaskDialogAct()();
  swift_release();
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = v4 + 3;
  uint64_t v8 = v4[6];
  uint64_t v9 = v4[7];
  __swift_project_boxed_opaque_existential_1(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
  CommonDirectAction.toSAIntentGroupRunSiriKitExecutor(deviceState:)((void *)(v0 + 2616));
  __swift_destroy_boxed_opaque_existential_1(v0 + 2616);
  outlined destroy of CommonDirectAction(v2, (void (*)(void))type metadata accessor for CommonDirectAction);
  UUID.init()();
  *uint64_t v5 = v13;
  v5[1] = v6;
  [objc_allocWithZone((Class)SABaseCommand) init];
  *(void *)(v0 + 3936) = type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for SABaseCommand);
  CodableAceObject.init(wrappedValue:)();
  *((unsigned char *)v5 + *(int *)(v1 + 32)) = 1;
  *(void *)(v0 + 3944) = type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupRunSiriKitExecutor);
  CodableAceObject.init(wrappedValue:)();
  uint64_t v10 = (char *)v5 + *(int *)(v1 + 28);
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 32);
  *(void *)(v0 + 3952) = v11;
  *(void *)(v0 + 3960) = (v3 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v11(v10, v14, v15);
  return _swift_asyncLet_get_throwing(v0 + 1296, v0 + 3032, AddOrCallPromptForValueStrategy.makePromptForValue(), v0 + 3216);
}

{
  uint64_t v0;
  uint64_t v1;

  *(void *)(v1 + 3968) = v0;
  if (v0) {
    return OUTLINED_FUNCTION_21_1((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
  }
  else {
    return OUTLINED_FUNCTION_21_1((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;

  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 3952);
  uint64_t v1 = *(void *)(v0 + 3784);
  uint64_t v2 = *(void *)(v0 + 3592);
  uint64_t v11 = *(void *)(v0 + 3496);
  uint64_t v12 = *(void *)(v0 + 3400);
  uint64_t v3 = *(void **)(v0 + 3160);
  uint64_t v4 = (void *)(*(void *)(v0 + 3880)
                + *(void *)(v0 + 3832)
                + ((*(unsigned __int8 *)(v0 + 4040) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 4040)));
  uint64_t v5 = v3 + 3;
  uint64_t v10 = *(void *)(v0 + 3032);
  uint64_t v6 = *(void *)(v0 + 3040);
  swift_bridgeObjectRetain();
  AddOrCallPromptForValueStrategy.addParticipantDialogAct()();
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = v3[6];
  uint64_t v8 = v3[7];
  __swift_project_boxed_opaque_existential_1(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
  CommonDirectAction.toSAIntentGroupRunSiriKitExecutor(deviceState:)((void *)(v0 + 2696));
  __swift_destroy_boxed_opaque_existential_1(v0 + 2696);
  outlined destroy of CommonDirectAction(v2, (void (*)(void))type metadata accessor for CommonDirectAction);
  UUID.init()();
  *uint64_t v4 = v10;
  v4[1] = v6;
  [objc_allocWithZone((Class)SABaseCommand) init];
  CodableAceObject.init(wrappedValue:)();
  *((unsigned char *)v4 + *(int *)(v1 + 32)) = 1;
  CodableAceObject.init(wrappedValue:)();
  v13((char *)v4 + *(int *)(v1 + 28), v11, v12);
  return _swift_asyncLet_get_throwing(v0 + 16, v0 + 3048, AddOrCallPromptForValueStrategy.makePromptForValue(), v0 + 3456);
}

{
  uint64_t v0;
  uint64_t v1;

  *(void *)(v1 + 3976) = v0;
  if (v0) {
    return OUTLINED_FUNCTION_21_1((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
  }
  else {
    return OUTLINED_FUNCTION_21_1((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  long long v11;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;

  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 3952);
  int v19 = *(void *)(v0 + 3880);
  uint64_t v17 = *(void *)(v0 + 3784);
  os_log_type_t v22 = *(void *)(v0 + 3736);
  uint64_t v1 = *(void *)(v0 + 3592);
  uint64_t v16 = *(void *)(v0 + 3496);
  int v18 = *(void *)(v0 + 3400);
  uint64_t v2 = *(void *)(v0 + 3160);
  uint64_t v3 = (void *)(v19
                + ((*(unsigned __int8 *)(v0 + 4040) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 4040))
                + 2 * *(void *)(v0 + 3832));
  uint64_t v4 = (void *)(v2 + 24);
  uint64_t v15 = *(void *)(v0 + 3048);
  uint64_t v5 = *(void *)(v0 + 3056);
  swift_storeEnumTagMultiPayload();
  uint64_t v6 = v2;
  uint64_t v20 = v2;
  uint64_t v7 = *(void *)(v2 + 48);
  uint64_t v8 = *(void *)(v6 + 56);
  __swift_project_boxed_opaque_existential_1(v4, v7);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  swift_bridgeObjectRetain();
  v9(v7, v8);
  CommonDirectAction.toSAIntentGroupRunSiriKitExecutor(deviceState:)((void *)(v0 + 2776));
  __swift_destroy_boxed_opaque_existential_1(v0 + 2776);
  outlined destroy of CommonDirectAction(v1, (void (*)(void))type metadata accessor for CommonDirectAction);
  UUID.init()();
  *uint64_t v3 = v15;
  v3[1] = v5;
  [objc_allocWithZone((Class)SABaseCommand) init];
  CodableAceObject.init(wrappedValue:)();
  *((unsigned char *)v3 + *(int *)(v17 + 32)) = 1;
  CodableAceObject.init(wrappedValue:)();
  v21((char *)v3 + *(int *)(v17 + 28), v16, v18);
  static DialogPhase.clarification.getter();
  uint64_t v10 = swift_task_alloc();
  *(void *)(v10 + 16) = v22;
  *(void *)(v10 + 24) = v19;
  *(unsigned char *)(v10 + 32) = 0;
  OutputGenerationManifest.init(dialogPhase:_:)();
  swift_task_dealloc();
  outlined init with copy of SignalProviding(v20 + 88, v0 + 2856);
  uint64_t v11 = *(_OWORD *)(v0 + 2880);
  *(_OWORD *)(v0 + 3984) = v11;
  *(void *)(v0 + 4000) = __swift_project_boxed_opaque_existential_1((void *)(v0 + 2856), v11);
  *(void *)(v0 + 2960) = type metadata accessor for PhoneSnippetDataModels();
  *(void *)(v0 + 2968) = lazy protocol witness table accessor for type PhoneSnippetDataModels and conformance PhoneSnippetDataModels();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 2936));
  *boxed_opaque_existential_1 = v19;
  *((unsigned char *)boxed_opaque_existential_1 + 8) = 0;
  swift_storeEnumTagMultiPayload();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v13 = swift_allocObject();
  *(void *)(v0 + 4008) = v13;
  *(_OWORD *)(v13 + 16) = xmmword_46A030;
  return _swift_asyncLet_get_throwing(v0 + 656, v0 + 3064, AddOrCallPromptForValueStrategy.makePromptForValue(), v0 + 3696);
}

{
  uint64_t v0;
  uint64_t v1;

  *(void *)(v1 + 4016) = v0;
  if (v0) {
    return OUTLINED_FUNCTION_21_1((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
  }
  else {
    return OUTLINED_FUNCTION_21_1((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v7;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 2936;
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v3);
  return _swift_task_switch(AddOrCallPromptForValueStrategy.makePromptForValue(), 0, 0);
}

{
  void *v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  (*(void (**)(void, void))(v0[413] + 8))(v0[419], v0[407]);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 357));
  return _swift_asyncLet_finish(v0 + 2);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_38_4();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_36_6();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_35_5();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[461] + 8))(v0[467], v0[455]);
  swift_release_n();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  OUTLINED_FUNCTION_16_1();
  *(void *)(*(void *)(v0 + 3880) + 16) = 0;
  swift_release();
  uint64_t v1 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v1);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_38_4();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_36_6();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_35_5();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_16_1();
  uint64_t v1 = *(void *)(v0 + 3880);
  outlined destroy of CommonDirectAction(v1 + ((*(unsigned __int8 *)(v0 + 4040) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 4040)), (void (*)(void))type metadata accessor for ButtonConfigurationModel);
  *(void *)(v1 + 16) = 0;
  swift_release();
  uint64_t v2 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v2);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_38_4();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_36_6();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_35_5();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *(void *)(v0 + 3880);
  uint64_t v2 = v1 + ((*(unsigned __int8 *)(v0 + 4040) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 4040));
  outlined destroy of CommonDirectAction(v2 + *(void *)(v0 + 3832), (void (*)(void))type metadata accessor for ButtonConfigurationModel);
  outlined destroy of CommonDirectAction(v2, (void (*)(void))type metadata accessor for ButtonConfigurationModel);
  *(void *)(v1 + 16) = 0;
  swift_release();
  uint64_t v3 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v3);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_38_4();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_36_6();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_35_5();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  OUTLINED_FUNCTION_40_0();
  uint64_t v1 = v0[419];
  uint64_t v2 = v0[413];
  uint64_t v3 = v0[407];
  *(void *)(v0[501] + 16) = 0;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 367));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 357));
  return _swift_asyncLet_finish(v0 + 2);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_38_4();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_36_6();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_35_5();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)AddOrCallPromptForValueStrategy.makePromptForValue());
}

uint64_t AddOrCallPromptForValueStrategy.makePromptForValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = v10[501];
  uint64_t v12 = (void *)v10[383];
  *(void *)(v11 + 32) = v12;
  uint64_t v22 = v11;
  specialized Array._endMutation()();
  v10[503] = v22;
  id v13 = v12;
  uint64_t v16 = (void *)swift_task_alloc();
  v10[504] = v16;
  *uint64_t v16 = v10;
  v16[1] = AddOrCallPromptForValueStrategy.makePromptForValue();
  uint64_t v17 = v10[499];
  uint64_t v18 = v10[498];
  uint64_t v19 = v10[419];
  uint64_t v20 = v10[389];
  return dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)(v20, v10 + 367, v22, v19, v18, v17, v14, v15, a9, a10);
}

{
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t (*v13)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_40_0();
  uint64_t v10 = OUTLINED_FUNCTION_4_17();
  v11(v10);
  OUTLINED_FUNCTION_39_3();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_31_1();
  return v13(v12, v13, v14, v15, v16, v17, v18, v19, a9, a10);
}

{
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t (*v13)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_40_0();
  uint64_t v10 = OUTLINED_FUNCTION_4_17();
  v11(v10);
  OUTLINED_FUNCTION_39_3();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_31_1();
  return v13(v12, v13, v14, v15, v16, v17, v18, v19, a9, a10);
}

{
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t (*v13)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_40_0();
  uint64_t v10 = OUTLINED_FUNCTION_4_17();
  v11(v10);
  OUTLINED_FUNCTION_39_3();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_31_1();
  return v13(v12, v13, v14, v15, v16, v17, v18, v19, a9, a10);
}

{
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t (*v13)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_40_0();
  uint64_t v10 = OUTLINED_FUNCTION_4_17();
  v11(v10);
  OUTLINED_FUNCTION_39_3();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_31_1();
  return v13(v12, v13, v14, v15, v16, v17, v18, v19, a9, a10);
}

uint64_t implicit closure #1 in AddOrCallPromptForValueStrategy.makePromptForValue()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(implicit closure #1 in AddOrCallPromptForValueStrategy.makePromptForValue(), 0, 0);
}

uint64_t implicit closure #1 in AddOrCallPromptForValueStrategy.makePromptForValue()()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v1 = (void *)(**(void **)(*(void *)(v0 + 24) + 72) + class metadata base offset for OngoingCallCATsSimple);
  uint64_t v15 = *v1 + *(int *)*v1;
  uint64_t v16 = (uint64_t)v1;
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)OUTLINED_FUNCTION_40_4(v2);
  *uint64_t v3 = v4;
  v3[1] = implicit closure #1 in AddOrCallPromptForValueStrategy.makePromptForValue();
  OUTLINED_FUNCTION_46_1((uint64_t)v3, v5, v6, v7, v8, v9, v10, v11, v14, v15, v16);
  return v12();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_16_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_13_1();
    return v9();
  }
  else
  {
    *(void *)(v5 + 40) = v3;
    OUTLINED_FUNCTION_23_5();
    return _swift_task_switch(v11, v12, v13);
  }
}

{
  uint64_t v0;

  **(void **)(v0 + 16) = *(void *)(v0 + 40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t implicit closure #2 in AddOrCallPromptForValueStrategy.makePromptForValue()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(implicit closure #2 in AddOrCallPromptForValueStrategy.makePromptForValue(), 0, 0);
}

uint64_t implicit closure #2 in AddOrCallPromptForValueStrategy.makePromptForValue()()
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_28_4();
  uint64_t v14 = *(void *)(class metadata base offset for PhoneCallDisplayTextCATsSimple + v0 + 216)
      + **(int **)(class metadata base offset for PhoneCallDisplayTextCATsSimple + v0 + 216);
  uint64_t v15 = class metadata base offset for PhoneCallDisplayTextCATsSimple + v0 + 216;
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_40_4(v1);
  *uint64_t v2 = v3;
  v2[1] = implicit closure #2 in AddOrCallPromptForValueStrategy.makePromptForValue();
  OUTLINED_FUNCTION_46_1((uint64_t)v2, v4, v5, v6, v7, v8, v9, v10, v13, v14, v15);
  return v11();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_16_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_13_1();
    return v9();
  }
  else
  {
    *(void *)(v5 + 40) = v3;
    OUTLINED_FUNCTION_23_5();
    return _swift_task_switch(v11, v12, v13);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  OUTLINED_FUNCTION_16_1();
  uint64_t v1 = *(uint64_t **)(v0 + 16);
  uint64_t v2 = dispatch thunk of LabelExecutionResult.subscript.getter();
  uint64_t v4 = v3;
  swift_release();
  *uint64_t v1 = v2;
  v1[1] = v4;
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t implicit closure #3 in AddOrCallPromptForValueStrategy.makePromptForValue()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(implicit closure #3 in AddOrCallPromptForValueStrategy.makePromptForValue(), 0, 0);
}

uint64_t implicit closure #3 in AddOrCallPromptForValueStrategy.makePromptForValue()()
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_28_4();
  uint64_t v14 = *(void *)(class metadata base offset for PhoneCallDisplayTextCATsSimple + v0 + 8)
      + **(int **)(class metadata base offset for PhoneCallDisplayTextCATsSimple + v0 + 8);
  uint64_t v15 = class metadata base offset for PhoneCallDisplayTextCATsSimple + v0 + 8;
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_40_4(v1);
  *uint64_t v2 = v3;
  v2[1] = implicit closure #3 in AddOrCallPromptForValueStrategy.makePromptForValue();
  OUTLINED_FUNCTION_46_1((uint64_t)v2, v4, v5, v6, v7, v8, v9, v10, v13, v14, v15);
  return v11();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_16_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_13_1();
    return v9();
  }
  else
  {
    *(void *)(v5 + 40) = v3;
    OUTLINED_FUNCTION_23_5();
    return _swift_task_switch(v11, v12, v13);
  }
}

uint64_t implicit closure #4 in AddOrCallPromptForValueStrategy.makePromptForValue()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(implicit closure #4 in AddOrCallPromptForValueStrategy.makePromptForValue(), 0, 0);
}

uint64_t implicit closure #4 in AddOrCallPromptForValueStrategy.makePromptForValue()()
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_28_4();
  uint64_t v14 = *(void *)(class metadata base offset for PhoneCallDisplayTextCATsSimple + v0 + 56)
      + **(int **)(class metadata base offset for PhoneCallDisplayTextCATsSimple + v0 + 56);
  uint64_t v15 = class metadata base offset for PhoneCallDisplayTextCATsSimple + v0 + 56;
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_40_4(v1);
  *uint64_t v2 = v3;
  v2[1] = implicit closure #3 in AddOrCallPromptForValueStrategy.makePromptForValue();
  OUTLINED_FUNCTION_46_1((uint64_t)v2, v4, v5, v6, v7, v8, v9, v10, v13, v14, v15);
  return v11();
}

uint64_t closure #1 in AddOrCallPromptForValueStrategy.makePromptForValue()(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  OutputGenerationManifest.canUseServerTTS.setter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  uint64_t v10 = type metadata accessor for NLContextUpdate();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v9, a2, v10);
  __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v10);
  OutputGenerationManifest.nlContextUpdate.setter();
  StackedButtonsModel.responseViewId.getter(a3, a4);
  return OutputGenerationManifest.responseViewId.setter();
}

void AddOrCallPromptForValueStrategy.parsePromptResponse(from:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v77 = v0;
  uint64_t v78 = v2;
  uint64_t v4 = v3;
  type metadata accessor for Siri_Nlu_External_UserDialogAct();
  OUTLINED_FUNCTION_1();
  uint64_t v71 = v6;
  uint64_t v72 = v5;
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_3_1();
  uint64_t v70 = v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CommonDirectAction?);
  __chkstk_darwin(v8 - 8);
  OUTLINED_FUNCTION_8_7();
  uint64_t v9 = type metadata accessor for CommonDirectAction();
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_5_8();
  uint64_t v73 = v11;
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v70 - v14;
  __chkstk_darwin(v13);
  uint64_t v75 = (uint64_t)&v70 - v16;
  uint64_t v76 = type metadata accessor for Parse.DirectInvocation();
  OUTLINED_FUNCTION_1();
  uint64_t v18 = v17;
  __chkstk_darwin(v19);
  OUTLINED_FUNCTION_5_8();
  uint64_t v74 = v20;
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v70 - v22;
  uint64_t v24 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_1();
  uint64_t v26 = v25;
  __chkstk_darwin(v27);
  os_log_type_t v29 = (char *)&v70 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_12();
  v30();
  int v31 = (*(uint64_t (**)(char *, uint64_t))(v26 + 88))(v29, v24);
  if (v31 == enum case for Parse.NLv3IntentOnly(_:))
  {
    OUTLINED_FUNCTION_10_8();
    v32();
    goto LABEL_14;
  }
  int v33 = v31;
  if (v31 == enum case for Parse.directInvocation(_:))
  {
    uint64_t v34 = OUTLINED_FUNCTION_34_1();
    v35(v34);
    uint64_t v36 = v18;
    uint64_t v37 = v76;
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v23, v29, v76);
    static CommonDirectAction.from(_:)((uint64_t)v23, v1);
    if (__swift_getEnumTagSinglePayload((uint64_t)v1, 1, v9) == 1)
    {
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v1, &demangling cache variable for type metadata for CommonDirectAction?);
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v38 = type metadata accessor for Logger();
      __swift_project_value_buffer(v38, (uint64_t)static Logger.siriPhone);
      OUTLINED_FUNCTION_12();
      v39();
      uint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v40, v41))
      {
        uint64_t v42 = (uint8_t *)swift_slowAlloc();
        v81[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v42 = 136315138;
        uint64_t v43 = Parse.DirectInvocation.identifier.getter();
        *(void *)&long long v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v45 = *(void (**)(void))(v18 + 8);
        OUTLINED_FUNCTION_10_8();
        v45();
        swift_arrayDestroy();
        OUTLINED_FUNCTION_6();
        OUTLINED_FUNCTION_6();

        OUTLINED_FUNCTION_10_8();
        v45();
      }
      else
      {

        char v56 = *(void (**)(void))(v18 + 8);
        OUTLINED_FUNCTION_10_8();
        v56();
        OUTLINED_FUNCTION_10_8();
        v56();
      }
      goto LABEL_23;
    }
    uint64_t v48 = v75;
    outlined init with take of CommonDirectAction((uint64_t)v1, v75);
    outlined init with copy of CommonDirectAction(v48, (uint64_t)v15);
    if (swift_getEnumCaseMultiPayload() == 7)
    {
      outlined destroy of CommonDirectAction(v48, (void (*)(void))type metadata accessor for CommonDirectAction);
      OUTLINED_FUNCTION_10_8();
      v49();
      outlined destroy of CommonDirectAction((uint64_t)v15, (void (*)(void))type metadata accessor for CommonDirectAction);
      char v50 = (unsigned int *)&enum case for PromptResult.cancelled<A>(_:);
LABEL_24:
      uint64_t v68 = *v50;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptResult<OngoingCallConfirmIntentFlow.Action>);
      OUTLINED_FUNCTION_15();
      (*(void (**)(unsigned char *, uint64_t))(v69 + 104))(v78, v68);
      goto LABEL_25;
    }
    outlined destroy of CommonDirectAction((uint64_t)v15, (void (*)(void))type metadata accessor for CommonDirectAction);
    uint64_t v57 = v73;
    outlined init with copy of CommonDirectAction(v48, v73);
    if (swift_getEnumCaseMultiPayload() == 4)
    {
      uint64_t v58 = v70;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 32))(v70, v57, v72);
      uint64_t v59 = OUTLINED_FUNCTION_12_5();
      uint64_t v61 = v60(v59);
      (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v61 + 216))(&v79, v58);
      swift_release();
      if (v80)
      {
        outlined init with take of AppSelectionSignalComponent(&v79, (uint64_t)v81);
        AddOrCallPromptForValueStrategy.getAction(from:)(v81, v78);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v81);
        uint64_t v62 = OUTLINED_FUNCTION_26_7();
        v63(v62);
        outlined destroy of CommonDirectAction(v48, (void (*)(void))type metadata accessor for CommonDirectAction);
        OUTLINED_FUNCTION_10_8();
        v64();
        goto LABEL_25;
      }
      uint64_t v66 = OUTLINED_FUNCTION_26_7();
      v67(v66);
      outlined destroy of CommonDirectAction(v48, (void (*)(void))type metadata accessor for CommonDirectAction);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v23, v37);
      goto LABEL_22;
    }
    outlined destroy of CommonDirectAction(v48, (void (*)(void))type metadata accessor for CommonDirectAction);
    OUTLINED_FUNCTION_10_8();
    v65();
    outlined destroy of CommonDirectAction(v57, (void (*)(void))type metadata accessor for CommonDirectAction);
LABEL_23:
    char v50 = (unsigned int *)&enum case for PromptResult.unanswered<A>(_:);
    goto LABEL_24;
  }
  if (v31 == enum case for Parse.NLv4IntentOnly(_:))
  {
    uint64_t v46 = OUTLINED_FUNCTION_34_1();
    v47(v46);
    swift_unknownObjectRelease();
  }
  else
  {
    int v51 = enum case for Parse.uso(_:);
    OUTLINED_FUNCTION_10_8();
    v52();
    if (v33 != v51) {
      goto LABEL_23;
    }
  }
LABEL_14:
  uint64_t v53 = OUTLINED_FUNCTION_12_5();
  uint64_t v55 = v54(v53);
  (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v55 + 192))(&v79, v4);
  swift_release();
  if (!v80)
  {
LABEL_22:
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)&v79, &demangling cache variable for type metadata for PhoneCallNLIntent?);
    goto LABEL_23;
  }
  outlined init with take of AppSelectionSignalComponent(&v79, (uint64_t)v81);
  AddOrCallPromptForValueStrategy.getAction(from:)(v81, v78);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v81);
LABEL_25:
  OUTLINED_FUNCTION_26_1();
}

uint64_t AddOrCallPromptForValueStrategy.getAction(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  OUTLINED_FUNCTION_29_4();
  if (!PhoneCallNLIntent.isOutgoingCall()())
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    OUTLINED_FUNCTION_29_4();
    if (PhoneCallNLIntent.isAddParticipant()())
    {
      *a2 = 1;
      goto LABEL_5;
    }
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    Swift::Bool v9 = PhoneCallNLIntent.hasCallConfirmation(_:)(PhoneCallFlowDelegatePlugin_PhoneCallConfirmation_no);
    outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v14);
    if (v9)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    }
    else
    {
      __swift_project_boxed_opaque_existential_1(v14, v14[3]);
      Swift::Bool v10 = PhoneCallNLIntent.hasCallConfirmation(_:)(PhoneCallFlowDelegatePlugin_PhoneCallConfirmation_cancel);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
      if (!v10)
      {
        uint64_t v11 = (unsigned int *)&enum case for PromptResult.unanswered<A>(_:);
        goto LABEL_13;
      }
    }
    uint64_t v11 = (unsigned int *)&enum case for PromptResult.cancelled<A>(_:);
LABEL_13:
    uint64_t v12 = *v11;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptResult<OngoingCallConfirmIntentFlow.Action>);
    OUTLINED_FUNCTION_15();
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v13 + 104))(a2, v12);
  }
  *a2 = 0;
LABEL_5:
  uint64_t v4 = enum case for PromptResult.answered<A>(_:);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptResult<OngoingCallConfirmIntentFlow.Action>);
  OUTLINED_FUNCTION_15();
  uint64_t v7 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v6 + 104);

  return v7(a2, v4, v5);
}

void AddOrCallPromptForValueStrategy.getNLContextUpdate()()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v0 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  OUTLINED_FUNCTION_1();
  uint64_t v2 = v1;
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_3_1();
  uint64_t v18 = v4;
  type metadata accessor for Siri_Nlu_External_SystemGaveOptions();
  OUTLINED_FUNCTION_1();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_5_8();
  __chkstk_darwin(v6);
  Siri_Nlu_External_SystemGaveOptions.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_UserDialogAct>);
  type metadata accessor for Siri_Nlu_External_UserDialogAct();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_46A250;
  type metadata accessor for UsoTaskBuilder_call_common_PhoneCall();
  OUTLINED_FUNCTION_21_0();
  UsoTaskBuilder_call_common_PhoneCall.init()();
  UsoTaskBuilder.toUserStatedTaskDialogAct()();
  swift_release();
  AddOrCallPromptForValueStrategy.faceTimeDialogAct()();
  AddOrCallPromptForValueStrategy.addParticipantDialogAct()();
  Siri_Nlu_External_SystemGaveOptions.choices.setter();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.siriPhone);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    Swift::Bool v10 = (uint8_t *)swift_slowAlloc();
    v19[0] = swift_slowAlloc();
    *(_DWORD *)Swift::Bool v10 = 136315138;
    swift_beginAccess();
    Siri_Nlu_External_SystemGaveOptions.choices.getter();
    swift_endAccess();
    uint64_t v11 = Array.description.getter();
    uint64_t v12 = v0;
    unint64_t v14 = v13;
    swift_bridgeObjectRelease();
    v19[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v14, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v0 = v12;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v8, v9, "Returning NLUSystemGaveOptions: %s", v10, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }

  Siri_Nlu_External_SystemDialogAct.init()();
  swift_beginAccess();
  OUTLINED_FUNCTION_12();
  v15();
  Siri_Nlu_External_SystemDialogAct.gaveOptions.setter();
  NLContextUpdate.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_467710;
  OUTLINED_FUNCTION_12();
  v16();
  NLContextUpdate.nluSystemDialogActs.setter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v18, v0);
  OUTLINED_FUNCTION_10_8();
  v17();
  OUTLINED_FUNCTION_26_1();
}

uint64_t AddOrCallPromptForValueStrategy.faceTimeDialogAct()()
{
  type metadata accessor for UsoTaskBuilder_call_common_PhoneCall();
  OUTLINED_FUNCTION_21_0();
  UsoTaskBuilder_call_common_PhoneCall.init()();
  type metadata accessor for UsoEntityBuilder_common_PhoneCall();
  OUTLINED_FUNCTION_21_0();
  UsoEntityBuilder_common_PhoneCall.init()();
  if (one-time initialization token for faceTimeUsoApp != -1) {
    swift_once();
  }
  dispatch thunk of UsoEntityBuilderGlobalArgs.setUsoAssociatedApp(value:)();
  dispatch thunk of Uso_VerbTemplateBuilder_Target.setTarget(value:)();
  UsoTaskBuilder.toUserStatedTaskDialogAct()();
  swift_release();

  return swift_release();
}

uint64_t AddOrCallPromptForValueStrategy.addParticipantDialogAct()()
{
  uint64_t v1 = type metadata accessor for ListOperators();
  OUTLINED_FUNCTION_1();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_8_7();
  type metadata accessor for UsoTaskBuilder_update_common_PhoneCall();
  OUTLINED_FUNCTION_21_0();
  UsoTaskBuilder_update_common_PhoneCall.init()();
  type metadata accessor for UsoEntityBuilder_common_PhoneCall();
  OUTLINED_FUNCTION_21_0();
  UsoEntityBuilder_common_PhoneCall.init()();
  type metadata accessor for UsoEntityBuilder_common_Person();
  OUTLINED_FUNCTION_21_0();
  UsoEntityBuilder_common_Person.init()();
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v0, enum case for ListOperators.addToSet(_:), v1);
  dispatch thunk of UsoEntityBuilder_common_PhoneCall.addRecipientsListExpression(operatorValue:operand:)();
  OUTLINED_FUNCTION_10_8();
  v5();
  dispatch thunk of Uso_VerbTemplateBuilder_ReferenceTarget.setTarget(value:)();
  UsoTaskBuilder.toUserStatedTaskDialogAct()();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t AddOrCallPromptForValueStrategy.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 88);
  return v0;
}

uint64_t AddOrCallPromptForValueStrategy.__deallocating_deinit()
{
  AddOrCallPromptForValueStrategy.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.actionForInput(_:) in conformance AddOrCallPromptForValueStrategy()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.parseValueResponse(input:) in conformance AddOrCallPromptForValueStrategy(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 16) = a1;
  uint64_t v7 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v2 + 168) + **(int **)(*(void *)v2 + 168));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 24) = v5;
  *uint64_t v5 = v3;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.parseValueResponse(input:) in conformance AddOrCallPromptForValueStrategy;
  return v7(a2);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.parseValueResponse(input:) in conformance AddOrCallPromptForValueStrategy()
{
  OUTLINED_FUNCTION_16_1();
  char v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (!v0) {
    **(unsigned char **)(v5 + 16) = v3;
  }
  OUTLINED_FUNCTION_13_1();
  return v9();
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makePromptForValue() in conformance AddOrCallPromptForValueStrategy(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 176) + **(int **)(*(void *)v1 + 176));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = UnsupportedFlowCATs.deleteVoicemail();
  return v6(a1);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance AddOrCallPromptForValueStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = UnsupportedFlowCATs.deleteVoicemail();
  return PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse()(a1, a2, a3);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnLowConfidence() in conformance AddOrCallPromptForValueStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = UnsupportedFlowCATs.deleteVoicemail();
  return PromptForValueFlowStrategyAsync.makeRepromptOnLowConfidence()(a1, a2, a3);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makeFlowCancelledResponse() in conformance AddOrCallPromptForValueStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return PromptForValueFlowStrategyAsync.makeFlowCancelledResponse()(a1, a2, a3);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makeErrorResponse(_:) in conformance AddOrCallPromptForValueStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = UnsupportedFlowCATs.deleteVoicemail();
  return PromptForValueFlowStrategyAsync.makeErrorResponse(_:)(a1, a2, a3, a4);
}

uint64_t specialized AddOrCallPromptForValueStrategy.init(sharedGlobals:ongoingCallCats:ongoingCallCATsSimple:phoneCallDisplayTextCATsSimple:responseGenerator:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(a6 + 112) = a7;
  *(void *)(a6 + 120) = a8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(a6 + 88));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32))(boxed_opaque_existential_1, a5, a7);
  *(unsigned char *)(a6 + 16) = 2;
  outlined init with take of AppSelectionSignalComponent(a1, a6 + 24);
  *(void *)(a6 + 64) = a2;
  *(void *)(a6 + 72) = a3;
  *(void *)(a6 + 80) = a4;
  return a6;
}

uint64_t partial apply for implicit closure #1 in AddOrCallPromptForValueStrategy.makePromptForValue()()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_17_0(v0);
  *uint64_t v1 = v2;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  uint64_t v3 = OUTLINED_FUNCTION_21_7();
  return implicit closure #1 in AddOrCallPromptForValueStrategy.makePromptForValue()(v3, v4);
}

uint64_t partial apply for implicit closure #2 in AddOrCallPromptForValueStrategy.makePromptForValue()()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_17_0(v0);
  *uint64_t v1 = v2;
  v1[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  uint64_t v3 = OUTLINED_FUNCTION_21_7();
  return implicit closure #2 in AddOrCallPromptForValueStrategy.makePromptForValue()(v3, v4);
}

uint64_t partial apply for implicit closure #3 in AddOrCallPromptForValueStrategy.makePromptForValue()()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_17_0(v0);
  *uint64_t v1 = v2;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  uint64_t v3 = OUTLINED_FUNCTION_21_7();
  return implicit closure #3 in AddOrCallPromptForValueStrategy.makePromptForValue()(v3, v4);
}

uint64_t partial apply for implicit closure #4 in AddOrCallPromptForValueStrategy.makePromptForValue()()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_17_0(v0);
  *uint64_t v1 = v2;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  uint64_t v3 = OUTLINED_FUNCTION_21_7();
  return implicit closure #4 in AddOrCallPromptForValueStrategy.makePromptForValue()(v3, v4);
}

uint64_t outlined destroy of CommonDirectAction(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_15();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t partial apply for closure #1 in AddOrCallPromptForValueStrategy.makePromptForValue()(uint64_t a1)
{
  return closure #1 in AddOrCallPromptForValueStrategy.makePromptForValue()(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32));
}

unint64_t lazy protocol witness table accessor for type PhoneSnippetDataModels and conformance PhoneSnippetDataModels()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneSnippetDataModels and conformance PhoneSnippetDataModels;
  if (!lazy protocol witness table cache variable for type PhoneSnippetDataModels and conformance PhoneSnippetDataModels)
  {
    type metadata accessor for PhoneSnippetDataModels();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels and conformance PhoneSnippetDataModels);
  }
  return result;
}

uint64_t type metadata accessor for AddOrCallPromptForValueStrategy()
{
  return self;
}

uint64_t outlined init with take of CommonDirectAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommonDirectAction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of CommonDirectAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommonDirectAction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_4_17()
{
  return *(void *)(v0 + 3736);
}

uint64_t OUTLINED_FUNCTION_12_5()
{
  uint64_t v1 = *(void *)(v0 - 184);
  uint64_t v2 = *(void *)(v1 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 24), v2);
  return v2;
}

uint64_t OUTLINED_FUNCTION_15_7()
{
  return specialized AddOrCallPromptForValueStrategy.init(sharedGlobals:ongoingCallCats:ongoingCallCATsSimple:phoneCallDisplayTextCATsSimple:responseGenerator:)(v4, v3, v2, v1, v7, v0, v5, v6);
}

uint64_t OUTLINED_FUNCTION_26_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_34_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_35_5()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_36_6()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_38_4()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_39_3()
{
  return swift_release_n();
}

void OUTLINED_FUNCTION_42_3(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v6, a4, v4, 2u);
}

uint64_t OUTLINED_FUNCTION_43_5()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_44_4()
{
  return swift_retain_n();
}

uint64_t key path setter for ReadVoiceMailAction.nextAction : ReadVoiceMailAction(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 152);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t ReadVoiceMailAction.paginatedItem.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin19ReadVoiceMailAction_paginatedItem;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItem<INCallRecord>);
  OUTLINED_FUNCTION_15();
  os_log_type_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);

  return v6(a1, v3, v4);
}

id ReadVoiceMailAction.intent.getter()
{
  return OUTLINED_FUNCTION_3_20(OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin19ReadVoiceMailAction_intent);
}

id ReadVoiceMailAction.intentResponse.getter()
{
  return OUTLINED_FUNCTION_3_20(OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin19ReadVoiceMailAction_intentResponse);
}

uint64_t ReadVoiceMailAction.isLeadingSavedVoiceMailPostPrompt.getter()
{
  return *(unsigned __int8 *)(v0
                            + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin19ReadVoiceMailAction_isLeadingSavedVoiceMailPostPrompt);
}

uint64_t ReadVoiceMailAction.aceServiceInvoker.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin19ReadVoiceMailAction_aceServiceInvoker, a1);
}

uint64_t ReadVoiceMailAction.searchCallHistoryCatFamily.getter()
{
  return swift_retain();
}

uint64_t ReadVoiceMailAction.__allocating_init(paginatedCallRecord:intent:intentResponse:aceServiceInvoker:searchCallHistoryCatFamily:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject();
  ReadVoiceMailAction.init(paginatedCallRecord:intent:intentResponse:aceServiceInvoker:searchCallHistoryCatFamily:)(a1, a2, a3, a4, a5);
  return v10;
}

void *ReadVoiceMailAction.init(paginatedCallRecord:intent:intentResponse:aceServiceInvoker:searchCallHistoryCatFamily:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = v5;
  uint64_t v11 = type metadata accessor for CATOption();
  __chkstk_darwin(v11 - 8);
  OUTLINED_FUNCTION_3_1();
  uint64_t v12 = type metadata accessor for Page();
  OUTLINED_FUNCTION_0_0();
  uint64_t v14 = v13;
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_5_1();
  v5[2] = 0;
  uint64_t v30 = v5 + 2;
  v5[3] = 0;
  v5[4] = 0xD000000000000013;
  v5[5] = 0x800000000046A350;
  uint64_t v16 = (char *)v5 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin19ReadVoiceMailAction_paginatedItem;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItem<INCallRecord>);
  uint64_t v18 = *(void *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v16, a1, v17);
  *(void *)((char *)v7 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin19ReadVoiceMailAction_intent) = a2;
  *(void *)((char *)v7 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin19ReadVoiceMailAction_intentResponse) = a3;
  outlined init with copy of SignalProviding(a4, (uint64_t)v7 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin19ReadVoiceMailAction_aceServiceInvoker);
  *(void *)((char *)v7 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin19ReadVoiceMailAction_searchCallHistoryCatFamily) = a5;
  id v28 = a2;
  id v19 = a3;
  swift_retain();
  PaginatedItem.page.getter();
  LOBYTE(v16) = Page.isFirstPage.getter();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v6, v12);
  *((unsigned char *)v7 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin19ReadVoiceMailAction_isLeadingSavedVoiceMailPostPrompt) = static SearchCallHistoryHelper.isLeadingSavedVoiceMail(isFirstPage:intentResponse:intent:)(v16 & 1, (uint64_t)v19, v28) & 1;
  PaginatedItem.item.getter();
  id v20 = [v34 identifier];

  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v23 = v22;

  LOBYTE(v20) = *((unsigned char *)v7
                + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin19ReadVoiceMailAction_isLeadingSavedVoiceMailPostPrompt);
  outlined init with copy of SignalProviding((uint64_t)v7 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin19ReadVoiceMailAction_aceServiceInvoker, (uint64_t)v33);
  type metadata accessor for SearchCallHistoryCATs();
  static CATOption.defaultMode.getter();
  uint64_t v24 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for PlayVoiceMailAction();
  swift_allocObject();
  uint64_t v25 = PlayVoiceMailAction.init(voicemailIdentifier:isLeadingSavedVoiceMailPostPrompt:aceServiceInvoker:searchCallHistoryCatFamily:)(v21, v23, (char)v20, v33, v24);

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a4);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a1, v17);
  uint64_t v26 = _s27PhoneCallFlowDelegatePlugin19PlayVoiceMailActionCAC07SiriKitC00I0AAWlTm_0(&lazy protocol witness table cache variable for type PlayVoiceMailAction and conformance PlayVoiceMailAction, (void (*)(uint64_t))type metadata accessor for PlayVoiceMailAction);
  swift_beginAccess();
  *uint64_t v30 = v25;
  v7[3] = v26;
  swift_unknownObjectRelease();
  return v7;
}

uint64_t ReadVoiceMailAction.run(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_allocObject();
  v5[2] = a1;
  v5[3] = a2;
  v5[4] = v2;
  uint64_t v6 = *(void (**)(void, void *))(*(void *)v2 + 184);
  swift_retain();
  swift_retain();
  v6(partial apply for closure #1 in ReadVoiceMailAction.run(_:), v5);

  return swift_release();
}

void closure #1 in ReadVoiceMailAction.run(_:)(void *a1, char a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    a3(0);
  }
  else
  {
    __swift_project_boxed_opaque_existential_1((void *)(a5 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin19ReadVoiceMailAction_aceServiceInvoker), *(void *)(a5 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin19ReadVoiceMailAction_aceServiceInvoker + 24));
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = a3;
    *(void *)(v8 + 24) = a4;
    outlined copy of Result<SABaseCommand, Error>(a1, 0);
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for SABaseCommand);
    swift_retain();
    dispatch thunk of AceServiceInvoker.submit<A>(_:completion:)();
    swift_release();
    outlined consume of Result<SABaseCommand, Error>(a1, 0);
  }
}

uint64_t sub_99D6C()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void partial apply for closure #1 in ReadVoiceMailAction.run(_:)(void *a1, char a2)
{
  closure #1 in ReadVoiceMailAction.run(_:)(a1, a2 & 1, *(void (**)(void))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t closure #1 in closure #1 in ReadVoiceMailAction.run(_:)(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<SABaseCommand, SubmitCommandError>);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SubmitCommandError();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(a1, (uint64_t)v6, &demangling cache variable for type metadata for Result<SABaseCommand, SubmitCommandError>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    _s27PhoneCallFlowDelegatePlugin19PlayVoiceMailActionCAC07SiriKitC00I0AAWlTm_0(&lazy protocol witness table cache variable for type SubmitCommandError and conformance SubmitCommandError, (void (*)(uint64_t))&type metadata accessor for SubmitCommandError);
    uint64_t v11 = swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(v12, v10, v7);
    a2(v11);
    swift_errorRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  else
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v6, &demangling cache variable for type metadata for Result<SABaseCommand, SubmitCommandError>);
    return ((uint64_t (*)(void))a2)(0);
  }
}

uint64_t ReadVoiceMailAction.makeSummaryView(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  swift_retain();
  ReadVoiceMailAction.getTemplatingResult(_:)((uint64_t)partial apply for closure #1 in ReadVoiceMailAction.makeSummaryView(_:), v4);

  return swift_release();
}

uint64_t closure #1 in ReadVoiceMailAction.makeSummaryView(_:)(uint64_t a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = type metadata accessor for TemplatingResult();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin(v8);
  uint64_t v10 = (uint64_t *)((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(a1, (uint64_t)v10, &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = *v10;
    swift_errorRetain();
    a2(v11, 1);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v5 + 32))(v7, v10, v4);
    type metadata accessor for ViewFactory();
    swift_allocObject();
    ViewFactory.init(ttsEnabled:)();
    uint64_t v13 = (void *)dispatch thunk of ViewFactory.makeSummaryView(templateResult:snippets:listenAfterSpeaking:canUseServerTTS:)();
    swift_release();
    a2((uint64_t)v13, 0);

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t partial apply for closure #1 in ReadVoiceMailAction.makeSummaryView(_:)(uint64_t a1)
{
  return closure #1 in ReadVoiceMailAction.makeSummaryView(_:)(a1, *(void (**)(uint64_t, uint64_t))(v1 + 16));
}

uint64_t ReadVoiceMailAction.getTemplatingResult(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v42 = a2;
  uint64_t v43 = a1;
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_0_0();
  uint64_t v40 = v4;
  uint64_t v41 = v3;
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  __chkstk_darwin(v7 - 8);
  OUTLINED_FUNCTION_3_1();
  uint64_t v44 = v8;
  uint64_t v9 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_0_0();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  uint64_t v14 = (uint64_t *)((char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItem<INCallRecord>);
  PaginatedItem.item.getter();
  uint64_t v15 = (__CFString *)v46;
  type metadata accessor for AppInfoBuilder();
  uint64_t v16 = swift_allocObject();
  static Device.current.getter();
  __swift_project_boxed_opaque_existential_1(v45, v45[3]);
  dispatch thunk of DeviceState.siriLocale.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
  swift_retain();
  specialized static PhoneCallRecord.getBuilder(callRecord:options:appInfoBuilder:locale:)(v15, 0, v16, v14);
  type metadata accessor for PhoneCallRecord(0);
  swift_allocObject();
  uint64_t v17 = PhoneCallRecord.init(builder:)();

  uint64_t v18 = v14;
  uint64_t v19 = v2;
  (*(void (**)(void *, uint64_t))(v11 + 8))(v18, v9);
  swift_release_n();
  id v20 = *(void **)(v2 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin19ReadVoiceMailAction_intentResponse);
  id v21 = [v20 callRecords];
  if (!v21)
  {
LABEL_11:
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v34 = v41;
    uint64_t v35 = __swift_project_value_buffer(v41, (uint64_t)static Logger.siriPhone);
    (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v6, v35, v34);
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      v45[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 136315138;
      uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000003ALL, 0x80000000004920E0, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_0, v36, v37, "%s", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    static SiriKitLifecycle._logCrashToEventBus(_:)();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x9A920);
  }
  uint64_t v22 = v21;
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INCallRecord);
  unint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v23 >> 62))
  {
    Swift::Int v24 = *(void *)((char *)&dword_10 + (v23 & 0xFFFFFFFFFFFFFF8));
    if (v24) {
      goto LABEL_4;
    }
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v33)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  Swift::Int v24 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_4:
  swift_bridgeObjectRelease();
  ReadVoiceMailAction.getVoiceMailPosition(callRecordsCount:)(v24);
  uint64_t v41 = (uint64_t)v20;
  int v25 = *(unsigned __int8 *)(v17 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin15PhoneCallRecord_unseen);
  type metadata accessor for PhoneSearchCallHistoryIntent(0);
  uint64_t v26 = *(void **)(v19 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin19ReadVoiceMailAction_intent);
  swift_retain();
  PhoneSearchCallHistoryIntent.__allocating_init(intent:)(v26);
  INSearchCallHistoryIntent.isSingleDateRequest.getter();
  INSearchCallHistoryIntent.isTimeRangeRequest.getter();
  uint64_t v27 = v44;
  SpeakableString.init(print:speak:)();
  uint64_t v28 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v27, 0, 1, v28);
  INSearchCallHistoryIntentResponse.newRecordsCount.getter();
  INSearchCallHistoryIntentResponse.savedRecordsCount.getter();
  uint64_t v29 = OUTLINED_FUNCTION_1_19();
  if (v25 == 1) {
    v30(v29);
  }
  else {
    v31(v29);
  }
  swift_release_n();
  swift_release();
  return outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v27, &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t VoiceMailPosition.rawValue.getter(char a1)
{
  uint64_t result = 0x7473726966;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x656C6464696DLL;
      break;
    case 2:
      uint64_t result = 1953718636;
      break;
    case 3:
      uint64_t result = 0x6E776F6E6B6E75;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ReadVoiceMailAction.getVoiceMailPosition(callRecordsCount:)(Swift::Int a1)
{
  uint64_t v3 = type metadata accessor for Page();
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_5_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItem<INCallRecord>);
  PaginatedItem.item.getter();
  char v7 = INCallRecord.unseen.getter();

  if (v7 == 2) {
    return 3;
  }
  unint64_t v9 = INSearchCallHistoryIntentResponse.newRecordsCount.getter();
  if (v7)
  {
    a1 = v9;
    Swift::Int v10 = 0;
  }
  else
  {
    Swift::Int v10 = v9;
  }
  PaginatedItem.page.getter();
  Swift::Int v11 = Page.pageIndex.getter();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v3);
  return VoiceMailPosition.init(start:end:index:)(v10, a1, v11);
}

PhoneCallFlowDelegatePlugin::VoiceMailPosition __swiftcall VoiceMailPosition.init(start:end:index:)(Swift::Int start, Swift::Int end, Swift::Int index)
{
  if (start == index)
  {
    LOBYTE(start) = 0;
    return (char)start;
  }
  if (__OFSUB__(end, 1))
  {
    __break(1u);
    goto LABEL_14;
  }
  if (end - 1 == index)
  {
    LOBYTE(start) = 2;
    return (char)start;
  }
  if (end < start)
  {
LABEL_14:
    __break(1u);
    return (char)start;
  }
  if (end < index || index < start) {
    LOBYTE(start) = 3;
  }
  else {
    LOBYTE(start) = 1;
  }
  return (char)start;
}

uint64_t ReadVoiceMailAction.deinit()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin19ReadVoiceMailAction_paginatedItem;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItem<INCallRecord>);
  OUTLINED_FUNCTION_15();
  (*(void (**)(uint64_t))(v2 + 8))(v1);

  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin19ReadVoiceMailAction_aceServiceInvoker);
  swift_release();
  return v0;
}

uint64_t ReadVoiceMailAction.__deallocating_deinit()
{
  ReadVoiceMailAction.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for StaticAction.nextAction.setter in conformance ReadVoiceMailAction()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

void (*protocol witness for StaticAction.nextAction.modify in conformance ReadVoiceMailAction(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(void *)v1 + 160))();
  return protocol witness for StaticAction.nextAction.modify in conformance PlayVoiceMailAction;
}

uint64_t protocol witness for Action.nextAction.getter in conformance ReadVoiceMailAction()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t protocol witness for Action.run(_:) in conformance ReadVoiceMailAction()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

PhoneCallFlowDelegatePlugin::VoiceMailPosition_optional __swiftcall VoiceMailPosition.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of VoiceMailPosition.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return (PhoneCallFlowDelegatePlugin::VoiceMailPosition_optional)4;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::VoiceMailPosition_optional)v3;
  }
}

uint64_t base witness table accessor for Action in ReadVoiceMailAction()
{
  return _s27PhoneCallFlowDelegatePlugin19PlayVoiceMailActionCAC07SiriKitC00I0AAWlTm_0(&lazy protocol witness table cache variable for type ReadVoiceMailAction and conformance ReadVoiceMailAction, (void (*)(uint64_t))type metadata accessor for ReadVoiceMailAction);
}

uint64_t type metadata accessor for ReadVoiceMailAction()
{
  uint64_t result = type metadata singleton initialization cache for ReadVoiceMailAction;
  if (!type metadata singleton initialization cache for ReadVoiceMailAction) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in ReadVoiceMailAction()
{
  return _s27PhoneCallFlowDelegatePlugin19PlayVoiceMailActionCAC07SiriKitC00I0AAWlTm_0(&lazy protocol witness table cache variable for type ReadVoiceMailAction and conformance ReadVoiceMailAction, (void (*)(uint64_t))type metadata accessor for ReadVoiceMailAction);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance VoiceMailPosition(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t lazy protocol witness table accessor for type VoiceMailPosition and conformance VoiceMailPosition()
{
  unint64_t result = lazy protocol witness table cache variable for type VoiceMailPosition and conformance VoiceMailPosition;
  if (!lazy protocol witness table cache variable for type VoiceMailPosition and conformance VoiceMailPosition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceMailPosition and conformance VoiceMailPosition);
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance VoiceMailPosition()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance VoiceMailPosition()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance VoiceMailPosition()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

PhoneCallFlowDelegatePlugin::VoiceMailPosition_optional protocol witness for RawRepresentable.init(rawValue:) in conformance VoiceMailPosition@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::VoiceMailPosition_optional *a2@<X8>)
{
  result.value = VoiceMailPosition.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance VoiceMailPosition@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = VoiceMailPosition.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_9AF18@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 144))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t ObjC metadata update function for ReadVoiceMailAction()
{
  return type metadata accessor for ReadVoiceMailAction();
}

void type metadata completion function for ReadVoiceMailAction()
{
  type metadata accessor for PaginatedItem<INCallRecord>();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void type metadata accessor for PaginatedItem<INCallRecord>()
{
  if (!lazy cache variable for type metadata for PaginatedItem<INCallRecord>)
  {
    type metadata accessor for CNContactStore(255, (unint64_t *)&lazy cache variable for type metadata for INCallRecord);
    unint64_t v0 = type metadata accessor for PaginatedItem();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PaginatedItem<INCallRecord>);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for VoiceMailPosition(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x9B178);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VoiceMailPosition()
{
  return &type metadata for VoiceMailPosition;
}

uint64_t sub_9B1B0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for closure #1 in closure #1 in ReadVoiceMailAction.run(_:)(uint64_t a1)
{
  return closure #1 in closure #1 in ReadVoiceMailAction.run(_:)(a1, *(void (**)(uint64_t))(v1 + 16));
}

uint64_t _s27PhoneCallFlowDelegatePlugin19PlayVoiceMailActionCAC07SiriKitC00I0AAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_19()
{
  return v0;
}

id OUTLINED_FUNCTION_3_20@<X0>(uint64_t a1@<X8>)
{
  return *(id *)(v1 + a1);
}

uint64_t MainFlow.parse.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for Parse();
  OUTLINED_FUNCTION_15();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);

  return v5(a1, v1, v3);
}

uint64_t MainFlow.sharedGlobals.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for MainFlow();
  return outlined init with copy of SignalProviding(v1 + *(int *)(v3 + 20), a1);
}

uint64_t type metadata accessor for MainFlow()
{
  uint64_t result = type metadata singleton initialization cache for MainFlow;
  if (!type metadata singleton initialization cache for MainFlow) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t MainFlow.execute(completion:)()
{
  type metadata accessor for MainFlow();
  lazy protocol witness table accessor for type MainFlow and conformance MainFlow(&lazy protocol witness table cache variable for type MainFlow and conformance MainFlow, (void (*)(uint64_t))type metadata accessor for MainFlow);

  return Flow.deferToExecuteAsync(_:)();
}

uint64_t MainFlow.execute()(uint64_t a1)
{
  v2[20] = a1;
  v2[21] = v1;
  type metadata accessor for CATOption();
  v2[22] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for ExecuteResponse();
  v2[23] = v3;
  v2[24] = *(void *)(v3 - 8);
  v2[25] = swift_task_alloc();
  return _swift_task_switch(MainFlow.execute(), 0, 0);
}

uint64_t MainFlow.execute()()
{
  Swift::Int v11 = v0;
  MainFlow.makeNextFlow()(v0 + 2);
  uint64_t v1 = (uint64_t)(v0 + 12);
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.siriPhone);
  outlined init with copy of SignalProviding((uint64_t)(v0 + 2), (uint64_t)(v0 + 7));
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    __swift_project_boxed_opaque_existential_1(v0 + 7, v0[10]);
    swift_getDynamicType();
    uint64_t v6 = _typeName(_:qualified:)();
    v0[19] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v1 = (uint64_t)(v0 + 12);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
    _os_log_impl(&dword_0, v3, v4, "#MainFlow Pushing %s.", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  }

  outlined init with copy of SignalProviding((uint64_t)(v0 + 2), v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Flow);
  type metadata accessor for AnyFlow();
  if (swift_dynamicCast())
  {
    static ExecuteResponse.complete(next:)();
    swift_release();
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
    static ExecuteResponse.complete<A>(next:)();
  }
  (*(void (**)(void, void, void))(v0[24] + 32))(v0[20], v0[25], v0[23]);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t MainFlow.makeNextFlow()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v68 = a1;
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for Parse.DirectInvocation();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v62 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for PhoneError();
  __chkstk_darwin(v6);
  uint64_t v66 = (_OWORD *)((char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v69 = type metadata accessor for Parse();
  uint64_t v8 = *(void *)(v69 - 8);
  uint64_t v9 = __chkstk_darwin(v69);
  uint64_t v70 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v67 = (char *)&v55 - v11;
  uint64_t v12 = type metadata accessor for MainFlow();
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v61 = (uint64_t)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v55 - v15;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v63 = v4;
  uint64_t v64 = v3;
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = __swift_project_value_buffer(v17, (uint64_t)static Logger.siriPhone);
  outlined init with copy of MainFlow(v2, (uint64_t)v16, (void (*)(void))type metadata accessor for MainFlow);
  uint64_t v65 = v18;
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v60 = v6;
    uint64_t v22 = (uint8_t *)v21;
    uint64_t v57 = swift_slowAlloc();
    uint64_t v58 = v2;
    uint64_t v72 = v57;
    *(_DWORD *)uint64_t v22 = 136315138;
    uint64_t v55 = v22 + 4;
    uint64_t v56 = v8;
    uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    uint64_t v23 = (uint64_t)v67;
    uint64_t v24 = v69;
    v59(v67, v16, v69);
    uint64_t v25 = String.init(describing:)(v23);
    uint64_t v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of MainFlow((uint64_t)v16, (void (*)(void))type metadata accessor for MainFlow);
    os_log_type_t v27 = v20;
    uint64_t v28 = v56;
    _os_log_impl(&dword_0, v19, v27, "#MainFlow Executing MainFlow with parse: %s", v22, 0xCu);
    swift_arrayDestroy();
    uint64_t v2 = v58;
    swift_slowDealloc();
    uint64_t v6 = v60;
    swift_slowDealloc();

    uint64_t v29 = (void (*)(char *, uint64_t, uint64_t))v59;
  }
  else
  {
    outlined destroy of MainFlow((uint64_t)v16, (void (*)(void))type metadata accessor for MainFlow);

    uint64_t v28 = v8;
    uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    uint64_t v24 = v69;
  }
  uint64_t v30 = v70;
  v29(v70, v2, v24);
  int v31 = (*(uint64_t (**)(char *, uint64_t))(v28 + 88))(v30, v24);
  if (v31 == enum case for Parse.NLv3IntentOnly(_:))
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v70, v24);
    return MainFlow.makeFlowForIntent()((uint64_t)v68);
  }
  int v33 = v31;
  if (v31 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    (*(void (**)(char *, uint64_t))(v28 + 96))(v70, v24);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    swift_release();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl(&dword_0, v34, v35, "#MainFlow Encountered NLv3PlusServerConversion. This is unexpected!!!", v36, 2u);
      swift_slowDealloc();
    }

    uint64_t v37 = (uint64_t)v66;
    swift_storeEnumTagMultiPayload();
    lazy protocol witness table accessor for type MainFlow and conformance MainFlow((unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError, (void (*)(uint64_t))type metadata accessor for PhoneError);
    swift_allocError();
    PhoneError.logged()(v38);
    outlined destroy of MainFlow(v37, (void (*)(void))type metadata accessor for PhoneError);
    swift_willThrow();
    uint64_t v39 = type metadata accessor for NLIntent();
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v39 - 8) + 8))(v70, v39);
  }
  else if (v31 == enum case for Parse.directInvocation(_:))
  {
    uint64_t v40 = v70;
    (*(void (**)(char *, uint64_t))(v28 + 96))(v70, v24);
    uint64_t v42 = (uint64_t)v62;
    uint64_t v41 = v63;
    uint64_t v43 = v64;
    (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v62, v40, v64);
    MainFlow.makeFlowForDirectInvocation(_:)(v42, v68);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 8))(v42, v43);
  }
  else
  {
    if (v31 == enum case for Parse.NLv4IntentOnly(_:))
    {
      (*(void (**)(char *, uint64_t))(v28 + 96))(v70, v24);
      swift_unknownObjectRelease();
      return MainFlow.makeFlowForIntent()((uint64_t)v68);
    }
    int v44 = enum case for Parse.uso(_:);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v70, v24);
    if (v33 == v44) {
      return MainFlow.makeFlowForIntent()((uint64_t)v68);
    }
    uint64_t v45 = v2;
    uint64_t v46 = v61;
    outlined init with copy of MainFlow(v45, v61, (void (*)(void))type metadata accessor for MainFlow);
    char v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v59 = (void (*)(char *, char *, uint64_t))v29;
      uint64_t v49 = (uint8_t *)swift_slowAlloc();
      uint64_t v72 = swift_slowAlloc();
      uint64_t v60 = v6;
      *(_DWORD *)uint64_t v49 = 136315138;
      uint64_t v70 = (char *)(v49 + 4);
      uint64_t v50 = (uint64_t)v67;
      v59(v67, (char *)v46, v24);
      uint64_t v51 = String.init(describing:)(v50);
      uint64_t v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, &v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of MainFlow(v46, (void (*)(void))type metadata accessor for MainFlow);
      _os_log_impl(&dword_0, v47, v48, "#MainFlow No flow for parse: %s", v49, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      outlined destroy of MainFlow(v46, (void (*)(void))type metadata accessor for MainFlow);
    }

    uint64_t v53 = (uint64_t)v66;
    *uint64_t v66 = xmmword_46A560;
    swift_storeEnumTagMultiPayload();
    lazy protocol witness table accessor for type MainFlow and conformance MainFlow((unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError, (void (*)(uint64_t))type metadata accessor for PhoneError);
    swift_allocError();
    PhoneError.logged()(v54);
    outlined destroy of MainFlow(v53, (void (*)(void))type metadata accessor for PhoneError);
    return swift_willThrow();
  }
}

uint64_t MainFlow.makeFlowForDirectInvocation(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  v107 = a2;
  uint64_t v105 = type metadata accessor for PhoneError();
  __chkstk_darwin(v105);
  v106 = (uint64_t *)&v96[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = type metadata accessor for CATOption();
  __chkstk_darwin(v4 - 8);
  v99 = &v96[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for Parse.DirectInvocation();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  v104 = &v96[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = &v96[-v11];
  __chkstk_darwin(v10);
  uint64_t v14 = &v96[-v13];
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v100 = type metadata accessor for Logger();
  __swift_project_value_buffer(v100, (uint64_t)static Logger.siriPhone);
  uint64_t v15 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16);
  v15(v14, a1, v6);
  uint64_t v117 = a1;
  v101 = v15;
  uint64_t v102 = v7 + 16;
  v15(v12, a1, v6);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  int v18 = v17;
  BOOL v19 = os_log_type_enabled(v16, v17);
  uint64_t v103 = v6;
  if (v19)
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v98 = swift_slowAlloc();
    uint64_t v111 = v98;
    *(_DWORD *)uint64_t v20 = 136315394;
    int v97 = v18;
    uint64_t v21 = Parse.DirectInvocation.identifier.getter();
    *(void *)&v110[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v23 = *(void (**)(unsigned char *, uint64_t))(v7 + 8);
    v23(v14, v6);
    *(_WORD *)(v20 + 12) = 2080;
    *(void *)&v110[0] = Parse.DirectInvocation.userData.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]?);
    uint64_t v24 = String.init<A>(describing:)();
    *(void *)&v110[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v23(v12, v6);
    uint64_t v26 = v109;
    _os_log_impl(&dword_0, v16, (os_log_type_t)v97, "#MainFlow Making flow for DirectInvocation(identifier=%s, payload=%s)", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    os_log_type_t v27 = *(void (**)(unsigned char *, uint64_t))(v7 + 8);
    v27(v14, v6);
    v27(v12, v6);

    uint64_t v26 = v109;
  }
  uint64_t v28 = Parse.DirectInvocation.userData.getter();
  if (!v28) {
    uint64_t v28 = Dictionary.init(dictionaryLiteral:)();
  }
  uint64_t v29 = v28;
  uint64_t v31 = Parse.DirectInvocation.identifier.getter();
  uint64_t v32 = v30;
  if (v31 == 0xD000000000000034 && v30 == 0x800000000048C760
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    StartAudioCallDirectAction.init(from:)(v29, v113);
    outlined init with take of StartAudioCallDirectAction?((uint64_t)v113, (uint64_t)v114);
    if (v114[1])
    {
      memcpy(__dst, v114, sizeof(__dst));
      uint64_t v33 = type metadata accessor for MainFlow();
      uint64_t v34 = (void *)(v26 + *(int *)(v33 + 20));
      default argument 2 of PhoneCallFlow.init(state:sharedGlobals:appFinder:eligibleAppsFinder:)(&v111, v33);
      uint64_t v35 = static CarPlayDirectInvocationFlowFactory.makeStartAudioCallDirectInvocationFlow(directAction:sharedGlobals:appFinder:)(__dst, v34, &v111);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v111);
      uint64_t v36 = type metadata accessor for AnyFlow();
      uint64_t v37 = v107;
      v107[3] = v36;
      v37[4] = (uint64_t)&protocol witness table for AnyFlow;
      uint64_t result = outlined release of StartAudioCallDirectAction?((uint64_t)v113);
LABEL_33:
      *uint64_t v37 = v35;
      return result;
    }
    goto LABEL_66;
  }
  if (v31 == 0xD000000000000034 && v32 == 0x800000000048C720
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    PhoneCallFlowDelegatePlugin::StartCallDirectAction_optional v39 = StartCallDirectAction.init(from:)((Swift::OpaquePointer)v29);
    if (v39.value.appBundleId._object)
    {
      uint64_t v40 = type metadata accessor for MainFlow();
      uint64_t v41 = (void *)(v26 + *(int *)(v40 + 20));
      default argument 2 of PhoneCallFlow.init(state:sharedGlobals:appFinder:eligibleAppsFinder:)(&v111, v40);
      v116[0] = v39;
      memset(&v116[1], 0, 24);
      *(_OWORD *)&v116[2].value.appBundleId._object = xmmword_46A570;
      *(_OWORD *)&v116[3].value.appBundleId._object = xmmword_46A570;
      swift_bridgeObjectRetain();
      uint64_t v35 = static CarPlayDirectInvocationFlowFactory.makeStartAudioCallDirectInvocationFlow(directAction:sharedGlobals:appFinder:)(&v116[0].value.appBundleId._countAndFlagsBits, v41, &v111);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data?(0, 0xF000000000000000);
      outlined consume of Data?(0, 0xF000000000000000);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v111);
LABEL_18:
      uint64_t result = type metadata accessor for AnyFlow();
      uint64_t v37 = v107;
      v107[3] = result;
      v37[4] = (uint64_t)&protocol witness table for AnyFlow;
      goto LABEL_33;
    }
    goto LABEL_66;
  }
  if (one-time initialization token for identifier != -1) {
    swift_once();
  }
  BOOL v42 = static IdentifyIncomingCallerDirectAction.identifier == v31 && unk_5D5160 == v32;
  if (v42 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v43 = v26;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (one-time initialization token for announceTelephony != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v100, (uint64_t)static Logger.announceTelephony);
    int v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.info.getter();
    BOOL v46 = os_log_type_enabled(v44, v45);
    uint64_t v47 = v117;
    uint64_t v48 = v103;
    if (v46)
    {
      uint64_t v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v49 = 0;
      _os_log_impl(&dword_0, v44, v45, "#MainFlow CallKit announcement directInvocation received.", v49, 2u);
      swift_slowDealloc();
    }

    uint64_t v50 = (uint64_t)v104;
    v101(v104, v47, v48);
    if (!specialized IdentifyIncomingCallerDirectAction.__allocating_init(invocation:contactStore:)(v50, (uint64_t)[objc_allocWithZone((Class)CNContactStore) init]))goto LABEL_66; {
    uint64_t v51 = type metadata accessor for AnnounceCallFlow();
    }
    uint64_t v52 = type metadata accessor for MainFlow();
    outlined init with copy of SignalProviding(v43 + *(int *)(v52 + 20), (uint64_t)&v111);
    uint64_t v53 = swift_retain();
    uint64_t v54 = AnnounceCallFlow.__allocating_init(directAction:sharedGlobals:)(v53, &v111);
    goto LABEL_32;
  }
  if (v31 == 0xD000000000000046 && v32 == 0x8000000000492120
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v56 = (uint64_t)v104;
    v101(v104, v117, v103);
    uint64_t v57 = specialized AnnounceIncomingCallNotificationDirectAction.__allocating_init(invocation:contactStore:)(v56, (uint64_t)[objc_allocWithZone((Class)CNContactStore) init]);
    if (!v57) {
      goto LABEL_66;
    }
    uint64_t v58 = (uint64_t)v57;
    uint64_t v51 = type metadata accessor for AnnounceCallFlow();
    uint64_t v59 = type metadata accessor for MainFlow();
    outlined init with copy of SignalProviding(v26 + *(int *)(v59 + 20), (uint64_t)&v111);
    uint64_t v60 = swift_retain();
    default argument 2 of PhoneCallFlow.init(state:sharedGlobals:appFinder:eligibleAppsFinder:)(v110, v60);
    uint64_t v54 = AnnounceCallFlow.__allocating_init(directAction:sharedGlobals:appFinder:)(v58, &v111, v110);
LABEL_32:
    uint64_t v35 = v54;
    uint64_t v55 = v107;
    v107[3] = v51;
    uint64_t v37 = v55;
    v55[4] = lazy protocol witness table accessor for type MainFlow and conformance MainFlow((unint64_t *)&lazy protocol witness table cache variable for type AnnounceCallFlow and conformance AnnounceCallFlow, (void (*)(uint64_t))type metadata accessor for AnnounceCallFlow);
    uint64_t result = swift_release();
    goto LABEL_33;
  }
  if (one-time initialization token for identifier != -1) {
    swift_once();
  }
  uint64_t v61 = *(void *)&static AnnounceVoicemailDirectAction.identifier[16];
  uint64_t v62 = *(void **)&static AnnounceVoicemailDirectAction.identifier[24];
  uint64_t v111 = *(void *)static AnnounceVoicemailDirectAction.identifier;
  uint64_t v112 = *(void *)&static AnnounceVoicemailDirectAction.identifier[8];
  swift_bridgeObjectRetain();
  v63._countAndFlagsBits = 46;
  v63._object = (void *)0xE100000000000000;
  String.append(_:)(v63);
  swift_bridgeObjectRetain();
  v64._countAndFlagsBits = v61;
  v64._object = v62;
  String.append(_:)(v64);
  swift_bridgeObjectRelease();
  if (v111 == v31 && v112 == v32)
  {
    swift_bridgeObjectRelease();
    uint64_t v67 = v26;
  }
  else
  {
    char v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v67 = v26;
    if ((v66 & 1) == 0)
    {
      if (one-time initialization token for identifier != -1) {
        swift_once();
      }
      BOOL v68 = static AnnounceDropInCallDirectAction.identifier == v31 && unk_5D4AE0 == v32;
      if (v68 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v69 = AnnounceDropInCallDirectAction.init(from:)(v29);
        if ((v70 & 1) == 0)
        {
          uint64_t v71 = v69;
          uint64_t v72 = type metadata accessor for MainFlow();
          outlined init with copy of SignalProviding(v26 + *(int *)(v72 + 20), (uint64_t)&v111);
          type metadata accessor for AnnounceCallBellCATPatternsExecutor();
          static CATOption.defaultMode.getter();
          uint64_t v73 = CATWrapper.__allocating_init(options:globals:)();
          type metadata accessor for ResponseFactory();
          swift_allocObject();
          uint64_t v74 = ResponseFactory.init()();
          uint64_t v75 = type metadata accessor for AnnounceDropInCallFlow();
          uint64_t v76 = swift_allocObject();
          uint64_t v35 = specialized AnnounceDropInCallFlow.init(announcementType:sharedGlobals:announceCallBellCatPatterns:responseGenerator:)(v71, (uint64_t)&v111, v73, v74, v76);
          uint64_t v37 = v107;
          v107[3] = v75;
          uint64_t result = lazy protocol witness table accessor for type MainFlow and conformance MainFlow(&lazy protocol witness table cache variable for type AnnounceDropInCallFlow and conformance AnnounceDropInCallFlow, (void (*)(uint64_t))type metadata accessor for AnnounceDropInCallFlow);
          v37[4] = result;
          goto LABEL_33;
        }
        goto LABEL_66;
      }
      swift_bridgeObjectRelease();
      if (v31 == 0xD00000000000002CLL && v32 == 0x8000000000492170)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v87 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v87 & 1) == 0) {
          goto LABEL_66;
        }
      }
      v88 = (void *)(v26 + *(int *)(type metadata accessor for MainFlow() + 20));
      uint64_t v89 = v88[3];
      uint64_t v90 = v88[4];
      __swift_project_boxed_opaque_existential_1(v88, v89);
      uint64_t v91 = (*(uint64_t (**)(uint64_t, uint64_t))(v90 + 56))(v89, v90);
      LOBYTE(v89) = (*(uint64_t (**)(uint64_t))(*(void *)v91 + 200))(v91);
      swift_release();
      if (v89)
      {
        uint64_t v35 = static HangUpDirectInvocationFlowFactory.makeHangUpFlow(sharedGlobals:)(v88);
        goto LABEL_18;
      }
LABEL_66:
      uint64_t v92 = Parse.DirectInvocation.identifier.getter();
      uint64_t v93 = (uint64_t)v106;
      uint64_t *v106 = v92;
      *(void *)(v93 + 8) = v94;
      swift_storeEnumTagMultiPayload();
      lazy protocol witness table accessor for type MainFlow and conformance MainFlow((unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError, (void (*)(uint64_t))type metadata accessor for PhoneError);
      swift_allocError();
      PhoneError.logged()(v95);
      outlined destroy of MainFlow(v93, (void (*)(void))type metadata accessor for PhoneError);
      return swift_willThrow();
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v77 = Parse.DirectInvocation.userData.getter();
  uint64_t v78 = v108;
  id v79 = specialized static DICodable.from(_:)(v77);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v78)
  {
    uint64_t v80 = type metadata accessor for MainFlow();
    outlined init with copy of SignalProviding(v67 + *(int *)(v80 + 20), (uint64_t)&v111);
    uint64_t v81 = one-time initialization token for instance;
    swift_retain();
    if (v81 != -1) {
      swift_once();
    }
    v82 = (void *)static SiriPhoneDefaults.instance;
    id v83 = objc_allocWithZone((Class)CNContactStore);
    id v84 = v82;
    id v85 = [v83 init];
    outlined init with copy of SignalProviding((uint64_t)&v111, (uint64_t)v110);
    uint64_t v86 = type metadata accessor for AnnounceVoicemailFlow();
    uint64_t v35 = swift_allocObject();
    *(void *)(v35 + 56) = &type metadata for SiriPhoneDefaults;
    *(void *)(v35 + 64) = &protocol witness table for SiriPhoneDefaults;
    *(void *)(v35 + 32) = v82;
    *(void *)(v35 + 136) = type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for CNContactStore);
    *(void *)(v35 + 144) = &protocol witness table for CNContactStore;
    *(void *)(v35 + 112) = v85;
    *(void *)(v35 + 16) = v79;
    *(unsigned char *)(v35 + 24) = 0;
    outlined init with take of AppSelectionSignalComponent(v110, v35 + 72);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v111);
    uint64_t v37 = v107;
    v107[3] = v86;
    v37[4] = lazy protocol witness table accessor for type MainFlow and conformance MainFlow(&lazy protocol witness table cache variable for type AnnounceVoicemailFlow and conformance AnnounceVoicemailFlow, (void (*)(uint64_t))type metadata accessor for AnnounceVoicemailFlow);
    uint64_t result = swift_release();
    goto LABEL_33;
  }
  return result;
}

uint64_t MainFlow.makeFlowForIntent()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v24 = a1;
  uint64_t v23 = type metadata accessor for Parse();
  uint64_t v2 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Input();
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (void *)(v1 + *(int *)(type metadata accessor for MainFlow() + 20));
  uint64_t v10 = v8[3];
  uint64_t v9 = v8[4];
  __swift_project_boxed_opaque_existential_1(v8, v10);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 72))(v10, v9);
  uint64_t v13 = v8[3];
  uint64_t v12 = v8[4];
  __swift_project_boxed_opaque_existential_1(v8, v13);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v12 + 120))(&v26, v13, v12);
  (*(void (**)(void *__return_ptr, uint64_t, long long *))(*(void *)v11 + 184))(v29, v1, &v26);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
  outlined init with copy of AnyPhoneNLIntent?((uint64_t)v29, (uint64_t)&v26);
  if (v27)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPhoneNLIntent);
    type metadata accessor for PhoneCallControlNLIntent();
    if (swift_dynamicCast())
    {
      swift_release();
      (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v1, v23);
      Input.init(parse:)();
      uint64_t v14 = outlined init with copy of SignalProviding((uint64_t)v8, (uint64_t)&v26);
      default argument 2 of PhoneCallFlow.init(state:sharedGlobals:appFinder:eligibleAppsFinder:)(v25, v14);
      uint64_t v15 = type metadata accessor for PhoneCallControlFlow();
      swift_allocObject();
      uint64_t v16 = PhoneCallControlFlow.init(input:sharedGlobals:appFinder:)((uint64_t)v7, (uint64_t)&v26, (uint64_t)v25);
      uint64_t v27 = v15;
      uint64_t v28 = lazy protocol witness table accessor for type MainFlow and conformance MainFlow(&lazy protocol witness table cache variable for type PhoneCallControlFlow and conformance PhoneCallControlFlow, (void (*)(uint64_t))type metadata accessor for PhoneCallControlFlow);
      *(void *)&long long v26 = v16;
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v29, &demangling cache variable for type metadata for AnyPhoneNLIntent?);
      return outlined init with take of AppSelectionSignalComponent(&v26, v24);
    }
  }
  else
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)&v26, &demangling cache variable for type metadata for AnyPhoneNLIntent?);
  }
  uint64_t v18 = v24;
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v1, v23);
  Input.init(parse:)();
  uint64_t v19 = outlined init with copy of SignalProviding((uint64_t)v8, (uint64_t)&v26);
  default argument 2 of PhoneCallFlow.init(state:sharedGlobals:appFinder:eligibleAppsFinder:)(v25, v19);
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  uint64_t v20 = static EligibleAppFinder.instance;
  swift_retain();
  uint64_t v21 = specialized PhoneCallFlow.__allocating_init(input:sharedGlobals:appFinder:eligibleAppsFinder:)((uint64_t)v7, (uint64_t)&v26, (uint64_t)v25, v20);
  uint64_t v27 = type metadata accessor for PhoneCallFlow(0);
  uint64_t v28 = lazy protocol witness table accessor for type MainFlow and conformance MainFlow(&lazy protocol witness table cache variable for type PhoneCallFlow and conformance PhoneCallFlow, (void (*)(uint64_t))type metadata accessor for PhoneCallFlow);
  *(void *)&long long v26 = v21;
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v29, &demangling cache variable for type metadata for AnyPhoneNLIntent?);
  return outlined init with take of AppSelectionSignalComponent(&v26, v18);
}

id specialized static DICodable.from(_:)(uint64_t a1)
{
  type metadata accessor for AnnounceVoicemailDirectAction();
  if (!a1) {
    Dictionary.init(dictionaryLiteral:)();
  }
  uint64_t v3 = self;
  swift_bridgeObjectRetain();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v12[0] = 0;
  id v5 = [v3 dataWithPropertyList:isa format:200 options:0 error:v12];

  id v6 = v12[0];
  if (v5)
  {
    uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v9 = v8;

    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    lazy protocol witness table accessor for type MainFlow and conformance MainFlow(&lazy protocol witness table cache variable for type AnnounceVoicemailDirectAction and conformance AnnounceVoicemailDirectAction, (void (*)(uint64_t))type metadata accessor for AnnounceVoicemailDirectAction);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    swift_release();
    id result = (id)outlined consume of Data._Representation(v7, v9);
    if (!v1) {
      return v12[1];
    }
  }
  else
  {
    uint64_t v11 = v6;
    _convertNSErrorToError(_:)();

    return (id)swift_willThrow();
  }
  return result;
}

uint64_t MainFlow.init(parse:sharedGlobals:)@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  type metadata accessor for Parse();
  OUTLINED_FUNCTION_15();
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(a3, a1);
  uint64_t v7 = a3 + *(int *)(type metadata accessor for MainFlow() + 20);

  return outlined init with take of AppSelectionSignalComponent(a2, v7);
}

uint64_t protocol witness for Flow.execute() in conformance MainFlow(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = protocol witness for Flow.execute() in conformance PhoneFlow<A, B>;
  return MainFlow.execute()(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance MainFlow()
{
  return Flow<>.exitValue.getter();
}

uint64_t *initializeBufferWithCopyOfBuffer for MainFlow(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Parse();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    long long v9 = *(_OWORD *)((char *)a2 + v8 + 24);
    *(_OWORD *)((char *)a1 + v8 + 24) = v9;
    (**(void (***)(void))(v9 - 8))();
  }
  return a1;
}

uint64_t destroy for MainFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Parse();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);

  return __swift_destroy_boxed_opaque_existential_1(v5);
}

uint64_t initializeWithCopy for MainFlow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Parse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  long long v8 = *(_OWORD *)(a2 + v7 + 24);
  *(_OWORD *)(a1 + v7 + 24) = v8;
  (**(void (***)(void))(v8 - 8))();
  return a1;
}

uint64_t assignWithCopy for MainFlow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Parse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + *(int *)(a3 + 20)), (uint64_t *)(a2 + *(int *)(a3 + 20)));
  return a1;
}

uint64_t initializeWithTake for MainFlow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Parse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  long long v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  return a1;
}

uint64_t assignWithTake for MainFlow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Parse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  __swift_destroy_boxed_opaque_existential_1(a1 + v7);
  long long v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for MainFlow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_9DAF0);
}

uint64_t sub_9DAF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Parse();
  OUTLINED_FUNCTION_1_6();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 24);
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for MainFlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_9DB94);
}

void sub_9DB94(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for Parse();
  OUTLINED_FUNCTION_1_6();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  }
}

uint64_t type metadata completion function for MainFlow()
{
  uint64_t result = type metadata accessor for Parse();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t specialized PhoneCallFlow.__allocating_init(input:sharedGlobals:appFinder:eligibleAppsFinder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for PhoneCallFlow.State(0);
  __chkstk_darwin(v8);
  long long v10 = &v20[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = type metadata accessor for Input();
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v12 + 16))(v10, a1, v11);
  swift_storeEnumTagMultiPayload();
  outlined init with copy of SignalProviding(a2, (uint64_t)v21);
  outlined init with copy of SignalProviding(a3, (uint64_t)v20);
  type metadata accessor for PhoneCallFlow(0);
  uint64_t v13 = swift_allocObject();
  swift_retain();
  uint64_t v14 = specialized PhoneCallFlow.init(state:sharedGlobals:appFinder:eligibleAppsFinder:)((uint64_t)v10, v21, (uint64_t)v20, a4, v13);
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.siriPhone);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl(&dword_0, v16, v17, "#PhoneCallFlow state is initialized.", v18, 2u);
    swift_slowDealloc();
  }
  swift_release();

  __swift_destroy_boxed_opaque_existential_1(a3);
  __swift_destroy_boxed_opaque_existential_1(a2);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v11);
  return v14;
}

uint64_t specialized PhoneCallFlow.init(state:sharedGlobals:appFinder:eligibleAppsFinder:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v14[3] = type metadata accessor for EligibleAppFinder();
  void v14[4] = &protocol witness table for EligibleAppFinder;
  v14[0] = a4;
  *(void *)(a5 + 176) = _swiftEmptyArrayStorage;
  outlined init with copy of SignalProviding(a3, a5 + 16);
  outlined init with copy of MainFlow(a1, a5 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin13PhoneCallFlow_state, (void (*)(void))type metadata accessor for PhoneCallFlow.State);
  outlined init with copy of SignalProviding((uint64_t)a2, a5 + 56);
  outlined init with copy of SignalProviding((uint64_t)v14, a5 + 96);
  uint64_t v10 = a2[3];
  uint64_t v11 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v10);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v11 + 216))(v13, v10, v11);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  __swift_destroy_boxed_opaque_existential_1(a3);
  outlined destroy of MainFlow(a1, (void (*)(void))type metadata accessor for PhoneCallFlow.State);
  outlined init with take of AppSelectionSignalComponent(v13, a5 + 136);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a2);
  return a5;
}

uint64_t outlined init with copy of MainFlow(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_15();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of MainFlow(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_15();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t specialized IdentifyIncomingCallerDirectAction.__allocating_init(invocation:contactStore:)(uint64_t a1, uint64_t a2)
{
  v28[3] = type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for CNContactStore);
  v28[4] = &protocol witness table for CNContactStore;
  v28[0] = a2;
  uint64_t v4 = Parse.DirectInvocation.userData.getter();
  if (v4)
  {
    uint64_t v5 = v4;
    if (one-time initialization token for announceTelephony != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.announceTelephony);
    swift_bridgeObjectRetain_n();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      v26[0] = a1;
      v27[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v10 = Dictionary.description.getter();
      unint64_t v12 = v11;
      swift_bridgeObjectRelease();
      v26[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v7, v8, "#IdentifyIncomingCallerDirectAction: Direct Invocation payload: %s.", v9, 0xCu);
      swift_arrayDestroy();
      a1 = v26[0];
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    outlined init with copy of SignalProviding((uint64_t)v28, (uint64_t)v27);
    type metadata accessor for IdentifyIncomingCallerDirectAction();
    uint64_t v19 = swift_allocObject();
    uint64_t v20 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v27, v27[3]);
    __chkstk_darwin(v20);
    uint64_t v22 = (void *)((char *)v26 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v23 + 16))(v22);
    uint64_t v18 = specialized IdentifyIncomingCallerDirectAction.init(from:contactStore:)(v5, *v22, v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    uint64_t v24 = type metadata accessor for Parse.DirectInvocation();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(a1, v24);
  }
  else
  {
    if (one-time initialization token for announceTelephony != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.announceTelephony);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_0, v14, v15, "#IdentifyIncomingCallerDirectAction: No userData in DirectInvocation.", v16, 2u);
      swift_slowDealloc();
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    uint64_t v17 = type metadata accessor for Parse.DirectInvocation();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(a1, v17);
    return 0;
  }
  return v18;
}

void *specialized AnnounceIncomingCallNotificationDirectAction.__allocating_init(invocation:contactStore:)(uint64_t a1, uint64_t a2)
{
  v55[3] = type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for CNContactStore);
  v55[4] = &protocol witness table for CNContactStore;
  v55[0] = a2;
  uint64_t v4 = Parse.DirectInvocation.userData.getter();
  if (!v4)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.siriPhone);
    unint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v12, v13)) {
      goto LABEL_24;
    }
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    os_log_type_t v15 = "#AnnounceIncomingCallNotificationDirectAction: No userData.";
LABEL_23:
    _os_log_impl(&dword_0, v12, v13, v15, v14, 2u);
    swift_slowDealloc();
LABEL_24:

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v55);
    uint64_t v18 = type metadata accessor for Parse.DirectInvocation();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(a1, v18);
    return 0;
  }
  uint64_t v5 = v4;
  specialized Dictionary.subscript.getter(0x6C646E7542707061, 0xEB00000000644965, v4, v51);
  if (!v52)
  {
    swift_bridgeObjectRelease();
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v51, &demangling cache variable for type metadata for Any?);
LABEL_13:
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.siriPhone);
    unint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v12, v13)) {
      goto LABEL_24;
    }
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    os_log_type_t v15 = "#AnnounceIncomingCallNotificationDirectAction: No App bundleId.";
    goto LABEL_23;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  uint64_t v7 = v53;
  unint64_t v6 = v54;
  specialized Dictionary.subscript.getter(0x6163696669746F6ELL, 0xEC0000006E6F6974, v5, v51);
  swift_bridgeObjectRelease();
  if (!v52)
  {
    swift_bridgeObjectRelease();
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v51, &demangling cache variable for type metadata for Any?);
LABEL_19:
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.siriPhone);
    unint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v12, v13)) {
      goto LABEL_24;
    }
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    os_log_type_t v15 = "#AnnounceIncomingCallNotificationDirectAction: No notification data in UserData.";
    goto LABEL_23;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  uint64_t v8 = v53;
  unint64_t v9 = v54;
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for NSKeyedUnarchiver);
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for UNNotification);
  uint64_t v10 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
  uint64_t v21 = v10;
  if (!v10)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.siriPhone);
    unint64_t v12 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl(&dword_0, v12, v33, "#AnnounceIncomingCallNotificationDirectAction: No notification in archived data.", v34, 2u);
      swift_slowDealloc();
    }
    outlined consume of Data._Representation(v8, v9);
    goto LABEL_24;
  }
  uint64_t v50 = v8;
  uint64_t v22 = one-time initialization token for siriPhone;
  id v23 = v10;
  if (v22 != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Logger.siriPhone);
  id v25 = v23;
  swift_bridgeObjectRetain_n();
  id v26 = v25;
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  int v29 = v28;
  uint64_t v49 = v26;
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v30 = swift_slowAlloc();
    BOOL v46 = (void *)swift_slowAlloc();
    uint64_t v47 = swift_slowAlloc();
    v51[0] = v47;
    *(_DWORD *)uint64_t v30 = 136315394;
    int v45 = v29;
    swift_bridgeObjectRetain();
    uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v6, v51);
    int v44 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v30 + 12) = 2112;
    unint64_t v48 = v9;
    uint64_t v53 = (uint64_t)v26;
    id v31 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *BOOL v46 = v21;

    _os_log_impl(&dword_0, v44, (os_log_type_t)v45, "#AnnounceIncomingCallNotificationDirectAction: initialized with bundleID: %s and notification %@.", (uint8_t *)v30, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v35 = v50;
  outlined init with copy of SignalProviding((uint64_t)v55, (uint64_t)v51);
  type metadata accessor for AnnounceIncomingCallNotificationDirectAction();
  uint64_t v36 = (void *)swift_allocObject();
  uint64_t v37 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v51, v52);
  __chkstk_darwin(v37);
  PhoneCallFlowDelegatePlugin::StartCallDirectAction_optional v39 = (uint64_t *)((char *)&v43 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v40 + 16))(v39);
  uint64_t v41 = v49;
  uint64_t v19 = specialized AnnounceIncomingCallNotificationDirectAction.init(appBundleId:notification:contactStore:)(v7, v6, v49, *v39, v36);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
  outlined consume of Data._Representation(v35, v9);

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v55);
  uint64_t v42 = type metadata accessor for Parse.DirectInvocation();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v42 - 8) + 8))(a1, v42);
  return v19;
}

uint64_t specialized AnnounceDropInCallFlow.init(announcementType:sharedGlobals:announceCallBellCatPatterns:responseGenerator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for CATOption();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = type metadata accessor for DialogPhase();
  __chkstk_darwin(v11 - 8);
  uint64_t v18 = type metadata accessor for AnnounceCallBellCATPatternsExecutor();
  uint64_t v19 = &protocol witness table for AnnounceCallBellCATPatternsExecutor;
  *(void *)&long long v17 = a3;
  uint64_t v15 = type metadata accessor for ResponseFactory();
  uint64_t v16 = &protocol witness table for ResponseFactory;
  *(void *)&long long v14 = a4;
  static DialogPhase.completion.getter();
  OutputGenerationManifest.init(dialogPhase:_:)();
  *(void *)(a5 + 144) = a1;
  outlined init with copy of SignalProviding(a2, a5 + 104);
  type metadata accessor for AnnounceCallBellCATs();
  static CATOption.defaultMode.getter();
  uint64_t v12 = CATWrapper.__allocating_init(options:globals:)();
  __swift_destroy_boxed_opaque_existential_1(a2);
  *(void *)(a5 + 16) = v12;
  outlined init with take of AppSelectionSignalComponent(&v17, a5 + 24);
  outlined init with take of AppSelectionSignalComponent(&v14, a5 + 64);
  return a5;
}

uint64_t outlined init with take of StartAudioCallDirectAction?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StartAudioCallDirectAction?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined release of StartAudioCallDirectAction?(uint64_t a1)
{
  return a1;
}

uint64_t outlined consume of StartAudioCallDirectAction?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data?(a5, a6);
    outlined consume of Data?(a7, a8);
    return swift_unknownObjectRelease();
  }
  return result;
}

void *specialized AnnounceIncomingCallNotificationDirectAction.init(appBundleId:notification:contactStore:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  v31[3] = type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for CNContactStore);
  v31[4] = &protocol witness table for CNContactStore;
  v31[0] = a4;
  a5[11] = 0;
  a5[7] = a1;
  a5[8] = a2;
  id v10 = [a3 request];
  id v11 = [v10 identifier];

  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  a5[9] = v12;
  a5[10] = v14;
  a5[12] = a3;
  outlined init with copy of SignalProviding((uint64_t)v31, (uint64_t)(a5 + 2));
  id v15 = a3;
  id v16 = [v15 request];
  id v17 = [v16 content];

  id v18 = [v17 communicationContext];
  if (!v18)
  {
    id v24 = 0;
    a5[13] = 1;
LABEL_13:
    uint64_t v25 = (*(uint64_t (**)(id))(*a5 + 264))(v24);

    goto LABEL_14;
  }
  uint64_t v19 = (char *)[v18 capabilities];
  uint64_t v20 = 1;
  if (v19 == (unsigned char *)&dword_0 + 1) {
    uint64_t v20 = 2;
  }
  a5[13] = v20;
  id v21 = [v18 sender];
  if (!v21)
  {
    id v26 = [v18 recipients];
    type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for _UNNotificationContact);
    unint64_t v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v27 >> 62)
    {
      swift_bridgeObjectRetain();
      id v24 = (id)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v24) {
        goto LABEL_9;
      }
    }
    else
    {
      id v24 = *(id *)((char *)&dword_10 + (v27 & 0xFFFFFFFFFFFFFF8));
      if (v24)
      {
LABEL_9:
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v27 & 0xC000000000000001) == 0, v27);
        if ((v27 & 0xC000000000000001) != 0) {
          id v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v28 = *(id *)(v27 + 32);
        }
        id v24 = v28;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  id v22 = v21;
  id v23 = *(uint64_t (**)(id))(*a5 + 264);
  id v24 = v21;
  uint64_t v25 = v23(v22);

LABEL_14:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  swift_beginAccess();
  int v29 = (void *)a5[11];
  a5[11] = v25;

  return a5;
}

uint64_t specialized IdentifyIncomingCallerDirectAction.init(from:contactStore:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v54 = type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for CNContactStore);
  uint64_t v55 = &protocol witness table for CNContactStore;
  *(void *)&long long v53 = a2;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(unsigned char *)(a3 + 136) = 1;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  specialized Dictionary.subscript.getter(v6, v7, a1, &v51);
  swift_bridgeObjectRelease();
  if (v52)
  {
    int v8 = swift_dynamicCast();
    if (v8) {
      uint64_t v9 = v49;
    }
    else {
      uint64_t v9 = 0;
    }
    if (v8) {
      uint64_t v10 = v50;
    }
    else {
      uint64_t v10 = 0;
    }
  }
  else
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)&v51, &demangling cache variable for type metadata for Any?);
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  swift_beginAccess();
  *(void *)(a3 + 56) = v9;
  *(void *)(a3 + 64) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  specialized Dictionary.subscript.getter(v11, v12, a1, &v51);
  swift_bridgeObjectRelease();
  if (v52)
  {
    int v13 = swift_dynamicCast();
    if (v13) {
      uint64_t v14 = v47;
    }
    else {
      uint64_t v14 = 0;
    }
    if (v13) {
      uint64_t v15 = v48;
    }
    else {
      uint64_t v15 = 0;
    }
  }
  else
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)&v51, &demangling cache variable for type metadata for Any?);
    uint64_t v14 = 0;
    uint64_t v15 = 0;
  }
  swift_beginAccess();
  *(void *)(a3 + 72) = v14;
  *(void *)(a3 + 80) = v15;
  swift_bridgeObjectRelease();
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  specialized Dictionary.subscript.getter(v16, v17, a1, &v51);
  swift_bridgeObjectRelease();
  if (v52)
  {
    int v18 = swift_dynamicCast();
    if (v18) {
      uint64_t v19 = v45;
    }
    else {
      uint64_t v19 = 0;
    }
    if (v18) {
      uint64_t v20 = v46;
    }
    else {
      uint64_t v20 = 0;
    }
  }
  else
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)&v51, &demangling cache variable for type metadata for Any?);
    uint64_t v19 = 0;
    uint64_t v20 = 0;
  }
  swift_beginAccess();
  *(void *)(a3 + 88) = v19;
  *(void *)(a3 + 96) = v20;
  swift_bridgeObjectRelease();
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  specialized Dictionary.subscript.getter(v21, v22, a1, &v51);
  swift_bridgeObjectRelease();
  if (v52)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (swift_dynamicCast()) {
      uint64_t v23 = v44;
    }
    else {
      uint64_t v23 = 0;
    }
  }
  else
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)&v51, &demangling cache variable for type metadata for Any?);
    uint64_t v23 = 0;
  }
  swift_beginAccess();
  *(void *)(a3 + 104) = v23;
  swift_bridgeObjectRelease();
  if (one-time initialization token for handleTypeKey != -1) {
    swift_once();
  }
  uint64_t v24 = static IdentifyIncomingCallerDirectAction.handleTypeKey;
  uint64_t v25 = unk_59A4F0;
  swift_bridgeObjectRetain();
  specialized Dictionary.subscript.getter(v24, v25, a1, &v51);
  swift_bridgeObjectRelease();
  if (v52)
  {
    if (swift_dynamicCast())
    {
      char v26 = 0;
      uint64_t v27 = v43;
      goto LABEL_37;
    }
  }
  else
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)&v51, &demangling cache variable for type metadata for Any?);
  }
  uint64_t v27 = 0;
  char v26 = 1;
LABEL_37:
  swift_beginAccess();
  *(void *)(a3 + 128) = v27;
  *(unsigned char *)(a3 + 136) = v26;
  if (one-time initialization token for handleValueKey != -1) {
    swift_once();
  }
  uint64_t v28 = static IdentifyIncomingCallerDirectAction.handleValueKey;
  uint64_t v29 = unk_59A500;
  swift_bridgeObjectRetain();
  specialized Dictionary.subscript.getter(v28, v29, a1, &v51);
  swift_bridgeObjectRelease();
  if (v52)
  {
    int v30 = swift_dynamicCast();
    if (v30) {
      uint64_t v31 = v41;
    }
    else {
      uint64_t v31 = 0;
    }
    if (v30) {
      uint64_t v32 = v42;
    }
    else {
      uint64_t v32 = 0;
    }
  }
  else
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)&v51, &demangling cache variable for type metadata for Any?);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
  }
  swift_beginAccess();
  *(void *)(a3 + 112) = v31;
  *(void *)(a3 + 120) = v32;
  swift_bridgeObjectRelease();
  uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  specialized Dictionary.subscript.getter(v33, v34, a1, &v51);
  swift_bridgeObjectRelease();
  if (v52)
  {
    if (swift_dynamicCast())
    {
      char v35 = v40;
      goto LABEL_52;
    }
  }
  else
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)&v51, &demangling cache variable for type metadata for Any?);
  }
  char v35 = 0;
LABEL_52:
  *(unsigned char *)(a3 + 137) = v35;
  uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  specialized Dictionary.subscript.getter(v36, v37, a1, &v51);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v52)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)&v51, &demangling cache variable for type metadata for Any?);
    goto LABEL_56;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_56:
    char v38 = 0;
    goto LABEL_57;
  }
  char v38 = v40;
LABEL_57:
  *(unsigned char *)(a3 + 138) = v38;
  outlined init with take of AppSelectionSignalComponent(&v53, a3 + 16);
  return a3;
}

uint64_t lazy protocol witness table accessor for type MainFlow and conformance MainFlow(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for SPHCallStateSnapshot.callState.getter in conformance CallStateEnvironmentProvider()
{
  return dispatch thunk of CallStateEnvironmentProvider.callState.getter();
}

uint64_t protocol witness for SPHCallStateSnapshot.isDropInCall.getter in conformance CallStateEnvironmentProvider()
{
  return dispatch thunk of CallStateEnvironmentProvider.isDropInCall.getter() & 1;
}

id protocol witness for SPHCallStateSnapshot.callState.getter in conformance AFCallStateSnapshot()
{
  return @nonobjc AFCallStateSnapshot.callState.getter();
}

id @nonobjc AFCallStateSnapshot.callState.getter()
{
  return [v0 callState];
}

unint64_t protocol witness for SPHCallStateSnapshot.isDropInCall.getter in conformance AFCallStateSnapshot()
{
  return (unint64_t)@nonobjc AFCallStateSnapshot.isDropInCall.getter() & 1;
}

id @nonobjc AFCallStateSnapshot.isDropInCall.getter()
{
  return [v0 isDropInCall];
}

uint64_t AFCallState.debugDescription.getter(char a1)
{
  _StringGuts.grow(_:)(58);
  v2._object = (void *)0x80000000004921A0;
  v2._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v2);
  if (a1) {
    uint64_t v3 = 1702195828;
  }
  else {
    uint64_t v3 = 0x65736C6166;
  }
  if (a1) {
    unint64_t v4 = 0xE400000000000000;
  }
  else {
    unint64_t v4 = 0xE500000000000000;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x6E6573202020200ALL;
  v6._object = (void *)0xED00003D676E6964;
  String.append(_:)(v6);
  if ((a1 & 2) != 0) {
    uint64_t v7 = 1702195828;
  }
  else {
    uint64_t v7 = 0x65736C6166;
  }
  if ((a1 & 2) != 0) {
    unint64_t v8 = 0xE400000000000000;
  }
  else {
    unint64_t v8 = 0xE500000000000000;
  }
  unint64_t v9 = v8;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  v10._object = (void *)0xED00003D676E6967;
  v10._countAndFlagsBits = 0x6E6972202020200ALL;
  String.append(_:)(v10);
  if ((a1 & 4) != 0) {
    uint64_t v11 = 1702195828;
  }
  else {
    uint64_t v11 = 0x65736C6166;
  }
  if ((a1 & 4) != 0) {
    unint64_t v12 = 0xE400000000000000;
  }
  else {
    unint64_t v12 = 0xE500000000000000;
  }
  unint64_t v13 = v12;
  String.append(_:)(*(Swift::String *)&v11);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 10506;
  v14._object = (void *)0xE200000000000000;
  String.append(_:)(v14);
  return 0;
}

uint64_t specialized BurstVoicemailFinding.find(identifiers:)(uint64_t a1)
{
  *(void *)(v1 + 32) = a1;
  Swift::String v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 40) = v2;
  *Swift::String v2 = v1;
  v2[1] = specialized BurstVoicemailFinding.find(identifiers:);
  return BurstVoicemailFinder.fetchVoicemails()();
}

uint64_t specialized BurstVoicemailFinding.find(identifiers:)()
{
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *Swift::String v2 = v1;
  *Swift::String v2 = *v0;
  *(void *)(v1 + 48) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v4, v5, v6);
}

void specialized BurstVoicemailFinding.find(identifiers:)()
{
  uint64_t v33 = v0;
  unint64_t v1 = v0[6];
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = specialized Set.init<A>(_:)(v2);
  unint64_t v4 = (unint64_t)specialized _ArrayProtocol.filter(_:)(v1, v3);
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.siriPhone);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    os_log_type_t v29 = v7;
    uint64_t v8 = swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v9 = Array.description.getter();
    unint64_t v11 = v10;
    swift_bridgeObjectRelease();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v31);
    uint64_t v28 = v0 + 3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    int v30 = (uint8_t *)v8;
    *(_WORD *)(v8 + 12) = 2080;
    if (v4 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v12 = *(void *)((char *)&dword_10 + (v4 & 0xFFFFFFFFFFFFFF8));
    }
    if (v12)
    {
      uint64_t v32 = _swiftEmptyArrayStorage;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      if (v12 < 0)
      {
        __break(1u);
        return;
      }
      uint64_t v27 = v0;
      uint64_t v13 = 0;
      Swift::String v14 = v32;
      do
      {
        if ((v4 & 0xC000000000000001) != 0) {
          id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v15 = *(id *)(v4 + 8 * v13 + 32);
        }
        uint64_t v16 = v15;
        id v17 = [v15 identifier];
        uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v20 = v19;

        uint64_t v32 = v14;
        unint64_t v21 = v14[2];
        if (v21 >= v14[3] >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          Swift::String v14 = v32;
        }
        ++v13;
        v14[2] = v21 + 1;
        uint64_t v22 = &v14[2 * v21];
        v22[4] = v18;
        v22[5] = v20;
      }
      while (v12 != v13);
      uint64_t v0 = v27;
    }
    uint64_t v23 = Array.description.getter();
    unint64_t v25 = v24;
    swift_bridgeObjectRelease();
    *uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v6, v29, "#BurstVoicemailFinder Looking for %s identifiers, found %s.", v30, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  char v26 = (void (*)(unint64_t))v0[1];
  v26(v4);
}

uint64_t BurstVoicemailFinding.find(identifiers:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 32) = a1;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(a3 + 16) + **(int **)(a3 + 16));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 40) = v6;
  *uint64_t v6 = v3;
  v6[1] = BurstVoicemailFinding.find(identifiers:);
  return v8(a2, a3);
}

uint64_t BurstVoicemailFinding.find(identifiers:)()
{
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 48) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2 = Set.init(minimumCapacity:)();
  uint64_t v7 = v2;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)();
      swift_bridgeObjectRelease();
      v4 += 16;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v7;
  }
  else
  {
    uint64_t v5 = v2;
    swift_bridgeObjectRelease();
  }
  return v5;
}

void *specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v11 = Set.init(minimumCapacity:)();
  uint64_t result = specialized _NativeDictionary.makeIterator()(v12, a1);
  uint64_t v3 = v12[1];
  int64_t v4 = v12[3];
  uint64_t v5 = v13;
  int64_t v6 = (unint64_t)(v12[2] + 64) >> 6;
  if (!v13) {
    goto LABEL_3;
  }
LABEL_2:
  v5 &= v5 - 1;
  while (1)
  {
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)();
    uint64_t result = (void *)swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v7 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    if (v7 >= v6) {
      goto LABEL_21;
    }
    uint64_t v8 = *(void *)(v3 + 8 * v7);
    int64_t v9 = v4 + 1;
    if (!v8)
    {
      int64_t v9 = v4 + 2;
      if (v4 + 2 >= v6) {
        goto LABEL_21;
      }
      uint64_t v8 = *(void *)(v3 + 8 * v9);
      if (!v8)
      {
        int64_t v9 = v4 + 3;
        if (v4 + 3 >= v6) {
          goto LABEL_21;
        }
        uint64_t v8 = *(void *)(v3 + 8 * v9);
        if (!v8)
        {
          int64_t v9 = v4 + 4;
          if (v4 + 4 >= v6) {
            goto LABEL_21;
          }
          uint64_t v8 = *(void *)(v3 + 8 * v9);
          if (!v8)
          {
            int64_t v9 = v4 + 5;
            if (v4 + 5 >= v6) {
              goto LABEL_21;
            }
            uint64_t v8 = *(void *)(v3 + 8 * v9);
            if (!v8)
            {
              int64_t v10 = v4 + 6;
              while (v10 < v6)
              {
                uint64_t v8 = *(void *)(v3 + 8 * v10++);
                if (v8)
                {
                  int64_t v9 = v10 - 1;
                  goto LABEL_18;
                }
              }
LABEL_21:
              swift_release();
              return (void *)v11;
            }
          }
        }
      }
    }
LABEL_18:
    uint64_t v5 = (v8 - 1) & v8;
    int64_t v4 = v9;
  }
  __break(1u);
  return result;
}

void *specialized _ArrayProtocol.filter(_:)(unint64_t a1, uint64_t a2)
{
  unint64_t v2 = a1;
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v3 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  if (v3)
  {
    while (1)
    {
      unint64_t v4 = 0;
      unint64_t v16 = v2 & 0xC000000000000001;
      uint64_t v5 = v2 & 0xFFFFFFFFFFFFFF8;
      while (v16)
      {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_7:
        int64_t v7 = v6;
        unint64_t v8 = v4 + 1;
        if (__OFADD__(v4, 1)) {
          goto LABEL_15;
        }
        unint64_t v9 = v2;
        id v10 = [v6 identifier];
        uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v13 = v12;

        specialized Set.contains(_:)(v11, v13, a2);
        LOBYTE(v10) = v14;
        swift_bridgeObjectRelease();
        if (v10)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
        unint64_t v2 = v9;
        ++v4;
        if (v8 == v3) {
          goto LABEL_17;
        }
      }
      if (v4 < *(void *)(v5 + 16)) {
        break;
      }
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
      if (!v3) {
        goto LABEL_17;
      }
    }
    id v6 = *(id *)(v2 + 8 * v4 + 32);
    goto LABEL_7;
  }
LABEL_17:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

{
  uint64_t v3;
  unint64_t v4;
  id v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;

  if (a1 >> 62) {
    goto LABEL_17;
  }
  uint64_t v3 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  if (v3)
  {
    while (1)
    {
      unint64_t v4 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_7:
        id v6 = v5;
        int64_t v7 = v4 + 1;
        if (__OFADD__(v4, 1)) {
          goto LABEL_16;
        }
        unint64_t v8 = outlined bridged method (pb) of @objc INPerson.contactIdentifier.getter(v5);
        if (v9 && (specialized Set.contains(_:)(v8, v9, a2), uint64_t v11 = v10, swift_bridgeObjectRelease(), (v11 & 1) != 0))
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
        ++v4;
        if (v7 == v3) {
          goto LABEL_18;
        }
      }
      if (v4 < *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8))) {
        break;
      }
      __break(1u);
LABEL_16:
      __break(1u);
LABEL_17:
      uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
      if (!v3) {
        goto LABEL_18;
      }
    }
    uint64_t v5 = *(id *)(a1 + 8 * v4 + 32);
    goto LABEL_7;
  }
LABEL_18:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  id v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  if (a1 >> 62) {
    goto LABEL_34;
  }
  unint64_t v4 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  if (v4)
  {
    while (1)
    {
      uint64_t v5 = 0;
      id v6 = a1 & 0xC000000000000001;
      uint64_t v20 = a2;
      while (v6)
      {
        int64_t v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_7:
        unint64_t v8 = v7;
        unint64_t v9 = v5 + 1;
        if (__OFADD__(v5, 1)) {
          goto LABEL_32;
        }
        outlined bridged method (pb) of @objc INPerson.contactIdentifier.getter(v7);
        if (!v10)
        {
          uint64_t v12 = outlined bridged method (pb) of @objc INPerson.siriMatches.getter(v8);
          if (!v12) {
            goto LABEL_27;
          }
          uint64_t v13 = v12;
          char v14 = v12 >> 62;
          if (v12 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (!v18) {
              goto LABEL_25;
            }
          }
          else if (!*(void *)((char *)&dword_10 + (v12 & 0xFFFFFFFFFFFFFF8)))
          {
            goto LABEL_25;
          }
          if ((v13 & 0xC000000000000001) != 0)
          {
            id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if (!*(void *)((char *)&dword_10 + (v13 & 0xFFFFFFFFFFFFFF8))) {
              goto LABEL_33;
            }
            id v15 = *(id *)(v13 + 32);
          }
          outlined bridged method (ob) of @objc INPerson.contactIdentifier.getter(v15);
          if (!v16)
          {
LABEL_25:
            id v6 = a1 & 0xC000000000000001;
LABEL_26:
            swift_bridgeObjectRelease();
            a2 = v20;
LABEL_27:
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            goto LABEL_28;
          }
          if (v14)
          {
            swift_bridgeObjectRetain();
            id v17 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            id v17 = *(void *)((char *)&dword_10 + (v13 & 0xFFFFFFFFFFFFFF8));
          }
          id v6 = a1 & 0xC000000000000001;
          swift_bridgeObjectRelease();
          if (v17 != 1) {
            goto LABEL_26;
          }
          a2 = v20;
        }
        uint64_t v11 = specialized Set._Variant.insert(_:)();
        swift_bridgeObjectRelease();
        if (v11) {
          goto LABEL_27;
        }

LABEL_28:
        ++v5;
        if (v9 == v4) {
          goto LABEL_35;
        }
      }
      if (v5 < *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8))) {
        break;
      }
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      unint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      if (!v4) {
        goto LABEL_35;
      }
    }
    int64_t v7 = *(id *)(a1 + 8 * v5 + 32);
    goto LABEL_7;
  }
LABEL_35:
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;
  BOOL v13;
  void **v14;
  BOOL v15;
  void **v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  uint64_t v3 = a1;
  if (a1 >> 62) {
    goto LABEL_40;
  }
  unint64_t v4 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  if (v4)
  {
    while (1)
    {
      uint64_t v5 = 0;
      id v6 = v3 & 0xC000000000000001;
      v3 &= 0xFFFFFFFFFFFFFF8uLL;
      id v17 = (void **)(a2 + 56);
      uint64_t v19 = v6;
      uint64_t v20 = a2;
      uint64_t v18 = v3;
      unint64_t v21 = v4;
      while (1)
      {
        if (v6)
        {
          specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (v5 >= *(void *)(v3 + 16))
          {
            __break(1u);
LABEL_38:
            __break(1u);
            goto LABEL_39;
          }
          swift_retain();
        }
        if (__OFADD__(v5++, 1)) {
          goto LABEL_38;
        }
        unint64_t v8 = App.appIdentifier.getter();
        if (v9) {
          break;
        }
        swift_release();
LABEL_24:
        if (v5 == v4) {
          goto LABEL_41;
        }
      }
      id v10 = HIBYTE(v9) & 0xF;
      if ((v9 & 0x2000000000000000) == 0) {
        id v10 = v8 & 0xFFFFFFFFFFFFLL;
      }
      if (!v10) {
        break;
      }
      uint64_t v11 = String.lowercased()();
      swift_bridgeObjectRelease();
      uint64_t v12 = *(void *)(a2 + 16);
      if (!v12)
      {
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_23;
      }
      uint64_t v13 = *(void *)(a2 + 32) == v11._countAndFlagsBits && *(void **)(a2 + 40) == v11._object;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
LABEL_18:
        swift_bridgeObjectRelease();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        goto LABEL_19;
      }
      if (v12 == 1)
      {
LABEL_35:
        swift_release();
        swift_bridgeObjectRelease();
LABEL_19:
        id v6 = v19;
        a2 = v20;
        uint64_t v3 = v18;
LABEL_23:
        unint64_t v4 = v21;
        goto LABEL_24;
      }
      char v14 = v17;
      uint64_t v3 = 1;
      while (1)
      {
        a2 = v3 + 1;
        if (__OFADD__(v3, 1)) {
          break;
        }
        id v15 = *(v14 - 1) == (void *)v11._countAndFlagsBits && *v14 == v11._object;
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_18;
        }
        v14 += 2;
        ++v3;
        if (a2 == v12) {
          goto LABEL_35;
        }
      }
LABEL_39:
      __break(1u);
LABEL_40:
      unint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      if (!v4) {
        goto LABEL_41;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
LABEL_41:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t IdentifyIncomingCallerOutputStrategy.incomingCallCats.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1, a1);
}

uint64_t BurstNotificationSearchManager.voicemailFinder.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + 40, a1);
}

uint64_t BurstVoicemailFinder.fetchVoicemails()()
{
  *(void *)(v1 + 456) = v0;
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v2, v3, v4);
}

{
  uint64_t v0;
  __C::INCallCapabilityOptions v1;
  __C::INCallRecordTypeOptions v2;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  void *v13;
  uint64_t (*v15)(uint64_t, Class);
  INSearchCallHistoryIntent v16;
  uint64_t v17;
  INDateComponentsRange_optional v18;
  INPerson_optional v19;
  NSNumber_optional v20;

  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for INSearchCallHistoryIntent);
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  NSNumber.init(BOOLeanLiteral:)(0);
  OUTLINED_FUNCTION_11_1();
  v19.is_nil = 16;
  v16.super.super.Class isa = INSearchCallHistoryIntent.__allocating_init(__dateCreated:recipient:callCapabilities:callTypes:unseen:)(v18, v19, v1, v2, v20).super.super.isa;
  *(INSearchCallHistoryIntent *)(v0 + 464) = v16;
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  uint64_t v3 = *(void *)(v0 + 456);
  memcpy((void *)(v0 + 16), &static PhoneCallFeatureFlags.instance, 0xB0uLL);
  type metadata accessor for PhoneCallFeatureManager();
  inited = swift_initStackObject();
  *(void *)(v0 + 320) = &type metadata for PhoneCallFeatureFlags;
  *(void *)(v0 + 328) = &protocol witness table for PhoneCallFeatureFlags;
  uint64_t v5 = swift_allocObject();
  *(void *)(v0 + 296) = v5;
  memcpy((void *)(v5 + 16), (const void *)(v0 + 16), 0xB0uLL);
  outlined init with take of AppSelectionSignalComponent((long long *)(v0 + 296), inited + 16);
  outlined retain of PhoneCallFeatureFlags(v0 + 16);
  FirstPartyAnnotatedAppStore.getDefaultApp(for:)((void *)(v3 + 40), v0 + 248);
  swift_setDeallocating();
  __swift_destroy_boxed_opaque_existential_1(inited + 16);
  int64_t v7 = *(void *)(v0 + 248);
  id v6 = *(void *)(v0 + 256);
  *(void *)(v0 + 472) = v7;
  *(void *)(v0 + 424) = v6;
  outlined release of Set<String>(v0 + 424);
  outlined init with take of String?(v0 + 264, v0 + 408);
  outlined release of String?(v0 + 408);
  *(void *)(v0 + 432) = *(void *)(v0 + 288);
  outlined release of Set<String>(v0 + 432);
  static Signpost.begin(_:)();
  *(void *)(v0 + 376) = v8;
  *(void *)(v0 + 384) = v9;
  *(void *)(v0 + 392) = v10;
  *(_WORD *)(v0 + 400) = v11;
  outlined init with copy of SignalProviding(v3, v0 + 336);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandleIntentSubmitter<INSearchCallHistoryIntent, INSearchCallHistoryIntentResponse>);
  uint64_t v12 = swift_allocObject();
  *(void *)(v0 + 480) = v12;
  outlined init with take of AppSelectionSignalComponent((long long *)(v0 + 336), v12 + 16);
  id v15 = (uint64_t (*)(uint64_t, Class))((char *)&async function pointer to specialized HandleIntentSubmitter.submit(app:intent:)
                                               + async function pointer to specialized HandleIntentSubmitter.submit(app:intent:));
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v0 + 488) = v13;
  *uint64_t v13 = v0;
  v13[1] = BurstVoicemailFinder.fetchVoicemails();
  return v15(v7, v16.super.super.isa);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *id v6 = v5;
  int64_t v7 = *v1;
  OUTLINED_FUNCTION_5_7();
  *unint64_t v8 = v7;
  *(void *)(v5 + 496) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    *(void *)(v5 + 504) = v3;
    swift_release();
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;

  OUTLINED_FUNCTION_16_1();
  uint64_t v1 = *(void **)(v0 + 504);
  if (v1
    && (uint64_t v2 = v1,
        outlined bridged method (ob) of @objc INSearchCallHistoryIntentResponse.callRecords.getter(v2)))
  {
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  uint64_t v3 = *(void **)(v0 + 464);
  Signpost.OpenSignpost.end()();
  swift_release();
  swift_release();

  uint64_t v4 = OUTLINED_FUNCTION_3_21();
  return v5(v4);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t (*v10)(void *);
  uint64_t v12;
  void *v13;
  uint64_t v14;

  uint64_t v13 = v0;
  swift_release();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.siriPhone);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.error.getter();
  uint64_t v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[62];
  if (v4)
  {
    id v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)id v6 = 136315138;
    v0[55] = v5;
    swift_errorRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    int64_t v7 = String.init<A>(describing:)();
    v0[56] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&dword_0, v2, v3, "#BurstVoicemailFinder Encountered error submitting HandleIntent: %s", v6, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  unint64_t v9 = (void *)v0[58];
  Signpost.OpenSignpost.end()();
  swift_release();
  swift_release();

  id v10 = (uint64_t (*)(void *))v0[1];
  return v10(_swiftEmptyArrayStorage);
}

INSearchCallHistoryIntent __swiftcall INSearchCallHistoryIntent.__allocating_init(__dateCreated:recipient:callCapabilities:callTypes:unseen:)(INDateComponentsRange_optional __dateCreated, INPerson_optional recipient, __C::INCallCapabilityOptions callCapabilities, __C::INCallRecordTypeOptions callTypes, NSNumber_optional unseen)
{
  id v6 = *(void **)&__dateCreated.is_nil;
  Class isa = __dateCreated.value.super.isa;
  id v8 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithDateCreated:__dateCreated.value.super.isa recipient:*(void *)&__dateCreated.is_nil callCapabilities:recipient.value.super.isa callTypes:*(void *)&recipient.is_nil unseen:callCapabilities.rawValue];

  return (INSearchCallHistoryIntent)v8;
}

uint64_t BurstNotificationSearchManager.init(sharedGlobals:voicemailFinder:)@<X0>(long long *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  outlined init with take of AppSelectionSignalComponent(a1, a3);

  return outlined init with take of AppSelectionSignalComponent(a2, a3 + 40);
}

uint64_t protocol witness for BurstVoicemailFinding.find(identifiers:) in conformance BurstVoicemailFinder(uint64_t a1)
{
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized BurstVoicemailFinding.find(identifiers:)
                                       + async function pointer to specialized BurstVoicemailFinding.find(identifiers:));
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = protocol witness for BurstVoicemailFinding.find(identifiers:) in conformance BurstVoicemailFinder;
  return v5(a1);
}

uint64_t protocol witness for BurstVoicemailFinding.fetchVoicemails() in conformance BurstVoicemailFinder()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for BurstVoicemailFinding.fetchVoicemails() in conformance BurstVoicemailFinder;
  return BurstVoicemailFinder.fetchVoicemails()();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = OUTLINED_FUNCTION_3_21();
  return v4(v3);
}

uint64_t specialized HandleIntentSubmitter.submit(app:intent:)(uint64_t a1, uint64_t a2)
{
  v3[15] = a2;
  v3[16] = v2;
  v3[14] = a1;
  return _swift_task_switch(specialized HandleIntentSubmitter.submit(app:intent:), 0, 0);
}

uint64_t specialized HandleIntentSubmitter.submit(app:intent:)()
{
  uint64_t v34 = v0;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[15];
  uint64_t v2 = type metadata accessor for Logger();
  v0[17] = __swift_project_value_buffer(v2, (uint64_t)static Logger.siriPhone);
  swift_retain_n();
  swift_retain_n();
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  int64_t v7 = (void *)v0[15];
  uint64_t v8 = v0[16];
  uint64_t v9 = v0[14];
  if (v6)
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315650;
    os_log_type_t type = v5;
    v0[9] = v8;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandleIntentSubmitter<INSearchCallHistoryIntent, INSearchCallHistoryIntentResponse>);
    uint64_t v11 = String.init<A>(describing:)();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v10 + 12) = 2080;
    v0[11] = v9;
    type metadata accessor for App();
    lazy protocol witness table accessor for type App and conformance App();
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[12] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v10 + 22) = 2080;
    id v15 = [v7 typeName];
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v18 = v17;

    v0[13] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_0, v4, type, "#%s Submitting single HandleIntent for app: %s, intent: %s", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
    swift_release_n();
    swift_release_n();
  }
  uint64_t v20 = (void *)v0[15];
  uint64_t v19 = (void *)v0[16];
  HandleIntentSubmitter.applyAppToIntent(app:intent:)(v0[14], v20);
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for SAIntentGroupHandleIntent);
  id v21 = v20;
  OUTLINED_FUNCTION_11_1();
  id v25 = SAIntentGroupHandleIntent.init(intent:appIdentifier:)(v22, v23, v24);
  v0[18] = v25;
  char v26 = v19 + 2;
  uint64_t v28 = v19[5];
  uint64_t v27 = v19[6];
  __swift_project_boxed_opaque_existential_1(v26, v28);
  os_log_type_t v29 = (void *)swift_task_alloc();
  v0[19] = v29;
  uint64_t v30 = type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for SAIntentGroupHandleIntentCompleted);
  *os_log_type_t v29 = v0;
  v29[1] = specialized HandleIntentSubmitter.submit(app:intent:);
  return AceServiceInvokerAsync.submit<A>(_:)(v25, v28, v30, v27);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  id v3 = v2;
  OUTLINED_FUNCTION_0_1();
  os_log_type_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *BOOL v6 = v5;
  int64_t v7 = *v1;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v8 = v7;
  *(void *)(v5 + 160) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 168) = v3;
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_16_1();
  uint64_t v1 = *(void **)(v0 + 168);
  uint64_t v2 = *(void **)(v0 + 144);
  specialized HandleIntentSubmitter.makeIntentResponse(from:)(v1);

  id v3 = OUTLINED_FUNCTION_3_21();
  return v4(v3);
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t (*v10)(void);
  uint64_t v12[2];
  void *v13;
  uint64_t v14;

  uint64_t v13 = v0;
  swift_retain();
  swift_errorRetain();
  swift_retain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    id v3 = v0[16];
    uint64_t v4 = swift_slowAlloc();
    v12[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315394;
    v0[7] = v3;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandleIntentSubmitter<INSearchCallHistoryIntent, INSearchCallHistoryIntentResponse>);
    os_log_type_t v5 = String.init<A>(describing:)();
    v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v4 + 12) = 2080;
    swift_getErrorValue();
    int64_t v7 = Error.localizedDescription.getter();
    v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&dword_0, v1, v2, "#%s makeIntentResponse threw an error: %s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
    swift_release_n();
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v9 = (void *)v0[18];
  swift_willThrow();

  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

void HandleIntentSubmitter.applyAppToIntent(app:intent:)(int a1, id a2)
{
  id v3 = [a2 _metadata];
  if (v3)
  {
    uint64_t v4 = v3;
    [v3 copy];

    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for _INPBIntentMetadata);
    if (swift_dynamicCast()) {
      os_log_type_t v5 = v16;
    }
    else {
      os_log_type_t v5 = 0;
    }
  }
  else
  {
    os_log_type_t v5 = 0;
  }
  uint64_t v6 = App.appIdentifier.getter();
  if (v7)
  {
    uint64_t v8 = v7;
    if (!v5)
    {
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    uint64_t v9 = v6;
    id v10 = v5;
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = v9;
    v11._object = v8;
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v10 setLaunchId:v12];
  }
  else
  {
    if (!v5) {
      goto LABEL_16;
    }
    id v10 = v5;
  }
  id v13 = v10;
  App.systemExtensionBundleId.getter();
  if (v14)
  {
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v15 = 0;
  }
  [v13 setSystemExtensionBundleId:v15];

LABEL_16:
  [a2 _setMetadata:v5];
}

id specialized HandleIntentSubmitter.makeIntentResponse(from:)(void *a1)
{
  id result = [a1 intentResponse];
  if (!result)
  {
    __break(1u);
    goto LABEL_11;
  }
  id v3 = result;
  id v4 = [result typeName];

  id result = [a1 intentResponse];
  if (!result)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  os_log_type_t v5 = result;
  Class isa = (Class)[result data];

  if (isa)
  {
    uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v9 = v8;

    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v7, v9);
  }
  id v10 = (id)INIntentResponseCreate();

  if (v10)
  {
    self;
    id result = (id)swift_dynamicCastObjCClass();
    if (result) {
      return result;
    }
  }
  return 0;
}

uint64_t outlined bridged method (ob) of @objc INSearchCallHistoryIntentResponse.callRecords.getter(void *a1)
{
  id v2 = [a1 callRecords];

  if (!v2) {
    return 0;
  }
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INCallRecord);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_A1D2C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 192, 7);
}

uint64_t destroy for BurstVoicemailFinder(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);

  return __swift_destroy_boxed_opaque_existential_1(a1 + 40);
}

uint64_t initializeWithCopy for BurstVoicemailFinder(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  return a1;
}

uint64_t *assignWithCopy for BurstVoicemailFinder(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

void *__swift_memcpy80_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x50uLL);
}

uint64_t assignWithTake for BurstVoicemailFinder(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for BurstVoicemailFinder(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 80))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BurstVoicemailFinder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)id result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BurstVoicemailFinder()
{
  return &type metadata for BurstVoicemailFinder;
}

unint64_t lazy protocol witness table accessor for type App and conformance App()
{
  unint64_t result = lazy protocol witness table cache variable for type App and conformance App;
  if (!lazy protocol witness table cache variable for type App and conformance App)
  {
    type metadata accessor for App();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type App and conformance App);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_3_21()
{
  return v0;
}

PhoneCallFlowDelegatePlugin::PhoneCallControlCATsSimple::Properties_optional __swiftcall PhoneCallControlCATsSimple.Properties.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v3._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PhoneCallControlCATsSimple.Properties.init(rawValue:), v3);
  OUTLINED_FUNCTION_15_0();
  if (v1 >= 6) {
    return (PhoneCallFlowDelegatePlugin::PhoneCallControlCATsSimple::Properties_optional)6;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::PhoneCallControlCATsSimple::Properties_optional)v1;
  }
}

unint64_t PhoneCallControlCATsSimple.Properties.rawValue.getter(char a1)
{
  unint64_t result = 0xD00000000000001CLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000027;
      break;
    case 2:
      unint64_t result = 0xD000000000000026;
      break;
    case 3:
      unint64_t result = 0xD000000000000022;
      break;
    case 4:
      unint64_t result = 0xD00000000000002ELL;
      break;
    case 5:
      unint64_t result = 0xD00000000000002CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallControlCATsSimple.Properties(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PhoneCallControlCATsSimple.Properties()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneCallControlCATsSimple.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallControlCATsSimple.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::PhoneCallControlCATsSimple::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallControlCATsSimple.Properties@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallControlCATsSimple::Properties_optional *a2@<X8>)
{
  result.value = PhoneCallControlCATsSimple.Properties.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallControlCATsSimple.Properties()
{
  char v1 = OUTLINED_FUNCTION_32();
  unint64_t result = PhoneCallControlCATsSimple.Properties.rawValue.getter(v1);
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t PhoneCallControlCATsSimple.callControl(callControlAction:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v3);
  v1[4] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_0_14();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    id v10 = OUTLINED_FUNCTION_32_1();
    return v11(v10);
  }
}

uint64_t PhoneCallControlCATsSimple.callControl(callControlAction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_4_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v12 = OUTLINED_FUNCTION_31_0();
  id v13 = (__n128 *)OUTLINED_FUNCTION_20_3(v12);
  uint64_t v14 = OUTLINED_FUNCTION_19_4(v13, (__n128)xmmword_467710);
  uint64_t v15 = OUTLINED_FUNCTION_19_7((uint64_t)v14, (uint64_t)"callControlAction");
  OUTLINED_FUNCTION_18_7(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_1_4(v17);
  if (v18)
  {
    outlined destroy of SubmitCommandError?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_42_1();
  }
  else
  {
    OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_9_3();
    OUTLINED_FUNCTION_17();
    v19();
  }
  uint64_t v20 = OUTLINED_FUNCTION_3_0();
  id v21 = (void *)OUTLINED_FUNCTION_29_6(v20);
  *id v21 = v22;
  v21[1] = PhoneCallControlCATsSimple.callControl(callControlAction:);
  OUTLINED_FUNCTION_26_2(v11 + 11);
  OUTLINED_FUNCTION_26_8();
  return v26(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10);
}

PhoneCallFlowDelegatePlugin::PhoneCallControlCATsSimple::CallControlDialogIds_optional __swiftcall PhoneCallControlCATsSimple.CallControlDialogIds.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v3._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PhoneCallControlCATsSimple.CallControlDialogIds.init(rawValue:), v3);
  OUTLINED_FUNCTION_15_0();
  if (v1 >= 7) {
    return (PhoneCallFlowDelegatePlugin::PhoneCallControlCATsSimple::CallControlDialogIds_optional)7;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::PhoneCallControlCATsSimple::CallControlDialogIds_optional)v1;
  }
}

unint64_t PhoneCallControlCATsSimple.CallControlDialogIds.rawValue.getter(char a1)
{
  unint64_t result = 1701736260;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x43656C6261736964;
      break;
    case 2:
      unint64_t result = 0x48656C6261736964;
      break;
    case 3:
      unint64_t result = 0x6143656C62616E65;
      break;
    case 4:
      unint64_t result = 0x6F48656C62616E65;
      break;
    case 5:
      unint64_t result = 0x7263694D6574756DLL;
      break;
    case 6:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallControlCATsSimple.CallControlDialogIds()
{
  return specialized == infix<A>(_:_:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PhoneCallControlCATsSimple.CallControlDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneCallControlCATsSimple.CallControlDialogIds(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallControlCATsSimple.CallControlDialogIds(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::PhoneCallControlCATsSimple::CallControlDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallControlCATsSimple.CallControlDialogIds@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallControlCATsSimple::CallControlDialogIds_optional *a2@<X8>)
{
  result.value = PhoneCallControlCATsSimple.CallControlDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallControlCATsSimple.CallControlDialogIds()
{
  char v1 = OUTLINED_FUNCTION_32();
  unint64_t result = PhoneCallControlCATsSimple.CallControlDialogIds.rawValue.getter(v1);
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t PhoneCallControlCATsSimple.callControlAsLabels(callControlAction:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v3);
  v1[4] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t PhoneCallControlCATsSimple.callControlAsLabels(callControlAction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_4_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v12 = OUTLINED_FUNCTION_31_0();
  id v13 = (__n128 *)OUTLINED_FUNCTION_20_3(v12);
  uint64_t v14 = OUTLINED_FUNCTION_19_4(v13, (__n128)xmmword_467710);
  uint64_t v15 = OUTLINED_FUNCTION_19_7((uint64_t)v14, (uint64_t)"callControlAction");
  OUTLINED_FUNCTION_18_7(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_1_4(v17);
  if (v18)
  {
    outlined destroy of SubmitCommandError?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_42_1();
  }
  else
  {
    OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_9_3();
    OUTLINED_FUNCTION_17();
    v19();
  }
  uint64_t v20 = OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_31_6(v20);
  lazy protocol witness table accessor for type PhoneCallControlCATsSimple.CallControlDialogIds and conformance PhoneCallControlCATsSimple.CallControlDialogIds();
  OUTLINED_FUNCTION_25_1();
  *uint64_t v10 = v21;
  v10[1] = PhoneCallControlCATsSimple.callControl(callControlAction:);
  OUTLINED_FUNCTION_24_9();
  OUTLINED_FUNCTION_26_8();
  return v27(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10);
}

unint64_t lazy protocol witness table accessor for type PhoneCallControlCATsSimple.CallControlDialogIds and conformance PhoneCallControlCATsSimple.CallControlDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.CallControlDialogIds and conformance PhoneCallControlCATsSimple.CallControlDialogIds;
  if (!lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.CallControlDialogIds and conformance PhoneCallControlCATsSimple.CallControlDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.CallControlDialogIds and conformance PhoneCallControlCATsSimple.CallControlDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.CallControlDialogIds and conformance PhoneCallControlCATsSimple.CallControlDialogIds;
  if (!lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.CallControlDialogIds and conformance PhoneCallControlCATsSimple.CallControlDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.CallControlDialogIds and conformance PhoneCallControlCATsSimple.CallControlDialogIds);
  }
  return result;
}

uint64_t PhoneCallControlCATsSimple.unsupportedCallControl(unsupportedReason:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v3);
  v1[4] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_0_14();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_32_1();
    return v11(v10);
  }
}

uint64_t PhoneCallControlCATsSimple.unsupportedCallControl(unsupportedReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_4_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v12 = OUTLINED_FUNCTION_31_0();
  id v13 = (__n128 *)OUTLINED_FUNCTION_20_3(v12);
  uint64_t v14 = OUTLINED_FUNCTION_19_4(v13, (__n128)xmmword_467710);
  uint64_t v15 = OUTLINED_FUNCTION_19_7((uint64_t)v14, (uint64_t)"unsupportedReason");
  OUTLINED_FUNCTION_18_7(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_1_4(v17);
  if (v18)
  {
    outlined destroy of SubmitCommandError?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_42_1();
  }
  else
  {
    OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_9_3();
    OUTLINED_FUNCTION_17();
    v19();
  }
  uint64_t v20 = OUTLINED_FUNCTION_3_0();
  uint64_t v21 = (void *)OUTLINED_FUNCTION_29_6(v20);
  *uint64_t v21 = v22;
  v21[1] = PhoneCallControlCATsSimple.unsupportedCallControl(unsupportedReason:);
  OUTLINED_FUNCTION_26_2(v11 + 22);
  OUTLINED_FUNCTION_26_8();
  return v26(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10);
}

BOOL PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds.init(rawValue:);
  return PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds.init(rawValue:)(a1, v1);
}

uint64_t PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds.rawValue.getter()
{
  return 0x6576697463416F6ELL;
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

uint64_t PhoneCallControlCATsSimple.unsupportedCallControlAsLabels(unsupportedReason:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v3);
  v1[4] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t PhoneCallControlCATsSimple.unsupportedCallControlAsLabels(unsupportedReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_4_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v12 = OUTLINED_FUNCTION_31_0();
  id v13 = (__n128 *)OUTLINED_FUNCTION_20_3(v12);
  uint64_t v14 = OUTLINED_FUNCTION_19_4(v13, (__n128)xmmword_467710);
  uint64_t v15 = OUTLINED_FUNCTION_19_7((uint64_t)v14, (uint64_t)"unsupportedReason");
  OUTLINED_FUNCTION_18_7(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_1_4(v17);
  if (v18)
  {
    outlined destroy of SubmitCommandError?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_42_1();
  }
  else
  {
    OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_9_3();
    OUTLINED_FUNCTION_17();
    v19();
  }
  uint64_t v20 = OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_31_6(v20);
  lazy protocol witness table accessor for type PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds();
  OUTLINED_FUNCTION_25_1();
  *uint64_t v10 = v21;
  v10[1] = PhoneCallControlCATsSimple.callControl(callControlAction:);
  OUTLINED_FUNCTION_24_9();
  OUTLINED_FUNCTION_26_8();
  return v27(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10);
}

unint64_t lazy protocol witness table accessor for type PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds;
  if (!lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds;
  if (!lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds);
  }
  return result;
}

uint64_t PhoneCallControlCATsSimple.unsupportedHoldAction(unsupportedReason:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v3);
  v1[4] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t PhoneCallControlCATsSimple.unsupportedHoldAction(unsupportedReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_4_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v12 = OUTLINED_FUNCTION_31_0();
  id v13 = (__n128 *)OUTLINED_FUNCTION_20_3(v12);
  uint64_t v14 = OUTLINED_FUNCTION_19_4(v13, (__n128)xmmword_467710);
  uint64_t v15 = OUTLINED_FUNCTION_19_7((uint64_t)v14, (uint64_t)"unsupportedReason");
  OUTLINED_FUNCTION_18_7(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_1_4(v17);
  if (v18)
  {
    outlined destroy of SubmitCommandError?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_42_1();
  }
  else
  {
    OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_9_3();
    OUTLINED_FUNCTION_17();
    v19();
  }
  uint64_t v20 = OUTLINED_FUNCTION_3_0();
  uint64_t v21 = (void *)OUTLINED_FUNCTION_29_6(v20);
  *uint64_t v21 = v22;
  v21[1] = PhoneCallControlCATsSimple.callControl(callControlAction:);
  OUTLINED_FUNCTION_26_2(v11 + 21);
  OUTLINED_FUNCTION_26_8();
  return v26(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10);
}

PhoneCallFlowDelegatePlugin::PhoneCallControlCATsSimple::UnsupportedHoldActionDialogIds_optional __swiftcall PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds.init(rawValue:);
  return (PhoneCallFlowDelegatePlugin::PhoneCallControlCATsSimple::UnsupportedHoldActionDialogIds_optional)PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds.init(rawValue:)(rawValue, v1);
}

uint64_t PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x636972656E6567;
  }
  if (a1 == 1) {
    return 0xD000000000000017;
  }
  return 0xD000000000000016;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::PhoneCallControlCATsSimple::UnsupportedHoldActionDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallControlCATsSimple::UnsupportedHoldActionDialogIds_optional *a2@<X8>)
{
  result.value = PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds()
{
  char v1 = OUTLINED_FUNCTION_32();
  uint64_t result = PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds.rawValue.getter(v1);
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t PhoneCallControlCATsSimple.unsupportedHoldActionAsLabels(unsupportedReason:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v3);
  v1[4] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t PhoneCallControlCATsSimple.unsupportedHoldActionAsLabels(unsupportedReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_4_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v12 = OUTLINED_FUNCTION_31_0();
  id v13 = (__n128 *)OUTLINED_FUNCTION_20_3(v12);
  uint64_t v14 = OUTLINED_FUNCTION_19_4(v13, (__n128)xmmword_467710);
  uint64_t v15 = OUTLINED_FUNCTION_19_7((uint64_t)v14, (uint64_t)"unsupportedReason");
  OUTLINED_FUNCTION_18_7(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_1_4(v17);
  if (v18)
  {
    outlined destroy of SubmitCommandError?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_42_1();
  }
  else
  {
    OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_9_3();
    OUTLINED_FUNCTION_17();
    v19();
  }
  uint64_t v20 = OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_31_6(v20);
  lazy protocol witness table accessor for type PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds();
  OUTLINED_FUNCTION_25_1();
  *uint64_t v10 = v21;
  v10[1] = PhoneCallControlCATsSimple.callControl(callControlAction:);
  OUTLINED_FUNCTION_24_9();
  OUTLINED_FUNCTION_26_8();
  return v27(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10);
}

unint64_t lazy protocol witness table accessor for type PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds;
  if (!lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds;
  if (!lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds);
  }
  return result;
}

uint64_t PhoneCallControlCATsSimple.unsupportedIntent(unsupportedIntent:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v3);
  v1[4] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t PhoneCallControlCATsSimple.unsupportedIntent(unsupportedIntent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_4_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v12 = OUTLINED_FUNCTION_31_0();
  id v13 = (__n128 *)OUTLINED_FUNCTION_20_3(v12);
  uint64_t v14 = OUTLINED_FUNCTION_19_4(v13, (__n128)xmmword_467710);
  uint64_t v15 = OUTLINED_FUNCTION_19_7((uint64_t)v14, (uint64_t)"unsupportedIntent");
  OUTLINED_FUNCTION_18_7(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_1_4(v17);
  if (v18)
  {
    outlined destroy of SubmitCommandError?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_42_1();
  }
  else
  {
    OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_9_3();
    OUTLINED_FUNCTION_17();
    v19();
  }
  uint64_t v20 = OUTLINED_FUNCTION_3_0();
  uint64_t v21 = (void *)OUTLINED_FUNCTION_29_6(v20);
  *uint64_t v21 = v22;
  v21[1] = PhoneCallControlCATsSimple.callControl(callControlAction:);
  OUTLINED_FUNCTION_26_2(v11 + 17);
  OUTLINED_FUNCTION_26_8();
  return v26(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10);
}

PhoneCallFlowDelegatePlugin::PhoneCallControlCATsSimple::UnsupportedIntentDialogIds_optional __swiftcall PhoneCallControlCATsSimple.UnsupportedIntentDialogIds.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of PhoneCallControlCATsSimple.UnsupportedIntentDialogIds.init(rawValue:);
  return (PhoneCallFlowDelegatePlugin::PhoneCallControlCATsSimple::UnsupportedIntentDialogIds_optional)PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds.init(rawValue:)(rawValue, v1);
}

uint64_t PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds.init(rawValue:)(Swift::String a1, Swift::OpaquePointer a2)
{
  OUTLINED_FUNCTION_35_6(a1, a2);
  OUTLINED_FUNCTION_15_0();
  if (v2 >= 3) {
    return 3;
  }
  else {
    return v2;
  }
}

uint64_t PhoneCallControlCATsSimple.UnsupportedIntentDialogIds.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x6F5665676E616863;
  }
  if (a1 == 1) {
    return 0x6C6F566B63656863;
  }
  return 0x636972656E6567;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallControlCATsSimple.UnsupportedIntentDialogIds(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PhoneCallControlCATsSimple.UnsupportedIntentDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneCallControlCATsSimple.UnsupportedIntentDialogIds(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallControlCATsSimple.UnsupportedIntentDialogIds()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

PhoneCallFlowDelegatePlugin::PhoneCallControlCATsSimple::UnsupportedIntentDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallControlCATsSimple.UnsupportedIntentDialogIds@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallControlCATsSimple::UnsupportedIntentDialogIds_optional *a2@<X8>)
{
  result.value = PhoneCallControlCATsSimple.UnsupportedIntentDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallControlCATsSimple.UnsupportedIntentDialogIds()
{
  char v1 = OUTLINED_FUNCTION_32();
  uint64_t result = PhoneCallControlCATsSimple.UnsupportedIntentDialogIds.rawValue.getter(v1);
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t PhoneCallControlCATsSimple.unsupportedIntentAsLabels(unsupportedIntent:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v3);
  v1[4] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t PhoneCallControlCATsSimple.unsupportedIntentAsLabels(unsupportedIntent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_4_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v12 = OUTLINED_FUNCTION_31_0();
  id v13 = (__n128 *)OUTLINED_FUNCTION_20_3(v12);
  uint64_t v14 = OUTLINED_FUNCTION_19_4(v13, (__n128)xmmword_467710);
  uint64_t v15 = OUTLINED_FUNCTION_19_7((uint64_t)v14, (uint64_t)"unsupportedIntent");
  OUTLINED_FUNCTION_18_7(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_1_4(v17);
  if (v18)
  {
    outlined destroy of SubmitCommandError?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_42_1();
  }
  else
  {
    OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_9_3();
    OUTLINED_FUNCTION_17();
    v19();
  }
  uint64_t v20 = OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_31_6(v20);
  lazy protocol witness table accessor for type PhoneCallControlCATsSimple.UnsupportedIntentDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedIntentDialogIds();
  OUTLINED_FUNCTION_25_1();
  *uint64_t v10 = v21;
  v10[1] = PhoneCallControlCATsSimple.callControl(callControlAction:);
  OUTLINED_FUNCTION_24_9();
  OUTLINED_FUNCTION_26_8();
  return v27(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10);
}

unint64_t lazy protocol witness table accessor for type PhoneCallControlCATsSimple.UnsupportedIntentDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedIntentDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedIntentDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedIntentDialogIds;
  if (!lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedIntentDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedIntentDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedIntentDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedIntentDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedIntentDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedIntentDialogIds;
  if (!lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedIntentDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedIntentDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedIntentDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedIntentDialogIds);
  }
  return result;
}

uint64_t PhoneCallControlCATsSimple.unsupportedSpeakerphoneAction(unsupportedReason:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v3);
  v1[4] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t PhoneCallControlCATsSimple.unsupportedSpeakerphoneAction(unsupportedReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_4_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v12 = OUTLINED_FUNCTION_31_0();
  id v13 = (__n128 *)OUTLINED_FUNCTION_20_3(v12);
  uint64_t v14 = OUTLINED_FUNCTION_19_4(v13, (__n128)xmmword_467710);
  uint64_t v15 = OUTLINED_FUNCTION_19_7((uint64_t)v14, (uint64_t)"unsupportedReason");
  OUTLINED_FUNCTION_18_7(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_1_4(v17);
  if (v18)
  {
    outlined destroy of SubmitCommandError?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_42_1();
  }
  else
  {
    OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_9_3();
    OUTLINED_FUNCTION_17();
    v19();
  }
  uint64_t v20 = OUTLINED_FUNCTION_3_0();
  uint64_t v21 = (void *)OUTLINED_FUNCTION_29_6(v20);
  *uint64_t v21 = v22;
  v21[1] = PhoneCallControlCATsSimple.callControl(callControlAction:);
  OUTLINED_FUNCTION_26_2(v11 + 29);
  OUTLINED_FUNCTION_26_8();
  return v26(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10);
}

BOOL PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds.init(rawValue:);
  return PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds.init(rawValue:)(a1, v1);
}

BOOL PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds.init(rawValue:)(Swift::String a1, Swift::OpaquePointer a2)
{
  OUTLINED_FUNCTION_35_6(a1, a2);
  OUTLINED_FUNCTION_15_0();
  return v2 != 0;
}

unint64_t PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds.rawValue.getter()
{
  return 0xD000000000000023;
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds@<X0>(void *a1@<X8>)
{
  unint64_t result = PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds.rawValue.getter();
  *a1 = 0xD000000000000023;
  a1[1] = v3;
  return result;
}

uint64_t PhoneCallControlCATsSimple.unsupportedSpeakerphoneActionAsLabels(unsupportedReason:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v3);
  v1[4] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t PhoneCallControlCATsSimple.unsupportedSpeakerphoneActionAsLabels(unsupportedReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_4_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v12 = OUTLINED_FUNCTION_31_0();
  id v13 = (__n128 *)OUTLINED_FUNCTION_20_3(v12);
  uint64_t v14 = OUTLINED_FUNCTION_19_4(v13, (__n128)xmmword_467710);
  uint64_t v15 = OUTLINED_FUNCTION_19_7((uint64_t)v14, (uint64_t)"unsupportedReason");
  OUTLINED_FUNCTION_18_7(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_1_4(v17);
  if (v18)
  {
    outlined destroy of SubmitCommandError?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_42_1();
  }
  else
  {
    OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_9_3();
    OUTLINED_FUNCTION_17();
    v19();
  }
  uint64_t v20 = OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_31_6(v20);
  lazy protocol witness table accessor for type PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds();
  OUTLINED_FUNCTION_25_1();
  *uint64_t v10 = v21;
  v10[1] = PhoneCallControlCATsSimple.callControl(callControlAction:);
  OUTLINED_FUNCTION_24_9();
  OUTLINED_FUNCTION_26_8();
  return v27(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10);
}

unint64_t lazy protocol witness table accessor for type PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds;
  if (!lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds;
  if (!lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds);
  }
  return result;
}

uint64_t PhoneCallControlCATsSimple.unsupportedSwitchToFaceTime(unsupportedReason:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v3);
  v1[4] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t PhoneCallControlCATsSimple.unsupportedSwitchToFaceTime(unsupportedReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_4_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v12 = OUTLINED_FUNCTION_31_0();
  id v13 = (__n128 *)OUTLINED_FUNCTION_20_3(v12);
  uint64_t v14 = OUTLINED_FUNCTION_19_4(v13, (__n128)xmmword_467710);
  uint64_t v15 = OUTLINED_FUNCTION_19_7((uint64_t)v14, (uint64_t)"unsupportedReason");
  OUTLINED_FUNCTION_18_7(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_1_4(v17);
  if (v18)
  {
    outlined destroy of SubmitCommandError?(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_42_1();
  }
  else
  {
    OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_9_3();
    OUTLINED_FUNCTION_17();
    v19();
  }
  uint64_t v20 = OUTLINED_FUNCTION_3_0();
  uint64_t v21 = (void *)OUTLINED_FUNCTION_29_6(v20);
  *uint64_t v21 = v22;
  v21[1] = PhoneCallControlCATsSimple.callControl(callControlAction:);
  OUTLINED_FUNCTION_26_2(v11 + 27);
  OUTLINED_FUNCTION_26_8();
  return v26(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10);
}

PhoneCallFlowDelegatePlugin::PhoneCallControlCATsSimple::UnsupportedSwitchToFaceTimeDialogIds_optional __swiftcall PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v3._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds.init(rawValue:), v3);
  OUTLINED_FUNCTION_15_0();
  if (v1 >= 0xA) {
    return (PhoneCallFlowDelegatePlugin::PhoneCallControlCATsSimple::UnsupportedSwitchToFaceTimeDialogIds_optional)10;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::PhoneCallControlCATsSimple::UnsupportedSwitchToFaceTimeDialogIds_optional)v1;
  }
}

unint64_t PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds.rawValue.getter(char a1)
{
  unint64_t result = 0xD00000000000001ALL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000011;
      break;
    case 2:
      unint64_t result = 0xD000000000000028;
      break;
    case 3:
      unint64_t result = 0xD000000000000017;
      break;
    case 4:
      unint64_t result = 0xD000000000000017;
      break;
    case 5:
    case 8:
      unint64_t result = 0xD000000000000013;
      break;
    case 6:
      unint64_t result = 0xD000000000000021;
      break;
    case 7:
      unint64_t result = 0xD000000000000015;
      break;
    case 9:
      unint64_t result = 0xD000000000000014;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::PhoneCallControlCATsSimple::UnsupportedSwitchToFaceTimeDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallControlCATsSimple::UnsupportedSwitchToFaceTimeDialogIds_optional *a2@<X8>)
{
  result.value = PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds()
{
  char v1 = OUTLINED_FUNCTION_32();
  unint64_t result = PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds.rawValue.getter(v1);
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t PhoneCallControlCATsSimple.unsupportedSwitchToFaceTimeAsLabels(unsupportedReason:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v3);
  v1[4] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t PhoneCallControlCATsSimple.unsupportedSwitchToFaceTimeAsLabels(unsupportedReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_4_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v12 = OUTLINED_FUNCTION_31_0();
  id v13 = (__n128 *)OUTLINED_FUNCTION_20_3(v12);
  uint64_t v14 = OUTLINED_FUNCTION_19_4(v13, (__n128)xmmword_467710);
  uint64_t v15 = OUTLINED_FUNCTION_19_7((uint64_t)v14, (uint64_t)"unsupportedReason");
  OUTLINED_FUNCTION_18_7(v15, v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_1_4(v17);
  if (v18)
  {
    outlined destroy of SubmitCommandError?(v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_42_1();
  }
  else
  {
    OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_9_3();
    OUTLINED_FUNCTION_17();
    v19();
  }
  uint64_t v20 = OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_31_6(v20);
  lazy protocol witness table accessor for type PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds();
  OUTLINED_FUNCTION_25_1();
  *uint64_t v10 = v21;
  v10[1] = PhoneCallControlCATsSimple.callControl(callControlAction:);
  OUTLINED_FUNCTION_24_9();
  OUTLINED_FUNCTION_26_8();
  return v27(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10);
}

unint64_t lazy protocol witness table accessor for type PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds;
  if (!lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds;
  if (!lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds and conformance PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds);
  }
  return result;
}

uint64_t PhoneCallControlCATsSimple.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return PhoneCallControlCATsSimple.init(templateDir:options:globals:)(a1, a2);
}

uint64_t PhoneCallControlCATsSimple.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_8_18();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  unint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  uint64_t v11 = OUTLINED_FUNCTION_11_0(v10);
  __chkstk_darwin(v11);
  outlined init with copy of Result<TemplatingResult, Error>(a1, (uint64_t)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a2, v2);
  uint64_t v13 = CATWrapperSimple.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a2, v2);
  outlined destroy of SubmitCommandError?(a1, (uint64_t *)&demangling cache variable for type metadata for URL?);
  return v13;
}

uint64_t PhoneCallControlCATsSimple.__allocating_init(useResponseMode:options:)()
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_8_18();
  __chkstk_darwin(v0);
  OUTLINED_FUNCTION_52();
  uint64_t v1 = swift_allocObject();
  uint64_t v2 = OUTLINED_FUNCTION_28_0();
  v3(v2);
  CATWrapperSimple.init(useResponseMode:options:)();
  uint64_t v4 = OUTLINED_FUNCTION_30_1();
  v5(v4);
  return v1;
}

uint64_t PhoneCallControlCATsSimple.init(useResponseMode:options:)()
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_8_18();
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_52();
  uint64_t v2 = OUTLINED_FUNCTION_28_0();
  v3(v2);
  CATWrapperSimple.init(useResponseMode:options:)();
  uint64_t v4 = OUTLINED_FUNCTION_30_1();
  v5(v4);
  return v0;
}

unint64_t lazy protocol witness table accessor for type PhoneCallControlCATsSimple.Properties and conformance PhoneCallControlCATsSimple.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.Properties and conformance PhoneCallControlCATsSimple.Properties;
  if (!lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.Properties and conformance PhoneCallControlCATsSimple.Properties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallControlCATsSimple.Properties and conformance PhoneCallControlCATsSimple.Properties);
  }
  return result;
}

uint64_t type metadata accessor for PhoneCallControlCATsSimple()
{
  uint64_t result = type metadata singleton initialization cache for PhoneCallControlCATsSimple;
  if (!type metadata singleton initialization cache for PhoneCallControlCATsSimple) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for PhoneCallControlCATsSimple()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for PhoneCallControlCATsSimple()
{
  return type metadata accessor for PhoneCallControlCATsSimple();
}

unsigned char *storeEnumTagSinglePayload for PhoneCallControlCATsSimple.Properties(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0xA4774);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

void type metadata accessor for PhoneCallControlCATsSimple.Properties()
{
}

unsigned char *storeEnumTagSinglePayload for PhoneCallControlCATsSimple.CallControlDialogIds(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0xA4874);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

void type metadata accessor for PhoneCallControlCATsSimple.CallControlDialogIds()
{
}

void type metadata accessor for PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds()
{
}

void type metadata accessor for PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds()
{
}

unsigned char *storeEnumTagSinglePayload for PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0xA499CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for PhoneCallControlCATsSimple.UnsupportedIntentDialogIds()
{
}

uint64_t getEnumTagSinglePayload for PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for PhoneCallControlCATsSimple.UnsupportedCallControlDialogIds(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0xA4ABCLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for PhoneCallControlCATsSimple.UnsupportedSpeakerphoneActionDialogIds()
{
}

uint64_t getEnumTagSinglePayload for PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF7)
  {
    if (a2 + 9 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 9) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 10;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v5 = v6 - 10;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *uint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0xA4C44);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

void type metadata accessor for PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds()
{
}

uint64_t OUTLINED_FUNCTION_18_7(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return outlined init with copy of Result<TemplatingResult, Error>(v3, v4, a3);
}

uint64_t OUTLINED_FUNCTION_29_6(uint64_t result)
{
  *(void *)(v1 + 48) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_31_6(uint64_t result)
{
  *(void *)(v1 + 48) = result;
  return result;
}

Swift::Int OUTLINED_FUNCTION_35_6(Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  uint64_t countAndFlagsBits = string._countAndFlagsBits;
  unsigned int v6 = object;
  return _findStringSwitchCase(cases:string:)(cases, *(Swift::String *)&countAndFlagsBits);
}

void *one-time initialization function for instance()
{
  PhoneCallFeatureFlags.init()((uint64_t)v1);
  return memcpy(&static PhoneCallFeatureFlags.instance, v1, 0xB0uLL);
}

unint64_t PhoneCallFeatureFlags.init()@<X0>(uint64_t a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureFlagsKey>);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_467710;
  *(void *)(v18 + 56) = &type metadata for SiriInCallFeature;
  *(void *)(v18 + 64) = lazy protocol witness table accessor for type SiriInCallFeature and conformance SiriInCallFeature();
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_467710;
  *(void *)(v17 + 56) = &type metadata for TelephonyUtilitiesFeature;
  *(void *)(v17 + 64) = lazy protocol witness table accessor for type TelephonyUtilitiesFeature and conformance TelephonyUtilitiesFeature();
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_467710;
  *(void *)(v16 + 56) = &type metadata for IDSFeature;
  *(void *)(v16 + 64) = lazy protocol witness table accessor for type IDSFeature and conformance IDSFeature();
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_467710;
  *(void *)(v15 + 56) = &type metadata for SiriPhoneFeature;
  unint64_t v2 = lazy protocol witness table accessor for type SiriPhoneFeature and conformance SiriPhoneFeature();
  *(void *)(v15 + 64) = v2;
  *(unsigned char *)(v15 + 32) = 3;
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_467710;
  *(void *)(v14 + 56) = &type metadata for SiriPhoneFeature;
  *(void *)(v14 + 64) = v2;
  *(unsigned char *)(v14 + 32) = 4;
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_467710;
  *(void *)(v13 + 56) = &type metadata for SiriPhoneFeature;
  *(void *)(v13 + 64) = v2;
  *(unsigned char *)(v13 + 32) = 6;
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_467710;
  *(void *)(v3 + 56) = &type metadata for SiriPhoneFeature;
  *(void *)(v3 + 64) = v2;
  *(unsigned char *)(v3 + 32) = 8;
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_467710;
  *(void *)(v12 + 56) = &type metadata for SiriPlaybackControlFeature;
  *(void *)(v12 + 64) = lazy protocol witness table accessor for type SiriPlaybackControlFeature and conformance SiriPlaybackControlFeature();
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_467710;
  *(void *)(v4 + 56) = &type metadata for SiriPhoneFeature;
  *(void *)(v4 + 64) = v2;
  *(unsigned char *)(v4 + 32) = 11;
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_467720;
  *(void *)(v5 + 56) = &type metadata for SiriPhoneFeature;
  *(void *)(v5 + 64) = v2;
  *(unsigned char *)(v5 + 32) = 5;
  *(void *)(v5 + 96) = &type metadata for PommesFeature;
  *(void *)(v5 + 104) = lazy protocol witness table accessor for type PommesFeature and conformance PommesFeature();
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_467710;
  *(void *)(v6 + 56) = &type metadata for SiriPhoneFeature;
  *(void *)(v6 + 64) = v2;
  *(unsigned char *)(v6 + 32) = 7;
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_467710;
  *(void *)(v7 + 56) = &type metadata for SiriPhoneFeature;
  *(void *)(v7 + 64) = v2;
  *(unsigned char *)(v7 + 32) = 9;
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_467710;
  *(void *)(v8 + 56) = &type metadata for SiriPhoneFeature;
  *(void *)(v8 + 64) = v2;
  *(unsigned char *)(v8 + 32) = 10;
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_467710;
  *(void *)(v9 + 56) = &type metadata for SiriPhoneFeature;
  *(void *)(v9 + 64) = v2;
  *(unsigned char *)(v9 + 32) = 12;
  LOBYTE(v2) = static RFFeatureFlags.ResponseFramework.SMART.getter();
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_467710;
  *(void *)(v10 + 56) = &type metadata for AppProtection;
  unint64_t result = lazy protocol witness table accessor for type AppProtection and conformance AppProtection();
  *(void *)(v10 + 64) = result;
  *(void *)a1 = 0xD000000000000012;
  *(void *)(a1 + 8) = 0x80000000004911F0;
  *(unsigned char *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = 0xD000000000000014;
  *(void *)(a1 + 32) = 0x8000000000491210;
  *(unsigned char *)(a1 + 40) = 1;
  *(void *)(a1 + 48) = v18;
  *(void *)(a1 + 56) = v17;
  *(void *)(a1 + 64) = v16;
  *(void *)(a1 + 72) = v15;
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = v13;
  *(void *)(a1 + 96) = v3;
  *(void *)(a1 + 104) = v12;
  *(void *)(a1 + 112) = v4;
  *(void *)(a1 + 120) = v5;
  *(void *)(a1 + 128) = v6;
  *(void *)(a1 + 136) = v7;
  *(void *)(a1 + 144) = v8;
  *(void *)(a1 + 152) = v9;
  *(unsigned char *)(a1 + 160) = v2 & 1;
  *(_DWORD *)(a1 + 161) = *(_DWORD *)v19;
  *(_DWORD *)(a1 + 164) = *(_DWORD *)&v19[3];
  *(void *)(a1 + 168) = v10;
  return result;
}

void *PhoneCallFeatureFlags.instance.unsafeMutableAddressor()
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  return &static PhoneCallFeatureFlags.instance;
}

uint64_t static PhoneCallFeatureFlags.instance.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }

  return outlined init with copy of PhoneCallFeatureFlags((uint64_t)&static PhoneCallFeatureFlags.instance, a1);
}

uint64_t outlined init with copy of PhoneCallFeatureFlags(uint64_t a1, uint64_t a2)
{
  return a2;
}

id one-time initialization function for userDefaults()
{
  id v0 = objc_allocWithZone((Class)NSUserDefaults);
  id result = @nonobjc NSUserDefaults.init(suiteName:)(0xD000000000000014, 0x8000000000491380);
  static PhoneCallFeatureFlags.userDefaults = (uint64_t)result;
  return result;
}

uint64_t *PhoneCallFeatureFlags.userDefaults.unsafeMutableAddressor()
{
  if (one-time initialization token for userDefaults != -1) {
    swift_once();
  }
  return &static PhoneCallFeatureFlags.userDefaults;
}

uint64_t static PhoneCallFeatureFlags.userDefaults.getter()
{
  if (one-time initialization token for userDefaults != -1) {
    swift_once();
  }
  uint64_t v0 = static PhoneCallFeatureFlags.userDefaults;
  id v1 = (id)static PhoneCallFeatureFlags.userDefaults;
  return v0;
}

uint64_t PhoneCallFeatureFlags.forceCallsToHandle.getter()
{
  return specialized UserDefaultsSetting.wrappedValue.getter(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

uint64_t UserDefaultsSetting.wrappedValue.getter@<X0>(char a1@<W2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if ((a1 & 1) != 0 && !AFIsInternalInstall())
  {
    return __swift_storeEnumTagSinglePayload(a3, 1, 1, a2);
  }
  else
  {
    if (one-time initialization token for userDefaults != -1) {
      swift_once();
    }
    uint64_t v5 = (void *)static PhoneCallFeatureFlags.userDefaults;
    if (static PhoneCallFeatureFlags.userDefaults)
    {
      NSString v6 = String._bridgeToObjectiveC()();
      id v7 = [v5 valueForKey:v6];

      if (v7)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v10, 0, sizeof(v10));
      }
      outlined init with take of Any?((uint64_t)v10, (uint64_t)v11);
    }
    else
    {
      memset(v11, 0, sizeof(v11));
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
    int v9 = swift_dynamicCast();
    return __swift_storeEnumTagSinglePayload(a3, v9 ^ 1u, 1, a2);
  }
}

uint64_t PhoneCallFeatureFlags.siriInCallFlag.getter()
{
  OUTLINED_FUNCTION_0_15();
  if (!v1) {
    return 1;
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  while (1)
  {
    OUTLINED_FUNCTION_3_22(v2, v3, v4, v5, v6, v7, v8, v9, v20);
    uint64_t v10 = isFeatureEnabled(_:)();
    OUTLINED_FUNCTION_4_19(v10, v11, v12, v13, v14, v15, v16, v17, v21);
    if ((v0 & 1) == 0) {
      break;
    }
    OUTLINED_FUNCTION_2_19();
    if (v18)
    {
      outlined release of Set<String>((uint64_t)v22);
      return 1;
    }
  }
  outlined release of Set<String>((uint64_t)v22);
  return 0;
}

uint64_t OSFeatureFlag.wrappedValue.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 1;
  }
  uint64_t v2 = a1 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of SignalProviding(v2, (uint64_t)v5);
    char v3 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
    if ((v3 & 1) == 0) {
      break;
    }
    v2 += 40;
    if (!--v1)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t PhoneCallFeatureFlags.siriLagunaFlag.getter()
{
  OUTLINED_FUNCTION_0_15();
  if (!v1) {
    return 1;
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  while (1)
  {
    OUTLINED_FUNCTION_3_22(v2, v3, v4, v5, v6, v7, v8, v9, v20);
    uint64_t v10 = isFeatureEnabled(_:)();
    OUTLINED_FUNCTION_4_19(v10, v11, v12, v13, v14, v15, v16, v17, v21);
    if ((v0 & 1) == 0) {
      break;
    }
    OUTLINED_FUNCTION_2_19();
    if (v18)
    {
      outlined release of Set<String>((uint64_t)v22);
      return 1;
    }
  }
  outlined release of Set<String>((uint64_t)v22);
  return 0;
}

uint64_t PhoneCallFeatureFlags.faceTimeUninstallFlag.getter()
{
  OUTLINED_FUNCTION_0_15();
  if (!v1) {
    return 1;
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  while (1)
  {
    OUTLINED_FUNCTION_3_22(v2, v3, v4, v5, v6, v7, v8, v9, v20);
    uint64_t v10 = isFeatureEnabled(_:)();
    OUTLINED_FUNCTION_4_19(v10, v11, v12, v13, v14, v15, v16, v17, v21);
    if ((v0 & 1) == 0) {
      break;
    }
    OUTLINED_FUNCTION_2_19();
    if (v18)
    {
      outlined release of Set<String>((uint64_t)v22);
      return 1;
    }
  }
  outlined release of Set<String>((uint64_t)v22);
  return 0;
}

uint64_t PhoneCallFeatureFlags.answerCallNotificationOnLockedScreenFlag.getter()
{
  OUTLINED_FUNCTION_0_15();
  if (!v1) {
    return 1;
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  while (1)
  {
    OUTLINED_FUNCTION_3_22(v2, v3, v4, v5, v6, v7, v8, v9, v20);
    uint64_t v10 = isFeatureEnabled(_:)();
    OUTLINED_FUNCTION_4_19(v10, v11, v12, v13, v14, v15, v16, v17, v21);
    if ((v0 & 1) == 0) {
      break;
    }
    OUTLINED_FUNCTION_2_19();
    if (v18)
    {
      outlined release of Set<String>((uint64_t)v22);
      return 1;
    }
  }
  outlined release of Set<String>((uint64_t)v22);
  return 0;
}

uint64_t PhoneCallFeatureFlags.quickStopCallBellFlag.getter()
{
  OUTLINED_FUNCTION_0_15();
  if (!v1) {
    return 1;
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  while (1)
  {
    OUTLINED_FUNCTION_3_22(v2, v3, v4, v5, v6, v7, v8, v9, v20);
    uint64_t v10 = isFeatureEnabled(_:)();
    OUTLINED_FUNCTION_4_19(v10, v11, v12, v13, v14, v15, v16, v17, v21);
    if ((v0 & 1) == 0) {
      break;
    }
    OUTLINED_FUNCTION_2_19();
    if (v18)
    {
      outlined release of Set<String>((uint64_t)v22);
      return 1;
    }
  }
  outlined release of Set<String>((uint64_t)v22);
  return 0;
}

uint64_t PhoneCallFeatureFlags.cancelCallBellFlag.getter()
{
  OUTLINED_FUNCTION_0_15();
  if (!v1) {
    return 1;
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  while (1)
  {
    OUTLINED_FUNCTION_3_22(v2, v3, v4, v5, v6, v7, v8, v9, v20);
    uint64_t v10 = isFeatureEnabled(_:)();
    OUTLINED_FUNCTION_4_19(v10, v11, v12, v13, v14, v15, v16, v17, v21);
    if ((v0 & 1) == 0) {
      break;
    }
    OUTLINED_FUNCTION_2_19();
    if (v18)
    {
      outlined release of Set<String>((uint64_t)v22);
      return 1;
    }
  }
  outlined release of Set<String>((uint64_t)v22);
  return 0;
}

uint64_t PhoneCallFeatureFlags.shouldEnableSRRRefactor.getter()
{
  OUTLINED_FUNCTION_0_15();
  if (!v1) {
    return 1;
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  while (1)
  {
    OUTLINED_FUNCTION_3_22(v2, v3, v4, v5, v6, v7, v8, v9, v20);
    uint64_t v10 = isFeatureEnabled(_:)();
    OUTLINED_FUNCTION_4_19(v10, v11, v12, v13, v14, v15, v16, v17, v21);
    if ((v0 & 1) == 0) {
      break;
    }
    OUTLINED_FUNCTION_2_19();
    if (v18)
    {
      outlined release of Set<String>((uint64_t)v22);
      return 1;
    }
  }
  outlined release of Set<String>((uint64_t)v22);
  return 0;
}

uint64_t PhoneCallFeatureFlags.useEntitySpansForBusinessCallFlag.getter()
{
  OUTLINED_FUNCTION_0_15();
  if (!v1) {
    return 1;
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  while (1)
  {
    OUTLINED_FUNCTION_3_22(v2, v3, v4, v5, v6, v7, v8, v9, v20);
    uint64_t v10 = isFeatureEnabled(_:)();
    OUTLINED_FUNCTION_4_19(v10, v11, v12, v13, v14, v15, v16, v17, v21);
    if ((v0 & 1) == 0) {
      break;
    }
    OUTLINED_FUNCTION_2_19();
    if (v18)
    {
      outlined release of Set<String>((uint64_t)v22);
      return 1;
    }
  }
  outlined release of Set<String>((uint64_t)v22);
  return 0;
}

uint64_t PhoneCallFeatureFlags.shouldEnableCompositionFlowForAllLocales.getter()
{
  OUTLINED_FUNCTION_0_15();
  if (!v1) {
    return 1;
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  while (1)
  {
    OUTLINED_FUNCTION_3_22(v2, v3, v4, v5, v6, v7, v8, v9, v20);
    uint64_t v10 = isFeatureEnabled(_:)();
    OUTLINED_FUNCTION_4_19(v10, v11, v12, v13, v14, v15, v16, v17, v21);
    if ((v0 & 1) == 0) {
      break;
    }
    OUTLINED_FUNCTION_2_19();
    if (v18)
    {
      outlined release of Set<String>((uint64_t)v22);
      return 1;
    }
  }
  outlined release of Set<String>((uint64_t)v22);
  return 0;
}

uint64_t PhoneCallFeatureFlags.smartUIFlag.getter()
{
  return *(unsigned __int8 *)(v0 + 160);
}

uint64_t PhoneCallFeatureFlags.smartUIFlag.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 160) = result;
  return result;
}

Swift::Void (__swiftcall *PhoneCallFeatureFlags.smartUIFlag.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t PhoneCallFeatureFlags.protectedAppsFlag.getter()
{
  OUTLINED_FUNCTION_0_15();
  if (!v1) {
    return 1;
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  while (1)
  {
    OUTLINED_FUNCTION_3_22(v2, v3, v4, v5, v6, v7, v8, v9, v20);
    uint64_t v10 = isFeatureEnabled(_:)();
    OUTLINED_FUNCTION_4_19(v10, v11, v12, v13, v14, v15, v16, v17, v21);
    if ((v0 & 1) == 0) {
      break;
    }
    OUTLINED_FUNCTION_2_19();
    if (v18)
    {
      outlined release of Set<String>((uint64_t)v22);
      return 1;
    }
  }
  outlined release of Set<String>((uint64_t)v22);
  return 0;
}

void SiriPhoneFeature.domain.getter()
{
}

void PommesFeature.domain.getter()
{
}

void PommesFeature.feature.getter()
{
}

void SiriPlaybackControlFeature.domain.getter()
{
}

void SiriPlaybackControlFeature.feature.getter()
{
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance SiriPlaybackControlFeature()
{
  return "SiriPlaybackControls";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance SiriPlaybackControlFeature()
{
  return "quick_stop_call_bell";
}

void SiriInCallFeature.domain.getter()
{
}

void SiriInCallFeature.feature.getter()
{
}

void SharedNeedsValueContext.NeedsValueCase.hash(into:)()
{
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance SiriInCallFeature()
{
  return "SiriInCall";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance SiriInCallFeature()
{
  return "blushing_phantom";
}

void TelephonyUtilitiesFeature.domain.getter()
{
}

void TelephonyUtilitiesFeature.feature.getter()
{
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance TelephonyUtilitiesFeature()
{
  return "TelephonyUtilities";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance TelephonyUtilitiesFeature()
{
  return "Laguna";
}

void IDSFeature.domain.getter()
{
}

void IDSFeature.feature.getter()
{
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance IDSFeature()
{
  return "IDS";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance IDSFeature()
{
  return "FaceTimeUninstall";
}

void AppProtection.domain.getter()
{
}

void AppProtection.feature.getter()
{
}

Swift::Int SharedNeedsValueContext.NeedsValueCase.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PommesFeature()
{
  return Hasher._finalize()();
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance AppProtection()
{
  return "AppProtection";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance AppProtection()
{
  return "protected_apps";
}

uint64_t destroy for PhoneCallFeatureFlags()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PhoneCallFeatureFlags(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  uint64_t v8 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v8;
  uint64_t v11 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v11;
  uint64_t v12 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v12;
  uint64_t v9 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v9;
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PhoneCallFeatureFlags(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *__swift_memcpy176_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xB0uLL);
}

uint64_t assignWithTake for PhoneCallFeatureFlags(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PhoneCallFeatureFlags(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 176))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PhoneCallFeatureFlags(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)id result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 176) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 176) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for PhoneCallFeatureFlags()
{
}

uint64_t getEnumTagSinglePayload for SiriPhoneFeature(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF4)
  {
    if (a2 + 12 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 12) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 13;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xD;
  int v5 = v6 - 13;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for SiriPhoneFeature(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF3)
  {
    unsigned int v6 = ((a2 - 244) >> 8) + 1;
    *id result = a2 + 12;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0xA6618);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *id result = a2 + 12;
        break;
    }
  }
  return result;
}

void type metadata accessor for SiriPhoneFeature()
{
}

void type metadata accessor for PommesFeature()
{
}

void type metadata accessor for SiriPlaybackControlFeature()
{
}

void type metadata accessor for SiriInCallFeature()
{
}

void type metadata accessor for TelephonyUtilitiesFeature()
{
}

void type metadata accessor for IDSFeature()
{
}

unsigned char *storeEnumTagSinglePayload for PommesFeature(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *id result = a2;
        return result;
      case 2:
        *(_WORD *)id result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)id result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *id result = 0;
      break;
    case 2:
      *(_WORD *)id result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0xA6728);
    case 4:
      *(_DWORD *)id result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for AppProtection()
{
}

uint64_t type metadata instantiation function for UserDefaultsSetting(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

uint64_t initializeBufferWithCopyOfBuffer for UserDefaultsSetting(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UserDefaultsSetting(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for UserDefaultsSetting(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for UserDefaultsSetting(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 17))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UserDefaultsSetting(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for UserDefaultsSetting()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for OSFeatureFlag()
{
}

uint64_t OUTLINED_FUNCTION_3_22(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return outlined init with copy of SignalProviding(v9, (uint64_t)&a9);
}

uint64_t OUTLINED_FUNCTION_4_19(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&a9);
}

uint64_t key path setter for RedirectToCompanionFlow.state : RedirectToCompanionFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RedirectToCompanionFlow.State(0);
  __chkstk_darwin(v4 - 8);
  unsigned int v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of RedirectToCompanionFlow.State(a1, (uint64_t)v6);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 104))(v6);
}

uint64_t RedirectToCompanionFlow.state.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23RedirectToCompanionFlow_state;
  swift_beginAccess();
  return outlined init with copy of RedirectToCompanionFlow.State(v3, a1);
}

uint64_t outlined init with copy of RedirectToCompanionFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RedirectToCompanionFlow.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for RedirectToCompanionFlow.State(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for RedirectToCompanionFlow.State);
}

uint64_t RedirectToCompanionFlow.state.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23RedirectToCompanionFlow_state;
  swift_beginAccess();
  outlined assign with take of RedirectToCompanionFlow.State(a1, v3);
  return swift_endAccess();
}

uint64_t outlined assign with take of RedirectToCompanionFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RedirectToCompanionFlow.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*RedirectToCompanionFlow.state.modify())()
{
  return static SingleResultVoicemailModel.resultViewID.modify;
}

uint64_t RedirectToCompanionFlow.sharedGlobals.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23RedirectToCompanionFlow_sharedGlobals, a1);
}

uint64_t RedirectToCompanionFlow.__allocating_init(parse:sharedGlobals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Parse();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_4();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = OUTLINED_FUNCTION_5_14();
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_4();
  uint64_t v13 = v12 - v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
  Input.init(parse:)();
  uint64_t v14 = type metadata accessor for Input();
  __swift_storeEnumTagSinglePayload(v13, 0, 2, v14);
  outlined init with copy of SignalProviding(a2, (uint64_t)v17);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, unsigned char *))(v2 + 120))(v13, v17);
  __swift_destroy_boxed_opaque_existential_1(a2);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  return v15;
}

uint64_t RedirectToCompanionFlow.__allocating_init(state:sharedGlobals:)(uint64_t a1, long long *a2)
{
  uint64_t v4 = swift_allocObject();
  outlined init with take of RedirectToCompanionFlow.State(a1, v4 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23RedirectToCompanionFlow_state);
  outlined init with take of AppSelectionSignalComponent(a2, v4 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23RedirectToCompanionFlow_sharedGlobals);
  return v4;
}

uint64_t RedirectToCompanionFlow.init(state:sharedGlobals:)(uint64_t a1, long long *a2)
{
  outlined init with take of RedirectToCompanionFlow.State(a1, v2 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23RedirectToCompanionFlow_state);
  outlined init with take of AppSelectionSignalComponent(a2, v2 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23RedirectToCompanionFlow_sharedGlobals);
  return v2;
}

uint64_t outlined init with take of RedirectToCompanionFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RedirectToCompanionFlow.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

BOOL RedirectToCompanionFlow.on(input:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = OUTLINED_FUNCTION_5_14();
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_4();
  uint64_t v5 = v4 - v3;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.siriPhone);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315394;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000083, 0x8000000000492480, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x7475706E69286E6FLL, 0xEA0000000000293ALL, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v7, v8, "%s:%s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }

  (*(void (**)(uint64_t))(*(void *)v1 + 96))(v10);
  uint64_t v11 = type metadata accessor for Input();
  BOOL v12 = __swift_getEnumTagSinglePayload(v5, 2, v11) == 0;
  outlined destroy of RedirectToCompanionFlow.State(v5);
  return v12;
}

uint64_t RedirectToCompanionFlow.execute()()
{
  OUTLINED_FUNCTION_1_0();
  v1[7] = v2;
  v1[8] = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserIdentityCheckFlowStrategy.HandoffConfiguration?);
  v1[9] = OUTLINED_FUNCTION_35();
  uint64_t v3 = type metadata accessor for UserIdentityCheckFlowStrategy();
  v1[10] = v3;
  OUTLINED_FUNCTION_19_0(v3);
  v1[11] = v4;
  v1[12] = OUTLINED_FUNCTION_35();
  uint64_t v5 = type metadata accessor for ExecuteOnRemoteDeviceSpecification();
  v1[13] = v5;
  OUTLINED_FUNCTION_19_0(v5);
  v1[14] = v6;
  v1[15] = OUTLINED_FUNCTION_35();
  uint64_t v7 = type metadata accessor for UserIdentityCheckFlowStrategy.HandoffConfiguration();
  v1[16] = v7;
  OUTLINED_FUNCTION_19_0(v7);
  v1[17] = v8;
  v1[18] = OUTLINED_FUNCTION_35();
  uint64_t v9 = type metadata accessor for CompanionDeviceInfoRequirement();
  v1[19] = v9;
  OUTLINED_FUNCTION_19_0(v9);
  v1[20] = v10;
  v1[21] = OUTLINED_FUNCTION_35();
  uint64_t v11 = type metadata accessor for FlowUnhandledReason();
  v1[22] = v11;
  OUTLINED_FUNCTION_19_0(v11);
  v1[23] = v12;
  v1[24] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_5_14();
  v1[25] = OUTLINED_FUNCTION_35();
  uint64_t v13 = type metadata accessor for Input();
  v1[26] = v13;
  OUTLINED_FUNCTION_19_0(v13);
  v1[27] = v14;
  v1[28] = swift_task_alloc();
  v1[29] = swift_task_alloc();
  return _swift_task_switch(RedirectToCompanionFlow.execute(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int EnumTagSinglePayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[6];
  uint64_t v38;
  uint64_t v39;

  char v38 = v0;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.siriPhone);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    v37[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315394;
    *(void *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000083, 0x8000000000492480, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2080;
    *(void *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x2865747563657865, 0xE900000000000029, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v2, v3, "%s:%s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }

  uint64_t v6 = *(void *)(v0 + 200);
  uint64_t v5 = *(void *)(v0 + 208);
  (*(void (**)(void))(**(void **)(v0 + 64) + 96))();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v6, 2, v5);
  if (EnumTagSinglePayload)
  {
    if (EnumTagSinglePayload == 1)
    {
      uint64_t v8 = *(void *)(v0 + 200);
      static ExecuteResponse.complete()();
      outlined destroy of RedirectToCompanionFlow.State(v8);
    }
    else
    {
      uint64_t v22 = *(void *)(v0 + 184);
      uint64_t v21 = *(void *)(v0 + 192);
      uint64_t v23 = *(void *)(v0 + 176);
      (*(void (**)(uint64_t, void, uint64_t))(v22 + 104))(v21, enum case for FlowUnhandledReason.needsServerExecution(_:), v23);
      static ExecuteResponse.unhandled(reason:)();
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
    }
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 232);
    uint64_t v10 = *(void *)(v0 + 208);
    uint64_t v11 = *(void *)(v0 + 160);
    uint64_t v12 = *(void *)(v0 + 168);
    uint64_t v13 = *(void *)(v0 + 152);
    uint64_t v26 = *(void *)(v0 + 144);
    uint64_t v27 = *(void *)(v0 + 224);
    uint64_t v31 = *(void *)(v0 + 136);
    uint64_t v32 = *(void *)(v0 + 128);
    uint64_t v14 = *(void *)(v0 + 112);
    uint64_t v28 = *(void *)(v0 + 120);
    uint64_t v29 = *(void *)(v0 + 104);
    uint64_t v33 = *(void *)(v0 + 96);
    uint64_t v34 = *(void *)(v0 + 88);
    uint64_t v35 = *(void *)(v0 + 80);
    uint64_t v30 = *(void *)(v0 + 72);
    uint64_t v36 = *(void *)(v0 + 216);
    (*(void (**)(uint64_t, void, uint64_t))(v36 + 32))(v9, *(void *)(v0 + 200), v10);
    type metadata accessor for CompanionCompatibilityCheckFlowStrategy();
    (*(void (**)(uint64_t, void, uint64_t))(v11 + 104))(v12, enum case for CompanionDeviceInfoRequirement.supportsPeerToPeerHandoff(_:), v13);
    static CompanionCompatibilityCheckFlowStrategy.require(_:redirectToServerOnFailure:)();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
    uint64_t v15 = type metadata accessor for SimpleHandoffStrategy();
    uint64_t v16 = swift_allocObject();
    v37[3] = v15;
    v37[4] = lazy protocol witness table accessor for type SimpleHandoffStrategy and conformance SimpleHandoffStrategy(&lazy protocol witness table cache variable for type SimpleHandoffStrategy and conformance SimpleHandoffStrategy, v17, (void (*)(uint64_t))type metadata accessor for SimpleHandoffStrategy);
    v37[0] = v16;
    swift_retain();
    UserIdentityCheckFlowStrategy.HandoffConfiguration.init(companionCompatiblityCheck:handoffStrategy:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v27, v9, v10);
    (*(void (**)(uint64_t, void, uint64_t))(v14 + 104))(v28, enum case for ExecuteOnRemoteDeviceSpecification.userCompanion(_:), v29);
    static OutputPublisherFactory.makeOutputPublisherAsync()();
    type metadata accessor for ExecuteOnRemoteFlow();
    swift_allocObject();
    *(void *)(v0 + 16) = ExecuteOnRemoteFlow.init(inputToExecute:device:outputPublisher:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CommonFlowGuard>);
    char v18 = type metadata accessor for CommonFlowGuard();
    OUTLINED_FUNCTION_19_0(v18);
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_467720;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(v30, v26, v32);
    __swift_storeEnumTagSinglePayload(v30, 0, 1, v32);
    UserIdentityCheckFlowStrategy.init(allowsAnonymousUser:allowsUserInteraction:handoffConfiguration:requireSpeechProfile:)();
    static CommonFlowGuard.ensuringUserIdentity(using:)();
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
    static CommonFlowGuard.ensuringUserHasSupportedCompanion(using:)();
    uint64_t v19 = static CommonGuardFlowUtils.makeGuardFlow(withGuards:)();
    swift_bridgeObjectRelease();
    *(void *)(v0 + 24) = v19;
    type metadata accessor for GuardFlow();
    uint64_t v20 = Flow.guarded<A>(by:)();
    swift_release();
    swift_release();
    *(void *)(v0 + 32) = v20;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConditionalFlow<ExecuteOnRemoteFlowResult>);
    lazy protocol witness table accessor for type ConditionalFlow<ExecuteOnRemoteFlowResult> and conformance ConditionalFlow<A>();
    static ExecuteResponse.ongoing<A>(next:childCompletion:)();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v26, v32);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v9, v10);
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
  return v24();
}

uint64_t UnsetRelationshipTemplatesWrapper.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t closure #1 in RedirectToCompanionFlow.execute()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ExecuteOnRemoteFlowResult();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v56 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (uint64_t *)((char *)&v56 - v13);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v56 - v15;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConditionalFlowResult<ExecuteOnRemoteFlowResult>);
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for RedirectToCompanionFlow.State(0);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  uint64_t v63 = (uint64_t)&v56 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v56 - v23;
  outlined init with copy of ConditionalFlowResult<ExecuteOnRemoteFlowResult>(a1, (uint64_t)v19);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (result: ExecuteOnRemoteFlowResult));
  if (__swift_getEnumTagSinglePayload((uint64_t)v19, 1, v25) == 1)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.siriPhone);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl(&dword_0, v27, v28, "ExecuteOnRemote guard flows failed, assuming a server redirect or handoff should have happened, doing nothing.", v29, 2u);
      swift_slowDealloc();
    }

    uint64_t v30 = type metadata accessor for Input();
    __swift_storeEnumTagSinglePayload((uint64_t)v24, 1, 2, v30);
    outlined destroy of ConditionalFlowResult<ExecuteOnRemoteFlowResult>((uint64_t)v19);
  }
  else
  {
    uint64_t v61 = a2;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v16, v19, v4);
    uint64_t v31 = v16;
    uint64_t v32 = *(void (**)(uint64_t *))(v5 + 16);
    uint64_t v62 = v31;
    v32(v14);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v5 + 88))(v14, v4) == enum case for ExecuteOnRemoteFlowResult.remoteFlowFailure(_:))
    {
      (*(void (**)(uint64_t *, uint64_t))(v5 + 96))(v14, v4);
      uint64_t v33 = *v14;
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v34 = type metadata accessor for Logger();
      __swift_project_value_buffer(v34, (uint64_t)static Logger.siriPhone);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v35, v36))
      {
        uint64_t v37 = (uint8_t *)swift_slowAlloc();
        uint64_t v38 = swift_slowAlloc();
        uint64_t v64 = v33;
        uint64_t v65 = v38;
        *(_DWORD *)uint64_t v37 = 136315138;
        uint64_t v60 = v37 + 4;
        swift_errorRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        uint64_t v39 = String.init<A>(describing:)();
        uint64_t v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, &v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl(&dword_0, v35, v36, "ExecuteOnRemote failed with an error=%s: Possible server redirect. Will redirect this input to server as a fallback.", v37, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      swift_errorRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v62, v4);
      a2 = v61;
      uint64_t v52 = type metadata accessor for Input();
      __swift_storeEnumTagSinglePayload((uint64_t)v24, 2, 2, v52);
    }
    else
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v41 = type metadata accessor for Logger();
      __swift_project_value_buffer(v41, (uint64_t)static Logger.siriPhone);
      uint64_t v42 = v62;
      ((void (*)(char *, char *, uint64_t))v32)(v11, v62, v4);
      uint64_t v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.debug.getter();
      LODWORD(v60) = v44;
      if (os_log_type_enabled(v43, v44))
      {
        uint64_t v45 = swift_slowAlloc();
        os_log_t v58 = v43;
        uint64_t v46 = (uint8_t *)v45;
        uint64_t v59 = swift_slowAlloc();
        uint64_t v65 = v59;
        uint64_t v57 = v46;
        *(_DWORD *)uint64_t v46 = 136315138;
        ((void (*)(char *, char *, uint64_t))v32)(v8, v11, v4);
        uint64_t v47 = String.init<A>(describing:)();
        uint64_t v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, &v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v49 = *(void (**)(char *, uint64_t))(v5 + 8);
        v49(v11, v4);
        os_log_t v50 = v58;
        _os_log_impl(&dword_0, v58, (os_log_type_t)v60, "ExecuteOnRemote flow completed with: %s", v57, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        long long v51 = v62;
      }
      else
      {

        uint64_t v49 = *(void (**)(char *, uint64_t))(v5 + 8);
        v49(v11, v4);
        long long v51 = v42;
      }
      v49(v51, v4);
      uint64_t v53 = type metadata accessor for Input();
      __swift_storeEnumTagSinglePayload((uint64_t)v24, 1, 2, v53);
      v49((char *)v14, v4);
      a2 = v61;
    }
  }
  uint64_t v54 = v63;
  outlined init with copy of RedirectToCompanionFlow.State((uint64_t)v24, v63);
  (*(void (**)(uint64_t))(*(void *)a2 + 104))(v54);
  return outlined destroy of RedirectToCompanionFlow.State((uint64_t)v24);
}

uint64_t RedirectToCompanionFlow.execute(completion:)()
{
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t RedirectToCompanionFlow.deinit()
{
  outlined destroy of RedirectToCompanionFlow.State(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23RedirectToCompanionFlow_state);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23RedirectToCompanionFlow_sharedGlobals);
  return v0;
}

uint64_t RedirectToCompanionFlow.__deallocating_deinit()
{
  outlined destroy of RedirectToCompanionFlow.State(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23RedirectToCompanionFlow_state);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin23RedirectToCompanionFlow_sharedGlobals);

  return swift_deallocClassInstance();
}

void (*protocol witness for SiriEnvironmentLocating.siriEnvironment.modify in conformance RedirectToCompanionFlow(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = SiriEnvironmentLocating<>.siriEnvironment.modify();
  return protocol witness for StaticAction.nextAction.modify in conformance PlayVoiceMailAction;
}

uint64_t protocol witness for Flow.on(input:) in conformance RedirectToCompanionFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance RedirectToCompanionFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))();
}

uint64_t protocol witness for Flow.execute() in conformance RedirectToCompanionFlow(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 136) + **(int **)(**(void **)v1 + 136));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for Flow.execute() in conformance RedirectToCompanionFlow;
  return v6(a1);
}

uint64_t protocol witness for Flow.execute() in conformance RedirectToCompanionFlow()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t protocol witness for Flow.exitValue.getter in conformance RedirectToCompanionFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for RedirectToCompanionFlow(0);

  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t UnsetRelationshipTemplatesWrapper.deinit()
{
  return v0;
}

uint64_t protocol witness for HandoffSessionToCompanionFlowStrategyAsync.makeHandoffResponse() in conformance SimpleHandoffStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for Flow.execute() in conformance RedirectToCompanionFlow;
  return HandoffSessionToCompanionFlowStrategyAsync.makeHandoffResponse()(a1, a2, a3);
}

uint64_t outlined destroy of RedirectToCompanionFlow.State(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RedirectToCompanionFlow.State(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for SimpleHandoffStrategy()
{
  return self;
}

uint64_t partial apply for closure #1 in RedirectToCompanionFlow.execute()(uint64_t a1)
{
  return closure #1 in RedirectToCompanionFlow.execute()(a1, v1);
}

unint64_t lazy protocol witness table accessor for type ConditionalFlow<ExecuteOnRemoteFlowResult> and conformance ConditionalFlow<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ConditionalFlow<ExecuteOnRemoteFlowResult> and conformance ConditionalFlow<A>;
  if (!lazy protocol witness table cache variable for type ConditionalFlow<ExecuteOnRemoteFlowResult> and conformance ConditionalFlow<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ConditionalFlow<ExecuteOnRemoteFlowResult>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConditionalFlow<ExecuteOnRemoteFlowResult> and conformance ConditionalFlow<A>);
  }
  return result;
}

uint64_t type metadata accessor for RedirectToCompanionFlow(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for RedirectToCompanionFlow);
}

uint64_t lazy protocol witness table accessor for type SimpleHandoffStrategy and conformance SimpleHandoffStrategy(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Flow in RedirectToCompanionFlow()
{
  return lazy protocol witness table accessor for type SimpleHandoffStrategy and conformance SimpleHandoffStrategy(&lazy protocol witness table cache variable for type RedirectToCompanionFlow and conformance RedirectToCompanionFlow, 255, (void (*)(uint64_t))type metadata accessor for RedirectToCompanionFlow);
}

uint64_t base witness table accessor for SiriEnvironmentLocating in RedirectToCompanionFlow()
{
  return lazy protocol witness table accessor for type SimpleHandoffStrategy and conformance SimpleHandoffStrategy(&lazy protocol witness table cache variable for type RedirectToCompanionFlow and conformance RedirectToCompanionFlow, 255, (void (*)(uint64_t))type metadata accessor for RedirectToCompanionFlow);
}

uint64_t sub_A87F4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 96))();
}

uint64_t ObjC metadata update function for RedirectToCompanionFlow()
{
  return type metadata accessor for RedirectToCompanionFlow(0);
}

uint64_t type metadata completion function for RedirectToCompanionFlow()
{
  uint64_t result = type metadata accessor for RedirectToCompanionFlow.State(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for RedirectToCompanionFlow.State(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = type metadata accessor for Input();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 2, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 2, v7);
    }
  }
  return a1;
}

uint64_t destroy for RedirectToCompanionFlow.State(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Input();
  uint64_t result = __swift_getEnumTagSinglePayload(a1, 2, v2);
  if (!result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
    return v4(a1, v2);
  }
  return result;
}

void *initializeWithCopy for RedirectToCompanionFlow.State(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Input();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 2, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 2, v6);
  }
  return a1;
}

void *assignWithCopy for RedirectToCompanionFlow.State(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Input();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 2, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 2, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 2, v6);
  return a1;
}

void *initializeWithTake for RedirectToCompanionFlow.State(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Input();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 2, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 2, v6);
  }
  return a1;
}

void *assignWithTake for RedirectToCompanionFlow.State(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Input();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 2, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 2, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 2, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for RedirectToCompanionFlow.State(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_A8E84);
}

uint64_t sub_A8E84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Input();
  unsigned int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(a1, a2, v4);
  if (EnumTagSinglePayload >= 3) {
    return EnumTagSinglePayload - 2;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for RedirectToCompanionFlow.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_A8EE0);
}

uint64_t sub_A8EE0(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 2);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = type metadata accessor for Input();

  return __swift_storeEnumTagSinglePayload(a1, v5, a3, v6);
}

uint64_t getEnumTag for RedirectToCompanionFlow.State(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Input();

  return __swift_getEnumTagSinglePayload(a1, 2, v2);
}

uint64_t destructiveInjectEnumTag for RedirectToCompanionFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Input();

  return __swift_storeEnumTagSinglePayload(a1, a2, 2, v4);
}

uint64_t type metadata completion function for RedirectToCompanionFlow.State()
{
  uint64_t result = type metadata accessor for Input();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t outlined init with copy of ConditionalFlowResult<ExecuteOnRemoteFlowResult>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConditionalFlowResult<ExecuteOnRemoteFlowResult>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ConditionalFlowResult<ExecuteOnRemoteFlowResult>(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConditionalFlowResult<ExecuteOnRemoteFlowResult>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t PhoneCallSlotNames.rawValue.getter(char a1)
{
  unint64_t result = 7368801;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x756F526F69647561;
      break;
    case 2:
      unint64_t result = 0x74616E6974736564;
      break;
    case 3:
      unint64_t result = 0xD000000000000015;
      break;
    case 4:
      unint64_t result = 0x746361746E6F63;
      break;
    case 5:
      unint64_t result = 0x73746361746E6F63;
      break;
    case 6:
      unint64_t result = 0xD000000000000016;
      break;
    case 7:
      unint64_t result = 0x65707954797474;
      break;
    case 8:
      unint64_t result = 0x617061436C6C6163;
      break;
    case 9:
      unint64_t result = 0x657079546C6C6163;
      break;
    case 10:
      unint64_t result = 0x6165724365746164;
      break;
    case 11:
      unint64_t result = 0x6E65697069636572;
      break;
    case 12:
      unint64_t result = 0x6E6565736E75;
      break;
    case 13:
      unint64_t result = 0xD000000000000014;
      break;
    case 14:
    case 15:
      unint64_t result = 0xD000000000000010;
      break;
    case 16:
      unint64_t result = 0x4370756F72477369;
      break;
    case 17:
      unint64_t result = 0x756F72476C6C6163;
      break;
    case 18:
      unint64_t result = 0xD000000000000011;
      break;
    case 19:
      unint64_t result = 0x7069636974726170;
      break;
    default:
      return result;
  }
  return result;
}

void one-time initialization function for startAudioCallParameters(uint64_t a1)
{
}

void *PhoneCallSlotNames.startAudioCallParameters.unsafeMutableAddressor()
{
  if (one-time initialization token for startAudioCallParameters != -1) {
    swift_once();
  }
  return &static PhoneCallSlotNames.startAudioCallParameters;
}

uint64_t static PhoneCallSlotNames.startAudioCallParameters.getter()
{
  return static PhoneCallSlotNames.startAudioCallParameters.getter(&one-time initialization token for startAudioCallParameters);
}

void one-time initialization function for startCallParameters(uint64_t a1)
{
}

void one-time initialization function for startAudioCallParameters(uint64_t a1, Class *a2, void *a3)
{
  id v4 = [objc_allocWithZone(*a2) init];
  uint64_t v5 = INIntent.parameterMetadata.getter();

  *a3 = v5;
}

void *PhoneCallSlotNames.startCallParameters.unsafeMutableAddressor()
{
  if (one-time initialization token for startCallParameters != -1) {
    swift_once();
  }
  return &static PhoneCallSlotNames.startCallParameters;
}

uint64_t static PhoneCallSlotNames.startCallParameters.getter()
{
  return static PhoneCallSlotNames.startAudioCallParameters.getter(&one-time initialization token for startCallParameters);
}

uint64_t static PhoneCallSlotNames.startAudioCallParameters.getter(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

uint64_t PhoneCallSlotNames.parameterIdentifier.getter(char a1)
{
  unint64_t v1 = PhoneCallSlotNames.rawValue.getter(a1);

  return ParameterIdentifier.init(_:)(v1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallSlotNames(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t lazy protocol witness table accessor for type PhoneCallSlotNames and conformance PhoneCallSlotNames()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallSlotNames and conformance PhoneCallSlotNames;
  if (!lazy protocol witness table cache variable for type PhoneCallSlotNames and conformance PhoneCallSlotNames)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallSlotNames and conformance PhoneCallSlotNames);
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PhoneCallSlotNames()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneCallSlotNames(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallSlotNames(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::PhoneCallSlotNames_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallSlotNames@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallSlotNames_optional *a2@<X8>)
{
  result.value = PhoneCallSlotNames.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallSlotNames@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = PhoneCallSlotNames.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t getEnumTagSinglePayload for PhoneCallSlotNames(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xED)
  {
    if (a2 + 19 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 19) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 20;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x14;
  int v5 = v6 - 20;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for PhoneCallSlotNames(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 19 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 19) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xED) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEC)
  {
    unsigned int v6 = ((a2 - 237) >> 8) + 1;
    *unint64_t result = a2 + 19;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0xA97A4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 19;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PhoneCallSlotNames()
{
  return &type metadata for PhoneCallSlotNames;
}

uint64_t SingleIntentCacheProvider.deinit()
{
  swift_release();
  return v0;
}

uint64_t SingleIntentCacheProvider.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

double SingleIntentCacheProvider.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  double result = NAN;
  *(_OWORD *)(v0 + 16) = xmmword_467730;
  return result;
}

double SingleIntentCacheProvider.init()()
{
  double result = NAN;
  *(_OWORD *)(v0 + 16) = xmmword_467730;
  return result;
}

uint64_t *PhoneCallControlNLTransformer.__allocating_init(cacheProvider:)(uint64_t a1)
{
  swift_allocObject();
  __swift_mutable_project_boxed_opaque_existential_1(a1, *(void *)(a1 + 24));
  OUTLINED_FUNCTION_1();
  __chkstk_darwin(v2);
  unsigned int v4 = OUTLINED_FUNCTION_2_20(v3, v8);
  v5(v4);
  unsigned int v6 = OUTLINED_FUNCTION_16_12();
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v6;
}

uint64_t *PhoneCallControlNLTransformer.init(cacheProvider:)(uint64_t a1)
{
  __swift_mutable_project_boxed_opaque_existential_1(a1, *(void *)(a1 + 24));
  OUTLINED_FUNCTION_1();
  __chkstk_darwin(v2);
  unsigned int v4 = OUTLINED_FUNCTION_2_20(v3, v8);
  v5(v4);
  unsigned int v6 = OUTLINED_FUNCTION_16_12();
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v6;
}

uint64_t PhoneCallControlNLTransformer.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PhoneCallControlNLTransformer.__deallocating_deinit()
{
  PhoneCallControlNLTransformer.deinit();

  return swift_deallocClassInstance();
}

uint64_t *specialized PhoneCallControlNLTransformer.init(cacheProvider:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  a2[5] = a3;
  a2[6] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a2 + 2);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(boxed_opaque_existential_1, a1, a3);
  a2[7] = type metadata accessor for PhoneCallControlNLTransformer();
  a2[8] = (uint64_t)&outlined read-only object #0 of specialized PhoneCallControlNLTransformer.init(cacheProvider:);
  a2[9] = 0;
  a2[10] = 0;
  return a2;
}

uint64_t outlined destroy of Siri_Nlu_External_UserDialogAct?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for SingleIntentCacheProvider()
{
  return self;
}

uint64_t type metadata accessor for PhoneCallControlNLTransformer()
{
  return self;
}

char *OUTLINED_FUNCTION_2_20@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_7_18(uint64_t a1)
{
  *(void *)(v1 - 120) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_9_16(uint64_t a1)
{
  *(void *)(v1 - 120) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_11_13()
{
  *(void *)(v1 - 184) = v0;
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_12_6(uint64_t a1)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v1, (uint64_t *)(v2 - 96));
}

uint64_t OUTLINED_FUNCTION_13_6()
{
  return *(void *)(v0 - 160);
}

uint64_t *OUTLINED_FUNCTION_16_12()
{
  return specialized PhoneCallControlNLTransformer.init(cacheProvider:)(v3, v0, v1, v2);
}

uint64_t OUTLINED_FUNCTION_17_5()
{
  return v0;
}

uint64_t key path setter for PhoneCallProvider.Builder.preferredCallProvider : PhoneCallProvider.Builder(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  __chkstk_darwin(v4 - 8);
  unsigned int v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SpeakableString?(a1, (uint64_t)v6);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 112))(v6);
}

uint64_t PhoneCallProvider.Builder.preferredCallProvider.getter@<X0>(uint64_t a1@<X8>)
{
  return PhoneCallProvider.Builder.preferredCallProvider.getter(&OBJC_IVAR____TtCC27PhoneCallFlowDelegatePlugin17PhoneCallProvider7Builder_preferredCallProvider, a1);
}

uint64_t outlined init with copy of SpeakableString?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t PhoneCallProvider.Builder.preferredCallProvider.setter(uint64_t a1)
{
  return PhoneCallProvider.Builder.preferredCallProvider.setter(a1, &OBJC_IVAR____TtCC27PhoneCallFlowDelegatePlugin17PhoneCallProvider7Builder_preferredCallProvider);
}

uint64_t outlined assign with take of SpeakableString?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*PhoneCallProvider.Builder.preferredCallProvider.modify())()
{
  return PhoneFlow.state.modify;
}

uint64_t key path setter for PhoneCallProvider.Builder.providerName : PhoneCallProvider.Builder(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  __chkstk_darwin(v4 - 8);
  unsigned int v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SpeakableString?(a1, (uint64_t)v6);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 136))(v6);
}

uint64_t PhoneCallProvider.Builder.providerName.getter@<X0>(uint64_t a1@<X8>)
{
  return PhoneCallProvider.Builder.preferredCallProvider.getter(&OBJC_IVAR____TtCC27PhoneCallFlowDelegatePlugin17PhoneCallProvider7Builder_providerName, a1);
}

uint64_t PhoneCallProvider.Builder.providerName.setter(uint64_t a1)
{
  return PhoneCallProvider.Builder.preferredCallProvider.setter(a1, &OBJC_IVAR____TtCC27PhoneCallFlowDelegatePlugin17PhoneCallProvider7Builder_providerName);
}

uint64_t (*PhoneCallProvider.Builder.providerName.modify())()
{
  return PhoneFlow.state.modify;
}

uint64_t key path setter for PhoneCallProvider.Builder.providerBundleId : PhoneCallProvider.Builder(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  __chkstk_darwin(v4 - 8);
  unsigned int v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SpeakableString?(a1, (uint64_t)v6);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 160))(v6);
}

uint64_t PhoneCallProvider.Builder.providerBundleId.getter@<X0>(uint64_t a1@<X8>)
{
  return PhoneCallProvider.Builder.preferredCallProvider.getter(&OBJC_IVAR____TtCC27PhoneCallFlowDelegatePlugin17PhoneCallProvider7Builder_providerBundleId, a1);
}

uint64_t PhoneCallProvider.Builder.preferredCallProvider.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *a1;
  swift_beginAccess();
  return outlined init with copy of SpeakableString?(v4, a2);
}

uint64_t PhoneCallProvider.Builder.providerBundleId.setter(uint64_t a1)
{
  return PhoneCallProvider.Builder.preferredCallProvider.setter(a1, &OBJC_IVAR____TtCC27PhoneCallFlowDelegatePlugin17PhoneCallProvider7Builder_providerBundleId);
}

uint64_t PhoneCallProvider.Builder.preferredCallProvider.setter(uint64_t a1, void *a2)
{
  uint64_t v4 = v2 + *a2;
  swift_beginAccess();
  outlined assign with take of SpeakableString?(a1, v4);
  return swift_endAccess();
}

uint64_t (*PhoneCallProvider.Builder.providerBundleId.modify())()
{
  return PhoneFlow.state.modify;
}

uint64_t PhoneCallProvider.Builder.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  PhoneCallProvider.Builder.init()();
  return v0;
}

uint64_t PhoneCallProvider.Builder.init()()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCC27PhoneCallFlowDelegatePlugin17PhoneCallProvider7Builder_preferredCallProvider;
  type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_14_1(v1);
  OUTLINED_FUNCTION_14_1(v0 + OBJC_IVAR____TtCC27PhoneCallFlowDelegatePlugin17PhoneCallProvider7Builder_providerName);
  OUTLINED_FUNCTION_14_1(v0 + OBJC_IVAR____TtCC27PhoneCallFlowDelegatePlugin17PhoneCallProvider7Builder_providerBundleId);
  return v0;
}

uint64_t PhoneCallProvider.Builder.__allocating_init(preferredCallProvider:)()
{
  uint64_t v1 = OUTLINED_FUNCTION_23_6();
  PhoneCallProvider.Builder.init(preferredCallProvider:)(v0);
  return v1;
}

uint64_t PhoneCallProvider.Builder.init(preferredCallProvider:)(uint64_t a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = OUTLINED_FUNCTION_11_0(v4);
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_18_8();
  uint64_t v6 = v2 + OBJC_IVAR____TtCC27PhoneCallFlowDelegatePlugin17PhoneCallProvider7Builder_preferredCallProvider;
  uint64_t v7 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_15_8(v6);
  OUTLINED_FUNCTION_15_8(v2 + OBJC_IVAR____TtCC27PhoneCallFlowDelegatePlugin17PhoneCallProvider7Builder_providerName);
  OUTLINED_FUNCTION_15_8(v2 + OBJC_IVAR____TtCC27PhoneCallFlowDelegatePlugin17PhoneCallProvider7Builder_providerBundleId);
  OUTLINED_FUNCTION_10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v1, a1, v7);
  __swift_storeEnumTagSinglePayload(v1, 0, 1, v7);
  swift_beginAccess();
  outlined assign with take of SpeakableString?(v1, v6);
  swift_endAccess();
  return v2;
}

uint64_t PhoneCallProvider.Builder.withPreferredCallProvider(_:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v2 = OUTLINED_FUNCTION_11_0(v1);
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_0_16(v3, v6);
  OUTLINED_FUNCTION_22();
  (*(void (**)(uint64_t))(v4 + 112))(v0);
  return swift_retain();
}

uint64_t PhoneCallProvider.Builder.withPreferredCallProvider(print:speak:)()
{
  OUTLINED_FUNCTION_11_14();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v2 = OUTLINED_FUNCTION_11_0(v1);
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_3_3();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_8_19();
  uint64_t v3 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v0, 0, 1, v3);
  OUTLINED_FUNCTION_22();
  (*(void (**)(uint64_t))(v4 + 112))(v0);
  return swift_retain();
}

uint64_t PhoneCallProvider.Builder.withProviderName(_:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v2 = OUTLINED_FUNCTION_11_0(v1);
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_0_16(v3, v6);
  OUTLINED_FUNCTION_22();
  (*(void (**)(uint64_t))(v4 + 136))(v0);
  return swift_retain();
}

uint64_t PhoneCallProvider.Builder.withProviderName(print:speak:)()
{
  OUTLINED_FUNCTION_11_14();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v2 = OUTLINED_FUNCTION_11_0(v1);
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_3_3();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_8_19();
  uint64_t v3 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v0, 0, 1, v3);
  OUTLINED_FUNCTION_22();
  (*(void (**)(uint64_t))(v4 + 136))(v0);
  return swift_retain();
}

uint64_t PhoneCallProvider.Builder.withProviderBundleId(_:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v2 = OUTLINED_FUNCTION_11_0(v1);
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_0_16(v3, v6);
  OUTLINED_FUNCTION_22();
  (*(void (**)(uint64_t))(v4 + 160))(v0);
  return swift_retain();
}

uint64_t PhoneCallProvider.Builder.withProviderBundleId(print:speak:)()
{
  OUTLINED_FUNCTION_11_14();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v2 = OUTLINED_FUNCTION_11_0(v1);
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_3_3();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_8_19();
  uint64_t v3 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v0, 0, 1, v3);
  OUTLINED_FUNCTION_22();
  (*(void (**)(uint64_t))(v4 + 160))(v0);
  return swift_retain();
}

uint64_t PhoneCallProvider.Builder.build()()
{
  type metadata accessor for PhoneCallProvider(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = swift_retain();
  PhoneCallProvider.init(builder:)(v1);
  return v0;
}

uint64_t PhoneCallProvider.__allocating_init(builder:)()
{
  uint64_t v1 = OUTLINED_FUNCTION_23_6();
  PhoneCallProvider.init(builder:)(v0);
  return v1;
}

uint64_t type metadata accessor for PhoneCallProvider(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for PhoneCallProvider);
}

uint64_t PhoneCallProvider.Builder.deinit()
{
  outlined destroy of SpeakableString?(v0 + OBJC_IVAR____TtCC27PhoneCallFlowDelegatePlugin17PhoneCallProvider7Builder_preferredCallProvider);
  outlined destroy of SpeakableString?(v0 + OBJC_IVAR____TtCC27PhoneCallFlowDelegatePlugin17PhoneCallProvider7Builder_providerName);
  outlined destroy of SpeakableString?(v0 + OBJC_IVAR____TtCC27PhoneCallFlowDelegatePlugin17PhoneCallProvider7Builder_providerBundleId);
  return v0;
}

uint64_t PhoneCallProvider.Builder.__deallocating_deinit()
{
  return PhoneCallProvider.Builder.__deallocating_deinit((void (*)(void))PhoneCallProvider.Builder.deinit);
}

unint64_t static PhoneCallProvider.catTypeName.getter()
{
  return 0xD000000000000012;
}

uint64_t key path setter for PhoneCallProvider.mockGlobals : PhoneCallProvider(id *a1, uint64_t a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))(**(void **)a2 + 136);
  id v4 = *a1;
  return v3(v2);
}

void *PhoneCallProvider.mockGlobals.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = v1;
  return v1;
}

void PhoneCallProvider.mockGlobals.setter(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)(v1 + 16) = a1;
}

uint64_t (*PhoneCallProvider.mockGlobals.modify())()
{
  return static SingleResultVoicemailModel.resultViewID.modify;
}

uint64_t PhoneCallProvider.preferredCallProvider.getter@<X0>(uint64_t a1@<X8>)
{
  return OUTLINED_FUNCTION_6_1(a1, OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_preferredCallProvider);
}

uint64_t PhoneCallProvider.providerName.getter@<X0>(uint64_t a1@<X8>)
{
  return OUTLINED_FUNCTION_6_1(a1, OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_providerName);
}

uint64_t PhoneCallProvider.providerBundleId.getter@<X0>(uint64_t a1@<X8>)
{
  return OUTLINED_FUNCTION_6_1(a1, OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_providerBundleId);
}

void *PhoneCallProvider.init(builder:)(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = OUTLINED_FUNCTION_11_0(v5);
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_5_1();
  v1[2] = 0;
  (*(void (**)(void))(*(void *)a1 + 104))();
  uint64_t v7 = outlined init with take of SpeakableString?(v2, (uint64_t)v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_preferredCallProvider);
  (*(void (**)(uint64_t))(*(void *)a1 + 128))(v7);
  uint64_t v8 = outlined init with take of SpeakableString?(v2, (uint64_t)v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_providerName);
  (*(void (**)(uint64_t))(*(void *)a1 + 152))(v8);
  uint64_t v9 = outlined init with take of SpeakableString?(v2, (uint64_t)v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_providerBundleId);
  if (((*(uint64_t (**)(uint64_t))(*v1 + 160))(v9) & 1) == 0)
  {
    uint64_t v10 = (void *)static Log.siriDialogEngine.getter();
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_467710;
    OUTLINED_FUNCTION_26_6();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallProvider.Type);
    uint64_t v12 = String.init<A>(describing:)();
    uint64_t v14 = v13;
    *(void *)(v11 + 56) = &type metadata for String;
    *(void *)(v11 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v11 + 32) = v12;
    *(void *)(v11 + 40) = v14;
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
  }
  swift_release();
  return v3;
}

uint64_t outlined destroy of SpeakableString?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of SpeakableString?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t PhoneCallProvider.__allocating_init(preferredCallProvider:providerName:providerBundleId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for PhoneCallProvider.Builder(0);
  swift_allocObject();
  PhoneCallProvider.Builder.init()();
  OUTLINED_FUNCTION_22();
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(v7 + 192))(a1);
  swift_release();
  (*(void (**)(uint64_t))(*(void *)v8 + 208))(a2);
  swift_release();
  OUTLINED_FUNCTION_22();
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(v9 + 224))(a3);
  swift_release();
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(v3 + 152))(v10);
  outlined destroy of SpeakableString?(a3);
  outlined destroy of SpeakableString?(a2);
  outlined destroy of SpeakableString?(a1);
  return v11;
}

uint64_t type metadata accessor for PhoneCallProvider.Builder(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for PhoneCallProvider.Builder);
}

Swift::Bool __swiftcall PhoneCallProvider.allRequiredInputsHaveValues()()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v3 = OUTLINED_FUNCTION_11_0(v2);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_18_8();
  outlined init with copy of SpeakableString?(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_preferredCallProvider, v0);
  uint64_t v4 = type metadata accessor for SpeakableString();
  Swift::Bool v5 = __swift_getEnumTagSinglePayload(v0, 1, v4) != 1;
  outlined destroy of SpeakableString?(v0);
  return v5;
}

uint64_t PhoneCallProvider.getProperty(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = OUTLINED_FUNCTION_11_0(v7);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v25 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v25 - v15;
  if (a1 == 0xD000000000000015 && (OUTLINED_FUNCTION_20(), v20) || (OUTLINED_FUNCTION_4_20() & 1) != 0)
  {
    outlined init with copy of SpeakableString?(v3 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_preferredCallProvider, (uint64_t)v16);
    uint64_t v17 = type metadata accessor for SpeakableString();
    OUTLINED_FUNCTION_21_8((uint64_t)v16);
    if (!v20) {
      goto LABEL_21;
    }
    uint64_t v18 = (uint64_t)v16;
    goto LABEL_7;
  }
  BOOL v20 = a1 == 0x72656469766F7270 && a2 == 0xEC000000656D614ELL;
  if (v20 || (OUTLINED_FUNCTION_4_20() & 1) != 0)
  {
    outlined init with copy of SpeakableString?(v3 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_providerName, (uint64_t)v14);
    uint64_t v17 = type metadata accessor for SpeakableString();
    OUTLINED_FUNCTION_21_8((uint64_t)v14);
    if (!v20) {
      goto LABEL_21;
    }
    uint64_t v18 = (uint64_t)v14;
LABEL_7:
    uint64_t result = outlined destroy of SpeakableString?(v18);
LABEL_8:
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return result;
  }
  if (a1 == 0xD000000000000010 && (OUTLINED_FUNCTION_20(), v20) || (OUTLINED_FUNCTION_4_20() & 1) != 0)
  {
    outlined init with copy of SpeakableString?(v3 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_providerBundleId, (uint64_t)v11);
    uint64_t v17 = type metadata accessor for SpeakableString();
    OUTLINED_FUNCTION_21_8((uint64_t)v11);
    if (!v20)
    {
LABEL_21:
      *(void *)(a3 + 24) = v17;
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)a3);
      OUTLINED_FUNCTION_10();
      return (*(uint64_t (**)(void))(v21 + 32))();
    }
    uint64_t v18 = (uint64_t)v11;
    goto LABEL_7;
  }
  if (a1 == 0xD000000000000011 && (OUTLINED_FUNCTION_20(), v20) || (OUTLINED_FUNCTION_4_20() & 1) != 0)
  {
    swift_retain();
    char v22 = specialized PhoneCallProviderProperties.isFirstPartyPhone.getter();
  }
  else
  {
    if (a1 != 0x6954656361467369 || a2 != 0xEA0000000000656DLL)
    {
      uint64_t result = OUTLINED_FUNCTION_4_20();
      if ((result & 1) == 0) {
        goto LABEL_8;
      }
    }
    swift_retain();
    char v22 = specialized PhoneCallProviderProperties.isFaceTime.getter();
  }
  char v24 = v22;
  uint64_t result = swift_release();
  *(void *)(a3 + 24) = &type metadata for Bool;
  *(unsigned char *)a3 = v24 & 1;
  return result;
}

uint64_t specialized PhoneCallProviderProperties.isFirstPartyPhone.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SpeakableString?(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_preferredCallProvider, (uint64_t)v3);
  uint64_t v4 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)v3, 1, v4) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v3);
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v5 = SpeakableString.print.getter();
    uint64_t v6 = v7;
    (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  uint64_t v8 = INPreferredCallProviderGetBackingType();
  switch(v8)
  {
    case 4:
      uint64_t v9 = @"THIRD_PARTY_PROVIDER";
      goto LABEL_10;
    case 3:
      uint64_t v9 = @"FACETIME_PROVIDER";
      goto LABEL_10;
    case 2:
      uint64_t v9 = @"TELEPHONY_PROVIDER";
LABEL_10:
      uint64_t v10 = v9;
      goto LABEL_12;
  }
  uint64_t v9 = +[NSString stringWithFormat:@"(unknown: %i)", v8];
LABEL_12:
  uint64_t v11 = v9;
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  if (v6)
  {
    if (v5 == v12 && v6 == v14) {
      char v16 = 1;
    }
    else {
      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v16 = 0;
  }
  swift_bridgeObjectRelease();
  return v16 & 1;
}

uint64_t specialized PhoneCallProviderProperties.isFaceTime.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v2 = OUTLINED_FUNCTION_11_0(v1);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SpeakableString?(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_preferredCallProvider, (uint64_t)v4);
  uint64_t v5 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)v4, 1, v5) == 1)
  {
    outlined destroy of SpeakableString?((uint64_t)v4);
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v6 = SpeakableString.print.getter();
    uint64_t v7 = v8;
    OUTLINED_FUNCTION_10();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v4, v5);
  }
  uint64_t v10 = INPreferredCallProviderGetBackingType();
  switch(v10)
  {
    case 4:
      uint64_t v11 = @"THIRD_PARTY_PROVIDER";
      goto LABEL_10;
    case 3:
      uint64_t v11 = @"FACETIME_PROVIDER";
      goto LABEL_10;
    case 2:
      uint64_t v11 = @"TELEPHONY_PROVIDER";
LABEL_10:
      uint64_t v12 = v11;
      goto LABEL_12;
  }
  uint64_t v11 = +[NSString stringWithFormat:@"(unknown: %i)", v10];
LABEL_12:
  uint64_t v13 = v11;
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;

  if (v7)
  {
    if (v6 == v14 && v7 == v16) {
      char v18 = 1;
    }
    else {
      char v18 = OUTLINED_FUNCTION_4_20();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v18 = 0;
  }
  swift_bridgeObjectRelease();
  return v18 & 1;
}

PhoneCallFlowDelegatePlugin::PhoneCallProvider::CodingKeys_optional __swiftcall PhoneCallProvider.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PhoneCallProvider.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return (PhoneCallFlowDelegatePlugin::PhoneCallProvider::CodingKeys_optional)3;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::PhoneCallProvider::CodingKeys_optional)v3;
  }
}

void PhoneCallProvider.CodingKeys.rawValue.getter(char a1)
{
  if (a1) {
    OUTLINED_FUNCTION_22_5(0xD000000000000010);
  }
  else {
    OUTLINED_FUNCTION_24_10();
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallProvider.CodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PhoneCallProvider.CodingKeys()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneCallProvider.CodingKeys(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallProvider.CodingKeys(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::PhoneCallProvider::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallProvider.CodingKeys@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallProvider::CodingKeys_optional *a2@<X8>)
{
  result.value = PhoneCallProvider.CodingKeys.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallProvider.CodingKeys(void *a1@<X8>)
{
  PhoneCallProvider.CodingKeys.rawValue.getter(*v1);
  *a1 = v3;
  a1[1] = v4;
}

void protocol witness for CodingKey.stringValue.getter in conformance PhoneCallProvider.CodingKeys()
{
  PhoneCallProvider.CodingKeys.rawValue.getter(*v0);
}

PhoneCallFlowDelegatePlugin::PhoneCallProvider::CodingKeys_optional protocol witness for CodingKey.init(stringValue:) in conformance PhoneCallProvider.CodingKeys@<W0>(uint64_t a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallProvider::CodingKeys_optional *a2@<X8>)
{
  result.value = PhoneCallProvider.CodingKeys.init(stringValue:)(*(Swift::String *)&a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance PhoneCallProvider.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PhoneCallProvider.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneCallProvider.CodingKeys and conformance PhoneCallProvider.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PhoneCallProvider.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneCallProvider.CodingKeys and conformance PhoneCallProvider.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PhoneCallProvider.deinit()
{
  outlined destroy of SpeakableString?(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_preferredCallProvider);
  outlined destroy of SpeakableString?(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_providerName);
  outlined destroy of SpeakableString?(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_providerBundleId);
  return v0;
}

uint64_t PhoneCallProvider.__deallocating_deinit()
{
  return PhoneCallProvider.Builder.__deallocating_deinit((void (*)(void))PhoneCallProvider.deinit);
}

uint64_t PhoneCallProvider.Builder.__deallocating_deinit(void (*a1)(void))
{
  a1();

  return swift_deallocClassInstance();
}

uint64_t PhoneCallProvider.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PhoneCallProvider.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_5_1();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PhoneCallProvider.CodingKeys and conformance PhoneCallProvider.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for SpeakableString();
  lazy protocol witness table accessor for type SpeakableString and conformance SpeakableString(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, (void (*)(uint64_t))&type metadata accessor for SpeakableString);
  OUTLINED_FUNCTION_10_9();
  if (!v1)
  {
    OUTLINED_FUNCTION_10_9();
    OUTLINED_FUNCTION_10_9();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v2, v4);
}

unint64_t lazy protocol witness table accessor for type PhoneCallProvider.CodingKeys and conformance PhoneCallProvider.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallProvider.CodingKeys and conformance PhoneCallProvider.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneCallProvider.CodingKeys and conformance PhoneCallProvider.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallProvider.CodingKeys and conformance PhoneCallProvider.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallProvider.CodingKeys and conformance PhoneCallProvider.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneCallProvider.CodingKeys and conformance PhoneCallProvider.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallProvider.CodingKeys and conformance PhoneCallProvider.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallProvider.CodingKeys and conformance PhoneCallProvider.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneCallProvider.CodingKeys and conformance PhoneCallProvider.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallProvider.CodingKeys and conformance PhoneCallProvider.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallProvider.CodingKeys and conformance PhoneCallProvider.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneCallProvider.CodingKeys and conformance PhoneCallProvider.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallProvider.CodingKeys and conformance PhoneCallProvider.CodingKeys);
  }
  return result;
}

uint64_t PhoneCallProvider.__allocating_init(from:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  PhoneCallProvider.init(from:)(a1);
  return v2;
}

uint64_t PhoneCallProvider.init(from:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = OUTLINED_FUNCTION_11_0(v5);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v25 - v11;
  __chkstk_darwin(v10);
  os_log_type_t v28 = (char *)&v25 - v13;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PhoneCallProvider.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v15 = v14;
  __chkstk_darwin(v16);
  *(void *)(v3 + 16) = 0;
  uint64_t v17 = a1[3];
  uint64_t v30 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v17);
  lazy protocol witness table accessor for type PhoneCallProvider.CodingKeys and conformance PhoneCallProvider.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    uint64_t v19 = (uint64_t)v30;

    type metadata accessor for PhoneCallProvider(0);
    OUTLINED_FUNCTION_26_6();
    swift_deallocPartialClassInstance();
    uint64_t v24 = v19;
  }
  else
  {
    uint64_t v26 = v9;
    uint64_t v27 = v15;
    type metadata accessor for SpeakableString();
    char v33 = 0;
    lazy protocol witness table accessor for type SpeakableString and conformance SpeakableString(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, (void (*)(uint64_t))&type metadata accessor for SpeakableString);
    uint64_t v18 = (uint64_t)v28;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined init with take of SpeakableString?(v18, v3 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_preferredCallProvider);
    char v32 = 1;
    OUTLINED_FUNCTION_13_7();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined init with take of SpeakableString?((uint64_t)v12, v3 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_providerName);
    char v31 = 2;
    uint64_t v21 = (uint64_t)v26;
    OUTLINED_FUNCTION_13_7();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v22 = OUTLINED_FUNCTION_12_7();
    v23(v22);
    outlined init with take of SpeakableString?(v21, v3 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_providerBundleId);
    uint64_t v24 = (uint64_t)v30;
  }
  __swift_destroy_boxed_opaque_existential_1(v24);
  return v3;
}

uint64_t lazy protocol witness table accessor for type SpeakableString and conformance SpeakableString(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Decodable in PhoneCallProvider()
{
  return lazy protocol witness table accessor for type SpeakableString and conformance SpeakableString(&lazy protocol witness table cache variable for type PhoneCallProvider and conformance PhoneCallProvider, (void (*)(uint64_t))type metadata accessor for PhoneCallProvider);
}

uint64_t base witness table accessor for Encodable in PhoneCallProvider()
{
  return lazy protocol witness table accessor for type SpeakableString and conformance SpeakableString(&lazy protocol witness table cache variable for type PhoneCallProvider and conformance PhoneCallProvider, (void (*)(uint64_t))type metadata accessor for PhoneCallProvider);
}

uint64_t protocol witness for static CATType.catTypeName.getter in conformance PhoneCallProvider()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t protocol witness for static CATType.isDialogType.getter in conformance PhoneCallProvider()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t protocol witness for CATType.mockGlobals.getter in conformance PhoneCallProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))();
}

uint64_t protocol witness for CATType.mockGlobals.setter in conformance PhoneCallProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))();
}

void (*protocol witness for CATType.mockGlobals.modify in conformance PhoneCallProvider(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 144))();
  return protocol witness for StaticAction.nextAction.modify in conformance PlayVoiceMailAction;
}

uint64_t protocol witness for CATType.getProperty(_:) in conformance PhoneCallProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 168))();
}

uint64_t protocol witness for PhoneCallProviderProperties.preferredCallProvider.getter in conformance PhoneCallProvider@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SpeakableString?(*v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_preferredCallProvider, a1);
}

uint64_t protocol witness for PhoneCallProviderProperties.providerName.getter in conformance PhoneCallProvider@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SpeakableString?(*v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_providerName, a1);
}

uint64_t protocol witness for PhoneCallProviderProperties.providerBundleId.getter in conformance PhoneCallProvider@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SpeakableString?(*v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17PhoneCallProvider_providerBundleId, a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PhoneCallProvider@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 184))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PhoneCallProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 176))();
}

uint64_t sub_AC108()
{
  OUTLINED_FUNCTION_22();
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t sub_AC14C()
{
  OUTLINED_FUNCTION_22();
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t sub_AC190()
{
  OUTLINED_FUNCTION_22();
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t sub_AC1D4@<X0>(uint64_t *a1@<X8>)
{
  OUTLINED_FUNCTION_22();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 128))();
  *a1 = result;
  return result;
}

uint64_t ObjC metadata update function for PhoneCallProvider()
{
  return type metadata accessor for PhoneCallProvider(0);
}

void type metadata completion function for PhoneCallProvider()
{
  type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void type metadata accessor for SpeakableString?()
{
  if (!lazy cache variable for type metadata for SpeakableString?)
  {
    type metadata accessor for SpeakableString();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SpeakableString?);
    }
  }
}

uint64_t ObjC metadata update function for PhoneCallProvider.Builder()
{
  return type metadata accessor for PhoneCallProvider.Builder(0);
}

void type metadata completion function for PhoneCallProvider.Builder()
{
  type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

unsigned char *storeEnumTagSinglePayload for PhoneCallProvider.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0xAC488);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PhoneCallProvider.CodingKeys()
{
  return &type metadata for PhoneCallProvider.CodingKeys;
}

uint64_t OUTLINED_FUNCTION_0_16@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return outlined init with copy of SpeakableString?(v2, (uint64_t)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0));
}

uint64_t OUTLINED_FUNCTION_4_20()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_7_19()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_8_19()
{
  return SpeakableString.init(print:speak:)();
}

uint64_t OUTLINED_FUNCTION_10_9()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_12_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_13_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_15_8(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(a1, 1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_16_13()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_22_5@<X0>(uint64_t a1@<X8>)
{
  if (v1 == 1) {
    return 0x72656469766F7270;
  }
  else {
    return a1;
  }
}

uint64_t OUTLINED_FUNCTION_23_6()
{
  return swift_allocObject();
}

const char *ExecutionPathConstants.enUSLocale.unsafeMutableAddressor()
{
  return "en-US";
}

uint64_t static ExecutionPathConstants.enUSLocale.getter()
{
  return 0x53552D6E65;
}

const char *ExecutionPathConstants.koKRLocale.unsafeMutableAddressor()
{
  return "ko-KR";
}

uint64_t static ExecutionPathConstants.koKRLocale.getter()
{
  return 0x524B2D6F6BLL;
}

uint64_t static ExecutionPath.isCompositionFlowEnabled(sharedGlobals:)(void *a1)
{
  uint64_t v49 = type metadata accessor for Locale();
  uint64_t v2 = *(void *)(v49 - 8);
  uint64_t v3 = __chkstk_darwin(v49);
  uint64_t v5 = &v47[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v3);
  uint64_t v7 = &v47[-v6];
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 56))(v8, v9);
  int v48 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 216))(v10);
  swift_release();
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v12 + 8))(v67, v11, v12);
  __swift_project_boxed_opaque_existential_1(v67, v67[3]);
  char v13 = dispatch thunk of DeviceState.isPhone.getter();
  outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v64);
  if (v13)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
    outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v61);
LABEL_4:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v61);
    outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v58);
LABEL_5:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
    outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v55);
LABEL_6:
    char v17 = 0;
    goto LABEL_7;
  }
  uint64_t v14 = v65;
  uint64_t v15 = v66;
  __swift_project_boxed_opaque_existential_1(v64, v65);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v15 + 8))(v61, v14, v15);
  __swift_project_boxed_opaque_existential_1(v61, v62);
  char v16 = dispatch thunk of DeviceState.isPad.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v61);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
  outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v61);
  if (v16) {
    goto LABEL_4;
  }
  uint64_t v28 = v62;
  uint64_t v29 = v63;
  __swift_project_boxed_opaque_existential_1(v61, v62);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v29 + 8))(v58, v28, v29);
  __swift_project_boxed_opaque_existential_1(v58, v59);
  char v30 = dispatch thunk of DeviceState.isCarPlay.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v61);
  outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v58);
  if (v30) {
    goto LABEL_5;
  }
  uint64_t v31 = v59;
  uint64_t v32 = v60;
  __swift_project_boxed_opaque_existential_1(v58, v59);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v32 + 8))(v55, v31, v32);
  __swift_project_boxed_opaque_existential_1(v55, v56);
  char v33 = dispatch thunk of DeviceState.isMac.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v55);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
  outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v55);
  if (v33) {
    goto LABEL_6;
  }
  uint64_t v34 = v56;
  uint64_t v35 = v57;
  __swift_project_boxed_opaque_existential_1(v55, v56);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v35 + 8))(v52, v34, v35);
  __swift_project_boxed_opaque_existential_1(v52, v53);
  char v36 = dispatch thunk of DeviceState.isWatch.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
  char v17 = v36 ^ 1;
LABEL_7:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v55);
  uint64_t v18 = a1[3];
  uint64_t v19 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v18);
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 56))(v18, v19);
  LOBYTE(v18) = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 240))(v20);
  swift_release();
  outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v52);
  if (v18)
  {
    char v21 = 1;
  }
  else
  {
    uint64_t v22 = v53;
    uint64_t v23 = v54;
    __swift_project_boxed_opaque_existential_1(v52, v53);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v23 + 8))(v50, v22, v23);
    __swift_project_boxed_opaque_existential_1(v50, v51);
    DeviceState.siriInputLocale.getter();
    uint64_t v24 = Locale.identifier.getter();
    uint64_t v26 = v25;
    (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v7, v49);
    if (v24 == 0x53552D6E65 && v26 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
      char v21 = 1;
    }
    else
    {
      char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
  uint64_t v37 = a1[3];
  uint64_t v38 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v37);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v38 + 8))(v50, v37, v38);
  __swift_project_boxed_opaque_existential_1(v50, v51);
  DeviceState.siriInputLocale.getter();
  uint64_t v39 = Locale.identifier.getter();
  uint64_t v41 = v40;
  (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v5, v49);
  if (v39 == 0x524B2D6F6BLL && v41 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    char v44 = 0;
  }
  else
  {
    char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v44 = v43 ^ 1;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (v17 & 1 | ((v48 & 1) == 0)) {
    char v45 = 0;
  }
  else {
    char v45 = v21 & v44;
  }
  return v45 & 1;
}

BOOL static ExecutionPath.__derived_enum_equals(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  switch(a1)
  {
    case 5u:
      return a2 == 5;
    case 4u:
      return a2 == 4;
    case 3u:
      return a2 == 3;
  }
  if (a2 - 3 < 3) {
    return 0;
  }
  return a1 == a2;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ExecutionPath(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static ExecutionPath.__derived_enum_equals(_:_:)(*a1, *a2);
}

unint64_t lazy protocol witness table accessor for type ExecutionPath.FallbackLocation and conformance ExecutionPath.FallbackLocation()
{
  unint64_t result = lazy protocol witness table cache variable for type ExecutionPath.FallbackLocation and conformance ExecutionPath.FallbackLocation;
  if (!lazy protocol witness table cache variable for type ExecutionPath.FallbackLocation and conformance ExecutionPath.FallbackLocation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExecutionPath.FallbackLocation and conformance ExecutionPath.FallbackLocation);
  }
  return result;
}

void type metadata accessor for ExecutionPathConstants()
{
}

uint64_t getEnumTagSinglePayload for ExecutionPath(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFB)
  {
    unsigned int v2 = a2 + 5;
    if (a2 + 5 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 5;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 5;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0xACE60);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 5;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  if (v7 >= 3) {
    unsigned int v8 = v7 - 2;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v8 >= 4) {
    return v8 - 3;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for ExecutionPath(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 5;
  if (a3 + 5 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFB) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v7 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0xACF48);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for ExecutionPath(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 3) {
    return v1 - 2;
  }
  else {
    return 0;
  }
}

unsigned char *destructiveInjectEnumTag for ExecutionPath(unsigned char *result, int a2)
{
  if (a2) {
    *unint64_t result = a2 + 2;
  }
  return result;
}

void type metadata accessor for ExecutionPath()
{
}

unsigned char *storeEnumTagSinglePayload for ExecutionPath.FallbackLocation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0xAD06CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for ExecutionPath.FallbackLocation()
{
}

uint64_t static PhoneStartCallIntent.makeForSlotTemplating(intent:isRelationshipRequest:)()
{
  swift_getObjectType();
  uint64_t v0 = OUTLINED_FUNCTION_6_15();

  return specialized static PhoneStartCallIntent.makeForSlotTemplating(intent:isRelationshipRequest:)(v0, v1);
}

uint64_t PhoneStartCallIntent.__allocating_init(intent:isRelationshipRequest:)()
{
  swift_getObjectType();
  uint64_t v0 = (void *)OUTLINED_FUNCTION_6_15();

  return specialized PhoneStartCallIntent.__allocating_init(intent:isRelationshipRequest:)(v0, v1, v2, v3, v4);
}

uint64_t static PhoneCallGroup.make(groupName:groupId:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  char v13 = (char *)&v22 - v12;
  if (a4) {
    uint64_t v14 = a3;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a4) {
    unint64_t v15 = a4;
  }
  else {
    unint64_t v15 = 0xE000000000000000;
  }
  if (a2) {
    uint64_t v16 = a1;
  }
  else {
    uint64_t v16 = 0;
  }
  if (a2) {
    unint64_t v17 = a2;
  }
  else {
    unint64_t v17 = 0xE000000000000000;
  }
  uint64_t v18 = HIBYTE(v15) & 0xF;
  if ((v15 & 0x2000000000000000) == 0) {
    uint64_t v18 = v14 & 0xFFFFFFFFFFFFLL;
  }
  if (v18) {
    goto LABEL_19;
  }
  uint64_t v19 = HIBYTE(v17) & 0xF;
  if ((v17 & 0x2000000000000000) == 0) {
    uint64_t v19 = v16 & 0xFFFFFFFFFFFFLL;
  }
  if (v19)
  {
LABEL_19:
    type metadata accessor for PhoneCallGroup(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    uint64_t v20 = type metadata accessor for SpeakableString();
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v20);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v20);
    return PhoneCallGroup.__allocating_init(groupName:groupId:)((uint64_t)v13, (uint64_t)v11);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t static DialogCalendar.make(date:)()
{
  Date.timeIntervalSince1970.getter();
  type metadata accessor for DialogCalendar.Builder();
  swift_allocObject();
  DialogCalendar.Builder.init(secs:)();
  uint64_t v0 = dispatch thunk of DialogCalendar.Builder.build()();
  swift_release();
  return v0;
}

uint64_t specialized PhoneStartCallIntent.__allocating_init(intent:isRelationshipRequest:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, __CFString *a5)
{
  uint64_t v92 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_0_0();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_4();
  uint64_t v91 = v14 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v86 = (uint64_t)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v85 = (uint64_t)&v80 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v84 = (uint64_t)&v80 - v21;
  __chkstk_darwin(v20);
  uint64_t v83 = (uint64_t)&v80 - v22;
  length = (uint64_t (*)(uint64_t, __CFString *))a5->length;
  char v87 = a5;
  uint64_t v88 = a4;
  uint64_t v24 = length(a4, a5);
  uint64_t v81 = a2;
  if (!v24)
  {
    OUTLINED_FUNCTION_0_17();
    goto LABEL_10;
  }
  int BackingType = INCallCapabilityGetBackingType();
  if (BackingType == 2)
  {
    a5 = @"VIDEO_CALL";
  }
  else
  {
    if (BackingType != 1)
    {
      OUTLINED_FUNCTION_10_10();
      [v27 stringWithFormat:@"(unknown: %i)"];
      objc_claimAutoreleasedReturnValue();
      OUTLINED_FUNCTION_7_20();
      goto LABEL_9;
    }
    a5 = @"AUDIO_CALL";
  }
  uint64_t v26 = a5;
LABEL_9:
  uint64_t v28 = a5;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  a5 = v29;

LABEL_10:
  OUTLINED_FUNCTION_2_21();
  uint64_t v30 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_9_17();
  OUTLINED_FUNCTION_8_20();
  if (!v31())
  {
    OUTLINED_FUNCTION_0_17();
    goto LABEL_21;
  }
  int v32 = INCallAudioRouteGetBackingType();
  switch(v32)
  {
    case 4:
      a5 = @"HEY_SIRI_AUDIO_ROUTE";
      break;
    case 3:
      a5 = @"BLUETOOTH_AUDIO_ROUTE";
      break;
    case 2:
      a5 = @"SPEAKERPHONE_AUDIO_ROUTE";
      break;
    default:
      OUTLINED_FUNCTION_10_10();
      [v34 stringWithFormat:@"(unknown: %i)"];
      objc_claimAutoreleasedReturnValue();
      OUTLINED_FUNCTION_7_20();
      goto LABEL_20;
  }
  char v33 = a5;
LABEL_20:
  uint64_t v35 = a5;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  a5 = v36;

LABEL_21:
  uint64_t v37 = v84;
  OUTLINED_FUNCTION_2_21();
  __swift_storeEnumTagSinglePayload(v37, 0, 1, v30);
  uint64_t info = v87->info;
  OUTLINED_FUNCTION_8_20();
  if (!v39())
  {
    OUTLINED_FUNCTION_0_17();
    goto LABEL_32;
  }
  int v40 = INPreferredCallProviderGetBackingType();
  switch(v40)
  {
    case 4:
      a5 = @"THIRD_PARTY_PROVIDER";
      break;
    case 3:
      a5 = @"FACETIME_PROVIDER";
      break;
    case 2:
      a5 = @"TELEPHONY_PROVIDER";
      break;
    default:
      OUTLINED_FUNCTION_10_10();
      [v42 stringWithFormat:@"(unknown: %i)"];
      objc_claimAutoreleasedReturnValue();
      OUTLINED_FUNCTION_7_20();
      goto LABEL_31;
  }
  uint64_t v41 = a5;
LABEL_31:
  char v43 = a5;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  a5 = v44;

LABEL_32:
  OUTLINED_FUNCTION_2_21();
  OUTLINED_FUNCTION_9_17();
  OUTLINED_FUNCTION_8_20();
  if (v45())
  {
    switch(INCallDestinationTypeGetBackingType())
    {
      case 1u:
        a5 = @"NORMAL_DESTINATION";
        goto LABEL_41;
      case 2u:
        a5 = @"EMERGENCY_DESTINATION";
        goto LABEL_41;
      case 3u:
        a5 = @"VOICEMAIL_DESTINATION";
        goto LABEL_41;
      case 4u:
        a5 = @"REDIAL_DESTINATION";
        goto LABEL_41;
      case 5u:
        a5 = @"CALL_BACK_DESTINATION";
LABEL_41:
        uint64_t v47 = a5;
        break;
      default:
        OUTLINED_FUNCTION_10_10();
        [v46 stringWithFormat:@"(unknown: %i)"];
        objc_claimAutoreleasedReturnValue();
        OUTLINED_FUNCTION_7_20();
        break;
    }
    int v48 = a5;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  uint64_t v49 = v86;
  SpeakableString.init(print:speak:)();
  __swift_storeEnumTagSinglePayload(v49, 0, 1, v30);
  unint64_t v50 = (*(uint64_t (**)(uint64_t))(*(void *)(info + 8) + 8))(v88);
  uint64_t v51 = _swiftEmptyArrayStorage;
  uint64_t v82 = a3;
  if (v50)
  {
    unint64_t v52 = v50;
    unint64_t v94 = (unint64_t)_swiftEmptyArrayStorage;
    if (v50 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v53 = _CocoaArrayWrapper.endIndex.getter();
      if (v53) {
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v53 = *(void *)((char *)&dword_10 + (v50 & 0xFFFFFFFFFFFFFF8));
      swift_bridgeObjectRetain();
      if (v53)
      {
LABEL_46:
        uint64_t v90 = type metadata accessor for PhonePerson(0);
        if (v53 < 1)
        {
          __break(1u);
          goto LABEL_79;
        }
        uint64_t v80 = a1;
        uint64_t v54 = 0;
        unint64_t v89 = v52 & 0xC000000000000001;
        char v55 = v81 & 1;
        unint64_t v56 = v52;
        uint64_t v57 = v53;
        do
        {
          if (v89) {
            id v58 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v58 = *(id *)(v52 + 8 * v54 + 32);
          }
          uint64_t v59 = v58;
          static Device.current.getter();
          __swift_project_boxed_opaque_existential_1(v93, v93[3]);
          uint64_t v60 = v91;
          dispatch thunk of DeviceState.siriLocale.getter();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v93);
          uint64_t v61 = static PhonePerson.make(phonePerson:options:locale:)(v59, v55, v60);
          (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v60, v92);

          if (v61)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((char *)&dword_10 + (v94 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                           + (v94 & 0xFFFFFFFFFFFFFF8)) >> 1)
              OUTLINED_FUNCTION_4_21();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          ++v54;
          unint64_t v52 = v56;
        }
        while (v57 != v54);
        swift_bridgeObjectRelease();
        uint64_t v51 = (void *)v94;
        a1 = v80;
        goto LABEL_59;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v51 = _swiftEmptyArrayStorage;
LABEL_59:
    swift_bridgeObjectRelease();
  }
  type metadata accessor for PhonePersonList();
  uint64_t v62 = PhonePersonList.__allocating_init(list:)((uint64_t)v51);
  OUTLINED_FUNCTION_8_20();
  unint64_t v64 = v63();
  uint64_t v65 = _swiftEmptyArrayStorage;
  if (v64)
  {
    unint64_t v66 = v64;
    v93[0] = _swiftEmptyArrayStorage;
    if (v64 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v67 = _CocoaArrayWrapper.endIndex.getter();
      if (v67)
      {
LABEL_63:
        type metadata accessor for PhoneCallGroup(0);
        if (v67 >= 1)
        {
          for (uint64_t i = 0; i != v67; ++i)
          {
            if ((v66 & 0xC000000000000001) != 0) {
              id v69 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v69 = *(id *)(v66 + 8 * i + 32);
            }
            char v70 = v69;
            uint64_t v71 = outlined bridged method (pb) of @objc INCallGroup.groupName.getter(v69);
            unint64_t v73 = v72;
            uint64_t v74 = outlined bridged method (pb) of @objc INCallGroup.groupId.getter(v70);
            uint64_t v76 = static PhoneCallGroup.make(groupName:groupId:)(v71, v73, v74, v75);

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v76)
            {
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              if (*(void *)((char *)&dword_10 + (v93[0] & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                                + (v93[0] & 0xFFFFFFFFFFFFFF8)) >> 1)
                OUTLINED_FUNCTION_4_21();
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
            }
          }
          swift_bridgeObjectRelease();
          uint64_t v65 = (void *)v93[0];
          goto LABEL_76;
        }
LABEL_79:
        __break(1u);
        JUMPOUT(0xADB60);
      }
    }
    else
    {
      uint64_t v67 = *(void *)((char *)&dword_10 + (v64 & 0xFFFFFFFFFFFFFF8));
      swift_bridgeObjectRetain();
      if (v67) {
        goto LABEL_63;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v65 = _swiftEmptyArrayStorage;
LABEL_76:
    swift_bridgeObjectRelease();
  }
  PhoneStartCallIntent.__allocating_init(callCapability:audioRoute:preferredCallProvider:destinationType:contacts:callGroups:)(v83, v84, v85, v86, v62, (uint64_t)v65);
  uint64_t v78 = v77;

  return v78;
}

uint64_t specialized static PhoneStartCallIntent.makeForSlotTemplating(intent:isRelationshipRequest:)(uint64_t a1, char a2)
{
  uint64_t v42 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_0_0();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_4();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  __chkstk_darwin(v9 - 8);
  OUTLINED_FUNCTION_4();
  uint64_t v12 = v11 - v10;
  type metadata accessor for PhoneStartCallIntent.Builder(0);
  swift_allocObject();
  uint64_t v13 = PhoneStartCallIntent.Builder.init()();
  uint64_t v14 = OUTLINED_FUNCTION_3_24();
  unint64_t v16 = v15(v14);
  uint64_t v17 = _swiftEmptyArrayStorage;
  if (!v16)
  {
LABEL_18:
    type metadata accessor for PhonePersonList();
    uint64_t v28 = (__CFString *)PhonePersonList.__allocating_init(list:)((uint64_t)v17);
    uint64_t v29 = (*(uint64_t (**)(void))(*(void *)v13 + 352))();
    swift_release();
    swift_release();
    uint64_t v30 = OUTLINED_FUNCTION_3_24();
    if (!v31(v30))
    {
      OUTLINED_FUNCTION_0_17();
LABEL_29:
      OUTLINED_FUNCTION_2_21();
      uint64_t v35 = type metadata accessor for SpeakableString();
      __swift_storeEnumTagSinglePayload(v12, 0, 1, v35);
      uint64_t v36 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 320))(v12);
      swift_release();
      uint64_t v37 = outlined destroy of SpeakableString?(v12);
      uint64_t v38 = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 376))(v37);
      swift_release();
      return v38;
    }
    uint64_t v32 = INPreferredCallProviderGetBackingType();
    switch(v32)
    {
      case 4:
        uint64_t v28 = @"THIRD_PARTY_PROVIDER";
        break;
      case 3:
        uint64_t v28 = @"FACETIME_PROVIDER";
        break;
      case 2:
        uint64_t v28 = @"TELEPHONY_PROVIDER";
        break;
      default:
        +[NSString stringWithFormat:@"(unknown: %i)", v32];
        objc_claimAutoreleasedReturnValue();
        OUTLINED_FUNCTION_7_20();
        goto LABEL_28;
    }
    char v33 = v28;
LABEL_28:
    id v34 = v28;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    goto LABEL_29;
  }
  unint64_t v18 = v16;
  unint64_t v44 = (unint64_t)_swiftEmptyArrayStorage;
  if (!(v16 >> 62))
  {
    uint64_t v19 = *(void *)((char *)&dword_10 + (v16 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (v19) {
      goto LABEL_4;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    uint64_t v17 = _swiftEmptyArrayStorage;
LABEL_17:
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
  if (!v19) {
    goto LABEL_16;
  }
LABEL_4:
  uint64_t v40 = v13;
  uint64_t result = type metadata accessor for PhonePerson(0);
  if (v19 >= 1)
  {
    uint64_t v39 = v12;
    uint64_t v21 = 0;
    unint64_t v41 = v18 & 0xC000000000000001;
    char v22 = a2 & 1;
    unint64_t v23 = v18;
    do
    {
      uint64_t v24 = v19;
      if (v41) {
        id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v25 = *(id *)(v18 + 8 * v21 + 32);
      }
      uint64_t v26 = v25;
      static Device.current.getter();
      __swift_project_boxed_opaque_existential_1(v43, v43[3]);
      dispatch thunk of DeviceState.siriLocale.getter();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
      uint64_t v27 = static PhonePerson.make(phonePerson:options:locale:)(v26, v22, v8);
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v8, v42);

      if (v27)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((char *)&dword_10 + (v44 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                       + (v44 & 0xFFFFFFFFFFFFFF8)) >> 1)
          OUTLINED_FUNCTION_4_21();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      ++v21;
      uint64_t v19 = v24;
      unint64_t v18 = v23;
    }
    while (v24 != v21);
    swift_bridgeObjectRelease();
    uint64_t v17 = (void *)v44;
    uint64_t v12 = v39;
    uint64_t v13 = v40;
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t OUTLINED_FUNCTION_2_21()
{
  return SpeakableString.init(print:speak:)();
}

uint64_t OUTLINED_FUNCTION_3_24()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_4_21()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_6_15()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_9_17()
{
  __swift_storeEnumTagSinglePayload(v1, 0, 1, v0);
  return *(void *)(v2 - 176);
}

uint64_t Collection<>.isAddOrNewCall.getter(uint64_t a1)
{
  OUTLINED_FUNCTION_0_0();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_5_1();
  lazy protocol witness table accessor for type OngoingCallOfferOptions and conformance OngoingCallOfferOptions();
  char v6 = Sequence<>.contains(_:)();
  OUTLINED_FUNCTION_17_6();
  v7();
  char v8 = 0;
  if (v6) {
    char v8 = Collection<>.isAnyNewCall.getter();
  }
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, a1);
  return v8 & 1;
}

unint64_t lazy protocol witness table accessor for type OngoingCallOfferOptions and conformance OngoingCallOfferOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type OngoingCallOfferOptions and conformance OngoingCallOfferOptions;
  if (!lazy protocol witness table cache variable for type OngoingCallOfferOptions and conformance OngoingCallOfferOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OngoingCallOfferOptions and conformance OngoingCallOfferOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OngoingCallOfferOptions and conformance OngoingCallOfferOptions;
  if (!lazy protocol witness table cache variable for type OngoingCallOfferOptions and conformance OngoingCallOfferOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OngoingCallOfferOptions and conformance OngoingCallOfferOptions);
  }
  return result;
}

uint64_t Collection<>.isAnyNewCall.getter()
{
  OUTLINED_FUNCTION_0_0();
  __chkstk_darwin(v0);
  OUTLINED_FUNCTION_12_0();
  lazy protocol witness table accessor for type OngoingCallOfferOptions and conformance OngoingCallOfferOptions();
  char v1 = Sequence<>.contains(_:)();
  OUTLINED_FUNCTION_17_6();
  v2();
  if (v1)
  {
    uint64_t v3 = OUTLINED_FUNCTION_4_22();
    v4(v3);
    char v5 = 1;
  }
  else
  {
    char v5 = Sequence<>.contains(_:)();
    uint64_t v6 = OUTLINED_FUNCTION_4_22();
    v7(v6);
  }
  return v5 & 1;
}

uint64_t OngoingCallOfferOptions.rawValue.getter(char a1)
{
  if (!a1) {
    return OUTLINED_FUNCTION_8_21();
  }
  if (a1 == 1) {
    return 0x654E646E41646E65;
  }
  return 0x4E646E41646C6F68;
}

void static OngoingCallOfferOptions.from(rchRecord:callStateProvider:nlIntent:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INStartCallIntent, INStartCallIntentResponse>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v8 = v7;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v85 - v13;
  uint64_t v15 = (void *)IntentResolutionRecord.intent.getter();
  unint64_t v16 = (void *)IntentResolutionRecord.intentResponse.getter();
  char v17 = static EmergencyUtils.requiresEmergencyConfirmation(intent:intentResponse:)(v15, v16);

  if (v17)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.siriPhone);
    uint64_t v19 = (void *)Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_8_2(v20))
    {
      uint64_t v21 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_32_2(v21);
      OUTLINED_FUNCTION_1_3(&dword_0, v22, v23, "#OngoingCallOfferOptions Emergency call only offers endAndNewCall");
      OUTLINED_FUNCTION_5_16();
    }

    uint64_t v24 = &outlined read-only object #3 of static OngoingCallOfferOptions.from(rchRecord:callStateProvider:nlIntent:);
LABEL_20:
LABEL_22:
    specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)v24);
    return;
  }
  IntentResolutionRecord.app.getter();
  Swift::Bool v25 = App.isFirstParty()();
  swift_release();
  if (!v25)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.siriPhone);
    char v33 = (void *)Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_8_2(v34))
    {
      uint64_t v35 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_32_2(v35);
      OUTLINED_FUNCTION_1_3(&dword_0, v36, v37, "#OngoingCallOfferOptions 3P call only offers endAndNewCall");
      OUTLINED_FUNCTION_5_16();
    }

    uint64_t v24 = &outlined read-only object #2 of static OngoingCallOfferOptions.from(rchRecord:callStateProvider:nlIntent:);
    goto LABEL_20;
  }
  uint64_t v26 = (void *)IntentResolutionRecord.intent.getter();
  uint64_t v27 = outlined bridged method (ob) of @objc INStartCallIntent.contacts.getter(v26);
  if (v27) {
    unint64_t v28 = v27;
  }
  else {
    unint64_t v28 = (unint64_t)_swiftEmptyArrayStorage;
  }
  if (v28 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v29 = *(void *)((char *)&dword_10 + (v28 & 0xFFFFFFFFFFFFFF8));
  }
  swift_bridgeObjectRelease();
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v30(v14, a1, v6);
  if (v29 >= 2)
  {
    OUTLINED_FUNCTION_10_11();
    v31();
LABEL_24:
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    __swift_project_value_buffer(v41, (uint64_t)static Logger.siriPhone);
    uint64_t v42 = (void *)Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_8_2(v43))
    {
      unint64_t v44 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_32_2(v44);
      OUTLINED_FUNCTION_1_3(&dword_0, v45, v46, "#OngoingCallOfferOptions Group call only offers endAndNewCall");
      OUTLINED_FUNCTION_5_16();
    }

    uint64_t v24 = &outlined read-only object #1 of static OngoingCallOfferOptions.from(rchRecord:callStateProvider:nlIntent:);
    goto LABEL_22;
  }
  uint64_t v95 = v30;
  uint64_t v96 = v8 + 16;
  uint64_t v38 = (void *)IntentResolutionRecord.intent.getter();
  Swift::Bool v39 = INStartCallIntent.isGroupCall()();

  uint64_t v40 = *(void (**)(void))(v8 + 8);
  OUTLINED_FUNCTION_10_11();
  v40();
  if (v39) {
    goto LABEL_24;
  }
  uint64_t v47 = a2[3];
  uint64_t v48 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v47);
  if (!(*(uint64_t (**)(uint64_t, uint64_t))(v48 + 24))(v47, v48))
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v54 = type metadata accessor for Logger();
    __swift_project_value_buffer(v54, (uint64_t)static Logger.siriPhone);
    char v55 = (void *)Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_8_2(v56))
    {
      uint64_t v57 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_32_2(v57);
      OUTLINED_FUNCTION_1_3(&dword_0, v58, v59, "#OngoingCallOfferOptions There's no ongoing call, but OngoingCall Flows are in use. Classify as .holdAndNewCall.");
      OUTLINED_FUNCTION_5_16();
    }

    uint64_t v24 = &outlined read-only object #0 of static OngoingCallOfferOptions.from(rchRecord:callStateProvider:nlIntent:);
    goto LABEL_22;
  }
  uint64_t v50 = v49;
  uint64_t v92 = v40;
  v101 = &_swiftEmptySetSingleton;
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(a3, (uint64_t)v98, &demangling cache variable for type metadata for PhoneCallNLIntent?);
  uint64_t v51 = v99;
  if (v99)
  {
    uint64_t v52 = v100;
    __swift_project_boxed_opaque_existential_1(v98, v99);
    int v53 = (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 32))(v51, v52);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v98);
  }
  else
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v98, &demangling cache variable for type metadata for PhoneCallNLIntent?);
    int v53 = 2;
  }
  uint64_t v60 = (void *)IntentResolutionRecord.intent.getter();
  uint64_t v91 = (char *)[v60 preferredCallProvider];

  uint64_t ObjectType = swift_getObjectType();
  char v62 = (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 32))(ObjectType, v50);
  uint64_t v93 = ObjectType;
  uint64_t v94 = v50;
  int v90 = v53;
  if ((v62 & 1) != 0 && v53 == 2
    || (SPHCall.isFTAudio.getter() & 1) != 0 && v53 != 2 && (v53 & 1) == 0)
  {
    int v63 = 0;
  }
  else
  {
    int v63 = SPHCall.isFTVideo.getter() ^ 1 | (v53 == 2) | ((v53 & 1) == 0);
  }
  uint64_t v64 = a2[3];
  uint64_t v65 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v64);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v65 + 40))(v98, v64, v65);
  uint64_t v66 = v99;
  uint64_t v67 = v100;
  __swift_project_boxed_opaque_existential_1(v98, v99);
  int v68 = (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 24))(v66, v67);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v98);
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v69 = type metadata accessor for Logger();
  __swift_project_value_buffer(v69, (uint64_t)static Logger.siriPhone);
  swift_unknownObjectRetain();
  char v70 = Logger.logObject.getter();
  os_log_type_t v71 = static os_log_type_t.debug.getter();
  int v72 = v71;
  if (os_log_type_enabled(v70, v71))
  {
    uint64_t v73 = swift_slowAlloc();
    int v86 = v72;
    uint64_t v74 = v73;
    uint64_t v87 = swift_slowAlloc();
    v98[0] = v87;
    *(_DWORD *)uint64_t v74 = 67109634;
    int v89 = v63;
    os_log_t v85 = v70;
    LOBYTE(v97) = SPHCall.isFTAudio.getter() & 1;
    LODWORD(v97) = v97;
    int v88 = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v74 + 8) = 1024;
    LOBYTE(v63) = v89;
    LOBYTE(v97) = SPHCall.isFTVideo.getter() & 1;
    LODWORD(v97) = v97;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease();
    *(_WORD *)(v74 + 14) = 2080;
    LOBYTE(v97) = v90;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallAVMode?);
    uint64_t v75 = String.init<A>(describing:)();
    uint64_t v97 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v76, v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    LOBYTE(v68) = v88;
    swift_bridgeObjectRelease();
    os_log_t v77 = v85;
    _os_log_impl(&dword_0, v85, (os_log_type_t)v86, "#OngoingCallOfferOptions isFTAudio: %{BOOL}d isFTVideo %{BOOL}d requestedAVMode: %s", (uint8_t *)v74, 0x18u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_unknownObjectRelease();
  }
  char v78 = (v91 != (unsigned char *)&dword_0 + 2) | ~(_BYTE)v68 | v63;
  id v79 = v92;
  uint64_t v80 = v95;
  if ((v78 & 1) == 0) {
    specialized Set._Variant.insert(_:)(v98, 0);
  }
  char v81 = (*(uint64_t (**)(uint64_t))(v94 + 192))(v93);
  v80(v12, a1, v6);
  if ((v81 & 1) == 0)
  {
    ((void (*)(char *, uint64_t))v79)(v12, v6);
    goto LABEL_56;
  }
  uint64_t v82 = (void *)IntentResolutionRecord.intent.getter();
  uint64_t v83 = (char *)[v82 callCapability];

  OUTLINED_FUNCTION_10_11();
  v79();
  if (v83 != (unsigned char *)&dword_0 + 1)
  {
LABEL_56:
    Swift::Int v84 = 1;
    goto LABEL_57;
  }
  Swift::Int v84 = 2;
LABEL_57:
  specialized Set._Variant.insert(_:)(v98, v84);
  swift_unknownObjectRelease();
}

PhoneCallFlowDelegatePlugin::OngoingCallOfferOptions_optional __swiftcall OngoingCallOfferOptions.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of OngoingCallOfferOptions.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return (PhoneCallFlowDelegatePlugin::OngoingCallOfferOptions_optional)3;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::OngoingCallOfferOptions_optional)v3;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance OngoingCallOfferOptions(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance OngoingCallOfferOptions()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance OngoingCallOfferOptions()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance OngoingCallOfferOptions()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

PhoneCallFlowDelegatePlugin::OngoingCallOfferOptions_optional protocol witness for RawRepresentable.init(rawValue:) in conformance OngoingCallOfferOptions@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::OngoingCallOfferOptions_optional *a2@<X8>)
{
  result.value = OngoingCallOfferOptions.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance OngoingCallOfferOptions@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = OngoingCallOfferOptions.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance OngoingCallOfferOptions()
{
  return OngoingCallOfferOptions.rawValue.getter(*v0);
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *unint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    *unint64_t v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v10 + 8 * v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  unint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for App();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v18;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    unint64_t v16 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    os_log_type_t v20 = v16;
    if (*(void *)(v16 + 24) <= *(void *)(v16 + 16))
    {
      swift_retain();
      specialized _NativeSet.resize(capacity:)();
      char v17 = v20;
    }
    else
    {
      char v17 = v16;
      swift_retain();
    }
    specialized _NativeSet._unsafeInsertNew(_:)(a2);
    *unint64_t v3 = v17;
    swift_bridgeObjectRelease();
    *a1 = a2;
  }
  else
  {
    type metadata accessor for App();
    lazy protocol witness table accessor for type UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues and conformance UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues(&lazy protocol witness table cache variable for type App and conformance App, (void (*)(uint64_t))&type metadata accessor for App);
    swift_bridgeObjectRetain();
    dispatch thunk of Hashable._rawHashValue(seed:)();
    OUTLINED_FUNCTION_15_9();
    uint64_t v11 = v10 & ~v9;
    if ((*(void *)(v6 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11))
    {
      uint64_t v12 = ~v9;
      lazy protocol witness table accessor for type UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues and conformance UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues(&lazy protocol witness table cache variable for type App and conformance App, (void (*)(uint64_t))&type metadata accessor for App);
      while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
      {
        uint64_t v11 = (v11 + 1) & v12;
        if (((*(void *)(v6 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
          goto LABEL_11;
        }
      }
      swift_release();
      swift_bridgeObjectRelease();
      *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v11);
      swift_retain();
      return 0;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v19 = *v2;
    *Swift::String v2 = 0x8000000000000000;
    uint64_t v14 = swift_retain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v14, v11, isUniquelyReferenced_nonNull_native);
    *Swift::String v2 = v19;
    swift_bridgeObjectRelease();
    *a1 = a2;
  }
  return 1;
}

BOOL specialized Set._Variant.insert(_:)()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  Hasher._finalize()();
  OUTLINED_FUNCTION_15_9();
  unint64_t v4 = v2 & ~v3;
  uint64_t v5 = (1 << v4) & *(void *)(v1 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8) + 56);
  if (!v5)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v0;
    *uint64_t v0 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(v4, isUniquelyReferenced_nonNull_native);
    *uint64_t v0 = v8;
    swift_bridgeObjectRelease();
  }
  return v5 == 0;
}

uint64_t specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    swift_unknownObjectRelease();
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<App>);
  uint64_t v2 = static _SetStorage.convert(_:capacity:)();
  uint64_t v14 = v2;
  __CocoaSet.makeIterator()();
  if (!__CocoaSet.Iterator.next()())
  {
LABEL_16:
    swift_release();
    return v2;
  }
  type metadata accessor for App();
  while (1)
  {
    swift_dynamicCast();
    uint64_t v2 = v14;
    if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
    {
      specialized _NativeSet.resize(capacity:)();
      uint64_t v2 = v14;
    }
    lazy protocol witness table accessor for type UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues and conformance UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues(&lazy protocol witness table cache variable for type App and conformance App, (void (*)(uint64_t))&type metadata accessor for App);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v4 = v2 + 56;
    uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v6 = result & ~v5;
    unint64_t v7 = v6 >> 6;
    if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) == 0) {
      break;
    }
    unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
LABEL_15:
    *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
    *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
    ++*(void *)(v2 + 16);
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_16;
    }
  }
  char v9 = 0;
  unint64_t v10 = (unint64_t)(63 - v5) >> 6;
  while (++v7 != v10 || (v9 & 1) == 0)
  {
    BOOL v11 = v7 == v10;
    if (v7 == v10) {
      unint64_t v7 = 0;
    }
    v9 |= v11;
    uint64_t v12 = *(void *)(v4 + 8 * v7);
    if (v12 != -1)
    {
      unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

void specialized _NativeSet._unsafeInsertNew(_:)(char a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();
  unint64_t v3 = OUTLINED_FUNCTION_2_22(v2);
  unint64_t v4 = OUTLINED_FUNCTION_1_21(v3);
  *(unsigned char *)(v5 + v4) = a1;
  OUTLINED_FUNCTION_7_21();
}

void specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  if (a2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Swift::Int v4 = Hasher._finalize()();
  unint64_t v5 = OUTLINED_FUNCTION_2_22(v4);
  unint64_t v6 = OUTLINED_FUNCTION_1_21(v5);
  unint64_t v8 = (void *)(v7 + 16 * v6);
  *unint64_t v8 = a1;
  v8[1] = a2;
  OUTLINED_FUNCTION_7_21();
}

void specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1)
{
  type metadata accessor for App();
  lazy protocol witness table accessor for type UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues and conformance UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues(&lazy protocol witness table cache variable for type App and conformance App, (void (*)(uint64_t))&type metadata accessor for App);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  unint64_t v3 = OUTLINED_FUNCTION_2_22(v2);
  unint64_t v4 = OUTLINED_FUNCTION_1_21(v3);
  *(void *)(v5 + 8 * v4) = a1;
  OUTLINED_FUNCTION_7_21();
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  uint64_t result = static Hasher._hash(seed:_:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  type metadata accessor for App();
  lazy protocol witness table accessor for type UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues and conformance UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues(&lazy protocol witness table cache variable for type App and conformance App, (void (*)(uint64_t))&type metadata accessor for App);
  uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = ~v9;
    lazy protocol witness table accessor for type UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues and conformance UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues(&lazy protocol witness table cache variable for type App and conformance App, (void (*)(uint64_t))&type metadata accessor for App);
    do
    {
      uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
      if (result) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v10;
    }
    while (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v11 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v11 + 48) + 8 * a2) = v5;
  uint64_t v12 = *(void *)(v11 + 16);
  uint64_t v13 = __OFADD__(v12, 1);
  BOOL v14 = v12 + 1;
  if (!v13)
  {
    *(void *)(v11 + 16) = v14;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, char a2)
{
  unint64_t v3 = result;
  unint64_t v4 = *(void *)(*v2 + 16);
  unint64_t v5 = *(void *)(*v2 + 24);
  if (v5 <= v4 || (a2 & 1) == 0)
  {
    if (a2)
    {
      specialized _NativeSet.resize(capacity:)();
      goto LABEL_8;
    }
    if (v5 <= v4)
    {
      specialized _NativeSet.copyAndResize(capacity:)();
LABEL_8:
      uint64_t v6 = *v2;
      Hasher.init(_seed:)();
      Hasher._combine(_:)(0);
      uint64_t result = Hasher._finalize()();
      unint64_t v3 = result & ~(-1 << *(unsigned char *)(v6 + 32));
      if ((*(void *)(v6 + ((v3 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v3)) {
        goto LABEL_12;
      }
      goto LABEL_9;
    }
    uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
  }
LABEL_9:
  uint64_t v7 = *v2;
  *(void *)(*v2 + 8 * (v3 >> 6) + 56) |= 1 << v3;
  uint64_t v8 = *(void *)(v7 + 16);
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (!v9)
  {
    *(void *)(v7 + 16) = v10;
    return result;
  }
  __break(1u);
LABEL_12:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  if (!v12) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v14 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (unint64_t i = v14 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v9 << 6))
  {
    *(void *)(*(void *)(v4 + 48) + 8 * i) = *(void *)(*(void *)(v2 + 48) + 8 * i);
    if (v12) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v12 = (v17 - 1) & v17;
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  unint64_t v12 = -1;
  if (v10 < 64) {
    unint64_t v12 = ~(-1 << v10);
  }
  int64_t v13 = v12 & v11;
  unint64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    os_log_type_t v20 = (void *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v21 = v20[1];
    uint64_t v22 = (void *)(*(void *)(v4 + 48) + 16 * i);
    *uint64_t v22 = *v20;
    v22[1] = v21;
    uint64_t result = (void *)swift_bridgeObjectRetain();
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    unint64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    int64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      int64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        int64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }
LABEL_25:
    int64_t v13 = (v18 - 1) & v18;
  }
  uint64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  int64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    int64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<OngoingCallOfferOptions>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  if (!v12) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v14 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (unint64_t i = v14 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v9 << 6))
  {
    *(unsigned char *)(*(void *)(v4 + 48) + i) = *(unsigned char *)(*(void *)(v2 + 48) + i);
    if (v12) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v12 = (v17 - 1) & v17;
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String?>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  unint64_t v12 = -1;
  if (v10 < 64) {
    unint64_t v12 = ~(-1 << v10);
  }
  int64_t v13 = v12 & v11;
  unint64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    *(_OWORD *)(*(void *)(v4 + 48) + 16 * i) = *(_OWORD *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t result = (void *)swift_bridgeObjectRetain();
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    unint64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    int64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      int64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        int64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }
LABEL_25:
    int64_t v13 = (v18 - 1) & v18;
  }
  uint64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  int64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    int64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<App>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  unint64_t v12 = -1;
  if (v10 < 64) {
    unint64_t v12 = ~(-1 << v10);
  }
  int64_t v13 = v12 & v11;
  unint64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    *(void *)(*(void *)(v4 + 48) + 8 * i) = *(void *)(*(void *)(v2 + 48) + 8 * i);
    uint64_t result = (void *)swift_retain();
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    unint64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    int64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      int64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        int64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }
LABEL_25:
    int64_t v13 = (v18 - 1) & v18;
  }
  uint64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  int64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    int64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;

  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  unint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?>);
  uint64_t v6 = *v0;
  unint64_t v7 = static _SetStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_30:
    *uint64_t v1 = v8;
    return result;
  }
  Swift::Bool v25 = v1;
  uint64_t result = (void *)(v7 + 56);
  uint64_t v10 = v6 + 56;
  uint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11) {
    uint64_t result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  }
  int64_t v13 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  unint64_t v14 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  int64_t v16 = v15 & *(void *)(v6 + 56);
  unint64_t v17 = (unint64_t)(v14 + 63) >> 6;
  if (!v16) {
    goto LABEL_12;
  }
LABEL_11:
  int64_t v18 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (unint64_t i = v18 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v13 << 6))
  {
    uint64_t v23 = *(void *)(v3 + 72) * i;
    _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(*(void *)(v6 + 48) + v23, (uint64_t)v5, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
    uint64_t result = (void *)outlined init with take of UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?((uint64_t)v5, *(void *)(v8 + 48) + v23);
    if (v16) {
      goto LABEL_11;
    }
LABEL_12:
    os_log_type_t v20 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v20 >= v17) {
      goto LABEL_28;
    }
    uint64_t v21 = *(void *)(v10 + 8 * v20);
    ++v13;
    if (!v21)
    {
      int64_t v13 = v20 + 1;
      if (v20 + 1 >= v17) {
        goto LABEL_28;
      }
      uint64_t v21 = *(void *)(v10 + 8 * v13);
      if (!v21)
      {
        int64_t v13 = v20 + 2;
        if (v20 + 2 >= v17) {
          goto LABEL_28;
        }
        uint64_t v21 = *(void *)(v10 + 8 * v13);
        if (!v21) {
          break;
        }
      }
    }
LABEL_25:
    int64_t v16 = (v21 - 1) & v21;
  }
  uint64_t v22 = v20 + 3;
  if (v22 >= v17)
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_30;
  }
  uint64_t v21 = *(void *)(v10 + 8 * v22);
  if (v21)
  {
    int64_t v13 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v13 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v13 >= v17) {
      goto LABEL_28;
    }
    uint64_t v21 = *(void *)(v10 + 8 * v13);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  int64_t v15;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<SharedNeedsValueContext.NeedsValueCase>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  if (v12) {
    goto LABEL_24;
  }
  while (1)
  {
    unint64_t v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v14 >= v13) {
      goto LABEL_26;
    }
    unint64_t v12 = *(void *)(v6 + 8 * v14);
    ++v9;
    if (!v12)
    {
      int64_t v9 = v14 + 1;
      if (v14 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v12 = *(void *)(v6 + 8 * v9);
      if (!v12)
      {
        int64_t v9 = v14 + 2;
        if (v14 + 2 >= v13) {
          goto LABEL_26;
        }
        unint64_t v12 = *(void *)(v6 + 8 * v9);
        if (!v12) {
          break;
        }
      }
    }
    do
LABEL_24:
      v12 &= v12 - 1;
    while (v12);
  }
  uint64_t v15 = v14 + 3;
  if (v15 >= v13) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v6 + 8 * v15);
  if (v12)
  {
    int64_t v9 = v15;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v9 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v12 = *(void *)(v6 + 8 * v9);
    ++v15;
    if (v12) {
      goto LABEL_24;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v26 = v1;
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  if (!v9) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v12 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v5 << 6))
  {
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * i);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v18 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v19 = result & ~v18;
    unint64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)(v11 + 8 * (v19 >> 6))) == 0)
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v18) >> 6;
      while (++v20 != v23 || (v22 & 1) == 0)
      {
        BOOL v24 = v20 == v23;
        if (v20 == v23) {
          unint64_t v20 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v20);
        if (v25 != -1)
        {
          unint64_t v21 = __clz(__rbit64(~v25)) + (v20 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v21 = __clz(__rbit64((-1 << v19) & ~*(void *)(v11 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v11 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    *(void *)(*(void *)(v4 + 48) + 8 * v21) = v17;
    ++*(void *)(v4 + 16);
    if (v9) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v14 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      goto LABEL_36;
    }
    if (v14 >= v10) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v14);
    ++v5;
    if (!v15)
    {
      int64_t v5 = v14 + 1;
      if (v14 + 1 >= v10) {
        goto LABEL_32;
      }
      unint64_t v15 = *(void *)(v6 + 8 * v5);
      if (!v15)
      {
        int64_t v5 = v14 + 2;
        if (v14 + 2 >= v10) {
          goto LABEL_32;
        }
        unint64_t v15 = *(void *)(v6 + 8 * v5);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v9 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v10)
  {
LABEL_32:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_34;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
    int64_t v5 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v5 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v5);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  void *v28;
  int64_t v29;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  uint64_t v8 = v7 & *(void *)(v2 + 56);
  uint64_t v29 = (unint64_t)(v5 + 63) >> 6;
  unint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  uint64_t v11 = 0;
  if (!v8) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v18 = *v17;
    unint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = result & ~v20;
    char v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) == 0)
    {
      BOOL v24 = 0;
      uint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        uint64_t v26 = v22 == v25;
        if (v22 == v25) {
          char v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v9 + 8 * v22);
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    unint64_t v28 = (void *)(*(void *)(v4 + 48) + 16 * v23);
    *unint64_t v28 = v18;
    v28[1] = v19;
    ++*(void *)(v4 + 16);
    if (v8) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_36;
    }
    if (v14 >= v29) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v14);
    ++v11;
    if (!v15)
    {
      uint64_t v11 = v14 + 1;
      if (v14 + 1 >= v29) {
        goto LABEL_32;
      }
      unint64_t v15 = *(void *)(v6 + 8 * v11);
      if (!v15)
      {
        uint64_t v11 = v14 + 2;
        if (v14 + 2 >= v29) {
          goto LABEL_32;
        }
        unint64_t v15 = *(void *)(v6 + 8 * v11);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    uint64_t v8 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_34;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
    uint64_t v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    uint64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<App>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v25 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  uint64_t v7 = v6 & *(void *)(v2 + 56);
  uint64_t v26 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  if (!v7) {
    goto LABEL_7;
  }
LABEL_6:
  uint64_t v11 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v11 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    int64_t v16 = *(void *)(*(void *)(v2 + 48) + 8 * i);
    type metadata accessor for App();
    lazy protocol witness table accessor for type UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues and conformance UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues(&lazy protocol witness table cache variable for type App and conformance App, (void (*)(uint64_t))&type metadata accessor for App);
    swift_retain();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v17 = -1 << *(unsigned char *)(v4 + 32);
    uint64_t v18 = result & ~v17;
    unint64_t v19 = v18 >> 6;
    if (((-1 << v18) & ~*(void *)(v8 + 8 * (v18 >> 6))) == 0)
    {
      unint64_t v21 = 0;
      char v22 = (unint64_t)(63 - v17) >> 6;
      while (++v19 != v22 || (v21 & 1) == 0)
      {
        unint64_t v23 = v19 == v22;
        if (v19 == v22) {
          unint64_t v19 = 0;
        }
        v21 |= v23;
        BOOL v24 = *(void *)(v8 + 8 * v19);
        if (v24 != -1)
        {
          unint64_t v20 = __clz(__rbit64(~v24)) + (v19 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v20 = __clz(__rbit64((-1 << v18) & ~*(void *)(v8 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v8 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    *(void *)(*(void *)(v4 + 48) + 8 * v20) = v16;
    ++*(void *)(v4 + 16);
    if (v7) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_36;
    }
    if (v13 >= v26) {
      goto LABEL_32;
    }
    int64_t v14 = *(void *)(v25 + 8 * v13);
    ++v10;
    if (!v14)
    {
      int64_t v10 = v13 + 1;
      if (v13 + 1 >= v26) {
        goto LABEL_32;
      }
      int64_t v14 = *(void *)(v25 + 8 * v10);
      if (!v14)
      {
        int64_t v10 = v13 + 2;
        if (v13 + 2 >= v26) {
          goto LABEL_32;
        }
        int64_t v14 = *(void *)(v25 + 8 * v10);
        if (!v14) {
          break;
        }
      }
    }
LABEL_20:
    uint64_t v7 = (v14 - 1) & v14;
  }
  unint64_t v15 = v13 + 3;
  if (v15 >= v26)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_34;
  }
  int64_t v14 = *(void *)(v25 + 8 * v15);
  if (v14)
  {
    int64_t v10 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v10 >= v26) {
      goto LABEL_32;
    }
    int64_t v14 = *(void *)(v25 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t i;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  void (**v43)(char *, uint64_t);
  void (**v44)(char *, char *, uint64_t);
  char *v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v45 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
  uint64_t v49 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  int64_t v10 = (char *)&v41 - v9;
  uint64_t v11 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?>);
  unint64_t v12 = static _SetStorage.resize(original:capacity:move:)();
  int64_t v13 = v12;
  if (!*(void *)(v11 + 16))
  {
    uint64_t result = swift_release();
LABEL_37:
    *uint64_t v1 = v13;
    return result;
  }
  int64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  unint64_t v15 = *(void *)(v11 + 56);
  uint64_t v46 = v11 + 56;
  if (v14 < 64) {
    int64_t v16 = ~(-1 << v14);
  }
  else {
    int64_t v16 = -1;
  }
  uint64_t v17 = v16 & v15;
  uint64_t v47 = (unint64_t)(v14 + 63) >> 6;
  unint64_t v44 = (void (**)(char *, char *, uint64_t))(v3 + 32);
  uint64_t v42 = v0;
  os_log_type_t v43 = (void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v18 = v12 + 56;
  uint64_t result = swift_retain();
  unint64_t v20 = 0;
  uint64_t v48 = v11;
  if (!v17) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v21 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  for (unint64_t i = v21 | (v20 << 6); ; unint64_t i = __clz(__rbit64(v24)) + (v20 << 6))
  {
    uint64_t v26 = *(void *)(v11 + 48);
    uint64_t v27 = *(void *)(v49 + 72);
    _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(v26 + v27 * i, (uint64_t)v10, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
    Hasher.init(_seed:)();
    _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0((uint64_t)v10, (uint64_t)v8, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
    if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v2) == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      unint64_t v28 = v10;
      uint64_t v29 = v8;
      uint64_t v30 = v2;
      uint64_t v31 = v45;
      (*v44)(v45, v29, v30);
      Hasher._combine(_:)(1u);
      lazy protocol witness table accessor for type UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues and conformance UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues(&lazy protocol witness table cache variable for type UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues and conformance UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues, (void (*)(uint64_t))&type metadata accessor for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues);
      dispatch thunk of Hashable.hash(into:)();
      uint64_t v32 = v31;
      uint64_t v2 = v30;
      uint64_t v8 = v29;
      int64_t v10 = v28;
      (*v43)(v32, v2);
    }
    uint64_t result = Hasher._finalize()();
    char v33 = -1 << *(unsigned char *)(v13 + 32);
    os_log_type_t v34 = result & ~v33;
    uint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v18 + 8 * (v34 >> 6))) == 0)
    {
      uint64_t v37 = 0;
      uint64_t v38 = (unint64_t)(63 - v33) >> 6;
      while (++v35 != v38 || (v37 & 1) == 0)
      {
        Swift::Bool v39 = v35 == v38;
        if (v35 == v38) {
          uint64_t v35 = 0;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v18 + 8 * v35);
        if (v40 != -1)
        {
          uint64_t v36 = __clz(__rbit64(~v40)) + (v35 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    uint64_t v36 = __clz(__rbit64((-1 << v34) & ~*(void *)(v18 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(void *)(v18 + ((v36 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v36;
    uint64_t result = outlined init with take of UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?((uint64_t)v10, *(void *)(v13 + 48) + v36 * v27);
    ++*(void *)(v13 + 16);
    uint64_t v11 = v48;
    if (v17) {
      goto LABEL_6;
    }
LABEL_7:
    unint64_t v23 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      goto LABEL_39;
    }
    if (v23 >= v47) {
      goto LABEL_35;
    }
    BOOL v24 = *(void *)(v46 + 8 * v23);
    ++v20;
    if (!v24)
    {
      unint64_t v20 = v23 + 1;
      if (v23 + 1 >= v47) {
        goto LABEL_35;
      }
      BOOL v24 = *(void *)(v46 + 8 * v20);
      if (!v24)
      {
        unint64_t v20 = v23 + 2;
        if (v23 + 2 >= v47) {
          goto LABEL_35;
        }
        BOOL v24 = *(void *)(v46 + 8 * v20);
        if (!v24) {
          break;
        }
      }
    }
LABEL_20:
    uint64_t v17 = (v24 - 1) & v24;
  }
  uint64_t v25 = v23 + 3;
  if (v25 >= v47)
  {
LABEL_35:
    uint64_t result = swift_release_n();
    uint64_t v1 = v42;
    goto LABEL_37;
  }
  BOOL v24 = *(void *)(v46 + 8 * v25);
  if (v24)
  {
    unint64_t v20 = v25;
    goto LABEL_20;
  }
  while (1)
  {
    unint64_t v20 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v20 >= v47) {
      goto LABEL_35;
    }
    BOOL v24 = *(void *)(v46 + 8 * v20);
    ++v25;
    if (v24) {
      goto LABEL_20;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<SharedNeedsValueContext.NeedsValueCase>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
    goto LABEL_32;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  if (v9)
  {
LABEL_19:
    while (1)
    {
      Hasher.init(_seed:)();
      Hasher._combine(_:)(0);
      uint64_t result = Hasher._finalize()();
      int64_t v14 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v15 = result & ~v14;
      int64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) == 0) {
        break;
      }
      uint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
LABEL_28:
      v9 &= v9 - 1;
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      ++*(void *)(v4 + 16);
      if (!v9) {
        goto LABEL_6;
      }
    }
    uint64_t v18 = 0;
    unint64_t v19 = (unint64_t)(63 - v14) >> 6;
    while (++v16 != v19 || (v18 & 1) == 0)
    {
      unint64_t v20 = v16 == v19;
      if (v16 == v19) {
        int64_t v16 = 0;
      }
      v18 |= v20;
      unint64_t v21 = *(void *)(v11 + 8 * v16);
      if (v21 != -1)
      {
        uint64_t v17 = __clz(__rbit64(~v21)) + (v16 << 6);
        goto LABEL_28;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_6:
    unint64_t v12 = v5 + 1;
    if (!__OFADD__(v5, 1))
    {
      if (v12 < v10)
      {
        unint64_t v9 = *(void *)(v6 + 8 * v12);
        ++v5;
        if (v9) {
          goto LABEL_19;
        }
        int64_t v5 = v12 + 1;
        if (v12 + 1 < v10)
        {
          unint64_t v9 = *(void *)(v6 + 8 * v5);
          if (v9) {
            goto LABEL_19;
          }
          int64_t v5 = v12 + 2;
          if (v12 + 2 < v10)
          {
            unint64_t v9 = *(void *)(v6 + 8 * v5);
            if (v9) {
              goto LABEL_19;
            }
            int64_t v13 = v12 + 3;
            if (v13 < v10)
            {
              unint64_t v9 = *(void *)(v6 + 8 * v13);
              if (v9)
              {
                int64_t v5 = v13;
                goto LABEL_19;
              }
              while (1)
              {
                int64_t v5 = v13 + 1;
                if (__OFADD__(v13, 1)) {
                  goto LABEL_35;
                }
                if (v5 >= v10) {
                  break;
                }
                unint64_t v9 = *(void *)(v6 + 8 * v5);
                ++v13;
                if (v9) {
                  goto LABEL_19;
                }
              }
            }
          }
        }
      }
      uint64_t result = swift_release();
      uint64_t v1 = v0;
LABEL_32:
      *uint64_t v1 = v4;
      return result;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

void specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<OngoingCallOfferOptions>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  if (!*(void *)(v2 + 16))
  {
LABEL_23:
    swift_release();
    *uint64_t v1 = v3;
    return;
  }
  uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = v2 + 56;
  uint64_t v6 = -1;
  if (v4 < 64) {
    uint64_t v6 = ~(-1 << v4);
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v8 = (unint64_t)(v4 + 63) >> 6;
  swift_retain();
  int64_t v9 = 0;
  if (!v7) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v10 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v9 << 6))
  {
    specialized _NativeSet._unsafeInsertNew(_:)(*(unsigned char *)(*(void *)(v2 + 48) + i));
    if (v7) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v12 >= v8) {
      goto LABEL_22;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v9;
    if (!v13)
    {
      int64_t v9 = v12 + 1;
      if (v12 + 1 >= v8) {
        goto LABEL_22;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v9);
      if (!v13)
      {
        int64_t v9 = v12 + 2;
        if (v12 + 2 >= v8) {
          goto LABEL_22;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v9);
        if (!v13) {
          break;
        }
      }
    }
LABEL_19:
    unint64_t v7 = (v13 - 1) & v13;
  }
  int64_t v14 = v12 + 3;
  if (v14 >= v8)
  {
LABEL_22:
    swift_release();
    goto LABEL_23;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v9 = v14;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v9 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v9 >= v8) {
      goto LABEL_22;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v9);
    ++v14;
    if (v13) {
      goto LABEL_19;
    }
  }
LABEL_25:
  __break(1u);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String?>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  if (!*(void *)(v2 + 16))
  {
LABEL_23:
    swift_release();
    *uint64_t v1 = v3;
    return;
  }
  uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = v2 + 56;
  uint64_t v6 = -1;
  if (v4 < 64) {
    uint64_t v6 = ~(-1 << v4);
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v8 = (unint64_t)(v4 + 63) >> 6;
  swift_retain();
  int64_t v9 = 0;
  if (!v7) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v10 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v9 << 6))
  {
    unint64_t v15 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    int64_t v16 = *v15;
    uint64_t v17 = v15[1];
    swift_bridgeObjectRetain();
    specialized _NativeSet._unsafeInsertNew(_:)(v16, v17);
    if (v7) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v12 >= v8) {
      goto LABEL_22;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v9;
    if (!v13)
    {
      int64_t v9 = v12 + 1;
      if (v12 + 1 >= v8) {
        goto LABEL_22;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v9);
      if (!v13)
      {
        int64_t v9 = v12 + 2;
        if (v12 + 2 >= v8) {
          goto LABEL_22;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v9);
        if (!v13) {
          break;
        }
      }
    }
LABEL_19:
    unint64_t v7 = (v13 - 1) & v13;
  }
  int64_t v14 = v12 + 3;
  if (v14 >= v8)
  {
LABEL_22:
    swift_release();
    goto LABEL_23;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v9 = v14;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v9 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v9 >= v8) {
      goto LABEL_22;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v9);
    ++v14;
    if (v13) {
      goto LABEL_19;
    }
  }
LABEL_25:
  __break(1u);
}

uint64_t outlined bridged method (ob) of @objc INStartCallIntent.contacts.getter(void *a1)
{
  id v2 = [a1 contacts];

  if (!v2) {
    return 0;
  }
  type metadata accessor for INPerson();
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

unsigned char *storeEnumTagSinglePayload for OngoingCallOfferOptions(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0xB19E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OngoingCallOfferOptions()
{
  return &type metadata for OngoingCallOfferOptions;
}

void specialized Optional<A>.hash(into:)()
{
  uint64_t v3 = type metadata accessor for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues();
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_12_0();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
  __chkstk_darwin(v7 - 8);
  OUTLINED_FUNCTION_5_1();
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(v0, v2, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
  if (__swift_getEnumTagSinglePayload(v2, 1, v3) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v1, v2, v3);
    Hasher._combine(_:)(1u);
    lazy protocol witness table accessor for type UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues and conformance UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues(&lazy protocol witness table cache variable for type UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues and conformance UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues, (void (*)(uint64_t))&type metadata accessor for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues);
    dispatch thunk of Hashable.hash(into:)();
    uint64_t v8 = OUTLINED_FUNCTION_4_22();
    v9(v8);
  }
}

uint64_t lazy protocol witness table accessor for type UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues and conformance UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t OUTLINED_FUNCTION_1_21(unint64_t result)
{
  *(void *)(v1 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  return result;
}

uint64_t OUTLINED_FUNCTION_2_22(uint64_t a1)
{
  uint64_t v3 = ~(-1 << *(unsigned char *)(v1 + 32));
  uint64_t v4 = a1 & v3;
  return _HashTable.nextHole(atOrAfter:)(v4, v1 + 56, v3);
}

uint64_t OUTLINED_FUNCTION_4_22()
{
  return v0;
}

void OUTLINED_FUNCTION_7_21()
{
  ++*(void *)(v0 + 16);
}

uint64_t OUTLINED_FUNCTION_8_21()
{
  return 6579297;
}

uint64_t OUTLINED_FUNCTION_9_18()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_14_10()
{
  *uint64_t v0 = 0x8000000000000000;
  return swift_bridgeObjectRetain();
}

uint64_t TrialSmartAppSelectionConfigProvider.__allocating_init(trialConfigSource:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t TrialSmartAppSelectionConfigProvider.init(trialConfigSource:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

uint64_t AppSelectionUserPersonaCollector.getUserPersona(candidateApps:)(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v1 = (void *)a1;
    }
    else {
      uint64_t v1 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
    }
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    if (v5) {
      goto LABEL_3;
    }
LABEL_20:
    uint64_t v1 = _swiftEmptyArrayStorage;
    goto LABEL_21;
  }
  uint64_t v5 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  if (!v5) {
    goto LABEL_20;
  }
LABEL_3:
  if (v5 < 1) {
    goto LABEL_38;
  }
  uint64_t v6 = 0;
  uint64_t v1 = _swiftEmptyArrayStorage;
  do
  {
    if ((a1 & 0xC000000000000001) != 0) {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      swift_retain();
    }
    uint64_t v7 = App.appIdentifier.getter();
    uint64_t v9 = v8;
    swift_release();
    if (v9)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v1 = v12;
      }
      unint64_t v10 = v1[2];
      if (v10 >= v1[3] >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v1 = v13;
      }
      v1[2] = v10 + 1;
      uint64_t v11 = &v1[2 * v10];
      v11[4] = v7;
      v11[5] = v9;
    }
    ++v6;
  }
  while (v5 != v6);
LABEL_21:
  swift_bridgeObjectRelease();
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = 0;
  if (v5)
  {
    unint64_t v3 = a1 & 0xC000000000000001;
    if ((a1 & 0xC000000000000001) != 0) {
      goto LABEL_39;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    while (1)
    {
      Swift::Bool v14 = App.isFirstParty()();
      swift_release();
      if (!v14) {
        break;
      }
      if (v5 == 1)
      {
LABEL_33:
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 1;
      }
      uint64_t v15 = 5;
      while (1)
      {
        if (v3) {
          specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          swift_retain();
        }
        uint64_t v16 = v15 - 3;
        if (__OFADD__(v15 - 4, 1)) {
          break;
        }
        Swift::Bool v17 = App.isFirstParty()();
        swift_release();
        if (!v17) {
          goto LABEL_34;
        }
        ++v15;
        if (v16 == v5) {
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      swift_bridgeObjectRetain();
      specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
LABEL_34:
    swift_bridgeObjectRelease();
  }
  unint64_t v19 = dispatch_group_create();
  dispatch_group_enter(v19);
  type metadata accessor for SignalGatherer();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  SignalGatherer.init(signals:candidateAppBundleIds:)();
  unint64_t v20 = (void *)swift_allocObject();
  v20[2] = v1;
  v20[3] = v2;
  v20[4] = v19;
  swift_retain();
  unint64_t v21 = v19;
  dispatch thunk of SignalGatherer.gatherValuesAndTimings(completion:)();
  swift_release();
  OS_dispatch_group.wait()();
  swift_release();

  swift_beginAccess();
  uint64_t v18 = *(unsigned int *)(v2 + 16);
  swift_release();
  return v18;
}

void closure #3 in AppSelectionUserPersonaCollector.getUserPersona(candidateApps:)(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  uint64_t v45 = a2;
  dispatch_group_t v46 = a4;
  uint64_t v44 = a3;
  uint64_t v5 = type metadata accessor for SignalGatheringResults();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SignalGatherer.ValuesWithTimings();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  unint64_t v13 = (char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v38 - v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<SignalGatherer.ValuesWithTimings, SignalGathererError>);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Result<SignalGatherer.ValuesWithTimings, SignalGathererError>(a1, (uint64_t)v18);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.siriPhone);
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      char v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v22 = 0;
      _os_log_impl(&dword_0, v20, v21, "#AppSelectionUserPersonaCollector#getUserPersona gathering user persona signal value failed", v22, 2u);
      swift_slowDealloc();
    }

    outlined destroy of Result<SignalGatherer.ValuesWithTimings, SignalGathererError>((uint64_t)v18);
  }
  else
  {
    uint64_t v43 = v6;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v18, v9);
    uint64_t v23 = v10;
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.siriPhone);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      v48[0] = v40;
      uint64_t v42 = v5;
      *(_DWORD *)uint64_t v27 = 136315138;
      v38[1] = v27 + 4;
      Swift::Bool v39 = v27;
      SignalGatherer.ValuesWithTimings.values.getter();
      type metadata accessor for SignalValue();
      uint64_t v28 = Dictionary.description.getter();
      uint64_t v41 = v8;
      uint64_t v29 = v23;
      uint64_t v30 = v28;
      unint64_t v32 = v31;
      swift_bridgeObjectRelease();
      *(void *)to = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, v48);
      uint64_t v5 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v33 = v29;
      uint64_t v8 = v41;
      os_log_type_t v34 = *(void (**)(char *, uint64_t))(v33 + 8);
      v34(v13, v9);
      _os_log_impl(&dword_0, v25, v26, "#AppSelectionUserPersonaCollector#getUserPersona gathered user persona value: %s", v39, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      os_log_type_t v34 = *(void (**)(char *, uint64_t))(v10 + 8);
      v34(v13, v9);
    }

    uint64_t v35 = v43;
    uint64_t v36 = (Swift::Int32 *)(v44 + 16);
    SignalGatherer.ValuesWithTimings.values.getter();
    swift_bridgeObjectRetain();
    SignalGatheringResults.init(values:candidateAppBundleIds:)();
    to[0] = 0;
    if (one-time initialization token for userPersonaKey != -1) {
      swift_once();
    }
    SignalGatheringResults.extract(name:for:to:)((Swift::String)static CommsAppSelectionAppIndependentSignalsKeys.userPersonaKey, (Swift::String_optional)0, to);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v8, v5);
    v34(v15, v9);
    Swift::Int32 v37 = to[0];
    swift_beginAccess();
    *uint64_t v36 = v37;
  }
  dispatch_group_leave(v46);
}

uint64_t SharedConfirmationRepromptContext.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SharedConfirmationRepromptContext.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for AppSelectionUserPersonaCollecting.getUserPersona(candidateApps:) in conformance AppSelectionUserPersonaCollector()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t sub_B26A8()
{
  return _swift_deallocObject(v0, 20, 7);
}

uint64_t sub_B26B8()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void partial apply for closure #3 in AppSelectionUserPersonaCollector.getUserPersona(candidateApps:)(uint64_t a1)
{
  closure #3 in AppSelectionUserPersonaCollector.getUserPersona(candidateApps:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(NSObject **)(v1 + 32));
}

uint64_t type metadata accessor for AppSelectionUserPersonaCollector()
{
  return self;
}

uint64_t outlined init with copy of Result<SignalGatherer.ValuesWithTimings, SignalGathererError>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<SignalGatherer.ValuesWithTimings, SignalGathererError>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Result<SignalGatherer.ValuesWithTimings, SignalGathererError>(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<SignalGatherer.ValuesWithTimings, SignalGathererError>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

double SlotTemplating.toAnySlotTemplating()@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  __chkstk_darwin(a1);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v8, v3, a1);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AnySlotTemplating.init<A>(delegate:)((uint64_t)v8, AssociatedTypeWitness, a1, a2, (uint64_t (**)())v14);
  long long v11 = v14[1];
  *a3 = v14[0];
  a3[1] = v11;
  double result = *(double *)&v15;
  long long v13 = v16;
  a3[2] = v15;
  a3[3] = v13;
  return result;
}

uint64_t AnySlotTemplating.init<A>(delegate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (**a5)()@<X8>)
{
  unint64_t v32 = implicit closure #1 in AnySlotTemplating.init<A>(delegate:)(a1, a2, a3, a4);
  uint64_t v9 = v8;
  uint64_t v10 = OUTLINED_FUNCTION_1_22();
  uint64_t v14 = implicit closure #3 in AnySlotTemplating.init<A>(delegate:)(v10, v11, v12, v13);
  long long v16 = v15;
  uint64_t v17 = OUTLINED_FUNCTION_1_22();
  os_log_type_t v21 = implicit closure #5 in AnySlotTemplating.init<A>(delegate:)(v17, v18, v19, v20);
  uint64_t v23 = v22;
  uint64_t v24 = OUTLINED_FUNCTION_1_22();
  uint64_t v28 = implicit closure #7 in AnySlotTemplating.init<A>(delegate:)(v24, v25, v26, v27);
  uint64_t v30 = v29;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
  *a5 = v32;
  a5[1] = v9;
  a5[2] = (uint64_t (*)())v14;
  a5[3] = v16;
  a5[4] = v21;
  a5[5] = v23;
  a5[6] = v28;
  a5[7] = v30;
  return result;
}

uint64_t (*implicit closure #1 in AnySlotTemplating.init<A>(delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(a1);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v9);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = (char *)swift_allocObject();
  *((void *)v11 + 2) = a2;
  *((void *)v11 + 3) = a3;
  *((void *)v11 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v11[v10], v9, a3);
  return partial apply for implicit closure #2 in implicit closure #1 in AnySlotTemplating.init<A>(delegate:);
}

uint64_t (*implicit closure #3 in AnySlotTemplating.init<A>(delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(a1);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v9);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = (char *)swift_allocObject();
  *((void *)v11 + 2) = a2;
  *((void *)v11 + 3) = a3;
  *((void *)v11 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v11[v10], v9, a3);
  return partial apply for implicit closure #4 in implicit closure #3 in AnySlotTemplating.init<A>(delegate:);
}

uint64_t (*implicit closure #5 in AnySlotTemplating.init<A>(delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(a1);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v9);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = (char *)swift_allocObject();
  *((void *)v11 + 2) = a2;
  *((void *)v11 + 3) = a3;
  *((void *)v11 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v11[v10], v9, a3);
  return partial apply for implicit closure #6 in implicit closure #5 in AnySlotTemplating.init<A>(delegate:);
}

uint64_t (*implicit closure #7 in AnySlotTemplating.init<A>(delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(a1);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v9);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = (char *)swift_allocObject();
  *((void *)v11 + 2) = a2;
  *((void *)v11 + 3) = a3;
  *((void *)v11 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v11[v10], v9, a3);
  return partial apply for implicit closure #8 in implicit closure #7 in AnySlotTemplating.init<A>(delegate:);
}

uint64_t AnySlotTemplating.makeParameterPromptDialog(app:parameterName:intent:_:)()
{
  return (*v0)();
}

uint64_t AnySlotTemplating.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:inferenceSource:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(v6 + 16))(a1, a2, a3, a4, a5, a6 & 1);
}

uint64_t AnySlotTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:_:)(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(v1 + 32))(a1);
}

uint64_t AnySlotTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(v7 + 48))(a1, a2, a3, a4, a5, a6, a7 & 1);
}

uint64_t protocol witness for SlotTemplating.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:inferenceSource:_:) in conformance AnySlotTemplating<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  return AnySlotTemplating.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:inferenceSource:_:)(a1, a2, a3, a4, a5, a6 & 1);
}

uint64_t protocol witness for SlotTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:_:) in conformance AnySlotTemplating<A>(uint64_t a1)
{
  return AnySlotTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:_:)(a1);
}

uint64_t protocol witness for SlotTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:) in conformance AnySlotTemplating<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  return AnySlotTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:)(a1, a2, a3, a4, a5, a6, a7 & 1);
}

uint64_t destroy for AnySlotTemplating()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for AnySlotTemplating(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for AnySlotTemplating(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_retain();
  swift_release();
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for AnySlotTemplating(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  swift_release();
  a1[3] = a2[3];
  swift_release();
  return a1;
}

uint64_t type metadata accessor for AnySlotTemplating()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for implicit closure #8 in implicit closure #7 in AnySlotTemplating.init<A>(delegate:)()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_2_23();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 40))(v1, v2, v3);
}

uint64_t partial apply for implicit closure #6 in implicit closure #5 in AnySlotTemplating.init<A>(delegate:)()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_2_23();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 32))(v1, v2, v3);
}

uint64_t partial apply for implicit closure #4 in implicit closure #3 in AnySlotTemplating.init<A>(delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)(v6 + 32) + 24))(a1, a2, a3, a4, a5, a6 & 1);
}

uint64_t objectdestroyTm_0()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in AnySlotTemplating.init<A>(delegate:)()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 32) + 16))();
}

uint64_t OUTLINED_FUNCTION_1_22()
{
  return v0;
}

uint64_t Transformer<>.VoiceTriggerAudioRouteBehavior.init<A>(for:isEmergencyCallIntent:sharedGlobals:)(uint64_t a1, char a2, void *a3)
{
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for INAnswerCallIntent);
  if (swift_dynamicCastMetatype())
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.siriPhone);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_0, v6, v7, "#VoiceTriggerAudioRouteBehavior heySiriAudioRoute is enabled for INAnswerCallIntent.", v8, 2u);
      swift_slowDealloc();
    }

    uint64_t v9 = 0;
  }
  else
  {
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INStartCallIntent);
    uint64_t v9 = 2;
    if (swift_dynamicCastMetatype() && (a2 & 1) != 0)
    {
      uint64_t v10 = a3[3];
      uint64_t v11 = a3[4];
      __swift_project_boxed_opaque_existential_1(a3, v10);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v11 + 8))(v16, v10, v11);
      uint64_t v12 = a3[3];
      uint64_t v13 = a3[4];
      __swift_project_boxed_opaque_existential_1(a3, v12);
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 112))(v12, v13);
      uint64_t v9 = static Transformer<>.VoiceTriggerAudioRouteBehavior.chooseBehaviorForEmergencyCall(deviceState:currentRequest:)(v16, v14);
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    }
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a3);
  return v9;
}

uint64_t static Transformer<>.VoiceTriggerAudioRouteBehavior.chooseBehaviorForEmergencyCall(deviceState:currentRequest:)(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AudioDestination();
  uint64_t v91 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  os_log_t v85 = (char *)v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AudioDestination?, AudioDestination?));
  uint64_t v6 = __chkstk_darwin(v89);
  uint64_t v8 = (char *)v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v92 = (uint64_t)v80 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  long long v16 = (char *)v80 - v15;
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_5_17();
  uint64_t v88 = v17;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v18);
  OUTLINED_FUNCTION_5_17();
  uint64_t v86 = v19;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v20);
  OUTLINED_FUNCTION_5_17();
  uint64_t v90 = v21;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v22);
  OUTLINED_FUNCTION_5_17();
  uint64_t v93 = v23;
  OUTLINED_FUNCTION_18_0();
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v27 = (char *)v80 - v26;
  uint64_t v28 = __chkstk_darwin(v25);
  uint64_t v30 = (char *)v80 - v29;
  __chkstk_darwin(v28);
  unint64_t v32 = (char *)v80 - v31;
  if (a2) {
    CurrentRequest.audioDestination.getter();
  }
  else {
    __swift_storeEnumTagSinglePayload((uint64_t)v80 - v31, 1, 1, v4);
  }
  uint64_t v87 = v16;
  Swift::Int v84 = v13;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v33 = type metadata accessor for Logger();
  uint64_t v34 = __swift_project_value_buffer(v33, (uint64_t)static Logger.siriPhone);
  outlined init with copy of AudioDestination?((uint64_t)v32, (uint64_t)v30);
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v35, v36))
  {
    v80[1] = v34;
    char v81 = v8;
    uint64_t v82 = v32;
    Swift::Int32 v37 = (uint8_t *)swift_slowAlloc();
    v95[0] = swift_slowAlloc();
    *(_DWORD *)Swift::Int32 v37 = 136315138;
    outlined init with copy of AudioDestination?((uint64_t)v30, (uint64_t)v27);
    OUTLINED_FUNCTION_0_3((uint64_t)v27);
    uint64_t v83 = v4;
    if (v62)
    {
      outlined destroy of SubmitCommandError?((uint64_t)v27, &demangling cache variable for type metadata for AudioDestination?);
      unint64_t v40 = 0xE300000000000000;
      uint64_t v38 = 7104878;
    }
    else
    {
      uint64_t v38 = AudioDestination.aceValue.getter();
      unint64_t v40 = v39;
      uint64_t v41 = OUTLINED_FUNCTION_3_25();
      v42(v41);
    }
    uint64_t v94 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v40, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of SubmitCommandError?((uint64_t)v30, &demangling cache variable for type metadata for AudioDestination?);
    _os_log_impl(&dword_0, v35, v36, "#VoiceTriggerAudioRouteBehavior audioDestination = %s", v37, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();

    unint64_t v32 = v82;
    uint64_t v4 = v83;
    uint64_t v8 = v81;
  }
  else
  {
    outlined destroy of SubmitCommandError?((uint64_t)v30, &demangling cache variable for type metadata for AudioDestination?);
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  char v43 = dispatch thunk of DeviceState.isPhone.getter();
  outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v95);
  if ((v43 & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v95);
    uint64_t v46 = v93;
    outlined init with copy of AudioDestination?((uint64_t)v32, v93);
    goto LABEL_20;
  }
  __swift_project_boxed_opaque_existential_1(v95, v95[3]);
  DeviceState.isAnyCar.getter();
  char v45 = v44;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v95);
  uint64_t v46 = v93;
  outlined init with copy of AudioDestination?((uint64_t)v32, v93);
  if (v45)
  {
LABEL_20:
    uint64_t v52 = &demangling cache variable for type metadata for AudioDestination?;
    uint64_t v53 = v46;
LABEL_21:
    outlined destroy of SubmitCommandError?(v53, v52);
    goto LABEL_22;
  }
  uint64_t v47 = v90;
  static AudioDestination.builtInSpeaker.getter();
  __swift_storeEnumTagSinglePayload(v47, 0, 1, v4);
  uint64_t v48 = v89;
  uint64_t v49 = v92;
  uint64_t v50 = v92 + *(int *)(v89 + 48);
  outlined init with copy of AudioDestination?(v46, v92);
  outlined init with copy of AudioDestination?(v47, v50);
  OUTLINED_FUNCTION_0_3(v49);
  if (v62)
  {
    outlined destroy of SubmitCommandError?(v47, &demangling cache variable for type metadata for AudioDestination?);
    OUTLINED_FUNCTION_0_3(v50);
    uint64_t v51 = v88;
    if (v62)
    {
      outlined destroy of SubmitCommandError?(v92, &demangling cache variable for type metadata for AudioDestination?);
      outlined init with copy of AudioDestination?(v46, v51);
LABEL_40:
      outlined destroy of SubmitCommandError?(v51, &demangling cache variable for type metadata for AudioDestination?);
      uint64_t v67 = v46;
      goto LABEL_41;
    }
    goto LABEL_29;
  }
  uint64_t v61 = v86;
  outlined init with copy of AudioDestination?(v49, v86);
  OUTLINED_FUNCTION_0_3(v50);
  if (v62)
  {
    outlined destroy of SubmitCommandError?(v90, &demangling cache variable for type metadata for AudioDestination?);
    uint64_t v63 = OUTLINED_FUNCTION_3_25();
    v64(v63);
    uint64_t v51 = v88;
LABEL_29:
    outlined destroy of SubmitCommandError?(v92, &demangling cache variable for type metadata for (AudioDestination?, AudioDestination?));
    outlined init with copy of AudioDestination?(v46, v51);
    goto LABEL_30;
  }
  uint64_t v70 = v61;
  uint64_t v71 = v91;
  uint64_t v72 = OUTLINED_FUNCTION_1_23();
  v73(v72);
  lazy protocol witness table accessor for type AudioDestination and conformance AudioDestination(&lazy protocol witness table cache variable for type AudioDestination and conformance AudioDestination, (void (*)(uint64_t))&type metadata accessor for AudioDestination);
  char v74 = OUTLINED_FUNCTION_2_24();
  uint64_t v75 = *(void (**)(uint64_t, uint64_t))(v71 + 8);
  v75(v48, v4);
  outlined destroy of SubmitCommandError?(v90, &demangling cache variable for type metadata for AudioDestination?);
  v75(v70, v4);
  uint64_t v48 = v89;
  outlined destroy of SubmitCommandError?(v92, &demangling cache variable for type metadata for AudioDestination?);
  uint64_t v51 = v88;
  outlined init with copy of AudioDestination?(v46, v88);
  if (v74) {
    goto LABEL_40;
  }
LABEL_30:
  uint64_t v65 = (uint64_t)v87;
  static AudioDestination.builtInReceiver.getter();
  __swift_storeEnumTagSinglePayload(v65, 0, 1, v4);
  uint64_t v66 = (uint64_t)&v8[*(int *)(v48 + 48)];
  outlined init with copy of AudioDestination?(v51, (uint64_t)v8);
  outlined init with copy of AudioDestination?(v65, v66);
  OUTLINED_FUNCTION_0_3((uint64_t)v8);
  if (!v62)
  {
    uint64_t v68 = (uint64_t)v84;
    outlined init with copy of AudioDestination?((uint64_t)v8, (uint64_t)v84);
    OUTLINED_FUNCTION_0_3(v66);
    if (!v69)
    {
      uint64_t v76 = v91;
      uint64_t v77 = OUTLINED_FUNCTION_1_23();
      v78(v77);
      lazy protocol witness table accessor for type AudioDestination and conformance AudioDestination(&lazy protocol witness table cache variable for type AudioDestination and conformance AudioDestination, (void (*)(uint64_t))&type metadata accessor for AudioDestination);
      LODWORD(v92) = OUTLINED_FUNCTION_2_24();
      id v79 = *(void (**)(uint64_t, uint64_t))(v76 + 8);
      v79(v48, v4);
      outlined destroy of SubmitCommandError?((uint64_t)v87, &demangling cache variable for type metadata for AudioDestination?);
      outlined destroy of SubmitCommandError?(v51, &demangling cache variable for type metadata for AudioDestination?);
      outlined destroy of SubmitCommandError?(v46, &demangling cache variable for type metadata for AudioDestination?);
      v79(v68, v4);
      outlined destroy of SubmitCommandError?((uint64_t)v8, &demangling cache variable for type metadata for AudioDestination?);
      if (v92) {
        goto LABEL_42;
      }
LABEL_22:
      uint64_t v54 = 0;
      goto LABEL_23;
    }
    outlined destroy of SubmitCommandError?((uint64_t)v87, &demangling cache variable for type metadata for AudioDestination?);
    outlined destroy of SubmitCommandError?(v51, &demangling cache variable for type metadata for AudioDestination?);
    outlined destroy of SubmitCommandError?(v46, &demangling cache variable for type metadata for AudioDestination?);
    (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v68, v4);
    goto LABEL_38;
  }
  outlined destroy of SubmitCommandError?(v65, &demangling cache variable for type metadata for AudioDestination?);
  outlined destroy of SubmitCommandError?(v51, &demangling cache variable for type metadata for AudioDestination?);
  outlined destroy of SubmitCommandError?(v46, &demangling cache variable for type metadata for AudioDestination?);
  OUTLINED_FUNCTION_0_3(v66);
  if (!v62)
  {
LABEL_38:
    uint64_t v52 = &demangling cache variable for type metadata for (AudioDestination?, AudioDestination?);
    uint64_t v53 = (uint64_t)v8;
    goto LABEL_21;
  }
  uint64_t v67 = (uint64_t)v8;
LABEL_41:
  outlined destroy of SubmitCommandError?(v67, &demangling cache variable for type metadata for AudioDestination?);
LABEL_42:
  uint64_t v54 = 1;
LABEL_23:
  char v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v55, v56))
  {
    uint64_t v57 = (uint8_t *)swift_slowAlloc();
    v95[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v57 = 136315138;
    LOBYTE(v94) = v54;
    type metadata accessor for Transformer<PhoneCallNLIntent, INCallAudioRoute><>.VoiceTriggerAudioRouteBehavior();
    uint64_t v58 = String.init<A>(describing:)();
    uint64_t v94 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v55, v56, "#VoiceTriggerAudioRouteBehavior chose %s for HS-initiated emergency call", v57, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }

  outlined destroy of SubmitCommandError?((uint64_t)v32, &demangling cache variable for type metadata for AudioDestination?);
  return v54;
}

uint64_t static Transformer<>.transformer<A>(intentType:sharedGlobals:previousIntent:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  outlined init with copy of SignalProviding(a2, (uint64_t)v10);
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = a4;
  v7[3] = a1;
  outlined init with take of AppSelectionSignalComponent(v10, (uint64_t)(v7 + 4));
  v7[9] = a3;
  id v8 = a3;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
  type metadata accessor for INCallAudioRoute(0);
  return Transformer.init(transform:)();
}

void closure #1 in static Transformer<>.transformer<A>(intentType:sharedGlobals:previousIntent:)(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  Swift::Bool v10 = PhoneCallNLIntent.isEmergencyCall()();
  outlined init with copy of SignalProviding((uint64_t)a3, (uint64_t)v71);
  char v11 = Transformer<>.VoiceTriggerAudioRouteBehavior.init<A>(for:isEmergencyCallIntent:sharedGlobals:)(a2, v10, v71);
  uint64_t v12 = a3[3];
  uint64_t v13 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v12);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v13 + 8))(v71, v12, v13);
  uint64_t v14 = v72;
  __swift_project_boxed_opaque_existential_1(v71, v72);
  if (DeviceState.isVoiceTrigger.getter(v14))
  {
    BOOL v15 = 1;
  }
  else if (a4 && (id v16 = [a4 _metadata]) != 0)
  {
    uint64_t v17 = v16;
    unsigned int v18 = [v16 triggerMethod];

    BOOL v15 = v18 == 30;
  }
  else
  {
    BOOL v15 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
  uint64_t v19 = a3[3];
  uint64_t v20 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v19);
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 112))(v19, v20);
  uint64_t v22 = &unk_583000;
  if (v21)
  {
    if (CurrentRequest.isInAmbient.getter())
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      __swift_project_value_buffer(v23, (uint64_t)static Logger.siriPhone);
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = (uint8_t *)swift_slowAlloc();
        uint64_t v27 = swift_slowAlloc();
        *(_DWORD *)uint64_t v26 = 136315138;
        v71[0] = v27;
        uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallAudioRoute>);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallAudioRoute>.Type);
        uint64_t v28 = String.init<A>(describing:)();
        uint64_t v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, v71);
        uint64_t v22 = (void *)&unk_583000;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_0, v24, v25, "#%s Request is made in ambient mode. Routing to HS audio route.", v26, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      uint64_t v30 = _INCallAudioRouteHeySiriAudioRoute;
      swift_release();
      goto LABEL_44;
    }
    swift_release();
  }
  uint64_t v31 = a1[3];
  uint64_t v32 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v31);
  switch((*(unsigned __int8 (**)(uint64_t, uint64_t))(v32 + 48))(v31, v32))
  {
    case 1u:
    case 2u:
    case 3u:
      char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v33 & 1) == 0) {
        goto LABEL_23;
      }
      goto LABEL_18;
    case 4u:
LABEL_23:
      if (v11 != 1)
      {
        if (!v11 && v15)
        {
          uint64_t v22 = &unk_583000;
          if (one-time initialization token for siriPhone != -1) {
            swift_once();
          }
          uint64_t v41 = type metadata accessor for Logger();
          __swift_project_value_buffer(v41, (uint64_t)static Logger.siriPhone);
          uint64_t v42 = Logger.logObject.getter();
          os_log_type_t v43 = static os_log_type_t.debug.getter();
          if (!os_log_type_enabled(v42, v43)) {
            goto LABEL_41;
          }
          char v44 = (uint8_t *)swift_slowAlloc();
          v71[0] = swift_slowAlloc();
          *(_DWORD *)char v44 = 136315138;
          uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallAudioRoute>);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallAudioRoute>.Type);
          uint64_t v45 = String.init<A>(describing:)();
          uint64_t v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, v71);
          uint64_t v22 = (void *)&unk_583000;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v47 = "#%s HeySiriAudioRoute: User used HS for this request or the initial request";
          goto LABEL_40;
        }
LABEL_35:
        uint64_t v51 = a3[3];
        uint64_t v52 = a3[4];
        __swift_project_boxed_opaque_existential_1(a3, v51);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v52 + 8))(v71, v51, v52);
        __swift_project_boxed_opaque_existential_1(v71, v72);
        DeviceState.isTriggerlessFollowup.getter();
        LOBYTE(v51) = v53;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
        if ((v51 & 1) == 0)
        {
          uint64_t v30 = 0;
          uint64_t v22 = &unk_583000;
          goto LABEL_44;
        }
        uint64_t v22 = &unk_583000;
        if (one-time initialization token for siriPhone != -1) {
          swift_once();
        }
        uint64_t v54 = type metadata accessor for Logger();
        __swift_project_value_buffer(v54, (uint64_t)static Logger.siriPhone);
        uint64_t v42 = Logger.logObject.getter();
        os_log_type_t v43 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v42, v43))
        {
LABEL_41:

          uint64_t v30 = _INCallAudioRouteHeySiriAudioRoute;
          goto LABEL_44;
        }
        char v44 = (uint8_t *)swift_slowAlloc();
        v71[0] = swift_slowAlloc();
        *(_DWORD *)char v44 = 136315138;
        uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallAudioRoute>);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallAudioRoute>.Type);
        uint64_t v55 = String.init<A>(describing:)();
        uint64_t v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, v71);
        uint64_t v22 = (void *)&unk_583000;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v47 = "#%s Triggerless follow-up to call announcement: Using HeySiriAudioRoute instead of default to force audio "
              "route to headphones w/o IED.";
LABEL_40:
        _os_log_impl(&dword_0, v42, v43, v47, v44, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        goto LABEL_41;
      }
      if (!v15) {
        goto LABEL_35;
      }
      uint64_t v22 = &unk_583000;
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v48 = type metadata accessor for Logger();
      __swift_project_value_buffer(v48, (uint64_t)static Logger.siriPhone);
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v35, v36))
      {
        Swift::Int32 v37 = (uint8_t *)swift_slowAlloc();
        v71[0] = swift_slowAlloc();
        *(_DWORD *)Swift::Int32 v37 = 136315138;
        uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallAudioRoute>);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallAudioRoute>.Type);
        uint64_t v49 = String.init<A>(describing:)();
        uint64_t v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, v71);
        uint64_t v22 = (void *)&unk_583000;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        unint64_t v40 = "#%s Speakerphone AudioRoute: User used HS for this request or the initial request";
LABEL_22:
        _os_log_impl(&dword_0, v35, v36, v40, v37, 0xCu);
        uint64_t v30 = 1;
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
LABEL_42:

        uint64_t v30 = 1;
      }
LABEL_44:
      if (v22[466] != -1) {
        swift_once();
      }
      uint64_t v57 = type metadata accessor for Logger();
      __swift_project_value_buffer(v57, (uint64_t)static Logger.siriPhone);
      uint64_t v58 = Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v58, v59))
      {
        uint64_t v70 = a5;
        uint64_t v60 = swift_slowAlloc();
        v71[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v60 = 136315394;
        uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallAudioRoute>);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallAudioRoute>.Type);
        uint64_t v61 = String.init<A>(describing:)();
        uint64_t v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v62, v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v60 + 12) = 2080;
        if (!v30)
        {
          unint64_t v65 = 0xE700000000000000;
          uint64_t v66 = 0x4E574F4E4B4E55;
LABEL_59:
          uint64_t v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v65, v71);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_0, v58, v59, "#%s --> %s", (uint8_t *)v60, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          a5 = v70;
          goto LABEL_60;
        }
        uint64_t BackingType = INCallAudioRouteGetBackingType();
        switch(BackingType)
        {
          case 4:
            uint64_t v64 = @"HEY_SIRI_AUDIO_ROUTE";
            break;
          case 3:
            uint64_t v64 = @"BLUETOOTH_AUDIO_ROUTE";
            break;
          case 2:
            uint64_t v64 = @"SPEAKERPHONE_AUDIO_ROUTE";
            break;
          default:
            uint64_t v64 = +[NSString stringWithFormat:@"(unknown: %i)", BackingType];
            goto LABEL_58;
        }
        uint64_t v67 = v64;
LABEL_58:
        uint64_t v68 = v64;
        uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v65 = v69;

        goto LABEL_59;
      }

LABEL_60:
      *a5 = v30;
      return;
    default:
      swift_bridgeObjectRelease();
LABEL_18:
      uint64_t v22 = &unk_583000;
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v34 = type metadata accessor for Logger();
      __swift_project_value_buffer(v34, (uint64_t)static Logger.siriPhone);
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v35, v36)) {
        goto LABEL_42;
      }
      Swift::Int32 v37 = (uint8_t *)swift_slowAlloc();
      v71[0] = swift_slowAlloc();
      *(_DWORD *)Swift::Int32 v37 = 136315138;
      uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallAudioRoute>);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallAudioRoute>.Type);
      uint64_t v38 = String.init<A>(describing:)();
      uint64_t v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, v71);
      uint64_t v22 = (void *)&unk_583000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v40 = "#%s Speakerphone specified in intent";
      goto LABEL_22;
  }
}

uint64_t sub_B4C20()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);

  return _swift_deallocObject(v0, 80, 7);
}

void partial apply for closure #1 in static Transformer<>.transformer<A>(intentType:sharedGlobals:previousIntent:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  closure #1 in static Transformer<>.transformer<A>(intentType:sharedGlobals:previousIntent:)(a1, *(void *)(v2 + 24), (void *)(v2 + 32), *(void **)(v2 + 72), a2);
}

uint64_t outlined init with copy of AudioDestination?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for Transformer<PhoneCallNLIntent, INCallAudioRoute><>.VoiceTriggerAudioRouteBehavior()
{
  if (!lazy cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallAudioRoute><>.VoiceTriggerAudioRouteBehavior)
  {
    unint64_t v0 = type metadata accessor for Transformer<>.VoiceTriggerAudioRouteBehavior();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallAudioRoute><>.VoiceTriggerAudioRouteBehavior);
    }
  }
}

uint64_t type metadata accessor for Transformer<>.VoiceTriggerAudioRouteBehavior()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata instantiation function for Transformer<>.VoiceTriggerAudioRouteBehavior(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 0);
}

unsigned char *storeEnumTagSinglePayload for Transformer<>.VoiceTriggerAudioRouteBehavior(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0xB4E1CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t base witness table accessor for Equatable in Transformer<A, B><>.VoiceTriggerAudioRouteBehavior()
{
  return lazy protocol witness table accessor for type AudioDestination and conformance AudioDestination(&lazy protocol witness table cache variable for type Transformer<PhoneCallNLIntent, INCallAudioRoute><>.VoiceTriggerAudioRouteBehavior and conformance Transformer<A, B><>.VoiceTriggerAudioRouteBehavior, (void (*)(uint64_t))type metadata accessor for Transformer<PhoneCallNLIntent, INCallAudioRoute><>.VoiceTriggerAudioRouteBehavior);
}

uint64_t lazy protocol witness table accessor for type AudioDestination and conformance AudioDestination(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_23()
{
  return *(void *)(v0 - 208);
}

uint64_t OUTLINED_FUNCTION_2_24()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

uint64_t OUTLINED_FUNCTION_3_25()
{
  return v0;
}

uint64_t ContactNeedsConfirmationFlowStrategy.promptProvider.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t ContactNeedsConfirmationFlowStrategy.sharedGlobals.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of SignalProviding(v2 + *(int *)(a1 + 36), a2);
}

uint64_t ContactUnsupportedFlowStrategy.makeUnsupportedValueOutput(resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return _swift_task_switch(ContactUnsupportedFlowStrategy.makeUnsupportedValueOutput(resolveRecord:), 0, 0);
}

uint64_t ContactUnsupportedFlowStrategy.makeUnsupportedValueOutput(resolveRecord:)()
{
  uint64_t v1 = v0[4];
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v2 = *(void *)(v1 + 24);
  swift_getAssociatedTypeWitness();
  type metadata accessor for ParameterResolutionRecord();
  uint64_t v4 = ParameterResolutionRecord.app.getter();
  v0[6] = v4;
  uint64_t v5 = ParameterResolutionRecord.intent.getter();
  v0[7] = v5;
  uint64_t v6 = ParameterResolutionRecord.result.getter();
  v0[8] = v6;
  Swift::Bool v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 + 48)
                                                                                     + **(int **)(v2 + 48));
  uint64_t v7 = (void *)swift_task_alloc();
  v0[9] = v7;
  *uint64_t v7 = v0;
  v7[1] = ContactUnsupportedFlowStrategy.makeUnsupportedValueOutput(resolveRecord:);
  uint64_t v8 = v0[2];
  return v10(v8, v4, v5, v6, v3, v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v5 = v4;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(ContactUnsupportedFlowStrategy.makeUnsupportedValueOutput(resolveRecord:), 0, 0);
  }
  else
  {
    uint64_t v6 = *(void **)(v3 + 56);

    swift_release();
    uint64_t v7 = *(uint64_t (**)(void))(v4 + 8);
    return v7();
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_1_0();
  uint64_t v1 = *(void **)(v0 + 56);

  swift_release();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t ContactUnsupportedFlowStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[6] = v2;
  v1[7] = v0;
  v1[5] = v3;
  uint64_t v4 = type metadata accessor for ParameterIdentifier();
  v1[8] = v4;
  v1[9] = *(void *)(v4 - 8);
  v1[10] = swift_task_alloc();
  return _swift_task_switch(ContactUnsupportedFlowStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  char v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  unint64_t v32;
  uint64_t (*v33)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t AssociatedTypeWitness;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  uint64_t v38 = (uint64_t)(v0 + 4);
  uint64_t v1 = v0[6];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for ParameterResolutionRecord();
  uint64_t v2 = ParameterResolutionRecord.intent.getter();
  uint64_t v3 = (void *)ParameterResolutionRecord.result.getter();
  uint64_t v4 = ContactUnsupportedFlowStrategy.isMultipleContactsUnsupported(intentResolutionResult:)(v3);

  if (v4)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.siriPhone);
    uint64_t v6 = Logger.logObject.getter();
    uint64_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v1 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315138;
      uint64_t v9 = OUTLINED_FUNCTION_1_24((uint64_t)"makeUpdatedIntentForUnsupportedValue(resolveRecord:)", v2, v38, AssociatedTypeWitness, v41);
      *unint64_t v39 = v9;
      uint64_t v2 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_0, v6, v7, "%s: Unsupported multiple contacts => clear slot.", v8, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }

    Swift::Bool v10 = OUTLINED_FUNCTION_4_23();
    (*(void (**)(void *, uint64_t))(*(void *)(v10 + 8) + 16))(_swiftEmptyArrayStorage, v1);
  }
  else
  {
    uint64_t v11 = (void *)ParameterResolutionRecord.result.getter();
    uint64_t v12 = [v11 alternatives];

    uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = *(void *)(v13 + 16);
    swift_bridgeObjectRelease();
    if (v14)
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      BOOL v15 = type metadata accessor for Logger();
      __swift_project_value_buffer(v15, (uint64_t)static Logger.siriPhone);
      id v16 = Logger.logObject.getter();
      uint64_t v17 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v16, v17))
      {
        unsigned int v18 = v2;
        uint64_t v19 = (uint8_t *)swift_slowAlloc();
        swift_slowAlloc();
        *(_DWORD *)uint64_t v19 = 136315138;
        v0[2] = OUTLINED_FUNCTION_1_24((uint64_t)"makeUpdatedIntentForUnsupportedValue(resolveRecord:)", v35, v38, AssociatedTypeWitness, v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_0, v16, v17, "%s: Unsupported with alternatives => leave slot as-is.", v19, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_6();
        uint64_t v2 = v18;
        OUTLINED_FUNCTION_6();
      }
    }
    else
    {
      uint64_t v20 = *(void *)(OUTLINED_FUNCTION_4_23() + 8);
      uint64_t v21 = (*(uint64_t (**)(void, uint64_t))(v20 + 8))(0, v20);
      if (v21)
      {
        uint64_t v42 = v21;
        if (one-time initialization token for siriPhone != -1) {
          swift_once();
        }
        Swift::Int32 v37 = v2;
        uint64_t v22 = type metadata accessor for Logger();
        __swift_project_value_buffer(v22, (uint64_t)static Logger.siriPhone);
        uint64_t v23 = Logger.logObject.getter();
        uint64_t v24 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v23, v24))
        {
          os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
          swift_slowAlloc();
          *(_DWORD *)os_log_type_t v25 = 136315138;
          v0[3] = OUTLINED_FUNCTION_1_24((uint64_t)"makeUpdatedIntentForUnsupportedValue(resolveRecord:)", v2, v38, AssociatedTypeWitness, v42);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_0, v23, v24, "%s: Unsupported with NO alternatives => remove unsupported value.", v25, 0xCu);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_6();
          OUTLINED_FUNCTION_6();
        }

        uint64_t v27 = v0[9];
        uint64_t v26 = v0[10];
        uint64_t v28 = v0[8];
        ParameterResolutionRecord.parameter.getter();
        unint64_t v29 = ParameterIdentifier.multicardinalIndex.getter();
        uint64_t v31 = v30;
        (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
        if (v31) {
          uint64_t v32 = 0;
        }
        else {
          uint64_t v32 = v29;
        }

        uint64_t v2 = v37;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v42, AssociatedTypeWitness, v20);
        swift_bridgeObjectRelease();
      }
    }
  }
  swift_task_dealloc();
  char v33 = (uint64_t (*)(uint64_t))v0[1];
  return v33(v2);
}

uint64_t ContactUnsupportedFlowStrategy.isMultipleContactsUnsupported(intentResolutionResult:)(void *a1)
{
  self;
  if (swift_dynamicCastObjCClass()) {
    return [a1 unsupportedReason] == (char *)&dword_0 + 2;
  }
  self;
  uint64_t result = swift_dynamicCastObjCClass();
  if (result) {
    return [a1 unsupportedReason] == (char *)&dword_0 + 2;
  }
  return result;
}

uint64_t ContactUnsupportedFlowStrategy.init(outputProvider:sharedGlobals:)@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1);
  uint64_t v6 = a4 + *(int *)(type metadata accessor for ContactUnsupportedFlowStrategy() + 36);

  return outlined init with take of AppSelectionSignalComponent(a2, v6);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeUnsupportedValueOutput(resolveRecord:) in conformance ContactUnsupportedFlowStrategy<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for Flow.execute() in conformance RedirectToCompanionFlow;
  return ContactUnsupportedFlowStrategy.makeUnsupportedValueOutput(resolveRecord:)(a1, a2, a3);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeUpdatedIntentForUnsupportedValue(resolveRecord:) in conformance ContactUnsupportedFlowStrategy<A>()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return ContactUnsupportedFlowStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)();
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactUnsupportedFlowStrategy<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactUnsupportedFlowStrategy<A>;
  return UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:)(a1, a2, a3, a4);
}

uint64_t type metadata accessor for ContactUnsupportedFlowStrategy()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for ContactUnsupportedFlowStrategy()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ContactUnsupportedFlowStrategy(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 40 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v12 = *(void *)(v11 + 24);
    *(void *)(v10 + 24) = v12;
    *(void *)(v10 + 32) = *(void *)(v11 + 32);
    (**(void (***)(void))(v12 - 8))();
  }
  return v4;
}

uint64_t destroy for ContactUnsupportedFlowStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  unint64_t v4 = (a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8;

  return __swift_destroy_boxed_opaque_existential_1(v4);
}

uint64_t initializeWithCopy for ContactUnsupportedFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)(v8 + 24);
  *(void *)(v7 + 24) = v9;
  *(void *)(v7 + 32) = *(void *)(v8 + 32);
  (**(void (***)(void))(v9 - 8))();
  return a1;
}

uint64_t assignWithCopy for ContactUnsupportedFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)((*(void *)(v5 + 40) + 7 + a1) & 0xFFFFFFFFFFFFFFF8), (uint64_t *)((*(void *)(v5 + 40) + 7 + a2) & 0xFFFFFFFFFFFFFFF8));
  return a1;
}

uint64_t initializeWithTake for ContactUnsupportedFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)(v8 + 32);
  long long v10 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v10;
  *(void *)(v7 + 32) = v9;
  return a1;
}

uint64_t assignWithTake for ContactUnsupportedFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v7);
  long long v9 = *(_OWORD *)v8;
  long long v10 = *(_OWORD *)(v8 + 16);
  *(void *)(v7 + 32) = *(void *)(v8 + 32);
  *(_OWORD *)unint64_t v7 = v9;
  *(_OWORD *)(v7 + 16) = v10;
  return a1;
}

uint64_t getEnumTagSinglePayload for ContactUnsupportedFlowStrategy(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(unsigned int *)(*(void *)(v4 - 8) + 84);
  uint64_t v6 = *(void *)(*(void *)(v4 - 8) + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(*(void *)(v4 - 8) + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 40;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0xB622CLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return __swift_getEnumTagSinglePayload((uint64_t)a1, v5, v4);
  }
  unint64_t v17 = *(void *)((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 24);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

double storeEnumTagSinglePayload for ContactUnsupportedFlowStrategy(char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + 16);
  uint64_t v7 = *(unsigned int *)(*(void *)(v6 - 8) + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(*(void *)(v6 - 8) + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 40;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFD8) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFD8) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFD8)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 40);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return result;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return result;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return result;
      default:
        return result;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return result;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return result;
      }
      goto LABEL_33;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0xB641CLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
          if ((a2 & 0x80000000) != 0)
          {
            double result = 0.0;
            *(_OWORD *)(v18 + 8) = 0u;
            *(_OWORD *)(v18 + 24) = 0u;
            *(void *)unint64_t v18 = a2 ^ 0x80000000;
          }
          else
          {
            *(void *)(v18 + 24) = (a2 - 1);
          }
        }
        else
        {
          __swift_storeEnumTagSinglePayload((uint64_t)a1, a2, v7, v6);
        }
      }
      return result;
  }
}

uint64_t OUTLINED_FUNCTION_1_24@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000034, (a1 - 32) | 0x8000000000000000, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_4_23()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t DeviceState.isAuthenticatedForPhone.getter()
{
  uint64_t v0 = type metadata accessor for UnlockDevicePolicy();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UnlockDevicePolicy.default.getter();
  char v4 = dispatch thunk of DeviceState.isAuthenticated(for:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4 & 1;
}

uint64_t protocol witness for UnlockDeviceFlowStrategyAsync.authenticationPolicy.getter in conformance DefaultUnlockDeviceFlowStrategyAsync()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))();
}

uint64_t protocol witness for UnlockDeviceFlowStrategyAsync.makePromptForDeviceUnlock() in conformance DefaultUnlockDeviceFlowStrategyAsync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for Action.run() in conformance PlayVoiceMailAction;
  return UnlockDeviceFlowStrategyAsync.makePromptForDeviceUnlock()(a1, a2, a3);
}

uint64_t type metadata accessor for DefaultUnlockDeviceFlowStrategyAsync()
{
  return self;
}

uint64_t ContactResolverConfigHashable.intentTypeName.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PhoneIncomingCall.latestCallRecord.getter()
{
  return swift_retain();
}

uint64_t SiriInferenceContactSlotResolver.sharedGlobals.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + 40, a1);
}

uint64_t key path setter for PhoneIntentsRestrictedGuardFlow.state : PhoneIntentsRestrictedGuardFlow(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 80) = v2;
  return result;
}

uint64_t PhoneIntentsRestrictedGuardFlow.state.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t PhoneIntentsRestrictedGuardFlow.exitValue.getter()
{
  char v1 = (*(uint64_t (**)(void))(*(void *)v0 + 112))();
  return (v1 == 2) | v1 & 1u;
}

uint64_t PhoneIntentsRestrictedGuardFlow.__allocating_init(selectedIntent:app:sharedGlobals:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  outlined init with copy of SignalProviding(a4, (uint64_t)v11);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned char *))(v4 + 144))(2, a1, a2, a3, v11);
  __swift_destroy_boxed_opaque_existential_1(a4);
  return v9;
}

uint64_t PhoneIntentsRestrictedGuardFlow.__allocating_init(state:selectedIntent:app:sharedGlobals:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  uint64_t v10 = swift_allocObject();
  *(unsigned char *)(v10 + 80) = a1;
  *(void *)(v10 + 16) = a2;
  *(void *)(v10 + 24) = a3;
  *(void *)(v10 + 32) = a4;
  outlined init with take of AppSelectionSignalComponent(a5, v10 + 40);
  return v10;
}

uint64_t PhoneIntentsRestrictedGuardFlow.init(state:selectedIntent:app:sharedGlobals:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  *(unsigned char *)(v5 + 80) = a1;
  *(void *)(v5 + 16) = a2;
  *(void *)(v5 + 24) = a3;
  *(void *)(v5 + 32) = a4;
  outlined init with take of AppSelectionSignalComponent(a5, v5 + 40);
  return v5;
}

uint64_t PhoneIntentsRestrictedGuardFlow.execute()(uint64_t a1)
{
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = v1;
  return _swift_task_switch(PhoneIntentsRestrictedGuardFlow.execute(), 0, 0);
}

uint64_t PhoneIntentsRestrictedGuardFlow.execute()()
{
  if ((*(unsigned __int8 (**)(void))(*(void *)v0[8] + 112))() == 2)
  {
    char locked = PhoneIntentsRestrictedGuardFlow.requiresINIntentsRestrictedWhileLockedAuthentication()();
    uint64_t v2 = v0[8];
    if (locked)
    {
      uint64_t v3 = *(void *)(v2 + 64);
      uint64_t v4 = *(void *)(v2 + 72);
      __swift_project_boxed_opaque_existential_1((void *)(v2 + 40), v3);
      (*(void (**)(uint64_t, uint64_t))(v4 + 104))(v3, v4);
      uint64_t v5 = v0[5];
      uint64_t v6 = v0[6];
      __swift_project_boxed_opaque_existential_1(v0 + 2, v5);
      SiriKitFlowFactoryProtocol.makeAuthenticationGuardFlow()(v5, v6);
      swift_retain();
      static ExecuteResponse.ongoing<A>(next:childCompletion:)();
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
      goto LABEL_7;
    }
    swift_beginAccess();
    *(unsigned char *)(v2 + 80) = 0;
  }
  static ExecuteResponse.complete()();
LABEL_7:
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t static PhoneIntentsRestrictedGuardFlow.State.__derived_enum_equals(_:_:)(char a1, char a2)
{
  BOOL v2 = a2 == 2 && a1 == 2;
  if (a1 == 2 || a2 == 2) {
    return v2;
  }
  else {
    return static GuardFlowResult.== infix(_:_:)(a1 & 1, a2 & 1);
  }
}

uint64_t closure #1 in PhoneIntentsRestrictedGuardFlow.execute()(char *a1, uint64_t a2)
{
  char v3 = *a1;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(a2 + 80) = v3;
  return result;
}

uint64_t PhoneIntentsRestrictedGuardFlow.execute(completion:)()
{
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t PhoneIntentsRestrictedGuardFlow.requiresINIntentsRestrictedWhileLockedAuthentication()()
{
  uint64_t v1 = v0;
  BOOL v2 = v0 + 5;
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[9];
  __swift_project_boxed_opaque_existential_1(v0 + 5, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 152))(&v64, v3, v4);
  uint64_t v5 = v68;
  __swift_project_boxed_opaque_existential_1(&v64, v67);
  uint64_t v6 = App.appIdentifier.getter();
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(v5 + 16))(&v69, v6);
  swift_bridgeObjectRelease();
  _s27PhoneCallFlowDelegatePlugin12AnnotatedAppVSgWObTm_0((uint64_t)&v69, (uint64_t)&v75, &demangling cache variable for type metadata for AnnotatedApp?);
  if (!(void)v75)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v64);
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_4_24(v26, (uint64_t)static Logger.siriPhone);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      unint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v78 = swift_slowAlloc();
      *(_DWORD *)unint64_t v29 = 136315138;
      OUTLINED_FUNCTION_26_6();
      uint64_t v64 = v30;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneIntentsRestrictedGuardFlow.Type);
      uint64_t v31 = String.init<A>(describing:)();
      uint64_t v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, (uint64_t *)&v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_6_2();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v27, v28, "#%s Couldn't find cached AnnotatedApp, cannot determine if INIntentsRestrictedWhileLocked is set for this intent + app", v29, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {

      OUTLINED_FUNCTION_6_2();
    }
    return 0;
  }
  long long v78 = v75;
  long long v79 = v76;
  long long v80 = v77;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v64);
  uint64_t v7 = *((void *)&v80 + 1);
  uint64_t v8 = v0[2];
  uint64_t v9 = v1[3];
  swift_bridgeObjectRetain();
  specialized Set.contains(_:)(v8, v9, v7);
  LOBYTE(v8) = v10;
  swift_bridgeObjectRelease();
  if ((v8 & 1) == 0)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_4_24(v33, (uint64_t)static Logger.siriPhone);
    unint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136315138;
      OUTLINED_FUNCTION_26_6();
      uint64_t v63 = v34;
      uint64_t v64 = v35;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneIntentsRestrictedGuardFlow.Type);
      uint64_t v36 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, &v63);
      OUTLINED_FUNCTION_5_18();
      OUTLINED_FUNCTION_6_2();
      swift_bridgeObjectRelease();
      os_log_type_t v25 = "#%s Intent is not restricted";
      goto LABEL_17;
    }
LABEL_18:
    uint64_t v46 = swift_release();
    OUTLINED_FUNCTION_3_26(v46, v47, v48, v49, v50, v51, v52, v53, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73,
      v74,
      v75,
      *((uint64_t *)&v75 + 1),
      v76,
      *((uint64_t *)&v76 + 1),
      v77,
      *((uint64_t *)&v77 + 1),
      v78,
      *((uint64_t *)&v78 + 1));
    _s27PhoneCallFlowDelegatePlugin12AnnotatedAppVSgWObTm_0((uint64_t)&v79, (uint64_t)&v64, &demangling cache variable for type metadata for String?);
    outlined release of String?((uint64_t)&v64);

    OUTLINED_FUNCTION_6_2();
    goto LABEL_19;
  }
  __swift_project_boxed_opaque_existential_1(v2, v1[8]);
  uint64_t v11 = OUTLINED_FUNCTION_2_25();
  v12(v11);
  __swift_project_boxed_opaque_existential_1(&v64, v67);
  char v13 = dispatch thunk of DeviceState.isHomePod.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v64);
  if ((v13 & 1) != 0
    || (__swift_project_boxed_opaque_existential_1(v2, v1[8]),
        uint64_t v14 = OUTLINED_FUNCTION_2_25(),
        v15(v14),
        __swift_project_boxed_opaque_existential_1(&v64, v67),
        char v16 = DeviceState.isAuthenticatedForPhone.getter(),
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v64),
        (v16 & 1) != 0))
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_4_24(v17, (uint64_t)static Logger.siriPhone);
    unint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136315138;
      OUTLINED_FUNCTION_26_6();
      uint64_t v63 = v21;
      uint64_t v64 = v22;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneIntentsRestrictedGuardFlow.Type);
      uint64_t v23 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v63);
      OUTLINED_FUNCTION_5_18();
      OUTLINED_FUNCTION_6_2();
      swift_bridgeObjectRelease();
      os_log_type_t v25 = "#%s Device does not require unlock";
LABEL_17:
      _os_log_impl(&dword_0, v18, v19, v25, v20, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();

      uint64_t v38 = swift_release();
      OUTLINED_FUNCTION_3_26(v38, v39, v40, v41, v42, v43, v44, v45, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73,
        v74,
        v75,
        *((uint64_t *)&v75 + 1),
        v76,
        *((uint64_t *)&v76 + 1),
        v77,
        *((uint64_t *)&v77 + 1),
        v78,
        *((uint64_t *)&v78 + 1));
      _s27PhoneCallFlowDelegatePlugin12AnnotatedAppVSgWObTm_0((uint64_t)&v79, (uint64_t)&v64, &demangling cache variable for type metadata for String?);
      outlined release of String?((uint64_t)&v64);
LABEL_19:
      swift_bridgeObjectRelease();
      return 0;
    }
    goto LABEL_18;
  }
  uint64_t v55 = swift_release();
  OUTLINED_FUNCTION_3_26(v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73,
    v74,
    v75,
    *((uint64_t *)&v75 + 1),
    v76,
    *((uint64_t *)&v76 + 1),
    v77,
    *((uint64_t *)&v77 + 1),
    v78,
    *((uint64_t *)&v78 + 1));
  _s27PhoneCallFlowDelegatePlugin12AnnotatedAppVSgWObTm_0((uint64_t)&v79, (uint64_t)&v64, &demangling cache variable for type metadata for String?);
  outlined release of String?((uint64_t)&v64);
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t partial apply for closure #1 in PhoneIntentsRestrictedGuardFlow.execute()(char *a1)
{
  return closure #1 in PhoneIntentsRestrictedGuardFlow.execute()(a1, v1);
}

uint64_t type metadata accessor for PhoneIntentsRestrictedGuardFlow()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type PhoneIntentsRestrictedGuardFlow and conformance PhoneIntentsRestrictedGuardFlow()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneIntentsRestrictedGuardFlow and conformance PhoneIntentsRestrictedGuardFlow;
  if (!lazy protocol witness table cache variable for type PhoneIntentsRestrictedGuardFlow and conformance PhoneIntentsRestrictedGuardFlow)
  {
    type metadata accessor for PhoneIntentsRestrictedGuardFlow();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneIntentsRestrictedGuardFlow and conformance PhoneIntentsRestrictedGuardFlow);
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhoneIntentsRestrictedGuardFlow.State(char *a1, char *a2)
{
  return static PhoneIntentsRestrictedGuardFlow.State.__derived_enum_equals(_:_:)(*a1, *a2);
}

uint64_t PhoneIntentsRestrictedGuardFlow.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  return v0;
}

uint64_t PhoneIntentsRestrictedGuardFlow.__deallocating_deinit()
{
  PhoneIntentsRestrictedGuardFlow.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Flow.on(input:) in conformance PhoneIntentsRestrictedGuardFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance PhoneIntentsRestrictedGuardFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 168))();
}

uint64_t protocol witness for Flow.execute() in conformance PhoneIntentsRestrictedGuardFlow(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 160) + **(int **)(**(void **)v1 + 160));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for Flow.execute() in conformance PhoneFlow<A, B>;
  return v6(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance PhoneIntentsRestrictedGuardFlow@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 136))();
  *a1 = result & 1;
  return result;
}

uint64_t sub_B73EC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 112))();
  *a2 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for PhoneIntentsRestrictedGuardFlow.State(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE)
  {
    unsigned int v2 = a2 + 2;
    if (a2 + 2 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 2;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 2;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0xB74E8);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 2;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  BOOL v8 = v7 >= 2;
  unsigned int v9 = v7 - 2;
  if (!v8) {
    unsigned int v9 = -1;
  }
  if (v9 + 1 >= 2) {
    return v9;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for PhoneIntentsRestrictedGuardFlow.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 2;
  if (a3 + 2 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFE) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v7 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0xB75D0);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for PhoneIntentsRestrictedGuardFlow.State(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 2) {
    return v1 - 1;
  }
  else {
    return 0;
  }
}

unsigned char *destructiveInjectEnumTag for PhoneIntentsRestrictedGuardFlow.State(unsigned char *result, int a2)
{
  if (a2) {
    *uint64_t result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for PhoneIntentsRestrictedGuardFlow.State()
{
  return &type metadata for PhoneIntentsRestrictedGuardFlow.State;
}

uint64_t OUTLINED_FUNCTION_2_25()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_3_26(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  *(void *)(v28 - 96) = a28;
  return outlined release of Set<String>(v28 - 96);
}

uint64_t OUTLINED_FUNCTION_4_24(uint64_t a1, uint64_t a2)
{
  __swift_project_value_buffer(a1, a2);
  return swift_retain_n();
}

uint64_t AnnounceCallsContext.invocationType.getter(uint64_t a1, char a2)
{
  return a2 & 1;
}

Swift::Bool __swiftcall AnnounceCallsContext.isIncomingAudioCallNotification()()
{
  return ([v0 callCapability] == (char *)&dword_0 + 1) & v1;
}

BOOL static AppAndDeviceRestriction.AppCategory.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t AnnounceCallsContext.description.getter(void *a1)
{
  _StringGuts.grow(_:)(39);
  v2._object = (void *)0x8000000000492900;
  v2._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v2);
  id v3 = a1;
  id v4 = [v3 description];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unsigned int v7 = v6;

  v8._uint64_t countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);

  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 0xD000000000000011;
  v9._object = (void *)0x8000000000492920;
  String.append(_:)(v9);
  _print_unlocked<A, B>(_:_:)();
  v10._uint64_t countAndFlagsBits = 32010;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  return 0;
}

PhoneCallFlowDelegatePlugin::AnnounceCallsContext __swiftcall AnnounceCallsContext.init(incomingCall:invocationType:)(INCallRecord incomingCall, PhoneCallFlowDelegatePlugin::AnnounceCallInvocationType invocationType)
{
  PhoneCallFlowDelegatePlugin::AnnounceCallInvocationType v2 = invocationType & 1;
  result.incomingCall = incomingCall;
  result.invocationType = v2;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnnounceCallsContext()
{
  return AnnounceCallsContext.description.getter(*v0);
}

void AppAndDeviceRestriction.AppCategory.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int AppAndDeviceRestriction.AppCategory.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AnnounceCallInvocationType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static AppAndDeviceRestriction.AppCategory.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnnounceCallInvocationType()
{
  return AppAndDeviceRestriction.AppCategory.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance AnnounceCallInvocationType(uint64_t a1)
{
  AppAndDeviceRestriction.AppCategory.hash(into:)(a1, *v1);
}

void *IdentifyIncomingCallerOutputStrategy.announceCallsContext.getter()
{
  char v1 = *(void **)(v0 + 40);
  id v2 = v1;
  return v1;
}

uint64_t UnsupportedFaceTimeOutputProvider.labelTemplates.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + 56, a1);
}

uint64_t IncomingCallActionHandleIntentFlowStrategy.sharedGlobals.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + 96, a1);
}

uint64_t IncomingCallActionHandleIntentFlowStrategy.audioSessionManager.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + 136, a1);
}

uint64_t AnswerCallOutputStrategy.init(device:incomingCallCats:announceCallsContext:audioSessionManager:entitlementChecker:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, long long *a5@<X4>, long long *a6@<X5>, uint64_t a7@<X8>)
{
  *(void *)(a7 + 24) = type metadata accessor for AnswerCallCATsSimple();
  *(void *)(a7 + 32) = &protocol witness table for AnswerCallCATsSimple;
  *(void *)a7 = a2;
  *(void *)(a7 + 40) = a3;
  *(unsigned char *)(a7 + 48) = a4;
  outlined init with take of AppSelectionSignalComponent(a1, a7 + 56);
  outlined init with take of AppSelectionSignalComponent(a5, a7 + 96);

  return outlined init with take of AppSelectionSignalComponent(a6, a7 + 136);
}

id AnswerCallOutputStrategy.makeCallConnectedSound(intentResponse:)(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.siriPhone);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    unsigned int v7 = (uint8_t *)OUTLINED_FUNCTION_7_2();
    *(_WORD *)unsigned int v7 = 0;
    _os_log_impl(&dword_0, v5, v6, "#AnswerCallOutputStrategy makeCallConnectedSound:", v7, 2u);
    OUTLINED_FUNCTION_6();
  }

  Swift::String v8 = *(void **)(v2 + 40);
  if (!v8)
  {
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v21))
    {
      uint64_t v22 = (uint8_t *)OUTLINED_FUNCTION_7_2();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl(&dword_0, v11, v21, "This is not a follow-up to a call announcement - not sending answer chime", v22, 2u);
      OUTLINED_FUNCTION_6();
    }
    goto LABEL_24;
  }
  uint64_t ObjectType = swift_getObjectType();
  Swift::String v10 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 8);
  uint64_t v11 = v8;
  if (v10(ObjectType, a2) != 2)
  {
    if (one-time initialization token for announceTelephony != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v4, (uint64_t)static Logger.announceTelephony);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
      OUTLINED_FUNCTION_24_1(&dword_0, v25, v26, "Siri did not find an incoming call when attempting to answer - not sending answer chime");
      OUTLINED_FUNCTION_6();

      return 0;
    }

LABEL_24:
    return 0;
  }
  if (one-time initialization token for announceTelephony != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v4, (uint64_t)static Logger.announceTelephony);
  int v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)OUTLINED_FUNCTION_7_2();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl(&dword_0, v12, v13, "Call was answered - sending answer chime.", v14, 2u);
    OUTLINED_FUNCTION_6();
  }

  if ([v11 preferredCallProvider] == (char *)&dword_0 + 2)
  {
    int v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
      OUTLINED_FUNCTION_24_1(&dword_0, v17, v18, "This is a FT call - sending answer chime with ID nil.");
      OUTLINED_FUNCTION_6();
    }

    uint64_t v19 = 0;
    uint64_t v20 = 0;
  }
  else
  {
    id v27 = [v11 identifier];
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v28;
  }
  type metadata accessor for SAUIPlayNotificationSound();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v29 = SAUIPlayNotificationSound.init(notificationId:soundType:)(v19, v20);

  return v29;
}

BOOL AnswerCallOutputStrategy.shouldCloseAssistantEarly(intentResponse:)(uint64_t a1, uint64_t a2)
{
  __swift_project_boxed_opaque_existential_1((void *)(v2 + 56), *(void *)(v2 + 80));
  if ((dispatch thunk of DeviceState.isWatch.getter() & 1) == 0) {
    return 0;
  }
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(ObjectType, a2) == 2;
}

BOOL AnswerCallOutputStrategy.shouldShowIntentHandledDialog(intentResponse:)(void *a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  char v5 = IncomingCallIntentResponse.isIncomingCall.getter(ObjectType, a2);
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.siriPhone);
  id v7 = a1;
  Swift::String v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v11 = (void *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315394;
    if (v5) {
      uint64_t v12 = 0x6F7420544F4ELL;
    }
    else {
      uint64_t v12 = 28532;
    }
    if (v5) {
      unint64_t v13 = 0xE600000000000000;
    }
    else {
      unint64_t v13 = 0xE200000000000000;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2112;
    id v14 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v11 = v7;

    _os_log_impl(&dword_0, v8, v9, "#AnswerCallOutputStrategy AnswerCall decided %s send AddViews because intentResponse %@ is incoming call.", (uint8_t *)v10, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
  }
  return (v5 & 1) == 0;
}

uint64_t AnswerCallOutputStrategy.shouldAllowAppToInitiateRecordingTemporarily(sharedGlobals:app:)(void *a1, uint64_t a2)
{
  v38[1] = a2;
  uint64_t v3 = type metadata accessor for AudioSource();
  uint64_t v40 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v5 = (char *)v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AudioSource?, AudioSource?));
  __chkstk_darwin(v6);
  Swift::String v8 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioSource?);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  int v15 = (char *)v38 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)v38 - v16;
  uint64_t v19 = a1[3];
  uint64_t v18 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v19);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v18 + 112))(v19, v18))
  {
    CurrentRequest.audioSource.getter();
    swift_release();
  }
  else
  {
    __swift_storeEnumTagSinglePayload((uint64_t)v17, 1, 1, v3);
  }
  static AudioSource.bluetoothDoAPDevice.getter();
  __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v3);
  uint64_t v20 = (uint64_t)&v8[*(int *)(v6 + 48)];
  outlined init with copy of AudioSource?((uint64_t)v17, (uint64_t)v8);
  outlined init with copy of AudioSource?((uint64_t)v15, v20);
  OUTLINED_FUNCTION_4_6((uint64_t)v8);
  if (v21)
  {
    outlined destroy of SubmitCommandError?((uint64_t)v15, &demangling cache variable for type metadata for AudioSource?);
    outlined destroy of SubmitCommandError?((uint64_t)v17, &demangling cache variable for type metadata for AudioSource?);
    OUTLINED_FUNCTION_4_6(v20);
    if (v21)
    {
      outlined destroy of SubmitCommandError?((uint64_t)v8, &demangling cache variable for type metadata for AudioSource?);
      goto LABEL_14;
    }
LABEL_12:
    outlined destroy of SubmitCommandError?((uint64_t)v8, &demangling cache variable for type metadata for (AudioSource?, AudioSource?));
LABEL_20:
    char v36 = 0;
    return v36 & 1;
  }
  outlined init with copy of AudioSource?((uint64_t)v8, (uint64_t)v12);
  OUTLINED_FUNCTION_4_6(v20);
  if (v21)
  {
    outlined destroy of SubmitCommandError?((uint64_t)v15, &demangling cache variable for type metadata for AudioSource?);
    outlined destroy of SubmitCommandError?((uint64_t)v17, &demangling cache variable for type metadata for AudioSource?);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v12, v3);
    goto LABEL_12;
  }
  uint64_t v22 = v40;
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 32))(v5, v20, v3);
  lazy protocol witness table accessor for type AudioSource and conformance AudioSource();
  char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
  os_log_type_t v24 = *(void (**)(char *, uint64_t))(v22 + 8);
  v24(v5, v3);
  outlined destroy of SubmitCommandError?((uint64_t)v15, &demangling cache variable for type metadata for AudioSource?);
  outlined destroy of SubmitCommandError?((uint64_t)v17, &demangling cache variable for type metadata for AudioSource?);
  v24(v12, v3);
  outlined destroy of SubmitCommandError?((uint64_t)v8, &demangling cache variable for type metadata for AudioSource?);
  if ((v23 & 1) == 0) {
    goto LABEL_20;
  }
LABEL_14:
  uint64_t v25 = (void *)v39;
  uint64_t v26 = *(void **)(v39 + 40);
  if (!v26) {
    goto LABEL_20;
  }
  char v27 = *(unsigned char *)(v39 + 48);
  id v28 = v26;
  if ([v28 callCapability] != (char *)&dword_0 + 1
    || (v27 & 1) == 0
    || (uint64_t v29 = App.appIdentifier.getter(), !v30))
  {

    goto LABEL_20;
  }
  uint64_t v31 = v29;
  uint64_t v32 = v30;
  uint64_t v33 = v25 + 17;
  uint64_t v34 = v25[20];
  uint64_t v35 = v25[21];
  __swift_project_boxed_opaque_existential_1(v33, v34);
  char v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 8))(v31, v32, v34, v35);

  swift_bridgeObjectRelease();
  return v36 & 1;
}

BOOL protocol witness for IncomingCallFlowOutputStrategy.shouldShowIntentHandledDialog(intentResponse:) in conformance AnswerCallOutputStrategy(void *a1, uint64_t a2)
{
  return AnswerCallOutputStrategy.shouldShowIntentHandledDialog(intentResponse:)(a1, a2);
}

unint64_t type metadata accessor for SAUIPlayNotificationSound()
{
  unint64_t result = lazy cache variable for type metadata for SAUIPlayNotificationSound;
  if (!lazy cache variable for type metadata for SAUIPlayNotificationSound)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SAUIPlayNotificationSound);
  }
  return result;
}

uint64_t outlined init with copy of AudioSource?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioSource?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type AudioSource and conformance AudioSource()
{
  unint64_t result = lazy protocol witness table cache variable for type AudioSource and conformance AudioSource;
  if (!lazy protocol witness table cache variable for type AudioSource and conformance AudioSource)
  {
    type metadata accessor for AudioSource();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioSource and conformance AudioSource);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnnounceCallInvocationType and conformance AnnounceCallInvocationType()
{
  unint64_t result = lazy protocol witness table cache variable for type AnnounceCallInvocationType and conformance AnnounceCallInvocationType;
  if (!lazy protocol witness table cache variable for type AnnounceCallInvocationType and conformance AnnounceCallInvocationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnounceCallInvocationType and conformance AnnounceCallInvocationType);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AnnounceCallsContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  id v4 = v3;
  return a1;
}

uint64_t assignWithCopy for AnnounceCallsContext(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  char v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t assignWithTake for AnnounceCallsContext(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnnounceCallsContext(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 9))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnnounceCallsContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 9) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for AnnounceCallsContext()
{
}

unsigned char *storeEnumTagSinglePayload for AnnounceCallInvocationType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0xB881CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for AnnounceCallInvocationType()
{
}

uint64_t destroy for AnswerCallOutputStrategy(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);

  __swift_destroy_boxed_opaque_existential_1(a1 + 56);
  __swift_destroy_boxed_opaque_existential_1(a1 + 96);

  return __swift_destroy_boxed_opaque_existential_1(a1 + 136);
}

uint64_t initializeWithCopy for AnswerCallOutputStrategy(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  long long v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 80) = v6;
  uint64_t v7 = v6;
  Swift::String v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  id v9 = v5;
  v8(a1 + 56, a2 + 56, v7);
  long long v10 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 120) = v10;
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 96, a2 + 96);
  long long v11 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 160) = v11;
  (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 136, a2 + 136);
  return a1;
}

uint64_t assignWithCopy for AnswerCallOutputStrategy(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  long long v4 = *(void **)(a2 + 40);
  uint64_t v5 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v4;
  id v6 = v4;

  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 56), (uint64_t *)(a2 + 56));
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 96), (uint64_t *)(a2 + 96));
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 136), (uint64_t *)(a2 + 136));
  return a1;
}

uint64_t assignWithTake for AnswerCallOutputStrategy(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  id v6 = *(void **)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;

  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  __swift_destroy_boxed_opaque_existential_1(a1 + 56);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  __swift_destroy_boxed_opaque_existential_1(a1 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v7;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  __swift_destroy_boxed_opaque_existential_1(a1 + 136);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnswerCallOutputStrategy(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 176))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnswerCallOutputStrategy(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 176) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 176) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for AnswerCallOutputStrategy()
{
}

uint64_t PhoneCallStrategy.deviceState.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SharedGlobalsProviding(v1 + 16, a1);
}

uint64_t CallingIntentContinueInAppStrategy.startCallCATsSimple.getter()
{
  return swift_retain();
}

uint64_t PhoneCallStrategy.catPatternFamily.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SharedGlobalsProviding(v1 + 64, a1);
}

uint64_t PhoneCallStrategy.responseGenerator.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SharedGlobalsProviding(v1 + 104, a1);
}

uint64_t PhoneCallStrategy.appInfoBuilder.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SharedGlobalsProviding(v1 + 144, a1);
}

uint64_t PhoneCallStrategy.ttsEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + 184);
}

uint64_t PhoneCallStrategy.__allocating_init(catFamily:catPatternFamily:responseGenerator:appInfoBuilder:deviceState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject();
  PhoneCallStrategy.init(catFamily:catPatternFamily:responseGenerator:appInfoBuilder:deviceState:)(a1, a2, a3, a4, a5);
  return v10;
}

uint64_t PhoneCallStrategy.init(catFamily:catPatternFamily:responseGenerator:appInfoBuilder:deviceState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  *(void *)(v5 + 56) = a1;
  outlined init with copy of SharedGlobalsProviding(a2, v5 + 64);
  outlined init with copy of SharedGlobalsProviding(a3, v5 + 104);
  outlined init with copy of SharedGlobalsProviding(a4, v5 + 144);
  uint64_t v11 = v5 + 16;
  outlined init with copy of SharedGlobalsProviding(a5, v11);
  __swift_project_boxed_opaque_existential_1((void *)v11, *(void *)(v6 + 40));
  swift_retain();
  LOBYTE(v11) = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a5);
  __swift_destroy_boxed_opaque_existential_1(a4);
  __swift_destroy_boxed_opaque_existential_1(a3);
  __swift_destroy_boxed_opaque_existential_1(a2);
  *(unsigned char *)(v6 + 184) = v11 & 1;
  return v6;
}

uint64_t PhoneCallStrategy.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  __swift_destroy_boxed_opaque_existential_1(v0 + 104);
  __swift_destroy_boxed_opaque_existential_1(v0 + 144);
  return v0;
}

uint64_t PhoneCallStrategy.__deallocating_deinit()
{
  PhoneCallStrategy.deinit();

  return swift_deallocClassInstance();
}

uint64_t type metadata completion function for PhoneCallStrategy()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for PhoneCallStrategy()
{
  return swift_getGenericMetadata();
}

uint64_t specialized PhoneCallStrategy.init(catFamily:catPatternFamily:responseGenerator:appInfoBuilder:deviceState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  v23[3] = a8;
  v23[4] = a11;
  __swift_allocate_boxed_opaque_existential_1(v23);
  OUTLINED_FUNCTION_10();
  (*(void (**)(void))(v15 + 32))();
  v22[3] = a7;
  v22[4] = a10;
  __swift_allocate_boxed_opaque_existential_1(v22);
  OUTLINED_FUNCTION_10();
  (*(void (**)(void))(v16 + 32))();
  v21[3] = a9;
  v21[4] = a12;
  __swift_allocate_boxed_opaque_existential_1(v21);
  OUTLINED_FUNCTION_10();
  (*(void (**)(void))(v17 + 32))();
  *(void *)(a6 + 56) = a1;
  outlined init with copy of SharedGlobalsProviding((uint64_t)v23, a6 + 64);
  outlined init with copy of SharedGlobalsProviding((uint64_t)v22, a6 + 104);
  outlined init with copy of SharedGlobalsProviding((uint64_t)v21, a6 + 144);
  outlined init with copy of SharedGlobalsProviding(a5, a6 + 16);
  __swift_project_boxed_opaque_existential_1((void *)(a6 + 16), *(void *)(a6 + 40));
  swift_retain();
  char v18 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  *(unsigned char *)(a6 + 184) = v18 & 1;
  return a6;
}

uint64_t OUTLINED_FUNCTION_0_19(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return specialized PhoneCallStrategy.init(catFamily:catPatternFamily:responseGenerator:appInfoBuilder:deviceState:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

PhoneCallFlowDelegatePlugin::SuggestionsCATsSimple::Properties_optional __swiftcall SuggestionsCATsSimple.Properties.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SuggestionsCATsSimple.Properties.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return (PhoneCallFlowDelegatePlugin::SuggestionsCATsSimple::Properties_optional)3;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::SuggestionsCATsSimple::Properties_optional)v3;
  }
}

void SuggestionsCATsSimple.Properties.rawValue.getter(char a1)
{
  if (!a1) {
    OUTLINED_FUNCTION_24_10();
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SuggestionsCATsSimple.Properties(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SuggestionsCATsSimple.Properties()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SuggestionsCATsSimple.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SuggestionsCATsSimple.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::SuggestionsCATsSimple::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SuggestionsCATsSimple.Properties@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::SuggestionsCATsSimple::Properties_optional *a2@<X8>)
{
  result.value = SuggestionsCATsSimple.Properties.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SuggestionsCATsSimple.Properties(void *a1@<X8>)
{
  SuggestionsCATsSimple.Properties.rawValue.getter(*v1);
  *a1 = v3;
  a1[1] = v4;
}

uint64_t SuggestionsCATsSimple.phoneCall_StartCall(name:hasReference:thirdPartyAppName:)()
{
  OUTLINED_FUNCTION_1_0();
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v0;
  *(unsigned char *)(v1 + 72) = v3;
  *(void *)(v1 + 16) = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v5);
  *(void *)(v1 + 40) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v6, v7, v8);
}

{
  void *v0;
  uint64_t v1;
  __n128 *v2;
  __n128 *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void (*v7)(void);
  unint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  void *v11;
  uint64_t (*v13)(unint64_t, unint64_t, __n128 *);
  uint64_t v14;

  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = v0[5];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = (__n128 *)swift_allocObject();
  v0[6] = v2;
  char v3 = OUTLINED_FUNCTION_3_27(v2, (__n128)xmmword_46A250);
  OUTLINED_FUNCTION_18_7((uint64_t)v3, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_38_3(v5);
  if (v6)
  {
    outlined destroy of SubmitCommandError?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_42_1();
  }
  else
  {
    OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_9_3();
    OUTLINED_FUNCTION_17();
    v7();
  }
  uint64_t v8 = v0[3];
  OUTLINED_FUNCTION_2_26();
  v2[6].n128_u8[0] = v9;
  v2[7].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v2[8].n128_u64[0] = 0xD000000000000011;
  uint64_t v10 = OUTLINED_FUNCTION_28_5((uint64_t)"thirdPartyAppName");
  if (v8)
  {
    uint64_t v10 = type metadata accessor for SirikitApp();
  }
  else
  {
    v2[9].n128_u64[1] = 0;
    v2[10].n128_u64[0] = 0;
  }
  v2[9].n128_u64[0] = v8;
  v2[10].n128_u64[1] = v10;
  OUTLINED_FUNCTION_19_2();
  uint64_t v11 = (void *)swift_task_alloc();
  v0[7] = v11;
  *uint64_t v11 = v0;
  v11[1] = UnsupportedFlowCATs.searchCallHistory(supportsAppLaunch:nonDefaultAppName:isVoicemail:device:);
  return v13(0xD00000000000001FLL, 0x800000000048C650, v2);
}

BOOL SuggestionsCATsSimple.PhoneCall_StartCallDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of SuggestionsCATsSimple.PhoneCall_StartCallDialogIds.init(rawValue:);
  return SuggestionsCATsSimple.PhoneCall_StartCallDialogIds.init(rawValue:)(a1, v1);
}

unint64_t SuggestionsCATsSimple.PhoneCall_StartCallDialogIds.rawValue.getter()
{
  return OUTLINED_FUNCTION_7_1();
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance SuggestionsCATsSimple.PhoneCall_StartCallDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = SuggestionsCATsSimple.PhoneCall_StartCallDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t SuggestionsCATsSimple.phoneCall_StartCallAsLabels(name:hasReference:thirdPartyAppName:)()
{
  OUTLINED_FUNCTION_1_0();
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v0;
  *(unsigned char *)(v1 + 72) = v3;
  *(void *)(v1 + 16) = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v5);
  *(void *)(v1 + 40) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v6, v7, v8);
}

{
  void *v0;
  uint64_t v1;
  __n128 *v2;
  __n128 *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void (*v7)(void);
  unint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t (*v14)(void);
  uint64_t v15;

  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = v0[5];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = (__n128 *)swift_allocObject();
  v0[6] = v2;
  char v3 = OUTLINED_FUNCTION_3_27(v2, (__n128)xmmword_46A250);
  OUTLINED_FUNCTION_18_7((uint64_t)v3, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_38_3(v5);
  if (v6)
  {
    outlined destroy of SubmitCommandError?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_42_1();
  }
  else
  {
    OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_9_3();
    OUTLINED_FUNCTION_17();
    v7();
  }
  uint64_t v8 = v0[3];
  OUTLINED_FUNCTION_2_26();
  v2[6].n128_u8[0] = v9;
  v2[7].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v2[8].n128_u64[0] = 0xD000000000000011;
  uint64_t v10 = OUTLINED_FUNCTION_28_5((uint64_t)"thirdPartyAppName");
  if (v8)
  {
    uint64_t v10 = type metadata accessor for SirikitApp();
  }
  else
  {
    v2[9].n128_u64[1] = 0;
    v2[10].n128_u64[0] = 0;
  }
  v2[9].n128_u64[0] = v8;
  v2[10].n128_u64[1] = v10;
  OUTLINED_FUNCTION_19_2();
  uint64_t v11 = (void *)swift_task_alloc();
  v0[7] = v11;
  lazy protocol witness table accessor for type SuggestionsCATsSimple.PhoneCall_StartCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartCallDialogIds();
  OUTLINED_FUNCTION_25_1();
  *uint64_t v11 = v12;
  v11[1] = SuggestionsCATsSimple.phoneCall_StartCallAsLabels(name:hasReference:thirdPartyAppName:);
  OUTLINED_FUNCTION_24_10();
  return v14();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_0_1();
  char v3 = v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_32_1();
    return v11(v10);
  }
}

unint64_t lazy protocol witness table accessor for type SuggestionsCATsSimple.PhoneCall_StartCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartCallDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.PhoneCall_StartCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartCallDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.PhoneCall_StartCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartCallDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.PhoneCall_StartCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartCallDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.PhoneCall_StartCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartCallDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.PhoneCall_StartCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartCallDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.PhoneCall_StartCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartCallDialogIds);
  }
  return result;
}

uint64_t SuggestionsCATsSimple.phoneCall_StartFTCall(name:hasReference:)()
{
  OUTLINED_FUNCTION_1_0();
  *(unsigned char *)(v1 + 64) = v2;
  *(void *)(v1 + 16) = v3;
  *(void *)(v1 + 24) = v0;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v4);
  *(void *)(v1 + 32) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v5, v6, v7);
}

{
  void *v0;
  uint64_t v1;
  __n128 *v2;
  __n128 *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void (*v7)(void);
  unsigned __int8 v8;
  void *v9;
  uint64_t (*v11)(unint64_t);
  uint64_t v12;

  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = v0[4];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  char v2 = (__n128 *)swift_allocObject();
  v0[5] = v2;
  uint64_t v3 = OUTLINED_FUNCTION_3_27(v2, (__n128)xmmword_467720);
  OUTLINED_FUNCTION_18_7((uint64_t)v3, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_1_4(v5);
  if (v6)
  {
    outlined destroy of SubmitCommandError?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_42_1();
  }
  else
  {
    OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_9_3();
    OUTLINED_FUNCTION_17();
    v7();
  }
  OUTLINED_FUNCTION_2_26();
  v2[7].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v2[6].n128_u8[0] = v8;
  uint64_t v9 = (void *)OUTLINED_FUNCTION_9_0();
  v0[6] = v9;
  *uint64_t v9 = v0;
  v9[1] = UnsupportedFlowCATs.unsupportedEmergencyContactCall(thirdPartyAppName:isFaceTime:);
  OUTLINED_FUNCTION_24_10();
  return v11(0xD000000000000021);
}

BOOL SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds.init(rawValue:);
  return SuggestionsCATsSimple.PhoneCall_StartCallDialogIds.init(rawValue:)(a1, v1);
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds@<X0>(void *a1@<X8>)
{
  unint64_t result = SuggestionsCATsSimple.PhoneCall_StartCallDialogIds.rawValue.getter();
  *a1 = 0xD000000000000010;
  a1[1] = v3;
  return result;
}

uint64_t SuggestionsCATsSimple.phoneCall_StartFTCallAsLabels(name:hasReference:)()
{
  OUTLINED_FUNCTION_1_0();
  *(unsigned char *)(v1 + 64) = v2;
  *(void *)(v1 + 16) = v3;
  *(void *)(v1 + 24) = v0;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v4);
  *(void *)(v1 + 32) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v5, v6, v7);
}

{
  void *v0;
  uint64_t v1;
  __n128 *v2;
  __n128 *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void (*v7)(void);
  unsigned __int8 v8;
  void *v9;
  uint64_t v10;
  uint64_t (*v12)(unint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = v0[4];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  char v2 = (__n128 *)swift_allocObject();
  v0[5] = v2;
  uint64_t v3 = OUTLINED_FUNCTION_3_27(v2, (__n128)xmmword_467720);
  OUTLINED_FUNCTION_18_7((uint64_t)v3, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_1_4(v5);
  if (v6)
  {
    outlined destroy of SubmitCommandError?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_42_1();
  }
  else
  {
    OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_9_3();
    OUTLINED_FUNCTION_17();
    v7();
  }
  OUTLINED_FUNCTION_2_26();
  v2[7].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v2[6].n128_u8[0] = v8;
  uint64_t v9 = (void *)OUTLINED_FUNCTION_9_0();
  v0[6] = v9;
  lazy protocol witness table accessor for type SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds();
  OUTLINED_FUNCTION_25_1();
  *uint64_t v9 = v10;
  v9[1] = SuggestionsCATsSimple.phoneCall_StartFTCallAsLabels(name:hasReference:);
  OUTLINED_FUNCTION_24_10();
  return v12(0xD000000000000021);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_32_1();
    return v11(v10);
  }
}

unint64_t lazy protocol witness table accessor for type SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds);
  }
  return result;
}

uint64_t SuggestionsCATsSimple.phoneCall_StartGFTCall()()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_9_0();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  OUTLINED_FUNCTION_24_10();
  return v3(0xD000000000000022);
}

BOOL SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds.init(rawValue:);
  return SuggestionsCATsSimple.PhoneCall_StartCallDialogIds.init(rawValue:)(a1, v1);
}

BOOL SuggestionsCATsSimple.PhoneCall_StartCallDialogIds.init(rawValue:)(Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease();
  return v5 != 0;
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t SuggestionsCATsSimple.phoneCall_StartGFTCallAsLabels()()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v4 = (uint64_t (*)(unint64_t))((char *)&async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:)
                                                + async function pointer to dispatch thunk of CATWrapperSimple.executeAsLabels<A>(catId:parameters:));
  Swift::OpaquePointer v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  lazy protocol witness table accessor for type SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds();
  OUTLINED_FUNCTION_25_1();
  *Swift::OpaquePointer v1 = v2;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  OUTLINED_FUNCTION_24_10();
  return v4(0xD000000000000022);
}

unint64_t lazy protocol witness table accessor for type SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds and conformance SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds);
  }
  return result;
}

uint64_t SuggestionsCATsSimple.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return SuggestionsCATsSimple.init(templateDir:options:globals:)(a1, a2);
}

uint64_t SuggestionsCATsSimple.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_8_18();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  uint64_t v11 = OUTLINED_FUNCTION_11_0(v10);
  __chkstk_darwin(v11);
  outlined init with copy of Result<TemplatingResult, Error>(a1, (uint64_t)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a2, v2);
  uint64_t v13 = CATWrapperSimple.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a2, v2);
  outlined destroy of SubmitCommandError?(a1, (uint64_t *)&demangling cache variable for type metadata for URL?);
  return v13;
}

uint64_t SuggestionsCATsSimple.__allocating_init(useResponseMode:options:)()
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_8_18();
  __chkstk_darwin(v0);
  OUTLINED_FUNCTION_52();
  uint64_t v1 = swift_allocObject();
  uint64_t v2 = OUTLINED_FUNCTION_28_0();
  v3(v2);
  CATWrapperSimple.init(useResponseMode:options:)();
  uint64_t v4 = OUTLINED_FUNCTION_30_1();
  v5(v4);
  return v1;
}

uint64_t SuggestionsCATsSimple.init(useResponseMode:options:)()
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_8_18();
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_52();
  uint64_t v2 = OUTLINED_FUNCTION_28_0();
  v3(v2);
  CATWrapperSimple.init(useResponseMode:options:)();
  uint64_t v4 = OUTLINED_FUNCTION_30_1();
  v5(v4);
  return v0;
}

unint64_t lazy protocol witness table accessor for type SuggestionsCATsSimple.Properties and conformance SuggestionsCATsSimple.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type SuggestionsCATsSimple.Properties and conformance SuggestionsCATsSimple.Properties;
  if (!lazy protocol witness table cache variable for type SuggestionsCATsSimple.Properties and conformance SuggestionsCATsSimple.Properties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuggestionsCATsSimple.Properties and conformance SuggestionsCATsSimple.Properties);
  }
  return result;
}

uint64_t type metadata accessor for SuggestionsCATsSimple()
{
  uint64_t result = type metadata singleton initialization cache for SuggestionsCATsSimple;
  if (!type metadata singleton initialization cache for SuggestionsCATsSimple) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for SuggestionsCATsSimple()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for SuggestionsCATsSimple()
{
  return type metadata accessor for SuggestionsCATsSimple();
}

unsigned char *storeEnumTagSinglePayload for SuggestionsCATsSimple.Properties(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0xBA528);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for SuggestionsCATsSimple.Properties()
{
}

void type metadata accessor for SuggestionsCATsSimple.PhoneCall_StartCallDialogIds()
{
}

void type metadata accessor for SuggestionsCATsSimple.PhoneCall_StartFTCallDialogIds()
{
}

unsigned char *storeEnumTagSinglePayload for SuggestionsCATsSimple.PhoneCall_StartCallDialogIds(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0xBA614);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for SuggestionsCATsSimple.PhoneCall_StartGFTCallDialogIds()
{
}

void OUTLINED_FUNCTION_2_26()
{
  strcpy((char *)(v0 + 80), "hasReference");
  *(unsigned char *)(v0 + 93) = 0;
  *(_WORD *)(v0 + 94) = -5120;
}

__n128 *OUTLINED_FUNCTION_3_27(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 1701667182;
  result[2].n128_u64[1] = 0xE400000000000000;
  return result;
}

uint64_t OUTLINED_FUNCTION_28_5@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 136) = (a1 - 32) | 0x8000000000000000;
  return 0;
}

uint64_t (*default argument 2 of DictionaryBackedCache.init(timeToLiveInSeconds:capacity:nowDateProvider:)())()
{
  return closure #1 in default argument 2 of DictionaryBackedCache.init(timeToLiveInSeconds:capacity:nowDateProvider:);
}

uint64_t DictionaryBackedCache.__allocating_init(timeToLiveInSeconds:capacity:nowDateProvider:)()
{
  OUTLINED_FUNCTION_8_22();
  uint64_t v0 = swift_allocObject();
  DictionaryBackedCache.init(timeToLiveInSeconds:capacity:nowDateProvider:)();
  return v0;
}

void *DictionaryBackedCache.init(timeToLiveInSeconds:capacity:nowDateProvider:)()
{
  OUTLINED_FUNCTION_8_22();
  type metadata accessor for Optional();
  type metadata accessor for Date();
  swift_getTupleTypeMetadata2();
  v1[2] = Dictionary.init(minimumCapacity:)();
  v1[3] = v4;
  v1[4] = v3;
  v1[5] = v2;
  v1[6] = v0;
  return v1;
}

uint64_t DictionaryBackedCache.count.getter()
{
  OUTLINED_FUNCTION_37_4();
  type metadata accessor for Optional();
  type metadata accessor for Date();
  swift_bridgeObjectRetain();
  swift_getTupleTypeMetadata2();
  uint64_t v0 = Dictionary.count.getter();
  swift_bridgeObjectRelease();
  return v0;
}

unint64_t lazy protocol witness table accessor for type Date and conformance Date()
{
  unint64_t result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    type metadata accessor for Date();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    type metadata accessor for Date();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }
  return result;
}

void DictionaryBackedCache.put(key:value:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v2 = v0;
  uint64_t v22 = v3;
  uint64_t v20 = v4;
  uint64_t v5 = *v0;
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v21 = v6;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  type metadata accessor for Optional();
  OUTLINED_FUNCTION_9_1();
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_5_19();
  uint64_t v10 = *(void *)(v5 + 80);
  OUTLINED_FUNCTION_1();
  uint64_t v12 = v11;
  OUTLINED_FUNCTION_9_1();
  uint64_t v14 = __chkstk_darwin(v13);
  v19[0] = (char *)v19 - v15;
  uint64_t v23 = v7;
  v19[1] = *(void *)(v7 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  ((void (*)(uint64_t))v2[5])(v16);
  OUTLINED_FUNCTION_37_4();
  swift_bridgeObjectRetain();
  uint64_t v17 = Dictionary.count.getter();
  swift_bridgeObjectRelease();
  if (v17 == v2[4]) {
    DictionaryBackedCache.evict(at:)();
  }
  (*(void (**)(void, uint64_t, uint64_t))(v12 + 16))(v19[0], v20, v10);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v1, v22);
  Date.addingTimeInterval(_:)();
  __swift_storeEnumTagSinglePayload(v1, 0, 1, TupleTypeMetadata2);
  swift_beginAccess();
  type metadata accessor for Dictionary();
  Dictionary.subscript.setter();
  swift_endAccess();
  OUTLINED_FUNCTION_11();
  v18();
  OUTLINED_FUNCTION_26_1();
}

uint64_t DictionaryBackedCache.remove(key:)(uint64_t a1)
{
  OUTLINED_FUNCTION_13_4();
  type metadata accessor for Optional();
  type metadata accessor for Date();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  type metadata accessor for Optional();
  OUTLINED_FUNCTION_9_1();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_5_19();
  OUTLINED_FUNCTION_13_4();
  uint64_t v6 = *(void *)(v5 + 80);
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_9_1();
  __chkstk_darwin(v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v11 - v8, a1, v6);
  __swift_storeEnumTagSinglePayload(v1, 1, 1, TupleTypeMetadata2);
  swift_beginAccess();
  OUTLINED_FUNCTION_13_4();
  type metadata accessor for Dictionary();
  Dictionary.subscript.setter();
  return swift_endAccess();
}

void DictionaryBackedCache.evict(at:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v28 = *v0;
  uint64_t v2 = *(void *)(v28 + 80);
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v25 = type metadata accessor for Date();
  swift_getTupleTypeMetadata2();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  type metadata accessor for Optional();
  OUTLINED_FUNCTION_1();
  v23[2] = v5;
  OUTLINED_FUNCTION_9_1();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_5_19();
  type metadata accessor for Optional();
  OUTLINED_FUNCTION_1();
  uint64_t v26 = v8;
  uint64_t v27 = v7;
  OUTLINED_FUNCTION_9_1();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v23 - v10;
  OUTLINED_FUNCTION_1();
  uint64_t v24 = v12;
  OUTLINED_FUNCTION_9_1();
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v23 - v14;
  DictionaryBackedCache.evictStaleEntries(at:)();
  if ((v16 & 1) == 0)
  {
    v23[1] = v3;
    OUTLINED_FUNCTION_37_4();
    uint64_t v29 = v0[2];
    type metadata accessor for Dictionary();
    swift_getWitnessTable();
    Collection.randomElement()();
    if (__swift_getEnumTagSinglePayload(v1, 1, TupleTypeMetadata2) == 1)
    {
      OUTLINED_FUNCTION_11();
      v17();
      __swift_storeEnumTagSinglePayload((uint64_t)v11, 1, 1, v2);
    }
    else
    {
      uint64_t v18 = v24;
      uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 32);
      v19(v11, v1, v2);
      __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v2);
      OUTLINED_FUNCTION_11();
      v20();
      OUTLINED_FUNCTION_11();
      v21();
      if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v2) != 1)
      {
        v19(v15, (uint64_t)v11, v2);
        (*(void (**)(char *))(*v0 + 192))(v15);
        (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v2);
        goto LABEL_7;
      }
    }
    OUTLINED_FUNCTION_11();
    v22();
  }
LABEL_7:
  OUTLINED_FUNCTION_26_1();
}

void DictionaryBackedCache.evictStaleEntries(at:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v2 = v1;
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_13_4();
  uint64_t v5 = *(void *)(v4 + 80);
  OUTLINED_FUNCTION_13_4();
  uint64_t v7 = *(void *)(v6 + 88);
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = type metadata accessor for Date();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v52 = swift_getTupleTypeMetadata2();
  OUTLINED_FUNCTION_1();
  uint64_t v12 = v11;
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v51 = (char *)v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v50 = (char *)v41 - v16;
  OUTLINED_FUNCTION_37_4();
  uint64_t v60 = v5;
  uint64_t v61 = v7;
  uint64_t v49 = v0;
  uint64_t v62 = *(void *)(v3 + 96);
  uint64_t v17 = v62;
  uint64_t v63 = v2;
  swift_bridgeObjectRetain();
  v41[1] = v17;
  uint64_t v18 = Dictionary.filter(_:)();
  uint64_t v19 = *(void *)(v18 + 64);
  uint64_t v42 = v18 + 64;
  uint64_t v20 = 1 << *(unsigned char *)(v18 + 32);
  uint64_t v21 = -1;
  if (v20 < 64) {
    uint64_t v21 = ~(-1 << v20);
  }
  unint64_t v22 = v21 & v19;
  int64_t v43 = (unint64_t)(v20 + 63) >> 6;
  uint64_t v57 = v5;
  uint64_t v48 = v5 - 8;
  uint64_t v56 = TupleTypeMetadata2;
  uint64_t v47 = TupleTypeMetadata2 - 8;
  uint64_t v54 = v8;
  uint64_t v46 = v8 - 8;
  uint64_t v53 = v9;
  uint64_t v45 = v9 - 8;
  uint64_t v44 = v12 + 8;
  uint64_t v55 = v18;
  swift_bridgeObjectRetain();
  int64_t v23 = 0;
  uint64_t v25 = v56;
  uint64_t v24 = v57;
  uint64_t v26 = v50;
  uint64_t v27 = v51;
  uint64_t v28 = v52;
  if (!v22) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v58 = (v22 - 1) & v22;
  int64_t v59 = v23;
  for (unint64_t i = __clz(__rbit64(v22)) | (v23 << 6); ; unint64_t i = __clz(__rbit64(v31)) + (v32 << 6))
  {
    uint64_t v34 = v55;
    uint64_t v35 = *(void *)(v24 - 8);
    (*(void (**)(char *, unint64_t, uint64_t))(v35 + 16))(v26, *(void *)(v55 + 48) + *(void *)(v35 + 72) * i, v24);
    char v36 = &v26[*(int *)(v28 + 48)];
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v36, *(void *)(v34 + 56) + *(void *)(*(void *)(v25 - 8) + 72) * i, v25);
    unint64_t v37 = &v36[*(int *)(v25 + 48)];
    uint64_t v38 = &v27[*(int *)(v28 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v27, v26, v24);
    uint64_t v39 = &v38[*(int *)(v25 + 48)];
    (*(void (**)(char *, char *))(*(void *)(v54 - 8) + 32))(v38, v36);
    (*(void (**)(char *, char *))(*(void *)(v53 - 8) + 32))(v39, v37);
    (*(void (**)(char *))(*v49 + 192))(v27);
    OUTLINED_FUNCTION_11();
    v40();
    unint64_t v22 = v58;
    int64_t v23 = v59;
    if (v58) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v30 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if (v30 >= v43) {
      goto LABEL_19;
    }
    unint64_t v31 = *(void *)(v42 + 8 * v30);
    int64_t v32 = v23 + 1;
    if (!v31)
    {
      int64_t v32 = v23 + 2;
      if (v23 + 2 >= v43) {
        goto LABEL_19;
      }
      unint64_t v31 = *(void *)(v42 + 8 * v32);
      if (!v31) {
        break;
      }
    }
LABEL_16:
    uint64_t v58 = (v31 - 1) & v31;
    int64_t v59 = v32;
  }
  uint64_t v33 = v23 + 3;
  if (v23 + 3 >= v43)
  {
LABEL_19:
    swift_release();
    Dictionary.isEmpty.getter();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_26_1();
    return;
  }
  unint64_t v31 = *(void *)(v42 + 8 * v33);
  if (v31)
  {
    int64_t v32 = v23 + 3;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v32 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      break;
    }
    if (v32 >= v43) {
      goto LABEL_19;
    }
    unint64_t v31 = *(void *)(v42 + 8 * v32);
    ++v33;
    if (v31) {
      goto LABEL_16;
    }
  }
LABEL_21:
  __break(1u);
}

BOOL closure #1 in DictionaryBackedCache.evictStaleEntries(at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v18[1] = a3;
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = type metadata accessor for Date();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v10 = swift_getTupleTypeMetadata2();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v18 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))((char *)v18 - v12, a1, a4);
  uint64_t v14 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v15 = &v13[*(int *)(v10 + 48) + v14];
  uint64_t v16 = a2 + v14;
  (*(void (**)(void))(*(void *)(v7 - 8) + 16))();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v15, v16, v8);
  lazy protocol witness table accessor for type Date and conformance Date();
  LOBYTE(a2) = dispatch thunk of static Comparable.< infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return (a2 & 1) == 0;
}

uint64_t DictionaryBackedCache.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t DictionaryBackedCache.__deallocating_deinit()
{
  DictionaryBackedCache.deinit();

  return swift_deallocClassInstance();
}

uint64_t type metadata completion function for DictionaryBackedCache()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for DictionaryBackedCache()
{
  return __swift_instantiateGenericMetadata();
}

BOOL partial apply for closure #1 in DictionaryBackedCache.evictStaleEntries(at:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in DictionaryBackedCache.evictStaleEntries(at:)(a1, a2, *(void *)(v2 + 40), *(void *)(v2 + 16));
}

uint64_t _ss6ResultO3mapyAByqd__q_Gqd__xXERi_d__lF11SiriKitFlow010TemplatingA0V_s5Error_pSaySo9SAAceViewCGTg5(void (*a1)(uint64_t *__return_ptr, char *))
{
  uint64_t v3 = type metadata accessor for TemplatingResult();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Result<TemplatingResult, Error>(v1, (uint64_t)v9);
  if (swift_getEnumCaseMultiPayload() == 1) {
    return *(void *)v9;
  }
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
  a1(&v13, v6);
  uint64_t v10 = v13;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v10;
}

id static StartCallViewBuilders.makeCallCancelSlotConfirmationButtonsBuilder(intent:templatingService:sharedGlobals:app:intentResolutionResult:isDirectInvocation:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.siriPhone);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl(&dword_0, v12, v13, "#StartCallViewBuilders Providing CallCancelSlotConfirmationButtonsBuilder", v14, 2u);
    swift_slowDealloc();
  }

  uint64_t v16 = a3[3];
  uint64_t v15 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v16);
  uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  id v18 = a1;
  swift_retain();
  v17(v16, v15);
  outlined init with copy of SignalProviding((uint64_t)a3, a7 + 80);
  *(void *)a7 = v18;
  *(void *)(a7 + 8) = a2;
  *(void *)(a7 + 56) = a4;
  *(void *)(a7 + 64) = a5;
  *(unsigned char *)(a7 + 72) = a6 & 1;
  swift_retain();

  return a5;
}

uint64_t CallCancelSlotConfirmationButtonsBuilder.makeViewsForWatch(utteranceViews:_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void **)(v1 + 8);
  outlined init with copy of CallCancelSlotConfirmationButtonsBuilder(v2, (uint64_t)v16);
  uint64_t v5 = (void *)swift_allocObject();
  OUTLINED_FUNCTION_0_20(v5, v6, v7, v8, v9, v10, v11, v12, v15, v16[0]);
  v5[19] = a1;
  os_log_type_t v13 = *(void (**)(uint64_t (*)(uint64_t), void *))(class metadata base offset for PhoneCallBaseCatTemplatingService
                                                                         + *v4
                                                                         + 144);
  swift_retain();
  swift_bridgeObjectRetain();
  v13(partial apply for closure #1 in CallCancelSlotConfirmationButtonsBuilder.makeViewsForWatch(utteranceViews:_:), v5);
  return swift_release();
}

uint64_t closure #1 in CallCancelSlotConfirmationButtonsBuilder.makeViewsForWatch(utteranceViews:_:)(uint64_t a1, void (*a2)(uint64_t, uint64_t))
{
  outlined init with take of Result<(call: String, cancel: String), Error>(a1, (uint64_t)v10);
  uint64_t v4 = v10[0];
  uint64_t v5 = v10[1];
  uint64_t v7 = v10[2];
  uint64_t v6 = v10[3];
  outlined init with take of Result<(call: String, cancel: String), Error>(a1, (uint64_t)v11);
  uint64_t v8 = v12;
  if (v12)
  {
    outlined retain of Result<(call: String, cancel: String), Error>(a1);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v4 = closure #1 in closure #1 in CallCancelSlotConfirmationButtonsBuilder.makeViewsForWatch(utteranceViews:_:)(v4, v5, v7, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  a2(v4, v8);
  return outlined consume of Result<[SAAceView], Error>(v4, v8);
}

uint64_t closure #1 in closure #1 in CallCancelSlotConfirmationButtonsBuilder.makeViewsForWatch(utteranceViews:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7 = [objc_allocWithZone((Class)SASTItemGroup) init];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_469DA0;
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for SASTButtonItem);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_46A030;
  swift_bridgeObjectRetain();
  *(void *)(v9 + 32) = CallCancelSlotConfirmationButtonsBuilder.getConfirmButtonCommand()();
  specialized Array._endMutation()();
  *(void *)(v8 + 32) = SASTButtonItem.init(label:commands:centered:)(a1, a2, v9, 1);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_46A030;
  swift_bridgeObjectRetain();
  *(void *)(v10 + 32) = CallCancelSlotConfirmationButtonsBuilder.getDenyButtonCommand()();
  specialized Array._endMutation()();
  *(void *)(v8 + 40) = SASTButtonItem.init(label:commands:centered:)(a3, a4, v10, 1);
  specialized Array._endMutation()();
  outlined bridged method (mbnn) of @objc SASTItemGroup.templateItems.setter(v8, (uint64_t)v7);
  type metadata accessor for SiriKitAceViewBuilder();
  dispatch thunk of static SiriKitAceViewBuilder.makeBuilder(deviceState:)();
  dispatch thunk of SiriKitAceViewBuilder.withUtteranceViews(utteranceViews:)();
  swift_release();
  dispatch thunk of SiriKitAceViewBuilder.addButtonGroup(buttonGroup:)();
  swift_release();
  uint64_t v11 = dispatch thunk of SiriKitAceViewBuilder.build()();

  swift_release();
  return v11;
}

uint64_t CallCancelSlotConfirmationButtonsBuilder.getConfirmButtonCommand()()
{
  uint64_t v1 = type metadata accessor for CommonDirectAction();
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v0 + 72) == 1)
  {
    swift_storeEnumTagMultiPayload();
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for SKIDirectInvocationPayload);
    CommonDirectAction.identifier.getter();
    id v4 = SKIDirectInvocationPayload.__allocating_init(identifier:)();
    uint64_t v5 = CommonDirectAction.userData.getter();
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v5);
    uint64_t v7 = v6;
    swift_bridgeObjectRelease();
    outlined bridged method (mbnn) of @objc SKIDirectInvocationPayload.userData.setter(v7, v4);
    id v8 = SKIDirectInvocationPayload.toStartLocalRequest(deviceState:)((void *)(v0 + 16));

    outlined destroy of CommonDirectAction((uint64_t)v3);
    return (uint64_t)v8;
  }
  else
  {
    if (one-time initialization token for confirmUtterance != -1) {
      swift_once();
    }
    return static CasinoFactory.makeSendCommandsFromMachineUtterance(machineUtterance:)();
  }
}

uint64_t CallCancelSlotConfirmationButtonsBuilder.getDenyButtonCommand()()
{
  uint64_t v1 = type metadata accessor for CommonDirectAction();
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v0 + 72) == 1)
  {
    swift_storeEnumTagMultiPayload();
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for SKIDirectInvocationPayload);
    CommonDirectAction.identifier.getter();
    id v4 = SKIDirectInvocationPayload.__allocating_init(identifier:)();
    uint64_t v5 = CommonDirectAction.userData.getter();
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v5);
    uint64_t v7 = v6;
    swift_bridgeObjectRelease();
    outlined bridged method (mbnn) of @objc SKIDirectInvocationPayload.userData.setter(v7, v4);
    id v8 = SKIDirectInvocationPayload.toStartLocalRequest(deviceState:)((void *)(v0 + 16));

    outlined destroy of CommonDirectAction((uint64_t)v3);
    return (uint64_t)v8;
  }
  else
  {
    if (one-time initialization token for cancelUtterance != -1) {
      swift_once();
    }
    return static CasinoFactory.makeSendCommandsFromMachineUtterance(machineUtterance:)();
  }
}

uint64_t FaceTimeSettingsBuilder.makeViewsForMac(utteranceViews:_:)(uint64_t a1, uint64_t (*a2)(void *, void))
{
  return a2(&_swiftEmptyArrayStorage, 0);
}

uint64_t CallCancelSlotConfirmationButtonsBuilder.makeViewsForCar(utteranceViews:_:)(uint64_t a1)
{
  OUTLINED_FUNCTION_1_25(a1);
  uint64_t v2 = (void *)swift_allocObject();
  OUTLINED_FUNCTION_0_20(v2, v3, v4, v5, v6, v7, v8, v9, v12, v13);
  uint64_t v10 = *(void (**)(uint64_t (*)(uint64_t), void *))(class metadata base offset for PhoneCallBaseCatTemplatingService
                                                                         + *v1
                                                                         + 128);
  swift_retain();
  v10(partial apply for closure #1 in CallCancelSlotConfirmationButtonsBuilder.makeViewsForCar(utteranceViews:_:), v2);
  return swift_release();
}

uint64_t closure #1 in CallCancelSlotConfirmationButtonsBuilder.makeViewsForCar(utteranceViews:_:)(uint64_t a1, void (*a2)(uint64_t, void))
{
  uint64_t v3 = _ss6ResultO3mapyAByqd__q_Gqd__xXERi_d__lF11SiriKitFlow010TemplatingA0V_s5Error_pSaySo9SAAceViewCGTg5((void (*)(uint64_t *__return_ptr, char *))partial apply for closure #1 in closure #1 in CallCancelSlotConfirmationButtonsBuilder.makeViewsForCar(utteranceViews:_:));
  char v5 = v4 & 1;
  a2(v3, v4 & 1);
  return outlined consume of Result<[SAAceView], Error>(v3, v5);
}

void closure #1 in closure #1 in CallCancelSlotConfirmationButtonsBuilder.makeViewsForCar(utteranceViews:_:)(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  __chkstk_darwin(v4 - 8);
  int v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Locale();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)TemplatingResult.print.getter();
  if (v11[2])
  {
    uint64_t v27 = a2;
    uint64_t v12 = v11[4];
    uint64_t v13 = v11[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    id v14 = CallCancelSlotConfirmationButtonsBuilder.makeConfirmOption(label:)(v12, v13, (uint64_t)&SAUIConfirmationOptionConfirmationOptionTypeCONFIRMValue, (uint64_t)&SAUIConfirmationOptionIconTypeNewCallValue, (uint64_t (*)(uint64_t))CallCancelSlotConfirmationButtonsBuilder.getConfirmButtonCommand());
    swift_bridgeObjectRelease();
    id v15 = [*(id *)(a1 + 64) itemToConfirm];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INPerson);
    if (swift_dynamicCast()) {
      uint64_t v16 = (void *)v28[5];
    }
    else {
      uint64_t v16 = 0;
    }
    type metadata accessor for PhonePerson(0);
    static Device.current.getter();
    __swift_project_boxed_opaque_existential_1(v28, v28[3]);
    dispatch thunk of DeviceState.siriLocale.getter();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    uint64_t v17 = static PhonePerson.make(phonePerson:options:locale:)(v16, 0, (uint64_t)v10);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    if (v17)
    {
      swift_retain();
      dispatch thunk of DialogPerson.fullName.getter();
      swift_release();
      uint64_t v18 = type metadata accessor for SpeakableString();
      if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v18) != 1)
      {
        uint64_t v19 = SpeakableString.print.getter();
        uint64_t v20 = v21;
        (*(void (**)(char *, uint64_t))(*(void *)(v18 - 8) + 8))(v6, v18);
        goto LABEL_10;
      }
      outlined destroy of SpeakableString?((uint64_t)v6);
    }
    uint64_t v19 = 0;
    uint64_t v20 = 0;
LABEL_10:
    type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for SAPhoneCallConfirmationSnippet);
    id v22 = v14;
    id v23 = SAPhoneCallConfirmationSnippet.init(confirmOption:confirmationDisplayText:)(v22, v19, v20);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_46A030;
    *(void *)(v24 + 32) = v23;
    v28[0] = v24;
    specialized Array._endMutation()();
    uint64_t v25 = v28[0];
    swift_release();

    *uint64_t v27 = v25;
    return;
  }
  __break(1u);
}

uint64_t CallCancelSlotConfirmationButtonsBuilder.makeViewsForIOS(utteranceViews:_:)(uint64_t a1)
{
  OUTLINED_FUNCTION_1_25(a1);
  uint64_t v2 = (void *)swift_allocObject();
  OUTLINED_FUNCTION_0_20(v2, v3, v4, v5, v6, v7, v8, v9, v12, v13);
  uint64_t v10 = *(void (**)(uint64_t (*)(uint64_t), void *))(class metadata base offset for PhoneCallBaseCatTemplatingService
                                                                         + *v1
                                                                         + 144);
  swift_retain();
  v10(partial apply for closure #1 in CallCancelSlotConfirmationButtonsBuilder.makeViewsForIOS(utteranceViews:_:), v2);
  return swift_release();
}

uint64_t closure #1 in CallCancelSlotConfirmationButtonsBuilder.makeViewsForIOS(utteranceViews:_:)(uint64_t a1, void (*a2)(void *, uint64_t))
{
  outlined init with take of Result<(call: String, cancel: String), Error>(a1, (uint64_t)v10);
  int v4 = (void *)v10[0];
  uint64_t v5 = v10[1];
  uint64_t v7 = v10[2];
  uint64_t v6 = v10[3];
  outlined init with take of Result<(call: String, cancel: String), Error>(a1, (uint64_t)v11);
  uint64_t v8 = v12;
  if (v12)
  {
    outlined retain of Result<(call: String, cancel: String), Error>(a1);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int v4 = closure #1 in closure #1 in CallCancelSlotConfirmationButtonsBuilder.makeViewsForIOS(utteranceViews:_:)((uint64_t)v4, v5, v7, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  a2(v4, v8);
  return outlined consume of Result<[SAAceView], Error>((uint64_t)v4, v8);
}

void *closure #1 in closure #1 in CallCancelSlotConfirmationButtonsBuilder.makeViewsForIOS(utteranceViews:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6 = CallCancelSlotConfirmationButtonsBuilder.makeConfirmOption(label:)(a1, a2, (uint64_t)&SAUIConfirmationOptionConfirmationOptionTypeCONFIRMValue, (uint64_t)&SAUIConfirmationOptionIconTypeNewCallValue, (uint64_t (*)(uint64_t))CallCancelSlotConfirmationButtonsBuilder.getConfirmButtonCommand());
  id v7 = CallCancelSlotConfirmationButtonsBuilder.makeConfirmOption(label:)(a3, a4, (uint64_t)&SAUIConfirmationOptionConfirmationOptionTypeDENYValue, (uint64_t)&SAUIConfirmationOptionIconTypeCancelValue, (uint64_t (*)(uint64_t))CallCancelSlotConfirmationButtonsBuilder.getDenyButtonCommand());
  uint64_t v8 = CallCancelSlotConfirmationButtonsBuilder.makeCompactConfirmationView(denyOption:confirmOption:)(v7, v6);
  if (v8)
  {
    int v9 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_46A030;
    *(void *)(v10 + 32) = v9;
    uint64_t v17 = v10;
    specialized Array._endMutation()();
    uint64_t v11 = v17;
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.siriPhone);
    char v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      id v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v15 = 0;
      _os_log_impl(&dword_0, v13, v14, "#CallCancelSlotConfirmationButtonsBuilder Failed to build compact confirmation view", v15, 2u);
      swift_slowDealloc();
    }

    return _swiftEmptyArrayStorage;
  }
  return (void *)v11;
}

id CallCancelSlotConfirmationButtonsBuilder.makeConfirmOption(label:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for SAUIConfirmationOption);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_46A030;
  uint64_t v15 = swift_bridgeObjectRetain();
  *(void *)(v14 + 32) = a5(v15);
  specialized Array._endMutation()();
  return SAUIConfirmationOption.init(label:type:iconType:commands:)(a1, a2, v8, v10, v11, v13, v14);
}

void *CallCancelSlotConfirmationButtonsBuilder.makeCompactConfirmationView(denyOption:confirmOption:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v45 = type metadata accessor for Image();
  uint64_t v6 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v8 = (uint64_t *)((char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.siriPhone);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl(&dword_0, v10, v11, "#CallCancelSlotConfirmationButtonsBuilder Making compact call confirmation view snippet.", v12, 2u);
    swift_slowDealloc();
  }

  id v13 = [*(id *)(v2 + 64) itemToConfirm];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INPerson);
  if (!swift_dynamicCast()) {
    return 0;
  }
  id v41 = a2;
  id v42 = a1;
  int64_t v43 = v8;
  uint64_t v44 = v6;
  uint64_t v14 = v46;
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 138412290;
    uint64_t v47 = (uint64_t)v14;
    uint64_t v19 = v14;
    uint64_t v20 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v21 = v19;
    *uint64_t v18 = v19;

    _os_log_impl(&dword_0, v15, v16, "#CallCancelSlotConfirmationButtonsBuilder Person to confirm: %@", v17, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v21 = v14;
    uint64_t v15 = v14;
  }

  id v23 = (void *)(v3 + 16);
  __swift_project_boxed_opaque_existential_1((void *)(v3 + 16), *(void *)(v3 + 40));
  DeviceState.isStandaloneIOS.getter();
  char v25 = v24;
  __swift_project_boxed_opaque_existential_1((void *)(v3 + 16), *(void *)(v3 + 40));
  char v26 = DeviceState.isAuthenticatedForPhone.getter();
  uint64_t v27 = v43;
  INPerson.buildDisplayImage(supportsCompactView:isDeviceLocked:)(v25 & 1, (v26 & 1) == 0, v43);
  uint64_t v28 = (void *)static PhoneCasinoFactory.makeConfirmationCardSection(person:image:sharedGlobals:)(v21, (uint64_t)v27, (void *)(v3 + 80));
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for SACardSnippet);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_46A030;
  *(void *)(v29 + 32) = v28;
  uint64_t v47 = v29;
  specialized Array._endMutation()();
  uint64_t v30 = v47;
  unint64_t v31 = *(void **)v3;
  uint64_t v32 = *(void *)(v3 + 56);
  id v33 = v28;
  uint64_t v34 = static UserFacingCallingAppUtils.getCommAppForLaunch(originalApp:preferredCallProvider:deviceState:)(v32, (uint64_t)[v31 preferredCallProvider], v23);
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for SAUISash);
  id v35 = SAUISash.init(app:)(v34);
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for SAUIConfirmationOptions);
  id v36 = v41;
  id v37 = v42;
  id v38 = v42;
  id v39 = SAUIConfirmationOptions.init(denyOption:confirmOption:)(v37, v36);
  id v22 = static SACardSnippet.makeFromCardSectionsWithConfirmationOptions(cardSections:intent:sash:confirmationOptions:)(v30, (uint64_t)v31, (uint64_t)v35, (uint64_t)v39);

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t *, uint64_t))(v44 + 8))(v27, v45);
  return v22;
}

uint64_t protocol witness for IdiomSensitiveViewBuilder.sharedGlobals.getter in conformance CallCancelSlotConfirmationButtonsBuilder@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + 80, a1);
}

_UNKNOWN **sub_BD144()
{
  return &protocol witness table for CallCancelSlotConfirmationButtonsBuilder;
}

uint64_t destroy for CallCancelSlotConfirmationButtonsBuilder(id *a1)
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 2));
  swift_release();

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 10));
}

uint64_t initializeWithCopy for CallCancelSlotConfirmationButtonsBuilder(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = a1 + 16;
  uint64_t v7 = a2 + 16;
  long long v8 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v8;
  uint64_t v9 = v8;
  uint64_t v10 = **(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8);
  id v11 = v4;
  swift_retain();
  v10(v6, v7, v9);
  uint64_t v12 = *(void **)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v12;
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v13 = a2 + 80;
  long long v14 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 104) = v14;
  uint64_t v15 = v14;
  os_log_type_t v16 = **(void (***)(uint64_t, uint64_t, uint64_t))(v14 - 8);
  swift_retain();
  id v17 = v12;
  v16(a1 + 80, v13, v15);
  return a1;
}

uint64_t assignWithCopy for CallCancelSlotConfirmationButtonsBuilder(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  uint64_t v7 = *(void **)(a2 + 64);
  long long v8 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v7;
  id v9 = v7;

  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 80), (uint64_t *)(a2 + 80));
  return a1;
}

void *__swift_memcpy120_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x78uLL);
}

uint64_t assignWithTake for CallCancelSlotConfirmationButtonsBuilder(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  swift_release();
  uint64_t v7 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);

  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  long long v8 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v8;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for CallCancelSlotConfirmationButtonsBuilder(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 120))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CallCancelSlotConfirmationButtonsBuilder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 120) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 120) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CallCancelSlotConfirmationButtonsBuilder()
{
  return &type metadata for CallCancelSlotConfirmationButtonsBuilder;
}

uint64_t outlined init with copy of CallCancelSlotConfirmationButtonsBuilder(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t partial apply for closure #1 in CallCancelSlotConfirmationButtonsBuilder.makeViewsForIOS(utteranceViews:_:)(uint64_t a1)
{
  return closure #1 in CallCancelSlotConfirmationButtonsBuilder.makeViewsForIOS(utteranceViews:_:)(a1, *(void (**)(void *, uint64_t))(v1 + 16));
}

uint64_t outlined init with take of Result<(call: String, cancel: String), Error>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<(call: String, cancel: String), Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined retain of Result<(call: String, cancel: String), Error>(uint64_t a1)
{
  return a1;
}

uint64_t outlined copy of Result<(call: String, cancel: String), Error>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5)
  {
    return swift_errorRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
}

uint64_t outlined consume of Result<[SAAceView], Error>(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRelease();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t outlined destroy of CommonDirectAction(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CommonDirectAction();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t objectdestroyTm_1()
{
  swift_release();

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 48);
  swift_release();

  __swift_destroy_boxed_opaque_existential_1(v0 + 112);

  return _swift_deallocObject(v0, 152, 7);
}

uint64_t partial apply for closure #1 in CallCancelSlotConfirmationButtonsBuilder.makeViewsForCar(utteranceViews:_:)(uint64_t a1)
{
  return closure #1 in CallCancelSlotConfirmationButtonsBuilder.makeViewsForCar(utteranceViews:_:)(a1, *(void (**)(uint64_t, void))(v1 + 16));
}

void partial apply for closure #1 in closure #1 in CallCancelSlotConfirmationButtonsBuilder.makeViewsForCar(utteranceViews:_:)(void *a1@<X8>)
{
  closure #1 in closure #1 in CallCancelSlotConfirmationButtonsBuilder.makeViewsForCar(utteranceViews:_:)(*(void *)(v1 + 16), a1);
}

uint64_t sub_BD6D0()
{
  swift_release();

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 48);
  swift_release();

  __swift_destroy_boxed_opaque_existential_1(v0 + 112);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 160, 7);
}

uint64_t partial apply for closure #1 in CallCancelSlotConfirmationButtonsBuilder.makeViewsForWatch(utteranceViews:_:)(uint64_t a1)
{
  return closure #1 in CallCancelSlotConfirmationButtonsBuilder.makeViewsForWatch(utteranceViews:_:)(a1, *(void (**)(uint64_t, uint64_t))(v1 + 16));
}

void *OUTLINED_FUNCTION_0_20(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char __src)
{
  a1[2] = v11;
  a1[3] = v10;
  uint64_t v13 = a1 + 4;
  return memcpy(v13, &__src, 0x78uLL);
}

uint64_t OUTLINED_FUNCTION_1_25(uint64_t a1, ...)
{
  va_start(va, a1);
  return outlined init with copy of CallCancelSlotConfirmationButtonsBuilder(v1, (uint64_t)va);
}

uint64_t YesNoConfirmationModel.yesAction.getter()
{
  return CodableAceObject.wrappedValue.getter();
}

uint64_t type metadata accessor for YesNoConfirmationModel()
{
  uint64_t result = type metadata singleton initialization cache for YesNoConfirmationModel;
  if (!type metadata singleton initialization cache for YesNoConfirmationModel) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t key path setter for YesNoConfirmationModel.yesAction : YesNoConfirmationModel(id *a1)
{
  id v1 = *a1;
  return YesNoConfirmationModel.yesAction.setter();
}

uint64_t YesNoConfirmationModel.yesAction.setter()
{
  return CodableAceObject.wrappedValue.setter();
}

uint64_t (*YesNoConfirmationModel.yesAction.modify())()
{
  id v1 = OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_4_25((uint64_t)v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  *(void *)(v0 + 32) = CodableAceObject.wrappedValue.modify();
  return SearchCallHistoryBinaryButtonModel.primaryText.modify;
}

uint64_t YesNoConfirmationModel.noText.getter()
{
  type metadata accessor for YesNoConfirmationModel();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  Loggable.wrappedValue.getter();
  return v1;
}

uint64_t key path setter for YesNoConfirmationModel.noText : YesNoConfirmationModel()
{
  return YesNoConfirmationModel.noText.setter();
}

uint64_t YesNoConfirmationModel.noText.setter()
{
  return Loggable.wrappedValue.setter();
}

uint64_t (*YesNoConfirmationModel.noText.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_4_25((uint64_t)v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  *(void *)(v0 + 32) = Loggable.wrappedValue.modify();
  return SearchCallHistoryBinaryButtonModel.primaryText.modify;
}

uint64_t YesNoConfirmationModel.noAction.getter()
{
  return CodableAceObject.wrappedValue.getter();
}

uint64_t key path setter for YesNoConfirmationModel.noAction : YesNoConfirmationModel(id *a1)
{
  id v1 = *a1;
  return YesNoConfirmationModel.noAction.setter();
}

uint64_t YesNoConfirmationModel.noAction.setter()
{
  return CodableAceObject.wrappedValue.setter();
}

uint64_t (*YesNoConfirmationModel.noAction.modify())()
{
  id v1 = OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_4_25((uint64_t)v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  *(void *)(v0 + 32) = CodableAceObject.wrappedValue.modify();
  return SearchCallHistoryBinaryButtonModel.primaryText.modify;
}

uint64_t YesNoConfirmationModel.responseViewId.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for YesNoConfirmationModel() + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t YesNoConfirmationModel.responseViewId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for YesNoConfirmationModel() + 32));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

Swift::Void (__swiftcall *YesNoConfirmationModel.responseViewId.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

void YesNoConfirmationModel.init(yesText:yesAction:noText:noAction:)(void *a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3 = (void *)(a2 + *(int *)(type metadata accessor for YesNoConfirmationModel() + 32));
  *uint64_t v3 = 0xD000000000000011;
  v3[1] = 0x8000000000491230;
  Loggable.init(wrappedValue:)();
  type metadata accessor for SAIntentGroupRunSiriKitExecutor();
  id v4 = a1;
  CodableAceObject.init(wrappedValue:)();
  Loggable.init(wrappedValue:)();
  CodableAceObject.init(wrappedValue:)();
}

uint64_t YesNoConfirmationModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x74786554736579 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6F69746341736579 && a2 == 0xE90000000000006ELL;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x747865546F6ELL && a2 == 0xE600000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x6E6F697463416F6ELL && a2 == 0xE800000000000000;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else if (a1 == 0x65736E6F70736572 && a2 == 0xEE00644977656956)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else
        {
          char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v10) {
            return 4;
          }
          else {
            return 5;
          }
        }
      }
    }
  }
}

uint64_t YesNoConfirmationModel.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0x74786554736579;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6F69746341736579;
      break;
    case 2:
      uint64_t result = 0x747865546F6ELL;
      break;
    case 3:
      uint64_t result = 0x6E6F697463416F6ELL;
      break;
    case 4:
      uint64_t result = 0x65736E6F70736572;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance YesNoConfirmationModel.CodingKeys()
{
  return YesNoConfirmationModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance YesNoConfirmationModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = YesNoConfirmationModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance YesNoConfirmationModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type YesNoConfirmationModel.CodingKeys and conformance YesNoConfirmationModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance YesNoConfirmationModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type YesNoConfirmationModel.CodingKeys and conformance YesNoConfirmationModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t YesNoConfirmationModel.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<YesNoConfirmationModel.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_4();
  uint64_t v9 = v8 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type YesNoConfirmationModel.CodingKeys and conformance YesNoConfirmationModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  lazy protocol witness table accessor for type Loggable<String> and conformance <A> Loggable<A>(&lazy protocol witness table cache variable for type Loggable<String> and conformance <A> Loggable<A>);
  OUTLINED_FUNCTION_5_0();
  if (!v1)
  {
    type metadata accessor for YesNoConfirmationModel();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
    lazy protocol witness table accessor for type CodableAceObject<SAIntentGroupRunSiriKitExecutor> and conformance CodableAceObject<A>(&lazy protocol witness table cache variable for type CodableAceObject<SAIntentGroupRunSiriKitExecutor> and conformance CodableAceObject<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    OUTLINED_FUNCTION_5_0();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
}

unint64_t lazy protocol witness table accessor for type YesNoConfirmationModel.CodingKeys and conformance YesNoConfirmationModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type YesNoConfirmationModel.CodingKeys and conformance YesNoConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type YesNoConfirmationModel.CodingKeys and conformance YesNoConfirmationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type YesNoConfirmationModel.CodingKeys and conformance YesNoConfirmationModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type YesNoConfirmationModel.CodingKeys and conformance YesNoConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type YesNoConfirmationModel.CodingKeys and conformance YesNoConfirmationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type YesNoConfirmationModel.CodingKeys and conformance YesNoConfirmationModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type YesNoConfirmationModel.CodingKeys and conformance YesNoConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type YesNoConfirmationModel.CodingKeys and conformance YesNoConfirmationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type YesNoConfirmationModel.CodingKeys and conformance YesNoConfirmationModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type YesNoConfirmationModel.CodingKeys and conformance YesNoConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type YesNoConfirmationModel.CodingKeys and conformance YesNoConfirmationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type YesNoConfirmationModel.CodingKeys and conformance YesNoConfirmationModel.CodingKeys);
  }
  return result;
}

uint64_t YesNoConfirmationModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v56 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v58 = v4;
  uint64_t v59 = v3;
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v57 = (char *)v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v61 = (char *)v49 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v60 = v9;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v62 = (char *)v49 - v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<YesNoConfirmationModel.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v63 = v16;
  uint64_t v64 = v15;
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_4();
  uint64_t v19 = v18 - v17;
  uint64_t v20 = type metadata accessor for YesNoConfirmationModel();
  __chkstk_darwin(v20);
  OUTLINED_FUNCTION_4();
  uint64_t v23 = v22 - v21;
  char v25 = (uint64_t *)(v22 - v21 + *(int *)(v24 + 32));
  *char v25 = 0xD000000000000011;
  v25[1] = 0x8000000000491230;
  uint64_t v66 = v25;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type YesNoConfirmationModel.CodingKeys and conformance YesNoConfirmationModel.CodingKeys();
  uint64_t v65 = v19;
  uint64_t v26 = (uint64_t)v67;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v26)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v27 = v61;
    uint64_t v54 = v13;
    uint64_t v55 = v20;
    uint64_t v67 = a1;
    uint64_t v28 = v23;
    char v72 = 0;
    uint64_t v29 = lazy protocol witness table accessor for type Loggable<String> and conformance <A> Loggable<A>(&lazy protocol witness table cache variable for type Loggable<String> and conformance <A> Loggable<A>);
    uint64_t v30 = v62;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v51 = v29;
    unint64_t v31 = *(void (**)(uint64_t, char *, uint64_t))(v60 + 32);
    uint64_t v53 = v28;
    v31(v28, v30, v8);
    char v71 = 1;
    uint64_t v32 = v27;
    uint64_t v33 = lazy protocol witness table accessor for type CodableAceObject<SAIntentGroupRunSiriKitExecutor> and conformance CodableAceObject<A>(&lazy protocol witness table cache variable for type CodableAceObject<SAIntentGroupRunSiriKitExecutor> and conformance CodableAceObject<A>);
    uint64_t v34 = v59;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v52 = v8;
    v49[1] = v33;
    uint64_t v50 = v31;
    uint64_t v35 = v55;
    id v36 = v32;
    id v37 = *(void (**)(uint64_t, char *, uint64_t))(v58 + 32);
    v37(v53 + *(int *)(v55 + 20), v36, v34);
    char v70 = 2;
    id v38 = v54;
    uint64_t v62 = 0;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v50(v53 + *(int *)(v35 + 24), v38, v8);
    char v69 = 3;
    id v39 = v57;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v40 = v53;
    v37(v53 + *(int *)(v35 + 28), v39, v34);
    char v68 = 4;
    uint64_t v41 = KeyedDecodingContainer.decode(_:forKey:)();
    id v42 = v66;
    uint64_t v43 = v41;
    uint64_t v45 = v44;
    uint64_t v46 = OUTLINED_FUNCTION_2_5();
    v47(v46);
    swift_bridgeObjectRelease();
    *id v42 = v43;
    v42[1] = v45;
    outlined init with copy of YesNoConfirmationModel(v40, v56);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
    return outlined destroy of YesNoConfirmationModel(v40);
  }
}

uint64_t outlined init with copy of YesNoConfirmationModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for YesNoConfirmationModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of YesNoConfirmationModel(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for YesNoConfirmationModel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t instantiation function for generic protocol witness table for YesNoConfirmationModel(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type YesNoConfirmationModel and conformance YesNoConfirmationModel(&lazy protocol witness table cache variable for type YesNoConfirmationModel and conformance YesNoConfirmationModel);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for Decodable in YesNoConfirmationModel()
{
  return lazy protocol witness table accessor for type YesNoConfirmationModel and conformance YesNoConfirmationModel(&lazy protocol witness table cache variable for type YesNoConfirmationModel and conformance YesNoConfirmationModel);
}

uint64_t base witness table accessor for Encodable in YesNoConfirmationModel()
{
  return lazy protocol witness table accessor for type YesNoConfirmationModel and conformance YesNoConfirmationModel(&lazy protocol witness table cache variable for type YesNoConfirmationModel and conformance YesNoConfirmationModel);
}

uint64_t lazy protocol witness table accessor for type YesNoConfirmationModel and conformance YesNoConfirmationModel(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for YesNoConfirmationModel();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance YesNoConfirmationModel@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return YesNoConfirmationModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance YesNoConfirmationModel(void *a1)
{
  return YesNoConfirmationModel.encode(to:)(a1);
}

uint64_t sub_BEAF8()
{
  OUTLINED_FUNCTION_7_6();
  uint64_t result = EmergencyCountdownModel.sashTitle.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_BEB24()
{
  OUTLINED_FUNCTION_7_6();
  uint64_t result = YesNoConfirmationModel.yesAction.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_BEB50()
{
  OUTLINED_FUNCTION_7_6();
  uint64_t result = YesNoConfirmationModel.noText.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_BEB7C()
{
  OUTLINED_FUNCTION_7_6();
  uint64_t result = YesNoConfirmationModel.noAction.getter();
  *uint64_t v0 = result;
  return result;
}

char *initializeBufferWithCopyOfBuffer for YesNoConfirmationModel(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v19(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    v12(v9, v10, v11);
    v19(&a1[a3[6]], &a2[a3[6]], v7);
    v12(&a1[a3[7]], &a2[a3[7]], v11);
    uint64_t v13 = a3[8];
    uint64_t v14 = &a1[v13];
    uint64_t v15 = &a2[v13];
    uint64_t v16 = *((void *)v15 + 1);
    *(void *)uint64_t v14 = *(void *)v15;
    *((void *)v14 + 1) = v16;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for YesNoConfirmationModel(uint64_t a1, int *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  uint64_t v6 = a1 + a2[5];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  v5(a1 + a2[6], v4);
  v8(a1 + a2[7], v7);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for YesNoConfirmationModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v17(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  v11(v8, v9, v10);
  v17(a1 + a3[6], a2 + a3[6], v6);
  v11(a1 + a3[7], a2 + a3[7], v10);
  uint64_t v12 = a3[8];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for YesNoConfirmationModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v16(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24);
  v11(v8, v9, v10);
  v16(a1 + a3[6], a2 + a3[6], v6);
  v11(a1 + a3[7], a2 + a3[7], v10);
  uint64_t v12 = a3[8];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  *uint64_t v13 = *v14;
  v13[1] = v14[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for YesNoConfirmationModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v13(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v13(a1 + a3[6], a2 + a3[6], v6);
  v11(a1 + a3[7], a2 + a3[7], v10);
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  return a1;
}

uint64_t assignWithTake for YesNoConfirmationModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v18(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40);
  v11(v8, v9, v10);
  v18(a1 + a3[6], a2 + a3[6], v6);
  v11(a1 + a3[7], a2 + a3[7], v10);
  uint64_t v12 = a3[8];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for YesNoConfirmationModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_BF370);
}

uint64_t sub_BF370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  OUTLINED_FUNCTION_1_6();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
LABEL_5:
    return __swift_getEnumTagSinglePayload(v9, a2, v8);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  OUTLINED_FUNCTION_1_6();
  if (*(_DWORD *)(v11 + 84) == a2)
  {
    uint64_t v8 = v10;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    goto LABEL_5;
  }
  unint64_t v13 = *(void *)(a1 + *(int *)(a3 + 32) + 8);
  if (v13 >= 0xFFFFFFFF) {
    LODWORD(v13) = -1;
  }
  return (v13 + 1);
}

uint64_t storeEnumTagSinglePayload for YesNoConfirmationModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_BF444);
}

void sub_BF444(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  OUTLINED_FUNCTION_1_6();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
    OUTLINED_FUNCTION_1_6();
    if (*(_DWORD *)(v13 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 32) + 8) = (a2 - 1);
      return;
    }
    uint64_t v10 = v12;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
  }

  __swift_storeEnumTagSinglePayload(v11, a2, a2, v10);
}

void type metadata completion function for YesNoConfirmationModel()
{
  type metadata accessor for Loggable<String>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CodableAceObject<SAIntentGroupRunSiriKitExecutor>();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

unsigned char *storeEnumTagSinglePayload for YesNoConfirmationModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0xBF6A0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

void *type metadata accessor for YesNoConfirmationModel.CodingKeys()
{
  return &unk_553530;
}

uint64_t OUTLINED_FUNCTION_4_25(uint64_t a1)
{
  *unint64_t v1 = a1;
  return type metadata accessor for YesNoConfirmationModel();
}

uint64_t one-time initialization function for instance()
{
  type metadata accessor for CallStateNotificationManager();
  uint64_t result = CallStateNotificationManager.__allocating_init()();
  static CallStateNotificationManager.instance = result;
  return result;
}

{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for ThirdPartyAnnotatedAppStore();
  unint64_t v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DictionaryBackedCache<String, AnnotatedApp>);
  swift_allocObject();
  uint64_t result = specialized DictionaryBackedCache.init(timeToLiveInSeconds:capacity:nowDateProvider:)(5, (uint64_t)closure #1 in default argument 2 of DictionaryBackedCache.init(timeToLiveInSeconds:capacity:nowDateProvider:), 0, 1.0);
  *(void *)(v0 + 16) = result;
  static ThirdPartyAnnotatedAppStore.instance = v0;
  return result;
}

{
  uint64_t result;

  type metadata accessor for EligibleAppFinder();
  swift_allocObject();
  uint64_t result = EligibleAppFinder.().init()();
  static EligibleAppFinder.instance = result;
  return result;
}

{
  uint64_t result;

  type metadata accessor for AppResolutionProvider();
  swift_allocObject();
  uint64_t result = AppResolutionProvider.().init()();
  static AppResolutionProvider.instance = result;
  return result;
}

{
  return CallStateProvider.init()(static CallStateProvider.instance);
}

uint64_t CallStateNotificationManager.__allocating_init()()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  int v3 = (char *)v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  static DispatchQoS.unspecified.getter();
  v9[1] = _swiftEmptyArrayStorage;
  _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  uint64_t v6 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  id v7 = [objc_allocWithZone((Class)TUCallCenter) initWithQueue:v6];
  return (*(uint64_t (**)(uint64_t, id))(v9[0] + 160))(v6, v7);
}

uint64_t *CallStateNotificationManager.instance.unsafeMutableAddressor()
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  return &static CallStateNotificationManager.instance;
}

uint64_t static CallStateNotificationManager.instance.getter()
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t one-time initialization function for defaultLoggingTaskTimeout()
{
  uint64_t v0 = type metadata accessor for DispatchTimeInterval();
  __swift_allocate_value_buffer(v0, static CallStateNotificationManager.defaultLoggingTaskTimeout);
  *(void *)__swift_project_value_buffer(v0, (uint64_t)static CallStateNotificationManager.defaultLoggingTaskTimeout) = 1;
  OUTLINED_FUNCTION_10();
  uint64_t v2 = *(uint64_t (**)(void))(v1 + 104);

  return v2();
}

uint64_t CallStateNotificationManager.defaultLoggingTaskTimeout.unsafeMutableAddressor()
{
  if (one-time initialization token for defaultLoggingTaskTimeout != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for DispatchTimeInterval();

  return __swift_project_value_buffer(v0, (uint64_t)static CallStateNotificationManager.defaultLoggingTaskTimeout);
}

uint64_t static CallStateNotificationManager.defaultLoggingTaskTimeout.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultLoggingTaskTimeout != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  __swift_project_value_buffer(v2, (uint64_t)static CallStateNotificationManager.defaultLoggingTaskTimeout);
  OUTLINED_FUNCTION_10();
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v3 + 16);

  return v4(a1);
}

void key path setter for CallStateNotificationManager.tasks : CallStateNotificationManager()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  CallStateNotificationManager.tasks.setter(v0);
}

void CallStateNotificationManager.tasks.didset()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.siriPhone);
  swift_retain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 134217984;
    swift_beginAccess();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_0, v1, v2, "#CallStateNotificationManager task count %ld", v3, 0xCu);
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
}

uint64_t CallStateNotificationManager.tasks.getter()
{
  return swift_bridgeObjectRetain();
}

void CallStateNotificationManager.tasks.setter(uint64_t a1)
{
  OUTLINED_FUNCTION_6_16();
  *(void *)(v1 + 32) = a1;
  swift_bridgeObjectRelease();
  CallStateNotificationManager.tasks.didset();
}

uint64_t key path setter for CallStateNotificationManager.didRegisterNotificationObservers : CallStateNotificationManager(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 40) = v2;
  return result;
}

uint64_t CallStateNotificationManager.didRegisterNotificationObservers.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t CallStateNotificationManager.__allocating_init(queue:callCenter:)()
{
  OUTLINED_FUNCTION_6_5();
  uint64_t v2 = swift_allocObject();
  CallStateNotificationManager.init(queue:callCenter:)(v1, v0);
  return v2;
}

uint64_t CallStateNotificationManager.init(queue:callCenter:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  type metadata accessor for UUID();
  type metadata accessor for CallStateOneTimeTask();
  _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v6 = Dictionary.init(dictionaryLiteral:)();
  *(void *)(v3 + 24) = a2;
  *(void *)(v3 + 32) = v6;
  *(unsigned char *)(v3 + 40) = 0;
  *(void *)(v3 + 16) = a1;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  uint64_t v8 = OUTLINED_FUNCTION_18_1();
  *(void *)(v8 + 16) = partial apply for closure #1 in CallStateNotificationManager.init(queue:callCenter:);
  *(void *)(v8 + 24) = v7;
  v17[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
  v17[5] = v8;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256;
  v17[2] = thunk for @escaping @callee_guaranteed () -> ();
  v17[3] = &block_descriptor;
  uint64_t v9 = _Block_copy(v17);
  id v10 = a2;
  uint64_t v11 = a1;
  swift_retain();
  swift_release();
  dispatch_sync(v11, v9);
  _Block_release(v9);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (a1)
  {
    __break(1u);
  }
  else if (one-time initialization token for siriPhone == -1)
  {
    goto LABEL_3;
  }
  swift_once();
LABEL_3:
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.siriPhone);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl(&dword_0, v13, v14, "#CallStateNotificationManager initialized", v15, 2u);
    OUTLINED_FUNCTION_6();
  }

  swift_release();
  return v3;
}

uint64_t type metadata accessor for CallStateOneTimeTask()
{
  uint64_t result = type metadata singleton initialization cache for CallStateOneTimeTask;
  if (!type metadata singleton initialization cache for CallStateOneTimeTask) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_C0294()
{
  return _swift_deallocObject(v0, 24, 7);
}

id partial apply for closure #1 in CallStateNotificationManager.init(queue:callCenter:)()
{
  return [*(id *)(v0 + 16) registerWithCompletionHandler:0];
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

Swift::Void __swiftcall CallStateNotificationManager.callStateChanged(_:)(NSNotification a1)
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  uint64_t v10 = OUTLINED_FUNCTION_9_19();
  OUTLINED_FUNCTION_0_0();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_52();
  uint64_t v14 = OUTLINED_FUNCTION_18_1();
  *(void *)(v14 + 16) = v5;
  *(void *)(v14 + 24) = v1;
  v17[4] = partial apply for closure #1 in CallStateNotificationManager.callStateChanged(_:);
  v17[5] = v14;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256;
  v17[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v17[3] = &block_descriptor_9;
  uint64_t v15 = _Block_copy(v17);
  id v16 = v5;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  _s10Foundation4UUIDVACSHAAWlTm_0(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v2, v6);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v3, v10);
  swift_release();
  OUTLINED_FUNCTION_26_1();
}

void closure #1 in CallStateNotificationManager.callStateChanged(_:)(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ([a1 object])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v28, 0, sizeof(v28));
  }
  outlined init with take of Any?((uint64_t)v28, (uint64_t)v29);
  if (!v29[3])
  {
    outlined destroy of Any?((uint64_t)v29);
    goto LABEL_12;
  }
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for TUCall);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_12:
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v4, (uint64_t)static Logger.siriPhone);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl(&dword_0, v20, v21, "#CallStateNotificationManager received CallStatusChanged notification without a TUCall", v22, 2u);
      swift_slowDealloc();
    }
    goto LABEL_18;
  }
  uint64_t v8 = v27;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v9 = __swift_project_value_buffer(v4, (uint64_t)static Logger.siriPhone);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v9, v4);
  id v10 = v8;
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v11, v12))
  {

    uint64_t v19 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    goto LABEL_17;
  }
  uint64_t v26 = a2;
  uint64_t v13 = (uint8_t *)swift_slowAlloc();
  uint64_t v25 = swift_slowAlloc();
  v29[0] = v25;
  *(_DWORD *)uint64_t v13 = 136315138;
  [v10 callStatus];
  id v14 = (id)TUStringForCallStatus();
  if (v14)
  {
    uint64_t v15 = v14;
    v24[1] = v13 + 4;
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v18 = v17;

    *(void *)&v28[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v11, v12, "#CallStateNotificationManager received CallStatusChanged, status = %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v19 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    a2 = v26;
LABEL_17:
    uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(v19);
    uint64_t v20 = v10;
    specialized Sequence.forEach(_:)(v23, v20);
    swift_bridgeObjectRelease();
LABEL_18:

    return;
  }

  __break(1u);
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, void *a2)
{
  specialized _NativeDictionary.makeIterator()(v16, a1);
  uint64_t v3 = v16[0];
  uint64_t v4 = v16[1];
  int64_t v5 = v16[3];
  unint64_t v6 = v16[4];
  int64_t v7 = (unint64_t)(v16[2] + 64) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  if (!v6) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v10 = v9 | (v5 << 6);
  while (1)
  {
    uint64_t v15 = *(void *)(*(void *)(v3 + 56) + 8 * v10);
    swift_retain();
    (*(void (**)(id))(*(void *)v15 + 200))([a2 callStatus]);
    uint64_t result = swift_release();
    if (v6) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v11 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      break;
    }
    if (v11 >= v7) {
      goto LABEL_21;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v11);
    int64_t v13 = v5 + 1;
    if (!v12)
    {
      int64_t v13 = v5 + 2;
      if (v5 + 2 >= v7) {
        goto LABEL_21;
      }
      unint64_t v12 = *(void *)(v4 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v5 + 3;
        if (v5 + 3 >= v7) {
          goto LABEL_21;
        }
        unint64_t v12 = *(void *)(v4 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v5 + 4;
          if (v5 + 4 >= v7) {
            goto LABEL_21;
          }
          unint64_t v12 = *(void *)(v4 + 8 * v13);
          if (!v12)
          {
            int64_t v13 = v5 + 5;
            if (v5 + 5 >= v7) {
              goto LABEL_21;
            }
            unint64_t v12 = *(void *)(v4 + 8 * v13);
            if (!v12)
            {
              int64_t v14 = v5 + 6;
              while (v14 < v7)
              {
                unint64_t v12 = *(void *)(v4 + 8 * v14++);
                if (v12)
                {
                  int64_t v13 = v14 - 1;
                  goto LABEL_18;
                }
              }
LABEL_21:

              return swift_release();
            }
          }
        }
      }
    }
LABEL_18:
    unint64_t v6 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    int64_t v5 = v13;
  }
  __break(1u);
  return result;
}

void CallStateNotificationManager.addTask(timeout:task:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for DispatchTimeInterval();
  OUTLINED_FUNCTION_0_0();
  uint64_t v9 = v8;
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v12);
  int64_t v13 = *(NSObject **)(v0 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v6, v7);
  unint64_t v14 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v4;
  *(void *)(v15 + 24) = v2;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v15 + v14, (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  *(void *)(v15 + ((v11 + v14 + 7) & 0xFFFFFFFFFFFFFFF8)) = v0;
  uint64_t v16 = OUTLINED_FUNCTION_18_1();
  *(void *)(v16 + 16) = partial apply for closure #1 in CallStateNotificationManager.addTask(timeout:task:);
  *(void *)(v16 + 24) = v15;
  v18[4] = thunk for @callee_guaranteed () -> ()partial apply;
  v18[5] = v16;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 1107296256;
  void v18[2] = thunk for @escaping @callee_guaranteed () -> ();
  v18[3] = &block_descriptor_19;
  unint64_t v17 = _Block_copy(v18);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v13, v17);
  _Block_release(v17);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (v2) {
    __break(1u);
  }
  else {
    OUTLINED_FUNCTION_26_1();
  }
}

uint64_t closure #1 in CallStateNotificationManager.addTask(timeout:task:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for CallStateOneTimeTask();
  uint64_t v6 = swift_allocObject();
  swift_retain();
  CallStateOneTimeTask.init(task:)();
  (*(void (**)(uint64_t))(*(void *)v6 + 208))(a3);
  uint64_t v7 = swift_allocObject();
  swift_weakInit();
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v8;
  *(void *)(v9 + 24) = v7;
  uint64_t v10 = *(void (**)(uint64_t (*)(), uint64_t))(*(void *)v6 + 216);
  swift_retain();
  swift_retain();
  v10(partial apply for closure #1 in closure #1 in CallStateNotificationManager.addTask(timeout:task:), v9);
  swift_release();
  swift_release();
  swift_release();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.siriPhone);
  swift_retain_n();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    unint64_t v14 = (uint8_t *)swift_slowAlloc();
    v20[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v14 = 136315138;
    type metadata accessor for UUID();
    _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v12, v13, "#CallStateNotificationManager adding task: %s", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  swift_beginAccess();
  swift_retain();
  specialized Dictionary._Variant.setValue(_:forKey:)();
  swift_endAccess();
  CallStateNotificationManager.tasks.didset();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a4 + 136))(v17, v18) & 1) == 0) {
    CallStateNotificationManager.startObservingNotifications()();
  }
  return swift_release();
}

uint64_t CallStateOneTimeTask.__allocating_init(task:)()
{
  OUTLINED_FUNCTION_6_5();
  uint64_t v0 = swift_allocObject();
  CallStateOneTimeTask.init(task:)();
  return v0;
}

uint64_t closure #1 in closure #1 in CallStateNotificationManager.addTask(timeout:task:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      CallStateNotificationManager.removeTask(_:)();
      swift_release();
    }
    return swift_release();
  }
  return result;
}

void CallStateNotificationManager.removeTask(_:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v2 = v1;
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_9_19();
  OUTLINED_FUNCTION_0_0();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_52();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.siriPhone);
  swift_retain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)OUTLINED_FUNCTION_47();
    uint64_t v9 = OUTLINED_FUNCTION_14_0();
    *(_DWORD *)uint64_t v8 = 136315138;
    v16[0] = v9;
    type metadata accessor for UUID();
    _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v6, v7, "#CallStateNotificationManager removing task: %s", v8, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v12 = OUTLINED_FUNCTION_18_1();
  *(void *)(v12 + 16) = v0;
  *(void *)(v12 + 24) = v2;
  v16[4] = (uint64_t)partial apply for closure #1 in CallStateNotificationManager.removeTask(_:);
  void v16[5] = v12;
  v16[0] = (uint64_t)_NSConcreteStackBlock;
  v16[1] = 1107296256;
  v16[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v16[3] = (uint64_t)&block_descriptor_52;
  os_log_type_t v13 = _Block_copy(v16);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  _s10Foundation4UUIDVACSHAAWlTm_0(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);
  OUTLINED_FUNCTION_11();
  v14();
  OUTLINED_FUNCTION_11();
  v15();
  swift_release();
  OUTLINED_FUNCTION_26_1();
}

uint64_t closure #1 in CallStateNotificationManager.removeTask(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_uuid;
  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)(v3);
  swift_endAccess();
  swift_release();
  CallStateNotificationManager.tasks.didset();
  uint64_t v4 = *(void *)((*(uint64_t (**)(void))(*(void *)a1 + 112))() + 16);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v4)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(result);
    if (result) {
      return CallStateNotificationManager.stopObservingNotifications()();
    }
  }
  return result;
}

uint64_t CallStateNotificationManager.startObservingNotifications()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.siriPhone);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (_DWORD *)OUTLINED_FUNCTION_47();
    v18[0] = OUTLINED_FUNCTION_14_0();
    *uint64_t v5 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001DLL, 0x8000000000492B80, v18);
    OUTLINED_FUNCTION_7_3();
    OUTLINED_FUNCTION_22_6(&dword_0, v6, v7, "#CallStateNotificationManager %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }

  uint64_t v8 = self;
  id v9 = [v8 defaultCenter];
  OUTLINED_FUNCTION_24_11(v9, v10, v11, v12, TUCallCenterCallStatusChangedNotification);

  id v13 = [v8 defaultCenter];
  OUTLINED_FUNCTION_24_11(v13, v14, v15, v16, TUCallCenterVideoCallStatusChangedNotification);

  uint64_t result = OUTLINED_FUNCTION_6_16();
  *(unsigned char *)(v1 + 40) = 1;
  return result;
}

uint64_t CallStateNotificationManager.stopObservingNotifications()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.siriPhone);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (_DWORD *)OUTLINED_FUNCTION_47();
    v12[0] = OUTLINED_FUNCTION_14_0();
    *uint64_t v5 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x8000000000492B60, v12);
    OUTLINED_FUNCTION_7_3();
    OUTLINED_FUNCTION_22_6(&dword_0, v6, v7, "#CallStateNotificationManager %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }

  uint64_t v8 = self;
  id v9 = [v8 defaultCenter];
  [v9 removeObserver:v1 name:TUCallCenterCallStatusChangedNotification object:0];

  id v10 = [v8 defaultCenter];
  [v10 removeObserver:v1 name:TUCallCenterVideoCallStatusChangedNotification object:0];

  uint64_t result = OUTLINED_FUNCTION_6_16();
  *(unsigned char *)(v1 + 40) = 0;
  return result;
}

uint64_t CallStateNotificationManager.deinit()
{
  uint64_t v1 = v0;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.siriPhone);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "#CallStateNotificationManager deinit", v5, 2u);
    OUTLINED_FUNCTION_6();
  }

  swift_bridgeObjectRelease();
  return v1;
}

uint64_t CallStateNotificationManager.__deallocating_deinit()
{
  CallStateNotificationManager.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for CallStateNotificationManaging.addTask(timeout:task:) in conformance CallStateNotificationManager()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 176))();
}

uint64_t CallStateOneTimeTask.uuid.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_uuid;
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_10();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);

  return v6(a1, v3, v4);
}

uint64_t CallStateOneTimeTask.task.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_task);
  swift_retain();
  return v1;
}

void (*CallStateOneTimeTask.isActive.didset())(void)
{
  uint64_t v1 = (unsigned char *)(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_isActive);
  uint64_t result = (void (*)(void))swift_beginAccess();
  if ((*v1 & 1) == 0)
  {
    uint64_t result = (void (*)(void))(*(uint64_t (**)(void (*)(void)))(*(void *)v0 + 144))(result);
    if (result)
    {
      uint64_t v3 = (uint64_t)result;
      result();
      return (void (*)(void))outlined consume of (@escaping @callee_guaranteed () -> ())?(v3);
    }
  }
  return result;
}

uint64_t CallStateOneTimeTask.isActive.getter()
{
  OUTLINED_FUNCTION_4_7();
  return *v0;
}

void (*CallStateOneTimeTask.isActive.setter(char a1))(void)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_isActive);
  OUTLINED_FUNCTION_6_16();
  *uint64_t v3 = a1;
  return CallStateOneTimeTask.isActive.didset();
}

uint64_t key path getter for CallStateOneTimeTask.teardownHandler : CallStateOneTimeTask@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 144))();
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = v4;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v5;
    *(void *)(result + 24) = v6;
    uint64_t v7 = partial apply for thunk for @escaping @callee_guaranteed () -> ();
  }
  else
  {
    uint64_t v7 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())result;
  return result;
}

uint64_t key path setter for CallStateOneTimeTask.teardownHandler : CallStateOneTimeTask(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed () -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = (uint64_t *)(*a2 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_teardownHandler);
  swift_beginAccess();
  uint64_t v8 = *v7;
  *uint64_t v7 = (uint64_t)v6;
  v7[1] = v5;
  outlined copy of (@escaping @callee_guaranteed () -> ())?(v3);
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v8);
}

uint64_t CallStateOneTimeTask.teardownHandler.getter()
{
  OUTLINED_FUNCTION_4_7();
  uint64_t v1 = *v0;
  outlined copy of (@escaping @callee_guaranteed () -> ())?(*v0);
  return v1;
}

uint64_t key path setter for CallStateOneTimeTask.timer : CallStateOneTimeTask(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a2 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_timer);
  swift_beginAccess();
  *uint64_t v3 = v2;
  swift_unknownObjectRetain();
  return swift_unknownObjectRelease();
}

uint64_t CallStateOneTimeTask.timer.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t CallStateOneTimeTask.init(task:)()
{
  OUTLINED_FUNCTION_6_5();
  UUID.init()();
  *(unsigned char *)(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_isActive) = 1;
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_teardownHandler);
  *uint64_t v3 = 0;
  v3[1] = 0;
  *(void *)(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_timer) = 0;
  uint64_t v4 = (void *)(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_task);
  *uint64_t v4 = v2;
  v4[1] = v0;
  return v1;
}

uint64_t CallStateOneTimeTask.callStateDidChange(_:)(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v1 + 120))();
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v1
                                                + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_task))(a1);
    if (result)
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v4 = type metadata accessor for Logger();
      __swift_project_value_buffer(v4, (uint64_t)static Logger.siriPhone);
      swift_retain_n();
      uint64_t v5 = Logger.logObject.getter();
      os_log_type_t v6 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v5, v6))
      {
        uint64_t v7 = (_DWORD *)OUTLINED_FUNCTION_47();
        uint64_t v8 = OUTLINED_FUNCTION_14_0();
        *uint64_t v7 = 136315138;
        v14[0] = v8;
        type metadata accessor for UUID();
        _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, v14);
        OUTLINED_FUNCTION_8_23();
        OUTLINED_FUNCTION_6_2();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_19_10(&dword_0, v11, v12, "#CallStateOneTimeTask executed %s");
        swift_arrayDestroy();
        OUTLINED_FUNCTION_6();
        OUTLINED_FUNCTION_6();
      }
      else
      {

        OUTLINED_FUNCTION_6_2();
      }
      id v13 = (unsigned char *)(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_isActive);
      OUTLINED_FUNCTION_6_16();
      *id v13 = 0;
      return (uint64_t)CallStateOneTimeTask.isActive.didset();
    }
  }
  return result;
}

void CallStateOneTimeTask.setTimeout(timeout:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v74 = v0;
  uint64_t v67 = v1;
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  uint64_t v72 = v3;
  uint64_t v73 = v2;
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_3_1();
  uint64_t v70 = v4;
  OUTLINED_FUNCTION_36();
  uint64_t v71 = type metadata accessor for DispatchQoS();
  OUTLINED_FUNCTION_0_0();
  uint64_t v69 = v5;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_3_1();
  uint64_t v68 = v7;
  OUTLINED_FUNCTION_36();
  type metadata accessor for DispatchTimeInterval();
  OUTLINED_FUNCTION_0_0();
  uint64_t v65 = v9;
  uint64_t v66 = v8;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v64 = (uint64_t *)((char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  uint64_t v63 = (uint64_t)&v55 - v12;
  OUTLINED_FUNCTION_36();
  type metadata accessor for DispatchTime();
  OUTLINED_FUNCTION_0_0();
  uint64_t v61 = v14;
  uint64_t v62 = v13;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v60 = (char *)&v55 - v18;
  OUTLINED_FUNCTION_36();
  uint64_t v19 = type metadata accessor for DispatchQoS.QoSClass();
  OUTLINED_FUNCTION_0_0();
  uint64_t v21 = v20;
  __chkstk_darwin(v22);
  OUTLINED_FUNCTION_3_1();
  uint64_t v59 = v23;
  OUTLINED_FUNCTION_36();
  uint64_t v24 = type metadata accessor for OS_dispatch_source.TimerFlags();
  OUTLINED_FUNCTION_0_0();
  uint64_t v26 = v25;
  __chkstk_darwin(v27);
  OUTLINED_FUNCTION_3_1();
  uint64_t v58 = v28;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  __swift_project_value_buffer(v29, (uint64_t)static Logger.siriPhone);
  swift_retain_n();
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = swift_slowAlloc();
    uint64_t v57 = v26;
    uint64_t v33 = v32;
    uint64_t v56 = swift_slowAlloc();
    v76[0] = v56;
    *(_DWORD *)uint64_t v33 = 136315394;
    uint64_t v75 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000014, 0x8000000000492A30, v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v33 + 12) = 2080;
    uint64_t v55 = v33 + 14;
    type metadata accessor for UUID();
    _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v75 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v30, v31, "#CallStateOneTimeTask %s %s", (uint8_t *)v33, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    uint64_t v26 = v57;
    OUTLINED_FUNCTION_6();
  }
  else
  {

    swift_release_n();
  }
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for OS_dispatch_source);
  v76[0] = (uint64_t)_swiftEmptyArrayStorage;
  _s10Foundation4UUIDVACSHAAWlTm_0(&lazy protocol witness table cache variable for type OS_dispatch_source.TimerFlags and conformance OS_dispatch_source.TimerFlags, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_source.TimerFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_source.TimerFlags] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_source.TimerFlags]);
  uint64_t v36 = v58;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v37 = v59;
  (*(void (**)(uint64_t, void, uint64_t))(v21 + 104))(v59, enum case for DispatchQoS.QoSClass.utility(_:), v19);
  id v38 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v37, v19);
  uint64_t v39 = static OS_dispatch_source.makeTimerSource(flags:queue:)();

  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v36, v24);
  swift_getObjectType();
  static DispatchTime.now()();
  uint64_t v40 = v60;
  + infix(_:_:)();
  uint64_t v41 = *(void (**)(char *, uint64_t))(v61 + 8);
  id v42 = v17;
  uint64_t v43 = v62;
  v41(v42, v62);
  uint64_t v44 = v63;
  default argument 1 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v63);
  uint64_t v45 = v64;
  default argument 2 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v64);
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
  uint64_t v46 = *(void (**)(void *, uint64_t))(v65 + 8);
  uint64_t v47 = v45;
  uint64_t v48 = v66;
  v46(v47, v66);
  v46((void *)v44, v48);
  v41(v40, v43);
  uint64_t v49 = swift_allocObject();
  uint64_t v50 = v74;
  swift_weakInit();
  v76[4] = (uint64_t)partial apply for closure #1 in CallStateOneTimeTask.setTimeout(timeout:);
  v76[5] = v49;
  v76[0] = (uint64_t)_NSConcreteStackBlock;
  v76[1] = 1107296256;
  v76[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v76[3] = (uint64_t)&block_descriptor_25;
  uint64_t v51 = _Block_copy(v76);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  default argument 1 of OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  _Block_release(v51);
  OUTLINED_FUNCTION_11();
  v52();
  OUTLINED_FUNCTION_11();
  v53();
  swift_release();
  swift_release();
  OS_dispatch_source.resume()();
  uint64_t v54 = (uint64_t *)(v50 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_timer);
  OUTLINED_FUNCTION_6_16();
  uint64_t *v54 = v39;
  swift_unknownObjectRelease();
  OUTLINED_FUNCTION_26_1();
}

uint64_t default argument 1 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for DispatchTimeInterval.never(_:);
  uint64_t v3 = type metadata accessor for DispatchTimeInterval();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

uint64_t default argument 2 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  uint64_t v2 = enum case for DispatchTimeInterval.nanoseconds(_:);
  uint64_t v3 = type metadata accessor for DispatchTimeInterval();
  uint64_t v4 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

uint64_t closure #1 in CallStateOneTimeTask.setTimeout(timeout:)()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.siriPhone);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_0, v1, v2, "#CallStateOneTimeTask timed out", v3, 2u);
    swift_slowDealloc();
  }

  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v5 = (unsigned char *)(result + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_isActive);
    swift_beginAccess();
    *uint64_t v5 = 0;
    CallStateOneTimeTask.isActive.didset();
    return swift_release();
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable () -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t default argument 1 of OS_dispatch_source.setEventHandler(qos:flags:handler:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t CallStateOneTimeTask.setTeardownHandler(_:)()
{
  OUTLINED_FUNCTION_6_5();
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_teardownHandler);
  OUTLINED_FUNCTION_6_16();
  uint64_t v4 = *v3;
  *uint64_t v3 = v2;
  v3[1] = v0;
  swift_retain();
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v4);
}

uint64_t CallStateOneTimeTask.deinit()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.siriPhone);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (_DWORD *)OUTLINED_FUNCTION_47();
    uint64_t v11 = OUTLINED_FUNCTION_14_0();
    *uint64_t v4 = 136315138;
    type metadata accessor for UUID();
    _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v5 = dispatch thunk of CustomStringConvertible.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v11);
    OUTLINED_FUNCTION_8_23();
    OUTLINED_FUNCTION_6_2();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_19_10(&dword_0, v7, v8, "#CallStateOneTimeTask deinit %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {

    OUTLINED_FUNCTION_6_2();
  }
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_11();
  v9();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0
                                                                         + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20CallStateOneTimeTask_teardownHandler));
  swift_unknownObjectRelease();
  return v0;
}

uint64_t CallStateOneTimeTask.__deallocating_deinit()
{
  CallStateOneTimeTask.deinit();

  return swift_deallocClassInstance();
}

uint64_t sub_C2FF4()
{
  swift_release();
  uint64_t v1 = OUTLINED_FUNCTION_17_7();

  return _swift_deallocObject(v1, v2, v3);
}

void partial apply for closure #1 in CallStateNotificationManager.callStateChanged(_:)()
{
  closure #1 in CallStateNotificationManager.callStateChanged(_:)(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_C3034()
{
  uint64_t v1 = type metadata accessor for DispatchTimeInterval();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = (v6 + 32) & ~v6;
  uint64_t v8 = v6 | 7;
  unint64_t v9 = ((*(void *)(v5 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v7, v1);
  swift_release();

  return _swift_deallocObject(v0, v9, v8);
}

uint64_t partial apply for closure #1 in CallStateNotificationManager.addTask(timeout:task:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for DispatchTimeInterval() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return closure #1 in CallStateNotificationManager.addTask(timeout:task:)(v3, v4, v0 + v2, v5);
}

uint64_t outlined copy of (@escaping @callee_guaranteed () -> ())?(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_C3198()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t partial apply for closure #1 in CallStateOneTimeTask.setTimeout(timeout:)()
{
  return closure #1 in CallStateOneTimeTask.setTimeout(timeout:)();
}

uint64_t outlined consume of (@escaping @callee_guaranteed () -> ())?(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_C31E8()
{
  OUTLINED_FUNCTION_2_27();
  uint64_t result = (*(uint64_t (**)(void))(v1 + 112))();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_C322C()
{
  OUTLINED_FUNCTION_2_27();
  uint64_t result = (*(uint64_t (**)(void))(v1 + 136))();
  *uint64_t v0 = result & 1;
  return result;
}

uint64_t sub_C3274()
{
  OUTLINED_FUNCTION_2_27();
  uint64_t result = (*(uint64_t (**)(void))(v1 + 120))();
  *uint64_t v0 = result & 1;
  return result;
}

void (*sub_C32B8(char *a1))(void)
{
  return CallStateOneTimeTask.isActive.setter(*a1);
}

uint64_t sub_C32E8()
{
  OUTLINED_FUNCTION_2_27();
  uint64_t result = (*(uint64_t (**)(void))(v1 + 168))();
  *uint64_t v0 = result;
  return result;
}

uint64_t type metadata accessor for CallStateNotificationManager()
{
  return self;
}

uint64_t ObjC metadata update function for CallStateOneTimeTask()
{
  return type metadata accessor for CallStateOneTimeTask();
}

uint64_t type metadata completion function for CallStateOneTimeTask()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in CallStateNotificationManager.removeTask(_:)()
{
  return closure #1 in CallStateNotificationManager.removeTask(_:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_C3420()
{
  swift_release();
  uint64_t v0 = OUTLINED_FUNCTION_17_7();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@out ())()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t objectdestroy_48Tm()
{
  swift_release();
  swift_release();
  uint64_t v0 = OUTLINED_FUNCTION_17_7();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t partial apply for closure #1 in closure #1 in CallStateNotificationManager.addTask(timeout:task:)()
{
  return closure #1 in closure #1 in CallStateNotificationManager.addTask(timeout:task:)();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t _s10Foundation4UUIDVACSHAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_6_16()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_8_23()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_9_19()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t OUTLINED_FUNCTION_17_7()
{
  return v0;
}

void OUTLINED_FUNCTION_19_10(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

void OUTLINED_FUNCTION_22_6(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

id OUTLINED_FUNCTION_24_11(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9 = *(const char **)(v7 + 3800);
  return objc_msgSend(a1, v9, v5, v6, a5, 0);
}

uint64_t PhoneCallNLv4Contact.contactReference.getter()
{
  OUTLINED_FUNCTION_5_21();
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t PhoneCallNLv4Contact.contactReference.setter(char a1)
{
  uint64_t result = OUTLINED_FUNCTION_4_4();
  *(unsigned char *)(v1 + 16) = a1;
  return result;
}

uint64_t (*PhoneCallMetrics.Builder.timeToEstablish.modify())()
{
  return PhoneFlow.state.modify;
}

uint64_t PhoneIncomingCall.Builder.unknownCaller.getter()
{
  OUTLINED_FUNCTION_5_21();
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t PhoneIncomingCall.Builder.unknownCaller.setter(char a1)
{
  uint64_t result = OUTLINED_FUNCTION_4_4();
  *(unsigned char *)(v1 + 17) = a1;
  return result;
}

uint64_t (*PhoneIncomingCall.Builder.unknownCaller.modify())()
{
  return PhoneFlow.state.modify;
}

uint64_t key path setter for PhoneIncomingCall.Builder.latestCallRecord : PhoneIncomingCall.Builder(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 160);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t PhoneIncomingCall.Builder.latestCallRecord.getter()
{
  return swift_retain();
}

uint64_t PhoneIncomingCall.Builder.latestCallRecord.setter(uint64_t a1)
{
  OUTLINED_FUNCTION_4_4();
  *(void *)(v1 + 24) = a1;
  return swift_release();
}

uint64_t (*PhoneCallNLv4Contact.contactId.modify())()
{
  return PhoneFlow.state.modify;
}

uint64_t PhoneIncomingCall.Builder.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(_WORD *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

uint64_t PhoneIncomingCall.Builder.init()()
{
  uint64_t result = v0;
  *(_WORD *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0;
  return result;
}

uint64_t PhoneIncomingCall.Builder.withIncomingCall(_:)()
{
  OUTLINED_FUNCTION_22();
  (*(void (**)(void))(v0 + 112))();

  return swift_retain();
}

uint64_t PhoneIncomingCall.Builder.withUnknownCaller(_:)()
{
  OUTLINED_FUNCTION_22();
  (*(void (**)(void))(v0 + 136))();

  return swift_retain();
}

uint64_t PhoneIncomingCall.Builder.withLatestCallRecord(_:)()
{
  OUTLINED_FUNCTION_22();
  uint64_t v1 = *(void (**)(uint64_t))(v0 + 160);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_retain();
}

uint64_t PhoneIncomingCall.Builder.withLatestCallRecord(_:)(uint64_t a1)
{
  if (a1) {
    a1 = (*(uint64_t (**)(void))(*(void *)a1 + 1176))();
  }
  (*(void (**)(uint64_t))(*(void *)v1 + 160))(a1);

  return swift_retain();
}

uint64_t PhoneIncomingCall.Builder.build()()
{
  type metadata accessor for PhoneIncomingCall();
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = swift_retain();
  PhoneIncomingCall.init(builder:)(v1);
  return v0;
}

uint64_t PhoneIncomingCall.__allocating_init(builder:)(uint64_t a1)
{
  OUTLINED_FUNCTION_6_17();
  uint64_t v2 = swift_allocObject();
  PhoneIncomingCall.init(builder:)(a1);
  return v2;
}

uint64_t type metadata accessor for PhoneIncomingCall()
{
  return self;
}

unint64_t static PhoneIncomingCall.catTypeName.getter()
{
  return 0xD000000000000012;
}

uint64_t key path setter for PhoneIncomingCall.mockGlobals : PhoneIncomingCall(id *a1, uint64_t a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))(**(void **)a2 + 136);
  id v4 = *a1;
  return v3(v2);
}

void *PhoneCallMetrics.mockGlobals.getter()
{
  OUTLINED_FUNCTION_5_21();
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = v1;
  return v1;
}

void PhoneIncomingCall.mockGlobals.setter(uint64_t a1)
{
  OUTLINED_FUNCTION_4_4();
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)(v1 + 16) = a1;
}

uint64_t PhoneIncomingCall.incomingCall.getter()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t PhoneIncomingCall.unknownCaller.getter()
{
  return *(unsigned __int8 *)(v0 + 25);
}

uint64_t PhoneIncomingCall.init(builder:)(uint64_t a1)
{
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) & 1;
  OUTLINED_FUNCTION_22();
  *(unsigned char *)(v1 + 25) = (*(uint64_t (**)(void))(v2 + 128))() & 1;
  OUTLINED_FUNCTION_22();
  uint64_t v4 = (*(uint64_t (**)(void))(v3 + 152))();
  swift_release();
  *(void *)(v1 + 32) = v4;
  return v1;
}

uint64_t PhoneIncomingCall.__allocating_init(incomingCall:unknownCaller:latestCallRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  type metadata accessor for PhoneIncomingCall.Builder();
  uint64_t v8 = swift_allocObject();
  *(_WORD *)(v8 + 16) = 0;
  *(void *)(v8 + 24) = 0;
  (*(void (**)(uint64_t))(*(void *)v8 + 184))(a1);
  swift_release();
  OUTLINED_FUNCTION_22();
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(v9 + 192))(a2);
  swift_release();
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 200))(a3);
  swift_release();
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(v4 + 152))(v11);
  swift_release();
  return v12;
}

uint64_t type metadata accessor for PhoneIncomingCall.Builder()
{
  return self;
}

uint64_t PhoneIncomingCall.getProperty(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v5 = result == 0x676E696D6F636E69 && a2 == 0xEC0000006C6C6143;
  if (v5 || (uint64_t v7 = result, result = OUTLINED_FUNCTION_4_20(), (result & 1) != 0))
  {
    char v8 = *(unsigned char *)(v3 + 24);
LABEL_13:
    *(void *)(a3 + 24) = &type metadata for Bool;
    *(unsigned char *)a3 = v8;
    return result;
  }
  BOOL v9 = v7 == 0x436E776F6E6B6E75 && a2 == 0xED000072656C6C61;
  if (v9 || (uint64_t result = OUTLINED_FUNCTION_4_20(), (result & 1) != 0))
  {
    char v8 = *(unsigned char *)(v3 + 25);
    goto LABEL_13;
  }
  if ((v7 == 0xD000000000000010 && a2 == 0x800000000048C700
     || (uint64_t result = OUTLINED_FUNCTION_4_20(), (result & 1) != 0))
    && (uint64_t v10 = *(void *)(v3 + 32)) != 0)
  {
    *(void *)(a3 + 24) = type metadata accessor for PhoneCallRecord(0);
    *(void *)a3 = v10;
    return swift_retain();
  }
  else
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

PhoneCallFlowDelegatePlugin::PhoneIncomingCall::CodingKeys_optional __swiftcall PhoneIncomingCall.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PhoneIncomingCall.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return (PhoneCallFlowDelegatePlugin::PhoneIncomingCall::CodingKeys_optional)3;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::PhoneIncomingCall::CodingKeys_optional)v3;
  }
}

uint64_t PhoneIncomingCall.CodingKeys.rawValue.getter(char a1)
{
  if (!a1) {
    return OUTLINED_FUNCTION_3_28();
  }
  OUTLINED_FUNCTION_9_20();
  if (v2 == 1) {
    return v1;
  }
  else {
    return 0xD000000000000010;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhoneIncomingCall.CodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PhoneIncomingCall.CodingKeys()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneIncomingCall.CodingKeys(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneIncomingCall.CodingKeys(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::PhoneIncomingCall::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneIncomingCall.CodingKeys@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneIncomingCall::CodingKeys_optional *a2@<X8>)
{
  result.value = PhoneIncomingCall.CodingKeys.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PhoneIncomingCall.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = PhoneIncomingCall.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PhoneIncomingCall.CodingKeys()
{
  return PhoneIncomingCall.CodingKeys.rawValue.getter(*v0);
}

PhoneCallFlowDelegatePlugin::PhoneIncomingCall::CodingKeys_optional protocol witness for CodingKey.init(stringValue:) in conformance PhoneIncomingCall.CodingKeys@<W0>(uint64_t a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneIncomingCall::CodingKeys_optional *a2@<X8>)
{
  result.value = PhoneIncomingCall.CodingKeys.init(stringValue:)(*(Swift::String *)&a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PhoneIncomingCall.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneIncomingCall.CodingKeys and conformance PhoneIncomingCall.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PhoneIncomingCall.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneIncomingCall.CodingKeys and conformance PhoneIncomingCall.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PhoneIncomingCall.deinit()
{
  swift_release();
  return v0;
}

uint64_t PhoneIncomingCall.__deallocating_deinit()
{
  PhoneIncomingCall.deinit();
  OUTLINED_FUNCTION_6_17();

  return swift_deallocClassInstance();
}

uint64_t PhoneIncomingCall.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PhoneIncomingCall.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  uint64_t v10 = &v12[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PhoneIncomingCall.CodingKeys and conformance PhoneIncomingCall.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    char v14 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v13 = *(void *)(v3 + 32);
    v12[15] = 2;
    type metadata accessor for PhoneCallRecord(0);
    lazy protocol witness table accessor for type PhoneCallRecord and conformance PhoneCallRecord(&lazy protocol witness table cache variable for type PhoneCallRecord and conformance PhoneCallRecord, 255, (void (*)(uint64_t))type metadata accessor for PhoneCallRecord);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v10, v5);
}

unint64_t lazy protocol witness table accessor for type PhoneIncomingCall.CodingKeys and conformance PhoneIncomingCall.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneIncomingCall.CodingKeys and conformance PhoneIncomingCall.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneIncomingCall.CodingKeys and conformance PhoneIncomingCall.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneIncomingCall.CodingKeys and conformance PhoneIncomingCall.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneIncomingCall.CodingKeys and conformance PhoneIncomingCall.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneIncomingCall.CodingKeys and conformance PhoneIncomingCall.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneIncomingCall.CodingKeys and conformance PhoneIncomingCall.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneIncomingCall.CodingKeys and conformance PhoneIncomingCall.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneIncomingCall.CodingKeys and conformance PhoneIncomingCall.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneIncomingCall.CodingKeys and conformance PhoneIncomingCall.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneIncomingCall.CodingKeys and conformance PhoneIncomingCall.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneIncomingCall.CodingKeys and conformance PhoneIncomingCall.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneIncomingCall.CodingKeys and conformance PhoneIncomingCall.CodingKeys);
  }
  return result;
}

uint64_t PhoneIncomingCall.__allocating_init(from:)(void *a1)
{
  OUTLINED_FUNCTION_6_17();
  uint64_t v2 = swift_allocObject();
  PhoneIncomingCall.init(from:)(a1);
  return v2;
}

uint64_t PhoneIncomingCall.init(from:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PhoneIncomingCall.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  __chkstk_darwin(v4);
  *(void *)(v1 + 16) = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PhoneIncomingCall.CodingKeys and conformance PhoneIncomingCall.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {

    type metadata accessor for PhoneIncomingCall();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(unsigned char *)(v1 + 24) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    *(unsigned char *)(v1 + 25) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    type metadata accessor for PhoneCallRecord(0);
    lazy protocol witness table accessor for type PhoneCallRecord and conformance PhoneCallRecord(&lazy protocol witness table cache variable for type PhoneCallRecord and conformance PhoneCallRecord, 255, (void (*)(uint64_t))type metadata accessor for PhoneCallRecord);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v6 = OUTLINED_FUNCTION_8_3();
    v7(v6);
    *(void *)(v1 + 32) = v8;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v1;
}

uint64_t base witness table accessor for Decodable in PhoneIncomingCall(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PhoneCallRecord and conformance PhoneCallRecord(&lazy protocol witness table cache variable for type PhoneIncomingCall and conformance PhoneIncomingCall, a2, (void (*)(uint64_t))type metadata accessor for PhoneIncomingCall);
}

uint64_t base witness table accessor for Encodable in PhoneIncomingCall(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PhoneCallRecord and conformance PhoneCallRecord(&lazy protocol witness table cache variable for type PhoneIncomingCall and conformance PhoneIncomingCall, a2, (void (*)(uint64_t))type metadata accessor for PhoneIncomingCall);
}

uint64_t lazy protocol witness table accessor for type PhoneCallRecord and conformance PhoneCallRecord(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for static CATType.catTypeName.getter in conformance PhoneIncomingCall()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t protocol witness for static CATType.isDialogType.getter in conformance PhoneIncomingCall()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t protocol witness for CATType.mockGlobals.getter in conformance PhoneIncomingCall()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))();
}

uint64_t protocol witness for CATType.mockGlobals.setter in conformance PhoneIncomingCall()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))();
}

void (*protocol witness for CATType.mockGlobals.modify in conformance PhoneIncomingCall(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 144))();
  return protocol witness for StaticAction.nextAction.modify in conformance PlayVoiceMailAction;
}

uint64_t protocol witness for CATType.getProperty(_:) in conformance PhoneIncomingCall()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 168))();
}

uint64_t protocol witness for Decodable.init(from:) in conformance PhoneIncomingCall@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 184))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PhoneIncomingCall()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 176))();
}

uint64_t sub_C49EC@<X0>(unsigned char *a1@<X8>)
{
  OUTLINED_FUNCTION_22();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 104))();
  *a1 = result & 1;
  return result;
}

uint64_t sub_C4A38()
{
  OUTLINED_FUNCTION_22();
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t sub_C4A7C@<X0>(unsigned char *a1@<X8>)
{
  OUTLINED_FUNCTION_22();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 128))();
  *a1 = result & 1;
  return result;
}

uint64_t sub_C4AC8()
{
  OUTLINED_FUNCTION_22();
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t sub_C4B0C@<X0>(uint64_t *a1@<X8>)
{
  OUTLINED_FUNCTION_22();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 152))();
  *a1 = result;
  return result;
}

uint64_t sub_C4B58@<X0>(uint64_t *a1@<X8>)
{
  OUTLINED_FUNCTION_22();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 128))();
  *a1 = result;
  return result;
}

unsigned char *storeEnumTagSinglePayload for PhoneIncomingCall.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0xC4C70);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PhoneIncomingCall.CodingKeys()
{
  return &type metadata for PhoneIncomingCall.CodingKeys;
}

uint64_t OUTLINED_FUNCTION_3_28()
{
  return 0x676E696D6F636E69;
}

uint64_t OUTLINED_FUNCTION_6_17()
{
  return v0;
}

uint64_t IdentifyIncomingCallerOutputStrategy.init(incomingCallCats:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = type metadata accessor for IdentifyIncomingCallerCATsSimple();
  *(void *)(a2 + 24) = result;
  *(void *)(a2 + 32) = &protocol witness table for IdentifyIncomingCallerCATsSimple;
  *(void *)a2 = a1;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) = 0;
  return result;
}

uint64_t IdentifyIncomingCallerOutputStrategy.makePromptForConfirmationFlow<A>(app:intentResponse:sharedGlobals:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 24);
  char v12 = v11(a4, a5);
  if (FollowUpOfferType.rawValue.getter(v12) == 0xD000000000000011 && v13 == 0x800000000048DCD0) {
    goto LABEL_10;
  }
  char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v14) {
    goto LABEL_11;
  }
  char v15 = v11(a4, a5);
  if (FollowUpOfferType.rawValue.getter(v15) == 0x4C41435F44414552 && v16 == 0xE90000000000004CLL)
  {
LABEL_10:
    swift_bridgeObjectRelease();
  }
  else
  {
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v18 & 1) == 0) {
      goto LABEL_26;
    }
  }
LABEL_11:
  uint64_t v19 = *(uint64_t (**)(uint64_t))(a5 + 16);
  uint64_t v20 = OUTLINED_FUNCTION_2_28();
  unint64_t v21 = v19(v20);
  if (!v21)
  {
LABEL_26:
    type metadata accessor for IncomingCallActionConfirmation();
    lazy protocol witness table accessor for type IncomingCallActionConfirmation and conformance IncomingCallActionConfirmation((unint64_t *)&lazy protocol witness table cache variable for type IncomingCallActionConfirmation and conformance IncomingCallActionConfirmation, 255, (void (*)(uint64_t))type metadata accessor for IncomingCallActionConfirmation);
    type metadata accessor for PromptForConfirmationFlowAsync();
    uint64_t v61 = a2;
    type metadata accessor for IncomingCallActionConfirmationStrategy();
    outlined init with copy of SignalProviding(v6, (uint64_t)&v54);
    outlined init with copy of SignalProviding((uint64_t)a3, (uint64_t)&v58);
    id v43 = a2;
    uint64_t v44 = default argument 4 of IncomingCallActionConfirmationStrategy.init(incomingCallIntentResponse:incomingCallCats:sharedGlobals:announceCallsContext:phoneCommonCats:phoneCallCommonCatPatterns:)(a4, a5);
    default argument 5 of IncomingCallActionConfirmationStrategy.init(incomingCallIntentResponse:incomingCallCats:sharedGlobals:announceCallsContext:phoneCommonCats:phoneCallCommonCatPatterns:)((uint64_t *)v57);
    IncomingCallActionConfirmationStrategy.__allocating_init(incomingCallIntentResponse:incomingCallCats:sharedGlobals:announceCallsContext:phoneCommonCats:phoneCallCommonCatPatterns:)((uint64_t)v43, &v54, &v58, 0, 0, v44, v57);
    uint64_t v45 = a3[3];
    uint64_t v46 = a3[4];
    __swift_project_boxed_opaque_existential_1(a3, v45);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v46 + 16))(&v54, v45, v46);
    uint64_t v47 = v55;
    uint64_t v48 = v56;
    uint64_t v49 = __swift_project_boxed_opaque_existential_1(&v54, v55);
    uint64_t v59 = v47;
    uint64_t v60 = v48;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v58);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v47 - 8) + 16))(boxed_opaque_existential_1, v49, v47);
    swift_getWitnessTable();
    uint64_t v51 = PromptForConfirmationFlowAsync.__allocating_init<A>(itemToConfirm:strategy:outputPublisher:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
    *(void *)&long long v54 = v51;
    swift_getWitnessTable();
    uint64_t v42 = Flow.eraseToAnyValueFlow()();
    swift_release();
    return v42;
  }
  unint64_t v22 = v21;
  if (v21 >> 62)
  {
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_14;
    }
    goto LABEL_25;
  }
  if (!*(void *)((char *)&dword_10 + (v21 & 0xFFFFFFFFFFFFFF8)))
  {
LABEL_25:
    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
LABEL_14:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v22 & 0xC000000000000001) == 0, v22);
  if ((v22 & 0xC000000000000001) != 0) {
    id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v23 = *(id *)(v22 + 32);
  }
  uint64_t v24 = v23;
  swift_bridgeObjectRelease();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.siriPhone);
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v28 = 0;
    _os_log_impl(&dword_0, v26, v27, "#IdentifyIncomingCallerOutputStrategy Using SearchCallHistoryFlow to push offer to call back", v28, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for INSearchCallHistoryIntent);
  v62.value.super.Class isa = 0;
  v62.is_nil = 0;
  v63.value.super.Class isa = 0;
  v63.is_nil = 12;
  v31.super.super.Class isa = INSearchCallHistoryIntent.init(dateCreated:recipient:callCapabilities:callTypes:unseen:)(v62, v63, (__C::INCallCapabilityOptions)2, v29, v30).super.super.isa;
  id v32 = [objc_allocWithZone((Class)INSearchCallHistoryIntentResponse) initWithCode:7 userActivity:0];
  uint64_t v33 = OUTLINED_FUNCTION_2_28();
  if (v19(v33))
  {
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INCallRecord);
    v34.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v34.super.Class isa = 0;
  }
  [v32 setCallRecords:v34.super.isa];

  uint64_t v35 = type metadata accessor for SingleCallResultFlow();
  outlined init with copy of SignalProviding((uint64_t)a3, (uint64_t)&v58);
  swift_retain();
  id v36 = v24;
  uint64_t v37 = v31.super.super.isa;
  id v38 = v32;
  default argument 6 of SingleCallResultFlow.init(app:callRecord:intent:intentResponse:isIncomingCallFollowupPrompt:sharedGlobals:schGlobals:)(&v54, v38);
  uint64_t v39 = SingleCallResultFlow.__allocating_init(app:callRecord:intent:intentResponse:isIncomingCallFollowupPrompt:sharedGlobals:schGlobals:)(a1, v36, v37, v38, 1, (uint64_t)&v58, (uint64_t)&v54);
  type metadata accessor for IncomingCallActionConfirmationFlowAdapter();
  uint64_t v40 = (void *)swift_allocObject();
  v40[5] = v35;
  v40[6] = lazy protocol witness table accessor for type IncomingCallActionConfirmation and conformance IncomingCallActionConfirmation(&lazy protocol witness table cache variable for type SingleCallResultFlow and conformance SingleCallResultFlow, 255, (void (*)(uint64_t))type metadata accessor for SingleCallResultFlow);
  v40[2] = v39;
  *(void *)&long long v54 = v40;
  lazy protocol witness table accessor for type IncomingCallActionConfirmation and conformance IncomingCallActionConfirmation(&lazy protocol witness table cache variable for type IncomingCallActionConfirmationFlowAdapter and conformance IncomingCallActionConfirmationFlowAdapter, v41, (void (*)(uint64_t))type metadata accessor for IncomingCallActionConfirmationFlowAdapter);
  uint64_t v42 = Flow.eraseToAnyValueFlow()();
  swift_release();

  return v42;
}

uint64_t IncomingCallActionConfirmationFlowAdapter.__allocating_init(_:)(uint64_t a1)
{
  return IncomingCallActionConfirmationFlowAdapter.__allocating_init(_:)(a1, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))specialized IncomingCallActionConfirmationFlowAdapter.__allocating_init(_:));
}

uint64_t IncomingCallActionConfirmationFlowAdapter.exitValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for PromptResult.cancelled<A>(_:);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptResult<IncomingCallActionConfirmation>);
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

uint64_t CallingIntentContinueInAppStrategy.sharedGlobals.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + 16, a1);
}

uint64_t IncomingCallActionConfirmationFlowAdapter.init(_:)(uint64_t a1)
{
  return IncomingCallActionConfirmationFlowAdapter.__allocating_init(_:)(a1, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))specialized IncomingCallActionConfirmationFlowAdapter.init(_:));
}

uint64_t IncomingCallActionConfirmationFlowAdapter.__allocating_init(_:)(uint64_t a1, uint64_t (*a2)(char *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = __swift_mutable_project_boxed_opaque_existential_1(a1, v5);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v10 + 16))(v9);
  uint64_t v11 = a2(v9, v2, v5, v6);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v11;
}

uint64_t IncomingCallActionConfirmationFlowAdapter.on(input:)()
{
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
  return dispatch thunk of Flow.on(input:)() & 1;
}

uint64_t IncomingCallActionConfirmationFlowAdapter.execute(completion:)()
{
  type metadata accessor for IncomingCallActionConfirmationFlowAdapter();
  lazy protocol witness table accessor for type IncomingCallActionConfirmation and conformance IncomingCallActionConfirmation(&lazy protocol witness table cache variable for type IncomingCallActionConfirmationFlowAdapter and conformance IncomingCallActionConfirmationFlowAdapter, v0, (void (*)(uint64_t))type metadata accessor for IncomingCallActionConfirmationFlowAdapter);
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t IncomingCallActionConfirmationFlowAdapter.execute()(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return _swift_task_switch(IncomingCallActionConfirmationFlowAdapter.execute(), 0, 0);
}

uint64_t IncomingCallActionConfirmationFlowAdapter.execute()()
{
  uint64_t v1 = (void *)v0[3];
  uint64_t v2 = v1[5];
  uint64_t v3 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v2);
  unsigned int v4 = (void *)swift_task_alloc();
  v0[4] = v4;
  *unsigned int v4 = v0;
  v4[1] = IncomingCallActionConfirmationFlowAdapter.execute();
  uint64_t v5 = v0[2];
  return dispatch thunk of Flow.execute()(v5, v2, v3);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t HandleIntentSubmitter.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return v0;
}

uint64_t protocol witness for Flow.on(input:) in conformance IncomingCallActionConfirmationFlowAdapter()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance IncomingCallActionConfirmationFlowAdapter()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t protocol witness for Flow.execute() in conformance IncomingCallActionConfirmationFlowAdapter(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 120) + **(int **)(**(void **)v1 + 120));
  unsigned int v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *unsigned int v4 = v2;
  v4[1] = protocol witness for Flow.execute() in conformance ContactNeedsValueGuardFlow<A>;
  return v6(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance IncomingCallActionConfirmationFlowAdapter()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))();
}

BOOL specialized OptionSet<>.insert(_:)(void *a1, uint64_t a2)
{
  uint64_t v3 = *v2 & a2;
  if (v3 != a2) {
    *v2 |= a2;
  }
  *a1 = a2;
  return v3 != a2;
}

uint64_t specialized OptionSet<>.formUnion(_:)(uint64_t result)
{
  *v1 |= result;
  return result;
}

uint64_t type metadata accessor for IncomingCallActionConfirmationFlowAdapter()
{
  return self;
}

uint64_t lazy protocol witness table accessor for type IncomingCallActionConfirmation and conformance IncomingCallActionConfirmation(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *specialized IncomingCallActionConfirmationFlowAdapter.__allocating_init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IncomingCallActionConfirmationFlowAdapter();
  uint64_t v10 = (uint64_t *)swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a3);
  uint64_t v11 = specialized IncomingCallActionConfirmationFlowAdapter.init(_:)((uint64_t)v9, v10, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, a3);
  return v11;
}

uint64_t *specialized IncomingCallActionConfirmationFlowAdapter.init(_:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  a2[5] = a3;
  a2[6] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a2 + 2);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(boxed_opaque_existential_1, a1, a3);
  return a2;
}

void destroy for IdentifyIncomingCallerOutputStrategy(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  uint64_t v2 = *(void **)(a1 + 40);
}

uint64_t initializeWithCopy for IdentifyIncomingCallerOutputStrategy(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  id v6 = v5;
  return a1;
}

uint64_t assignWithCopy for IdentifyIncomingCallerOutputStrategy(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  long long v4 = *(void **)(a2 + 40);
  uint64_t v5 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v4;
  id v6 = v4;

  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for IdentifyIncomingCallerOutputStrategy(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  id v6 = *(void **)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;

  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for IdentifyIncomingCallerOutputStrategy(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 49))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IdentifyIncomingCallerOutputStrategy(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 49) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IdentifyIncomingCallerOutputStrategy()
{
  return &type metadata for IdentifyIncomingCallerOutputStrategy;
}

uint64_t OUTLINED_FUNCTION_2_28()
{
  return v0;
}

uint64_t HoldControlFlow.executeAction(currentCall:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v12 = *(unsigned char *)(v4 + 56);
  if ((PhoneCallControlAction.isHoldAction.getter(v12) & 1) == 0)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v8, (uint64_t)static Logger.siriPhone);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    uint64_t v14 = v18;
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl(&dword_0, v17, (os_log_type_t)v14, "#HoldControlFlow used to handle a call control not related to hold.", v19, 2u);
      OUTLINED_FUNCTION_6();
    }

    lazy protocol witness table accessor for type ActionableCallControlFlow.ActionableCallControlFlowError and conformance ActionableCallControlFlow.ActionableCallControlFlowError();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_3_4();
    char v16 = 0;
    *uint64_t v20 = v12;
    goto LABEL_13;
  }
  long long v76 = a3;
  uint64_t v77 = v9;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v14 = a1;
  if (SPHCall.isFTVideo.getter())
  {
    lazy protocol witness table accessor for type ActionableCallControlFlow.ActionableCallControlFlowError and conformance ActionableCallControlFlow.ActionableCallControlFlowError();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_3_4();
    *(void *)(v15 + 24) = &type metadata for ActionableCallControlFlow.UnsupportedHoldActionReason;
    *(void *)(a1 + 32) = lazy protocol witness table accessor for type ActionableCallControlFlow.UnsupportedHoldActionReason and conformance ActionableCallControlFlow.UnsupportedHoldActionReason();
    char v16 = 1;
    *(unsigned char *)a1 = 1;
LABEL_13:
    *(unsigned char *)(v14 + 40) = v16;
    return swift_willThrow();
  }
  uint64_t v14 = a1;
  uint64_t v21 = v8;
  uint64_t v73 = v11;
  uint64_t v22 = ObjectType;
  id v23 = *(unsigned int (**)(uint64_t, uint64_t))(a2 + 16);
  if (v23(v22, a2) == 3 || (uint64_t v74 = v23, v75 = a2 + 16, v23(v22, a2) == 4))
  {
    lazy protocol witness table accessor for type ActionableCallControlFlow.ActionableCallControlFlowError and conformance ActionableCallControlFlow.ActionableCallControlFlowError();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_3_4();
    *(void *)(v24 + 24) = &type metadata for ActionableCallControlFlow.UnsupportedHoldActionReason;
    *(void *)(v14 + 32) = lazy protocol witness table accessor for type ActionableCallControlFlow.UnsupportedHoldActionReason and conformance ActionableCallControlFlow.UnsupportedHoldActionReason();
    *(unsigned char *)uint64_t v14 = 2;
LABEL_12:
    char v16 = 1;
    goto LABEL_13;
  }
  uint64_t v26 = OUTLINED_FUNCTION_2_29();
  if ((v27(v26) & 1) == 0)
  {
    lazy protocol witness table accessor for type ActionableCallControlFlow.ActionableCallControlFlowError and conformance ActionableCallControlFlow.ActionableCallControlFlowError();
    OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_3_4();
    *(void *)(v35 + 24) = &type metadata for ActionableCallControlFlow.UnsupportedHoldActionReason;
    *(void *)(v14 + 32) = lazy protocol witness table accessor for type ActionableCallControlFlow.UnsupportedHoldActionReason and conformance ActionableCallControlFlow.UnsupportedHoldActionReason();
    *(unsigned char *)uint64_t v14 = 0;
    goto LABEL_12;
  }
  uint64_t v28 = OUTLINED_FUNCTION_1_26();
  LODWORD(v70) = v29(v28);
  uint64_t v69 = v14;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v72 = v21;
  uint64_t v71 = __swift_project_value_buffer(v21, (uint64_t)static Logger.siriPhone);
  Swift::Bool_optional v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v30, v31))
  {
    int v32 = v70;
    LODWORD(v68) = v70 == 2;
    uint64_t v33 = v30;
    NSArray v34 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)NSArray v34 = 67109120;
    LODWORD(v79) = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v33, v31, "#HoldControlFlow isHeld = %{BOOL}d", v34, 8u);
    OUTLINED_FUNCTION_6();
  }
  else
  {

    int v32 = v70;
  }
  unint64_t v36 = PhoneCallControlAction.rawValue.getter(v12);
  if (v32 != 2)
  {
    BOOL v41 = v36 == 0x6F48656C62616E65 && v37 == 0xEA0000000000646CLL;
    uint64_t v39 = v72;
    if (v41)
    {
      swift_bridgeObjectRelease();
      goto LABEL_42;
    }
    char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v42 & 1) == 0) {
      goto LABEL_33;
    }
LABEL_42:
    uint64_t v52 = OUTLINED_FUNCTION_2_29();
    v53(v52);
    goto LABEL_46;
  }
  BOOL v38 = v36 == 0x48656C6261736964 && v37 == 0xEB00000000646C6FLL;
  uint64_t v39 = v72;
  if (v38)
  {
    swift_bridgeObjectRelease();
    goto LABEL_42;
  }
  char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v40) {
    goto LABEL_42;
  }
LABEL_33:
  swift_retain_n();
  id v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.debug.getter();
  LODWORD(v69) = v44;
  if (os_log_type_enabled(v43, v44))
  {
    uint64_t v45 = swift_slowAlloc();
    os_log_t v68 = v43;
    uint64_t v46 = v45;
    uint64_t v67 = swift_slowAlloc();
    uint64_t v79 = v67;
    *(_DWORD *)uint64_t v46 = 136315394;
    if (v70 == 2) {
      uint64_t v47 = 0x646C6F68206E6FLL;
    }
    else {
      uint64_t v47 = 0x646C6F682066666FLL;
    }
    if (v70 == 2) {
      unint64_t v48 = 0xE700000000000000;
    }
    else {
      unint64_t v48 = 0xE800000000000000;
    }
    v66[1] = v48;
    uint64_t v70 = v46 + 4;
    uint64_t v78 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, &v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v46 + 12) = 2080;
    uint64_t v70 = v46 + 14;
    unint64_t v49 = PhoneCallControlAction.description.getter(v12);
    uint64_t v78 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, &v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    os_log_t v51 = v68;
    _os_log_impl(&dword_0, v68, (os_log_type_t)v69, "#HoldControlFlow not changing hold status because call is %s and action is %s", (uint8_t *)v46, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {

    swift_release_n();
  }
LABEL_46:
  uint64_t v54 = v77;
  uint64_t v55 = v73;
  (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v73, v71, v39);
  swift_unknownObjectRetain_n();
  uint64_t v56 = Logger.logObject.getter();
  LODWORD(v71) = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v56, (os_log_type_t)v71))
  {

    swift_unknownObjectRelease_n();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v55, v39);
    goto LABEL_50;
  }
  uint64_t v57 = (uint8_t *)swift_slowAlloc();
  uint64_t v79 = swift_slowAlloc();
  *(_DWORD *)uint64_t v57 = 136315138;
  uint64_t v58 = OUTLINED_FUNCTION_1_26();
  v59(v58);
  id v60 = (id)TUStringForCallStatus();
  if (v60)
  {
    uint64_t v61 = v60;
    uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v64 = v63;

    uint64_t v78 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v64, &v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v56, (os_log_type_t)v71, "#HoldControlFlow: After applying action, callStatus=%s", v57, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();

    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v77 + 8))(v73, v72);
LABEL_50:
    uint64_t v65 = v76;
    *long long v76 = 0;
    v65[1] = 0;
    v65[2] = 0;
    *(_OWORD *)(v65 + 3) = xmmword_469B30;
    return result;
  }
  uint64_t result = swift_unknownObjectRelease();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type ActionableCallControlFlow.UnsupportedHoldActionReason and conformance ActionableCallControlFlow.UnsupportedHoldActionReason()
{
  unint64_t result = lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedHoldActionReason and conformance ActionableCallControlFlow.UnsupportedHoldActionReason;
  if (!lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedHoldActionReason and conformance ActionableCallControlFlow.UnsupportedHoldActionReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedHoldActionReason and conformance ActionableCallControlFlow.UnsupportedHoldActionReason);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedHoldActionReason and conformance ActionableCallControlFlow.UnsupportedHoldActionReason;
  if (!lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedHoldActionReason and conformance ActionableCallControlFlow.UnsupportedHoldActionReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedHoldActionReason and conformance ActionableCallControlFlow.UnsupportedHoldActionReason);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedHoldActionReason and conformance ActionableCallControlFlow.UnsupportedHoldActionReason;
  if (!lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedHoldActionReason and conformance ActionableCallControlFlow.UnsupportedHoldActionReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedHoldActionReason and conformance ActionableCallControlFlow.UnsupportedHoldActionReason);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedHoldActionReason and conformance ActionableCallControlFlow.UnsupportedHoldActionReason;
  if (!lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedHoldActionReason and conformance ActionableCallControlFlow.UnsupportedHoldActionReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedHoldActionReason and conformance ActionableCallControlFlow.UnsupportedHoldActionReason);
  }
  return result;
}

uint64_t type metadata accessor for HoldControlFlow()
{
  return self;
}

uint64_t OUTLINED_FUNCTION_1_26()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_2_29()
{
  return v0;
}

uint64_t key path setter for NLTransformer.nlIntentHistory : NLTransformer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 64) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t key path setter for NLTransformer.currentTransformation : NLTransformer(uint64_t a1, void *a2)
{
  outlined init with copy of TransformationResult?(a1, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for TransformationResult?);
  uint64_t v3 = *a2 + 72;
  swift_beginAccess();
  outlined assign with take of PhoneCallNLIntent?((uint64_t)v5, v3, (uint64_t *)&demangling cache variable for type metadata for TransformationResult?);
  return swift_endAccess();
}

uint64_t NLTransformer.referenceResolver.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + 120, a1);
}

uint64_t NLTransformer.__allocating_init(referenceResolver:featureManager:)(uint64_t a1, uint64_t a2)
{
  return NLTransformer.__allocating_init(referenceResolver:featureManager:)(a1, a2, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))specialized NLTransformer.__allocating_init(referenceResolver:featureManager:));
}

uint64_t NLTransformer.init(referenceResolver:featureManager:)(uint64_t a1, uint64_t a2)
{
  return NLTransformer.__allocating_init(referenceResolver:featureManager:)(a1, a2, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))specialized NLTransformer.init(referenceResolver:featureManager:));
}

uint64_t NLTransformer.__allocating_init(referenceResolver:featureManager:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = __swift_mutable_project_boxed_opaque_existential_1(a1, v7);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v12 + 16))(v11);
  uint64_t v13 = a3(v11, a2, v3, v7, v8);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v13;
}

void NLTransformer.transformToPhoneCallNLIntent(userDialogAct:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v63 = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v7 = OUTLINED_FUNCTION_11_0(v6);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  OUTLINED_FUNCTION_0_0();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_53();
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  uint64_t v15 = OUTLINED_FUNCTION_11_0(v14);
  __chkstk_darwin(v15);
  uint64_t v16 = OUTLINED_FUNCTION_25_7();
  OUTLINED_FUNCTION_0_0();
  __chkstk_darwin(v17);
  OUTLINED_FUNCTION_35_7();
  static Signpost.begin(_:)();
  uint64_t v61 = v19;
  uint64_t v62 = v18;
  uint64_t v60 = v20;
  int v59 = v21;
  static ConversionUtils.toUserParse(from:)();
  OUTLINED_FUNCTION_28_6((uint64_t)v0, 1, v16);
  if (v36)
  {
    outlined destroy of UUID?((uint64_t)v0, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.siriPhone);
    swift_retain_n();
    swift_unknownObjectRetain_n();
    id v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = OUTLINED_FUNCTION_11_7();
      uint64_t v26 = OUTLINED_FUNCTION_10_0();
      os_log_t v58 = v26;
      *(_DWORD *)uint64_t v25 = 136315394;
      uint64_t v57 = v25 + 4;
      uint64_t v28 = v0[4];
      uint64_t v27 = v0[5];
      uint64_t v30 = v0[6];
      uint64_t v29 = v0[7];
      OUTLINED_FUNCTION_20_9((uint64_t)v26);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v28, v27, v30, v29);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v65, &v66);
      OUTLINED_FUNCTION_7_22(v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_43_0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 12) = 2080;
      uint64_t v64 = v4;
      swift_unknownObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIRINLUUserDialogAct);
      uint64_t v32 = String.init<A>(describing:)();
      uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v66);
      OUTLINED_FUNCTION_39_4(v34);
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v23, v24, "%s couldn't transform UserDialogAct %s into UserParse to get the UDAs.", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {

      swift_unknownObjectRelease_n();
      OUTLINED_FUNCTION_43_0();
    }
    goto LABEL_16;
  }
  OUTLINED_FUNCTION_15_10();
  v35();
  Siri_Nlu_External_UserParse.userDialogActs.getter();
  specialized Collection.first.getter();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_28_6((uint64_t)v9, 1, v10);
  if (v36)
  {
    outlined destroy of UUID?((uint64_t)v9, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)static Logger.siriPhone);
    swift_retain_n();
    BOOL v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    int v40 = v39;
    if (os_log_type_enabled(v38, v39))
    {
      os_log_t v58 = v38;
      uint64_t v41 = OUTLINED_FUNCTION_5_22();
      int v56 = v40;
      char v42 = (uint8_t *)v41;
      uint64_t v43 = OUTLINED_FUNCTION_14_0();
      uint64_t v57 = v43;
      *(_DWORD *)char v42 = 136315138;
      v54[1] = v42 + 4;
      uint64_t v55 = v42;
      uint64_t v45 = v2[4];
      uint64_t v44 = v2[5];
      uint64_t v47 = v2[6];
      uint64_t v46 = v2[7];
      OUTLINED_FUNCTION_20_9(v43);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v45, v44, v47, v46);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v48 = OUTLINED_FUNCTION_3_29();
      OUTLINED_FUNCTION_7_22(v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_43_0();
      swift_bridgeObjectRelease();
      BOOL v38 = v58;
      _os_log_impl(&dword_0, v58, (os_log_type_t)v56, "%s no user dialog act found in userParse.", v55, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {
      OUTLINED_FUNCTION_43_0();
    }

    uint64_t v52 = OUTLINED_FUNCTION_46_4();
    v53(v52);
LABEL_16:
    OUTLINED_FUNCTION_18_10();
    goto LABEL_17;
  }
  OUTLINED_FUNCTION_15_10();
  v49();
  (*(void (**)(uint64_t))(*v0 + 216))(v1);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v1, v10);
  uint64_t v50 = OUTLINED_FUNCTION_46_4();
  v51(v50);
LABEL_17:
  Signpost.OpenSignpost.end()();
  swift_release();
  OUTLINED_FUNCTION_26_1();
}

void *specialized Array.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return specialized Array.init<A>(_:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
}

{
  return specialized Array.init<A>(_:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
}

void *specialized Array.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, unint64_t))
{
  if ((a4 & 1) == 0) {
    goto LABEL_2;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  uint64_t v11 = (void *)swift_dynamicCastClass();
  if (!v11)
  {
    swift_unknownObjectRelease();
    uint64_t v11 = _swiftEmptyArrayStorage;
  }
  uint64_t v12 = v11[2];
  swift_release();
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v12 != (a4 >> 1) - a3)
  {
LABEL_11:
    swift_unknownObjectRelease();
LABEL_2:
    uint64_t v10 = (void *)a5(a1, a2, a3, a4);
    goto LABEL_9;
  }
  uint64_t v10 = (void *)swift_dynamicCastClass();
  if (!v10)
  {
    swift_unknownObjectRelease();
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
LABEL_9:
  swift_unknownObjectRelease();
  return v10;
}

uint64_t static NLTransformer.computeHash(_:)()
{
  return Siri_Nlu_External_UserDialogAct.hashValue.getter();
}

{
  return NLIntent.hashValue.getter();
}

uint64_t TransformationResult.init(hash:nlIntent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  return outlined init with take of PhoneCallNLIntent?(a2, (uint64_t)(a3 + 1), &demangling cache variable for type metadata for PhoneCallNLIntent?);
}

void static NLTransformer.computeHash(_:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v5 = OUTLINED_FUNCTION_11_0(v4);
  __chkstk_darwin(v5);
  uint64_t v6 = OUTLINED_FUNCTION_26_9();
  OUTLINED_FUNCTION_0_0();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_37();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  uint64_t v11 = OUTLINED_FUNCTION_11_0(v10);
  __chkstk_darwin(v11);
  uint64_t v12 = OUTLINED_FUNCTION_25_7();
  OUTLINED_FUNCTION_0_0();
  uint64_t v14 = v13;
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_5_1();
  uint64_t v16 = type metadata accessor for NLTransformer();
  static ConversionUtils.toUserParse(from:)();
  OUTLINED_FUNCTION_28_6(v0, 1, v12);
  if (v23)
  {
    outlined destroy of UUID?(v0, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.siriPhone);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)OUTLINED_FUNCTION_5_22();
      uint64_t v21 = OUTLINED_FUNCTION_14_0();
      *(_DWORD *)uint64_t v20 = 136315138;
      OUTLINED_FUNCTION_20_9(v21);
      DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v16, (uint64_t)&outlined read-only object #0 of static NLTransformer.computeHash(_:), 0, 0);
      OUTLINED_FUNCTION_3_29();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v18, v19, "%s computeHash Couldn't transform UserDialogAct into UserParse to get the UDAs. Fallback to legacy hashValue.", v20, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }

    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIRINLUUserDialogAct);
    String.init<A>(describing:)();
    String.hashValue.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_41_2();
    OUTLINED_FUNCTION_15_10();
    v22();
    Siri_Nlu_External_UserParse.userDialogActs.getter();
    specialized Collection.first.getter();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_28_6(v2, 1, v6);
    if (v23)
    {
      outlined destroy of UUID?(v2, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v24 = type metadata accessor for Logger();
      __swift_project_value_buffer(v24, (uint64_t)static Logger.siriPhone);
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = (uint8_t *)OUTLINED_FUNCTION_5_22();
        OUTLINED_FUNCTION_14_0();
        *(_DWORD *)uint64_t v27 = 136315138;
        DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v16, (uint64_t)&outlined read-only object #0 of static NLTransformer.computeHash(_:), 0, 0);
        uint64_t v28 = OUTLINED_FUNCTION_3_29();
        OUTLINED_FUNCTION_7_22(v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_0, v25, v26, "%s computeHash No user dialog act found in userParse. Fallback to legacy hashValue", v27, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_6();
        OUTLINED_FUNCTION_6();
      }

      swift_unknownObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIRINLUUserDialogAct);
      String.init<A>(describing:)();
      String.hashValue.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      OUTLINED_FUNCTION_15_10();
      v29();
      Siri_Nlu_External_UserDialogAct.hashValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v3, v6);
    }
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v1, v12);
  }
  OUTLINED_FUNCTION_26_1();
}

uint64_t NLTransformer.deinit()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of UUID?(v0 + 72, (uint64_t *)&demangling cache variable for type metadata for TransformationResult?);
  __swift_destroy_boxed_opaque_existential_1(v0 + 120);
  return v0;
}

uint64_t NLTransformer.__deallocating_deinit()
{
  NLTransformer.deinit();

  return swift_deallocClassInstance();
}

uint64_t AnnounceVoicemailReadingState.voicemailsRead.getter()
{
  return *(void *)v0;
}

uint64_t TransformationResult.hash.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t TransformationResult.nlIntent.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of TransformationResult?(v1 + 8, a1, &demangling cache variable for type metadata for PhoneCallNLIntent?);
}

uint64_t TransformationResult.nlIntent.setter(uint64_t a1)
{
  return outlined assign with take of PhoneCallNLIntent?(a1, v1 + 8, &demangling cache variable for type metadata for PhoneCallNLIntent?);
}

Swift::Void (__swiftcall *TransformationResult.nlIntent.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t specialized NLTransformer.__allocating_init(referenceResolver:featureManager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a4 - 8);
  __chkstk_darwin(a1);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NLTransformer();
  uint64_t v12 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a4);
  uint64_t v13 = specialized NLTransformer.init(referenceResolver:featureManager:)((uint64_t)v11, a2, v12, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, a4);
  return v13;
}

uint64_t specialized NLTransformer.init(referenceResolver:featureManager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a4;
  uint64_t v10 = *(void *)(a4 - 8);
  __chkstk_darwin(a1);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46[3] = v13;
  v46[4] = v14;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v46);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v10 + 32))(boxed_opaque_existential_1, a1, v6);
  *(void *)(a3 + 32) = type metadata accessor for NLTransformer();
  *(void *)(a3 + 40) = &outlined read-only object #0 of specialized NLTransformer.init(referenceResolver:featureManager:);
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = _swiftEmptyArrayStorage;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = xmmword_467740;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.siriPhone);
  swift_retain_n();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  int v19 = v18;
  if (os_log_type_enabled(v17, v18))
  {
    int v38 = v19;
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    uint64_t v37 = v21;
    os_log_type_t v39 = boxed_opaque_existential_1;
    int v40 = v12;
    *(_DWORD *)uint64_t v20 = 136315138;
    uint64_t v35 = v20 + 4;
    char v36 = v20;
    uint64_t v41 = v10;
    uint64_t v42 = v6;
    uint64_t v23 = *(void *)(a3 + 32);
    uint64_t v22 = *(void *)(a3 + 40);
    uint64_t v24 = a5;
    uint64_t v25 = a2;
    uint64_t v27 = *(void *)(a3 + 48);
    uint64_t v26 = *(void *)(a3 + 56);
    uint64_t v43 = 0;
    unint64_t v44 = 0xE000000000000000;
    uint64_t v45 = v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v28 = v23;
    uint64_t v12 = v40;
    uint64_t v29 = v27;
    a5 = v24;
    DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v28, v22, v29, v26);
    a2 = v25;
    uint64_t v6 = v42;
    swift_bridgeObjectRelease();
    uint64_t v10 = v41;
    swift_bridgeObjectRelease();
    uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, &v45);
    boxed_opaque_existential_1 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v17, (os_log_type_t)v38, "%s is initialized, this function should be only be called once for each makeFlowFor", v36, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  type metadata accessor for NLv4Transformer(0);
  uint64_t v30 = swift_allocObject();
  (*(void (**)(char *, uint64_t *, uint64_t))(v10 + 16))(v12, boxed_opaque_existential_1, v6);
  swift_retain();
  *(void *)(a3 + 16) = specialized NLv4Transformer.init(referenceResolver:featureManager:)((uint64_t)v12, a2, v30, v6, a5);
  outlined init with copy of SignalProviding((uint64_t)v46, a3 + 120);
  type metadata accessor for SingleIntentCacheProvider();
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_467730;
  type metadata accessor for PhoneCallControlNLTransformer();
  uint64_t v32 = (void *)swift_allocObject();
  unint64_t v33 = specialized PhoneCallControlNLTransformer.init(cacheProvider:)(v31, v32);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  *(void *)(a3 + 24) = v33;
  return a3;
}

uint64_t type metadata accessor for NLTransformer()
{
  return self;
}

uint64_t sub_C7BA0@<X0>(uint64_t *a1@<X8>)
{
  OUTLINED_FUNCTION_22();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 128))();
  *a1 = result;
  return result;
}

uint64_t sub_C7BEC()
{
  OUTLINED_FUNCTION_22();
  return (*(uint64_t (**)(void))(v0 + 152))();
}

void *assignWithTake for TransformationResult(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  uint64_t v4 = a1 + 1;
  if (a1[4]) {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 1));
  }
  long long v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)(a2 + 8);
  *((_OWORD *)v4 + 1) = v5;
  v4[4] = *(void *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for TransformationResult()
{
  return &type metadata for TransformationResult;
}

uint64_t outlined assign with take of PhoneCallNLIntent?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  OUTLINED_FUNCTION_38_5(a1, a2, a3);
  OUTLINED_FUNCTION_15();
  uint64_t v4 = OUTLINED_FUNCTION_32_6();
  v5(v4);
  return v3;
}

uint64_t OUTLINED_FUNCTION_2_30()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_3_29()
{
  uint64_t v2 = *(void *)(v0 - 104);
  unint64_t v3 = *(void *)(v0 - 96);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v2, v3, (uint64_t *)(v0 - 88));
}

uint64_t OUTLINED_FUNCTION_7_22(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return v1 - 104;
}

uint64_t OUTLINED_FUNCTION_8_24(uint64_t a1, float a2)
{
  *uint64_t v2 = a2;
  *(void *)(v3 - 152) = v2 + 1;
  *(void *)(v3 - 144) = v2;
  *(void *)(v3 - 104) = 0;
  *(void *)(v3 - 96) = 0xE000000000000000;
  *(void *)(v3 - 88) = a1;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_12_8()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_16_15(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain();
}

double OUTLINED_FUNCTION_18_10()
{
  uint64_t v1 = *(void *)(v0 - 112);
  *(void *)(v1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)uint64_t v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_20_9(uint64_t result)
{
  *(void *)(v1 - 104) = 0;
  *(void *)(v1 - 96) = 0xE000000000000000;
  *(void *)(v1 - 88) = result;
  return result;
}

BOOL OUTLINED_FUNCTION_22_7(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_23_7(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_24_12()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_26_9()
{
  return type metadata accessor for Siri_Nlu_External_UserDialogAct();
}

uint64_t OUTLINED_FUNCTION_28_6(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_getEnumTagSinglePayload(a1, a2, a3);
}

void OUTLINED_FUNCTION_29_7()
{
  DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v3, v2, v0, v1);
}

void OUTLINED_FUNCTION_31_7()
{
  DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v2, v3, v0, v1);
}

uint64_t OUTLINED_FUNCTION_32_6()
{
  return v0;
}

__n128 OUTLINED_FUNCTION_33_4()
{
  long long v2 = *(_OWORD *)(v1 - 120);
  *(_OWORD *)uint64_t v0 = *(_OWORD *)(v1 - 136);
  *(_OWORD *)(v0 + 16) = v2;
  __n128 result = *(__n128 *)(v1 - 104);
  *(__n128 *)(v0 + 32) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_38_5(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return __swift_instantiateConcreteTypeFromMangledName(a3);
}

uint64_t OUTLINED_FUNCTION_39_4(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_45_3(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0x16u);
}

uint64_t OUTLINED_FUNCTION_46_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_50_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_51_1(uint64_t a1)
{
  *(void *)(v1 - 144) = a1;
  return v1 - 144;
}

void key path setter for INPersonCodable.wrappedValue : INPersonCodable(id *a1)
{
}

void INPersonCodable.wrappedValue.setter(void *a1)
{
  *uint64_t v1 = a1;
}

void (*INPersonCodable.wrappedValue.modify(void **a1))(uint64_t a1, char a2)
{
  uint64_t v2 = *v1;
  *a1 = *v1;
  a1[1] = v1;
  id v3 = v2;
  return INPersonCodable.wrappedValue.modify;
}

void INPersonCodable.wrappedValue.modify(uint64_t a1, char a2)
{
  id v3 = *(void **)a1;
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v4 = *v2;
  if (a2)
  {
    id v5 = v3;

    *uint64_t v2 = v5;
  }
  else
  {

    *uint64_t v2 = v3;
  }
}

void INPersonCodable.init(from:)(uint64_t a1, unint64_t a2)
{
  id v4 = objc_allocWithZone((Class)_INPBContact);
  outlined copy of Data._Representation(a1, a2);
  id v5 = @nonobjc _INPBContact.init(data:)(a1, a2);
  id v6 = (id)INIntentSlotValueTransformFromContact();

  if (v6) {
    outlined consume of Data._Representation(a1, a2);
  }
  else {
    __break(1u);
  }
}

id INPersonCodable.data.getter()
{
  id result = (id)INIntentSlotValueTransformToContact();
  if (!result)
  {
    __break(1u);
    goto LABEL_5;
  }
  id result = (id)outlined bridged method (ob) of @objc PBCodable.data.getter(result);
  if (v1 >> 60 == 15) {
LABEL_5:
  }
    __break(1u);
  return result;
}

void INPersonCodable.init(from:)(void *a1)
{
  OUTLINED_FUNCTION_2_31(a1);
  OUTLINED_FUNCTION_1_27();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1(v1);
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v8, v8[3]);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    id v3 = objc_allocWithZone((Class)_INPBContact);
    outlined copy of Data._Representation(v6, v7);
    id v4 = @nonobjc _INPBContact.init(data:)(v6, v7);
    id v5 = (id)INIntentSlotValueTransformFromContact();

    if (v5)
    {
      outlined consume of Data._Representation(v6, v7);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
      __swift_destroy_boxed_opaque_existential_1(v1);
    }
    else
    {
      __break(1u);
    }
  }
}

id INPersonCodable.encode(to:)(void *a1)
{
  OUTLINED_FUNCTION_0_21(a1);
  dispatch thunk of Encoder.singleValueContainer()();
  id result = (id)INIntentSlotValueTransformToContact();
  if (result)
  {
    id result = (id)outlined bridged method (ob) of @objc PBCodable.data.getter(result);
    if (v2 >> 60 != 15)
    {
      uint64_t v3 = (uint64_t)result;
      unint64_t v4 = v2;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v5, v6);
      lazy protocol witness table accessor for type Data and conformance Data();
      dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
      outlined consume of Data?(v3, v4);
      return (id)__swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t one-time initialization function for transformer()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Data, INPerson>);
  __swift_allocate_value_buffer(v0, static INPersonCodable.transformer);
  __swift_project_value_buffer(v0, (uint64_t)static INPersonCodable.transformer);
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INPerson);
  return Transformer.init(transform:reverseTransform:)();
}

{
  uint64_t v0;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<[Data], [INPerson]>);
  __swift_allocate_value_buffer(v0, static INPersonArrayCodable.transformer);
  __swift_project_value_buffer(v0, (uint64_t)static INPersonArrayCodable.transformer);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
  return Transformer.init(transform:reverseTransform:)();
}

{
  uint64_t v0;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<IncomingCallIntentResponse, Input>);
  __swift_allocate_value_buffer(v0, static Transformer<>.transformer);
  __swift_project_value_buffer(v0, (uint64_t)static Transformer<>.transformer);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IncomingCallIntentResponse);
  OUTLINED_FUNCTION_62_0();
  type metadata accessor for Input();
  return Transformer.init(transform:)();
}

{
  uint64_t v0;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Siri_Nlu_External_UserDialogAct, UserDialogActParse>);
  __swift_allocate_value_buffer(v0, static Transformer<>.transformer);
  __swift_project_value_buffer(v0, (uint64_t)static Transformer<>.transformer);
  type metadata accessor for Siri_Nlu_External_UserDialogAct();
  return Transformer.init(transform:)();
}

{
  uint64_t v0;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoEntity_common_Agent, INPerson?>);
  __swift_allocate_value_buffer(v0, static Transformer<>.transformer);
  __swift_project_value_buffer(v0, (uint64_t)static Transformer<>.transformer);
  type metadata accessor for UsoEntity_common_Agent();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INPerson?);
  return Transformer.init(transform:)();
}

{
  uint64_t v0;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoTask_noVerb_common_PhoneNumber, UsoTask?>);
  __swift_allocate_value_buffer(v0, static Transformer<>.transformer);
  __swift_project_value_buffer(v0, (uint64_t)static Transformer<>.transformer);
  type metadata accessor for UsoTask_noVerb_common_PhoneNumber();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoTask?);
  return Transformer.init(transform:)();
}

{
  uint64_t v0;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<String?, PersonNameComponents?>);
  __swift_allocate_value_buffer(v0, static Transformer<>.transformer);
  __swift_project_value_buffer(v0, (uint64_t)static Transformer<>.transformer);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  return Transformer.init(transform:)();
}

void closure #1 in variable initialization expression of static INPersonCodable.transformer(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  id v5 = objc_allocWithZone((Class)_INPBContact);
  outlined copy of Data._Representation(v3, v4);
  outlined copy of Data._Representation(v3, v4);
  id v6 = @nonobjc _INPBContact.init(data:)(v3, v4);
  id v7 = (id)INIntentSlotValueTransformFromContact();

  if (v7)
  {
    outlined consume of Data._Representation(v3, v4);
    *a2 = v7;
  }
  else
  {
    __break(1u);
  }
}

void closure #2 in variable initialization expression of static INPersonCodable.transformer(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = *a1;
  id v4 = (id)INIntentSlotValueTransformToContact();
  if (v4)
  {
    uint64_t v5 = outlined bridged method (ob) of @objc PBCodable.data.getter(v4);
    if (v6 >> 60 != 15)
    {
      uint64_t v7 = v5;
      uint64_t v8 = v6;

      *a2 = v7;
      a2[1] = v8;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t INPersonCodable.transformer.unsafeMutableAddressor()
{
  return INPersonCodable.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, &demangling cache variable for type metadata for Transformer<Data, INPerson>, (uint64_t)static INPersonCodable.transformer);
}

uint64_t static INPersonCodable.transformer.getter@<X0>(uint64_t a1@<X8>)
{
  return static INPersonCodable.transformer.getter(&one-time initialization token for transformer, &demangling cache variable for type metadata for Transformer<Data, INPerson>, (uint64_t)static INPersonCodable.transformer, a1);
}

void protocol witness for Decodable.init(from:) in conformance INPersonCodable(void *a1@<X0>, void *a2@<X8>)
{
  INPersonCodable.init(from:)(a1);
  if (!v2) {
    *a2 = v4;
  }
}

id protocol witness for Encodable.encode(to:) in conformance INPersonCodable(void *a1)
{
  return INPersonCodable.encode(to:)(a1);
}

uint64_t key path setter for INPersonArrayCodable.wrappedValue : INPersonArrayCodable()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  return INPersonArrayCodable.wrappedValue.setter(v0);
}

uint64_t INPersonArrayCodable.wrappedValue.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*INPersonArrayCodable.wrappedValue.modify(void *a1))(uint64_t *a1, char a2)
{
  *a1 = *v1;
  a1[1] = v1;
  swift_bridgeObjectRetain();
  return INPersonArrayCodable.wrappedValue.modify;
}

uint64_t INPersonArrayCodable.wrappedValue.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  id v3 = (void *)a1[1];
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *id v3 = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *id v3 = v2;
  }
  return result;
}

PhoneCallFlowDelegatePlugin::INPersonArrayCodable __swiftcall INPersonArrayCodable.init(from:)(Swift::OpaquePointer from)
{
  uint64_t v2 = *((void *)from._rawValue + 2);
  if (v2)
  {
    swift_bridgeObjectRetain();
    id v3 = (unint64_t *)((char *)from._rawValue + 40);
    do
    {
      uint64_t v4 = *(v3 - 1);
      unint64_t v5 = *v3;
      id v6 = objc_allocWithZone((Class)_INPBContact);
      outlined copy of Data._Representation(v4, v5);
      outlined copy of Data._Representation(v4, v5);
      id v7 = @nonobjc _INPBContact.init(data:)(v4, v5);
      id v8 = (id)INIntentSlotValueTransformFromContact();

      outlined consume of Data._Representation(v4, v5);
      if (v8)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((char *)&dword_10 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v3 += 2;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return (PhoneCallFlowDelegatePlugin::INPersonArrayCodable)_swiftEmptyArrayStorage;
}

void INPersonArrayCodable.data.getter()
{
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INPerson);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v1 = (id)INIntentSlotValueTransformToContacts();

  if (!v1) {
    goto LABEL_20;
  }
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for _INPBContact);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3) {
      goto LABEL_4;
    }
LABEL_18:
    swift_bridgeObjectRelease_n();
    return;
  }
  uint64_t v3 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  if (!v3) {
    goto LABEL_18;
  }
LABEL_4:
  if (v3 >= 1)
  {
    uint64_t v4 = 0;
    unint64_t v5 = _swiftEmptyArrayStorage;
    do
    {
      if ((v2 & 0xC000000000000001) != 0) {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v6 = *(id *)(v2 + 8 * v4 + 32);
      }
      id v7 = v6;
      uint64_t v8 = outlined bridged method (pb) of @objc PBCodable.data.getter(v6);
      unint64_t v10 = v9;

      if (v10 >> 60 != 15)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          unint64_t v5 = v13;
        }
        unint64_t v11 = v5[2];
        if (v11 >= v5[3] >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          unint64_t v5 = v14;
        }
        v5[2] = v11 + 1;
        uint64_t v12 = &v5[2 * v11];
        void v12[4] = v8;
        v12[5] = v10;
      }
      ++v4;
    }
    while (v3 != v4);
    goto LABEL_18;
  }
  __break(1u);
LABEL_20:
  __break(1u);
}

void *INPersonArrayCodable.init(from:)(void *a1)
{
  OUTLINED_FUNCTION_2_31(a1);
  OUTLINED_FUNCTION_1_27();
  if (!v3)
  {
    __swift_project_boxed_opaque_existential_1(v6, v6[3]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data]);
    lazy protocol witness table accessor for type [Data] and conformance <A> [A](&lazy protocol witness table cache variable for type [Data] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type Data and conformance Data);
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    rawValue = INPersonArrayCodable.init(from:)(from).persons._rawValue;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  }
  __swift_destroy_boxed_opaque_existential_1(v1);
  return rawValue;
}

uint64_t INPersonArrayCodable.encode(to:)(void *a1)
{
  OUTLINED_FUNCTION_0_21(a1);
  dispatch thunk of Encoder.singleValueContainer()();
  INPersonArrayCodable.data.getter();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data]);
  lazy protocol witness table accessor for type [Data] and conformance <A> [A](&lazy protocol witness table cache variable for type [Data] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type Data and conformance Data);
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

PhoneCallFlowDelegatePlugin::INPersonArrayCodable closure #1 in variable initialization expression of static INPersonArrayCodable.transformer@<X0>(PhoneCallFlowDelegatePlugin::INPersonArrayCodable *a1@<X8>)
{
  uint64_t v2 = swift_bridgeObjectRetain();
  result.persons._rawValue = INPersonArrayCodable.init(from:)((Swift::OpaquePointer)v2).persons._rawValue;
  a1->persons._rawValue = result.persons._rawValue;
  return result;
}

uint64_t closure #2 in variable initialization expression of static INPersonArrayCodable.transformer@<X0>(void *a1@<X8>)
{
  swift_bridgeObjectRetain();
  INPersonArrayCodable.data.getter();
  uint64_t v3 = v2;
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t INPersonArrayCodable.transformer.unsafeMutableAddressor()
{
  return INPersonCodable.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, &demangling cache variable for type metadata for Transformer<[Data], [INPerson]>, (uint64_t)static INPersonArrayCodable.transformer);
}

uint64_t INPersonCodable.transformer.unsafeMutableAddressor(void *a1, uint64_t *a2, uint64_t a3)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a2);

  return __swift_project_value_buffer(v5, a3);
}

uint64_t static INPersonArrayCodable.transformer.getter@<X0>(uint64_t a1@<X8>)
{
  return static INPersonCodable.transformer.getter(&one-time initialization token for transformer, &demangling cache variable for type metadata for Transformer<[Data], [INPerson]>, (uint64_t)static INPersonArrayCodable.transformer, a1);
}

uint64_t static INPersonCodable.transformer.getter@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v8 = __swift_project_value_buffer(v7, a3);
  unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);

  return v9(a4, v8, v7);
}

void *protocol witness for Decodable.init(from:) in conformance INPersonArrayCodable@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = INPersonArrayCodable.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance INPersonArrayCodable(void *a1)
{
  return INPersonArrayCodable.encode(to:)(a1);
}

id @nonobjc _INPBContact.init(data:)(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 == 15)
  {
    Class isa = 0;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data?(a1, a2);
  }
  id v6 = [v2 initWithData:isa];

  return v6;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

uint64_t outlined bridged method (pb) of @objc PBCodable.data.getter(void *a1)
{
  id v1 = [a1 data];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t lazy protocol witness table accessor for type [Data] and conformance <A> [A](unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Data]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_C9104@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = AnnounceCallsContext.incomingCall.getter(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_C9134@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = AppNameSpecifiedByUserSignalCollectionHistory.apps.getter(*a1);
  *a2 = result;
  return result;
}

ValueMetadata *type metadata accessor for INPersonCodable()
{
  return &type metadata for INPersonCodable;
}

ValueMetadata *type metadata accessor for INPersonArrayCodable()
{
  return &type metadata for INPersonArrayCodable;
}

void *OUTLINED_FUNCTION_0_21(void *a1)
{
  uint64_t v2 = a1[3];
  return __swift_project_boxed_opaque_existential_1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_1_27()
{
  return dispatch thunk of Decoder.singleValueContainer()(v0, v1);
}

void *OUTLINED_FUNCTION_2_31(void *a1)
{
  uint64_t v2 = a1[3];
  return __swift_project_boxed_opaque_existential_1(a1, v2);
}

unint64_t key path setter for AnnounceVoicemailReadingFlow.state : AnnounceVoicemailReadingFlow(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  unint64_t v4 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = v2;
  outlined copy of AnnounceVoicemailReadingFlow.State(v2);
  return outlined consume of AnnounceVoicemailReadingFlow.State(v4);
}

unint64_t AnnounceVoicemailReadingFlow.state.getter()
{
  swift_beginAccess();
  unint64_t v1 = *(void *)(v0 + 16);
  outlined copy of AnnounceVoicemailReadingFlow.State(v1);
  return v1;
}

unint64_t outlined copy of AnnounceVoicemailReadingFlow.State(unint64_t result)
{
  if (result >= 3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

double key path getter for AnnounceVoicemailReadingFlow.readingState : AnnounceVoicemailReadingFlow@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(_OWORD *__return_ptr))(**(void **)a1 + 160))(v5);
  long long v3 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v3;
  double result = *(double *)&v6;
  *(_OWORD *)(a2 + 32) = v6;
  *(unsigned char *)(a2 + 48) = v7;
  return result;
}

uint64_t key path setter for AnnounceVoicemailReadingFlow.readingState : AnnounceVoicemailReadingFlow(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  long long v9 = *((_OWORD *)a1 + 1);
  uint64_t v5 = a1[4];
  uint64_t v4 = a1[5];
  char v6 = *((unsigned char *)a1 + 48);
  uint64_t v7 = *a2;
  swift_beginAccess();
  *(void *)(v7 + 24) = v3;
  *(void *)(v7 + 32) = v2;
  *(_OWORD *)(v7 + 40) = v9;
  *(void *)(v7 + 56) = v5;
  *(void *)(v7 + 64) = v4;
  *(unsigned char *)(v7 + 72) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t AnnounceVoicemailReadingFlow.readingState.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 56);
  uint64_t v5 = *(void *)(v1 + 64);
  char v6 = *(unsigned char *)(v1 + 72);
  *(void *)a1 = *(void *)(v1 + 24);
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 40);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = v6;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

double AnnounceVoicemailReadingFlow.exitValue.getter@<D0>(uint64_t a1@<X8>)
{
  (*(void (**)(_OWORD *__return_ptr))(*(void *)v1 + 160))(v5);
  long long v3 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v3;
  double result = *(double *)&v6;
  *(_OWORD *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 48) = v7;
  return result;
}

void AnnounceVoicemailReadingFlow.__allocating_init(synchronousBurstIndex:voicemail:hintHistory:burstNotificationManager:sharedGlobals:announceVoicemailCats:)()
{
  OUTLINED_FUNCTION_12_9();
  OUTLINED_FUNCTION_3_30(v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_1();
  __chkstk_darwin(v6);
  uint64_t v8 = OUTLINED_FUNCTION_1_28(v7, v19);
  v9(v8);
  double v10 = OUTLINED_FUNCTION_4_26();
  specialized AnnounceVoicemailReadingFlow.__allocating_init(synchronousBurstIndex:voicemail:hintHistory:burstNotificationManager:sharedGlobals:announceVoicemailCats:)(v11, v12, v13, v14, v15, v16, v17, v18, v10, v20, v21);
  __swift_destroy_boxed_opaque_existential_1(v0);
  OUTLINED_FUNCTION_11_15();
}

void AnnounceVoicemailReadingFlow.__allocating_init(state:readingState:hintHistory:burstNotificationManager:sharedGlobals:announceVoicemailCats:)()
{
  OUTLINED_FUNCTION_12_9();
  uint64_t v24 = v1;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  double v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v16 = swift_allocObject();
  uint64_t v18 = *(void *)(v5 + 24);
  uint64_t v17 = *(void *)(v5 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(v5, v18);
  OUTLINED_FUNCTION_1();
  __chkstk_darwin(v19);
  uint64_t v21 = OUTLINED_FUNCTION_1_28(v20, v23);
  v22(v21);
  specialized AnnounceVoicemailReadingFlow.init(state:readingState:hintHistory:burstNotificationManager:sharedGlobals:announceVoicemailCats:)(v15, v13, v11, v9, v0, v3, v24, v16, v7, v18, v17);
  __swift_destroy_boxed_opaque_existential_1(v5);
  OUTLINED_FUNCTION_11_15();
}

void AnnounceVoicemailReadingFlow.init(state:readingState:hintHistory:burstNotificationManager:sharedGlobals:announceVoicemailCats:)()
{
  OUTLINED_FUNCTION_12_9();
  OUTLINED_FUNCTION_3_30(v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_1();
  __chkstk_darwin(v6);
  uint64_t v8 = OUTLINED_FUNCTION_1_28(v7, v19);
  v9(v8);
  double v10 = OUTLINED_FUNCTION_4_26();
  specialized AnnounceVoicemailReadingFlow.init(state:readingState:hintHistory:burstNotificationManager:sharedGlobals:announceVoicemailCats:)(v11, v12, v13, v14, v15, v16, v17, v18, v10, v20, v21);
  __swift_destroy_boxed_opaque_existential_1(v0);
  OUTLINED_FUNCTION_11_15();
}

uint64_t AnnounceVoicemailReadingFlow.execute(completion:)()
{
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t AnnounceVoicemailReadingFlow.execute()(uint64_t a1)
{
  *(void *)(v2 + 568) = v1;
  *(void *)(v2 + 560) = a1;
  return _swift_task_switch(AnnounceVoicemailReadingFlow.execute(), 0, 0);
}

uint64_t AnnounceVoicemailReadingFlow.execute()()
{
  uint64_t v52 = v0;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 576) = __swift_project_value_buffer(v1, (uint64_t)static Logger.siriPhone);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = *(void *)(v0 + 568);
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v51 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    *(void *)(v0 + 544) = (*(uint64_t (**)(void))(*(void *)v5 + 136))();
    uint64_t v7 = String.init<A>(describing:)();
    *(void *)(v0 + 552) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_0, v2, v3, "#AnnounceVoicemailReadingFlow .execute, state=%s", v6, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
    swift_release_n();
  }
  uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(v0 + 568) + 136))();
  if (v9)
  {
    unint64_t v10 = v9;
    if (v9 == 1)
    {
      BOOL v24 = AnnounceVoicemailReadingFlow.shouldAttemptToReadHint.getter();
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.debug.getter();
      BOOL v27 = os_log_type_enabled(v25, v26);
      if (!v24)
      {
        if (v27)
        {
          uint64_t v45 = (uint8_t *)OUTLINED_FUNCTION_7_2();
          *(_WORD *)uint64_t v45 = 0;
          _os_log_impl(&dword_0, v25, v26, "#AnnounceVoicemailReadingFlow Not attempting to read hint for voicemail announcement.", v45, 2u);
          OUTLINED_FUNCTION_6();
        }
        uint64_t v46 = *(void *)(v0 + 568);

        swift_beginAccess();
        unint64_t v47 = *(void *)(v46 + 16);
        *(void *)(v46 + 16) = 2;
        outlined consume of AnnounceVoicemailReadingFlow.State(v47);
        static ExecuteResponse.replan(requireInput:)();
        goto LABEL_22;
      }
      if (v27)
      {
        uint64_t v28 = (uint8_t *)OUTLINED_FUNCTION_7_2();
        *(_WORD *)uint64_t v28 = 0;
        _os_log_impl(&dword_0, v25, v26, "#AnnounceVoicemailReadingFlow Attempting to read hint for voicemail announcement.", v28, 2u);
        OUTLINED_FUNCTION_6();
      }
      uint64_t v29 = *(void **)(v0 + 568);

      uint64_t v30 = v29[22];
      uint64_t v31 = v29[23];
      __swift_project_boxed_opaque_existential_1(v29 + 19, v30);
      (*(void (**)(uint64_t, uint64_t))(v31 + 16))(v30, v31);
      long long v50 = *(_OWORD *)(v0 + 264);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 240), *(void *)(v0 + 264));
      *(_OWORD *)(v0 + 400) = v50;
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 376));
      OUTLINED_FUNCTION_10();
      (*(void (**)(void))(v32 + 16))();
      type metadata accessor for SimpleOutputFlow();
      OUTLINED_FUNCTION_21_0();
      swift_retain();
      uint64_t v33 = SimpleOutputFlow.init(outputPublisher:_:)();
      __swift_destroy_boxed_opaque_existential_1(v0 + 240);
      *(void *)(v0 + 528) = v33;
      uint64_t v34 = OUTLINED_FUNCTION_18_1();
      *(void *)(v34 + 16) = partial apply for implicit closure #6 in implicit closure #5 in AnnounceVoicemailReadingFlow.execute();
      *(void *)(v34 + 24) = v29;
      swift_retain();
      static ExecuteResponse.ongoing<A>(next:childCompletion:)();
    }
    else
    {
      if (v9 == 2)
      {
        static ExecuteResponse.complete()();
LABEL_22:
        uint64_t v48 = *(uint64_t (**)(void))(v0 + 8);
        return v48();
      }
      uint64_t v35 = *(void **)(v0 + 568);
      uint64_t v36 = v35[22];
      uint64_t v37 = v35[23];
      __swift_project_boxed_opaque_existential_1(v35 + 19, v36);
      (*(void (**)(uint64_t, uint64_t))(v37 + 16))(v36, v37);
      uint64_t v38 = *(void *)(v0 + 312);
      uint64_t v39 = *(void *)(v0 + 320);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 288), v38);
      *(void *)(v0 + 360) = v38;
      *(void *)(v0 + 368) = v39;
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 336));
      OUTLINED_FUNCTION_10();
      (*(void (**)(void))(v40 + 16))();
      uint64_t v41 = OUTLINED_FUNCTION_18_1();
      *(void *)(v41 + 16) = v35;
      *(void *)(v41 + 24) = v10;
      type metadata accessor for SimpleOutputFlow();
      OUTLINED_FUNCTION_21_0();
      swift_retain();
      outlined copy of AnnounceVoicemailReadingFlow.State(v10);
      uint64_t v42 = SimpleOutputFlow.init(outputPublisher:_:)();
      __swift_destroy_boxed_opaque_existential_1(v0 + 288);
      *(void *)(v0 + 536) = v42;
      uint64_t v43 = OUTLINED_FUNCTION_18_1();
      *(void *)(v43 + 16) = v35;
      *(void *)(v43 + 24) = v10;
      uint64_t v44 = OUTLINED_FUNCTION_18_1();
      *(void *)(v44 + 16) = partial apply for closure #1 in AnnounceVoicemailReadingFlow.announcementCompleted(voicemails:);
      *(void *)(v44 + 24) = v43;
      swift_retain();
      outlined copy of AnnounceVoicemailReadingFlow.State(v10);
      static ExecuteResponse.ongoing<A>(next:childCompletion:)();
      outlined consume of AnnounceVoicemailReadingFlow.State(v10);
    }
    swift_release();
    swift_release();
    goto LABEL_22;
  }
  uint64_t v11 = *(void **)(v0 + 568);
  static Signpost.begin(_:)();
  *(void *)(v0 + 584) = v12;
  *(void *)(v0 + 592) = v13;
  *(void *)(v0 + 600) = v14;
  *(_WORD *)(v0 + 66) = v15;
  uint64_t v17 = v11[16];
  uint64_t v16 = v11[17];
  __swift_project_boxed_opaque_existential_1(v11 + 13, v17);
  uint64_t v18 = *(void (**)(void))(*v11 + 160);
  uint64_t v19 = *v11 + 160;
  *(void *)(v0 + 608) = v18;
  *(void *)(v0 + 616) = v19 & 0xFFFFFFFFFFFFLL | 0xD77000000000000;
  v18();
  uint64_t v20 = *(void *)(v0 + 48);
  uint64_t v21 = *(void *)(v0 + 56);
  *(void *)(v0 + 624) = v21;
  swift_bridgeObjectRetain();
  outlined release of AnnounceVoicemailReadingState(v0 + 16);
  unint64_t v49 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 + 8) + **(int **)(v16 + 8));
  uint64_t v22 = (void *)swift_task_alloc();
  *(void *)(v0 + 632) = v22;
  *uint64_t v22 = v0;
  v22[1] = AnnounceVoicemailReadingFlow.execute();
  return v49(v20, v21, v17, v16);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  v4[80] = v3;
  v4[81] = v5;
  v4[82] = v6;
  v4[83] = v7;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(AnnounceVoicemailReadingFlow.execute(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  void (*v6)(void);
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t (*v25)(void);
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;

  uint64_t v29 = v0;
  BOOL v27 = v0 + 9;
  uint64_t v1 = v0[83];
  uint64_t v2 = v0[82];
  os_log_type_t v3 = v0[81];
  swift_beginAccess();
  AnnounceVoicemailReadingState.update(_:)(v3, v2, v1, (uint64_t)(v0 + 23));
  swift_endAccess();
  outlined release of AnnounceVoicemailReadingState((uint64_t)(v0 + 23));
  swift_retain_n();
  BOOL v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (void (*)(void))v0[76];
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    v6();
    AnnounceVoicemailReadingState.description.getter();
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    outlined release of AnnounceVoicemailReadingState((uint64_t)(v0 + 16));
    v0[64] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_0, v4, v5, "#AnnounceVoicemailReadingFlow Updated reading state: %s", v7, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
    swift_release_n();
  }

  ((void (*)(void))v0[76])();
  uint64_t v12 = v0[10];
  v0[65] = v12;
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    outlined release of Set<String>((uint64_t)(v0 + 65));
  }
  else
  {
    uint64_t v13 = *(void *)((char *)&dword_10 + (v12 & 0xFFFFFFFFFFFFFF8));
  }
  outlined release of AnnounceVoicemailReadingState((uint64_t)v27);
  if (v13 == *v27)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v14 = Logger.logObject.getter();
    __int16 v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
      OUTLINED_FUNCTION_15_11(&dword_0, v16, v17, "#AnnounceVoicemailReadingFlow Found no incoming voicemails in burst. Try hinting.");
      OUTLINED_FUNCTION_6();
    }

    uint64_t v18 = 1;
  }
  else
  {
    uint64_t v19 = Logger.logObject.getter();
    uint64_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
      OUTLINED_FUNCTION_15_11(&dword_0, v21, v22, "#AnnounceVoicemailReadingFlow Found incoming voicemails in burst. Back to reading.");
      OUTLINED_FUNCTION_6();
    }
    uint64_t v18 = v0[80];

    swift_bridgeObjectRelease();
  }
  uint64_t v23 = v0[71];
  swift_beginAccess();
  BOOL v24 = *(void *)(v23 + 16);
  *(void *)(v23 + 16) = v18;
  outlined consume of AnnounceVoicemailReadingFlow.State(v24);
  Signpost.OpenSignpost.end()();
  static ExecuteResponse.replan(requireInput:)();
  swift_release();
  uint64_t v25 = (uint64_t (*)(void))v0[1];
  return v25();
}

Swift::Int AnnounceVoicemailReadingFlow.makeAnnouncement(voicemails:completion:)(unint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<AnyPublisher<TemplatingResult, Error>, Output>);
  OUTLINED_FUNCTION_1();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = a1 >> 62;
  if (a1 >> 62)
  {
    OUTLINED_FUNCTION_7_23();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    if (v15)
    {
LABEL_3:
      uint64_t v44 = a2;
      uint64_t v47 = v10;
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (a1 & 0xC000000000000001) == 0, a1);
      uint64_t v48 = v8;
      uint64_t v45 = a3;
      uint64_t v46 = v13;
      if ((a1 & 0xC000000000000001) != 0) {
        id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v16 = *(id *)(a1 + 32);
      }
      uint64_t v17 = v16;
      swift_bridgeObjectRelease();
      uint64_t v18 = OUTLINED_FUNCTION_18_1();
      *(void *)(v18 + 16) = v3;
      *(void *)(v18 + 24) = v17;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<TemplatingResult, Error>);
      OUTLINED_FUNCTION_21_0();
      swift_retain();
      id v19 = v17;
      v50[0] = Future.init(_:)();
      lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type Future<TemplatingResult, Error> and conformance Future<A, B>, &demangling cache variable for type metadata for Future<TemplatingResult, Error>);
      uint64_t v20 = Publisher.eraseToAnyPublisher()();
      Swift::Int result = swift_release();
      if (v15 < 1)
      {
        __break(1u);
      }
      else
      {
        if (v14)
        {
          OUTLINED_FUNCTION_7_23();
          Swift::Int result = _CocoaArrayWrapper.endIndex.getter();
          if (result < 1)
          {
LABEL_29:
            __break(1u);
            return result;
          }
          swift_bridgeObjectRetain();
          uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
          Swift::Int result = swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v22 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
          if (!v22)
          {
LABEL_28:
            __break(1u);
            goto LABEL_29;
          }
          Swift::Int result = swift_bridgeObjectRetain();
        }
        if (v22 >= v15)
        {
          id v43 = v19;
          if ((a1 & 0xC000000000000001) != 0 && v15 != 1)
          {
            type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INCallRecord);
            Swift::Int result = 1;
            do
            {
              Swift::Int v23 = result + 1;
              _ArrayBuffer._typeCheckSlowPath(_:)(result);
              Swift::Int result = v23;
            }
            while (v15 != v23);
          }
          uint64_t v24 = v20;
          if (v14)
          {
            OUTLINED_FUNCTION_7_23();
            uint64_t v25 = _CocoaArrayWrapper.subscript.getter();
            uint64_t v26 = v29;
            uint64_t v27 = v30;
            unint64_t v28 = v31;
            Swift::Int result = swift_bridgeObjectRelease_n();
          }
          else
          {
            uint64_t v25 = a1 & 0xFFFFFFFFFFFFFF8;
            uint64_t v26 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
            uint64_t v27 = 1;
            unint64_t v28 = (2 * v15) | 1;
          }
          if ((uint64_t)(v28 >> 1) >= v27)
          {
            v50[0] = v27;
            v50[1] = v28 >> 1;
            v50[2] = v25;
            void v50[3] = v26;
            v50[4] = v27;
            unint64_t v51 = v28;
            swift_retain();
            swift_unknownObjectRetain();
            specialized Sequence.reduce<A>(_:_:)(v24, v50, v4);
            uint64_t v33 = v32;
            swift_unknownObjectRelease();
            uint64_t v49 = v33;
            uint64_t v34 = OUTLINED_FUNCTION_18_1();
            id v35 = v43;
            *(void *)(v34 + 16) = v4;
            *(void *)(v34 + 24) = v35;
            swift_retain();
            id v43 = v35;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<TemplatingResult, Error>);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Output);
            lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<TemplatingResult, Error> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<TemplatingResult, Error>);
            uint64_t v36 = v46;
            Publisher.map<A>(_:)();
            swift_release();
            uint64_t v37 = OUTLINED_FUNCTION_18_1();
            uint64_t v38 = v44;
            uint64_t v39 = v45;
            *(void *)(v37 + 16) = v44;
            *(void *)(v37 + 24) = v39;
            uint64_t v40 = OUTLINED_FUNCTION_18_1();
            *(void *)(v40 + 16) = v38;
            *(void *)(v40 + 24) = v39;
            lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Map<AnyPublisher<TemplatingResult, Error>, Output> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<AnyPublisher<TemplatingResult, Error>, Output>);
            swift_retain_n();
            uint64_t v41 = v48;
            uint64_t v42 = Publisher.sink(receiveCompletion:receiveValue:)();

            swift_unknownObjectRelease();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            (*(void (**)(char *, uint64_t))(v47 + 8))(v36, v41);
            *(void *)(v4 + 192) = v42;
            return swift_release();
          }
          goto LABEL_27;
        }
      }
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v15 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (v15) {
      goto LABEL_3;
    }
  }
  swift_bridgeObjectRelease();
  type metadata accessor for EmptyOutput();
  static EmptyOutput.instance.getter();
  LOBYTE(v51) = 0;
  a2(v50);
  return _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0((uint64_t)v50, &demangling cache variable for type metadata for Result<Output, Error>);
}

uint64_t closure #1 in AnnounceVoicemailReadingFlow.makeAnnouncement(voicemails:completion:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  void (*v14)(void *__return_ptr, uint64_t);
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  __CFString *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  double v23;
  void v24[4];
  void v25[2];
  uint64_t v26;
  void v27[8];

  uint64_t v8 = type metadata accessor for Locale();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (uint64_t *)((char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = (void *)a3[18];
  unint64_t v14 = *(void (**)(void *__return_ptr, uint64_t))(*a3 + 160);
  v14(v25, v10);
  Swift::Int result = outlined release of AnnounceVoicemailReadingState((uint64_t)v25);
  if (__OFADD__(v26, v25[0]))
  {
    __break(1u);
  }
  else
  {
    Swift::Int v23 = (double)(v26 + v25[0]);
    v14(v27, result);
    outlined release of AnnounceVoicemailReadingState((uint64_t)v27);
    uint64_t v22 = a2;
    uint64_t v21 = v27[0] > 0;
    type metadata accessor for AppInfoBuilder();
    id v16 = a1;
    uint64_t v17 = swift_allocObject();
    uint64_t v18 = a4;
    static Device.current.getter();
    __swift_project_boxed_opaque_existential_1(v24, v24[3]);
    dispatch thunk of DeviceState.siriLocale.getter();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    swift_retain();
    specialized static PhoneCallRecord.getBuilder(callRecord:options:appInfoBuilder:locale:)(v18, 0, v17, v12);
    type metadata accessor for PhoneCallRecord(0);
    swift_allocObject();
    id v19 = PhoneCallRecord.init(builder:)();

    (*(void (**)(void *, uint64_t))(v9 + 8))(v12, v8);
    swift_release_n();
    (*(void (**)(double, void, BOOL, uint64_t, uint64_t, uint64_t))(*v13
                                                                              + class metadata base offset for AnnounceVoicemailCATs))(COERCE_DOUBLE(*(void *)&v23), 0, v21, v19, v16, v22);
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #2 in AnnounceVoicemailReadingFlow.makeAnnouncement(voicemails:completion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10 = type metadata accessor for TemplatingResult();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v14 = (char *)swift_allocObject();
  *((void *)v14 + 2) = a2;
  *((void *)v14 + 3) = a3;
  *((void *)v14 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v14[v13], (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<TemplatingResult, Error>);
  swift_allocObject();
  swift_retain();
  id v15 = a4;
  uint64_t result = Future.init(_:)();
  *a5 = result;
  return result;
}

uint64_t closure #1 in closure #1 in closure #2 in AnnounceVoicemailReadingFlow.makeAnnouncement(voicemails:completion:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v40 = a6;
  uint64_t v11 = type metadata accessor for TemplatingResult();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v39 = v13;
  uint64_t v41 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for Locale();
  uint64_t v14 = *(void *)(v38 - 8);
  uint64_t v15 = __chkstk_darwin(v38);
  uint64_t v17 = (uint64_t *)((char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = (void *)a3[18];
  (*(void (**)(void *__return_ptr, uint64_t))(*a3 + 160))(v43, v15);
  uint64_t result = outlined release of AnnounceVoicemailReadingState((uint64_t)v43);
  uint64_t v20 = v44 + v43[0];
  if (__OFADD__(v44, v43[0]))
  {
    __break(1u);
  }
  else
  {
    BOOL v21 = __OFADD__(v20, a4);
    uint64_t v22 = v20 + a4;
    if (!v21)
    {
      double v37 = (double)v22;
      type metadata accessor for AppInfoBuilder();
      uint64_t v23 = swift_allocObject();
      uint64_t v24 = a5;
      uint64_t v35 = a1;
      uint64_t v36 = a2;
      uint64_t v25 = v24;
      static Device.current.getter();
      uint64_t v26 = v18;
      __swift_project_boxed_opaque_existential_1(v42, v42[3]);
      dispatch thunk of DeviceState.siriLocale.getter();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
      swift_retain();
      specialized static PhoneCallRecord.getBuilder(callRecord:options:appInfoBuilder:locale:)(v25, 0, v23, v17);
      type metadata accessor for PhoneCallRecord(0);
      swift_allocObject();
      uint64_t v27 = PhoneCallRecord.init(builder:)();

      (*(void (**)(void *, uint64_t))(v14 + 8))(v17, v38);
      swift_release_n();
      unint64_t v28 = v41;
      (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v41, v40, v11);
      unint64_t v29 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      unint64_t v30 = (v39 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v31 = swift_allocObject();
      (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v31 + v29, v28, v11);
      uint64_t v32 = (void *)(v31 + v30);
      uint64_t v33 = v36;
      *uint64_t v32 = v35;
      v32[1] = v33;
      uint64_t v34 = *(void (**)(void, void, uint64_t, uint64_t, uint64_t (*)(uint64_t), uint64_t))(*v26 + class metadata base offset for AnnounceVoicemailCATs);
      swift_retain();
      v34(*(void *)&v37, 0, 1, v27, partial apply for closure #1 in closure #1 in closure #1 in closure #2 in AnnounceVoicemailReadingFlow.makeAnnouncement(voicemails:completion:), v31);
      swift_release();
      return swift_release();
    }
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in closure #2 in AnnounceVoicemailReadingFlow.makeAnnouncement(voicemails:completion:)(uint64_t a1, uint64_t a2, void (*a3)(char *))
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BehaviorAfterSpeaking?);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v17 - v12;
  uint64_t v14 = type metadata accessor for TemplatingResult();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v13, a2, v14);
  swift_storeEnumTagMultiPayload();
  uint64_t v15 = type metadata accessor for BehaviorAfterSpeaking();
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 1, 1, v15);
  specialized Result<>.merge(with:behaviorAfterSpeaking:)();
  _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0((uint64_t)v7, &demangling cache variable for type metadata for BehaviorAfterSpeaking?);
  a3(v11);
  _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0((uint64_t)v11, &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  return _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0((uint64_t)v13, &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
}

void specialized Sequence.reduce<A>(_:_:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.FlatMap<Future<TemplatingResult, Error>, AnyPublisher<TemplatingResult, Error>>);
  uint64_t v8 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v33 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *a2;
  uint64_t v11 = a2[1];
  if (*a2 == v11)
  {
    swift_retain();
LABEL_6:
    swift_release();
    return;
  }
  if (v11 < v10) {
    goto LABEL_19;
  }
  if (v10 < v11)
  {
    uint64_t v12 = a2[4];
    uint64_t v32 = a2[3];
    uint64_t v13 = a2[5] >> 1;
    swift_retain();
    if (v12 == v13) {
      goto LABEL_6;
    }
    uint64_t v26 = a2;
    uint64_t v27 = v4;
    uint64_t v31 = v13;
    outlined retain of Zip2Sequence<Range<Int>, ArraySlice<INCallRecord>>((uint64_t)a2);
    uint64_t v14 = v31;
    uint64_t v29 = a3;
    unint64_t v30 = (void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v15 = v10 + 1;
    uint64_t v28 = v10;
    while (v12 < v14)
    {
      uint64_t v16 = *(void **)(v32 + 8 * v12);
      uint64_t v39 = a1;
      uint64_t v17 = (void *)swift_allocObject();
      v17[2] = a3;
      v17[3] = v15 - 1;
      v17[4] = v16;
      id v38 = v16;
      swift_retain();
      uint64_t v36 = static Subscribers.Demand.unlimited.getter();
      uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<TemplatingResult, Error>);
      type metadata accessor for TemplatingResult();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<TemplatingResult, Error>);
      uint64_t v37 = a1;
      lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<TemplatingResult, Error> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<TemplatingResult, Error>);
      lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type Future<TemplatingResult, Error> and conformance Future<A, B>, &demangling cache variable for type metadata for Future<TemplatingResult, Error>);
      uint64_t v18 = v11;
      id v19 = v33;
      Publisher.flatMap<A, B>(maxPublishers:_:)();
      swift_release();
      lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type Publishers.FlatMap<Future<TemplatingResult, Error>, AnyPublisher<TemplatingResult, Error>> and conformance Publishers.FlatMap<A, B>, &demangling cache variable for type metadata for Publishers.FlatMap<Future<TemplatingResult, Error>, AnyPublisher<TemplatingResult, Error>>);
      uint64_t v20 = v34;
      uint64_t v21 = Publisher.eraseToAnyPublisher()();
      id v22 = v38;

      uint64_t v23 = v19;
      uint64_t v11 = v18;
      (*v30)(v23, v20);
      swift_release();

      if (v18 == v15) {
        goto LABEL_16;
      }
      if (v15 < v28 || v15 >= v18) {
        goto LABEL_18;
      }
      ++v12;
      ++v15;
      a1 = v21;
      uint64_t v14 = v31;
      a3 = v29;
      if (v31 == v12)
      {
LABEL_16:
        outlined release of Zip2Sequence<Range<Int>, ArraySlice<INCallRecord>>((uint64_t)v26);
        swift_release();
        return;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  __break(1u);
}

uint64_t closure #3 in AnnounceVoicemailReadingFlow.makeAnnouncement(voicemails:completion:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  id v52 = a3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin(v7 - 8);
  uint64_t v55 = (uint64_t)v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for AceOutput();
  uint64_t v53 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  uint64_t v57 = (char *)v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TemplatingResult();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = __swift_project_value_buffer(v14, (uint64_t)static Logger.siriPhone);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v56 = a1;
  v16(v13, a1, v10);
  uint64_t v51 = v15;
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    id v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v50 = swift_slowAlloc();
    v63[0] = v50;
    uint64_t v49 = v19;
    *(_DWORD *)id v19 = 136315138;
    v47[1] = v19 + 4;
    TemplatingResult.sections.getter();
    type metadata accessor for TemplatingSection();
    uint64_t v20 = Array.description.getter();
    os_log_t v48 = v17;
    uint64_t v21 = a4;
    uint64_t v22 = v20;
    unint64_t v24 = v23;
    swift_bridgeObjectRelease();
    uint64_t v25 = v22;
    a4 = v21;
    *(void *)&long long v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v24, v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    os_log_t v26 = v48;
    _os_log_impl(&dword_0, v48, v18, "#AnnounceVoicemailReadingFlow announcement = %s", v49, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  uint64_t v27 = a2[22];
  uint64_t v28 = a2[23];
  __swift_project_boxed_opaque_existential_1(a2 + 19, v27);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v28 + 8))(v63, v27, v28);
  uint64_t v29 = a2[22];
  uint64_t v30 = a2[23];
  __swift_project_boxed_opaque_existential_1(a2 + 19, v29);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v30 + 8))(&v60, v29, v30);
  __swift_project_boxed_opaque_existential_1(&v60, v61);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  uint64_t v31 = type metadata accessor for NLContextUpdate();
  uint64_t v32 = v55;
  __swift_storeEnumTagSinglePayload(v55, 1, 1, v31);
  uint64_t v59 = 0;
  memset(v58, 0, sizeof(v58));
  uint64_t v33 = v57;
  static AceOutputHelper.makeConfirmedViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0((uint64_t)v58, &demangling cache variable for type metadata for FlowActivity?);
  _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v32, &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
  uint64_t v34 = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v60);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*a2 + 160))(v63, v34);
  uint64_t result = outlined release of AnnounceVoicemailReadingState((uint64_t)v63);
  if (__OFADD__(v64, v63[0]))
  {
    __break(1u);
  }
  else if (v64 + v63[0])
  {
    uint64_t v36 = v54;
    a4[3] = v54;
    a4[4] = (uint64_t)&protocol witness table for AceOutput;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4);
    return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v53 + 32))(boxed_opaque_existential_1, v33, v36);
  }
  else
  {
    id v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v40 = 0;
      _os_log_impl(&dword_0, v38, v39, "#AnnounceVoicemailReadingFlow Sending SAUIPlayNotification sound first because this is the initial notification announcement.", v40, 2u);
      swift_slowDealloc();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = xmmword_46A030;
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for SAUIPlayNotificationSound);
    id v42 = [v52 identifier];
    uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v45 = v44;

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v41 + 32) = SAUIPlayNotificationSound.init(notificationId:soundType:)(v43, v45);
    *(void *)&long long v60 = v41;
    specialized Array._endMutation()();
    uint64_t v46 = v54;
    uint64_t v61 = v54;
    uint64_t v62 = &protocol witness table for AceOutput;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v60);
    AceOutput.copyAndPrepend(commands:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v53 + 8))(v33, v46);
    return outlined init with take of AppSelectionSignalComponent(&v60, (uint64_t)a4);
  }
  return result;
}

uint64_t closure #1 in AnnounceVoicemailReadingFlow.announcementCompleted(voicemails:)(uint64_t a1, unint64_t a2)
{
  swift_beginAccess();
  unint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  outlined consume of AnnounceVoicemailReadingFlow.State(v4);
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFFF8));
  }
  uint64_t result = swift_beginAccess();
  uint64_t v7 = *(void *)(a1 + 24);
  BOOL v8 = __OFADD__(v7, v5);
  uint64_t v9 = v7 + v5;
  if (v8) {
    __break(1u);
  }
  else {
    *(void *)(a1 + 24) = v9;
  }
  return result;
}

BOOL AnnounceVoicemailReadingFlow.shouldAttemptToReadHint.getter()
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v0 + 160))(&v4);
  uint64_t v1 = v7 - v6;
  if (__OFSUB__(v7, v6))
  {
    __break(1u);
    goto LABEL_6;
  }
  unint64_t v8 = v5;
  if (v5 >> 62)
  {
LABEL_6:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    outlined release of Set<String>((uint64_t)&v8);
    goto LABEL_4;
  }
  uint64_t v2 = *(void *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFFF8));
LABEL_4:
  outlined release of AnnounceVoicemailReadingState((uint64_t)&v4);
  return v1 == v2;
}

uint64_t AnnounceVoicemailReadingFlow.makeHint(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<Future<TemplatingResult, Error>, Output>);
  OUTLINED_FUNCTION_1();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<TemplatingResult, Error>);
  OUTLINED_FUNCTION_21_0();
  swift_retain();
  v16[1] = Future.init(_:)();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Output);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type Future<TemplatingResult, Error> and conformance Future<A, B>, &demangling cache variable for type metadata for Future<TemplatingResult, Error>);
  Publisher.map<A>(_:)();
  swift_release();
  swift_release();
  uint64_t v12 = OUTLINED_FUNCTION_18_1();
  *(void *)(v12 + 16) = a1;
  *(void *)(v12 + 24) = a2;
  uint64_t v13 = OUTLINED_FUNCTION_18_1();
  *(void *)(v13 + 16) = a1;
  *(void *)(v13 + 24) = a2;
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Map<Future<TemplatingResult, Error>, Output> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<Future<TemplatingResult, Error>, Output>);
  swift_retain_n();
  uint64_t v14 = Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v6);
  *(void *)(v3 + 192) = v14;
  return swift_release();
}

uint64_t closure #1 in AnnounceVoicemailReadingFlow.makeHint(completion:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (void *)a3[18];
  uint64_t v7 = a3[10];
  (*(void (**)(void *__return_ptr))(*a3 + 160))(v12);
  uint64_t result = outlined release of AnnounceVoicemailReadingState((uint64_t)v12);
  if (__OFADD__(v7, v12[0]))
  {
    __break(1u);
  }
  else
  {
    double v9 = (double)(v7 + v12[0]);
    uint64_t v10 = a3[11];
    double v11 = (double)AnnounceVoicemailHintHistory.daysSinceLastHint.getter();
    return (*(uint64_t (**)(void, void, void, void, double, void, uint64_t, uint64_t))(class metadata base offset for AnnounceVoicemailCATs + *v6 + 32))(*(void *)&v9, 0, *(void *)&v11, 0, (double)v10, 0, a1, a2);
  }
  return result;
}

uint64_t closure #2 in AnnounceVoicemailReadingFlow.makeHint(completion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v35 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TemplatingResult();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v34 - v13;
  uint64_t v15 = *(void *)(TemplatingResult.sections.getter() + 16);
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v16(v14, a1, v8);
  if (v15)
  {
    uint64_t v17 = *(void *)(TemplatingResult.print.getter() + 16);
    swift_bridgeObjectRelease();
    v16(v12, (uint64_t)v14, v8);
    if (v17)
    {
      os_log_type_t v18 = *(void (**)(char *, uint64_t))(v9 + 8);
      v18(v12, v8);
      v18(v14, v8);
      uint64_t v19 = v35;
LABEL_11:
      swift_beginAccess();
      *(unsigned char *)(a2 + 72) = 1;
      uint64_t v27 = (void *)(a2 + 152);
      uint64_t v28 = *(void *)(a2 + 176);
      uint64_t v29 = *(void *)(a2 + 184);
      __swift_project_boxed_opaque_existential_1((void *)(a2 + 152), v28);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v29 + 8))(v39, v28, v29);
      uint64_t v31 = *(void *)(a2 + 176);
      uint64_t v30 = *(void *)(a2 + 184);
      __swift_project_boxed_opaque_existential_1(v27, v31);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v30 + 8))(v38, v31, v30);
      __swift_project_boxed_opaque_existential_1(v38, v38[3]);
      dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
      uint64_t v32 = type metadata accessor for NLContextUpdate();
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 1, 1, v32);
      uint64_t v33 = type metadata accessor for AceOutput();
      memset(v36, 0, sizeof(v36));
      uint64_t v37 = 0;
      uint64_t v41 = v33;
      id v42 = &protocol witness table for AceOutput;
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v40);
      static AceOutputHelper.makeConfirmedViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
      _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0((uint64_t)v36, &demangling cache variable for type metadata for FlowActivity?);
      _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0((uint64_t)v7, &demangling cache variable for type metadata for NLContextUpdate?);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
      return outlined init with take of AppSelectionSignalComponent(&v40, v19);
    }
    uint64_t v25 = *(void *)(TemplatingResult.speak.getter() + 16);
    swift_bridgeObjectRelease();
    os_log_t v26 = *(void (**)(char *, uint64_t))(v9 + 8);
    v26(v12, v8);
    v26(v14, v8);
    uint64_t v19 = v35;
    if (v25) {
      goto LABEL_11;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.siriPhone);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    unint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v23 = 0;
    _os_log_impl(&dword_0, v21, v22, "#AnnounceVoicemailReadingFlow CAT hint rules resulted in no output, returning EmptyOutput", v23, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for EmptyOutput();
  return static EmptyOutput.instance.getter();
}

unint64_t AnnounceVoicemailReadingFlow.hintCompleted()()
{
  swift_beginAccess();
  unint64_t v1 = *(void *)(v0 + 16);
  *(void *)(v0 + 16) = 2;
  return outlined consume of AnnounceVoicemailReadingFlow.State(v1);
}

uint64_t AnnounceVoicemailReadingFlow.deinit()
{
  outlined consume of AnnounceVoicemailReadingFlow.State(*(void *)(v0 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 104);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 152);
  swift_release();
  return v0;
}

uint64_t AnnounceVoicemailReadingFlow.__deallocating_deinit()
{
  AnnounceVoicemailReadingFlow.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Flow.on(input:) in conformance AnnounceVoicemailReadingFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 224))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance AnnounceVoicemailReadingFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 232))();
}

uint64_t protocol witness for Flow.execute() in conformance AnnounceVoicemailReadingFlow(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 240) + **(int **)(**(void **)v1 + 240));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for Flow.execute() in conformance ContactNeedsValueGuardFlow<A>;
  return v6(a1);
}

double protocol witness for Flow.exitValue.getter in conformance AnnounceVoicemailReadingFlow@<D0>(uint64_t a1@<X8>)
{
  (*(void (**)(_OWORD *__return_ptr))(**(void **)v1 + 208))(v5);
  long long v3 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v3;
  double result = *(double *)&v6;
  *(_OWORD *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 48) = v7;
  return result;
}

uint64_t specialized AnnounceVoicemailReadingFlow.__allocating_init(synchronousBurstIndex:voicemail:hintHistory:burstNotificationManager:sharedGlobals:announceVoicemailCats:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t a11)
{
  v28[3] = a10;
  v28[4] = a11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v28);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a10 - 8) + 32))(boxed_opaque_existential_1, a5, a10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_46A030;
  *(void *)(v21 + 32) = a2;
  v29[0] = v21;
  specialized Array._endMutation()();
  uint64_t v22 = v29[0];
  id v23 = a2;
  static AnnounceVoicemailReadingState.makeInitialState(synchronousBurstIndex:voicemail:)(a1, v23, (uint64_t)v29);
  outlined init with copy of SharedGlobalsProviding((uint64_t)v28, (uint64_t)v27);
  outlined init with copy of SharedGlobalsProviding(a6, (uint64_t)v26);
  uint64_t v24 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, unsigned char *, unsigned char *, uint64_t, double))(a8 + 216))(v22, v29, a3, a4, v27, v26, a7, a9);

  __swift_destroy_boxed_opaque_existential_1(a6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  return v24;
}

uint64_t specialized AnnounceVoicemailReadingFlow.init(state:readingState:hintHistory:burstNotificationManager:sharedGlobals:announceVoicemailCats:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t a11)
{
  *(void *)(a8 + 128) = a10;
  *(void *)(a8 + 136) = a11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(a8 + 104));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a10 - 8) + 32))(boxed_opaque_existential_1, a5, a10);
  long long v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a8 + 24) = *(_OWORD *)a2;
  *(void *)(a8 + 192) = 0;
  *(void *)(a8 + 16) = a1;
  *(_OWORD *)(a8 + 40) = v21;
  *(_OWORD *)(a8 + 56) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a8 + 72) = *(unsigned char *)(a2 + 48);
  *(void *)(a8 + 80) = a3;
  *(void *)(a8 + 88) = a4;
  *(double *)(a8 + 96) = a9;
  *(void *)(a8 + 144) = a7;
  outlined init with take of AppSelectionSignalComponent(a6, a8 + 152);
  return a8;
}

uint64_t type metadata accessor for AnnounceVoicemailReadingFlow()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type AnnounceVoicemailReadingFlow and conformance AnnounceVoicemailReadingFlow()
{
  unint64_t result = lazy protocol witness table cache variable for type AnnounceVoicemailReadingFlow and conformance AnnounceVoicemailReadingFlow;
  if (!lazy protocol witness table cache variable for type AnnounceVoicemailReadingFlow and conformance AnnounceVoicemailReadingFlow)
  {
    type metadata accessor for AnnounceVoicemailReadingFlow();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnounceVoicemailReadingFlow and conformance AnnounceVoicemailReadingFlow);
  }
  return result;
}

unint64_t outlined consume of AnnounceVoicemailReadingFlow.State(unint64_t result)
{
  if (result >= 3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_CCAF8()
{
  swift_release();
  uint64_t v0 = OUTLINED_FUNCTION_17_7();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t _sIeg_ytIegn_TRTA_0(uint64_t a1)
{
  return thunk for @escaping @callee_guaranteed () -> ()(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t outlined release of AnnounceVoicemailReadingState(uint64_t a1)
{
  return a1;
}

Swift::Int partial apply for closure #1 in AnnounceVoicemailReadingFlow.announcementProducer(voicemails:)(void (*a1)(void), uint64_t a2)
{
  return AnnounceVoicemailReadingFlow.makeAnnouncement(voicemails:completion:)(*(void *)(v2 + 24), a1, a2);
}

uint64_t objectdestroy_3Tm_0()
{
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v0 = OUTLINED_FUNCTION_17_7();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t partial apply for closure #1 in AnnounceVoicemailReadingFlow.announcementCompleted(voicemails:)()
{
  return closure #1 in AnnounceVoicemailReadingFlow.announcementCompleted(voicemails:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_CCBE0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 136))();
  *a2 = result;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AnnounceVoicemailReadingFlow.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    uint64_t v3 = swift_bridgeObjectRetain();
  }
  *a1 = v3;
  return a1;
}

unint64_t destroy for AnnounceVoicemailReadingFlow.State(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t *assignWithCopy for AnnounceVoicemailReadingFlow.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF) {
      swift_bridgeObjectRetain();
    }
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

unint64_t *assignWithTake for AnnounceVoicemailReadingFlow.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (*a1 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  if (v3 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnnounceVoicemailReadingFlow.State(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 2;
  if (v4 >= 4) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AnnounceVoicemailReadingFlow.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 2;
    }
  }
  return result;
}

uint64_t getEnumTag for AnnounceVoicemailReadingFlow.State(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for AnnounceVoicemailReadingFlow.State(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for AnnounceVoicemailReadingFlow.State()
{
  return &type metadata for AnnounceVoicemailReadingFlow.State;
}

uint64_t partial apply for closure #1 in AnnounceVoicemailReadingFlow.makeHint(completion:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in AnnounceVoicemailReadingFlow.makeHint(completion:)(a1, a2, v2);
}

uint64_t partial apply for closure #2 in AnnounceVoicemailReadingFlow.makeHint(completion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #2 in AnnounceVoicemailReadingFlow.makeHint(completion:)(a1, v2, a2);
}

uint64_t specialized closure #1 in Publisher.sink(receiveResultCompletion:)(void *a1)
{
  return specialized closure #1 in Publisher.sink(receiveResultCompletion:)(*a1);
}

uint64_t partial apply for specialized closure #1 in Publisher.sink(receiveResultCompletion:)(void *a1)
{
  return specialized closure #1 in Publisher.sink(receiveResultCompletion:)(a1);
}

uint64_t partial apply for specialized closure #2 in Publisher.sink(receiveResultCompletion:)(uint64_t a1)
{
  return specialized closure #2 in Publisher.sink(receiveResultCompletion:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

{
  uint64_t v1;

  return specialized closure #2 in Publisher.sink(receiveResultCompletion:)(a1, *(void (**)(unsigned char *))(v1 + 16));
}

uint64_t partial apply for closure #1 in AnnounceVoicemailReadingFlow.makeAnnouncement(voicemails:completion:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in AnnounceVoicemailReadingFlow.makeAnnouncement(voicemails:completion:)(a1, a2, *(void **)(v2 + 16), *(void **)(v2 + 24));
}

uint64_t objectdestroy_30Tm()
{
  swift_release();

  uint64_t v1 = OUTLINED_FUNCTION_17_7();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t partial apply for closure #3 in AnnounceVoicemailReadingFlow.makeAnnouncement(voicemails:completion:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #3 in AnnounceVoicemailReadingFlow.makeAnnouncement(voicemails:completion:)(a1, *(void **)(v2 + 16), *(void **)(v2 + 24), a2);
}

uint64_t outlined retain of Zip2Sequence<Range<Int>, ArraySlice<INCallRecord>>(uint64_t a1)
{
  return a1;
}

uint64_t sub_CCF1C()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t partial apply for closure #1 in closure #2 in AnnounceVoicemailReadingFlow.makeAnnouncement(voicemails:completion:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in closure #2 in AnnounceVoicemailReadingFlow.makeAnnouncement(voicemails:completion:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32), a2);
}

uint64_t outlined release of Zip2Sequence<Range<Int>, ArraySlice<INCallRecord>>(uint64_t a1)
{
  return a1;
}

uint64_t sub_CCF94()
{
  uint64_t v1 = type metadata accessor for TemplatingResult();
  OUTLINED_FUNCTION_1();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = (v6 + 40) & ~v6;
  uint64_t v8 = v7 + *(void *)(v5 + 64);
  uint64_t v9 = v6 | 7;
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v7, v1);

  return _swift_deallocObject(v0, v8, v9);
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in AnnounceVoicemailReadingFlow.makeAnnouncement(voicemails:completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for TemplatingResult() - 8);
  uint64_t v6 = (void *)v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = (void *)v2[4];
  uint64_t v9 = (uint64_t)v2 + ((*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return closure #1 in closure #1 in closure #2 in AnnounceVoicemailReadingFlow.makeAnnouncement(voicemails:completion:)(a1, a2, v6, v7, v8, v9);
}

uint64_t sub_CD0CC()
{
  type metadata accessor for TemplatingResult();
  OUTLINED_FUNCTION_10();
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #2 in AnnounceVoicemailReadingFlow.makeAnnouncement(voicemails:completion:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for TemplatingResult() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = *(void (**)(char *))(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return closure #1 in closure #1 in closure #1 in closure #2 in AnnounceVoicemailReadingFlow.makeAnnouncement(voicemails:completion:)(a1, v1 + v4, v5);
}

char *OUTLINED_FUNCTION_1_28@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_3_30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v6 - 104) = v5;
  uint64_t v8 = *(void *)(a5 + 24);
  return __swift_mutable_project_boxed_opaque_existential_1(a5, v8);
}

double OUTLINED_FUNCTION_4_26()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_7_23()
{
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_15_11(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

void *SmartAppSelectionFeatureManager.forcedDisambiguationMinimalInterval.unsafeMutableAddressor()
{
  return &static SmartAppSelectionFeatureManager.forcedDisambiguationMinimalInterval;
}

uint64_t static SmartAppSelectionFeatureManager.appNameSpecifiedByUserMinimalInterval.getter()
{
  return 28;
}

void *SmartAppSelectionFeatureManager.appNameSpecifiedByUserMinimalInterval.unsafeMutableAddressor()
{
  return &static SmartAppSelectionFeatureManager.appNameSpecifiedByUserMinimalInterval;
}

uint64_t SmartAppSelectionFeatureManager.__allocating_init(sharedGlobals:trialSmartAppSelectionConfigProvider:diagnosticLogPermission:)(long long *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  SmartAppSelectionFeatureManager.init(sharedGlobals:trialSmartAppSelectionConfigProvider:diagnosticLogPermission:)(a1, a2, a3);
  return v6;
}

Swift::Bool __swiftcall SmartAppSelectionFeatureManager.isAppNameSpecifiedByUserSignalCollectionEnabled()()
{
  Swift::Bool v1 = v0;
  OUTLINED_FUNCTION_22();
  if (((*(uint64_t (**)(void))(v2 + 144))() & 1) == 0) {
    return 0;
  }
  if (!SmartAppSelectionFeatureManager.isLongEnoughSinceLastAppNameSpecifiedByUserSignalCollected()())
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_4_24(v14, (uint64_t)static Logger.siriPhone);
    uint64_t v15 = (void *)Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_4_27(v16))
    {
      swift_slowAlloc();
      OUTLINED_FUNCTION_5_23();
      OUTLINED_FUNCTION_19_11(4.8151e-34);
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_24_13();
      swift_bridgeObjectRelease();
      uint64_t v17 = swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_13_8(v17, v18, v19, v20, v21);
      OUTLINED_FUNCTION_20_10();
      OUTLINED_FUNCTION_6_2();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_18_11();
      OUTLINED_FUNCTION_26_10(&dword_0, v22, v23, "%s collect AppNameSpecifiedByUser signal is off since there is already triggered once within %ld days");
      swift_arrayDestroy();
LABEL_16:
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();

      return 0;
    }
LABEL_17:

    OUTLINED_FUNCTION_6_2();
    return 0;
  }
  OUTLINED_FUNCTION_22();
  if (((*(uint64_t (**)(uint64_t))(v3 + 96))(1) & 1) == 0)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_4_24(v24, (uint64_t)static Logger.siriPhone);
    uint64_t v15 = (void *)Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_4_27(v25))
    {
      OUTLINED_FUNCTION_5_22();
      OUTLINED_FUNCTION_5_23();
      OUTLINED_FUNCTION_2_32(4.8149e-34);
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_0_22();
      swift_bridgeObjectRelease();
      uint64_t v26 = swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_13_8(v26, v27, v28, v29, v30);
      OUTLINED_FUNCTION_7_24();
      OUTLINED_FUNCTION_6_2();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_19_10(&dword_0, v31, v32, "%s trial experiment for appNameSpecifiedByUser signal collection is off since current request isn't picked up randomly");
      OUTLINED_FUNCTION_27_7();
      goto LABEL_16;
    }
    goto LABEL_17;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_4_24(v4, (uint64_t)static Logger.siriPhone);
  os_log_type_t v5 = (void *)Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_4_27(v6))
  {
    OUTLINED_FUNCTION_5_22();
    OUTLINED_FUNCTION_5_23();
    OUTLINED_FUNCTION_2_32(4.8149e-34);
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_0_22();
    swift_bridgeObjectRelease();
    uint64_t v7 = swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_13_8(v7, v8, v9, v10, v11);
    OUTLINED_FUNCTION_7_24();
    OUTLINED_FUNCTION_6_2();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_19_10(&dword_0, v12, v13, "%s appNameSpecifiedByUser signal collection is enabled for current request");
    OUTLINED_FUNCTION_16_16();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {

    OUTLINED_FUNCTION_6_2();
    return 1;
  }
  return v1;
}

BOOL SmartAppSelectionFeatureManager.isLongEnoughSinceLastAppNameSpecifiedByUserSignalCollected()()
{
  type metadata accessor for Date();
  OUTLINED_FUNCTION_14_11();
  __chkstk_darwin(v3);
  uint64_t v4 = OUTLINED_FUNCTION_17_8();
  v5(v4);
  OUTLINED_FUNCTION_28_7();
  Date.timeIntervalSince1970.getter();
  uint64_t v6 = OUTLINED_FUNCTION_21_9();
  v7(v6);
  v12[0] = v2;
  v12[1] = _swiftEmptyArrayStorage;
  unint64_t v8 = lazy protocol witness table accessor for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory();
  SiriPhoneDefaultsProviding.getOrDefault<A>(key:defaultValue:)(3, (uint64_t)v12, v0, (uint64_t)&type metadata for AppNameSpecifiedByUserSignalCollectionHistory, v1, v8, (uint64_t)&v13);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  AppNameSpecifiedByUserSignalCollectionHistory.daysSinceLastShowed.getter();
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  return v10 > 28;
}

uint64_t protocol witness for SmartAppSelectionFeature.isForcedAppDisambiguationEnabled() in conformance SmartAppSelectionFeatureManager()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))() & 1;
}

uint64_t protocol witness for SmartAppSelectionFeature.isAppNameSpecifiedByUserSignalCollectionEnabled() in conformance SmartAppSelectionFeatureManager()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))() & 1;
}

uint64_t protocol witness for SmartAppSelectionFeature.isAppSelectionEnabled() in conformance SmartAppSelectionFeatureManager()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))() & 1;
}

void OUTLINED_FUNCTION_0_22()
{
  DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v2, v3, v1, v0);
}

uint64_t OUTLINED_FUNCTION_1_29(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_2_32(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain();
}

BOOL OUTLINED_FUNCTION_4_27(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_6_18()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_7_24()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_12_10()
{
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return v1;
}

uint64_t OUTLINED_FUNCTION_13_8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, ...)
{
  va_start(va, a5);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_15_12(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  uint64_t v14 = a12;
  unint64_t v15 = a13;
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &a11);
}

uint64_t OUTLINED_FUNCTION_16_16()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_17_8()
{
  uint64_t v1 = *(void *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 24), v1);
  return v1;
}

uint64_t OUTLINED_FUNCTION_18_11()
{
  *(_WORD *)(v0 + 12) = 2048;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_19_11(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_20_10()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_24_13()
{
  DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v1, v2, v3, v0);
}

void OUTLINED_FUNCTION_26_10(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0x16u);
}

uint64_t OUTLINED_FUNCTION_28_7()
{
  __swift_project_boxed_opaque_existential_1((void *)(v0 - 120), *(void *)(v0 - 96));
  return static Date.distantPast.getter();
}

void *StartAudioCallDirectAction.identifier.unsafeMutableAddressor()
{
  return &static StartAudioCallDirectAction.identifier;
}

uint64_t StartAudioCallDirectAction.init(from:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (!*(void *)(a1 + 16)
    || (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(0x6449707061, 0xE500000000000000), (v5 & 1) == 0)
    || (outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v4, (uint64_t)&v25),
        (OUTLINED_FUNCTION_0_23() & 1) == 0))
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    uint64_t v16 = 0;
    unint64_t v17 = 0;
LABEL_12:
    uint64_t v18 = 0;
    goto LABEL_13;
  }
  uint64_t v6 = v23;
  unint64_t v7 = v24;
  uint64_t v8 = OUTLINED_FUNCTION_8_25();
  specialized Dictionary.subscript.getter(v8 & 0xFFFFFFFFFFFFLL | 0x7954000000000000, 0xEE00656D614E6570, a1, v9);
  if (v26)
  {
    int v10 = OUTLINED_FUNCTION_0_23();
    if (v10) {
      uint64_t v11 = v23;
    }
    else {
      uint64_t v11 = 0;
    }
    if (v10) {
      unint64_t v12 = v24;
    }
    else {
      unint64_t v12 = 0;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v25);
    uint64_t v11 = 0;
    unint64_t v12 = 0;
  }
  uint64_t v19 = OUTLINED_FUNCTION_8_25();
  specialized Dictionary.subscript.getter(v19 & 0xFFFFFFFFFFFFLL | 0x6144000000000000, 0xEA00000000006174, a1, v20);
  if (v26)
  {
    int v21 = OUTLINED_FUNCTION_0_23();
    if (v21) {
      uint64_t v14 = v23;
    }
    else {
      uint64_t v14 = 0;
    }
    if (v21) {
      unint64_t v15 = v24;
    }
    else {
      unint64_t v15 = 0xF000000000000000;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v25);
    uint64_t v14 = 0;
    unint64_t v15 = 0xF000000000000000;
  }
  specialized Dictionary.subscript.getter(0x746E65746E496C6ELL, 0xE800000000000000, a1, &v25);
  if (v26)
  {
    int v22 = OUTLINED_FUNCTION_0_23();
    if (v22) {
      uint64_t v16 = v23;
    }
    else {
      uint64_t v16 = 0;
    }
    if (v22) {
      unint64_t v17 = v24;
    }
    else {
      unint64_t v17 = 0xF000000000000000;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v25);
    uint64_t v16 = 0;
    unint64_t v17 = 0xF000000000000000;
  }
  specialized Dictionary.subscript.getter(0x6C61694472657375, 0xED0000746341676FLL, a1, &v25);
  swift_bridgeObjectRelease();
  if (!v26)
  {
    uint64_t result = outlined destroy of Any?((uint64_t)&v25);
    goto LABEL_12;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIRINLUUserDialogAct);
  uint64_t result = swift_dynamicCast();
  uint64_t v18 = v23;
  if (!result) {
    uint64_t v18 = 0;
  }
LABEL_13:
  *a2 = v6;
  a2[1] = v7;
  a2[2] = v11;
  a2[3] = v12;
  a2[4] = v14;
  a2[5] = v15;
  a2[6] = v16;
  a2[7] = v17;
  a2[8] = v18;
  return result;
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v6);
    specialized Dictionary._Variant.setValue(_:forKey:)();
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of Any?(a1);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, v6);
    swift_bridgeObjectRelease();
    return outlined destroy of Any?((uint64_t)v6);
  }
}

unint64_t static StartAudioCallDirectAction.identifier.getter()
{
  return 0xD000000000000034;
}

uint64_t StartAudioCallDirectAction.intentData.getter()
{
  outlined copy of Data?(*(void *)(v0 + 32), *(void *)(v0 + 40));
  return OUTLINED_FUNCTION_7_0();
}

uint64_t StartAudioCallDirectAction.nlIntent.getter()
{
  outlined copy of Data?(*(void *)(v0 + 48), *(void *)(v0 + 56));
  return OUTLINED_FUNCTION_7_0();
}

uint64_t StartAudioCallDirectAction.userDialogAct.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t StartAudioCallDirectAction.init(appId:intentTypeName:intentData:nlIntent:userDialogAct:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  *a9 = result;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  a9[8] = a10;
  return result;
}

void *StartAudioCallDirectAction.toDictionary()()
{
  uint64_t v35 = &_swiftEmptyDictionarySingleton;
  uint64_t v2 = *v0;
  unint64_t v1 = v0[1];
  uint64_t ObjectType = &type metadata for String;
  uint64_t v32 = v2;
  unint64_t v33 = v1;
  swift_bridgeObjectRetain();
  specialized Dictionary.subscript.setter((uint64_t)&v32, 0x6449707061, 0xE500000000000000);
  unint64_t v3 = v0[3];
  if (v3)
  {
    uint64_t v4 = v0[2];
    uint64_t ObjectType = &type metadata for String;
    uint64_t v32 = v4;
    unint64_t v33 = v3;
    uint64_t v5 = swift_bridgeObjectRetain();
    uint64_t v13 = OUTLINED_FUNCTION_2_33(v5, v6, v7, v8, v9, v10, v11, v12, v31, v32);
    specialized Dictionary.subscript.setter((uint64_t)v13, v14 & 0xFFFFFFFFFFFFLL | 0x7954000000000000, 0xEE00656D614E6570);
  }
  unint64_t v15 = v0[5];
  if (v15 >> 60 != 15)
  {
    uint64_t v16 = v0[4];
    uint64_t ObjectType = &type metadata for Data;
    uint64_t v32 = v16;
    unint64_t v33 = v15;
    uint64_t v17 = outlined copy of Data._Representation(v16, v15);
    long long v25 = OUTLINED_FUNCTION_2_33(v17, v18, v19, v20, v21, v22, v23, v24, v31, v32);
    specialized Dictionary.subscript.setter((uint64_t)v25, v26 & 0xFFFFFFFFFFFFLL | 0x6144000000000000, 0xEA00000000006174);
  }
  unint64_t v27 = v0[7];
  if (v27 >> 60 != 15)
  {
    uint64_t v28 = v0[6];
    uint64_t ObjectType = &type metadata for Data;
    uint64_t v32 = v28;
    unint64_t v33 = v27;
    outlined copy of Data._Representation(v28, v27);
    specialized Dictionary.subscript.setter((uint64_t)&v32, 0x746E65746E496C6ELL, 0xE800000000000000);
  }
  uint64_t v29 = v0[8];
  if (v29)
  {
    uint64_t ObjectType = (void *)swift_getObjectType();
    uint64_t v32 = v29;
    swift_unknownObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)&v32, 0x6C61694472657375, 0xED0000746341676FLL);
  }
  return v35;
}

id StartAudioCallDirectAction.toStartLocalRequest(deviceState:)(void *a1)
{
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for SKIDirectInvocationPayload);
  id v2 = SKIDirectInvocationPayload.__allocating_init(identifier:)();
  unint64_t v3 = StartAudioCallDirectAction.toDictionary()();
  specialized _dictionaryUpCast<A, B, C, D>(_:)((uint64_t)v3);
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  outlined bridged method (mbnn) of @objc SKIDirectInvocationPayload.userData.setter(v5, v2);
  id v6 = SKIDirectInvocationPayload.toStartLocalRequest(deviceState:)(a1);

  return v6;
}

unint64_t StartAudioCallDirectAction.startAudioCallIntent.getter()
{
  outlined init with take of String?(v0 + 16, (uint64_t)v22, &demangling cache variable for type metadata for String?);
  outlined init with take of String?((uint64_t)v22, (uint64_t)v23, &demangling cache variable for type metadata for String?);
  if (v23[1]) {
    NSString v1 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v1 = 0;
  }
  outlined init with take of String?(v0 + 32, (uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for Data?);
  outlined init with take of String?((uint64_t)v21, (uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for Data?);
  if (v24[1] >> 60 == 15) {
    Class isa = 0;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  id v3 = (id)INIntentCreate();

  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = (void *)specialized INIntent.typed<A>(as:)();

    if (v5)
    {
      unint64_t v6 = (unint64_t)INStartCallIntent.toStartAudioCallIntent()();

      if (v6)
      {
        if (one-time initialization token for siriPhone != -1) {
          swift_once();
        }
        uint64_t v7 = type metadata accessor for Logger();
        __swift_project_value_buffer(v7, (uint64_t)static Logger.siriPhone);
        id v3 = (id)Logger.logObject.getter();
        os_log_type_t v8 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_8_2(v8))
        {
          *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
          uint64_t v11 = "#StartAudioCallDirectAction Received INStartCallIntent from directAction, converting to INStartAudioCallIntent";
LABEL_19:
          OUTLINED_FUNCTION_10_12(&dword_0, v9, v10, v11);
          OUTLINED_FUNCTION_6();

          goto LABEL_26;
        }
        goto LABEL_25;
      }
    }
    id v4 = v4;
    unint64_t v6 = specialized INIntent.typed<A>(as:)();

    if (v6)
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v12 = type metadata accessor for Logger();
      __swift_project_value_buffer(v12, (uint64_t)static Logger.siriPhone);
      id v3 = (id)Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_8_2(v13))
      {
        *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
        uint64_t v11 = "#StartAudioCallDirectAction Received INStartAudioCallIntent from directAction";
        goto LABEL_19;
      }
LABEL_25:

      id v3 = v4;
      goto LABEL_26;
    }
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.siriPhone);
  unint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
    OUTLINED_FUNCTION_24_1(&dword_0, v17, v18, "#StartAudioCallDirectAction Didn't receive initial siriKitIntent, using default INStartAudioCallIntent");
    OUTLINED_FUNCTION_6();
  }

  id v19 = objc_allocWithZone((Class)INStartAudioCallIntent);
  unint64_t v6 = (unint64_t)@nonobjc INStartAudioCallIntent.init(destinationType:contacts:)(1, 0);
LABEL_26:

  return v6;
}

uint64_t specialized INIntent.typed<A>(as:)()
{
  return specialized INIntent.typed<A>(as:)();
}

{
  return specialized INIntent.typed<A>(as:)();
}

{
  return specialized INIntent.typed<A>(as:)();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v6;
  void *v7;

  NSString v1 = v0;
  self;
  id v2 = swift_dynamicCastObjCClass();
  if (v2)
  {
    id v3 = v2;
    id v4 = v1;
  }
  else
  {
    unint64_t v6 = (id)INTypedIntentWithIntent();
    if (v6)
    {
      uint64_t v7 = v6;
      self;
      id v3 = swift_dynamicCastObjCClass();
      if (!v3) {
    }
      }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t StartAudioCallDirectAction.startCallIntent.getter()
{
  outlined init with take of String?(v0 + 16, (uint64_t)v18, &demangling cache variable for type metadata for String?);
  outlined init with take of String?((uint64_t)v18, (uint64_t)v19, &demangling cache variable for type metadata for String?);
  if (v19[1]) {
    NSString v1 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v1 = 0;
  }
  outlined init with take of String?(v0 + 32, (uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for Data?);
  outlined init with take of String?((uint64_t)v17, (uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for Data?);
  if (v20[1] >> 60 == 15) {
    Class isa = 0;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  id v3 = (id)INIntentCreate();

  if (v3 && (id v4 = v3, v5 = specialized INIntent.typed<A>(as:)(), v4, v5))
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.siriPhone);
    id v3 = (id)Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_8_2(v7))
    {
      *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
      OUTLINED_FUNCTION_10_12(&dword_0, v8, v9, "#StartAudioCallDirectAction Received INStartCallIntent from directAction");
      OUTLINED_FUNCTION_6();
    }
    else
    {

      id v3 = v4;
    }
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.siriPhone);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
      OUTLINED_FUNCTION_24_1(&dword_0, v13, v14, "#StartAudioCallDirectAction Didn't receive initial siriKitIntent, using default INStartCallIntent");
      OUTLINED_FUNCTION_6();
    }

    id v15 = objc_allocWithZone((Class)INStartCallIntent);
    uint64_t v5 = (uint64_t)@nonobjc INStartCallIntent.init(callRecordFilter:callRecordToCallBack:audioRoute:destinationType:preferredCallProvider:contacts:ttyType:callCapability:)(0, 0, 0, 1, 1, 0, 0, 1);
  }

  return v5;
}

id @nonobjc INStartAudioCallIntent.init(destinationType:contacts:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INPerson);
    v4.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v4.super.Class isa = 0;
  }
  id v5 = [v2 initWithDestinationType:a1 contacts:v4.super.isa];

  return v5;
}

id @nonobjc INStartCallIntent.init(callRecordFilter:callRecordToCallBack:audioRoute:destinationType:preferredCallProvider:contacts:ttyType:callCapability:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  if (a6)
  {
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INPerson);
    v17.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v17.super.Class isa = 0;
  }
  id v18 = [v9 initWithCallRecordFilter:a1 callRecordToCallBack:a2 audioRoute:a3 destinationType:a4 preferredCallProvider:a5 contacts:v17.super.isa ttyType:a7 callCapability:a8];

  return v18;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;
  unsigned char v4[72];
  uint64_t vars8;

  OUTLINED_FUNCTION_5_24();
  specialized Array<A>.hash(into:)((uint64_t)v4, a1);
  uint64_t v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;
  unsigned char v4[72];
  uint64_t vars8;

  OUTLINED_FUNCTION_5_24();
  ContactResolverConfigHashable.hash(into:)((uint64_t)v4);
  uint64_t v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v2;
  uint64_t vars8;

  type metadata accessor for UUID();
  _s10Foundation4UUIDVACSHAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_5_24();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined copy of Data._Representation(a1, a2);
  }
  return a1;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(char a1)
{
  OUTLINED_FUNCTION_5_24();
  FollowUpOfferType.rawValue.getter(a1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)()
{
  return OUTLINED_FUNCTION_1_30();
}

{
  return OUTLINED_FUNCTION_1_30();
}

{
  Swift::Int v0;

  OUTLINED_FUNCTION_5_24();
  String.hash(into:)();
  uint64_t v0 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v0);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void (*v22)(char *, unint64_t, uint64_t);
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void (**v32)(char *, uint64_t);
  uint64_t v33;
  char *v34;
  char *v35;
  void (*v36)(char *, unint64_t, uint64_t);

  uint64_t v5 = type metadata accessor for ContactQuery();
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v35 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v34 = (char *)&v25 - v9;
  uint64_t v10 = v2 + 64;
  uint64_t v11 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v11;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v13 = ~v11;
    uint64_t v14 = *(void *)(a1 + 16);
    uint64_t v32 = (void (**)(char *, uint64_t))(v8 + 8);
    unint64_t v33 = v8 + 16;
    uint64_t v28 = v8;
    uint64_t v29 = v2;
    uint64_t v26 = ~v11;
    unint64_t v27 = v2 + 64;
    long long v25 = v14;
    id v15 = v35;
    do
    {
      os_log_type_t v16 = *(void *)(*(void *)(v2 + 48) + 8 * result);
      if (*(void *)(v16 + 16) == v14)
      {
        if (!v14 || v16 == a1) {
          return result;
        }
        NSArray v17 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
        id v18 = *(void *)(v8 + 72);
        unint64_t v30 = result;
        uint64_t v31 = v18;
        uint64_t v36 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
        swift_bridgeObjectRetain();
        while (1)
        {
          id v19 = v16;
          uint64_t v20 = v16 + v17;
          uint64_t v21 = v34;
          uint64_t v22 = v36;
          v36(v34, v20, v5);
          uint64_t v23 = a1;
          v22(v15, a1 + v17, v5);
          _s10Foundation4UUIDVACSHAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ContactQuery and conformance ContactQuery, (void (*)(uint64_t))&type metadata accessor for ContactQuery);
          LOBYTE(v22) = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v24 = *v32;
          (*v32)(v15, v5);
          v24(v21, v5);
          if ((v22 & 1) == 0) {
            break;
          }
          v17 += v31;
          --v14;
          a1 = v23;
          os_log_type_t v16 = v19;
          if (!v14)
          {
            swift_bridgeObjectRelease();
            return v30;
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v2 = v29;
        unint64_t result = v30;
        a1 = v23;
        uint64_t v10 = v27;
        uint64_t v8 = v28;
        uint64_t v14 = v25;
        uint64_t v13 = v26;
      }
      unint64_t result = (result + 1) & v13;
    }
    while (((*(void *)(v10 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::Int v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  Swift::Int v37;
  void (**v38)(char *, uint64_t);
  uint64_t v39;

  os_log_type_t v39 = type metadata accessor for ContactActionType();
  uint64_t v5 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (int *)type metadata accessor for ContactResolverConfigHashable();
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = v2 + 64;
  uint64_t v35 = v2;
  os_log_type_t v12 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v13 = a2 & ~v12;
  if ((*(void *)(v2 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = ~v12;
    uint64_t v14 = v8[7];
    uint64_t v31 = a1 + v8[6];
    uint64_t v32 = v14;
    id v15 = v8[8];
    unint64_t v33 = a1;
    uint64_t v29 = *(void *)(v9 + 72);
    unint64_t v30 = a1 + v15;
    id v38 = (void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v36 = v8;
    do
    {
      outlined init with copy of ContactResolverConfigHashable(*(void *)(v35 + 48) + v29 * v13, (uint64_t)v11);
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      type metadata accessor for Locale();
      _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type Locale and conformance Locale, (void (*)(uint64_t))&type metadata accessor for Locale);
      dispatch thunk of Hashable.hash(into:)();
      os_log_type_t v16 = *(void *)&v11[v8[7]];
      Hasher._combine(_:)(*(void *)(v16 + 16));
      NSArray v17 = *(void *)(v16 + 16);
      if (v17)
      {
        swift_bridgeObjectRetain();
        id v18 = v16 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v18 += 16;
          --v17;
        }
        while (v17);
        swift_bridgeObjectRelease();
      }
      ContactResolverConfig.actionType.getter();
      _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type ContactActionType and conformance ContactActionType, (void (*)(uint64_t))&type metadata accessor for ContactActionType);
      id v19 = v39;
      dispatch thunk of Hashable.hash(into:)();
      uint64_t v20 = *v38;
      (*v38)(v7, v19);
      uint64_t v37 = Hasher._finalize()();
      Hasher.init(_seed:)();
      uint64_t v21 = v33;
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      dispatch thunk of Hashable.hash(into:)();
      uint64_t v22 = *(void *)(v21 + v32);
      Hasher._combine(_:)(*(void *)(v22 + 16));
      uint64_t v23 = *(void *)(v22 + 16);
      if (v23)
      {
        swift_bridgeObjectRetain();
        uint64_t v24 = v22 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v24 += 16;
          --v23;
        }
        while (v23);
        swift_bridgeObjectRelease();
      }
      ContactResolverConfig.actionType.getter();
      long long v25 = v39;
      dispatch thunk of Hashable.hash(into:)();
      v20(v7, v25);
      uint64_t v26 = Hasher._finalize()();
      outlined destroy of ContactResolverConfigHashable((uint64_t)v11);
      if (v37 == v26) {
        break;
      }
      uint64_t v13 = (v13 + 1) & v28;
      uint64_t v8 = v36;
    }
    while (((*(void *)(v34 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void (*v11)(char *, unint64_t, uint64_t);
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  id v19 = a1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v9 = a2 & ~v8;
  id v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    os_log_type_t v12 = v5 + 16;
    uint64_t v11 = v13;
    uint64_t v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      _s10Foundation4UUIDVACSHAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
      id v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      uint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = a1;
    while (1)
    {
      unint64_t v7 = 0xE400000000000000;
      unint64_t v8 = 1162760014;
      switch(*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        case 1:
          unint64_t v8 = 0xD000000000000012;
          unint64_t v7 = 0x800000000048DC90;
          break;
        case 2:
          unint64_t v8 = 0xD000000000000013;
          unint64_t v7 = 0x800000000048DCB0;
          break;
        case 3:
          unint64_t v7 = 0x800000000048DCD0;
          unint64_t v8 = 0xD000000000000011;
          break;
        case 4:
          unint64_t v8 = 0x4C41435F44414552;
          unint64_t v7 = 0xE90000000000004CLL;
          break;
        default:
          break;
      }
      unint64_t v9 = 0xE400000000000000;
      unint64_t v10 = 1162760014;
      switch(v6)
      {
        case 1:
          unint64_t v10 = 0xD000000000000012;
          unint64_t v9 = 0x800000000048DC90;
          break;
        case 2:
          unint64_t v10 = 0xD000000000000013;
          unint64_t v9 = 0x800000000048DCB0;
          break;
        case 3:
          unint64_t v9 = 0x800000000048DCD0;
          unint64_t v10 = 0xD000000000000011;
          break;
        case 4:
          unint64_t v10 = 0x4C41435F44414552;
          unint64_t v9 = 0xE90000000000004CLL;
          break;
        default:
          break;
      }
      if (v8 == v10 && v7 == v9) {
        break;
      }
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v5;
        if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4)) {
          continue;
        }
      }
      return v4;
    }
    swift_bridgeObjectRelease_n();
  }
  return v4;
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1)
{
  return a1 & ~(-1 << *(unsigned char *)(v1 + 32));
}

uint64_t destroy for StartAudioCallDirectAction(uint64_t *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v2 = a1[5];
  if (v2 >> 60 != 15) {
    outlined consume of Data._Representation(a1[4], v2);
  }
  unint64_t v3 = a1[7];
  if (v3 >> 60 != 15) {
    outlined consume of Data._Representation(a1[6], v3);
  }

  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for StartAudioCallDirectAction(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = a2[3];
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = a2 + 4;
  unint64_t v7 = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v6;
  }
  else
  {
    uint64_t v8 = *v6;
    outlined copy of Data._Representation(*v6, v7);
    *(void *)(a1 + 32) = v8;
    *(void *)(a1 + 40) = v7;
  }
  unint64_t v9 = a2 + 6;
  unint64_t v10 = a2[7];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v9;
  }
  else
  {
    uint64_t v11 = *v9;
    outlined copy of Data._Representation(*v9, a2[7]);
    *(void *)(a1 + 48) = v11;
    *(void *)(a1 + 56) = v10;
  }
  *(void *)(a1 + 64) = a2[8];
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for StartAudioCallDirectAction(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2 + 4;
  unint64_t v5 = a2[5];
  if (a1[5] >> 60 == 15)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v6 = *v4;
      outlined copy of Data._Representation(*v4, a2[5]);
      a1[4] = v6;
      a1[5] = v5;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)(a1 + 4));
LABEL_6:
    *((_OWORD *)a1 + 2) = *(_OWORD *)v4;
    goto LABEL_8;
  }
  uint64_t v7 = *v4;
  outlined copy of Data._Representation(*v4, a2[5]);
  uint64_t v8 = a1[4];
  unint64_t v9 = a1[5];
  a1[4] = v7;
  a1[5] = v5;
  outlined consume of Data._Representation(v8, v9);
LABEL_8:
  unint64_t v10 = a2 + 6;
  unint64_t v11 = a2[7];
  if (a1[7] >> 60 != 15)
  {
    if (v11 >> 60 != 15)
    {
      uint64_t v13 = *v10;
      outlined copy of Data._Representation(*v10, a2[7]);
      uint64_t v14 = a1[6];
      unint64_t v15 = a1[7];
      a1[6] = v13;
      a1[7] = v11;
      outlined consume of Data._Representation(v14, v15);
      goto LABEL_15;
    }
    outlined destroy of Data((uint64_t)(a1 + 6));
    goto LABEL_13;
  }
  if (v11 >> 60 == 15)
  {
LABEL_13:
    *((_OWORD *)a1 + 3) = *(_OWORD *)v10;
    goto LABEL_15;
  }
  uint64_t v12 = *v10;
  outlined copy of Data._Representation(*v10, a2[7]);
  a1[6] = v12;
  a1[7] = v11;
LABEL_15:
  a1[8] = a2[8];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t outlined destroy of Data(uint64_t a1)
{
  return a1;
}

void *__swift_memcpy72_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x48uLL);
}

void *assignWithTake for StartAudioCallDirectAction(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2 + 4;
  unint64_t v7 = a1[5];
  if (v7 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v8 = a2[5];
  if (v8 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)(a1 + 4));
LABEL_4:
    *((_OWORD *)a1 + 2) = *v6;
    goto LABEL_6;
  }
  uint64_t v9 = a1[4];
  a1[4] = *(void *)v6;
  a1[5] = v8;
  outlined consume of Data._Representation(v9, v7);
LABEL_6:
  unint64_t v10 = a2 + 6;
  unint64_t v11 = a1[7];
  if (v11 >> 60 != 15)
  {
    unint64_t v12 = a2[7];
    if (v12 >> 60 != 15)
    {
      uint64_t v13 = a1[6];
      a1[6] = *v10;
      a1[7] = v12;
      outlined consume of Data._Representation(v13, v11);
      goto LABEL_11;
    }
    outlined destroy of Data((uint64_t)(a1 + 6));
  }
  *((_OWORD *)a1 + 3) = *(_OWORD *)v10;
LABEL_11:
  a1[8] = a2[8];
  swift_unknownObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for StartAudioCallDirectAction(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 72))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StartAudioCallDirectAction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StartAudioCallDirectAction()
{
  return &type metadata for StartAudioCallDirectAction;
}

uint64_t _s10Foundation4UUIDVACSHAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_23()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_1_30()
{
  return specialized __RawDictionaryStorage.find<A>(_:)();
}

char *OUTLINED_FUNCTION_2_33(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  return &a10;
}

uint64_t OUTLINED_FUNCTION_8_25()
{
  return 0x746E65746E69;
}

void OUTLINED_FUNCTION_10_12(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

void specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for LSApplicationExtensionRecord();
    lazy protocol witness table accessor for type LSApplicationExtensionRecord and conformance NSObject(&lazy protocol witness table cache variable for type LSApplicationExtensionRecord and conformance NSObject, (void (*)(uint64_t))type metadata accessor for LSApplicationExtensionRecord);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v26;
    uint64_t v25 = v27;
    uint64_t v2 = v28;
    int64_t v3 = v29;
    uint64_t v4 = v30;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v25 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    uint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    int64_t v3 = 0;
  }
  int64_t v24 = (unint64_t)(v2 + 64) >> 6;
  uint64_t v23 = _swiftEmptyArrayStorage;
LABEL_8:
  int64_t v8 = v3;
  unint64_t v9 = v4;
  while (1)
  {
    if (v1 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_40;
      }
      type metadata accessor for LSApplicationExtensionRecord();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v11 = v31;
      swift_unknownObjectRelease();
      int64_t v3 = v8;
      uint64_t v4 = v9;
      if (!v31) {
        goto LABEL_40;
      }
      goto LABEL_27;
    }
    if (!v9) {
      break;
    }
    uint64_t v4 = (v9 - 1) & v9;
    unint64_t v10 = __clz(__rbit64(v9)) | (v8 << 6);
    int64_t v3 = v8;
LABEL_26:
    id v11 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v11) {
      goto LABEL_40;
    }
LABEL_27:
    uint64_t v14 = outlined bridged method (pb) of @objc LSBundleRecord.bundleIdentifier.getter(v11);
    uint64_t v16 = v15;

    int64_t v8 = v3;
    unint64_t v9 = v4;
    if (v16)
    {
      id v18 = v23;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        id v18 = v21;
      }
      unint64_t v19 = v18[2];
      if (v19 >= v18[3] >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        id v18 = v22;
      }
      void v18[2] = v19 + 1;
      uint64_t v23 = v18;
      uint64_t v20 = &v18[2 * v19];
      v20[4] = v14;
      v20[5] = v16;
      goto LABEL_8;
    }
  }
  int64_t v3 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v3 >= v24) {
      goto LABEL_40;
    }
    unint64_t v12 = *(void *)(v25 + 8 * v3);
    if (!v12)
    {
      int64_t v13 = v8 + 2;
      if (v8 + 2 >= v24) {
        goto LABEL_40;
      }
      unint64_t v12 = *(void *)(v25 + 8 * v13);
      if (v12) {
        goto LABEL_24;
      }
      int64_t v13 = v8 + 3;
      if (v8 + 3 >= v24) {
        goto LABEL_40;
      }
      unint64_t v12 = *(void *)(v25 + 8 * v13);
      if (v12) {
        goto LABEL_24;
      }
      int64_t v13 = v8 + 4;
      if (v8 + 4 >= v24) {
        goto LABEL_40;
      }
      unint64_t v12 = *(void *)(v25 + 8 * v13);
      if (v12)
      {
LABEL_24:
        int64_t v3 = v13;
      }
      else
      {
        int64_t v3 = v8 + 5;
        if (v8 + 5 >= v24) {
          goto LABEL_40;
        }
        unint64_t v12 = *(void *)(v25 + 8 * v3);
        if (!v12)
        {
          int64_t v17 = v8 + 6;
          while (v17 < v24)
          {
            unint64_t v12 = *(void *)(v25 + 8 * v17++);
            if (v12)
            {
              int64_t v3 = v17 - 1;
              goto LABEL_25;
            }
          }
LABEL_40:
          outlined consume of [String : Any].Iterator._Variant();
          return;
        }
      }
    }
LABEL_25:
    uint64_t v4 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v3 << 6);
    goto LABEL_26;
  }
  __break(1u);
}

uint64_t *ThirdPartyAnnotatedAppStore.instance.unsafeMutableAddressor()
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  return &static ThirdPartyAnnotatedAppStore.instance;
}

uint64_t static ThirdPartyAnnotatedAppStore.instance.getter()
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }

  return swift_retain();
}

void ThirdPartyAnnotatedAppStore.getApp(for:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  void (*v9)(uint64_t *__return_ptr, void *);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(void *, void *);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void v39[6];
  void v40[2];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(v3 + 16);
  v39[0] = a1;
  v39[1] = a2;
  unint64_t v9 = *(void (**)(uint64_t *__return_ptr, void *))(*(void *)v7 + 176);
  unint64_t v10 = *(void *)v7 + 176;
  swift_retain();
  v9(&v41, v39);
  swift_release();
  id v11 = v41;
  if (v41)
  {
    unint64_t v12 = v42;
    int64_t v13 = v43;
    uint64_t v14 = v44;
    uint64_t v34 = v46;
    uint64_t v35 = v45;
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.siriPhone);
    OUTLINED_FUNCTION_13_9();
    swift_bridgeObjectRetain_n();
    uint64_t v16 = Logger.logObject.getter();
    int64_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      swift_slowAlloc();
      uint64_t v41 = OUTLINED_FUNCTION_11_16();
      *(_DWORD *)int64_t v13 = 136315394;
      v39[0] = v4;
      type metadata accessor for ThirdPartyAnnotatedAppStore();
      swift_retain();
      id v18 = String.init<A>(describing:)();
      v39[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_9_5();
      swift_bridgeObjectRelease();
      *(_WORD *)(v13 + 12) = 2080;
      swift_bridgeObjectRetain();
      v39[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_15_13(&dword_0, v16, v20, "#%s Found cached AnnotatedApp for %s.");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_9_5();
    }
    uint64_t v28 = v34;
    uint64_t v27 = v35;
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.siriPhone);
    OUTLINED_FUNCTION_13_9();
    swift_bridgeObjectRetain_n();
    uint64_t v22 = Logger.logObject.getter();
    uint64_t v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      swift_slowAlloc();
      uint64_t v37 = OUTLINED_FUNCTION_11_16();
      v39[0] = v4;
      uint64_t v41 = v37;
      *(_DWORD *)unint64_t v10 = 136315394;
      type metadata accessor for ThirdPartyAnnotatedAppStore();
      swift_retain();
      int64_t v24 = String.init<A>(describing:)();
      v39[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_9_5();
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 12) = 2080;
      swift_bridgeObjectRetain();
      v39[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_15_13(&dword_0, v22, v26, "#%s Searching for AnnotatedApp for %s on device.");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_9_5();
    }
    static Signpost.begin(_:)();
    int64_t v29 = a1;
    ThirdPartyAnnotatedAppStore.findApp(identifier:)(a1, a2, &v41);
    uint64_t v30 = v41;
    uint64_t v31 = v44;
    uint64_t v36 = v43;
    id v38 = v42;
    uint64_t v27 = v45;
    uint64_t v28 = v46;
    uint64_t v32 = *(void *)(v4 + 16);
    v40[0] = v29;
    v40[1] = a2;
    _s27PhoneCallFlowDelegatePlugin12AnnotatedAppVSgWObTm_0((uint64_t)&v41, (uint64_t)v39, &demangling cache variable for type metadata for AnnotatedApp?);
    unint64_t v33 = *(void (**)(void *, void *))(*(void *)v32 + 184);
    swift_retain();
    v33(v40, v39);
    swift_release();
    uint64_t v14 = v31;
    id v11 = v30;
    unint64_t v12 = v38;
    Signpost.OpenSignpost.end()();
    int64_t v13 = v36;
    swift_release();
  }
  *a3 = v11;
  a3[1] = v12;
  a3[2] = v13;
  a3[3] = v14;
  a3[4] = v27;
  a3[5] = v28;
}

void ThirdPartyAnnotatedAppStore.findApp(identifier:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  id v4 = ThirdPartyAnnotatedAppStore.getApplicationRecord(identifier:)(a1, a2);
  if (v4)
  {
    uint64_t v6 = v4;
    uint64_t v7 = v5;
    id v8 = [v4 applicationExtensionRecords];
    type metadata accessor for LSApplicationExtensionRecord();
    lazy protocol witness table accessor for type LSApplicationExtensionRecord and conformance NSObject(&lazy protocol witness table cache variable for type LSApplicationExtensionRecord and conformance NSObject, (void (*)(uint64_t))type metadata accessor for LSApplicationExtensionRecord);
    uint64_t v9 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    ThirdPartyAnnotatedAppStore.getExtensionBundleId(extensions:)(v9);
    swift_bridgeObjectRelease();
    type metadata accessor for App();
    swift_bridgeObjectRetain();
    uint64_t v10 = App.__allocating_init(appIdentifier:pluginIdentifier:)();
    id v11 = [v7 supportedIntents];
    uint64_t v12 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    id v13 = [v7 actionsRestrictedWhileLocked];
    uint64_t v14 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v15 = App.appIdentifier.getter();
    uint64_t v17 = v16;
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.siriPhone);
    OUTLINED_FUNCTION_13_9();
    unint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315138;
      type metadata accessor for ThirdPartyAnnotatedAppStore();
      swift_retain();
      uint64_t v22 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_9_5();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v19, v20, "#%s No app found", v21, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {

      OUTLINED_FUNCTION_9_5();
    }
    uint64_t v10 = 0;
    uint64_t v12 = 0;
    uint64_t v15 = 0;
    uint64_t v17 = 0;
    uint64_t v14 = 0;
  }
  *a3 = v10;
  a3[1] = v12;
  a3[2] = v15;
  a3[3] = v17;
  a3[4] = 0;
  a3[5] = v14;
}

Swift::Int ThirdPartyAnnotatedAppStore.getExtensionBundleId(extensions:)(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) == 0)
  {
    uint64_t v20 = swift_bridgeObjectRetain();
    uint64_t v1 = (void *)specialized _NativeSet.filter(_:)(v20);
    goto LABEL_27;
  }
  uint64_t v1 = &_swiftEmptySetSingleton;
  swift_bridgeObjectRetain();
  __CocoaSet.makeIterator()();
  if (!__CocoaSet.Iterator.next()())
  {
LABEL_25:
    swift_release();
LABEL_27:
    specialized Sequence.compactMap<A>(_:)((uint64_t)v1);
    uint64_t v22 = v21;
    swift_release();
    if (*(void *)(v22 + 16))
    {
      uint64_t v23 = *(void *)(v22 + 32);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v23 = 0;
    }
    swift_bridgeObjectRelease();
    return v23;
  }
  type metadata accessor for LSApplicationExtensionRecord();
  while (1)
  {
    swift_dynamicCast();
    id v2 = [v24 extensionPointRecord];
    id v3 = [v2 identifier];

    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;

    if (v4 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v6 == v7) {
      break;
    }
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_11;
    }

LABEL_23:
    if (!__CocoaSet.Iterator.next()())
    {
      uint64_t v1 = &_swiftEmptySetSingleton;
      goto LABEL_25;
    }
  }
  swift_bridgeObjectRelease_n();
LABEL_11:
  if (*((void *)&_swiftEmptySetSingleton + 3) <= *((void *)&_swiftEmptySetSingleton + 2)) {
    specialized _NativeSet.resize(capacity:)();
  }
  Swift::Int result = NSObject._rawHashValue(seed:)(*((void *)&_swiftEmptySetSingleton + 5));
  id v11 = (char *)&_swiftEmptySetSingleton + 56;
  uint64_t v12 = -1 << *((unsigned char *)&_swiftEmptySetSingleton + 32);
  unint64_t v13 = result & ~v12;
  unint64_t v14 = v13 >> 6;
  if (((-1 << v13) & ~*((void *)&_swiftEmptySetSingleton + (v13 >> 6) + 7)) != 0)
  {
    unint64_t v15 = __clz(__rbit64((-1 << v13) & ~*((void *)&_swiftEmptySetSingleton + (v13 >> 6) + 7))) | v13 & 0x7FFFFFFFFFFFFFC0;
LABEL_22:
    *(void *)&v11[(v15 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v15;
    *(void *)(*((void *)&_swiftEmptySetSingleton + 6) + 8 * v15) = v24;
    ++*((void *)&_swiftEmptySetSingleton + 2);
    goto LABEL_23;
  }
  char v16 = 0;
  unint64_t v17 = (unint64_t)(63 - v12) >> 6;
  while (++v14 != v17 || (v16 & 1) == 0)
  {
    BOOL v18 = v14 == v17;
    if (v14 == v17) {
      unint64_t v14 = 0;
    }
    v16 |= v18;
    uint64_t v19 = *(void *)&v11[8 * v14];
    if (v19 != -1)
    {
      unint64_t v15 = __clz(__rbit64(~v19)) + (v14 << 6);
      goto LABEL_22;
    }
  }
  __break(1u);
  return result;
}

id ThirdPartyAnnotatedAppStore.getApplicationRecord(identifier:)(uint64_t a1, unint64_t a2)
{
  id v4 = objc_allocWithZone((Class)LSApplicationRecord);
  swift_bridgeObjectRetain();
  id v5 = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(a1, a2, 0);
  if (![self appInfoWithApplicationRecord:v5])
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.siriPhone);
    id v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_0, v8, v9, "Error initializing INAppInfo", v10, 2u);
      OUTLINED_FUNCTION_6();
    }

    swift_bridgeObjectRetain_n();
    id v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      unint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)unint64_t v13 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_0, v11, v12, "Error INAppInfo id is: %s", v13, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
  return v5;
}

uint64_t ThirdPartyAnnotatedAppStore.deinit()
{
  swift_release();
  return v0;
}

uint64_t ThirdPartyAnnotatedAppStore.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for AnnotatedAppStoring.getApp(for:) in conformance ThirdPartyAnnotatedAppStore@<X0>(uint64_t a1@<X8>)
{
  (*(void (**)(void *__return_ptr))(**(void **)v1 + 120))(v4);
  return _s27PhoneCallFlowDelegatePlugin12AnnotatedAppVSgWObTm_0((uint64_t)v4, a1, &demangling cache variable for type metadata for AnnotatedApp?);
}

void specialized _NativeSet.resize(capacity:)()
{
  OUTLINED_FUNCTION_1_31();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  uint64_t v2 = OUTLINED_FUNCTION_0_24();
  uint64_t v3 = v2;
  if (*(void *)(v1 + 16))
  {
    int64_t v4 = 0;
    uint64_t v6 = (uint64_t *)(v1 + 56);
    uint64_t v5 = *(void *)(v1 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v1 + 32);
    uint64_t v24 = -1 << v7;
    uint64_t v25 = v0;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & v5;
    uint64_t v26 = 1 << *(unsigned char *)(v1 + 32);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v2 + 56;
    if ((v8 & v5) == 0) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v12 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (unint64_t i = v12 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v4 << 6))
    {
      uint64_t v17 = *(void *)(*(void *)(v1 + 48) + 8 * i);
      unint64_t v18 = static Hasher._hash(seed:_:)() & ~(-1 << *(unsigned char *)(v3 + 32));
      if (((-1 << v18) & ~*(void *)(v11 + 8 * (v18 >> 6))) == 0)
      {
        OUTLINED_FUNCTION_7_25();
        while (1)
        {
          OUTLINED_FUNCTION_10_13();
          if (v23)
          {
            if (v20) {
              break;
            }
          }
          if (v21 == v22) {
            uint64_t v21 = 0;
          }
          if (*(void *)(v11 + 8 * v21) != -1)
          {
            OUTLINED_FUNCTION_2_34();
            goto LABEL_31;
          }
        }
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_3_5();
LABEL_31:
      *(void *)(v11 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      *(void *)(*(void *)(v3 + 48) + 8 * v19) = v17;
      ++*(void *)(v3 + 16);
      if (v9) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v14 = v4 + 1;
      if (__OFADD__(v4, 1)) {
        goto LABEL_39;
      }
      if (v14 >= v10) {
        goto LABEL_33;
      }
      unint64_t v15 = v6[v14];
      ++v4;
      if (!v15)
      {
        int64_t v4 = v14 + 1;
        if (v14 + 1 >= v10) {
          goto LABEL_33;
        }
        unint64_t v15 = v6[v4];
        if (!v15)
        {
          int64_t v4 = v14 + 2;
          if (v14 + 2 >= v10) {
            goto LABEL_33;
          }
          unint64_t v15 = v6[v4];
          if (!v15)
          {
            int64_t v16 = v14 + 3;
            if (v16 >= v10)
            {
LABEL_33:
              if (v26 > 63) {
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, v10, (void *)(v1 + 56));
              }
              else {
                *uint64_t v6 = v24;
              }
              uint64_t v0 = v25;
              *(void *)(v1 + 16) = 0;
              break;
            }
            unint64_t v15 = v6[v16];
            if (!v15)
            {
              while (1)
              {
                int64_t v4 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_40;
                }
                if (v4 >= v10) {
                  goto LABEL_33;
                }
                unint64_t v15 = v6[v4];
                ++v16;
                if (v15) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v4 = v16;
          }
        }
      }
LABEL_20:
      unint64_t v9 = (v15 - 1) & v15;
    }
  }
  swift_release();
  *uint64_t v0 = v3;
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t i;
  int64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;

  OUTLINED_FUNCTION_1_31();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v2 = OUTLINED_FUNCTION_0_24();
  if (*(void *)(v1 + 16))
  {
    OUTLINED_FUNCTION_14_12();
    uint64_t v34 = (uint64_t)v0;
    uint64_t v35 = v5;
    if (v3 < 64) {
      uint64_t v6 = ~(-1 << v3);
    }
    else {
      uint64_t v6 = -1;
    }
    uint64_t v7 = v6 & v4;
    uint64_t v8 = (unint64_t)(v3 + 63) >> 6;
    unint64_t v9 = v2 + 56;
    swift_retain();
    int64_t v10 = 0;
    if (!v7) {
      goto LABEL_7;
    }
LABEL_6:
    OUTLINED_FUNCTION_19_12();
    for (unint64_t i = v11 | (v10 << 6); ; unint64_t i = v17 + (v10 << 6))
    {
      unint64_t v18 = (uint64_t *)(*(void *)(v1 + 48) + 16 * i);
      unint64_t v19 = *v18;
      char v20 = v18[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t v21 = Hasher._finalize()() & ~(-1 << *(unsigned char *)(v2 + 32));
      if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) == 0)
      {
        OUTLINED_FUNCTION_7_25();
        while (1)
        {
          OUTLINED_FUNCTION_10_13();
          if (v25)
          {
            if (v22) {
              break;
            }
          }
          if (v23 == v24) {
            char v23 = 0;
          }
          if (*(void *)(v9 + 8 * v23) != -1)
          {
            OUTLINED_FUNCTION_2_34();
            goto LABEL_31;
          }
        }
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_3_5();
LABEL_31:
      OUTLINED_FUNCTION_17_9();
      *(void *)(v9 + v26) |= v27;
      int64_t v29 = (void *)(*(void *)(v2 + 48) + 16 * v28);
      *int64_t v29 = v19;
      v29[1] = v20;
      OUTLINED_FUNCTION_8_26();
      if (v7) {
        goto LABEL_6;
      }
LABEL_7:
      if (__OFADD__(v10, 1)) {
        goto LABEL_39;
      }
      if (v10 + 1 >= v8) {
        goto LABEL_33;
      }
      OUTLINED_FUNCTION_18_12();
      int64_t v10 = v13;
      if (!v14)
      {
        int64_t v10 = v13 + 1;
        if (v13 + 1 >= v8) {
          goto LABEL_33;
        }
        if (!v35[v10])
        {
          int64_t v10 = v13 + 2;
          if (v13 + 2 >= v8) {
            goto LABEL_33;
          }
          if (!v35[v10])
          {
            if (v13 + 3 >= v8)
            {
LABEL_33:
              swift_release();
              uint64_t v0 = (void *)v34;
              OUTLINED_FUNCTION_5_25();
              if (v31 ^ v32 | v25) {
                OUTLINED_FUNCTION_23_8(v30, v33, v34, v35);
              }
              else {
                OUTLINED_FUNCTION_20_11(v30, v33, v34, v35);
              }
              *(void *)(v1 + 16) = 0;
              break;
            }
            OUTLINED_FUNCTION_18_12();
            if (!v16)
            {
              while (1)
              {
                int64_t v10 = v15 + 1;
                if (__OFADD__(v15, 1)) {
                  goto LABEL_40;
                }
                if (v10 >= v8) {
                  goto LABEL_33;
                }
                ++v15;
                if (v35[v10]) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v10 = v15;
          }
        }
      }
LABEL_20:
      OUTLINED_FUNCTION_22_8();
    }
  }
  swift_release();
  *uint64_t v0 = v2;
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;

  OUTLINED_FUNCTION_1_31();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<OngoingCallOfferOptions>);
  uint64_t v5 = OUTLINED_FUNCTION_0_24();
  if (*(void *)(v1 + 16))
  {
    OUTLINED_FUNCTION_4_28();
    uint64_t v6 = 0;
    if (!v4) {
      goto LABEL_4;
    }
LABEL_3:
    OUTLINED_FUNCTION_12_11();
    while (1)
    {
      specialized _NativeSet._unsafeInsertNew(_:)(*(unsigned char *)(*(void *)(v1 + 48) + v7));
      if (v4) {
        goto LABEL_3;
      }
LABEL_4:
      uint64_t v8 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
        return;
      }
      if (v8 >= v3) {
        goto LABEL_20;
      }
      ++v6;
      if (!v2[v8])
      {
        uint64_t v6 = v8 + 1;
        if (v8 + 1 >= v3) {
          goto LABEL_20;
        }
        if (!v2[v6])
        {
          uint64_t v6 = v8 + 2;
          if (v8 + 2 >= v3) {
            goto LABEL_20;
          }
          if (!v2[v6])
          {
            unint64_t v9 = v8 + 3;
            if (v9 >= v3)
            {
LABEL_20:
              swift_release();
              OUTLINED_FUNCTION_5_25();
              if (v12 ^ v13 | v11) {
                *uint64_t v2 = -1 << v10;
              }
              else {
                OUTLINED_FUNCTION_21_10(v10);
              }
              *(void *)(v1 + 16) = 0;
              break;
            }
            if (!v2[v9])
            {
              while (1)
              {
                uint64_t v6 = v9 + 1;
                if (__OFADD__(v9, 1)) {
                  goto LABEL_26;
                }
                if (v6 >= v3) {
                  goto LABEL_20;
                }
                ++v9;
                if (v2[v6]) {
                  goto LABEL_17;
                }
              }
            }
            uint64_t v6 = v9;
          }
        }
      }
LABEL_17:
      OUTLINED_FUNCTION_16_17();
    }
  }
  swift_release();
  *uint64_t v0 = v5;
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;

  OUTLINED_FUNCTION_1_31();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String?>);
  uint64_t v5 = OUTLINED_FUNCTION_0_24();
  if (*(void *)(v1 + 16))
  {
    OUTLINED_FUNCTION_4_28();
    uint64_t v6 = 0;
    if (!v4) {
      goto LABEL_4;
    }
LABEL_3:
    OUTLINED_FUNCTION_12_11();
    while (1)
    {
      specialized _NativeSet._unsafeInsertNew(_:)(*(void *)(*(void *)(v1 + 48) + 16 * v7), *(void *)(*(void *)(v1 + 48) + 16 * v7 + 8));
      if (v4) {
        goto LABEL_3;
      }
LABEL_4:
      uint64_t v8 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
        return;
      }
      if (v8 >= v3) {
        goto LABEL_20;
      }
      ++v6;
      if (!v2[v8])
      {
        uint64_t v6 = v8 + 1;
        if (v8 + 1 >= v3) {
          goto LABEL_20;
        }
        if (!v2[v6])
        {
          uint64_t v6 = v8 + 2;
          if (v8 + 2 >= v3) {
            goto LABEL_20;
          }
          if (!v2[v6])
          {
            unint64_t v9 = v8 + 3;
            if (v9 >= v3)
            {
LABEL_20:
              swift_release();
              OUTLINED_FUNCTION_5_25();
              if (v12 ^ v13 | v11) {
                *uint64_t v2 = -1 << v10;
              }
              else {
                OUTLINED_FUNCTION_21_10(v10);
              }
              *(void *)(v1 + 16) = 0;
              break;
            }
            if (!v2[v9])
            {
              while (1)
              {
                uint64_t v6 = v9 + 1;
                if (__OFADD__(v9, 1)) {
                  goto LABEL_26;
                }
                if (v6 >= v3) {
                  goto LABEL_20;
                }
                ++v9;
                if (v2[v6]) {
                  goto LABEL_17;
                }
              }
            }
            uint64_t v6 = v9;
          }
        }
      }
LABEL_17:
      OUTLINED_FUNCTION_16_17();
    }
  }
  swift_release();
  *uint64_t v0 = v5;
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t i;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  int64_t v30;
  void *v31;

  OUTLINED_FUNCTION_1_31();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<App>);
  uint64_t v2 = OUTLINED_FUNCTION_0_24();
  if (*(void *)(v1 + 16))
  {
    OUTLINED_FUNCTION_14_12();
    uint64_t v31 = v5;
    if (v3 < 64) {
      uint64_t v6 = ~(-1 << v3);
    }
    else {
      uint64_t v6 = -1;
    }
    uint64_t v7 = v6 & v4;
    int64_t v29 = (uint64_t)v0;
    uint64_t v30 = (unint64_t)(v3 + 63) >> 6;
    uint64_t v8 = v2 + 56;
    swift_retain();
    unint64_t v9 = 0;
    if (!v7) {
      goto LABEL_7;
    }
LABEL_6:
    OUTLINED_FUNCTION_19_12();
    for (unint64_t i = v10 | (v9 << 6); ; unint64_t i = v16 + (v9 << 6))
    {
      uint64_t v17 = *(void *)(*(void *)(v1 + 48) + 8 * i);
      type metadata accessor for App();
      lazy protocol witness table accessor for type LSApplicationExtensionRecord and conformance NSObject(&lazy protocol witness table cache variable for type App and conformance App, (void (*)(uint64_t))&type metadata accessor for App);
      unint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)() & ~(-1 << *(unsigned char *)(v2 + 32));
      if (((-1 << v18) & ~*(void *)(v8 + 8 * (v18 >> 6))) == 0)
      {
        OUTLINED_FUNCTION_7_25();
        while (1)
        {
          OUTLINED_FUNCTION_10_13();
          if (v22)
          {
            if (v19) {
              break;
            }
          }
          if (v20 == v21) {
            char v20 = 0;
          }
          if (*(void *)(v8 + 8 * v20) != -1)
          {
            OUTLINED_FUNCTION_2_34();
            goto LABEL_31;
          }
        }
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_3_5();
LABEL_31:
      OUTLINED_FUNCTION_17_9();
      *(void *)(v8 + v23) |= v24;
      *(void *)(*(void *)(v2 + 48) + 8 * v25) = v17;
      OUTLINED_FUNCTION_8_26();
      if (v7) {
        goto LABEL_6;
      }
LABEL_7:
      if (__OFADD__(v9, 1)) {
        goto LABEL_39;
      }
      if (v9 + 1 >= v30) {
        goto LABEL_33;
      }
      OUTLINED_FUNCTION_18_12();
      unint64_t v9 = v12;
      if (!v13)
      {
        unint64_t v9 = v12 + 1;
        if (v12 + 1 >= v30) {
          goto LABEL_33;
        }
        if (!v31[v9])
        {
          unint64_t v9 = v12 + 2;
          if (v12 + 2 >= v30) {
            goto LABEL_33;
          }
          if (!v31[v9])
          {
            if (v12 + 3 >= v30)
            {
LABEL_33:
              swift_release();
              uint64_t v0 = (void *)v29;
              OUTLINED_FUNCTION_5_25();
              if (v27 ^ v28 | v22) {
                OUTLINED_FUNCTION_23_8(v26, v29, v30, v31);
              }
              else {
                OUTLINED_FUNCTION_20_11(v26, v29, v30, v31);
              }
              *(void *)(v1 + 16) = 0;
              break;
            }
            OUTLINED_FUNCTION_18_12();
            if (!v15)
            {
              while (1)
              {
                unint64_t v9 = v14 + 1;
                if (__OFADD__(v14, 1)) {
                  goto LABEL_40;
                }
                if (v9 >= v30) {
                  goto LABEL_33;
                }
                ++v14;
                if (v31[v9]) {
                  goto LABEL_20;
                }
              }
            }
            unint64_t v9 = v14;
          }
        }
      }
LABEL_20:
      OUTLINED_FUNCTION_22_8();
    }
  }
  swift_release();
  *uint64_t v0 = v2;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t i;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t *v35;
  void (**v36)(char *, uint64_t);
  void (**v37)(char *, char *, uint64_t);
  int64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
  uint64_t v41 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  unint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v35 - v10;
  unint64_t v12 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?>);
  unint64_t v13 = static _SetStorage.resize(original:capacity:move:)();
  int64_t v14 = v12;
  unint64_t v15 = v13;
  if (*(void *)(v14 + 16))
  {
    int64_t v16 = 1 << *(unsigned char *)(v14 + 32);
    uint64_t v17 = *(void *)(v14 + 56);
    os_log_type_t v39 = (void *)(v14 + 56);
    if (v16 < 64) {
      unint64_t v18 = ~(-1 << v16);
    }
    else {
      unint64_t v18 = -1;
    }
    unint64_t v19 = v18 & v17;
    uint64_t v37 = (void (**)(char *, char *, uint64_t))(v3 + 32);
    id v38 = (unint64_t)(v16 + 63) >> 6;
    uint64_t v35 = v1;
    uint64_t v36 = (void (**)(char *, uint64_t))(v3 + 8);
    char v20 = v13 + 56;
    swift_retain();
    uint64_t v21 = 0;
    long long v40 = v14;
    if (!v19) {
      goto LABEL_7;
    }
LABEL_6:
    uint64_t v22 = __clz(__rbit64(v19));
    v19 &= v19 - 1;
    for (unint64_t i = v22 | (v21 << 6); ; unint64_t i = __clz(__rbit64(v25)) + (v21 << 6))
    {
      uint64_t v27 = *(void *)(v41 + 72);
      _s27PhoneCallFlowDelegatePlugin12AnnotatedAppVSgWObTm_0(*(void *)(v14 + 48) + v27 * i, (uint64_t)v11, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
      Hasher.init(_seed:)();
      outlined init with copy of UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?((uint64_t)v11, (uint64_t)v9);
      if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v2) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        (*v37)(v5, v9, v2);
        Hasher._combine(_:)(1u);
        lazy protocol witness table accessor for type LSApplicationExtensionRecord and conformance NSObject(&lazy protocol witness table cache variable for type UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues and conformance UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues, (void (*)(uint64_t))&type metadata accessor for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues);
        dispatch thunk of Hashable.hash(into:)();
        (*v36)(v5, v2);
      }
      uint64_t v28 = Hasher._finalize()() & ~(-1 << *(unsigned char *)(v15 + 32));
      if (((-1 << v28) & ~*(void *)(v20 + 8 * (v28 >> 6))) == 0)
      {
        OUTLINED_FUNCTION_7_25();
        int64_t v14 = v40;
        while (1)
        {
          OUTLINED_FUNCTION_10_13();
          if (v33)
          {
            if (v30) {
              break;
            }
          }
          if (v31 == v32) {
            uint64_t v31 = 0;
          }
          if (*(void *)(v20 + 8 * v31) != -1)
          {
            OUTLINED_FUNCTION_2_34();
            goto LABEL_34;
          }
        }
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_3_5();
      int64_t v14 = v40;
LABEL_34:
      *(void *)(v20 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
      _s27PhoneCallFlowDelegatePlugin12AnnotatedAppVSgWObTm_0((uint64_t)v11, *(void *)(v15 + 48) + v29 * v27, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
      OUTLINED_FUNCTION_8_26();
      if (v19) {
        goto LABEL_6;
      }
LABEL_7:
      uint64_t v24 = v21 + 1;
      if (__OFADD__(v21, 1)) {
        goto LABEL_42;
      }
      if (v24 >= v38) {
        goto LABEL_36;
      }
      uint64_t v25 = v39[v24];
      ++v21;
      if (!v25)
      {
        uint64_t v21 = v24 + 1;
        if (v24 + 1 >= v38) {
          goto LABEL_36;
        }
        uint64_t v25 = v39[v21];
        if (!v25)
        {
          uint64_t v21 = v24 + 2;
          if (v24 + 2 >= v38) {
            goto LABEL_36;
          }
          uint64_t v25 = v39[v21];
          if (!v25)
          {
            uint64_t v26 = v24 + 3;
            if (v26 >= v38)
            {
LABEL_36:
              swift_release();
              uint64_t v1 = v35;
              uint64_t v34 = 1 << *(unsigned char *)(v14 + 32);
              if (v34 > 63) {
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v34 + 63) >> 6, v39);
              }
              else {
                *os_log_type_t v39 = -1 << v34;
              }
              *(void *)(v14 + 16) = 0;
              break;
            }
            uint64_t v25 = v39[v26];
            if (!v25)
            {
              while (1)
              {
                uint64_t v21 = v26 + 1;
                if (__OFADD__(v26, 1)) {
                  goto LABEL_43;
                }
                if (v21 >= v38) {
                  goto LABEL_36;
                }
                uint64_t v25 = v39[v21];
                ++v26;
                if (v25) {
                  goto LABEL_20;
                }
              }
            }
            uint64_t v21 = v26;
          }
        }
      }
LABEL_20:
      unint64_t v19 = (v25 - 1) & v25;
    }
  }
  swift_release();
  *uint64_t v1 = v15;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;

  OUTLINED_FUNCTION_1_31();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<SharedNeedsValueContext.NeedsValueCase>);
  uint64_t v2 = OUTLINED_FUNCTION_0_24();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16)) {
    goto LABEL_34;
  }
  uint64_t v22 = v0;
  char v23 = v1;
  int64_t v4 = 0;
  uint64_t v5 = (void *)(v1 + 56);
  uint64_t v6 = 1 << *(unsigned char *)(v1 + 32);
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  else {
    uint64_t v7 = -1;
  }
  uint64_t v8 = v7 & *(void *)(v1 + 56);
  unint64_t v9 = (unint64_t)(v6 + 63) >> 6;
  int64_t v10 = v2 + 56;
  if (v8)
  {
LABEL_19:
    while (1)
    {
      Hasher.init(_seed:)();
      Hasher._combine(_:)(0);
      unint64_t v13 = Hasher._finalize()() & ~(-1 << *(unsigned char *)(v3 + 32));
      if (((-1 << v13) & ~*(void *)(v10 + 8 * (v13 >> 6))) == 0) {
        break;
      }
      OUTLINED_FUNCTION_3_5();
LABEL_28:
      v8 &= v8 - 1;
      *(void *)(v10 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      OUTLINED_FUNCTION_8_26();
      if (!v8) {
        goto LABEL_6;
      }
    }
    while (1)
    {
      OUTLINED_FUNCTION_10_13();
      if (v18)
      {
        if (v15) {
          break;
        }
      }
      if (v16 == v17) {
        int64_t v16 = 0;
      }
      if (*(void *)(v10 + 8 * v16) != -1)
      {
        OUTLINED_FUNCTION_2_34();
        goto LABEL_28;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_6:
    uint64_t v11 = v4 + 1;
    if (!__OFADD__(v4, 1))
    {
      if (v11 < v9)
      {
        uint64_t v8 = v5[v11];
        ++v4;
        if (v8) {
          goto LABEL_19;
        }
        int64_t v4 = v11 + 1;
        if (v11 + 1 < v9)
        {
          uint64_t v8 = v5[v4];
          if (v8) {
            goto LABEL_19;
          }
          int64_t v4 = v11 + 2;
          if (v11 + 2 < v9)
          {
            uint64_t v8 = v5[v4];
            if (v8) {
              goto LABEL_19;
            }
            unint64_t v12 = v11 + 3;
            if (v12 < v9)
            {
              uint64_t v8 = v5[v12];
              if (v8)
              {
                int64_t v4 = v12;
                goto LABEL_19;
              }
              while (1)
              {
                int64_t v4 = v12 + 1;
                if (__OFADD__(v12, 1)) {
                  goto LABEL_37;
                }
                if (v4 >= v9) {
                  break;
                }
                uint64_t v8 = v5[v4];
                ++v12;
                if (v8) {
                  goto LABEL_19;
                }
              }
            }
          }
        }
      }
      OUTLINED_FUNCTION_5_25();
      if (v20 ^ v21 | v18) {
        *uint64_t v5 = -1 << v19;
      }
      else {
        specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v19 + 63) >> 6, v5);
      }
      uint64_t v0 = v22;
      *(void *)(v23 + 16) = 0;
LABEL_34:
      swift_release();
      *uint64_t v0 = v3;
      return;
    }
  }
  __break(1u);
LABEL_37:
  __break(1u);
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<LSApplicationExtensionRecord>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v28 = v0;
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    if (!v8) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v13 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
    {
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * i);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v10 + 8 * (v20 >> 6))) == 0)
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v19) >> 6;
        while (++v21 != v24 || (v23 & 1) == 0)
        {
          BOOL v25 = v21 == v24;
          if (v21 == v24) {
            unint64_t v21 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v10 + 8 * v21);
          if (v26 != -1)
          {
            unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v22 = __clz(__rbit64((-1 << v20) & ~*(void *)(v10 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v10 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      *(void *)(*(void *)(v4 + 48) + 8 * v22) = v18;
      ++*(void *)(v4 + 16);
      if (v8) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v15 = v12 + 1;
      if (__OFADD__(v12, 1)) {
        goto LABEL_38;
      }
      if (v15 >= v9) {
        goto LABEL_32;
      }
      unint64_t v16 = v6[v15];
      ++v12;
      if (!v16)
      {
        int64_t v12 = v15 + 1;
        if (v15 + 1 >= v9) {
          goto LABEL_32;
        }
        unint64_t v16 = v6[v12];
        if (!v16)
        {
          int64_t v12 = v15 + 2;
          if (v15 + 2 >= v9) {
            goto LABEL_32;
          }
          unint64_t v16 = v6[v12];
          if (!v16)
          {
            int64_t v17 = v15 + 3;
            if (v17 >= v9)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v28;
              uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
              if (v27 > 63) {
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v27 + 63) >> 6, (void *)(v2 + 56));
              }
              else {
                *uint64_t v6 = -1 << v27;
              }
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v16 = v6[v17];
            if (!v16)
            {
              while (1)
              {
                int64_t v12 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_39;
                }
                if (v12 >= v9) {
                  goto LABEL_32;
                }
                unint64_t v16 = v6[v12];
                ++v17;
                if (v16) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v12 = v17;
          }
        }
      }
LABEL_20:
      unint64_t v8 = (v16 - 1) & v16;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

unint64_t type metadata accessor for LSApplicationExtensionRecord()
{
  unint64_t result = lazy cache variable for type metadata for LSApplicationExtensionRecord;
  if (!lazy cache variable for type metadata for LSApplicationExtensionRecord)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for LSApplicationExtensionRecord);
  }
  return result;
}

uint64_t specialized _NativeSet.filter(_:)(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    uint64_t v5 = (uint64_t *)((char *)&v9 - ((8 * v4 + 15) & 0x3FFFFFFFFFFFFFF0));
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v4, v5);
    uint64_t v6 = specialized closure #1 in _NativeSet.filter(_:)((uint64_t)v5, v4, v2);
    swift_release();
    if (v1) {
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v7 = (void *)swift_slowAlloc();
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v4, v7);
    uint64_t v6 = specialized closure #1 in _NativeSet.filter(_:)((uint64_t)v7, v4, v2);
    swift_release();
    swift_slowDealloc();
  }
  return v6;
}

uint64_t specialized closure #1 in _NativeSet.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v24 = (unint64_t *)result;
  uint64_t v25 = 0;
  int64_t v4 = 0;
  uint64_t v5 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a3 + 56);
  int64_t v27 = (unint64_t)(v5 + 63) >> 6;
  while (v7)
  {
    unint64_t v8 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v9 = v8 | (v4 << 6);
LABEL_20:
    id v13 = *(id *)(*(void *)(a3 + 48) + 8 * v9);
    id v14 = [v13 extensionPointRecord];
    id v15 = [v14 identifier];

    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v17;

    if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v18 == v19)
    {

      unint64_t result = swift_bridgeObjectRelease_n();
LABEL_27:
      *(unint64_t *)((char *)v24 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
      if (__OFADD__(v25++, 1))
      {
        __break(1u);
LABEL_30:
        swift_retain();
        return specialized _NativeSet.extractSubset(using:count:)(v24, a2, v25, a3);
      }
    }
    else
    {
      char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      unint64_t result = swift_bridgeObjectRelease();
      if (v21) {
        goto LABEL_27;
      }
    }
  }
  int64_t v10 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v10 >= v27) {
    goto LABEL_30;
  }
  unint64_t v11 = *(void *)(v26 + 8 * v10);
  ++v4;
  if (v11) {
    goto LABEL_19;
  }
  int64_t v4 = v10 + 1;
  if (v10 + 1 >= v27) {
    goto LABEL_30;
  }
  unint64_t v11 = *(void *)(v26 + 8 * v4);
  if (v11) {
    goto LABEL_19;
  }
  int64_t v4 = v10 + 2;
  if (v10 + 2 >= v27) {
    goto LABEL_30;
  }
  unint64_t v11 = *(void *)(v26 + 8 * v4);
  if (v11)
  {
LABEL_19:
    unint64_t v7 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v4 << 6);
    goto LABEL_20;
  }
  int64_t v12 = v10 + 3;
  if (v12 >= v27) {
    goto LABEL_30;
  }
  unint64_t v11 = *(void *)(v26 + 8 * v12);
  if (v11)
  {
    int64_t v4 = v12;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v4 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v4 >= v27) {
      goto LABEL_30;
    }
    unint64_t v11 = *(void *)(v26 + 8 * v4);
    ++v12;
    if (v11) {
      goto LABEL_19;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    unint64_t v9 = &_swiftEmptySetSingleton;
LABEL_35:
    swift_release();
    return (uint64_t)v9;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<LSApplicationExtensionRecord>);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  unint64_t v9 = (void *)result;
  int64_t v29 = a1;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    uint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_39;
    }
    if (v15 >= a2) {
      goto LABEL_35;
    }
    unint64_t v16 = v29[v15];
    ++v11;
    if (!v16)
    {
      uint64_t v11 = v15 + 1;
      if (v15 + 1 >= a2) {
        goto LABEL_35;
      }
      unint64_t v16 = v29[v11];
      if (!v16)
      {
        uint64_t v11 = v15 + 2;
        if (v15 + 2 >= a2) {
          goto LABEL_35;
        }
        unint64_t v16 = v29[v11];
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    Swift::Int v18 = v9[5];
    id v19 = *(id *)(*(void *)(v4 + 48) + 8 * v14);
    uint64_t result = NSObject._rawHashValue(seed:)(v18);
    uint64_t v20 = -1 << *((unsigned char *)v9 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v12 + 8 * (v21 >> 6))) == 0)
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v12 + 8 * v22);
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(void *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    *(void *)(v9[6] + 8 * v23) = v19;
    ++v9[2];
    if (__OFSUB__(v5--, 1)) {
      goto LABEL_38;
    }
    if (!v5) {
      goto LABEL_35;
    }
  }
  uint64_t v17 = v15 + 3;
  if (v17 >= a2) {
    goto LABEL_35;
  }
  unint64_t v16 = v29[v17];
  if (v16)
  {
    uint64_t v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= a2) {
      goto LABEL_35;
    }
    unint64_t v16 = v29[v11];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t outlined bridged method (pb) of @objc LSBundleRecord.bundleIdentifier.getter(void *a1)
{
  id v1 = [a1 bundleIdentifier];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t lazy protocol witness table accessor for type LSApplicationExtensionRecord and conformance NSObject(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_24()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t OUTLINED_FUNCTION_4_28()
{
  return swift_retain();
}

void OUTLINED_FUNCTION_8_26()
{
  ++*(void *)(v0 + 16);
}

uint64_t OUTLINED_FUNCTION_11_16()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_13_9()
{
  return swift_retain_n();
}

void OUTLINED_FUNCTION_15_13(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, a2, v5, a4, v4, 0x16u);
}

uint64_t OUTLINED_FUNCTION_20_11@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, void *a4)
{
  return specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(a1 + 63) >> 6, a4);
}

void OUTLINED_FUNCTION_23_8(char a1@<W8>, uint64_t a2, uint64_t a3, void *a4)
{
  *a4 = -1 << a1;
}

void SiriKitDisambiguationList.description.getter()
{
  _StringGuts.grow(_:)(96);
  OUTLINED_FUNCTION_2_35(0xD000000000000018, (uint64_t)"{ shouldReadItemsInVox: ");
  char ItemsIn = SiriKitDisambiguationList.shouldReadItemsInVox.getter();
  BOOL v1 = (ItemsIn & 1) == 0;
  if (ItemsIn) {
    uint64_t v2 = 1702195828;
  }
  else {
    uint64_t v2 = 0x65736C6166;
  }
  if (v1) {
    unint64_t v3 = 0xE500000000000000;
  }
  else {
    unint64_t v3 = 0xE400000000000000;
  }
  unint64_t v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_35(0xD000000000000029, (uint64_t)", requestUnlockForEmptyOrDuplicateItems: ");
  char v5 = SiriKitDisambiguationList.requestUnlockForEmptyOrDuplicateItems.getter();
  BOOL v6 = (v5 & 1) == 0;
  if (v5) {
    uint64_t v7 = 1702195828;
  }
  else {
    uint64_t v7 = 0x65736C6166;
  }
  if (v6) {
    unint64_t v8 = 0xE500000000000000;
  }
  else {
    unint64_t v8 = 0xE400000000000000;
  }
  unint64_t v9 = v8;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  v10._object = (void *)0x8000000000492FF0;
  v10._uint64_t countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v10);
  unint64_t v11 = SiriKitDisambiguationList.disambiguationItems.getter();
  unint64_t v12 = v11;
  if (!(v11 >> 62))
  {
    uint64_t v13 = *(void *)((char *)&dword_10 + (v11 & 0xFFFFFFFFFFFFFF8));
    if (v13) {
      goto LABEL_15;
    }
LABEL_25:
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v21 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v23 = v22;
    swift_bridgeObjectRelease();
    v24._uint64_t countAndFlagsBits = v21;
    v24._object = v23;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._uint64_t countAndFlagsBits = 32010;
    v25._object = (void *)0xE200000000000000;
    String.append(_:)(v25);
    return;
  }
  uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
  if (!v13) {
    goto LABEL_25;
  }
LABEL_15:
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v13 & 0x8000000000000000) == 0)
  {
    uint64_t v14 = 0;
    do
    {
      if ((v12 & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      SiriKitDisambiguationItem.description.getter();
      uint64_t v16 = v15;
      uint64_t v18 = v17;
      swift_release();
      unint64_t v19 = _swiftEmptyArrayStorage[2];
      if (v19 >= _swiftEmptyArrayStorage[3] >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      ++v14;
      _swiftEmptyArrayStorage[2] = v19 + 1;
      uint64_t v20 = &_swiftEmptyArrayStorage[2 * v19];
      v20[4] = v16;
      v20[5] = v18;
    }
    while (v13 != v14);
    goto LABEL_25;
  }
  __break(1u);
}

void SiriKitDisambiguationItem.description.getter()
{
  _StringGuts.grow(_:)(58);
  v0._object = (void *)0x8000000000493010;
  v0._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v0);
  unint64_t v1 = SiriKitDisambiguationItem.components.getter();
  unint64_t v2 = v1;
  if (v1 >> 62) {
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v3 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8));
  }
  if (v3)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    if (v3 < 0)
    {
      __break(1u);
      return;
    }
    uint64_t v4 = 0;
    do
    {
      if ((v2 & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      uint64_t v5 = SiriKitDisambiguationItemComponent.description.getter();
      uint64_t v7 = v6;
      swift_release();
      unint64_t v8 = _swiftEmptyArrayStorage[2];
      if (v8 >= _swiftEmptyArrayStorage[3] >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      ++v4;
      _swiftEmptyArrayStorage[2] = v8 + 1;
      unint64_t v9 = &_swiftEmptyArrayStorage[2 * v8];
      v9[4] = v5;
      uint64_t v9[5] = v7;
    }
    while (v3 != v4);
  }
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v10 = BidirectionalCollection<>.joined(separator:)();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_35(0xD000000000000017, (uint64_t)" ]\ncontactIdentifiers: ");
  SiriKitDisambiguationItem.contactIdentifiers.getter();
  v14._uint64_t countAndFlagsBits = Array.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = 0x6172676F6E6F6D0ALL;
  v15._object = (void *)0xEB00000000203A6DLL;
  String.append(_:)(v15);
  uint64_t v16 = SiriKitDisambiguationItem.monogramLetters.getter();
  if (v17)
  {
    unint64_t v18 = v17;
  }
  else
  {
    uint64_t v16 = 7104878;
    unint64_t v18 = 0xE300000000000000;
  }
  unint64_t v19 = v18;
  String.append(_:)(*(Swift::String *)&v16);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 32010;
  v20._object = (void *)0xE200000000000000;
  String.append(_:)(v20);
}

void protocol witness for CustomStringConvertible.description.getter in conformance SiriKitDisambiguationList()
{
}

uint64_t SiriKitDisambiguationItemComponent.description.getter()
{
  _StringGuts.grow(_:)(110);
  v0._uint64_t countAndFlagsBits = 0x3A746E697270207BLL;
  v0._object = (void *)0xE900000000000020;
  String.append(_:)(v0);
  SiriKitDisambiguationItemComponent.print.getter();
  String.debugDescription.getter();
  OUTLINED_FUNCTION_1_32();
  OUTLINED_FUNCTION_2_12();
  swift_bridgeObjectRelease();
  v1._object = (void *)0x8000000000493050;
  v1._uint64_t countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v1);
  SiriKitDisambiguationItemComponent.printOnLockScreen.getter();
  String.debugDescription.getter();
  OUTLINED_FUNCTION_1_32();
  OUTLINED_FUNCTION_2_12();
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 0x3A6B61657073202CLL;
  v2._object = (void *)0xE900000000000020;
  String.append(_:)(v2);
  SiriKitDisambiguationItemComponent.speak.getter();
  String.debugDescription.getter();
  OUTLINED_FUNCTION_1_32();
  OUTLINED_FUNCTION_2_12();
  swift_bridgeObjectRelease();
  v3._object = (void *)0x8000000000493070;
  v3._uint64_t countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v3);
  SiriKitDisambiguationItemComponent.speakOnLockScreen.getter();
  String.debugDescription.getter();
  OUTLINED_FUNCTION_1_32();
  OUTLINED_FUNCTION_2_12();
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 0xD000000000000017;
  v4._object = (void *)0x8000000000493090;
  String.append(_:)(v4);
  char v5 = SiriKitDisambiguationItemComponent.allowedOnLockScreen.getter();
  BOOL v6 = (v5 & 1) == 0;
  if (v5) {
    uint64_t v7 = 1702195828;
  }
  else {
    uint64_t v7 = 0x65736C6166;
  }
  if (v6) {
    unint64_t v8 = 0xE500000000000000;
  }
  else {
    unint64_t v8 = 0xE400000000000000;
  }
  unint64_t v9 = v8;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 0x42746E697270202CLL;
  v10._object = (void *)0xED0000203A65756CLL;
  String.append(_:)(v10);
  char v11 = SiriKitDisambiguationItemComponent.printBlue.getter();
  BOOL v12 = (v11 & 1) == 0;
  if (v11) {
    uint64_t v13 = 1702195828;
  }
  else {
    uint64_t v13 = 0x65736C6166;
  }
  if (v12) {
    unint64_t v14 = 0xE500000000000000;
  }
  else {
    unint64_t v14 = 0xE400000000000000;
  }
  unint64_t v15 = v14;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease();
  v16._uint64_t countAndFlagsBits = 32032;
  v16._object = (void *)0xE200000000000000;
  String.append(_:)(v16);
  return 0;
}

void protocol witness for CustomStringConvertible.description.getter in conformance SiriKitDisambiguationItem()
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriKitDisambiguationItemComponent()
{
  return SiriKitDisambiguationItemComponent.description.getter();
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_32()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_2_35(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t UsoTaskBuilder.asUsoGraph()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoBuilderOptions?);
  __chkstk_darwin(v1 - 8);
  unint64_t v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_46A030;
  *(void *)(v4 + 32) = v0;
  v7[1] = v4;
  specialized Array._endMutation()();
  uint64_t v5 = type metadata accessor for UsoBuilderOptions();
  __swift_storeEnumTagSinglePayload((uint64_t)v3, 1, 1, v5);
  swift_retain();
  static UsoGraphBuilder.buildGraphWithOptions(taskBuilders:options:)();
  swift_bridgeObjectRelease();
  outlined destroy of UsoBuilderOptions?((uint64_t)v3);
  static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)();
  return swift_release();
}

uint64_t outlined destroy of UsoBuilderOptions?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoBuilderOptions?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t UsoTaskBuilder.toUserStatedTaskDialogAct()()
{
  uint64_t v0 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  __chkstk_darwin(v0 - 8);
  uint64_t v1 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = &v9[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v3);
  uint64_t v7 = &v9[-v6];
  Siri_Nlu_External_UserStatedTask.init()();
  UsoTaskBuilder.asUsoGraph()();
  Siri_Nlu_External_UserStatedTask.task.setter();
  Siri_Nlu_External_UserDialogAct.init()();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v2 + 16))(v5, v7, v1);
  Siri_Nlu_External_UserDialogAct.userStatedTask.setter();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v2 + 8))(v7, v1);
}

void static NLv4JoinTransformer.transform(joinTask:)(uint64_t *a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (contact: PhoneCallNLv4Contact, contactQuery: ContactQuery));
  OUTLINED_FUNCTION_0_0();
  v113 = v3;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)v103 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  Swift::String v10 = (char *)v103 - v9;
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_10_14();
  v114 = v11;
  OUTLINED_FUNCTION_36();
  uint64_t v12 = type metadata accessor for ContactQuery();
  OUTLINED_FUNCTION_0_0();
  uint64_t v111 = v13;
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_5_8();
  uint64_t v105 = v15;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v16);
  OUTLINED_FUNCTION_10_14();
  uint64_t v112 = v17;
  dispatch thunk of Uso_VerbTemplate_ReferenceTarget.reference.getter();
  uint64_t v18 = v118;
  if (!(void)v118)
  {
    unint64_t v22 = _swiftEmptyArrayStorage;
    uint64_t v120 = 0;
    long long v118 = 0u;
    long long v119 = 0u;
    a1[3] = (uint64_t)&type metadata for PhoneCallNLv4Intent;
    a1[4] = (uint64_t)&protocol witness table for PhoneCallNLv4Intent;
    *a1 = swift_allocObject();
    uint64_t v102 = _swiftEmptyArrayStorage;
    OUTLINED_FUNCTION_4_29();
    Swift::String v25 = _swiftEmptyArrayStorage;
LABEL_91:
    PhoneCallNLv4Intent.init(contactQueries:contacts:app:phoneCallAVMode:phoneCallAttributes:phoneCallAudioRoute:phoneCallCapability:phoneCallConfirmation:phoneCallDestinationType:phoneCallNoun:phoneCallPreferredProvider:phoneCallReference:phoneCallVerb:voiceMailVerb:voiceMailNoun:smsGroups:references:)((uint64_t)v25, (uint64_t)v22, v23, 2, 0, 4, 2, 5, v24, v101, (uint64_t)v102, (uint64_t)_swiftEmptyArrayStorage);
    return;
  }
  v110 = v10;
  uint64_t v19 = dispatch thunk of UsoEntity_common_PhoneCall.sender.getter();
  uint64_t v109 = v12;
  v106 = a1;
  if (v19)
  {
    uint64_t v20 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(agent: UsoEntity_common_Agent, contactRole: PhoneCallContactRole)>);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_467710;
    *(void *)(v21 + 32) = v20;
    v107 = (void *)v21;
    *(unsigned char *)(v21 + 40) = 0;
  }
  else
  {
    v107 = _swiftEmptyArrayStorage;
  }
  uint64_t v108 = v18;
  uint64_t v26 = dispatch thunk of UsoEntity_common_PhoneCall.recipients.getter();
  if (v26) {
    unint64_t v27 = v26;
  }
  else {
    unint64_t v27 = (unint64_t)_swiftEmptyArrayStorage;
  }
  *(void *)&long long v118 = _swiftEmptyArrayStorage;
  if (v27 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
    if (v28) {
      goto LABEL_11;
    }
LABEL_23:
    swift_bridgeObjectRelease();
    unint64_t v31 = (unint64_t)_swiftEmptyArrayStorage;
    goto LABEL_24;
  }
  uint64_t v28 = *(void *)((char *)&dword_10 + (v27 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  if (!v28) {
    goto LABEL_23;
  }
LABEL_11:
  if (v28 < 1)
  {
    __break(1u);
    goto LABEL_93;
  }
  for (uint64_t i = 0; i != v28; ++i)
  {
    if ((v27 & 0xC000000000000001) != 0) {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      swift_retain();
    }
    dispatch thunk of CodeGenListEntry.entry.getter();
    swift_release();
    if (v117)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      OUTLINED_FUNCTION_9_21();
      if (v30) {
        OUTLINED_FUNCTION_6_19();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v31 = v118;
LABEL_24:
  v115 = v7;
  uint64_t v116 = v2;
  swift_bridgeObjectRelease();
  if (v31 >> 62)
  {
    OUTLINED_FUNCTION_16_18();
    uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v32) {
      goto LABEL_36;
    }
  }
  else
  {
    uint64_t v32 = *(void *)((char *)&dword_10 + (v31 & 0xFFFFFFFFFFFFFF8));
    if (!v32) {
      goto LABEL_36;
    }
  }
  *(void *)&long long v118 = _swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if (v32 < 0)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  uint64_t v33 = 0;
  uint64_t v34 = v118;
  do
  {
    if ((v31 & 0xC000000000000001) != 0)
    {
      uint64_t v35 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v35 = *(void *)(v31 + 8 * v33 + 32);
      swift_retain();
    }
    *(void *)&long long v118 = v34;
    unint64_t v37 = *(void *)(v34 + 16);
    unint64_t v36 = *(void *)(v34 + 24);
    if (v37 >= v36 >> 1)
    {
      OUTLINED_FUNCTION_12_12(v36);
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v34 = v118;
    }
    ++v33;
    *(void *)(v34 + 16) = v37 + 1;
    uint64_t v38 = v34 + 16 * v37;
    *(void *)(v38 + 32) = v35;
    *(unsigned char *)(v38 + 40) = 2;
  }
  while (v32 != v33);
LABEL_36:
  swift_bridgeObjectRelease();
  uint64_t v39 = dispatch thunk of UsoEntity_common_PhoneCall.participants.getter();
  if (v39) {
    unint64_t v40 = v39;
  }
  else {
    unint64_t v40 = (unint64_t)_swiftEmptyArrayStorage;
  }
  *(void *)&long long v118 = _swiftEmptyArrayStorage;
  if (!(v40 >> 62))
  {
    uint64_t v41 = *(void *)((char *)&dword_10 + (v40 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (v41) {
      goto LABEL_41;
    }
LABEL_53:
    swift_bridgeObjectRelease();
    unint64_t v43 = (unint64_t)_swiftEmptyArrayStorage;
    goto LABEL_54;
  }
  OUTLINED_FUNCTION_16_18();
  uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
  if (!v41) {
    goto LABEL_53;
  }
LABEL_41:
  if (v41 < 1)
  {
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }
  for (uint64_t j = 0; j != v41; ++j)
  {
    if ((v40 & 0xC000000000000001) != 0) {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      swift_retain();
    }
    dispatch thunk of CodeGenListEntry.entry.getter();
    swift_release();
    if (v117)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      OUTLINED_FUNCTION_9_21();
      if (v30) {
        OUTLINED_FUNCTION_6_19();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v43 = v118;
LABEL_54:
  swift_bridgeObjectRelease();
  if (!(v43 >> 62))
  {
    uint64_t v44 = *(void *)((char *)&dword_10 + (v43 & 0xFFFFFFFFFFFFFF8));
    if (v44) {
      goto LABEL_56;
    }
LABEL_66:
    swift_bridgeObjectRelease();
    *(void *)&long long v118 = v107;
    specialized Array.append<A>(contentsOf:)();
    specialized Array.append<A>(contentsOf:)();
    uint64_t v50 = _swiftEmptyArrayStorage;
    uint64_t v117 = _swiftEmptyArrayStorage;
    uint64_t v51 = *(void *)(v118 + 16);
    uint64_t v52 = v116;
    if (v51)
    {
      uint64_t v53 = (void (**)(char *, void (**)(void, void), uint64_t))(v111 + 32);
      uint64_t v54 = (unsigned __int8 *)(v118 + 40);
      do
      {
        int v55 = *v54;
        swift_retain();
        if (UsoEntity_common_Agent.asCommonGroup()())
        {
          swift_retain();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          OUTLINED_FUNCTION_9_21();
          if (v30) {
            OUTLINED_FUNCTION_6_19();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          swift_release();
        }
        else
        {
          type metadata accessor for PhoneCallNLv4Contact();
          uint64_t v56 = swift_allocObject();
          uint64_t v57 = swift_retain();
          uint64_t v58 = specialized PhoneCallNLv4Contact.init(contactConvertible:contactRole:)(v57, v55, v56);
          uint64_t v59 = v112;
          UsoEntity_common_Agent.toContactQuery()();
          long long v60 = (char *)v114 + *(int *)(v52 + 48);
          uint64_t *v114 = v58;
          (*v53)(v60, v59, v109);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v50 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v50[2] + 1, 1, (uint64_t)v50);
          }
          unint64_t v62 = v50[2];
          unint64_t v61 = v50[3];
          if (v62 >= v61 >> 1) {
            uint64_t v50 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v61 > 1, v62 + 1, 1, (uint64_t)v50);
          }
          v50[2] = v62 + 1;
          OUTLINED_FUNCTION_13_10();
          outlined init with take of (contact: PhoneCallNLv4Contact, contactQuery: ContactQuery)(v65, (uint64_t)v50 + v63 + *(void *)(v64 + 72) * v62);
        }
        swift_release();
        v54 += 16;
        --v51;
      }
      while (v51);
    }
    swift_bridgeObjectRelease();
    uint64_t v66 = v50[2];
    if (!v66) {
      goto LABEL_89;
    }
    *(void *)&long long v118 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)();
    OUTLINED_FUNCTION_13_10();
    v107 = v50;
    uint64_t v68 = (uint64_t)v50 + v67;
    uint64_t v70 = *(uint64_t **)(v69 + 72);
    uint64_t v71 = v110;
    uint64_t v72 = (void *)(v111 + 16);
    uint64_t v112 = (void (**)(void, void))(v111 + 8);
    v113 = (void *)(v111 + 16);
    uint64_t v104 = v68;
    uint64_t v73 = v109;
    v114 = v70;
    do
    {
      _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(v68, (uint64_t)v71, &demangling cache variable for type metadata for (contact: PhoneCallNLv4Contact, contactQuery: ContactQuery));
      uint64_t v74 = v115;
      uint64_t v75 = *(int *)(v116 + 48);
      long long v76 = (char *)v115 + v75;
      void *v115 = *v71;
      uint64_t v77 = (void (**)(void, void))*v72;
      ((void (*)(char *, char *, uint64_t))*v72)((char *)v74 + v75, (char *)v71 + v75, v73);
      uint64_t v78 = *v112;
      swift_retain();
      v78(v76, v73);
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v71, &demangling cache variable for type metadata for (contact: PhoneCallNLv4Contact, contactQuery: ContactQuery));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      uint64_t v72 = v113;
      uint64_t v79 = v114;
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v68 += (uint64_t)v79;
      --v66;
    }
    while (v66);
    uint64_t v112 = v77;
    uint64_t v80 = v118;
    char v81 = v107;
    swift_bridgeObjectRelease();
    uint64_t v82 = v81[2];
    if (v82)
    {
      v103[1] = v80;
      *(void *)&long long v118 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v83 = (void (**)(uint64_t, char *, uint64_t))(v111 + 32);
      uint64_t v84 = v109;
      uint64_t v85 = v104;
      uint64_t v86 = v105;
      do
      {
        uint64_t v87 = v85;
        uint64_t v88 = (uint64_t)v110;
        _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(v85, (uint64_t)v110, &demangling cache variable for type metadata for (contact: PhoneCallNLv4Contact, contactQuery: ContactQuery));
        uint64_t v89 = *(int *)(v116 + 48);
        uint64_t v90 = (char *)v115 + v89;
        ((void (*)(char *, uint64_t, uint64_t))v112)((char *)v115 + v89, v88 + v89, v84);
        uint64_t v91 = *v83;
        (*v83)((uint64_t)v86, v90, v84);
        outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v88, &demangling cache variable for type metadata for (contact: PhoneCallNLv4Contact, contactQuery: ContactQuery));
        uint64_t v92 = (void *)v118;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v92 = (void *)v118;
        }
        unint64_t v94 = v92[2];
        unint64_t v93 = v92[3];
        if (v94 >= v93 >> 1)
        {
          OUTLINED_FUNCTION_12_12(v93);
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v92 = (void *)v118;
        }
        v92[2] = v94 + 1;
        OUTLINED_FUNCTION_13_10();
        v91((uint64_t)v92 + v95 + *(void *)(v96 + 72) * v94, v86, v84);
        *(void *)&long long v118 = v92;
        uint64_t v85 = (uint64_t)v114 + v87;
        --v82;
      }
      while (v82);
      swift_bridgeObjectRelease_n();
      uint64_t v97 = v106;
    }
    else
    {
LABEL_89:
      swift_bridgeObjectRelease();
      uint64_t v92 = _swiftEmptyArrayStorage;
      uint64_t v97 = v106;
    }
    specialized _arrayForceCast<A, B>(_:)();
    unint64_t v22 = v98;
    swift_bridgeObjectRelease();
    uint64_t v120 = 0;
    long long v118 = 0u;
    long long v119 = 0u;
    specialized _arrayForceCast<A, B>(_:)();
    uint64_t v100 = v99;
    swift_release();
    swift_bridgeObjectRelease();
    v97[3] = (uint64_t)&type metadata for PhoneCallNLv4Intent;
    v97[4] = (uint64_t)&protocol witness table for PhoneCallNLv4Intent;
    *uint64_t v97 = swift_allocObject();
    uint64_t v102 = v100;
    OUTLINED_FUNCTION_4_29();
    Swift::String v25 = v92;
    goto LABEL_91;
  }
  swift_bridgeObjectRetain();
  uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v44) {
    goto LABEL_66;
  }
LABEL_56:
  *(void *)&long long v118 = _swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v44 & 0x8000000000000000) == 0)
  {
    uint64_t v45 = 0;
    uint64_t v46 = v118;
    do
    {
      if ((v43 & 0xC000000000000001) != 0)
      {
        uint64_t v47 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v47 = *(void *)(v43 + 8 * v45 + 32);
        swift_retain();
      }
      *(void *)&long long v118 = v46;
      unint64_t v48 = *(void *)(v46 + 16);
      if (v48 >= *(void *)(v46 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v46 = v118;
      }
      ++v45;
      *(void *)(v46 + 16) = v48 + 1;
      uint64_t v49 = v46 + 16 * v48;
      *(void *)(v49 + 32) = v47;
      *(unsigned char *)(v49 + 40) = 1;
    }
    while (v44 != v45);
    goto LABEL_66;
  }
LABEL_95:
  __break(1u);
}

uint64_t sub_D4798()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 56)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 120, 7);
}

uint64_t outlined init with take of (contact: PhoneCallNLv4Contact, contactQuery: ContactQuery)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (contact: PhoneCallNLv4Contact, contactQuery: ContactQuery));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for NLv4JoinTransformer()
{
  return &type metadata for NLv4JoinTransformer;
}

uint64_t outlined consume of PhoneCallEmergencyType(uint64_t a1, unint64_t a2)
{
  if (a2 >= 3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined copy of PhoneCallEmergencyType(uint64_t a1, unint64_t a2)
{
  if (a2 >= 3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_6_19()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_11_17()
{
  return static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
}

BOOL OUTLINED_FUNCTION_12_12@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t OUTLINED_FUNCTION_16_18()
{
  return swift_bridgeObjectRetain();
}

uint64_t App.toUsoEntityBuilder(locale:)()
{
  uint64_t v0 = type metadata accessor for UsoIdentifier();
  OUTLINED_FUNCTION_0_0();
  uint64_t v2 = v1;
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_4();
  uint64_t v6 = v5 - v4;
  type metadata accessor for UsoEntityBuilder_common_App();
  swift_allocObject();
  uint64_t v7 = UsoEntityBuilder_common_App.init()();
  type metadata accessor for AppInformationResolver();
  swift_allocObject();
  swift_retain();
  AppInformationResolver.init(app:)();
  dispatch thunk of AppInformationResolver.getLocalizedAppDisplayName(inLocale:)();
  uint64_t v9 = v8;
  swift_release();
  if (v9)
  {
    dispatch thunk of UsoEntityBuilder_common_App.setName(value:)();
    swift_bridgeObjectRelease();
  }
  App.appIdentifier.getter();
  if (v10)
  {
    if (dispatch thunk of UsoEntityBuilder_common_App.name.getter())
    {
      UsoIdentifier.init(value:appBundleId:namespace:)();
      dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v6, v0);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  return v7;
}

Swift::Bool __swiftcall App.isPhoneFirstPartyApp()()
{
  uint64_t v0 = App.appIdentifier.getter();
  char v2 = static PhoneCallAppNameConstants.isPhone(appId:)(v0, v1);
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t App.getAppName(forLocale:appInfoBuilder:)(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[3];
  uint64_t v5 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 16))(v2, a1, v4, v5);
}

uint64_t App.toSpeakableStringAppName(forLocale:appInfoBuilder:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 16))(v3, a1, v6, v7);
  if (v8)
  {
    SpeakableString.init(print:speak:)();
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = 1;
  }
  uint64_t v10 = type metadata accessor for SpeakableString();

  return __swift_storeEnumTagSinglePayload(a3, v9, 1, v10);
}

uint64_t App.settingsUrl.getter()
{
  uint64_t v0 = (uint8_t *)0xD000000000000010;
  type metadata accessor for PhoneError();
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_4();
  uint64_t v4 = v3 - v2;
  uint64_t v5 = App.appIdentifier.getter();
  char v7 = static PhoneCallAppNameConstants.isPhone(appId:)(v5, v6);
  swift_bridgeObjectRelease();
  if ((v7 & 1) == 0)
  {
    if (App.isFaceTime()())
    {
      return 0xD000000000000013;
    }
    else
    {
      uint64_t v9 = App.appIdentifier.getter();
      if (v10)
      {
        String.append(_:)(*(Swift::String *)&v9);
        swift_bridgeObjectRelease();
        return 0x666572702D707061;
      }
      else
      {
        if (one-time initialization token for siriPhone != -1) {
          swift_once();
        }
        uint64_t v11 = type metadata accessor for Logger();
        __swift_project_value_buffer(v11, (uint64_t)static Logger.siriPhone);
        uint64_t v12 = Logger.logObject.getter();
        os_log_type_t v13 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v12, v13))
        {
          uint64_t v0 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v0 = 0;
          _os_log_impl(&dword_0, v12, v13, "#App+SiriKitPhone missing app identifier when getting settingsUrl", v0, 2u);
          swift_slowDealloc();
        }

        swift_storeEnumTagMultiPayload();
        lazy protocol witness table accessor for type PhoneError and conformance PhoneError();
        swift_allocError();
        PhoneError.logged()(v14);
        outlined destroy of PhoneError(v4, (void (*)(void))type metadata accessor for PhoneError);
        swift_willThrow();
      }
    }
  }
  return (uint64_t)v0;
}

uint64_t App.toAppDescription(deviceState:appInfoBuilder:)@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v42 = (int *)type metadata accessor for AppDescription();
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_3_1();
  uint64_t v38 = v7;
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_0();
  uint64_t v40 = v9;
  uint64_t v41 = v8;
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_3_1();
  uint64_t v39 = v10;
  type metadata accessor for CommonDirectAction();
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_4();
  uint64_t v14 = (uint64_t *)(v13 - v12);
  uint64_t v15 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_0_0();
  uint64_t v17 = v16;
  __chkstk_darwin(v18);
  OUTLINED_FUNCTION_4();
  uint64_t v21 = v20 - v19;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of DeviceState.siriLocale.getter();
  uint64_t v22 = a2[3];
  uint64_t v23 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v22);
  uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 16))(v3, v21, v22, v23);
  uint64_t v26 = v25;
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v21, v15);
  if (!v26) {
    goto LABEL_5;
  }
  uint64_t v27 = App.appIdentifier.getter();
  if (!v28)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    uint64_t v36 = 1;
    uint64_t v32 = (uint64_t)v42;
    uint64_t v35 = a3;
    return __swift_storeEnumTagSinglePayload(v35, v36, 1, v32);
  }
  uint64_t v29 = v27;
  uint64_t v30 = v28;
  *uint64_t v14 = v27;
  v14[1] = v28;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  CommonDirectAction.toSAIntentGroupRunSiriKitExecutor(deviceState:)(a1);
  outlined destroy of PhoneError((uint64_t)v14, (void (*)(void))type metadata accessor for CommonDirectAction);
  Swift::Bool v31 = App.isFirstParty()();
  UUID.init()();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v38, v39, v41);
  uint64_t v32 = (uint64_t)v42;
  uint64_t v33 = (uint64_t *)(v38 + v42[5]);
  uint64_t *v33 = v24;
  v33[1] = v26;
  uint64_t v34 = (uint64_t *)(v38 + v42[6]);
  *uint64_t v34 = v29;
  v34[1] = v30;
  *(unsigned char *)(v38 + v42[7]) = v31;
  type metadata accessor for SAIntentGroupRunSiriKitExecutor();
  CodableAceObject.init(wrappedValue:)();
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v41);
  uint64_t v35 = a3;
  outlined init with take of AppDescription(v38, a3);
  uint64_t v36 = 0;
  return __swift_storeEnumTagSinglePayload(v35, v36, 1, v32);
}

uint64_t Unmanaged<>.stringValue.getter(void *a1)
{
  id v1 = a1;
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t outlined destroy of PhoneError(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_15();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t outlined init with take of AppDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

#error "D52CC: call analysis failed (funcsize=22)"

id specialized static NLv4IntentConversion.setIntentMetadata(for:sharedGlobals:app:previousIntent:)(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  OUTLINED_FUNCTION_6_20();
  OUTLINED_FUNCTION_3_31(v25, v26, v27, v28);
  id v29 = [v24 _metadata];
  uint64_t v30 = v29;
  if (v29)
  {
    id v31 = [v29 intentId];

    if (v31)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_17_10();
      OUTLINED_FUNCTION_15_14();
      id v29 = (id)OUTLINED_FUNCTION_16_19();
    }
    else
    {
      uint64_t v30 = 0;
    }
  }
  OUTLINED_FUNCTION_20_12((uint64_t)v29, "setIdentifier:");

  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  id v33 = OUTLINED_FUNCTION_22_9(v32, (uint64_t)static Logger.siriPhone);
  uint64_t v34 = (void *)OUTLINED_FUNCTION_21_11();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_10_15(v35))
  {
    OUTLINED_FUNCTION_11_7();
    OUTLINED_FUNCTION_9_22();
    OUTLINED_FUNCTION_2_36(4.8151e-34);
    OUTLINED_FUNCTION_4_30((uint64_t)&type metadata for String, (uint64_t)&outlined read-only object #0 of specialized static NLv4IntentConversion.setIntentMetadata(for:sharedGlobals:app:previousIntent:));
    OUTLINED_FUNCTION_14_13(v36, v37, v38);
    OUTLINED_FUNCTION_0_25();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_11_18();
    [a9 debugDescription];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_18_13();
    OUTLINED_FUNCTION_13_11(v39, v40, v41);
    OUTLINED_FUNCTION_1_33();

    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_5_26(&dword_0, v42, v43, "%s Converted intent: %s");
    OUTLINED_FUNCTION_12_13();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
  }
  OUTLINED_FUNCTION_7_26();
  return v44;
}

{
  void *v24;
  int v25;
  int v26;
  uint64_t v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  id v33;
  void *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;

  OUTLINED_FUNCTION_6_20();
  OUTLINED_FUNCTION_3_31(v25, v26, v27, v28);
  id v29 = [v24 _metadata];
  uint64_t v30 = v29;
  if (v29)
  {
    id v31 = [v29 intentId];

    if (v31)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_17_10();
      OUTLINED_FUNCTION_15_14();
      id v29 = (id)OUTLINED_FUNCTION_16_19();
    }
    else
    {
      uint64_t v30 = 0;
    }
  }
  OUTLINED_FUNCTION_20_12((uint64_t)v29, "setIdentifier:");

  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  id v33 = OUTLINED_FUNCTION_22_9(v32, (uint64_t)static Logger.siriPhone);
  uint64_t v34 = (void *)OUTLINED_FUNCTION_21_11();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_10_15(v35))
  {
    OUTLINED_FUNCTION_11_7();
    OUTLINED_FUNCTION_9_22();
    OUTLINED_FUNCTION_2_36(4.8151e-34);
    OUTLINED_FUNCTION_4_30((uint64_t)&type metadata for String, (uint64_t)&outlined read-only object #0 of specialized static NLv4IntentConversion.setIntentMetadata(for:sharedGlobals:app:previousIntent:));
    OUTLINED_FUNCTION_14_13(v36, v37, v38);
    OUTLINED_FUNCTION_0_25();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_11_18();
    [a9 debugDescription];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_18_13();
    OUTLINED_FUNCTION_13_11(v39, v40, v41);
    OUTLINED_FUNCTION_1_33();

    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_5_26(&dword_0, v42, v43, "%s Converted intent: %s");
    OUTLINED_FUNCTION_12_13();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
  }
  OUTLINED_FUNCTION_7_26();
  return v44;
}

{
  void *v24;
  int v25;
  int v26;
  uint64_t v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  id v33;
  void *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;

  OUTLINED_FUNCTION_6_20();
  OUTLINED_FUNCTION_3_31(v25, v26, v27, v28);
  id v29 = [v24 _metadata];
  uint64_t v30 = v29;
  if (v29)
  {
    id v31 = [v29 intentId];

    if (v31)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_17_10();
      OUTLINED_FUNCTION_15_14();
      id v29 = (id)OUTLINED_FUNCTION_16_19();
    }
    else
    {
      uint64_t v30 = 0;
    }
  }
  OUTLINED_FUNCTION_20_12((uint64_t)v29, "setIdentifier:");

  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  id v33 = OUTLINED_FUNCTION_22_9(v32, (uint64_t)static Logger.siriPhone);
  uint64_t v34 = (void *)OUTLINED_FUNCTION_21_11();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_10_15(v35))
  {
    OUTLINED_FUNCTION_11_7();
    OUTLINED_FUNCTION_9_22();
    OUTLINED_FUNCTION_2_36(4.8151e-34);
    OUTLINED_FUNCTION_4_30((uint64_t)&type metadata for String, (uint64_t)&outlined read-only object #0 of specialized static NLv4IntentConversion.setIntentMetadata(for:sharedGlobals:app:previousIntent:));
    OUTLINED_FUNCTION_14_13(v36, v37, v38);
    OUTLINED_FUNCTION_0_25();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_11_18();
    [a9 debugDescription];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_18_13();
    OUTLINED_FUNCTION_13_11(v39, v40, v41);
    OUTLINED_FUNCTION_1_33();

    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_5_26(&dword_0, v42, v43, "%s Converted intent: %s");
    OUTLINED_FUNCTION_12_13();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
  }
  OUTLINED_FUNCTION_7_26();
  return v44;
}

{
  void *v24;
  int v25;
  int v26;
  uint64_t v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  id v33;
  void *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;

  OUTLINED_FUNCTION_6_20();
  OUTLINED_FUNCTION_3_31(v25, v26, v27, v28);
  id v29 = [v24 _metadata];
  uint64_t v30 = v29;
  if (v29)
  {
    id v31 = [v29 intentId];

    if (v31)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_17_10();
      OUTLINED_FUNCTION_15_14();
      id v29 = (id)OUTLINED_FUNCTION_16_19();
    }
    else
    {
      uint64_t v30 = 0;
    }
  }
  OUTLINED_FUNCTION_20_12((uint64_t)v29, "setIdentifier:");

  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  id v33 = OUTLINED_FUNCTION_22_9(v32, (uint64_t)static Logger.siriPhone);
  uint64_t v34 = (void *)OUTLINED_FUNCTION_21_11();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_10_15(v35))
  {
    OUTLINED_FUNCTION_11_7();
    OUTLINED_FUNCTION_9_22();
    OUTLINED_FUNCTION_2_36(4.8151e-34);
    OUTLINED_FUNCTION_4_30((uint64_t)&type metadata for String, (uint64_t)&outlined read-only object #0 of specialized static NLv4IntentConversion.setIntentMetadata(for:sharedGlobals:app:previousIntent:));
    OUTLINED_FUNCTION_14_13(v36, v37, v38);
    OUTLINED_FUNCTION_0_25();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_11_18();
    [a9 debugDescription];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_18_13();
    OUTLINED_FUNCTION_13_11(v39, v40, v41);
    OUTLINED_FUNCTION_1_33();

    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_5_26(&dword_0, v42, v43, "%s Converted intent: %s");
    OUTLINED_FUNCTION_12_13();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
  }
  OUTLINED_FUNCTION_7_26();
  return v44;
}

{
  void *v24;
  int v25;
  int v26;
  uint64_t v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  id v33;
  void *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;

  OUTLINED_FUNCTION_6_20();
  OUTLINED_FUNCTION_3_31(v25, v26, v27, v28);
  id v29 = [v24 _metadata];
  uint64_t v30 = v29;
  if (v29)
  {
    id v31 = [v29 intentId];

    if (v31)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_17_10();
      OUTLINED_FUNCTION_15_14();
      id v29 = (id)OUTLINED_FUNCTION_16_19();
    }
    else
    {
      uint64_t v30 = 0;
    }
  }
  OUTLINED_FUNCTION_20_12((uint64_t)v29, "setIdentifier:");

  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  id v33 = OUTLINED_FUNCTION_22_9(v32, (uint64_t)static Logger.siriPhone);
  uint64_t v34 = (void *)OUTLINED_FUNCTION_21_11();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_10_15(v35))
  {
    OUTLINED_FUNCTION_11_7();
    OUTLINED_FUNCTION_9_22();
    OUTLINED_FUNCTION_2_36(4.8151e-34);
    OUTLINED_FUNCTION_4_30((uint64_t)&type metadata for String, (uint64_t)&outlined read-only object #0 of specialized static NLv4IntentConversion.setIntentMetadata(for:sharedGlobals:app:previousIntent:));
    OUTLINED_FUNCTION_14_13(v36, v37, v38);
    OUTLINED_FUNCTION_0_25();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_11_18();
    [a9 debugDescription];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_18_13();
    OUTLINED_FUNCTION_13_11(v39, v40, v41);
    OUTLINED_FUNCTION_1_33();

    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_5_26(&dword_0, v42, v43, "%s Converted intent: %s");
    OUTLINED_FUNCTION_12_13();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
  }
  OUTLINED_FUNCTION_7_26();
  return v44;
}

{
  void *v24;
  int v25;
  int v26;
  uint64_t v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  id v33;
  void *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;

  OUTLINED_FUNCTION_6_20();
  OUTLINED_FUNCTION_3_31(v25, v26, v27, v28);
  id v29 = [v24 _metadata];
  uint64_t v30 = v29;
  if (v29)
  {
    id v31 = [v29 intentId];

    if (v31)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_17_10();
      OUTLINED_FUNCTION_15_14();
      id v29 = (id)OUTLINED_FUNCTION_16_19();
    }
    else
    {
      uint64_t v30 = 0;
    }
  }
  OUTLINED_FUNCTION_20_12((uint64_t)v29, "setIdentifier:");

  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  id v33 = OUTLINED_FUNCTION_22_9(v32, (uint64_t)static Logger.siriPhone);
  uint64_t v34 = (void *)OUTLINED_FUNCTION_21_11();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_10_15(v35))
  {
    OUTLINED_FUNCTION_11_7();
    OUTLINED_FUNCTION_9_22();
    OUTLINED_FUNCTION_2_36(4.8151e-34);
    OUTLINED_FUNCTION_4_30((uint64_t)&type metadata for String, (uint64_t)&outlined read-only object #0 of specialized static NLv4IntentConversion.setIntentMetadata(for:sharedGlobals:app:previousIntent:));
    OUTLINED_FUNCTION_14_13(v36, v37, v38);
    OUTLINED_FUNCTION_0_25();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_11_18();
    [a9 debugDescription];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_18_13();
    OUTLINED_FUNCTION_13_11(v39, v40, v41);
    OUTLINED_FUNCTION_1_33();

    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_5_26(&dword_0, v42, v43, "%s Converted intent: %s");
    OUTLINED_FUNCTION_12_13();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
  }
  OUTLINED_FUNCTION_7_26();
  return v44;
}

ValueMetadata *type metadata accessor for SearchCallHistoryIntentConversion()
{
  return &type metadata for SearchCallHistoryIntentConversion;
}

uint64_t OUTLINED_FUNCTION_0_25()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_1_33()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_2_36(float a1)
{
  *id v1 = a1;
}

void OUTLINED_FUNCTION_3_31(int a1, int a2, uint64_t a3, id a4)
{
  INIntent.setMetaData(app:previousIntent:sharedGlobals:)(a3, a4);
}

void OUTLINED_FUNCTION_4_30(uint64_t a1, uint64_t a2)
{
  DefaultStringInterpolation.appendInterpolation(type:tags:function:)(a1, a2, 0, 0);
}

uint64_t OUTLINED_FUNCTION_9_22()
{
  return swift_slowAlloc();
}

BOOL OUTLINED_FUNCTION_10_15(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void OUTLINED_FUNCTION_11_18()
{
  *(_WORD *)(v0 + 12) = 2080;
}

uint64_t OUTLINED_FUNCTION_12_13()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_13_11(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v4, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_14_13(uint64_t a1, uint64_t a2, unint64_t a3, ...)
{
  va_start(va, a3);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, (uint64_t *)va);
}

NSString OUTLINED_FUNCTION_15_14()
{
  return String._bridgeToObjectiveC()();
}

uint64_t OUTLINED_FUNCTION_16_19()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_17_10()
{
}

void OUTLINED_FUNCTION_18_13()
{
}

id OUTLINED_FUNCTION_20_12(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

id OUTLINED_FUNCTION_22_9(uint64_t a1, uint64_t a2)
{
  __swift_project_value_buffer(a1, a2);
  return v2;
}

uint64_t VoicemailRowCardSectionComponents.callerName.getter()
{
  return VoicemailRowCardSectionComponents.callerName.getter((void (*)(void))CallRecordDisplayTextComponents.callerNameText.getter);
}

uint64_t VoicemailRowCardSectionComponents.callerHandleLabel.getter()
{
  uint64_t v1 = type metadata accessor for Locale();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = [*(id *)(v0 + 8) caller];
  if (v5)
  {
    uint64_t v6 = v5;
    id v7 = [v5 personHandle];

    if (v7)
    {
      id v8 = [v7 label];

      if (v8)
      {
        __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
        dispatch thunk of DeviceState.siriLocale.getter();
        void v12[4] = Locale.identifier.getter();
        v12[5] = v9;
        void v12[2] = 45;
        uint64_t v12[3] = 0xE100000000000000;
        v12[0] = 95;
        v12[1] = 0xE100000000000000;
        lazy protocol witness table accessor for type String and conformance String();
        StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
        static LabelMappingUtil.translateINPersonHandleLabel(_:languageCode:)();
        swift_bridgeObjectRelease();
      }
    }
  }
  uint64_t v10 = static CasinoFactory.makeRichText(text:bold:maxLines:textColor:)();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t VoicemailRowCardSectionComponents.callDate.getter()
{
  return VoicemailRowCardSectionComponents.callerName.getter((void (*)(void))CallRecordDisplayTextComponents.callDateText.getter);
}

uint64_t VoicemailRowCardSectionComponents.callerName.getter(void (*a1)(void))
{
  a1();
  uint64_t v1 = static CasinoFactory.makeRichText(text:bold:maxLines:textColor:)();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t VoicemailRowCardSectionComponents.duration.getter()
{
  uint64_t v0 = INCallRecord.callDuration.getter();
  if (v1) {
    return 0;
  }
  double v2 = *(double *)&v0;
  id v3 = [objc_allocWithZone((Class)NSDateComponentsFormatter) init];
  [v3 setUnitsStyle:0];
  [v3 setAllowedUnits:192];
  [v3 setZeroFormattingBehavior:0x10000];
  id v4 = [v3 stringFromTimeInterval:ceil(v2)];
  if (!v4)
  {

    return 0;
  }
  id v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v8 = v7;

  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = 48;
  v9._object = (void *)0xE100000000000000;
  LOBYTE(v5) = String.hasPrefix(_:)(v9);
  swift_bridgeObjectRelease();
  if (v5)
  {
    specialized Collection.dropFirst(_:)(1uLL, v6, v8);
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }

  uint64_t v10 = static CasinoFactory.makeRichText(text:bold:maxLines:textColor:)();
  swift_bridgeObjectRelease();
  return v10;
}

id VoicemailRowCardSectionComponents.image.getter()
{
  if (INCallRecord.unseen.getter())
  {
    if (one-time initialization token for unreadImage != -1) {
      swift_once();
    }
    uint64_t v0 = &static CallHistoryImage.unreadImage;
  }
  else
  {
    if (one-time initialization token for emptyImageVoicemail != -1) {
      swift_once();
    }
    uint64_t v0 = &static CallHistoryImage.emptyImageVoicemail;
  }
  char v1 = (void *)*v0;

  return v1;
}

ValueMetadata *type metadata accessor for VoicemailRowCardSectionComponents()
{
  return &type metadata for VoicemailRowCardSectionComponents;
}

PhoneCallFlowDelegatePlugin::UnsupportedFlowCATPatternsIdentifiers_optional __swiftcall UnsupportedFlowCATPatternsIdentifiers.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of UnsupportedFlowCATPatternsIdentifiers.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 7) {
    return (PhoneCallFlowDelegatePlugin::UnsupportedFlowCATPatternsIdentifiers_optional)7;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::UnsupportedFlowCATPatternsIdentifiers_optional)v3;
  }
}

unint64_t UnsupportedFlowCATPatternsIdentifiers.rawValue.getter(char a1)
{
  unint64_t result = 0xD000000000000021;
  switch(a1)
  {
    case 2:
      unint64_t result = 0xD000000000000022;
      break;
    case 3:
      unint64_t result = 0xD00000000000002FLL;
      break;
    case 4:
      unint64_t result = 0xD00000000000002FLL;
      break;
    case 5:
      unint64_t result = 0xD000000000000027;
      break;
    case 6:
      unint64_t result = 0xD000000000000029;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance UnsupportedFlowCATPatternsIdentifiers(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance UnsupportedFlowCATPatternsIdentifiers()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance UnsupportedFlowCATPatternsIdentifiers(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UnsupportedFlowCATPatternsIdentifiers(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::UnsupportedFlowCATPatternsIdentifiers_optional protocol witness for RawRepresentable.init(rawValue:) in conformance UnsupportedFlowCATPatternsIdentifiers@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::UnsupportedFlowCATPatternsIdentifiers_optional *a2@<X8>)
{
  result.value = UnsupportedFlowCATPatternsIdentifiers.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance UnsupportedFlowCATPatternsIdentifiers@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = UnsupportedFlowCATPatternsIdentifiers.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t UserDialogActParse.task.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *char v1 = a1;
  return result;
}

uint64_t StartCallErrorWithCodeAirplaneModeEnabledParameters.isEmergency.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t UnsupportedFlowSearchCallHistoryParameters.nonDefaultAppName.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UnsupportedFlowSearchCallHistoryParameters(0);
  return outlined init with copy of SpeakableString?(v1 + *(int *)(v3 + 24), a1, &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t type metadata accessor for UnsupportedFlowSearchCallHistoryParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for UnsupportedFlowSearchCallHistoryParameters);
}

uint64_t UnsupportedFlowSearchCallHistoryParameters.nonDefaultAppName.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for UnsupportedFlowSearchCallHistoryParameters(0) + 24);

  return outlined assign with take of SpeakableString?(a1, v3);
}

Swift::Void (__swiftcall *UnsupportedFlowSearchCallHistoryParameters.nonDefaultAppName.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t UnsupportedFlowSearchCallHistoryParameters.supportsAppLaunch.getter()
{
  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for UnsupportedFlowSearchCallHistoryParameters(0) + 28));
}

uint64_t UnsupportedFlowSearchCallHistoryParameters.asKeyValuePairs()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v2 = OUTLINED_FUNCTION_11_0(v1);
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_4();
  uint64_t v5 = v4 - v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v6 = swift_allocObject();
  OUTLINED_FUNCTION_27_0((__n128 *)v6, (__n128)xmmword_469650);
  uint64_t v7 = *v0;
  if (*v0)
  {
    uint64_t v8 = type metadata accessor for SirikitDeviceState();
    uint64_t v9 = v7;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
    *(void *)(v6 + 56) = 0;
    *(void *)(v6 + 64) = 0;
  }
  *(void *)(v6 + 48) = v9;
  *(void *)(v6 + 72) = v8;
  *(void *)(v6 + 80) = 0x6D6563696F567369;
  *(void *)(v6 + 88) = 0xEB000000006C6961;
  *(unsigned char *)(v6 + 96) = *((unsigned char *)v0 + 8);
  *(void *)(v6 + 120) = &type metadata for Bool;
  *(void *)(v6 + 128) = 0xD000000000000011;
  *(void *)(v6 + 136) = 0x80000000004916B0;
  uint64_t v10 = type metadata accessor for UnsupportedFlowSearchCallHistoryParameters(0);
  outlined init with copy of SpeakableString?((uint64_t)v0 + *(int *)(v10 + 24), v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v11 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload(v5, 1, v11) == 1)
  {
    swift_retain();
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v5, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v6 + 144) = 0u;
    *(_OWORD *)(v6 + 160) = 0u;
  }
  else
  {
    *(void *)(v6 + 168) = v11;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v6 + 144));
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v12 + 32))();
    swift_retain();
  }
  *(void *)(v6 + 176) = 0xD000000000000011;
  *(void *)(v6 + 184) = 0x8000000000491690;
  char v13 = *((unsigned char *)v0 + *(int *)(v10 + 28));
  *(void *)(v6 + 216) = &type metadata for Bool;
  *(unsigned char *)(v6 + 192) = v13;
  return v6;
}

uint64_t UnsupportedFlowSearchCallHistoryParameters.init(device:isVoicemail:nonDefaultAppName:supportsAppLaunch:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  *(void *)a5 = a1;
  *(unsigned char *)(a5 + 8) = a2;
  uint64_t v8 = type metadata accessor for UnsupportedFlowSearchCallHistoryParameters(0);
  uint64_t result = outlined init with take of SpeakableString?(a3, a5 + *(int *)(v8 + 24));
  *(unsigned char *)(a5 + *(int *)(v8 + 28)) = a4;
  return result;
}

uint64_t HangUpTipGenerator.key.getter()
{
  return *v0;
}

uint64_t UnsupportedFlowUnsupportedEmergencyContactCallParameters.thirdPartyAppName.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UnsupportedFlowUnsupportedEmergencyContactCallParameters(0);
  return outlined init with copy of SpeakableString?(v1 + *(int *)(v3 + 20), a1, &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t type metadata accessor for UnsupportedFlowUnsupportedEmergencyContactCallParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for UnsupportedFlowUnsupportedEmergencyContactCallParameters);
}

uint64_t UnsupportedFlowUnsupportedEmergencyContactCallParameters.thirdPartyAppName.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for UnsupportedFlowUnsupportedEmergencyContactCallParameters(0) + 20);

  return outlined assign with take of SpeakableString?(a1, v3);
}

Swift::Void (__swiftcall *UnsupportedFlowUnsupportedEmergencyContactCallParameters.thirdPartyAppName.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t UnsupportedFlowUnsupportedEmergencyContactCallParameters.asKeyValuePairs()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v2 = OUTLINED_FUNCTION_11_0(v1);
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_4();
  uint64_t v5 = v4 - v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_467720;
  *(void *)(v6 + 32) = 0x6954656361467369;
  *(void *)(v6 + 40) = 0xEA0000000000656DLL;
  *(unsigned char *)(v6 + 48) = *v0;
  uint64_t v7 = (uint64_t *)(v6 + 96);
  *(void *)(v6 + 72) = &type metadata for Bool;
  *(void *)(v6 + 80) = 0xD000000000000011;
  *(void *)(v6 + 88) = 0x80000000004916D0;
  uint64_t v8 = type metadata accessor for UnsupportedFlowUnsupportedEmergencyContactCallParameters(0);
  outlined init with copy of SpeakableString?((uint64_t)&v0[*(int *)(v8 + 20)], v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload(v5, 1, v9) == 1)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v5, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v7 = 0u;
    *(_OWORD *)(v6 + 112) = 0u;
  }
  else
  {
    *(void *)(v6 + 120) = v9;
    __swift_allocate_boxed_opaque_existential_1(v7);
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v10 + 32))();
  }
  return v6;
}

uint64_t UnsupportedFlowUnsupportedEmergencyContactCallParameters.init(isFaceTime:thirdPartyAppName:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  *a3 = a1;
  uint64_t v4 = (uint64_t)&a3[*(int *)(type metadata accessor for UnsupportedFlowUnsupportedEmergencyContactCallParameters(0)
                           + 20)];

  return outlined init with take of SpeakableString?(a2, v4);
}

__n128 *AnnounceCallBellAnnounceCallBellStartedParameters.asKeyValuePairs()(unint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = (__n128 *)swift_allocObject();
  OUTLINED_FUNCTION_27_0(v2, (__n128)xmmword_467710);
  if (a1)
  {
    uint64_t v3 = type metadata accessor for SirikitDeviceState();
    unint64_t v4 = a1;
  }
  else
  {
    unint64_t v4 = 0;
    uint64_t v3 = 0;
    v2[3].n128_u64[1] = 0;
    v2[4].n128_u64[0] = 0;
  }
  v2[3].n128_u64[0] = v4;
  v2[4].n128_u64[1] = v3;
  swift_retain();
  return v2;
}

uint64_t UnsupportedFlowCATPatternsExecutor.deleteCallHistory()()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *uint64_t v1 = v2;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  unint64_t v3 = OUTLINED_FUNCTION_44_0(33);
  return v4(v3);
}

uint64_t UnsupportedFlowCATPatternsExecutor.searchCallHistory(isVoicemail:supportsAppLaunch:_:)()
{
  OUTLINED_FUNCTION_1_0();
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v0;
  *(void *)(v1 + 16) = v3;
  *(unsigned char *)(v1 + 89) = v4;
  *(unsigned char *)(v1 + 88) = v5;
  uint64_t v6 = type metadata accessor for UnsupportedFlowSearchCallHistoryParameters(0);
  *(void *)(v1 + 40) = v6;
  OUTLINED_FUNCTION_11_0(v6);
  *(void *)(v1 + 48) = swift_task_alloc();
  return _swift_task_switch(UnsupportedFlowCATPatternsExecutor.searchCallHistory(isVoicemail:supportsAppLaunch:_:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  char v4;
  char v5;
  uint64_t v6;
  void *v7;
  uint64_t (*v9)(unint64_t);
  uint64_t v10;

  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void (**)(uint64_t))(v0 + 16);
  char v4 = *(unsigned char *)(v0 + 89);
  char v5 = *(unsigned char *)(v0 + 88);
  uint64_t v6 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_16_20(v6);
  *(void *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 8) = v5;
  *(unsigned char *)(v1 + *(int *)(v2 + 28)) = v4;
  v3(v1);
  *(void *)(v0 + 56) = UnsupportedFlowSearchCallHistoryParameters.asKeyValuePairs()();
  uint64_t v7 = (void *)OUTLINED_FUNCTION_9_0();
  *(void *)(v0 + 64) = v7;
  *uint64_t v7 = v0;
  v7[1] = UnsupportedFlowCATPatternsExecutor.searchCallHistory(isVoicemail:supportsAppLaunch:_:);
  OUTLINED_FUNCTION_10_16();
  return v9(0xD000000000000021);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_18_3();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  char v5 = v4;
  OUTLINED_FUNCTION_8_27();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v8 = v7;
  *(void *)(v5 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v5 + 80) = v3;
  }
  OUTLINED_FUNCTION_7_27();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of UnsupportedFlowSearchCallHistoryParameters(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for UnsupportedFlowSearchCallHistoryParameters);
  swift_task_dealloc();
  uint64_t v1 = OUTLINED_FUNCTION_4_31();
  return v2(v1);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of UnsupportedFlowSearchCallHistoryParameters(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for UnsupportedFlowSearchCallHistoryParameters);
  swift_task_dealloc();
  OUTLINED_FUNCTION_13_0();
  return v1();
}

uint64_t UnsupportedFlowCATPatternsExecutor.startCallEmergency()()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *uint64_t v1 = v2;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  unint64_t v3 = OUTLINED_FUNCTION_44_0(34);
  return v4(v3);
}

uint64_t UnsupportedFlowCATPatternsExecutor.startCallEmergencyInRetailStore()()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *uint64_t v1 = v2;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  unint64_t v3 = OUTLINED_FUNCTION_44_0(47);
  return v4(v3);
}

uint64_t UnsupportedFlowCATPatternsExecutor.unsupportedEmergencyContactCall(isFaceTime:_:)()
{
  OUTLINED_FUNCTION_1_0();
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v0;
  *(void *)(v1 + 16) = v3;
  *(unsigned char *)(v1 + 88) = v4;
  uint64_t v5 = type metadata accessor for UnsupportedFlowUnsupportedEmergencyContactCallParameters(0);
  *(void *)(v1 + 40) = v5;
  OUTLINED_FUNCTION_11_0(v5);
  *(void *)(v1 + 48) = swift_task_alloc();
  return _swift_task_switch(UnsupportedFlowCATPatternsExecutor.unsupportedEmergencyContactCall(isFaceTime:_:), 0, 0);
}

{
  uint64_t v0;
  unsigned char *v1;
  void (*v2)(unsigned char *);
  char v3;
  uint64_t v4;
  void *v5;
  uint64_t (*v7)(unint64_t);
  uint64_t v8;

  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = *(unsigned char **)(v0 + 48);
  uint64_t v2 = *(void (**)(unsigned char *))(v0 + 16);
  uint64_t v3 = *(unsigned char *)(v0 + 88);
  char v4 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_16_20(v4);
  *uint64_t v1 = v3;
  v2(v1);
  *(void *)(v0 + 56) = UnsupportedFlowUnsupportedEmergencyContactCallParameters.asKeyValuePairs()();
  uint64_t v5 = (void *)OUTLINED_FUNCTION_9_0();
  *(void *)(v0 + 64) = v5;
  *uint64_t v5 = v0;
  v5[1] = UnsupportedFlowCATPatternsExecutor.unsupportedEmergencyContactCall(isFaceTime:_:);
  OUTLINED_FUNCTION_10_16();
  return v7(0xD00000000000002FLL);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_18_3();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_8_27();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v8 = v7;
  *(void *)(v5 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v5 + 80) = v3;
  }
  OUTLINED_FUNCTION_7_27();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of UnsupportedFlowSearchCallHistoryParameters(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for UnsupportedFlowUnsupportedEmergencyContactCallParameters);
  swift_task_dealloc();
  uint64_t v1 = OUTLINED_FUNCTION_4_31();
  return v2(v1);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of UnsupportedFlowSearchCallHistoryParameters(*(void *)(v0 + 48), (void (*)(void))type metadata accessor for UnsupportedFlowUnsupportedEmergencyContactCallParameters);
  swift_task_dealloc();
  OUTLINED_FUNCTION_13_0();
  return v1();
}

uint64_t outlined destroy of UnsupportedFlowSearchCallHistoryParameters(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_10();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t UnsupportedFlowCATPatternsExecutor.unsupportedOnDeviceType(_:)(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return _swift_task_switch(UnsupportedFlowCATPatternsExecutor.unsupportedOnDeviceType(_:), 0, 0);
}

uint64_t UnsupportedFlowCATPatternsExecutor.unsupportedOnDeviceType(_:)()
{
  OUTLINED_FUNCTION_18_3();
  *(void *)(v0 + 16) = 0;
  (*(void (**)(uint64_t))(v0 + 24))(v0 + 16);
  unint64_t v1 = *(void *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = (__n128 *)swift_allocObject();
  *(void *)(v0 + 48) = v2;
  OUTLINED_FUNCTION_27_0(v2, (__n128)xmmword_467710);
  uint64_t v3 = 0;
  if (v1)
  {
    uint64_t v3 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v2[3].n128_u64[1] = 0;
    v2[4].n128_u64[0] = 0;
  }
  *(void *)(v0 + 56) = v1;
  v2[3].n128_u64[0] = v1;
  v2[4].n128_u64[1] = v3;
  uint64_t v6 = (uint64_t (*)(unint64_t))((char *)&async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:)
                                                + async function pointer to dispatch thunk of CATWrapper.executePattern(patternId:parameters:));
  swift_retain();
  char v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v4;
  *char v4 = v0;
  v4[1] = UnsupportedFlowCATPatternsExecutor.unsupportedOnDeviceType(_:);
  OUTLINED_FUNCTION_10_16();
  return v6(0xD000000000000027);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_18_3();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_8_27();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v8 = v7;
  *(void *)(v5 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v5 + 80) = v3;
  }
  OUTLINED_FUNCTION_7_27();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  swift_release();
  uint64_t v0 = OUTLINED_FUNCTION_4_31();
  return v1(v0);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  swift_release();
  OUTLINED_FUNCTION_13_0();
  return v0();
}

uint64_t UnsupportedFlowCATPatternsExecutor.unsupportedThirdPartyCall()()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  unint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *unint64_t v1 = v2;
  v1[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  unint64_t v3 = OUTLINED_FUNCTION_44_0(41);
  return v4(v3);
}

uint64_t UnsupportedFlowCATPatternsExecutor.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return UnsupportedFlowCATPatternsExecutor.init(templateDir:options:globals:)(a1, a2);
}

uint64_t UnsupportedFlowCATPatternsExecutor.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CATOption();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_4();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  uint64_t v10 = OUTLINED_FUNCTION_11_0(v9);
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_4();
  outlined init with copy of SpeakableString?(a1, v12 - v11, (uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
  uint64_t v13 = CATWrapper.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(a1, (uint64_t *)&demangling cache variable for type metadata for URL?);
  return v13;
}

unint64_t lazy protocol witness table accessor for type UnsupportedFlowCATPatternsIdentifiers and conformance UnsupportedFlowCATPatternsIdentifiers()
{
  unint64_t result = lazy protocol witness table cache variable for type UnsupportedFlowCATPatternsIdentifiers and conformance UnsupportedFlowCATPatternsIdentifiers;
  if (!lazy protocol witness table cache variable for type UnsupportedFlowCATPatternsIdentifiers and conformance UnsupportedFlowCATPatternsIdentifiers)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsupportedFlowCATPatternsIdentifiers and conformance UnsupportedFlowCATPatternsIdentifiers);
  }
  return result;
}

uint64_t protocol witness for UnsupportedFlowCATPatternsExecuting.deleteCallHistory() in conformance UnsupportedFlowCATPatternsExecutor()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(**v0 + class metadata base offset for UnsupportedFlowCATPatternsExecutor)
                         + **(int **)(**v0 + class metadata base offset for UnsupportedFlowCATPatternsExecutor));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = UnsupportedFlowCATs.deleteVoicemail();
  return v4();
}

uint64_t protocol witness for UnsupportedFlowCATPatternsExecuting.searchCallHistory(isVoicemail:supportsAppLaunch:_:) in conformance UnsupportedFlowCATPatternsExecutor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *(int **)(class metadata base offset for UnsupportedFlowCATPatternsExecutor + **v4 + 8);
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v10 + *v10);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = UnsupportedFlowCATs.deleteVoicemail();
  return v13(a1, a2, a3, a4);
}

uint64_t protocol witness for UnsupportedFlowCATPatternsExecuting.startCallEmergency() in conformance UnsupportedFlowCATPatternsExecutor()
{
  uint64_t v2 = *(int **)(class metadata base offset for UnsupportedFlowCATPatternsExecutor + **v0 + 16);
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  unint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *unint64_t v3 = v1;
  v3[1] = UnsupportedFlowCATs.deleteVoicemail();
  return v5();
}

uint64_t protocol witness for UnsupportedFlowCATPatternsExecuting.startCallEmergencyInRetailStore() in conformance UnsupportedFlowCATPatternsExecutor()
{
  uint64_t v2 = *(int **)(class metadata base offset for UnsupportedFlowCATPatternsExecutor + **v0 + 24);
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  unint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *unint64_t v3 = v1;
  v3[1] = UnsupportedFlowCATs.deleteVoicemail();
  return v5();
}

uint64_t protocol witness for UnsupportedFlowCATPatternsExecuting.unsupportedEmergencyContactCall(isFaceTime:_:) in conformance UnsupportedFlowCATPatternsExecutor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(int **)(class metadata base offset for UnsupportedFlowCATPatternsExecutor + **v3 + 32);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = UnsupportedFlowCATs.deleteVoicemail();
  return v11(a1, a2, a3);
}

uint64_t protocol witness for UnsupportedFlowCATPatternsExecuting.unsupportedOnDeviceType(_:) in conformance UnsupportedFlowCATPatternsExecutor(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(class metadata base offset for UnsupportedFlowCATPatternsExecutor + **v2 + 40);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = UnsupportedFlowCATs.deleteVoicemail();
  return v9(a1, a2);
}

uint64_t protocol witness for UnsupportedFlowCATPatternsExecuting.unsupportedThirdPartyCall() in conformance UnsupportedFlowCATPatternsExecutor()
{
  uint64_t v2 = *(int **)(class metadata base offset for UnsupportedFlowCATPatternsExecutor + **v0 + 48);
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = UnsupportedFlowCATs.deleteVoicemail();
  return v5();
}

unsigned char *storeEnumTagSinglePayload for UnsupportedFlowCATPatternsIdentifiers(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0xD8550);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UnsupportedFlowCATPatternsIdentifiers()
{
  return &type metadata for UnsupportedFlowCATPatternsIdentifiers;
}

uint64_t initializeBufferWithCopyOfBuffer for UnsupportedFlowSearchCallHistoryParameters(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v8 = *(int *)(a3 + 24);
    uint64_t v9 = (void *)(a1 + v8);
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for SpeakableString();
    swift_retain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
    }
    *(unsigned char *)(v7 + *(int *)(a3 + 28)) = *((unsigned char *)a2 + *(int *)(a3 + 28));
  }
  return v7;
}

uint64_t destroy for UnsupportedFlowSearchCallHistoryParameters(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for SpeakableString();
  uint64_t result = __swift_getEnumTagSinglePayload(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v7(v4, v5);
  }
  return result;
}

uint64_t initializeWithCopy for UnsupportedFlowSearchCallHistoryParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for SpeakableString();
  swift_retain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  }
  *(unsigned char *)(a1 + *(int *)(a3 + 28)) = *(unsigned char *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t assignWithCopy for UnsupportedFlowSearchCallHistoryParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  int v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (!EnumTagSinglePayload)
  {
    uint64_t v12 = *(void *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(void *, const void *, uint64_t))(v12 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
LABEL_7:
  *(unsigned char *)(a1 + *(int *)(a3 + 28)) = *(unsigned char *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t initializeWithTake for UnsupportedFlowSearchCallHistoryParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  }
  *(unsigned char *)(a1 + *(int *)(a3 + 28)) = *(unsigned char *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t assignWithTake for UnsupportedFlowSearchCallHistoryParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  int v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (!EnumTagSinglePayload)
  {
    uint64_t v12 = *(void *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(void *, const void *, uint64_t))(v12 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
LABEL_7:
  *(unsigned char *)(a1 + *(int *)(a3 + 28)) = *(unsigned char *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t getEnumTagSinglePayload for UnsupportedFlowSearchCallHistoryParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_D8CB8);
}

uint64_t sub_D8CB8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v10 = (uint64_t)a1 + *(int *)(a3 + 24);
    return __swift_getEnumTagSinglePayload(v10, a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for UnsupportedFlowSearchCallHistoryParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_D8D64);
}

void *sub_D8D64(void *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 2147483646)
  {
    *uint64_t result = a2;
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v8 = (uint64_t)v5 + *(int *)(a4 + 24);
    return (void *)__swift_storeEnumTagSinglePayload(v8, a2, a2, v7);
  }
  return result;
}

void type metadata completion function for UnsupportedFlowSearchCallHistoryParameters()
{
  type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for UnsupportedFlowUnsupportedEmergencyContactCallParameters(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *int v3 = *a2;
    int v3 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for SpeakableString();
    if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v8))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v6, v7, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
      __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v8);
    }
  }
  return v3;
}

uint64_t destroy for UnsupportedFlowUnsupportedEmergencyContactCallParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for SpeakableString();
  uint64_t result = __swift_getEnumTagSinglePayload(v2, 1, v3);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v5(v2, v3);
  }
  return result;
}

unsigned char *initializeWithCopy for UnsupportedFlowUnsupportedEmergencyContactCallParameters(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v7);
  }
  return a1;
}

unsigned char *assignWithCopy for UnsupportedFlowUnsupportedEmergencyContactCallParameters(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v5, 1, v7);
  int v9 = __swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7);
  if (!EnumTagSinglePayload)
  {
    uint64_t v10 = *(void *)(v7 - 8);
    if (!v9)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 24))(v5, v6, v7);
      return a1;
    }
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v5, v7);
    goto LABEL_6;
  }
  if (v9)
  {
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v5, v6, *(void *)(*(void *)(v11 - 8) + 64));
    return a1;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v7);
  return a1;
}

unsigned char *initializeWithTake for UnsupportedFlowUnsupportedEmergencyContactCallParameters(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v7);
  }
  return a1;
}

unsigned char *assignWithTake for UnsupportedFlowUnsupportedEmergencyContactCallParameters(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v5, 1, v7);
  int v9 = __swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7);
  if (!EnumTagSinglePayload)
  {
    uint64_t v10 = *(void *)(v7 - 8);
    if (!v9)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 40))(v5, v6, v7);
      return a1;
    }
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v5, v7);
    goto LABEL_6;
  }
  if (v9)
  {
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v5, v6, *(void *)(*(void *)(v11 - 8) + 64));
    return a1;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for UnsupportedFlowUnsupportedEmergencyContactCallParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_D94C0);
}

uint64_t sub_D94C0(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *a1;
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v11 = (uint64_t)&a1[*(int *)(a3 + 20)];
    return __swift_getEnumTagSinglePayload(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for UnsupportedFlowUnsupportedEmergencyContactCallParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_D9560);
}

unsigned char *sub_D9560(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  BOOL v5 = result;
  if (a3 == 254)
  {
    *uint64_t result = a2 + 1;
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v8 = (uint64_t)&v5[*(int *)(a4 + 20)];
    return (unsigned char *)__swift_storeEnumTagSinglePayload(v8, a2, a2, v7);
  }
  return result;
}

void type metadata completion function for UnsupportedFlowUnsupportedEmergencyContactCallParameters()
{
  type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void *initializeBufferWithCopyOfBuffer for UnsupportedFlowUnsupportedOnDeviceTypeParameters(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

void *assignWithCopy for UnsupportedFlowUnsupportedOnDeviceTypeParameters(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for UnsupportedFlowUnsupportedOnDeviceTypeParameters(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for UnsupportedFlowUnsupportedOnDeviceTypeParameters(uint64_t *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      uint64_t v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UnsupportedFlowUnsupportedOnDeviceTypeParameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UnsupportedFlowUnsupportedOnDeviceTypeParameters()
{
  return &type metadata for UnsupportedFlowUnsupportedOnDeviceTypeParameters;
}

uint64_t type metadata accessor for UnsupportedFlowCATPatternsExecutor(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for UnsupportedFlowCATPatternsExecutor);
}

uint64_t type metadata completion function for UnsupportedFlowCATPatternsExecutor()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for UnsupportedFlowCATPatternsExecutor()
{
  return type metadata accessor for UnsupportedFlowCATPatternsExecutor(0);
}

uint64_t OUTLINED_FUNCTION_4_31()
{
  return *(void *)(v0 + 80);
}

uint64_t OUTLINED_FUNCTION_16_20(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
}

id static SPHCallHandleFormatting.normalizedHandle(for:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v6 = [a1 value];
  if (!v6) {
    return 0;
  }
  uint64_t v7 = v6;
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  uint64_t v11 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000) == 0) {
    uint64_t v11 = v8 & 0xFFFFFFFFFFFFLL;
  }
  if (!v11)
  {

    return 0;
  }
  uint64_t v12 = (char *)[a1 type];
  if (v12 == (unsigned char *)&dword_0 + 1)
  {
    id v17 = [self normalizedEmailAddressHandleForValue:v7];
  }
  else
  {
    if (v12 == (unsigned char *)&dword_0 + 2)
    {
      uint64_t v13 = PNCopyBestGuessCountryCodeForNumber();
      if (v13)
      {
        uint64_t v14 = (void *)v13;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v15 = self;
      }
      else
      {
        uint64_t v15 = self;
        (*(void (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
        if (!v18)
        {
          NSString v19 = 0;
          goto LABEL_16;
        }
      }
      NSString v19 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
LABEL_16:
      id v16 = [v15 normalizedPhoneNumberHandleForValue:v7 isoCountryCode:v19];

      return v16;
    }
    id v17 = [self normalizedGenericHandleForValue:v7];
  }
  id v16 = v17;

  return v16;
}

uint64_t static SPHCallHandleFormatter.countryCode.getter()
{
  id v0 = (id)TUNetworkCountryCode();
  if (!v0)
  {
    id v0 = (id)TUHomeCountryCode();
    if (!v0) {
      return 0;
    }
  }
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v1;
}

uint64_t protocol witness for static SPHCallHandleFormatting.countryCode.getter in conformance SPHCallHandleFormatter()
{
  return static SPHCallHandleFormatter.countryCode.getter();
}

uint64_t type metadata accessor for SPHCallHandleFormatter()
{
  return self;
}

uint64_t static PhoneCallControlRequestSupportPolicy.unsupportedSwitchToFaceTimeReason(for:action:sharedGlobals:)(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  if (PhoneCallControlAction.rawValue.getter(a3) == 0xD000000000000015 && v7 == 0x8000000000490E70)
  {
    uint64_t v8 = swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_8_28(v8, v9, v10, v11, v12, v13, v14, v15, v102, v103, v104);
  }
  else
  {
    char v16 = OUTLINED_FUNCTION_5_27();
    uint64_t v17 = swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_8_28(v17, v18, v19, v20, v21, v22, v23, v24, v102, v103, v104);
    if ((v16 & 1) == 0)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v110);
      goto LABEL_11;
    }
  }
  uint64_t v25 = v111;
  uint64_t v26 = v112;
  __swift_project_boxed_opaque_existential_1(v110, v111);
  OUTLINED_FUNCTION_7_28();
  v27(v25, v26);
  uint64_t v28 = v108;
  uint64_t v29 = v109;
  __swift_project_boxed_opaque_existential_1(v107, v108);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v29 + 40))(&v103, v28, v29);
  uint64_t v30 = v105;
  uint64_t v31 = v106;
  __swift_project_boxed_opaque_existential_1(&v103, v105);
  char v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 32))(v30, v31);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v103);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v107);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v110);
  if (v32)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    uint64_t v34 = OUTLINED_FUNCTION_25_0(v33, (uint64_t)static Logger.siriPhone);
    os_log_type_t v35 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_1_34(v35))
    {
      uint64_t v36 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_4_32(v36);
      OUTLINED_FUNCTION_0_26(&dword_0, v37, v38, "#PhoneCallControlRequestSupportPolicy cannot switch to FaceTime Audio because it is restricted in region.");
      uint64_t v39 = 6;
LABEL_65:
      swift_slowDealloc();
      goto LABEL_66;
    }
    uint64_t v39 = 6;
    goto LABEL_66;
  }
LABEL_11:
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 40);
  if (v41(ObjectType, a2))
  {
    unint64_t v42 = PhoneCallControlAction.rawValue.getter(a3);
    uint64_t v44 = v43;
    if (v42 == 0xD000000000000015 && v43 == (uint8_t *)0x8000000000490E70)
    {
      swift_bridgeObjectRelease();
LABEL_17:
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v46 = type metadata accessor for Logger();
      uint64_t v34 = OUTLINED_FUNCTION_25_0(v46, (uint64_t)static Logger.siriPhone);
      os_log_type_t v47 = static os_log_type_t.debug.getter();
      uint64_t v39 = 2;
      if (!os_log_type_enabled(v34, v47)) {
        goto LABEL_66;
      }
      unint64_t v48 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_4_32(v48);
      _os_log_impl(&dword_0, v34, v47, "#PhoneCallControlRequestSupportPolicy cannot switch to FTA from telephony.", v44, 2u);
      goto LABEL_65;
    }
    char v45 = OUTLINED_FUNCTION_5_27();
    swift_bridgeObjectRelease();
    if (v45) {
      goto LABEL_17;
    }
  }
  uint64_t v49 = OUTLINED_FUNCTION_2_37();
  if (v50(v49))
  {
    if (PhoneCallControlAction.rawValue.getter(a3) == 0xD000000000000010 && v51 == 0x8000000000490E50) {
      goto LABEL_28;
    }
    char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v52)
    {
LABEL_29:
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v54 = type metadata accessor for Logger();
      uint64_t v34 = OUTLINED_FUNCTION_25_0(v54, (uint64_t)static Logger.siriPhone);
      os_log_type_t v55 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_1_34(v55))
      {
        uint64_t v56 = (_WORD *)OUTLINED_FUNCTION_7_2();
        OUTLINED_FUNCTION_4_32(v56);
        OUTLINED_FUNCTION_0_26(&dword_0, v57, v58, "#PhoneCallControlRequestSupportPolicy call is already FaceTime call. Not switching to FaceTime.");
        uint64_t v39 = 0;
        goto LABEL_65;
      }
      uint64_t v39 = 0;
LABEL_66:

      return v39;
    }
  }
  if (SPHCall.isFTAudio.getter())
  {
    if (PhoneCallControlAction.rawValue.getter(a3) == 0xD000000000000015 && v53 == 0x8000000000490E70)
    {
LABEL_28:
      swift_bridgeObjectRelease();
      goto LABEL_29;
    }
    char v59 = OUTLINED_FUNCTION_5_27();
    swift_bridgeObjectRelease();
    if (v59) {
      goto LABEL_29;
    }
  }
  uint64_t v60 = OUTLINED_FUNCTION_2_37();
  if (v61(v60) != 1)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v73 = type metadata accessor for Logger();
    uint64_t v34 = OUTLINED_FUNCTION_25_0(v73, (uint64_t)static Logger.siriPhone);
    os_log_type_t v74 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_1_34(v74))
    {
      uint64_t v75 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_4_32(v75);
      OUTLINED_FUNCTION_0_26(&dword_0, v76, v77, "#PhoneCallControlRequestSupportPolicy cannot switch to FaceTime because current call is not active.");
      uint64_t v39 = 3;
      goto LABEL_65;
    }
    uint64_t v39 = 3;
    goto LABEL_66;
  }
  uint64_t v62 = a4[3];
  uint64_t v63 = a4[4];
  __swift_project_boxed_opaque_existential_1(a4, v62);
  OUTLINED_FUNCTION_7_28();
  v64(v62, v63);
  uint64_t v65 = v108;
  uint64_t v66 = v109;
  __swift_project_boxed_opaque_existential_1(v107, v108);
  uint64_t v67 = (*(uint64_t (**)(uint64_t, uint64_t))(v66 + 32))(v65, v66);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v107);
  if (v67 >= 2)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v68 = type metadata accessor for Logger();
    uint64_t v34 = OUTLINED_FUNCTION_25_0(v68, (uint64_t)static Logger.siriPhone);
    os_log_type_t v69 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_1_34(v69))
    {
      uint64_t v70 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_4_32(v70);
      OUTLINED_FUNCTION_0_26(&dword_0, v71, v72, "#PhoneCallControlRequestSupportPolicy cannot switch to FaceTime because there are multiple active calls.");
      uint64_t v39 = 8;
      goto LABEL_65;
    }
    uint64_t v39 = 8;
    goto LABEL_66;
  }
  uint64_t v78 = OUTLINED_FUNCTION_2_37();
  if (v79(v78))
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v80 = type metadata accessor for Logger();
    uint64_t v34 = OUTLINED_FUNCTION_25_0(v80, (uint64_t)static Logger.siriPhone);
    os_log_type_t v81 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_1_34(v81))
    {
      uint64_t v82 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_4_32(v82);
      OUTLINED_FUNCTION_0_26(&dword_0, v83, v84, "#PhoneCallControlRequestSupportPolicy cannot switch to FaceTime because caller ID is blocked.");
      uint64_t v39 = 1;
      goto LABEL_65;
    }
    uint64_t v39 = 1;
    goto LABEL_66;
  }
  if (v41(ObjectType, a2))
  {
    uint64_t v85 = OUTLINED_FUNCTION_2_37();
    if ((v86(v85) & 1) == 0)
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v96 = type metadata accessor for Logger();
      uint64_t v34 = OUTLINED_FUNCTION_25_0(v96, (uint64_t)static Logger.siriPhone);
      os_log_type_t v97 = static os_log_type_t.debug.getter();
      if (!OUTLINED_FUNCTION_1_34(v97))
      {
        uint64_t v39 = 7;
        goto LABEL_66;
      }
      uint64_t v98 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_4_32(v98);
      OUTLINED_FUNCTION_0_26(&dword_0, v99, v100, "#PhoneCallControlRequestSupportPolicy cannot switch to FaceTime because FaceTime status is not valid.");
      uint64_t v39 = 7;
      goto LABEL_65;
    }
  }
  uint64_t v87 = a4[3];
  uint64_t v88 = a4[4];
  __swift_project_boxed_opaque_existential_1(a4, v87);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v88 + 144))(v107, v87, v88);
  uint64_t v89 = v108;
  uint64_t v90 = v109;
  __swift_project_boxed_opaque_existential_1(v107, v108);
  LOBYTE(v89) = (*(uint64_t (**)(unint64_t, unint64_t, uint64_t, uint64_t))(v90 + 24))(0xD000000000000012, 0x8000000000492070, v89, v90);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v107);
  if ((v89 & 1) == 0)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v91 = type metadata accessor for Logger();
    uint64_t v34 = OUTLINED_FUNCTION_25_0(v91, (uint64_t)static Logger.siriPhone);
    os_log_type_t v92 = static os_log_type_t.debug.getter();
    if (!OUTLINED_FUNCTION_1_34(v92))
    {
      uint64_t v39 = 4;
      goto LABEL_66;
    }
    unint64_t v93 = (_WORD *)OUTLINED_FUNCTION_7_2();
    OUTLINED_FUNCTION_4_32(v93);
    OUTLINED_FUNCTION_0_26(&dword_0, v94, v95, "#PhoneCallControlRequestSupportPolicy FaceTime app nor installed.");
    uint64_t v39 = 4;
    goto LABEL_65;
  }
  return 10;
}

uint64_t static PhoneCallControlRequestSupportPolicy.unsupportedCameraControlReason(for:action:sharedGlobals:)(uint64_t a1, uint64_t a2, char a3)
{
  if (PhoneCallControlAction.rawValue.getter(a3) == 0xD000000000000015 && v5 == 0x8000000000490E70)
  {
    uint64_t v6 = swift_bridgeObjectRelease();
LABEL_5:
    OUTLINED_FUNCTION_8_28(v6, v7, v8, v9, v10, v11, v12, v13, v48, v49, v50);
    goto LABEL_6;
  }
  char v14 = OUTLINED_FUNCTION_5_27();
  uint64_t v6 = swift_bridgeObjectRelease();
  if (v14) {
    goto LABEL_5;
  }
  if (PhoneCallControlAction.rawValue.getter(a3) == 0x43656C6261736964 && v27 == 0xED00006172656D61)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v30 = swift_bridgeObjectRelease();
    if ((v29 & 1) == 0)
    {
      OUTLINED_FUNCTION_8_28(v30, v31, v32, v33, v34, v35, v36, v37, v48, v49, v50);
LABEL_20:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
      return 10;
    }
  }
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 144))(ObjectType, a2);
  char v40 = v39;
  OUTLINED_FUNCTION_8_28(v39, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50);
  if ((v40 & 1) == 0) {
    goto LABEL_20;
  }
LABEL_6:
  uint64_t v15 = v57;
  uint64_t v16 = v58;
  __swift_project_boxed_opaque_existential_1(v56, v57);
  OUTLINED_FUNCTION_7_28();
  v17(v15, v16);
  uint64_t v18 = v54;
  uint64_t v19 = v55;
  __swift_project_boxed_opaque_existential_1(v53, v54);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v19 + 40))(&v49, v18, v19);
  uint64_t v20 = v51;
  uint64_t v21 = v52;
  __swift_project_boxed_opaque_existential_1(&v49, v51);
  LOBYTE(v20) = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 32))(v20, v21);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v49);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
  if ((v20 & 1) == 0) {
    return 10;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  uint64_t v23 = OUTLINED_FUNCTION_25_0(v22, (uint64_t)static Logger.siriPhone);
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)OUTLINED_FUNCTION_7_2();
    *(_WORD *)uint64_t v25 = 0;
    _os_log_impl(&dword_0, v23, v24, "#PhoneCallControlRequestSupportPolicy cannot switch to FaceTime Audio because it is restricted in region", v25, 2u);
    swift_slowDealloc();
  }

  return 6;
}

ValueMetadata *type metadata accessor for PhoneCallControlRequestSupportPolicy()
{
  return &type metadata for PhoneCallControlRequestSupportPolicy;
}

void OUTLINED_FUNCTION_0_26(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 2u);
}

BOOL OUTLINED_FUNCTION_1_34(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_2_37()
{
  return v0;
}

_WORD *OUTLINED_FUNCTION_4_32(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_8_28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  return outlined init with copy of SignalProviding(v11, (uint64_t)va);
}

uint64_t CallCapabilitySlotTemplating.makeParameterPromptDialog(app:parameterName:intent:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(class metadata base offset for StartCallCATs
                                                     + **(void **)(v6 + 40)
                                                     + 1280))(a5, a6);
}

uint64_t CallCapabilitySlotTemplating.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:inferenceSource:_:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  __chkstk_darwin(v13 - 8);
  OUTLINED_FUNCTION_4();
  uint64_t v16 = v15 - v14;
  id v17 = [a4 itemToConfirm];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for INCallCapability(0);
  if (swift_dynamicCast()) {
    id v18 = v26;
  }
  else {
    id v18 = [a5 callCapability];
  }
  uint64_t v19 = *(void **)(v8 + 40);
  if (v18)
  {
    uint64_t BackingType = INCallCapabilityGetBackingType();
    if (BackingType == 2)
    {
      uint64_t v21 = @"VIDEO_CALL";
    }
    else
    {
      if (BackingType != 1)
      {
        uint64_t v21 = +[NSString stringWithFormat:@"(unknown: %i)", BackingType];
        goto LABEL_12;
      }
      uint64_t v21 = @"AUDIO_CALL";
    }
    uint64_t v22 = v21;
LABEL_12:
    uint64_t v23 = v21;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  SpeakableString.init(print:speak:)();
  uint64_t v24 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v16, 0, 1, v24);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(class metadata base offset for StartCallCATs + *v19 + 32))(v16, a7, a8);
  return outlined destroy of SpeakableString?(v16);
}

uint64_t CallCapabilitySlotTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(class metadata base offset for StartCallCATs
                                                     + **(void **)(v9 + 40)
                                                     + 224))(a8, a9);
}

uint64_t CallCapabilitySlotTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = v9;
  uint64_t v40 = a1;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  __chkstk_darwin(v13 - 8);
  OUTLINED_FUNCTION_4();
  uint64_t v16 = v15 - v14;
  type metadata accessor for Locale();
  OUTLINED_FUNCTION_0_0();
  __chkstk_darwin(v17);
  OUTLINED_FUNCTION_4();
  type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_0_0();
  uint64_t v41 = v19;
  uint64_t v42 = v18;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v37 - v23;
  uint64_t v25 = (char *)[a4 unsupportedReason];
  if (v25 == (unsigned char *)&dword_0 + 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(class metadata base offset for StartCallCATs
  }
                                                       + **(void **)(v10 + 40)
                                                       + 1568))(a8, a9);
  if (v25 == (unsigned char *)&dword_0 + 2)
  {
    type metadata accessor for AppInfoBuilder();
    swift_initStackObject();
    OUTLINED_FUNCTION_1_35();
    AppInfoBuilder.getAppName(_:requestedLocale:)();
    swift_release();
    uint64_t v32 = OUTLINED_FUNCTION_3_32();
    v33(v32);
    SpeakableString.init(print:speak:)();
    uint64_t v34 = *(void **)(v10 + 40);
    uint64_t v36 = v41;
    uint64_t v35 = v42;
    (*(void (**)(uint64_t, char *, uint64_t))(v41 + 16))(v16, v22, v42);
    __swift_storeEnumTagSinglePayload(v16, 0, 1, v35);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(class metadata base offset for StartCallCATs + *v34 + 1536))(v16, v38, v39);
    outlined destroy of SpeakableString?(v16);
    return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v22, v35);
  }
  else if (v25 == (unsigned char *)&dword_0 + 3)
  {
    type metadata accessor for AppInfoBuilder();
    swift_initStackObject();
    OUTLINED_FUNCTION_1_35();
    AppInfoBuilder.getAppName(_:requestedLocale:)();
    swift_release();
    uint64_t v26 = OUTLINED_FUNCTION_3_32();
    v27(v26);
    SpeakableString.init(print:speak:)();
    uint64_t v28 = *(void **)(v10 + 40);
    uint64_t v30 = v41;
    uint64_t v29 = v42;
    (*(void (**)(uint64_t, char *, uint64_t))(v41 + 16))(v16, v24, v42);
    __swift_storeEnumTagSinglePayload(v16, 0, 1, v29);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(class metadata base offset for StartCallCATs + *v28 + 1504))(v16, v38, v39);
    outlined destroy of SpeakableString?(v16);
    return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v24, v29);
  }
  else
  {
    return (*(uint64_t (**)(uint64_t, uint64_t))(class metadata base offset for StartCallCATs
                                                       + **(void **)(v10 + 40)
                                                       + 1472))(a8, a9);
  }
}

uint64_t protocol witness for SlotTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:_:) in conformance CallCapabilitySlotTemplating(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return CallCapabilitySlotTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:_:)(a1, a2, a3, a4, a5, 0, a7, a8, a9);
}

uint64_t protocol witness for SlotTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:) in conformance CallCapabilitySlotTemplating(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return CallCapabilitySlotTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

ValueMetadata *type metadata accessor for CallCapabilitySlotTemplating()
{
  return &type metadata for CallCapabilitySlotTemplating;
}

uint64_t OUTLINED_FUNCTION_1_35()
{
  *(void *)(v3 - 152) = v2;
  *(void *)(v3 - 144) = v0;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  return dispatch thunk of DeviceState.siriLocale.getter();
}

uint64_t OUTLINED_FUNCTION_3_32()
{
  return v0;
}

PhoneCallFlowDelegatePlugin::PhoneCallCommonCATs::Properties_optional __swiftcall PhoneCallCommonCATs.Properties.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PhoneCallCommonCATs.Properties.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return (PhoneCallFlowDelegatePlugin::PhoneCallCommonCATs::Properties_optional)4;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::PhoneCallCommonCATs::Properties_optional)v3;
  }
}

void PhoneCallCommonCATs.Properties.rawValue.getter(char a1)
{
  switch(a1)
  {
    case 1:
    case 2:
    case 3:
      OUTLINED_FUNCTION_24_10();
      break;
    default:
      return;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallCommonCATs.Properties(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PhoneCallCommonCATs.Properties()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneCallCommonCATs.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallCommonCATs.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::PhoneCallCommonCATs::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallCommonCATs.Properties@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallCommonCATs::Properties_optional *a2@<X8>)
{
  result.value = PhoneCallCommonCATs.Properties.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallCommonCATs.Properties(void *a1@<X8>)
{
  PhoneCallCommonCATs.Properties.rawValue.getter(*v1);
  *a1 = v3;
  a1[1] = v4;
}

uint64_t PhoneCallCommonCATs.orList(items:completion:)(unint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  Swift::String v2 = (__n128 *)OUTLINED_FUNCTION_31_0();
  OUTLINED_FUNCTION_1_36(v2, (__n128)xmmword_467710);
  v2[4].n128_u64[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SpeakableString]);
  v2[3].n128_u64[0] = a1;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_24_10();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();

  return swift_bridgeObjectRelease();
}

uint64_t PhoneCallCommonCATs.orList(items:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_21_1((uint64_t)PhoneCallCommonCATs.orList(items:));
}

uint64_t PhoneCallCommonCATs.orList(items:)()
{
  OUTLINED_FUNCTION_16_1();
  unint64_t v1 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_31_0();
  v0[5] = v2;
  OUTLINED_FUNCTION_1_36(v2, (__n128)xmmword_467710);
  v2[4].n128_u64[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SpeakableString]);
  v2[3].n128_u64[0] = v1;
  OUTLINED_FUNCTION_16_21();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[6] = v3;
  *uint64_t v3 = v0;
  v3[1] = PhoneCallCommonCATs.orList(items:);
  uint64_t v4 = v0[2];
  return v6(v4, 0xD000000000000016, 0x800000000048C810, v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_47_0();
    return v10();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_47_0();
  return v0();
}

{
  void *v0;
  unint64_t v1;
  __n128 *v2;
  void *v3;
  uint64_t (*v5)(unint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_16_1();
  unint64_t v1 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_31_0();
  v0[4] = v2;
  OUTLINED_FUNCTION_1_36(v2, (__n128)xmmword_467710);
  v2[4].n128_u64[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SpeakableString]);
  v2[3].n128_u64[0] = v1;
  OUTLINED_FUNCTION_16_21();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[5] = v3;
  *uint64_t v3 = v0;
  v3[1] = UnsupportedFlowCATs.unsupportedOnDeviceType(device:);
  OUTLINED_FUNCTION_24_10();
  return v5(0xD000000000000016);
}

uint64_t PhoneCallCommonCATs.orList(items:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_21_1((uint64_t)PhoneCallCommonCATs.orList(items:));
}

uint64_t PhoneCallCommonCATs.orList(items:)(unint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_31_0();
  OUTLINED_FUNCTION_1_36(v2, (__n128)xmmword_467710);
  v2[4].n128_u64[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SpeakableString]);
  v2[3].n128_u64[0] = a1;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_24_10();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();

  return swift_bridgeObjectRelease();
}

uint64_t PhoneCallCommonCATs.orListForPics(contactNamesNotFromPics:contactNameOfPics:inferenceSource:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v25 = a5;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = OUTLINED_FUNCTION_11_0(v8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v25 - v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v15 = OUTLINED_FUNCTION_24_3();
  *(_OWORD *)(v15 + 16) = xmmword_46A250;
  OUTLINED_FUNCTION_9_23(v15, 0xD000000000000017);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SpeakableString]);
  *(void *)(v15 + 48) = a1;
  *(void *)(v15 + 72) = v16;
  *(void *)(v15 + 80) = 0xD000000000000011;
  *(void *)(v15 + 88) = 0x80000000004931E0;
  outlined init with copy of SpeakableString?(a2, (uint64_t)v14, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v17) == 1)
  {
    swift_bridgeObjectRetain();
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0((uint64_t)v14, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v15 + 96) = 0u;
    *(_OWORD *)(v15 + 112) = 0u;
  }
  else
  {
    *(void *)(v15 + 120) = v17;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v15 + 96));
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_70();
    v19(v18);
    swift_bridgeObjectRetain();
  }
  OUTLINED_FUNCTION_8_29();
  *(void *)(v15 + 128) = v20;
  *(void *)(v15 + 136) = v21;
  outlined init with copy of SpeakableString?(a3, (uint64_t)v12, &demangling cache variable for type metadata for SpeakableString?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v17) == 1)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0((uint64_t)v12, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v15 + 144) = 0u;
    *(_OWORD *)(v15 + 160) = 0u;
  }
  else
  {
    *(void *)(v15 + 168) = v17;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v15 + 144));
    OUTLINED_FUNCTION_10();
    (*(void (**)(uint64_t))(v22 + 32))(v23);
  }
  OUTLINED_FUNCTION_24_10();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  return swift_bridgeObjectRelease();
}

uint64_t PhoneCallCommonCATs.orListForPics(contactNamesNotFromPics:contactNameOfPics:inferenceSource:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[5] = v2;
  v1[6] = v0;
  v1[3] = v3;
  v1[4] = v4;
  v1[2] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v6);
  v1[7] = swift_task_alloc();
  v1[8] = swift_task_alloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  void (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t (*v16)(uint64_t, unint64_t, unint64_t, uint64_t);
  uint64_t v17;

  uint64_t v1 = v0[8];
  uint64_t v3 = v0[3];
  uint64_t v2 = v0[4];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_24_3();
  v0[9] = v4;
  *(_OWORD *)(v4 + 16) = xmmword_46A250;
  OUTLINED_FUNCTION_9_23(v4, 0xD000000000000017);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SpeakableString]);
  *(void *)(v4 + 48) = v3;
  *(void *)(v4 + 72) = v5;
  *(void *)(v4 + 80) = 0xD000000000000011;
  *(void *)(v4 + 88) = 0x80000000004931E0;
  outlined init with copy of SpeakableString?(v2, v1, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = type metadata accessor for SpeakableString();
  uint64_t v7 = OUTLINED_FUNCTION_22_0(v1);
  uint64_t v8 = v0[8];
  if (v7 == 1)
  {
    swift_bridgeObjectRetain();
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v8, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v4 + 96) = 0u;
    *(_OWORD *)(v4 + 112) = 0u;
  }
  else
  {
    *(void *)(v4 + 120) = v6;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v4 + 96));
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_70();
    v9();
    swift_bridgeObjectRetain();
  }
  uint64_t v10 = v0[7];
  OUTLINED_FUNCTION_6_21();
  outlined init with copy of SpeakableString?(v11, v10, &demangling cache variable for type metadata for SpeakableString?);
  if (OUTLINED_FUNCTION_22_0(v10) == 1)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v0[7], &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v8 = 0u;
    *(_OWORD *)(v8 + 16) = 0u;
  }
  else
  {
    *(void *)(v4 + 168) = v6;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)v8);
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v12 + 32))();
  }
  uint64_t v13 = (void *)OUTLINED_FUNCTION_9_0();
  v0[10] = v13;
  *uint64_t v13 = v0;
  v13[1] = PhoneCallCommonCATs.orListForPics(contactNamesNotFromPics:contactNameOfPics:inferenceSource:);
  uint64_t v14 = v0[2];
  return v16(v14, 0xD00000000000001DLL, 0x800000000048C830, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  *(void *)(v3 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_47_0();
    return v10();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v0();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_1_0();
  v1[4] = v2;
  v1[5] = v0;
  v1[2] = v3;
  v1[3] = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v5);
  v1[6] = swift_task_alloc();
  v1[7] = swift_task_alloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v6, v7, v8);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  void (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t (*v15)(unint64_t, unint64_t, uint64_t);
  uint64_t v16;

  uint64_t v1 = v0[7];
  uint64_t v3 = v0[2];
  uint64_t v2 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_24_3();
  v0[8] = v4;
  *(_OWORD *)(v4 + 16) = xmmword_46A250;
  OUTLINED_FUNCTION_9_23(v4, 0xD000000000000017);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SpeakableString]);
  *(void *)(v4 + 48) = v3;
  *(void *)(v4 + 72) = v5;
  *(void *)(v4 + 80) = 0xD000000000000011;
  *(void *)(v4 + 88) = 0x80000000004931E0;
  outlined init with copy of SpeakableString?(v2, v1, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = type metadata accessor for SpeakableString();
  uint64_t v7 = OUTLINED_FUNCTION_22_0(v1);
  uint64_t v8 = v0[7];
  if (v7 == 1)
  {
    swift_bridgeObjectRetain();
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v8, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v4 + 96) = 0u;
    *(_OWORD *)(v4 + 112) = 0u;
  }
  else
  {
    *(void *)(v4 + 120) = v6;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v4 + 96));
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_70();
    v9();
    swift_bridgeObjectRetain();
  }
  uint64_t v10 = v0[6];
  OUTLINED_FUNCTION_6_21();
  outlined init with copy of SpeakableString?(v11, v10, &demangling cache variable for type metadata for SpeakableString?);
  if (OUTLINED_FUNCTION_22_0(v10) == 1)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v0[6], &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v8 = 0u;
    *(_OWORD *)(v8 + 16) = 0u;
  }
  else
  {
    *(void *)(v4 + 168) = v6;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)v8);
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v12 + 32))();
  }
  uint64_t v13 = (void *)OUTLINED_FUNCTION_9_0();
  v0[9] = v13;
  *uint64_t v13 = v0;
  v13[1] = PhoneCallCommonCATs.orListForPics(contactNamesNotFromPics:contactNameOfPics:inferenceSource:);
  return v15(0xD00000000000001DLL, 0x800000000048C830, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v14;

  OUTLINED_FUNCTION_16_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v8 = v7;
  *(void *)(v5 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v9, v10, v11);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = *(uint64_t (**)(uint64_t))(v7 + 8);
    return v12(v3);
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v0();
}

uint64_t PhoneCallCommonCATs.orListForPics(contactNamesNotFromPics:contactNameOfPics:inferenceSource:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = OUTLINED_FUNCTION_11_0(v6);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v21 - v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v13 = OUTLINED_FUNCTION_24_3();
  *(_OWORD *)(v13 + 16) = xmmword_46A250;
  OUTLINED_FUNCTION_9_23(v13, 0xD000000000000017);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SpeakableString]);
  *(void *)(v13 + 48) = a1;
  *(void *)(v13 + 72) = v14;
  *(void *)(v13 + 80) = 0xD000000000000011;
  *(void *)(v13 + 88) = 0x80000000004931E0;
  outlined init with copy of SpeakableString?(a2, (uint64_t)v12, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v15 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v15) == 1)
  {
    swift_bridgeObjectRetain();
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0((uint64_t)v12, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v13 + 96) = 0u;
    *(_OWORD *)(v13 + 112) = 0u;
  }
  else
  {
    *(void *)(v13 + 120) = v15;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v13 + 96));
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_70();
    v16();
    swift_bridgeObjectRetain();
  }
  OUTLINED_FUNCTION_8_29();
  *(void *)(v13 + 128) = v17;
  *(void *)(v13 + 136) = v18;
  outlined init with copy of SpeakableString?(a3, (uint64_t)v10, &demangling cache variable for type metadata for SpeakableString?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v15) == 1)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0((uint64_t)v10, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v13 + 144) = 0u;
    *(_OWORD *)(v13 + 160) = 0u;
  }
  else
  {
    *(void *)(v13 + 168) = v15;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v13 + 144));
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v19 + 32))();
  }
  OUTLINED_FUNCTION_24_10();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  return swift_bridgeObjectRelease();
}

uint64_t PhoneCallCommonCATs.phoneFeaturesUnavailable(completion:)()
{
  return OUTLINED_FUNCTION_6_10();
}

uint64_t PhoneCallCommonCATs.phoneFeaturesUnavailable()()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v1 = v0;
  uint64_t v2 = OUTLINED_FUNCTION_3_0();
  uint64_t v3 = (void *)OUTLINED_FUNCTION_14(v2);
  *uint64_t v3 = v4;
  v3[1] = UnsupportedFlowCATs.deleteVoicemail();
  return v6(v1, 0xD000000000000028, 0x800000000048C850, _swiftEmptyArrayStorage);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v4)(unint64_t);
  uint64_t v5;

  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *uint64_t v1 = v2;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  OUTLINED_FUNCTION_24_10();
  return v4(0xD000000000000028);
}

{
  return OUTLINED_FUNCTION_7_12();
}

uint64_t PhoneCallCommonCATs.promptCancelled(completion:)()
{
  return OUTLINED_FUNCTION_6_10();
}

uint64_t PhoneCallCommonCATs.promptCancelled()()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v1 = v0;
  uint64_t v2 = OUTLINED_FUNCTION_3_0();
  uint64_t v3 = (void *)OUTLINED_FUNCTION_14(v2);
  *uint64_t v3 = v4;
  v3[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return v6(v1, 0xD00000000000001FLL, 0x800000000048C880, _swiftEmptyArrayStorage);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v4)(unint64_t);
  uint64_t v5;

  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *uint64_t v1 = v2;
  v1[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  OUTLINED_FUNCTION_24_10();
  return v4(0xD00000000000001FLL);
}

{
  return OUTLINED_FUNCTION_7_12();
}

unint64_t lazy protocol witness table accessor for type PhoneCallCommonCATs.Properties and conformance PhoneCallCommonCATs.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallCommonCATs.Properties and conformance PhoneCallCommonCATs.Properties;
  if (!lazy protocol witness table cache variable for type PhoneCallCommonCATs.Properties and conformance PhoneCallCommonCATs.Properties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallCommonCATs.Properties and conformance PhoneCallCommonCATs.Properties);
  }
  return result;
}

uint64_t type metadata completion function for PhoneCallCommonCATs()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for PhoneCallCommonCATs()
{
  return type metadata accessor for PhoneCallCommonCATs();
}

unsigned char *storeEnumTagSinglePayload for PhoneCallCommonCATs.Properties(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0xDC758);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PhoneCallCommonCATs.Properties()
{
  return &type metadata for PhoneCallCommonCATs.Properties;
}

__n128 *OUTLINED_FUNCTION_1_36(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x736D657469;
  result[2].n128_u64[1] = 0xE500000000000000;
  return result;
}

void OUTLINED_FUNCTION_6_21()
{
  *(void *)(v0 + 128) = 0x636E657265666E69;
  *(void *)(v0 + 136) = 0xEF656372756F5365;
}

uint64_t OUTLINED_FUNCTION_9_23@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(result + 32) = a2;
  *(void *)(result + 40) = (v2 - 32) | 0x8000000000000000;
  return result;
}

uint64_t OUTLINED_FUNCTION_16_21()
{
  return swift_bridgeObjectRetain();
}

PhoneCallFlowDelegatePlugin::LabelTemplatesProvider __swiftcall LabelTemplatesProvider.init()()
{
  uint64_t v0 = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  int v3 = 0;
  result.noLabel.value._object = v3;
  result.noLabel.value._uint64_t countAndFlagsBits = v2;
  result.yesLabel.value._object = v1;
  result.yesLabel.value._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t LabelTemplatesProviding.yesAndNo()(uint64_t a1, uint64_t a2)
{
  v3[183] = v2;
  v3[177] = a2;
  v3[171] = a1;
  uint64_t v4 = *(void *)(a1 - 8);
  v3[189] = v4;
  v3[195] = *(void *)(v4 + 64);
  v3[201] = swift_task_alloc();
  v3[207] = swift_task_alloc();
  return _swift_task_switch(LabelTemplatesProviding.yesAndNo(), 0, 0);
}

uint64_t LabelTemplatesProviding.yesAndNo()()
{
  uint64_t v11 = v0[201];
  uint64_t v1 = v0[189];
  uint64_t v2 = v0[177];
  uint64_t v8 = v2;
  uint64_t v3 = v0[171];
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16);
  uint64_t v10 = v0[183];
  ((void (*)(void))v9)(v0[207]);
  uint64_t v4 = swift_allocObject();
  v0[213] = v4;
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = v2;
  uint64_t v5 = *(void (**)(void))(v1 + 32);
  OUTLINED_FUNCTION_11_19();
  v5();
  swift_retain();
  swift_asyncLet_begin();
  v9(v11, v10, v3);
  uint64_t v6 = swift_allocObject();
  v0[214] = v6;
  *(void *)(v6 + 16) = v3;
  *(void *)(v6 + 24) = v8;
  OUTLINED_FUNCTION_11_19();
  v5();
  swift_retain();
  swift_asyncLet_begin();
  return _swift_asyncLet_get_throwing(v0 + 82, v0 + 169, LabelTemplatesProviding.yesAndNo(), v0 + 178);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  OUTLINED_FUNCTION_16_1();
  v1[215] = v0;
  if (v0)
  {
    return _swift_asyncLet_finish(v1 + 2);
  }
  else
  {
    v1[216] = v1[169];
    v1[217] = v1[170];
    swift_bridgeObjectRetain();
    return _swift_asyncLet_get_throwing(v1 + 2, v1 + 167, LabelTemplatesProviding.yesAndNo(), v1 + 196);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  OUTLINED_FUNCTION_16_1();
  v1[218] = v0;
  if (v0)
  {
    return _swift_task_switch(LabelTemplatesProviding.yesAndNo(), 0, 0);
  }
  else
  {
    v1[219] = v1[167];
    v1[220] = v1[168];
    swift_bridgeObjectRetain();
    return _swift_asyncLet_finish(v1 + 2);
  }
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)LabelTemplatesProviding.yesAndNo());
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  swift_release();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)LabelTemplatesProviding.yesAndNo());
}

{
  void *v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_16_1();
  swift_release_n();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v0[1];
  uint64_t v2 = v0[220];
  uint64_t v3 = v0[219];
  uint64_t v4 = v0[217];
  uint64_t v5 = v0[216];
  return v1(v5, v4, v3, v2);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)LabelTemplatesProviding.yesAndNo());
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  swift_release();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)LabelTemplatesProviding.yesAndNo());
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_7_29();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  swift_bridgeObjectRelease();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)LabelTemplatesProviding.yesAndNo());
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  swift_release();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)LabelTemplatesProviding.yesAndNo());
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_7_29();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t implicit closure #1 in LabelTemplatesProviding.yesAndNo()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a1;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(a4 + 8) + **(int **)(a4 + 8));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v7;
  *uint64_t v7 = v4;
  v7[1] = implicit closure #1 in LabelTemplatesProviding.yesAndNo();
  return v9(a3, a4);
}

uint64_t implicit closure #1 in LabelTemplatesProviding.yesAndNo()(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_0_1();
  uint64_t v7 = v6;
  OUTLINED_FUNCTION_8_27();
  *uint64_t v8 = v7;
  uint64_t v9 = *v3;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v10 = v9;
  swift_task_dealloc();
  if (v2)
  {
    OUTLINED_FUNCTION_6_22();
    return v11();
  }
  else
  {
    *(void *)(v7 + 32) = a2;
    *(void *)(v7 + 40) = a1;
    return _swift_task_switch(implicit closure #1 in LabelTemplatesProviding.yesAndNo(), 0, 0);
  }
}

uint64_t partial apply for implicit closure #1 in LabelTemplatesProviding.yesAndNo()()
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_3_33();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = partial apply for implicit closure #1 in LabelTemplatesProviding.yesAndNo();
  uint64_t v2 = OUTLINED_FUNCTION_9_24();
  return implicit closure #1 in LabelTemplatesProviding.yesAndNo()(v2, v3, v4, v5);
}

uint64_t implicit closure #2 in LabelTemplatesProviding.yesAndNo()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a1;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(a4 + 16) + **(int **)(a4 + 16));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v7;
  *uint64_t v7 = v4;
  v7[1] = implicit closure #2 in LabelTemplatesProviding.yesAndNo();
  return v9(a3, a4);
}

uint64_t implicit closure #2 in LabelTemplatesProviding.yesAndNo()(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_0_1();
  uint64_t v7 = v6;
  OUTLINED_FUNCTION_8_27();
  *uint64_t v8 = v7;
  uint64_t v9 = *v3;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v10 = v9;
  swift_task_dealloc();
  if (v2)
  {
    OUTLINED_FUNCTION_6_22();
    return v11();
  }
  else
  {
    *(void *)(v7 + 32) = a2;
    *(void *)(v7 + 40) = a1;
    return _swift_task_switch(implicit closure #2 in LabelTemplatesProviding.yesAndNo(), 0, 0);
  }
}

uint64_t implicit closure #2 in LabelTemplatesProviding.yesAndNo()()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void **)(v0 + 16);
  *uint64_t v2 = *(void *)(v0 + 40);
  v2[1] = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t objectdestroyTm_2()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t partial apply for implicit closure #2 in LabelTemplatesProviding.yesAndNo()()
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_3_33();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for Flow.execute() in conformance ContactNeedsValueGuardFlow<A>;
  uint64_t v2 = OUTLINED_FUNCTION_9_24();
  return implicit closure #2 in LabelTemplatesProviding.yesAndNo()(v2, v3, v4, v5);
}

uint64_t LabelTemplatesProvider.yes()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return OUTLINED_FUNCTION_21_1((uint64_t)LabelTemplatesProvider.yes());
}

uint64_t LabelTemplatesProvider.yes()()
{
  OUTLINED_FUNCTION_16_1();
  if (*(void *)(v0 + 24))
  {
    OUTLINED_FUNCTION_10_17();
    uint64_t v1 = OUTLINED_FUNCTION_12_14();
    return v2(v1);
  }
  else
  {
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 32) = v4;
    *uint64_t v4 = v0;
    v4[1] = LabelTemplatesProvider.yes();
    return static LabelTemplates.yes()();
  }
}

uint64_t LabelTemplatesProvider.no()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a3;
  *(void *)(v4 + 24) = a4;
  return OUTLINED_FUNCTION_21_1((uint64_t)LabelTemplatesProvider.no());
}

uint64_t LabelTemplatesProvider.no()()
{
  OUTLINED_FUNCTION_16_1();
  if (*(void *)(v0 + 24))
  {
    OUTLINED_FUNCTION_10_17();
    uint64_t v1 = OUTLINED_FUNCTION_12_14();
    return v2(v1);
  }
  else
  {
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 32) = v4;
    *uint64_t v4 = v0;
    v4[1] = LabelTemplatesProvider.no();
    return static LabelTemplates.no()();
  }
}

uint64_t LabelTemplatesProvider.no()(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_0_1();
  uint64_t v7 = v6;
  OUTLINED_FUNCTION_8_27();
  *uint64_t v8 = v7;
  uint64_t v9 = *v3;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v10 = v9;
  swift_task_dealloc();
  if (v2)
  {
    OUTLINED_FUNCTION_6_22();
    return v11();
  }
  else
  {
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
    swift_bridgeObjectRetain();
    return v13(a1, a2);
  }
}

uint64_t LabelTemplatesProvider.openApp(appDisplayInfo:)(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = LabelTemplatesProvider.openApp(appDisplayInfo:);
  return static LabelTemplates.openApp(appDisplayInfo:)(a1);
}

uint64_t LabelTemplatesProvider.openApp(appDisplayInfo:)()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_0_1();
  uint64_t v6 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v7 = v6;
  uint64_t v8 = swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
  if (!v0)
  {
    uint64_t v8 = v5;
    uint64_t v9 = v3;
  }
  return v10(v8, v9);
}

uint64_t protocol witness for LabelTemplatesProviding.yes() in conformance LabelTemplatesProvider()
{
  uint64_t v2 = *v0;
  uint64_t v3 = v0[1];
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = protocol witness for LabelTemplatesProviding.yes() in conformance LabelTemplatesProvider;
  return LabelTemplatesProvider.yes()(v2, v3);
}

uint64_t protocol witness for LabelTemplatesProviding.no() in conformance LabelTemplatesProvider()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = protocol witness for LabelTemplatesProviding.yes() in conformance LabelTemplatesProvider;
  return LabelTemplatesProvider.no()((uint64_t)v4, v5, v2, v3);
}

uint64_t protocol witness for LabelTemplatesProviding.openApp(appDisplayInfo:) in conformance LabelTemplatesProvider(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = protocol witness for LabelTemplatesProviding.yes() in conformance LabelTemplatesProvider;
  return LabelTemplatesProvider.openApp(appDisplayInfo:)(a1);
}

uint64_t destroy for LabelTemplatesProvider()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for LabelTemplatesProvider(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for LabelTemplatesProvider(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *assignWithTake for LabelTemplatesProvider(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for LabelTemplatesProvider(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 32))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LabelTemplatesProvider(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LabelTemplatesProvider()
{
  return &type metadata for LabelTemplatesProvider;
}

uint64_t OUTLINED_FUNCTION_6_22()
{
  return v0 + 8;
}

uint64_t OUTLINED_FUNCTION_7_29()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_9_24()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_10_17()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_12_14()
{
  return v0;
}

uint64_t ModelDecisionEvaluator.forcedDisambiguationPrediction.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin22ModelDecisionEvaluator_forcedDisambiguationPrediction;
  type metadata accessor for AppResolverResult();
  OUTLINED_FUNCTION_15();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);

  return v6(a1, v3, v4);
}

uint64_t ModelDecisionEvaluator.userChosenApp.getter()
{
  return swift_retain();
}

uint64_t ModelDecisionEvaluator.__allocating_init(forcedDisambiguationPrediction:userChosenApp:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = swift_allocObject();
  type metadata accessor for AppResolverResult();
  OUTLINED_FUNCTION_15();
  uint64_t v4 = OUTLINED_FUNCTION_7_5();
  v5(v4);
  *(void *)(v3 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin22ModelDecisionEvaluator_userChosenApp) = a2;
  return v3;
}

uint64_t ModelDecisionEvaluator.init(forcedDisambiguationPrediction:userChosenApp:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AppResolverResult();
  OUTLINED_FUNCTION_15();
  uint64_t v4 = OUTLINED_FUNCTION_7_5();
  v5(v4);
  *(void *)(v2 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin22ModelDecisionEvaluator_userChosenApp) = a2;
  return v2;
}

Swift::String_optional __swiftcall ModelDecisionEvaluator.getPredictedApp()()
{
  uint64_t v2 = type metadata accessor for AppResolverResult();
  OUTLINED_FUNCTION_0_0();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_12_0();
  (*(void (**)(unint64_t *, uint64_t, uint64_t))(v4 + 16))(v1, v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin22ModelDecisionEvaluator_forcedDisambiguationPrediction, v2);
  int v6 = (*(uint64_t (**)(unint64_t *, uint64_t))(v4 + 88))(v1, v2);
  BOOL v7 = v6 == enum case for AppResolverResult.resolved(_:) || v6 == enum case for AppResolverResult.needsConfirmation(_:);
  if (v7)
  {
    unint64_t v10 = 0xD000000000000015;
    (*(void (**)(unint64_t *, uint64_t))(v4 + 96))(v1, v2);
    uint64_t v9 = v1;
    unint64_t v8 = *v1;
    unint64_t v11 = v9[1];
    if (v8 == 0xD000000000000017 && (OUTLINED_FUNCTION_4_33((uint64_t)"com.apple.InCallService"), v7)
      || (OUTLINED_FUNCTION_1_37() & 1) != 0
      || v8 == 0xD000000000000012 && (OUTLINED_FUNCTION_4_33((uint64_t)"com.apple.Carousel"), v7)
      || (OUTLINED_FUNCTION_1_37() & 1) != 0
      || v8 == 0xD000000000000013 && (OUTLINED_FUNCTION_4_33((uint64_t)"com.apple.NanoPhone"), v7)
      || (OUTLINED_FUNCTION_1_37() & 1) != 0
      || v8 == 0xD000000000000015 && v11 == 0x80000000004932A0
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      unint64_t v11 = 0x80000000004932A0;
    }
    else
    {
      unint64_t v10 = v8;
    }
  }
  else
  {
    (*(void (**)(unint64_t *, uint64_t))(v4 + 8))(v1, v2);
    unint64_t v10 = 0;
    unint64_t v11 = 0;
  }
  uint64_t v12 = v10;
  uint64_t v13 = (void *)v11;
  result.value._object = v13;
  result.value._uint64_t countAndFlagsBits = v12;
  return result;
}

Swift::Bool __swiftcall ModelDecisionEvaluator.isDecisionCorrect()()
{
  uint64_t v2 = type metadata accessor for AppResolverResult();
  OUTLINED_FUNCTION_0_0();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_12_0();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v4 + 16))(v1, v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin22ModelDecisionEvaluator_forcedDisambiguationPrediction, v2);
  int v6 = (*(uint64_t (**)(uint64_t *, uint64_t))(v4 + 88))(v1, v2);
  if (v6 == enum case for AppResolverResult.resolved(_:) || v6 == enum case for AppResolverResult.needsConfirmation(_:))
  {
    uint64_t v8 = OUTLINED_FUNCTION_5_28();
    v9(v8);
    uint64_t v10 = *v1;
    uint64_t v11 = v1[1];
    uint64_t v12 = App.appIdentifier.getter();
    BOOL v14 = ModelDecisionEvaluator.bundlesMatchOrEquivalent(_:_:)(v10, v11, v12, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v14;
  }
  if (v6 != enum case for AppResolverResult.needsDisambiguation(_:))
  {
    if (v6 == enum case for AppResolverResult.noMatchFound(_:)) {
      return App.isFirstParty()();
    }
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.siriPhone);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl(&dword_0, v27, v28, "#ModelDecisionEvaluator isDecisionCorrect: unknown prediction state", v29, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(uint64_t *, uint64_t))(v4 + 8))(v1, v2);
    return 0;
  }
  uint64_t v15 = OUTLINED_FUNCTION_5_28();
  v16(v15);
  uint64_t v17 = *v1;
  uint64_t v18 = *(void *)(*v1 + 16);
  if (!v18)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  for (uint64_t i = v17 + 40; ; i += 16)
  {
    swift_bridgeObjectRetain();
    App.appIdentifier.getter();
    uint64_t v21 = v20;
    uint64_t v22 = OUTLINED_FUNCTION_6_23();
    BOOL v25 = ModelDecisionEvaluator.bundlesMatchOrEquivalent(_:_:)(v22, v23, v24, v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v25) {
      break;
    }
    if (!--v18)
    {
      swift_bridgeObjectRelease_n();
      return 0;
    }
  }
  swift_bridgeObjectRelease_n();
  return 1;
}

Swift::Bool __swiftcall ModelDecisionEvaluator.isConfirmation()()
{
  return ModelDecisionEvaluator.isConfirmation()(&enum case for AppResolverResult.needsConfirmation(_:));
}

Swift::Bool __swiftcall ModelDecisionEvaluator.isDisambiguation()()
{
  return ModelDecisionEvaluator.isConfirmation()(&enum case for AppResolverResult.needsDisambiguation(_:));
}

BOOL ModelDecisionEvaluator.isConfirmation()(_DWORD *a1)
{
  uint64_t v3 = type metadata accessor for AppResolverResult();
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin22ModelDecisionEvaluator_forcedDisambiguationPrediction, v3);
  uint64_t v8 = OUTLINED_FUNCTION_6_23();
  BOOL v10 = v9(v8) == *a1;
  uint64_t v11 = OUTLINED_FUNCTION_6_23();
  v12(v11);
  return v10;
}

uint64_t ModelDecisionEvaluator.description.getter()
{
  _StringGuts.grow(_:)(63);
  v1._uint64_t countAndFlagsBits = 0xD000000000000013;
  v1._object = (void *)0x80000000004932C0;
  String.append(_:)(v1);
  char v2 = (*(uint64_t (**)(void))(*(void *)v0 + 112))();
  BOOL v3 = (v2 & 1) == 0;
  if (v2) {
    uint64_t v4 = 1702195828;
  }
  else {
    uint64_t v4 = 0x65736C6166;
  }
  if (v3) {
    unint64_t v5 = 0xE500000000000000;
  }
  else {
    unint64_t v5 = 0xE400000000000000;
  }
  unint64_t v6 = v5;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 0xD000000000000014;
  v7._object = (void *)0x80000000004932E0;
  String.append(_:)(v7);
  char v8 = (*(uint64_t (**)(void))(*(void *)v0 + 128))();
  BOOL v9 = (v8 & 1) == 0;
  if (v8) {
    uint64_t v10 = 1702195828;
  }
  else {
    uint64_t v10 = 0x65736C6166;
  }
  if (v9) {
    unint64_t v11 = 0xE500000000000000;
  }
  else {
    unint64_t v11 = 0xE400000000000000;
  }
  unint64_t v12 = v11;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  v13._object = (void *)0x8000000000493300;
  v13._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v13);
  char v14 = (*(uint64_t (**)(void))(*(void *)v0 + 120))();
  BOOL v15 = (v14 & 1) == 0;
  if (v14) {
    uint64_t v16 = 1702195828;
  }
  else {
    uint64_t v16 = 0x65736C6166;
  }
  if (v15) {
    unint64_t v17 = 0xE500000000000000;
  }
  else {
    unint64_t v17 = 0xE400000000000000;
  }
  unint64_t v18 = v17;
  String.append(_:)(*(Swift::String *)&v16);
  swift_bridgeObjectRelease();
  return 0;
}

BOOL ModelDecisionEvaluator.bundlesMatchOrEquivalent(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    if (a4)
    {
      if (a1 == a3 && a2 == a4) {
        return 1;
      }
      OUTLINED_FUNCTION_6_23();
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        return 1;
      }
    }
  }
  else if (!a4)
  {
    return 1;
  }
  uint64_t v7 = OUTLINED_FUNCTION_6_23();
  return (static PhoneCallAppNameConstants.isPhone(appId:)(v7, v8) & 1) != 0
      && (static PhoneCallAppNameConstants.isPhone(appId:)(a3, a4) & 1) != 0;
}

uint64_t ModelDecisionEvaluator.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin22ModelDecisionEvaluator_forcedDisambiguationPrediction;
  type metadata accessor for AppResolverResult();
  OUTLINED_FUNCTION_15();
  (*(void (**)(uint64_t))(v2 + 8))(v1);
  swift_release();
  return v0;
}

uint64_t ModelDecisionEvaluator.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin22ModelDecisionEvaluator_forcedDisambiguationPrediction;
  type metadata accessor for AppResolverResult();
  OUTLINED_FUNCTION_15();
  (*(void (**)(uint64_t))(v2 + 8))(v1);
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ModelDecisionEvaluator()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))();
}

uint64_t ObjC metadata update function for ModelDecisionEvaluator()
{
  return type metadata accessor for ModelDecisionEvaluator();
}

uint64_t type metadata accessor for ModelDecisionEvaluator()
{
  uint64_t result = type metadata singleton initialization cache for ModelDecisionEvaluator;
  if (!type metadata singleton initialization cache for ModelDecisionEvaluator) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for ModelDecisionEvaluator()
{
  uint64_t result = type metadata accessor for AppResolverResult();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_37()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

unint64_t OUTLINED_FUNCTION_4_33@<X0>(uint64_t a1@<X8>)
{
  return (a1 - 32) | 0x8000000000000000;
}

uint64_t OUTLINED_FUNCTION_6_23()
{
  return v0;
}

uint64_t SemanticValue.init(string:nlNode:)(uint64_t a1, uint64_t a2, char a3)
{
  return SemanticValue.nodeClass.setter();
}

uint64_t CallRecordDisplayTextComponents.init(callRecord:deviceState:phoneCallDisplayTextCats:)@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a1;
  uint64_t result = outlined init with take of AppSelectionSignalComponent(a2, (uint64_t)(a4 + 1));
  a4[6] = a3;
  return result;
}

void *CallRecordDisplayTextComponents.callerNameText.getter()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_12_0();
  uint64_t v3 = type metadata accessor for TemplatingResult();
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_4();
  uint64_t v9 = v8 - v7;
  id v10 = [*v0 caller];
  unint64_t v11 = v10;
  if (v10)
  {
    id v12 = [v10 displayName];

    unint64_t v11 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;
  }
  else
  {
    uint64_t v14 = 0;
  }
  uint64_t v15 = outlined init with copy of CallRecordDisplayTextComponents((uint64_t)v0, (uint64_t)v18);
  if (!v14)
  {
    (*(void (**)(uint64_t))(class metadata base offset for PhoneCallDisplayTextCATs + *(void *)v18[6] + 600))(v15);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      swift_willThrowTypedImpl();
      swift_errorRelease();
LABEL_10:
      unint64_t v11 = 0;
      goto LABEL_11;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v9, v1, v3);
    uint64_t v16 = TemplatingResult.print.getter();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
    if (!*(void *)(v16 + 16))
    {
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
    unint64_t v11 = *(void **)(v16 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
LABEL_11:
  outlined destroy of CallRecordDisplayTextComponents(v18);
  return v11;
}

id *outlined destroy of CallRecordDisplayTextComponents(id *a1)
{
  return a1;
}

uint64_t CallRecordDisplayTextComponents.callerHandleLabelText.getter()
{
  uint64_t v2 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_0_0();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_12_0();
  id v6 = [*(id *)v0 caller];
  if (!v6) {
    return 0;
  }
  uint64_t v7 = v6;
  id v8 = [v6 personHandle];

  if (!v8) {
    return 0;
  }
  id v9 = [v8 label];

  if (!v9) {
    return 0;
  }
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 8), *(void *)(v0 + 32));
  dispatch thunk of DeviceState.siriLocale.getter();
  Locale.identifier.getter();
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v2);
  uint64_t v10 = static LabelMappingUtil.translateINPersonHandleLabel(_:languageCode:)();
  swift_bridgeObjectRelease();

  return v10;
}

uint64_t CallRecordDisplayTextComponents.callDateText.getter()
{
  uint64_t v1 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_4();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  __chkstk_darwin(v8 - 8);
  OUTLINED_FUNCTION_4();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = type metadata accessor for Date();
  OUTLINED_FUNCTION_0_0();
  uint64_t v14 = v13;
  uint64_t v16 = __chkstk_darwin(v15);
  unint64_t v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v36 - v19;
  id v21 = [*(id *)v0 dateCreated];
  if (!v21)
  {
    __swift_storeEnumTagSinglePayload(v11, 1, 1, v12);
    goto LABEL_8;
  }
  uint64_t v22 = v21;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v37 = v14;
  uint64_t v23 = *(void (**)(uint64_t, char *, uint64_t))(v14 + 32);
  v23(v11, v18, v12);
  __swift_storeEnumTagSinglePayload(v11, 0, 1, v12);
  if (__swift_getEnumTagSinglePayload(v11, 1, v12) == 1)
  {
LABEL_8:
    outlined destroy of Date?(v11);
    return 0;
  }
  v23((uint64_t)v20, (char *)v11, v12);
  id v24 = [objc_allocWithZone((Class)NSDateFormatter) init];
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 8), *(void *)(v0 + 32));
  dispatch thunk of DeviceState.siriLocale.getter();
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v1);
  [v24 setLocale:isa];

  [v24 setDateStyle:1];
  Class v26 = Date._bridgeToObjectiveC()().super.isa;
  id v27 = [v24 stringFromDate:v26];

  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v30 = v29;

  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  __swift_project_value_buffer(v31, (uint64_t)static Logger.siriPhone);
  swift_bridgeObjectRetain_n();
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v32, v33))
  {
    id v36 = v24;
    uint64_t v34 = (uint8_t *)swift_slowAlloc();
    uint64_t v39 = swift_slowAlloc();
    *(_DWORD *)uint64_t v34 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v30, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v32, v33, "formattedDate: %s", v34, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v37 + 8))(v20, v12);
  return v28;
}

uint64_t CallRecordDisplayTextComponents.callDurationText.getter()
{
  uint64_t v0 = INCallRecord.callDuration.getter();
  if (v1) {
    return 0;
  }
  double v2 = *(double *)&v0;
  id v3 = [objc_allocWithZone((Class)NSDateComponentsFormatter) init];
  [v3 setUnitsStyle:0];
  [v3 setAllowedUnits:192];
  [v3 setZeroFormattingBehavior:0x10000];
  id v4 = [v3 stringFromTimeInterval:ceil(v2)];
  if (!v4)
  {

    return 0;
  }
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v8 = v7;

  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = 48;
  v9._object = (void *)0xE100000000000000;
  LOBYTE(v5) = String.hasPrefix(_:)(v9);
  swift_bridgeObjectRelease();
  if (v5)
  {
    specialized Collection.dropFirst(_:)(1uLL, v6, v8);
    uint64_t v6 = static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }

  return v6;
}

uint64_t CarPlayRCHFlowProvider.sharedGlobals.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + 8, a1);
}

uint64_t FaceTimeSettingsBuilder.phoneCallDisplayTextCATs.getter()
{
  return swift_retain();
}

uint64_t outlined destroy of Date?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for CallRecordDisplayTextComponents(id *a1)
{
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 1));

  return swift_release();
}

uint64_t initializeWithCopy for CallRecordDisplayTextComponents(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = a1 + 8;
  uint64_t v6 = a2 + 8;
  long long v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v7;
  uint64_t v8 = v7;
  Swift::String v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  id v10 = v4;
  v9(v5, v6, v8);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CallRecordDisplayTextComponents(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CallRecordDisplayTextComponents(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CallRecordDisplayTextComponents(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CallRecordDisplayTextComponents(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CallRecordDisplayTextComponents()
{
  return &type metadata for CallRecordDisplayTextComponents;
}

uint64_t key path setter for PhoneIntentRCHFlow.state : <A, B>PhoneIntentRCHFlow<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PhoneIntentRCHFlow.State();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  long long v7 = (char *)&v10 - v6;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v10 - v6, a1, v4);
  uint64_t v8 = *(void *)a2 + *(void *)(**(void **)a2 + 120);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 40))(v8, v7, v4);
  return swift_endAccess();
}

uint64_t PhoneIntentRCHFlow.state.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 120);
  swift_beginAccess();
  type metadata accessor for PhoneIntentRCHFlow.State();
  OUTLINED_FUNCTION_1_1();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(a1, v3);
}

uint64_t type metadata accessor for PhoneIntentRCHFlow.State()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t PhoneIntentRCHFlow.exitValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  OUTLINED_FUNCTION_9_11();
  uint64_t v4 = type metadata accessor for PhoneIntentRCHFlow.State();
  OUTLINED_FUNCTION_0_0();
  uint64_t v6 = v5;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v18 - v9);
  (*(void (**)(uint64_t))(v3 + 128))(v8);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(void *)a1 = *v10;
    *(unsigned char *)(a1 + 8) = 0;
    OUTLINED_FUNCTION_8_30();
    OUTLINED_FUNCTION_1_1();
    uint64_t v14 = OUTLINED_FUNCTION_10_18();
    return v15(v14);
  }
  else if (EnumCaseMultiPayload == 3)
  {
    OUTLINED_FUNCTION_8_30();
    OUTLINED_FUNCTION_1_1();
    return (*(uint64_t (**)(uint64_t, void *))(v12 + 32))(a1, v10);
  }
  else
  {
    OUTLINED_FUNCTION_8_30();
    OUTLINED_FUNCTION_1_1();
    uint64_t v16 = OUTLINED_FUNCTION_10_18();
    v17(v16);
    return (*(uint64_t (**)(void *, uint64_t))(v6 + 8))(v10, v4);
  }
}

uint64_t specialized PhoneIntentRCHFlow.__allocating_init(phoneCallNLIntent:app:rchFlowProvider:sharedGlobals:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneIntentRCHFlow<INAddCallParticipantIntent, INAddCallParticipantIntentResponse>.State);
  __chkstk_darwin(v11);
  uint64_t v13 = &v17[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of SignalProviding(a1, (uint64_t)v13);
  swift_storeEnumTagMultiPayload();
  outlined init with copy of SignalProviding(a5, (uint64_t)v17);
  uint64_t v14 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t, unsigned char *))(v5 + 160))(v13, a2, a3, a4, v17);
  __swift_destroy_boxed_opaque_existential_1(a5);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v14;
}

uint64_t PhoneIntentRCHFlow.__allocating_init(phoneCallNLIntent:app:rchFlowProvider:sharedGlobals:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = type metadata accessor for PhoneIntentRCHFlow.State();
  __chkstk_darwin(v11);
  uint64_t v13 = &v17[-v12 - 8];
  outlined init with copy of SignalProviding(a1, (uint64_t)&v17[-v12 - 8]);
  swift_storeEnumTagMultiPayload();
  outlined init with copy of SignalProviding(a5, (uint64_t)v17);
  uint64_t v14 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t, unsigned char *))(v5 + 160))(v13, a2, a3, a4, v17);
  __swift_destroy_boxed_opaque_existential_1(a5);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v14;
}

uint64_t PhoneIntentRCHFlow.__allocating_init(state:app:rchFlowProvider:sharedGlobals:)()
{
  OUTLINED_FUNCTION_3_34();
  uint64_t v1 = OUTLINED_FUNCTION_6_24();
  PhoneIntentRCHFlow.init(state:app:rchFlowProvider:sharedGlobals:)(v1, v2, v3, v4, v5);
  return v0;
}

void *specialized PhoneIntentRCHFlow.init(state:app:rchFlowProvider:sharedGlobals:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  outlined init with take of PhoneIntentRCHFlow<INAddCallParticipantIntent, INAddCallParticipantIntentResponse>.State(a1, (uint64_t)v5 + *(void *)(*v5 + 120));
  _OWORD v5[2] = a2;
  v5[3] = a3;
  v5[4] = a4;
  outlined init with take of AppSelectionSignalComponent(a5, (uint64_t)(v5 + 5));
  return v5;
}

void *PhoneIntentRCHFlow.init(state:app:rchFlowProvider:sharedGlobals:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  OUTLINED_FUNCTION_9_11();
  uint64_t v12 = (char *)v5 + *(void *)(v11 + 120);
  OUTLINED_FUNCTION_9_11();
  type metadata accessor for PhoneIntentRCHFlow.State();
  OUTLINED_FUNCTION_1_1();
  (*(void (**)(char *, uint64_t))(v13 + 32))(v12, a1);
  _OWORD v5[2] = a2;
  v5[3] = a3;
  v5[4] = a4;
  outlined init with take of AppSelectionSignalComponent(a5, (uint64_t)(v5 + 5));
  return v5;
}

uint64_t PhoneIntentRCHFlow.execute(completion:)()
{
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t type metadata accessor for PhoneIntentRCHFlow()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t PhoneIntentRCHFlow.execute()(uint64_t a1)
{
  v2[36] = a1;
  v2[37] = v1;
  uint64_t v3 = *v1;
  type metadata accessor for CATOption();
  v2[38] = swift_task_alloc();
  v2[39] = *(void *)(v3 + 80);
  v2[40] = *(void *)(v3 + 88);
  uint64_t v4 = type metadata accessor for PhoneIntentRCHFlow.State();
  v2[41] = v4;
  v2[42] = *(void *)(v4 - 8);
  v2[43] = swift_task_alloc();
  v2[44] = swift_task_alloc();
  v2[45] = swift_task_alloc();
  return _swift_task_switch(PhoneIntentRCHFlow.execute(), 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t (*v8)();
  uint64_t v10;

  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v7 = v6;
  *(void *)(v5 + 400) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v8 = PhoneIntentRCHFlow.execute();
  }
  else
  {

    *(void *)(v5 + 408) = a1;
    uint64_t v8 = PhoneIntentRCHFlow.execute();
  }
  return _swift_task_switch(v8, 0, 0);
}

uint64_t PhoneIntentRCHFlow.execute()()
{
  uint64_t v55 = v0 + 96;
  (*(void (**)(void))(**(void **)(v0 + 296) + 128))();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v15 = **(void ***)(v0 + 360);
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v16 = type metadata accessor for Logger();
      __swift_project_value_buffer(v16, (uint64_t)static Logger.siriPhone);
      swift_retain_n();
      id v17 = v15;
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = *(void *)(v0 + 296);
        uint64_t v21 = swift_slowAlloc();
        typea = (void *)swift_slowAlloc();
        uint64_t v57 = swift_slowAlloc();
        *(_DWORD *)uint64_t v21 = 136315394;
        *(void *)(v0 + 208) = v20;
        type metadata accessor for PhoneIntentRCHFlow();
        swift_retain();
        uint64_t v22 = String.init<A>(describing:)();
        *(void *)(v0 + 216) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        *(_WORD *)(v21 + 12) = 2112;
        *(void *)(v0 + 224) = v17;
        id v24 = v17;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *typea = v17;

        _os_log_impl(&dword_0, v18, v19, "#%s .convertedToSKIntent: %@", (uint8_t *)v21, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_6();
        swift_arrayDestroy();
        OUTLINED_FUNCTION_6();
        OUTLINED_FUNCTION_6();
      }
      else
      {
        swift_release_n();
      }
      (*(void (**)(id, void, uint64_t))(*(void *)(v0 + 296) + 24))(v17, *(void *)(*(void *)(v0 + 296) + 16), *(void *)(v0 + 296) + 40);
      implicit closure #5 in PhoneIntentRCHFlow.execute()();
      static ExecuteResponse.complete<A>(next:childCompletion:)();
      swift_release();
      swift_release();

      break;
    case 2u:
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v25 = type metadata accessor for Logger();
      __swift_project_value_buffer(v25, (uint64_t)static Logger.siriPhone);
      swift_retain();
      swift_errorRetain();
      swift_retain();
      swift_errorRetain();
      Class v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v26, v27))
      {
        os_log_type_t typeb = v27;
        uint64_t v28 = *(void *)(v0 + 296);
        uint64_t v29 = swift_slowAlloc();
        uint64_t v57 = swift_slowAlloc();
        *(_DWORD *)uint64_t v29 = 136315394;
        *(void *)(v0 + 256) = v28;
        type metadata accessor for PhoneIntentRCHFlow();
        swift_retain();
        uint64_t v30 = String.init<A>(describing:)();
        *(void *)(v0 + 248) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        *(_WORD *)(v29 + 12) = 2080;
        swift_getErrorValue();
        uint64_t v32 = Error.localizedDescription.getter();
        *(void *)(v0 + 232) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl(&dword_0, v26, typeb, "#%s .completeWithError: %s", (uint8_t *)v29, 0x16u);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_6();
        OUTLINED_FUNCTION_6();
      }
      else
      {
        swift_release_n();
        swift_errorRelease();
        swift_errorRelease();
      }

      uint64_t v41 = *(void *)(v0 + 296) + 40;
      type metadata accessor for StartCallCATsSimple();
      static CATOption.defaultMode.getter();
      uint64_t v42 = CATWrapperSimple.__allocating_init(options:globals:)();
      uint64_t v43 = static CommonOutputs.genericError(sharedGlobals:startCallCATsSimple:)(v41, v42);
      uint64_t v44 = swift_release();
      uint64_t v45 = (*(uint64_t (**)(uint64_t))(*(void *)v43 + 112))(v44);
      swift_release();
      *(void *)(v0 + 264) = v45;
      type metadata accessor for SimpleOutputFlowAsync();
      static ExecuteResponse.complete<A>(next:)();
      swift_errorRelease();
      swift_release();
      break;
    case 3u:
      uint64_t v34 = *(void *)(v0 + 360);
      uint64_t v35 = *(void *)(v0 + 328);
      uint64_t v36 = *(void *)(v0 + 336);
      static ExecuteResponse.complete()();
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v34, v35);
      break;
    default:
      uint64_t v1 = *(void *)(v0 + 312);
      uint64_t v2 = *(void **)(v0 + 296);
      outlined init with take of AppSelectionSignalComponent(*(long long **)(v0 + 360), v55);
      uint64_t v3 = v2[2];
      *(void *)(v0 + 368) = v3;
      uint64_t v4 = v2[8];
      uint64_t v5 = v2[9];
      uint64_t v50 = v2;
      uint64_t v54 = v2 + 5;
      __swift_project_boxed_opaque_existential_1(v2 + 5, v4);
      uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 80);
      swift_retain();
      v6(v4, v5);
      uint64_t v7 = (void *)SKTransformer.convertToSKIntent<A>(phoneCallNLIntent:rchFlowContext:)(v55, v3, 0, 0, v1);
      outlined destroy of SKTransformer(v0 + 56);
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      __swift_project_value_buffer(v8, (uint64_t)static Logger.siriPhone);
      swift_retain_n();
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = *(void *)(v0 + 296);
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        uint64_t v57 = swift_slowAlloc();
        *(_DWORD *)uint64_t v12 = 136315138;
        *(void *)(v0 + 272) = v11;
        type metadata accessor for PhoneIntentRCHFlow();
        swift_retain();
        uint64_t v13 = String.init<A>(describing:)();
        *(void *)(v0 + 280) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl(&dword_0, v9, v10, "#%s Resolving SKIntent:", v12, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_6();
        OUTLINED_FUNCTION_6();
      }
      else
      {
        swift_release_n();
      }

      uint64_t v37 = v50[8];
      uint64_t v38 = v50[9];
      __swift_project_boxed_opaque_existential_1(v54, v37);
      (*(void (**)(uint64_t, uint64_t))(v38 + 88))(v37, v38);
      uint64_t v39 = *(void *)(v0 + 48);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
      if (v7) {
        id v40 = v7;
      }
      else {
        id v40 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
      }
      *(void *)(v0 + 376) = v7;
      *(void *)(v0 + 384) = v40;
      *(void *)os_log_type_t type = *(void *)(v39 + 8) + **(int **)(v39 + 8);
      id v48 = v7;
      uint64_t v49 = (void *)swift_task_alloc();
      *(void *)(v0 + 392) = v49;
      *uint64_t v49 = v0;
      v49[1] = PhoneIntentRCHFlow.execute();
      __asm { BRAA            X9, X16 }
      return result;
  }
  OUTLINED_FUNCTION_9_25();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v46();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  uint64_t v1 = v0[51];
  uint64_t v3 = v0[43];
  uint64_t v2 = (void *)v0[44];
  uint64_t v4 = v0[41];
  uint64_t v5 = v0[42];
  uint64_t v6 = v0[37];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  *uint64_t v2 = v1;
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, void *, uint64_t))(v5 + 32))(v3, v2, v4);
  uint64_t v7 = v6 + *(void *)(*(void *)v6 + 120);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(v7, v3, v4);
  swift_endAccess();
  uint64_t v8 = (void *)v0[47];
  static ExecuteResponse.replan(requireInput:)();
  swift_release();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 12));
  OUTLINED_FUNCTION_9_25();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v9();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  uint64_t v1 = *(void *)(v0 + 400);
  uint64_t v3 = *(void *)(v0 + 344);
  uint64_t v2 = *(void **)(v0 + 352);
  uint64_t v4 = *(void *)(v0 + 328);
  uint64_t v5 = *(void *)(v0 + 336);
  uint64_t v6 = *(void *)(v0 + 296);

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  *uint64_t v2 = v1;
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, void *, uint64_t))(v5 + 32))(v3, v2, v4);
  uint64_t v7 = v6 + *(void *)(*(void *)v6 + 120);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(v7, v3, v4);
  swift_endAccess();
  uint64_t v8 = *(void **)(v0 + 376);
  static ExecuteResponse.replan(requireInput:)();
  swift_release();

  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  OUTLINED_FUNCTION_9_25();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v9();
}

uint64_t (*implicit closure #5 in PhoneIntentRCHFlow.execute()())()
{
  return partial apply for implicit closure #6 in implicit closure #5 in PhoneIntentRCHFlow.execute();
}

uint64_t PhoneIntentRCHFlow.childRCHFlowComplete(_:)(uint64_t a1)
{
  OUTLINED_FUNCTION_9_11();
  OUTLINED_FUNCTION_9_11();
  uint64_t v3 = type metadata accessor for PhoneIntentRCHFlow.State();
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v15 - v10;
  type metadata accessor for RCHFlowResult();
  OUTLINED_FUNCTION_1_1();
  (*(void (**)(char *, uint64_t))(v12 + 16))(v11, a1);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v9, v11, v3);
  uint64_t v13 = v1 + *(void *)(*(void *)v1 + 120);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 40))(v13, v9, v3);
  return swift_endAccess();
}

uint64_t specialized PhoneIntentRCHFlow.deinit()
{
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  outlined destroy of PhoneIntentRCHFlow<INAddCallParticipantIntent, INAddCallParticipantIntentResponse>.State(v0 + *(void *)(*(void *)v0 + 120));
  return v0;
}

uint64_t PhoneIntentRCHFlow.deinit()
{
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 120);
  uint64_t v2 = type metadata accessor for PhoneIntentRCHFlow.State();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t PhoneIntentRCHFlow.__deallocating_deinit()
{
  PhoneIntentRCHFlow.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Flow.on(input:) in conformance PhoneIntentRCHFlow<A, B>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 168))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance PhoneIntentRCHFlow<A, B>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 176))();
}

uint64_t protocol witness for Flow.execute() in conformance PhoneIntentRCHFlow<A, B>(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 184) + **(int **)(**(void **)v1 + 184));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for Flow.execute() in conformance PhoneIntentRCHFlow<A, B>;
  return v6(a1);
}

uint64_t protocol witness for Flow.execute() in conformance PhoneIntentRCHFlow<A, B>()
{
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v3();
}

uint64_t protocol witness for Flow.exitValue.getter in conformance PhoneIntentRCHFlow<A, B>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

uint64_t AddCallParticipantRCHFlow.__allocating_init(phoneCallNLIntent:app:sharedGlobals:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  outlined init with copy of SignalProviding(a1, (uint64_t)v9);
  outlined init with copy of SignalProviding(a3, (uint64_t)v8);
  uint64_t v6 = specialized PhoneIntentRCHFlow.__allocating_init(phoneCallNLIntent:app:rchFlowProvider:sharedGlobals:)((uint64_t)v9, a2, (uint64_t)implicit closure #1 in AddCallParticipantRCHFlow.init(phoneCallNLIntent:app:sharedGlobals:), 0, (uint64_t)v8);
  __swift_destroy_boxed_opaque_existential_1(a3);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v6;
}

uint64_t AddCallParticipantRCHFlow.__allocating_init(state:app:sharedGlobals:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneIntentRCHFlow<INAddCallParticipantIntent, INAddCallParticipantIntentResponse>.State);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of PhoneIntentRCHFlow<INAddCallParticipantIntent, INAddCallParticipantIntentResponse>.State(a1, (uint64_t)v9);
  outlined init with copy of SignalProviding(a3, (uint64_t)v13);
  uint64_t v10 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t (*)(), void, unsigned char *))(v3 + 160))(v9, a2, implicit closure #1 in AddCallParticipantRCHFlow.init(state:app:sharedGlobals:), 0, v13);
  __swift_destroy_boxed_opaque_existential_1(a3);
  outlined destroy of PhoneIntentRCHFlow<INAddCallParticipantIntent, INAddCallParticipantIntentResponse>.State(a1);
  return v10;
}

void *AddCallParticipantRCHFlow.__allocating_init(state:app:rchFlowProvider:sharedGlobals:)()
{
  OUTLINED_FUNCTION_3_34();
  uint64_t v0 = OUTLINED_FUNCTION_6_24();
  return specialized PhoneIntentRCHFlow.init(state:app:rchFlowProvider:sharedGlobals:)(v0, v1, v2, v3, v4);
}

uint64_t AddCallParticipantRCHFlow.__deallocating_deinit()
{
  specialized PhoneIntentRCHFlow.deinit();

  return swift_deallocClassInstance();
}

uint64_t outlined init with copy of PhoneIntentRCHFlow<INAddCallParticipantIntent, INAddCallParticipantIntentResponse>.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneIntentRCHFlow<INAddCallParticipantIntent, INAddCallParticipantIntentResponse>.State);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PhoneIntentRCHFlow<INAddCallParticipantIntent, INAddCallParticipantIntentResponse>.State(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneIntentRCHFlow<INAddCallParticipantIntent, INAddCallParticipantIntentResponse>.State);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_E1918(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 128))();
}

uint64_t sub_E1960()
{
  return 16;
}

__n128 sub_E196C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata completion function for PhoneIntentRCHFlow()
{
  uint64_t result = type metadata accessor for PhoneIntentRCHFlow.State();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata completion function for PhoneIntentRCHFlow.State()
{
  uint64_t result = type metadata accessor for RCHFlowResult();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for PhoneIntentRCHFlow.State(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *(void *)a1 = *a2;
    a1 = &v7[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v10 = *a2;
        *(void *)a1 = *a2;
        uint64_t v11 = v10;
        break;
      case 2u:
        uint64_t v8 = *a2;
        swift_errorRetain();
        *(void *)a1 = v8;
        break;
      case 3u:
        uint64_t v9 = type metadata accessor for RCHFlowResult();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
        break;
      default:
        long long v6 = *(_OWORD *)(a2 + 3);
        *(_OWORD *)(a1 + 24) = v6;
        (**(void (***)(char *, char **))(v6 - 8))(a1, a2);
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void destroy for PhoneIntentRCHFlow.State(void **a1)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      break;
    case 1u:
      uint64_t v2 = *a1;

      break;
    case 2u:
      swift_errorRelease();
      break;
    case 3u:
      uint64_t v3 = type metadata accessor for RCHFlowResult();
      uint64_t v4 = *(void (**)(void **, uint64_t))(*(void *)(v3 - 8) + 8);
      v4(a1, v3);
      break;
    default:
      return;
  }
}

uint64_t initializeWithCopy for PhoneIntentRCHFlow.State(uint64_t a1, uint64_t a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v7 = *(void **)a2;
      *(void *)a1 = *(void *)a2;
      id v8 = v7;
      break;
    case 2u:
      int v5 = *(void **)a2;
      swift_errorRetain();
      *(void *)a1 = v5;
      break;
    case 3u:
      uint64_t v6 = type metadata accessor for RCHFlowResult();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      break;
    default:
      long long v4 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v4;
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void **assignWithCopy for PhoneIntentRCHFlow.State(void **a1, void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    (*(void (**)(void **, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v6 = *a2;
        *a1 = *a2;
        id v7 = v6;
        break;
      case 2u:
        id v8 = *a2;
        swift_errorRetain();
        *a1 = v8;
        break;
      case 3u:
        uint64_t v9 = type metadata accessor for RCHFlowResult();
        (*(void (**)(void **, void **, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
        break;
      default:
        int v5 = a2[3];
        a1[3] = v5;
        a1[4] = a2[4];
        (**((void (***)(void **, void **))v5 - 1))(a1, a2);
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for PhoneIntentRCHFlow.State(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v6 = type metadata accessor for RCHFlowResult();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for PhoneIntentRCHFlow.State(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 - 8);
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, a3);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      uint64_t v6 = type metadata accessor for RCHFlowResult();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(v5 + 64));
    }
  }
  return a1;
}

uint64_t type metadata accessor for AddCallParticipantRCHFlow()
{
  uint64_t result = type metadata singleton initialization cache for AddCallParticipantRCHFlow;
  if (!type metadata singleton initialization cache for AddCallParticipantRCHFlow) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for AddCallParticipantRCHFlow()
{
  return swift_initClassMetadata2();
}

uint64_t outlined init with take of PhoneIntentRCHFlow<INAddCallParticipantIntent, INAddCallParticipantIntentResponse>.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneIntentRCHFlow<INAddCallParticipantIntent, INAddCallParticipantIntentResponse>.State);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_3_34()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_6_24()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_8_30()
{
  return type metadata accessor for RCHFlowResult();
}

uint64_t OUTLINED_FUNCTION_9_25()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_10_18()
{
  return v0;
}

uint64_t protocol witness for Error._domain.getter in conformance InferredBargeInError()
{
  return Error._domain.getter();
}

uint64_t protocol witness for Error._code.getter in conformance InferredBargeInError()
{
  return Error._code.getter();
}

uint64_t protocol witness for Error._userInfo.getter in conformance InferredBargeInError()
{
  return Error._userInfo.getter();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance InferredBargeInError()
{
  return Error._getEmbeddedNSError()();
}

uint64_t AceServiceInvokerAsync.submitWithBargeInDetection<A>(_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  v4[2] = a3;
  self;
  if (swift_dynamicCastObjCClass() || (self, swift_dynamicCastObjCClass()))
  {
    uint64_t v9 = (void *)swift_task_alloc();
    v4[3] = v9;
    unint64_t v10 = type metadata accessor for SABaseCommand();
    *uint64_t v9 = v4;
    v9[1] = AceServiceInvokerAsync.submitWithBargeInDetection<A>(_:);
    uint64_t v11 = a1;
    uint64_t v12 = a2;
  }
  else
  {
    uint64_t v13 = (void *)swift_task_alloc();
    v4[5] = v13;
    *uint64_t v13 = v4;
    v13[1] = AceServiceInvokerAsync.submitWithBargeInDetection<A>(_:);
    uint64_t v11 = a1;
    uint64_t v12 = a2;
    unint64_t v10 = a3;
  }
  return AceServiceInvokerAsync.submit<A>(_:)(v11, v12, v10, a4);
}

uint64_t AceServiceInvokerAsync.submitWithBargeInDetection<A>(_:)()
{
  OUTLINED_FUNCTION_0_1();
  uint64_t v2 = *v1;
  *(void *)(v4 + 32) = v3;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v5 = *(uint64_t (**)(void))(v2 + 8);
    return v5();
  }
  else
  {
    return _swift_task_switch(AceServiceInvokerAsync.submitWithBargeInDetection<A>(_:), 0, 0);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char v13;
  void *v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  void *v21;
  uint64_t (*v22)(void);
  uint64_t v23;

  unint64_t v1 = *(void **)(v0 + 32);
  uint64_t v2 = swift_dynamicCastUnknownClass();
  if (!v2) {
    goto LABEL_17;
  }
  uint64_t v3 = v2;
  uint64_t v4 = [v1 encodedClassName];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    id v8 = 0;
  }
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (v8)
  {
    uint64_t v11 = *(void **)(v0 + 32);
    if (v6 == v9 && v8 == v10)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

LABEL_17:
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      id v17 = type metadata accessor for Logger();
      __swift_project_value_buffer(v17, (uint64_t)static Logger.siriPhone);
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v20 = 0;
        _os_log_impl(&dword_0, v18, v19, "#AceServiceInvokerAsync Received simulated response, throwing InferredBargeInError", v20, 2u);
        swift_slowDealloc();
      }
      uint64_t v21 = *(void **)(v0 + 32);

      lazy protocol witness table accessor for type InferredBargeInError and conformance InferredBargeInError();
      swift_allocError();
      swift_willThrow();

      uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
      return v22();
    }
    uint64_t v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    if (v13) {
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v14 = *(void **)(v0 + 32);
    swift_bridgeObjectRelease();
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v15(v3);
}

uint64_t AceServiceInvokerAsync.submitWithBargeInDetection<A>(_:)(uint64_t a1)
{
  OUTLINED_FUNCTION_0_1();
  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

unint64_t lazy protocol witness table accessor for type InferredBargeInError and conformance InferredBargeInError()
{
  unint64_t result = lazy protocol witness table cache variable for type InferredBargeInError and conformance InferredBargeInError;
  if (!lazy protocol witness table cache variable for type InferredBargeInError and conformance InferredBargeInError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InferredBargeInError and conformance InferredBargeInError);
  }
  return result;
}

ValueMetadata *type metadata accessor for InferredBargeInError()
{
  return &type metadata for InferredBargeInError;
}

uint64_t static CallControlEventState.__derived_enum_equals(_:_:)(__int16 a1, __int16 a2)
{
  if (a1 & 0x100 | a2 & 0x100) {
    return (unsigned __int16)(a1 & 0x100 & a2 & 0x100) >> 8;
  }
  if (a1)
  {
    if (a2) {
      return 1;
    }
  }
  else if ((a2 & 1) == 0)
  {
    return 1;
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CallControlEventState(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static CallControlEventState.__derived_enum_equals(_:_:)(*a1 | (unsigned __int16)(a1[1] << 8), *a2 | (unsigned __int16)(a2[1] << 8));
}

BOOL CallControlEventFailureReason.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of CallControlEventFailureReason.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  return v3 != 0;
}

uint64_t CallControlEventFailureReason.rawValue.getter()
{
  return 0x56495443415F4F4ELL;
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance CallControlEventFailureReason@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = CallControlEventFailureReason.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CallControlEventFailureReason(char *a1@<X8>)
{
  a1[15] = -18;
}

uint64_t SiriKitEventSending.sendCallControlEvent(action:target:state:)(char a1, char a2, __int16 a3)
{
  SiriKitEventSending.getTaskType(for:target:)(a1, a2);
  uint64_t v5 = SiriKitEventSending.getTaskName(for:)(a1);
  uint64_t v7 = v6;
  type metadata accessor for SiriKitEvent();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v5;
  *(void *)(v8 + 24) = v7;
  *(unsigned char *)(v8 + 32) = a3;
  *(unsigned char *)(v8 + 33) = HIBYTE(a3) & 1;
  SiriKitEvent.__allocating_init(stateType:taskType:statusReason:_:)();
  dispatch thunk of SiriKitEventSending.send(_:)();

  return swift_release();
}

uint64_t SiriKitEventSending.getTaskType(for:target:)(char a1, char a2)
{
  if (a1 == 11) {
    return 0;
  }
  if (PhoneCallControlAction.rawValue.getter(a1) == 0xD000000000000011 && v5 == 0x8000000000490ED0) {
    goto LABEL_5;
  }
  char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v6) {
    goto LABEL_10;
  }
  if (PhoneCallControlAction.rawValue.getter(a1) == 0xD000000000000010 && v7 == 0x8000000000490E50)
  {
LABEL_5:
    swift_bridgeObjectRelease();
LABEL_10:
    strcpy((char *)v14, "CallControl.");
    BYTE5(v14[1]) = 0;
    HIWORD(v14[1]) = -5120;
    v9._uint64_t countAndFlagsBits = PhoneCallControlAction.description.getter(a1);
    String.append(_:)(v9);
    goto LABEL_11;
  }
  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v8) {
    goto LABEL_10;
  }
  if (a2 == 5) {
    return 0;
  }
  PhoneCallControlNLIntent.Target.rawValue.getter(a2);
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v10 = StringProtocol.capitalized.getter();
  uint64_t v12 = v11;
  swift_bridgeObjectRelease();
  strcpy((char *)v14, "CallControl.");
  BYTE5(v14[1]) = 0;
  HIWORD(v14[1]) = -5120;
  v13._uint64_t countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
LABEL_11:
  swift_bridgeObjectRelease();
  return v14[0];
}

uint64_t SiriKitEventSending.getTaskName(for:)(char a1)
{
  uint64_t result = 28239;
  switch(a1)
  {
    case 1:
    case 2:
    case 5:
    case 7:
      uint64_t result = 6710863;
      break;
    case 8:
    case 9:
    case 10:
    case 11:
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t closure #1 in SiriKitEventSending.sendCallControlEvent(action:target:state:)(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  swift_bridgeObjectRetain();
  uint64_t result = dispatch thunk of SiriKitEvent.SiriKitEventBuilder.parameterName.setter();
  if ((a4 & 0x101) == 0) {
    return dispatch thunk of SiriKitEvent.SiriKitEventBuilder.statusReasonDescription.setter();
  }
  return result;
}

uint64_t sub_E2EE8()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 34, 7);
}

uint64_t partial apply for closure #1 in SiriKitEventSending.sendCallControlEvent(action:target:state:)(uint64_t a1)
{
  return closure #1 in SiriKitEventSending.sendCallControlEvent(action:target:state:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned __int8 *)(v1 + 32) | (unsigned __int16)(*(unsigned __int8 *)(v1 + 33) << 8));
}

unint64_t lazy protocol witness table accessor for type CallControlEventFailureReason and conformance CallControlEventFailureReason()
{
  unint64_t result = lazy protocol witness table cache variable for type CallControlEventFailureReason and conformance CallControlEventFailureReason;
  if (!lazy protocol witness table cache variable for type CallControlEventFailureReason and conformance CallControlEventFailureReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallControlEventFailureReason and conformance CallControlEventFailureReason);
  }
  return result;
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CallControlEventState(unsigned __int16 *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  unsigned int v2 = a2 + 0xFFFF;
  if ((a2 + 0xFFFF) <= 0xFFFEFFFF) {
    unsigned int v3 = 2;
  }
  else {
    unsigned int v3 = 4;
  }
  if (v2 < 0xFF0000) {
    unsigned int v3 = 1;
  }
  if (v2 >= 0x10000) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  switch(v4)
  {
    case 1:
      uint64_t v4 = *((unsigned __int8 *)a1 + 2);
      if (!*((unsigned char *)a1 + 2)) {
        return v4;
      }
      goto LABEL_17;
    case 2:
      uint64_t v4 = a1[1];
      if (!a1[1]) {
        return v4;
      }
      goto LABEL_17;
    case 3:
      __break(1u);
      JUMPOUT(0xE3030);
    case 4:
      uint64_t v4 = *(unsigned int *)(a1 + 1);
      if (v4) {
LABEL_17:
      }
        uint64_t v4 = (*a1 | (v4 << 16)) - 0xFFFF;
      break;
    default:
      return v4;
  }
  return v4;
}

uint64_t storeEnumTagSinglePayload for CallControlEventState(uint64_t result, int a2, int a3)
{
  unsigned int v3 = a3 + 0xFFFF;
  if ((a3 + 0xFFFF) <= 0xFFFEFFFF) {
    int v4 = 2;
  }
  else {
    int v4 = 4;
  }
  if (v3 < 0xFF0000) {
    int v4 = 1;
  }
  if (v3 >= 0x10000) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2)
  {
    unsigned int v7 = ((a2 - 1) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 1;
    switch(v6)
    {
      case 1:
        *(unsigned char *)(result + 2) = v7;
        return result;
      case 2:
        *(_WORD *)(result + 2) = v7;
        return result;
      case 3:
        goto LABEL_21;
      case 4:
        *(_DWORD *)(result + 2) = v7;
        return result;
      default:
        return result;
    }
  }
  switch(v6)
  {
    case 1:
      *(unsigned char *)(result + 2) = 0;
      break;
    case 2:
      *(_WORD *)(result + 2) = 0;
      break;
    case 3:
LABEL_21:
      __break(1u);
      JUMPOUT(0xE3100);
    case 4:
      *(_DWORD *)(result + 2) = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t getEnumTag for CallControlEventState(unsigned __int8 *a1)
{
  if (a1[1]) {
    return (*a1 | (a1[1] << 8)) - 255;
  }
  else {
    return 0;
  }
}

unsigned char *destructiveInjectEnumTag for CallControlEventState(unsigned char *result, int a2)
{
  if (a2)
  {
    *unint64_t result = a2 - 1;
    unsigned int v2 = ((a2 - 1) >> 8) + 1;
  }
  else
  {
    LOBYTE(v2) = 0;
  }
  result[1] = v2;
  return result;
}

ValueMetadata *type metadata accessor for CallControlEventState()
{
  return &type metadata for CallControlEventState;
}

unsigned char *storeEnumTagSinglePayload for CallControlEventFailureReason(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0xE3218);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for CallControlEventFailureReason()
{
  return &type metadata for CallControlEventFailureReason;
}

id static StartAudioCallIntentConversion.convertToIntent(phoneCallNLIntent:app:sharedGlobals:previousIntent:previousIntentResponse:groupResolver:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v6 = (void *)OUTLINED_FUNCTION_0_12(a1, a2, a3, a4, a5, a6);

  return specialized static StartAudioCallIntentConversion.convertToIntent(phoneCallNLIntent:app:sharedGlobals:previousIntent:previousIntentResponse:groupResolver:)(v6, v7, v8, v9, v10, v11, v12, v13);
}

id specialized static StartAudioCallIntentConversion.convertToIntent(phoneCallNLIntent:app:sharedGlobals:previousIntent:previousIntentResponse:groupResolver:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v40)(void *__return_ptr, void *);
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t);
  uint64_t v45;
  void *v46;
  id v47;
  id v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  id v54;
  id v55;
  NSObject *v56;
  os_log_type_t v57;
  int v58;
  BOOL v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  id v63;
  id v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  os_log_t v74;
  id v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  id v82;
  NSObject *v83;
  os_log_type_t v84;
  uint8_t *v85;
  void *v86;
  id v87;
  uint64_t v88;
  id v90;
  uint64_t v91;
  uint64_t v92;
  os_log_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  uint64_t v108;
  uint64_t v109[3];
  void v110[3];
  uint64_t v111;
  uint64_t v112;
  void *v113;
  id v114;
  uint64_t v115[3];

  uint64_t v105 = a8;
  uint64_t v106 = a2;
  v107 = a4;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallDestinationType>);
  OUTLINED_FUNCTION_1();
  uint64_t v14 = v13;
  __chkstk_darwin(v15);
  id v17 = (char *)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_1();
  uint64_t v19 = v18;
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v90 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, a6, a7);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if (PhoneCallNLIntent.hasAnyConfirmation()())
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.siriPhone);
    id v24 = v107;
    id v25 = v107;
    Class v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      v115[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136315138;
      uint64_t v100 = v19;
      v110[0] = v107;
      id v29 = v25;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INStartAudioCallIntent?);
      uint64_t v30 = String.init<A>(describing:)();
      uint64_t v101 = v22;
      v110[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, v115);
      uint64_t v19 = v100;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      id v24 = v107;
      uint64_t v22 = v101;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v26, v27, "#StartAudioCallIntentConversion is confirmation, returning previousIntent: %s.", v28, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {
    }
    uint64_t v41 = v25;
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v103 = v14;
    uint64_t v32 = type metadata accessor for Logger();
    uint64_t v104 = __swift_project_value_buffer(v32, (uint64_t)static Logger.siriPhone);
    unint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl(&dword_0, v33, v34, "#StartAudioCallIntentConversion called with NLv4IntentOnly", v35, 2u);
      OUTLINED_FUNCTION_6();
    }

    uint64_t v36 = a3[3];
    uint64_t v37 = a3[4];
    __swift_project_boxed_opaque_existential_1(a3, v36);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v37 + 8))(v115, v36, v37);
    __swift_project_boxed_opaque_existential_1(a3, a3[3]);
    uint64_t v38 = OUTLINED_FUNCTION_3_35();
    uint64_t v102 = v39(v38);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
    type metadata accessor for INCallDestinationType(0);
    Transformer.init(transform:)();
    v113 = _swiftEmptyArrayStorage;
    id v40 = (void (*)(void *__return_ptr, void *))Transformer.transform.getter();
    v40(v110, a1);
    uint64_t v100 = v19;
    uint64_t v99 = a7;
    swift_release();
    uint64_t v42 = v110[0];
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    uint64_t v43 = OUTLINED_FUNCTION_3_35();
    uint64_t v45 = v44(v43);
    v113 = (void *)v45;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    swift_bridgeObjectRetain();
    HIDWORD(v98) = PhoneCallNLIntent.isEmergencyContactCall()();
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    uint64_t v46 = PhoneCallNLIntent.getPersons()();
    uint64_t v47 = objc_allocWithZone((Class)INStartAudioCallIntent);
    id v48 = @nonobjc INStartAudioCallIntent.init(destinationType:contacts:)(v42, (uint64_t)v46);
    uint64_t v49 = v106;
    uint64_t v54 = specialized static NLv4IntentConversion.setIntentMetadata(for:sharedGlobals:app:previousIntent:)((int)v48, (int)a3, v106, (int)v107, v50, v51, v52, v53, v90, v91, v92, (uint64_t)v93, v94, v95, (uint64_t)v96, (uint64_t)v97, v98, v99, v100,
            (uint64_t)v101,
            v102,
            v103,
            v104,
            v105);

    v114 = v54;
    outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v110);
    uint64_t v55 = v54;
    swift_retain_n();
    swift_bridgeObjectRetain();
    v107 = v55;
    uint64_t v56 = Logger.logObject.getter();
    uint64_t v57 = static os_log_type_t.debug.getter();
    uint64_t v58 = v57;
    char v59 = os_log_type_enabled(v56, v57);
    uint64_t v101 = v22;
    if (v59)
    {
      uint64_t v60 = swift_slowAlloc();
      unint64_t v61 = (void *)swift_slowAlloc();
      os_log_type_t v92 = v45;
      os_log_type_t v97 = v61;
      uint64_t v62 = swift_slowAlloc();
      uint64_t v95 = v62;
      *(_DWORD *)uint64_t v60 = 138413058;
      HIDWORD(v94) = v58;
      unint64_t v93 = v56;
      uint64_t v63 = v107;
      uint64_t v108 = (uint64_t)v107;
      v109[0] = v62;
      uint64_t v96 = v109;
      uint64_t v64 = v107;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v97 = v63;
      uint64_t v49 = v106;

      *(_WORD *)(v60 + 12) = 2080;
      uint64_t v65 = dispatch thunk of App.debugDescription.getter();
      uint64_t v108 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v66, v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v60 + 22) = 2080;
      uint64_t v91 = v60 + 24;
      uint64_t v68 = v111;
      uint64_t v67 = v112;
      __swift_project_boxed_opaque_existential_1(v110, v111);
      (*(void (**)(uint64_t, uint64_t))(v67 + 24))(v68, v67);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriPhoneContact);
      os_log_type_t v69 = Array.description.getter();
      uint64_t v71 = v70;
      swift_bridgeObjectRelease();
      uint64_t v108 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v71, v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v110);
      *(_WORD *)(v60 + 32) = 2080;
      type metadata accessor for ContactQuery();
      uint64_t v72 = Array.debugDescription.getter();
      uint64_t v108 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v73, v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      os_log_type_t v74 = v93;
      _os_log_impl(&dword_0, v93, BYTE4(v94), "#StartAudioCallIntentConversion starts with intent:%@ resolvedApp:%s phoneCallNLIntent=%s contactQueries=%s", (uint8_t *)v60, 0x2Au);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      uint64_t v22 = v101;
      OUTLINED_FUNCTION_6();
    }
    else
    {
      swift_release_n();
      uint64_t v75 = v107;

      __swift_destroy_boxed_opaque_existential_1((uint64_t)v110);
      swift_bridgeObjectRelease_n();
    }
    a7 = v99;
    swift_beginAccess();
    uint64_t v76 = (uint64_t)v113;
    uint64_t v77 = v107;
    specialized static NLv4IntentConversion.updateSiriKitIntent(siriKitIntent:contactQueries:hasEmergencyContact:app:nlIntent:sharedGlobals:contactGroupResolver:)((uint64_t)v77, v76, BYTE4(v98) & 1, v49, a1, a3, (uint64_t)v22, a7, v105);

    swift_bridgeObjectRelease();
    uint64_t v78 = outlined bridged method (pb) of @objc INStartVideoCallIntent.contacts.getter(v77);
    uint64_t v79 = one-time initialization token for instance;
    uint64_t v80 = v77;
    if (v79 != -1) {
      swift_once();
    }
    os_log_type_t v81 = static EligibleAppFinder.instance;
    swift_retain();
    specialized static AppSelectionSignalsGatheringHelper.triggerSignalCollection(sharedGlobals:contacts:phoneCallNLIntent:smartAppSelection:eligibleAppsFinder:skIntent:)(a3, v78, a1, 0, v81);
    swift_release();

    swift_bridgeObjectRelease();
    uint64_t v82 = v80;
    uint64_t v83 = Logger.logObject.getter();
    uint64_t v84 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v83, v84))
    {
      uint64_t v85 = (uint8_t *)swift_slowAlloc();
      uint64_t v86 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v85 = 138412290;
      v109[0] = (uint64_t)v82;
      uint64_t v87 = v82;
      a7 = v99;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      char *v86 = v107;

      _os_log_impl(&dword_0, v83, v84, "#StartAudioCallIntentConversion ends with %@", v85, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {
    }
    uint64_t v19 = v100;
    uint64_t v88 = v103;

    swift_release();
    (*(void (**)(char *, uint64_t))(v88 + 8))(v17, v12);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v115);
    swift_beginAccess();
    id v24 = v114;
    uint64_t v22 = v101;
  }
  (*(void (**)(char *, uint64_t))(v19 + 8))(v22, a7);
  return v24;
}

ValueMetadata *type metadata accessor for StartAudioCallIntentConversion()
{
  return &type metadata for StartAudioCallIntentConversion;
}

uint64_t OUTLINED_FUNCTION_3_35()
{
  return v0;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay27PhoneCallFlowDelegatePlugin07ReadingE6RecordVG_AF0deJ0Cs5NeverOTg504_s27defg17Plugin024Continuei74VoicemailC0C14windowCatItems33_2E70552A43DFB68126CD1EDAC648BD5CLLSayAA0aB6J65CGvgAgA0gbR0Vcfu_33_9f030fc4a5bb868c3ec28069513052a1AjGTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v4 = a1 + 32;
    do
    {
      v4 += 16;
      swift_retain();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v2;
    }
    while (v2);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

void ContinueReadingVoicemailFlow.state.didset()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.siriPhone);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315394;
    uint64_t v5 = *(void *)(v0 + direct field offset for ContinueReadingVoicemailFlow.logPrefix);
    uint64_t v6 = *(void *)(v0 + direct field offset for ContinueReadingVoicemailFlow.logPrefix + 8);
    uint64_t v8 = *(void *)(v0 + direct field offset for ContinueReadingVoicemailFlow.logPrefix + 16);
    uint64_t v7 = *(void *)(v0 + direct field offset for ContinueReadingVoicemailFlow.logPrefix + 24);
    uint64_t v13 = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v5, v6, v8, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2080;
    unsigned __int8 v9 = *(unsigned char *)(v0 + 16);
    swift_release();
    unint64_t v10 = ContinueReadingVoicemailState.description.getter(v9);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v2, v3, "%s set state to %s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
}

uint64_t PhoneCallControlNLIntent.verb.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

void ContinueReadingVoicemailFlow.state.setter(char a1)
{
  *(unsigned char *)(v1 + 16) = a1;
  ContinueReadingVoicemailFlow.state.didset();
}

void *ContinueReadingVoicemailFlow.windowCatItems.getter()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay27PhoneCallFlowDelegatePlugin07ReadingE6RecordVG_AF0deJ0Cs5NeverOTg504_s27defg17Plugin024Continuei74VoicemailC0C14windowCatItems33_2E70552A43DFB68126CD1EDAC648BD5CLLSayAA0aB6J65CGvgAgA0gbR0Vcfu_33_9f030fc4a5bb868c3ec28069513052a1AjGTf3nnnpk_nTf1cn_n(v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t ContinueReadingVoicemailFlow.__allocating_init(app:intent:intentResponse:phoneSearchCallHistoryIntent:isSingleVoicemailRequest:isRepeatRequest:sharedGlobals:windowItems:windowParam:totalItemCount:playVoicemailCommands:voiceMailPositionString:searchCallHistorySharedGlobals:)(uint64_t a1, void *a2, void *a3, uint64_t a4, char a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14)
{
  uint64_t v17 = swift_allocObject();
  ContinueReadingVoicemailFlow.init(app:intent:intentResponse:phoneSearchCallHistoryIntent:isSingleVoicemailRequest:isRepeatRequest:sharedGlobals:windowItems:windowParam:totalItemCount:playVoicemailCommands:voiceMailPositionString:searchCallHistorySharedGlobals:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11 & 1, a12, a13, a14);
  return v17;
}

uint64_t ContinueReadingVoicemailFlow.init(app:intent:intentResponse:phoneSearchCallHistoryIntent:isSingleVoicemailRequest:isRepeatRequest:sharedGlobals:windowItems:windowParam:totalItemCount:playVoicemailCommands:voiceMailPositionString:searchCallHistorySharedGlobals:)(uint64_t a1, void *a2, void *a3, uint64_t a4, char a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14)
{
  uint64_t v15 = v14;
  *(unsigned char *)(v15 + direct field offset for ContinueReadingVoicemailFlow.isRepeatRequest) = 0;
  uint64_t v22 = (uint64_t *)(v15 + direct field offset for ContinueReadingVoicemailFlow.logPrefix);
  *uint64_t v22 = type metadata accessor for ContinueReadingVoicemailFlow();
  v22[1] = (uint64_t)&outlined read-only object #0 of ContinueReadingVoicemailFlow.init(app:intent:intentResponse:phoneSearchCallHistoryIntent:isSingleVoicemailRequest:isRepeatRequest:sharedGlobals:windowItems:windowParam:totalItemCount:playVoicemailCommands:voiceMailPositionString:searchCallHistorySharedGlobals:);
  v22[2] = 0;
  v22[3] = 0;
  uint64_t v42 = a2;
  *(void *)(v15 + 32) = a2;
  *(void *)(v15 + 40) = a3;
  *(void *)(v15 + 88) = a1;
  *(void *)(v15 + 96) = a4;
  *(unsigned char *)(v15 + direct field offset for ContinueReadingVoicemailFlow.isSingleVoicemailRequest) = a5;
  outlined init with copy of SharedGlobalsProviding(a7, v15 + 48);
  type metadata accessor for WindowedPaginationParameters();
  OUTLINED_FUNCTION_12();
  v23();
  *(void *)(v15 + 24) = a8;
  uint64_t v24 = v15 + direct field offset for ContinueReadingVoicemailFlow.totalItemCount;
  *(void *)uint64_t v24 = a10;
  *(unsigned char *)(v24 + 8) = a11 & 1;
  *(void *)(v15 + 304) = a12;
  *(unsigned char *)(v15 + 312) = a13;
  outlined init with copy of SearchCallHistorySharedGlobals(a14, v15 + 104);
  if (a6)
  {
    outlined destroy of SearchCallHistorySharedGlobals(a14);
    OUTLINED_FUNCTION_26_0();
    v25();
    __swift_destroy_boxed_opaque_existential_1(a7);
    *(unsigned char *)(v15 + 16) = 7;
    *(unsigned char *)(v15 + direct field offset for ContinueReadingVoicemailFlow.isLeadingSavedVoiceMailPostPrompt) = 0;
  }
  else
  {
    outlined init with copy of SharedGlobalsProviding(a7, (uint64_t)v46);
    uint64_t v44 = a7;
    if (a5)
    {
      uint64_t v26 = v47;
      uint64_t v27 = v48;
      __swift_project_boxed_opaque_existential_1(v46, v47);
      uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t))(v27 + 56);
      swift_retain();
      id v29 = v42;
      id v30 = v42;
      unint64_t v31 = a3;
      id v32 = a3;
      swift_retain();
      uint64_t v33 = v28(v26, v27);
      char v34 = (*(uint64_t (**)(uint64_t))(*(void *)v33 + 248))(v33);
      swift_release();
    }
    else
    {
      swift_retain();
      id v29 = a2;
      id v35 = a2;
      unint64_t v31 = a3;
      id v36 = a3;
      swift_retain();
      char v34 = 0;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
    if (v34 & 1 | ((WindowedPaginationParameters.isFirstWindow.getter() & 1) == 0)) {
      char v37 = 7;
    }
    else {
      char v37 = 5;
    }
    *(unsigned char *)(v15 + 16) = v37;
    char v38 = WindowedPaginationParameters.isFirstWindow.getter();
    char v39 = static SearchCallHistoryHelper.isLeadingSavedVoiceMail(isFirstPage:intentResponse:intent:)(v38 & 1, (uint64_t)v31, v29);
    swift_release();

    swift_release();
    outlined destroy of SearchCallHistorySharedGlobals(a14);
    OUTLINED_FUNCTION_26_0();
    v40();
    __swift_destroy_boxed_opaque_existential_1(v44);
    *(unsigned char *)(v15 + direct field offset for ContinueReadingVoicemailFlow.isLeadingSavedVoiceMailPostPrompt) = v39 & 1;
  }
  return v15;
}

uint64_t type metadata accessor for ContinueReadingVoicemailFlow()
{
  return __swift_instantiateGenericMetadata();
}

void ContinueReadingVoicemailFlow.__allocating_init(state:app:intent:intentResponse:phoneSearchCallHistoryIntent:isSingleVoicemailRequest:isRepeatRequest:sharedGlobals:windowItems:windowParam:totalItemCount:playVoicemailCommands:voiceMailPositionString:searchCallHistorySharedGlobals:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27)
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v29 = v28;
  unsigned int v53 = v30;
  unsigned int v52 = v31;
  uint64_t v51 = v32;
  uint64_t v50 = v33;
  uint64_t v49 = v34;
  uint64_t v48 = v35;
  char v54 = v36;
  uint64_t v37 = type metadata accessor for WindowedPaginationParameters();
  OUTLINED_FUNCTION_0_0();
  uint64_t v39 = v38;
  __chkstk_darwin(v40);
  OUTLINED_FUNCTION_4();
  uint64_t v43 = v42 - v41;
  outlined init with copy of SharedGlobalsProviding(v29, (uint64_t)v56);
  OUTLINED_FUNCTION_12();
  v44();
  outlined init with copy of SearchCallHistorySharedGlobals(a27, (uint64_t)v55);
  char v46 = a24 & 1;
  uint64_t v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, unsigned char *, uint64_t, uint64_t, uint64_t, char, uint64_t, char, unsigned char *))(v27 + 272))(v48, v49, v50, v51, v52, v53, v56, a21, v43, a23, v46, a25, a26, v55);
  outlined destroy of SearchCallHistorySharedGlobals(a27);
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(a22, v37);
  __swift_destroy_boxed_opaque_existential_1(v29);
  *(unsigned char *)(v45 + 16) = v54;
  OUTLINED_FUNCTION_26_1();
}

uint64_t ContinueReadingVoicemailFlow.exitValue.getter()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 16);
  if ((v1 - 5) >= 5)
  {
    switch(v1)
    {
      case 1:
        uint64_t result = static WindowingAction.cancelled()((char *)&type metadata for () + 8);
        break;
      case 2:
      case 4:
        uint64_t result = static WindowingAction.complete(_:)();
        break;
      case 3:
        uint64_t result = static WindowingAction.repeatWindow()((char *)&type metadata for () + 8);
        break;
      default:
        uint64_t result = static WindowingAction.proceedWithNextWindow()((char *)&type metadata for () + 8);
        break;
    }
  }
  else
  {
    type metadata accessor for ContinueReadingVoicemailFlow.ContinuationPromptFlowError();
    swift_getWitnessTable();
    swift_allocError();
    *uint64_t v2 = v1;
    static WindowingAction.error(_:handled:)();
    return swift_errorRelease();
  }
  return result;
}

void ContinueReadingVoicemailFlow.on(input:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v118 = v0;
  uint64_t v2 = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CommonDirectAction?);
  uint64_t v4 = OUTLINED_FUNCTION_11_0(v3);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_5_8();
  uint64_t v109 = v5;
  OUTLINED_FUNCTION_18_0();
  uint64_t v7 = __chkstk_darwin(v6);
  unsigned __int8 v9 = (char *)&v103 - v8;
  __chkstk_darwin(v7);
  v115 = (uint64_t *)((char *)&v103 - v10);
  OUTLINED_FUNCTION_36();
  os_log_t v114 = (os_log_t)type metadata accessor for Parse.DirectInvocation();
  OUTLINED_FUNCTION_0_0();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_3_1();
  v113 = v14;
  OUTLINED_FUNCTION_36();
  uint64_t v15 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v17 = v16;
  __chkstk_darwin(v18);
  OUTLINED_FUNCTION_5_8();
  uint64_t v111 = v19;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v103 - v21;
  uint64_t v117 = type metadata accessor for Input();
  OUTLINED_FUNCTION_0_0();
  uint64_t v24 = v23;
  __chkstk_darwin(v25);
  OUTLINED_FUNCTION_4();
  uint64_t v28 = v27 - v26;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  uint64_t v30 = __swift_project_value_buffer(v29, (uint64_t)static Logger.siriPhone);
  uint64_t v116 = v2;
  OUTLINED_FUNCTION_12();
  v31();
  swift_retain();
  uint64_t v112 = v30;
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.debug.getter();
  int v110 = v33;
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = OUTLINED_FUNCTION_11_7();
    uint64_t v108 = v17;
    uint64_t v35 = v34;
    uint64_t v105 = swift_slowAlloc();
    *(void *)&long long v120 = v105;
    *(_DWORD *)uint64_t v35 = 136315394;
    uint64_t v103 = v35 + 4;
    os_log_t v104 = v32;
    uint64_t v36 = v12;
    uint64_t v37 = v9;
    uint64_t v106 = v15;
    uint64_t v38 = *(void *)(v118 + direct field offset for ContinueReadingVoicemailFlow.logPrefix);
    uint64_t v39 = *(void *)(v118 + direct field offset for ContinueReadingVoicemailFlow.logPrefix + 8);
    v107 = v22;
    uint64_t v41 = *(void *)(v118 + direct field offset for ContinueReadingVoicemailFlow.logPrefix + 16);
    uint64_t v40 = *(void *)(v118 + direct field offset for ContinueReadingVoicemailFlow.logPrefix + 24);
    uint64_t v122 = 0;
    unint64_t v123 = 0xE000000000000000;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v42 = v38;
    unsigned __int8 v9 = v37;
    uint64_t v12 = v36;
    DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v42, v39, v41, v40);
    swift_bridgeObjectRelease();
    uint64_t v15 = v106;
    swift_bridgeObjectRelease();
    uint64_t v122 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v122, v123, (uint64_t *)&v120);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v35 + 12) = 2080;
    lazy protocol witness table accessor for type Input and conformance Input((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, (void (*)(uint64_t))&type metadata accessor for Input);
    uint64_t v43 = v117;
    uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v122 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, (uint64_t *)&v120);
    uint64_t v22 = v107;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v28, v43);
    os_log_t v46 = v104;
    _os_log_impl(&dword_0, v104, (os_log_type_t)v110, "%s on is called with input: %s.", (uint8_t *)v35, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    uint64_t v17 = v108;
    OUTLINED_FUNCTION_6();
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v28, v117);
  }
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v17 + 88))(v22, v15) == enum case for Parse.directInvocation(_:))
  {
    (*(void (**)(char *, uint64_t))(v17 + 96))(v22, v15);
    uint64_t v48 = (uint64_t)v113;
    os_log_t v47 = v114;
    (*(void (**)(char *, char *, os_log_t))(v12 + 32))(v113, v22, v114);
    uint64_t v49 = v115;
    static CommonDirectAction.from(_:)(v48, v115);
    outlined init with copy of CommonDirectAction?((uint64_t)v49, (uint64_t)v9);
    uint64_t v50 = type metadata accessor for CommonDirectAction();
    if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v50) == 1)
    {
LABEL_8:
      uint64_t v117 = v12;
      swift_retain();
      uint64_t v51 = (void *)Logger.logObject.getter();
      os_log_type_t v52 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_4_27(v52))
      {
        OUTLINED_FUNCTION_5_22();
        uint64_t v53 = OUTLINED_FUNCTION_14_0();
        uint64_t v116 = v9;
        OUTLINED_FUNCTION_43_6(v53, 4.8149e-34);
        uint64_t v112 = v54;
        OUTLINED_FUNCTION_17_11();
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_9_26();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v122, v123, (uint64_t *)&v120);
        OUTLINED_FUNCTION_33_5(v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_19_10(&dword_0, v56, v57, "%s on input is an unknown action.");
        swift_arrayDestroy();
        unsigned __int8 v9 = v116;
        OUTLINED_FUNCTION_6();
        OUTLINED_FUNCTION_6();
      }
      else
      {
        swift_release();
      }

      outlined destroy of FlowActivity?((uint64_t)v115, &demangling cache variable for type metadata for CommonDirectAction?);
      OUTLINED_FUNCTION_11();
      v87();
      outlined destroy of FlowActivity?((uint64_t)v9, &demangling cache variable for type metadata for CommonDirectAction?);
      goto LABEL_39;
    }
    uint64_t v77 = v109;
    outlined init with copy of CommonDirectAction?((uint64_t)v9, v109);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 10:
        char v79 = 2;
        break;
      case 9:
        *(unsigned char *)(v118 + 16) = 0;
        goto LABEL_35;
      case 8:
        char v79 = 3;
        break;
      default:
        outlined destroy of CommonDirectAction(v77);
        goto LABEL_8;
    }
    *(unsigned char *)(v118 + 16) = v79;
LABEL_35:
    ContinueReadingVoicemailFlow.state.didset();
    outlined destroy of FlowActivity?((uint64_t)v115, &demangling cache variable for type metadata for CommonDirectAction?);
    (*(void (**)(uint64_t, os_log_t))(v12 + 8))(v48, v47);
    outlined destroy of FlowActivity?((uint64_t)v9, &demangling cache variable for type metadata for CommonDirectAction?);
    goto LABEL_39;
  }
  uint64_t v58 = v22;
  uint64_t v59 = *(void *)(v118 + 72);
  uint64_t v60 = *(void *)(v118 + 80);
  __swift_project_boxed_opaque_existential_1((void *)(v118 + 48), v59);
  uint64_t v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v60 + 72))(v59, v60);
  uint64_t v62 = v111;
  Input.parse.getter();
  (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v61 + 192))(&v120, v62);
  swift_release();
  uint64_t v63 = *(void (**)(void))(v17 + 8);
  uint64_t v64 = v15;
  OUTLINED_FUNCTION_26_0();
  v63();
  if (!v121)
  {
    outlined destroy of FlowActivity?((uint64_t)&v120, &demangling cache variable for type metadata for PhoneCallNLIntent?);
    goto LABEL_20;
  }
  outlined init with take of AppSelectionSignalComponent(&v120, (uint64_t)&v122);
  OUTLINED_FUNCTION_4_34(&v122);
  if (!PhoneCallNLIntent.isNextAfterPlayingVoiceMail()())
  {
    OUTLINED_FUNCTION_4_34(&v122);
    Swift::Bool v88 = PhoneCallNLIntent.hasWantedToRepeat()();
    outlined init with copy of SharedGlobalsProviding((uint64_t)&v122, (uint64_t)&v120);
    if (v88)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v120);
LABEL_29:
      char v90 = 3;
LABEL_30:
      *(unsigned char *)(v118 + 16) = v90;
      goto LABEL_31;
    }
    OUTLINED_FUNCTION_4_34(&v120);
    Swift::Bool v89 = PhoneCallNLIntent.isRepeatAfterPlayingVoiceMail()();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v120);
    if (v89) {
      goto LABEL_29;
    }
    OUTLINED_FUNCTION_4_34(&v122);
    if (PhoneCallNLIntent.isVoiceMailCallOrCallBack()())
    {
      char v90 = 2;
      goto LABEL_30;
    }
    swift_retain();
    uint64_t v91 = Logger.logObject.getter();
    os_log_type_t v92 = static os_log_type_t.error.getter();
    int v93 = v92;
    if (os_log_type_enabled(v91, v92))
    {
      LODWORD(v117) = v93;
      uint64_t v94 = (uint64_t *)OUTLINED_FUNCTION_5_22();
      uint64_t v95 = OUTLINED_FUNCTION_14_0();
      uint64_t v116 = (char *)v95;
      os_log_t v114 = v91;
      v115 = v94;
      *(_DWORD *)uint64_t v94 = 136315138;
      uint64_t v119 = v95;
      *(void *)&long long v120 = 0;
      v113 = (char *)v94 + 4;
      OUTLINED_FUNCTION_38_6();
      uint64_t v97 = *v96;
      uint64_t v98 = v96[1];
      uint64_t v99 = v96[2];
      uint64_t v100 = v96[3];
      *((void *)&v120 + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v97, v98, v99, v100);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v101 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v120, *((unint64_t *)&v120 + 1), &v119);
      OUTLINED_FUNCTION_39_5(v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      os_log_t v102 = v114;
      _os_log_impl(&dword_0, v114, (os_log_type_t)v117, "%s on input is an unknown NL intent.", (uint8_t *)v115, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {

      swift_release();
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v122);
LABEL_20:
    OUTLINED_FUNCTION_26_0();
    v63();
    swift_retain();
    uint64_t v80 = (void *)Logger.logObject.getter();
    os_log_type_t v81 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_4_27(v81))
    {
      OUTLINED_FUNCTION_5_22();
      uint64_t v82 = OUTLINED_FUNCTION_14_0();
      OUTLINED_FUNCTION_43_6(v82, 4.8149e-34);
      uint64_t v117 = v83;
      OUTLINED_FUNCTION_17_11();
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_9_26();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v84 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v122, v123, (uint64_t *)&v120);
      OUTLINED_FUNCTION_33_5(v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_19_10(&dword_0, v85, v86, "%s on input can't be handled.");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {

      swift_release();
    }
    goto LABEL_39;
  }
  if ((WindowedPaginationParameters.isLastWindow.getter() & 1) == 0)
  {
    *(unsigned char *)(v118 + 16) = 0;
LABEL_31:
    ContinueReadingVoicemailFlow.state.didset();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v122);
    OUTLINED_FUNCTION_26_0();
    v63();
    goto LABEL_39;
  }
  swift_retain();
  uint64_t v65 = Logger.logObject.getter();
  os_log_type_t v66 = static os_log_type_t.error.getter();
  int v67 = v66;
  if (os_log_type_enabled(v65, v66))
  {
    uint64_t v68 = OUTLINED_FUNCTION_5_22();
    LODWORD(v117) = v67;
    uint64_t v69 = v68;
    uint64_t v70 = OUTLINED_FUNCTION_14_0();
    uint64_t v116 = (char *)v70;
    v115 = (uint64_t *)v69;
    *(_DWORD *)uint64_t v69 = 136315138;
    uint64_t v119 = v70;
    *(void *)&long long v120 = 0;
    os_log_t v114 = (os_log_t)(v69 + 4);
    OUTLINED_FUNCTION_38_6();
    uint64_t v72 = *v71;
    uint64_t v73 = v71[1];
    uint64_t v74 = v71[2];
    uint64_t v75 = v71[3];
    *((void *)&v120 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v72, v73, v74, v75);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v120, *((unint64_t *)&v120 + 1), &v119);
    OUTLINED_FUNCTION_39_5(v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v65, (os_log_type_t)v117, "%s current page is already the last page, ignore next request.", (uint8_t *)v115, 0xCu);
    OUTLINED_FUNCTION_41_3();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {

    swift_release();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v122);
  ((void (*)(char *, uint64_t))v63)(v58, v64);
LABEL_39:
  OUTLINED_FUNCTION_26_1();
}

uint64_t ContinueReadingVoicemailFlow.execute(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v7 = OUTLINED_FUNCTION_11_0(v6);
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_8_7();
  uint64_t v8 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload(v3, 1, 1, v8);
  unsigned __int8 v9 = (void *)swift_allocObject();
  void v9[2] = 0;
  v9[3] = 0;
  v9[4] = a1;
  uint64_t v9[5] = a2;
  v9[6] = v2;
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v3, (uint64_t)&async function pointer to partial apply for closure #1 in ContinueReadingVoicemailFlow.execute(completion:), (uint64_t)v9);
  return swift_release();
}

uint64_t closure #1 in ContinueReadingVoicemailFlow.execute(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _OWORD v6[2] = a4;
  v6[3] = a5;
  uint64_t v8 = type metadata accessor for ExecuteResponse();
  void v6[4] = v8;
  v6[5] = *(void *)(v8 - 8);
  uint64_t v9 = swift_task_alloc();
  v6[6] = v9;
  uint64_t v12 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)a6 + 304) + **(int **)(*(void *)a6 + 304));
  uint64_t v10 = (void *)swift_task_alloc();
  v6[7] = v10;
  *uint64_t v10 = v6;
  v10[1] = closure #1 in ContinueReadingVoicemailFlow.execute(completion:);
  return v12(v9);
}

uint64_t closure #1 in ContinueReadingVoicemailFlow.execute(completion:)()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  return _swift_task_switch(closure #1 in ContinueReadingVoicemailFlow.execute(completion:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 32);
  (*(void (**)(uint64_t))(v0 + 16))(v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v4();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  if (__swift_getEnumTagSinglePayload(a1, 1, v6) == 1)
  {
    outlined destroy of FlowActivity?(a1, &demangling cache variable for type metadata for TaskPriority?);
  }
  else
  {
    TaskPriority.rawValue.getter();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_11();
    v7();
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t ContinueReadingVoicemailFlow.execute()()
{
  OUTLINED_FUNCTION_1_0();
  v1[167] = v0;
  v1[166] = v2;
  uint64_t v3 = type metadata accessor for WindowedPaginationParameters();
  v1[168] = v3;
  v1[169] = *(void *)(v3 - 8);
  v1[170] = swift_task_alloc();
  return _swift_task_switch(ContinueReadingVoicemailFlow.execute(), 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  void (*v34)(void);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  long long *v38;
  uint64_t v39;
  id v40;
  void *v41;
  uint64_t v42;
  char v43;
  void *v44;
  void *v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  void (*v53)(void);
  uint64_t v54;
  uint64_t (*v55)(void);
  NSObject *v57;
  os_log_type_t v58;
  BOOL v59;
  uint64_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t);
  void *v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  BOOL v92;
  uint64_t v93;
  uint8_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  id v102;
  id v103;
  uint64_t *v104;
  uint64_t v105;
  void *v106;
  long long *v107;
  uint64_t v108;
  char loga;
  os_log_t log;
  uint64_t type;
  os_log_type_t typea;
  uint8_t *buf;
  uint8_t *bufa;
  uint8_t *bufb;
  uint64_t *v116;
  uint64_t *v117;
  id v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  void *v124;
  uint64_t v125;

  v124 = v0;
  uint64_t v1 = v0;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.siriPhone);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.debug.getter();
  uint64_t v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = v0[167];
  if (v5)
  {
    uint64_t v7 = OUTLINED_FUNCTION_11_7();
    uint64_t v121 = swift_slowAlloc();
    uint64_t v122 = 0;
    *(_DWORD *)uint64_t v7 = 136315394;
    uint64_t v8 = v0;
    uint64_t v10 = *(void *)(v6 + direct field offset for ContinueReadingVoicemailFlow.logPrefix);
    uint64_t v9 = *(void *)(v6 + direct field offset for ContinueReadingVoicemailFlow.logPrefix + 8);
    uint64_t v12 = *(void *)(v6 + direct field offset for ContinueReadingVoicemailFlow.logPrefix + 16);
    uint64_t v11 = *(void *)(v6 + direct field offset for ContinueReadingVoicemailFlow.logPrefix + 24);
    unint64_t v123 = 0xE000000000000000;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v10, v9, v12, v11);
    uint64_t v1 = v8;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v8[164] = OUTLINED_FUNCTION_18_14();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    *(_WORD *)(v7 + 12) = 2080;
    LOBYTE(v11) = *(unsigned char *)(v6 + 16);
    swift_release();
    uint64_t v13 = ContinueReadingVoicemailState.description.getter(v11);
    v8[165] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v121);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl(&dword_0, v3, v4, "%s execute %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v15 = v1[167];
  uint64_t v16 = (uint64_t)(v1 + 162);
  switch(*(unsigned char *)(v15 + 16))
  {
    case 1:
      ContinueReadingVoicemailFlow.makePromptCancelledOutputFlow()();
      v1[156] = v36;
      type metadata accessor for SimpleOutputFlowAsync();
      static ExecuteResponse.complete<A>(next:)();
      goto LABEL_19;
    case 2:
      uint64_t v37 = (uint64_t)(v1 + 77);
      uint64_t v38 = (long long *)(v1 + 127);
      uint64_t v106 = v1 + 132;
      uint64_t v108 = (uint64_t)(v1 + 105);
      log = (os_log_t)(v1 + 154);
      os_log_type_t type = (uint64_t)(v1 + 152);
      uint64_t v39 = *(void *)(v15 + 24);
      if (*(void *)(v39 + 16)
        && (uint64_t v40 = [*(id *)(v39 + 40) participants]) != 0)
      {
        uint64_t v41 = v40;
        type metadata accessor for INPerson();
        uint64_t v42 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      }
      else
      {
        uint64_t v42 = 0;
      }
      os_log_type_t v66 = objc_allocWithZone((Class)INStartCallIntent);
      swift_bridgeObjectRetain();
      uint64_t v118 = @nonobjc INStartCallIntent.init(callRecordFilter:callRecordToCallBack:audioRoute:destinationType:contacts:callCapability:)(0, 0, 0, 1, v42, 1);
      if (one-time initialization token for instance != -1) {
        swift_once();
      }
      os_log_t v104 = v1 + 159;
      int v67 = (void *)v1[167];
      memcpy(v1 + 77, &static PhoneCallFeatureFlags.instance, 0xB0uLL);
      type metadata accessor for PhoneCallFeatureManager();
      uint64_t v68 = v1;
      uint64_t v69 = swift_allocObject();
      v68[130] = &type metadata for PhoneCallFeatureFlags;
      v68[131] = &protocol witness table for PhoneCallFeatureFlags;
      uint64_t v70 = swift_allocObject();
      v68[127] = v70;
      memcpy((void *)(v70 + 16), &static PhoneCallFeatureFlags.instance, 0xB0uLL);
      outlined init with take of AppSelectionSignalComponent(v38, v69 + 16);
      uint64_t v71 = v67[9];
      uint64_t v72 = v67[10];
      __swift_project_boxed_opaque_existential_1(v67 + 6, v71);
      uint64_t v73 = *(void (**)(uint64_t, uint64_t))(v72 + 8);
      outlined retain of PhoneCallFeatureFlags(v37);
      v73(v71, v72);
      FirstPartyAnnotatedAppStore.getDefaultApp(for:)(v106, v108);
      uint64_t v1 = v68;
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v106);
      v68[154] = v68[106];
      outlined release of Set<String>((uint64_t)log);
      outlined init with take of String?((uint64_t)(v68 + 107), type);
      outlined release of String?(type);
      v68[162] = v68[110];
      outlined release of Set<String>(v16);
      uint64_t v74 = v118;
      static PhoneCallFlowFactory.makeRCHFlow(app:intent:sharedGlobals:)();
      uint64_t v76 = v75;
      swift_release();
      if (v76)
      {
        swift_retain_n();
        swift_bridgeObjectRetain();
        uint64_t v77 = Logger.logObject.getter();
        uint64_t v78 = static os_log_type_t.debug.getter();
        char v79 = os_log_type_enabled(v77, v78);
        uint64_t v80 = v68[167];
        if (v79)
        {
          os_log_type_t v81 = OUTLINED_FUNCTION_11_7();
          uint64_t v121 = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v81 = 136315394;
          uint64_t v83 = *(void *)(v80 + direct field offset for ContinueReadingVoicemailFlow.logPrefix);
          uint64_t v82 = *(void *)(v80 + direct field offset for ContinueReadingVoicemailFlow.logPrefix + 8);
          typea = v78;
          uint64_t v84 = *(void *)(v80 + direct field offset for ContinueReadingVoicemailFlow.logPrefix + 16);
          uint64_t v85 = *(void *)(v80 + direct field offset for ContinueReadingVoicemailFlow.logPrefix + 24);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_release();
          uint64_t v122 = 0;
          unint64_t v123 = 0xE000000000000000;
          uint64_t v86 = v83;
          uint64_t v1 = v68;
          DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v86, v82, v84, v85);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v68[158] = OUTLINED_FUNCTION_18_14();
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_release();
          *(_WORD *)(v81 + 12) = 2080;
          type metadata accessor for INPerson();
          swift_bridgeObjectRetain();
          uint64_t v87 = Array.description.getter();
          Swift::Bool v89 = v88;
          swift_bridgeObjectRelease();
          v68[157] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v87, v89, &v121);
          uint64_t v74 = v118;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_0, v77, typea, "%s start make a call to %s", (uint8_t *)v81, 0x16u);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_6();
          OUTLINED_FUNCTION_6();
        }
        else
        {
          swift_release_n();
          swift_bridgeObjectRelease_n();
        }

        static ExecuteResponse.complete(next:)();
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_retain();
        char v90 = Logger.logObject.getter();
        uint64_t v91 = static os_log_type_t.error.getter();
        os_log_type_t v92 = os_log_type_enabled(v90, v91);
        int v93 = v68[167];
        if (v92)
        {
          uint64_t v94 = (uint8_t *)OUTLINED_FUNCTION_5_22();
          uint64_t v121 = OUTLINED_FUNCTION_14_0();
          bufb = v94;
          *(_DWORD *)uint64_t v94 = 136315138;
          uint64_t v95 = *(void *)(v93 + direct field offset for ContinueReadingVoicemailFlow.logPrefix);
          uint64_t v96 = *(void *)(v93 + direct field offset for ContinueReadingVoicemailFlow.logPrefix + 8);
          uint64_t v98 = *(void *)(v93 + direct field offset for ContinueReadingVoicemailFlow.logPrefix + 16);
          uint64_t v97 = *(void *)(v93 + direct field offset for ContinueReadingVoicemailFlow.logPrefix + 24);
          uint64_t v122 = 0;
          unint64_t v123 = 0xE000000000000000;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v95, v96, v98, v97);
          uint64_t v1 = v68;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unsigned char *v104 = OUTLINED_FUNCTION_18_14();
          uint64_t v74 = v118;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_release();
          _os_log_impl(&dword_0, v90, v91, "%s can't build a start call flow to handle callback.", bufb, 0xCu);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_6();
          OUTLINED_FUNCTION_6();
        }
        else
        {
          swift_release();
        }

        static ExecuteResponse.complete()();
      }

      break;
    case 3:
    case 7:
      uint64_t v17 = (uint64_t)(v1 + 2);
      buf = (uint8_t *)(v1 + 99);
      uint64_t v18 = (uint64_t)(v1 + 142);
      v107 = (long long *)(v1 + 142);
      uint64_t v116 = v1 + 147;
      uint64_t v19 = v1[170];
      uint64_t v99 = v19;
      uint64_t v20 = v1;
      uint64_t v21 = v1[169];
      uint64_t v22 = v20[168];
      uint64_t v23 = *(void **)(v15 + 32);
      uint64_t v24 = *(void **)(v15 + 40);
      uint64_t v105 = *(void *)(v15 + 88);
      uint64_t v101 = *(void *)(v15 + 96);
      loga = *(unsigned char *)(v15 + direct field offset for ContinueReadingVoicemailFlow.isSingleVoicemailRequest);
      outlined init with copy of SharedGlobalsProviding(v15 + 48, v18);
      swift_retain();
      uint64_t v103 = v23;
      os_log_t v102 = v24;
      swift_retain();
      uint64_t v100 = ContinueReadingVoicemailFlow.windowCatItems.getter();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v19, v15 + direct field offset for ContinueReadingVoicemailFlow.windowParam, v22);
      uint64_t v25 = *(void *)(v15 + direct field offset for ContinueReadingVoicemailFlow.totalItemCount);
      LOBYTE(v23) = *(unsigned char *)(v15 + direct field offset for ContinueReadingVoicemailFlow.totalItemCount + 8);
      uint64_t v26 = *(void *)(v15 + 304);
      uint64_t v27 = *(unsigned char *)(v15 + direct field offset for ContinueReadingVoicemailFlow.isLeadingSavedVoiceMailPostPrompt);
      LOBYTE(v19) = *(unsigned char *)(v15 + 312);
      uint64_t v28 = (const void *)v17;
      outlined init with copy of SearchCallHistorySharedGlobals(v15 + 104, v17);
      LOBYTE(v17) = *(unsigned char *)(v15 + 16) == 3;
      type metadata accessor for PromptForValueAfterReadingVoicemailFlowStrategy();
      OUTLINED_FUNCTION_21_0();
      PromptForValueAfterReadingVoicemailFlowStrategy.init(app:intent:intentResponse:phoneSearchCallHistoryIntent:isSingleVoicemailRequest:sharedGlobals:windowItems:windowParam:totalItemCount:playVoicemailCommands:isLeadingSavedVoiceMailPostPrompt:voiceMailPositionString:searchCallHistorySharedGlobals:isRepeatRequest:)(v105, (uint64_t)v103, (uint64_t)v102, v101, loga, v107, (uint64_t)v100, v99, v25, (char)v23, v26, v27, v19, v28, v17);
      uint64_t v30 = *(void *)(v15 + 72);
      uint64_t v29 = *(void *)(v15 + 80);
      __swift_project_boxed_opaque_existential_1((void *)(v15 + 48), v30);
      unsigned int v31 = *(void (**)(uint64_t, uint64_t))(v29 + 16);
      swift_bridgeObjectRetain();
      swift_retain();
      v31(v30, v29);
      uint64_t v32 = v20[102];
      os_log_type_t v33 = v20[104];
      __swift_project_boxed_opaque_existential_1(buf, v32);
      v20[150] = v32;
      v20[151] = v33;
      __swift_allocate_boxed_opaque_existential_1(v116);
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_34_2();
      v34();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptForValueFlowAsync<CallHistoryPromptResponse>);
      OUTLINED_FUNCTION_21_0();
      lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type PromptForValueAfterReadingVoicemailFlowStrategy and conformance PromptForValueAfterReadingVoicemailFlowStrategy, (void (*)(uint64_t))type metadata accessor for PromptForValueAfterReadingVoicemailFlowStrategy);
      uint64_t v1 = v20;
      uint64_t v35 = PromptForValueFlowAsync.init<A>(strategy:outputPublisher:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)buf);
      v20[155] = v35;
      implicit closure #5 in ContinueReadingVoicemailFlow.execute()();
      lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type PromptForValueFlowAsync<CallHistoryPromptResponse> and conformance PromptForValueFlowAsync<A>, &demangling cache variable for type metadata for PromptForValueFlowAsync<CallHistoryPromptResponse>);
      goto LABEL_18;
    case 5:
      if (*(unsigned char *)(v15 + direct field offset for ContinueReadingVoicemailFlow.isLeadingSavedVoiceMailPostPrompt)) {
        uint64_t v43 = 6;
      }
      else {
        uint64_t v43 = 7;
      }
      *(unsigned char *)(v15 + 16) = v43;
      ContinueReadingVoicemailFlow.state.didset();
      uint64_t v44 = *(void **)(v15 + 32);
      unint64_t v45 = *(void **)(v15 + 40);
      swift_retain();
      os_log_t v46 = v44;
      os_log_t v47 = v45;
      ContinueReadingVoicemailFlow.windowCatItems.getter();
      outlined init with copy of SharedGlobalsProviding(v15 + 48, (uint64_t)(v1 + 117));
      outlined init with copy of SearchCallHistorySharedGlobals(v15 + 104, (uint64_t)(v1 + 52));
      type metadata accessor for PlayVoicemailReadIntroductionFlow();
      swift_allocObject();
      v1[163] = PlayVoicemailReadIntroductionFlow.init(app:intent:intentResponse:isSingleVoicemailRequest:items:sharedGlobals:searchCallHistorySharedGlobals:)();
      lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type PlayVoicemailReadIntroductionFlow and conformance PlayVoicemailReadIntroductionFlow, (void (*)(uint64_t))type metadata accessor for PlayVoicemailReadIntroductionFlow);
      static ExecuteResponse.ongoing<A>(next:)();
      goto LABEL_19;
    case 6:
      outlined init with copy of SharedGlobalsProviding(v15 + 48, (uint64_t)(v1 + 137));
      outlined init with copy of SearchCallHistorySharedGlobals(v15 + 104, (uint64_t)(v1 + 27));
      type metadata accessor for VoicemailShouldPlayPromptFlowStrategy();
      swift_allocObject();
      VoicemailShouldPlayPromptFlowStrategy.init(sharedGlobals:searchCallHistorySharedGlobals:)((long long *)(v1 + 137), v1 + 27);
      uint64_t v48 = *(void *)(v15 + 72);
      uint64_t v49 = *(void *)(v15 + 80);
      __swift_project_boxed_opaque_existential_1((void *)(v15 + 48), v48);
      uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v49 + 16);
      swift_retain();
      v50(v48, v49);
      uint64_t v51 = v1[114];
      os_log_type_t v52 = v1[116];
      __swift_project_boxed_opaque_existential_1(v1 + 111, v51);
      v1[125] = v51;
      v1[126] = v52;
      __swift_allocate_boxed_opaque_existential_1(v1 + 122);
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_34_2();
      v53();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptForConfirmationFlowAsync<(), SimpleConfirmationResponseProvider>);
      OUTLINED_FUNCTION_21_0();
      lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type VoicemailShouldPlayPromptFlowStrategy and conformance VoicemailShouldPlayPromptFlowStrategy, (void (*)(uint64_t))type metadata accessor for VoicemailShouldPlayPromptFlowStrategy);
      uint64_t v54 = PromptForConfirmationFlowAsync.init<A>(itemToConfirm:strategy:outputPublisher:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(v1 + 111));
      v1[160] = v54;
      implicit closure #3 in ContinueReadingVoicemailFlow.execute()();
      lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type PromptForConfirmationFlowAsync<(), SimpleConfirmationResponseProvider> and conformance PromptForConfirmationFlowAsync<A, B>, &demangling cache variable for type metadata for PromptForConfirmationFlowAsync<(), SimpleConfirmationResponseProvider>);
LABEL_18:
      static ExecuteResponse.ongoing<A>(next:childCompletion:)();
      swift_release();
      swift_release();
LABEL_19:
      swift_release();
      break;
    case 9:
      swift_retain();
      uint64_t v57 = Logger.logObject.getter();
      uint64_t v58 = static os_log_type_t.debug.getter();
      uint64_t v59 = os_log_type_enabled(v57, v58);
      uint64_t v60 = v1[167];
      if (v59)
      {
        uint64_t v117 = v1 + 161;
        uint64_t v61 = (uint8_t *)OUTLINED_FUNCTION_5_22();
        uint64_t v119 = OUTLINED_FUNCTION_14_0();
        *(_DWORD *)uint64_t v61 = 136315138;
        bufa = v61;
        long long v120 = v1;
        uint64_t v121 = v119;
        uint64_t v63 = *(void *)(v60 + direct field offset for ContinueReadingVoicemailFlow.logPrefix);
        uint64_t v62 = *(void *)(v60 + direct field offset for ContinueReadingVoicemailFlow.logPrefix + 8);
        uint64_t v65 = *(void *)(v60 + direct field offset for ContinueReadingVoicemailFlow.logPrefix + 16);
        uint64_t v64 = *(void *)(v60 + direct field offset for ContinueReadingVoicemailFlow.logPrefix + 24);
        uint64_t v122 = 0;
        unint64_t v123 = 0xE000000000000000;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v63, v62, v65, v64);
        uint64_t v1 = v120;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *uint64_t v117 = OUTLINED_FUNCTION_18_14();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release();
        _os_log_impl(&dword_0, v57, v58, "%s waitForBargeInInput, return ongoing and require for an input.", bufa, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_6();
        OUTLINED_FUNCTION_6();
      }
      else
      {
        swift_release();
      }

      static ExecuteResponse.ongoing(requireInput:)();
      break;
    default:
      static ExecuteResponse.complete()();
      break;
  }
  swift_task_dealloc();
  uint64_t v55 = (uint64_t (*)(void))v1[1];
  return v55();
}

uint64_t (*implicit closure #3 in ContinueReadingVoicemailFlow.execute()())()
{
  return partial apply for implicit closure #4 in implicit closure #3 in ContinueReadingVoicemailFlow.execute();
}

BOOL static ContinueReadingVoicemailState.__derived_enum_equals(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  switch(a1)
  {
    case 5u:
      if (a2 == 5) {
        goto LABEL_11;
      }
      goto LABEL_13;
    case 6u:
      if (a2 != 6) {
        goto LABEL_13;
      }
      goto LABEL_11;
    case 7u:
      if (a2 != 7) {
        goto LABEL_13;
      }
      goto LABEL_11;
    case 8u:
      if (a2 != 8) {
        goto LABEL_13;
      }
      goto LABEL_11;
    case 9u:
      if (a2 != 9) {
        goto LABEL_13;
      }
LABEL_11:
      BOOL result = 1;
      break;
    default:
      if (a2 - 5 >= 5) {
        BOOL result = a1 == a2;
      }
      else {
LABEL_13:
      }
        BOOL result = 0;
      break;
  }
  return result;
}

uint64_t (*implicit closure #5 in ContinueReadingVoicemailFlow.execute()())()
{
  return partial apply for implicit closure #6 in implicit closure #5 in ContinueReadingVoicemailFlow.execute();
}

void ContinueReadingVoicemailFlow.makePromptCancelledOutputFlow()()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DialogPhase();
  uint64_t v3 = OUTLINED_FUNCTION_11_0(v2);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_8_7();
  uint64_t v4 = type metadata accessor for CATOption();
  uint64_t v5 = OUTLINED_FUNCTION_11_0(v4);
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_4();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.siriPhone);
  swift_retain();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    os_log_type_t v17 = v8;
    uint64_t v9 = (uint8_t *)OUTLINED_FUNCTION_24_14();
    uint64_t v16 = OUTLINED_FUNCTION_14_0();
    *(_DWORD *)uint64_t v9 = 136315138;
    uint64_t v18 = v16;
    v19[0] = 0;
    uint64_t v11 = *(void *)(v1 + direct field offset for ContinueReadingVoicemailFlow.logPrefix);
    uint64_t v10 = *(void *)(v1 + direct field offset for ContinueReadingVoicemailFlow.logPrefix + 8);
    uint64_t v13 = *(void *)(v1 + direct field offset for ContinueReadingVoicemailFlow.logPrefix + 16);
    uint64_t v12 = *(void *)(v1 + direct field offset for ContinueReadingVoicemailFlow.logPrefix + 24);
    v19[1] = 0xE000000000000000;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v11, v10, v13, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v19[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v7, v17, "%s cancel is received", v9, 0xCu);
    OUTLINED_FUNCTION_41_3();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {

    swift_release();
  }
  type metadata accessor for PhoneCallCommonCATsSimple();
  static CATOption.defaultMode.getter();
  CATWrapperSimple.__allocating_init(options:globals:)();
  swift_retain();
  static DialogPhase.canceled.getter();
  outlined init with copy of SharedGlobalsProviding(v1 + 48, (uint64_t)v19);
  type metadata accessor for DialogOutputFactory();
  OUTLINED_FUNCTION_21_0();
  uint64_t v14 = DialogOutputFactory.init(dialog:dialogPhase:sharedGlobals:)();
  uint64_t v15 = swift_release();
  (*(void (**)(uint64_t))(*(void *)v14 + 112))(v15);
  swift_release();
  OUTLINED_FUNCTION_26_1();
}

void ContinueReadingVoicemailFlow.onPromptComplete(_:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v66 = v0;
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for BargeInError();
  OUTLINED_FUNCTION_0_0();
  uint64_t v61 = v4;
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_3_1();
  uint64_t v62 = v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptResult<CallHistoryPromptResponse>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_5_8();
  uint64_t v64 = v11;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v55 - v13;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v16 = __swift_project_value_buffer(v15, (uint64_t)static Logger.siriPhone);
  swift_retain();
  uint64_t v65 = v16;
  os_log_type_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  int v19 = v18;
  BOOL v20 = os_log_type_enabled(v17, v18);
  uint64_t v63 = v3;
  if (v20)
  {
    uint64_t v21 = OUTLINED_FUNCTION_24_14();
    int v58 = v19;
    uint64_t v22 = (uint8_t *)v21;
    uint64_t v23 = OUTLINED_FUNCTION_14_0();
    uint64_t v57 = v23;
    *(_DWORD *)uint64_t v22 = 136315138;
    v55[1] = v22 + 4;
    uint64_t v56 = v22;
    uint64_t v25 = *(void *)(v66 + direct field offset for ContinueReadingVoicemailFlow.logPrefix);
    uint64_t v24 = *(void *)(v66 + direct field offset for ContinueReadingVoicemailFlow.logPrefix + 8);
    uint64_t v59 = v9;
    uint64_t v60 = v2;
    uint64_t v26 = *(void *)(v66 + direct field offset for ContinueReadingVoicemailFlow.logPrefix + 16);
    uint64_t v27 = *(void *)(v66 + direct field offset for ContinueReadingVoicemailFlow.logPrefix + 24);
    OUTLINED_FUNCTION_36_7(v23);
    swift_bridgeObjectRetain();
    uint64_t v28 = v26;
    uint64_t v2 = v60;
    DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v25, v24, v28, v27);
    uint64_t v9 = v59;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, &v69);
    OUTLINED_FUNCTION_7_22(v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v17, (os_log_type_t)v58, "%s onPromptComplete", v56, 0xCu);
    OUTLINED_FUNCTION_41_3();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {

    swift_release();
  }
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v30(v14, v2, v7);
  unsigned int v31 = *(unsigned int (**)(uint64_t))(v9 + 88);
  uint64_t v32 = OUTLINED_FUNCTION_32_7();
  if (v31(v32) == enum case for PromptResult.answered<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v9 + 96))(v14, v7);
    char v33 = *v14;
LABEL_18:
    *(unsigned char *)(v66 + 16) = v33;
    ContinueReadingVoicemailFlow.state.didset();
    goto LABEL_19;
  }
  uint64_t v34 = v9;
  uint64_t v35 = *(void (**)(uint64_t))(v9 + 8);
  uint64_t v36 = OUTLINED_FUNCTION_31_8();
  v35(v36);
  uint64_t v37 = v64;
  v30((char *)v64, v2, v7);
  uint64_t v38 = OUTLINED_FUNCTION_32_7();
  if (v31(v38) != enum case for PromptResult.error<A>(_:))
  {
    uint64_t v48 = OUTLINED_FUNCTION_31_8();
    v35(v48);
LABEL_14:
    swift_retain();
    uint64_t v49 = (void *)Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_4_27(v50))
    {
      OUTLINED_FUNCTION_5_22();
      uint64_t v65 = OUTLINED_FUNCTION_14_0();
      OUTLINED_FUNCTION_44_5(4.8149e-34);
      OUTLINED_FUNCTION_36_7(v51);
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_9_26();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v52 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, &v69);
      OUTLINED_FUNCTION_7_22(v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_19_10(&dword_0, v53, v54, "%s did not receive .answered from child confirmation flow");
      OUTLINED_FUNCTION_15_15();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {

      swift_release();
    }
    char v33 = 8;
    goto LABEL_18;
  }
  (*(void (**)(uint64_t *, uint64_t))(v34 + 96))(v37, v7);
  uint64_t v67 = *v37;
  swift_errorRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_errorRelease();
    goto LABEL_14;
  }
  OUTLINED_FUNCTION_11();
  v39();
  swift_retain();
  swift_errorRetain();
  swift_retain();
  swift_errorRetain();
  uint64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v40, v41))
  {
    uint64_t v42 = OUTLINED_FUNCTION_11_7();
    uint64_t v64 = (uint64_t *)swift_slowAlloc();
    uint64_t v65 = OUTLINED_FUNCTION_14_0();
    uint64_t v69 = v65;
    *(_DWORD *)uint64_t v42 = 136315394;
    uint64_t v63 = v42 + 4;
    uint64_t v43 = *(void *)(v66 + direct field offset for ContinueReadingVoicemailFlow.logPrefix);
    uint64_t v44 = *(void *)(v66 + direct field offset for ContinueReadingVoicemailFlow.logPrefix + 8);
    uint64_t v45 = *(void *)(v66 + direct field offset for ContinueReadingVoicemailFlow.logPrefix + 16);
    uint64_t v46 = *(void *)(v66 + direct field offset for ContinueReadingVoicemailFlow.logPrefix + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t v67 = 0;
    unint64_t v68 = 0xE000000000000000;
    DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v43, v44, v45, v46);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v42 + 12) = 2112;
    swift_errorRetain();
    uint64_t v47 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v67 = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v64 = v47;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&dword_0, v40, v41, "%s received a BargeInError: %@", (uint8_t *)v42, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_15_15();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
    swift_release_n();
    swift_errorRelease();
    swift_errorRelease();
  }

  *(unsigned char *)(v66 + 16) = 9;
  ContinueReadingVoicemailFlow.state.didset();
  swift_errorRelease();
LABEL_19:
  OUTLINED_FUNCTION_26_1();
}

void ContinueReadingVoicemailFlow.onShouldPlayPromptComplete(_:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v1 = v0;
  uint64_t v86 = v2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  uint64_t v4 = OUTLINED_FUNCTION_11_0(v3);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_3_1();
  uint64_t v87 = v5;
  OUTLINED_FUNCTION_36();
  uint64_t v6 = type metadata accessor for ConfirmationResponse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v79 = v7;
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_5_8();
  uint64_t v78 = v9;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v10);
  uint64_t v80 = (char *)&v72 - v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptResult<SimpleConfirmationResponseProvider>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v84 = v13;
  os_log_t v85 = v12;
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_3_1();
  uint64_t v83 = v14;
  OUTLINED_FUNCTION_36();
  uint64_t v15 = type metadata accessor for SimpleConfirmationResponseProvider();
  OUTLINED_FUNCTION_0_0();
  uint64_t v82 = v16;
  __chkstk_darwin(v17);
  OUTLINED_FUNCTION_4();
  uint64_t v20 = v19 - v18;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  uint64_t v22 = __swift_project_value_buffer(v21, (uint64_t)static Logger.siriPhone);
  swift_retain();
  uint64_t v81 = v22;
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  int v25 = v24;
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v26 = OUTLINED_FUNCTION_24_14();
    int v73 = v25;
    uint64_t v27 = (uint8_t *)v26;
    uint64_t v28 = OUTLINED_FUNCTION_14_0();
    uint64_t v76 = v20;
    uint64_t v77 = v6;
    *(_DWORD *)uint64_t v27 = 136315138;
    uint64_t v72 = v27 + 4;
    uint64_t v74 = v1;
    uint64_t v75 = v15;
    uint64_t v29 = *(void *)(v1 + direct field offset for ContinueReadingVoicemailFlow.logPrefix);
    uint64_t v30 = *(void *)(v1 + direct field offset for ContinueReadingVoicemailFlow.logPrefix + 8);
    uint64_t v31 = *(void *)(v1 + direct field offset for ContinueReadingVoicemailFlow.logPrefix + 16);
    uint64_t v32 = *(void *)(v1 + direct field offset for ContinueReadingVoicemailFlow.logPrefix + 24);
    OUTLINED_FUNCTION_35_8(v28);
    swift_bridgeObjectRetain();
    uint64_t v20 = v76;
    DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v29, v30, v31, v32);
    uint64_t v1 = v74;
    swift_bridgeObjectRelease();
    uint64_t v15 = v75;
    swift_bridgeObjectRelease();
    uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v88, v89, v90);
    OUTLINED_FUNCTION_21_12(v33);
    uint64_t v6 = v77;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v23, (os_log_type_t)v73, "%s onShouldPlayPromptComplete", v27, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {

    swift_release();
  }
  uint64_t v35 = v83;
  uint64_t v34 = v84;
  os_log_t v36 = v85;
  OUTLINED_FUNCTION_12();
  v37();
  int v38 = (*((uint64_t (**)(uint64_t, os_log_t))v34 + 11))(v35, v36);
  uint64_t v39 = v87;
  if (v38 != enum case for PromptResult.answered<A>(_:))
  {
    (*((void (**)(uint64_t, os_log_t))v34 + 1))(v35, v36);
    goto LABEL_10;
  }
  (*((void (**)(uint64_t, os_log_t))v34 + 12))(v35, v36);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v82 + 32))(v20, v35, v15);
  SimpleConfirmationResponseProvider.confirmationResponse.getter();
  if (__swift_getEnumTagSinglePayload(v39, 1, v6) == 1)
  {
    uint64_t v40 = OUTLINED_FUNCTION_7_30();
    v41(v40);
    outlined destroy of FlowActivity?(v39, &demangling cache variable for type metadata for ConfirmationResponse?);
LABEL_10:
    swift_retain();
    uint64_t v42 = (void *)Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_4_27(v43))
    {
      OUTLINED_FUNCTION_5_22();
      uint64_t v87 = OUTLINED_FUNCTION_14_0();
      uint64_t v88 = 0;
      OUTLINED_FUNCTION_44_5(4.8149e-34);
      unint64_t v89 = 0xE000000000000000;
      v90[0] = v44;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_9_26();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v88, v89, v90);
      OUTLINED_FUNCTION_21_12(v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_19_10(&dword_0, v46, v47, "%s onShouldPlayPromptComplete did not receive .answered from child confirmation flow");
      OUTLINED_FUNCTION_15_15();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {

      swift_release();
    }
    *(unsigned char *)(v1 + 16) = 8;
    ContinueReadingVoicemailFlow.state.didset();
    goto LABEL_14;
  }
  uint64_t v48 = v79;
  (*(void (**)(char *, uint64_t, uint64_t))(v79 + 32))(v80, v39, v6);
  uint64_t v49 = v78;
  OUTLINED_FUNCTION_12();
  v50();
  int v51 = (*(uint64_t (**)(char *, uint64_t))(v48 + 88))(v49, v6);
  if (v51 == enum case for ConfirmationResponse.confirmed(_:))
  {
    char v52 = 7;
LABEL_19:
    *(unsigned char *)(v1 + 16) = v52;
    ContinueReadingVoicemailFlow.state.didset();
    OUTLINED_FUNCTION_11();
    v53();
    uint64_t v54 = OUTLINED_FUNCTION_7_30();
    v55(v54);
    goto LABEL_14;
  }
  if (v51 == enum case for ConfirmationResponse.rejected(_:))
  {
    char v52 = 8;
    goto LABEL_19;
  }
  swift_retain();
  uint64_t v56 = Logger.logObject.getter();
  os_log_type_t v57 = static os_log_type_t.error.getter();
  int v58 = v57;
  if (os_log_type_enabled(v56, v57))
  {
    LODWORD(v87) = v58;
    uint64_t v59 = OUTLINED_FUNCTION_5_22();
    uint64_t v77 = v6;
    uint64_t v60 = (uint8_t *)v59;
    uint64_t v61 = OUTLINED_FUNCTION_14_0();
    uint64_t v86 = v61;
    os_log_t v85 = v56;
    *(_DWORD *)uint64_t v60 = 136315138;
    uint64_t v84 = v60 + 4;
    uint64_t v76 = v20;
    uint64_t v62 = *(void *)(v1 + direct field offset for ContinueReadingVoicemailFlow.logPrefix);
    uint64_t v63 = *(void *)(v1 + direct field offset for ContinueReadingVoicemailFlow.logPrefix + 8);
    uint64_t v64 = v1;
    uint64_t v66 = *(void *)(v1 + direct field offset for ContinueReadingVoicemailFlow.logPrefix + 16);
    uint64_t v65 = *(void *)(v1 + direct field offset for ContinueReadingVoicemailFlow.logPrefix + 24);
    OUTLINED_FUNCTION_35_8(v61);
    swift_bridgeObjectRetain();
    DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v62, v63, v66, v65);
    uint64_t v1 = v64;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v88, v89, v90);
    OUTLINED_FUNCTION_21_12(v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    os_log_t v68 = v85;
    _os_log_impl(&dword_0, v85, (os_log_type_t)v87, "%s onShouldPlayPromptComplete received an unknown ConfirmationResponse", v60, 0xCu);
    OUTLINED_FUNCTION_41_3();
    OUTLINED_FUNCTION_6();
    uint64_t v6 = v77;
    OUTLINED_FUNCTION_6();
  }
  else
  {

    swift_release();
  }
  *(unsigned char *)(v1 + 16) = 8;
  ContinueReadingVoicemailFlow.state.didset();
  uint64_t v69 = *(void (**)(char *, uint64_t))(v79 + 8);
  v69(v80, v6);
  uint64_t v70 = OUTLINED_FUNCTION_7_30();
  v71(v70);
  v69(v78, v6);
LABEL_14:
  OUTLINED_FUNCTION_26_1();
}

uint64_t protocol witness for LocalizedError.errorDescription.getter in conformance ContinueReadingVoicemailFlow<A>.ContinuationPromptFlowError()
{
  return LocalizedError.errorDescription.getter();
}

uint64_t protocol witness for LocalizedError.failureReason.getter in conformance ContinueReadingVoicemailFlow<A>.ContinuationPromptFlowError()
{
  return LocalizedError.failureReason.getter();
}

uint64_t protocol witness for LocalizedError.recoverySuggestion.getter in conformance ContinueReadingVoicemailFlow<A>.ContinuationPromptFlowError()
{
  return LocalizedError.recoverySuggestion.getter();
}

uint64_t protocol witness for LocalizedError.helpAnchor.getter in conformance ContinueReadingVoicemailFlow<A>.ContinuationPromptFlowError()
{
  return LocalizedError.helpAnchor.getter();
}

uint64_t ContinueReadingVoicemailFlow.deinit()
{
  swift_bridgeObjectRelease();

  __swift_destroy_boxed_opaque_existential_1(v0 + 48);
  swift_release();
  swift_release();
  outlined destroy of SearchCallHistorySharedGlobals(v0 + 104);
  swift_bridgeObjectRelease();
  type metadata accessor for WindowedPaginationParameters();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_11();
  v1();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ContinueReadingVoicemailFlow.__deallocating_deinit()
{
  ContinueReadingVoicemailFlow.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Flow.on(input:) in conformance ContinueReadingVoicemailFlow<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 288))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance ContinueReadingVoicemailFlow<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 296))();
}

uint64_t protocol witness for Flow.execute() in conformance ContinueReadingVoicemailFlow<A>(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 304) + **(int **)(**(void **)v1 + 304));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = UnsupportedFlowCATs.deleteVoicemail();
  return v6(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance ContinueReadingVoicemailFlow<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 280))();
}

unint64_t ContinueReadingVoicemailState.description.getter(unsigned __int8 a1)
{
  int v1 = a1 - 5;
  unint64_t result = 0xD000000000000011;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 2:
      unint64_t result = 0xD000000000000019;
      break;
    case 3:
      unint64_t result = 0x74656C706D6F632ELL;
      break;
    case 4:
      unint64_t result = 0xD000000000000014;
      break;
    default:
      v3._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      unint64_t result = 0x65726577736E612ELL;
      break;
  }
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance ContinueReadingVoicemailState()
{
  return ContinueReadingVoicemailState.description.getter(*v0);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ContinueReadingVoicemailState(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static ContinueReadingVoicemailState.__derived_enum_equals(_:_:)(*a1, *a2);
}

uint64_t outlined init with copy of SearchCallHistorySharedGlobals(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of SearchCallHistorySharedGlobals(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for ContinueReadingVoicemailFlow.ContinuationPromptFlowError()
{
  return __swift_instantiateGenericMetadata();
}

id @nonobjc INStartCallIntent.init(callRecordFilter:callRecordToCallBack:audioRoute:destinationType:contacts:callCapability:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  if (a5)
  {
    type metadata accessor for INPerson();
    v13.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v13.super.Class isa = 0;
  }
  id v14 = [v7 initWithCallRecordFilter:a1 callRecordToCallBack:a2 audioRoute:a3 destinationType:a4 contacts:v13.super.isa callCapability:a6];

  return v14;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v3();
}

uint64_t sub_E85DC()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t partial apply for closure #1 in ContinueReadingVoicemailFlow.execute(completion:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return closure #1 in ContinueReadingVoicemailFlow.execute(completion:)(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_E86EC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 192, 7);
}

uint64_t lazy protocol witness table accessor for type Input and conformance Input(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata completion function for ContinueReadingVoicemailFlow()
{
  uint64_t result = type metadata accessor for WindowedPaginationParameters();
  if (v1 <= 0x3F) {
    return swift_initClassMetadata2();
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ContinueReadingVoicemailState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF7)
  {
    unsigned int v2 = a2 + 9;
    if (a2 + 9 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 9;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 9;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0xE89A0);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 9;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  if (v7 >= 5) {
    unsigned int v8 = v7 - 4;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v8 >= 6) {
    return v8 - 5;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for ContinueReadingVoicemailState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 9;
  if (a3 + 9 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xF7) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v7 = ((a2 - 247) >> 8) + 1;
    *uint64_t result = a2 + 9;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0xE8A88);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *uint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for ContinueReadingVoicemailState(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 5) {
    return v1 - 4;
  }
  else {
    return 0;
  }
}

unsigned char *destructiveInjectEnumTag for ContinueReadingVoicemailState(unsigned char *result, int a2)
{
  if (a2) {
    *uint64_t result = a2 + 4;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContinueReadingVoicemailState()
{
  return &type metadata for ContinueReadingVoicemailState;
}

uint64_t type metadata instantiation function for ContinueReadingVoicemailFlow.ContinuationPromptFlowError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 8);
}

uint64_t getEnumTagSinglePayload for ContinueReadingVoicemailFlow.ContinuationPromptFlowError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF7)
  {
    if (a2 + 9 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 9) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (v4) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v3 == 2)
      {
        int v4 = *(unsigned __int16 *)(a1 + 1);
        if (!*(_WORD *)(a1 + 1)) {
          goto LABEL_17;
        }
LABEL_15:
        int v5 = (*a1 | (v4 << 8)) - 10;
        return (v5 + 1);
      }
      int v4 = a1[1];
      if (a1[1]) {
        goto LABEL_15;
      }
    }
  }
LABEL_17:
  if (*a1 <= 9u) {
    int v6 = 9;
  }
  else {
    int v6 = *a1;
  }
  int v7 = v6 - 10;
  if (*a1 < 5u) {
    int v5 = -1;
  }
  else {
    int v5 = v7;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for ContinueReadingVoicemailFlow.ContinuationPromptFlowError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *uint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0xE8C50);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

uint64_t base witness table accessor for Error in ContinueReadingVoicemailFlow<A>.ContinuationPromptFlowError()
{
  return swift_getWitnessTable();
}

uint64_t sub_E8C9C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  unsigned int v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  unsigned int v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu);
  return v6(a1, v4);
}

uint64_t OUTLINED_FUNCTION_4_34(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return v1;
}

uint64_t OUTLINED_FUNCTION_7_30()
{
  return v0;
}

void OUTLINED_FUNCTION_9_26()
{
  DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v1, v2, v3, v0);
}

uint64_t OUTLINED_FUNCTION_15_15()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_17_11()
{
  *(void *)(v0 - 128) = 0;
  *(void *)(v0 - 120) = 0xE000000000000000;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_18_14()
{
  uint64_t v2 = *(void *)(v0 - 88);
  unint64_t v3 = *(void *)(v0 - 80);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v2, v3, (uint64_t *)(v0 - 96));
}

uint64_t OUTLINED_FUNCTION_24_14()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_31_8()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_32_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_33_5(uint64_t a1)
{
  *(void *)(v1 - 128) = a1;
  return v1 - 128;
}

uint64_t OUTLINED_FUNCTION_35_8(uint64_t a1)
{
  *(void *)(v1 - 112) = 0;
  *(void *)(v1 - 104) = 0xE000000000000000;
  *(void *)(v1 - 96) = a1;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_36_7(uint64_t a1)
{
  *(void *)(v1 - 104) = 0;
  *(void *)(v1 - 96) = 0xE000000000000000;
  *(void *)(v1 - 88) = a1;
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_38_6()
{
  *(void *)(v1 - 264) = v0;
}

uint64_t OUTLINED_FUNCTION_39_5(uint64_t a1)
{
  *(void *)(v1 - 168) = a1;
  return v1 - 168;
}

uint64_t OUTLINED_FUNCTION_41_3()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_43_6(uint64_t result, float a2)
{
  *uint64_t v2 = a2;
  *(void *)(v3 - 168) = result;
  return result;
}

void OUTLINED_FUNCTION_44_5(float a1)
{
  *uint64_t v1 = a1;
  *(void *)(v2 - 128) = v1 + 1;
}

unint64_t type metadata accessor for NSObject()
{
  unint64_t result = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  }
  return result;
}

id EmergencyCountdownOutputBuilder.intent.getter()
{
  return *(id *)(v0 + 8);
}

id EmergencyCountdownOutputBuilder.intentResponse.getter()
{
  return *(id *)(v0 + 16);
}

uint64_t EmergencyCountdownOutputBuilder.responseGenerator.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + 64, a1);
}

uint64_t CallRecordTableSnippetBuilder.makeViewsForWatch(utteranceViews:_:)(uint64_t a1, void (*a2)(uint64_t, void), uint64_t a3)
{
  return CallRecordTableSnippetBuilder.makeViewsForWatch(utteranceViews:_:)(a1, a2, a3, (uint64_t (*)(void))CallRecordTableSnippetBuilder.makeItemGroup());
}

void *CallRecordTableSnippetBuilder.makeItemGroup()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + 16);
  id v3 = [v2 callRecords];
  if (!v3) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = v3;
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INCallRecord);
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = *(void *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFFF8));
  }
  swift_bridgeObjectRelease();
  if (!v6) {
    return _swiftEmptyArrayStorage;
  }
  id v7 = [v2 callRecords];
  if (!v7) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v8 = v7;
  unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v10 = [objc_allocWithZone((Class)SASTApplicationBannerItem) init];
  App.appIdentifier.getter();
  if (v11)
  {
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v12 = 0;
  }
  [v10 setBundleId:v12];

  __chkstk_darwin(v14);
  void v23[2] = v1;
  unint64_t v15 = (unint64_t)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo12INCallRecordCG_So12SASTCardItemCs5NeverOTg5((void (*)(void))partial apply for closure #1 in CallRecordTableSnippetBuilder.makeItemGroup(), (uint64_t)v23, v9);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v16 = swift_allocObject();
  long long v24 = xmmword_46A030;
  *(_OWORD *)(v16 + 16) = xmmword_46A030;
  *(void *)(v16 + 32) = v10;
  uint64_t v25 = v16;
  specialized Array._endMutation()();
  uint64_t v17 = v25;
  id v18 = v10;
  swift_bridgeObjectRetain();
  if (v15 >> 62)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SASTTemplateItem);
    _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
  }
  swift_bridgeObjectRelease();
  uint64_t v25 = v17;
  specialized Array.append<A>(contentsOf:)();
  uint64_t v19 = v25;
  id v20 = [objc_allocWithZone((Class)SASTItemGroup) init];
  outlined bridged method (mbnn) of @objc SASTItemGroup.templateItems.setter(v19, (uint64_t)v20);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = v24;
  *(void *)(v21 + 32) = v20;
  uint64_t v25 = v21;
  specialized Array._endMutation()();
  uint64_t v13 = v25;

  return (void *)v13;
}

uint64_t CallRecordTableSnippetBuilder.makeViewsForIOS(utteranceViews:_:)(uint64_t a1, void (*a2)(uint64_t, void), uint64_t a3)
{
  return CallRecordTableSnippetBuilder.makeViewsForWatch(utteranceViews:_:)(a1, a2, a3, (uint64_t (*)(void))CallRecordTableSnippetBuilder.makeCardSnippet());
}

uint64_t CallRecordTableSnippetBuilder.makeViewsForWatch(utteranceViews:_:)(uint64_t a1, void (*a2)(uint64_t, void), uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v5 = a4();
  a2(v5, 0);

  return swift_bridgeObjectRelease();
}

void *CallRecordTableSnippetBuilder.makeCardSnippet()()
{
  void (*v25)(void *__return_ptr, uint64_t, uint64_t);
  id v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v33;
  long long v34[2];
  void v35[6];

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CATOption();
  __chkstk_darwin(v2 - 8);
  id v3 = (void *)v0[2];
  id v4 = [v3 callRecords];
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v5 = v4;
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INCallRecord);
  unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = *(void *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFFF8));
  }
  swift_bridgeObjectRelease();
  if (!v7) {
    return _swiftEmptyArrayStorage;
  }
  id v8 = [v3 callRecords];
  if (!v8) {
    return _swiftEmptyArrayStorage;
  }
  unint64_t v9 = v8;
  unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (App.isFirstParty()())
  {
    swift_bridgeObjectRelease();
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for SACardSnippet);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_46A030;
    *(void *)(v11 + 32) = static CasinoFactory.makePlaceholderCardSection()();
    v35[0] = v11;
    specialized Array._endMutation()();
    NSString v12 = (void *)static SACardSnippet.makeFromCardSectionsWithIntentData(cardSections:intent:intentResponse:shouldGenerateAceId:)();
  }
  else
  {
    uint64_t v14 = v0[6];
    uint64_t v15 = v0[7];
    __swift_project_boxed_opaque_existential_1(v0 + 3, v14);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v15 + 8))(v34, v14, v15);
    type metadata accessor for PhoneCallDisplayTextCATs();
    type metadata accessor for CATGlobals();
    uint64_t v16 = v0[6];
    uint64_t v17 = v0[7];
    __swift_project_boxed_opaque_existential_1(v0 + 3, v16);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v17 + 8))(v35, v16, v17);
    CATGlobals.__allocating_init(device:)();
    static CATOption.defaultMode.getter();
    uint64_t v18 = CATWrapper.__allocating_init(options:globals:)();
    outlined init with take of AppSelectionSignalComponent(v34, (uint64_t)v35);
    v35[5] = v18;
    SCHRowCardSectionComponentsFactory.getRowCardSectionComponents(callRecords:)(v10);
    uint64_t v20 = v19;
    swift_bridgeObjectRelease();
    outlined destroy of SCHRowCardSectionComponentsFactory((uint64_t)v35);
    NSString v12 = (void *)Array<A>.toCardSnippet()(v20);
  }
  swift_bridgeObjectRelease();
  uint64_t v22 = *v1;
  uint64_t v21 = (void *)v1[1];
  uint64_t v33 = v1 + 3;
  uint64_t v23 = v1[6];
  uint64_t v24 = v1[7];
  __swift_project_boxed_opaque_existential_1(v1 + 3, v23);
  uint64_t v25 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v24 + 8);
  uint64_t v26 = v12;
  v25(v35, v23, v24);
  uint64_t v27 = static UserFacingCallingAppUtils.getCommAppForLaunch(originalApp:preferredCallProvider:deviceState:)(v22, (uint64_t)[v21 preferredCallProvider], v35);
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for SAUISash);
  uint64_t v28 = SAUISash.init(app:)(v27);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  [v26 setSash:v28];

  type metadata accessor for SiriKitAceViewBuilder();
  uint64_t v30 = v1[6];
  uint64_t v29 = v1[7];
  __swift_project_boxed_opaque_existential_1(v33, v30);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v29 + 8))(v35, v30, v29);
  dispatch thunk of static SiriKitAceViewBuilder.makeBuilder(deviceState:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  uint64_t v31 = v26;
  dispatch thunk of SiriKitAceViewBuilder.addSnippet(snippet:)();
  swift_release();

  uint64_t v13 = dispatch thunk of SiriKitAceViewBuilder.build()();
  swift_release();

  return (void *)v13;
}

uint64_t closure #1 in CallRecordTableSnippetBuilder.makeItemGroup()@<X0>(void **a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  void (*v11)(long long *__return_ptr, uint64_t, uint64_t);
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t result;
  void v19[2];
  void *v20;
  long long v21[2];
  void v22[2];
  void v23[6];

  uint64_t v20 = a3;
  uint64_t v5 = type metadata accessor for CATOption();
  __chkstk_darwin(v5 - 8);
  v19[1] = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *a1;
  id v8 = a2 + 3;
  uint64_t v10 = a2[6];
  uint64_t v9 = a2[7];
  __swift_project_boxed_opaque_existential_1(a2 + 3, v10);
  uint64_t v11 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v9 + 8);
  NSString v12 = v7;
  v11(v21, v10, v9);
  type metadata accessor for PhoneCallDisplayTextCATs();
  type metadata accessor for CATGlobals();
  uint64_t v13 = a2[6];
  uint64_t v14 = a2[7];
  __swift_project_boxed_opaque_existential_1(v8, v13);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v14 + 8))(v22, v13, v14);
  CATGlobals.__allocating_init(device:)();
  static CATOption.defaultMode.getter();
  uint64_t v15 = CATWrapper.__allocating_init(options:globals:)();
  v22[0] = v12;
  v22[1] = v12;
  outlined init with take of AppSelectionSignalComponent(v21, (uint64_t)v23);
  uint64_t v23[5] = v15;
  uint64_t v16 = v12;
  uint64_t v17 = SCHCardItemComponents.toCardItem()();
  unint64_t result = outlined destroy of SCHCardItemComponents((uint64_t)v22);
  *uint64_t v20 = v17;
  return result;
}

uint64_t CallRecordTableSnippetBuilder.init(app:intent:intentResponse:sharedGlobals:appInfoBuilder:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, long long *a4@<X3>, long long *a5@<X4>, void *a6@<X8>)
{
  *a6 = a1;
  a6[1] = a2;
  a6[2] = a3;
  outlined init with take of AppSelectionSignalComponent(a4, (uint64_t)(a6 + 3));

  return outlined init with take of AppSelectionSignalComponent(a5, (uint64_t)(a6 + 8));
}

uint64_t protocol witness for IdiomSensitiveViewBuilder.makeViewsForMac(utteranceViews:_:) in conformance CallRecordTableSnippetBuilder(uint64_t a1, uint64_t (*a2)(void *, void))
{
  return FaceTimeSettingsBuilder.makeViewsForMac(utteranceViews:_:)(a1, a2);
}

uint64_t destroy for CallRecordTableSnippetBuilder(uint64_t a1)
{
  swift_release();

  __swift_destroy_boxed_opaque_existential_1(a1 + 24);

  return __swift_destroy_boxed_opaque_existential_1(a1 + 64);
}

uint64_t initializeWithCopy for CallRecordTableSnippetBuilder(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = a2 + 24;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v7;
  uint64_t v8 = v7;
  uint64_t v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_retain();
  id v10 = v4;
  id v11 = v5;
  v9(a1 + 24, v6, v8);
  long long v12 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 88) = v12;
  (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1 + 64, a2 + 64);
  return a1;
}

void *assignWithCopy for CallRecordTableSnippetBuilder(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  id v4 = (void *)a2[1];
  uint64_t v5 = (void *)a1[1];
  a1[1] = v4;
  id v6 = v4;

  long long v7 = (void *)a2[2];
  uint64_t v8 = (void *)a1[2];
  a1[2] = v7;
  id v9 = v7;

  __swift_assign_boxed_opaque_existential_1(a1 + 3, a2 + 3);
  __swift_assign_boxed_opaque_existential_1(a1 + 8, a2 + 8);
  return a1;
}

void *__swift_memcpy104_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x68uLL);
}

uint64_t assignWithTake for CallRecordTableSnippetBuilder(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  id v4 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  uint64_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  __swift_destroy_boxed_opaque_existential_1(a1 + 64);
  long long v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for CallRecordTableSnippetBuilder(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 104))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CallRecordTableSnippetBuilder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CallRecordTableSnippetBuilder()
{
  return &type metadata for CallRecordTableSnippetBuilder;
}

uint64_t outlined destroy of SCHRowCardSectionComponentsFactory(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for closure #1 in CallRecordTableSnippetBuilder.makeItemGroup()@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  return closure #1 in CallRecordTableSnippetBuilder.makeItemGroup()(a1, *(void **)(v2 + 16), a2);
}

uint64_t outlined destroy of SCHCardItemComponents(uint64_t a1)
{
  return a1;
}

void *ConfirmationViewTemplate.yes.getter@<X0>(void *a1@<X8>)
{
  return outlined init with copy of ConfirmationViewTemplate.Button(v1, a1);
}

void *outlined init with copy of ConfirmationViewTemplate.Button(void *a1, void *a2)
{
  return a2;
}

void *ConfirmationViewTemplate.no.getter@<X0>(void *a1@<X8>)
{
  return outlined init with copy of ConfirmationViewTemplate.Button((void *)(v1 + 56), a1);
}

uint64_t ConfirmationViewTemplate.subtitle.getter()
{
  return OUTLINED_FUNCTION_7_0();
}

uint64_t ConfirmationViewTemplate.style.getter()
{
  return OUTLINED_FUNCTION_7_0();
}

double static ConfirmationViewTemplate.makeDefaultConfirmationViewTemplate(labels:sharedGlobals:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11 = a5[4];
  __swift_project_boxed_opaque_existential_1(a5, a5[3]);
  long long v12 = *(void (**)(uint64_t))(v11 + 8);
  uint64_t v13 = OUTLINED_FUNCTION_1_38();
  v12(v13);
  static ConfirmationViewTemplate.Button.makeDefaultYesButton(label:deviceState:)(a1, a2, v27, v25);
  long long v22 = v25[1];
  long long v23 = v25[0];
  long long v21 = v25[2];
  uint64_t v14 = v26;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  uint64_t v15 = OUTLINED_FUNCTION_1_38();
  v12(v15);
  static ConfirmationViewTemplate.Button.makeDefaultNoButton(label:deviceState:)(a3, a4, v24, v27);
  long long v19 = v27[1];
  long long v20 = v27[0];
  long long v18 = v27[2];
  uint64_t v16 = v28;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  *(_OWORD *)a6 = v23;
  *(_OWORD *)(a6 + 16) = v22;
  *(_OWORD *)(a6 + 32) = v21;
  *(void *)(a6 + 48) = v14;
  *(_OWORD *)(a6 + 56) = v20;
  *(_OWORD *)(a6 + 72) = v19;
  *(_OWORD *)(a6 + 88) = v18;
  *(void *)(a6 + 104) = v16;
  double result = 0.0;
  *(_OWORD *)(a6 + 112) = 0u;
  *(_OWORD *)(a6 + 128) = 0u;
  *(_OWORD *)(a6 + 144) = 0u;
  return result;
}

uint64_t static ConfirmationViewTemplate.Button.makeDefaultYesButton(label:deviceState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  return static ConfirmationViewTemplate.Button.makeDefaultYesButton(label:deviceState:)(a1, a2, a3, a4);
}

{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t result;
  uint64_t v20;

  uint64_t v8 = type metadata accessor for CommonDirectAction();
  __chkstk_darwin(v8);
  id v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;
  swift_storeEnumTagMultiPayload();
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for SKIDirectInvocationPayload);
  swift_bridgeObjectRetain();
  CommonDirectAction.identifier.getter();
  uint64_t v14 = SKIDirectInvocationPayload.__allocating_init(identifier:)();
  uint64_t v15 = CommonDirectAction.userData.getter();
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v15);
  uint64_t v17 = v16;
  swift_bridgeObjectRelease();
  outlined bridged method (mbnn) of @objc SKIDirectInvocationPayload.userData.setter(v17, v14);
  long long v18 = SKIDirectInvocationPayload.toStartLocalRequest(deviceState:)(a3);

  double result = outlined destroy of CommonDirectAction((uint64_t)v10);
  *a4 = a1;
  a4[1] = a2;
  a4[2] = v11;
  a4[3] = v13;
  a4[4] = 0;
  a4[5] = 0;
  a4[6] = v18;
  return result;
}

uint64_t static ConfirmationViewTemplate.Button.makeDefaultNoButton(label:deviceState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  return static ConfirmationViewTemplate.Button.makeDefaultYesButton(label:deviceState:)(a1, a2, a3, a4);
}

__n128 ConfirmationViewTemplate.init(yes:no:title:subtitle:style:)@<Q0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  long long v9 = *a2;
  uint64_t v10 = *((void *)a2 + 2);
  uint64_t v11 = *((void *)a2 + 3);
  uint64_t v12 = *((void *)a2 + 6);
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v15 = *(void *)(a1 + 48);
  *(_OWORD *)a9 = *(_OWORD *)a1;
  *(void *)(a9 + 16) = v13;
  *(void *)(a9 + 24) = v14;
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(a1 + 32);
  *(void *)(a9 + 48) = v15;
  *(_OWORD *)(a9 + 56) = v9;
  *(void *)(a9 + 72) = v10;
  *(void *)(a9 + 80) = v11;
  __n128 result = (__n128)a2[2];
  *(__n128 *)(a9 + 88) = result;
  *(void *)(a9 + 104) = v12;
  *(void *)(a9 + 112) = a3;
  *(void *)(a9 + 120) = a4;
  *(void *)(a9 + 128) = a5;
  *(void *)(a9 + 136) = a6;
  *(void *)(a9 + 144) = a7;
  *(void *)(a9 + 152) = a8;
  return result;
}

uint64_t ConfirmationViewTemplate.Button.confirmationOptionTypes.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ConfirmationViewTemplate.Button.command.getter()
{
  return swift_unknownObjectRetain();
}

id ConfirmationViewTemplate.Button.asSASTButtonItem.getter()
{
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for SASTButtonItem);
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_46A030;
  *(void *)(v3 + 32) = v0[6];
  uint64_t v5 = v3;
  specialized Array._endMutation()();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  return SASTButtonItem.init(label:commands:centered:)(v1, v2, v5, 1);
}

id ConfirmationViewTemplate.Button.asConfirmationOption.getter()
{
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for SAUIConfirmationOption);
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v6 = v0[5];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_46A030;
  *(void *)(v7 + 32) = v0[6];
  uint64_t v9 = v7;
  specialized Array._endMutation()();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return SAUIConfirmationOption.init(label:type:iconType:commands:)(v1, v2, v3, v4, v5, v6, v9);
}

double ConfirmationViewTemplate.Button.init(label:confirmationOptionTypes:command:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  swift_getObjectType();
  specialized ConfirmationViewTemplate.Button.init(label:confirmationOptionTypes:command:)(a1, a2, a3, a4, a5, a6, a7, v18);
  long long v16 = v18[1];
  *(_OWORD *)a8 = v18[0];
  *(_OWORD *)(a8 + 16) = v16;
  double result = *(double *)&v19;
  *(_OWORD *)(a8 + 32) = v19;
  *(void *)(a8 + 48) = v20;
  return result;
}

uint64_t specialized ConfirmationViewTemplate.Button.init(label:confirmationOptionTypes:command:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  *a8 = result;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = a4;
  a8[4] = a5;
  a8[5] = a6;
  a8[6] = a7;
  return result;
}

uint64_t destroy for ConfirmationViewTemplate()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ConfirmationViewTemplate(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  uint64_t v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  uint64_t v9 = a2[13];
  a1[12] = a2[12];
  a1[13] = v9;
  uint64_t v10 = a2[15];
  a1[14] = a2[14];
  a1[15] = v10;
  uint64_t v11 = a2[17];
  a1[16] = a2[16];
  a1[17] = v11;
  uint64_t v12 = a2[19];
  a1[18] = a2[18];
  a1[19] = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ConfirmationViewTemplate(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  a1[12] = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[13] = a2[13];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[14] = a2[14];
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[16] = a2[16];
  a1[17] = a2[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[18] = a2[18];
  a1[19] = a2[19];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *__swift_memcpy160_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xA0uLL);
}

uint64_t assignWithTake for ConfirmationViewTemplate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_unknownObjectRelease();
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_unknownObjectRelease();
  uint64_t v8 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ConfirmationViewTemplate(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 160))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConfirmationViewTemplate(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 160) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 160) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConfirmationViewTemplate()
{
  return &type metadata for ConfirmationViewTemplate;
}

uint64_t destroy for ConfirmationViewTemplate.Button()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

void *initializeWithCopy for ConfirmationViewTemplate.Button(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for ConfirmationViewTemplate.Button(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t assignWithTake for ConfirmationViewTemplate.Button(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_unknownObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ConfirmationViewTemplate.Button(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConfirmationViewTemplate.Button(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConfirmationViewTemplate.Button()
{
  return &type metadata for ConfirmationViewTemplate.Button;
}

uint64_t OUTLINED_FUNCTION_1_38()
{
  return v0;
}

uint64_t OutputPublisherWrapper.__allocating_init(outputPublisher:outputPublisherAsync:)(long long *a1, long long *a2)
{
  uint64_t v4 = swift_allocObject();
  outlined init with take of AppSelectionSignalComponent(a1, v4 + 16);
  outlined init with take of AppSelectionSignalComponent(a2, v4 + 56);
  return v4;
}

uint64_t OutputPublisherWrapper.init(outputPublisher:outputPublisherAsync:)(long long *a1, long long *a2)
{
  outlined init with take of AppSelectionSignalComponent(a1, v2 + 16);
  outlined init with take of AppSelectionSignalComponent(a2, v2 + 56);
  return v2;
}

void *PhoneProtectedAppCheckStrategy.protectedAppCheck(_:appsToBeUnlocked:)(uint64_t a1, uint64_t a2)
{
  if (PhoneProtectedAppCheckStrategy.shouldDisableProtectedAppsCheck()())
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.siriPhone);
    uint64_t v4 = (void *)Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_1_34(v5))
    {
      uint64_t v6 = (_DWORD *)OUTLINED_FUNCTION_3_36();
      OUTLINED_FUNCTION_14_0();
      OUTLINED_FUNCTION_7_31();
      *uint64_t v6 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000026, 0x8000000000493540, &v10);
      OUTLINED_FUNCTION_0_27();
      OUTLINED_FUNCTION_9_27(&dword_0, v7, v8, "#PhoneProtectedAppCheckStrategy %s ProtectedAppCheck disabled, returning empty!");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }

    return _swiftEmptyArrayStorage;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return (void *)a2;
}

void PhoneProtectedAppCheckStrategy.protectedAppCheck(_:didProduce:)()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.siriPhone);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = OUTLINED_FUNCTION_14_0();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315650;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000020, 0x8000000000493570, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2080;
    type metadata accessor for ProtectedAppStatus();
    swift_bridgeObjectRetain();
    uint64_t v4 = Array.description.getter();
    unint64_t v6 = v5;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v6, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v3 + 22) = 2080;
    ProtectedAppCheck.appIDs.getter();
    uint64_t v7 = Array.description.getter();
    unint64_t v9 = v8;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v1, v2, "#PhoneProtectedAppCheckStrategy %s called with status %s for %s", (uint8_t *)v3, 0x20u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {

    swift_release_n();
    swift_bridgeObjectRelease_n();
  }
}

uint64_t PhoneProtectedAppCheckStrategy.shouldDisableProtectedAppsCheck()()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[11];
  __swift_project_boxed_opaque_existential_1(v0 + 7, v1);
  uint64_t v3 = *(void *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 56))(v1, v2);
  LOBYTE(v1) = (*(uint64_t (**)(void))(v3 + 256))();
  swift_release();
  if (v1)
  {
    OUTLINED_FUNCTION_5_29();
    if (PhoneCallNLIntent.isEmergencyCall()())
    {
      OUTLINED_FUNCTION_8_31();
      if (!v4) {
        swift_once();
      }
      uint64_t v5 = type metadata accessor for Logger();
      __swift_project_value_buffer(v5, (uint64_t)static Logger.siriPhone);
      unint64_t v6 = (void *)Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_1_34(v7))
      {
        unint64_t v8 = (_DWORD *)OUTLINED_FUNCTION_3_36();
        OUTLINED_FUNCTION_14_0();
        OUTLINED_FUNCTION_7_31();
        *unint64_t v8 = 136315138;
        OUTLINED_FUNCTION_1_39(v9);
        OUTLINED_FUNCTION_0_27();
        uint64_t v12 = "#PhoneProtectedAppCheckStrategy %s isEmergency = true";
LABEL_19:
        OUTLINED_FUNCTION_9_27(&dword_0, v10, v11, v12);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_6();
        OUTLINED_FUNCTION_6();

        uint64_t v18 = 1;
        goto LABEL_22;
      }
    }
    else
    {
      OUTLINED_FUNCTION_5_29();
      if (PhoneCallNLIntent.isOutgoingCallExcludeCallBackAndRedial()()
        || (__swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]), PhoneCallNLIntent.isSearchCallOrVoiceMail()()))
      {
        uint64_t v18 = 0;
        goto LABEL_22;
      }
      OUTLINED_FUNCTION_8_31();
      if (!v4) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      __swift_project_value_buffer(v19, (uint64_t)static Logger.siriPhone);
      unint64_t v6 = (void *)Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_1_34(v20))
      {
        long long v21 = (_DWORD *)OUTLINED_FUNCTION_3_36();
        OUTLINED_FUNCTION_14_0();
        OUTLINED_FUNCTION_7_31();
        *long long v21 = 136315138;
        OUTLINED_FUNCTION_1_39(v22);
        OUTLINED_FUNCTION_0_27();
        uint64_t v12 = "#PhoneProtectedAppCheckStrategy %s Not a calling or call history request";
        goto LABEL_19;
      }
    }
  }
  else
  {
    OUTLINED_FUNCTION_8_31();
    if (!v4) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.siriPhone);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      long long v16 = (uint8_t *)OUTLINED_FUNCTION_3_36();
      OUTLINED_FUNCTION_14_0();
      OUTLINED_FUNCTION_7_31();
      *(_DWORD *)long long v16 = 136315138;
      OUTLINED_FUNCTION_1_39(v17);
      OUTLINED_FUNCTION_0_27();
      _os_log_impl(&dword_0, v14, v15, "#PhoneProtectedAppCheckStrategy %s ProtectedApps is disabled", v16, 0xCu);
      uint64_t v18 = 1;
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();

      goto LABEL_22;
    }
  }
  uint64_t v18 = 1;
LABEL_22:
  OUTLINED_FUNCTION_8_31();
  if (!v4) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.siriPhone);
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = swift_slowAlloc();
    uint64_t v28 = OUTLINED_FUNCTION_14_0();
    *(_DWORD *)uint64_t v26 = 136315394;
    OUTLINED_FUNCTION_1_39(v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v26 + 12) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v24, v25, "#PhoneProtectedAppCheckStrategy %s --> %{BOOL}d", (uint8_t *)v26, 0x12u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }

  return v18;
}

uint64_t OutputPublisherWrapper.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  return v0;
}

uint64_t OutputPublisherWrapper.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);

  return swift_deallocClassInstance();
}

uint64_t protocol witness for ProtectedAppCheckStrategy.protectedAppCheck(_:appsToBeUnlocked:) in conformance PhoneProtectedAppCheckStrategy()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))();
}

uint64_t protocol witness for ProtectedAppCheckStrategy.protectedAppCheck(_:appsToIncludeInLockedAppDialog:) in conformance PhoneProtectedAppCheckStrategy()
{
  return ProtectedAppCheckStrategy.protectedAppCheck(_:appsToIncludeInLockedAppDialog:)();
}

uint64_t protocol witness for ProtectedAppCheckStrategy.protectedAppCheckShouldProduceOutputForHiddenApps(_:) in conformance PhoneProtectedAppCheckStrategy()
{
  return ProtectedAppCheckStrategy.protectedAppCheckShouldProduceOutputForHiddenApps(_:)();
}

uint64_t protocol witness for ProtectedAppCheckStrategy.protectedAppCheck(_:didProduce:) in conformance PhoneProtectedAppCheckStrategy()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t protocol witness for ProtectedAppCheckStrategy.protectedAppCheck(_:needsAppNameForAppID:) in conformance PhoneProtectedAppCheckStrategy()
{
  return ProtectedAppCheckStrategy.protectedAppCheck(_:needsAppNameForAppID:)();
}

uint64_t type metadata accessor for PhoneProtectedAppCheckStrategy()
{
  return self;
}

uint64_t OUTLINED_FUNCTION_0_27()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_1_39(uint64_t a1, ...)
{
  va_start(va, a1);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, (v1 - 32) | 0x8000000000000000, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_3_36()
{
  return swift_slowAlloc();
}

void OUTLINED_FUNCTION_9_27(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t static SeasRulesHelper.getContactDonationInfo(phoneCallNLIntent:appBundleIds:)(void *a1, uint64_t a2)
{
  uint64_t i = (uint64_t *)a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, (uint64_t)i);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 24);
  uint64_t v6 = OUTLINED_FUNCTION_0_28();
  uint64_t v7 = *(void *)(v5(v6) + 16);
  swift_bridgeObjectRelease();
  if (v7 == 1)
  {
    uint64_t v8 = OUTLINED_FUNCTION_0_28();
    uint64_t v9 = v5(v8);
    if (!*(void *)(v9 + 16)) {
      goto LABEL_23;
    }
    outlined init with copy of SignalProviding(v9 + 32, (uint64_t)v34);
    swift_bridgeObjectRelease();
    uint64_t v10 = v35;
    uint64_t v11 = v36;
    __swift_project_boxed_opaque_existential_1(v34, v35);
    uint64_t i = (uint64_t *)SiriPhoneContact.getVocabularyAppsBundleSet()(v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
    if (one-time initialization token for siriPhone != -1) {
LABEL_24:
    }
      swift_once();
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.siriPhone);
    swift_bridgeObjectRetain_n();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
      v34[0] = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v15 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v16 = a2;
      uint64_t v17 = Set.description.getter();
      unint64_t v19 = v18;
      swift_bridgeObjectRelease();
      uint64_t v20 = v17;
      a2 = v16;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v19, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v13, v14, "#SeasContactInSingleAppRule: vocabularyAppsBundleSet %s", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    specialized Set.contains(_:)(0x73746361746E6F43, 0xE800000000000000, (uint64_t)i);
    uint64_t v26 = *(void *)(a2 + 16);
    if (v26)
    {
      uint64_t v27 = (uint64_t)i;
      type metadata accessor for App();
      swift_bridgeObjectRetain();
      uint64_t v28 = 0;
      uint64_t v33 = 0;
      for (uint64_t i = (uint64_t *)(a2 + 40); ; i += 2)
      {
        uint64_t v29 = *(i - 1);
        a2 = *i;
        swift_bridgeObjectRetain_n();
        App.__allocating_init(appIdentifier:)();
        Swift::Bool v30 = App.isFirstParty()();
        swift_release();
        if (v30 || (specialized Set.contains(_:)(v29, a2, v27), (v31 & 1) == 0))
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          if (__OFADD__(v28++, 1))
          {
            __break(1u);
LABEL_23:
            __break(1u);
            goto LABEL_24;
          }
          uint64_t v33 = v29;
        }
        if (!--v26)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return v33;
        }
      }
    }
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.siriPhone);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl(&dword_0, v22, v23, "#SeasRulesHelper contacts is not equal 1, return nil", v24, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
}

PhoneCallFlowDelegatePlugin::ContactDonationInfo __swiftcall ContactDonationInfo.init()()
{
  uint64_t v0 = 0;
  uint64_t v1 = (void *)0xE000000000000000;
  Swift::Int v2 = 0;
  Swift::Bool v3 = 0;
  result.contactInNumberOfThirdPartyApps = v2;
  result.thirdPartyAppId._object = v1;
  result.thirdPartyAppId._uint64_t countAndFlagsBits = v0;
  result.contactExistsInFirstParty = v3;
  return result;
}

uint64_t BargeInCapableSection.id.getter(uint64_t a1)
{
  return a1;
}

uint64_t ContactDonationInfo.contactInNumberOfThirdPartyApps.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t ContactDonationInfo.contactInNumberOfThirdPartyApps.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t ContactDonationInfo.contactExistsInFirstParty.getter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return a4 & 1;
}

uint64_t ContactDonationInfo.contactExistsInFirstParty.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 24) = result;
  return result;
}

Swift::Void (__swiftcall *ContactDonationInfo.contactExistsInFirstParty.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

PhoneCallFlowDelegatePlugin::ContactDonationInfo __swiftcall ContactDonationInfo.init(thirdPartyAppId:contactInNumberOfThirdPartyApps:contactExistsInFirstParty:)(Swift::String thirdPartyAppId, Swift::Int contactInNumberOfThirdPartyApps, Swift::Bool contactExistsInFirstParty)
{
  Swift::Bool v3 = contactExistsInFirstParty;
  result.thirdPartyAppId = thirdPartyAppId;
  result.contactInNumberOfThirdPartyApps = contactInNumberOfThirdPartyApps;
  result.contactExistsInFirstParty = v3;
  return result;
}

ValueMetadata *type metadata accessor for SeasRulesHelper()
{
  return &type metadata for SeasRulesHelper;
}

uint64_t initializeWithCopy for ContactDonationInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ContactDonationInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ContactDonationInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContactDonationInfo(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 25))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContactDonationInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContactDonationInfo()
{
  return &type metadata for ContactDonationInfo;
}

uint64_t OUTLINED_FUNCTION_0_28()
{
  return v0;
}

uint64_t static SearchCallHistoryHelper.isLeadingSavedVoiceMail(isFirstPage:intentResponse:intent:)(char a1, uint64_t a2, void *a3)
{
  if ((a1 & 1) == 0) {
    return 0;
  }
  uint64_t result = INSearchCallHistoryIntentResponse.callRecordsCount.getter();
  if (result) {
    return !INSearchCallHistoryIntentResponse.newRecordsCount.getter()
  }
        && ((unint64_t)[a3 callTypes] & 8) == 0;
  return result;
}

void one-time initialization function for logPrefix()
{
  static SearchCallHistoryHelper.logPrefix = (uint64_t)&type metadata for SearchCallHistoryHelper;
  unk_589080 = &outlined read-only object #0 of one-time initialization function for logPrefix;
  qword_589088 = 0;
  unk_589090 = 0;
}

{
  static Transformer<>.logPrefix = (uint64_t)&type metadata for String;
  unk_5D4930 = &outlined read-only object #0 of one-time initialization function for logPrefix;
  qword_5D4938 = 0;
  unk_5D4940 = 0;
}

uint64_t static SearchCallHistoryHelper.generateSingleResultVoicemailModel(item:searchCallHistorySharedGlobals:sharedGlobals:isLastPage:isReadMultipleVoicemails:)()
{
  OUTLINED_FUNCTION_1_0();
  *(unsigned char *)(v0 + 505) = v1;
  *(unsigned char *)(v0 + 504) = v2;
  *(void *)(v0 + 232) = v3;
  *(void *)(v0 + 240) = v4;
  *(void *)(v0 + 216) = v5;
  *(void *)(v0 + 224) = v6;
  uint64_t v7 = type metadata accessor for SpeakableString();
  *(void *)(v0 + 248) = v7;
  OUTLINED_FUNCTION_19_0(v7);
  *(void *)(v0 + 256) = v8;
  *(void *)(v0 + 264) = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v9);
  *(void *)(v0 + 272) = OUTLINED_FUNCTION_28_2();
  *(void *)(v0 + 280) = swift_task_alloc();
  *(void *)(v0 + 288) = swift_task_alloc();
  *(void *)(v0 + 296) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for SearchCallHistoryBinaryButtonModel();
  OUTLINED_FUNCTION_11_0(v10);
  *(void *)(v0 + 304) = OUTLINED_FUNCTION_28_2();
  *(void *)(v0 + 312) = swift_task_alloc();
  *(void *)(v0 + 320) = swift_task_alloc();
  *(void *)(v0 + 328) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for CommonDirectAction();
  *(void *)(v0 + 336) = v11;
  OUTLINED_FUNCTION_11_0(v11);
  *(void *)(v0 + 344) = swift_task_alloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v12, v13, v14);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void *v7;
  void *v8;
  uint64_t (*v10)(void);
  uint64_t v11;

  char v1 = v0[43];
  uint64_t v3 = v0[29];
  char v2 = (void *)v0[30];
  swift_storeEnumTagMultiPayload();
  uint64_t v4 = v2[3];
  v0[44] = v4;
  uint64_t v5 = v2[4];
  v0[45] = v5;
  v0[46] = __swift_project_boxed_opaque_existential_1(v2, v4);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v0[47] = v6;
  v0[48] = (v5 + 8) & 0xFFFFFFFFFFFFLL | 0xD386000000000000;
  v6(v4, v5);
  v0[49] = CommonDirectAction.toSAIntentGroupRunSiriKitExecutor(deviceState:)(v0 + 2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  _s27PhoneCallFlowDelegatePlugin18CommonDirectActionOWOhTm_0(v1, (void (*)(void))type metadata accessor for CommonDirectAction);
  uint64_t v7 = *(void **)(v3 + 192);
  v0[50] = v7;
  uint64_t v10 = (uint64_t (*)(void))(*(void *)(class metadata base offset for PhoneCallDisplayTextCATsSimple + *v7 + 280)
                          + **(int **)(class metadata base offset for PhoneCallDisplayTextCATsSimple + *v7 + 280));
  uint64_t v8 = (void *)swift_task_alloc();
  v0[51] = v8;
  *uint64_t v8 = v0;
  v8[1] = static SearchCallHistoryHelper.generateSingleResultVoicemailModel(item:searchCallHistorySharedGlobals:sharedGlobals:isLastPage:isReadMultipleVoicemails:);
  return v10();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v8 = v7;
  *(void *)(v5 + 416) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 424) = v3;
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  int v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_16_1();
  char v1 = *(unsigned __int8 *)(v0 + 505);
  char v2 = *(unsigned char *)(v0 + 504);
  uint64_t v3 = dispatch thunk of LabelExecutionResult.subscript.getter();
  uint64_t v5 = v4;
  *(void *)(v0 + 200) = v3;
  *(void *)(v0 + 208) = v4;
  swift_release();
  *(void *)(v0 + 432) = v5;
  if (v1 != 1 || (v2 & 1) != 0)
  {
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 456) = v11;
    *uint64_t v11 = v0;
    v11[1] = static SearchCallHistoryHelper.generateSingleResultVoicemailModel(item:searchCallHistorySharedGlobals:sharedGlobals:isLastPage:isReadMultipleVoicemails:);
    uint64_t v13 = *(void *)(v0 + 392);
    uint64_t v12 = *(void *)(v0 + 400);
    uint64_t v14 = *(void *)(v0 + 312);
    return static SearchCallHistoryHelper.buildSearchCallHistoryCallCancelModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:)(v14, v12, v13);
  }
  else
  {
    (*(void (**)(void, void))(v0 + 376))(*(void *)(v0 + 352), *(void *)(v0 + 360));
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 440) = v6;
    *uint64_t v6 = v0;
    v6[1] = static SearchCallHistoryHelper.generateSingleResultVoicemailModel(item:searchCallHistorySharedGlobals:sharedGlobals:isLastPage:isReadMultipleVoicemails:);
    uint64_t v8 = *(void *)(v0 + 392);
    uint64_t v7 = *(void *)(v0 + 400);
    uint64_t v9 = *(void *)(v0 + 320);
    return static SearchCallHistoryHelper.buildSearchCallHistoryCallNextModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:deviceState:)(v9, v7, v8, v0 + 136);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  *(void *)(v3 + 448) = v0;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1(v3 + 136);
  if (v0) {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  void (*v8)(uint64_t);
  unint64_t v9;
  char v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  void (*v16)(uint64_t);
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_29();
  uint64_t v3 = v1[28];
  outlined init with take of SearchCallHistoryBinaryButtonModel(v1[40], v1[41], (void (*)(void))type metadata accessor for SearchCallHistoryBinaryButtonModel);
  if (*(void *)(*(void *)(v3 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin15PhoneCallRecord_contactIds) + 16))
  {
    OUTLINED_FUNCTION_13_12();
    uint64_t v4 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v5 = OUTLINED_FUNCTION_16_22();
      v6(v5);
      uint64_t v3 = v2;
      SpeakableString.print.getter();
      uint64_t v7 = OUTLINED_FUNCTION_20_13();
      v8(v7);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_34_3();
        uint64_t v4 = v11;
      }
      uint64_t v9 = v4[2];
      char v2 = v9 + 1;
      if (v9 >= v4[3] >> 1)
      {
        OUTLINED_FUNCTION_33_6();
        uint64_t v4 = v12;
      }
      OUTLINED_FUNCTION_30_8();
    }
    while (!v10);
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_43_7();
  specialized Collection.first.getter();
  if (__swift_getEnumTagSinglePayload(v3, 1, v0) == 1)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v1[37], &demangling cache variable for type metadata for SpeakableString?);
  }
  else
  {
    SpeakableString.print.getter();
    uint64_t v13 = OUTLINED_FUNCTION_31_9();
    v14(v13);
  }
  os_log_type_t v15 = OUTLINED_FUNCTION_10_19();
  v16(v15);
  uint64_t v17 = (void *)swift_task_alloc();
  v1[62] = v17;
  *uint64_t v17 = v1;
  v17[1] = static SearchCallHistoryHelper.generateSingleResultVoicemailModel(item:searchCallHistorySharedGlobals:sharedGlobals:isLastPage:isReadMultipleVoicemails:);
  OUTLINED_FUNCTION_52_1();
  OUTLINED_FUNCTION_28_1();
  return static SearchCallHistoryHelper.getVoicemailTranscript(item:messageStore:)(v18, v19);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  *(void *)(v3 + 464) = v0;
  swift_task_dealloc();
  if (v0) {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  void (*v8)(uint64_t);
  unint64_t v9;
  char v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  void (*v16)(uint64_t);
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_29();
  uint64_t v3 = v1[28];
  outlined init with take of SearchCallHistoryBinaryButtonModel(v1[39], v1[41], (void (*)(void))type metadata accessor for SearchCallHistoryBinaryButtonModel);
  if (*(void *)(*(void *)(v3 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin15PhoneCallRecord_contactIds) + 16))
  {
    OUTLINED_FUNCTION_13_12();
    uint64_t v4 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v5 = OUTLINED_FUNCTION_16_22();
      v6(v5);
      uint64_t v3 = v2;
      SpeakableString.print.getter();
      uint64_t v7 = OUTLINED_FUNCTION_20_13();
      v8(v7);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_34_3();
        uint64_t v4 = v11;
      }
      uint64_t v9 = v4[2];
      char v2 = v9 + 1;
      if (v9 >= v4[3] >> 1)
      {
        OUTLINED_FUNCTION_33_6();
        uint64_t v4 = v12;
      }
      OUTLINED_FUNCTION_30_8();
    }
    while (!v10);
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_43_7();
  specialized Collection.first.getter();
  if (__swift_getEnumTagSinglePayload(v3, 1, v0) == 1)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v1[37], &demangling cache variable for type metadata for SpeakableString?);
  }
  else
  {
    SpeakableString.print.getter();
    uint64_t v13 = OUTLINED_FUNCTION_31_9();
    v14(v13);
  }
  os_log_type_t v15 = OUTLINED_FUNCTION_10_19();
  v16(v15);
  uint64_t v17 = (void *)swift_task_alloc();
  v1[62] = v17;
  *uint64_t v17 = v1;
  v17[1] = static SearchCallHistoryHelper.generateSingleResultVoicemailModel(item:searchCallHistorySharedGlobals:sharedGlobals:isLastPage:isReadMultipleVoicemails:);
  OUTLINED_FUNCTION_52_1();
  OUTLINED_FUNCTION_28_1();
  return static SearchCallHistoryHelper.getVoicemailTranscript(item:messageStore:)(v18, v19);
}

{
  uint64_t *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *char v2 = v1;
  v1[22] = v0;
  v1[23] = v3;
  v1[24] = v4;
  uint64_t v5 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  id v24;
  uint64_t (*v25)(void);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  long long v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(*(void *)(v0 + 224) + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin15PhoneCallRecord_displayCallDetail, *(void *)(v0 + 288), &demangling cache variable for type metadata for SpeakableString?);
  if (OUTLINED_FUNCTION_25_9() == 1)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(*(void *)(v0 + 288), &demangling cache variable for type metadata for SpeakableString?);
    uint64_t v29 = 0xE000000000000000;
    Swift::Bool v30 = 0;
  }
  else
  {
    char v1 = SpeakableString.print.getter();
    uint64_t v29 = v2;
    Swift::Bool v30 = v1;
    uint64_t v3 = OUTLINED_FUNCTION_23_9();
    v4(v3);
  }
  if (!*(void *)(*(void *)(v0 + 224) + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin15PhoneCallRecord_dateCreated)) {
    goto LABEL_7;
  }
  uint64_t v5 = *(void *)(v0 + 280);
  uint64_t v6 = *(void *)(v0 + 248);
  dispatch thunk of DialogCalendar.dateTimeDescriptive.getter();
  if (__swift_getEnumTagSinglePayload(v5, 1, v6) == 1)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(*(void *)(v0 + 280), &demangling cache variable for type metadata for SpeakableString?);
LABEL_7:
    uint64_t v7 = 0;
    uint64_t v8 = 0xE000000000000000;
    goto LABEL_9;
  }
  uint64_t v7 = SpeakableString.print.getter();
  uint64_t v8 = v9;
  uint64_t v10 = OUTLINED_FUNCTION_23_9();
  v11(v10);
LABEL_9:
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(*(void *)(v0 + 224) + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin15PhoneCallRecord_callDuration, *(void *)(v0 + 272), &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v39 = v8;
  if (OUTLINED_FUNCTION_25_9() == 1)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(*(void *)(v0 + 272), &demangling cache variable for type metadata for SpeakableString?);
    uint64_t v27 = 0xE000000000000000;
    uint64_t v28 = 0;
  }
  else
  {
    uint64_t v12 = SpeakableString.print.getter();
    uint64_t v27 = v13;
    uint64_t v28 = v12;
    uint64_t v14 = OUTLINED_FUNCTION_23_9();
    v15(v14);
  }
  uint64_t v37 = *(_OWORD *)(v0 + 184);
  int v38 = *(void *)(v0 + 488);
  uint64_t v35 = *(void *)(v0 + 432);
  uint64_t v36 = *(void *)(v0 + 480);
  uint64_t v33 = *(void *)(v0 + 472);
  uint64_t v34 = *(void *)(v0 + 200);
  uint64_t v32 = *(void *)(v0 + 392);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
  uint64_t v17 = *(void *)(v0 + 352);
  unint64_t v18 = *(void *)(v0 + 360);
  unint64_t v19 = *(void *)(v0 + 344);
  uint64_t v20 = *(void *)(v0 + 328);
  uint64_t v21 = *(void *)(v0 + 304);
  char v31 = *(void *)(v0 + 216);
  uint64_t v22 = *(void *)(v0 + 224) + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin15PhoneCallRecord_callDurationInterval;
  if (*(unsigned char *)(v22 + 8)) {
    os_log_type_t v23 = 0.0;
  }
  else {
    os_log_type_t v23 = *(double *)v22;
  }
  swift_storeEnumTagMultiPayload();
  v16(v17, v18);
  uint64_t v24 = CommonDirectAction.toSAIntentGroupRunSiriKitExecutor(deviceState:)((void *)(v0 + 96));
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  _s27PhoneCallFlowDelegatePlugin18CommonDirectActionOWOhTm_0(v19, (void (*)(void))type metadata accessor for CommonDirectAction);
  outlined init with copy of SearchCallHistoryBinaryButtonModel(v20, v21);
  SingleResultVoicemailModel.init(displayName:displayCallDetail:displayDateTime:callDuration:callDurationInterval:transcript:transcriptTitle:callbackDirectInvocation:repeatDirectInvocation:contactIds:searchCallHistoryBinaryButtonModel:)(v36, v38, v30, v29, v7, v39, v28, v27, v31, v23, v37, v34, v35, v32, v24, v33, v21);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  _s27PhoneCallFlowDelegatePlugin18CommonDirectActionOWOhTm_0(v20, (void (*)(void))type metadata accessor for SearchCallHistoryBinaryButtonModel);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  return v25();
}

uint64_t static SearchCallHistoryHelper.generateSingleResultVoicemailModel(item:searchCallHistorySharedGlobals:sharedGlobals:isLastPage:isReadMultipleVoicemails:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_19_13();
  OUTLINED_FUNCTION_48();

  OUTLINED_FUNCTION_8_32();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_7();
  OUTLINED_FUNCTION_4_3();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10, a11, a12);
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_19_13();
  OUTLINED_FUNCTION_48();

  OUTLINED_FUNCTION_8_32();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_7();
  OUTLINED_FUNCTION_4_3();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10, a11, a12);
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_19_13();
  OUTLINED_FUNCTION_48();

  OUTLINED_FUNCTION_8_32();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38_7();
  OUTLINED_FUNCTION_4_3();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10, a11, a12);
}

uint64_t static SearchCallHistoryHelper.buildSearchCallHistoryCallNextModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:deviceState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[189] = a4;
  v4[183] = a3;
  v4[177] = a2;
  v4[171] = a1;
  v4[195] = type metadata accessor for CommonDirectAction();
  v4[201] = swift_task_alloc();
  return _swift_task_switch(static SearchCallHistoryHelper.buildSearchCallHistoryCallNextModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:deviceState:), 0, 0);
}

uint64_t static SearchCallHistoryHelper.buildSearchCallHistoryCallNextModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:deviceState:)()
{
  OUTLINED_FUNCTION_46_5();
  OUTLINED_FUNCTION_42_4();
  OUTLINED_FUNCTION_46_5();
  OUTLINED_FUNCTION_35_9();
  return _swift_asyncLet_get_throwing(v0 + 16, v0 + 1336, static SearchCallHistoryHelper.buildSearchCallHistoryCallNextModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:deviceState:), v0 + 1424);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  OUTLINED_FUNCTION_16_1();
  v1[207] = v0;
  if (v0)
  {
    return _swift_asyncLet_finish(v1 + 2);
  }
  else
  {
    v1[213] = v1[167];
    v1[214] = v1[168];
    swift_bridgeObjectRetain();
    return _swift_asyncLet_get_throwing(v1 + 82, v1 + 169, static SearchCallHistoryHelper.buildSearchCallHistoryCallNextModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:deviceState:), v1 + 196);
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(void *)(v1 + 1720) = v0;
  if (v0) {
    return OUTLINED_FUNCTION_21_1((uint64_t)static SearchCallHistoryHelper.buildSearchCallHistoryCallNextModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:deviceState:));
  }
  else {
    return OUTLINED_FUNCTION_21_1((uint64_t)static SearchCallHistoryHelper.buildSearchCallHistoryCallNextModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:deviceState:));
  }
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_29();
  char v1 = v0[201];
  uint64_t v2 = (void *)v0[189];
  uint64_t v3 = (void *)v0[183];
  uint64_t v4 = v0[171];
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  CommonDirectAction.toSAIntentGroupRunSiriKitExecutor(deviceState:)(v2);
  _s27PhoneCallFlowDelegatePlugin18CommonDirectActionOWOhTm_0(v1, (void (*)(void))type metadata accessor for CommonDirectAction);
  SearchCallHistoryBinaryButtonModel.init(primaryText:primaryAction:secondaryText:secondaryAction:)(v3, v4);
  OUTLINED_FUNCTION_28_1();
  return _swift_asyncLet_finish(v5);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)static SearchCallHistoryHelper.buildSearchCallHistoryCallNextModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:deviceState:));
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  swift_release();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)static SearchCallHistoryHelper.buildSearchCallHistoryCallNextModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:deviceState:));
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  swift_release_n();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  return v0();
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)static SearchCallHistoryHelper.buildSearchCallHistoryCallNextModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:deviceState:));
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  swift_release();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)static SearchCallHistoryHelper.buildSearchCallHistoryCallNextModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:deviceState:));
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  swift_release_n();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v0();
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  swift_bridgeObjectRelease();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)static SearchCallHistoryHelper.buildSearchCallHistoryCallNextModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:deviceState:));
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  swift_release();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)static SearchCallHistoryHelper.buildSearchCallHistoryCallNextModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:deviceState:));
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  swift_release_n();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v0();
}

uint64_t static SearchCallHistoryHelper.buildSearchCallHistoryCallCancelModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[173] = a3;
  v3[172] = a2;
  v3[171] = a1;
  return _swift_task_switch(static SearchCallHistoryHelper.buildSearchCallHistoryCallCancelModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:), 0, 0);
}

uint64_t static SearchCallHistoryHelper.buildSearchCallHistoryCallCancelModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:)()
{
  OUTLINED_FUNCTION_46_5();
  OUTLINED_FUNCTION_42_4();
  OUTLINED_FUNCTION_46_5();
  OUTLINED_FUNCTION_35_9();
  return _swift_asyncLet_get_throwing(v0 + 656, v0 + 1352, static SearchCallHistoryHelper.buildSearchCallHistoryCallCancelModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:), v0 + 1296);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  OUTLINED_FUNCTION_16_1();
  v1[174] = v0;
  if (v0)
  {
    return _swift_asyncLet_finish(v1 + 2);
  }
  else
  {
    v1[175] = v1[169];
    unsigned char v1[176] = v1[170];
    swift_bridgeObjectRetain();
    return _swift_asyncLet_get_throwing(v1 + 2, v1 + 167, static SearchCallHistoryHelper.buildSearchCallHistoryCallCancelModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:), v1 + 162);
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(void *)(v1 + 1416) = v0;
  if (v0) {
    return OUTLINED_FUNCTION_21_1((uint64_t)static SearchCallHistoryHelper.buildSearchCallHistoryCallCancelModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:));
  }
  else {
    return OUTLINED_FUNCTION_21_1((uint64_t)static SearchCallHistoryHelper.buildSearchCallHistoryCallCancelModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:));
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_19_13();
  OUTLINED_FUNCTION_48();
  char v1 = *(void **)(v0 + 1384);
  uint64_t v2 = *(void *)(v0 + 1368);
  uint64_t v3 = objc_allocWithZone((Class)SAUICloseAssistant);
  swift_bridgeObjectRetain();
  [v3 init];
  SearchCallHistoryBinaryButtonModel.init(primaryText:primaryAction:secondaryText:secondaryAction:)(v1, v2);
  OUTLINED_FUNCTION_4_3();
  return _swift_asyncLet_finish(v4);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)static SearchCallHistoryHelper.buildSearchCallHistoryCallCancelModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:));
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_22_10();
  uint64_t v0 = OUTLINED_FUNCTION_41_4();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)static SearchCallHistoryHelper.buildSearchCallHistoryCallCancelModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:));
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  swift_release_n();
  OUTLINED_FUNCTION_6_0();
  return v0();
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)static SearchCallHistoryHelper.buildSearchCallHistoryCallCancelModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:));
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_22_10();
  uint64_t v0 = OUTLINED_FUNCTION_41_4();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)static SearchCallHistoryHelper.buildSearchCallHistoryCallCancelModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:));
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  swift_release_n();
  OUTLINED_FUNCTION_47_0();
  return v0();
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  swift_bridgeObjectRelease();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)static SearchCallHistoryHelper.buildSearchCallHistoryCallCancelModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:));
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_22_10();
  uint64_t v0 = OUTLINED_FUNCTION_41_4();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)static SearchCallHistoryHelper.buildSearchCallHistoryCallCancelModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:));
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  swift_release_n();
  OUTLINED_FUNCTION_47_0();
  return v0();
}

uint64_t static SearchCallHistoryHelper.getVoicemailTranscript(item:messageStore:)(uint64_t a1, uint64_t a2)
{
  v2[9] = a1;
  v2[10] = a2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v2[11] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UUID();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[15] = swift_task_alloc();
  v2[16] = swift_task_alloc();
  return _swift_task_switch(static SearchCallHistoryHelper.getVoicemailTranscript(item:messageStore:), 0, 0);
}

void static SearchCallHistoryHelper.getVoicemailTranscript(item:messageStore:)()
{
  uint64_t v1 = v0[9] + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin15PhoneCallRecord_identifier;
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(v1, v0[16], &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v2 = type metadata accessor for SpeakableString();
  int v3 = OUTLINED_FUNCTION_25_9();
  uint64_t v4 = v0[16];
  if (v3 == 1)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v0[16], &demangling cache variable for type metadata for SpeakableString?);
    uint64_t v5 = 0;
    unint64_t v6 = 0xE000000000000000;
  }
  else
  {
    unint64_t v6 = v0[16];
    uint64_t v5 = SpeakableString.print.getter();
    OUTLINED_FUNCTION_51_2();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v4, v2);
  }
  v0[17] = v5;
  v0[18] = v6;
  uint64_t v9 = v0[11];
  uint64_t v8 = v0[12];
  UUID.init(uuidString:)();
  if (__swift_getEnumTagSinglePayload(v9, 1, v8) == 1)
  {
    uint64_t v10 = v0[11];
    swift_bridgeObjectRelease();
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v10, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.siriPhone);
    swift_retain_n();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      os_log_type_t v35 = v13;
      uint64_t v14 = swift_slowAlloc();
      v36[0] = OUTLINED_FUNCTION_10_0();
      *(_DWORD *)uint64_t v14 = 136315394;
      if (one-time initialization token for logPrefix != -1) {
        swift_once();
      }
      uint64_t v15 = v0[15];
      uint64_t v17 = static SearchCallHistoryHelper.logPrefix;
      uint64_t v16 = unk_589080;
      v36[1] = 0;
      _OWORD v36[2] = 0xE000000000000000;
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_44_6(v17, v16, v18, 0x8000000000493640);
      swift_bridgeObjectRelease();
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 2080;
      _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(v1, v15, &demangling cache variable for type metadata for SpeakableString?);
      int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v15, 1, v2);
      uint64_t v20 = v0[15];
      if (EnumTagSinglePayload == 1)
      {
        outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v0[15], &demangling cache variable for type metadata for SpeakableString?);
        uint64_t v21 = 0;
        unint64_t v22 = 0xE000000000000000;
      }
      else
      {
        unint64_t v22 = v0[15];
        uint64_t v21 = SpeakableString.print.getter();
        OUTLINED_FUNCTION_51_2();
        (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v20, v2);
      }
      v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_0, v12, v35, "%s Expected UUID vmIdentifier: %s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {
      swift_release_n();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_47_3();
    OUTLINED_FUNCTION_39();
    __asm { BRAA            X3, X16 }
  }
  uint64_t v24 = v0[13];
  uint64_t v23 = v0[14];
  uint64_t v25 = v0[12];
  uint64_t v26 = (void *)v0[10];
  (*(void (**)(uint64_t, void, uint64_t))(v24 + 32))(v23, v0[11], v25);
  __swift_project_boxed_opaque_existential_1(v26, v26[3]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>);
  unint64_t v27 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  uint64_t v28 = swift_allocObject();
  v0[19] = v28;
  *(_OWORD *)(v28 + 16) = xmmword_467710;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v24 + 16))(v28 + v27, v23, v25);
  uint64_t v29 = (void *)swift_task_alloc();
  v0[20] = v29;
  *uint64_t v29 = v0;
  v29[1] = static SearchCallHistoryHelper.getVoicemailTranscript(item:messageStore:);
  OUTLINED_FUNCTION_39();
  __asm { BRAA            X4, X16 }
}

uint64_t static SearchCallHistoryHelper.getVoicemailTranscript(item:messageStore:)()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 168) = v5;
  *(void *)(v3 + 176) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v6, v7, v8);
}

{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  id v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v26;
  void (*v27)(uint64_t);
  uint64_t v28;
  void (*v29)(uint64_t);
  uint64_t (*v30)(uint64_t, void *);
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;

  int v38 = v0;
  uint64_t v1 = v0[21];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8));
  }
  if (v2)
  {
    uint64_t v3 = v1 & 0xC000000000000001;
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, v3 == 0, v0[21]);
    if (v3) {
      uint64_t v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      uint64_t v4 = *(id *)(v0[21] + 32);
    }
    swift_bridgeObjectRelease();
    uint64_t v5 = Message.getTranscriptString()();
    if (!v6)
    {
      uint64_t countAndFlagsBits = v5._countAndFlagsBits;
      object = v5._object;
      uint64_t v26 = OUTLINED_FUNCTION_15_16();
      v27(v26);

      swift_bridgeObjectRelease();
      goto LABEL_24;
    }

    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.siriPhone);
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    uint64_t v8 = Logger.logObject.getter();
    uint64_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = OUTLINED_FUNCTION_21_13();
      uint64_t v33 = (void *)swift_slowAlloc();
      os_log_type_t v35 = OUTLINED_FUNCTION_10_0();
      *(_DWORD *)uint64_t v10 = 136315650;
      if (one-time initialization token for logPrefix != -1) {
        swift_once();
      }
      uint64_t v11 = v0[18];
      uint64_t v32 = v0[17];
      os_log_type_t v13 = static SearchCallHistoryHelper.logPrefix;
      uint64_t v12 = unk_589080;
      uint64_t v36 = 0;
      uint64_t v37 = 0xE000000000000000;
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_44_6(v13, v12, v14, 0x8000000000493640);
      swift_bridgeObjectRelease();
      v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 12) = 2080;
      swift_bridgeObjectRetain();
      v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v11, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v10 + 22) = 2112;
      swift_errorRetain();
      uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
      v0[6] = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      NSObject *v33 = v15;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl(&dword_0, v8, v9, "%s Error fetching voicemail transcript for: %s, error: %@", (uint8_t *)v10, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_49_4();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.siriPhone);
    swift_bridgeObjectRetain();
    uint64_t v17 = Logger.logObject.getter();
    uint64_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      os_log_type_t v35 = OUTLINED_FUNCTION_10_0();
      *(_DWORD *)uint64_t v19 = 136315394;
      if (one-time initialization token for logPrefix != -1) {
        swift_once();
      }
      uint64_t v20 = v0[18];
      uint64_t v34 = v0[17];
      uint64_t v21 = static SearchCallHistoryHelper.logPrefix;
      unint64_t v22 = unk_589080;
      uint64_t v36 = 0;
      uint64_t v37 = 0xE000000000000000;
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_44_6(v21, v22, v23, 0x8000000000493640);
      swift_bridgeObjectRelease();
      v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 12) = 2080;
      swift_bridgeObjectRetain();
      v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v20, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_0, v17, v18, "%s MessageStore can't find any message for: %s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
  }
  uint64_t v28 = OUTLINED_FUNCTION_15_16();
  v29(v28);
  uint64_t countAndFlagsBits = 0;
  object = (void *)0xE000000000000000;
LABEL_24:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::Bool v30 = (uint64_t (*)(uint64_t, void *))v0[1];
  return v30(countAndFlagsBits, object);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v15;
  void *v16;
  uint64_t v17[3];
  void *v18;
  uint64_t v19;

  uint64_t v18 = v0;
  swift_bridgeObjectRelease();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.siriPhone);
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = OUTLINED_FUNCTION_21_13();
    uint64_t v16 = (void *)swift_slowAlloc();
    v17[0] = OUTLINED_FUNCTION_10_0();
    *(_DWORD *)uint64_t v4 = 136315650;
    if (one-time initialization token for logPrefix != -1) {
      swift_once();
    }
    uint64_t v5 = v0[18];
    uint64_t v15 = v0[17];
    uint64_t v6 = static SearchCallHistoryHelper.logPrefix;
    uint64_t v7 = unk_589080;
    v17[1] = 0;
    v17[2] = 0xE000000000000000;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_44_6(v6, v7, v8, 0x8000000000493640);
    swift_bridgeObjectRelease();
    v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v5, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v4 + 22) = 2112;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[6] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v16 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&dword_0, v2, v3, "%s Error fetching voicemail transcript for: %s, error: %@", (uint8_t *)v4, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_49_4();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v10 = OUTLINED_FUNCTION_15_16();
  v11(v10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = OUTLINED_FUNCTION_47_3();
  return v13(v12);
}

void static SearchCallHistoryHelper.generateSearchCallHistoryModel(items:sharedGlobals:)(unint64_t a1)
{
  uint64_t v2 = type metadata accessor for SingleCallRecordModel();
  uint64_t v3 = OUTLINED_FUNCTION_19_0(v2);
  uint64_t v5 = v4;
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v8 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  while (v8)
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    if (v8 < 0)
    {
      __break(1u);
      return;
    }
    uint64_t v9 = 0;
    uint64_t v10 = v15;
    while (v8 != v9)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v11 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v11 = *(void *)(a1 + 8 * v9 + 32);
        swift_retain();
      }
      uint64_t v14 = v11;
      closure #1 in static SearchCallHistoryHelper.generateSearchCallHistoryModel(items:sharedGlobals:)(&v14, (uint64_t)v7);
      swift_release();
      uint64_t v15 = v10;
      unint64_t v12 = v10[2];
      if (v12 >= v10[3] >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v10 = v15;
      }
      ++v9;
      long long v10[2] = v12 + 1;
      outlined init with take of SearchCallHistoryBinaryButtonModel((uint64_t)v7, (uint64_t)v10+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v12, (void (*)(void))type metadata accessor for SingleCallRecordModel);
      if (v8 == v9) {
        return;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
}

void closure #1 in static SearchCallHistoryHelper.generateSearchCallHistoryModel(items:sharedGlobals:)(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v73 = a2;
  uint64_t v4 = type metadata accessor for SpeakableString();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v81 = (uint64_t)v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v72 = (uint64_t)v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v71 = (uint64_t)v69 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v70 = (uint64_t)v69 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v77 = (char *)v69 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)v69 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)v69 - v19;
  uint64_t v21 = *a1;
  id v75 = [objc_allocWithZone((Class)SAIntentGroupRunSiriKitExecutor) init];
  uint64_t v78 = v21;
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(v21 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin15PhoneCallRecord_selectAction, (uint64_t)v20, &demangling cache variable for type metadata for SpeakableString?);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v20, 1, v4);
  uint64_t v82 = v4;
  uint64_t v76 = v5;
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v20, &demangling cache variable for type metadata for SpeakableString?);
    uint64_t v23 = v5;
  }
  else
  {
    SpeakableString.print.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v20, v4);
    uint64_t v24 = Data.init(base64Encoded:options:)();
    unint64_t v26 = v25;
    swift_bridgeObjectRelease();
    if (v26 >> 60 != 15)
    {
      type metadata accessor for SAIntentGroupRunSiriKitExecutor();
      outlined copy of Data._Representation(v24, v26);
      id v27 = @nonobjc SAIntentGroupRunSiriKitExecutor.__allocating_init(plistData:)(v24, v26);
      if (!v27)
      {
        __break(1u);
        goto LABEL_36;
      }
      uint64_t v28 = v27;

      outlined consume of Data?(v24, v26);
      id v75 = v28;
    }
    uint64_t v4 = v82;
    uint64_t v23 = v76;
  }
  id v74 = [objc_allocWithZone((Class)SAIntentGroupRunSiriKitExecutor) init];
  uint64_t v29 = v78;
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(v78 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin15PhoneCallRecord_openCallRecordAction, (uint64_t)v18, &demangling cache variable for type metadata for SpeakableString?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v4) != 1)
  {
    SpeakableString.print.getter();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v18, v4);
    uint64_t v32 = Data.init(base64Encoded:options:)();
    unint64_t v34 = v33;
    swift_bridgeObjectRelease();
    uint64_t v30 = (uint64_t)v77;
    uint64_t v31 = v2;
    if (v34 >> 60 == 15)
    {
LABEL_12:
      uint64_t v4 = v82;
      uint64_t v23 = v76;
      goto LABEL_13;
    }
    type metadata accessor for SAIntentGroupRunSiriKitExecutor();
    outlined copy of Data._Representation(v32, v34);
    id v35 = @nonobjc SAIntentGroupRunSiriKitExecutor.__allocating_init(plistData:)(v32, v34);
    if (v35)
    {
      uint64_t v36 = v35;

      outlined consume of Data?(v32, v34);
      id v74 = v36;
      goto LABEL_12;
    }
LABEL_36:
    __break(1u);
    return;
  }
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v18, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v30 = (uint64_t)v77;
  uint64_t v31 = v2;
LABEL_13:
  uint64_t v37 = *(void *)(v29 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin15PhoneCallRecord_contactIds);
  uint64_t v38 = *(void *)(v37 + 16);
  if (v38)
  {
    v69[0] = *(void *)(v29 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin15PhoneCallRecord_contactIds);
    v69[1] = v31;
    uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16);
    uint64_t v39 = v23 + 16;
    uint64_t v41 = v37 + ((*(unsigned __int8 *)(v39 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 64));
    uint64_t v79 = *(void *)(v39 + 56);
    uint64_t v80 = v40;
    swift_bridgeObjectRetain();
    uint64_t v42 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v43 = v81;
      v80(v81, v41, v4);
      uint64_t v44 = SpeakableString.print.getter();
      uint64_t v46 = v45;
      (*(void (**)(uint64_t, uint64_t))(v39 - 8))(v43, v4);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v42 = v49;
      }
      unint64_t v47 = v42[2];
      if (v47 >= v42[3] >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v42 = v50;
      }
      v42[2] = v47 + 1;
      uint64_t v48 = &v42[2 * v47];
      v48[4] = v44;
      v48[5] = v46;
      v41 += v79;
      --v38;
      uint64_t v4 = v82;
    }
    while (v38);
    swift_bridgeObjectRelease();
    uint64_t v23 = v76;
    uint64_t v30 = (uint64_t)v77;
    uint64_t v29 = v78;
  }
  else
  {
    uint64_t v42 = _swiftEmptyArrayStorage;
  }
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(v29 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin15PhoneCallRecord_displayName, v30, &demangling cache variable for type metadata for SpeakableString?);
  int v51 = __swift_getEnumTagSinglePayload(v30, 1, v4);
  uint64_t v52 = v73;
  if (v51 == 1)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v30, &demangling cache variable for type metadata for SpeakableString?);
    uint64_t v82 = 0;
    uint64_t v81 = 0xE000000000000000;
  }
  else
  {
    uint64_t v82 = SpeakableString.print.getter();
    uint64_t v81 = v53;
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v30, v4);
  }
  uint64_t v54 = v70;
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(v29 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin15PhoneCallRecord_displayCallDetail, v70, &demangling cache variable for type metadata for SpeakableString?);
  if (__swift_getEnumTagSinglePayload(v54, 1, v4) == 1)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v54, &demangling cache variable for type metadata for SpeakableString?);
    uint64_t v80 = 0;
    uint64_t v55 = 0xE000000000000000;
  }
  else
  {
    uint64_t v80 = (void (*)(uint64_t, uint64_t, uint64_t))SpeakableString.print.getter();
    uint64_t v55 = v56;
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v54, v4);
  }
  uint64_t v57 = v71;
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(v29 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin15PhoneCallRecord_displayDateTime, v71, &demangling cache variable for type metadata for SpeakableString?);
  if (__swift_getEnumTagSinglePayload(v57, 1, v4) == 1)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v57, &demangling cache variable for type metadata for SpeakableString?);
    uint64_t v58 = 0;
    uint64_t v59 = 0xE000000000000000;
  }
  else
  {
    uint64_t v58 = SpeakableString.print.getter();
    uint64_t v59 = v60;
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v57, v4);
  }
  uint64_t v61 = v72;
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(v78 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin15PhoneCallRecord_callRecordType, v72, &demangling cache variable for type metadata for SpeakableString?);
  if (__swift_getEnumTagSinglePayload(v61, 1, v4) == 1)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v61, &demangling cache variable for type metadata for SpeakableString?);
    uint64_t v62 = 0;
    uint64_t v63 = 0;
  }
  else
  {
    uint64_t v64 = SpeakableString.print.getter();
    uint64_t v65 = v23;
    uint64_t v62 = v64;
    uint64_t v66 = v4;
    uint64_t v63 = v67;
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v61, v66);
  }
  char v68 = specialized PhoneCallRecordProperties<>.isVideo.getter();
  SingleCallRecordModel.init(displayName:displayCallDetail:displayDateTime:currentCallType:contactIds:directInvocation:openContactDirectInvocation:isVideoCall:)(v82, v81, (uint64_t)v80, v55, v58, v59, v62, v63, v52, (uint64_t)v42, v75, (uint64_t)v74, v68 & 1);
}

id @nonobjc SAIntentGroupRunSiriKitExecutor.__allocating_init(plistData:)(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 == 15)
  {
    Class isa = 0;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data?(a1, a2);
  }
  id v5 = [(id)swift_getObjCClassFromMetadata() aceObjectWithPlistData:isa];

  return v5;
}

uint64_t static SearchCallHistoryHelper.generateSingleResultCallHistoryModel(item:searchCallHistorySharedGlobals:)()
{
  OUTLINED_FUNCTION_1_0();
  v0[7] = v1;
  v0[8] = v2;
  v0[6] = v3;
  uint64_t v4 = type metadata accessor for SpeakableString();
  v0[9] = v4;
  OUTLINED_FUNCTION_19_0(v4);
  v0[10] = v5;
  v0[11] = swift_task_alloc();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v6);
  v0[12] = OUTLINED_FUNCTION_28_2();
  v0[13] = swift_task_alloc();
  v0[14] = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchCallHistoryBinaryButtonModel?);
  OUTLINED_FUNCTION_11_0(v7);
  v0[15] = OUTLINED_FUNCTION_28_2();
  v0[16] = swift_task_alloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v5 = v4;
  *(void *)(v6 + 152) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_1_0();
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 120);

  uint64_t v3 = type metadata accessor for SearchCallHistoryBinaryButtonModel();
  __swift_storeEnumTagSinglePayload(v2, 0, 1, v3);
  outlined init with take of SearchCallHistoryBinaryButtonModel?(v2, v1);
  uint64_t v4 = *(void **)(*(void *)(v0 + 64) + 184);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 160) = v5;
  *uint64_t v5 = v0;
  v5[1] = static SearchCallHistoryHelper.generateSingleResultCallHistoryModel(item:searchCallHistorySharedGlobals:);
  uint64_t v6 = *(void *)(v0 + 56);
  return static CallRecordViewUtils.generatedDisplayName(searchCallHistoryCATsSimple:callRecord:)(v4, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  v2[2] = v1;
  v2[3] = v4;
  v2[4] = v5;
  v2[5] = v0;
  uint64_t v6 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v7 = v6;
  *(void *)(v8 + 168) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_18_3();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_18_3();
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(*(void *)(v0 + 128), &demangling cache variable for type metadata for SearchCallHistoryBinaryButtonModel?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v1();
}

id static SearchCallHistoryHelper.generateSingleResultCallHistoryModel(item:searchCallHistorySharedGlobals:)()
{
  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = v0[7];
  if (*(void *)(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin15PhoneCallRecord_caller))
  {
    _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin15PhoneCallRecord_selectAction, v0[14], &demangling cache variable for type metadata for SpeakableString?);
    int v2 = OUTLINED_FUNCTION_25_9();
    uint64_t v3 = v0[14];
    if (v2 == 1)
    {
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v0[14], &demangling cache variable for type metadata for SpeakableString?);
    }
    else
    {
      uint64_t v10 = v0[9];
      uint64_t v11 = v0[10];
      SpeakableString.print.getter();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v3, v10);
      uint64_t v12 = Data.init(base64Encoded:options:)();
      unint64_t v14 = v13;
      swift_bridgeObjectRelease();
      if (v14 >> 60 != 15)
      {
        type metadata accessor for SAIntentGroupRunSiriKitExecutor();
        outlined copy of Data._Representation(v12, v14);
        id result = @nonobjc SAIntentGroupRunSiriKitExecutor.__allocating_init(plistData:)(v12, v14);
        if (!result)
        {
          __break(1u);
          return result;
        }
        id v15 = result;
        outlined consume of Data?(v12, v14);
        goto LABEL_11;
      }
    }
    id v15 = [objc_allocWithZone((Class)SAIntentGroupRunSiriKitExecutor) init];
LABEL_11:
    v0[17] = v15;
    uint64_t v16 = *(void *)(v0[8] + 192);
    uint64_t v17 = (void *)swift_task_alloc();
    v0[18] = v17;
    *uint64_t v17 = v0;
    v17[1] = static SearchCallHistoryHelper.generateSingleResultCallHistoryModel(item:searchCallHistorySharedGlobals:);
    uint64_t v18 = v0[15];
    return (id)static SearchCallHistoryHelper.buildSearchCallHistoryCallCancelModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:)(v18, v16, (uint64_t)v15);
  }
  uint64_t v4 = v0[16];
  uint64_t v5 = type metadata accessor for SearchCallHistoryBinaryButtonModel();
  __swift_storeEnumTagSinglePayload(v4, 1, 1, v5);
  uint64_t v6 = *(void **)(v0[8] + 184);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[20] = v7;
  *uint64_t v7 = v0;
  v7[1] = static SearchCallHistoryHelper.generateSingleResultCallHistoryModel(item:searchCallHistorySharedGlobals:);
  uint64_t v8 = v0[7];
  return (id)static CallRecordViewUtils.generatedDisplayName(searchCallHistoryCATsSimple:callRecord:)(v6, v8);
}

void static SearchCallHistoryHelper.generateSingleResultCallHistoryModel(item:searchCallHistorySharedGlobals:)()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin15PhoneCallRecord_contactIds);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = v0[10];
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    uint64_t v5 = v4 + 16;
    uint64_t v7 = v2 + ((*(unsigned __int8 *)(v5 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 64));
    uint64_t v44 = *(void *)(v5 + 56);
    uint64_t v46 = v6;
    swift_bridgeObjectRetain();
    uint64_t v8 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v9 = v0[11];
      uint64_t v10 = v0[9];
      v46(v9, v7, v10);
      uint64_t v11 = SpeakableString.print.getter();
      uint64_t v13 = v12;
      (*(void (**)(uint64_t, uint64_t))(v5 - 8))(v9, v10);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v8 = v16;
      }
      unint64_t v14 = v8[2];
      if (v14 >= v8[3] >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v8 = v17;
      }
      v8[2] = v14 + 1;
      id v15 = &v8[2 * v14];
      v15[4] = v11;
      v15[5] = v13;
      v7 += v44;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    uint64_t v1 = v0[7];
  }
  else
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
  }
  uint64_t v18 = v0[13];
  uint64_t v19 = v0[9];
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin15PhoneCallRecord_displayCallDetail, v18, &demangling cache variable for type metadata for SpeakableString?);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v18, 1, v19);
  uint64_t v21 = v0[13];
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v0[13], &demangling cache variable for type metadata for SpeakableString?);
    unint64_t v45 = 0xE000000000000000;
    uint64_t v47 = 0;
  }
  else
  {
    uint64_t v23 = v0[9];
    uint64_t v22 = v0[10];
    uint64_t v24 = SpeakableString.print.getter();
    unint64_t v45 = v25;
    uint64_t v47 = v24;
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
  }
  if (*(void *)(v0[7] + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin15PhoneCallRecord_dateCreated))
  {
    uint64_t v26 = v0[12];
    uint64_t v27 = v0[9];
    dispatch thunk of DialogCalendar.dateTimeDescriptive.getter();
    int v28 = __swift_getEnumTagSinglePayload(v26, 1, v27);
    uint64_t v29 = v0[12];
    if (v28 != 1)
    {
      uint64_t v31 = v0[9];
      uint64_t v30 = v0[10];
      uint64_t v32 = SpeakableString.print.getter();
      unint64_t v42 = v33;
      uint64_t v43 = v32;
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
LABEL_18:
      uint64_t v34 = v0[4];
      uint64_t v35 = v0[16];
      uint64_t v36 = (void *)v0[6];
      if (v34) {
        unint64_t v37 = v0[4];
      }
      else {
        unint64_t v37 = 0xE000000000000000;
      }
      if (v34) {
        uint64_t v38 = v0[3];
      }
      else {
        uint64_t v38 = 0;
      }
      uint64_t v39 = type metadata accessor for SingleResultCallHistoryModel();
      _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(v35, (uint64_t)v36 + *(int *)(v39 + 36), &demangling cache variable for type metadata for SearchCallHistoryBinaryButtonModel?);
      *uint64_t v36 = 0xD000000000000017;
      v36[1] = 0x8000000000491150;
      _OWORD v36[2] = v38;
      uint64_t v36[3] = v37;
      v36[4] = v47;
      v36[5] = v45;
      v36[6] = v43;
      v36[7] = v42;
      v36[8] = v8;
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v35, &demangling cache variable for type metadata for SearchCallHistoryBinaryButtonModel?);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      OUTLINED_FUNCTION_6_0();
      OUTLINED_FUNCTION_39();
      __asm { BRAA            X1, X16 }
    }
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v0[12], &demangling cache variable for type metadata for SpeakableString?);
  }
  unint64_t v42 = 0xE000000000000000;
  uint64_t v43 = 0;
  goto LABEL_18;
}

uint64_t implicit closure #1 in static SearchCallHistoryHelper.buildSearchCallHistoryCallCancelModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:)(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = swift_task_alloc();
  return _swift_task_switch(implicit closure #1 in static SearchCallHistoryHelper.buildSearchCallHistoryCallCancelModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:), 0, 0);
}

uint64_t implicit closure #1 in static SearchCallHistoryHelper.buildSearchCallHistoryCallCancelModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:)()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v3;
  *uint64_t v3 = v0;
  v3[1] = implicit closure #1 in static SearchCallHistoryHelper.buildSearchCallHistoryCallCancelModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:);
  uint64_t v4 = OUTLINED_FUNCTION_50_2();
  return v5(v4);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_11_20();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v2;
  *(void *)(v5 + 48) = v0;
  swift_task_dealloc();
  uint64_t v7 = *(void *)(v3 + 32);
  if (!v0) {
    *(void *)(v5 + 56) = v1;
  }
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v7, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = *(uint64_t **)(v0 + 16);
  uint64_t v2 = dispatch thunk of LabelExecutionResult.subscript.getter();
  uint64_t v4 = v3;
  swift_release();
  *uint64_t v1 = v2;
  v1[1] = v4;
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  return v5();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v0();
}

uint64_t implicit closure #2 in static SearchCallHistoryHelper.buildSearchCallHistoryCallCancelModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:)(uint64_t a1, void *a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v5 = (uint64_t (*)(void))(*(void *)(class metadata base offset for PhoneCallDisplayTextCATsSimple + *a2 + 56)
                         + **(int **)(class metadata base offset for PhoneCallDisplayTextCATsSimple + *a2 + 56));
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v3;
  *uint64_t v3 = v2;
  v3[1] = implicit closure #2 in static SearchCallHistoryHelper.buildSearchCallHistoryCallCancelModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:);
  return v5();
}

uint64_t implicit closure #2 in static SearchCallHistoryHelper.buildSearchCallHistoryCallCancelModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:)()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v9 = *(uint64_t (**)(void))(v7 + 8);
    return v9();
  }
  else
  {
    *(void *)(v5 + 32) = v3;
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v11, v12, v13);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  OUTLINED_FUNCTION_16_1();
  uint64_t v1 = *(uint64_t **)(v0 + 16);
  uint64_t v2 = dispatch thunk of LabelExecutionResult.subscript.getter();
  uint64_t v4 = v3;
  swift_release();
  *uint64_t v1 = v2;
  v1[1] = v4;
  OUTLINED_FUNCTION_6_0();
  return v5();
}

uint64_t implicit closure #1 in static SearchCallHistoryHelper.buildSearchCallHistoryCallNextModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:deviceState:)(uint64_t a1, void *a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v5 = (uint64_t (*)(void))(*(void *)(class metadata base offset for PhoneCallDisplayTextCATsSimple + *a2 + 232)
                         + **(int **)(class metadata base offset for PhoneCallDisplayTextCATsSimple + *a2 + 232));
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v3;
  *uint64_t v3 = v2;
  v3[1] = implicit closure #1 in static SearchCallHistoryHelper.buildSearchCallHistoryCallNextModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:deviceState:);
  return v5();
}

uint64_t implicit closure #1 in static SearchCallHistoryHelper.buildSearchCallHistoryCallNextModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:deviceState:)()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v9 = *(uint64_t (**)(void))(v7 + 8);
    return v9();
  }
  else
  {
    *(void *)(v5 + 32) = v3;
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v11, v12, v13);
  }
}

uint64_t implicit closure #2 in static SearchCallHistoryHelper.buildSearchCallHistoryCallNextModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:deviceState:)(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = swift_task_alloc();
  return _swift_task_switch(implicit closure #2 in static SearchCallHistoryHelper.buildSearchCallHistoryCallNextModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:deviceState:), 0, 0);
}

uint64_t implicit closure #2 in static SearchCallHistoryHelper.buildSearchCallHistoryCallNextModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:deviceState:)()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v3;
  *uint64_t v3 = v0;
  v3[1] = implicit closure #2 in static SearchCallHistoryHelper.buildSearchCallHistoryCallNextModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:deviceState:);
  uint64_t v4 = OUTLINED_FUNCTION_50_2();
  return v5(v4);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_11_20();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v2;
  *(void *)(v5 + 48) = v0;
  swift_task_dealloc();
  uint64_t v7 = *(void *)(v3 + 32);
  if (!v0) {
    *(void *)(v5 + 56) = v1;
  }
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v7, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t specialized OptionSet<>.formIntersection(_:)(uint64_t result)
{
  *v1 &= result;
  return result;
}

BOOL specialized SetAlgebra.isSubset(of:)(uint64_t a1, uint64_t a2)
{
  return (a2 & ~a1) == 0;
}

uint64_t _s27PhoneCallFlowDelegatePlugin18CommonDirectActionOWOhTm_0(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_15();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t outlined init with take of SearchCallHistoryBinaryButtonModel(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_15();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

ValueMetadata *type metadata accessor for SearchCallHistoryHelper()
{
  return &type metadata for SearchCallHistoryHelper;
}

uint64_t partial apply for implicit closure #1 in static SearchCallHistoryHelper.buildSearchCallHistoryCallNextModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:deviceState:)()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_17_0(v0);
  *uint64_t v1 = v2;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  uint64_t v3 = OUTLINED_FUNCTION_21_7();
  return implicit closure #1 in static SearchCallHistoryHelper.buildSearchCallHistoryCallNextModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:deviceState:)(v3, v4);
}

uint64_t partial apply for implicit closure #2 in static SearchCallHistoryHelper.buildSearchCallHistoryCallNextModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:deviceState:)()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_17_0(v0);
  *uint64_t v1 = v2;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  uint64_t v3 = OUTLINED_FUNCTION_21_7();
  return implicit closure #2 in static SearchCallHistoryHelper.buildSearchCallHistoryCallNextModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:deviceState:)(v3, v4);
}

uint64_t partial apply for implicit closure #1 in static SearchCallHistoryHelper.buildSearchCallHistoryCallCancelModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:)()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_17_0(v0);
  *uint64_t v1 = v2;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  uint64_t v3 = OUTLINED_FUNCTION_21_7();
  return implicit closure #1 in static SearchCallHistoryHelper.buildSearchCallHistoryCallCancelModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:)(v3, v4);
}

uint64_t partial apply for implicit closure #2 in static SearchCallHistoryHelper.buildSearchCallHistoryCallCancelModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:)()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_17_0(v0);
  *uint64_t v1 = v2;
  v1[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  uint64_t v3 = OUTLINED_FUNCTION_21_7();
  return implicit closure #2 in static SearchCallHistoryHelper.buildSearchCallHistoryCallCancelModel(phoneCallDisplayTextCATsSimple:callbackDirectInvocation:)(v3, v4);
}

uint64_t OUTLINED_FUNCTION_8_32()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_10_19()
{
  v2[60] = v1;
  v2[61] = v0;
  uint64_t v3 = (void *)v2[30];
  uint64_t v4 = v3[3];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  return v4;
}

uint64_t OUTLINED_FUNCTION_13_12()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_15_16()
{
  return *(void *)(v0 + 112);
}

uint64_t OUTLINED_FUNCTION_16_22()
{
  return *(void *)(v0 + 264);
}

uint64_t OUTLINED_FUNCTION_20_13()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_22_10()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_23_9()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_24_15(uint64_t a1, uint64_t a2)
{
  return a2 & a1;
}

void OUTLINED_FUNCTION_30_8()
{
  *(void *)(v1 + 16) = v3;
  uint64_t v5 = v1 + 16 * v4;
  *(void *)(v5 + 32) = v0;
  *(void *)(v5 + 40) = v2;
}

uint64_t OUTLINED_FUNCTION_31_9()
{
  return v0;
}

void OUTLINED_FUNCTION_33_6()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_34_3()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_35_9()
{
  return swift_asyncLet_begin();
}

uint64_t OUTLINED_FUNCTION_38_7()
{
  return v0 + 8;
}

uint64_t OUTLINED_FUNCTION_41_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_42_4()
{
  return swift_asyncLet_begin();
}

void OUTLINED_FUNCTION_43_7()
{
  *(void *)(v0 + 472) = v1;
}

void OUTLINED_FUNCTION_44_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  DefaultStringInterpolation.appendInterpolation(type:tags:function:)(a1, a2, 0xD00000000000002ALL, a4);
}

uint64_t OUTLINED_FUNCTION_46_5()
{
  return swift_retain_n();
}

uint64_t OUTLINED_FUNCTION_47_3()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_49_4()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_50_2()
{
  return *(void *)(v0 + 32);
}

uint64_t OUTLINED_FUNCTION_52_1()
{
  return *(void *)(v0 + 224);
}

long long *CommsAppSelectionAppIndependentSignalsKeys.userPersonaKey.unsafeMutableAddressor()
{
  if (one-time initialization token for userPersonaKey != -1) {
    swift_once();
  }
  return &static CommsAppSelectionAppIndependentSignalsKeys.userPersonaKey;
}

const char *CommsAppSelectionAppIndependentSignalsKeys.requestOriginLocaleKey.unsafeMutableAddressor()
{
  return "raw.locale";
}

uint64_t static CommsAppSelectionAppIndependentSignalsKeys.requestOriginLocaleKey.getter()
{
  return 0x61636F6C2E776172;
}

const char *CommsAppSelectionAppIndependentSignalsKeys.requestOriginLanguageKey.unsafeMutableAddressor()
{
  return "raw.language";
}

uint64_t static CommsAppSelectionAppIndependentSignalsKeys.requestOriginLanguageKey.getter()
{
  return 0x676E616C2E776172;
}

void *CommsAppSelectionAppIndependentSignalsKeys.communicationTypeKey.unsafeMutableAddressor()
{
  return &static CommsAppSelectionAppIndependentSignalsKeys.communicationTypeKey;
}

unint64_t static CommsAppSelectionAppIndependentSignalsKeys.communicationTypeKey.getter()
{
  return 0xD000000000000015;
}

uint64_t one-time initialization function for userPersonaKey()
{
  uint64_t v0 = type metadata accessor for DomainUseCase();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for DomainUseCase.phoneCall(_:), v0);
  uint64_t v4 = DomainUseCase.rawValue.getter();
  uint64_t v6 = v5;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t v15 = v4;
  uint64_t v16 = v6;
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = 46;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  uint64_t v9 = v15;
  uint64_t v8 = v16;
  uint64_t v10 = static DomainUserPersonaSignal.signalName.getter();
  uint64_t v12 = v11;
  uint64_t v15 = v9;
  uint64_t v16 = v8;
  swift_bridgeObjectRetain();
  v13._uint64_t countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  static CommsAppSelectionAppIndependentSignalsKeys.userPersonaKey = v15;
  unk_5D4830 = v16;
  return result;
}

uint64_t static CommsAppSelectionAppIndependentSignalsKeys.userPersonaKey.getter()
{
  if (one-time initialization token for userPersonaKey != -1) {
    swift_once();
  }
  uint64_t v0 = static CommsAppSelectionAppIndependentSignalsKeys.userPersonaKey;
  swift_bridgeObjectRetain();
  return v0;
}

ValueMetadata *type metadata accessor for CommsAppSelectionAppIndependentSignalsKeys()
{
  return &type metadata for CommsAppSelectionAppIndependentSignalsKeys;
}

uint64_t PhoneSearchCallHistoryIntent.__allocating_init(intent:)(void *a1)
{
  type metadata accessor for Locale();
  OUTLINED_FUNCTION_0_0();
  uint64_t v45 = v3;
  uint64_t v46 = v2;
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_3_1();
  uint64_t v44 = v4;
  uint64_t v49 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_0_0();
  uint64_t v6 = v5;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v43 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  __chkstk_darwin(v13 - 8);
  OUTLINED_FUNCTION_3_1();
  uint64_t v48 = v14;
  [a1 callTypes];
  uint64_t v15 = OUTLINED_FUNCTION_15_17();
  *(void *)(v15 + 16) = _swiftEmptyArrayStorage;
  uint64_t v16 = (uint64_t *)(v15 + 16);
  uint64_t v55 = partial apply for closure #1 in INCallRecordTypeOptions.INPBStringRepresentation.getter;
  uint64_t v56 = v15;
  aBlock = _NSConcreteStackBlock;
  uint64_t v52 = 1107296256;
  uint64_t v53 = thunk for @escaping @callee_guaranteed (@unowned _INPBCallRecordType) -> ();
  uint64_t v54 = &block_descriptor_0;
  uint64_t v17 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  INCallRecordTypeOptionsEnumerateBackingTypes();
  _Block_release(v17);
  OUTLINED_FUNCTION_37_4();
  uint64_t v18 = *v16;
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v19 = *(void *)(v18 + 16);
  uint64_t v47 = a1;
  if (v19)
  {
    aBlock = (void **)_swiftEmptyArrayStorage;
    OUTLINED_FUNCTION_4_35();
    uint64_t v20 = aBlock;
    OUTLINED_FUNCTION_17_12();
    do
    {
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_11_2();
      aBlock = v20;
      unint64_t v21 = (unint64_t)v20[2];
      if (v21 >= (unint64_t)v20[3] >> 1)
      {
        OUTLINED_FUNCTION_14_14();
        uint64_t v20 = aBlock;
      }
      v18 += 16;
      void v20[2] = (void *)(v21 + 1);
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))((unint64_t)v20+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v21, v12, v49);
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease();
    a1 = v47;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = (void **)_swiftEmptyArrayStorage;
  }
  if ([a1 preferredCallProvider])
  {
    uint64_t v22 = INPreferredCallProviderGetBackingType();
    if (v22 == 4)
    {
      uint64_t v23 = @"THIRD_PARTY_PROVIDER";
    }
    else
    {
      if (v22 != 3)
      {
        if (v22 == 2)
        {
          uint64_t v23 = @"TELEPHONY_PROVIDER";
          uint64_t v24 = @"TELEPHONY_PROVIDER";
        }
        else
        {
          uint64_t v23 = +[NSString stringWithFormat:@"(unknown: %i)", v22];
        }
        goto LABEL_18;
      }
      uint64_t v23 = @"FACETIME_PROVIDER";
    }
    unint64_t v25 = v23;
LABEL_18:
    uint64_t v26 = v23;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  uint64_t v27 = v48;
  OUTLINED_FUNCTION_11_2();
  __swift_storeEnumTagSinglePayload(v27, 0, 1, v49);
  [a1 callCapabilities];
  uint64_t v28 = OUTLINED_FUNCTION_15_17();
  *(void *)(v28 + 16) = _swiftEmptyArrayStorage;
  uint64_t v29 = (uint64_t *)(v28 + 16);
  uint64_t v55 = partial apply for closure #1 in INCallCapabilityOptions.INPBStringRepresentation.getter;
  uint64_t v56 = v28;
  aBlock = _NSConcreteStackBlock;
  uint64_t v52 = 1107296256;
  uint64_t v53 = thunk for @escaping @callee_guaranteed (@unowned _INPBCallCapability) -> ();
  uint64_t v54 = &block_descriptor_4;
  uint64_t v30 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  INCallCapabilityOptionsEnumerateBackingTypes();
  _Block_release(v30);
  OUTLINED_FUNCTION_37_4();
  uint64_t v31 = *v29;
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v32 = *(void *)(v31 + 16);
  if (v32)
  {
    aBlock = (void **)_swiftEmptyArrayStorage;
    OUTLINED_FUNCTION_4_35();
    unint64_t v33 = aBlock;
    OUTLINED_FUNCTION_17_12();
    do
    {
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_11_2();
      aBlock = v33;
      unint64_t v34 = (unint64_t)v33[2];
      if (v34 >= (unint64_t)v33[3] >> 1)
      {
        OUTLINED_FUNCTION_14_14();
        unint64_t v33 = aBlock;
      }
      v31 += 16;
      long long v33[2] = (void *)(v34 + 1);
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))((unint64_t)v33+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v34, v10, v49);
      --v32;
    }
    while (v32);
    swift_bridgeObjectRelease();
    a1 = v47;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v33 = (void **)_swiftEmptyArrayStorage;
  }
  id v35 = [a1 recipient];
  uint64_t v50 = (uint64_t)_swiftEmptyArrayStorage;
  type metadata accessor for PhonePerson(0);
  id v36 = v35;
  static Device.current.getter();
  __swift_project_boxed_opaque_existential_1(&aBlock, (uint64_t)v54);
  uint64_t v37 = v44;
  dispatch thunk of DeviceState.siriLocale.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
  uint64_t v38 = static PhonePerson.make(phonePerson:options:locale:)(v35, 0, v37);
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v37, v46);

  if (v38)
  {
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((char *)&dword_10 + (v50 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                   + (v50 & 0xFFFFFFFFFFFFFF8)) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  type metadata accessor for PhonePersonList();
  uint64_t v39 = v50;

  uint64_t v40 = PhonePersonList.__allocating_init(list:)(v39);
  uint64_t v41 = PhoneSearchCallHistoryIntent.__allocating_init(callTypes:preferredCallProvider:callCapabilities:recipient:)((uint64_t)v20, v48, (uint64_t)v33, v40);

  return v41;
}

uint64_t sub_F1CA4()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t PhoneSearchCallHistoryIntent.__allocating_init(intent:recipients:)(void *a1, uint64_t a2)
{
  uint64_t v39 = a2;
  uint64_t v42 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_0_0();
  uint64_t v4 = v3;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v38 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = a1;
  [a1 callTypes];
  uint64_t v14 = OUTLINED_FUNCTION_15_17();
  *(void *)(v14 + 16) = _swiftEmptyArrayStorage;
  uint64_t v15 = (uint64_t *)(v14 + 16);
  uint64_t v48 = partial apply for closure #1 in INCallRecordTypeOptions.INPBStringRepresentation.getter;
  uint64_t v49 = v14;
  aBlock = _NSConcreteStackBlock;
  uint64_t v45 = 1107296256;
  uint64_t v46 = thunk for @escaping @callee_guaranteed (@unowned _INPBCallRecordType) -> ();
  uint64_t v47 = &block_descriptor_9_0;
  uint64_t v16 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  INCallRecordTypeOptionsEnumerateBackingTypes();
  _Block_release(v16);
  OUTLINED_FUNCTION_37_4();
  uint64_t v17 = *v15;
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v18 = *(void *)(v17 + 16);
  uint64_t v40 = v13;
  if (v18)
  {
    aBlock = (void **)_swiftEmptyArrayStorage;
    OUTLINED_FUNCTION_4_35();
    uint64_t v19 = aBlock;
    uint64_t v38 = v17;
    uint64_t v20 = v17 + 40;
    do
    {
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_11_2();
      aBlock = v19;
      unint64_t v21 = (unint64_t)v19[2];
      if (v21 >= (unint64_t)v19[3] >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v19 = aBlock;
      }
      v20 += 16;
      void v19[2] = (void *)(v21 + 1);
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v19+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v21, v10, v42);
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease();
    uint64_t v13 = v40;
    uint64_t v22 = v41;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v19 = (void **)_swiftEmptyArrayStorage;
    uint64_t v22 = v41;
  }
  if (objc_msgSend(v22, "preferredCallProvider", v38))
  {
    uint64_t v23 = INPreferredCallProviderGetBackingType();
    switch(v23)
    {
      case 4:
        uint64_t v24 = @"THIRD_PARTY_PROVIDER";
        break;
      case 3:
        uint64_t v24 = @"FACETIME_PROVIDER";
        break;
      case 2:
        uint64_t v24 = @"TELEPHONY_PROVIDER";
        break;
      default:
        uint64_t v24 = +[NSString stringWithFormat:@"(unknown: %i)", v23];
        goto LABEL_18;
    }
    unint64_t v25 = v24;
LABEL_18:
    uint64_t v26 = v24;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  OUTLINED_FUNCTION_11_2();
  __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v42);
  [v22 callCapabilities];
  uint64_t v27 = OUTLINED_FUNCTION_15_17();
  *(void *)(v27 + 16) = _swiftEmptyArrayStorage;
  uint64_t v28 = (uint64_t *)(v27 + 16);
  uint64_t v48 = partial apply for closure #1 in INCallCapabilityOptions.INPBStringRepresentation.getter;
  uint64_t v49 = v27;
  aBlock = _NSConcreteStackBlock;
  uint64_t v45 = 1107296256;
  uint64_t v46 = thunk for @escaping @callee_guaranteed (@unowned _INPBCallCapability) -> ();
  uint64_t v47 = &block_descriptor_14;
  uint64_t v29 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  INCallCapabilityOptionsEnumerateBackingTypes();
  _Block_release(v29);
  OUTLINED_FUNCTION_37_4();
  uint64_t v30 = *v28;
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v31 = *(void *)(v30 + 16);
  if (v31)
  {
    uint64_t v43 = _swiftEmptyArrayStorage;
    OUTLINED_FUNCTION_4_35();
    uint64_t v32 = v43;
    uint64_t v38 = v30;
    uint64_t v33 = v30 + 40;
    do
    {
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_11_2();
      uint64_t v43 = v32;
      unint64_t v34 = v32[2];
      if (v34 >= v32[3] >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v32 = v43;
      }
      v33 += 16;
      v32[2] = v34 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v32+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v34, v8, v42);
      --v31;
    }
    while (v31);
    swift_bridgeObjectRelease();
    uint64_t v35 = (uint64_t)v40;
    uint64_t v22 = v41;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v32 = _swiftEmptyArrayStorage;
    uint64_t v35 = (uint64_t)v13;
  }
  uint64_t v36 = PhoneSearchCallHistoryIntent.__allocating_init(callTypes:preferredCallProvider:callCapabilities:recipient:)((uint64_t)v19, v35, (uint64_t)v32, v39);

  return v36;
}

void *static SearchCallHistoryCatParameterHelper.getFormattedContactsAsList(app:intent:intentResponse:)(uint64_t a1, void *a2, unint64_t a3)
{
  uint64_t v5 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_0_0();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v19[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!App.isFirstParty()())
  {
    id v12 = [a2 recipient];
    if (v12)
    {
      uint64_t v13 = v12;
      type metadata accessor for PhonePerson(0);
      id v14 = v13;
      static Device.current.getter();
      __swift_project_boxed_opaque_existential_1(v19, v19[3]);
      dispatch thunk of DeviceState.siriLocale.getter();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
      uint64_t v15 = static PhonePerson.make(phonePerson:options:locale:)(v13, 0, (uint64_t)v10);

      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v5);
      if (v15)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v16 = swift_allocObject();
        *(_OWORD *)(v16 + 16) = xmmword_46A030;
        *(void *)(v16 + 32) = v15;
        v19[0] = v16;
        specialized Array._endMutation()();
        uint64_t v17 = v19[0];

        return (void *)v17;
      }
    }
    return _swiftEmptyArrayStorage;
  }

  return static SearchCallHistoryCatParameterHelper.makePhonePersons1P(intent:intentResponse:)(a2, a3);
}

void *static SearchCallHistoryCatParameterHelper.makePhonePersons1P(intent:intentResponse:)(void *a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_0_0();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_3_1();
  uint64_t v99 = v9;
  id v10 = [a1 recipient];
  uint64_t v11 = _swiftEmptyArrayStorage;
  if (!v10) {
    return v11;
  }
  uint64_t v97 = v10;
  unint64_t v12 = outlined bridged method (pb) of @objc INPerson.siriMatches.getter(v10);
  uint64_t v100 = v5;
  if (!v12)
  {
LABEL_90:
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v86 = type metadata accessor for Logger();
    __swift_project_value_buffer(v86, (uint64_t)static Logger.siriPhone);
    uint64_t v87 = (void *)Logger.logObject.getter();
    os_log_type_t v88 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_8_2(v88))
    {
      unint64_t v89 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_32_2(v89);
      OUTLINED_FUNCTION_1_3(&dword_0, v90, v91, "Formatting contacts with no siriMatches");
      OUTLINED_FUNCTION_5_16();
    }

    type metadata accessor for PhonePerson(0);
    id v92 = v97;
    static Device.current.getter();
    __swift_project_boxed_opaque_existential_1(v101, v102);
    dispatch thunk of DeviceState.siriLocale.getter();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v101);
    uint64_t v93 = static PhonePerson.make(phonePerson:options:locale:)(v97, 0, v99);

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v99, v5);
    if (v93)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v94 = swift_allocObject();
      *(_OWORD *)(v94 + 16) = xmmword_46A030;
      *(void *)(v94 + 32) = v93;
      v101[0] = v94;
      specialized Array._endMutation()();
      uint64_t v11 = (void *)v101[0];
    }
    else
    {

      return _swiftEmptyArrayStorage;
    }
    return v11;
  }
  unint64_t v13 = v12;
  if (!(v12 >> 62))
  {
    uint64_t v14 = *(void *)((char *)&dword_10 + (v12 & 0xFFFFFFFFFFFFFF8));
    if (v14) {
      goto LABEL_5;
    }
    goto LABEL_89;
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v14)
  {
LABEL_89:
    swift_bridgeObjectRelease();
    goto LABEL_90;
  }
LABEL_5:
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.siriPhone);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (_WORD *)OUTLINED_FUNCTION_7_2();
    OUTLINED_FUNCTION_32_2(v18);
    _os_log_impl(&dword_0, v16, v17, "Formatting contacts with multiple siriMatches", v2, 2u);
    OUTLINED_FUNCTION_5_16();
  }

  unint64_t v98 = v13;
  if (a2
    && (unint64_t v19 = outlined bridged method (pb) of @objc INAnswerCallIntentResponse.callRecords.getter((void *)a2)) != 0)
  {
    a2 = v19;
    if (!(v19 >> 62))
    {
      uint64_t v20 = *(void *)((char *)&dword_10 + (v19 & 0xFFFFFFFFFFFFFF8));
      uint64_t result = (void *)swift_bridgeObjectRetain();
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v35 = (void *)Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_8_2(v36))
    {
      uint64_t v37 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_32_2(v37);
      OUTLINED_FUNCTION_1_3(&dword_0, v38, v39, "No callRecords found. Dialoguing about all SiriMatches without filtering.");
      OUTLINED_FUNCTION_5_16();
    }

    type metadata accessor for PhonePerson(0);
    if (v14 >= 1)
    {
      uint64_t v40 = v14;
      unint64_t v41 = v13 & 0xC000000000000001;
      uint64_t v42 = (void (**)(uint64_t, uint64_t))(v7 + 8);
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v40; ++i)
      {
        if (v41) {
          id v44 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v44 = *(id *)(v13 + 8 * i + 32);
        }
        uint64_t v45 = v44;
        static Device.current.getter();
        OUTLINED_FUNCTION_8_33();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v101);
        uint64_t v46 = OUTLINED_FUNCTION_16_23();
        (*v42)(v99, v100);

        if (v46)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          OUTLINED_FUNCTION_7_32();
          if (v47) {
            OUTLINED_FUNCTION_6_25();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        unint64_t v13 = v98;
      }
      goto LABEL_86;
    }
    __break(1u);
  }
  swift_bridgeObjectRetain();
  uint64_t result = (void *)_CocoaArrayWrapper.endIndex.getter();
  uint64_t v20 = (uint64_t)result;
LABEL_13:
  uint64_t v95 = v7;
  if (v20)
  {
    if (v20 < 1)
    {
      __break(1u);
      goto LABEL_102;
    }
    uint64_t v22 = 0;
    uint64_t v23 = _swiftEmptyArrayStorage;
    do
    {
      if ((a2 & 0xC000000000000001) != 0) {
        id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v24 = *(id *)(a2 + 8 * v22 + 32);
      }
      unint64_t v25 = v24;
      id v26 = [v24 caller];
      if (v26)
      {
        uint64_t v27 = outlined bridged method (ob) of @objc INPerson.contactIdentifier.getter(v26);
        uint64_t v29 = v28;

        if (v29)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v23 = v33;
          }
          unint64_t v31 = v23[2];
          unint64_t v30 = v23[3];
          if (v31 >= v30 >> 1)
          {
            OUTLINED_FUNCTION_19_14(v30);
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v23 = v34;
          }
          void v23[2] = v31 + 1;
          uint64_t v32 = &v23[2 * v31];
          v32[4] = v27;
          v32[5] = v29;
          uint64_t v5 = v100;
        }
      }
      else
      {
      }
      ++v22;
    }
    while (v20 != v22);
  }
  else
  {
    uint64_t v23 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease_n();
  uint64_t v48 = specialized Set.init<A>(_:)((uint64_t)v23);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v96 = v48;
  unint64_t v49 = (unint64_t)specialized _ArrayProtocol.filter(_:)(v98, v48);
  unint64_t v50 = v49;
  if (v49 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = (void *)_CocoaArrayWrapper.endIndex.getter();
    uint64_t v51 = (uint64_t)result;
  }
  else
  {
    uint64_t v51 = *(void *)((char *)&dword_10 + (v49 & 0xFFFFFFFFFFFFFF8));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v11 = _swiftEmptyArrayStorage;
  if (v51)
  {
    if (v51 >= 1)
    {
      uint64_t v52 = 0;
      uint64_t v53 = _swiftEmptyArrayStorage;
      do
      {
        if ((v50 & 0xC000000000000001) != 0) {
          id v54 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v54 = *(id *)(v50 + 8 * v52 + 32);
        }
        uint64_t v55 = v54;
        uint64_t v56 = outlined bridged method (pb) of @objc INPerson.contactIdentifier.getter(v54);
        uint64_t v58 = v57;

        if (v58)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v53 = v62;
          }
          unint64_t v60 = v53[2];
          unint64_t v59 = v53[3];
          if (v60 >= v59 >> 1)
          {
            OUTLINED_FUNCTION_19_14(v59);
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v53 = v63;
          }
          v53[2] = v60 + 1;
          uint64_t v61 = &v53[2 * v60];
          v61[4] = v56;
          v61[5] = v58;
          uint64_t v5 = v100;
        }
        ++v52;
      }
      while (v51 != v52);
      goto LABEL_60;
    }
LABEL_102:
    __break(1u);
    goto LABEL_103;
  }
  uint64_t v53 = _swiftEmptyArrayStorage;
LABEL_60:
  swift_bridgeObjectRelease();
  uint64_t v64 = specialized Set.init<A>(_:)((uint64_t)v53);
  uint64_t v65 = *(void *)(v96 + 16);
  swift_bridgeObjectRelease();
  uint64_t v66 = *(void *)(v64 + 16);
  swift_bridgeObjectRelease();
  if (v65 == v66)
  {
    swift_bridgeObjectRelease();
    uint64_t v67 = (void *)Logger.logObject.getter();
    os_log_type_t v68 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_8_2(v68))
    {
      uint64_t v69 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_32_2(v69);
      OUTLINED_FUNCTION_1_3(&dword_0, v70, v71, "Filtering for contacts with matching call records.");
      OUTLINED_FUNCTION_5_16();
    }

    if (!v51) {
      goto LABEL_87;
    }
    type metadata accessor for PhonePerson(0);
    swift_bridgeObjectRetain();
    for (uint64_t j = 0; j != v51; ++j)
    {
      if ((v50 & 0xC000000000000001) != 0) {
        id v73 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v73 = *(id *)(v50 + 8 * j + 32);
      }
      id v74 = v73;
      static Device.current.getter();
      __swift_project_boxed_opaque_existential_1(v101, v102);
      dispatch thunk of DeviceState.siriLocale.getter();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v101);
      uint64_t v75 = static PhonePerson.make(phonePerson:options:locale:)(v74, 0, v99);
      (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v99, v100);

      if (v75)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        OUTLINED_FUNCTION_7_32();
        if (v47) {
          OUTLINED_FUNCTION_6_25();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
LABEL_86:
    swift_bridgeObjectRelease();
    uint64_t v11 = _swiftEmptyArrayStorage;
LABEL_87:
    swift_bridgeObjectRelease();

    return v11;
  }
  swift_bridgeObjectRelease();
  uint64_t v76 = (void *)Logger.logObject.getter();
  os_log_type_t v77 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_8_2(v77))
  {
    uint64_t v78 = (_WORD *)OUTLINED_FUNCTION_7_2();
    OUTLINED_FUNCTION_32_2(v78);
    OUTLINED_FUNCTION_1_3(&dword_0, v79, v80, "Not all callRecord identifiers matched. Dialoguing about all SiriMatches without filtering.");
    OUTLINED_FUNCTION_5_16();
  }

  uint64_t result = (void *)type metadata accessor for PhonePerson(0);
  unint64_t v81 = v98;
  if (v14 >= 1)
  {
    swift_bridgeObjectRetain();
    for (uint64_t k = 0; k != v14; ++k)
    {
      if ((v98 & 0xC000000000000001) != 0) {
        id v83 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v83 = *(id *)(v81 + 8 * k + 32);
      }
      uint64_t v84 = v83;
      static Device.current.getter();
      OUTLINED_FUNCTION_8_33();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v101);
      uint64_t v85 = OUTLINED_FUNCTION_16_23();
      (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v99, v5);

      if (v85)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        OUTLINED_FUNCTION_7_32();
        if (v47) {
          OUTLINED_FUNCTION_6_25();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      unint64_t v81 = v98;
    }
    goto LABEL_86;
  }
LABEL_103:
  __break(1u);
  __break(1u);
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned _INPBCallRecordType) -> ()(uint64_t a1, uint64_t a2)
{
  return thunk for @escaping @callee_guaranteed (@unowned _INPBCallRecordType) -> ()(a1, a2);
}

{
  void (*v3)(uint64_t);
  uint64_t vars8;

  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned _INPBCallCapability) -> ()(uint64_t a1, uint64_t a2)
{
  return thunk for @escaping @callee_guaranteed (@unowned _INPBCallRecordType) -> ()(a1, a2);
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

ValueMetadata *type metadata accessor for SearchCallHistoryCatParameterHelper()
{
  return &type metadata for SearchCallHistoryCatParameterHelper;
}

void OUTLINED_FUNCTION_4_35()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_6_25()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_8_33()
{
  __swift_project_boxed_opaque_existential_1((void *)(v0 - 120), *(void *)(v0 - 96));
  return dispatch thunk of DeviceState.siriLocale.getter();
}

uint64_t OUTLINED_FUNCTION_9_28(uint64_t a1)
{
  return closure #1 in INCallRecordTypeOptions.INPBStringRepresentation.getter(a1);
}

uint64_t OUTLINED_FUNCTION_10_20(uint64_t a1)
{
  return closure #1 in INCallCapabilityOptions.INPBStringRepresentation.getter(a1);
}

void OUTLINED_FUNCTION_14_14()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_15_17()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_16_23()
{
  return static PhonePerson.make(phonePerson:options:locale:)(v0, 0, v1);
}

void OUTLINED_FUNCTION_17_12()
{
  *(void *)(v1 - 272) = v0;
}

BOOL OUTLINED_FUNCTION_19_14@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

Swift::Bool __swiftcall ResponseMode.isDisplayMode()()
{
  return ResponseMode.isDisplayMode()((void (*)(uint64_t))&static ResponseMode.displayOnly.getter, (void (*)(uint64_t))&static ResponseMode.displayForward.getter);
}

Swift::Bool __swiftcall ResponseMode.isVoiceMode()()
{
  return ResponseMode.isDisplayMode()((void (*)(uint64_t))&static ResponseMode.voiceOnly.getter, (void (*)(uint64_t))&static ResponseMode.voiceForward.getter);
}

uint64_t ResponseMode.isDisplayMode()(void (*a1)(uint64_t), void (*a2)(uint64_t))
{
  uint64_t v5 = v2;
  uint64_t v6 = type metadata accessor for ResponseMode();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  id v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  unint64_t v13 = (char *)&v18 - v12;
  a1(v11);
  LOBYTE(a1) = static ResponseMode.== infix(_:_:)();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v13, v6);
  uint64_t v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v5, v6);
  if (a1)
  {
    char v16 = 1;
  }
  else
  {
    a2(v15);
    char v16 = static ResponseMode.== infix(_:_:)();
    v14(v13, v6);
  }
  v14(v10, v6);
  return v16 & 1;
}

uint64_t String.init(describing:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a1, v2);
  OUTLINED_FUNCTION_1();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v6);
  uint64_t v8 = specialized String.init(describing:)((uint64_t)v6, v2, v3);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v8;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  Swift::String v17;
  uint64_t v18;
  void (*v19)(void);
  void (*v20)(void);
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void v26[2];

  uint64_t v3 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_1();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_4();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = type metadata accessor for USOParse();
  OUTLINED_FUNCTION_1();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_52();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v9, a1, v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v5 + 88))(v9, v3) == enum case for Parse.uso(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 96))(v9, v3);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v1, v9, v10);
    strcpy((char *)v26, ".uso parse: ");
    BYTE5(v26[1]) = 0;
    HIWORD(v26[1]) = -5120;
    type metadata accessor for SiriNLUTypesPrintUtils();
    id v24 = type metadata accessor for Siri_Nlu_External_UserParse();
    unint64_t v25 = lazy protocol witness table accessor for type Siri_Nlu_External_UserParse and conformance Siri_Nlu_External_UserParse(&lazy protocol witness table cache variable for type Siri_Nlu_External_UserParse and conformance Siri_Nlu_External_UserParse, (void (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_UserParse);
    __swift_allocate_boxed_opaque_existential_1(&v22);
    USOParse.userParse.getter();
    uint64_t v14 = static SiriNLUTypesPrintUtils.printableProtoObject(object:)();
    char v16 = v15;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v22);
    v17._uint64_t countAndFlagsBits = v14;
    v17._object = v16;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    uint64_t v22 = v26[0];
    uint64_t v23 = v26[1];
    uint64_t v18 = String.init<A>(_:)();
    OUTLINED_FUNCTION_7_33();
    v19();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v1, v10);
  }
  else
  {
    uint64_t v20 = *(void (**)(void))(v5 + 8);
    OUTLINED_FUNCTION_7_33();
    v20();
    uint64_t v22 = 0;
    uint64_t v23 = 0xE000000000000000;
    _print_unlocked<A, B>(_:_:)();
    uint64_t v18 = String.init<A>(_:)();
    OUTLINED_FUNCTION_7_33();
    v20();
  }
  return v18;
}

void Siri_Nlu_External_UserParse.preferredUserDialogAct.getter(uint64_t a1@<X8>)
{
  uint64_t v59 = a1;
  uint64_t v58 = type metadata accessor for Siri_Nlu_External_CorrectionOutcome.CorrectionType();
  OUTLINED_FUNCTION_1();
  uint64_t v56 = v2;
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_5_8();
  uint64_t v57 = v4;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v53 - v6;
  uint64_t v55 = type metadata accessor for Siri_Nlu_External_CorrectionOutcome();
  OUTLINED_FUNCTION_1();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_8_7();
  type metadata accessor for Siri_Nlu_External_UserParse();
  OUTLINED_FUNCTION_1();
  uint64_t v61 = v12;
  uint64_t v62 = v11;
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_4();
  uint64_t v15 = v14 - v13;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  __chkstk_darwin(v16 - 8);
  OUTLINED_FUNCTION_5_8();
  uint64_t v54 = v17;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)v53 - v19;
  uint64_t v21 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  OUTLINED_FUNCTION_1();
  uint64_t v60 = v22;
  uint64_t v24 = __chkstk_darwin(v23);
  id v26 = (char *)v53 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v28 = (char *)v53 - v27;
  uint64_t v29 = Siri_Nlu_External_UserParse.userDialogActs.getter();
  uint64_t v65 = v29;
  specialized Collection.first.getter();
  OUTLINED_FUNCTION_9_29((uint64_t)v20);
  if (v30)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?((uint64_t)v20);
LABEL_18:
    specialized Collection.first.getter();
    swift_bridgeObjectRelease();
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v28, v20, v21);
  unint64_t v31 = *(void *)(v29 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 16))(v15, v1, v62);
  if (v31 < 2)
  {
    uint64_t v49 = OUTLINED_FUNCTION_8_34();
    v50(v49);
    uint64_t v51 = OUTLINED_FUNCTION_1_40();
    v52(v51);
    goto LABEL_16;
  }
  Siri_Nlu_External_UserParse.correctionOutcome.getter();
  v53[1] = v7;
  Siri_Nlu_External_CorrectionOutcome.type.getter();
  OUTLINED_FUNCTION_5_30();
  v32();
  uint64_t v33 = v56;
  (*(void (**)(uint64_t, void, uint64_t))(v56 + 104))(v57, enum case for Siri_Nlu_External_CorrectionOutcome.CorrectionType.userInitiated(_:), v58);
  lazy protocol witness table accessor for type Siri_Nlu_External_UserParse and conformance Siri_Nlu_External_UserParse(&lazy protocol witness table cache variable for type Siri_Nlu_External_CorrectionOutcome.CorrectionType and conformance Siri_Nlu_External_CorrectionOutcome.CorrectionType, (void (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_CorrectionOutcome.CorrectionType);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v35 = v63;
  uint64_t v34 = v64;
  os_log_type_t v36 = *(void (**)(void))(v33 + 8);
  uint64_t v9 = v33 + 8;
  OUTLINED_FUNCTION_5_30();
  v36();
  OUTLINED_FUNCTION_5_30();
  v36();
  uint64_t v37 = OUTLINED_FUNCTION_8_34();
  v38(v37);
  uint64_t v39 = OUTLINED_FUNCTION_1_40();
  v40(v39);
  if (v34 != v35)
  {
LABEL_16:
    uint64_t v42 = *(void (**)(void))(v9 + 8);
    ((void (*)(char *, uint64_t))v42)(v26, v21);
LABEL_17:
    ((void (*)(char *, uint64_t))v42)(v28, v21);
    goto LABEL_18;
  }
  char v41 = Siri_Nlu_External_UserDialogAct.hasRejected.getter();
  uint64_t v42 = *(void (**)(void))(v9 + 8);
  OUTLINED_FUNCTION_5_30();
  v42();
  if ((v41 & 1) == 0) {
    goto LABEL_17;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v43 = type metadata accessor for Logger();
  __swift_project_value_buffer(v43, (uint64_t)static Logger.siriPhone);
  id v44 = Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v44, v45))
  {
    uint64_t v46 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v46 = 0;
    _os_log_impl(&dword_0, v44, v45, "#NLUUserParse detected a correction! Skipping first UserRejected", v46, 2u);
    swift_slowDealloc();
  }

  uint64_t v47 = v65;
  if (!*(void *)(v65 + 16))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v48 = v54;
  specialized Collection.first.getter();
  OUTLINED_FUNCTION_9_29(v48);
  if (!v30)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?(v48);
    if (*(void *)(v47 + 16))
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, 1);
      OUTLINED_FUNCTION_5_30();
      v42();
      goto LABEL_18;
    }
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
}

uint64_t Siri_Nlu_External_UserDialogAct.isRejectedOrCancelled.getter()
{
  uint64_t v1 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  OUTLINED_FUNCTION_1();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_4();
  uint64_t v7 = v6 - v5;
  char v8 = Siri_Nlu_External_UserDialogAct.hasRejected.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v7, v0, v1);
  if (v8) {
    char v9 = 1;
  }
  else {
    char v9 = Siri_Nlu_External_UserDialogAct.hasCancelled.getter();
  }
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v1);
  return v9 & 1;
}

uint64_t Siri_Nlu_External_UserDialogAct.siriKitConfirmationState.getter@<X0>(uint64_t a1@<X8>)
{
  if (Siri_Nlu_External_UserDialogAct.hasAccepted.getter())
  {
    uint64_t v2 = (unsigned int *)&enum case for SiriKitConfirmationState.confirmed(_:);
  }
  else
  {
    if ((Siri_Nlu_External_UserDialogAct.hasRejected.getter() & 1) == 0)
    {
      char v10 = Siri_Nlu_External_UserDialogAct.hasCancelled.getter();
      type metadata accessor for SiriKitConfirmationState();
      OUTLINED_FUNCTION_15();
      uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 104);
      if (v10) {
        uint64_t v12 = (unsigned int *)&enum case for SiriKitConfirmationState.cancelled(_:);
      }
      else {
        uint64_t v12 = (unsigned int *)&enum case for SiriKitConfirmationState.unset(_:);
      }
      uint64_t v9 = *v12;
      uint64_t v8 = a1;
      goto LABEL_10;
    }
    uint64_t v2 = (unsigned int *)&enum case for SiriKitConfirmationState.rejected(_:);
  }
  uint64_t v3 = *v2;
  type metadata accessor for SiriKitConfirmationState();
  OUTLINED_FUNCTION_15();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104);
  uint64_t v7 = v6;
  uint64_t v8 = a1;
  uint64_t v9 = v3;
LABEL_10:

  return v5(v8, v9, v7);
}

uint64_t Siri_Nlu_External_UserParse.siriKitConfirmationState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  __chkstk_darwin(v4 - 8);
  OUTLINED_FUNCTION_8_7();
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  OUTLINED_FUNCTION_1();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_52();
  Siri_Nlu_External_UserParse.userDialogActs.getter();
  specialized Collection.first.getter();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_9_29(v1);
  if (v9)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?(v1);
    uint64_t v10 = enum case for SiriKitConfirmationState.unset(_:);
    type metadata accessor for SiriKitConfirmationState();
    OUTLINED_FUNCTION_15();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 104))(a1, v10);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v2, v1, v5);
    Siri_Nlu_External_UserDialogAct.siriKitConfirmationState.getter(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v2, v5);
  }
}

void specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v6 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v7 = a1 - a2;
  if (__OFSUB__(0, v6))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v8 = v5 - v6;
  if (__OFADD__(v5, v7))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v8 > *(void *)(v4 + 24) >> 1)
  {
    if (v5 <= v8) {
      uint64_t v10 = v5 + v7;
    }
    else {
      uint64_t v10 = v5;
    }
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v10, 1, v4);
  }
  uint64_t v11 = *(void *)(type metadata accessor for Siri_Nlu_External_UserDialogAct() - 8);
  unint64_t v12 = v4 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  uint64_t v13 = *(void *)(v11 + 72);
  swift_arrayDestroy();
  if (!v6) {
    goto LABEL_16;
  }
  uint64_t v14 = *(void *)(v4 + 16);
  if (__OFSUB__(v14, a2)) {
    goto LABEL_22;
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v12 + v13 * a2, v14 - a2);
  uint64_t v15 = *(void *)(v4 + 16);
  BOOL v16 = __OFADD__(v15, v7);
  uint64_t v17 = v15 - v6;
  if (!v16)
  {
    *(void *)(v4 + 16) = v17;
LABEL_16:
    *uint64_t v2 = v4;
    return;
  }
LABEL_23:
  __break(1u);
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = a3;
    uint64_t v5 = a2;
    uint64_t v6 = a1;
    if (!((unint64_t)*v4 >> 62))
    {
      uint64_t v9 = *(void *)((char *)&dword_10 + (*v4 & 0xFFFFFFFFFFFFFF8));
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_4:
  if (v9 < v5)
  {
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v3 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  uint64_t v8 = v7 >> 62;
  if (!(v7 >> 62))
  {
    uint64_t v10 = *(void *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFFF8));
    goto LABEL_8;
  }
LABEL_38:
  swift_bridgeObjectRetain();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_8:
  uint64_t v11 = v10 - v3;
  if (__OFSUB__(v10, v3))
  {
    __break(1u);
  }
  else if (!((unint64_t)*v4 >> 62))
  {
    uint64_t v12 = *(void *)((char *)&dword_10 + (*v4 & 0xFFFFFFFFFFFFFF8));
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_11:
  if (__OFADD__(v12, v11))
  {
    __break(1u);
    goto LABEL_42;
  }
  unint64_t v13 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v4 = v13;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v13 & 0x8000000000000000) != 0
    || (v13 & 0x4000000000000000) != 0
    || (uint64_t v15 = v13 & 0xFFFFFFFFFFFFFF8, v12 + v11 > *(void *)((char *)&dword_18 + (v13 & 0xFFFFFFFFFFFFFF8)) >> 1))
  {
    uint64_t v23 = v6;
    uint64_t v6 = v5;
    uint64_t v5 = v10 - v3;
    uint64_t v11 = v10;
    uint64_t v10 = v8;
    uint64_t v8 = v7;
    if (!(v13 >> 62))
    {
LABEL_17:
      swift_bridgeObjectRetain();
      *uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      uint64_t v15 = *v4 & 0xFFFFFFFFFFFFFF8;
      unint64_t v7 = v8;
      uint64_t v8 = v10;
      uint64_t v10 = v11;
      uint64_t v11 = v5;
      uint64_t v5 = v6;
      uint64_t v6 = v23;
      goto LABEL_18;
    }
LABEL_42:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
LABEL_18:
  uint64_t v16 = v15 + 32;
  uint64_t v17 = v15 + 32 + 8 * v6;
  type metadata accessor for INPerson();
  uint64_t result = swift_arrayDestroy();
  if (!v11) {
    goto LABEL_26;
  }
  uint64_t v24 = v11;
  if ((unint64_t)*v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v19 = *(void *)((char *)&dword_10 + (*v4 & 0xFFFFFFFFFFFFFF8));
  }
  if (__OFSUB__(v19, v5))
  {
    __break(1u);
    goto LABEL_45;
  }
  uint64_t result = specialized UnsafeMutablePointer.moveInitialize(from:count:)(v16 + 8 * v5, v19 - v5, v17 + 8 * v10);
  if ((unint64_t)*v4 >> 62)
  {
LABEL_45:
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  uint64_t v20 = *(void *)((char *)&dword_10 + (*v4 & 0xFFFFFFFFFFFFFF8));
LABEL_24:
  if (__OFADD__(v20, v24))
  {
    __break(1u);
    goto LABEL_47;
  }
  *(void *)((char *)&dword_10 + (*v4 & 0xFFFFFFFFFFFFFF8)) = v20 + v24;
LABEL_26:
  if (v10 >= 1)
  {
    if (v8)
    {
      unint64_t v21 = swift_bridgeObjectRetain();
      uint64_t v22 = specialized _copyCollectionToContiguousArray<A>(_:)(v21);
      swift_bridgeObjectRelease();
      specialized closure #1 in _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)((uint64_t)(v22 + 4), v22[2], v10);
      swift_release();
      goto LABEL_31;
    }
    if (*(void *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFFF8)) == v10)
    {
      swift_arrayInitWithCopy();
      goto LABEL_31;
    }
LABEL_47:
    __break(1u);
    return result;
  }
LABEL_31:
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = a3;
    uint64_t v5 = a2;
    uint64_t v6 = a1;
    if (!(*v4 >> 62))
    {
      uint64_t v8 = *(void *)((char *)&dword_10 + (*v4 & 0xFFFFFFFFFFFFFF8));
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_4:
  if (v8 < v5)
  {
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v9 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v7 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (!(*v4 >> 62))
  {
    uint64_t v10 = *(void *)((char *)&dword_10 + (*v4 & 0xFFFFFFFFFFFFFF8));
    goto LABEL_9;
  }
LABEL_32:
  swift_bridgeObjectRetain();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_9:
  uint64_t v11 = v10 + v7;
  if (__OFADD__(v10, v7))
  {
    __break(1u);
    goto LABEL_34;
  }
  unint64_t v12 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v4 = v12;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v12 & 0x8000000000000000) != 0
    || (v12 & 0x4000000000000000) != 0
    || (uint64_t v14 = v12 & 0xFFFFFFFFFFFFFF8, v11 > *(void *)((char *)&dword_18 + (v12 & 0xFFFFFFFFFFFFFF8)) >> 1))
  {
    if (!(v12 >> 62))
    {
LABEL_15:
      swift_bridgeObjectRetain();
      unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      *uint64_t v4 = v12;
      uint64_t v14 = v12 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_16;
    }
LABEL_34:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
LABEL_16:
  uint64_t v15 = (void *)(v14 + 32 + 8 * v6);
  type metadata accessor for INPerson();
  swift_arrayDestroy();
  if (!v7) {
    goto LABEL_24;
  }
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v16 = *(void *)(v14 + 16);
  }
  if (__OFSUB__(v16, v5))
  {
    __break(1u);
    goto LABEL_37;
  }
  uint64_t result = specialized UnsafeMutablePointer.moveInitialize(from:count:)(v14 + 32 + 8 * v5, v16 - v5, v15 + 1);
  if (v12 >> 62)
  {
LABEL_37:
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  uint64_t v18 = *(void *)(v14 + 16);
LABEL_22:
  if (__OFADD__(v18, v7))
  {
    __break(1u);
    return result;
  }
  *(void *)(v14 + 16) = v18 + v7;
LABEL_24:
  *uint64_t v15 = v3;

  return specialized Array._endMutation()();
}

uint64_t specialized closure #1 in _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 == a3)
  {
    if (result)
    {
      type metadata accessor for INPerson();
      return swift_arrayInitWithCopy();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t lazy protocol witness table accessor for type Siri_Nlu_External_UserParse and conformance Siri_Nlu_External_UserParse(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_40()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_8_34()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_9_29(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

uint64_t Optional<A>.isNilOrEmpty.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  __chkstk_darwin(a1);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v5, a1);
  uint64_t v6 = *(void *)(a1 + 16);
  if (__swift_getEnumTagSinglePayload((uint64_t)v4, 1, v6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
    char v7 = 1;
  }
  else
  {
    char v7 = dispatch thunk of Collection.isEmpty.getter();
    (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8))(v4, v6);
  }
  return v7 & 1;
}

uint64_t Optional<A>.emptyToNil.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (Optional<A>.isNilOrEmpty.getter(a1))
  {
    uint64_t v5 = *(void *)(a1 + 16);
    return __swift_storeEnumTagSinglePayload(a2, 1, 1, v5);
  }
  else
  {
    char v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16);
    return v7(a2, v2, a1);
  }
}

PhoneCallFlowDelegatePlugin::PhoneCallEmergencyLocationType_optional __swiftcall PhoneCallEmergencyLocationType.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PhoneCallEmergencyLocationType.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return (PhoneCallFlowDelegatePlugin::PhoneCallEmergencyLocationType_optional)3;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::PhoneCallEmergencyLocationType_optional)v3;
  }
}

uint64_t PhoneCallEmergencyLocationType.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x6C61636F6CLL;
  }
  if (a1 == 1) {
    return 0x6C61636F4C6E6F6ELL;
  }
  return 1701736302;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallEmergencyLocationType(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PhoneCallEmergencyLocationType()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneCallEmergencyLocationType(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallEmergencyLocationType()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

PhoneCallFlowDelegatePlugin::PhoneCallEmergencyLocationType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallEmergencyLocationType@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallEmergencyLocationType_optional *a2@<X8>)
{
  result.value = PhoneCallEmergencyLocationType.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallEmergencyLocationType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = PhoneCallEmergencyLocationType.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t PhoneCallEmergencyType.semanticValue.getter(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0xD000000000000011;
  if (a2 == 1) {
    unint64_t v2 = 0xD000000000000012;
  }
  if (a2 == 2) {
    return 0x636E656772656D65;
  }
  else {
    return v2;
  }
}

uint64_t static ParseError.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  switch(a2)
  {
    case 0:
      return !a4;
    case 1:
      return a4 == 1;
    case 2:
      return a4 == 2;
  }
  if (a4 < 3) {
    return 0;
  }
  if (a1 != a3 || a2 != a4) {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  return 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallEmergencyType(uint64_t *a1, uint64_t a2)
{
  return static ParseError.__derived_enum_equals(_:_:)(*a1, a1[1], *(void *)a2, *(void *)(a2 + 8));
}

uint64_t PhoneCallContactSearchQualifier.exclusive.getter(unsigned int a1)
{
  return (a1 >> 8) & 1;
}

uint64_t PhoneCallContactSearchQualifier.nobody.getter(unsigned int a1)
{
  return HIWORD(a1) & 1;
}

uint64_t static PhoneCallContactSearchQualifier.__derived_struct_equals(_:_:)(unsigned int a1, int a2)
{
  unsigned int v2 = ((a2 ^ a1) >> 8) & 1;
  if (a2 != a1) {
    unsigned int v2 = 1;
  }
  return (v2 | (((a2 ^ a1) & 0x10000) >> 16)) ^ 1;
}

PhoneCallFlowDelegatePlugin::PhoneCallContactSearchQualifier __swiftcall PhoneCallContactSearchQualifier.init(role:exclusive:nobody:)(PhoneCallFlowDelegatePlugin::PhoneCallContactRole role, Swift::Bool exclusive, Swift::Bool nobody)
{
  if (nobody) {
    int v3 = 0x10000;
  }
  else {
    int v3 = 0;
  }
  if (exclusive) {
    int v4 = 256;
  }
  else {
    int v4 = 0;
  }
  return (PhoneCallFlowDelegatePlugin::PhoneCallContactSearchQualifier)(v4 & 0xFFFFFF00 | role | v3);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallContactSearchQualifier(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1[2]) {
    int v2 = 0x10000;
  }
  else {
    int v2 = 0;
  }
  if (a1[1]) {
    int v3 = 256;
  }
  else {
    int v3 = 0;
  }
  unsigned int v4 = v3 | *a1 | v2;
  if (a2[2]) {
    int v5 = 0x10000;
  }
  else {
    int v5 = 0;
  }
  if (a2[1]) {
    int v6 = 256;
  }
  else {
    int v6 = 0;
  }
  return static PhoneCallContactSearchQualifier.__derived_struct_equals(_:_:)(v4, v6 | *a2 | v5);
}

uint64_t PhoneCallPersonName.namePrefix.getter()
{
  return OUTLINED_FUNCTION_7_0();
}

uint64_t PhoneCallPersonName.namePrefix.setter()
{
  OUTLINED_FUNCTION_6_5();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 80) = v2;
  *(void *)(v1 + 88) = v0;
  return result;
}

void __swiftcall PhoneCallPersonName.init()(PhoneCallFlowDelegatePlugin::PhoneCallPersonName *__return_ptr retstr)
{
  retstr->namePrefix = 0u;
  retstr->nameSuffix = 0u;
  retstr->nickName = 0u;
  retstr->fullName = 0u;
  retstr->middleName = 0u;
  retstr->lastName = 0u;
  retstr->firstName = 0u;
}

Swift::Void __swiftcall SiriPhoneContact.update(contactSource:)(PhoneCallFlowDelegatePlugin::ContactSourceType_optional contactSource)
{
  (*(void (**)(void))(v1 + 88))(*(void *)&contactSource);
}

Swift::String_optional __swiftcall SiriPhoneContact.getContactId()()
{
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 32))();
  result.value._object = v2;
  result.value._uint64_t countAndFlagsBits = v1;
  return result;
}

PhoneCallFlowDelegatePlugin::PhoneCallEmergencyLocationType_optional __swiftcall SiriPhoneContact.getEmergencyLocationType()()
{
  return (PhoneCallFlowDelegatePlugin::PhoneCallEmergencyLocationType_optional)(*(unsigned __int8 (**)(void))(v0 + 296))();
}

id @nonobjc INPersonHandle.init(value:type:label:emergencyType:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = [v5 initWithValue:v9 type:a3 label:a4 emergencyType:a5];

  return v10;
}

unint64_t lazy protocol witness table accessor for type PhoneCallEmergencyLocationType and conformance PhoneCallEmergencyLocationType()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallEmergencyLocationType and conformance PhoneCallEmergencyLocationType;
  if (!lazy protocol witness table cache variable for type PhoneCallEmergencyLocationType and conformance PhoneCallEmergencyLocationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallEmergencyLocationType and conformance PhoneCallEmergencyLocationType);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PhoneCallEmergencyLocationType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0xF4D00);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for PhoneCallEmergencyLocationType()
{
}

unint64_t destroy for PhoneCallEmergencyType(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PhoneCallEmergencyType(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for PhoneCallEmergencyType(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PhoneCallEmergencyType(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PhoneCallEmergencyType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 2;
  if (v4 >= 4) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PhoneCallEmergencyType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 2;
    }
  }
  return result;
}

uint64_t getEnumTag for PhoneCallEmergencyType(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for PhoneCallEmergencyType(void *result, int a2)
{
  if (a2 < 0)
  {
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

void type metadata accessor for PhoneCallEmergencyType()
{
}

uint64_t __swift_memcpy3_1(uint64_t result, __int16 *a2)
{
  __int16 v2 = *a2;
  *(unsigned char *)(result + 2) = *((unsigned char *)a2 + 2);
  *(_WORD *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for PhoneCallContactSearchQualifier(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v3 = -1;
    return (v3 + 1);
  }
  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      int v2 = a1[3];
      if (a1[3]) {
        goto LABEL_5;
      }
    }
    else
    {
      int v2 = *(unsigned __int16 *)(a1 + 3);
      if (*(_WORD *)(a1 + 3))
      {
LABEL_5:
        int v3 = (*(unsigned __int16 *)a1 | (a1[2] << 16) | (v2 << 24)) - 16776962;
        return (v3 + 1);
      }
    }
  }
  unsigned int v4 = a1[1];
  BOOL v5 = v4 >= 2;
  int v3 = (v4 + 2147483646) & 0x7FFFFFFF;
  if (!v5) {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for PhoneCallContactSearchQualifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if ((a3 + 33554177) >> 24) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (a3 <= 0xFE) {
    int v3 = 0;
  }
  if (a2 > 0xFE)
  {
    *(_WORD *)unint64_t result = a2 - 255;
    *(unsigned char *)(result + 2) = (a2 - 255) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + 3) = v4;
      }
      else {
        *(unsigned char *)(result + 3) = v4;
      }
    }
  }
  else
  {
    if (!v3) {
      goto LABEL_10;
    }
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2) {
        return result;
      }
LABEL_16:
      *(unsigned char *)(result + 1) = a2 + 1;
      return result;
    }
    *(unsigned char *)(result + 3) = 0;
    if (a2) {
      goto LABEL_16;
    }
  }
  return result;
}

void type metadata accessor for PhoneCallContactSearchQualifier()
{
}

uint64_t destroy for PhoneCallPersonName()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for PhoneCallPersonName(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  uint64_t v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  uint64_t v9 = a2[13];
  a1[12] = a2[12];
  a1[13] = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PhoneCallPersonName(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[12] = a2[12];
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *__swift_memcpy112_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x70uLL);
}

void *assignWithTake for PhoneCallPersonName(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = a2[13];
  a1[12] = a2[12];
  a1[13] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PhoneCallPersonName(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 112))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PhoneCallPersonName(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 112) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

void type metadata accessor for PhoneCallPersonName()
{
}

uint64_t initializeWithCopy for BackingContact(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 3) {
    unsigned int v3 = *(_DWORD *)a2 + 3;
  }
  if (v3 == 2)
  {
    long long v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    *(unsigned char *)(a1 + 40) = 2;
  }
  else if (v3 == 1)
  {
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + 40) = 1;
    swift_retain();
  }
  else
  {
    uint64_t v5 = *(void **)a2;
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + 40) = 0;
    id v6 = v5;
  }
  return a1;
}

uint64_t assignWithTake for BackingContact(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 3) {
      unsigned int v4 = *(_DWORD *)a1 + 3;
    }
    if (v4 == 2)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    else if (v4 == 1)
    {
      swift_release();
    }
    else
    {
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 3) {
      unsigned int v5 = *(_DWORD *)a2 + 3;
    }
    if (v5 == 2)
    {
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      char v6 = 2;
    }
    else if (v5 == 1)
    {
      *(void *)a1 = *(void *)a2;
      char v6 = 1;
    }
    else
    {
      char v6 = 0;
      *(void *)a1 = *(void *)a2;
    }
    *(unsigned char *)(a1 + 40) = v6;
  }
  return a1;
}

uint64_t getEnumTag for BackingContact(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 3) {
    return (*(_DWORD *)a1 + 3);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for BackingContact(uint64_t result, unsigned int a2)
{
  if (a2 > 2)
  {
    *(void *)(result + 32) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 40) = a2;
  return result;
}

void type metadata accessor for BackingContact()
{
}

uint64_t OUTLINED_FUNCTION_0_29()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_1_41(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t OUTLINED_FUNCTION_2_38()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_7_34()
{
  return v0;
}

id OUTLINED_FUNCTION_9_30()
{
  unsigned int v3 = *(const char **)(v0 + 3360);
  return [v1 v3];
}

uint64_t OUTLINED_FUNCTION_11_21(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  return outlined init with take of String?((uint64_t)&a9, (uint64_t)&a23, a3);
}

uint64_t OUTLINED_FUNCTION_12_15(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_17_13()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_18_15()
{
  return 0;
}

id OUTLINED_FUNCTION_19_15()
{
  unsigned int v3 = *(const char **)(v0 + 40);
  return [v1 v3];
}

uint64_t OUTLINED_FUNCTION_22_11()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_23_10()
{
  return v0;
}

void *SKTransformer.RCHFlowContext.previousIntent.getter(uint64_t a1, void *a2)
{
  id v3 = a2;
  return a2;
}

void *SKTransformer.RCHFlowContext.previousIntentResponse.getter(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  return a3;
}

uint64_t SKTransformer.nlv4Conversion<A>(phoneCallNLIntent:rchFlowContext:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v29)(long long *__return_ptr, uint64_t *);
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  id v34;
  void (*v35)(long long *__return_ptr, uint64_t *);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  void *v65;
  long long v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  uint64_t v58 = (void *)a4;
  uint64_t v65 = (void *)a3;
  uint64_t v63 = a1;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INAddCallParticipantIntent>);
  uint64_t v10 = *(v9 - 1);
  uint64_t v55 = v9;
  uint64_t v56 = v10;
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INJoinCallIntent>);
  uint64_t v57 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for ContactGroupResolver();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v59 = v16;
  uint64_t v60 = v17;
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = a2;
  if (a2)
  {
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INStartCallIntent);
    if (swift_dynamicCastMetatype())
    {
      outlined init with copy of SharedGlobalsProviding(v62, (uint64_t)&v66);
      if (v65)
      {
        self;
        swift_dynamicCastObjCClass();
      }
      swift_retain();
      ContactGroupResolver.init()();
      specialized static StartCallIntentConversion.convertToIntent(phoneCallNLIntent:app:sharedGlobals:previousIntent:previousIntentResponse:groupResolver:)();
      goto LABEL_18;
    }
    type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for INStartAudioCallIntent);
    if (swift_dynamicCastMetatype())
    {
      outlined init with copy of SharedGlobalsProviding(v62, (uint64_t)&v66);
      if (v65)
      {
        self;
        swift_dynamicCastObjCClass();
      }
      swift_retain();
      ContactGroupResolver.init()();
      specialized static StartAudioCallIntentConversion.convertToIntent(phoneCallNLIntent:app:sharedGlobals:previousIntent:previousIntentResponse:groupResolver:)();
      goto LABEL_18;
    }
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INStartVideoCallIntent);
    if (swift_dynamicCastMetatype())
    {
      outlined init with copy of SharedGlobalsProviding(v62, (uint64_t)&v66);
      if (v65)
      {
        self;
        swift_dynamicCastObjCClass();
      }
      swift_retain();
      ContactGroupResolver.init()();
      specialized static StartVideoCallIntentConversion.convertToIntent(phoneCallNLIntent:app:sharedGlobals:previousIntent:previousIntentResponse:groupResolver:)();
      goto LABEL_18;
    }
    type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for INAnswerCallIntent);
    if (swift_dynamicCastMetatype())
    {
      outlined init with copy of SharedGlobalsProviding(v62, (uint64_t)&v66);
      uint64_t v21 = (uint64_t)v65;
      if (v65)
      {
        self;
        uint64_t v21 = swift_dynamicCastObjCClass();
      }
      uint64_t v22 = (uint64_t)v58;
      uint64_t v23 = v64;
      swift_retain();
      ContactGroupResolver.init()();
      uint64_t v20 = specialized static AnswerCallIntentConversion.convertToIntent(phoneCallNLIntent:app:sharedGlobals:previousIntent:previousIntentResponse:groupResolver:)(v63, v23, &v66, v21, v22, v19);
      goto LABEL_18;
    }
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INJoinCallIntent);
    if (swift_dynamicCastMetatype())
    {
      outlined init with copy of SharedGlobalsProviding(v62, (uint64_t)&v66);
      uint64_t v26 = swift_allocObject();
      uint64_t v27 = v65;
      *(void *)(v26 + 16) = v64;
      *(void *)(v26 + 24) = v27;
      outlined init with take of AppSelectionSignalComponent(&v66, v26 + 32);
      id v28 = v27;
      swift_retain_n();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
      Transformer.init(transform:)();
      uint64_t v29 = (void (*)(long long *__return_ptr, uint64_t *))Transformer.transform.getter();
      (*(void (**)(char *, uint64_t))(v57 + 8))(v15, v13);
      char v30 = v61;
      v29(&v66, v63);
      if (v30) {
        goto LABEL_28;
      }
    }
    else
    {
      type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INAddCallParticipantIntent);
      if (!swift_dynamicCastMetatype())
      {
        type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for INIdentifyIncomingCallerIntent);
        if (swift_dynamicCastMetatype())
        {
          outlined init with copy of SharedGlobalsProviding(v62, (uint64_t)&v66);
          uint64_t v37 = (uint64_t)v65;
          if (v65)
          {
            self;
            uint64_t v37 = swift_dynamicCastObjCClass();
          }
          uint64_t v38 = v64;
          swift_retain();
          ContactGroupResolver.init()();
          uint64_t v20 = specialized static IdentifyCallerIntentConversion.convertToIntent(phoneCallNLIntent:app:sharedGlobals:previousIntent:previousIntentResponse:groupResolver:)(v63, v38, &v66, v37, 0, v19);
        }
        else
        {
          type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INHangUpCallIntent);
          uint64_t v39 = swift_dynamicCastMetatype();
          uint64_t v40 = v65;
          if (!v39)
          {
            type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for INSearchCallHistoryIntent);
            if (!swift_dynamicCastMetatype())
            {
              uint64_t v49 = type metadata accessor for TransformationError();
              lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
              swift_allocError();
              (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v49 - 8) + 104))(v50, enum case for TransformationError.notImplemented(_:), v49);
              return swift_willThrow();
            }
            outlined init with copy of SharedGlobalsProviding(v62, (uint64_t)&v66);
            if (v40)
            {
              self;
              LODWORD(v40) = swift_dynamicCastObjCClass();
            }
            uint64_t v43 = v64;
            swift_retain();
            ContactGroupResolver.init()();
            id v44 = static Transformer<>.convertToIntent(phoneCallNLIntent:app:sharedGlobals:previousIntent:)(v63, v43, &v66);
            id v24 = specialized static NLv4IntentConversion.setIntentMetadata(for:sharedGlobals:app:previousIntent:)((int)v44, (int)&v66, v43, (int)v40, v45, v46, v47, v48, v55, v56, v57, (uint64_t)v58, v59, v60, v61, v62, (uint64_t)v63, v64, (uint64_t)v65,
                    v66,
                    *((uint64_t *)&v66 + 1),
                    v67,
                    v68,
                    v69);
            swift_release();

            (*(void (**)(char *, uint64_t))(v60 + 8))(v19, v59);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v66);
            goto LABEL_19;
          }
          outlined init with copy of SharedGlobalsProviding(v62, (uint64_t)&v66);
          if (v40)
          {
            self;
            uint64_t v40 = (void *)swift_dynamicCastObjCClass();
          }
          char v41 = v58;
          uint64_t v42 = v64;
          swift_retain();
          ContactGroupResolver.init()();
          uint64_t v20 = specialized static HangUpCallIntentConversion.convertToIntent(phoneCallNLIntent:app:sharedGlobals:previousIntent:previousIntentResponse:groupResolver:)((uint64_t)v63, v42, (uint64_t)&v66, v40, v41);
        }
LABEL_18:
        id v24 = (id)v20;
        swift_release();
        (*(void (**)(char *, uint64_t))(v60 + 8))(v19, v59);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v66);
        if (!v24) {
          return 0;
        }
        goto LABEL_19;
      }
      outlined init with copy of SharedGlobalsProviding(v62, (uint64_t)&v66);
      unint64_t v31 = swift_allocObject();
      uint64_t v32 = v65;
      *(void *)(v31 + 16) = v64;
      *(void *)(v31 + 24) = v32;
      outlined init with take of AppSelectionSignalComponent(&v66, v31 + 32);
      uint64_t v33 = v32;
      swift_retain_n();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
      Transformer.init(transform:)();
      uint64_t v34 = v55;
      uint64_t v35 = (void (*)(long long *__return_ptr, uint64_t *))Transformer.transform.getter();
      (*(void (**)(char *, id))(v56 + 8))(v12, v34);
      os_log_type_t v36 = v61;
      v35(&v66, v63);
      if (v36)
      {
LABEL_28:
        swift_release();
        return swift_release();
      }
    }
    swift_release();
    swift_release();
    id v24 = (id)v66;
LABEL_19:
    uint64_t result = swift_dynamicCastUnknownClass();
    if (!result)
    {

      return 0;
    }
    return result;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v51 = __swift_project_value_buffer(v5, (uint64_t)static Logger.siriPhone);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v51, v5);
  uint64_t v52 = Logger.logObject.getter();
  uint64_t v53 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v52, v53))
  {
    uint64_t v54 = (uint8_t *)swift_slowAlloc();
    *(void *)&uint64_t v66 = swift_slowAlloc();
    *(_DWORD *)uint64_t v54 = 136315138;
    uint64_t v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000032, 0x8000000000493780, (uint64_t *)&v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v52, v53, "%s", v54, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  static SiriKitLifecycle._logCrashToEventBus(_:)();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t SKTransformer.convertToSKIntent<A>(ofType:phoneCallNLIntent:rchFlowContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return SKTransformer.convertToSKIntent<A>(phoneCallNLIntent:rchFlowContext:)(a2, a3, a4, a5, a6);
}

uint64_t DisambiguationReferenceResolver.init(referenceResolver:)@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with take of AppSelectionSignalComponent(a1, a2);
}

uint64_t outlined destroy of PhoneCallNLIntent?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallNLIntent?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeWithCopy for SKTransformer(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for SKTransformer(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SKTransformer(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SKTransformer(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SKTransformer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SKTransformer()
{
  return &type metadata for SKTransformer;
}

void destroy for SKTransformer.RCHFlowContext(uint64_t a1)
{
  swift_release();

  unint64_t v2 = *(void **)(a1 + 16);
}

void *initializeBufferWithCopyOfBuffer for SKTransformer.RCHFlowContext(void *a1, void *a2)
{
  long long v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  long long v4 = (void *)a2[2];
  a1[2] = v4;
  swift_retain();
  id v5 = v3;
  id v6 = v4;
  return a1;
}

void *assignWithCopy for SKTransformer.RCHFlowContext(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  long long v4 = (void *)a1[1];
  id v5 = (void *)a2[1];
  a1[1] = v5;
  id v6 = v5;

  uint64_t v7 = (void *)a1[2];
  uint64_t v8 = (void *)a2[2];
  a1[2] = v8;
  id v9 = v8;

  return a1;
}

uint64_t assignWithTake for SKTransformer.RCHFlowContext(uint64_t a1, uint64_t a2)
{
  swift_release();
  long long v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  id v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  return a1;
}

uint64_t getEnumTagSinglePayload for SKTransformer.RCHFlowContext(uint64_t *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 24))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      uint64_t v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SKTransformer.RCHFlowContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SKTransformer.RCHFlowContext()
{
  return &type metadata for SKTransformer.RCHFlowContext;
}

uint64_t specialized SKTransformer.convertToSKIntent<A>(phoneCallNLIntent:rchFlowContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return specialized SKTransformer.convertToSKIntent<A>(phoneCallNLIntent:rchFlowContext:)(a1, a2, a3, a4, a5, a6, a7, (unint64_t *)&lazy cache variable for type metadata for INStartVideoCallIntent, (uint64_t)INStartVideoCallIntent_ptr, &demangling cache variable for type metadata for INStartVideoCallIntent.Type);
}

{
  return specialized SKTransformer.convertToSKIntent<A>(phoneCallNLIntent:rchFlowContext:)(a1, a2, a3, a4, a5, a6, a7, &lazy cache variable for type metadata for INStartAudioCallIntent, (uint64_t)INStartAudioCallIntent_ptr, &demangling cache variable for type metadata for INStartAudioCallIntent.Type);
}

{
  return specialized SKTransformer.convertToSKIntent<A>(phoneCallNLIntent:rchFlowContext:)(a1, a2, a3, a4, a5, a6, a7, (unint64_t *)&lazy cache variable for type metadata for INHangUpCallIntent, (uint64_t)INHangUpCallIntent_ptr, &demangling cache variable for type metadata for INHangUpCallIntent.Type);
}

{
  return specialized SKTransformer.convertToSKIntent<A>(phoneCallNLIntent:rchFlowContext:)(a1, a2, a3, a4, a5, a6, a7, (unint64_t *)&lazy cache variable for type metadata for INStartCallIntent, (uint64_t)INStartCallIntent_ptr, &demangling cache variable for type metadata for INStartCallIntent.Type);
}

uint64_t specialized SKTransformer.convertToSKIntent<A>(phoneCallNLIntent:rchFlowContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t *a8, uint64_t a9, uint64_t *a10)
{
  type metadata accessor for PhoneCallNLv3Intent(0);
  OUTLINED_FUNCTION_10();
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_3_1();
  uint64_t v45 = v14;
  uint64_t v48[3] = a6;
  v48[4] = a7;
  __swift_allocate_boxed_opaque_existential_1(v48);
  OUTLINED_FUNCTION_10();
  (*(void (**)(void))(v15 + 16))();
  static Signpost.begin(_:)();
  uint64_t v44 = type metadata accessor for CNContactStore(0, a8);
  id v16 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  id v17 = [v16 _className];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_4_36();
  static Signpost.begin(_:string1:)();
  uint64_t v19 = v18;
  swift_bridgeObjectRelease();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.siriPhone);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v19 = OUTLINED_FUNCTION_11_7();
    v46[0] = OUTLINED_FUNCTION_10_0();
    *(_DWORD *)uint64_t v19 = 136315394;
    uint64_t v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000034, 0x8000000000493710, v46);
    OUTLINED_FUNCTION_9_31(v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v19 + 12) = 2080;
    v47[0] = v44;
    __swift_instantiateConcreteTypeFromMangledName(a10);
    uint64_t v24 = String.init<A>(describing:)();
    uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v46);
    OUTLINED_FUNCTION_9_31(v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v21, v22, "#SKTransformer %s to %s", (uint8_t *)v19, 0x16u);
    OUTLINED_FUNCTION_11_22();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }

  outlined init with copy of SharedGlobalsProviding((uint64_t)v48, (uint64_t)v47);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
  if (!swift_dynamicCast())
  {
    if (swift_dynamicCast())
    {
      uint64_t v30 = OUTLINED_FUNCTION_3_37();
      uint64_t v32 = v31(v30);
      if (v19)
      {
        outlined destroy of PhoneCallNLv4Intent((uint64_t)v46);
        goto LABEL_11;
      }
      uint64_t v42 = v32;
      outlined destroy of PhoneCallNLv4Intent((uint64_t)v46);
    }
    else
    {
      uint64_t v42 = 0;
    }
LABEL_18:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
    goto LABEL_19;
  }
  uint64_t v27 = OUTLINED_FUNCTION_3_37();
  uint64_t v29 = v28(v27);
  if (!v19)
  {
    uint64_t v42 = v29;
    outlined destroy of PhoneCallNLv3Intent(v45);
    goto LABEL_18;
  }
  outlined destroy of PhoneCallNLv3Intent(v45);
LABEL_11:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = OUTLINED_FUNCTION_11_7();
    v46[0] = OUTLINED_FUNCTION_10_0();
    *(_DWORD *)uint64_t v35 = 136315394;
    uint64_t v36 = _typeName(_:qualified:)();
    v47[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v35 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v38 = Error.localizedDescription.getter();
    v47[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    OUTLINED_FUNCTION_16_24(&dword_0, v40, v41, "#SKTransformer Error converting PhoneCallNLIntent to %s: %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v42 = 0;
LABEL_19:
  Signpost.OpenSignpost.end()();
  Signpost.OpenSignpost.end()();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
  return v42;
}

unint64_t lazy protocol witness table accessor for type TransformationError and conformance TransformationError()
{
  unint64_t result = lazy protocol witness table cache variable for type TransformationError and conformance TransformationError;
  if (!lazy protocol witness table cache variable for type TransformationError and conformance TransformationError)
  {
    type metadata accessor for TransformationError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationError and conformance TransformationError);
  }
  return result;
}

void partial apply for closure #1 in static Transformer<>.transformer(sharedGlobals:app:previousIntent:)()
{
  OUTLINED_FUNCTION_5_31();
  closure #1 in static Transformer<>.transformer(sharedGlobals:app:previousIntent:)(v0, v1, v2);
}

{
  OUTLINED_FUNCTION_5_31();
  closure #1 in static Transformer<>.transformer(sharedGlobals:app:previousIntent:)();
}

{
  OUTLINED_FUNCTION_5_31();
  closure #1 in static Transformer<>.transformer(sharedGlobals:app:previousIntent:)();
}

uint64_t objectdestroyTm_3()
{
  swift_release();

  __swift_destroy_boxed_opaque_existential_1(v0 + 32);

  return _swift_deallocObject(v0, 80, 7);
}

#error "F6FCC: call analysis failed (funcsize=7)"

#error "F6FEC: call analysis failed (funcsize=7)"

uint64_t objectdestroy_2Tm()
{
  swift_release();

  __swift_destroy_boxed_opaque_existential_1(v0 + 32);

  return _swift_deallocObject(v0, 72, 7);
}

void closure #1 in static Transformer<>.transformer(sharedGlobals:app:previousIntent:previousIntentResponse:)partial apply()
{
}

{
  partial apply for closure #1 in static Transformer<>.transformer(sharedGlobals:app:previousIntent:previousIntentResponse:)();
}

uint64_t OUTLINED_FUNCTION_1_42()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_3_37()
{
  return v0 - 128;
}

uint64_t OUTLINED_FUNCTION_8_36(uint64_t a1)
{
  *(void *)(v1 - 168) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_9_31(uint64_t a1)
{
  *(void *)(v1 - 168) = a1;
  return v1 - 168;
}

uint64_t OUTLINED_FUNCTION_10_21(uint64_t a1)
{
  *(void *)(v1 - 128) = a1;
  return v1 - 128;
}

uint64_t OUTLINED_FUNCTION_11_22()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_15_18()
{
  return v0;
}

void OUTLINED_FUNCTION_16_24(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0x16u);
}

void *CallNotificationContextProvider.callNotificationTimeoutInterval.unsafeMutableAddressor()
{
  return &static CallNotificationContextProvider.callNotificationTimeoutInterval;
}

double static CallNotificationContextProvider.callNotificationTimeoutInterval.getter()
{
  return 30.0;
}

uint64_t LogPrefix.function.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t CallNotificationContextProvider.update(aceServiceInvoker:refId:applicationId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[9] = a3;
  v4[10] = v3;
  v4[8] = a2;
  id v5 = (void *)swift_task_alloc();
  v4[11] = v5;
  *id v5 = v4;
  v5[1] = CallNotificationContextProvider.update(aceServiceInvoker:refId:applicationId:);
  return CallNotificationContextProvider.submitNotificationsSearch(aceServiceInvoker:applicationId:)();
}

uint64_t CallNotificationContextProvider.update(aceServiceInvoker:refId:applicationId:)()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  *(void *)(v1 + 96) = v0;
  swift_task_dealloc();
  return _swift_task_switch(CallNotificationContextProvider.update(aceServiceInvoker:refId:applicationId:), 0, 0);
}

{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v18;

  uint64_t v1 = v0[12];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2) {
      goto LABEL_10;
    }
LABEL_3:
    uint64_t v3 = __OFSUB__(v2, 1);
    long long v4 = v2 - 1;
    if (v3)
    {
      __break(1u);
    }
    else
    {
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v4, (v1 & 0xC000000000000001) == 0, v0[12]);
      if ((v1 & 0xC000000000000001) == 0)
      {
        id v5 = *(id *)(v0[12] + 8 * v4 + 32);
        goto LABEL_6;
      }
    }
    id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_6:
    uint64_t v7 = v0[9];
    os_log_type_t v6 = v0[10];
    uint64_t v8 = v0[8];
    swift_bridgeObjectRelease();
    id v9 = *(void *)(v6 + 16);
    v0[6] = v8;
    v0[7] = v7;
    swift_retain();
    uint64_t v10 = v5;
    unint64_t result = outlined bridged method (ob) of @objc SANotificationObject.notificationId.getter(v10, (SEL *)&selRef_applicationId);
    if (v12)
    {
      uint64_t v13 = result;
      uint64_t v14 = v12;
      uint64_t v15 = v10;
      unint64_t result = outlined bridged method (ob) of @objc SANotificationObject.notificationId.getter(v15, (SEL *)&selRef_notificationId);
      if (v16)
      {
        v0[2] = v13;
        v0[3] = v14;
        v0[4] = result;
        v0[5] = v16;
        (*(void (**)(void *, void *))(*(void *)v9 + 184))(v0 + 6, v0 + 2);
        swift_release();

        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return result;
  }
  uint64_t v2 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8));
  if (v2) {
    goto LABEL_3;
  }
LABEL_10:
  swift_bridgeObjectRelease();
  id v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

Swift::String __swiftcall CallNotificationContextProvider.getCallNotificationApplicationId(for:)(Swift::String a1)
{
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  OUTLINED_FUNCTION_4_37();
  long long v4 = *(void (**)(uint64_t *))(v3 + 176);
  uint64_t v5 = swift_retain();
  uint64_t v13 = OUTLINED_FUNCTION_3_38(v5, v6, v7, v8, v9, v10, v11, v12, v25);
  v4(v13);
  swift_release();
  unint64_t v14 = v27;
  if (v27)
  {
    uint64_t v15 = v26;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v15 = 0;
    unint64_t v14 = 0xE000000000000000;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.siriPhone);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  id v17 = (void *)Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_5_32(v18))
  {
    uint64_t v19 = (_DWORD *)OUTLINED_FUNCTION_11_7();
    uint64_t v26 = swift_slowAlloc();
    *uint64_t v19 = 136315394;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v14, &v26);
    OUTLINED_FUNCTION_2_39();
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_8_37();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v26);
    OUTLINED_FUNCTION_2_39();
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_9_32(&dword_0, v20, v21, "#CallNotificationContextProvider returned applicationId %s for refId %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v22 = v15;
  uint64_t v23 = (void *)v14;
  result._object = v23;
  result._uint64_t countAndFlagsBits = v22;
  return result;
}

Swift::String __swiftcall CallNotificationContextProvider.getCallNotificationCallId(for:)(Swift::String a1)
{
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  OUTLINED_FUNCTION_4_37();
  long long v4 = *(void (**)(uint64_t *))(v3 + 176);
  uint64_t v5 = swift_retain();
  uint64_t v13 = OUTLINED_FUNCTION_3_38(v5, v6, v7, v8, v9, v10, v11, v12, v25);
  v4(v13);
  swift_release();
  if (v26[1])
  {
    uint64_t v15 = v26[2];
    unint64_t v14 = v26[3];
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v15 = 0;
    unint64_t v14 = 0xE000000000000000;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.siriPhone);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  id v17 = (void *)Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_5_32(v18))
  {
    uint64_t v19 = (_DWORD *)OUTLINED_FUNCTION_11_7();
    v26[0] = swift_slowAlloc();
    *uint64_t v19 = 136315394;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v14, v26);
    OUTLINED_FUNCTION_2_39();
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_8_37();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, v26);
    OUTLINED_FUNCTION_2_39();
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_9_32(&dword_0, v20, v21, "#CallNotificationContextProvider returned callId %s for refId %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v22 = v15;
  uint64_t v23 = (void *)v14;
  result._object = v23;
  result._uint64_t countAndFlagsBits = v22;
  return result;
}

uint64_t CallNotificationContextProvider.submitNotificationsSearch(aceServiceInvoker:applicationId:)()
{
  OUTLINED_FUNCTION_1_0();
  v0[7] = v1;
  v0[8] = v2;
  v0[6] = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v0[9] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Date();
  v0[10] = v4;
  v0[11] = *(void *)(v4 - 8);
  v0[12] = swift_task_alloc();
  v0[13] = swift_task_alloc();
  return _swift_task_switch(CallNotificationContextProvider.submitNotificationsSearch(aceServiceInvoker:applicationId:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  id v2;
  Class isa;
  id v4;
  NSString v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;

  uint64_t v1 = v0[8];
  uint64_t v2 = [objc_allocWithZone((Class)SANotificationsSearch) init];
  v0[14] = v2;
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  Class isa = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
  [v2 setIsOnDeviceSearch:isa];

  uint64_t v4 = v2;
  if (v1) {
    uint64_t v5 = String._bridgeToObjectiveC()();
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = (void *)v0[6];
  [v2 setAppId:v5];

  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  outlined bridged method (mbnn) of @objc SANotificationsSearch.notificationType.setter(v7, v8, v2);
  uint64_t v9 = v6[3];
  uint64_t v10 = v6[4];
  __swift_project_boxed_opaque_existential_1(v6, v9);
  uint64_t v11 = (void *)swift_task_alloc();
  v0[15] = v11;
  uint64_t v12 = type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for SAOnDeviceNotificationsSearchCompleted);
  *uint64_t v11 = v0;
  v11[1] = CallNotificationContextProvider.submitNotificationsSearch(aceServiceInvoker:applicationId:);
  return AceServiceInvokerAsync.submit<A>(_:)(v2, v9, v12, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  *(void *)(v2 + 128) = v1;
  *(void *)(v2 + 136) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v3 = CallNotificationContextProvider.submitNotificationsSearch(aceServiceInvoker:applicationId:);
  }
  else {
    uint64_t v3 = CallNotificationContextProvider.submitNotificationsSearch(aceServiceInvoker:applicationId:);
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t result;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  void (*v26)(uint64_t, uint64_t);
  unint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t (*v38)(void *);
  unint64_t v39;
  uint64_t v40;
  void (**v41)(uint64_t, uint64_t);
  uint64_t v42;
  unint64_t v43;
  void (**v44)(uint64_t, uint64_t, uint64_t);
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;

  uint64_t v47 = v0;
  Swift::String result = outlined bridged method (pb) of @objc SAOnDeviceNotificationsSearchCompleted.notifications.getter(*(void **)(v0 + 128));
  if (!result) {
    goto LABEL_49;
  }
  uint64_t v2 = result;

  uint64_t v45 = (void *)v0;
  uint64_t v40 = *(void *)(v0 + 136);
  uint64_t v46 = _swiftEmptyArrayStorage;
  unint64_t v39 = v2 >> 62;
  if (v2 >> 62)
  {
LABEL_23:
    swift_bridgeObjectRetain_n();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v3) {
      goto LABEL_4;
    }
LABEL_24:
    unint64_t v27 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_25:
    swift_bridgeObjectRelease();
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    id v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.siriPhone);
    swift_retain_n();
    swift_bridgeObjectRetain();
    uint64_t v29 = Logger.logObject.getter();
    uint64_t v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      unint64_t v31 = OUTLINED_FUNCTION_11_7();
      *(_DWORD *)unint64_t v31 = 134218240;
      if (v39)
      {
        swift_bridgeObjectRetain();
        uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v32 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFFF8));
      }
      swift_bridgeObjectRelease();
      v45[2] = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v31 + 12) = 2048;
      uint64_t v33 = v27 & 0x4000000000000000;
      if ((v27 & 0x8000000000000000) != 0 || v33)
      {
        swift_bridgeObjectRetain();
        uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
        swift_release();
      }
      else
      {
        uint64_t v35 = *(void *)(v27 + 16);
      }
      os_log_type_t v34 = v45;
      swift_release();
      v45[3] = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl(&dword_0, v29, v30, "#CallNotificationContextProvider search returned %ld notifications, and %ld after filtering", (uint8_t *)v31, 0x16u);
      OUTLINED_FUNCTION_6();
    }
    else
    {
      swift_release_n();
      swift_bridgeObjectRelease_n();

      uint64_t v33 = v27 & 0x4000000000000000;
      os_log_type_t v34 = v45;
    }
    swift_bridgeObjectRetain();
    if ((v27 & 0x8000000000000000) != 0 || (uint64_t v36 = (void *)v27, v33))
    {
      uint64_t v36 = specialized _copyCollectionToContiguousArray<A>(_:)(v27);
      swift_release();
    }
    uint64_t v46 = v36;
    specialized MutableCollection<>.sort(by:)((uint64_t *)&v46);
    if (v40)
    {
      return swift_release();
    }
    else
    {

      swift_release();
      unint64_t v37 = v46;
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v38 = (uint64_t (*)(void *))v34[1];
      return v38(v37);
    }
  }
  uint64_t v3 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  if (!v3) {
    goto LABEL_24;
  }
LABEL_4:
  uint64_t v4 = 0;
  uint64_t v5 = v45[11];
  uint64_t v6 = v2 & 0xC000000000000001;
  uint64_t v7 = v2 & 0xFFFFFFFFFFFFFF8;
  uint64_t v43 = v2 & 0xC000000000000001;
  uint64_t v44 = (void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  uint64_t v41 = (void (**)(uint64_t, uint64_t))(v5 + 8);
  uint64_t v42 = v2 & 0xFFFFFFFFFFFFFF8;
  while (1)
  {
    if (v6)
    {
      uint64_t v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v4 >= *(void *)(v7 + 16))
      {
        __break(1u);
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
      uint64_t v8 = *(id *)(v2 + 8 * v4 + 32);
    }
    uint64_t v9 = v8;
    uint64_t v10 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_22;
    }
    outlined bridged method (pb) of @objc SANotificationObject.applicationId.getter(v8);
    uint64_t v12 = v11;
    swift_bridgeObjectRelease();
    if (!v12 || (uint64_t v13 = [v9 notificationId]) == 0)
    {

      goto LABEL_18;
    }
    unint64_t v14 = v3;
    uint64_t v15 = v2;

    static Date.now.getter();
    uint64_t v16 = [v9 date];
    if (!v16) {
      break;
    }
    id v17 = v16;
    os_log_type_t v18 = v45[12];
    uint64_t v20 = v45[9];
    uint64_t v19 = v45[10];
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    (*v44)(v20, v18, v19);
    __swift_storeEnumTagSinglePayload(v20, 0, 1, v19);
    Swift::String result = __swift_getEnumTagSinglePayload(v20, 1, v19);
    if (result == 1) {
      goto LABEL_48;
    }
    uint64_t v21 = v45[13];
    uint64_t v23 = v45[9];
    uint64_t v22 = v45[10];
    Date.timeIntervalSince(_:)();
    uint64_t v25 = v24;
    uint64_t v26 = *v41;
    (*v41)(v21, v22);
    v26(v23, v22);
    if (v25 <= 30.0)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {
    }
    uint64_t v2 = v15;
    uint64_t v3 = v14;
    uint64_t v7 = v42;
    uint64_t v6 = v43;
LABEL_18:
    ++v4;
    if (v10 == v3)
    {
      unint64_t v27 = (unint64_t)v46;
      goto LABEL_25;
    }
  }
  Swift::String result = __swift_storeEnumTagSinglePayload(v45[9], 1, 1, v45[10]);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
  return result;
}

{
  uint64_t v0;
  unint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  unint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  void (*v31)(uint64_t, uint64_t);
  NSObject *v32;
  os_log_type_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t);
  uint64_t v42;
  void (**v43)(uint64_t, uint64_t);
  void (**v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46[2];
  uint64_t v47;
  uint64_t v48;

  uint64_t v47 = v0;
  if (one-time initialization token for siriPhone != -1) {
LABEL_43:
  }
    swift_once();
  uint64_t v42 = type metadata accessor for Logger();
  __swift_project_value_buffer(v42, (uint64_t)static Logger.siriPhone);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.error.getter();
  uint64_t v4 = OUTLINED_FUNCTION_5_32(v3);
  uint64_t v5 = *(void *)(v0 + 136);
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    v46[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    *(void *)(v0 + 32) = v5;
    swift_errorRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v7 = String.init<A>(describing:)();
    *(void *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&dword_0, v2, (os_log_type_t)v1, "#CallNotificationContextProvider encountered error submitting SANotificationsSearch: %s.", v6, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  v46[0] = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)_swiftEmptyArrayStorage >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = *(void *)((char *)&dword_10 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
  }
  uint64_t v10 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v45 = v0;
  if (!v9)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v42, (uint64_t)static Logger.siriPhone);
    swift_retain_n();
    swift_bridgeObjectRetain();
    uint64_t v32 = Logger.logObject.getter();
    uint64_t v33 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v32, v33))
    {
      os_log_type_t v34 = (uint64_t *)(v0 + 24);
      uint64_t v35 = OUTLINED_FUNCTION_11_7();
      *(_DWORD *)uint64_t v35 = 134218240;
      if ((unint64_t)_swiftEmptyArrayStorage >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v36 = *(void *)((char *)&dword_10 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8));
      }
      swift_bridgeObjectRelease();
      *(void *)(v0 + 16) = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v35 + 12) = 2048;
      unint64_t v37 = v10 & 0x4000000000000000;
      if ((v10 & 0x8000000000000000) != 0 || v37)
      {
        swift_bridgeObjectRetain();
        uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
        swift_release();
      }
      else
      {
        uint64_t v38 = *(void *)(v10 + 16);
      }
      uint64_t v0 = v45;
      swift_release();
      *os_log_type_t v34 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl(&dword_0, v32, v33, "#CallNotificationContextProvider search returned %ld notifications, and %ld after filtering", (uint8_t *)v35, 0x16u);
      OUTLINED_FUNCTION_6();
    }
    else
    {
      swift_release_n();
      swift_bridgeObjectRelease_n();

      unint64_t v37 = v10 & 0x4000000000000000;
    }
    swift_bridgeObjectRetain();
    if ((v10 & 0x8000000000000000) != 0 || (unint64_t v39 = (void *)v10, v37))
    {
      unint64_t v39 = specialized _copyCollectionToContiguousArray<A>(_:)(v10);
      swift_release();
    }
    v46[0] = (uint64_t)v39;
    specialized MutableCollection<>.sort(by:)(v46);

    swift_release();
    uint64_t v40 = v46[0];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v41 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v41(v40);
  }
  uint64_t v1 = 0;
  uint64_t v11 = *(void *)(v0 + 88);
  uint64_t v43 = (void (**)(uint64_t, uint64_t))(v11 + 8);
  uint64_t v44 = (void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32);
  while (1)
  {
    if ((v10 & 0xC000000000000001) != 0)
    {
      uint64_t v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v1 >= *(void *)((char *)&dword_10 + (v10 & 0xFFFFFFFFFFFFFF8)))
      {
        __break(1u);
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
      uint64_t v12 = *(id *)(v10 + 8 * v1 + 32);
    }
    uint64_t v13 = v12;
    unint64_t v14 = v1 + 1;
    if (__OFADD__(v1, 1)) {
      goto LABEL_42;
    }
    outlined bridged method (pb) of @objc SANotificationObject.applicationId.getter(v12);
    uint64_t v16 = v15;
    swift_bridgeObjectRelease();
    if (!v16 || (id v17 = objc_msgSend(v13, "notificationId", v42)) == 0)
    {

      goto LABEL_22;
    }
    os_log_type_t v18 = v10;

    static Date.now.getter();
    uint64_t v19 = [v13 date];
    if (!v19) {
      break;
    }
    uint64_t v20 = v19;
    uint64_t v21 = v9;
    uint64_t v22 = *(void *)(v0 + 96);
    uint64_t v23 = *(void *)(v0 + 72);
    uint64_t v24 = *(void *)(v0 + 80);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    (*v44)(v23, v22, v24);
    __swift_storeEnumTagSinglePayload(v23, 0, 1, v24);
    Swift::String result = __swift_getEnumTagSinglePayload(v23, 1, v24);
    if (result == 1) {
      goto LABEL_48;
    }
    uint64_t v26 = *(void *)(v0 + 104);
    id v28 = *(void *)(v0 + 72);
    unint64_t v27 = *(void *)(v0 + 80);
    Date.timeIntervalSince(_:)();
    uint64_t v30 = v29;
    unint64_t v31 = *v43;
    (*v43)(v26, v27);
    v31(v28, v27);
    if (v30 <= 30.0)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {
    }
    uint64_t v0 = v45;
    uint64_t v9 = v21;
    uint64_t v10 = v18;
LABEL_22:
    ++v1;
    if (v14 == v9)
    {
      uint64_t v10 = v46[0];
      goto LABEL_25;
    }
  }
  Swift::String result = __swift_storeEnumTagSinglePayload(*(void *)(v0 + 72), 1, 1, *(void *)(v0 + 80));
LABEL_48:
  __break(1u);
  return result;
}

uint64_t CallNotificationContextProvider.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DictionaryBackedCache<String, CallNotificationContextProvider.CallNotification>);
  swift_allocObject();
  *(void *)(v0 + 16) = specialized DictionaryBackedCache.init(timeToLiveInSeconds:capacity:nowDateProvider:)(5, (uint64_t)closure #1 in default argument 2 of DictionaryBackedCache.init(timeToLiveInSeconds:capacity:nowDateProvider:), 0, 30.0);
  return v0;
}

uint64_t CallNotificationContextProvider.init()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DictionaryBackedCache<String, CallNotificationContextProvider.CallNotification>);
  swift_allocObject();
  *(void *)(v0 + 16) = specialized DictionaryBackedCache.init(timeToLiveInSeconds:capacity:nowDateProvider:)(5, (uint64_t)closure #1 in default argument 2 of DictionaryBackedCache.init(timeToLiveInSeconds:capacity:nowDateProvider:), 0, 30.0);
  return v0;
}

uint64_t protocol witness for CallNotificationContextProviding.update(aceServiceInvoker:refId:applicationId:) in conformance CallNotificationContextProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(**(void **)v5 + 112)
                                                                            + **(int **)(**(void **)v5 + 112));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  *uint64_t v12 = v6;
  v12[1] = protocol witness for CallNotificationContextProviding.update(aceServiceInvoker:refId:applicationId:) in conformance CallNotificationContextProvider;
  return v14(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for CallNotificationContextProviding.getCallNotificationApplicationId(for:) in conformance CallNotificationContextProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))();
}

uint64_t protocol witness for CallNotificationContextProviding.getCallNotificationCallId(for:) in conformance CallNotificationContextProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))();
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
    *a1 = v2;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized ContiguousArray._endMutation()();
}

{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6[2];

  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
    *a1 = v2;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized ContiguousArray._endMutation()();
}

{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6[2];

  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
    *a1 = v2;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized ContiguousArray._endMutation()();
}

{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6[2];

  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
    *a1 = v2;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized ContiguousArray._endMutation()();
}

{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6[2];

  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
    *a1 = v2;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized ContiguousArray._endMutation()();
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  v168 = (char *)&v148 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v148 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v166 = (uint64_t)&v148 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v158 = (uint64_t)&v148 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v159 = (uint64_t)&v148 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  id v17 = (char *)&v148 - v16;
  __chkstk_darwin(v15);
  v151 = a1;
  uint64_t v152 = (uint64_t)&v148 - v18;
  Swift::Int v19 = a1[1];
  Swift::Int v20 = _minimumMergeRunLength(_:)(v19);
  if (v20 >= v19)
  {
    if (v19 < 0) {
      goto LABEL_145;
    }
    if (v19) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v19, 1, v151);
    }
  }
  else
  {
    Swift::Int v21 = v20;
    uint64_t v22 = specialized static Array._allocateUninitialized(_:)(v19 / 2);
    v160 = v23;
    uint64_t v169 = v22;
    uint64_t v156 = v19;
    if (v19 <= 0) {
      goto LABEL_108;
    }
    Swift::Int v149 = v21;
    v150 = v17;
    uint64_t v24 = 0;
    uint64_t v25 = *v151;
    v167 = (void (**)(uint64_t, char *, uint64_t))(v3 + 32);
    v162 = (void (**)(void))(v3 + 8);
    uint64_t v148 = v25 - 8;
    v155 = (char *)_swiftEmptyArrayStorage;
    uint64_t v164 = v25;
LABEL_4:
    Swift::Int v26 = v24 + 1;
    v154 = (char *)v24;
    if (v24 + 1 < v19)
    {
      unint64_t v27 = *(void **)(v25 + 8 * v24);
      id v28 = (char *)*(id *)(v25 + 8 * v26);
      id v29 = v27;
      id v30 = [v28 date];
      if (!v30) {
        goto LABEL_162;
      }
      unint64_t v31 = v30;
      uint64_t v32 = v168;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v33 = *v167;
      uint64_t v34 = v152;
      (*v167)(v152, v32, v2);
      __swift_storeEnumTagSinglePayload(v34, 0, 1, v2);
      if (__swift_getEnumTagSinglePayload(v34, 1, v2) == 1) {
        goto LABEL_163;
      }
      id v35 = [v29 date];
      if (!v35) {
        goto LABEL_164;
      }
      uint64_t v36 = v35;
      v153 = (char *)v29;
      v165 = v28;
      unint64_t v37 = v168;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v38 = (uint64_t)v150;
      v33((uint64_t)v150, v37, v2);
      __swift_storeEnumTagSinglePayload(v38, 0, 1, v2);
      if (__swift_getEnumTagSinglePayload(v38, 1, v2) == 1) {
        goto LABEL_165;
      }
      uint64_t v39 = v152;
      LODWORD(v163) = static Date.< infix(_:_:)();
      uint64_t v40 = *v162;
      ((void (*)(uint64_t, uint64_t))*v162)(v38, v2);
      v157 = v40;
      ((void (*)(uint64_t, uint64_t))v40)(v39, v2);

      Swift::Int v26 = v24 + 2;
      if (v24 + 2 >= v19)
      {
        uint64_t v25 = v164;
      }
      else
      {
        uint64_t v41 = v24;
        uint64_t v25 = v164;
        while (1)
        {
          v165 = (char *)v41;
          uint64_t v42 = v25 + 8 * v41;
          uint64_t v43 = *(void **)(v42 + 8);
          id v44 = *(id *)(v42 + 16);
          id v45 = v43;
          id v46 = [v44 date];
          if (!v46) {
            goto LABEL_156;
          }
          uint64_t v47 = v46;
          uint64_t v48 = v168;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v49 = v159;
          v33(v159, v48, v2);
          __swift_storeEnumTagSinglePayload(v49, 0, 1, v2);
          if (__swift_getEnumTagSinglePayload(v49, 1, v2) == 1) {
            goto LABEL_157;
          }
          id v50 = [v45 date];
          if (!v50) {
            goto LABEL_158;
          }
          uint64_t v51 = v50;
          uint64_t v52 = v168;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v53 = v158;
          uint64_t v54 = v33;
          v33(v158, v52, v2);
          __swift_storeEnumTagSinglePayload(v53, 0, 1, v2);
          if (__swift_getEnumTagSinglePayload(v53, 1, v2) == 1) {
            goto LABEL_159;
          }
          uint64_t v56 = v158;
          uint64_t v55 = v159;
          int v57 = static Date.< infix(_:_:)();
          uint64_t v58 = v157;
          ((void (*)(uint64_t, uint64_t))v157)(v56, v2);
          ((void (*)(uint64_t, uint64_t))v58)(v55, v2);

          if ((v163 ^ v57)) {
            break;
          }
          uint64_t v25 = v164;
          uint64_t v41 = (uint64_t)(v165 + 1);
          Swift::Int v19 = v156;
          uint64_t v33 = v54;
          if ((uint64_t)(v165 + 3) >= v156)
          {
            Swift::Int v26 = v156;
            goto LABEL_20;
          }
        }
        uint64_t v25 = v164;
        Swift::Int v26 = (Swift::Int)(v165 + 2);
        Swift::Int v19 = v156;
LABEL_20:
        uint64_t v24 = (uint64_t)v154;
      }
      if (v163)
      {
        if (v26 < v24) {
          goto LABEL_146;
        }
        if (v24 < v26)
        {
          uint64_t v59 = (uint64_t *)(v148 + 8 * v26);
          Swift::Int v60 = v26;
          uint64_t v61 = v24;
          uint64_t v62 = (uint64_t *)(v25 + 8 * v24);
          do
          {
            if (v61 != --v60)
            {
              if (!v25) {
                goto LABEL_160;
              }
              uint64_t v63 = *v62;
              *uint64_t v62 = *v59;
              uint64_t *v59 = v63;
            }
            ++v61;
            --v59;
            ++v62;
          }
          while (v61 < v60);
        }
      }
    }
    if (v26 >= v19) {
      goto LABEL_38;
    }
    if (__OFSUB__(v26, v24)) {
      goto LABEL_144;
    }
    if (v26 - v24 >= v149) {
      goto LABEL_38;
    }
    if (__OFADD__(v24, v149)) {
      goto LABEL_147;
    }
    if (v24 + v149 >= v19) {
      uint64_t v64 = (char *)v19;
    }
    else {
      uint64_t v64 = (char *)(v24 + v149);
    }
    if ((uint64_t)v64 < v24)
    {
LABEL_148:
      __break(1u);
      goto LABEL_149;
    }
    if ((char *)v26 == v64)
    {
LABEL_38:
      v163 = (char *)v26;
      goto LABEL_39;
    }
    uint64_t v119 = (void (*)(void))(v148 + 8 * v26);
    v153 = v64;
LABEL_91:
    long long v120 = *(void **)(v25 + 8 * v26);
    v157 = v119;
    v163 = (char *)v26;
    while (1)
    {
      Swift::Int v19 = (Swift::Int)v8;
      uint64_t v121 = *(void **)v119;
      id v122 = v120;
      id v123 = v121;
      id v124 = [v122 date];
      if (!v124) {
        goto LABEL_150;
      }
      v125 = v124;
      v165 = (char *)v24;
      v126 = v168;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v127 = v166;
      v128 = *v167;
      (*v167)(v166, v126, v2);
      __swift_storeEnumTagSinglePayload(v127, 0, 1, v2);
      if (__swift_getEnumTagSinglePayload(v127, 1, v2) == 1) {
        break;
      }
      id v129 = [v123 date];
      if (!v129) {
        goto LABEL_152;
      }
      v130 = v129;
      v131 = v168;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      v132 = v131;
      uint64_t v8 = (char *)v19;
      v128(v19, v132, v2);
      __swift_storeEnumTagSinglePayload(v19, 0, 1, v2);
      if (__swift_getEnumTagSinglePayload(v19, 1, v2) == 1) {
        goto LABEL_153;
      }
      uint64_t v133 = v166;
      char v134 = static Date.< infix(_:_:)();
      v135 = *v162;
      (*v162)();
      uint64_t v136 = v133;
      Swift::Int v19 = v2;
      ((void (*)(uint64_t, uint64_t))v135)(v136, v2);

      if ((v134 & 1) == 0)
      {
        v138 = v163;
        uint64_t v25 = v164;
LABEL_101:
        Swift::Int v26 = (Swift::Int)(v138 + 1);
        uint64_t v119 = (void (*)(void))((char *)v157 + 8);
        uint64_t v24 = (uint64_t)v154;
        if ((char *)v26 != v153) {
          goto LABEL_91;
        }
        v163 = v153;
LABEL_39:
        uint64_t v65 = v155;
        if ((uint64_t)v163 < v24) {
          goto LABEL_143;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v65 + 2) + 1, 1, v65);
        }
        unint64_t v67 = *((void *)v65 + 2);
        unint64_t v66 = *((void *)v65 + 3);
        unint64_t v68 = v67 + 1;
        uint64_t v25 = v164;
        if (v67 >= v66 >> 1)
        {
          v139 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v66 > 1), v67 + 1, 1, v65);
          uint64_t v25 = v164;
          uint64_t v65 = v139;
        }
        *((void *)v65 + 2) = v68;
        v165 = v65 + 32;
        uint64_t v69 = &v65[16 * v67 + 32];
        uint64_t v70 = v163;
        *(void *)uint64_t v69 = v24;
        *((void *)v69 + 1) = v70;
        if (v67)
        {
          uint64_t v71 = v165;
          while (1)
          {
            Swift::Int v72 = v68 - 1;
            if (v68 >= 4)
            {
              os_log_type_t v77 = &v71[16 * v68];
              uint64_t v78 = *((void *)v77 - 8);
              uint64_t v79 = *((void *)v77 - 7);
              BOOL v83 = __OFSUB__(v79, v78);
              uint64_t v80 = v79 - v78;
              if (v83) {
                goto LABEL_128;
              }
              uint64_t v82 = *((void *)v77 - 6);
              uint64_t v81 = *((void *)v77 - 5);
              BOOL v83 = __OFSUB__(v81, v82);
              uint64_t v75 = v81 - v82;
              char v76 = v83;
              if (v83) {
                goto LABEL_129;
              }
              unint64_t v84 = v68 - 2;
              uint64_t v85 = &v71[16 * v68 - 32];
              uint64_t v87 = *(void *)v85;
              uint64_t v86 = *((void *)v85 + 1);
              BOOL v83 = __OFSUB__(v86, v87);
              uint64_t v88 = v86 - v87;
              if (v83) {
                goto LABEL_130;
              }
              BOOL v83 = __OFADD__(v75, v88);
              uint64_t v89 = v75 + v88;
              if (v83) {
                goto LABEL_132;
              }
              if (v89 >= v80)
              {
                v107 = &v71[16 * v72];
                uint64_t v109 = *(void *)v107;
                uint64_t v108 = *((void *)v107 + 1);
                BOOL v83 = __OFSUB__(v108, v109);
                uint64_t v110 = v108 - v109;
                if (v83) {
                  goto LABEL_138;
                }
                BOOL v100 = v75 < v110;
                goto LABEL_77;
              }
            }
            else
            {
              if (v68 != 3)
              {
                uint64_t v101 = *((void *)v65 + 4);
                uint64_t v102 = *((void *)v65 + 5);
                BOOL v83 = __OFSUB__(v102, v101);
                uint64_t v94 = v102 - v101;
                char v95 = v83;
                goto LABEL_71;
              }
              uint64_t v74 = *((void *)v65 + 4);
              uint64_t v73 = *((void *)v65 + 5);
              BOOL v83 = __OFSUB__(v73, v74);
              uint64_t v75 = v73 - v74;
              char v76 = v83;
            }
            if (v76) {
              goto LABEL_131;
            }
            unint64_t v84 = v68 - 2;
            uint64_t v90 = &v71[16 * v68 - 32];
            uint64_t v92 = *(void *)v90;
            uint64_t v91 = *((void *)v90 + 1);
            BOOL v93 = __OFSUB__(v91, v92);
            uint64_t v94 = v91 - v92;
            char v95 = v93;
            if (v93) {
              goto LABEL_133;
            }
            uint64_t v96 = &v71[16 * v72];
            uint64_t v98 = *(void *)v96;
            uint64_t v97 = *((void *)v96 + 1);
            BOOL v83 = __OFSUB__(v97, v98);
            uint64_t v99 = v97 - v98;
            if (v83) {
              goto LABEL_135;
            }
            if (__OFADD__(v94, v99)) {
              goto LABEL_137;
            }
            if (v94 + v99 >= v75)
            {
              BOOL v100 = v75 < v99;
LABEL_77:
              if (v100) {
                Swift::Int v72 = v84;
              }
              goto LABEL_79;
            }
LABEL_71:
            if (v95) {
              goto LABEL_134;
            }
            uint64_t v103 = &v71[16 * v72];
            uint64_t v105 = *(void *)v103;
            uint64_t v104 = *((void *)v103 + 1);
            BOOL v83 = __OFSUB__(v104, v105);
            uint64_t v106 = v104 - v105;
            if (v83) {
              goto LABEL_136;
            }
            if (v106 < v94) {
              goto LABEL_88;
            }
LABEL_79:
            Swift::Int v111 = v72 - 1;
            if (v72 - 1 >= v68)
            {
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
              goto LABEL_139;
            }
            if (!v25) {
              goto LABEL_155;
            }
            uint64_t v112 = &v71[16 * v111];
            v113 = v71;
            uint64_t v114 = *(void *)v112;
            Swift::Int v19 = v72;
            v115 = &v113[16 * v72];
            uint64_t v116 = *((void *)v115 + 1);
            uint64_t v117 = v161;
            specialized _merge<A>(low:mid:high:buffer:by:)((id *)(v25 + 8 * *(void *)v112), (id *)(v25 + 8 * *(void *)v115), v25 + 8 * v116, v160);
            uint64_t v161 = v117;
            if (v117)
            {
LABEL_106:
              swift_bridgeObjectRelease();
              if (v156 >= -1) {
                goto LABEL_123;
              }
              __break(1u);
LABEL_108:
              v155 = (char *)_swiftEmptyArrayStorage;
              unint64_t v68 = _swiftEmptyArrayStorage[2];
LABEL_109:
              if (v68 >= 2)
              {
                uint64_t v140 = *v151;
                uint64_t v141 = v161;
                Swift::Int v19 = v156;
                while (1)
                {
                  unint64_t v142 = v68 - 2;
                  if (v68 < 2) {
                    break;
                  }
                  if (!v140) {
                    goto LABEL_161;
                  }
                  uint64_t v2 = v68 - 1;
                  v143 = v155;
                  uint64_t v144 = *(void *)&v155[16 * v142 + 32];
                  uint64_t v145 = *(void *)&v155[16 * v68 + 24];
                  specialized _merge<A>(low:mid:high:buffer:by:)((id *)(v140 + 8 * v144), (id *)(v140 + 8 * *(void *)&v155[16 * v68 + 16]), v140 + 8 * v145, v160);
                  if (v141) {
                    goto LABEL_106;
                  }
                  if (v145 < v144) {
                    goto LABEL_140;
                  }
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    v143 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v143);
                  }
                  if (v142 >= *((void *)v143 + 2)) {
                    goto LABEL_141;
                  }
                  v146 = &v143[16 * v142 + 32];
                  *(void *)v146 = v144;
                  *((void *)v146 + 1) = v145;
                  unint64_t v147 = *((void *)v143 + 2);
                  if (v68 > v147) {
                    goto LABEL_142;
                  }
                  memmove(&v143[16 * v2 + 32], &v143[16 * v68 + 32], 16 * (v147 - v68));
                  v155 = v143;
                  *((void *)v143 + 2) = v147 - 1;
                  unint64_t v68 = v147 - 1;
                  if (v147 <= 2) {
                    goto LABEL_122;
                  }
                }
LABEL_139:
                __break(1u);
LABEL_140:
                __break(1u);
LABEL_141:
                __break(1u);
LABEL_142:
                __break(1u);
LABEL_143:
                __break(1u);
LABEL_144:
                __break(1u);
LABEL_145:
                __break(1u);
LABEL_146:
                __break(1u);
LABEL_147:
                __break(1u);
                goto LABEL_148;
              }
LABEL_122:
              swift_bridgeObjectRelease();
              if (v19 >= -1)
              {
LABEL_123:
                *(void *)((char *)&dword_10 + (v169 & 0xFFFFFFFFFFFFFF8)) = 0;
                specialized Array._endMutation()();
                swift_bridgeObjectRelease();
                return;
              }
LABEL_149:
              __break(1u);
LABEL_150:
              __swift_storeEnumTagSinglePayload(v166, 1, 1, v2);
              goto LABEL_151;
            }
            if (v116 < v114) {
              goto LABEL_125;
            }
            if ((unint64_t)v19 > *((void *)v65 + 2)) {
              goto LABEL_126;
            }
            *(void *)uint64_t v112 = v114;
            uint64_t v71 = v165;
            *(void *)&v165[16 * v111 + 8] = v116;
            unint64_t v118 = *((void *)v65 + 2);
            if (v19 >= v118) {
              goto LABEL_127;
            }
            unint64_t v68 = v118 - 1;
            memmove(v115, v115 + 16, 16 * (v118 - 1 - v19));
            *((void *)v65 + 2) = v118 - 1;
            uint64_t v25 = v164;
            if (v118 <= 2) {
              goto LABEL_88;
            }
          }
        }
        unint64_t v68 = 1;
LABEL_88:
        v155 = v65;
        Swift::Int v19 = v156;
        uint64_t v24 = (uint64_t)v163;
        if ((uint64_t)v163 >= v156) {
          goto LABEL_109;
        }
        goto LABEL_4;
      }
      uint64_t v25 = v164;
      if (!v164) {
        goto LABEL_154;
      }
      v137 = *(void **)v119;
      long long v120 = (void *)*((void *)v119 + 1);
      *(void *)uint64_t v119 = v120;
      *((void *)v119 + 1) = v137;
      uint64_t v119 = (void (*)(void))((char *)v119 - 8);
      uint64_t v24 = (uint64_t)(v165 + 1);
      v138 = v163;
      if (v163 == v165 + 1) {
        goto LABEL_101;
      }
    }
LABEL_151:
    __break(1u);
LABEL_152:
    __swift_storeEnumTagSinglePayload(v19, 1, 1, v2);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __swift_storeEnumTagSinglePayload(v159, 1, 1, v2);
LABEL_157:
    __break(1u);
LABEL_158:
    __swift_storeEnumTagSinglePayload(v158, 1, 1, v2);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __swift_storeEnumTagSinglePayload(v152, 1, 1, v2);
LABEL_163:
    __break(1u);
LABEL_164:
    __swift_storeEnumTagSinglePayload((uint64_t)v150, 1, 1, v2);
LABEL_165:
    __break(1u);
  }
}

{
  Swift::Int v2;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  void **v6;
  Swift::Int v7;
  uint64_t v8;
  char *v9;
  char **v10;
  char **v11;
  Swift::Int v12;
  Swift::Int v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  Swift::Int v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  void *v31;
  id v32;
  Swift::Int v33;
  uint64_t *v34;
  Swift::Int v35;
  Swift::Int v36;
  uint64_t *v37;
  uint64_t v38;
  Swift::Int v39;
  uint64_t v40;
  void *v41;
  void *v42;
  id v43;
  id v44;
  id v45;
  void *v46;
  id v47;
  id v48;
  void *v49;
  id v50;
  void *v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  char v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  Swift::Int v115;
  char *v116;
  char *v117;
  Swift::Int v118;
  Swift::Int v119;
  Swift::Int v120;
  id v121;
  uint64_t v122;
  void **v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;

  uint64_t v2 = a1[1];
  uint64_t v3 = _minimumMergeRunLength(_:)(v2);
  if (v3 >= v2)
  {
    if (v2 < 0) {
      goto LABEL_139;
    }
    if (v2) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v2, 1, a1);
    }
  }
  else
  {
    uint64_t v4 = v3;
    uint64_t v5 = specialized static Array._allocateUninitialized(_:)(v2 / 2);
    id v123 = v6;
    v126 = v5;
    long long v120 = v2;
    uint64_t v114 = a1;
    if (v2 > 0)
    {
      v115 = v4;
      uint64_t v7 = 0;
      uint64_t v8 = *a1;
      v113 = *a1 - 8;
      uint64_t v9 = (char *)_swiftEmptyArrayStorage;
      uint64_t v10 = &selRef_setBundleId_;
      uint64_t v11 = &selRef_setBundleId_;
      uint64_t v12 = v2;
      v125 = v8;
      while (1)
      {
        uint64_t v13 = v7++;
        uint64_t v119 = v13;
        if (v7 < v12)
        {
          uint64_t v116 = v9;
          uint64_t v14 = *(void **)(v8 + 8 * v13);
          uint64_t v15 = *(id *)(v8 + 8 * v7);
          uint64_t v16 = v14;
          id v17 = [v15 v10[189]];
          if (!v17) {
            goto LABEL_153;
          }
          uint64_t v18 = v17;
          Swift::Int v19 = [v17 v11[163]];

          Swift::Int v20 = [v16 v10[189]];
          if (!v20) {
            goto LABEL_154;
          }
          Swift::Int v21 = v20;
          uint64_t v121 = [v20 v11[163]];

          uint64_t v7 = v13 + 2;
          if (v13 + 2 >= v120)
          {
            uint64_t v8 = v125;
          }
          else
          {
            uint64_t v22 = v13;
            uint64_t v8 = v125;
            while (1)
            {
              uint64_t v23 = v8 + 8 * v22;
              uint64_t v24 = *(void **)(v23 + 8);
              uint64_t v25 = *(id *)(v23 + 16);
              Swift::Int v26 = v24;
              unint64_t v27 = [v25 rank];
              if (!v27) {
                goto LABEL_149;
              }
              id v28 = v27;
              id v29 = [v27 v11[163]];

              id v30 = [v26 rank];
              if (!v30) {
                goto LABEL_150;
              }
              unint64_t v31 = v30;
              uint64_t v32 = [v30 v11[163]];

              if ((uint64_t)v19 < (uint64_t)v121 == (uint64_t)v29 >= (uint64_t)v32) {
                break;
              }
              uint64_t v33 = v22 + 3;
              ++v22;
              uint64_t v8 = v125;
              if (v33 >= v120)
              {
                uint64_t v7 = v120;
                goto LABEL_16;
              }
            }
            uint64_t v7 = v22 + 2;
            uint64_t v8 = v125;
          }
LABEL_16:
          uint64_t v9 = v116;
          if ((uint64_t)v19 < (uint64_t)v121)
          {
            if (v7 < v13) {
              goto LABEL_141;
            }
            if (v13 < v7)
            {
              uint64_t v34 = (uint64_t *)(v113 + 8 * v7);
              id v35 = v7;
              uint64_t v36 = v13;
              unint64_t v37 = (uint64_t *)(v8 + 8 * v13);
              do
              {
                if (v36 != --v35)
                {
                  if (!v8) {
                    goto LABEL_151;
                  }
                  uint64_t v38 = *v37;
                  *unint64_t v37 = *v34;
                  *uint64_t v34 = v38;
                }
                ++v36;
                --v34;
                ++v37;
              }
              while (v36 < v35);
            }
          }
        }
        if (v7 < v120)
        {
          if (__OFSUB__(v7, v13)) {
            goto LABEL_138;
          }
          if (v7 - v13 < v115)
          {
            if (__OFADD__(v13, v115)) {
              goto LABEL_142;
            }
            uint64_t v39 = v120;
            if (v13 + v115 < v120) {
              uint64_t v39 = v13 + v115;
            }
            if (v39 < v13)
            {
LABEL_143:
              __break(1u);
              goto LABEL_144;
            }
            if (v7 != v39)
            {
              uint64_t v117 = v9;
              unint64_t v118 = v39;
              uint64_t v40 = v113 + 8 * v7;
              do
              {
                uint64_t v41 = *(void **)(v8 + 8 * v7);
                id v122 = v40;
                while (1)
                {
                  uint64_t v42 = *(void **)v40;
                  uint64_t v43 = v41;
                  id v44 = v42;
                  id v45 = [v43 rank];
                  if (!v45) {
                    goto LABEL_145;
                  }
                  id v46 = v45;
                  uint64_t v11 = &selRef_setBundleId_;
                  uint64_t v47 = [v45 integerValue];

                  uint64_t v48 = [v44 rank];
                  if (!v48) {
                    goto LABEL_146;
                  }
                  uint64_t v49 = v48;
                  id v50 = [v48 integerValue];

                  if ((uint64_t)v47 >= (uint64_t)v50) {
                    break;
                  }
                  uint64_t v8 = v125;
                  if (!v125) {
                    goto LABEL_147;
                  }
                  uint64_t v51 = *(void **)v40;
                  uint64_t v41 = *(void **)(v40 + 8);
                  *(void *)uint64_t v40 = v41;
                  *(void *)(v40 + 8) = v51;
                  v40 -= 8;
                  if (v7 == ++v13) {
                    goto LABEL_41;
                  }
                }
                uint64_t v8 = v125;
LABEL_41:
                ++v7;
                uint64_t v40 = v122 + 8;
                uint64_t v13 = v119;
              }
              while (v7 != v118);
              uint64_t v7 = v118;
              uint64_t v9 = v117;
            }
          }
        }
        if (v7 < v13) {
          goto LABEL_137;
        }
        uint64_t v52 = v9;
        if (swift_isUniquelyReferenced_nonNull_native()) {
          uint64_t v9 = v52;
        }
        else {
          uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v52 + 2) + 1, 1, v52);
        }
        uint64_t v54 = *((void *)v9 + 2);
        uint64_t v53 = *((void *)v9 + 3);
        uint64_t v55 = v54 + 1;
        uint64_t v8 = v125;
        if (v54 >= v53 >> 1)
        {
          uint64_t v104 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v53 > 1), v54 + 1, 1, v9);
          uint64_t v8 = v125;
          uint64_t v9 = v104;
        }
        *((void *)v9 + 2) = v55;
        uint64_t v56 = v9 + 32;
        int v57 = &v9[16 * v54 + 32];
        *(void *)int v57 = v119;
        *((void *)v57 + 1) = v7;
        if (v54)
        {
          while (1)
          {
            uint64_t v58 = v55 - 1;
            if (v55 >= 4)
            {
              uint64_t v63 = &v56[16 * v55];
              uint64_t v64 = *((void *)v63 - 8);
              uint64_t v65 = *((void *)v63 - 7);
              uint64_t v69 = __OFSUB__(v65, v64);
              unint64_t v66 = v65 - v64;
              if (v69) {
                goto LABEL_122;
              }
              unint64_t v68 = *((void *)v63 - 6);
              unint64_t v67 = *((void *)v63 - 5);
              uint64_t v69 = __OFSUB__(v67, v68);
              uint64_t v61 = v67 - v68;
              uint64_t v62 = v69;
              if (v69) {
                goto LABEL_123;
              }
              uint64_t v70 = v55 - 2;
              uint64_t v71 = &v56[16 * v55 - 32];
              uint64_t v73 = *(void *)v71;
              Swift::Int v72 = *((void *)v71 + 1);
              uint64_t v69 = __OFSUB__(v72, v73);
              uint64_t v74 = v72 - v73;
              if (v69) {
                goto LABEL_124;
              }
              uint64_t v69 = __OFADD__(v61, v74);
              uint64_t v75 = v61 + v74;
              if (v69) {
                goto LABEL_126;
              }
              if (v75 >= v66)
              {
                BOOL v93 = &v56[16 * v58];
                char v95 = *(void *)v93;
                uint64_t v94 = *((void *)v93 + 1);
                uint64_t v69 = __OFSUB__(v94, v95);
                uint64_t v96 = v94 - v95;
                if (v69) {
                  goto LABEL_132;
                }
                uint64_t v86 = v61 < v96;
                goto LABEL_80;
              }
            }
            else
            {
              if (v55 != 3)
              {
                uint64_t v87 = *((void *)v9 + 4);
                uint64_t v88 = *((void *)v9 + 5);
                uint64_t v69 = __OFSUB__(v88, v87);
                uint64_t v80 = v88 - v87;
                uint64_t v81 = v69;
                goto LABEL_74;
              }
              Swift::Int v60 = *((void *)v9 + 4);
              uint64_t v59 = *((void *)v9 + 5);
              uint64_t v69 = __OFSUB__(v59, v60);
              uint64_t v61 = v59 - v60;
              uint64_t v62 = v69;
            }
            if (v62) {
              goto LABEL_125;
            }
            uint64_t v70 = v55 - 2;
            char v76 = &v56[16 * v55 - 32];
            uint64_t v78 = *(void *)v76;
            os_log_type_t v77 = *((void *)v76 + 1);
            uint64_t v79 = __OFSUB__(v77, v78);
            uint64_t v80 = v77 - v78;
            uint64_t v81 = v79;
            if (v79) {
              goto LABEL_127;
            }
            uint64_t v82 = &v56[16 * v58];
            unint64_t v84 = *(void *)v82;
            BOOL v83 = *((void *)v82 + 1);
            uint64_t v69 = __OFSUB__(v83, v84);
            uint64_t v85 = v83 - v84;
            if (v69) {
              goto LABEL_129;
            }
            if (__OFADD__(v80, v85)) {
              goto LABEL_131;
            }
            if (v80 + v85 >= v61)
            {
              uint64_t v86 = v61 < v85;
LABEL_80:
              if (v86) {
                uint64_t v58 = v70;
              }
              goto LABEL_82;
            }
LABEL_74:
            if (v81) {
              goto LABEL_128;
            }
            uint64_t v89 = &v56[16 * v58];
            uint64_t v91 = *(void *)v89;
            uint64_t v90 = *((void *)v89 + 1);
            uint64_t v69 = __OFSUB__(v90, v91);
            uint64_t v92 = v90 - v91;
            if (v69) {
              goto LABEL_130;
            }
            if (v92 < v80) {
              goto LABEL_91;
            }
LABEL_82:
            uint64_t v97 = v58 - 1;
            if (v58 - 1 >= v55)
            {
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
              goto LABEL_133;
            }
            if (!v8) {
              goto LABEL_148;
            }
            uint64_t v98 = v9;
            uint64_t v99 = &v56[16 * v97];
            BOOL v100 = *(void *)v99;
            uint64_t v101 = &v56[16 * v58];
            uint64_t v102 = *((void *)v101 + 1);
            specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v8 + 8 * *(void *)v99), (id *)(v8 + 8 * *(void *)v101), v8 + 8 * v102, v123);
            if (v124)
            {
              uint64_t v105 = v120;
LABEL_98:
              swift_bridgeObjectRelease();
              if (v105 >= -1)
              {
                *(void *)((char *)&dword_10 + (v126 & 0xFFFFFFFFFFFFFF8)) = 0;
                specialized Array._endMutation()();
                swift_bridgeObjectRelease();
                return;
              }
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
              goto LABEL_143;
            }
            if (v102 < v100) {
              goto LABEL_119;
            }
            if (v58 > *((void *)v98 + 2)) {
              goto LABEL_120;
            }
            *(void *)uint64_t v99 = v100;
            *(void *)&v56[16 * v97 + 8] = v102;
            uint64_t v103 = *((void *)v98 + 2);
            if (v58 >= v103) {
              goto LABEL_121;
            }
            id v124 = 0;
            uint64_t v55 = v103 - 1;
            memmove(&v56[16 * v58], v101 + 16, 16 * (v103 - 1 - v58));
            uint64_t v9 = v98;
            *((void *)v98 + 2) = v103 - 1;
            uint64_t v8 = v125;
            uint64_t v11 = &selRef_setBundleId_;
            if (v103 <= 2) {
              goto LABEL_91;
            }
          }
        }
        uint64_t v55 = 1;
LABEL_91:
        uint64_t v12 = v120;
        uint64_t v10 = &selRef_setBundleId_;
        if (v7 >= v120) {
          goto LABEL_101;
        }
      }
    }
    uint64_t v9 = (char *)_swiftEmptyArrayStorage;
    uint64_t v55 = _swiftEmptyArrayStorage[2];
LABEL_101:
    if (v55 >= 2)
    {
      uint64_t v106 = *v114;
      uint64_t v105 = v120;
      while (1)
      {
        v107 = v55 - 2;
        if (v55 < 2) {
          break;
        }
        if (!v106) {
          goto LABEL_152;
        }
        uint64_t v108 = v9;
        uint64_t v109 = *(void *)&v9[16 * v107 + 32];
        uint64_t v110 = *(void *)&v9[16 * v55 + 24];
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v106 + 8 * v109), (id *)(v106 + 8 * *(void *)&v9[16 * v55 + 16]), v106 + 8 * v110, v123);
        if (v124) {
          goto LABEL_98;
        }
        if (v110 < v109) {
          goto LABEL_134;
        }
        id v124 = 0;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v108 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v108);
        }
        if (v107 >= *((void *)v108 + 2)) {
          goto LABEL_135;
        }
        Swift::Int v111 = &v108[16 * v107 + 32];
        *(void *)Swift::Int v111 = v109;
        *((void *)v111 + 1) = v110;
        uint64_t v112 = *((void *)v108 + 2);
        if (v55 > v112) {
          goto LABEL_136;
        }
        memmove(&v108[16 * v55 + 16], &v108[16 * v55 + 32], 16 * (v112 - v55));
        uint64_t v9 = v108;
        *((void *)v108 + 2) = v112 - 1;
        uint64_t v55 = v112 - 1;
        if (v112 <= 2) {
          goto LABEL_114;
        }
      }
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
      goto LABEL_140;
    }
    uint64_t v105 = v120;
LABEL_114:
    swift_bridgeObjectRelease();
    if (v105 < -1)
    {
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
    }
    else
    {
      *(void *)((char *)&dword_10 + (v126 & 0xFFFFFFFFFFFFFF8)) = 0;
      specialized Array._endMutation()();
      swift_bridgeObjectRelease();
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  Swift::Int v19;
  Swift::Int v20;
  Swift::Int v21;
  uint64_t v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  Swift::Int v26;
  void *v27;
  char *v28;
  id v29;
  id v30;
  void *v31;
  char *v32;
  void (*v33)(uint64_t, char *, uint64_t);
  uint64_t v34;
  id v35;
  void *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(void);
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  id v45;
  id v46;
  void *v47;
  char *v48;
  uint64_t v49;
  id v50;
  void *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(uint64_t, char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  int v57;
  void (*v58)(void);
  uint64_t *v59;
  Swift::Int v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  Swift::Int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  char v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  Swift::Int v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void (*v119)(void);
  void *v120;
  void *v121;
  id v122;
  id v123;
  id v124;
  void *v125;
  char *v126;
  uint64_t v127;
  void (*v128)(uint64_t, char *, uint64_t);
  id v129;
  void *v130;
  char *v131;
  char *v132;
  uint64_t v133;
  char v134;
  void (*v135)(void);
  uint64_t v136;
  void *v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  unint64_t v147;
  uint64_t v148;
  Swift::Int v149;
  char *v150;
  uint64_t *v151;
  uint64_t v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  void (*v157)(void);
  uint64_t v158;
  uint64_t v159;
  void **v160;
  uint64_t v161;
  void (**v162)(void);
  char *v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  void (**v167)(uint64_t, char *, uint64_t);
  char *v168;
  uint64_t v169;

  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  v168 = (char *)&v148 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v148 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v166 = (uint64_t)&v148 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v158 = (uint64_t)&v148 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v159 = (uint64_t)&v148 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  id v17 = (char *)&v148 - v16;
  __chkstk_darwin(v15);
  v151 = a1;
  uint64_t v152 = (uint64_t)&v148 - v18;
  Swift::Int v19 = a1[1];
  Swift::Int v20 = _minimumMergeRunLength(_:)(v19);
  if (v20 >= v19)
  {
    if (v19 < 0) {
      goto LABEL_145;
    }
    if (v19) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v19, 1, v151);
    }
  }
  else
  {
    Swift::Int v21 = v20;
    uint64_t v22 = specialized static Array._allocateUninitialized(_:)(v19 / 2);
    v160 = v23;
    uint64_t v169 = v22;
    uint64_t v156 = v19;
    if (v19 <= 0) {
      goto LABEL_108;
    }
    Swift::Int v149 = v21;
    v150 = v17;
    uint64_t v24 = 0;
    uint64_t v25 = *v151;
    v167 = (void (**)(uint64_t, char *, uint64_t))(v3 + 32);
    v162 = (void (**)(void))(v3 + 8);
    uint64_t v148 = v25 - 8;
    v155 = (char *)_swiftEmptyArrayStorage;
    uint64_t v164 = v25;
LABEL_4:
    Swift::Int v26 = v24 + 1;
    v154 = (char *)v24;
    if (v24 + 1 < v19)
    {
      unint64_t v27 = *(void **)(v25 + 8 * v24);
      id v28 = (char *)*(id *)(v25 + 8 * v26);
      id v29 = v27;
      id v30 = [v28 date];
      if (!v30) {
        goto LABEL_162;
      }
      unint64_t v31 = v30;
      uint64_t v32 = v168;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v33 = *v167;
      uint64_t v34 = v152;
      (*v167)(v152, v32, v2);
      __swift_storeEnumTagSinglePayload(v34, 0, 1, v2);
      if (__swift_getEnumTagSinglePayload(v34, 1, v2) == 1) {
        goto LABEL_163;
      }
      id v35 = [v29 date];
      if (!v35) {
        goto LABEL_164;
      }
      uint64_t v36 = v35;
      v153 = (char *)v29;
      v165 = v28;
      unint64_t v37 = v168;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v38 = (uint64_t)v150;
      v33((uint64_t)v150, v37, v2);
      __swift_storeEnumTagSinglePayload(v38, 0, 1, v2);
      if (__swift_getEnumTagSinglePayload(v38, 1, v2) == 1) {
        goto LABEL_165;
      }
      uint64_t v39 = v152;
      LODWORD(v163) = static Date.< infix(_:_:)();
      uint64_t v40 = *v162;
      ((void (*)(uint64_t, uint64_t))*v162)(v38, v2);
      v157 = v40;
      ((void (*)(uint64_t, uint64_t))v40)(v39, v2);

      Swift::Int v26 = v24 + 2;
      if (v24 + 2 >= v19)
      {
        uint64_t v25 = v164;
      }
      else
      {
        uint64_t v41 = v24;
        uint64_t v25 = v164;
        while (1)
        {
          v165 = (char *)v41;
          uint64_t v42 = v25 + 8 * v41;
          uint64_t v43 = *(void **)(v42 + 8);
          id v44 = *(id *)(v42 + 16);
          id v45 = v43;
          id v46 = [v44 date];
          if (!v46) {
            goto LABEL_156;
          }
          uint64_t v47 = v46;
          uint64_t v48 = v168;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v49 = v159;
          v33(v159, v48, v2);
          __swift_storeEnumTagSinglePayload(v49, 0, 1, v2);
          if (__swift_getEnumTagSinglePayload(v49, 1, v2) == 1) {
            goto LABEL_157;
          }
          id v50 = [v45 date];
          if (!v50) {
            goto LABEL_158;
          }
          uint64_t v51 = v50;
          uint64_t v52 = v168;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v53 = v158;
          uint64_t v54 = v33;
          v33(v158, v52, v2);
          __swift_storeEnumTagSinglePayload(v53, 0, 1, v2);
          if (__swift_getEnumTagSinglePayload(v53, 1, v2) == 1) {
            goto LABEL_159;
          }
          uint64_t v56 = v158;
          uint64_t v55 = v159;
          int v57 = static Date.< infix(_:_:)();
          uint64_t v58 = v157;
          ((void (*)(uint64_t, uint64_t))v157)(v56, v2);
          ((void (*)(uint64_t, uint64_t))v58)(v55, v2);

          if ((v163 ^ v57)) {
            break;
          }
          uint64_t v25 = v164;
          uint64_t v41 = (uint64_t)(v165 + 1);
          Swift::Int v19 = v156;
          uint64_t v33 = v54;
          if ((uint64_t)(v165 + 3) >= v156)
          {
            Swift::Int v26 = v156;
            goto LABEL_20;
          }
        }
        uint64_t v25 = v164;
        Swift::Int v26 = (Swift::Int)(v165 + 2);
        Swift::Int v19 = v156;
LABEL_20:
        uint64_t v24 = (uint64_t)v154;
      }
      if (v163)
      {
        if (v26 < v24) {
          goto LABEL_146;
        }
        if (v24 < v26)
        {
          uint64_t v59 = (uint64_t *)(v148 + 8 * v26);
          Swift::Int v60 = v26;
          uint64_t v61 = v24;
          uint64_t v62 = (uint64_t *)(v25 + 8 * v24);
          do
          {
            if (v61 != --v60)
            {
              if (!v25) {
                goto LABEL_160;
              }
              uint64_t v63 = *v62;
              *uint64_t v62 = *v59;
              uint64_t *v59 = v63;
            }
            ++v61;
            --v59;
            ++v62;
          }
          while (v61 < v60);
        }
      }
    }
    if (v26 >= v19) {
      goto LABEL_38;
    }
    if (__OFSUB__(v26, v24)) {
      goto LABEL_144;
    }
    if (v26 - v24 >= v149) {
      goto LABEL_38;
    }
    if (__OFADD__(v24, v149)) {
      goto LABEL_147;
    }
    if (v24 + v149 >= v19) {
      uint64_t v64 = (char *)v19;
    }
    else {
      uint64_t v64 = (char *)(v24 + v149);
    }
    if ((uint64_t)v64 < v24)
    {
LABEL_148:
      __break(1u);
      goto LABEL_149;
    }
    if ((char *)v26 == v64)
    {
LABEL_38:
      v163 = (char *)v26;
      goto LABEL_39;
    }
    uint64_t v119 = (void (*)(void))(v148 + 8 * v26);
    v153 = v64;
LABEL_91:
    long long v120 = *(void **)(v25 + 8 * v26);
    v157 = v119;
    v163 = (char *)v26;
    while (1)
    {
      Swift::Int v19 = (Swift::Int)v8;
      uint64_t v121 = *(void **)v119;
      id v122 = v120;
      id v123 = v121;
      id v124 = [v122 date];
      if (!v124) {
        goto LABEL_150;
      }
      v125 = v124;
      v165 = (char *)v24;
      v126 = v168;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v127 = v166;
      v128 = *v167;
      (*v167)(v166, v126, v2);
      __swift_storeEnumTagSinglePayload(v127, 0, 1, v2);
      if (__swift_getEnumTagSinglePayload(v127, 1, v2) == 1) {
        break;
      }
      id v129 = [v123 date];
      if (!v129) {
        goto LABEL_152;
      }
      v130 = v129;
      v131 = v168;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      v132 = v131;
      uint64_t v8 = (char *)v19;
      v128(v19, v132, v2);
      __swift_storeEnumTagSinglePayload(v19, 0, 1, v2);
      if (__swift_getEnumTagSinglePayload(v19, 1, v2) == 1) {
        goto LABEL_153;
      }
      uint64_t v133 = v166;
      char v134 = static Date.< infix(_:_:)();
      v135 = *v162;
      (*v162)();
      uint64_t v136 = v133;
      Swift::Int v19 = v2;
      ((void (*)(uint64_t, uint64_t))v135)(v136, v2);

      if ((v134 & 1) == 0)
      {
        v138 = v163;
        uint64_t v25 = v164;
LABEL_101:
        Swift::Int v26 = (Swift::Int)(v138 + 1);
        uint64_t v119 = (void (*)(void))((char *)v157 + 8);
        uint64_t v24 = (uint64_t)v154;
        if ((char *)v26 != v153) {
          goto LABEL_91;
        }
        v163 = v153;
LABEL_39:
        uint64_t v65 = v155;
        if ((uint64_t)v163 < v24) {
          goto LABEL_143;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v65 + 2) + 1, 1, v65);
        }
        unint64_t v67 = *((void *)v65 + 2);
        unint64_t v66 = *((void *)v65 + 3);
        unint64_t v68 = v67 + 1;
        uint64_t v25 = v164;
        if (v67 >= v66 >> 1)
        {
          v139 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v66 > 1), v67 + 1, 1, v65);
          uint64_t v25 = v164;
          uint64_t v65 = v139;
        }
        *((void *)v65 + 2) = v68;
        v165 = v65 + 32;
        uint64_t v69 = &v65[16 * v67 + 32];
        uint64_t v70 = v163;
        *(void *)uint64_t v69 = v24;
        *((void *)v69 + 1) = v70;
        if (v67)
        {
          uint64_t v71 = v165;
          while (1)
          {
            Swift::Int v72 = v68 - 1;
            if (v68 >= 4)
            {
              os_log_type_t v77 = &v71[16 * v68];
              uint64_t v78 = *((void *)v77 - 8);
              uint64_t v79 = *((void *)v77 - 7);
              BOOL v83 = __OFSUB__(v79, v78);
              uint64_t v80 = v79 - v78;
              if (v83) {
                goto LABEL_128;
              }
              uint64_t v82 = *((void *)v77 - 6);
              uint64_t v81 = *((void *)v77 - 5);
              BOOL v83 = __OFSUB__(v81, v82);
              uint64_t v75 = v81 - v82;
              char v76 = v83;
              if (v83) {
                goto LABEL_129;
              }
              unint64_t v84 = v68 - 2;
              uint64_t v85 = &v71[16 * v68 - 32];
              uint64_t v87 = *(void *)v85;
              uint64_t v86 = *((void *)v85 + 1);
              BOOL v83 = __OFSUB__(v86, v87);
              uint64_t v88 = v86 - v87;
              if (v83) {
                goto LABEL_130;
              }
              BOOL v83 = __OFADD__(v75, v88);
              uint64_t v89 = v75 + v88;
              if (v83) {
                goto LABEL_132;
              }
              if (v89 >= v80)
              {
                v107 = &v71[16 * v72];
                uint64_t v109 = *(void *)v107;
                uint64_t v108 = *((void *)v107 + 1);
                BOOL v83 = __OFSUB__(v108, v109);
                uint64_t v110 = v108 - v109;
                if (v83) {
                  goto LABEL_138;
                }
                BOOL v100 = v75 < v110;
                goto LABEL_77;
              }
            }
            else
            {
              if (v68 != 3)
              {
                uint64_t v101 = *((void *)v65 + 4);
                uint64_t v102 = *((void *)v65 + 5);
                BOOL v83 = __OFSUB__(v102, v101);
                uint64_t v94 = v102 - v101;
                char v95 = v83;
                goto LABEL_71;
              }
              uint64_t v74 = *((void *)v65 + 4);
              uint64_t v73 = *((void *)v65 + 5);
              BOOL v83 = __OFSUB__(v73, v74);
              uint64_t v75 = v73 - v74;
              char v76 = v83;
            }
            if (v76) {
              goto LABEL_131;
            }
            unint64_t v84 = v68 - 2;
            uint64_t v90 = &v71[16 * v68 - 32];
            uint64_t v92 = *(void *)v90;
            uint64_t v91 = *((void *)v90 + 1);
            BOOL v93 = __OFSUB__(v91, v92);
            uint64_t v94 = v91 - v92;
            char v95 = v93;
            if (v93) {
              goto LABEL_133;
            }
            uint64_t v96 = &v71[16 * v72];
            uint64_t v98 = *(void *)v96;
            uint64_t v97 = *((void *)v96 + 1);
            BOOL v83 = __OFSUB__(v97, v98);
            uint64_t v99 = v97 - v98;
            if (v83) {
              goto LABEL_135;
            }
            if (__OFADD__(v94, v99)) {
              goto LABEL_137;
            }
            if (v94 + v99 >= v75)
            {
              BOOL v100 = v75 < v99;
LABEL_77:
              if (v100) {
                Swift::Int v72 = v84;
              }
              goto LABEL_79;
            }
LABEL_71:
            if (v95) {
              goto LABEL_134;
            }
            uint64_t v103 = &v71[16 * v72];
            uint64_t v105 = *(void *)v103;
            uint64_t v104 = *((void *)v103 + 1);
            BOOL v83 = __OFSUB__(v104, v105);
            uint64_t v106 = v104 - v105;
            if (v83) {
              goto LABEL_136;
            }
            if (v106 < v94) {
              goto LABEL_88;
            }
LABEL_79:
            Swift::Int v111 = v72 - 1;
            if (v72 - 1 >= v68)
            {
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
              goto LABEL_139;
            }
            if (!v25) {
              goto LABEL_155;
            }
            uint64_t v112 = &v71[16 * v111];
            v113 = v71;
            uint64_t v114 = *(void *)v112;
            Swift::Int v19 = v72;
            v115 = &v113[16 * v72];
            uint64_t v116 = *((void *)v115 + 1);
            uint64_t v117 = v161;
            specialized _merge<A>(low:mid:high:buffer:by:)((id *)(v25 + 8 * *(void *)v112), (id *)(v25 + 8 * *(void *)v115), v25 + 8 * v116, v160);
            uint64_t v161 = v117;
            if (v117)
            {
LABEL_106:
              swift_bridgeObjectRelease();
              if (v156 >= -1) {
                goto LABEL_123;
              }
              __break(1u);
LABEL_108:
              v155 = (char *)_swiftEmptyArrayStorage;
              unint64_t v68 = _swiftEmptyArrayStorage[2];
LABEL_109:
              if (v68 >= 2)
              {
                uint64_t v140 = *v151;
                uint64_t v141 = v161;
                Swift::Int v19 = v156;
                while (1)
                {
                  unint64_t v142 = v68 - 2;
                  if (v68 < 2) {
                    break;
                  }
                  if (!v140) {
                    goto LABEL_161;
                  }
                  uint64_t v2 = v68 - 1;
                  v143 = v155;
                  uint64_t v144 = *(void *)&v155[16 * v142 + 32];
                  uint64_t v145 = *(void *)&v155[16 * v68 + 24];
                  specialized _merge<A>(low:mid:high:buffer:by:)((id *)(v140 + 8 * v144), (id *)(v140 + 8 * *(void *)&v155[16 * v68 + 16]), v140 + 8 * v145, v160);
                  if (v141) {
                    goto LABEL_106;
                  }
                  if (v145 < v144) {
                    goto LABEL_140;
                  }
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    v143 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v143);
                  }
                  if (v142 >= *((void *)v143 + 2)) {
                    goto LABEL_141;
                  }
                  v146 = &v143[16 * v142 + 32];
                  *(void *)v146 = v144;
                  *((void *)v146 + 1) = v145;
                  unint64_t v147 = *((void *)v143 + 2);
                  if (v68 > v147) {
                    goto LABEL_142;
                  }
                  memmove(&v143[16 * v2 + 32], &v143[16 * v68 + 32], 16 * (v147 - v68));
                  v155 = v143;
                  *((void *)v143 + 2) = v147 - 1;
                  unint64_t v68 = v147 - 1;
                  if (v147 <= 2) {
                    goto LABEL_122;
                  }
                }
LABEL_139:
                __break(1u);
LABEL_140:
                __break(1u);
LABEL_141:
                __break(1u);
LABEL_142:
                __break(1u);
LABEL_143:
                __break(1u);
LABEL_144:
                __break(1u);
LABEL_145:
                __break(1u);
LABEL_146:
                __break(1u);
LABEL_147:
                __break(1u);
                goto LABEL_148;
              }
LABEL_122:
              swift_bridgeObjectRelease();
              if (v19 >= -1)
              {
LABEL_123:
                *(void *)((char *)&dword_10 + (v169 & 0xFFFFFFFFFFFFFF8)) = 0;
                specialized Array._endMutation()();
                swift_bridgeObjectRelease();
                return;
              }
LABEL_149:
              __break(1u);
LABEL_150:
              __swift_storeEnumTagSinglePayload(v166, 1, 1, v2);
              goto LABEL_151;
            }
            if (v116 < v114) {
              goto LABEL_125;
            }
            if ((unint64_t)v19 > *((void *)v65 + 2)) {
              goto LABEL_126;
            }
            *(void *)uint64_t v112 = v114;
            uint64_t v71 = v165;
            *(void *)&v165[16 * v111 + 8] = v116;
            unint64_t v118 = *((void *)v65 + 2);
            if (v19 >= v118) {
              goto LABEL_127;
            }
            unint64_t v68 = v118 - 1;
            memmove(v115, v115 + 16, 16 * (v118 - 1 - v19));
            *((void *)v65 + 2) = v118 - 1;
            uint64_t v25 = v164;
            if (v118 <= 2) {
              goto LABEL_88;
            }
          }
        }
        unint64_t v68 = 1;
LABEL_88:
        v155 = v65;
        Swift::Int v19 = v156;
        uint64_t v24 = (uint64_t)v163;
        if ((uint64_t)v163 >= v156) {
          goto LABEL_109;
        }
        goto LABEL_4;
      }
      uint64_t v25 = v164;
      if (!v164) {
        goto LABEL_154;
      }
      v137 = *(void **)v119;
      long long v120 = (void *)*((void *)v119 + 1);
      *(void *)uint64_t v119 = v120;
      *((void *)v119 + 1) = v137;
      uint64_t v119 = (void (*)(void))((char *)v119 - 8);
      uint64_t v24 = (uint64_t)(v165 + 1);
      v138 = v163;
      if (v163 == v165 + 1) {
        goto LABEL_101;
      }
    }
LABEL_151:
    __break(1u);
LABEL_152:
    __swift_storeEnumTagSinglePayload(v19, 1, 1, v2);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __swift_storeEnumTagSinglePayload(v159, 1, 1, v2);
LABEL_157:
    __break(1u);
LABEL_158:
    __swift_storeEnumTagSinglePayload(v158, 1, 1, v2);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __swift_storeEnumTagSinglePayload(v152, 1, 1, v2);
LABEL_163:
    __break(1u);
LABEL_164:
    __swift_storeEnumTagSinglePayload((uint64_t)v150, 1, 1, v2);
LABEL_165:
    __break(1u);
  }
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v38 = a1;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v46 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v45 = (uint64_t)&v36 - v14;
  uint64_t v37 = a2;
  if (a3 != a2)
  {
    uint64_t v15 = *a4;
    id v44 = (void (**)(uint64_t, char *, uint64_t))(v8 + 32);
    uint64_t v40 = (void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v41 = v15;
    uint64_t v16 = v15 + 8 * a3 - 8;
    while (2)
    {
      id v17 = *(void **)(v41 + 8 * a3);
      uint64_t v18 = v38;
      uint64_t v39 = v16;
      uint64_t v42 = a3;
      do
      {
        Swift::Int v19 = *(void **)v16;
        Swift::Int v20 = v17;
        id v21 = v19;
        id v22 = [v20 date];
        if (!v22)
        {
          __swift_storeEnumTagSinglePayload(v45, 1, 1, v7);
LABEL_14:
          __break(1u);
LABEL_15:
          __swift_storeEnumTagSinglePayload((uint64_t)v20, 1, 1, v8);
LABEL_16:
          __break(1u);
LABEL_17:
          __break(1u);
          return;
        }
        uint64_t v23 = v22;
        id v43 = v20;
        Swift::Int v20 = v13;
        uint64_t v24 = v46;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v25 = v45;
        Swift::Int v26 = *v44;
        (*v44)(v45, v24, v7);
        __swift_storeEnumTagSinglePayload(v25, 0, 1, v7);
        uint64_t v8 = v7;
        if (__swift_getEnumTagSinglePayload(v25, 1, v7) == 1) {
          goto LABEL_14;
        }
        id v27 = [v21 date];
        if (!v27) {
          goto LABEL_15;
        }
        id v28 = v27;
        id v29 = v46;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        id v30 = v29;
        uint64_t v13 = v20;
        v26((uint64_t)v20, v30, v7);
        __swift_storeEnumTagSinglePayload((uint64_t)v20, 0, 1, v7);
        if (__swift_getEnumTagSinglePayload((uint64_t)v20, 1, v7) == 1) {
          goto LABEL_16;
        }
        uint64_t v31 = v45;
        char v32 = static Date.< infix(_:_:)();
        uint64_t v8 = (uint64_t)v40;
        uint64_t v33 = *v40;
        (*v40)(v13, v7);
        v33((char *)v31, v7);

        uint64_t v34 = v42;
        if ((v32 & 1) == 0) {
          break;
        }
        if (!v41) {
          goto LABEL_17;
        }
        id v35 = *(void **)v16;
        id v17 = *(void **)(v16 + 8);
        *(void *)uint64_t v16 = v17;
        *(void *)(v16 + 8) = v35;
        v16 -= 8;
        ++v18;
      }
      while (v34 != v18);
      a3 = v34 + 1;
      uint64_t v16 = v39 + 8;
      if (a3 != v37) {
        continue;
      }
      break;
    }
  }
}

{
  uint64_t v4;
  uint64_t v5;
  char **v6;
  char **v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  char **v19;
  char **v20;
  id v21;
  BOOL v22;
  void *v23;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (a3 != a2)
  {
    uint64_t v4 = a3;
    id v27 = *a4;
    uint64_t v5 = *a4 + 8 * a3 - 8;
    uint64_t v6 = &selRef_setBundleId_;
    uint64_t v7 = &selRef_setBundleId_;
    while (2)
    {
      uint64_t v8 = *(void **)(v27 + 8 * v4);
      uint64_t v9 = a1;
      Swift::Int v26 = v5;
      id v28 = v4;
      do
      {
        uint64_t v10 = *(void **)v5;
        uint64_t v11 = v8;
        uint64_t v12 = v10;
        uint64_t v13 = [v11 v6[189]];
        if (!v13)
        {
          __break(1u);
LABEL_13:
          __break(1u);
LABEL_14:
          __break(1u);
          return;
        }
        uint64_t v14 = v13;
        uint64_t v15 = [v13 v7[163]];

        uint64_t v16 = [v12 v6[189]];
        if (!v16) {
          goto LABEL_13;
        }
        id v17 = v16;
        uint64_t v18 = [v16 v7[163]];
        Swift::Int v19 = v7;
        Swift::Int v20 = v6;
        id v21 = v18;

        id v22 = (uint64_t)v15 < (uint64_t)v21;
        uint64_t v6 = v20;
        uint64_t v7 = v19;
        if (!v22) {
          break;
        }
        if (!v27) {
          goto LABEL_14;
        }
        uint64_t v23 = *(void **)v5;
        uint64_t v8 = *(void **)(v5 + 8);
        *(void *)uint64_t v5 = v8;
        *(void *)(v5 + 8) = v23;
        v5 -= 8;
        ++v9;
      }
      while (v28 != v9);
      uint64_t v4 = v28 + 1;
      uint64_t v5 = v26 + 8;
      if (v28 + 1 != a2) {
        continue;
      }
      break;
    }
  }
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  char *v20;
  id v21;
  id v22;
  void *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(uint64_t, char *, uint64_t);
  id v27;
  void *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (**v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  id v43;
  void (**v44)(uint64_t, char *, uint64_t);
  uint64_t v45;
  char *v46;

  uint64_t v38 = a1;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v46 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v45 = (uint64_t)&v36 - v14;
  uint64_t v37 = a2;
  if (a3 != a2)
  {
    uint64_t v15 = *a4;
    id v44 = (void (**)(uint64_t, char *, uint64_t))(v8 + 32);
    uint64_t v40 = (void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v41 = v15;
    uint64_t v16 = v15 + 8 * a3 - 8;
    while (2)
    {
      id v17 = *(void **)(v41 + 8 * a3);
      uint64_t v18 = v38;
      uint64_t v39 = v16;
      uint64_t v42 = a3;
      do
      {
        Swift::Int v19 = *(void **)v16;
        Swift::Int v20 = v17;
        id v21 = v19;
        id v22 = [v20 date];
        if (!v22)
        {
          __swift_storeEnumTagSinglePayload(v45, 1, 1, v7);
LABEL_14:
          __break(1u);
LABEL_15:
          __swift_storeEnumTagSinglePayload((uint64_t)v20, 1, 1, v8);
LABEL_16:
          __break(1u);
LABEL_17:
          __break(1u);
          return;
        }
        uint64_t v23 = v22;
        id v43 = v20;
        Swift::Int v20 = v13;
        uint64_t v24 = v46;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v25 = v45;
        Swift::Int v26 = *v44;
        (*v44)(v45, v24, v7);
        __swift_storeEnumTagSinglePayload(v25, 0, 1, v7);
        uint64_t v8 = v7;
        if (__swift_getEnumTagSinglePayload(v25, 1, v7) == 1) {
          goto LABEL_14;
        }
        id v27 = [v21 date];
        if (!v27) {
          goto LABEL_15;
        }
        id v28 = v27;
        id v29 = v46;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        id v30 = v29;
        uint64_t v13 = v20;
        v26((uint64_t)v20, v30, v7);
        __swift_storeEnumTagSinglePayload((uint64_t)v20, 0, 1, v7);
        if (__swift_getEnumTagSinglePayload((uint64_t)v20, 1, v7) == 1) {
          goto LABEL_16;
        }
        uint64_t v31 = v45;
        char v32 = static Date.< infix(_:_:)();
        uint64_t v8 = (uint64_t)v40;
        uint64_t v33 = *v40;
        (*v40)(v13, v7);
        v33((char *)v31, v7);

        uint64_t v34 = v42;
        if ((v32 & 1) == 0) {
          break;
        }
        if (!v41) {
          goto LABEL_17;
        }
        id v35 = *(void **)v16;
        id v17 = *(void **)(v16 + 8);
        *(void *)uint64_t v16 = v17;
        *(void *)(v16 + 8) = v35;
        v16 -= 8;
        ++v18;
      }
      while (v34 != v18);
      a3 = v34 + 1;
      uint64_t v16 = v39 + 8;
      if (a3 != v37) {
        continue;
      }
      break;
    }
  }
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(id *a1, id *a2, unint64_t a3, void **a4)
{
  uint64_t v8 = type metadata accessor for Date();
  char v76 = *(id **)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v82 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v74 = (void (**)(char *, uint64_t))((char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v78 = (void (**)(char *, char *, uint64_t))((char *)&v70 - v14);
  uint64_t v15 = __chkstk_darwin(v13);
  id v17 = (char *)&v70 - v16;
  __chkstk_darwin(v15);
  uint64_t v79 = (char *)&v70 - v18;
  uint64_t v19 = (uint64_t)(a3 - (void)a2) / 8;
  if (a2 - a1 < v19)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2 - a1, a4);
    Swift::Int v20 = &a4[a2 - a1];
    if ((char *)a2 - (char *)a1 >= 8 && (unint64_t)a2 < a3)
    {
      uint64_t v78 = (void (**)(char *, char *, uint64_t))(v76 + 4);
      uint64_t v74 = (void (**)(char *, uint64_t))(v76 + 1);
      uint64_t v75 = (id *)a3;
      uint64_t v80 = &a4[a2 - a1];
      while (1)
      {
        uint64_t v81 = a1;
        uint64_t v22 = (uint64_t)v17;
        char v76 = a2;
        uint64_t v23 = *a4;
        id v24 = *a2;
        id v25 = v23;
        id v26 = [v24 date];
        if (!v26)
        {
          __swift_storeEnumTagSinglePayload((uint64_t)v79, 1, 1, v8);
LABEL_49:
          __break(1u);
LABEL_50:
          __swift_storeEnumTagSinglePayload(v22, 1, 1, v8);
LABEL_51:
          __break(1u);
LABEL_52:
          __swift_storeEnumTagSinglePayload((uint64_t)v78, 1, 1, v8);
          goto LABEL_53;
        }
        id v27 = v26;
        id v28 = v82;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v29 = (uint64_t)v79;
        id v30 = *v78;
        (*v78)(v79, v28, v8);
        __swift_storeEnumTagSinglePayload(v29, 0, 1, v8);
        if (__swift_getEnumTagSinglePayload(v29, 1, v8) == 1) {
          goto LABEL_49;
        }
        id v31 = [v25 date];
        if (!v31) {
          goto LABEL_50;
        }
        char v32 = v31;
        uint64_t v33 = v82;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v34 = v33;
        id v17 = (char *)v22;
        v30((char *)v22, v34, v8);
        __swift_storeEnumTagSinglePayload(v22, 0, 1, v8);
        if (__swift_getEnumTagSinglePayload(v22, 1, v8) == 1) {
          goto LABEL_51;
        }
        id v35 = v79;
        char v36 = static Date.< infix(_:_:)();
        uint64_t v37 = *v74;
        (*v74)(v17, v8);
        v37(v35, v8);

        if (v36) {
          break;
        }
        uint64_t v38 = a4;
        uint64_t v39 = v81;
        BOOL v40 = v81 == a4++;
        a2 = v76;
        if (!v40) {
          goto LABEL_15;
        }
LABEL_16:
        a1 = v39 + 1;
        Swift::Int v20 = v80;
        if (a4 >= v80 || a2 >= v75) {
          goto LABEL_21;
        }
      }
      uint64_t v38 = v76;
      a2 = v76 + 1;
      uint64_t v39 = v81;
      if (v81 == v76) {
        goto LABEL_16;
      }
LABEL_15:
      *uint64_t v39 = *v38;
      goto LABEL_16;
    }
LABEL_21:
    a2 = a1;
LABEL_47:
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a4, v20 - a4, a2);
    return 1;
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - (void)a2) / 8, a4);
  Swift::Int v20 = &a4[v19];
  if ((uint64_t)(a3 - (void)a2) < 8 || a1 >= a2) {
    goto LABEL_47;
  }
  id v43 = (char *)(v76 + 4);
  uint64_t v71 = (char *)(v76 + 1);
  Swift::Int v72 = (char *)(v76 + 4);
  id v44 = (id *)(a3 - 8);
  uint64_t v73 = a4;
  uint64_t v81 = a1;
  uint64_t v77 = v8;
  while (1)
  {
    uint64_t v80 = v20;
    uint64_t v45 = v20 - 1;
    uint64_t v47 = a2 - 1;
    id v46 = *(a2 - 1);
    uint64_t v48 = *(v20 - 1);
    uint64_t v79 = v46;
    char v76 = (id *)v48;
    id v49 = [v48 date];
    if (!v49) {
      goto LABEL_52;
    }
    id v50 = v49;
    uint64_t v51 = v82;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v52 = *(void (**)(void (**)(char *, uint64_t), char *, uint64_t))v43;
    uint64_t v53 = v78;
    (*(void (**)(void *, char *, uint64_t))v43)(v78, v51, v8);
    __swift_storeEnumTagSinglePayload((uint64_t)v53, 0, 1, v8);
    if (__swift_getEnumTagSinglePayload((uint64_t)v53, 1, v8) == 1) {
      break;
    }
    id v54 = [v79 date];
    if (!v54) {
      goto LABEL_54;
    }
    uint64_t v55 = v54;
    uint64_t v56 = a2;
    int v57 = v82;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v58 = v74;
    uint64_t v59 = v57;
    uint64_t v60 = v77;
    v52(v74, v59, v77);
    __swift_storeEnumTagSinglePayload((uint64_t)v58, 0, 1, v60);
    uint64_t result = __swift_getEnumTagSinglePayload((uint64_t)v58, 1, v60);
    if (result == 1) {
      goto LABEL_55;
    }
    uint64_t v75 = v44 + 1;
    uint64_t v62 = v78;
    char v63 = static Date.< infix(_:_:)();
    uint64_t v64 = v58;
    char v65 = v63;
    unint64_t v66 = *(void (**)(void (**)(char *, char *, uint64_t), uint64_t))v71;
    (*(void (**)(void *, uint64_t))v71)(v64, v60);
    v66(v62, v60);

    if (v65)
    {
      BOOL v67 = v75 != v56 || v44 >= v56;
      a2 = v47;
      Swift::Int v20 = v80;
      if (!v67) {
        goto LABEL_43;
      }
    }
    else
    {
      BOOL v68 = v75 != v80 || v44 >= v80;
      uint64_t v47 = v45;
      Swift::Int v20 = v45;
      a2 = v56;
      if (!v68) {
        goto LABEL_43;
      }
    }
    *id v44 = *v47;
LABEL_43:
    --v44;
    id v43 = v72;
    a4 = v73;
    BOOL v69 = v20 > v73 && a2 > v81;
    uint64_t v8 = v77;
    if (!v69) {
      goto LABEL_47;
    }
  }
LABEL_53:
  __break(1u);
LABEL_54:
  uint64_t result = __swift_storeEnumTagSinglePayload((uint64_t)v74, 1, 1, v77);
LABEL_55:
  __break(1u);
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  id v31;
  void *v32;
  char *v33;
  char *v34;
  char *v35;
  char v36;
  void (*v37)(char *, uint64_t);
  void **v38;
  id *v39;
  BOOL v40;
  char *v43;
  id *v44;
  id *v45;
  void *v46;
  id *v47;
  char *v48;
  id v49;
  void *v50;
  char *v51;
  void (*v52)(void (**)(char *, uint64_t), char *, uint64_t);
  void (**v53)(char *, char *, uint64_t);
  id v54;
  void *v55;
  id *v56;
  char *v57;
  void (**v58)(char *, uint64_t);
  char *v59;
  uint64_t v60;
  uint64_t result;
  void (**v62)(char *, char *, uint64_t);
  char v63;
  void (**v64)(char *, uint64_t);
  char v65;
  void (*v66)(void (**)(char *, char *, uint64_t), uint64_t);
  BOOL v67;
  BOOL v68;
  BOOL v69;
  uint64_t v70;
  char *v71;
  char *v72;
  void **v73;
  void (**v74)(char *, uint64_t);
  id *v75;
  id *v76;
  uint64_t v77;
  void (**v78)(char *, char *, uint64_t);
  char *v79;
  void **v80;
  id *v81;
  char *v82;

  uint64_t v8 = type metadata accessor for Date();
  char v76 = *(id **)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v82 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v74 = (void (**)(char *, uint64_t))((char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v78 = (void (**)(char *, char *, uint64_t))((char *)&v70 - v14);
  uint64_t v15 = __chkstk_darwin(v13);
  id v17 = (char *)&v70 - v16;
  __chkstk_darwin(v15);
  uint64_t v79 = (char *)&v70 - v18;
  uint64_t v19 = (uint64_t)(a3 - (void)a2) / 8;
  if (a2 - a1 < v19)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2 - a1, a4);
    Swift::Int v20 = &a4[a2 - a1];
    if ((char *)a2 - (char *)a1 >= 8 && (unint64_t)a2 < a3)
    {
      uint64_t v78 = (void (**)(char *, char *, uint64_t))(v76 + 4);
      uint64_t v74 = (void (**)(char *, uint64_t))(v76 + 1);
      uint64_t v75 = (id *)a3;
      uint64_t v80 = &a4[a2 - a1];
      while (1)
      {
        uint64_t v81 = a1;
        uint64_t v22 = (uint64_t)v17;
        char v76 = a2;
        uint64_t v23 = *a4;
        id v24 = *a2;
        id v25 = v23;
        id v26 = [v24 date];
        if (!v26)
        {
          __swift_storeEnumTagSinglePayload((uint64_t)v79, 1, 1, v8);
LABEL_49:
          __break(1u);
LABEL_50:
          __swift_storeEnumTagSinglePayload(v22, 1, 1, v8);
LABEL_51:
          __break(1u);
LABEL_52:
          __swift_storeEnumTagSinglePayload((uint64_t)v78, 1, 1, v8);
          goto LABEL_53;
        }
        id v27 = v26;
        id v28 = v82;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v29 = (uint64_t)v79;
        id v30 = *v78;
        (*v78)(v79, v28, v8);
        __swift_storeEnumTagSinglePayload(v29, 0, 1, v8);
        if (__swift_getEnumTagSinglePayload(v29, 1, v8) == 1) {
          goto LABEL_49;
        }
        id v31 = [v25 date];
        if (!v31) {
          goto LABEL_50;
        }
        char v32 = v31;
        uint64_t v33 = v82;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v34 = v33;
        id v17 = (char *)v22;
        v30((char *)v22, v34, v8);
        __swift_storeEnumTagSinglePayload(v22, 0, 1, v8);
        if (__swift_getEnumTagSinglePayload(v22, 1, v8) == 1) {
          goto LABEL_51;
        }
        id v35 = v79;
        char v36 = static Date.< infix(_:_:)();
        uint64_t v37 = *v74;
        (*v74)(v17, v8);
        v37(v35, v8);

        if (v36) {
          break;
        }
        uint64_t v38 = a4;
        uint64_t v39 = v81;
        BOOL v40 = v81 == a4++;
        a2 = v76;
        if (!v40) {
          goto LABEL_15;
        }
LABEL_16:
        a1 = v39 + 1;
        Swift::Int v20 = v80;
        if (a4 >= v80 || a2 >= v75) {
          goto LABEL_21;
        }
      }
      uint64_t v38 = v76;
      a2 = v76 + 1;
      uint64_t v39 = v81;
      if (v81 == v76) {
        goto LABEL_16;
      }
LABEL_15:
      *uint64_t v39 = *v38;
      goto LABEL_16;
    }
LABEL_21:
    a2 = a1;
LABEL_47:
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a4, v20 - a4, a2);
    return 1;
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - (void)a2) / 8, a4);
  Swift::Int v20 = &a4[v19];
  if ((uint64_t)(a3 - (void)a2) < 8 || a1 >= a2) {
    goto LABEL_47;
  }
  id v43 = (char *)(v76 + 4);
  uint64_t v71 = (char *)(v76 + 1);
  Swift::Int v72 = (char *)(v76 + 4);
  id v44 = (id *)(a3 - 8);
  uint64_t v73 = a4;
  uint64_t v81 = a1;
  uint64_t v77 = v8;
  while (1)
  {
    uint64_t v80 = v20;
    uint64_t v45 = v20 - 1;
    uint64_t v47 = a2 - 1;
    id v46 = *(a2 - 1);
    uint64_t v48 = *(v20 - 1);
    uint64_t v79 = v46;
    char v76 = (id *)v48;
    id v49 = [v48 date];
    if (!v49) {
      goto LABEL_52;
    }
    id v50 = v49;
    uint64_t v51 = v82;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v52 = *(void (**)(void (**)(char *, uint64_t), char *, uint64_t))v43;
    uint64_t v53 = v78;
    (*(void (**)(void *, char *, uint64_t))v43)(v78, v51, v8);
    __swift_storeEnumTagSinglePayload((uint64_t)v53, 0, 1, v8);
    if (__swift_getEnumTagSinglePayload((uint64_t)v53, 1, v8) == 1) {
      break;
    }
    id v54 = [v79 date];
    if (!v54) {
      goto LABEL_54;
    }
    uint64_t v55 = v54;
    uint64_t v56 = a2;
    int v57 = v82;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v58 = v74;
    uint64_t v59 = v57;
    uint64_t v60 = v77;
    v52(v74, v59, v77);
    __swift_storeEnumTagSinglePayload((uint64_t)v58, 0, 1, v60);
    uint64_t result = __swift_getEnumTagSinglePayload((uint64_t)v58, 1, v60);
    if (result == 1) {
      goto LABEL_55;
    }
    uint64_t v75 = v44 + 1;
    uint64_t v62 = v78;
    char v63 = static Date.< infix(_:_:)();
    uint64_t v64 = v58;
    char v65 = v63;
    unint64_t v66 = *(void (**)(void (**)(char *, char *, uint64_t), uint64_t))v71;
    (*(void (**)(void *, uint64_t))v71)(v64, v60);
    v66(v62, v60);

    if (v65)
    {
      BOOL v67 = v75 != v56 || v44 >= v56;
      a2 = v47;
      Swift::Int v20 = v80;
      if (!v67) {
        goto LABEL_43;
      }
    }
    else
    {
      BOOL v68 = v75 != v80 || v44 >= v80;
      uint64_t v47 = v45;
      Swift::Int v20 = v45;
      a2 = v56;
      if (!v68) {
        goto LABEL_43;
      }
    }
    *id v44 = *v47;
LABEL_43:
    --v44;
    id v43 = v72;
    a4 = v73;
    BOOL v69 = v20 > v73 && a2 > v81;
    uint64_t v8 = v77;
    if (!v69) {
      goto LABEL_47;
    }
  }
LABEL_53:
  __break(1u);
LABEL_54:
  uint64_t result = __swift_storeEnumTagSinglePayload((uint64_t)v74, 1, 1, v77);
LABEL_55:
  __break(1u);
  return result;
}

uint64_t outlined bridged method (ob) of @objc SANotificationObject.notificationId.getter(void *a1)
{
  return outlined bridged method (ob) of @objc SANotificationObject.notificationId.getter(a1, (SEL *)&selRef_notificationId);
}

void outlined bridged method (mbnn) of @objc SANotificationsSearch.notificationType.setter(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a3 setNotificationType:v4];
}

uint64_t outlined bridged method (ob) of @objc SANotificationObject.notificationId.getter(void *a1, SEL *a2)
{
  id v3 = [a1 *a2];

  if (!v3) {
    return 0;
  }
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t outlined bridged method (pb) of @objc SANotificationObject.applicationId.getter(void *a1)
{
  id v1 = [a1 applicationId];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined consume of CallNotificationContextProvider.CallNotification?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for CallNotificationContextProvider()
{
  return self;
}

ValueMetadata *type metadata accessor for CallNotificationContextProvider.CallNotification()
{
  return &type metadata for CallNotificationContextProvider.CallNotification;
}

uint64_t OUTLINED_FUNCTION_2_39()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t *OUTLINED_FUNCTION_3_38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return &a9;
}

uint64_t OUTLINED_FUNCTION_8_37()
{
  *(_WORD *)(v0 + 12) = 2080;
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_9_32(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0x16u);
}

PhoneCallFlowDelegatePlugin::DucFamilyNames_optional __swiftcall DucFamilyNames.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of DucFamilyNames.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 9) {
    return (PhoneCallFlowDelegatePlugin::DucFamilyNames_optional)9;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::DucFamilyNames_optional)v3;
  }
}

uint64_t DucFamilyNames.rawValue.getter(char a1)
{
  uint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      uint64_t v3 = 0x43656E6F6870;
      return v3 & 0xFFFFFFFFFFFFLL | 0x6C61000000000000;
    case 2:
      return 0x75446E6F6D6D6F63;
    case 3:
    case 5:
      return 0xD000000000000014;
    case 4:
      uint64_t v3 = 0x437472617473;
      return v3 & 0xFFFFFFFFFFFFLL | 0x6C61000000000000;
    case 6:
      uint64_t v4 = 0x7055676E6168;
      goto LABEL_9;
    case 7:
      uint64_t v4 = 0x726577736E61;
LABEL_9:
      uint64_t result = v4 & 0xFFFFFFFFFFFFLL | 0x6143000000000000;
      break;
    case 8:
      uint64_t result = 0xD00000000000001BLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance DucFamilyNames(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t lazy protocol witness table accessor for type DucFamilyNames and conformance DucFamilyNames()
{
  unint64_t result = lazy protocol witness table cache variable for type DucFamilyNames and conformance DucFamilyNames;
  if (!lazy protocol witness table cache variable for type DucFamilyNames and conformance DucFamilyNames)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DucFamilyNames and conformance DucFamilyNames);
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DucFamilyNames()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DucFamilyNames(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DucFamilyNames(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::DucFamilyNames_optional protocol witness for RawRepresentable.init(rawValue:) in conformance DucFamilyNames@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::DucFamilyNames_optional *a2@<X8>)
{
  result.value = DucFamilyNames.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance DucFamilyNames@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = DucFamilyNames.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unsigned char *storeEnumTagSinglePayload for DucFamilyNames(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0xFA814);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DucFamilyNames()
{
  return &type metadata for DucFamilyNames;
}

uint64_t specialized Sequence.allSatisfy(_:)(unint64_t a1, id a2)
{
  *(void *)(swift_allocObject() + 16) = a2;
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v4 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v5 = 4;
    while (1)
    {
      id v6 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v5);
      uint64_t v7 = v6;
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      id v9 = [v6 personHandle];
      if (!v9)
      {
        swift_bridgeObjectRelease();

LABEL_14:
        uint64_t v12 = 0;
        goto LABEL_18;
      }
      uint64_t v10 = v9;
      id v11 = [v9 emergencyType];

      if (v11 != a2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
      ++v5;
      if (v8 == v4) {
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_16:
    OUTLINED_FUNCTION_3_39();
  }
LABEL_17:
  swift_bridgeObjectRelease();
  uint64_t v12 = 1;
LABEL_18:
  swift_release();
  return v12;
}

void *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return specialized Sequence.compactMap<A>(_:)(a1, a2, a3);
}

{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  char v13;
  uint64_t v15;

  if (a3 >> 62) {
    goto LABEL_17;
  }
  uint64_t v5 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    id v6 = 4;
    while (1)
    {
      uint64_t v7 = (a3 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a3 + 8 * v6);
      uint64_t v8 = v7;
      id v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1)) {
        break;
      }
      OUTLINED_FUNCTION_9_33();
      v12(v10, v11);
      if (v3)
      {
        swift_bridgeObjectRelease();

        return (void *)swift_bridgeObjectRelease();
      }

      if (v15)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        OUTLINED_FUNCTION_13_14();
        if (v13) {
          OUTLINED_FUNCTION_21_15();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      ++v6;
      if (v9 == v5) {
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_17:
    OUTLINED_FUNCTION_3_39();
  }
LABEL_18:
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  char v11;
  uint64_t v13;

  if (a3 >> 62) {
    goto LABEL_17;
  }
  uint64_t v5 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    id v6 = 4;
    while (1)
    {
      if ((a3 & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      uint64_t v7 = v6 - 3;
      if (__OFADD__(v6 - 4, 1)) {
        break;
      }
      OUTLINED_FUNCTION_9_33();
      v10(v8, v9);
      if (v3)
      {
        swift_bridgeObjectRelease();
        swift_release();
        return (void *)swift_bridgeObjectRelease();
      }
      swift_release();
      if (v13)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        OUTLINED_FUNCTION_13_14();
        if (v11) {
          OUTLINED_FUNCTION_21_15();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      ++v6;
      if (v7 == v5) {
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_17:
    OUTLINED_FUNCTION_3_39();
  }
LABEL_18:
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void *specialized Sequence.compactMap<A>(_:)(void (*a1)(uint64_t *), uint64_t a2, unint64_t a3)
{
  id v30 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneRRTarget?);
  uint64_t v6 = OUTLINED_FUNCTION_11_0(v5);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for PhoneRRTarget(0);
  OUTLINED_FUNCTION_1();
  uint64_t v26 = v9;
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_5_8();
  uint64_t v28 = v11;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_10_14();
  uint64_t v25 = v13;
  if (a3 >> 62) {
    goto LABEL_20;
  }
  uint64_t v14 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  for (; v14; uint64_t v14 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v27 = a3 & 0xC000000000000001;
    uint64_t v15 = _swiftEmptyArrayStorage;
    uint64_t v16 = 4;
    unint64_t v24 = a3;
    while (1)
    {
      if (v27)
      {
        uint64_t v17 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v17 = *(void *)(a3 + 8 * v16);
        swift_retain();
      }
      uint64_t v18 = v16 - 3;
      if (__OFADD__(v16 - 4, 1)) {
        break;
      }
      uint64_t v31 = v17;
      v30(&v31);
      if (v3)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        return v15;
      }
      swift_release();
      if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v29) == 1)
      {
        outlined destroy of SpeakableString?((uint64_t)v8, &demangling cache variable for type metadata for PhoneRRTarget?);
      }
      else
      {
        uint64_t v19 = v25;
        outlined init with take of PhoneRRTarget((uint64_t)v8, v25);
        outlined init with take of PhoneRRTarget(v19, v28);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v15 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, (uint64_t)v15);
        }
        unint64_t v21 = v15[2];
        unint64_t v20 = v15[3];
        if (v21 >= v20 >> 1) {
          uint64_t v15 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1, (uint64_t)v15);
        }
        v15[2] = v21 + 1;
        outlined init with take of PhoneRRTarget(v28, (uint64_t)v15+ ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))+ *(void *)(v26 + 72) * v21);
        a3 = v24;
      }
      ++v16;
      if (v18 == v14)
      {
        swift_bridgeObjectRelease();
        return v15;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (**v17)(uint64_t, char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, char *, uint64_t);
  char *v21;
  void *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  void (*v34)(uint64_t *);
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;

  uint64_t v34 = (void (*)(uint64_t *))a1;
  id v35 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRResult?);
  uint64_t v6 = OUTLINED_FUNCTION_11_0(v5);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for RRResult();
  OUTLINED_FUNCTION_1();
  id v30 = v10;
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_5_8();
  uint64_t v33 = v12;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_10_14();
  uint64_t v29 = v14;
  if (a3 >> 62) {
    goto LABEL_20;
  }
  uint64_t v15 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  for (; v15; uint64_t v15 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v31 = v30 + 32;
    char v32 = a3 & 0xC000000000000001;
    char v36 = v9;
    uint64_t v37 = _swiftEmptyArrayStorage;
    uint64_t v16 = 4;
    uint64_t v28 = a3;
    uint64_t v17 = (void (**)(uint64_t, char *, uint64_t))(v30 + 32);
    while (1)
    {
      if (v32)
      {
        uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v9 = *(void *)(a3 + 8 * v16);
        swift_retain();
      }
      uint64_t v18 = v16 - 3;
      if (__OFADD__(v16 - 4, 1)) {
        break;
      }
      uint64_t v38 = v9;
      v34(&v38);
      if (v3)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return (void *)swift_release();
      }
      swift_release();
      uint64_t v19 = v36;
      if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v36) == 1)
      {
        outlined destroy of SpeakableString?((uint64_t)v8, &demangling cache variable for type metadata for RRResult?);
      }
      else
      {
        unint64_t v20 = *v17;
        unint64_t v21 = v29;
        (*v17)((uint64_t)v29, v8, v19);
        v20((uint64_t)v33, v21, v19);
        uint64_t v22 = v37;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v22 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, (uint64_t)v22);
        }
        unint64_t v24 = v22[2];
        uint64_t v23 = v22[3];
        uint64_t v37 = v22;
        if (v24 >= v23 >> 1) {
          uint64_t v37 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1, (uint64_t)v37);
        }
        uint64_t v25 = v36;
        uint64_t v26 = v37;
        v37[2] = v24 + 1;
        v20((uint64_t)v26+ ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))+ *(void *)(v30 + 72) * v24, v33, v25);
        a3 = v28;
      }
      ++v16;
      if (v18 == v15)
      {
        swift_bridgeObjectRelease();
        return v37;
      }
    }
    __break(1u);
LABEL_20:
    OUTLINED_FUNCTION_3_39();
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t ContactsSlotTemplating.init(deviceState:startCallCats:locale:appInfoBuilder:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, long long *a5@<X4>, void *a6@<X8>)
{
  outlined init with take of AppSelectionSignalComponent(a1, (uint64_t)a6);
  a6[5] = a2;
  a6[6] = a3;
  a6[7] = a4;

  return outlined init with take of AppSelectionSignalComponent(a5, (uint64_t)(a6 + 8));
}

void ContactsSlotTemplating.makeParameterPromptDialog(app:parameterName:intent:_:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = OUTLINED_FUNCTION_11_0(v8);
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_46_0();
  uint64_t v12 = v10 - v11;
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v53 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v53 - v17;
  uint64_t v19 = *(void *)(v3 + 16);
  uint64_t v20 = *(void *)(v3 + 32);
  static ContactsSlotTemplating.isMissingMeCardCase(intent:)();
  if ((v21 & 1) == 0)
  {
    char v32 = *(void **)(v1 + 40);
    uint64_t v33 = type metadata accessor for SpeakableString();
    OUTLINED_FUNCTION_14_16(v12, v34, v35, v33);
    BOOL v36 = (*(uint64_t (**)(uint64_t))(*(void *)(v20 + 16) + 8))(v19) == 2;
    (*(void (**)(uint64_t, BOOL, void, void, void, void, uint64_t, uint64_t))(class metadata base offset for StartCallCATs
                                                                                              + *v32
                                                                                              + 1312))(v12, v36, 0, 0, 0, 0, v7, v5);
    uint64_t v18 = (char *)v12;
    goto LABEL_23;
  }
  uint64_t v53 = v7;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Logger.siriPhone);
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  BOOL v25 = os_log_type_enabled(v23, v24);
  uint64_t v54 = v5;
  if (v25)
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl(&dword_0, v23, v24, "User requested a handle label with inferred isMe=true, but no MeCard person exists. Provide specific prompt dialog for this case StartCall#PromptForContactsKnownLabel.", v26, 2u);
    swift_slowDealloc();
  }

  OUTLINED_FUNCTION_23_11();
  unint64_t v28 = v27();
  unint64_t v29 = v28;
  if (!v28) {
    goto LABEL_18;
  }
  if (v28 >> 62)
  {
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_9;
    }
LABEL_14:
    uint64_t v31 = 0;
    goto LABEL_15;
  }
  if (!*(void *)((char *)&dword_10 + (v28 & 0xFFFFFFFFFFFFFF8))) {
    goto LABEL_14;
  }
LABEL_9:
  OUTLINED_FUNCTION_19_16();
  if ((v29 & 0xC000000000000001) != 0) {
    id v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v30 = *(id *)(v29 + 32);
  }
  uint64_t v31 = v30;
LABEL_15:
  swift_bridgeObjectRelease();
  unint64_t v29 = (unint64_t)[v31 personHandle];

  if (!v29 || (id v37 = [(id)v29 label]) == 0)
  {
LABEL_18:
    uint64_t v40 = type metadata accessor for SpeakableString();
    OUTLINED_FUNCTION_14_16((uint64_t)v18, v41, v42, v40);
    goto LABEL_19;
  }
  uint64_t v38 = v37;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_11_2();
  uint64_t v39 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_29_8(v39);
  swift_bridgeObjectRelease();
LABEL_19:
  type metadata accessor for DialogPersonHandle();
  id v43 = (id *)(id)v29;
  uint64_t v44 = DialogPersonHandle.__allocating_init(handle:)();
  type metadata accessor for DialogPersonHandle.Builder();
  swift_allocObject();
  DialogPersonHandle.Builder.init()();
  if (v44)
  {
    swift_retain();
    DialogPersonHandle.label.getter();
    swift_release();
  }
  else
  {
    uint64_t v45 = type metadata accessor for SpeakableString();
    OUTLINED_FUNCTION_14_16((uint64_t)v16, v46, v47, v45);
  }
  dispatch thunk of DialogPersonHandle.Builder.withLabel(_:)();
  swift_release();
  outlined destroy of SpeakableString?((uint64_t)v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v48 = @"PhoneNumber";
  id v49 = @"PhoneNumber";
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  OUTLINED_FUNCTION_11_2();
  uint64_t v50 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v12, 0, 1, v50);
  dispatch thunk of DialogPersonHandle.Builder.withType(_:)();
  swift_release();
  outlined destroy of SpeakableString?(v12, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v51 = dispatch thunk of DialogPersonHandle.Builder.build()();
  swift_release();
  uint64_t v52 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(class metadata base offset for StartCallCATs
                                                                 + **(void **)(v1 + 40)
                                                                 + 1344);
  swift_retain();
  v52(v18, v51, v53, v54);

  swift_release();
  swift_release_n();
LABEL_23:
  outlined destroy of SpeakableString?((uint64_t)v18, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_26_1();
}

void ContactsSlotTemplating.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:inferenceSource:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v70 = v22;
  uint64_t v71 = v23;
  char v65 = v24;
  uint64_t v26 = v25;
  type metadata accessor for Locale();
  OUTLINED_FUNCTION_1();
  uint64_t v69 = v27;
  __chkstk_darwin(v28);
  OUTLINED_FUNCTION_3_1();
  uint64_t v64 = v29;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v31 = OUTLINED_FUNCTION_11_0(v30);
  __chkstk_darwin(v31);
  OUTLINED_FUNCTION_46_0();
  uint64_t v34 = v32 - v33;
  __chkstk_darwin(v35);
  OUTLINED_FUNCTION_10_14();
  uint64_t v37 = v36;
  unint64_t v68 = (unint64_t)[v26 confirmationReason];
  id v38 = [v26 itemToConfirm];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for INPerson();
  if (swift_dynamicCast())
  {
    uint64_t v39 = v74;
    uint64_t v40 = *(void *)(a21 + 32);
    uint64_t v41 = *(void *)(a21 + 16);
    uint64_t v42 = (*(uint64_t (**)(uint64_t, void))(*(void *)(v40 + 8) + 8))(v41, *(void *)(v40 + 8));
    goto LABEL_13;
  }
  uint64_t v40 = *(void *)(a21 + 32);
  uint64_t v43 = *(void *)(v40 + 8);
  uint64_t v44 = *(uint64_t (**)(void))(v43 + 8);
  uint64_t v41 = *(void *)(a21 + 16);
  OUTLINED_FUNCTION_23_11();
  uint64_t v45 = v44();
  if (v45)
  {
    uint64_t v46 = v45;
    OUTLINED_FUNCTION_24_16();
    if (v48)
    {
      if (_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_6;
      }
    }
    else if (*(void *)(v47 + 16))
    {
LABEL_6:
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v46 & 0xC000000000000001) == 0, v46);
      if ((v46 & 0xC000000000000001) != 0) {
        id v49 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v49 = *(id *)(v46 + 32);
      }
      uint64_t v39 = v49;
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v39 = 0;
LABEL_12:
  uint64_t v42 = ((uint64_t (*)(uint64_t, uint64_t))v44)(v41, v43);
LABEL_13:
  if (!v42) {
    goto LABEL_22;
  }
  uint64_t v50 = v42;
  OUTLINED_FUNCTION_24_16();
  if (!v52)
  {
    if (*(void *)(v51 + 16)) {
      goto LABEL_16;
    }
LABEL_21:
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_21;
  }
LABEL_16:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v50 & 0xC000000000000001) == 0, v50);
  if ((v50 & 0xC000000000000001) != 0) {
    id v53 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v53 = *(id *)(v50 + 32);
  }
  uint64_t v54 = v53;
  swift_bridgeObjectRelease();
  id v55 = [v54 personHandle];

  if (v55)
  {
    unsigned int v63 = [v55 isSuggested];

    goto LABEL_23;
  }
LABEL_22:
  unsigned int v63 = 0;
LABEL_23:
  uint64_t v56 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v37, 1, 1, v56);
  if ((v65 & 1) == 0)
  {
    SpeakableString.init(print:speak:)();
    outlined destroy of SpeakableString?(v37, &demangling cache variable for type metadata for SpeakableString?);
    __swift_storeEnumTagSinglePayload(v34, 0, 1, v56);
    outlined init with take of SpeakableString?(v34, v37);
  }
  BOOL v67 = *(void **)(v21 + 40);
  uint64_t v66 = (*(uint64_t (**)(uint64_t))(*(void *)(v40 + 16) + 8))(v41);
  type metadata accessor for PhonePerson(0);
  static Device.current.getter();
  __swift_project_boxed_opaque_existential_1(v72, v73);
  dispatch thunk of DeviceState.siriLocale.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
  uint64_t v62 = static PhonePerson.make(phonePerson:options:locale:)(v39, 0, v64);
  int v57 = v39;
  uint64_t v58 = *(void (**)(uint64_t))(v69 + 8);
  uint64_t v59 = OUTLINED_FUNCTION_25_11();
  v58(v59);
  static Device.current.getter();
  __swift_project_boxed_opaque_existential_1(v72, v73);
  dispatch thunk of DeviceState.siriLocale.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
  uint64_t v60 = static PhonePerson.make(phonePerson:options:locale:)(v57, 0, v64);
  uint64_t v61 = OUTLINED_FUNCTION_25_11();
  v58(v61);
  (*(void (**)(BOOL, uint64_t, uint64_t, BOOL, void, uint64_t, uint64_t, uint64_t))(class metadata base offset for StartCallCATs
                                                                                          + *v67
                                                                                          + 64))(v66 == 2, v62, v60, (v68 & 0xFFFFFFFFFFFFFFFELL) == 2, v63, v37, v70, v71);
  swift_release();
  swift_release();

  outlined destroy of SpeakableString?(v37, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_26_1();
}

void ContactsSlotTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  OUTLINED_FUNCTION_24_0();
  v165 = v22;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v163 = v27;
  uint64_t v164 = a21;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v29 = OUTLINED_FUNCTION_11_0(v28);
  __chkstk_darwin(v29);
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_20_15(v30);
  uint64_t v156 = type metadata accessor for InteractionType();
  OUTLINED_FUNCTION_1();
  uint64_t v155 = v31;
  __chkstk_darwin(v32);
  OUTLINED_FUNCTION_5_8();
  uint64_t v154 = v33;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v34);
  OUTLINED_FUNCTION_10_14();
  OUTLINED_FUNCTION_20_15(v35);
  uint64_t v150 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_1();
  uint64_t v149 = v36;
  __chkstk_darwin(v37);
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_20_15(v38);
  uint64_t v166 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_1();
  uint64_t v162 = v39;
  __chkstk_darwin(v40);
  OUTLINED_FUNCTION_5_8();
  uint64_t v159 = v41;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v42);
  uint64_t v44 = (char *)&v148 - v43;
  uint64_t v151 = *(void *)(a22 + 32);
  uint64_t v158 = a22;
  uint64_t v45 = *(void *)(a22 + 16);
  uint64_t ContactRelatedOr = v24;
  uint64_t v160 = v45;
  OUTLINED_FUNCTION_23_11();
  unint64_t v47 = v46();
  id v48 = [v26 disambiguationItems];
  uint64_t v49 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v50 = *(void *)(v49 + 16);
  swift_bridgeObjectRelease();
  uint64_t v51 = &selRef_alternatives;
  if (v50) {
    uint64_t v51 = &selRef_disambiguationItems;
  }
  id v52 = [v26 *v51];
  id v53 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v54 = specialized _arrayConditionalCast<A, B>(_:)((uint64_t)v53);
  id v55 = _swiftEmptyArrayStorage;
  if (v54) {
    uint64_t v56 = v54;
  }
  else {
    uint64_t v56 = _swiftEmptyArrayStorage;
  }
  unint64_t v167 = (unint64_t)v56;
  int v57 = (char **)(v47 >> 62);
  if (v47)
  {
    if (v57)
    {
      swift_bridgeObjectRetain();
      if (_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v58 = *(void *)((char *)&dword_10 + (v47 & 0xFFFFFFFFFFFFFF8));
      swift_bridgeObjectRetain();
      if (v58)
      {
LABEL_9:
        OUTLINED_FUNCTION_8_38();
        if ((v47 & 0xC000000000000001) != 0) {
          goto LABEL_79;
        }
        id v59 = *(id *)(v47 + 32);
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  uint64_t v63 = 0;
  while (1)
  {
    BOOL v64 = App.isFirstParty()();
    uint64_t v157 = v53[2];
    swift_bridgeObjectRelease();
    unint64_t v65 = v167;
    unint64_t v66 = v167 >> 62;
    if ((specialized Sequence.contains(where:)(v167, (char *)&dword_0 + 2) & 1) == 0
      || (specialized Sequence.contains(where:)(v65, (char *)&dword_0 + 1) & 1) == 0)
    {
      break;
    }
    swift_bridgeObjectRelease();
    if (v66)
    {
      unint64_t v47 = v167;
      swift_bridgeObjectRetain();
      uint64_t v67 = _CocoaArrayWrapper.endIndex.getter();
      if (!v67)
      {
LABEL_85:
        swift_bridgeObjectRelease_n();
        if (one-time initialization token for siriPhone != -1) {
          swift_once();
        }
        uint64_t v124 = v150;
        uint64_t v125 = __swift_project_value_buffer(v150, (uint64_t)static Logger.siriPhone);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v149 + 16))(v148, v125, v124);
        v126 = Logger.logObject.getter();
        os_log_type_t v127 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v126, v127))
        {
          v128 = (uint8_t *)swift_slowAlloc();
          uint64_t v44 = (char *)swift_slowAlloc();
          v169[0] = (uint64_t)v44;
          *(_DWORD *)v128 = 136315138;
          unint64_t v47 = (unint64_t)(v128 + 12);
          id v55 = v128 + 4;
          uint64_t v168 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000005ALL, 0x8000000000493810, v169);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_0, v126, v127, "%s", v128, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }

        id v53 = (void *)0x8000000000493810;
        static SiriKitLifecycle._logCrashToEventBus(_:)();
        LODWORD(v147) = 0;
        uint64_t v146 = 26;
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        goto LABEL_90;
      }
    }
    else
    {
      unint64_t v47 = v167;
      uint64_t v67 = *(void *)((char *)&dword_10 + (v167 & 0xFFFFFFFFFFFFFF8));
      swift_bridgeObjectRetain();
      if (!v67) {
        goto LABEL_85;
      }
    }
    id v55 = (void *)(v47 & 0xC000000000000001);
    uint64_t v68 = 4;
    int v57 = &selRef_setBundleId_;
    while (1)
    {
      uint64_t v69 = v55 ? (void *)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v47 + 8 * v68);
      id v53 = v69;
      uint64_t v70 = v68 - 3;
      if (__OFADD__(v68 - 4, 1)) {
        break;
      }
      id v71 = [v69 personHandle];
      if (v71)
      {
        Swift::Int v72 = v71;
        uint64_t v73 = (char *)[v71 emergencyType];

        BOOL v74 = v73 == (unsigned char *)&dword_0 + 2;
        unint64_t v47 = v167;
        if (v74)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v94 = v165;
          char v95 = (void *)v165[5];
          type metadata accessor for SirikitDeviceState();
          outlined init with copy of SignalProviding((uint64_t)v94, (uint64_t)v169);
          uint64_t v96 = SirikitDeviceState.__allocating_init(from:)();
          type metadata accessor for PhonePerson(0);
          uint64_t v97 = v53;
          static Device.current.getter();
          __swift_project_boxed_opaque_existential_1(v169, v170);
          dispatch thunk of DeviceState.siriLocale.getter();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v169);
          uint64_t v98 = static PhonePerson.make(phonePerson:options:locale:)(v53, 0, (uint64_t)v44);

          OUTLINED_FUNCTION_11();
          v99();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(class metadata base offset for StartCallCATs
                                                                     + *v95
                                                                     + 288))(v96, v98, v163, v164);

          swift_release();
          goto LABEL_61;
        }
      }

      ++v68;
      if (v70 == v67) {
        goto LABEL_85;
      }
    }
    __break(1u);
LABEL_79:
    id v59 = (id)OUTLINED_FUNCTION_28_8();
LABEL_11:
    uint64_t v60 = v59;
    swift_bridgeObjectRelease();
    id v61 = [v60 siriMatches];

    if (v61)
    {
      type metadata accessor for INPerson();
      unint64_t v62 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (!(v62 >> 62))
      {
        uint64_t v63 = *(void *)((char *)&dword_10 + (v62 & 0xFFFFFFFFFFFFFF8));
        goto LABEL_14;
      }
LABEL_90:
      swift_bridgeObjectRetain();
      uint64_t v63 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease_n();
    }
    else
    {
LABEL_18:
      if (v57)
      {
        swift_bridgeObjectRetain();
        uint64_t v63 = _CocoaArrayWrapper.endIndex.getter();
LABEL_14:
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v63 = *(void *)((char *)&dword_10 + (v47 & 0xFFFFFFFFFFFFFF8));
      }
    }
  }
  LODWORD(v150) = v64;
  if ((specialized Sequence.allSatisfy(_:)(v167, (char *)&dword_0 + 1) & 1) == 0)
  {
    unint64_t v84 = swift_bridgeObjectRetain();
    char v85 = PhoneContactDisambiguationProperties.isHandleDisambiguation.getter(v84);
    swift_bridgeObjectRelease();
    if (v85) {
      goto LABEL_54;
    }
    if (!v66)
    {
      uint64_t v86 = *(void *)((char *)&dword_10 + (v167 & 0xFFFFFFFFFFFFFF8));
LABEL_50:
      if (v86 == 1)
      {
        unint64_t v87 = v167;
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v167 & 0xC000000000000001) == 0, v167);
        id v88 = (v87 & 0xC000000000000001) != 0
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
            : *(id *)(v87 + 32);
        uint64_t v89 = v88;
        BOOL v90 = INPerson.hasHandleLabel.getter();

        if (v90)
        {
LABEL_54:
          if (v47)
          {
            if (v57)
            {
              swift_bridgeObjectRetain();
              id v91 = (id)_CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (v91) {
                goto LABEL_57;
              }
            }
            else
            {
              id v91 = *(id *)((char *)&dword_10 + (v47 & 0xFFFFFFFFFFFFFF8));
              if (v91)
              {
LABEL_57:
                OUTLINED_FUNCTION_8_38();
                if ((v47 & 0xC000000000000001) != 0) {
                  id v92 = (id)OUTLINED_FUNCTION_28_8();
                }
                else {
                  id v92 = *(id *)(v47 + 32);
                }
                BOOL v93 = v92;
                swift_bridgeObjectRelease();
                id v91 = v93;
                LODWORD(v158) = INPerson.hasHandleLabel.getter();

                goto LABEL_95;
              }
            }
            swift_bridgeObjectRelease();
            LODWORD(v158) = 0;
          }
          else
          {
            LODWORD(v158) = 0;
            id v91 = 0;
          }
LABEL_95:
          uint64_t ContactRelatedOr = INPersonContainingIntent.isFirstContactRelatedOrMyself.getter();
          unint64_t v129 = v167;
          if (v66) {
            goto LABEL_111;
          }
          uint64_t v130 = *(void *)((char *)&dword_10 + (v167 & 0xFFFFFFFFFFFFFF8));
          swift_bridgeObjectRetain();
          for (; v130; uint64_t v130 = _CocoaArrayWrapper.endIndex.getter())
          {
            unint64_t v131 = v129 & 0xC000000000000001;
            uint64_t v132 = 4;
            while (1)
            {
              id v133 = v131
                   ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
                   : *(id *)(v129 + 8 * v132);
              char v134 = v133;
              unint64_t v129 = v132 - 3;
              if (__OFADD__(v132 - 4, 1)) {
                break;
              }
              id v135 = [v133 personHandle];
              if (!v135)
              {
                unint64_t v129 = v167;
                swift_bridgeObjectRelease();

LABEL_109:
                uint64_t v138 = 0;
                goto LABEL_114;
              }
              uint64_t v136 = v135;
              v137 = (char *)[v135 type];

              if (v137 != (unsigned char *)&dword_0 + 2)
              {
                unint64_t v129 = v167;
                swift_bridgeObjectRelease();
                goto LABEL_109;
              }
              ++v132;
              BOOL v74 = v129 == v130;
              unint64_t v129 = v167;
              if (v74)
              {
                swift_bridgeObjectRelease();
                goto LABEL_113;
              }
            }
            __break(1u);
LABEL_111:
            swift_bridgeObjectRetain();
          }
          swift_bridgeObjectRelease();
          unint64_t v131 = v129 & 0xC000000000000001;
LABEL_113:
          uint64_t v138 = 1;
LABEL_114:
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, v131 == 0, v129);
          if (v131) {
            id v139 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v139 = *(id *)(v129 + 32);
          }
          uint64_t v140 = v139;
          swift_bridgeObjectRelease();
          type metadata accessor for PhonePerson(0);
          uint64_t v141 = v165;
          __swift_project_boxed_opaque_existential_1(v165, v165[3]);
          uint64_t v142 = v159;
          dispatch thunk of DeviceState.siriLocale.getter();
          uint64_t v143 = static PhonePerson.make(phonePerson:options:locale:)(v140, ContactRelatedOr & 1, v142);

          OUTLINED_FUNCTION_11();
          v144();
          uint64_t v145 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(class metadata base offset for StartCallCATs
                                                                                    + *(void *)v141[5]
                                                                                    + 320);
          swift_retain();
          v145(v158 & 1, v138, v143, v163, v164);

          swift_release_n();
          goto LABEL_117;
        }
      }
      uint64_t v101 = v158;
      OUTLINED_FUNCTION_1();
      uint64_t v103 = v165;
      (*(void (**)(uint64_t *, void *, uint64_t))(v102 + 16))(v169, v165, v101);
      if (v86 < 6)
      {
        uint64_t v118 = OUTLINED_FUNCTION_16_25();
        v119(v118);
        unsigned __int8 v112 = v150;
      }
      else
      {
        __swift_project_boxed_opaque_existential_1(v169, v170);
        uint64_t v104 = v153;
        dispatch thunk of DeviceState.interactionType.getter();
        uint64_t v105 = v155;
        uint64_t v106 = v63;
        uint64_t v107 = v154;
        (*(void (**)(uint64_t, void, uint64_t))(v155 + 104))(v154, enum case for InteractionType.dialogDriven(_:), v156);
        LODWORD(v166) = specialized == infix<A>(_:_:)(v104, v107);
        uint64_t v108 = *(void (**)(void))(v105 + 8);
        uint64_t v63 = v106;
        OUTLINED_FUNCTION_26();
        v108();
        uint64_t v109 = v158;
        uint64_t v103 = v165;
        OUTLINED_FUNCTION_26();
        v108();
        uint64_t v110 = OUTLINED_FUNCTION_16_25();
        v111(v110);
        unsigned __int8 v112 = v150;
        if (v166)
        {
          swift_bridgeObjectRelease();
          v113 = (void *)v103[5];
          uint64_t v114 = type metadata accessor for PhonePersonList();
          __chkstk_darwin(v114);
          uint64_t v115 = *(void *)(v109 + 24);
          *(&v148 - 4) = v160;
          *(&v148 - 3) = v115;
          uint64_t v146 = v151;
          uint64_t v147 = ContactRelatedOr;
          uint64_t v116 = specialized Sequence.compactMap<A>(_:)((uint64_t)partial apply for closure #4 in ContactsSlotTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:_:), (uint64_t)(&v148 - 6), v167);
          swift_bridgeObjectRelease();
          uint64_t v117 = PhonePersonList.__allocating_init(list:)((uint64_t)v116);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(class metadata base offset for StartCallCATs + *v113 + 416))(v117, v163, v164);
LABEL_61:
          swift_release();
          goto LABEL_117;
        }
      }
      swift_bridgeObjectRelease();
      if ((v112 & (v157 < v63)) == 1)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(class metadata base offset for StartCallCATs
                                                 + *(void *)v103[5]
                                                 + 384))(v163, v164);
        goto LABEL_117;
      }
      if (!v47)
      {
        id v122 = 0;
        goto LABEL_77;
      }
      if (v57)
      {
        swift_bridgeObjectRetain();
        long long v120 = (void *)_CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v120) {
          goto LABEL_72;
        }
      }
      else
      {
        long long v120 = *(void **)((char *)&dword_10 + (v47 & 0xFFFFFFFFFFFFFF8));
        if (v120)
        {
LABEL_72:
          OUTLINED_FUNCTION_8_38();
          if ((v47 & 0xC000000000000001) != 0) {
            id v121 = (id)OUTLINED_FUNCTION_28_8();
          }
          else {
            id v121 = *(id *)(v47 + 32);
          }
          long long v120 = v121;
        }
      }
      swift_bridgeObjectRelease();
      id v122 = [v120 relationship];

LABEL_77:
      uint64_t v123 = v152;
      ContactsSlotTemplating.translateRelationship(relationship:)((uint64_t)v122, v152);

      (*(void (**)(uint64_t, uint64_t, uint64_t))(class metadata base offset for StartCallCATs
                                                        + *(void *)v103[5]
                                                        + 256))(v123, v163, v164);
      outlined destroy of SpeakableString?(v123, &demangling cache variable for type metadata for SpeakableString?);
      goto LABEL_117;
    }
LABEL_92:
    swift_bridgeObjectRetain();
    uint64_t v86 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_50;
  }
  swift_bridgeObjectRelease();
  uint64_t v75 = (void *)v165[5];
  uint64_t v168 = (uint64_t)v55;
  if (v66)
  {
    swift_bridgeObjectRetain();
    uint64_t v76 = _CocoaArrayWrapper.endIndex.getter();
    if (!v76) {
      goto LABEL_82;
    }
LABEL_36:
    v165 = v75;
    type metadata accessor for PhonePerson(0);
    if (v76 >= 1)
    {
      uint64_t v77 = 0;
      unint64_t v78 = v167 & 0xC000000000000001;
      uint64_t v79 = (void (**)(char *, uint64_t))(v162 + 8);
      do
      {
        if (v78) {
          id v80 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v80 = *(id *)(v167 + 8 * v77 + 32);
        }
        uint64_t v81 = v80;
        static Device.current.getter();
        __swift_project_boxed_opaque_existential_1(v169, v170);
        dispatch thunk of DeviceState.siriLocale.getter();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v169);
        uint64_t v82 = static PhonePerson.make(phonePerson:options:locale:)(v81, 0, (uint64_t)v44);
        (*v79)(v44, v166);

        if (v82)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          OUTLINED_FUNCTION_13_14();
          if (v83) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        ++v77;
      }
      while (v76 != v77);
      swift_bridgeObjectRelease();
      BOOL v100 = (void *)v168;
      uint64_t v75 = v165;
      goto LABEL_83;
    }
    __break(1u);
    goto LABEL_92;
  }
  uint64_t v76 = *(void *)((char *)&dword_10 + (v167 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  if (v76) {
    goto LABEL_36;
  }
LABEL_82:
  swift_bridgeObjectRelease();
  BOOL v100 = _swiftEmptyArrayStorage;
LABEL_83:
  swift_bridgeObjectRelease();
  (*(void (**)(void *, uint64_t, uint64_t))(class metadata base offset for StartCallCATs + *v75 + 352))(v100, v163, v164);
  swift_bridgeObjectRelease();
LABEL_117:
  OUTLINED_FUNCTION_26_1();
}

uint64_t closure #4 in ContactsSlotTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:_:)@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v11 = a2;
  uint64_t v3 = type metadata accessor for Locale();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v12[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *a1;
  type metadata accessor for PhonePerson(0);
  char ContactRelatedOr = INPersonContainingIntent.isFirstContactRelatedOrMyself.getter();
  static Device.current.getter();
  __swift_project_boxed_opaque_existential_1(v12, v12[3]);
  dispatch thunk of DeviceState.siriLocale.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  uint64_t v9 = static PhonePerson.make(phonePerson:options:locale:)(v7, ContactRelatedOr & 1, (uint64_t)v6);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  *uint64_t v11 = v9;
  return result;
}

void ContactsSlotTemplating.translateRelationship(relationship:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (a1)
  {
    INPersonRelationship.toSpeakableString(startCallCats:)();
  }
  else
  {
    uint64_t v3 = type metadata accessor for SpeakableString();
    __swift_storeEnumTagSinglePayload(a2, 1, 1, v3);
  }
}

void ContactsSlotTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v145 = v22;
  char v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v136 = v31;
  uint64_t v143 = v32;
  uint64_t v144 = a21;
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v34 = OUTLINED_FUNCTION_11_0(v33);
  __chkstk_darwin(v34);
  OUTLINED_FUNCTION_46_0();
  uint64_t v37 = v35 - v36;
  __chkstk_darwin(v38);
  v137 = (char *)&v136 - v39;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v40);
  OUTLINED_FUNCTION_10_14();
  uint64_t v140 = v41;
  uint64_t v142 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_1();
  uint64_t v139 = v42;
  __chkstk_darwin(v43);
  OUTLINED_FUNCTION_5_8();
  uint64_t v138 = v44;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v45);
  unint64_t v47 = (char *)&v136 - v46;
  uint64_t v141 = *(void *)(a22 + 32);
  uint64_t v48 = *(void *)(v141 + 8);
  uint64_t v51 = *(uint64_t (**)(uint64_t))(v48 + 8);
  uint64_t v50 = v48 + 8;
  uint64_t v49 = v51;
  uint64_t v52 = *(void *)(a22 + 16);
  uint64_t v146 = v28;
  uint64_t v53 = OUTLINED_FUNCTION_6_27();
  uint64_t v54 = v51(v53);
  if (v54)
  {
    uint64_t v55 = v54;
    if ((v24 & 1) == 0)
    {
      unint64_t v56 = v54 & 0xC000000000000001;
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v26, (v54 & 0xC000000000000001) == 0, v54);
      if (!v56)
      {
        int v57 = *(void **)(v55 + 8 * v26 + 32);
LABEL_11:
        id v63 = v57;
LABEL_12:
        id v147 = v63;
        swift_bridgeObjectRelease();
        goto LABEL_16;
      }
      goto LABEL_56;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v58 = OUTLINED_FUNCTION_6_27();
  uint64_t v59 = v49(v58);
  if (v59)
  {
    uint64_t v60 = v59;
    OUTLINED_FUNCTION_24_16();
    if (v62)
    {
      if (_CocoaArrayWrapper.endIndex.getter())
      {
LABEL_9:
        OUTLINED_FUNCTION_19_16();
        if ((v60 & 0xC000000000000001) == 0)
        {
          int v57 = *(void **)(v60 + 32);
          goto LABEL_11;
        }
LABEL_56:
        id v63 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        goto LABEL_12;
      }
    }
    else if (*(void *)(v61 + 16))
    {
      goto LABEL_9;
    }
    swift_bridgeObjectRelease();
  }
  id v147 = 0;
LABEL_16:
  id v64 = objc_msgSend(v30, "unsupportedReason", v136);
  if ((id)_INStartCallContactUnsupportedReasonForeignEmergencyDisambiguation == v64)
  {
LABEL_17:
    OUTLINED_FUNCTION_2_40();
    uint64_t v65 = OUTLINED_FUNCTION_10_22();
    v66(v65);
    OUTLINED_FUNCTION_26_1();

    return;
  }
  switch((unint64_t)v64)
  {
    case 2uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
      goto LABEL_17;
    case 3uLL:
      type metadata accessor for PhoneStartCallIntent(0);
      uint64_t v50 = specialized static PhoneStartCallIntent.makeForSlotTemplating(intent:isRelationshipRequest:)(v146, 0);
      if (v147
        && (id v70 = [v147 personHandle]) != 0
        && (id v71 = v70, v72 = [v70 label], v71, v72)
        && (static String._unconditionallyBridgeFromObjectiveC(_:)(), uint64_t v74 = v73, v72, v74))
      {
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_11_2();
        uint64_t v75 = type metadata accessor for SpeakableString();
        OUTLINED_FUNCTION_29_8(v75);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v89 = type metadata accessor for SpeakableString();
        OUTLINED_FUNCTION_14_16(v140, v90, v91, v89);
      }
      uint64_t v92 = *(void *)(v50 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_contacts);
      if (!v92) {
        goto LABEL_63;
      }
      unint64_t v93 = *(void *)(v92 + 24);
      if (v93 >> 62)
      {
        OUTLINED_FUNCTION_30_9();
        if (_CocoaArrayWrapper.endIndex.getter()) {
          goto LABEL_46;
        }
LABEL_62:
        swift_bridgeObjectRelease();
LABEL_63:
        uint64_t v95 = 0;
        goto LABEL_64;
      }
      uint64_t v94 = *(void *)((char *)&dword_10 + (v93 & 0xFFFFFFFFFFFFFF8));
      swift_bridgeObjectRetain();
      if (!v94) {
        goto LABEL_62;
      }
LABEL_46:
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v93 & 0xC000000000000001) == 0, v93);
      if ((v93 & 0xC000000000000001) != 0) {
        goto LABEL_74;
      }
      swift_retain();
LABEL_48:
      swift_bridgeObjectRelease();
      uint64_t v95 = DialogPerson.personHandle.getter();
      swift_release();
LABEL_64:
      char v114 = INPersonContainingIntent.hasSiriMatches.getter();
      uint64_t v136 = v95;
      if ((v114 & 1) == 0)
      {
        id v120 = v147;
        id v119 = v147;
        goto LABEL_78;
      }
      if (!v147) {
        goto LABEL_77;
      }
      id v115 = [v147 siriMatches];
      if (!v115) {
        goto LABEL_77;
      }
      uint64_t v116 = v115;
      type metadata accessor for INPerson();
      unint64_t v117 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v117 >> 62)
      {
        OUTLINED_FUNCTION_30_9();
        uint64_t v121 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v121) {
          goto LABEL_69;
        }
        goto LABEL_76;
      }
      if (!*(void *)((char *)&dword_10 + (v117 & 0xFFFFFFFFFFFFFF8)))
      {
LABEL_76:
        swift_bridgeObjectRelease();
LABEL_77:
        id v119 = 0;
        goto LABEL_78;
      }
LABEL_69:
      OUTLINED_FUNCTION_19_16();
      if ((v117 & 0xC000000000000001) != 0) {
        id v118 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v118 = *(id *)(v117 + 32);
      }
      id v119 = v118;
      swift_bridgeObjectRelease();
LABEL_78:
      id v122 = (void *)v145[5];
      uint64_t v123 = *(void *)(v141 + 16);
      uint64_t v124 = *(uint64_t (**)(uint64_t, uint64_t))(v123 + 8);
      swift_retain();
      if (v124(v52, v123))
      {
        uint64_t v125 = INPreferredCallProviderGetBackingType();
        uint64_t v126 = (uint64_t)v137;
        switch(v125)
        {
          case 4:
            os_log_type_t v127 = @"THIRD_PARTY_PROVIDER";
            break;
          case 3:
            os_log_type_t v127 = @"FACETIME_PROVIDER";
            break;
          case 2:
            os_log_type_t v127 = @"TELEPHONY_PROVIDER";
            break;
          default:
            os_log_type_t v127 = +[NSString stringWithFormat:@"(unknown: %i)", v125];
            goto LABEL_88;
        }
        v128 = v127;
LABEL_88:
        unint64_t v129 = v127;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        goto LABEL_89;
      }
      uint64_t v126 = (uint64_t)v137;
LABEL_89:
      OUTLINED_FUNCTION_11_2();
      uint64_t v130 = type metadata accessor for SpeakableString();
      __swift_storeEnumTagSinglePayload(v126, 0, 1, v130);
      type metadata accessor for PhonePerson(0);
      char ContactRelatedOr = INPersonContainingIntent.isFirstContactRelatedOrMyself.getter();
      static Device.current.getter();
      __swift_project_boxed_opaque_existential_1(v149, v150);
      uint64_t v132 = v138;
      dispatch thunk of DeviceState.siriLocale.getter();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v149);
      uint64_t v133 = static PhonePerson.make(phonePerson:options:locale:)(v119, ContactRelatedOr & 1, v132);
      OUTLINED_FUNCTION_11();
      v134();
      uint64_t v135 = v140;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(class metadata base offset for StartCallCATs
                                                                                            + *v122
                                                                                            + 1792))(v50, v126, v133, v140, v136, v143, v144);
      swift_release_n();
      swift_release();

      swift_release();
      outlined destroy of SpeakableString?(v126, &demangling cache variable for type metadata for SpeakableString?);
      uint64_t v112 = v135;
LABEL_90:
      outlined destroy of SpeakableString?(v112, &demangling cache variable for type metadata for SpeakableString?);
LABEL_91:

      OUTLINED_FUNCTION_26_1();
      return;
    case 4uLL:
      uint64_t v76 = OUTLINED_FUNCTION_6_27();
      uint64_t v77 = v49(v76);
      unint64_t v78 = _swiftEmptyArrayStorage;
      if (!v77) {
        goto LABEL_60;
      }
      uint64_t v79 = v77;
      unint64_t v148 = (unint64_t)_swiftEmptyArrayStorage;
      OUTLINED_FUNCTION_24_16();
      if (v81)
      {
        swift_bridgeObjectRetain();
        uint64_t v52 = _CocoaArrayWrapper.endIndex.getter();
        if (v52) {
          goto LABEL_31;
        }
      }
      else
      {
        uint64_t v52 = *(void *)(v80 + 16);
        swift_bridgeObjectRetain();
        if (v52)
        {
LABEL_31:
          uint64_t v146 = type metadata accessor for PhonePerson(0);
          if (v52 < 1)
          {
            __break(1u);
LABEL_74:
            specialized _ArrayBuffer._getElementSlowPath(_:)();
            goto LABEL_48;
          }
          uint64_t v82 = 0;
          unint64_t v83 = v79 & 0xC000000000000001;
          unint64_t v84 = (void (**)(char *, uint64_t))(v139 + 8);
          uint64_t v85 = v79;
          do
          {
            if (v83) {
              id v86 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v86 = *(id *)(v79 + 8 * v82 + 32);
            }
            unint64_t v87 = v86;
            static Device.current.getter();
            OUTLINED_FUNCTION_22_12(v149);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v149);
            uint64_t v88 = static PhonePerson.make(phonePerson:options:locale:)(v87, 0, (uint64_t)v47);
            (*v84)(v47, v142);

            if (v88)
            {
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              if (*(void *)((char *)&dword_10 + (v148 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                              + (v148 & 0xFFFFFFFFFFFFFF8)) >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
            }
            ++v82;
            uint64_t v79 = v85;
          }
          while (v52 != v82);
          swift_bridgeObjectRelease();
          unint64_t v78 = (void *)v148;
LABEL_59:
          swift_bridgeObjectRelease();
LABEL_60:
          type metadata accessor for PhonePersonList();
          uint64_t v113 = PhonePersonList.__allocating_init(list:)((uint64_t)v78);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(class metadata base offset for StartCallCATs
                                                            + *(void *)v145[5]
                                                            + 1632))(v113, v143, v144);
          swift_release();
          goto LABEL_91;
        }
      }
      swift_bridgeObjectRelease();
      unint64_t v78 = _swiftEmptyArrayStorage;
      goto LABEL_59;
    default:
      static ContactsSlotTemplating.isMissingMeCardCase(intent:)();
      if (v69) {
        goto LABEL_17;
      }
      if (v147)
      {
        id v96 = v147;
        id v97 = INPerson.nameLowercasedWithFirstUppercased.getter();
      }
      else
      {
        id v97 = 0;
      }
      type metadata accessor for PhonePerson(0);
      static Device.current.getter();
      __swift_project_boxed_opaque_existential_1(v149, v150);
      dispatch thunk of DeviceState.siriLocale.getter();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v149);
      uint64_t v146 = static PhonePerson.make(phonePerson:options:locale:)(v97, 0, (uint64_t)v47);

      uint64_t v141 = *(void *)(v139 + 8);
      OUTLINED_FUNCTION_26();
      v98();
      uint64_t v99 = v145;
      uint64_t v100 = v145[11];
      uint64_t v101 = v145[12];
      __swift_project_boxed_opaque_existential_1(v145 + 8, v100);
      OUTLINED_FUNCTION_22_12(v99);
      (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v101 + 16))(v136, v47, v100, v101);
      uint64_t v103 = v102;
      OUTLINED_FUNCTION_26();
      v104();
      if (v103)
      {
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_11_2();
        uint64_t v105 = type metadata accessor for SpeakableString();
        __swift_storeEnumTagSinglePayload(v37, 0, 1, v105);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v106 = type metadata accessor for SpeakableString();
        OUTLINED_FUNCTION_14_16(v37, v107, v108, v106);
      }
      uint64_t v109 = v146;
      uint64_t v110 = (void *)v145[5];
      swift_retain();
      Swift::Bool v111 = App.isFirstParty()();
      (*(void (**)(uint64_t, uint64_t, Swift::Bool, uint64_t, uint64_t))(class metadata base offset for StartCallCATs
                                                                              + *v110
                                                                              + 1728))(v109, v37, v111, v143, v144);
      swift_release_n();
      uint64_t v112 = v37;
      goto LABEL_90;
  }
}

void protocol witness for SlotTemplating.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:inferenceSource:_:) in conformance ContactsSlotTemplating<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  ContactsSlotTemplating.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:inferenceSource:_:)(a1, a2, a3, a4, a5, a6 & 1, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21);
}

void protocol witness for SlotTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:_:) in conformance ContactsSlotTemplating<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  ContactsSlotTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:_:)(a1, a2, a3, a4, a5, 0, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22);
}

void protocol witness for SlotTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:) in conformance ContactsSlotTemplating<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  ContactsSlotTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:)(a1, a2, a3, a4, a5, a6, a7 & 1, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22);
}

uint64_t partial apply for closure #4 in ContactsSlotTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:_:)@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #4 in ContactsSlotTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:_:)(a1, a2);
}

uint64_t type metadata instantiation function for ContactsSlotTemplating(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

uint64_t destroy for ContactsSlotTemplating(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_release();
  swift_bridgeObjectRelease();

  return __swift_destroy_boxed_opaque_existential_1(a1 + 64);
}

uint64_t initializeWithCopy for ContactsSlotTemplating(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v6 = a2 + 64;
  long long v7 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 88) = v7;
  uint64_t v8 = v7;
  uint64_t v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_retain();
  swift_bridgeObjectRetain();
  v9(a1 + 64, v6, v8);
  return a1;
}

uint64_t *assignWithCopy for ContactsSlotTemplating(uint64_t *a1, uint64_t *a2)
{
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1(a1 + 8, a2 + 8);
  return a1;
}

uint64_t assignWithTake for ContactsSlotTemplating(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_release();
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 64);
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContactsSlotTemplating(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 104))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContactsSlotTemplating(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for ContactsSlotTemplating()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined init with take of PhoneRRTarget(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PhoneRRTarget(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_FE110()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t OUTLINED_FUNCTION_3_39()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_6_27()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_8_38()
{
  if (v0) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = 0;
  }
  return specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, v3, v1);
}

uint64_t OUTLINED_FUNCTION_10_22()
{
  return *(void *)(v0 - 168);
}

uint64_t OUTLINED_FUNCTION_14_16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(a1, 1, 1, a4);
}

uint64_t OUTLINED_FUNCTION_16_25()
{
  return v0 - 200;
}

uint64_t OUTLINED_FUNCTION_19_16()
{
  if (v0) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = 0;
  }
  return specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, v3, v1);
}

uint64_t OUTLINED_FUNCTION_20_15@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
  return 0;
}

uint64_t OUTLINED_FUNCTION_22_12(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return dispatch thunk of DeviceState.siriLocale.getter();
}

uint64_t OUTLINED_FUNCTION_28_8()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t OUTLINED_FUNCTION_29_8(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, 0, 1, a1);
}

uint64_t OUTLINED_FUNCTION_30_9()
{
  return swift_bridgeObjectRetain();
}

uint64_t static DisambiguationItemUtils.getUpdatedPersonList(selectedIndex:selectedPerson:persons:)(uint64_t a1, void *a2, unint64_t a3)
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.siriPhone);
  swift_bridgeObjectRetain_n();
  long long v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  uint64_t v9 = &unk_469000;
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v27 = a2;
    uint64_t v10 = (uint8_t *)OUTLINED_FUNCTION_47();
    v28[0] = OUTLINED_FUNCTION_14_0();
    *(_DWORD *)uint64_t v10 = 136315138;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]?);
    uint64_t v11 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v28);
    uint64_t v9 = (void *)&unk_469000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v7, v8, "getUpdatedPersonList# initial contacts: %s", v10, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    a2 = v27;
    OUTLINED_FUNCTION_6();

    if (!a3) {
      goto LABEL_19;
    }
  }
  else
  {

    swift_bridgeObjectRelease_n();
    if (!a3)
    {
LABEL_19:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v17 = swift_allocObject();
      *(_OWORD *)(v17 + 16) = xmmword_46A030;
      *(void *)(v17 + 32) = a2;
      v28[0] = v17;
      specialized Array._endMutation()();
      uint64_t v29 = v28[0];
      id v18 = a2;
      goto LABEL_20;
    }
  }
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    if (!_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_18;
    }
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v13 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (!v13)
    {
LABEL_18:
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
  }
  if (v13 <= a1) {
    goto LABEL_18;
  }
  id v14 = a2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  uint64_t v29 = a3;
  if (a3 >> 62 || (result & 1) == 0)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew()(a3);
    a3 = result;
    uint64_t v29 = result;
  }
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  if (*(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8)) <= (unint64_t)a1)
  {
LABEL_24:
    __break(1u);
    return result;
  }
  uint64_t v16 = *(void **)((char *)&stru_20.cmd + 8 * a1 + (a3 & 0xFFFFFFFFFFFFFF8));
  *(void *)((char *)&stru_20.cmd + 8 * a1 + (a3 & 0xFFFFFFFFFFFFFF8)) = v14;

  specialized Array._endMutation()();
LABEL_20:
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (_DWORD *)OUTLINED_FUNCTION_47();
    v28[0] = OUTLINED_FUNCTION_14_0();
    *uint64_t v21 = v9[287];
    swift_beginAccess();
    type metadata accessor for INPerson();
    swift_bridgeObjectRetain();
    uint64_t v22 = Array.description.getter();
    unint64_t v24 = v23;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_9_27(&dword_0, v25, v26, "getUpdatedPersonList# updated contacts: %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }

  swift_beginAccess();
  return v29;
}

void *static DisambiguationItemUtils.getPersonsList(container:)()
{
  uint64_t v0 = type metadata accessor for SiriKitDisambiguationItemPair();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)v25 - v5;
  unint64_t v36 = (unint64_t)_swiftEmptyArrayStorage;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<SiriKitDisambiguationItemPair>);
  uint64_t v7 = PaginatedItemContainer.items.getter();
  uint64_t v9 = *(void *)(v7 + 16);
  if (v9)
  {
    unint64_t v12 = *(void (**)(char *, unint64_t, uint64_t))(v1 + 16);
    uint64_t v10 = v1 + 16;
    uint64_t v11 = v12;
    unint64_t v13 = (*(unsigned __int8 *)(v10 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 64);
    v25[1] = v7;
    unint64_t v14 = v7 + v13;
    uint64_t v15 = *(void *)(v10 + 56);
    uint64_t v33 = (void (**)(char *, uint64_t))(v10 - 8);
    uint64_t v34 = v15;
    uint64_t v32 = (char *)&type metadata for Any + 8;
    *(void *)&long long v8 = 136315138;
    long long v26 = v8;
    uint64_t v28 = v6;
    uint64_t v29 = v10;
    uint64_t v27 = v12;
    uint64_t v31 = v0;
    do
    {
      v11(v6, v14, v0);
      SiriKitDisambiguationItemPair.rawItem.getter();
      type metadata accessor for INPerson();
      if (swift_dynamicCast())
      {
        id v16 = v35;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((char *)&dword_10 + (v36 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                       + (v36 & 0xFFFFFFFFFFFFFF8)) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        (*v33)(v6, v0);
      }
      else
      {
        if (one-time initialization token for siriPhone != -1) {
          swift_once();
        }
        uint64_t v17 = type metadata accessor for Logger();
        __swift_project_value_buffer(v17, (uint64_t)static Logger.siriPhone);
        v11(v4, (unint64_t)v6, v0);
        id v18 = Logger.logObject.getter();
        os_log_type_t v19 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v18, v19))
        {
          uint64_t v20 = OUTLINED_FUNCTION_47();
          id v35 = (id)OUTLINED_FUNCTION_14_0();
          *(_DWORD *)uint64_t v20 = v26;
          SiriKitDisambiguationItemPair.rawItem.getter();
          uint64_t v21 = String.init<A>(describing:)();
          *(void *)(v20 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, (uint64_t *)&v35);
          swift_bridgeObjectRelease();
          uint64_t v30 = *v33;
          v30(v4, v31);
          _os_log_impl(&dword_0, v18, v19, "getPersonsList# couldn't retrieve pair %s as an INPerson object", (uint8_t *)v20, 0xCu);
          uint64_t v0 = v31;
          uint64_t v6 = v28;
          swift_arrayDestroy();
          OUTLINED_FUNCTION_6();
          uint64_t v11 = v27;
          OUTLINED_FUNCTION_6();

          v30(v6, v0);
        }
        else
        {

          unint64_t v23 = *v33;
          (*v33)(v4, v0);
          v23(v6, v0);
        }
      }
      v14 += v34;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
    return (void *)v36;
  }
  else
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
}

char *static DisambiguationItemUtils.getSelectedPersonByName(nameComponents:persons:)(char *a1, unint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  unint64_t v7 = (unint64_t)v110 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (uint64_t)v110 - v9;
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_5_17();
  uint64_t v122 = v11;
  OUTLINED_FUNCTION_18_0();
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (uint64_t)v110 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  id v18 = (char *)v110 - v17;
  __chkstk_darwin(v16);
  OUTLINED_FUNCTION_5_17();
  uint64_t v123 = v19;
  OUTLINED_FUNCTION_18_0();
  uint64_t v21 = __chkstk_darwin(v20);
  unint64_t v23 = (char *)v110 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v26 = (uint64_t)v110 - v25;
  __chkstk_darwin(v24);
  OUTLINED_FUNCTION_5_17();
  uint64_t v124 = v27;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v28);
  OUTLINED_FUNCTION_5_17();
  uint64_t v120 = v29;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v30);
  OUTLINED_FUNCTION_5_17();
  uint64_t v119 = v31;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v32);
  uint64_t v34 = (char *)v110 - v33;
  if (a2 >> 62)
  {
LABEL_109:
    swift_bridgeObjectRetain();
    id v35 = _CocoaArrayWrapper.endIndex.getter();
    if (v35) {
      goto LABEL_3;
    }
  }
  else
  {
    id v35 = *(NSObject **)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (v35)
    {
LABEL_3:
      unint64_t v117 = v23;
      uint64_t v118 = v26;
      id v115 = v18;
      uint64_t v116 = v15;
      unint64_t v113 = v7;
      uint64_t v114 = v10;
      uint64_t v26 = 0;
      uint64_t v112 = 0;
      unint64_t v7 = 0;
      id v18 = (char *)(a2 & 0xC000000000000001);
      uint64_t v121 = a2 & 0xFFFFFFFFFFFFFF8;
      *(void *)&long long v36 = 136315138;
      long long v111 = v36;
      v110[1] = (char *)&type metadata for Any + 8;
      unint64_t v23 = (char *)&selRef_setBundleId_;
      unint64_t v125 = a2;
      while (1)
      {
        while (1)
        {
          if (v18)
          {
            uint64_t v37 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if (v7 >= *(void *)(v121 + 16))
            {
              __break(1u);
              goto LABEL_109;
            }
            uint64_t v37 = (char *)*(id *)(a2 + 8 * v7 + 32);
          }
          v128 = v37;
          if (__OFADD__(v7, 1))
          {
            __break(1u);
            goto LABEL_106;
          }
          uint64_t v126 = v7;
          os_log_type_t v127 = (v7 + 1);
          outlined init with copy of PersonNameComponents?((uint64_t)a1, (uint64_t)v34);
          uint64_t v10 = type metadata accessor for PersonNameComponents();
          OUTLINED_FUNCTION_30_0((uint64_t)v34);
          if (v53)
          {
            outlined destroy of PersonNameComponents?((uint64_t)v34);
            goto LABEL_26;
          }
          uint64_t v15 = PersonNameComponents.givenName.getter();
          unint64_t v7 = v38;
          OUTLINED_FUNCTION_4_38();
          v39();
          if (v7) {
            break;
          }
LABEL_26:
          uint64_t v54 = v124;
          outlined init with copy of PersonNameComponents?((uint64_t)a1, v124);
          OUTLINED_FUNCTION_30_0(v54);
          if (v53)
          {
            outlined destroy of PersonNameComponents?(v54);
          }
          else
          {
            PersonNameComponents.familyName.getter();
            OUTLINED_FUNCTION_0_30();
            OUTLINED_FUNCTION_4_38();
            v55();
            if (v7)
            {
              id v56 = OUTLINED_FUNCTION_13_15();
              if (v56)
              {
                int v57 = v56;
                uint64_t v58 = v117;
                static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

                uint64_t v59 = 0;
              }
              else
              {
                uint64_t v59 = 1;
                uint64_t v58 = v117;
              }
              uint64_t v60 = OUTLINED_FUNCTION_2_41((uint64_t)v56, v59);
              uint64_t v44 = v118;
              outlined init with take of PersonNameComponents?(v60, v118);
              if (OUTLINED_FUNCTION_9_34()) {
                goto LABEL_83;
              }
              PersonNameComponents.familyName.getter();
              OUTLINED_FUNCTION_12_17();
              if (!v44) {
                goto LABEL_84;
              }
              if ((char *)v15 == v58 && v7 == v44)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              else
              {
                uint64_t v15 = OUTLINED_FUNCTION_3_40();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v15 & 1) == 0) {
                  goto LABEL_57;
                }
              }
              LOBYTE(v26) = 1;
            }
          }
          uint64_t v62 = v123;
          outlined init with copy of PersonNameComponents?((uint64_t)a1, v123);
          OUTLINED_FUNCTION_30_0(v62);
          if (v53)
          {
            outlined destroy of PersonNameComponents?(v62);
          }
          else
          {
            PersonNameComponents.middleName.getter();
            OUTLINED_FUNCTION_0_30();
            OUTLINED_FUNCTION_4_38();
            v63();
            if (v7)
            {
              id v64 = OUTLINED_FUNCTION_13_15();
              if (v64)
              {
                uint64_t v65 = v64;
                uint64_t v66 = v116;
                static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

                uint64_t v67 = 0;
              }
              else
              {
                uint64_t v67 = 1;
                uint64_t v66 = v116;
              }
              uint64_t v68 = OUTLINED_FUNCTION_2_41((uint64_t)v64, v67);
              uint64_t v44 = (uint64_t)v115;
              outlined init with take of PersonNameComponents?(v68, (uint64_t)v115);
              if (OUTLINED_FUNCTION_9_34()) {
                goto LABEL_83;
              }
              PersonNameComponents.middleName.getter();
              OUTLINED_FUNCTION_12_17();
              if (!v44) {
                goto LABEL_84;
              }
              if (v15 == v66 && v7 == v44)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              else
              {
                uint64_t v15 = OUTLINED_FUNCTION_3_40();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v15 & 1) == 0)
                {
LABEL_57:

                  goto LABEL_96;
                }
              }
              LOBYTE(v26) = 1;
            }
          }
          uint64_t v70 = v122;
          outlined init with copy of PersonNameComponents?((uint64_t)a1, v122);
          OUTLINED_FUNCTION_30_0(v70);
          if (v53)
          {
            outlined destroy of PersonNameComponents?(v70);
          }
          else
          {
            PersonNameComponents.nickname.getter();
            OUTLINED_FUNCTION_0_30();
            OUTLINED_FUNCTION_4_38();
            v71();
            if (v7)
            {
              id v72 = OUTLINED_FUNCTION_13_15();
              if (v72)
              {
                uint64_t v73 = v72;
                static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

                uint64_t v74 = 0;
              }
              else
              {
                uint64_t v74 = 1;
              }
              uint64_t v76 = OUTLINED_FUNCTION_2_41((uint64_t)v72, v74);
              uint64_t v77 = v114;
              outlined init with take of PersonNameComponents?(v76, v114);
              if (__swift_getEnumTagSinglePayload(v77, 1, v10))
              {
                outlined destroy of PersonNameComponents?(v77);
                goto LABEL_72;
              }
              uint64_t v10 = PersonNameComponents.nickname.getter();
              uint64_t v79 = v78;
              outlined destroy of PersonNameComponents?(v77);
              if (v79)
              {
                if (v15 == v10 && v7 == v79)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
LABEL_89:
                  uint64_t v26 = (uint64_t)v112;
                  if (v112)
                  {
                    swift_bridgeObjectRelease();
                    if (one-time initialization token for siriPhone != -1) {
                      swift_once();
                    }
                    uint64_t v95 = type metadata accessor for Logger();
                    __swift_project_value_buffer(v95, (uint64_t)static Logger.siriPhone);
                    a1 = v128;
                    id v35 = Logger.logObject.getter();
                    os_log_type_t v96 = static os_log_type_t.debug.getter();
                    if (os_log_type_enabled(v35, v96))
                    {
                      id v97 = (_DWORD *)OUTLINED_FUNCTION_47();
                      v130[0] = OUTLINED_FUNCTION_14_0();
                      *id v97 = v111;
                      uint64_t v98 = a1;
                      id v99 = [v98 description];
                      uint64_t v100 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                      uint64_t v112 = (char *)v26;
                      unint64_t v102 = v101;

                      uint64_t v129 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v100, v102, v130);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)();

                      swift_bridgeObjectRelease();
                      OUTLINED_FUNCTION_9_27(&dword_0, v103, v104, "getSelectedPerson# found another contact candidate: %s which becomes ambiguous");
                      swift_arrayDestroy();
                      OUTLINED_FUNCTION_6();
                      OUTLINED_FUNCTION_6();

                      return 0;
                    }
LABEL_106:

                    return 0;
                  }
                  uint64_t v81 = one-time initialization token for siriPhone;
                  uint64_t v82 = v128;
                  if (v81 != -1) {
                    swift_once();
                  }
                  uint64_t v83 = type metadata accessor for Logger();
                  __swift_project_value_buffer(v83, (uint64_t)static Logger.siriPhone);
                  uint64_t v15 = v82;
                  unint64_t v84 = Logger.logObject.getter();
                  os_log_type_t v85 = static os_log_type_t.debug.getter();
                  uint64_t v10 = v85;
                  if (os_log_type_enabled(v84, v85))
                  {
                    id v86 = (char *)OUTLINED_FUNCTION_47();
                    uint64_t v112 = v86;
                    uint64_t v126 = OUTLINED_FUNCTION_14_0();
                    v130[0] = v126;
                    *(_DWORD *)id v86 = v111;
                    uint64_t v15 = (uint64_t)(id)v15;
                    id v87 = [(id)v15 description];
                    uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    unint64_t v90 = v89;

                    uint64_t v91 = v88;
                    unint64_t v23 = (char *)&selRef_setBundleId_;
                    uint64_t v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v91, v90, v130);
                    unint64_t v93 = (uint8_t *)v112;
                    *(void *)(v112 + 4) = v92;

                    swift_bridgeObjectRelease();
                    _os_log_impl(&dword_0, v84, (os_log_type_t)v10, "getSelectedPerson# found contact candidate: %s", v93, 0xCu);
                    swift_arrayDestroy();
                    OUTLINED_FUNCTION_6();
                    OUTLINED_FUNCTION_6();
                  }
                  else
                  {
                  }
                  uint64_t v112 = v128;
LABEL_96:
                  a2 = v125;
                  goto LABEL_97;
                }
                uint64_t v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (v10) {
                  goto LABEL_89;
                }
              }
              else
              {
LABEL_72:

                swift_bridgeObjectRelease();
              }
              a2 = v125;
              uint64_t v75 = v126;
              if (v127 == v35) {
                goto LABEL_100;
              }
              uint64_t v26 = 1;
              goto LABEL_82;
            }
          }
          if (v26) {
            goto LABEL_89;
          }

          a2 = v125;
          if (v127 == v35)
          {
            swift_bridgeObjectRelease();
            uint64_t v94 = v112;
            goto LABEL_111;
          }
          uint64_t v26 = 0;
          uint64_t v75 = v126;
LABEL_82:
          unint64_t v7 = v75 + 1;
        }
        id v40 = OUTLINED_FUNCTION_13_15();
        if (v40)
        {
          uint64_t v41 = v40;
          static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v42 = 0;
        }
        else
        {
          uint64_t v42 = 1;
        }
        uint64_t v43 = OUTLINED_FUNCTION_2_41((uint64_t)v40, v42);
        uint64_t v44 = v119;
        outlined init with take of PersonNameComponents?(v43, v119);
        if (OUTLINED_FUNCTION_9_34())
        {
LABEL_83:
          outlined destroy of PersonNameComponents?(v44);
LABEL_84:

          swift_bridgeObjectRelease();
          goto LABEL_96;
        }
        uint64_t v45 = v18;
        uint64_t v46 = v35;
        unint64_t v47 = a1;
        uint64_t v48 = v34;
        uint64_t v49 = v44;
        uint64_t v50 = PersonNameComponents.givenName.getter();
        uint64_t v52 = v51;
        outlined destroy of PersonNameComponents?(v49);
        if (v52)
        {
          BOOL v53 = v15 == v50 && v7 == v52;
          uint64_t v34 = v48;
          if (v53)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            LOBYTE(v26) = 1;
            a1 = v47;
            goto LABEL_25;
          }
          uint64_t v15 = OUTLINED_FUNCTION_3_40();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          a1 = v47;
          if (v15)
          {
            LOBYTE(v26) = 1;
LABEL_25:
            id v35 = v46;
            id v18 = v45;
            unint64_t v23 = (char *)&selRef_setBundleId_;
            goto LABEL_26;
          }

          a2 = v125;
        }
        else
        {

          swift_bridgeObjectRelease();
          a2 = v125;
          uint64_t v34 = v48;
          a1 = v47;
        }
        id v35 = v46;
        id v18 = v45;
        unint64_t v23 = (char *)&selRef_setBundleId_;
LABEL_97:
        unint64_t v7 = (unint64_t)v127;
        uint64_t v26 = 1;
        if (v127 == v35)
        {
LABEL_100:
          swift_bridgeObjectRelease();
          return v112;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v94 = 0;
LABEL_111:
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v105 = type metadata accessor for Logger();
  __swift_project_value_buffer(v105, (uint64_t)static Logger.siriPhone);
  uint64_t v106 = Logger.logObject.getter();
  os_log_type_t v107 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v106, v107))
  {
    uint64_t v108 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v108 = 0;
    _os_log_impl(&dword_0, v106, v107, "getSelectedPerson# no matching criteria was found", v108, 2u);
    OUTLINED_FUNCTION_6();
  }

  return v94;
}

uint64_t outlined init with copy of PersonNameComponents?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of PersonNameComponents?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for DisambiguationItemUtils()
{
  return &type metadata for DisambiguationItemUtils;
}

uint64_t OUTLINED_FUNCTION_0_30()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_2_41(uint64_t a1, uint64_t a2)
{
  __swift_storeEnumTagSinglePayload(v3, a2, 1, v2);
  return v3;
}

uint64_t OUTLINED_FUNCTION_3_40()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_9_34()
{
  return __swift_getEnumTagSinglePayload(v0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_12_17()
{
  return outlined destroy of PersonNameComponents?(v0);
}

id OUTLINED_FUNCTION_13_15()
{
  uint64_t v3 = *(const char **)(v0 + 40);
  uint64_t v4 = *(void **)(v1 - 112);
  return [v4 v3];
}

uint64_t AnnounceCallConfirmationStrategy.wrapped.getter()
{
  return swift_retain();
}

uint64_t CallingIntentContinueInAppFlow.rchRecord.getter()
{
  OUTLINED_FUNCTION_9_11();
  type metadata accessor for IntentResolutionRecord();
  OUTLINED_FUNCTION_15();
  uint64_t v0 = OUTLINED_FUNCTION_38();

  return v1(v0);
}

uint64_t CallingIntentContinueInAppFlow.sharedGlobals.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + *(void *)(*(void *)v1 + 120), a1);
}

id CallingIntentContinueInAppFlow.deviceStateConnection.getter()
{
  return *(id *)(v0 + *(void *)(*(void *)v0 + 128));
}

uint64_t CallingIntentContinueInAppFlow.__allocating_init(factory:rchRecord:sharedGlobals:deviceStateConnection:)(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  CallingIntentContinueInAppFlow.init(factory:rchRecord:sharedGlobals:deviceStateConnection:)(a1, a2, a3, a4);
  return v8;
}

void *CallingIntentContinueInAppFlow.init(factory:rchRecord:sharedGlobals:deviceStateConnection:)(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  v4[2] = a1;
  OUTLINED_FUNCTION_9_11();
  uint64_t v9 = (char *)v4 + *(void *)(v8 + 112);
  OUTLINED_FUNCTION_9_11();
  OUTLINED_FUNCTION_9_11();
  type metadata accessor for IntentResolutionRecord();
  OUTLINED_FUNCTION_15();
  (*(void (**)(char *, uint64_t))(v10 + 32))(v9, a2);
  outlined init with take of AppSelectionSignalComponent(a3, (uint64_t)v4 + *(void *)(*v4 + 120));
  *(void *)((char *)v4 + *(void *)(*v4 + 128)) = a4;
  return v4;
}

uint64_t (*static CallingIntentContinueInAppFlow.makeProducer(sharedGlobals:)(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  outlined init with copy of SignalProviding(a1, (uint64_t)v4);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = *(void *)(v1 + 96);
  outlined init with take of AppSelectionSignalComponent(v4, v2 + 24);
  return partial apply for closure #1 in static CallingIntentContinueInAppFlow.makeProducer(sharedGlobals:);
}

uint64_t closure #1 in static CallingIntentContinueInAppFlow.makeProducer(sharedGlobals:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for IntentResolutionRecord();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v13 - v8;
  type metadata accessor for CallingIntentContinueInAppFlow();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  outlined init with copy of SignalProviding(a3, (uint64_t)v14);
  swift_retain();
  id v10 = default argument 3 of CallingIntentContinueInAppFlow.init(factory:rchRecord:sharedGlobals:deviceStateConnection:)();
  *(void *)&v14[0] = CallingIntentContinueInAppFlow.__allocating_init(factory:rchRecord:sharedGlobals:deviceStateConnection:)(a1, (uint64_t)v9, v14, (uint64_t)v10);
  swift_getWitnessTable();
  uint64_t v11 = Flow.eraseToAnyFlow()();
  swift_release();
  return v11;
}

uint64_t sub_FFC20()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t partial apply for closure #1 in static CallingIntentContinueInAppFlow.makeProducer(sharedGlobals:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static CallingIntentContinueInAppFlow.makeProducer(sharedGlobals:)(a1, a2, v2 + 24);
}

uint64_t CallingIntentContinueInAppFlow.execute()(uint64_t a1)
{
  v2[16] = a1;
  v2[17] = v1;
  OUTLINED_FUNCTION_2();
  v2[18] = v3;
  return OUTLINED_FUNCTION_21_1((uint64_t)CallingIntentContinueInAppFlow.execute());
}

uint64_t CallingIntentContinueInAppFlow.execute()()
{
  uint64_t v2 = *(void **)(v0 + 136);
  uint64_t v1 = *(void **)(v0 + 144);
  uint64_t v3 = (void *)((char *)v2 + *(void *)(*v2 + 120));
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  uint64_t v4 = OUTLINED_FUNCTION_38();
  v5(v4);
  uint64_t v6 = *(void *)(v0 + 48);
  uint64_t v39 = *(void *)(v0 + 40);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v39);
  uint64_t v7 = v1[10];
  uint64_t v8 = v1[11];
  uint64_t v9 = v1[12];
  uint64_t v10 = type metadata accessor for CallingIntentContinueInAppStrategy();
  outlined init with copy of SignalProviding((uint64_t)v3, v0 + 56);
  uint64_t v11 = default argument 1 of CallingIntentContinueInAppStrategy.init(sharedGlobals:startCallCATsSimple:phoneCallDisplayTextCATsSimple:)(v7, v8, v9);
  uint64_t v12 = default argument 2 of CallingIntentContinueInAppStrategy.init(sharedGlobals:startCallCATsSimple:phoneCallDisplayTextCATsSimple:)(v7, v8, v9);
  uint64_t v40 = v0;
  *(void *)(v0 + 96) = CallingIntentContinueInAppStrategy.__allocating_init(sharedGlobals:startCallCATsSimple:phoneCallDisplayTextCATsSimple:)((long long *)(v0 + 56), v11, v12);
  uint64_t v13 = v2[2];
  uint64_t v14 = (char *)v2 + *(void *)(*v2 + 112);
  unint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 32);
  uint64_t WitnessTable = swift_getWitnessTable();
  *(void *)(v0 + 152) = v38(v0 + 96, v13, v14, v10, WitnessTable, v39, v6);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  type metadata accessor for IntentResolutionRecord();
  uint64_t v16 = (void *)IntentResolutionRecord.intent.getter();
  uint64_t v17 = *(uint64_t (**)(uint64_t))(v9 + 16);
  uint64_t v18 = OUTLINED_FUNCTION_11_23();
  uint64_t v19 = v17(v18);

  if (v19 == 2)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.siriPhone);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_14_2(v22))
    {
      unint64_t v23 = (uint8_t *)OUTLINED_FUNCTION_7_2();
      *(_WORD *)unint64_t v23 = 0;
      _os_log_impl(&dword_0, v21, (os_log_type_t)v7, "#CallingIntentContinueInAppFlow emergency call, skipping auth flows", v23, 2u);
      OUTLINED_FUNCTION_6();
    }
    uint64_t v24 = v40;

    goto LABEL_17;
  }
  uint64_t v25 = (void *)IntentResolutionRecord.intent.getter();
  uint64_t v26 = OUTLINED_FUNCTION_11_23();
  uint64_t v27 = v17(v26);

  if (v27 != 4)
  {
    uint64_t v28 = (void *)IntentResolutionRecord.intent.getter();
    uint64_t v29 = OUTLINED_FUNCTION_11_23();
    uint64_t v30 = v17(v29);

    if (v30 != 5)
    {
      uint64_t v24 = v40;
LABEL_17:
      static ExecuteResponse.complete(next:)();
      swift_release();
      uint64_t v37 = *(uint64_t (**)(void))(v24 + 8);
      return v37();
    }
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  __swift_project_value_buffer(v31, (uint64_t)static Logger.siriPhone);
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = (uint8_t *)OUTLINED_FUNCTION_7_2();
    *(_WORD *)uint64_t v34 = 0;
    _os_log_impl(&dword_0, v32, v33, "#CallingIntentContinueInAppFlow Pushing redial/callback punchout flow guarded by auth flows", v34, 2u);
    OUTLINED_FUNCTION_6();
  }

  id v35 = (void *)swift_task_alloc();
  *(void *)(v40 + 160) = v35;
  void *v35 = v40;
  v35[1] = CallingIntentContinueInAppFlow.execute();
  return CallingIntentContinueInAppFlow.makeRedialCallbackGuardFlow()();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 168) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v4, v5, v6);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = v0[21];
  v0[13] = v0[19];
  v0[14] = v1;
  type metadata accessor for AnyFlow();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyValueFlow<GuardFlowResult>);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type AnyValueFlow<GuardFlowResult> and conformance AnyValueFlow<A>, &demangling cache variable for type metadata for AnyValueFlow<GuardFlowResult>);
  v0[15] = Flow.guarded<A>(by:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConditionalFlow<Any>);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type ConditionalFlow<Any> and conformance ConditionalFlow<A>, &demangling cache variable for type metadata for ConditionalFlow<Any>);
  static ExecuteResponse.complete<A>(next:)();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t CallingIntentContinueInAppFlow.execute(completion:)()
{
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t CallingIntentContinueInAppFlow.makeRedialCallbackGuardFlow()()
{
  OUTLINED_FUNCTION_1_0();
  v1[8] = v0;
  OUTLINED_FUNCTION_2();
  v1[9] = v2;
  uint64_t v3 = type metadata accessor for UnlockDevicePolicy();
  v1[10] = v3;
  OUTLINED_FUNCTION_19_0(v3);
  v1[11] = v4;
  v1[12] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for CommonFlowGuard();
  v1[13] = v5;
  OUTLINED_FUNCTION_19_0(v5);
  v1[14] = v6;
  v1[15] = swift_task_alloc();
  v1[16] = swift_task_alloc();
  uint64_t v7 = (void *)swift_task_alloc();
  v1[17] = v7;
  *uint64_t v7 = v1;
  v7[1] = CallingIntentContinueInAppFlow.makeRedialCallbackGuardFlow();
  return CallingIntentContinueInAppFlow.requiresDeviceUnlockForRedialCallback()();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(unsigned char *)(v1 + 176) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v4, v5, v6);
}

{
  id v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(unint64_t);
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;

  if (*(unsigned char *)(v1 + 176) == 1)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.siriPhone);
    uint64_t v3 = Logger.logObject.getter();
    uint64_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)OUTLINED_FUNCTION_7_2();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_0, v3, v4, "#CallingIntentContinueInAppFlow Adding device unlock guard for redial/callback", v5, 2u);
      OUTLINED_FUNCTION_6();
    }
    uint64_t v7 = *(void *)(v1 + 88);
    uint64_t v6 = *(void *)(v1 + 96);
    uint64_t v8 = *(void *)(v1 + 80);

    static UnlockDevicePolicy.default.getter();
    static CommonFlowGuard.ensuringDeviceIsAuthenticated(using:)();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v9 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, (uint64_t)_swiftEmptyArrayStorage);
    uint64_t v0 = (id)v9[2];
    uint64_t v10 = v9[3];
    if ((unint64_t)v0 >= v10 >> 1) {
      uint64_t v9 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, (uint64_t)v0 + 1, 1, (uint64_t)v9);
    }
    uint64_t v11 = OUTLINED_FUNCTION_4_39(*(void *)(v1 + 112));
    v12(v11);
  }
  else
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
  }
  *(void *)(v1 + 144) = v9;
  type metadata accessor for IntentResolutionRecord();
  uint64_t v13 = (void *)IntentResolutionRecord.intent.getter();
  self;
  uint64_t v14 = (void *)swift_dynamicCastObjCClass();
  if (v14)
  {
    uint64_t v0 = [v14 callRecordToCallBack];

    if (v0)
    {
      uint64_t v15 = [v0 providerBundleId];

      if (v15)
      {
        uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v18 = v17;

        *(void *)(v1 + 152) = v16;
        *(void *)(v1 + 160) = v18;
        uint64_t v19 = (void *)swift_task_alloc();
        *(void *)(v1 + 168) = v19;
        *uint64_t v19 = v1;
        v19[1] = CallingIntentContinueInAppFlow.makeRedialCallbackGuardFlow();
        return CallingIntentContinueInAppFlow.requiresProtectedAppsUnlock()();
      }
    }
  }
  else
  {
  }
  OUTLINED_FUNCTION_12_18();
  os_log_type_t v22 = OUTLINED_FUNCTION_6_28(v21);
  v23(v22);
  uint64_t v24 = OUTLINED_FUNCTION_5_33();
  uint64_t v26 = v25(v24);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v27 = *(uint64_t (**)(uint64_t))(v1 + 8);
  return v27(v26);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(unsigned char *)(v1 + 177) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v4, v5, v6);
}

{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(unint64_t);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  unint64_t v23 = v1;
  if (*(unsigned char *)(v1 + 177) == 1)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.siriPhone);
    swift_bridgeObjectRetain_n();
    uint64_t v3 = Logger.logObject.getter();
    uint64_t v4 = static os_log_type_t.debug.getter();
    uint64_t v5 = OUTLINED_FUNCTION_14_2(v4);
    uint64_t v6 = *(void *)(v1 + 160);
    if (v5)
    {
      uint64_t v7 = *(void *)(v1 + 152);
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v22 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v1 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v6, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_0, v3, (os_log_type_t)v0, "#CallingIntentContinueInAppFlow Adding protected app guard for redial/callback using %s", v8, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    static CommonFlowGuard.ensuringUnlockedApp(_:)();
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v10 = *(void *)(v1 + 144);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v10 + 16) + 1, 1, *(void *)(v1 + 144));
    }
    uint64_t v0 = *(void *)(v10 + 16);
    uint64_t v11 = *(void *)(v10 + 24);
    if (v0 >= v11 >> 1) {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v0 + 1, 1, v10);
    }
    uint64_t v12 = OUTLINED_FUNCTION_4_39(*(void *)(v1 + 112));
    v13(v12);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_12_18();
  uint64_t v15 = OUTLINED_FUNCTION_6_28(v14);
  v16(v15);
  uint64_t v17 = OUTLINED_FUNCTION_5_33();
  uint64_t v19 = v18(v17);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = *(uint64_t (**)(uint64_t))(v1 + 8);
  return v20(v19);
}

uint64_t CallingIntentContinueInAppFlow.requiresDeviceUnlockForRedialCallback()()
{
  OUTLINED_FUNCTION_1_0();
  v1[7] = v0;
  OUTLINED_FUNCTION_2();
  v1[8] = v2;
  uint64_t v3 = type metadata accessor for UnlockDevicePolicy();
  v1[9] = v3;
  OUTLINED_FUNCTION_19_0(v3);
  v1[10] = v4;
  v1[11] = swift_task_alloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v5, v6, v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  const char *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t (*v24)(BOOL);
  uint64_t v25;

  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  uint64_t v4 = (void *)(v0[7] + *(void *)(*(void *)v0[7] + 120));
  uint64_t v5 = v4[3];
  uint64_t v6 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
  __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
  static UnlockDevicePolicy.default.getter();
  uint64_t v7 = dispatch thunk of DeviceState.isAuthenticated(for:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  if (v7)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.siriPhone);
    uint64_t v9 = Logger.logObject.getter();
    uint64_t v10 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v9, v10)) {
      goto LABEL_18;
    }
    uint64_t v11 = (uint8_t *)OUTLINED_FUNCTION_7_2();
    *(_WORD *)uint64_t v11 = 0;
    uint64_t v12 = "#CallingIntentContinueInAppFlow device isn't locked, returning requiresUnlock = false";
LABEL_17:
    _os_log_impl(&dword_0, v9, v10, v12, v11, 2u);
    OUTLINED_FUNCTION_6();
LABEL_18:

    swift_task_dealloc();
    OUTLINED_FUNCTION_17_14();
    return v24((v7 & 1) == 0);
  }
  type metadata accessor for IntentResolutionRecord();
  uint64_t v13 = (void *)IntentResolutionRecord.intent.getter();
  self;
  uint64_t v14 = (void *)swift_dynamicCastObjCClass();
  if (!v14)
  {

LABEL_13:
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    unint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.siriPhone);
    uint64_t v9 = Logger.logObject.getter();
    uint64_t v10 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v9, v10)) {
      goto LABEL_18;
    }
    uint64_t v11 = (uint8_t *)OUTLINED_FUNCTION_7_2();
    *(_WORD *)uint64_t v11 = 0;
    uint64_t v12 = "#CallingIntentContinueInAppFlow couldn't determine a providerBundleId to redial or call back, assuming requiresUnlock = true";
    goto LABEL_17;
  }
  uint64_t v15 = [v14 callRecordToCallBack];

  if (!v15) {
    goto LABEL_13;
  }
  uint64_t v16 = [v15 providerBundleId];

  if (!v16) {
    goto LABEL_13;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  v0[12] = v18;
  uint64_t v19 = (void *)swift_task_alloc();
  v0[13] = v19;
  *uint64_t v19 = v0;
  v19[1] = CallingIntentContinueInAppFlow.requiresDeviceUnlockForRedialCallback();
  uint64_t v20 = OUTLINED_FUNCTION_38();
  return CallingIntentContinueInAppFlow.notificationPreviewsRestricted(for:)(v20, v21);
}

uint64_t CallingIntentContinueInAppFlow.requiresDeviceUnlockForRedialCallback()(uint64_t a1)
{
  uint64_t v3 = *v1;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v3 + 8);
  return v5(a1);
}

uint64_t CallingIntentContinueInAppFlow.notificationPreviewsRestricted(for:)(uint64_t a1, uint64_t a2)
{
  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  return OUTLINED_FUNCTION_21_1((uint64_t)CallingIntentContinueInAppFlow.notificationPreviewsRestricted(for:));
}

uint64_t CallingIntentContinueInAppFlow.notificationPreviewsRestricted(for:)()
{
  uint64_t v1 = *(void **)(v0[18] + *(void *)(*(void *)v0[18] + 128));
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = CallingIntentContinueInAppFlow.notificationPreviewsRestricted(for:);
  uint64_t v2 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = @objc completion handler block implementation for <A, B>@escaping @callee_unowned @convention(block) (@unowned NSArray?) -> () with result type [String]?;
  v0[13] = &block_descriptor_1;
  v0[14] = v2;
  [v1 fetchSiriKitAppIdentifiersWithNotificationPreviewRestrictionsWithCompletion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_1_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v2 = v1;
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  os_log_type_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t (*v18)(void);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  uint64_t v21 = v0;
  if (*(void *)(v0 + 120))
  {
    uint64_t v1 = specialized Sequence<>.contains(_:)(*(void *)(v0 + 128), *(void *)(v0 + 136), *(void **)(v0 + 120));
    swift_bridgeObjectRelease();
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.siriPhone);
    swift_bridgeObjectRetain_n();
    uint64_t v3 = Logger.logObject.getter();
    uint64_t v4 = static os_log_type_t.debug.getter();
    uint64_t v5 = os_log_type_enabled(v3, v4);
    uint64_t v6 = *(void *)(v0 + 136);
    if (!v5)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_18;
    }
    uint64_t v7 = *(void *)(v0 + 128);
    uint64_t v8 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315394;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v6, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v8 + 12) = 2080;
    if (v1) {
      uint64_t v9 = 6648417;
    }
    else {
      uint64_t v9 = 0x746F6E20657261;
    }
    if (v1) {
      uint64_t v10 = 0xE300000000000000;
    }
    else {
      uint64_t v10 = 0xE700000000000000;
    }
    *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v3, v4, "#CallingIntentContinueInAppFlow Notification previews for %s %s restricted.", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
LABEL_16:
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
LABEL_18:

    goto LABEL_19;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = __swift_project_value_buffer(v11, (uint64_t)static Logger.siriPhone);
  swift_bridgeObjectRetain_n();
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v13 = static os_log_type_t.error.getter();
  uint64_t v14 = OUTLINED_FUNCTION_14_2(v13);
  uint64_t v15 = *(void *)(v0 + 136);
  if (v14)
  {
    uint64_t v16 = *(void *)(v0 + 128);
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v15, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v3, v12, "#CallingIntentContinueInAppFlow Got nil when fetching restricted apps, assume previews restricted for app: %s", v17, 0xCu);
    uint64_t v1 = 1;
    swift_arrayDestroy();
    goto LABEL_16;
  }
  swift_bridgeObjectRelease_n();

  uint64_t v1 = 1;
LABEL_19:
  OUTLINED_FUNCTION_17_14();
  return v18(v1 & 1);
}

uint64_t @objc completion handler block implementation for <A, B>@escaping @callee_unowned @convention(block) (@unowned NSArray?) -> () with result type [String]?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for INIntentResponse();
  uint64_t v4 = *(void *)(a1 + 32);
  if (a2) {
    uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else {
    uint64_t v5 = 0;
  }

  return specialized _resumeUnsafeContinuation<A>(_:_:)(v4, v5);
}

uint64_t specialized _resumeUnsafeContinuation<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  outlined init with take of [String]?((uint64_t)&v3, *(void *)(*(void *)(a1 + 64) + 40));
  return swift_continuation_resume();
}

uint64_t CallingIntentContinueInAppFlow.requiresProtectedAppsUnlock()()
{
  *(void *)(v1 + 16) = v0;
  return OUTLINED_FUNCTION_21_1((uint64_t)CallingIntentContinueInAppFlow.requiresProtectedAppsUnlock());
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  char v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = (void *)(*(void *)(v0 + 16) + *(void *)(**(void **)(v0 + 16) + 120));
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  uint64_t v2 = OUTLINED_FUNCTION_38();
  uint64_t v4 = *(void *)v3(v2);
  uint64_t v5 = (*(uint64_t (**)(void))(v4 + 256))();
  swift_release();
  OUTLINED_FUNCTION_17_14();
  return v6(v5 & 1);
}

uint64_t CallingIntentContinueInAppFlow.deinit()
{
  swift_release();
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 112);
  type metadata accessor for IntentResolutionRecord();
  OUTLINED_FUNCTION_15();
  (*(void (**)(uint64_t))(v2 + 8))(v1);
  __swift_destroy_boxed_opaque_existential_1(v0 + *(void *)(*(void *)v0 + 120));

  return v0;
}

uint64_t CallingIntentContinueInAppFlow.__deallocating_deinit()
{
  CallingIntentContinueInAppFlow.deinit();
  OUTLINED_FUNCTION_2();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Flow.on(input:) in conformance CallingIntentContinueInAppFlow<A, B>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))() & 1;
}

uint64_t protocol witness for Flow.onAsync(input:) in conformance CallingIntentContinueInAppFlow<A1, B1>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for Flow.onAsync(input:) in conformance CallingIntentContinueInAppFlow<A1, B1>;
  return Flow.onAsync(input:)(a1, a2, a3);
}

uint64_t protocol witness for Flow.onAsync(input:) in conformance CallingIntentContinueInAppFlow<A1, B1>()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_17_14();
  return v5(v2);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance CallingIntentContinueInAppFlow<A, B>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 160))();
}

uint64_t protocol witness for Flow.execute() in conformance CallingIntentContinueInAppFlow<A, B>(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 152) + **(int **)(**(void **)v1 + 152));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for Flow.execute() in conformance CallingIntentContinueInAppFlow<A, B>;
  return v6(a1);
}

uint64_t protocol witness for Flow.execute() in conformance CallingIntentContinueInAppFlow<A, B>()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t protocol witness for Flow.exitValue.getter in conformance CallingIntentContinueInAppFlow<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for CallingIntentContinueInAppFlow();

  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t type metadata accessor for CallingIntentContinueInAppFlow()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for CallingIntentContinueInAppFlow()
{
  uint64_t result = type metadata accessor for IntentResolutionRecord();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unint64_t type metadata accessor for INIntentResponse()
{
  unint64_t result = lazy cache variable for type metadata for INIntentResponse;
  if (!lazy cache variable for type metadata for INIntentResponse)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for INIntentResponse);
  }
  return result;
}

uint64_t outlined init with take of [String]?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t OUTLINED_FUNCTION_4_39@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 16) = v2;
  return v1
       + ((*(unsigned __int8 *)(a1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(a1 + 80))
       + *(void *)(a1 + 72) * v3;
}

uint64_t OUTLINED_FUNCTION_6_28@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(a1 + v1 + 24);
  __swift_project_boxed_opaque_existential_1((void *)(a1 + v1), v2);
  return v2;
}

uint64_t OUTLINED_FUNCTION_11_23()
{
  return v0;
}

uint64_t DisambiguationItemFactory.buildDisambiguationItemList(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_1();
  uint64_t v11 = v10;
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v14);
  uint64_t v15 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload((uint64_t)v18, 1, 1, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v15, v5, a3);
  unint64_t v20 = (*(unsigned __int8 *)(v11 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v21 = (char *)swift_allocObject();
  *((void *)v21 + 2) = 0;
  *((void *)v21 + 3) = 0;
  *((void *)v21 + 4) = a3;
  *((void *)v21 + 5) = a4;
  *((void *)v21 + 6) = a1;
  *((void *)v21 + 7) = a2;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v21[v20], v15, a3);
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v18, (uint64_t)&async function pointer to partial apply for closure #1 in DisambiguationItemFactory.buildDisambiguationItemList(_:), (uint64_t)v21);
  return swift_release();
}

uint64_t closure #1 in DisambiguationItemFactory.buildDisambiguationItemList(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[2] = a4;
  v8[3] = a5;
  uint64_t v11 = (void *)swift_task_alloc();
  void v8[4] = v11;
  *uint64_t v11 = v8;
  v11[1] = closure #1 in DisambiguationItemFactory.buildDisambiguationItemList(_:);
  return DisambiguationItemFactory.buildDisambiguationItemList()(a7, a8);
}

uint64_t closure #1 in DisambiguationItemFactory.buildDisambiguationItemList(_:)()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 40) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  (*(void (**)(void))(v0 + 16))(*(void *)(v0 + 40));
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1023F0()
{
  uint64_t v1 = *(void *)(v0 + 32);
  OUTLINED_FUNCTION_1();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = (v6 + 64) & ~v6;
  uint64_t v8 = v7 + *(void *)(v5 + 64);
  uint64_t v9 = v6 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v7, v1);

  return _swift_deallocObject(v0, v8, v9);
}

uint64_t partial apply for closure #1 in DisambiguationItemFactory.buildDisambiguationItemList(_:)(uint64_t a1)
{
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = (uint64_t)v1
      + ((*(unsigned __int8 *)(*(void *)(v4 - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4 - 8) + 80));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = protocol witness for Flow.execute() in conformance CallingIntentContinueInAppFlow<A, B>;
  return closure #1 in DisambiguationItemFactory.buildDisambiguationItemList(_:)(a1, v6, v7, v8, v9, v10, v4, v5);
}

uint64_t DisambiguationItemFactory.buildDisambiguationItemList()(uint64_t a1, uint64_t a2)
{
  v3[14] = a2;
  v3[15] = v2;
  v3[13] = a1;
  uint64_t v4 = (void *)swift_task_alloc();
  v3[16] = v4;
  *uint64_t v4 = v3;
  v4[1] = DisambiguationItemFactory.buildDisambiguationItemList();
  return DisambiguationItemFactory.buildDisambiguationItems()();
}

uint64_t DisambiguationItemFactory.buildDisambiguationItemList()()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 136) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v4, v5, v6);
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t (*v20)(uint64_t);
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;

  uint64_t v26 = v0;
  uint64_t v1 = v0 + 13;
  uint64_t v2 = v0 + 2;
  os_log_type_t v22 = v0 + 7;
  uint64_t v3 = v0[14];
  (*(void (**)(void, uint64_t))(v3 + 16))(v0[13], v3);
  swift_getAssociatedTypeWitness();
  _arrayForceCast<A, B>(_:)();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void (**)(uint64_t))(v3 + 24);
  uint64_t v23 = (uint64_t)(v0 + 2);
  uint64_t v5 = OUTLINED_FUNCTION_4_40();
  v4(v5);
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[6];
  __swift_project_boxed_opaque_existential_1(v2, *(v1 - 8));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
  uint64_t v8 = OUTLINED_FUNCTION_4_40();
  v4(v8);
  uint64_t v9 = *(v1 - 3);
  uint64_t v10 = *(v1 - 2);
  __swift_project_boxed_opaque_existential_1(v22, v9);
  (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v9, v10);
  type metadata accessor for SiriKitDisambiguationList();
  swift_allocObject();
  uint64_t v11 = SiriKitDisambiguationList.init(rawItems:disambiguationItems:shouldReadItemsInVox:requestUnlockForEmptyOrDuplicateItems:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  __swift_destroy_boxed_opaque_existential_1(v23);
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.siriPhone);
  swift_retain_n();
  uint64_t v13 = Logger.logObject.getter();
  uint64_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315138;
    swift_retain();
    SiriKitDisambiguationList.description.getter();
    uint64_t v17 = v16;
    uint64_t v19 = v18;
    swift_release();
    *(v1 - 1) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_0, v13, v14, "Finished building SiriKitDisambiguationList: %s", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  unint64_t v20 = *(uint64_t (**)(uint64_t))(v24 + 8);
  return v20(v11);
}

uint64_t DisambiguationItemFactory.buildDisambiguationItems()()
{
  OUTLINED_FUNCTION_1_0();
  v1[7] = v2;
  v1[8] = v0;
  v1[6] = v3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v1[9] = AssociatedTypeWitness;
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  v1[10] = v5;
  v1[11] = *(void *)(v5 + 64);
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v6, v7, v8);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v3;
  Swift::Bool IsNativeType;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  __n128 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  long long v33;

  v0[2] = _swiftEmptyArrayStorage;
  v0[14] = (*(uint64_t (**)(void))(v0[7] + 16))(v0[6]);
  uint64_t v1 = Array.startIndex.getter();
  v0[3] = v1;
  if (v1 == Array.endIndex.getter())
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_2_42();
    __asm { BRAA            X2, X16 }
  }
  IsNativeType = Array._hoistableIsNativeTypeChecked()();
  Array._checkSubscript(_:wasNativeTypeChecked:)();
  if (IsNativeType)
  {
    (*(void (**)(void, unint64_t, void))(v0[10] + 16))(v0[13], v0[14]+ ((*(unsigned __int8 *)(v0[10] + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0[10] + 80))+ *(void *)(v0[10] + 72) * v1, v0[9]);
  }
  else
  {
    uint64_t v26 = v0[11];
    uint64_t v27 = _ArrayBuffer._getElementSlowPath(_:)();
    if (v26 != 8)
    {
      __break(1u);
      return withCheckedContinuation<A>(isolation:function:_:)();
    }
    uint64_t v28 = v27;
    uint64_t v29 = v0[13];
    uint64_t v30 = v0[9];
    uint64_t v31 = v0[10];
    v0[4] = v28;
    (*(void (**)(uint64_t, void *, uint64_t))(v31 + 16))(v29, v0 + 4, v30);
    swift_unknownObjectRelease();
  }
  uint64_t v5 = OUTLINED_FUNCTION_7_35();
  OUTLINED_FUNCTION_6_29(v5, v6, v7, v8, v9, v10, v11, v12, v33);
  swift_bridgeObjectRelease();
  uint64_t v13 = OUTLINED_FUNCTION_5_34();
  v14(v13);
  uint64_t v15 = (__n128 *)swift_task_alloc();
  OUTLINED_FUNCTION_8_39(v15, v16, v17, v18, v19, v20, v21, v22, v23);
  uint64_t v24 = (void *)swift_task_alloc();
  v0[16] = v24;
  type metadata accessor for SiriKitDisambiguationItem();
  char *v24 = v0;
  v24[1] = DisambiguationItemFactory.buildDisambiguationItems();
  OUTLINED_FUNCTION_3_41();
  OUTLINED_FUNCTION_2_42();
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  uint64_t *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_0_1();
  uint64_t v2 = v1[12];
  uint64_t v3 = v1[10];
  uint64_t v4 = v1[9];
  uint64_t v5 = *v0;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v3;
  Swift::Bool IsNativeType;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  __n128 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  long long v33;

  swift_retain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((char *)&dword_10 + (v0[2] & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                   + (v0[2] & 0xFFFFFFFFFFFFFF8)) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_release();
  uint64_t v1 = v0[3];
  if (v1 == Array.endIndex.getter())
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_2_42();
    __asm { BRAA            X2, X16 }
  }
  IsNativeType = Array._hoistableIsNativeTypeChecked()();
  Array._checkSubscript(_:wasNativeTypeChecked:)();
  if (IsNativeType)
  {
    (*(void (**)(void, unint64_t, void))(v0[10] + 16))(v0[13], v0[14]+ ((*(unsigned __int8 *)(v0[10] + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0[10] + 80))+ *(void *)(v0[10] + 72) * v1, v0[9]);
  }
  else
  {
    uint64_t v26 = v0[11];
    uint64_t v27 = _ArrayBuffer._getElementSlowPath(_:)();
    if (v26 != 8)
    {
      __break(1u);
      return withCheckedContinuation<A>(isolation:function:_:)();
    }
    uint64_t v28 = v27;
    uint64_t v29 = v0[13];
    uint64_t v30 = v0[9];
    uint64_t v31 = v0[10];
    v0[4] = v28;
    (*(void (**)(uint64_t, void *, uint64_t))(v31 + 16))(v29, v0 + 4, v30);
    swift_unknownObjectRelease();
  }
  uint64_t v5 = OUTLINED_FUNCTION_7_35();
  OUTLINED_FUNCTION_6_29(v5, v6, v7, v8, v9, v10, v11, v12, v33);
  swift_bridgeObjectRelease();
  uint64_t v13 = OUTLINED_FUNCTION_5_34();
  v14(v13);
  uint64_t v15 = (__n128 *)swift_task_alloc();
  OUTLINED_FUNCTION_8_39(v15, v16, v17, v18, v19, v20, v21, v22, v23);
  uint64_t v24 = (void *)swift_task_alloc();
  v0[16] = v24;
  type metadata accessor for SiriKitDisambiguationItem();
  char *v24 = v0;
  v24[1] = DisambiguationItemFactory.buildDisambiguationItems();
  OUTLINED_FUNCTION_3_41();
  OUTLINED_FUNCTION_2_42();
  return withCheckedContinuation<A>(isolation:function:_:)();
}

uint64_t closure #1 in DisambiguationItemFactory.buildDisambiguationItems()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<SiriKitDisambiguationItem, Never>);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v13 + v12, (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = _s27PhoneCallFlowDelegatePlugin25DisambiguationItemFactoryPAAE05buildF5Items33_C32737E71944EA4F5AB058928C30BAB3LLSay07SiriKitC00rsfG0CGyYaFyScCyAHs5NeverOGXEfU_yAHnYucALcfu_yAHnYucfu0_TA;
  *(void *)(v14 + 24) = v13;
  (*(void (**)(uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(a5 + 40))(a3, _s11SiriKitFlow0aB18DisambiguationItemCIegxT_ACIegg_TRTA, v14, a4, a5);
  return swift_release();
}

uint64_t _s27PhoneCallFlowDelegatePlugin25DisambiguationItemFactoryPAAE05buildF5Items33_C32737E71944EA4F5AB058928C30BAB3LLSay07SiriKitC00rsfG0CGyYaFyScCyAHs5NeverOGXEfU_yAHnYucALcfu_yAHnYucfu0_()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t partial apply for closure #1 in DisambiguationItemFactory.buildDisambiguationItems()(uint64_t a1)
{
  return closure #1 in DisambiguationItemFactory.buildDisambiguationItems()(a1, v1[4], v1[5], v1[2], v1[3]);
}

uint64_t sub_103374()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<SiriKitDisambiguationItem, Never>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t _s27PhoneCallFlowDelegatePlugin25DisambiguationItemFactoryPAAE05buildF5Items33_C32737E71944EA4F5AB058928C30BAB3LLSay07SiriKitC00rsfG0CGyYaFyScCyAHs5NeverOGXEfU_yAHnYucALcfu_yAHnYucfu0_TA()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<SiriKitDisambiguationItem, Never>);

  return _s27PhoneCallFlowDelegatePlugin25DisambiguationItemFactoryPAAE05buildF5Items33_C32737E71944EA4F5AB058928C30BAB3LLSay07SiriKitC00rsfG0CGyYaFyScCyAHs5NeverOGXEfU_yAHnYucALcfu_yAHnYucfu0_();
}

uint64_t sub_10347C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t _s11SiriKitFlow0aB18DisambiguationItemCIegxT_ACIegg_TRTA(uint64_t a1)
{
  return _s11SiriKitFlow0aB18DisambiguationItemCIegxT_ACIegg_TR(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t OUTLINED_FUNCTION_3_41()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_4_40()
{
  return v0;
}

void OUTLINED_FUNCTION_6_29(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  Array.formIndex(after:)(v9);
}

uint64_t OUTLINED_FUNCTION_7_35()
{
  return swift_bridgeObjectRetain();
}

__n128 OUTLINED_FUNCTION_8_39(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  *(void *)(v9 + 120) = a1;
  __n128 result = a9;
  a1[1] = a9;
  a1[2].n128_u64[0] = v11;
  a1[2].n128_u64[1] = v10;
  return result;
}

void *VoiceCommandsStartCallDirectAction.identifier.unsafeMutableAddressor()
{
  return &static VoiceCommandsStartCallDirectAction.identifier;
}

unint64_t static VoiceCommandsStartCallDirectAction.identifier.getter()
{
  return 0xD00000000000003CLL;
}

PhoneCallFlowDelegatePlugin::VoiceCommandsStartCallDirectAction_optional __swiftcall VoiceCommandsStartCallDirectAction.init(from:)(Swift::OpaquePointer from)
{
  if (!*((void *)from._rawValue + 2)) {
    goto LABEL_7;
  }
  unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)(0x6449707061, 0xE500000000000000);
  if ((v3 & 1) == 0) {
    goto LABEL_7;
  }
  outlined init with copy of Any(*((void *)from._rawValue + 7) + 32 * v2, (uint64_t)&v11);
  if ((OUTLINED_FUNCTION_0_31() & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v5 = (uint64_t)v9;
  uint64_t v4 = v10;
  specialized Dictionary.subscript.getter(0x746E65746E69, 0xE600000000000000, (uint64_t)from._rawValue, &v11);
  swift_bridgeObjectRelease();
  if (!v12)
  {
    swift_bridgeObjectRelease();
    outlined destroy of Any?((uint64_t)&v11);
    goto LABEL_8;
  }
  type metadata accessor for INStartCallIntent();
  if ((OUTLINED_FUNCTION_0_31() & 1) == 0)
  {
LABEL_7:
    swift_bridgeObjectRelease();
LABEL_8:
    uint64_t v5 = 0;
    uint64_t v4 = 0;
    uint64_t v6 = 0;
    goto LABEL_9;
  }
  uint64_t v6 = v9;
LABEL_9:
  uint64_t v7 = v5;
  uint64_t v8 = v4;
  result.value.intent.super.super.Class isa = v6;
  result.value.appId._object = v8;
  result.value.appId._uint64_t countAndFlagsBits = v7;
  return result;
}

uint64_t VoiceCommandsStartCallDirectAction.toDictionary()(uint64_t a1, uint64_t a2, void *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_467720;
  *(void *)(inited + 32) = 0x6449707061;
  *(void *)(inited + 40) = 0xE500000000000000;
  *(void *)(inited + 48) = a1;
  *(void *)(inited + 56) = a2;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 80) = 0x746E65746E69;
  *(void *)(inited + 88) = 0xE600000000000000;
  *(void *)(inited + 120) = type metadata accessor for INStartCallIntent();
  *(void *)(inited + 96) = a3;
  swift_bridgeObjectRetain();
  id v7 = a3;
  return Dictionary.init(dictionaryLiteral:)();
}

unint64_t type metadata accessor for INStartCallIntent()
{
  unint64_t result = lazy cache variable for type metadata for INStartCallIntent;
  if (!lazy cache variable for type metadata for INStartCallIntent)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for INStartCallIntent);
  }
  return result;
}

void destroy for VoiceCommandsStartCallDirectAction(uint64_t a1)
{
  swift_bridgeObjectRelease();
  unint64_t v2 = *(void **)(a1 + 16);
}

void *initializeBufferWithCopyOfBuffer for VoiceCommandsStartCallDirectAction(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain();
  id v5 = v4;
  return a1;
}

void *assignWithCopy for VoiceCommandsStartCallDirectAction(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a2[2];
  id v5 = (void *)a1[2];
  a1[2] = v4;
  id v6 = v4;

  return a1;
}

uint64_t assignWithTake for VoiceCommandsStartCallDirectAction(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  return a1;
}

uint64_t getEnumTagSinglePayload for VoiceCommandsStartCallDirectAction(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VoiceCommandsStartCallDirectAction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VoiceCommandsStartCallDirectAction()
{
  return &type metadata for VoiceCommandsStartCallDirectAction;
}

uint64_t OUTLINED_FUNCTION_0_31()
{
  return swift_dynamicCast();
}

uint64_t static ContactSlotResolver.makeMulticardinalResolver<A>(multicardinalIndex:rchFlowContext:sharedGlobals:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v17 = a2 & 1;
  if (a2) {
    a1 = 0;
  }
  uint64_t v16 = a1;
  type metadata accessor for AnyIntentResolver();
  type metadata accessor for _ContiguousArrayStorage();
  swift_allocObject();
  static Array._adoptStorage(_:count:)();
  outlined init with copy of SignalProviding(a6, (uint64_t)v20);
  default argument 1 of EmergencyContactSlotResolver.init(sharedGlobals:medicalIDStore:)(v19);
  BurstNotificationSearchManager.init(sharedGlobals:voicemailFinder:)(v20, v19, (uint64_t)v21);
  uint64_t v12 = type metadata accessor for EmergencyContactSlotResolver();
  swift_getWitnessTable();
  OUTLINED_FUNCTION_0_32();
  (*(void (**)(long long *, uint64_t))(*(void *)(v12 - 8) + 8))(v21, v12);
  OUTLINED_FUNCTION_1_43();
  outlined init with copy of SignalProviding(a6, (uint64_t)v21);
  *(void *)&v21[0] = SiriInferenceContactSlotResolver.__allocating_init(rchFlowContext:sharedGlobals:updateStrategy:)(a3, (uint64_t)a4, (uint64_t)a5, v21, v16, v17);
  id v13 = a5;
  swift_retain();
  id v14 = a4;
  swift_getWitnessTable();
  OUTLINED_FUNCTION_0_32();
  swift_release();
  type metadata accessor for Array();
  static SKIntentResolverChain.firstHit<A>(_:)(a7);
  return swift_bridgeObjectRelease();
}

uint64_t static ContactSlotResolver.make<A>(rchFlowContext:sharedGlobals:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  type metadata accessor for AnyIntentResolver();
  type metadata accessor for _ContiguousArrayStorage();
  swift_allocObject();
  static Array._adoptStorage(_:count:)();
  outlined init with copy of SignalProviding(a4, (uint64_t)v21);
  default argument 1 of EmergencyContactSlotResolver.init(sharedGlobals:medicalIDStore:)(v20);
  BurstNotificationSearchManager.init(sharedGlobals:voicemailFinder:)(v21, v20, (uint64_t)v22);
  uint64_t v13 = type metadata accessor for EmergencyContactSlotResolver();
  swift_getWitnessTable();
  OUTLINED_FUNCTION_0_32();
  (*(void (**)(long long *, uint64_t))(*(void *)(v13 - 8) + 8))(v22, v13);
  OUTLINED_FUNCTION_1_43();
  outlined init with copy of SignalProviding(a4, (uint64_t)v22);
  uint64_t v14 = variable initialization expression of IdentifyIncomingCallerDirectAction.handleType(a5, a6);
  *(void *)&v22[0] = SiriInferenceContactSlotResolver.__allocating_init(rchFlowContext:sharedGlobals:updateStrategy:)(a1, (uint64_t)a2, (uint64_t)a3, v22, v14, v15 & 1);
  id v16 = a3;
  swift_retain();
  id v17 = a2;
  swift_getWitnessTable();
  OUTLINED_FUNCTION_0_32();
  swift_release();
  type metadata accessor for Array();
  static SKIntentResolverChain.firstHit<A>(_:)(a7);
  return swift_bridgeObjectRelease();
}

ValueMetadata *type metadata accessor for ContactSlotResolver()
{
  return &type metadata for ContactSlotResolver;
}

uint64_t OUTLINED_FUNCTION_0_32()
{
  return SKIntentResolver.toAnyIntentResolver()(v1, v0);
}

uint64_t OUTLINED_FUNCTION_1_43()
{
  return type metadata accessor for SiriInferenceContactSlotResolver();
}

PhoneCallFlowDelegatePlugin::StartCallCATPatternsIdentifiers_optional __swiftcall StartCallCATPatternsIdentifiers.init(rawValue:)(Swift::String rawValue)
{
  unint64_t v1 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v1 >= 0x24) {
    return (PhoneCallFlowDelegatePlugin::StartCallCATPatternsIdentifiers_optional)36;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::StartCallCATPatternsIdentifiers_optional)v1;
  }
}

void StartCallCATPatternsIdentifiers.rawValue.getter(char a1)
{
  switch(a1)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
      OUTLINED_FUNCTION_24_10();
      break;
    default:
      return;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance StartCallCATPatternsIdentifiers(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance StartCallCATPatternsIdentifiers()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance StartCallCATPatternsIdentifiers(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance StartCallCATPatternsIdentifiers(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::StartCallCATPatternsIdentifiers_optional protocol witness for RawRepresentable.init(rawValue:) in conformance StartCallCATPatternsIdentifiers@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::StartCallCATPatternsIdentifiers_optional *a2@<X8>)
{
  result.value = StartCallCATPatternsIdentifiers.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance StartCallCATPatternsIdentifiers(void *a1@<X8>)
{
  StartCallCATPatternsIdentifiers.rawValue.getter(*v1);
  *a1 = v3;
  a1[1] = v4;
}

uint64_t StartCallUnsupportedCallCapabilityMicrophoneNotAccessibleParameters.appName.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_71_0();
  return _s16SiriDialogEngine15SpeakableStringVSgWOcTm_0(v0, v1, &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t StartCallConfirmContactsParameters.confirmAction.getter()
{
  return StartCallConfirmContactsParameters.confirmAction.getter();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;

  uint64_t v1 = OUTLINED_FUNCTION_87();
  uint64_t v3 = v2(v1);
  uint64_t v4 = OUTLINED_FUNCTION_94(v3);
  return _s16SiriDialogEngine15SpeakableStringVSgWOcTm_0(v4, v0, &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t type metadata accessor for StartCallConfirmContactsParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for StartCallConfirmContactsParameters);
}

uint64_t StartCallConfirmContactsParameters.confirmAction.setter()
{
  return StartCallConfirmContactsParameters.confirmAction.setter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  uint64_t v0 = OUTLINED_FUNCTION_37_6();
  v1(v0);
  uint64_t v2 = OUTLINED_FUNCTION_93_0();

  return outlined assign with take of SpeakableString?(v2, v3);
}

Swift::Void (__swiftcall *StartCallConfirmContactsParameters.confirmAction.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t StartCallConfirmContactsParameters.contactHeader.getter()
{
  return StartCallConfirmContactsParameters.contactHeader.getter();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;

  uint64_t v2 = OUTLINED_FUNCTION_87();
  uint64_t v4 = v3(v2);
  return _s16SiriDialogEngine15SpeakableStringVSgWOcTm_0(v1 + *(int *)(v4 + 24), v0, &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t StartCallConfirmContactsParameters.contactHeader.setter()
{
  return StartCallConfirmContactsParameters.contactHeader.setter();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t vars8;

  uint64_t v1 = OUTLINED_FUNCTION_37_6();
  v2(v1);
  OUTLINED_FUNCTION_53_1();

  return outlined assign with take of SpeakableString?(v0, v3);
}

Swift::Void (__swiftcall *StartCallConfirmContactsParameters.contactHeader.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t StartCallConfirmContactsParameters.contactToConfirm.getter()
{
  return StartCallConfirmContactsParameters.contactToConfirm.getter((void (*)(void))type metadata accessor for StartCallConfirmContactsParameters);
}

uint64_t StartCallConfirmContactsParameters.contactToConfirm.setter()
{
  return StartCallConfirmContactsParameters.contactToConfirm.setter();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t result;

  uint64_t v2 = OUTLINED_FUNCTION_37_6();
  uint64_t v4 = *(int *)(v3(v2) + 28);
  PhoneCallFlowDelegatePlugin::StartCallCATPatternsIdentifiers_optional result = swift_release();
  *(void *)(v1 + v4) = v0;
  return result;
}

Swift::Void (__swiftcall *StartCallConfirmContactsParameters.contactToConfirm.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t StartCallConfirmContactsParameters.inferenceSource.getter()
{
  return StartCallConfirmContactsParameters.inferenceSource.getter();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;

  uint64_t v2 = OUTLINED_FUNCTION_87();
  uint64_t v4 = v3(v2);
  return _s16SiriDialogEngine15SpeakableStringVSgWOcTm_0(v1 + *(int *)(v4 + 32), v0, &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t StartCallConfirmContactsParameters.inferenceSource.setter()
{
  return StartCallConfirmContactsParameters.inferenceSource.setter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  uint64_t v0 = OUTLINED_FUNCTION_37_6();
  v1(v0);
  uint64_t v2 = OUTLINED_FUNCTION_93_0();

  return outlined assign with take of SpeakableString?(v2, v3);
}

Swift::Void (__swiftcall *StartCallConfirmContactsParameters.inferenceSource.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t StartCallConfirmContactsParameters.isFaceTime.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for StartCallConfirmContactsParameters(0) + 36));
}

uint64_t StartCallConfirmContactsParameters.isFoundInAppConfirmation.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for StartCallConfirmContactsParameters(0) + 40));
}

uint64_t StartCallConfirmContactsParameters.isTopMatchConfirmation.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for StartCallConfirmContactsParameters(0) + 44));
}

uint64_t StartCallConfirmContactsParameters.redactedContactToConfirm.getter()
{
  type metadata accessor for StartCallConfirmContactsParameters(0);

  return swift_retain();
}

uint64_t StartCallConfirmContactsParameters.redactedContactToConfirm.setter()
{
  uint64_t v2 = *(int *)(OUTLINED_FUNCTION_108() + 48);
  uint64_t result = swift_release();
  *(void *)(v1 + v2) = v0;
  return result;
}

Swift::Void (__swiftcall *StartCallConfirmContactsParameters.redactedContactToConfirm.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t StartCallConfirmContactsParameters.rejectAction.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for StartCallConfirmContactsParameters(0);
  return _s16SiriDialogEngine15SpeakableStringVSgWOcTm_0(v1 + *(int *)(v3 + 52), a1, &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t StartCallConfirmContactsParameters.rejectAction.setter()
{
  type metadata accessor for StartCallConfirmContactsParameters(0);
  uint64_t v0 = OUTLINED_FUNCTION_93_0();

  return outlined assign with take of SpeakableString?(v0, v1);
}

Swift::Void (__swiftcall *StartCallConfirmContactsParameters.rejectAction.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

void StartCallConfirmContactsParameters.asKeyValuePairs()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  OUTLINED_FUNCTION_24_0();
  a19 = v23;
  a20 = v24;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v26 = OUTLINED_FUNCTION_11_0(v25);
  __chkstk_darwin(v26);
  OUTLINED_FUNCTION_29_9();
  uint64_t v28 = __chkstk_darwin(v27);
  uint64_t v30 = (char *)&a9 - v29;
  uint64_t v31 = __chkstk_darwin(v28);
  os_log_type_t v33 = (char *)&a9 - v32;
  uint64_t v34 = __chkstk_darwin(v31);
  long long v36 = (char *)&a9 - v35;
  __chkstk_darwin(v34);
  OUTLINED_FUNCTION_89_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_46DE30;
  unint64_t v38 = (uint64_t *)(v37 + 48);
  *(void *)(v37 + 32) = 0x6C646E7542707061;
  *(void *)(v37 + 40) = 0xEB00000000644965;
  _s16SiriDialogEngine15SpeakableStringVSgWOcTm_0(v21, v22, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v39 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_28_6(v22, 1, v39);
  if (v40)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v22, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)unint64_t v38 = 0u;
    *(_OWORD *)(v37 + 64) = 0u;
  }
  else
  {
    *(void *)(v37 + 72) = v39;
    __swift_allocate_boxed_opaque_existential_1(v38);
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_139();
    v41();
  }
  OUTLINED_FUNCTION_137();
  *(void *)(v37 + 80) = v42;
  *(void *)(v37 + 88) = 0xED00006E6F697463;
  uint64_t v43 = (int *)type metadata accessor for StartCallConfirmContactsParameters(0);
  uint64_t v44 = OUTLINED_FUNCTION_94((uint64_t)v43);
  _s16SiriDialogEngine15SpeakableStringVSgWOcTm_0(v44, (uint64_t)v36, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_28_6((uint64_t)v36, 1, v39);
  if (v40)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0((uint64_t)v36, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v37 + 96) = 0u;
    *(_OWORD *)(v37 + 112) = 0u;
  }
  else
  {
    *(void *)(v37 + 120) = v39;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v37 + 96));
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_139();
    v45();
  }
  strcpy((char *)(v37 + 128), "contactHeader");
  *(_WORD *)(v37 + 142) = -4864;
  _s16SiriDialogEngine15SpeakableStringVSgWOcTm_0(v21 + v43[6], (uint64_t)v33, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_28_6((uint64_t)v33, 1, v39);
  if (v40)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0((uint64_t)v33, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_103();
  }
  else
  {
    *(void *)(v37 + 168) = v39;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v37 + 144));
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_139();
    v46();
  }
  *(void *)(v37 + 176) = 0xD000000000000010;
  *(void *)(v37 + 184) = 0x80000000004938E0;
  uint64_t v47 = *(void *)(v21 + v43[7]);
  if (v47)
  {
    uint64_t v48 = type metadata accessor for DialogPerson();
    uint64_t v49 = v47;
  }
  else
  {
    uint64_t v48 = OUTLINED_FUNCTION_113();
  }
  *(void *)(v37 + 192) = v49;
  *(void *)(v37 + 216) = v48;
  *(void *)(v37 + 224) = 0x636E657265666E69;
  *(void *)(v37 + 232) = 0xEF656372756F5365;
  _s16SiriDialogEngine15SpeakableStringVSgWOcTm_0(v21 + v43[8], (uint64_t)v30, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_28_6((uint64_t)v30, 1, v39);
  if (v40)
  {
    swift_retain();
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0((uint64_t)v30, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_103();
  }
  else
  {
    *(void *)(v37 + 264) = v39;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v37 + 240));
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_70();
    v50();
    swift_retain();
  }
  OUTLINED_FUNCTION_25_3();
  *(void *)(v37 + 272) = v51;
  *(void *)(v37 + 280) = v52;
  *(unsigned char *)(v37 + 288) = *(unsigned char *)(v21 + v43[9]);
  *(void *)(v37 + 312) = &type metadata for Bool;
  *(void *)(v37 + 320) = 0xD000000000000018;
  OUTLINED_FUNCTION_41_0();
  *(void *)(v37 + 328) = v53;
  *(unsigned char *)(v37 + 336) = *(unsigned char *)(v21 + v43[10]);
  *(void *)(v37 + 360) = v54;
  *(void *)(v37 + 368) = 0xD000000000000016;
  OUTLINED_FUNCTION_41_0();
  *(void *)(v37 + 376) = v55;
  *(unsigned char *)(v37 + 384) = *(unsigned char *)(v21 + v43[11]);
  *(void *)(v37 + 408) = v56;
  *(void *)(v37 + 416) = 0xD000000000000018;
  OUTLINED_FUNCTION_41_0();
  *(void *)(v37 + 424) = v57;
  uint64_t v58 = *(void *)(v21 + v43[12]);
  if (v58)
  {
    type metadata accessor for DialogPerson();
    uint64_t v59 = v58;
  }
  else
  {
    OUTLINED_FUNCTION_34();
    *(void *)(v37 + 440) = 0;
    *(void *)(v37 + 448) = 0;
  }
  *(void *)(v37 + 432) = v59;
  OUTLINED_FUNCTION_154();
  *(void *)(v37 + 456) = v60;
  *(void *)(v37 + 464) = v61;
  *(void *)(v37 + 472) = 0xEC0000006E6F6974;
  _s16SiriDialogEngine15SpeakableStringVSgWOcTm_0(v21 + v43[13], v20, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_28_6(v20, 1, v39);
  if (v40)
  {
    swift_retain();
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v20, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_138();
  }
  else
  {
    *(void *)(v37 + 504) = v39;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v37 + 480));
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_70();
    v62();
    swift_retain();
  }
  OUTLINED_FUNCTION_152();
  OUTLINED_FUNCTION_26_1();
}

uint64_t StartCallConfirmContactsParameters.init(appBundleId:confirmAction:contactHeader:contactToConfirm:inferenceSource:isFaceTime:isFoundInAppConfirmation:isTopMatchConfirmation:redactedContactToConfirm:rejectAction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, char a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_148();
  outlined init with take of SpeakableString?(v17, v18);
  uint64_t v19 = (int *)type metadata accessor for StartCallConfirmContactsParameters(0);
  outlined init with take of SpeakableString?(v12, v13 + v19[5]);
  outlined init with take of SpeakableString?(v11, v13 + v19[6]);
  *(void *)(v13 + v19[7]) = v10;
  outlined init with take of SpeakableString?(a5, v13 + v19[8]);
  *(unsigned char *)(v13 + v19[9]) = a6;
  *(unsigned char *)(v13 + v19[10]) = a7;
  *(unsigned char *)(v13 + v19[11]) = a8;
  *(void *)(v13 + v19[12]) = a9;
  uint64_t v20 = v13 + v19[13];

  return outlined init with take of SpeakableString?(a10, v20);
}

uint64_t StartCallErrorWithCodeAirplaneModeEnabledParameters.isResponseFramework.getter()
{
  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t StartCallErrorWithCodeAirplaneModeEnabledParameters.settingsPunchOutAction.getter()
{
  return StartCallErrorWithCodeAirplaneModeEnabledParameters.settingsPunchOutAction.getter();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;

  uint64_t v2 = OUTLINED_FUNCTION_87();
  uint64_t v4 = v3(v2);
  return _s16SiriDialogEngine15SpeakableStringVSgWOcTm_0(v1 + *(int *)(v4 + 28), v0, &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t type metadata accessor for StartCallErrorWithCodeAirplaneModeEnabledParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for StartCallErrorWithCodeAirplaneModeEnabledParameters);
}

uint64_t StartCallErrorWithCodeAirplaneModeEnabledParameters.settingsPunchOutAction.setter()
{
  return StartCallErrorWithCodeAirplaneModeEnabledParameters.settingsPunchOutAction.setter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  uint64_t v0 = OUTLINED_FUNCTION_37_6();
  v1(v0);
  uint64_t v2 = OUTLINED_FUNCTION_93_0();

  return outlined assign with take of SpeakableString?(v2, v3);
}

Swift::Void (__swiftcall *StartCallErrorWithCodeAirplaneModeEnabledParameters.settingsPunchOutAction.modify())(Swift::OpaquePointer newCallGroups)
{
  uint64_t v0 = OUTLINED_FUNCTION_37_6();
  type metadata accessor for StartCallErrorWithCodeAirplaneModeEnabledParameters(v0);
  OUTLINED_FUNCTION_92_0();
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t StartCallErrorWithCodeAirplaneModeEnabledParameters.asKeyValuePairs()()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v3 = OUTLINED_FUNCTION_11_0(v2);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_18_8();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = swift_allocObject();
  OUTLINED_FUNCTION_27_0((__n128 *)v4, (__n128)xmmword_469650);
  uint64_t v5 = *v1;
  if (*v1)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState();
    uint64_t v7 = v5;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
    *(void *)(v4 + 56) = 0;
    *(void *)(v4 + 64) = 0;
  }
  *(void *)(v4 + 48) = v7;
  *(void *)(v4 + 72) = v6;
  *(void *)(v4 + 80) = 0x656772656D457369;
  *(void *)(v4 + 88) = 0xEB0000000079636ELL;
  *(unsigned char *)(v4 + 96) = *((unsigned char *)v1 + 8);
  *(void *)(v4 + 120) = &type metadata for Bool;
  *(void *)(v4 + 128) = 0xD000000000000013;
  *(void *)(v4 + 136) = 0x8000000000493960;
  *(unsigned char *)(v4 + 144) = *((unsigned char *)v1 + 9);
  *(void *)(v4 + 168) = &type metadata for Bool;
  *(void *)(v4 + 176) = 0xD000000000000016;
  OUTLINED_FUNCTION_41_0();
  *(void *)(v4 + 184) = v8;
  uint64_t v9 = type metadata accessor for StartCallErrorWithCodeAirplaneModeEnabledParameters(0);
  _s16SiriDialogEngine15SpeakableStringVSgWOcTm_0((uint64_t)v1 + *(int *)(v9 + 28), v0, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v10 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_28_6(v0, 1, v10);
  if (v11)
  {
    swift_retain();
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v0, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v4 + 192) = 0u;
    *(_OWORD *)(v4 + 208) = 0u;
  }
  else
  {
    *(void *)(v4 + 216) = v10;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v4 + 192));
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_70();
    v12();
    swift_retain();
  }
  return v4;
}

uint64_t StartCallErrorWithCodeAirplaneModeEnabledParameters.init(device:isEmergency:isResponseFramework:settingsPunchOutAction:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)a4 = a1;
  *(unsigned char *)(a4 + 8) = a2;
  *(unsigned char *)(a4 + 9) = a3;
  type metadata accessor for StartCallErrorWithCodeAirplaneModeEnabledParameters(0);
  uint64_t v4 = OUTLINED_FUNCTION_93_0();

  return outlined init with take of SpeakableString?(v4, v5);
}

uint64_t StartCallErrorWithCodeAppConfigurationRequiredParameters.isThirdPartyApp.getter()
{
  uint64_t v0 = type metadata accessor for StartCallErrorWithCodeAppConfigurationRequiredParameters(0);
  return OUTLINED_FUNCTION_145(v0);
}

uint64_t type metadata accessor for StartCallErrorWithCodeAppConfigurationRequiredParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for StartCallErrorWithCodeAppConfigurationRequiredParameters);
}

uint64_t StartCallErrorWithCodeAppConfigurationRequiredParameters.launchAppPunchOutAction.getter()
{
  return StartCallConfirmContactsParameters.contactHeader.getter();
}

uint64_t StartCallErrorWithCodeAppConfigurationRequiredParameters.launchAppPunchOutAction.setter()
{
  return StartCallConfirmContactsParameters.contactHeader.setter();
}

Swift::Void (__swiftcall *StartCallErrorWithCodeAppConfigurationRequiredParameters.launchAppPunchOutAction.modify())(Swift::OpaquePointer newCallGroups)
{
  uint64_t v0 = OUTLINED_FUNCTION_37_6();
  type metadata accessor for StartCallErrorWithCodeAppConfigurationRequiredParameters(v0);
  OUTLINED_FUNCTION_53_1();
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

void StartCallErrorWithCodeAppConfigurationRequiredParameters.asKeyValuePairs()()
{
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void, __n128);
  uint64_t (*v4)(void, __n128);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_28();
  uint64_t v4 = v3;
  uint64_t v5 = v1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = OUTLINED_FUNCTION_11_0(v6);
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_29_9();
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_89_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_46A250;
  OUTLINED_FUNCTION_105(v9);
  _s16SiriDialogEngine15SpeakableStringVSgWOcTm_0(v5, v2, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v10 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_30_0(v2);
  if (v11)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v2, &demangling cache variable for type metadata for SpeakableString?);
    v13.n128_f64[0] = OUTLINED_FUNCTION_138();
  }
  else
  {
    *(void *)(v9 + 72) = v10;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v9 + 48));
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v12 + 32))();
  }
  *(void *)(v9 + 80) = 0x5064726968547369;
  *(void *)(v9 + 88) = 0xEF70704179747261;
  *(unsigned char *)(v9 + 96) = *(unsigned char *)(v5 + *(int *)(v4(0, v13) + 20));
  *(void *)(v9 + 120) = &type metadata for Bool;
  *(void *)(v9 + 128) = 0xD000000000000017;
  OUTLINED_FUNCTION_41_0();
  *(void *)(v9 + 136) = v14;
  _s16SiriDialogEngine15SpeakableStringVSgWOcTm_0(v5 + *(int *)(v15 + 24), v0, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_30_0(v0);
  if (v11)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v0, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_118();
  }
  else
  {
    *(void *)(v9 + 168) = v10;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v9 + 144));
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v16 + 32))();
  }
  OUTLINED_FUNCTION_24();
}

uint64_t StartCallErrorWithCodeAppConfigurationRequiredParameters.init(appName:isThirdPartyApp:launchAppPunchOutAction:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return StartCallErrorWithCodeAppConfigurationRequiredParameters.init(appName:isThirdPartyApp:launchAppPunchOutAction:)(a1, a2, a3, type metadata accessor for StartCallErrorWithCodeAppConfigurationRequiredParameters, a4);
}

uint64_t StartCallErrorWithCodeCallInProgressParameters.asKeyValuePairs()(uint64_t a1, uint64_t a2)
{
  return OUTLINED_FUNCTION_31_10(a1, a2, (uint64_t (*)(void))&type metadata accessor for SirikitDeviceState);
}

uint64_t StartCallErrorWithCodeCallingServiceNotAvailableParameters.isThirdPartyApp.getter()
{
  uint64_t v0 = type metadata accessor for StartCallErrorWithCodeCallingServiceNotAvailableParameters(0);
  return OUTLINED_FUNCTION_145(v0);
}

uint64_t type metadata accessor for StartCallErrorWithCodeCallingServiceNotAvailableParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for StartCallErrorWithCodeCallingServiceNotAvailableParameters);
}

uint64_t StartCallErrorWithCodeCallingServiceNotAvailableParameters.launchAppPunchOutAction.getter()
{
  return StartCallConfirmContactsParameters.contactHeader.getter();
}

uint64_t StartCallErrorWithCodeCallingServiceNotAvailableParameters.launchAppPunchOutAction.setter()
{
  return StartCallConfirmContactsParameters.contactHeader.setter();
}

Swift::Void (__swiftcall *StartCallErrorWithCodeCallingServiceNotAvailableParameters.launchAppPunchOutAction.modify())(Swift::OpaquePointer newCallGroups)
{
  uint64_t v0 = OUTLINED_FUNCTION_37_6();
  type metadata accessor for StartCallErrorWithCodeCallingServiceNotAvailableParameters(v0);
  OUTLINED_FUNCTION_53_1();
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

void StartCallErrorWithCodeCallingServiceNotAvailableParameters.asKeyValuePairs()()
{
}

uint64_t StartCallErrorWithCodeCallingServiceNotAvailableParameters.init(appName:isThirdPartyApp:launchAppPunchOutAction:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return StartCallErrorWithCodeAppConfigurationRequiredParameters.init(appName:isThirdPartyApp:launchAppPunchOutAction:)(a1, a2, a3, type metadata accessor for StartCallErrorWithCodeCallingServiceNotAvailableParameters, a4);
}

uint64_t StartCallErrorWithCodeAppConfigurationRequiredParameters.init(appName:isThirdPartyApp:launchAppPunchOutAction:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  outlined init with take of SpeakableString?(a1, a5);
  uint64_t v9 = a4(0);
  *(unsigned char *)(a5 + *(int *)(v9 + 20)) = a2;
  uint64_t v10 = a5 + *(int *)(v9 + 24);

  return outlined init with take of SpeakableString?(a3, v10);
}

uint64_t StartCallErrorWithCodeContactNotSupportedByAppParameters.isThirdPartyApp.getter()
{
  uint64_t v0 = type metadata accessor for StartCallErrorWithCodeContactNotSupportedByAppParameters(0);
  return OUTLINED_FUNCTION_145(v0);
}

uint64_t type metadata accessor for StartCallErrorWithCodeContactNotSupportedByAppParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for StartCallErrorWithCodeContactNotSupportedByAppParameters);
}

uint64_t StartCallErrorWithCodeContactNotSupportedByAppParameters.launchAppPunchOutAction.getter()
{
  return StartCallConfirmContactsParameters.contactHeader.getter();
}

uint64_t StartCallErrorWithCodeContactNotSupportedByAppParameters.launchAppPunchOutAction.setter()
{
  return StartCallConfirmContactsParameters.contactHeader.setter();
}

Swift::Void (__swiftcall *StartCallErrorWithCodeContactNotSupportedByAppParameters.launchAppPunchOutAction.modify())(Swift::OpaquePointer newCallGroups)
{
  uint64_t v0 = OUTLINED_FUNCTION_37_6();
  type metadata accessor for StartCallErrorWithCodeContactNotSupportedByAppParameters(v0);
  OUTLINED_FUNCTION_53_1();
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

void StartCallErrorWithCodeContactNotSupportedByAppParameters.asKeyValuePairs()()
{
}

uint64_t StartCallErrorWithCodeContactNotSupportedByAppParameters.init(appName:isThirdPartyApp:launchAppPunchOutAction:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return StartCallErrorWithCodeAppConfigurationRequiredParameters.init(appName:isThirdPartyApp:launchAppPunchOutAction:)(a1, a2, a3, type metadata accessor for StartCallErrorWithCodeContactNotSupportedByAppParameters, a4);
}

uint64_t StartCallErrorWithCodeDownTimeRestrictionEnabledParameters.intent.getter()
{
  return swift_retain();
}

uint64_t StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters.intent.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t StartCallErrorWithCodeDownTimeRestrictionEnabledParameters.asKeyValuePairs()(uint64_t a1, uint64_t a2)
{
  return StartCallErrorWithCodeDownTimeRestrictionEnabledParameters.asKeyValuePairs()(a1, a2, 0x73746361746E6F63, 0xE800000000000000, (uint64_t (*)(void))type metadata accessor for PhonePersonList);
}

void INStartVideoCallIntent.faceTimeLink.getter()
{
}

uint64_t StartCallIntentConfirmationParameters.asKeyValuePairs()(uint64_t a1)
{
  return StartCallErrorWithCodeCallInProgressParameters.asKeyValuePairs()(a1, 0x746E65746E69, type metadata accessor for PhoneStartCallIntent);
}

uint64_t StartCallIntentConfirmationWithRestrictedContactsParameters.confirmAction.getter()
{
  return StartCallConfirmContactsParameters.confirmAction.getter();
}

uint64_t type metadata accessor for StartCallIntentConfirmationWithRestrictedContactsParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for StartCallIntentConfirmationWithRestrictedContactsParameters);
}

uint64_t StartCallIntentConfirmationWithRestrictedContactsParameters.confirmAction.setter()
{
  return StartCallConfirmContactsParameters.confirmAction.setter();
}

Swift::Void (__swiftcall *StartCallIntentConfirmationWithRestrictedContactsParameters.confirmAction.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t StartCallIntentConfirmationWithRestrictedContactsParameters.intent.getter()
{
  return StartCallIntentConfirmationWithRestrictedContactsParameters.intent.getter((void (*)(void))type metadata accessor for StartCallIntentConfirmationWithRestrictedContactsParameters);
}

uint64_t StartCallIntentConfirmationWithRestrictedContactsParameters.intent.setter()
{
  return StartCallIntentConfirmationWithRestrictedContactsParameters.intent.setter();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t result;

  uint64_t v2 = OUTLINED_FUNCTION_37_6();
  uint64_t v4 = *(int *)(v3(v2) + 24);
  uint64_t result = swift_release();
  *(void *)(v1 + v4) = v0;
  return result;
}

Swift::Void (__swiftcall *StartCallIntentConfirmationWithRestrictedContactsParameters.intent.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t StartCallIntentConfirmationWithRestrictedContactsParameters.rejectAction.getter()
{
  return StartCallErrorWithCodeAirplaneModeEnabledParameters.settingsPunchOutAction.getter();
}

uint64_t StartCallIntentConfirmationWithRestrictedContactsParameters.rejectAction.setter()
{
  return StartCallErrorWithCodeAirplaneModeEnabledParameters.settingsPunchOutAction.setter();
}

Swift::Void (__swiftcall *StartCallIntentConfirmationWithRestrictedContactsParameters.rejectAction.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t StartCallIntentConfirmationWithRestrictedContactsParameters.restrictedContacts.getter()
{
  type metadata accessor for StartCallIntentConfirmationWithRestrictedContactsParameters(0);

  return swift_retain();
}

uint64_t StartCallIntentConfirmationWithRestrictedContactsParameters.restrictedContacts.setter()
{
  uint64_t v2 = *(int *)(OUTLINED_FUNCTION_123() + 32);
  uint64_t result = swift_release();
  *(void *)(v1 + v2) = v0;
  return result;
}

Swift::Void (__swiftcall *StartCallIntentConfirmationWithRestrictedContactsParameters.restrictedContacts.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

void StartCallIntentConfirmationWithRestrictedContactsParameters.asKeyValuePairs()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  OUTLINED_FUNCTION_28();
  a17 = v20;
  a18 = v21;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v23 = OUTLINED_FUNCTION_11_0(v22);
  uint64_t v24 = __chkstk_darwin(v23);
  uint64_t v26 = (char *)&a9 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  OUTLINED_FUNCTION_89_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_46DE40;
  *(void *)(v27 + 32) = 0x436465776F6C6C61;
  *(void *)(v27 + 40) = 0xEF73746361746E6FLL;
  uint64_t v28 = *v18;
  if (*v18)
  {
    type metadata accessor for PhonePersonList();
    uint64_t v29 = v28;
  }
  else
  {
    OUTLINED_FUNCTION_34();
    *(void *)(v27 + 56) = 0;
    *(void *)(v27 + 64) = 0;
  }
  *(void *)(v27 + 48) = v29;
  OUTLINED_FUNCTION_137();
  *(void *)(v27 + 72) = v30;
  *(void *)(v27 + 80) = v31;
  *(void *)(v27 + 88) = 0xED00006E6F697463;
  uint64_t v32 = (int *)type metadata accessor for StartCallIntentConfirmationWithRestrictedContactsParameters(0);
  uint64_t v33 = OUTLINED_FUNCTION_94((uint64_t)v32);
  _s16SiriDialogEngine15SpeakableStringVSgWOcTm_0(v33, v19, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v34 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_30_0(v19);
  if (v35)
  {
    swift_retain();
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v19, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_103();
  }
  else
  {
    *(void *)(v27 + 120) = v34;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v27 + 96));
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_70();
    v36();
    swift_retain();
  }
  OUTLINED_FUNCTION_133();
  *(void *)(v27 + 128) = v37;
  *(void *)(v27 + 136) = v38;
  uint64_t v39 = *(uint64_t *)((char *)v18 + v32[6]);
  if (v39)
  {
    type metadata accessor for PhoneStartCallIntent(0);
    uint64_t v40 = v39;
  }
  else
  {
    OUTLINED_FUNCTION_34();
    *(void *)(v27 + 152) = 0;
    *(void *)(v27 + 160) = 0;
  }
  *(void *)(v27 + 144) = v40;
  OUTLINED_FUNCTION_154();
  *(void *)(v27 + 168) = v41;
  *(void *)(v27 + 176) = v42;
  *(void *)(v27 + 184) = 0xEC0000006E6F6974;
  _s16SiriDialogEngine15SpeakableStringVSgWOcTm_0((uint64_t)v18 + v32[7], (uint64_t)v26, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_30_0((uint64_t)v26);
  if (v35)
  {
    swift_retain();
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0((uint64_t)v26, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_138();
  }
  else
  {
    *(void *)(v27 + 216) = v34;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v27 + 192));
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_70();
    v43();
    swift_retain();
  }
  OUTLINED_FUNCTION_134();
  *(void *)(v27 + 224) = v44;
  *(void *)(v27 + 232) = v45;
  uint64_t v46 = *(uint64_t *)((char *)v18 + v32[8]);
  if (v46)
  {
    uint64_t v47 = type metadata accessor for PhonePersonList();
  }
  else
  {
    uint64_t v47 = 0;
    *(void *)(v27 + 248) = 0;
    *(void *)(v27 + 256) = 0;
  }
  *(void *)(v27 + 240) = v46;
  *(void *)(v27 + 264) = v47;
  swift_retain();
  OUTLINED_FUNCTION_24();
}

uint64_t StartCallIntentConfirmationWithRestrictedContactsParameters.init()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = OUTLINED_FUNCTION_95_1(a1);
  uint64_t v3 = type metadata accessor for StartCallIntentConfirmationWithRestrictedContactsParameters(v2);
  uint64_t v4 = OUTLINED_FUNCTION_62_3();
  OUTLINED_FUNCTION_104_0(v4);
  uint64_t v6 = OUTLINED_FUNCTION_60_2(v5);
  uint64_t result = __swift_storeEnumTagSinglePayload(v6, v7, v8, v9);
  *(void *)(v1 + *(int *)(v3 + 32)) = 0;
  return result;
}

uint64_t StartCallIntentConfirmationWithRestrictedContactsParameters.init(allowedContacts:confirmAction:intent:rejectAction:restrictedContacts:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v7 = OUTLINED_FUNCTION_98(a1, a2);
  uint64_t v8 = type metadata accessor for StartCallIntentConfirmationWithRestrictedContactsParameters(v7);
  OUTLINED_FUNCTION_136(v8);
  *(void *)(v5 + v6[6]) = v4;
  uint64_t result = outlined init with take of SpeakableString?(v3, v5 + v6[7]);
  *(void *)(v5 + v6[8]) = v2;
  return result;
}

uint64_t StartCallIntentHandledResponseParameters.device.getter()
{
  return StartCallIntentHandledResponseParameters.device.getter((void (*)(void))type metadata accessor for StartCallIntentHandledResponseParameters);
}

uint64_t type metadata accessor for StartCallIntentHandledResponseParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for StartCallIntentHandledResponseParameters);
}

uint64_t StartCallIntentHandledResponseParameters.device.setter()
{
  return StartCallIntentHandledResponseParameters.device.setter();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t result;

  uint64_t v2 = OUTLINED_FUNCTION_37_6();
  uint64_t v4 = *(int *)(v3(v2) + 20);
  uint64_t result = swift_release();
  *(void *)(v1 + v4) = v0;
  return result;
}

Swift::Void (__swiftcall *StartCallIntentHandledResponseParameters.device.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t StartCallIntentHandledResponseParameters.hintIdentifier.getter()
{
  return StartCallConfirmContactsParameters.contactHeader.getter();
}

uint64_t StartCallIntentHandledResponseParameters.hintIdentifier.setter()
{
  return StartCallConfirmContactsParameters.contactHeader.setter();
}

Swift::Void (__swiftcall *StartCallIntentHandledResponseParameters.hintIdentifier.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t StartCallIntentHandledResponseParameters.intent.getter()
{
  return StartCallConfirmContactsParameters.contactToConfirm.getter((void (*)(void))type metadata accessor for StartCallIntentHandledResponseParameters);
}

uint64_t StartCallConfirmContactsParameters.contactToConfirm.getter(void (*a1)(void))
{
  a1(0);

  return swift_retain();
}

uint64_t StartCallIntentHandledResponseParameters.intent.setter()
{
  return StartCallConfirmContactsParameters.contactToConfirm.setter();
}

Swift::Void (__swiftcall *StartCallIntentHandledResponseParameters.intent.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t StartCallIntentHandledResponseParameters.isFirstPartyApp.getter()
{
  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for StartCallIntentHandledResponseParameters(0) + 32));
}

uint64_t StartCallIntentHandledResponseParameters.isWalkieTalkie.getter()
{
  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for StartCallIntentHandledResponseParameters(0) + 36));
}

uint64_t StartCallIntentHandledResponseParameters.redactedContacts.getter()
{
  type metadata accessor for StartCallIntentHandledResponseParameters(0);

  return swift_retain();
}

uint64_t StartCallIntentHandledResponseParameters.redactedContacts.setter()
{
  uint64_t v2 = *(int *)(OUTLINED_FUNCTION_122() + 40);
  uint64_t result = swift_release();
  *(void *)(v1 + v2) = v0;
  return result;
}

Swift::Void (__swiftcall *StartCallIntentHandledResponseParameters.redactedContacts.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t StartCallIntentHandledResponseParameters.shouldPrintDialogOnDisplayMode.getter()
{
  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for StartCallIntentHandledResponseParameters(0) + 44));
}

void StartCallIntentHandledResponseParameters.asKeyValuePairs()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  OUTLINED_FUNCTION_28();
  a17 = v19;
  a18 = v20;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v22 = OUTLINED_FUNCTION_11_0(v21);
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v25 = (char *)&a9 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&a9 - v26;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_46DE50;
  uint64_t v29 = (uint64_t *)(v28 + 48);
  OUTLINED_FUNCTION_36_8(v28);
  uint64_t v30 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_30_0((uint64_t)v27);
  if (v31)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0((uint64_t)v27, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v29 = 0u;
    *(_OWORD *)(v28 + 64) = 0u;
  }
  else
  {
    *(void *)(v28 + 72) = v30;
    __swift_allocate_boxed_opaque_existential_1(v29);
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_99();
    v32();
  }
  *(void *)(v28 + 80) = 0x656369766564;
  *(void *)(v28 + 88) = 0xE600000000000000;
  uint64_t v33 = (int *)type metadata accessor for StartCallIntentHandledResponseParameters(0);
  uint64_t v34 = *(void *)(v18 + v33[5]);
  if (v34)
  {
    uint64_t v35 = type metadata accessor for SirikitDeviceState();
    uint64_t v36 = v34;
  }
  else
  {
    uint64_t v35 = OUTLINED_FUNCTION_34();
    *(void *)(v28 + 104) = 0;
    *(void *)(v28 + 112) = 0;
  }
  *(void *)(v28 + 96) = v36;
  *(void *)(v28 + 120) = v35;
  strcpy((char *)(v28 + 128), "hintIdentifier");
  *(unsigned char *)(v28 + 143) = -18;
  _s16SiriDialogEngine15SpeakableStringVSgWOcTm_0(v18 + v33[6], (uint64_t)v25, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_30_0((uint64_t)v25);
  if (v31)
  {
    swift_retain();
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0((uint64_t)v25, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_138();
  }
  else
  {
    *(void *)(v28 + 168) = v30;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v28 + 144));
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_70();
    v37();
    swift_retain();
  }
  OUTLINED_FUNCTION_133();
  *(void *)(v28 + 176) = v38;
  *(void *)(v28 + 184) = v39;
  uint64_t v40 = *(void *)(v18 + v33[7]);
  if (v40)
  {
    type metadata accessor for PhoneStartCallIntent(0);
    uint64_t v41 = v40;
  }
  else
  {
    OUTLINED_FUNCTION_34();
    *(void *)(v28 + 200) = 0;
    *(void *)(v28 + 208) = 0;
  }
  *(void *)(v28 + 192) = v41;
  OUTLINED_FUNCTION_132();
  *(void *)(v28 + 216) = v42;
  *(void *)(v28 + 224) = v43;
  OUTLINED_FUNCTION_142();
  *(void *)(v28 + 232) = v44;
  *(unsigned char *)(v28 + 240) = *(unsigned char *)(v18 + v33[8]);
  *(void *)(v28 + 264) = &type metadata for Bool;
  strcpy((char *)(v28 + 272), "isWalkieTalkie");
  *(unsigned char *)(v28 + 287) = -18;
  *(unsigned char *)(v28 + 288) = *(unsigned char *)(v18 + v33[9]);
  *(void *)(v28 + 312) = &type metadata for Bool;
  *(void *)(v28 + 320) = 0xD000000000000010;
  OUTLINED_FUNCTION_41_0();
  *(void *)(v28 + 328) = v45;
  uint64_t v46 = *(void *)(v18 + v33[10]);
  if (v46)
  {
    uint64_t v47 = type metadata accessor for PhonePersonList();
  }
  else
  {
    uint64_t v47 = 0;
    *(void *)(v28 + 344) = 0;
    *(void *)(v28 + 352) = 0;
  }
  *(void *)(v28 + 336) = v46;
  *(void *)(v28 + 360) = v47;
  *(void *)(v28 + 368) = 0xD00000000000001ELL;
  OUTLINED_FUNCTION_41_0();
  *(void *)(v28 + 376) = v48;
  LOBYTE(v48) = *(unsigned char *)(v18 + v33[11]);
  *(void *)(v28 + 408) = &type metadata for Bool;
  *(unsigned char *)(v28 + 384) = v48;
  swift_retain();
  swift_retain();
  OUTLINED_FUNCTION_24();
}

void StartCallIntentHandledResponseParameters.init(appName:device:hintIdentifier:intent:isFirstPartyApp:isWalkieTalkie:redactedContacts:shouldPrintDialogOnDisplayMode:)()
{
  OUTLINED_FUNCTION_24_0();
  char v5 = v4;
  uint64_t v7 = v6;
  char v9 = v8;
  char v11 = v10;
  OUTLINED_FUNCTION_148();
  outlined init with take of SpeakableString?(v12, v13);
  uint64_t v14 = (int *)type metadata accessor for StartCallIntentHandledResponseParameters(0);
  *(void *)(v3 + v14[5]) = v2;
  outlined init with take of SpeakableString?(v1, v3 + v14[6]);
  *(void *)(v3 + v14[7]) = v0;
  *(unsigned char *)(v3 + v14[8]) = v11;
  *(unsigned char *)(v3 + v14[9]) = v9;
  *(void *)(v3 + v14[10]) = v7;
  *(unsigned char *)(v3 + v14[11]) = v5;
  OUTLINED_FUNCTION_26_1();
}

uint64_t StartCallErrorWithCodeCallInProgressParameters.asKeyValuePairs()(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v6 = OUTLINED_FUNCTION_31_0();
  *(_OWORD *)(v6 + 16) = xmmword_467710;
  *(void *)(v6 + 32) = a2;
  *(void *)(v6 + 40) = 0xE600000000000000;
  if (a1)
  {
    uint64_t v7 = a3(0);
    uint64_t v8 = a1;
  }
  else
  {
    uint64_t v7 = OUTLINED_FUNCTION_34();
    *(void *)(v6 + 56) = 0;
    *(void *)(v6 + 64) = 0;
  }
  *(void *)(v6 + 48) = v8;
  *(void *)(v6 + 72) = v7;
  swift_retain();
  return v6;
}

uint64_t StartCallPromptForContactsParameters.isFaceTime.getter()
{
  uint64_t v0 = type metadata accessor for StartCallPromptForContactsParameters(0);
  return OUTLINED_FUNCTION_145(v0);
}

uint64_t StartCallPromptForContactsParameters.isUnsupportedFollowUp.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for StartCallPromptForContactsParameters(0) + 24));
}

uint64_t StartCallPromptForContactsParameters.rePromptCount.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for StartCallPromptForContactsParameters(0) + 28));
}

uint64_t StartCallPromptForContactsParameters.rePromptCount.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for StartCallPromptForContactsParameters(0);
  uint64_t v6 = v2 + *(int *)(result + 28);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

Swift::Void (__swiftcall *StartCallPromptForContactsParameters.rePromptCount.modify())(Swift::OpaquePointer newCallGroups)
{
  uint64_t v0 = OUTLINED_FUNCTION_37_6();
  type metadata accessor for StartCallPromptForContactsParameters(v0);
  OUTLINED_FUNCTION_92_0();
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t StartCallPromptForContactsParameters.startingOver.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for StartCallPromptForContactsParameters(0) + 32));
}

int *StartCallPromptForContactsParameters.init(appName:isFaceTime:isUnsupportedFollowUp:rePromptCount:startingOver:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X8>)
{
  outlined init with take of SpeakableString?(a1, a7);
  uint64_t result = (int *)type metadata accessor for StartCallPromptForContactsParameters(0);
  *(unsigned char *)(a7 + result[5]) = a2;
  *(unsigned char *)(a7 + result[6]) = a3;
  uint64_t v14 = a7 + result[7];
  *(void *)uint64_t v14 = a4;
  *(unsigned char *)(v14 + 8) = a5 & 1;
  *(unsigned char *)(a7 + result[8]) = a6;
  return result;
}

uint64_t ContactDisambiguationPromptResponseParser.personsToDisambiguate.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t StartCallSimpleDisambiguateContactsParameters.requestedRelationship.getter()
{
  return StartCallConfirmContactsParameters.confirmAction.getter();
}

uint64_t type metadata accessor for StartCallSimpleDisambiguateContactsParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for StartCallSimpleDisambiguateContactsParameters);
}

uint64_t StartCallSimpleDisambiguateContactsParameters.requestedRelationship.setter()
{
  return StartCallConfirmContactsParameters.confirmAction.setter();
}

Swift::Void (__swiftcall *StartCallSimpleDisambiguateContactsParameters.requestedRelationship.modify())(Swift::OpaquePointer newCallGroups)
{
  uint64_t v0 = OUTLINED_FUNCTION_37_6();
  type metadata accessor for StartCallSimpleDisambiguateContactsParameters(v0);
  OUTLINED_FUNCTION_69();
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t StartCallSimpleDisambiguateContactsParameters.asKeyValuePairs()()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v3 = OUTLINED_FUNCTION_11_0(v2);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_18_8();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_36_2();
  *(_OWORD *)(v4 + 16) = xmmword_467720;
  *(void *)(v4 + 32) = 0x736D657469;
  *(void *)(v4 + 40) = 0xE500000000000000;
  uint64_t v5 = *v1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PhonePersonAndVisualData]);
  *(void *)(v4 + 48) = v5;
  *(void *)(v4 + 72) = v6;
  *(void *)(v4 + 80) = 0xD000000000000015;
  uint64_t v7 = OUTLINED_FUNCTION_150((uint64_t)"requestedRelationship");
  uint64_t v8 = type metadata accessor for StartCallSimpleDisambiguateContactsParameters(v7);
  uint64_t v9 = OUTLINED_FUNCTION_94(v8);
  _s16SiriDialogEngine15SpeakableStringVSgWOcTm_0(v9, v0, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v10 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_28_6(v0, 1, v10);
  if (v11)
  {
    swift_bridgeObjectRetain();
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v0, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v4 + 96) = 0u;
    *(_OWORD *)(v4 + 112) = 0u;
  }
  else
  {
    *(void *)(v4 + 120) = v10;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v4 + 96));
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_70();
    v12();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t StartCallSimpleDisambiguateContactsParameters.init(items:requestedRelationship:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return StartCallSimpleDisambiguateContactsParameters.init(items:requestedRelationship:)(a1, (void (*)(void))type metadata accessor for StartCallSimpleDisambiguateContactsParameters, a2);
}

uint64_t ForcedAppDisambiguationHistory.phase.getter(char a1)
{
  return a1 & 1;
}

uint64_t LogPrefix.tags.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t StartCallSimpleDisambiguateContactsHandlesParameters.requestedContact.getter()
{
  return swift_retain();
}

uint64_t StartCallSimpleDisambiguateContactsHandlesParameters.requestedContact.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t StartCallSimpleDisambiguateContactsHandlesParameters.asKeyValuePairs()(__int16 a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_469650;
  *(void *)(v6 + 32) = 0xD000000000000021;
  *(void *)(v6 + 40) = 0x8000000000493A60;
  *(unsigned char *)(v6 + 48) = a1 & 1;
  *(void *)(v6 + 72) = &type metadata for Bool;
  *(void *)(v6 + 80) = 0xD000000000000012;
  OUTLINED_FUNCTION_134();
  *(void *)(v7 + 88) = v8;
  *(unsigned char *)(v7 + 96) = HIBYTE(a1) & 1;
  *(void *)(v7 + 120) = v9;
  *(void *)(v7 + 128) = 0x736D657469;
  *(void *)(v7 + 136) = 0xE500000000000000;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PhonePersonAndVisualData]);
  *(void *)(v6 + 144) = a2;
  *(void *)(v6 + 168) = v10;
  *(void *)(v6 + 176) = 0xD000000000000010;
  *(void *)(v6 + 184) = 0x8000000000493AB0;
  if (a3)
  {
    uint64_t v11 = type metadata accessor for DialogPerson();
    uint64_t v12 = a3;
  }
  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_113();
  }
  *(void *)(v6 + 192) = v12;
  *(void *)(v6 + 216) = v11;
  swift_bridgeObjectRetain();
  swift_retain();
  return v6;
}

uint64_t StartCallSimpleDisambiguateContactsHandlesParameters.init(isPhoneNumberHandleDisambiguation:isRequestForHandle:items:requestedContact:)(char a1, char a2)
{
  if (a2) {
    int v2 = 256;
  }
  else {
    int v2 = 0;
  }
  return v2 & 0xFFFFFFFE | a1 & 1;
}

uint64_t StartCallUnsupportedCallCapabilityCameraNotAccessibleParameters.init()()
{
  type metadata accessor for SpeakableString();
  uint64_t v0 = OUTLINED_FUNCTION_17_1();

  return __swift_storeEnumTagSinglePayload(v0, v1, v2, v3);
}

uint64_t StartCallUnsupportedCallCapabilityCameraNotAccessibleParameters.asKeyValuePairs()()
{
  uint64_t v2 = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v4 = OUTLINED_FUNCTION_11_0(v3);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_18_8();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_31_0();
  *(_OWORD *)(v5 + 16) = xmmword_467710;
  uint64_t v6 = (uint64_t *)(v5 + 48);
  OUTLINED_FUNCTION_105(v5);
  _s16SiriDialogEngine15SpeakableStringVSgWOcTm_0(v2, v0, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_28_6(v0, 1, v7);
  if (v8)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v0, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v6 = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
  }
  else
  {
    *(void *)(v5 + 72) = v7;
    __swift_allocate_boxed_opaque_existential_1(v6);
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_139();
    v9();
  }
  return v5;
}

uint64_t StartCallUnsupportedContactsInvalidHandleParameters.launchAppPunchOutAction.getter()
{
  return StartCallConfirmContactsParameters.confirmAction.getter();
}

uint64_t type metadata accessor for StartCallUnsupportedContactsInvalidHandleParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for StartCallUnsupportedContactsInvalidHandleParameters);
}

uint64_t StartCallUnsupportedContactsInvalidHandleParameters.launchAppPunchOutAction.setter()
{
  return StartCallConfirmContactsParameters.confirmAction.setter();
}

Swift::Void (__swiftcall *StartCallUnsupportedContactsInvalidHandleParameters.launchAppPunchOutAction.modify())(Swift::OpaquePointer newCallGroups)
{
  uint64_t v0 = OUTLINED_FUNCTION_37_6();
  type metadata accessor for StartCallUnsupportedContactsInvalidHandleParameters(v0);
  OUTLINED_FUNCTION_69();
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t StartCallUnsupportedContactsInvalidHandleParameters.asKeyValuePairs()()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v3 = OUTLINED_FUNCTION_11_0(v2);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_18_8();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_36_2();
  OUTLINED_FUNCTION_45_4((__n128 *)v4, (__n128)xmmword_467720);
  uint64_t v5 = *v1;
  if (*v1)
  {
    uint64_t v6 = type metadata accessor for PhonePersonList();
    uint64_t v7 = v5;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
    *(void *)(v4 + 56) = 0;
    *(void *)(v4 + 64) = 0;
  }
  *(void *)(v4 + 48) = v7;
  *(void *)(v4 + 72) = v6;
  *(void *)(v4 + 80) = 0xD000000000000017;
  uint64_t v8 = OUTLINED_FUNCTION_150((uint64_t)"launchAppPunchOutAction");
  uint64_t v9 = type metadata accessor for StartCallUnsupportedContactsInvalidHandleParameters(v8);
  uint64_t v10 = OUTLINED_FUNCTION_94(v9);
  _s16SiriDialogEngine15SpeakableStringVSgWOcTm_0(v10, v0, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v11 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_28_6(v0, 1, v11);
  if (v12)
  {
    swift_retain();
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v0, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v4 + 96) = 0u;
    *(_OWORD *)(v4 + 112) = 0u;
  }
  else
  {
    *(void *)(v4 + 120) = v11;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v4 + 96));
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_70();
    v13();
    swift_retain();
  }
  return v4;
}

uint64_t StartCallUnsupportedContactsInvalidHandleParameters.init()@<X0>(void *a1@<X8>)
{
  uint64_t v1 = OUTLINED_FUNCTION_95_1(a1);
  type metadata accessor for StartCallUnsupportedContactsInvalidHandleParameters(v1);
  type metadata accessor for SpeakableString();
  uint64_t v2 = OUTLINED_FUNCTION_17_1();

  return __swift_storeEnumTagSinglePayload(v2, v3, v4, v5);
}

uint64_t StartCallUnsupportedContactsInvalidHandleParameters.init(contacts:launchAppPunchOutAction:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return StartCallSimpleDisambiguateContactsParameters.init(items:requestedRelationship:)(a1, (void (*)(void))type metadata accessor for StartCallUnsupportedContactsInvalidHandleParameters, a2);
}

uint64_t StartCallSimpleDisambiguateContactsParameters.init(items:requestedRelationship:)@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X2>, void *a3@<X8>)
{
  *a3 = a1;
  a2(0);
  uint64_t v3 = OUTLINED_FUNCTION_93_0();

  return outlined init with take of SpeakableString?(v3, v4);
}

uint64_t StartCallUnsupportedContactsNoContactFoundParameters.contact.getter()
{
  return StartCallIntentHandledResponseParameters.device.getter((void (*)(void))type metadata accessor for StartCallUnsupportedContactsNoContactFoundParameters);
}

uint64_t StartCallIntentHandledResponseParameters.device.getter(void (*a1)(void))
{
  a1(0);

  return swift_retain();
}

uint64_t StartCallUnsupportedContactsNoContactFoundParameters.contact.setter()
{
  return StartCallIntentHandledResponseParameters.device.setter();
}

Swift::Void (__swiftcall *StartCallUnsupportedContactsNoContactFoundParameters.contact.modify())(Swift::OpaquePointer newCallGroups)
{
  uint64_t v0 = OUTLINED_FUNCTION_37_6();
  type metadata accessor for StartCallUnsupportedContactsNoContactFoundParameters(v0);
  OUTLINED_FUNCTION_69();
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t StartCallUnsupportedContactsNoContactFoundParameters.isFirstPartyApp.getter()
{
  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for StartCallUnsupportedContactsNoContactFoundParameters(0)
                                     + 24));
}

uint64_t StartCallUnsupportedContactsNoContactFoundParameters.init(appName:contact:isFirstPartyApp:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  outlined init with take of SpeakableString?(a1, a4);
  uint64_t result = type metadata accessor for StartCallUnsupportedContactsNoContactFoundParameters(0);
  *(void *)(a4 + *(int *)(result + 20)) = a2;
  *(unsigned char *)(a4 + *(int *)(result + 24)) = a3;
  return result;
}

uint64_t StartCallUnsupportedContactsNoHandleForLabelParameters.preferredCallProvider.getter()
{
  return StartCallConfirmContactsParameters.confirmAction.getter();
}

uint64_t type metadata accessor for StartCallUnsupportedContactsNoHandleForLabelParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for StartCallUnsupportedContactsNoHandleForLabelParameters);
}

uint64_t StartCallUnsupportedContactsNoHandleForLabelParameters.preferredCallProvider.setter()
{
  return StartCallConfirmContactsParameters.confirmAction.setter();
}

Swift::Void (__swiftcall *StartCallUnsupportedContactsNoHandleForLabelParameters.preferredCallProvider.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t StartCallUnsupportedContactsNoHandleForLabelParameters.unsupportedHandle.getter()
{
  return StartCallIntentConfirmationWithRestrictedContactsParameters.intent.getter((void (*)(void))type metadata accessor for StartCallUnsupportedContactsNoHandleForLabelParameters);
}

uint64_t StartCallIntentConfirmationWithRestrictedContactsParameters.intent.getter(void (*a1)(void))
{
  a1(0);

  return swift_retain();
}

uint64_t StartCallUnsupportedContactsNoHandleForLabelParameters.unsupportedHandle.setter()
{
  return StartCallIntentConfirmationWithRestrictedContactsParameters.intent.setter();
}

Swift::Void (__swiftcall *StartCallUnsupportedContactsNoHandleForLabelParameters.unsupportedHandle.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t StartCallUnsupportedContactsNoHandleForLabelParameters.unsupportedPerson.getter()
{
  return StartCallConfirmContactsParameters.contactToConfirm.getter((void (*)(void))type metadata accessor for StartCallUnsupportedContactsNoHandleForLabelParameters);
}

uint64_t StartCallUnsupportedContactsNoHandleForLabelParameters.unsupportedPerson.setter()
{
  return StartCallConfirmContactsParameters.contactToConfirm.setter();
}

Swift::Void (__swiftcall *StartCallUnsupportedContactsNoHandleForLabelParameters.unsupportedPerson.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t StartCallUnsupportedContactsNoHandleForLabelParameters.unsupportedPersonHandleLabel.getter()
{
  return StartCallConfirmContactsParameters.inferenceSource.getter();
}

uint64_t StartCallUnsupportedContactsNoHandleForLabelParameters.unsupportedPersonHandleLabel.setter()
{
  return StartCallConfirmContactsParameters.inferenceSource.setter();
}

Swift::Void (__swiftcall *StartCallUnsupportedContactsNoHandleForLabelParameters.unsupportedPersonHandleLabel.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

void StartCallUnsupportedContactsNoHandleForLabelParameters.asKeyValuePairs()()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v4 = OUTLINED_FUNCTION_11_0(v3);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_29_9();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_89_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v6 = (__n128 *)swift_allocObject();
  OUTLINED_FUNCTION_106(v6, (__n128)xmmword_46DE40);
  unint64_t v7 = *v1;
  if (*v1)
  {
    uint64_t v8 = type metadata accessor for PhoneStartCallIntent(0);
    unint64_t v9 = v7;
  }
  else
  {
    uint64_t v8 = OUTLINED_FUNCTION_84_0();
  }
  v6[3].n128_u64[0] = v9;
  v6[4].n128_u64[1] = v8;
  v6[5].n128_u64[0] = 0xD000000000000015;
  uint64_t v10 = OUTLINED_FUNCTION_149((uint64_t)"preferredCallProvider");
  uint64_t v11 = (int *)type metadata accessor for StartCallUnsupportedContactsNoHandleForLabelParameters(v10);
  uint64_t v12 = OUTLINED_FUNCTION_94((uint64_t)v11);
  _s16SiriDialogEngine15SpeakableStringVSgWOcTm_0(v12, v2, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v13 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_28_6(v2, 1, v13);
  if (v14)
  {
    swift_retain();
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v2, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_103();
  }
  else
  {
    v6[7].n128_u64[1] = v13;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v6[6]);
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_70();
    v15();
    swift_retain();
  }
  OUTLINED_FUNCTION_41_0();
  v6[8].n128_u64[0] = 0xD000000000000011;
  v6[8].n128_u64[1] = v16;
  unint64_t v17 = *(unint64_t *)((char *)v1 + v11[6]);
  if (v17)
  {
    uint64_t v18 = type metadata accessor for DialogPersonHandle();
    unint64_t v19 = v17;
  }
  else
  {
    uint64_t v18 = OUTLINED_FUNCTION_34();
    v6[9].n128_u64[1] = 0;
    v6[10].n128_u64[0] = 0;
  }
  v6[9].n128_u64[0] = v19;
  v6[10].n128_u64[1] = v18;
  v6[11].n128_u64[0] = 0xD000000000000011;
  v6[11].n128_u64[1] = 0x8000000000493AF0;
  unint64_t v20 = *(unint64_t *)((char *)v1 + v11[7]);
  if (v20)
  {
    uint64_t v21 = type metadata accessor for DialogPerson();
    unint64_t v22 = v20;
  }
  else
  {
    uint64_t v21 = OUTLINED_FUNCTION_113();
  }
  v6[12].n128_u64[0] = v22;
  v6[13].n128_u64[1] = v21;
  v6[14].n128_u64[0] = 0xD00000000000001CLL;
  v6[14].n128_u64[1] = 0x8000000000493B10;
  _s16SiriDialogEngine15SpeakableStringVSgWOcTm_0((uint64_t)v1 + v11[8], v0, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_28_6(v0, 1, v13);
  if (v14)
  {
    swift_retain();
    swift_retain();
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v0, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_103();
  }
  else
  {
    v6[16].n128_u64[1] = v13;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v6[15]);
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_70();
    v23();
    swift_retain();
    swift_retain();
  }
  OUTLINED_FUNCTION_152();
  OUTLINED_FUNCTION_26_1();
}

uint64_t StartCallUnsupportedContactsNoHandleForLabelParameters.init()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = OUTLINED_FUNCTION_95_1(a1);
  uint64_t v3 = type metadata accessor for StartCallUnsupportedContactsNoHandleForLabelParameters(v2);
  uint64_t v4 = OUTLINED_FUNCTION_62_3();
  OUTLINED_FUNCTION_104_0(v4);
  *(void *)(v1 + v5) = 0;
  uint64_t v6 = OUTLINED_FUNCTION_60_2(*(int *)(v3 + 32));

  return __swift_storeEnumTagSinglePayload(v6, v7, v8, v9);
}

uint64_t StartCallUnsupportedContactsNoHandleForLabelParameters.init(intent:preferredCallProvider:unsupportedHandle:unsupportedPerson:unsupportedPersonHandleLabel:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v7 = OUTLINED_FUNCTION_98(a1, a2);
  uint64_t v8 = type metadata accessor for StartCallUnsupportedContactsNoHandleForLabelParameters(v7);
  OUTLINED_FUNCTION_136(v8);
  *(void *)(v5 + v6[6]) = v4;
  *(void *)(v5 + v6[7]) = v3;
  uint64_t v9 = v5 + v6[8];

  return outlined init with take of SpeakableString?(v2, v9);
}

uint64_t StartCallUnsupportedDeviceFaceTimeLinkParameters.launchAppPunchOutAction.getter()
{
  return StartCallConfirmContactsParameters.confirmAction.getter();
}

uint64_t type metadata accessor for StartCallUnsupportedDeviceFaceTimeLinkParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for StartCallUnsupportedDeviceFaceTimeLinkParameters);
}

uint64_t StartCallUnsupportedDeviceFaceTimeLinkParameters.launchAppPunchOutAction.setter()
{
  return StartCallConfirmContactsParameters.confirmAction.setter();
}

Swift::Void (__swiftcall *StartCallUnsupportedDeviceFaceTimeLinkParameters.launchAppPunchOutAction.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t StartCallUnsupportedDeviceFaceTimeLinkParameters.launchAppPunchOutLocalizedText.getter()
{
  return StartCallConfirmContactsParameters.contactHeader.getter();
}

uint64_t StartCallUnsupportedDeviceFaceTimeLinkParameters.launchAppPunchOutLocalizedText.setter()
{
  return StartCallConfirmContactsParameters.contactHeader.setter();
}

Swift::Void (__swiftcall *StartCallUnsupportedDeviceFaceTimeLinkParameters.launchAppPunchOutLocalizedText.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

void StartCallUnsupportedDeviceFaceTimeLinkParameters.asKeyValuePairs()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  StartCallUnsupportedDeviceFaceTimeLinkParameters.asKeyValuePairs()((uint64_t)type metadata accessor for StartCallUnsupportedDeviceFaceTimeLinkParameters, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

{
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  __n128 *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  void (*v40)(void);
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;

  OUTLINED_FUNCTION_24_0();
  a19 = v22;
  a20 = v23;
  uint64_t v25 = v24;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v27 = OUTLINED_FUNCTION_11_0(v26);
  __chkstk_darwin(v27);
  OUTLINED_FUNCTION_29_9();
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)&a9 - v29;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  char v31 = (__n128 *)swift_allocObject();
  OUTLINED_FUNCTION_27_0(v31, (__n128)xmmword_46A250);
  uint64_t v32 = *v21;
  if (*v21)
  {
    uint64_t v33 = type metadata accessor for SirikitDeviceState();
    uint64_t v34 = v32;
  }
  else
  {
    uint64_t v33 = OUTLINED_FUNCTION_84_0();
  }
  v31[3].n128_u64[0] = v34;
  v31[4].n128_u64[1] = v33;
  v31[5].n128_u64[0] = 0xD000000000000017;
  uint64_t v35 = OUTLINED_FUNCTION_149((uint64_t)"launchAppPunchOutAction");
  uint64_t v36 = v25(v35);
  uint64_t v37 = OUTLINED_FUNCTION_94(v36);
  _s16SiriDialogEngine15SpeakableStringVSgWOcTm_0(v37, (uint64_t)v30, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v38 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_30_0((uint64_t)v30);
  if (v39)
  {
    swift_retain();
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0((uint64_t)v30, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_103();
  }
  else
  {
    v31[7].n128_u64[1] = v38;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v31[6]);
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_70();
    v40();
    swift_retain();
  }
  OUTLINED_FUNCTION_134();
  v31[8].n128_u64[0] = v41;
  v31[8].n128_u64[1] = v42;
  _s16SiriDialogEngine15SpeakableStringVSgWOcTm_0((uint64_t)v21 + *(int *)(v36 + 24), v20, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_30_0(v20);
  if (v39)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v20, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_118();
  }
  else
  {
    v31[10].n128_u64[1] = v38;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v31[9]);
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v43 + 32))();
  }
  OUTLINED_FUNCTION_152();
  OUTLINED_FUNCTION_26_1();
}

uint64_t StartCallUnsupportedDeviceFaceTimeLinkParameters.init()@<X0>(void *a1@<X8>)
{
  return StartCallUnsupportedDeviceFaceTimeLinkParameters.init()(a1);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t vars8;

  uint64_t v2 = OUTLINED_FUNCTION_95_1(a1);
  uint64_t v4 = v3(v2);
  uint64_t v5 = OUTLINED_FUNCTION_62_3();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v5);
  uint64_t v6 = OUTLINED_FUNCTION_60_2(*(int *)(v4 + 24));

  return __swift_storeEnumTagSinglePayload(v6, v7, v8, v9);
}

uint64_t StartCallUnsupportedDeviceFaceTimeLinkParameters.init(device:launchAppPunchOutAction:launchAppPunchOutLocalizedText:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return StartCallUnsupportedDeviceFaceTimeLinkParameters.init(device:launchAppPunchOutAction:launchAppPunchOutLocalizedText:)(a1, a2, a3, type metadata accessor for StartCallUnsupportedDeviceFaceTimeLinkParameters, a4);
}

uint64_t StartCallUnsupportedDeviceGroupFaceTimeParameters.launchAppPunchOutAction.getter()
{
  return StartCallConfirmContactsParameters.confirmAction.getter();
}

uint64_t type metadata accessor for StartCallUnsupportedDeviceGroupFaceTimeParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for StartCallUnsupportedDeviceGroupFaceTimeParameters);
}

uint64_t StartCallUnsupportedDeviceGroupFaceTimeParameters.launchAppPunchOutAction.setter()
{
  return StartCallConfirmContactsParameters.confirmAction.setter();
}

Swift::Void (__swiftcall *StartCallUnsupportedDeviceGroupFaceTimeParameters.launchAppPunchOutAction.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t StartCallUnsupportedDeviceGroupFaceTimeParameters.launchAppPunchOutLocalizedText.getter()
{
  return StartCallConfirmContactsParameters.contactHeader.getter();
}

uint64_t StartCallUnsupportedDeviceGroupFaceTimeParameters.launchAppPunchOutLocalizedText.setter()
{
  return StartCallConfirmContactsParameters.contactHeader.setter();
}

Swift::Void (__swiftcall *StartCallUnsupportedDeviceGroupFaceTimeParameters.launchAppPunchOutLocalizedText.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

void StartCallUnsupportedDeviceGroupFaceTimeParameters.asKeyValuePairs()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  StartCallUnsupportedDeviceFaceTimeLinkParameters.asKeyValuePairs()((uint64_t)type metadata accessor for StartCallUnsupportedDeviceGroupFaceTimeParameters, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

uint64_t StartCallUnsupportedDeviceGroupFaceTimeParameters.init()@<X0>(void *a1@<X8>)
{
  return StartCallUnsupportedDeviceFaceTimeLinkParameters.init()(a1);
}

uint64_t StartCallUnsupportedDeviceGroupFaceTimeParameters.init(device:launchAppPunchOutAction:launchAppPunchOutLocalizedText:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return StartCallUnsupportedDeviceFaceTimeLinkParameters.init(device:launchAppPunchOutAction:launchAppPunchOutLocalizedText:)(a1, a2, a3, type metadata accessor for StartCallUnsupportedDeviceGroupFaceTimeParameters, a4);
}

uint64_t StartCallUnsupportedDeviceFaceTimeLinkParameters.init(device:launchAppPunchOutAction:launchAppPunchOutLocalizedText:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(void)@<X3>, void *a5@<X8>)
{
  *a5 = a1;
  uint64_t v8 = a4(0);
  outlined init with take of SpeakableString?(a2, (uint64_t)a5 + *(int *)(v8 + 20));
  uint64_t v9 = (uint64_t)a5 + *(int *)(v8 + 24);

  return outlined init with take of SpeakableString?(a3, v9);
}

uint64_t StartCallUnsupportedPreferredCallProviderParameters.asKeyValuePairs()(uint64_t a1, uint64_t a2)
{
  return StartCallErrorWithCodeDownTimeRestrictionEnabledParameters.asKeyValuePairs()(a1, a2, 0x656369766564, 0xE600000000000000, (uint64_t (*)(void))&type metadata accessor for SirikitDeviceState);
}

uint64_t StartCallErrorWithCodeDownTimeRestrictionEnabledParameters.asKeyValuePairs()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v10 = OUTLINED_FUNCTION_36_2();
  *(_OWORD *)(v10 + 16) = xmmword_467720;
  *(void *)(v10 + 32) = a3;
  *(void *)(v10 + 40) = a4;
  if (a1)
  {
    uint64_t v11 = a5(0);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_84_0();
  }
  OUTLINED_FUNCTION_97(v11, v12);
  if (a2)
  {
    uint64_t v13 = type metadata accessor for PhoneStartCallIntent(0);
    uint64_t v14 = a2;
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v13 = 0;
    *(void *)(v10 + 104) = 0;
    *(void *)(v10 + 112) = 0;
  }
  *(void *)(v10 + 96) = v14;
  *(void *)(v10 + 120) = v13;
  swift_retain();
  swift_retain();
  return v10;
}

uint64_t StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters.intent.getter()
{
  return swift_retain();
}

uint64_t StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters.launchAppPunchOutAction.getter()
{
  return StartCallConfirmContactsParameters.contactHeader.getter();
}

uint64_t type metadata accessor for StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters);
}

uint64_t StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters.launchAppPunchOutAction.setter()
{
  return StartCallConfirmContactsParameters.contactHeader.setter();
}

Swift::Void (__swiftcall *StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters.launchAppPunchOutAction.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters.launchAppPunchOutLocalizedText.getter()
{
  return StartCallErrorWithCodeAirplaneModeEnabledParameters.settingsPunchOutAction.getter();
}

uint64_t StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters.launchAppPunchOutLocalizedText.setter()
{
  return StartCallErrorWithCodeAirplaneModeEnabledParameters.settingsPunchOutAction.setter();
}

Swift::Void (__swiftcall *StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters.launchAppPunchOutLocalizedText.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

void StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters.asKeyValuePairs()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  OUTLINED_FUNCTION_24_0();
  a19 = v22;
  a20 = v23;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v25 = OUTLINED_FUNCTION_11_0(v24);
  __chkstk_darwin(v25);
  OUTLINED_FUNCTION_29_9();
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&a9 - v27;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v29 = swift_allocObject();
  OUTLINED_FUNCTION_27_0((__n128 *)v29, (__n128)xmmword_469650);
  uint64_t v30 = *v21;
  if (*v21)
  {
    uint64_t v31 = type metadata accessor for SirikitDeviceState();
    uint64_t v32 = v30;
  }
  else
  {
    uint64_t v31 = OUTLINED_FUNCTION_84_0();
  }
  OUTLINED_FUNCTION_97(v31, v32);
  uint64_t v33 = v21[1];
  if (v33)
  {
    uint64_t v34 = type metadata accessor for PhoneStartCallIntent(0);
    uint64_t v35 = v33;
  }
  else
  {
    uint64_t v35 = 0;
    uint64_t v34 = 0;
    *(void *)(v29 + 104) = 0;
    *(void *)(v29 + 112) = 0;
  }
  *(void *)(v29 + 96) = v35;
  *(void *)(v29 + 120) = v34;
  *(void *)(v29 + 128) = 0xD000000000000017;
  OUTLINED_FUNCTION_41_0();
  *(void *)(v29 + 136) = v36;
  uint64_t v37 = type metadata accessor for StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters(0);
  _s16SiriDialogEngine15SpeakableStringVSgWOcTm_0((uint64_t)v21 + *(int *)(v37 + 24), (uint64_t)v28, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v38 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_28_6((uint64_t)v28, 1, v38);
  if (v39)
  {
    swift_retain();
    swift_retain();
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0((uint64_t)v28, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v29 + 144) = 0u;
    *(_OWORD *)(v29 + 160) = 0u;
  }
  else
  {
    *(void *)(v29 + 168) = v38;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v29 + 144));
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_70();
    v40();
    swift_retain();
    swift_retain();
  }
  *(void *)(v29 + 176) = 0xD00000000000001ELL;
  *(void *)(v29 + 184) = 0x8000000000493B30;
  _s16SiriDialogEngine15SpeakableStringVSgWOcTm_0((uint64_t)v21 + *(int *)(v37 + 28), v20, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_28_6(v20, 1, v38);
  if (v39)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v20, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_118();
  }
  else
  {
    *(void *)(v29 + 216) = v38;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v29 + 192));
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v41 + 32))();
  }
  OUTLINED_FUNCTION_152();
  OUTLINED_FUNCTION_26_1();
}

uint64_t StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters.init()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters(0);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = OUTLINED_FUNCTION_62_3();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v4);
  uint64_t v5 = OUTLINED_FUNCTION_60_2(*(int *)(v3 + 28));

  return __swift_storeEnumTagSinglePayload(v5, v6, v7, v8);
}

uint64_t StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters.init(device:intent:launchAppPunchOutAction:launchAppPunchOutLocalizedText:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = a1;
  a5[1] = a2;
  uint64_t v8 = type metadata accessor for StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters(0);
  outlined init with take of SpeakableString?(a3, (uint64_t)a5 + *(int *)(v8 + 24));
  uint64_t v9 = (uint64_t)a5 + *(int *)(v8 + 28);

  return outlined init with take of SpeakableString?(a4, v9);
}

uint64_t StartCallCATPatternsExecutor.confirmContacts(isFaceTime:isFoundInAppConfirmation:isTopMatchConfirmation:_:)()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v6 = OUTLINED_FUNCTION_52_2(v1, v2, v3, v4, v5);
  uint64_t v7 = type metadata accessor for StartCallConfirmContactsParameters(v6);
  *(void *)(v0 + 40) = v7;
  OUTLINED_FUNCTION_11_0(v7);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_0_14();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  OUTLINED_FUNCTION_7_27();
  OUTLINED_FUNCTION_20_2();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of StartCallConfirmContactsParameters();
  swift_task_dealloc();
  uint64_t v0 = OUTLINED_FUNCTION_4_31();
  return v1(v0);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of StartCallConfirmContactsParameters();
  swift_task_dealloc();
  OUTLINED_FUNCTION_13_0();
  return v0();
}

#error "107EB4: call analysis failed (funcsize=70)"

uint64_t StartCallCATPatternsExecutor.errorWithCodeAirplaneModeEnabled(isEmergency:isResponseFramework:_:)()
{
  OUTLINED_FUNCTION_1_0();
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v0;
  *(void *)(v1 + 16) = v3;
  *(unsigned char *)(v1 + 89) = v4;
  *(unsigned char *)(v1 + 88) = v5;
  uint64_t v6 = type metadata accessor for StartCallErrorWithCodeAirplaneModeEnabledParameters(0);
  *(void *)(v1 + 40) = v6;
  OUTLINED_FUNCTION_11_0(v6);
  *(void *)(v1 + 48) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_0_14();
  char v4 = v3;
  OUTLINED_FUNCTION_5_7();
  *char v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  OUTLINED_FUNCTION_7_27();
  OUTLINED_FUNCTION_20_2();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of StartCallConfirmContactsParameters();
  swift_task_dealloc();
  uint64_t v0 = OUTLINED_FUNCTION_4_31();
  return v1(v0);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of StartCallConfirmContactsParameters();
  swift_task_dealloc();
  OUTLINED_FUNCTION_13_0();
  return v0();
}

uint64_t StartCallCATPatternsExecutor.errorWithCodeAirplaneModeEnabled(isEmergency:isResponseFramework:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_40_0();
  uint64_t v12 = *(void *)(v11 + 48);
  uint64_t v13 = *(void (**)(uint64_t))(v11 + 16);
  char v14 = *(unsigned char *)(v11 + 89);
  char v15 = *(unsigned char *)(v11 + 88);
  uint64_t v16 = OUTLINED_FUNCTION_62_3();
  __swift_storeEnumTagSinglePayload(v10, 1, 1, v16);
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = v15;
  *(unsigned char *)(v12 + 9) = v14;
  uint64_t v17 = OUTLINED_FUNCTION_39_6();
  v13(v17);
  uint64_t v18 = StartCallErrorWithCodeAirplaneModeEnabledParameters.asKeyValuePairs()();
  OUTLINED_FUNCTION_47_4(v18);
  uint64_t v19 = OUTLINED_FUNCTION_3_0();
  uint64_t v20 = (void *)OUTLINED_FUNCTION_33(v19);
  *uint64_t v20 = v21;
  v20[1] = StartCallCATPatternsExecutor.errorWithCodeAirplaneModeEnabled(isEmergency:isResponseFramework:_:);
  OUTLINED_FUNCTION_38_8(42);
  OUTLINED_FUNCTION_26_8();
  return v25(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10);
}

uint64_t StartCallCATPatternsExecutor.errorWithCodeAppConfigurationRequired(isThirdPartyApp:_:)()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v4 = OUTLINED_FUNCTION_56_2(v1, v2, v3);
  uint64_t v5 = type metadata accessor for StartCallErrorWithCodeAppConfigurationRequiredParameters(v4);
  *(void *)(v0 + 40) = v5;
  OUTLINED_FUNCTION_11_0(v5);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_0_14();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  OUTLINED_FUNCTION_7_27();
  OUTLINED_FUNCTION_20_2();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of StartCallConfirmContactsParameters();
  swift_task_dealloc();
  uint64_t v0 = OUTLINED_FUNCTION_4_31();
  return v1(v0);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of StartCallConfirmContactsParameters();
  swift_task_dealloc();
  OUTLINED_FUNCTION_13_0();
  return v0();
}

uint64_t StartCallCATPatternsExecutor.errorWithCodeAppConfigurationRequired(isThirdPartyApp:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_40_0();
  uint64_t v11 = OUTLINED_FUNCTION_82_0();
  uint64_t v12 = OUTLINED_FUNCTION_19_17(v11);
  v10(v12);
  StartCallErrorWithCodeAppConfigurationRequiredParameters.asKeyValuePairs()();
  OUTLINED_FUNCTION_47_4(v13);
  uint64_t v14 = OUTLINED_FUNCTION_3_0();
  char v15 = (void *)OUTLINED_FUNCTION_33(v14);
  *char v15 = v16;
  v15[1] = StartCallCATPatternsExecutor.errorWithCodeAppConfigurationRequired(isThirdPartyApp:_:);
  OUTLINED_FUNCTION_38_8(47);
  OUTLINED_FUNCTION_26_8();
  return v20(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10);
}

uint64_t StartCallCATPatternsExecutor.errorWithCodeCallInProgress(_:)(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return OUTLINED_FUNCTION_21_1((uint64_t)StartCallCATPatternsExecutor.errorWithCodeCallInProgress(_:));
}

uint64_t StartCallCATPatternsExecutor.errorWithCodeCallInProgress(_:)()
{
  OUTLINED_FUNCTION_18_3();
  uint64_t v2 = OUTLINED_FUNCTION_35_10();
  v3(v2);
  uint64_t v4 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_31_0();
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_116(v5);
  uint64_t v7 = OUTLINED_FUNCTION_24_7(v6, (__n128)xmmword_467710);
  if (v4)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v1 + 56) = 0;
    *(void *)(v1 + 64) = 0;
  }
  OUTLINED_FUNCTION_65_1(v7);
  OUTLINED_FUNCTION_8_1();
  uint64_t v8 = swift_task_alloc();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_33(v8);
  *uint64_t v9 = v10;
  v9[1] = StartCallCATPatternsExecutor.errorWithCodeCallInProgress(_:);
  OUTLINED_FUNCTION_10_16();
  unint64_t v11 = OUTLINED_FUNCTION_73_0(37);
  return v12(v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_0_14();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  OUTLINED_FUNCTION_7_27();
  OUTLINED_FUNCTION_20_2();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t StartCallCATPatternsExecutor.errorWithCodeCallRinging(_:)(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return OUTLINED_FUNCTION_21_1((uint64_t)StartCallCATPatternsExecutor.errorWithCodeCallRinging(_:));
}

uint64_t StartCallCATPatternsExecutor.errorWithCodeCallRinging(_:)()
{
  OUTLINED_FUNCTION_18_3();
  uint64_t v2 = OUTLINED_FUNCTION_35_10();
  v3(v2);
  uint64_t v4 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_31_0();
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_116(v5);
  uint64_t v7 = OUTLINED_FUNCTION_24_7(v6, (__n128)xmmword_467710);
  if (v4)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v1 + 56) = 0;
    *(void *)(v1 + 64) = 0;
  }
  OUTLINED_FUNCTION_65_1(v7);
  OUTLINED_FUNCTION_8_1();
  uint64_t v8 = swift_task_alloc();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_33(v8);
  *uint64_t v9 = v10;
  v9[1] = StartCallCATPatternsExecutor.errorWithCodeCallRinging(_:);
  OUTLINED_FUNCTION_10_16();
  unint64_t v11 = OUTLINED_FUNCTION_73_0(34);
  return v12(v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_0_14();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  OUTLINED_FUNCTION_7_27();
  OUTLINED_FUNCTION_20_2();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t StartCallCATPatternsExecutor.errorWithCodeCallingServiceNotAvailable(isThirdPartyApp:_:)()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v4 = OUTLINED_FUNCTION_56_2(v1, v2, v3);
  uint64_t v5 = type metadata accessor for StartCallErrorWithCodeCallingServiceNotAvailableParameters(v4);
  *(void *)(v0 + 40) = v5;
  OUTLINED_FUNCTION_11_0(v5);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_0_14();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  OUTLINED_FUNCTION_7_27();
  OUTLINED_FUNCTION_20_2();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of StartCallConfirmContactsParameters();
  swift_task_dealloc();
  uint64_t v0 = OUTLINED_FUNCTION_4_31();
  return v1(v0);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of StartCallConfirmContactsParameters();
  swift_task_dealloc();
  OUTLINED_FUNCTION_13_0();
  return v0();
}

uint64_t StartCallCATPatternsExecutor.errorWithCodeCallingServiceNotAvailable(isThirdPartyApp:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_40_0();
  uint64_t v11 = OUTLINED_FUNCTION_82_0();
  uint64_t v12 = OUTLINED_FUNCTION_19_17(v11);
  v10(v12);
  StartCallErrorWithCodeCallingServiceNotAvailableParameters.asKeyValuePairs()();
  OUTLINED_FUNCTION_47_4(v13);
  uint64_t v14 = OUTLINED_FUNCTION_3_0();
  char v15 = (void *)OUTLINED_FUNCTION_33(v14);
  *char v15 = v16;
  v15[1] = StartCallCATPatternsExecutor.errorWithCodeCallingServiceNotAvailable(isThirdPartyApp:_:);
  OUTLINED_FUNCTION_38_8(49);
  OUTLINED_FUNCTION_26_8();
  return v20(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10);
}

uint64_t StartCallCATPatternsExecutor.errorWithCodeContactNotSupportedByApp(isThirdPartyApp:_:)()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v4 = OUTLINED_FUNCTION_56_2(v1, v2, v3);
  uint64_t v5 = type metadata accessor for StartCallErrorWithCodeContactNotSupportedByAppParameters(v4);
  *(void *)(v0 + 40) = v5;
  OUTLINED_FUNCTION_11_0(v5);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_0_14();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  OUTLINED_FUNCTION_7_27();
  OUTLINED_FUNCTION_20_2();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of StartCallConfirmContactsParameters();
  swift_task_dealloc();
  uint64_t v0 = OUTLINED_FUNCTION_4_31();
  return v1(v0);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of StartCallConfirmContactsParameters();
  swift_task_dealloc();
  OUTLINED_FUNCTION_13_0();
  return v0();
}

uint64_t StartCallCATPatternsExecutor.errorWithCodeContactNotSupportedByApp(isThirdPartyApp:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_40_0();
  uint64_t v11 = OUTLINED_FUNCTION_82_0();
  uint64_t v12 = OUTLINED_FUNCTION_19_17(v11);
  v10(v12);
  StartCallErrorWithCodeContactNotSupportedByAppParameters.asKeyValuePairs()();
  OUTLINED_FUNCTION_47_4(v13);
  uint64_t v14 = OUTLINED_FUNCTION_3_0();
  char v15 = (void *)OUTLINED_FUNCTION_33(v14);
  *char v15 = v16;
  v15[1] = StartCallCATPatternsExecutor.errorWithCodeContactNotSupportedByApp(isThirdPartyApp:_:);
  OUTLINED_FUNCTION_38_8(47);
  OUTLINED_FUNCTION_26_8();
  return v20(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10);
}

uint64_t StartCallCATPatternsExecutor.errorWithCodeDownTimeRestrictionEnabled(_:)(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  return OUTLINED_FUNCTION_21_1((uint64_t)StartCallCATPatternsExecutor.errorWithCodeDownTimeRestrictionEnabled(_:));
}

uint64_t StartCallCATPatternsExecutor.errorWithCodeDownTimeRestrictionEnabled(_:)()
{
  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  uint64_t v2 = OUTLINED_FUNCTION_110();
  v3(v2);
  uint64_t v4 = *v1;
  unint64_t v5 = v1[1];
  v1[5] = *v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_36_2();
  v1[6] = (uint64_t)v6;
  OUTLINED_FUNCTION_45_4(v6, (__n128)xmmword_467720);
  if (v4)
  {
    uint64_t v7 = type metadata accessor for PhonePersonList();
    uint64_t v8 = v4;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
    v6[3].n128_u64[1] = 0;
    v6[4].n128_u64[0] = 0;
  }
  uint64_t v9 = OUTLINED_FUNCTION_81_0(v7, v8);
  if (v5)
  {
    uint64_t v9 = type metadata accessor for PhoneStartCallIntent(v9);
  }
  else
  {
    v6[6].n128_u64[1] = 0;
    v6[7].n128_u64[0] = 0;
  }
  *(void *)(v0 + 72) = v5;
  v6[6].n128_u64[0] = v5;
  v6[7].n128_u64[1] = v9;
  OUTLINED_FUNCTION_126();
  swift_retain();
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v10;
  *uint64_t v10 = v0;
  v10[1] = StartCallCATPatternsExecutor.errorWithCodeDownTimeRestrictionEnabled(_:);
  OUTLINED_FUNCTION_20_2();
  return v14(v11, v12, v13, v14, v15, v16, v17, v18);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_0_14();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_5_7();
  *unint64_t v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v7 = v6;
  *(void *)(v4 + 88) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 96) = v1;
  }
  OUTLINED_FUNCTION_7_27();
  OUTLINED_FUNCTION_20_2();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled()()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  char v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *char v1 = v2;
  v1[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  OUTLINED_FUNCTION_24_10();
  unint64_t v3 = OUTLINED_FUNCTION_44_0(51);
  return v4(v3);
}

uint64_t StartCallCATPatternsExecutor.finalLowConfidenceResponse()()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  char v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *char v1 = v2;
  v1[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  OUTLINED_FUNCTION_24_10();
  unint64_t v3 = OUTLINED_FUNCTION_44_0(36);
  return v4(v3);
}

uint64_t StartCallCATPatternsExecutor.genericError(_:)(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return OUTLINED_FUNCTION_21_1((uint64_t)StartCallCATPatternsExecutor.genericError(_:));
}

uint64_t StartCallCATPatternsExecutor.genericError(_:)()
{
  OUTLINED_FUNCTION_18_3();
  uint64_t v2 = OUTLINED_FUNCTION_35_10();
  v3(v2);
  uint64_t v4 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_31_0();
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_116(v5);
  uint64_t v7 = OUTLINED_FUNCTION_24_7(v6, (__n128)xmmword_467710);
  if (v4)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v1 + 56) = 0;
    *(void *)(v1 + 64) = 0;
  }
  OUTLINED_FUNCTION_65_1(v7);
  OUTLINED_FUNCTION_8_1();
  uint64_t v8 = swift_task_alloc();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_33(v8);
  *uint64_t v9 = v10;
  v9[1] = StartCallCATPatternsExecutor.errorWithCodeCallRinging(_:);
  OUTLINED_FUNCTION_10_16();
  unint64_t v11 = OUTLINED_FUNCTION_73_0(22);
  return v12(v11);
}

uint64_t StartCallCATPatternsExecutor.intentConfirmation(_:)(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return OUTLINED_FUNCTION_21_1((uint64_t)StartCallCATPatternsExecutor.intentConfirmation(_:));
}

uint64_t StartCallCATPatternsExecutor.intentConfirmation(_:)()
{
  OUTLINED_FUNCTION_18_3();
  uint64_t v2 = OUTLINED_FUNCTION_35_10();
  v3(v2);
  uint64_t v4 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_31_0();
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_116(v5);
  OUTLINED_FUNCTION_106(v6, (__n128)xmmword_467710);
  uint64_t v7 = 0;
  if (v4)
  {
    uint64_t v7 = type metadata accessor for PhoneStartCallIntent(0);
  }
  else
  {
    *(void *)(v1 + 56) = 0;
    *(void *)(v1 + 64) = 0;
  }
  OUTLINED_FUNCTION_65_1(v7);
  OUTLINED_FUNCTION_8_1();
  uint64_t v8 = swift_task_alloc();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_33(v8);
  *uint64_t v9 = v10;
  v9[1] = StartCallCATPatternsExecutor.errorWithCodeCallRinging(_:);
  OUTLINED_FUNCTION_10_16();
  unint64_t v11 = OUTLINED_FUNCTION_73_0(28);
  return v12(v11);
}

uint64_t StartCallCATPatternsExecutor.intentConfirmationWithRestrictedContacts(_:)()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v3 = OUTLINED_FUNCTION_48_3(v1, v2);
  uint64_t v4 = type metadata accessor for StartCallIntentConfirmationWithRestrictedContactsParameters(v3);
  *(void *)(v0 + 40) = v4;
  OUTLINED_FUNCTION_11_0(v4);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_0_14();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  OUTLINED_FUNCTION_7_27();
  OUTLINED_FUNCTION_20_2();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of StartCallConfirmContactsParameters();
  swift_task_dealloc();
  uint64_t v0 = OUTLINED_FUNCTION_4_31();
  return v1(v0);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of StartCallConfirmContactsParameters();
  swift_task_dealloc();
  OUTLINED_FUNCTION_13_0();
  return v0();
}

#error "1098C4: call analysis failed (funcsize=52)"

uint64_t StartCallCATPatternsExecutor.intentHandledResponse(isFirstPartyApp:isWalkieTalkie:shouldPrintDialogOnDisplayMode:_:)()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v6 = OUTLINED_FUNCTION_52_2(v1, v2, v3, v4, v5);
  uint64_t v7 = type metadata accessor for StartCallIntentHandledResponseParameters(v6);
  *(void *)(v0 + 40) = v7;
  OUTLINED_FUNCTION_11_0(v7);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_0_14();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  OUTLINED_FUNCTION_7_27();
  OUTLINED_FUNCTION_20_2();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of StartCallConfirmContactsParameters();
  swift_task_dealloc();
  uint64_t v0 = OUTLINED_FUNCTION_4_31();
  return v1(v0);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of StartCallConfirmContactsParameters();
  swift_task_dealloc();
  OUTLINED_FUNCTION_13_0();
  return v0();
}

#error "109C54: call analysis failed (funcsize=70)"

uint64_t StartCallCATPatternsExecutor.intentHandledResponseWithFaceTimeLink()()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  char v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *char v1 = v2;
  v1[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  OUTLINED_FUNCTION_24_10();
  unint64_t v3 = OUTLINED_FUNCTION_44_0(47);
  return v4(v3);
}

uint64_t StartCallCATPatternsExecutor.internalConversionError(_:)(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return OUTLINED_FUNCTION_21_1((uint64_t)StartCallCATPatternsExecutor.internalConversionError(_:));
}

uint64_t StartCallCATPatternsExecutor.internalConversionError(_:)()
{
  OUTLINED_FUNCTION_18_3();
  uint64_t v2 = OUTLINED_FUNCTION_35_10();
  v3(v2);
  uint64_t v4 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_31_0();
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_116(v5);
  uint64_t v7 = OUTLINED_FUNCTION_24_7(v6, (__n128)xmmword_467710);
  if (v4)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v1 + 56) = 0;
    *(void *)(v1 + 64) = 0;
  }
  OUTLINED_FUNCTION_65_1(v7);
  OUTLINED_FUNCTION_8_1();
  uint64_t v8 = swift_task_alloc();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_33(v8);
  *uint64_t v9 = v10;
  v9[1] = StartCallCATPatternsExecutor.errorWithCodeCallRinging(_:);
  OUTLINED_FUNCTION_10_16();
  unint64_t v11 = OUTLINED_FUNCTION_73_0(33);
  return v12(v11);
}

uint64_t StartCallCATPatternsExecutor.promptForContacts(isFaceTime:isUnsupportedFollowUp:startingOver:_:)()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v6 = OUTLINED_FUNCTION_52_2(v1, v2, v3, v4, v5);
  uint64_t v7 = type metadata accessor for StartCallPromptForContactsParameters(v6);
  *(void *)(v0 + 40) = v7;
  OUTLINED_FUNCTION_11_0(v7);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_0_14();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  OUTLINED_FUNCTION_7_27();
  OUTLINED_FUNCTION_20_2();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of StartCallConfirmContactsParameters();
  swift_task_dealloc();
  uint64_t v0 = OUTLINED_FUNCTION_4_31();
  return v1(v0);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of StartCallConfirmContactsParameters();
  swift_task_dealloc();
  OUTLINED_FUNCTION_13_0();
  return v0();
}

uint64_t StartCallCATPatternsExecutor.promptForContacts(isFaceTime:isUnsupportedFollowUp:startingOver:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_79_0();
  OUTLINED_FUNCTION_48();
  uint64_t v14 = *(int **)(v12 + 40);
  uint64_t v13 = *(void *)(v12 + 48);
  uint64_t v15 = *(void (**)(uint64_t))(v12 + 16);
  char v16 = *(unsigned char *)(v12 + 90);
  char v17 = *(unsigned char *)(v12 + 89);
  char v18 = *(unsigned char *)(v12 + 88);
  uint64_t v19 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v13, 1, 1, v19);
  *(unsigned char *)(v13 + v14[5]) = v18;
  *(unsigned char *)(v13 + v14[6]) = v17;
  uint64_t v20 = v13 + v14[7];
  *(void *)uint64_t v20 = 0;
  *(unsigned char *)(v20 + 8) = 1;
  *(unsigned char *)(v13 + v14[8]) = v16;
  uint64_t v21 = OUTLINED_FUNCTION_39_6();
  v15(v21);
  uint64_t v22 = StartCallPromptForContactsParameters.asKeyValuePairs()();
  OUTLINED_FUNCTION_47_4(v22);
  uint64_t v23 = OUTLINED_FUNCTION_3_0();
  uint64_t v24 = (void *)OUTLINED_FUNCTION_33(v23);
  void *v24 = v25;
  v24[1] = StartCallCATPatternsExecutor.promptForContacts(isFaceTime:isUnsupportedFollowUp:startingOver:_:);
  OUTLINED_FUNCTION_10_16();
  OUTLINED_FUNCTION_124(27);
  OUTLINED_FUNCTION_117();
  return v29(v26, v27, v28, v29, v30, v31, v32, v33, a9, a10, a11, a12);
}

uint64_t StartCallCATPatternsExecutor.simpleDisambiguateContacts(items:_:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[4] = v2;
  v1[5] = v0;
  v1[2] = v3;
  v1[3] = v4;
  uint64_t v5 = type metadata accessor for StartCallSimpleDisambiguateContactsParameters(0);
  v1[6] = v5;
  OUTLINED_FUNCTION_11_0(v5);
  v1[7] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v6, v7, v8);
}

{
  void *v0;
  void *v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  char v1 = (void *)v0[7];
  uint64_t v2 = (void (*)(uint64_t))v0[3];
  uint64_t v3 = v0[2];
  uint64_t v4 = (uint64_t)v1 + *(int *)(v0[6] + 20);
  uint64_t v5 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v4, 1, 1, v5);
  *char v1 = v3;
  swift_bridgeObjectRetain();
  uint64_t v6 = OUTLINED_FUNCTION_39_6();
  v2(v6);
  v0[8] = StartCallSimpleDisambiguateContactsParameters.asKeyValuePairs()();
  uint64_t v7 = (void *)OUTLINED_FUNCTION_9_0();
  v0[9] = v7;
  *uint64_t v7 = v0;
  v7[1] = StartCallCATPatternsExecutor.simpleDisambiguateContacts(items:_:);
  OUTLINED_FUNCTION_10_16();
  OUTLINED_FUNCTION_74_1(36);
  OUTLINED_FUNCTION_20_2();
  return v11(v8, v9, v10, v11, v12, v13, v14, v15);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_0_14();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v7 = v6;
  *(void *)(v4 + 80) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 88) = v1;
  }
  OUTLINED_FUNCTION_7_27();
  OUTLINED_FUNCTION_20_2();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of StartCallConfirmContactsParameters();
  swift_task_dealloc();
  uint64_t v0 = OUTLINED_FUNCTION_143();
  return v1(v0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of StartCallConfirmContactsParameters();
  swift_task_dealloc();
  char v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t StartCallCATPatternsExecutor.simpleDisambiguateContactsHandles(isPhoneNumberHandleDisambiguation:isRequestForHandle:items:_:)(char a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v6 + 56) = a5;
  *(void *)(v6 + 64) = v5;
  *(void *)(v6 + 40) = a3;
  *(void *)(v6 + 48) = a4;
  *(unsigned char *)(v6 + 121) = a2;
  *(unsigned char *)(v6 + 120) = a1;
  return OUTLINED_FUNCTION_21_1((uint64_t)StartCallCATPatternsExecutor.simpleDisambiguateContactsHandles(isPhoneNumberHandleDisambiguation:isRequestForHandle:items:_:));
}

uint64_t StartCallCATPatternsExecutor.simpleDisambiguateContactsHandles(isPhoneNumberHandleDisambiguation:isRequestForHandle:items:_:)()
{
  char v1 = *(void (**)(uint64_t))(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 40);
  char v3 = *(unsigned char *)(v0 + 121);
  *(unsigned char *)(v0 + 16) = *(unsigned char *)(v0 + 120);
  *(unsigned char *)(v0 + 17) = v3;
  *(void *)(v0 + 24) = v2;
  *(void *)(v0 + 32) = 0;
  swift_bridgeObjectRetain();
  uint64_t v4 = OUTLINED_FUNCTION_39_6();
  v1(v4);
  __int16 v5 = *(unsigned __int8 *)(v0 + 16);
  int v6 = *(unsigned __int8 *)(v0 + 17);
  uint64_t v7 = *(void *)(v0 + 24);
  uint64_t v8 = *(void *)(v0 + 32);
  *(void *)(v0 + 72) = v7;
  *(void *)(v0 + 80) = v8;
  if (v6) {
    __int16 v9 = 256;
  }
  else {
    __int16 v9 = 0;
  }
  *(void *)(v0 + 88) = StartCallSimpleDisambiguateContactsHandlesParameters.asKeyValuePairs()(v9 | v5, v7, v8);
  uint64_t v10 = (void *)OUTLINED_FUNCTION_9_0();
  *(void *)(v0 + 96) = v10;
  *uint64_t v10 = v0;
  v10[1] = StartCallCATPatternsExecutor.simpleDisambiguateContactsHandles(isPhoneNumberHandleDisambiguation:isRequestForHandle:items:_:);
  unint64_t v11 = OUTLINED_FUNCTION_74_1(43);
  return v12(v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_0_14();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_5_7();
  *__int16 v5 = v4;
  int v6 = *v2;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v7 = v6;
  *(void *)(v4 + 104) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 112) = v1;
  }
  OUTLINED_FUNCTION_7_27();
  OUTLINED_FUNCTION_20_2();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_1_0();
  swift_bridgeObjectRelease();
  swift_release();
  char v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 112);
  return v1(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  swift_bridgeObjectRelease();
  swift_release();
  char v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t StartCallCATPatternsExecutor.unsupportedCallCapability()()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  char v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *char v1 = v2;
  v1[1] = StartCallCATPatternsExecutor.unsupportedCallCapability();
  OUTLINED_FUNCTION_24_10();
  unint64_t v3 = OUTLINED_FUNCTION_44_0(35);
  return v4(v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v9;

  OUTLINED_FUNCTION_1_0();
  unint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_2();
  *__int16 v5 = v4;
  uint64_t v6 = swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(uint64_t))(v4 + 8);
  if (!v0) {
    uint64_t v6 = v3;
  }
  return v7(v6);
}

uint64_t StartCallCATPatternsExecutor.unsupportedCallCapabilityCameraNotAccessible(_:)()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v3 = OUTLINED_FUNCTION_48_3(v1, v2);
  uint64_t v4 = type metadata accessor for StartCallUnsupportedCallCapabilityCameraNotAccessibleParameters(v3);
  OUTLINED_FUNCTION_11_0(v4);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v5, v6, v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  uint64_t (*v8)(unint64_t);
  uint64_t v10;

  uint64_t v1 = v0[5];
  uint64_t v2 = (uint64_t (*)(uint64_t))v0[2];
  uint64_t v3 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v3);
  uint64_t v4 = OUTLINED_FUNCTION_39_6();
  uint64_t v5 = v2(v4);
  v0[6] = StartCallUnsupportedCallCapabilityMicrophoneNotAccessibleParameters.asKeyValuePairs()(v5);
  uint64_t v6 = (void *)OUTLINED_FUNCTION_9_0();
  v0[7] = v6;
  *uint64_t v6 = v0;
  v6[1] = StartCallCATPatternsExecutor.unsupportedCallCapabilityCameraNotAccessible(_:);
  OUTLINED_FUNCTION_10_16();
  uint64_t v7 = OUTLINED_FUNCTION_74_1(54);
  return v8(v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_0_14();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v7 = v6;
  *(void *)(v4 + 64) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 72) = v1;
  }
  OUTLINED_FUNCTION_7_27();
  OUTLINED_FUNCTION_20_2();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of StartCallConfirmContactsParameters();
  swift_task_dealloc();
  uint64_t v0 = OUTLINED_FUNCTION_144_0();
  return v1(v0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of StartCallConfirmContactsParameters();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t type metadata accessor for StartCallUnsupportedCallCapabilityCameraNotAccessibleParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for StartCallUnsupportedCallCapabilityCameraNotAccessibleParameters);
}

uint64_t StartCallCATPatternsExecutor.unsupportedCallCapabilityMicrophoneNotAccessible(_:)()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v3 = OUTLINED_FUNCTION_48_3(v1, v2);
  uint64_t v4 = type metadata accessor for StartCallUnsupportedCallCapabilityMicrophoneNotAccessibleParameters(v3);
  OUTLINED_FUNCTION_11_0(v4);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v5, v6, v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  uint64_t (*v8)(unint64_t);
  uint64_t v10;

  uint64_t v1 = v0[5];
  uint64_t v2 = (uint64_t (*)(uint64_t))v0[2];
  uint64_t v3 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v3);
  uint64_t v4 = OUTLINED_FUNCTION_39_6();
  uint64_t v5 = v2(v4);
  v0[6] = StartCallUnsupportedCallCapabilityMicrophoneNotAccessibleParameters.asKeyValuePairs()(v5);
  uint64_t v6 = (void *)OUTLINED_FUNCTION_9_0();
  v0[7] = v6;
  *uint64_t v6 = v0;
  v6[1] = StartCallCATPatternsExecutor.unsupportedCallCapabilityMicrophoneNotAccessible(_:);
  OUTLINED_FUNCTION_10_16();
  uint64_t v7 = OUTLINED_FUNCTION_74_1(58);
  return v8(v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_0_14();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v7 = v6;
  *(void *)(v4 + 64) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 72) = v1;
  }
  OUTLINED_FUNCTION_7_27();
  OUTLINED_FUNCTION_20_2();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of StartCallConfirmContactsParameters();
  swift_task_dealloc();
  uint64_t v0 = OUTLINED_FUNCTION_144_0();
  return v1(v0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of StartCallConfirmContactsParameters();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t type metadata accessor for StartCallUnsupportedCallCapabilityMicrophoneNotAccessibleParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for StartCallUnsupportedCallCapabilityMicrophoneNotAccessibleParameters);
}

uint64_t StartCallCATPatternsExecutor.unsupportedCallCapabilityVideoCallUnsupported()()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *uint64_t v1 = v2;
  v1[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  OUTLINED_FUNCTION_24_10();
  unint64_t v3 = OUTLINED_FUNCTION_44_0(55);
  return v4(v3);
}

uint64_t StartCallCATPatternsExecutor.unsupportedContactsForeignEmergencyDisambiguation()()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *uint64_t v1 = v2;
  v1[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  OUTLINED_FUNCTION_24_10();
  unint64_t v3 = OUTLINED_FUNCTION_44_0(59);
  return v4(v3);
}

uint64_t StartCallCATPatternsExecutor.unsupportedContactsInvalidHandle(_:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v4);
  v1[5] = OUTLINED_FUNCTION_35();
  uint64_t v5 = type metadata accessor for StartCallUnsupportedContactsInvalidHandleParameters(0);
  v1[6] = v5;
  OUTLINED_FUNCTION_11_0(v5);
  v1[7] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_0_14();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v7 = v6;
  *(void *)(v4 + 80) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 88) = v1;
  }
  OUTLINED_FUNCTION_7_27();
  OUTLINED_FUNCTION_20_2();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of StartCallConfirmContactsParameters();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v0 = OUTLINED_FUNCTION_143();
  return v1(v0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of StartCallConfirmContactsParameters();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t StartCallCATPatternsExecutor.unsupportedContactsInvalidHandle(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_79_0();
  OUTLINED_FUNCTION_48();
  uint64_t v13 = v12[6];
  uint64_t v14 = (uint64_t *)v12[7];
  uint64_t v15 = (void (*)(uint64_t *))v12[2];
  *uint64_t v14 = 0;
  uint64_t v16 = (uint64_t)v14 + *(int *)(v13 + 20);
  uint64_t v17 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v16, 1, 1, v17);
  v15(v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v18 = OUTLINED_FUNCTION_36_2();
  v12[8] = v18;
  OUTLINED_FUNCTION_45_4((__n128 *)v18, (__n128)xmmword_467720);
  uint64_t v19 = *v14;
  if (v19)
  {
    uint64_t v20 = type metadata accessor for PhonePersonList();
    uint64_t v21 = v19;
  }
  else
  {
    uint64_t v20 = OUTLINED_FUNCTION_34();
    *(void *)(v18 + 56) = 0;
    *(void *)(v18 + 64) = 0;
  }
  uint64_t v22 = v12[5];
  *(void *)(v18 + 48) = v21;
  *(void *)(v18 + 72) = v20;
  *(void *)(v18 + 80) = 0xD000000000000017;
  OUTLINED_FUNCTION_41_0();
  *(void *)(v18 + 88) = v23;
  _s16SiriDialogEngine15SpeakableStringVSgWOcTm_0(v16, v22, &demangling cache variable for type metadata for SpeakableString?);
  int v24 = OUTLINED_FUNCTION_22_0(v22);
  uint64_t v25 = v12[5];
  if (v24 == 1)
  {
    swift_retain();
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v25, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v18 + 96) = 0u;
    *(_OWORD *)(v18 + 112) = 0u;
  }
  else
  {
    *(void *)(v18 + 120) = v17;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v18 + 96));
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_70();
    v26();
    swift_retain();
  }
  uint64_t v27 = (void *)OUTLINED_FUNCTION_3_0();
  v12[9] = v27;
  *uint64_t v27 = v12;
  v27[1] = StartCallCATPatternsExecutor.unsupportedContactsInvalidHandle(_:);
  OUTLINED_FUNCTION_117();
  return v31(v28, v29, v30, v31, v32, v33, v34, v35, a9, a10, a11, a12);
}

uint64_t StartCallCATPatternsExecutor.unsupportedContactsMultipleContactsUnsupported()()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *uint64_t v1 = v2;
  v1[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  OUTLINED_FUNCTION_24_10();
  unint64_t v3 = OUTLINED_FUNCTION_44_0(56);
  return v4(v3);
}

uint64_t StartCallCATPatternsExecutor.unsupportedContactsNoCallHistoryForRedial()()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *uint64_t v1 = v2;
  v1[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  OUTLINED_FUNCTION_24_10();
  unint64_t v3 = OUTLINED_FUNCTION_44_0(51);
  return v4(v3);
}

uint64_t StartCallCATPatternsExecutor.unsupportedContactsNoContactFoundUserUnknown()()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *uint64_t v1 = v2;
  v1[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  OUTLINED_FUNCTION_24_10();
  unint64_t v3 = OUTLINED_FUNCTION_44_0(54);
  return v4(v3);
}

uint64_t StartCallCATPatternsExecutor.unsupportedContactsNoHandleForLabel(_:)()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v3 = OUTLINED_FUNCTION_48_3(v1, v2);
  uint64_t v4 = type metadata accessor for StartCallUnsupportedContactsNoHandleForLabelParameters(v3);
  *(void *)(v0 + 40) = v4;
  OUTLINED_FUNCTION_11_0(v4);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_0_14();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  OUTLINED_FUNCTION_7_27();
  OUTLINED_FUNCTION_20_2();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of StartCallConfirmContactsParameters();
  swift_task_dealloc();
  uint64_t v0 = OUTLINED_FUNCTION_4_31();
  return v1(v0);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of StartCallConfirmContactsParameters();
  swift_task_dealloc();
  OUTLINED_FUNCTION_13_0();
  return v0();
}

uint64_t StartCallCATPatternsExecutor.unsupportedContactsNoHandleForLabel(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_40_0();
  uint64_t v14 = OUTLINED_FUNCTION_43_8();
  OUTLINED_FUNCTION_102_0(v14);
  *(void *)(v10 + v15) = 0;
  __swift_storeEnumTagSinglePayload(v10 + *(int *)(v12 + 32), 1, 1, v11);
  uint64_t v16 = OUTLINED_FUNCTION_39_6();
  v13(v16);
  StartCallUnsupportedContactsNoHandleForLabelParameters.asKeyValuePairs()();
  OUTLINED_FUNCTION_47_4(v17);
  uint64_t v18 = OUTLINED_FUNCTION_3_0();
  uint64_t v19 = (void *)OUTLINED_FUNCTION_33(v18);
  *uint64_t v19 = v20;
  v19[1] = StartCallCATPatternsExecutor.unsupportedContactsNoHandleForLabel(_:);
  OUTLINED_FUNCTION_10_16();
  OUTLINED_FUNCTION_38_8(45);
  OUTLINED_FUNCTION_26_8();
  return v24(v21, v22, v23, v24, v25, v26, v27, v28, a9, a10);
}

uint64_t StartCallCATPatternsExecutor.unsupportedContactsNoUsableHandleForRedial()()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *uint64_t v1 = v2;
  v1[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  OUTLINED_FUNCTION_24_10();
  unint64_t v3 = OUTLINED_FUNCTION_44_0(52);
  return v4(v3);
}

uint64_t StartCallCATPatternsExecutor.unsupportedContactsUnsupportedMmiUssd()()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *uint64_t v1 = v2;
  v1[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  OUTLINED_FUNCTION_24_10();
  unint64_t v3 = OUTLINED_FUNCTION_44_0(47);
  return v4(v3);
}

uint64_t StartCallCATPatternsExecutor.unsupportedDeviceFaceTimeLink(_:)()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v3 = OUTLINED_FUNCTION_48_3(v1, v2);
  uint64_t v4 = type metadata accessor for StartCallUnsupportedDeviceFaceTimeLinkParameters(v3);
  *(void *)(v0 + 40) = v4;
  OUTLINED_FUNCTION_11_0(v4);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_0_14();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  OUTLINED_FUNCTION_7_27();
  OUTLINED_FUNCTION_20_2();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of StartCallConfirmContactsParameters();
  swift_task_dealloc();
  uint64_t v0 = OUTLINED_FUNCTION_4_31();
  return v1(v0);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of StartCallConfirmContactsParameters();
  swift_task_dealloc();
  OUTLINED_FUNCTION_13_0();
  return v0();
}

#error "10C020: call analysis failed (funcsize=56)"

uint64_t StartCallCATPatternsExecutor.unsupportedDeviceGroupFaceTime(_:)()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v3 = OUTLINED_FUNCTION_48_3(v1, v2);
  uint64_t v4 = type metadata accessor for StartCallUnsupportedDeviceGroupFaceTimeParameters(v3);
  *(void *)(v0 + 40) = v4;
  OUTLINED_FUNCTION_11_0(v4);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_0_14();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  OUTLINED_FUNCTION_7_27();
  OUTLINED_FUNCTION_20_2();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of StartCallConfirmContactsParameters();
  swift_task_dealloc();
  uint64_t v0 = OUTLINED_FUNCTION_4_31();
  return v1(v0);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of StartCallConfirmContactsParameters();
  swift_task_dealloc();
  OUTLINED_FUNCTION_13_0();
  return v0();
}

#error "10C378: call analysis failed (funcsize=56)"

uint64_t StartCallCATPatternsExecutor.unsupportedPreferredCallProvider(_:)(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  return OUTLINED_FUNCTION_21_1((uint64_t)StartCallCATPatternsExecutor.unsupportedPreferredCallProvider(_:));
}

uint64_t StartCallCATPatternsExecutor.unsupportedPreferredCallProvider(_:)()
{
  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  uint64_t v2 = OUTLINED_FUNCTION_110();
  v3(v2);
  uint64_t v4 = *v1;
  unint64_t v5 = v1[1];
  v1[5] = *v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v6 = (__n128 *)OUTLINED_FUNCTION_36_2();
  v1[6] = (uint64_t)v6;
  OUTLINED_FUNCTION_27_0(v6, (__n128)xmmword_467720);
  if (v4)
  {
    uint64_t v7 = type metadata accessor for SirikitDeviceState();
    uint64_t v8 = v4;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
    v6[3].n128_u64[1] = 0;
    v6[4].n128_u64[0] = 0;
  }
  uint64_t v9 = OUTLINED_FUNCTION_81_0(v7, v8);
  if (v5)
  {
    uint64_t v9 = type metadata accessor for PhoneStartCallIntent(v9);
  }
  else
  {
    v6[6].n128_u64[1] = 0;
    v6[7].n128_u64[0] = 0;
  }
  *(void *)(v0 + 72) = v5;
  v6[6].n128_u64[0] = v5;
  v6[7].n128_u64[1] = v9;
  OUTLINED_FUNCTION_126();
  swift_retain();
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v10;
  *uint64_t v10 = v0;
  v10[1] = StartCallCATPatternsExecutor.unsupportedPreferredCallProvider(_:);
  OUTLINED_FUNCTION_20_2();
  return v14(v11, v12, v13, v14, v15, v16, v17, v18);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_0_14();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_5_7();
  *unint64_t v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v7 = v6;
  *(void *)(v4 + 88) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 96) = v1;
  }
  OUTLINED_FUNCTION_7_27();
  OUTLINED_FUNCTION_20_2();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_1_0();
  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 96);
  return v1(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t StartCallCATPatternsExecutor.unsupportedPreferredCallProviderAccountSetupRequired(_:)()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v3 = OUTLINED_FUNCTION_48_3(v1, v2);
  uint64_t v4 = type metadata accessor for StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters(v3);
  *(void *)(v0 + 40) = v4;
  OUTLINED_FUNCTION_11_0(v4);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_0_14();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  OUTLINED_FUNCTION_7_27();
  OUTLINED_FUNCTION_20_2();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of StartCallConfirmContactsParameters();
  swift_task_dealloc();
  uint64_t v0 = OUTLINED_FUNCTION_4_31();
  return v1(v0);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of StartCallConfirmContactsParameters();
  swift_task_dealloc();
  OUTLINED_FUNCTION_13_0();
  return v0();
}

#error "10CA14: call analysis failed (funcsize=60)"

uint64_t _s16SiriDialogEngine15SpeakableStringVSgWOcTm_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_41_5();
  v4();
  return a2;
}

unint64_t lazy protocol witness table accessor for type StartCallCATPatternsIdentifiers and conformance StartCallCATPatternsIdentifiers()
{
  unint64_t result = lazy protocol witness table cache variable for type StartCallCATPatternsIdentifiers and conformance StartCallCATPatternsIdentifiers;
  if (!lazy protocol witness table cache variable for type StartCallCATPatternsIdentifiers and conformance StartCallCATPatternsIdentifiers)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StartCallCATPatternsIdentifiers and conformance StartCallCATPatternsIdentifiers);
  }
  return result;
}

uint64_t protocol witness for StartCallCATPatternsExecuting.confirmContacts(isFaceTime:isFoundInAppConfirmation:isTopMatchConfirmation:_:) in conformance StartCallCATPatternsExecutor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(**v5
                                                                                        + class metadata base offset for StartCallCATPatternsExecutor)
                                                                            + **(int **)(**v5
                                                                                       + class metadata base offset for StartCallCATPatternsExecutor));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  *uint64_t v12 = v6;
  v12[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v14(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.errorWithCodeAirplaneModeEnabled(isEmergency:isResponseFramework:_:) in conformance StartCallCATPatternsExecutor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v4 + 8);
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v10 + *v10);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v13(a1, a2, a3, a4);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.errorWithCodeAppConfigurationRequired(isThirdPartyApp:_:) in conformance StartCallCATPatternsExecutor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v3 + 16);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v11(a1, a2, a3);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.errorWithCodeCallInProgress(_:) in conformance StartCallCATPatternsExecutor(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v2 + 24);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v9(a1, a2);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.errorWithCodeCallRinging(_:) in conformance StartCallCATPatternsExecutor(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v2 + 32);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v9(a1, a2);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.errorWithCodeCallingServiceNotAvailable(isThirdPartyApp:_:) in conformance StartCallCATPatternsExecutor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v3 + 40);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v11(a1, a2, a3);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.errorWithCodeContactNotSupportedByApp(isThirdPartyApp:_:) in conformance StartCallCATPatternsExecutor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v3 + 48);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v11(a1, a2, a3);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.errorWithCodeDownTimeRestrictionEnabled(_:) in conformance StartCallCATPatternsExecutor(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v2 + 56);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v9(a1, a2);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.errorWithCodeScreenTimeRestrictionEnabled() in conformance StartCallCATPatternsExecutor()
{
  uint64_t v2 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v0 + 64);
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v5();
}

uint64_t protocol witness for StartCallCATPatternsExecuting.finalLowConfidenceResponse() in conformance StartCallCATPatternsExecutor()
{
  uint64_t v2 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v0 + 72);
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v5();
}

uint64_t protocol witness for StartCallCATPatternsExecuting.genericError(_:) in conformance StartCallCATPatternsExecutor(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v2 + 80);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v9(a1, a2);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.intentConfirmation(_:) in conformance StartCallCATPatternsExecutor(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v2 + 88);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v9(a1, a2);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.intentConfirmationWithRestrictedContacts(_:) in conformance StartCallCATPatternsExecutor(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v2 + 96);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v9(a1, a2);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.intentHandledResponse(isFirstPartyApp:isWalkieTalkie:shouldPrintDialogOnDisplayMode:_:) in conformance StartCallCATPatternsExecutor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v5 + 104);
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v12 + *v12);
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v15(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.intentHandledResponseWithFaceTimeLink() in conformance StartCallCATPatternsExecutor()
{
  uint64_t v2 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v0 + 112);
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v5();
}

uint64_t protocol witness for StartCallCATPatternsExecuting.internalConversionError(_:) in conformance StartCallCATPatternsExecutor(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v2 + 120);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v9(a1, a2);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.promptForContacts(isFaceTime:isUnsupportedFollowUp:startingOver:_:) in conformance StartCallCATPatternsExecutor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v5 + 128);
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v12 + *v12);
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v15(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.simpleDisambiguateContacts(items:_:) in conformance StartCallCATPatternsExecutor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v3 + 136);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v11(a1, a2, a3);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.simpleDisambiguateContactsHandles(isPhoneNumberHandleDisambiguation:isRequestForHandle:items:_:) in conformance StartCallCATPatternsExecutor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v5 + 144);
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v12 + *v12);
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v15(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.unsupportedCallCapability() in conformance StartCallCATPatternsExecutor()
{
  uint64_t v2 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v0 + 152);
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v5();
}

uint64_t protocol witness for StartCallCATPatternsExecuting.unsupportedCallCapabilityCameraNotAccessible(_:) in conformance StartCallCATPatternsExecutor(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v2 + 160);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v9(a1, a2);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.unsupportedCallCapabilityMicrophoneNotAccessible(_:) in conformance StartCallCATPatternsExecutor(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v2 + 168);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v9(a1, a2);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.unsupportedCallCapabilityVideoCallUnsupported() in conformance StartCallCATPatternsExecutor()
{
  uint64_t v2 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v0 + 176);
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v5();
}

uint64_t protocol witness for StartCallCATPatternsExecuting.unsupportedContactsForeignEmergencyDisambiguation() in conformance StartCallCATPatternsExecutor()
{
  uint64_t v2 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v0 + 184);
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v5();
}

uint64_t protocol witness for StartCallCATPatternsExecuting.unsupportedContactsInvalidHandle(_:) in conformance StartCallCATPatternsExecutor(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v2 + 192);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v9(a1, a2);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.unsupportedContactsMultipleContactsUnsupported() in conformance StartCallCATPatternsExecutor()
{
  uint64_t v2 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v0 + 200);
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v5();
}

uint64_t protocol witness for StartCallCATPatternsExecuting.unsupportedContactsNoCallHistoryForRedial() in conformance StartCallCATPatternsExecutor()
{
  uint64_t v2 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v0 + 208);
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v5();
}

uint64_t protocol witness for StartCallCATPatternsExecuting.unsupportedContactsNoContactFoundUserUnknown() in conformance StartCallCATPatternsExecutor()
{
  uint64_t v2 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v0 + 224);
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v5();
}

uint64_t protocol witness for StartCallCATPatternsExecuting.unsupportedContactsNoHandleForLabel(_:) in conformance StartCallCATPatternsExecutor(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v2 + 232);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v9(a1, a2);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.unsupportedContactsNoUsableHandleForRedial() in conformance StartCallCATPatternsExecutor()
{
  uint64_t v2 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v0 + 240);
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v5();
}

uint64_t protocol witness for StartCallCATPatternsExecuting.unsupportedContactsUnsupportedMmiUssd() in conformance StartCallCATPatternsExecutor()
{
  uint64_t v2 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v0 + 248);
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v5();
}

uint64_t protocol witness for StartCallCATPatternsExecuting.unsupportedDeviceFaceTimeLink(_:) in conformance StartCallCATPatternsExecutor(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(class metadata base offset for StartCallCATPatternsExecutor
                                                            + **v2
                                                            + 256)
                                                + **(int **)(class metadata base offset for StartCallCATPatternsExecutor
                                                           + **v2
                                                           + 256));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v8(a1, a2);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.unsupportedDeviceGroupFaceTime(_:) in conformance StartCallCATPatternsExecutor(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(class metadata base offset for StartCallCATPatternsExecutor
                                                            + **v2
                                                            + 264)
                                                + **(int **)(class metadata base offset for StartCallCATPatternsExecutor
                                                           + **v2
                                                           + 264));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v8(a1, a2);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.unsupportedPreferredCallProvider(_:) in conformance StartCallCATPatternsExecutor(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(class metadata base offset for StartCallCATPatternsExecutor
                                                            + **v2
                                                            + 272)
                                                + **(int **)(class metadata base offset for StartCallCATPatternsExecutor
                                                           + **v2
                                                           + 272));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v8(a1, a2);
}

uint64_t protocol witness for StartCallCATPatternsExecuting.unsupportedPreferredCallProviderAccountSetupRequired(_:) in conformance StartCallCATPatternsExecutor(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(class metadata base offset for StartCallCATPatternsExecutor
                                                            + **v2
                                                            + 280)
                                                + **(int **)(class metadata base offset for StartCallCATPatternsExecutor
                                                           + **v2
                                                           + 280));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v8(a1, a2);
}

uint64_t getEnumTagSinglePayload for StartCallCATPatternsIdentifiers(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xDD)
  {
    if (a2 + 35 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 35) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 36;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x24;
  int v5 = v6 - 36;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for StartCallCATPatternsIdentifiers(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 35 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 35) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xDD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xDC)
  {
    unsigned int v6 = ((a2 - 221) >> 8) + 1;
    *unint64_t result = a2 + 35;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10F674);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 35;
        break;
    }
  }
  return result;
}

void type metadata accessor for StartCallCATPatternsIdentifiers()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for StartCallConfirmContactsParameters(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v7);
    }
    uint64_t v10 = a3[5];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v10, 1, v7))
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v11, v12, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v7);
    }
    uint64_t v14 = a3[6];
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v14, 1, v7))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v15, v16, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v7);
    }
    uint64_t v18 = a3[8];
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    uint64_t v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    swift_retain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v20, 1, v7))
    {
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v19, v20, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)v19, 0, 1, v7);
    }
    uint64_t v22 = a3[10];
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    *((unsigned char *)a1 + v22) = *((unsigned char *)a2 + v22);
    uint64_t v23 = a3[12];
    *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
    *(uint64_t *)((char *)a1 + v23) = *(uint64_t *)((char *)a2 + v23);
    uint64_t v24 = a3[13];
    uint64_t v25 = (char *)a1 + v24;
    uint64_t v26 = (char *)a2 + v24;
    swift_retain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v26, 1, v7))
    {
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v25, v26, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)v25, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for StartCallConfirmContactsParameters(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString();
  if (!__swift_getEnumTagSinglePayload(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  uint64_t v5 = a1 + a2[5];
  if (!__swift_getEnumTagSinglePayload(v5, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v5, v4);
  }
  uint64_t v6 = a1 + a2[6];
  if (!__swift_getEnumTagSinglePayload(v6, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v6, v4);
  }
  swift_release();
  uint64_t v7 = a1 + a2[8];
  if (!__swift_getEnumTagSinglePayload(v7, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v7, v4);
  }
  swift_release();
  uint64_t v8 = a1 + a2[13];
  uint64_t result = __swift_getEnumTagSinglePayload(v8, 1, v4);
  if (!result)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    return v10(v8, v4);
  }
  return result;
}

char *initializeWithCopy for StartCallConfirmContactsParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v8], 1, v6))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v9, v10, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v12], 1, v6))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v13, v14, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v6);
  }
  uint64_t v16 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  swift_retain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v6))
  {
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v17, v18, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v6);
  }
  uint64_t v20 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v20] = a2[v20];
  uint64_t v21 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  *(void *)&a1[v21] = *(void *)&a2[v21];
  uint64_t v22 = a3[13];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  swift_retain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v24, 1, v6))
  {
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v23, v24, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v23, 0, 1, v6);
  }
  return a1;
}

char *assignWithCopy for StartCallConfirmContactsParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (EnumTagSinglePayload)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = __swift_getEnumTagSinglePayload((uint64_t)&a1[v11], 1, v6);
  int v15 = __swift_getEnumTagSinglePayload((uint64_t)v13, 1, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v12, v13, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
LABEL_13:
  uint64_t v18 = a3[6];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  int v21 = __swift_getEnumTagSinglePayload((uint64_t)&a1[v18], 1, v6);
  int v22 = __swift_getEnumTagSinglePayload((uint64_t)v20, 1, v6);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v19, v20, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)v19, 0, 1, v6);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v23 = *(void *)(v6 - 8);
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v19, v6);
LABEL_18:
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v19, v20, v6);
LABEL_19:
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_retain();
  swift_release();
  uint64_t v25 = a3[8];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  int v28 = __swift_getEnumTagSinglePayload((uint64_t)&a1[v25], 1, v6);
  int v29 = __swift_getEnumTagSinglePayload((uint64_t)v27, 1, v6);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v26, v27, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)v26, 0, 1, v6);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  uint64_t v30 = *(void *)(v6 - 8);
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v26, v6);
LABEL_24:
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v30 + 24))(v26, v27, v6);
LABEL_25:
  a1[a3[9]] = a2[a3[9]];
  a1[a3[10]] = a2[a3[10]];
  a1[a3[11]] = a2[a3[11]];
  *(void *)&a1[a3[12]] = *(void *)&a2[a3[12]];
  swift_retain();
  swift_release();
  uint64_t v32 = a3[13];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = &a2[v32];
  int v35 = __swift_getEnumTagSinglePayload((uint64_t)&a1[v32], 1, v6);
  int v36 = __swift_getEnumTagSinglePayload((uint64_t)v34, 1, v6);
  if (!v35)
  {
    uint64_t v37 = *(void *)(v6 - 8);
    if (!v36)
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 24))(v33, v34, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v37 + 8))(v33, v6);
    goto LABEL_30;
  }
  if (v36)
  {
LABEL_30:
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v33, v34, *(void *)(*(void *)(v38 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v33, v34, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v33, 0, 1, v6);
  return a1;
}

char *initializeWithTake for StartCallConfirmContactsParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v8], 1, v6))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v9, v10, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v12];
  int v14 = &a2[v12];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v12], 1, v6))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v13, v14, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v6);
  }
  uint64_t v16 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v16], 1, v6))
  {
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v17, v18, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v6);
  }
  uint64_t v20 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v20] = a2[v20];
  uint64_t v21 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  *(void *)&a1[v21] = *(void *)&a2[v21];
  uint64_t v22 = a3[13];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  if (__swift_getEnumTagSinglePayload((uint64_t)v24, 1, v6))
  {
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v23, v24, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v23, 0, 1, v6);
  }
  return a1;
}

char *assignWithTake for StartCallConfirmContactsParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (EnumTagSinglePayload)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = __swift_getEnumTagSinglePayload((uint64_t)&a1[v11], 1, v6);
  int v15 = __swift_getEnumTagSinglePayload((uint64_t)v13, 1, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v12, v13, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
LABEL_13:
  uint64_t v18 = a3[6];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  int v21 = __swift_getEnumTagSinglePayload((uint64_t)&a1[v18], 1, v6);
  int v22 = __swift_getEnumTagSinglePayload((uint64_t)v20, 1, v6);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v19, v20, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)v19, 0, 1, v6);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v23 = *(void *)(v6 - 8);
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v19, v6);
LABEL_18:
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 40))(v19, v20, v6);
LABEL_19:
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_release();
  uint64_t v25 = a3[8];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  int v28 = __swift_getEnumTagSinglePayload((uint64_t)&a1[v25], 1, v6);
  int v29 = __swift_getEnumTagSinglePayload((uint64_t)v27, 1, v6);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v26, v27, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)v26, 0, 1, v6);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  uint64_t v30 = *(void *)(v6 - 8);
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v26, v6);
LABEL_24:
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v30 + 40))(v26, v27, v6);
LABEL_25:
  uint64_t v32 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v32] = a2[v32];
  uint64_t v33 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  *(void *)&a1[v33] = *(void *)&a2[v33];
  swift_release();
  uint64_t v34 = a3[13];
  int v35 = &a1[v34];
  int v36 = &a2[v34];
  int v37 = __swift_getEnumTagSinglePayload((uint64_t)&a1[v34], 1, v6);
  int v38 = __swift_getEnumTagSinglePayload((uint64_t)v36, 1, v6);
  if (!v37)
  {
    uint64_t v39 = *(void *)(v6 - 8);
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 40))(v35, v36, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v39 + 8))(v35, v6);
    goto LABEL_30;
  }
  if (v38)
  {
LABEL_30:
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v35, v36, *(void *)(*(void *)(v40 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v35, v36, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v35, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for StartCallConfirmContactsParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_110F40);
}

uint64_t sub_110F40()
{
  OUTLINED_FUNCTION_125();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_1_44();
  if (*(_DWORD *)(v3 + 84) != v1) {
    return OUTLINED_FUNCTION_23_12(*(void *)(v0 + *(int *)(v2 + 28)));
  }
  uint64_t v4 = OUTLINED_FUNCTION_115();

  return __swift_getEnumTagSinglePayload(v4, v5, v6);
}

uint64_t storeEnumTagSinglePayload for StartCallConfirmContactsParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_110FCC);
}

void sub_110FCC()
{
  OUTLINED_FUNCTION_85();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_1_44();
  if (*(_DWORD *)(v4 + 84) == v3)
  {
    uint64_t v5 = OUTLINED_FUNCTION_63_1();
    __swift_storeEnumTagSinglePayload(v5, v6, v7, v8);
  }
  else
  {
    *(void *)(v1 + *(int *)(v2 + 28)) = v0;
  }
}

void type metadata completion function for StartCallConfirmContactsParameters()
{
  type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t initializeBufferWithCopyOfBuffer for StartCallErrorWithCodeAirplaneModeEnabledParameters(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
    uint64_t v6 = *(int *)(a3 + 28);
    uint64_t v7 = (void *)(a1 + v6);
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for SpeakableString();
    swift_retain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
    }
  }
  return v5;
}

uint64_t destroy for StartCallErrorWithCodeAirplaneModeEnabledParameters(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for SpeakableString();
  uint64_t result = __swift_getEnumTagSinglePayload(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v7(v4, v5);
  }
  return result;
}

uint64_t initializeWithCopy for StartCallErrorWithCodeAirplaneModeEnabledParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = (const void *)(a2 + v4);
  uint64_t v7 = type metadata accessor for SpeakableString();
  swift_retain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v7);
  }
  return a1;
}

uint64_t assignWithCopy for StartCallErrorWithCodeAirplaneModeEnabledParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  int v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (!EnumTagSinglePayload)
  {
    uint64_t v12 = *(void *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(void *, const void *, uint64_t))(v12 + 24))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  return a1;
}

uint64_t initializeWithTake for StartCallErrorWithCodeAirplaneModeEnabledParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = (const void *)(a2 + v4);
  uint64_t v7 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v7);
  }
  return a1;
}

uint64_t assignWithTake for StartCallErrorWithCodeAirplaneModeEnabledParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  int v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (!EnumTagSinglePayload)
  {
    uint64_t v12 = *(void *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(void *, const void *, uint64_t))(v12 + 40))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for StartCallErrorWithCodeAirplaneModeEnabledParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1117B4);
}

uint64_t sub_1117B4()
{
  OUTLINED_FUNCTION_129();
  if (v3) {
    return OUTLINED_FUNCTION_23_12(*v1);
  }
  OUTLINED_FUNCTION_151();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = (uint64_t)v1 + *(int *)(v2 + 28);

  return __swift_getEnumTagSinglePayload(v6, v0, v5);
}

uint64_t storeEnumTagSinglePayload for StartCallErrorWithCodeAirplaneModeEnabledParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_11183C);
}

void sub_11183C()
{
  OUTLINED_FUNCTION_86_1();
  if (v2)
  {
    *uint64_t v1 = v0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_78_0();
    __swift_storeEnumTagSinglePayload(v3, v4, v5, v6);
  }
}

void type metadata completion function for StartCallErrorWithCodeAirplaneModeEnabledParameters()
{
  type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t getEnumTagSinglePayload for StartCallErrorWithCodeAppConfigurationRequiredParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, j____swift_get_extra_inhabitant_index_96Tm);
}

uint64_t storeEnumTagSinglePayload for StartCallErrorWithCodeAppConfigurationRequiredParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_97Tm);
}

void type metadata accessor for StartCallErrorWithCodeCallInProgressParameters()
{
}

void type metadata accessor for StartCallErrorWithCodeCallRingingParameters()
{
}

uint64_t getEnumTagSinglePayload for StartCallErrorWithCodeCallingServiceNotAvailableParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, j____swift_get_extra_inhabitant_index_96Tm_0);
}

uint64_t storeEnumTagSinglePayload for StartCallErrorWithCodeCallingServiceNotAvailableParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_97Tm_0);
}

uint64_t initializeBufferWithCopyOfBuffer for StartCallErrorWithCodeAppConfigurationRequiredParameters(uint64_t a1, uint64_t *a2)
{
  OUTLINED_FUNCTION_1_44();
  if ((*(_DWORD *)(v5 + 80) & 0x20000) != 0)
  {
    OUTLINED_FUNCTION_112(*a2);
  }
  else
  {
    uint64_t v6 = v4;
    type metadata accessor for SpeakableString();
    if (OUTLINED_FUNCTION_18_16())
    {
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      uint64_t v8 = OUTLINED_FUNCTION_11_0(v7);
      OUTLINED_FUNCTION_127(v8, v10, *(void *)(v9 + 64));
    }
    else
    {
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_25_2();
      v11();
      OUTLINED_FUNCTION_11_24(a1);
    }
    uint64_t v12 = *(int *)(v6 + 24);
    *(unsigned char *)(a1 + *(int *)(v6 + 20)) = *((unsigned char *)a2 + *(int *)(v6 + 20));
    uint64_t v13 = a1 + v12;
    if (OUTLINED_FUNCTION_18_16())
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      uint64_t v15 = OUTLINED_FUNCTION_11_0(v14);
      OUTLINED_FUNCTION_58_2(v15, v17, *(void *)(v16 + 64));
    }
    else
    {
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_25_2();
      v18();
      OUTLINED_FUNCTION_11_24(v13);
    }
  }
  return a1;
}

uint64_t destroy for StartCallErrorWithCodeAppConfigurationRequiredParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString();
  if (!OUTLINED_FUNCTION_22_0(a1))
  {
    OUTLINED_FUNCTION_10();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t result = OUTLINED_FUNCTION_22_0(v6);
  if (!result)
  {
    OUTLINED_FUNCTION_10();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    return v9(v6, v4);
  }
  return result;
}

uint64_t initializeWithCopy for StartCallErrorWithCodeAppConfigurationRequiredParameters()
{
  OUTLINED_FUNCTION_57_2();
  if (OUTLINED_FUNCTION_18_16())
  {
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v4 = OUTLINED_FUNCTION_11_0(v3);
    OUTLINED_FUNCTION_127(v4, v6, *(void *)(v5 + 64));
  }
  else
  {
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_25_2();
    v7();
    OUTLINED_FUNCTION_11_24(v0);
  }
  uint64_t v8 = *(int *)(v2 + 24);
  *(unsigned char *)(v0 + *(int *)(v2 + 20)) = *(unsigned char *)(v1 + *(int *)(v2 + 20));
  uint64_t v9 = v0 + v8;
  if (OUTLINED_FUNCTION_18_16())
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v11 = OUTLINED_FUNCTION_11_0(v10);
    OUTLINED_FUNCTION_58_2(v11, v13, *(void *)(v12 + 64));
  }
  else
  {
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_25_2();
    v14();
    OUTLINED_FUNCTION_11_24(v9);
  }
  return v0;
}

uint64_t assignWithCopy for StartCallErrorWithCodeAppConfigurationRequiredParameters()
{
  OUTLINED_FUNCTION_57_2();
  int v4 = OUTLINED_FUNCTION_17_15(v0);
  if (v3)
  {
    if (!v4)
    {
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_25_2();
      v5();
      OUTLINED_FUNCTION_11_24(v0);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  OUTLINED_FUNCTION_1_44();
  if (v6)
  {
    OUTLINED_FUNCTION_80_0();
    v7();
LABEL_6:
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v9 = OUTLINED_FUNCTION_11_0(v8);
    OUTLINED_FUNCTION_127(v9, v11, *(void *)(v10 + 64));
    goto LABEL_7;
  }
  OUTLINED_FUNCTION_91_1();
  v23();
LABEL_7:
  *(unsigned char *)(v0 + *(int *)(v2 + 20)) = *(unsigned char *)(v1 + *(int *)(v2 + 20));
  uint64_t v12 = v0 + *(int *)(v2 + 24);
  int v13 = OUTLINED_FUNCTION_17_15(v12);
  if (!v3)
  {
    OUTLINED_FUNCTION_1_44();
    if (!v15)
    {
      OUTLINED_FUNCTION_91_1();
      v24();
      return v0;
    }
    uint64_t v16 = OUTLINED_FUNCTION_55_2();
    v17(v16);
    goto LABEL_12;
  }
  if (v13)
  {
LABEL_12:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v19 = OUTLINED_FUNCTION_11_0(v18);
    OUTLINED_FUNCTION_58_2(v19, v21, *(void *)(v20 + 64));
    return v0;
  }
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_25_2();
  v14();
  OUTLINED_FUNCTION_11_24(v12);
  return v0;
}

uint64_t initializeWithTake for StartCallErrorWithCodeAppConfigurationRequiredParameters()
{
  OUTLINED_FUNCTION_57_2();
  if (OUTLINED_FUNCTION_18_16())
  {
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v4 = OUTLINED_FUNCTION_11_0(v3);
    OUTLINED_FUNCTION_127(v4, v6, *(void *)(v5 + 64));
  }
  else
  {
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_70();
    v7();
    OUTLINED_FUNCTION_11_24(v0);
  }
  uint64_t v8 = *(int *)(v2 + 24);
  *(unsigned char *)(v0 + *(int *)(v2 + 20)) = *(unsigned char *)(v1 + *(int *)(v2 + 20));
  uint64_t v9 = v0 + v8;
  if (OUTLINED_FUNCTION_18_16())
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v11 = OUTLINED_FUNCTION_11_0(v10);
    OUTLINED_FUNCTION_58_2(v11, v13, *(void *)(v12 + 64));
  }
  else
  {
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_70();
    v14();
    OUTLINED_FUNCTION_11_24(v9);
  }
  return v0;
}

uint64_t assignWithTake for StartCallErrorWithCodeAppConfigurationRequiredParameters()
{
  OUTLINED_FUNCTION_57_2();
  int v4 = OUTLINED_FUNCTION_17_15(v0);
  if (v3)
  {
    if (!v4)
    {
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_70();
      v5();
      OUTLINED_FUNCTION_11_24(v0);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  OUTLINED_FUNCTION_1_44();
  if (v6)
  {
    OUTLINED_FUNCTION_80_0();
    v7();
LABEL_6:
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v9 = OUTLINED_FUNCTION_11_0(v8);
    OUTLINED_FUNCTION_127(v9, v11, *(void *)(v10 + 64));
    goto LABEL_7;
  }
  OUTLINED_FUNCTION_90();
  v24();
LABEL_7:
  uint64_t v12 = *(int *)(v2 + 24);
  *(unsigned char *)(v0 + *(int *)(v2 + 20)) = *(unsigned char *)(v1 + *(int *)(v2 + 20));
  uint64_t v13 = v0 + v12;
  int v14 = OUTLINED_FUNCTION_17_15(v0 + v12);
  if (!v3)
  {
    OUTLINED_FUNCTION_1_44();
    if (!v16)
    {
      OUTLINED_FUNCTION_90();
      v25();
      return v0;
    }
    uint64_t v17 = OUTLINED_FUNCTION_55_2();
    v18(v17);
    goto LABEL_12;
  }
  if (v14)
  {
LABEL_12:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v20 = OUTLINED_FUNCTION_11_0(v19);
    OUTLINED_FUNCTION_58_2(v20, v22, *(void *)(v21 + 64));
    return v0;
  }
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_70();
  v15();
  OUTLINED_FUNCTION_11_24(v13);
  return v0;
}

uint64_t getEnumTagSinglePayload for StartCallErrorWithCodeContactNotSupportedByAppParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, j____swift_get_extra_inhabitant_index_96Tm_1);
}

uint64_t storeEnumTagSinglePayload for StartCallErrorWithCodeContactNotSupportedByAppParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_97Tm_1);
}

void type metadata completion function for StartCallErrorWithCodeAppConfigurationRequiredParameters()
{
  type metadata accessor for SpeakableString?();
  if (v1 <= 0x3F)
  {
    OUTLINED_FUNCTION_64_0(v0);
    OUTLINED_FUNCTION_156();
    OUTLINED_FUNCTION_2_4();
  }
}

uint64_t destroy for StartCallErrorWithCodeDownTimeRestrictionEnabledParameters()
{
  swift_release();

  return swift_release();
}

void type metadata accessor for StartCallErrorWithCodeDownTimeRestrictionEnabledParameters()
{
}

void type metadata accessor for StartCallGenericErrorParameters()
{
}

void type metadata accessor for StartCallIntentConfirmationParameters()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for StartCallIntentConfirmationWithRestrictedContactsParameters(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for SpeakableString();
    swift_retain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
    }
    uint64_t v13 = a3[7];
    *(uint64_t *)((char *)v7 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    int v14 = (char *)v7 + v13;
    int v15 = (char *)a2 + v13;
    swift_retain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v11))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v14, v15, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v11);
    }
    *(uint64_t *)((char *)v7 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  }
  swift_retain();
  return v7;
}

uint64_t destroy for StartCallIntentConfirmationWithRestrictedContactsParameters(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for SpeakableString();
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  swift_release();
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  if (!__swift_getEnumTagSinglePayload(v6, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v6, v5);
  }

  return swift_release();
}

void *initializeWithCopy for StartCallIntentConfirmationWithRestrictedContactsParameters(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SpeakableString();
  swift_retain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  }
  uint64_t v11 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  swift_retain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v9))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v12, v13, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v9);
  }
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_retain();
  return a1;
}

void *assignWithCopy for StartCallIntentConfirmationWithRestrictedContactsParameters(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  int v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (EnumTagSinglePayload)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_retain();
  swift_release();
  uint64_t v14 = a3[7];
  int v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  int v17 = __swift_getEnumTagSinglePayload((uint64_t)a1 + v14, 1, v9);
  int v18 = __swift_getEnumTagSinglePayload((uint64_t)v16, 1, v9);
  if (!v17)
  {
    uint64_t v19 = *(void *)(v9 - 8);
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v15, v16, v9);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v15, v9);
    goto LABEL_12;
  }
  if (v18)
  {
LABEL_12:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v15, v16, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v9);
LABEL_13:
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for StartCallIntentConfirmationWithRestrictedContactsParameters(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  }
  uint64_t v11 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v11, 1, v9))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v12, v13, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v9);
  }
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  return a1;
}

void *assignWithTake for StartCallIntentConfirmationWithRestrictedContactsParameters(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  int v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (EnumTagSinglePayload)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v7, v8, v9);
LABEL_7:
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_release();
  uint64_t v14 = a3[7];
  int v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  int v17 = __swift_getEnumTagSinglePayload((uint64_t)a1 + v14, 1, v9);
  int v18 = __swift_getEnumTagSinglePayload((uint64_t)v16, 1, v9);
  if (!v17)
  {
    uint64_t v19 = *(void *)(v9 - 8);
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 40))(v15, v16, v9);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v15, v9);
    goto LABEL_12;
  }
  if (v18)
  {
LABEL_12:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v15, v16, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v9);
LABEL_13:
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for StartCallIntentConfirmationWithRestrictedContactsParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, j____swift_get_extra_inhabitant_index_108Tm);
}

uint64_t storeEnumTagSinglePayload for StartCallIntentConfirmationWithRestrictedContactsParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_109Tm);
}

void type metadata completion function for StartCallIntentConfirmationWithRestrictedContactsParameters()
{
  type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

char *initializeBufferWithCopyOfBuffer for StartCallIntentHandledResponseParameters(char *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)a1 = *a2;
    uint64_t v4 = (char *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v4, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)v4, 0, 1, v7);
    }
    uint64_t v10 = a3[6];
    *(void *)&v4[a3[5]] = *(uint64_t *)((char *)a2 + a3[5]);
    int v11 = &v4[v10];
    uint64_t v12 = (char *)a2 + v10;
    swift_retain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v7))
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v11, v12, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v7);
    }
    uint64_t v14 = a3[8];
    *(void *)&v4[a3[7]] = *(uint64_t *)((char *)a2 + a3[7]);
    v4[v14] = *((unsigned char *)a2 + v14);
    uint64_t v15 = a3[10];
    v4[a3[9]] = *((unsigned char *)a2 + a3[9]);
    *(void *)&v4[v15] = *(uint64_t *)((char *)a2 + v15);
    v4[a3[11]] = *((unsigned char *)a2 + a3[11]);
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for StartCallIntentHandledResponseParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString();
  if (!__swift_getEnumTagSinglePayload(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  swift_release();
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  if (!__swift_getEnumTagSinglePayload(v5, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v5, v4);
  }
  swift_release();

  return swift_release();
}

char *initializeWithCopy for StartCallIntentHandledResponseParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  swift_retain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v6))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v9, v10, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  a1[v12] = a2[v12];
  uint64_t v13 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  *(void *)&a1[v13] = *(void *)&a2[v13];
  a1[a3[11]] = a2[a3[11]];
  swift_retain();
  swift_retain();
  return a1;
}

char *assignWithCopy for StartCallIntentHandledResponseParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (EnumTagSinglePayload)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  swift_retain();
  swift_release();
  uint64_t v11 = a3[6];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = __swift_getEnumTagSinglePayload((uint64_t)&a1[v11], 1, v6);
  int v15 = __swift_getEnumTagSinglePayload((uint64_t)v13, 1, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }
  if (v15)
  {
LABEL_12:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v12, v13, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v6);
LABEL_13:
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_retain();
  swift_release();
  a1[a3[8]] = a2[a3[8]];
  a1[a3[9]] = a2[a3[9]];
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  swift_retain();
  swift_release();
  a1[a3[11]] = a2[a3[11]];
  return a1;
}

char *initializeWithTake for StartCallIntentHandledResponseParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v8], 1, v6))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v9, v10, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  a1[v12] = a2[v12];
  uint64_t v13 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  *(void *)&a1[v13] = *(void *)&a2[v13];
  a1[a3[11]] = a2[a3[11]];
  return a1;
}

char *assignWithTake for StartCallIntentHandledResponseParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (EnumTagSinglePayload)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  swift_release();
  uint64_t v11 = a3[6];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = __swift_getEnumTagSinglePayload((uint64_t)&a1[v11], 1, v6);
  int v15 = __swift_getEnumTagSinglePayload((uint64_t)v13, 1, v6);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
    goto LABEL_12;
  }
  if (v15)
  {
LABEL_12:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(v12, v13, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v6);
LABEL_13:
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_release();
  uint64_t v18 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  a1[v18] = a2[v18];
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  swift_release();
  a1[a3[11]] = a2[a3[11]];
  return a1;
}

uint64_t getEnumTagSinglePayload for StartCallIntentHandledResponseParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, j____swift_get_extra_inhabitant_index_111Tm);
}

uint64_t storeEnumTagSinglePayload for StartCallIntentHandledResponseParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_112Tm);
}

void type metadata completion function for StartCallIntentHandledResponseParameters()
{
  type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void *storeEnumTagSinglePayload for StartCallErrorWithCodeCallInProgressParameters(void *result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *((unsigned char *)result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *((unsigned char *)result + 8) = 0;
    }
    if (a2) {
      return OUTLINED_FUNCTION_153_0(result, a2);
    }
  }
  return result;
}

void type metadata accessor for StartCallInternalConversionErrorParameters()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for StartCallPromptForContactsParameters(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v7);
    }
    uint64_t v10 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    *((unsigned char *)a1 + v10) = *((unsigned char *)a2 + v10);
    uint64_t v11 = a3[7];
    uint64_t v12 = a3[8];
    uint64_t v13 = (char *)a1 + v11;
    int v14 = (char *)a2 + v11;
    *(void *)uint64_t v13 = *(void *)v14;
    v13[8] = v14[8];
    *((unsigned char *)a1 + v12) = *((unsigned char *)a2 + v12);
  }
  return a1;
}

char *initializeWithCopy for StartCallPromptForContactsParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  a1[v8] = a2[v8];
  uint64_t v9 = a3[7];
  uint64_t v10 = a3[8];
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v12[8];
  a1[v10] = a2[v10];
  return a1;
}

char *assignWithCopy for StartCallPromptForContactsParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
LABEL_7:
  a1[a3[5]] = a2[a3[5]];
  a1[a3[6]] = a2[a3[6]];
  uint64_t v11 = a3[7];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = *(void *)v13;
  v12[8] = v13[8];
  *(void *)uint64_t v12 = v14;
  a1[a3[8]] = a2[a3[8]];
  return a1;
}

char *initializeWithTake for StartCallPromptForContactsParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  a1[v8] = a2[v8];
  uint64_t v9 = a3[7];
  uint64_t v10 = a3[8];
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v12[8];
  a1[v10] = a2[v10];
  return a1;
}

char *assignWithTake for StartCallPromptForContactsParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
LABEL_7:
  uint64_t v11 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  a1[v11] = a2[v11];
  uint64_t v12 = a3[7];
  uint64_t v13 = a3[8];
  uint64_t v14 = &a1[v12];
  int v15 = &a2[v12];
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  a1[v13] = a2[v13];
  return a1;
}

uint64_t getEnumTagSinglePayload for StartCallPromptForContactsParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_11423C);
}

uint64_t __swift_get_extra_inhabitant_index_96Tm()
{
  OUTLINED_FUNCTION_125();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_1_44();
  if (*(_DWORD *)(v3 + 84) == v1)
  {
    uint64_t v4 = OUTLINED_FUNCTION_115();
    return __swift_getEnumTagSinglePayload(v4, v5, v6);
  }
  else
  {
    unsigned int v8 = *(unsigned __int8 *)(v0 + *(int *)(v2 + 20));
    if (v8 >= 2) {
      return ((v8 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for StartCallPromptForContactsParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1142E8);
}

void __swift_store_extra_inhabitant_index_97Tm()
{
  OUTLINED_FUNCTION_85();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_1_44();
  if (*(_DWORD *)(v4 + 84) == v3)
  {
    uint64_t v5 = OUTLINED_FUNCTION_63_1();
    __swift_storeEnumTagSinglePayload(v5, v6, v7, v8);
  }
  else
  {
    *(unsigned char *)(v1 + *(int *)(v2 + 20)) = v0 + 1;
  }
}

void type metadata completion function for StartCallPromptForContactsParameters()
{
  type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for StartCallSimpleDisambiguateContactsParameters(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for SpeakableString();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
    }
  }
  return v5;
}

uint64_t destroy for StartCallSimpleDisambiguateContactsParameters(void *a1, uint64_t a2)
{
  return destroy for StartCallSimpleDisambiguateContactsParameters(a1, a2, (void (*)(void))&_swift_bridgeObjectRelease);
}

void *initializeWithCopy for StartCallSimpleDisambiguateContactsParameters(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for SpeakableString();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v7);
  }
  return a1;
}

void *assignWithCopy for StartCallSimpleDisambiguateContactsParameters(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  int v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (!EnumTagSinglePayload)
  {
    uint64_t v12 = *(void *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  return a1;
}

void *assignWithTake for StartCallSimpleDisambiguateContactsParameters(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  int v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (!EnumTagSinglePayload)
  {
    uint64_t v12 = *(void *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for StartCallSimpleDisambiguateContactsParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_11493C);
}

uint64_t sub_11493C(uint64_t *a1, int a2)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v2 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v2) = -1;
    }
    return (v2 + 1);
  }
  else
  {
    OUTLINED_FUNCTION_151();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v4 = OUTLINED_FUNCTION_135_0();
    return __swift_getEnumTagSinglePayload(v4, v5, v6);
  }
}

uint64_t storeEnumTagSinglePayload for StartCallSimpleDisambiguateContactsParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1149CC);
}

void *sub_1149CC(void *result, int a2, int a3)
{
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_78_0();
    return (void *)__swift_storeEnumTagSinglePayload(v3, v4, v5, v6);
  }
  return result;
}

void type metadata completion function for StartCallSimpleDisambiguateContactsParameters()
{
}

{
  unint64_t v0;

  type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    OUTLINED_FUNCTION_2_4();
  }
}

uint64_t destroy for StartCallSimpleDisambiguateContactsHandlesParameters()
{
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeBufferWithCopyOfBuffer for StartCallSimpleDisambiguateContactsHandlesParameters(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for StartCallSimpleDisambiguateContactsHandlesParameters(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for StartCallSimpleDisambiguateContactsHandlesParameters(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

void type metadata accessor for StartCallSimpleDisambiguateContactsHandlesParameters()
{
}

uint64_t getEnumTagSinglePayload for StartCallUnsupportedCallCapabilityCameraNotAccessibleParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_114BD0);
}

uint64_t sub_114BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);

  return __swift_getEnumTagSinglePayload(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for StartCallUnsupportedCallCapabilityCameraNotAccessibleParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_114C30);
}

uint64_t sub_114C30()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v0 = OUTLINED_FUNCTION_63_1();

  return __swift_storeEnumTagSinglePayload(v0, v1, v2, v3);
}

uint64_t initializeBufferWithCopyOfBuffer for StartCallUnsupportedCallCapabilityCameraNotAccessibleParameters(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                 - 8);
  if ((*(_DWORD *)(v4 + 80) & 0x20000) != 0)
  {
    OUTLINED_FUNCTION_112(*a2);
  }
  else
  {
    uint64_t v5 = v4;
    type metadata accessor for SpeakableString();
    uint64_t v6 = OUTLINED_FUNCTION_72_1();
    if (v6)
    {
      OUTLINED_FUNCTION_128(v6, v7, *(void *)(v5 + 64));
    }
    else
    {
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_41_5();
      v8();
      OUTLINED_FUNCTION_30_5();
    }
  }
  return a1;
}

uint64_t initializeWithCopy for StartCallUnsupportedCallCapabilityCameraNotAccessibleParameters()
{
  OUTLINED_FUNCTION_70_0();
  if (OUTLINED_FUNCTION_72_1())
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v2 = OUTLINED_FUNCTION_11_0(v1);
    OUTLINED_FUNCTION_128(v2, v4, *(void *)(v3 + 64));
  }
  else
  {
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_41_5();
    v5();
    OUTLINED_FUNCTION_30_5();
  }
  return v0;
}

uint64_t assignWithCopy for StartCallUnsupportedCallCapabilityCameraNotAccessibleParameters()
{
  uint64_t v1 = OUTLINED_FUNCTION_70_0();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v0, 1, v1);
  int v3 = OUTLINED_FUNCTION_72_1();
  if (!EnumTagSinglePayload)
  {
    OUTLINED_FUNCTION_1_44();
    if (!v5)
    {
      uint64_t v13 = OUTLINED_FUNCTION_157();
      v14(v13);
      return v0;
    }
    uint64_t v6 = OUTLINED_FUNCTION_131();
    v7(v6);
    goto LABEL_6;
  }
  if (v3)
  {
LABEL_6:
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v9 = OUTLINED_FUNCTION_11_0(v8);
    OUTLINED_FUNCTION_128(v9, v11, *(void *)(v10 + 64));
    return v0;
  }
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_41_5();
  v4();
  OUTLINED_FUNCTION_30_5();
  return v0;
}

uint64_t initializeWithTake for StartCallUnsupportedCallCapabilityCameraNotAccessibleParameters()
{
  OUTLINED_FUNCTION_70_0();
  if (OUTLINED_FUNCTION_72_1())
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v2 = OUTLINED_FUNCTION_11_0(v1);
    OUTLINED_FUNCTION_128(v2, v4, *(void *)(v3 + 64));
  }
  else
  {
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_70();
    v5();
    OUTLINED_FUNCTION_30_5();
  }
  return v0;
}

uint64_t assignWithTake for StartCallUnsupportedCallCapabilityCameraNotAccessibleParameters()
{
  uint64_t v1 = OUTLINED_FUNCTION_70_0();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v0, 1, v1);
  int v3 = OUTLINED_FUNCTION_72_1();
  if (!EnumTagSinglePayload)
  {
    OUTLINED_FUNCTION_1_44();
    if (!v5)
    {
      uint64_t v13 = OUTLINED_FUNCTION_157();
      v14(v13);
      return v0;
    }
    uint64_t v6 = OUTLINED_FUNCTION_131();
    v7(v6);
    goto LABEL_6;
  }
  if (v3)
  {
LABEL_6:
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v9 = OUTLINED_FUNCTION_11_0(v8);
    OUTLINED_FUNCTION_128(v9, v11, *(void *)(v10 + 64));
    return v0;
  }
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_70();
  v4();
  OUTLINED_FUNCTION_30_5();
  return v0;
}

uint64_t getEnumTagSinglePayload for StartCallUnsupportedCallCapabilityMicrophoneNotAccessibleParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_118458);
}

uint64_t storeEnumTagSinglePayload for StartCallUnsupportedCallCapabilityMicrophoneNotAccessibleParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_11845C);
}

void type metadata completion function for StartCallUnsupportedCallCapabilityCameraNotAccessibleParameters()
{
  type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    OUTLINED_FUNCTION_2_4();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for StartCallUnsupportedContactsInvalidHandleParameters(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    int v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    int v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for SpeakableString();
    swift_retain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
    }
  }
  return v5;
}

uint64_t destroy for StartCallUnsupportedContactsInvalidHandleParameters(void *a1, uint64_t a2)
{
  return destroy for StartCallSimpleDisambiguateContactsParameters(a1, a2, (void (*)(void))&_swift_release);
}

uint64_t destroy for StartCallSimpleDisambiguateContactsParameters(void *a1, uint64_t a2, void (*a3)(void))
{
  a3(*a1);
  uint64_t v5 = (uint64_t)a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for SpeakableString();
  uint64_t result = OUTLINED_FUNCTION_28_9(v5);
  if (!result)
  {
    OUTLINED_FUNCTION_10();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    return v9(v5, v6);
  }
  return result;
}

void *initializeWithCopy for StartCallUnsupportedContactsInvalidHandleParameters(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for SpeakableString();
  swift_retain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v7);
  }
  return a1;
}

void *assignWithCopy for StartCallUnsupportedContactsInvalidHandleParameters(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  int v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (!EnumTagSinglePayload)
  {
    uint64_t v12 = *(void *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  return a1;
}

void *initializeWithTake for StartCallSimpleDisambiguateContactsParameters(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_11_0(v8);
    memcpy(v5, v6, *(void *)(v9 + 64));
  }
  else
  {
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_70();
    v10();
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v7);
  }
  return a1;
}

void *assignWithTake for StartCallUnsupportedContactsInvalidHandleParameters(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  int v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (!EnumTagSinglePayload)
  {
    uint64_t v12 = *(void *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for StartCallUnsupportedContactsInvalidHandleParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, j____swift_get_extra_inhabitant_index_108Tm_0);
}

uint64_t storeEnumTagSinglePayload for StartCallUnsupportedContactsInvalidHandleParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_109Tm_0);
}

void type metadata completion function for StartCallUnsupportedContactsInvalidHandleParameters()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for StartCallUnsupportedContactsNoContactFoundParameters(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v7);
    }
    uint64_t v10 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    *((unsigned char *)a1 + v10) = *((unsigned char *)a2 + v10);
  }
  swift_retain();
  return a1;
}

char *initializeWithCopy for StartCallUnsupportedContactsNoContactFoundParameters(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = *(int *)(a3 + 24);
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  a1[v8] = a2[v8];
  swift_retain();
  return a1;
}

char *assignWithCopy for StartCallUnsupportedContactsNoContactFoundParameters(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
LABEL_7:
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  swift_retain();
  swift_release();
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

char *initializeWithTake for StartCallUnsupportedContactsNoContactFoundParameters(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = *(int *)(a3 + 24);
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  a1[v8] = a2[v8];
  return a1;
}

char *assignWithTake for StartCallUnsupportedContactsNoContactFoundParameters(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
LABEL_7:
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  swift_release();
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

uint64_t getEnumTagSinglePayload for StartCallUnsupportedContactsNoContactFoundParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_115DFC);
}

uint64_t __swift_get_extra_inhabitant_index_111Tm()
{
  OUTLINED_FUNCTION_125();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_1_44();
  if (*(_DWORD *)(v3 + 84) != v1) {
    return OUTLINED_FUNCTION_23_12(*(void *)(v0 + *(int *)(v2 + 20)));
  }
  uint64_t v4 = OUTLINED_FUNCTION_115();

  return __swift_getEnumTagSinglePayload(v4, v5, v6);
}

uint64_t storeEnumTagSinglePayload for StartCallUnsupportedContactsNoContactFoundParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_115E8C);
}

void __swift_store_extra_inhabitant_index_112Tm()
{
  OUTLINED_FUNCTION_85();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_1_44();
  if (*(_DWORD *)(v4 + 84) == v3)
  {
    uint64_t v5 = OUTLINED_FUNCTION_63_1();
    __swift_storeEnumTagSinglePayload(v5, v6, v7, v8);
  }
  else
  {
    *(void *)(v1 + *(int *)(v2 + 20)) = v0;
  }
}

void type metadata completion function for StartCallUnsupportedContactsNoContactFoundParameters()
{
  type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for StartCallUnsupportedContactsNoHandleForLabelParameters(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for SpeakableString();
    swift_retain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
    }
    uint64_t v13 = a3[7];
    *(uint64_t *)((char *)v7 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *(uint64_t *)((char *)v7 + v13) = *(uint64_t *)((char *)a2 + v13);
    uint64_t v14 = a3[8];
    int v15 = (char *)v7 + v14;
    uint64_t v16 = (char *)a2 + v14;
    swift_retain();
    swift_retain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v11))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v15, v16, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v11);
    }
  }
  return v7;
}

uint64_t destroy for StartCallUnsupportedContactsNoHandleForLabelParameters(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for SpeakableString();
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  swift_release();
  swift_release();
  uint64_t v6 = a1 + *(int *)(a2 + 32);
  uint64_t result = __swift_getEnumTagSinglePayload(v6, 1, v5);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v8(v6, v5);
  }
  return result;
}

void *initializeWithCopy for StartCallUnsupportedContactsNoHandleForLabelParameters(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SpeakableString();
  swift_retain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  }
  uint64_t v11 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v11) = *(void *)((char *)a2 + v11);
  uint64_t v12 = a3[8];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  swift_retain();
  swift_retain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v9))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v13, v14, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v9);
  }
  return a1;
}

void *assignWithCopy for StartCallUnsupportedContactsNoHandleForLabelParameters(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  int v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (EnumTagSinglePayload)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_retain();
  swift_release();
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_retain();
  swift_release();
  uint64_t v14 = a3[8];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  int v17 = __swift_getEnumTagSinglePayload((uint64_t)a1 + v14, 1, v9);
  int v18 = __swift_getEnumTagSinglePayload((uint64_t)v16, 1, v9);
  if (!v17)
  {
    uint64_t v19 = *(void *)(v9 - 8);
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v15, v16, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v15, v9);
    goto LABEL_12;
  }
  if (v18)
  {
LABEL_12:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v15, v16, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v9);
  return a1;
}

void *initializeWithTake for StartCallUnsupportedContactsNoHandleForLabelParameters(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  }
  uint64_t v11 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v11) = *(void *)((char *)a2 + v11);
  uint64_t v12 = a3[8];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v9))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v13, v14, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v9);
  }
  return a1;
}

void *assignWithTake for StartCallUnsupportedContactsNoHandleForLabelParameters(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  int v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (EnumTagSinglePayload)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v7, v8, v9);
LABEL_7:
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_release();
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_release();
  uint64_t v14 = a3[8];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  int v17 = __swift_getEnumTagSinglePayload((uint64_t)a1 + v14, 1, v9);
  int v18 = __swift_getEnumTagSinglePayload((uint64_t)v16, 1, v9);
  if (!v17)
  {
    uint64_t v19 = *(void *)(v9 - 8);
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 40))(v15, v16, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v15, v9);
    goto LABEL_12;
  }
  if (v18)
  {
LABEL_12:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v15, v16, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for StartCallUnsupportedContactsNoHandleForLabelParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, j____swift_get_extra_inhabitant_index_108Tm_1);
}

uint64_t storeEnumTagSinglePayload for StartCallUnsupportedContactsNoHandleForLabelParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_109Tm_1);
}

void type metadata completion function for StartCallUnsupportedContactsNoHandleForLabelParameters()
{
  type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t getEnumTagSinglePayload for StartCallUnsupportedDeviceFaceTimeLinkParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, j____swift_get_extra_inhabitant_index_108Tm_2);
}

uint64_t storeEnumTagSinglePayload for StartCallUnsupportedDeviceFaceTimeLinkParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_109Tm_2);
}

void initializeBufferWithCopyOfBuffer for StartCallUnsupportedDeviceFaceTimeLinkParameters()
{
  OUTLINED_FUNCTION_28();
  OUTLINED_FUNCTION_1_44();
  int v5 = *(_DWORD *)(v4 + 80);
  *uint64_t v7 = *v6;
  if ((v5 & 0x20000) != 0)
  {
    swift_retain();
  }
  else
  {
    OUTLINED_FUNCTION_66_0();
    OUTLINED_FUNCTION_96_0();
    swift_retain();
    if (OUTLINED_FUNCTION_28_9(v3))
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      uint64_t v9 = OUTLINED_FUNCTION_11_0(v8);
      OUTLINED_FUNCTION_111(v9, v11, *(void *)(v10 + 64));
    }
    else
    {
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_27_8();
      v12();
      OUTLINED_FUNCTION_11_24(v2);
    }
    uint64_t v13 = v0 + *(int *)(v1 + 24);
    if (OUTLINED_FUNCTION_18_16())
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      uint64_t v15 = OUTLINED_FUNCTION_11_0(v14);
      OUTLINED_FUNCTION_58_2(v15, v17, *(void *)(v16 + 64));
    }
    else
    {
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_25_2();
      v18();
      OUTLINED_FUNCTION_11_24(v13);
    }
  }
  OUTLINED_FUNCTION_24();
}

uint64_t destroy for StartCallUnsupportedDeviceFaceTimeLinkParameters(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for SpeakableString();
  if (!OUTLINED_FUNCTION_22_0(v4))
  {
    OUTLINED_FUNCTION_10();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v7 = a1 + *(int *)(a2 + 24);
  uint64_t result = OUTLINED_FUNCTION_22_0(v7);
  if (!result)
  {
    OUTLINED_FUNCTION_10();
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
    return v10(v7, v5);
  }
  return result;
}

void initializeWithCopy for StartCallUnsupportedDeviceFaceTimeLinkParameters()
{
  OUTLINED_FUNCTION_28();
  OUTLINED_FUNCTION_66_0();
  *uint64_t v5 = *v4;
  OUTLINED_FUNCTION_96_0();
  swift_retain();
  if (OUTLINED_FUNCTION_28_9(v3))
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v7 = OUTLINED_FUNCTION_11_0(v6);
    OUTLINED_FUNCTION_111(v7, v9, *(void *)(v8 + 64));
  }
  else
  {
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_27_8();
    v10();
    OUTLINED_FUNCTION_11_24(v2);
  }
  uint64_t v11 = v0 + *(int *)(v1 + 24);
  if (OUTLINED_FUNCTION_18_16())
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v13 = OUTLINED_FUNCTION_11_0(v12);
    OUTLINED_FUNCTION_58_2(v13, v15, *(void *)(v14 + 64));
  }
  else
  {
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_25_2();
    v16();
    OUTLINED_FUNCTION_11_24(v11);
  }
  OUTLINED_FUNCTION_24();
}

void assignWithCopy for StartCallUnsupportedDeviceFaceTimeLinkParameters()
{
  OUTLINED_FUNCTION_28();
  OUTLINED_FUNCTION_66_0();
  *uint64_t v0 = *v4;
  swift_retain();
  swift_release();
  uint64_t v5 = OUTLINED_FUNCTION_130();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v2, 1, v5);
  int v7 = OUTLINED_FUNCTION_28_9(v3);
  if (EnumTagSinglePayload)
  {
    if (!v7)
    {
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_27_8();
      v8();
      OUTLINED_FUNCTION_11_24(v2);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  OUTLINED_FUNCTION_1_44();
  if (v9)
  {
    OUTLINED_FUNCTION_80_0();
    v10();
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v12 = OUTLINED_FUNCTION_11_0(v11);
    OUTLINED_FUNCTION_111(v12, v14, *(void *)(v13 + 64));
    goto LABEL_7;
  }
  OUTLINED_FUNCTION_91_1();
  v25();
LABEL_7:
  uint64_t v15 = (uint64_t)v0 + *(int *)(v1 + 24);
  int v16 = OUTLINED_FUNCTION_17_15(v15);
  if (!v2)
  {
    OUTLINED_FUNCTION_1_44();
    if (!v18)
    {
      OUTLINED_FUNCTION_91_1();
      v26();
      goto LABEL_13;
    }
    uint64_t v19 = OUTLINED_FUNCTION_55_2();
    v20(v19);
    goto LABEL_12;
  }
  if (v16)
  {
LABEL_12:
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v22 = OUTLINED_FUNCTION_11_0(v21);
    OUTLINED_FUNCTION_58_2(v22, v24, *(void *)(v23 + 64));
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_25_2();
  v17();
  OUTLINED_FUNCTION_11_24(v15);
LABEL_13:
  OUTLINED_FUNCTION_24();
}

uint64_t initializeWithTake for StartCallUnsupportedDeviceFaceTimeLinkParameters()
{
  OUTLINED_FUNCTION_66_0();
  *uint64_t v5 = *v4;
  OUTLINED_FUNCTION_96_0();
  if (OUTLINED_FUNCTION_28_9(v3))
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v7 = OUTLINED_FUNCTION_11_0(v6);
    OUTLINED_FUNCTION_111(v7, v9, *(void *)(v8 + 64));
  }
  else
  {
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_70();
    v10();
    OUTLINED_FUNCTION_11_24(v2);
  }
  uint64_t v11 = v0 + *(int *)(v1 + 24);
  if (OUTLINED_FUNCTION_18_16())
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v13 = OUTLINED_FUNCTION_11_0(v12);
    OUTLINED_FUNCTION_58_2(v13, v15, *(void *)(v14 + 64));
  }
  else
  {
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_70();
    v16();
    OUTLINED_FUNCTION_11_24(v11);
  }
  return v0;
}

void assignWithTake for StartCallUnsupportedDeviceFaceTimeLinkParameters()
{
  OUTLINED_FUNCTION_28();
  OUTLINED_FUNCTION_66_0();
  *uint64_t v0 = *v4;
  swift_release();
  uint64_t v5 = OUTLINED_FUNCTION_130();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v2, 1, v5);
  int v7 = OUTLINED_FUNCTION_28_9(v3);
  if (EnumTagSinglePayload)
  {
    if (!v7)
    {
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_70();
      v8();
      OUTLINED_FUNCTION_11_24(v2);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  OUTLINED_FUNCTION_1_44();
  if (v9)
  {
    OUTLINED_FUNCTION_80_0();
    v10();
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v12 = OUTLINED_FUNCTION_11_0(v11);
    OUTLINED_FUNCTION_111(v12, v14, *(void *)(v13 + 64));
    goto LABEL_7;
  }
  OUTLINED_FUNCTION_90();
  v25();
LABEL_7:
  uint64_t v15 = (uint64_t)v0 + *(int *)(v1 + 24);
  int v16 = OUTLINED_FUNCTION_17_15(v15);
  if (!v2)
  {
    OUTLINED_FUNCTION_1_44();
    if (!v18)
    {
      OUTLINED_FUNCTION_90();
      v26();
      goto LABEL_13;
    }
    uint64_t v19 = OUTLINED_FUNCTION_55_2();
    v20(v19);
    goto LABEL_12;
  }
  if (v16)
  {
LABEL_12:
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v22 = OUTLINED_FUNCTION_11_0(v21);
    OUTLINED_FUNCTION_58_2(v22, v24, *(void *)(v23 + 64));
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_70();
  v17();
  OUTLINED_FUNCTION_11_24(v15);
LABEL_13:
  OUTLINED_FUNCTION_24();
}

uint64_t getEnumTagSinglePayload for StartCallUnsupportedDeviceGroupFaceTimeParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_117438);
}

uint64_t __swift_get_extra_inhabitant_index_108Tm()
{
  OUTLINED_FUNCTION_129();
  if (v1) {
    return OUTLINED_FUNCTION_23_12(*v0);
  }
  OUTLINED_FUNCTION_151();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v3 = OUTLINED_FUNCTION_135_0();

  return __swift_getEnumTagSinglePayload(v3, v4, v5);
}

uint64_t storeEnumTagSinglePayload for StartCallUnsupportedDeviceGroupFaceTimeParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1174B8);
}

void __swift_store_extra_inhabitant_index_109Tm()
{
  OUTLINED_FUNCTION_86_1();
  if (v2)
  {
    *char v1 = v0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_78_0();
    __swift_storeEnumTagSinglePayload(v3, v4, v5, v6);
  }
}

void type metadata completion function for StartCallUnsupportedDeviceFaceTimeLinkParameters()
{
  type metadata accessor for SpeakableString?();
  if (v1 <= 0x3F)
  {
    OUTLINED_FUNCTION_64_0(v0);
    OUTLINED_FUNCTION_156();
    OUTLINED_FUNCTION_2_4();
  }
}

void *initializeBufferWithCopyOfBuffer for StartCallErrorWithCodeDownTimeRestrictionEnabledParameters(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for StartCallErrorWithCodeDownTimeRestrictionEnabledParameters(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for StartCallErrorWithCodeDownTimeRestrictionEnabledParameters(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for StartCallErrorWithCodeDownTimeRestrictionEnabledParameters(uint64_t *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 16))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      uint64_t v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

void *storeEnumTagSinglePayload for StartCallErrorWithCodeDownTimeRestrictionEnabledParameters(void *result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *uint64_t result = a2 - 0x7FFFFFFF;
    result[1] = 0;
    if (a3 >= 0x7FFFFFFF) {
      *((unsigned char *)result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *((unsigned char *)result + 16) = 0;
    }
    if (a2) {
      return OUTLINED_FUNCTION_153_0(result, a2);
    }
  }
  return result;
}

void type metadata accessor for StartCallUnsupportedPreferredCallProviderParameters()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    int v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    int v7 = a1;
    a1[1] = a2[1];
    uint64_t v8 = *(int *)(a3 + 24);
    int v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for SpeakableString();
    swift_retain();
    swift_retain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
    }
    uint64_t v13 = *(int *)(a3 + 28);
    uint64_t v14 = (char *)v7 + v13;
    uint64_t v15 = (char *)a2 + v13;
    if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v11))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v14, v15, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v11);
    }
  }
  return v7;
}

uint64_t destroy for StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for SpeakableString();
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t result = __swift_getEnumTagSinglePayload(v6, 1, v5);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v8(v6, v5);
  }
  return result;
}

void *initializeWithCopy for StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  int v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for SpeakableString();
  swift_retain();
  swift_retain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
  }
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v10))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v13, v14, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v10);
  }
  return a1;
}

void *assignWithCopy for StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  int v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (EnumTagSinglePayload)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v14 = *(int *)(a3 + 28);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  int v17 = __swift_getEnumTagSinglePayload((uint64_t)a1 + v14, 1, v9);
  int v18 = __swift_getEnumTagSinglePayload((uint64_t)v16, 1, v9);
  if (!v17)
  {
    uint64_t v19 = *(void *)(v9 - 8);
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v15, v16, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v15, v9);
    goto LABEL_12;
  }
  if (v18)
  {
LABEL_12:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v15, v16, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v9);
  return a1;
}

_OWORD *initializeWithTake for StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  }
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v9))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v12, v13, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v9);
  }
  return a1;
}

void *assignWithTake for StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  int v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (EnumTagSinglePayload)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v14 = *(int *)(a3 + 28);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  int v17 = __swift_getEnumTagSinglePayload((uint64_t)a1 + v14, 1, v9);
  int v18 = __swift_getEnumTagSinglePayload((uint64_t)v16, 1, v9);
  if (!v17)
  {
    uint64_t v19 = *(void *)(v9 - 8);
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 40))(v15, v16, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v15, v9);
    goto LABEL_12;
  }
  if (v18)
  {
LABEL_12:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v15, v16, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_118274);
}

uint64_t sub_118274()
{
  OUTLINED_FUNCTION_129();
  if (v3) {
    return OUTLINED_FUNCTION_23_12(*v1);
  }
  OUTLINED_FUNCTION_151();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = (uint64_t)v1 + *(int *)(v2 + 24);

  return __swift_getEnumTagSinglePayload(v6, v0, v5);
}

uint64_t storeEnumTagSinglePayload for StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1182FC);
}

void sub_1182FC()
{
  OUTLINED_FUNCTION_86_1();
  if (v2)
  {
    *unint64_t v1 = v0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_78_0();
    __swift_storeEnumTagSinglePayload(v3, v4, v5, v6);
  }
}

void type metadata completion function for StartCallUnsupportedPreferredCallProviderAccountSetupRequiredParameters()
{
  type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t type metadata completion function for StartCallCATPatternsExecutor()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for StartCallCATPatternsExecutor()
{
  return type metadata accessor for StartCallCATPatternsExecutor(0);
}

uint64_t OUTLINED_FUNCTION_11_24(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(a1, 0, 1, v1);
}

uint64_t AnnounceGroupFaceTimeInviteOfferFollowUpIntentParameters.confirmAction.setter(uint64_t a1)
{
  return outlined assign with take of SpeakableString?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_17_15(uint64_t a1)
{
  __swift_getEnumTagSinglePayload(a1, 1, v1);
  return __swift_getEnumTagSinglePayload(v2, 1, v1);
}

uint64_t OUTLINED_FUNCTION_18_16()
{
  return __swift_getEnumTagSinglePayload(v1, 1, v0);
}

uint64_t OUTLINED_FUNCTION_19_17(uint64_t a1)
{
  __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
  __swift_storeEnumTagSinglePayload(v1 + *(int *)(v2 + 24), 1, 1, a1);
  *(unsigned char *)(v1 + *(int *)(v2 + 20)) = v3;
  return v1;
}

uint64_t OUTLINED_FUNCTION_23_12@<X0>(unint64_t a1@<X8>)
{
  if (a1 >= 0xFFFFFFFF) {
    LODWORD(a1) = -1;
  }
  int v1 = a1 - 1;
  if (v1 < 0) {
    int v1 = -1;
  }
  return (v1 + 1);
}

uint64_t OUTLINED_FUNCTION_28_9(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_31_10(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return StartCallErrorWithCodeCallInProgressParameters.asKeyValuePairs()(a1, 0x656369766564, a3);
}

uint64_t OUTLINED_FUNCTION_35_10()
{
  *(void *)(v0 + 16) = 0;
  return v0 + 16;
}

uint64_t OUTLINED_FUNCTION_36_8(uint64_t a1)
{
  *(void *)(a1 + 32) = 0x656D614E707061;
  *(void *)(a1 + 40) = 0xE700000000000000;
  return _s16SiriDialogEngine15SpeakableStringVSgWOcTm_0(v1, v2, v3);
}

uint64_t OUTLINED_FUNCTION_37_6()
{
  return 0;
}

unint64_t OUTLINED_FUNCTION_38_8(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

uint64_t OUTLINED_FUNCTION_39_6()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_43_8()
{
  **(void **)(v0 + 48) = 0;
  return type metadata accessor for SpeakableString();
}

__n128 *OUTLINED_FUNCTION_45_4(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x73746361746E6F63;
  result[2].n128_u64[1] = 0xE800000000000000;
  return result;
}

uint64_t OUTLINED_FUNCTION_47_4(uint64_t result)
{
  *(void *)(v1 + 56) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_48_3(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return 0;
}

uint64_t OUTLINED_FUNCTION_52_2(char a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v6 + 24) = a5;
  *(void *)(v6 + 32) = v5;
  *(void *)(v6 + 16) = a4;
  *(unsigned char *)(v6 + 90) = a3;
  *(unsigned char *)(v6 + 89) = a2;
  *(unsigned char *)(v6 + 88) = a1;
  return 0;
}

uint64_t OUTLINED_FUNCTION_55_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_56_2(char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 24) = a3;
  *(void *)(v4 + 32) = v3;
  *(void *)(v4 + 16) = a2;
  *(unsigned char *)(v4 + 88) = a1;
  return 0;
}

void *OUTLINED_FUNCTION_58_2(uint64_t a1, uint64_t a2, size_t a3)
{
  return memcpy(v4, v3, a3);
}

uint64_t OUTLINED_FUNCTION_60_2@<X0>(uint64_t a1@<X8>)
{
  return v1 + a1;
}

uint64_t OUTLINED_FUNCTION_61_2@<X0>(uint64_t a1@<X8>)
{
  return __swift_storeEnumTagSinglePayload(v1 + a1, 1, 1, v2);
}

uint64_t OUTLINED_FUNCTION_62_3()
{
  return type metadata accessor for SpeakableString();
}

uint64_t OUTLINED_FUNCTION_63_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_70_0()
{
  return type metadata accessor for SpeakableString();
}

uint64_t OUTLINED_FUNCTION_71_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_72_1()
{
  return __swift_getEnumTagSinglePayload(v0, 1, v1);
}

unint64_t OUTLINED_FUNCTION_73_0(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

unint64_t OUTLINED_FUNCTION_74_1(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

uint64_t OUTLINED_FUNCTION_81_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v2[6] = a2;
  v2[9] = a1;
  v2[10] = 0x746E65746E69;
  v2[11] = 0xE600000000000000;
  return 0;
}

uint64_t OUTLINED_FUNCTION_82_0()
{
  return type metadata accessor for SpeakableString();
}

uint64_t OUTLINED_FUNCTION_84_0()
{
  uint64_t result = 0;
  *(void *)(v0 + 56) = 0;
  *(void *)(v0 + 64) = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_87()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_93_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_94(uint64_t a1)
{
  return v1 + *(int *)(a1 + 20);
}

uint64_t OUTLINED_FUNCTION_97@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  v2[6] = a2;
  v2[9] = result;
  v2[10] = 0x746E65746E69;
  v2[11] = 0xE600000000000000;
  return result;
}

uint64_t OUTLINED_FUNCTION_98@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = a1;
  return 0;
}

uint64_t OUTLINED_FUNCTION_102_0(uint64_t a1)
{
  uint64_t result = __swift_storeEnumTagSinglePayload(v2, 1, 1, a1);
  *(void *)(v1 + *(int *)(v3 + 24)) = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_104_0(uint64_t a1)
{
  uint64_t result = __swift_storeEnumTagSinglePayload(v3, 1, 1, a1);
  *(void *)(v1 + *(int *)(v2 + 24)) = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_105(uint64_t result)
{
  *(void *)(result + 32) = 0x656D614E707061;
  *(void *)(result + 40) = 0xE700000000000000;
  return result;
}

uint64_t OUTLINED_FUNCTION_110()
{
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0;
  return v0 + 16;
}

void *OUTLINED_FUNCTION_111(uint64_t a1, uint64_t a2, size_t a3)
{
  return memcpy(v3, v4, a3);
}

uint64_t OUTLINED_FUNCTION_112(uint64_t a1)
{
  *uint64_t v1 = a1;
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_113()
{
  uint64_t result = 0;
  *(void *)(v0 + 200) = 0;
  *(void *)(v0 + 208) = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_116(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

double OUTLINED_FUNCTION_118()
{
  double result = 0.0;
  *uint64_t v0 = 0u;
  v0[1] = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_122()
{
  return type metadata accessor for StartCallIntentHandledResponseParameters(0);
}

uint64_t OUTLINED_FUNCTION_123()
{
  return type metadata accessor for StartCallIntentConfirmationWithRestrictedContactsParameters(0);
}

unint64_t OUTLINED_FUNCTION_124(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

uint64_t OUTLINED_FUNCTION_126()
{
  return swift_retain();
}

void *OUTLINED_FUNCTION_127(uint64_t a1, uint64_t a2, size_t a3)
{
  return memcpy(v3, v4, a3);
}

uint64_t OUTLINED_FUNCTION_130()
{
  return type metadata accessor for SpeakableString();
}

uint64_t OUTLINED_FUNCTION_131()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_135_0()
{
  return v0 + *(int *)(v1 + 20);
}

uint64_t OUTLINED_FUNCTION_136(uint64_t a1)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  return outlined init with take of SpeakableString?(v1, v4);
}

double OUTLINED_FUNCTION_138()
{
  double result = 0.0;
  *uint64_t v0 = 0u;
  v0[1] = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_140()
{
  return type metadata accessor for SpeakableString();
}

uint64_t OUTLINED_FUNCTION_143()
{
  return *(void *)(v0 + 88);
}

uint64_t OUTLINED_FUNCTION_144_0()
{
  return *(void *)(v0 + 72);
}

uint64_t OUTLINED_FUNCTION_145(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 20));
}

uint64_t OUTLINED_FUNCTION_147_0()
{
  return type metadata accessor for StartCallUnsupportedContactsNoHandleForLabelParameters(0);
}

uint64_t OUTLINED_FUNCTION_149@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 88) = (a1 - 32) | 0x8000000000000000;
  return 0;
}

uint64_t OUTLINED_FUNCTION_150@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 88) = (a1 - 32) | 0x8000000000000000;
  return 0;
}

uint64_t OUTLINED_FUNCTION_152()
{
  return v0;
}

void *OUTLINED_FUNCTION_153_0(void *result, unsigned int a2)
{
  *double result = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_156()
{
  return swift_initStructMetadata();
}

uint64_t _ss6ResultO3mapyAByqd__q_Gqd__xXERi_d__lF@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(a1);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v13 + 16))(v12, v14);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(uint64_t, char *, void))(*(void *)(*(void *)(a2 + 24) - 8) + 32))(a3, v12, *(void *)(a2 + 24));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v12, v6);
    a1(v10);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  type metadata accessor for Result();
  return swift_storeEnumTagMultiPayload();
}

uint64_t Result<>.merge(with:behaviorAfterSpeaking:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _ss6ResultO7flatMapyAByqd__q_GADxXERi_d__lF((void (*)(char *))partial apply for closure #1 in Result<>.merge(with:behaviorAfterSpeaking:), a1, a2);
}

uint64_t closure #1 in Result<>.merge(with:behaviorAfterSpeaking:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  type metadata accessor for TemplatingResult();
  uint64_t v8 = type metadata accessor for Result();
  __chkstk_darwin(v8);
  uint64_t v15 = a1;
  _ss6ResultO3mapyAByqd__q_Gqd__xXERi_d__lF((void (*)(char *))partial apply for closure #1 in closure #1 in Result<>.merge(with:behaviorAfterSpeaking:), v8, (uint64_t)&v11[-v9]);
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  uint64_t v14 = a1;
  return _ss6ResultOsRi_zrlE12flatMapErroryAByxqd__GADq_XEs0D0Rd__lF((void (*)(char *))partial apply for closure #2 in closure #1 in Result<>.merge(with:behaviorAfterSpeaking:), v8, a4);
}

uint64_t partial apply for closure #1 in Result<>.merge(with:behaviorAfterSpeaking:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in Result<>.merge(with:behaviorAfterSpeaking:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t closure #1 in closure #1 in Result<>.merge(with:behaviorAfterSpeaking:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BehaviorAfterSpeaking?);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for BehaviorAfterSpeaking();
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 1, 1, v7);
  TemplatingResult.merge(with:behaviorAfterSpeaking:)(a1, (uint64_t)v6, a2);
  return outlined destroy of BehaviorAfterSpeaking?((uint64_t)v6);
}

uint64_t closure #2 in closure #1 in Result<>.merge(with:behaviorAfterSpeaking:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for TemplatingResult();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  type metadata accessor for Result();

  return swift_storeEnumTagMultiPayload();
}

uint64_t _ss6ResultOsRi_zrlE12flatMapErroryAByxqd__GADq_XEs0D0Rd__lF@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(a1);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v10, v3, v7);
    a1(v10);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)(a2 + 16) - 8) + 32))(a3, v3, *(void *)(a2 + 16));
    type metadata accessor for Result();
    return swift_storeEnumTagMultiPayload();
  }
}

uint64_t _ss6ResultO7flatMapyAByqd__q_GADxXERi_d__lF@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(a1);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v13 + 16))(v12, v14);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(uint64_t, char *, void))(*(void *)(*(void *)(a2 + 24) - 8) + 32))(a3, v12, *(void *)(a2 + 24));
    type metadata accessor for Result();
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v12, v6);
    a1(v10);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
}

uint64_t Result.zip<A>(with:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return _ss6ResultO7flatMapyAByqd__q_GADxXERi_d__lF((void (*)(char *))partial apply for closure #1 in Result.zip<A>(with:), a1, a2);
}

uint64_t closure #1 in Result.zip<A>(with:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Result();
  swift_getTupleTypeMetadata2();
  return _ss6ResultO3mapyAByqd__q_Gqd__xXERi_d__lF((void (*)(char *))partial apply for closure #1 in closure #1 in Result.zip<A>(with:), v2, a1);
}

uint64_t partial apply for closure #1 in Result.zip<A>(with:)(uint64_t a1)
{
  return partial apply for closure #1 in Result.zip<A>(with:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))closure #1 in Result.zip<A>(with:));
}

uint64_t outlined destroy of BehaviorAfterSpeaking?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BehaviorAfterSpeaking?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t closure #1 in closure #1 in Result.zip<A>(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v10 = a5 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a5, a2, a3);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16);

  return v11(v10, a1, a4);
}

uint64_t partial apply for closure #1 in closure #1 in Result.zip<A>(with:)(uint64_t a1)
{
  return partial apply for closure #1 in Result.zip<A>(with:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))closure #1 in closure #1 in Result.zip<A>(with:));
}

uint64_t partial apply for closure #1 in Result.zip<A>(with:)(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void))
{
  return a2(a1, v2[6], v2[2], v2[3], v2[4], v2[5]);
}

uint64_t partial apply for closure #1 in closure #1 in Result<>.merge(with:behaviorAfterSpeaking:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in closure #1 in Result<>.merge(with:behaviorAfterSpeaking:)(a1, a2);
}

uint64_t partial apply for closure #2 in closure #1 in Result<>.merge(with:behaviorAfterSpeaking:)@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in closure #1 in Result<>.merge(with:behaviorAfterSpeaking:)(*(void *)(v1 + 32), a1);
}

id SKIDirectInvocationPayload.toStartLocalRequest(deviceState:)(void *a1)
{
  uint64_t v2 = v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v3 = (void *)DeviceState.asInvocationContext.getter();
  uint64_t v4 = self;
  id v5 = [v4 runSiriKitExecutorCommandWithContext:v3 payload:v2];
  id v6 = [v4 wrapCommandInStartLocalRequest:v5];

  return v6;
}

id static SKIDirectInvocationPayload.contactDisambiguation(contact:)(void *a1)
{
  uint64_t v2 = type metadata accessor for CommonDirectAction();
  __chkstk_darwin(v2);
  uint64_t v4 = (void *)((char *)v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = __swift_project_value_buffer(v5, (uint64_t)static Logger.siriPhone);
  id v7 = a1;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v26[0] = v2;
    uint64_t v10 = swift_slowAlloc();
    v26[1] = v6;
    uint64_t v11 = (uint8_t *)v10;
    uint64_t v12 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 138412290;
    uint64_t v28 = (uint64_t)v7;
    id v13 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v12 = v7;

    _os_log_impl(&dword_0, v8, v9, "#DirectInvocationPayload Building disambiguation item for contact: %@", v11, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
  }
  *uint64_t v4 = v7;
  swift_storeEnumTagMultiPayload();
  type metadata accessor for SKIDirectInvocationPayload();
  id v14 = v7;
  CommonDirectAction.identifier.getter();
  id v15 = SKIDirectInvocationPayload.__allocating_init(identifier:)();
  uint64_t v16 = CommonDirectAction.userData.getter();
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v16);
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  outlined bridged method (mbnn) of @objc SKIDirectInvocationPayload.userData.setter(v18, v15);
  id v19 = v15;
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 136315138;
    uint64_t v27 = outlined bridged method (pb) of @objc SKIDirectInvocationPayload.userData.getter(v19);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]?);
    uint64_t v23 = String.init<A>(describing:)();
    uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v20, v21, "#DirectInvocationPayload built payload: %s", v22, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
  }
  outlined destroy of CommonDirectAction((uint64_t)v4);
  return v19;
}

unint64_t type metadata accessor for SKIDirectInvocationPayload()
{
  unint64_t result = lazy cache variable for type metadata for SKIDirectInvocationPayload;
  if (!lazy cache variable for type metadata for SKIDirectInvocationPayload)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SKIDirectInvocationPayload);
  }
  return result;
}

uint64_t outlined bridged method (pb) of @objc SKIDirectInvocationPayload.userData.getter(void *a1)
{
  id v1 = [a1 userData];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t static LocalizedStringsUtils.getPicsStringCallHistory(sharedGlobals:)(void *a1)
{
  uint64_t v2 = type metadata accessor for Locale();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 176))(v6, v7);
  type metadata accessor for PhoneCallFlowDelegatePlugin();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v10 = [self bundleForClass:ObjCClassFromMetadata];
  static Locale.current.getter();
  uint64_t v11 = Locale.identifier.getter();
  uint64_t v13 = v12;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  void v19[4] = v11;
  void v19[5] = v13;
  long long v19[2] = 45;
  v19[3] = 0xE100000000000000;
  v19[0] = 95;
  v19[1] = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v14 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = outlined bridged method (mbbnbnb) of @objc AFLocalization.localizedString(forKey:table:bundle:languageCode:)(0xD000000000000011, 0x8000000000493B90, 1396918608, 0xE400000000000000, (uint64_t)v10, v14, v16, v8);

  return v17;
}

uint64_t outlined bridged method (mbbnbnb) of @objc AFLocalization.localizedString(forKey:table:bundle:languageCode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v13 = [a8 localizedStringForKey:v10 table:v11 bundle:a5 languageCode:v12];

  if (!v13) {
    return 0;
  }
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v14;
}

ValueMetadata *type metadata accessor for LocalizedStringsUtils()
{
  return &type metadata for LocalizedStringsUtils;
}

uint64_t PhonePersonList.__allocating_init(list:)(uint64_t a1)
{
  type metadata accessor for PhonePersonList.Builder();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = _swiftEmptyArrayStorage;
  swift_beginAccess();
  *(void *)(v3 + 16) = a1;
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t))(v1 + 136))(v3);
}

uint64_t key path setter for PhonePersonList.Builder.list : PhonePersonList.Builder(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 96);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t PhoneSearchCallHistoryIntent.Builder.callTypes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PhoneSearchCallHistoryIntent.Builder.callTypes.setter()
{
  OUTLINED_FUNCTION_6_30();
  *(void *)(v1 + 16) = v0;
  return swift_bridgeObjectRelease();
}

uint64_t (*PhonePersonList.Builder.list.modify())()
{
  return PhoneFlow.state.modify;
}

uint64_t PhonePersonWithAliasesList.Builder.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = _swiftEmptyArrayStorage;
  return result;
}

uint64_t type metadata accessor for PhonePersonList.Builder()
{
  return self;
}

uint64_t PhonePersonWithAliasesList.Builder.init()()
{
  uint64_t result = v0;
  *(void *)(v0 + 16) = &_swiftEmptyArrayStorage;
  return result;
}

uint64_t PhonePersonList.Builder.withList(_:)()
{
  uint64_t v1 = *(void (**)(uint64_t))(*(void *)v0 + 96);
  uint64_t v2 = swift_bridgeObjectRetain();
  v1(v2);

  return swift_retain();
}

uint64_t PhonePersonList.Builder.build()()
{
  type metadata accessor for PhonePersonList();
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = swift_retain();
  PhonePersonList.init(builder:)(v1);
  return v0;
}

uint64_t PhonePersonList.__allocating_init(builder:)(uint64_t a1)
{
  OUTLINED_FUNCTION_17_7();
  uint64_t v2 = swift_allocObject();
  PhonePersonList.init(builder:)(a1);
  return v2;
}

uint64_t type metadata accessor for PhonePersonList()
{
  return self;
}

unint64_t static PhonePersonList.catTypeName.getter()
{
  return 0xD000000000000010;
}

uint64_t key path setter for PhonePersonList.mockGlobals : PhonePersonList(id *a1, uint64_t a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))(**(void **)a2 + 120);
  id v4 = *a1;
  return v3(v2);
}

void *PhoneSearchCallHistoryIntent.mockGlobals.getter()
{
  OUTLINED_FUNCTION_9_4();
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = v1;
  return v1;
}

void PhoneSearchCallHistoryIntent.mockGlobals.setter()
{
  OUTLINED_FUNCTION_6_30();
  id v2 = *(void **)(v1 + 16);
  *(void *)(v1 + 16) = v0;
}

uint64_t (*PhonePersonList.mockGlobals.modify())()
{
  return static SingleResultVoicemailModel.resultViewID.modify;
}

uint64_t PhoneSearchCallHistoryIntent.callTypes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PhonePersonList.init(builder:)(uint64_t a1)
{
  *(void *)(v1 + 16) = 0;
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  swift_release();
  *(void *)(v1 + 24) = v2;
  return v1;
}

double PhonePersonList.getProperty(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v5 = a1 == 1953720684 && a2 == 0xE400000000000000;
  if (!v5 && (OUTLINED_FUNCTION_4_20() & 1) == 0)
  {
    if (a1 == 0xD000000000000010 && (OUTLINED_FUNCTION_20(), v5) || (OUTLINED_FUNCTION_4_20() & 1) != 0)
    {
      swift_retain();
      char v10 = specialized PhonePersonListProperties.allSameGivenName.getter();
    }
    else if (a1 == 0xD000000000000014 && (OUTLINED_FUNCTION_20(), v5) || (OUTLINED_FUNCTION_4_20() & 1) != 0)
    {
      swift_retain();
      char v10 = specialized PhonePersonListProperties.isUnnamedPhoneNumber.getter();
    }
    else
    {
      BOOL v12 = a1 == 0x6C646E6148736168 && a2 == 0xEF736C6562614C65;
      if (v12 || (OUTLINED_FUNCTION_4_20() & 1) != 0)
      {
        swift_retain();
        char v10 = specialized PhonePersonListProperties.hasHandleLabels.getter();
      }
      else
      {
        if (a1 != 0xD000000000000018 || (OUTLINED_FUNCTION_20(), !v5))
        {
          if ((OUTLINED_FUNCTION_4_20() & 1) == 0)
          {
            double result = 0.0;
            *(_OWORD *)a3 = 0u;
            *(_OWORD *)(a3 + 16) = 0u;
            return result;
          }
        }
        swift_retain();
        char v10 = specialized PhonePersonListProperties.hasDifferentNameAndLabel.getter();
      }
    }
    char v11 = v10;
    swift_release();
    *(void *)(a3 + 24) = &type metadata for Bool;
    *(unsigned char *)a3 = v11 & 1;
    return result;
  }
  uint64_t v8 = *(void *)(v3 + 24);
  *(void *)(a3 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PhonePerson]);
  *(void *)a3 = v8;

  swift_bridgeObjectRetain();
  return result;
}

uint64_t specialized PhonePersonListProperties.allSameGivenName.getter()
{
  unint64_t v1 = *(void *)(v0 + 24);
  long long v4[2] = &v5;
  swift_bridgeObjectRetain();
  char v2 = specialized Sequence.allSatisfy(_:)(partial apply for specialized closure #1 in PhonePersonListProperties.allSameGivenName.getter, (uint64_t)v4, v1);
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t specialized PhonePersonListProperties.isUnnamedPhoneNumber.getter()
{
  unint64_t v1 = *(void *)(v0 + 24);
  if (v1 >> 62) {
    goto LABEL_25;
  }
  uint64_t v2 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8));
  if (v2)
  {
    swift_bridgeObjectRetain_n();
    swift_retain();
    while (1)
    {
      unint64_t v3 = v1 & 0xC000000000000001;
      if ((v1 & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      char v4 = specialized PhonePersonProperties<>.isUnnamedPhoneNumber.getter();
      swift_release();
      if ((v4 & 1) == 0) {
        break;
      }
      if (v2 == 1) {
        goto LABEL_8;
      }
      if (v3) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      char v6 = specialized PhonePersonProperties<>.isUnnamedPhoneNumber.getter();
      swift_release();
      if ((v6 & 1) == 0) {
        break;
      }
      if (v2 != 2)
      {
        uint64_t v7 = 6;
        while (1)
        {
          if (v3) {
            specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            swift_retain();
          }
          uint64_t v8 = v7 - 3;
          if (__OFADD__(v7 - 4, 1)) {
            break;
          }
          char v5 = specialized PhonePersonProperties<>.isUnnamedPhoneNumber.getter();
          swift_release();
          if (v5)
          {
            ++v7;
            if (v8 != v2) {
              continue;
            }
          }
          goto LABEL_23;
        }
        __break(1u);
LABEL_25:
        swift_bridgeObjectRetain();
        uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v9) {
          goto LABEL_28;
        }
        swift_bridgeObjectRetain_n();
        swift_retain();
        uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
        if (v2) {
          continue;
        }
      }
LABEL_8:
      char v5 = 1;
      goto LABEL_23;
    }
    char v5 = 0;
LABEL_23:
    swift_bridgeObjectRelease_n();
    swift_release();
  }
  else
  {
LABEL_28:
    char v5 = 0;
  }
  return v5 & 1;
}