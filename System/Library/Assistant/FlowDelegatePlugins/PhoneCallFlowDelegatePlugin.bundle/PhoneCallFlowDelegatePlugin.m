uint64_t protocol witness for Flow.flexibleExecutionSupport.getter in conformance ContactNeedsValueGuardFlow<A1>()
{
  return Flow.flexibleExecutionSupport.getter();
}

uint64_t protocol witness for Flow.onAsync(input:) in conformance ContactNeedsValueGuardFlow<A1>(uint64_t a1)
{
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = *v1;
  OUTLINED_FUNCTION_4_2();
  void *v4 = v3;
  swift_task_dealloc();
  v5 = *(uint64_t (**)(uint64_t))(v3 + 8);
  return v5(a1);
}

uint64_t protocol witness for Flow.onAsync(input:) in conformance ContactNeedsValueGuardFlow<A1>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for Flow.onAsync(input:) in conformance ContactNeedsValueGuardFlow<A1>;
  return Flow.onAsync(input:)(a1, a2, a3);
}

uint64_t protocol witness for Flow.on(input:) in conformance ContactNeedsValueGuardFlow<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 160))() & 1;
}

uint64_t ContactNeedsValueGuardFlow.on(input:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  __chkstk_darwin(v4 - 8);
  OUTLINED_FUNCTION_3_1();
  uint64_t v82 = v5;
  uint64_t v6 = type metadata accessor for PluginAction();
  OUTLINED_FUNCTION_0_0();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_3_1();
  uint64_t v83 = v10;
  type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v85 = v12;
  uint64_t v86 = v11;
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_3_1();
  uint64_t v84 = v13;
  uint64_t v90 = type metadata accessor for ContactNeedsValueGuardFlow.FlowState();
  OUTLINED_FUNCTION_0_0();
  uint64_t v87 = v14;
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_5_8();
  uint64_t v88 = v16;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v17);
  v91 = (char *)&v73 - v18;
  uint64_t v19 = type metadata accessor for Input();
  OUTLINED_FUNCTION_0_0();
  uint64_t v21 = v20;
  __chkstk_darwin(v22);
  OUTLINED_FUNCTION_5_8();
  uint64_t v80 = v23;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v24);
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  uint64_t v26 = __swift_project_value_buffer(v25, (uint64_t)static Logger.siriPhone);
  uint64_t v78 = *(void *)(v21 + 16);
  uint64_t v79 = v21 + 16;
  OUTLINED_FUNCTION_12();
  v27();
  swift_retain_n();
  uint64_t v89 = v26;
  v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.debug.getter();
  BOOL v30 = os_log_type_enabled(v28, v29);
  uint64_t v81 = v19;
  if (v30)
  {
    uint64_t v31 = swift_slowAlloc();
    uint64_t v76 = v6;
    uint64_t v32 = v31;
    uint64_t v74 = swift_slowAlloc();
    v93[0] = v74;
    *(_DWORD *)uint64_t v32 = 136315394;
    uint64_t v75 = v8;
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, (void (*)(uint64_t))&type metadata accessor for Input);
    uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v93);
    uint64_t v77 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v35 = OUTLINED_FUNCTION_16_8();
    v36(v35);
    *(_WORD *)(v32 + 12) = 2080;
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_21_3();
    v37();
    swift_release();
    uint64_t v38 = ContactNeedsValueGuardFlow.FlowState.description.getter(v90);
    unint64_t v40 = v39;
    uint64_t v41 = OUTLINED_FUNCTION_20_7();
    v42(v41);
    uint64_t v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v40, v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl(&dword_0, v28, v29, "#ContactNeedsValueGuardFlow on(input:) %s, state = %s", (uint8_t *)v32, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
    swift_release();
    uint64_t v43 = OUTLINED_FUNCTION_16_8();
    v44(v43);
    swift_release();
  }

  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_21_3();
  v45();
  OUTLINED_FUNCTION_20_7();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    OUTLINED_FUNCTION_20_7();
LABEL_10:
    OUTLINED_FUNCTION_11();
    v47();
    uint64_t v48 = (uint64_t)v91;
    swift_storeEnumTagMultiPayload();
    ContactNeedsValueGuardFlow.flowState.setter(v48);
    v49 = (void *)Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_14_2(v50))
    {
      *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
      v53 = "#ContactNeedsValueGuardFlow on(input:) fallback (to server or Emergency plugin) did not succeed, re-run wrapped flow.";
LABEL_17:
      OUTLINED_FUNCTION_24_1(&dword_0, v51, v52, v53);
      OUTLINED_FUNCTION_6();
      goto LABEL_18;
    }
    goto LABEL_18;
  }
  if (EnumCaseMultiPayload == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ExecutionPath.FallbackLocation, Parse));
    goto LABEL_10;
  }
  uint64_t v54 = v84;
  Input.parse.getter();
  OUTLINED_FUNCTION_19();
  char v56 = static ExecutionPath.choosePath(for:sharedGlobals:)(v54, (void *)(v2 + *(void *)(v55 + 112)));
  OUTLINED_FUNCTION_11();
  v57();
  if (v56 != 3)
  {
    if (v56 == 4)
    {
      v61 = (void *)Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_14_2(v62))
      {
        *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
        OUTLINED_FUNCTION_24_1(&dword_0, v63, v64, "#ContactNeedsValueGuardFlow on(input:) .deferToEmergencyPlugin");
        OUTLINED_FUNCTION_6();
      }

      OUTLINED_FUNCTION_12();
      v65();
      UUID.init()();
      PluginAction.init(flowHandlerId:input:loggingId:)();
      uint64_t v66 = (uint64_t)v91;
      OUTLINED_FUNCTION_12();
      v67();
      swift_storeEnumTagMultiPayload();
      ContactNeedsValueGuardFlow.flowState.setter(v66);
      OUTLINED_FUNCTION_15_4();
      v68();
    }
    else
    {
      if (v56 == 5) {
        goto LABEL_15;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ExecutionPath.FallbackLocation, Parse));
      uint64_t v69 = (uint64_t)v91;
      unsigned char *v91 = v56;
      Input.parse.getter();
      OUTLINED_FUNCTION_20_7();
      swift_storeEnumTagMultiPayload();
      ContactNeedsValueGuardFlow.flowState.setter(v69);
      v70 = Logger.logObject.getter();
      os_log_type_t v71 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v70, v71))
      {
        v72 = (uint8_t *)OUTLINED_FUNCTION_7_2();
        *(_WORD *)v72 = 0;
        _os_log_impl(&dword_0, v70, v71, "#ContactNeedsValueGuardFlow on(input:) .deferToServer", v72, 2u);
        OUTLINED_FUNCTION_6();
      }
    }
    char v59 = 1;
    return v59 & 1;
  }
LABEL_15:
  v49 = (void *)Logger.logObject.getter();
  os_log_type_t v58 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_14_2(v58))
  {
    *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
    v53 = "#ContactNeedsValueGuardFlow on(input:) delegate to wrapped flow";
    goto LABEL_17;
  }
LABEL_18:

  OUTLINED_FUNCTION_19();
  char v59 = dispatch thunk of AnyValueFlow.on(input:)();
  return v59 & 1;
}

uint64_t type metadata accessor for ContactNeedsValueGuardFlow.FlowState()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter();
      uint64_t result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    uint64_t result = (uint64_t)_StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter();
    if (!v8)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t ContactNeedsValueGuardFlow.flowState.getter@<X0>(uint64_t a1@<X8>)
{
  OUTLINED_FUNCTION_13_4();
  uint64_t v4 = v1 + *(void *)(v3 + 96);
  swift_beginAccess();
  OUTLINED_FUNCTION_13_4();
  OUTLINED_FUNCTION_13_4();
  type metadata accessor for ContactNeedsValueGuardFlow.FlowState();
  OUTLINED_FUNCTION_15();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(a1, v4);
}

unsigned char *initializeWithCopy for ContactNeedsValueGuardFlow.FlowState(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ExecutionPath.FallbackLocation, Parse))
                + 48);
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    uint64_t v11 = type metadata accessor for Parse();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      return a1;
    }
    uint64_t v7 = type metadata accessor for PluginAction();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t ContactNeedsValueGuardFlow.FlowState.description.getter(uint64_t a1)
{
  unint64_t v2 = 0xD000000000000013;
  uint64_t v3 = *(void *)(a1 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_12();
  v6();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ExecutionPath.FallbackLocation, Parse));
      type metadata accessor for Parse();
      OUTLINED_FUNCTION_15();
      OUTLINED_FUNCTION_11();
      v8();
      return 0x6F5472656665642ELL;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, a1);
    return 0xD000000000000017;
  }
  return v2;
}

uint64_t destroy for ContactNeedsValueGuardFlow.FlowState(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    a1 += *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ExecutionPath.FallbackLocation, Parse))
                 + 48);
    uint64_t v3 = type metadata accessor for Parse();
  }
  else
  {
    if (result) {
      return result;
    }
    uint64_t v3 = type metadata accessor for PluginAction();
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(a1, v3);
}

uint64_t static ExecutionPath.choosePath(for:sharedGlobals:)(void *a1, void *a2)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  OUTLINED_FUNCTION_29_4();
  if (!PhoneCallNLIntent.isEmergencyResourceCall()())
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    OUTLINED_FUNCTION_29_4();
    if (PhoneCallNLIntent.isEmergencyCall()())
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v11 = type metadata accessor for Logger();
      uint64_t v12 = (void *)OUTLINED_FUNCTION_25_0(v11, (uint64_t)static Logger.siriPhone);
      os_log_type_t v13 = static os_log_type_t.debug.getter();
      if (!OUTLINED_FUNCTION_8_2(v13)) {
        goto LABEL_28;
      }
      uint64_t v14 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_32_2(v14);
      uint64_t v17 = "#ExecutionPath: Parse should be routed for local execution for emergency calling";
    }
    else if (static ExecutionPath.shouldRouteToLocalSearch(nlIntent:sharedGlobals:)(a1))
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v18 = type metadata accessor for Logger();
      __swift_project_value_buffer(v18, (uint64_t)static Logger.siriPhone);
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = (uint8_t *)OUTLINED_FUNCTION_7_2();
        *(_WORD *)uint64_t v21 = 0;
        _os_log_impl(&dword_0, v19, v20, "#ExecutionPath: should route to local search", v21, 2u);
        OUTLINED_FUNCTION_6();
      }

      if (static ExecutionPath.isCompositionFlowEnabled(sharedGlobals:)(a2))
      {
        uint64_t v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v22, v23))
        {
          uint64_t v10 = 2;
          *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
          OUTLINED_FUNCTION_24_1(&dword_0, v24, v25, "#ExecutionPath: Returning BusinessComposition.");
          OUTLINED_FUNCTION_6();
        }
        else
        {

          return 2;
        }
        return v10;
      }
      uint64_t v29 = a2[3];
      uint64_t v30 = a2[4];
      __swift_project_boxed_opaque_existential_1(a2, v29);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v30 + 8))(v35, v29, v30);
      __swift_project_boxed_opaque_existential_1(v35, v35[3]);
      char v31 = dispatch thunk of DeviceState.isXRDevice.getter();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
      if ((v31 & 1) == 0) {
        return 0;
      }
      uint64_t v12 = (void *)Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.debug.getter();
      if (!OUTLINED_FUNCTION_8_2(v32))
      {
LABEL_28:

        return 5;
      }
      uint64_t v33 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_32_2(v33);
      uint64_t v17 = "#ExecutionPath: Returning .localExecution.";
    }
    else
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v26 = type metadata accessor for Logger();
      uint64_t v12 = (void *)OUTLINED_FUNCTION_25_0(v26, (uint64_t)static Logger.siriPhone);
      os_log_type_t v27 = static os_log_type_t.debug.getter();
      if (!OUTLINED_FUNCTION_8_2(v27)) {
        goto LABEL_28;
      }
      v28 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_32_2(v28);
      uint64_t v17 = "#ExecutionPath: Parse can be processed locally";
    }
    OUTLINED_FUNCTION_1_3(&dword_0, v15, v16, v17);
    OUTLINED_FUNCTION_6();
    goto LABEL_28;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = (void *)OUTLINED_FUNCTION_25_0(v4, (uint64_t)static Logger.siriPhone);
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_8_2(v6))
  {
    uint64_t v7 = (_WORD *)OUTLINED_FUNCTION_7_2();
    OUTLINED_FUNCTION_32_2(v7);
    OUTLINED_FUNCTION_1_3(&dword_0, v8, v9, "#ExecutionPath: Parse should be routed to emergency resource flow");
    OUTLINED_FUNCTION_6();
  }

  return 4;
}

uint64_t static ExecutionPath.choosePath(for:sharedGlobals:)(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[3];
  uint64_t v5 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 72))(v4, v5);
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v7);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v8 + 120))(v33, v7, v8);
  (*(void (**)(void *__return_ptr, uint64_t, void *))(*(void *)v6 + 184))(v34, a1, v33);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
  outlined init with copy of AnyPhoneNLIntent?((uint64_t)v34, (uint64_t)v28);
  if (v29)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPhoneNLIntent);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
    if (swift_dynamicCast())
    {
      if (*((void *)&v31 + 1))
      {
        outlined init with take of AppSelectionSignalComponent(&v30, (uint64_t)v33);
        if (one-time initialization token for siriPhone != -1) {
          swift_once();
        }
        uint64_t v9 = type metadata accessor for Logger();
        uint64_t v10 = OUTLINED_FUNCTION_25_0(v9, (uint64_t)static Logger.siriPhone);
        os_log_type_t v11 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v10, v11))
        {
          *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
          OUTLINED_FUNCTION_24_1(&dword_0, v12, v13, "#ExecutionPath successfully transformed parse to phoneCallNLIntent");
          OUTLINED_FUNCTION_6();
        }

        uint64_t v14 = static ExecutionPath.choosePath(for:sharedGlobals:)(v33, a2);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
        outlined destroy of SubmitCommandError?((uint64_t)v34, &demangling cache variable for type metadata for AnyPhoneNLIntent?);
        return v14;
      }
    }
    else
    {
      uint64_t v32 = 0;
      long long v30 = 0u;
      long long v31 = 0u;
    }
  }
  else
  {
    outlined destroy of SubmitCommandError?((uint64_t)v28, &demangling cache variable for type metadata for AnyPhoneNLIntent?);
    long long v30 = 0u;
    long long v31 = 0u;
    uint64_t v32 = 0;
  }
  outlined destroy of SubmitCommandError?((uint64_t)&v30, &demangling cache variable for type metadata for PhoneCallNLIntent?);
  outlined init with copy of AnyPhoneNLIntent?((uint64_t)v34, (uint64_t)v33);
  if (v33[3])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPhoneNLIntent);
    type metadata accessor for PhoneCallControlNLIntent();
    if (swift_dynamicCast())
    {
      swift_release();
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v15 = type metadata accessor for Logger();
      uint64_t v16 = (void *)OUTLINED_FUNCTION_25_0(v15, (uint64_t)static Logger.siriPhone);
      os_log_type_t v17 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_8_2(v17))
      {
        uint64_t v18 = (_WORD *)OUTLINED_FUNCTION_7_2();
        OUTLINED_FUNCTION_32_2(v18);
        OUTLINED_FUNCTION_6();
      }

      outlined destroy of SubmitCommandError?((uint64_t)v34, &demangling cache variable for type metadata for AnyPhoneNLIntent?);
      return 5;
    }
  }
  else
  {
    outlined destroy of SubmitCommandError?((uint64_t)v33, &demangling cache variable for type metadata for AnyPhoneNLIntent?);
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  uint64_t v22 = (void *)OUTLINED_FUNCTION_25_0(v21, (uint64_t)static Logger.siriPhone);
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_8_2(v23))
  {
    uint64_t v24 = (_WORD *)OUTLINED_FUNCTION_7_2();
    OUTLINED_FUNCTION_32_2(v24);
    OUTLINED_FUNCTION_1_3(&dword_0, v25, v26, "#ExecutionPath: Could not create NL intent from current parse. We should reject this parse.");
    OUTLINED_FUNCTION_6();
  }

  outlined destroy of SubmitCommandError?((uint64_t)v34, &demangling cache variable for type metadata for AnyPhoneNLIntent?);
  return 3;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t EmergencyCountdownOutputBuilder.app.getter()
{
  return swift_retain();
}

uint64_t SharedGlobalsProviding.callStateProvider.getter@<X0>(uint64_t *a1@<X8>)
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  a1[3] = (uint64_t)&type metadata for CallStateProvider;
  a1[4] = (uint64_t)&protocol witness table for CallStateProvider;
  uint64_t v2 = swift_allocObject();
  *a1 = v2;

  return outlined init with copy of CallStateProvider((uint64_t)static CallStateProvider.instance, v2 + 16);
}

uint64_t outlined init with copy of CallStateProvider(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for CallStateProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = a1 + 8;
  uint64_t v6 = a2 + 8;
  long long v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v7;
  uint64_t v8 = v7;
  uint64_t v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  id v10 = v4;
  v9(v5, v6, v8);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

void NLTransformer.transformToAnyPhoneNLIntent(parse:callStateProvider:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_46_0();
  uint64_t v12 = v10 - v11;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v53 - v14;
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*v0 + 280))(v3);
  if (v16)
  {
    os_log_type_t v17 = (void (*)(void, void, void))v16;
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.siriPhone);
    OUTLINED_FUNCTION_14_5();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_22_7(v20))
    {
      v60 = v17;
      uint64_t v21 = swift_slowAlloc();
      char v59 = (uint8_t *)OUTLINED_FUNCTION_14_0();
      *(void *)&long long v62 = v59;
      *(_DWORD *)uint64_t v21 = 136315138;
      os_log_t v57 = (os_log_t)(v21 + 4);
      os_log_type_t v58 = (uint8_t *)v21;
      uint64_t v22 = v1[4];
      uint64_t v23 = v1[5];
      uint64_t v24 = v5;
      uint64_t v26 = v1[6];
      uint64_t v25 = v1[7];
      uint64_t v64 = 0;
      unint64_t v65 = 0xE000000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v22, v23, v26, v25);
      uint64_t v5 = v24;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v65, (uint64_t *)&v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_2_30();
      os_log_type_t v17 = v60;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v19, (os_log_type_t)v12, "%s parse transformed to a call control NL intent", v58, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {

      OUTLINED_FUNCTION_2_30();
    }
    *((void *)v5 + 3) = type metadata accessor for PhoneCallControlNLIntent();
    *((void *)v5 + 4) = &protocol witness table for PhoneCallControlNLIntent;
    *(void *)uint64_t v5 = v17;
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t))(*v0 + 192))(&v62, v3);
    if (v63)
    {
      outlined init with take of AppSelectionSignalComponent(&v62, (uint64_t)&v64);
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v27 = type metadata accessor for Logger();
      __swift_project_value_buffer(v27, (uint64_t)static Logger.siriPhone);
      OUTLINED_FUNCTION_14_5();
      v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_22_7(v29))
      {
        long long v30 = (uint8_t *)OUTLINED_FUNCTION_5_22();
        v60 = (void (*)(void, void, void))OUTLINED_FUNCTION_14_0();
        v61 = v60;
        char v59 = v30;
        *(_DWORD *)long long v30 = 136315138;
        os_log_type_t v58 = v30 + 4;
        uint64_t v31 = v0[4];
        uint64_t v32 = v0[5];
        uint64_t v33 = v5;
        uint64_t v35 = v0[6];
        uint64_t v34 = v0[7];
        *(void *)&long long v62 = 0;
        *((void *)&v62 + 1) = 0xE000000000000000;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v31, v32, v35, v34);
        uint64_t v5 = v33;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(void *)&long long v62 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, *((unint64_t *)&v62 + 1), (uint64_t *)&v61);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_2_30();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_0, v28, (os_log_type_t)v12, "%s parse transformed to a phone call NL Intent", v59, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_6();
        OUTLINED_FUNCTION_6();
      }
      else
      {

        OUTLINED_FUNCTION_2_30();
      }
      uint64_t v47 = v66;
      uint64_t v48 = v67;
      v49 = __swift_project_boxed_opaque_existential_1(&v64, v66);
      *((void *)v5 + 3) = v47;
      *((void *)v5 + 4) = *(void *)(v48 + 8);
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v5);
      (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v47 - 8) + 16))(boxed_opaque_existential_1, v49, v47);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v64);
    }
    else
    {
      outlined destroy of UUID?((uint64_t)&v62, &demangling cache variable for type metadata for PhoneCallNLIntent?);
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for Logger();
      int v37 = __swift_project_value_buffer(v36, (uint64_t)static Logger.siriPhone);
      v60 = *(void (**)(void, void, void))(v8 + 16);
      v60(v15, v3, v6);
      OUTLINED_FUNCTION_14_5();
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_8_2(v39))
      {
        uint64_t v40 = OUTLINED_FUNCTION_11_7();
        os_log_type_t v58 = (uint8_t *)OUTLINED_FUNCTION_10_0();
        *(void *)&long long v62 = v58;
        *(_DWORD *)uint64_t v40 = 136315394;
        uint64_t v54 = v1[4];
        uint64_t v55 = v40 + 4;
        os_log_t v57 = v38;
        uint64_t v41 = v1[5];
        uint64_t v53 = v1[6];
        char v59 = v5;
        uint64_t v42 = v1[7];
        uint64_t v64 = 0;
        unint64_t v65 = 0xE000000000000000;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        int v56 = v37;
        DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v54, v41, v53, v42);
        uint64_t v5 = v59;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v65, (uint64_t *)&v62);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_2_30();
        swift_bridgeObjectRelease();
        *(_WORD *)(v40 + 12) = 2080;
        v60(v12, v15, v6);
        uint64_t v43 = String.init(describing:)(v12);
        uint64_t v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, (uint64_t *)&v62);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v45 = OUTLINED_FUNCTION_50_1();
        v46(v45);
        uint64_t v38 = v57;
        OUTLINED_FUNCTION_27_6();
        OUTLINED_FUNCTION_6();
        OUTLINED_FUNCTION_6();
      }
      else
      {
        OUTLINED_FUNCTION_2_30();
        uint64_t v51 = OUTLINED_FUNCTION_50_1();
        v52(v51);
      }

      *((void *)v5 + 4) = 0;
      *(_OWORD *)uint64_t v5 = 0u;
      *((_OWORD *)v5 + 1) = 0u;
    }
  }
  OUTLINED_FUNCTION_26_1();
}

uint64_t NLTransformer.transformToCallControlNLIntent(parse:)()
{
  OUTLINED_FUNCTION_22();
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t PhoneCallControlNLTransformer.transformToCallControlNLIntent(parse:)(NSObject *a1)
{
  void (*v68)(uint64_t *__return_ptr, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(void);
  void (*v75)(void);
  uint64_t v77;
  int v78;
  NSObject *v79;
  os_log_type_t v80;
  uint64_t v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  os_log_t v88;
  void (*v89)(void);
  uint8_t *v90;
  uint8_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  os_log_t v95;
  os_log_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint8_t *v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105[2];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  __chkstk_darwin(v2 - 8);
  OUTLINED_FUNCTION_3_1();
  v101 = v3;
  type metadata accessor for Siri_Nlu_External_UserParse();
  OUTLINED_FUNCTION_1();
  v99 = v5;
  v100 = v4;
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_4();
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  OUTLINED_FUNCTION_1();
  v96 = v7;
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_3_1();
  v97 = v9;
  uint64_t v10 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_1();
  uint64_t v12 = v11;
  uint64_t v14 = __chkstk_darwin(v13);
  v98 = (char *)&v90 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  os_log_type_t v17 = (char *)&v90 - v16;
  uint64_t v18 = type metadata accessor for USOParse();
  OUTLINED_FUNCTION_1();
  uint64_t v20 = v19;
  __chkstk_darwin(v21);
  OUTLINED_FUNCTION_4();
  uint64_t v24 = (uint8_t *)(v23 - v22);
  uint64_t v25 = *(void (**)(char *, os_log_t, uint64_t))(v12 + 16);
  v95 = a1;
  uint64_t v26 = a1;
  uint64_t v27 = v12;
  v28 = v25;
  v25(v17, v26, v10);
  if ((*(unsigned int (**)(char *, uint64_t))(v27 + 88))(v17, v10) != enum case for Parse.uso(_:))
  {
    OUTLINED_FUNCTION_3_23();
    v45();
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    __swift_project_value_buffer(v46, (uint64_t)static Logger.siriPhone);
    uint64_t v47 = v102;
    swift_retain_n();
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v48, v49))
    {
      os_log_type_t v50 = (uint8_t *)swift_slowAlloc();
      uint64_t v51 = OUTLINED_FUNCTION_14_0();
      v101 = v51;
      *(_DWORD *)os_log_type_t v50 = 136315138;
      v100 = v50 + 4;
      uint64_t v52 = v47[7];
      uint64_t v53 = v47[8];
      uint64_t v54 = v47[9];
      uint64_t v55 = v47[10];
      OUTLINED_FUNCTION_5_15(v51);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v52, v53, v54, v55);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v103 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v103, v104, v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v48, v49, "%s only USO parses are supported for call controls. This is not a call controls parse.", v50, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {

      swift_release_n();
    }
    return 0;
  }
  (*(void (**)(char *, uint64_t))(v27 + 96))(v17, v10);
  v94 = v20;
  (*(void (**)(uint8_t *, char *, uint64_t))(v20 + 32))(v24, v17, v18);
  USOParse.userParse.getter();
  Siri_Nlu_External_UserParse.userDialogActs.getter();
  OUTLINED_FUNCTION_11();
  v29();
  uint64_t v30 = v101;
  specialized Collection.first.getter();
  swift_bridgeObjectRelease();
  if (__swift_getEnumTagSinglePayload(v30, 1, v6) == 1)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?(v30);
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)static Logger.siriPhone);
    v28(v98, v95, v10);
    uint64_t v32 = v102;
    swift_retain_n();
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    int v35 = v34;
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v36 = swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      v99 = v37;
      *(_DWORD *)uint64_t v36 = 136315394;
      v95 = (os_log_t)(v36 + 4);
      uint64_t v39 = v32[7];
      uint64_t v38 = v32[8];
      v100 = v24;
      v101 = v18;
      uint64_t v41 = v32[9];
      uint64_t v40 = v32[10];
      OUTLINED_FUNCTION_5_15(v37);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      LODWORD(v97) = v35;
      v96 = v33;
      DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v39, v38, v41, v40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v103 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v103, v104, v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v36 + 12) = 2080;
      Swift::String v42 = Parse.typeForLogging()();
      v103 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42._countAndFlagsBits, (unint64_t)v42._object, v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_3_23();
      v43();
      os_log_t v44 = v96;
      _os_log_impl(&dword_0, v96, (os_log_type_t)v97, "%s %s: No user dialog act found in userParse.", (uint8_t *)v36, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {

      OUTLINED_FUNCTION_3_23();
      v64();
      swift_release_n();
      OUTLINED_FUNCTION_17_5();
    }
    OUTLINED_FUNCTION_11();
    v65();
    return 0;
  }
  uint64_t v56 = v97;
  ((void (*)(uint64_t, uint64_t, uint64_t))v96[4].isa)(v97, v30, v6);
  os_log_t v57 = v102;
  uint64_t v58 = v102[5];
  uint64_t v59 = v102[6];
  __swift_project_boxed_opaque_existential_1(v102 + 2, v58);
  uint64_t v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v59 + 16))(v56, v58, v59);
  if (v60)
  {
    uint64_t v61 = v60;
    OUTLINED_FUNCTION_3_23();
    v62();
    OUTLINED_FUNCTION_17_5();
    OUTLINED_FUNCTION_11();
    v63();
  }
  else
  {
    v99 = v6;
    uint64_t v66 = v94;
    if (one-time initialization token for transformer != -1) {
      swift_once();
    }
    uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Siri_Nlu_External_UserDialogAct, UserDialogActParse>);
    __swift_project_value_buffer(v67, (uint64_t)static Transformer<>.transformer);
    v68 = (void (*)(uint64_t *__return_ptr, uint64_t))Transformer.transform.getter();
    v68(&v103, v56);
    swift_release();
    uint64_t v69 = v103;
    swift_bridgeObjectRelease();
    v70 = swift_retain();
    uint64_t v61 = PhoneCallControlNLTransformer.transformToCallControlNLIntent(usoTask:)(v70);
    swift_release();
    if (!v61)
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v77 = type metadata accessor for Logger();
      uint64_t v78 = __swift_project_value_buffer(v77, (uint64_t)static Logger.siriPhone);
      swift_retain_n();
      uint64_t v79 = Logger.logObject.getter();
      uint64_t v80 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_8_2(v80))
      {
        v95 = v79;
        uint64_t v81 = swift_slowAlloc();
        LODWORD(v92) = v78;
        uint64_t v82 = (uint8_t *)v81;
        uint64_t v83 = OUTLINED_FUNCTION_14_0();
        v93 = v83;
        *(_DWORD *)uint64_t v82 = 136315138;
        uint64_t v90 = v82 + 4;
        v91 = v82;
        v100 = v24;
        v101 = v18;
        uint64_t v85 = v57[7];
        uint64_t v84 = v57[8];
        v98 = (char *)v69;
        uint64_t v87 = v57[9];
        uint64_t v86 = v57[10];
        OUTLINED_FUNCTION_5_15(v83);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v85, v84, v87, v86);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v103 = OUTLINED_FUNCTION_12_6(v103);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_4_0();
        swift_bridgeObjectRelease();
        uint64_t v88 = v95;
        swift_arrayDestroy();
        OUTLINED_FUNCTION_6();
        OUTLINED_FUNCTION_6();

        swift_release();
        OUTLINED_FUNCTION_11();
        v89();
        (*(void (**)(uint8_t *, uint64_t))(v66 + 8))(v100, v101);
      }
      else
      {
        OUTLINED_FUNCTION_4_0();

        swift_release();
        OUTLINED_FUNCTION_3_23();
        v75();
        (*(void (**)(uint8_t *, uint64_t))(v66 + 8))(v24, v18);
      }
      return 0;
    }
    v98 = (char *)v69;
    v101 = v18;
    os_log_type_t v71 = v24;
    v72 = v57[5];
    uint64_t v73 = v57[6];
    __swift_project_boxed_opaque_existential_1(v57 + 2, v72);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v73 + 8))(v56, v61, v72, v73);
    swift_release();
    OUTLINED_FUNCTION_3_23();
    v74();
    (*(void (**)(uint8_t *, uint64_t))(v66 + 8))(v71, v101);
  }
  return v61;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

void specialized Collection.first.getter(uint64_t a1)
{
  uint64_t v2 = specialized Dictionary.startIndex.getter(a1);
  if (v4) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return;
  }
  if (v2 == 1 << *(unsigned char *)(a1 + 32)) {
    OUTLINED_FUNCTION_11_1();
  }
  else {
    specialized Dictionary.subscript.getter(&v5, v2, v3, 0, a1);
  }
}

uint64_t specialized Collection.first.getter()
{
  return specialized Collection.first.getter();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t vars8;

  int v3 = OUTLINED_FUNCTION_40_2();
  uint64_t v5 = v4(v3);
  if (v2)
  {
    OUTLINED_FUNCTION_10();
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16))(v0, v1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), v5);
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 1;
  }

  return __swift_storeEnumTagSinglePayload(v0, v7, 1, v5);
}

{
  return specialized Collection.first.getter();
}

{
  return specialized Collection.first.getter();
}

{
  return specialized Collection.first.getter();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t vars8;

  int v3 = OUTLINED_FUNCTION_40_2();
  char v4 = type metadata accessor for DisambiguationItemWithDirectInvocationModel(v3);
  uint64_t v5 = v4;
  if (v2)
  {
    outlined init with copy of DisambiguationItemWithDirectInvocationModel(v1+ ((*(unsigned __int8 *)(*(void *)(v4 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4 - 8) + 80)), v0);
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 1;
  }

  return __swift_storeEnumTagSinglePayload(v0, v6, 1, v5);
}

{
  return specialized Collection.first.getter();
}

{
  return specialized Collection.first.getter();
}

{
  return specialized Collection.first.getter();
}

{
  return specialized Collection.first.getter();
}

{
  return specialized Collection.first.getter();
}

{
  return specialized Collection.first.getter();
}

double specialized Collection.first.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 16))
  {
    outlined init with copy of SharedGlobalsProviding(a1 + 32, a2);
  }
  else
  {
    *(void *)(a2 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t __swift_storeEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t __swift_getEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t protocol witness for IntentCacheProviding.getCachedIntent(matching:) in conformance SingleIntentCacheProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

uint64_t SingleIntentCacheProvider.getCachedIntent(matching:)()
{
  if (Siri_Nlu_External_UserDialogAct.hashValue.getter() == *(void *)(v0 + 16)) {
    return swift_retain();
  }
  else {
    return 0;
  }
}

void static Signpost.begin(_:)()
{
  OUTLINED_FUNCTION_24_0();
  char v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for OSSignpostID();
  OUTLINED_FUNCTION_0_0();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_46_0();
  uint64_t v12 = v10 - v11;
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v30 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v30 - v17;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for OSSignposter();
  __swift_project_value_buffer(v19, (uint64_t)static OSSignposter.siriPhone);
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  uint64_t v20 = OSSignposter.logHandle.getter();
  int v21 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {

    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(v12, v18, v6);
LABEL_13:
    type metadata accessor for OSSignpostIntervalState();
    swift_allocObject();
    OUTLINED_FUNCTION_14_24();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v18, v6);
    OUTLINED_FUNCTION_26_1();
    return;
  }
  uint64_t v37 = v5;
  uint64_t v38 = v3;
  os_log_t v35 = v20;
  uint64_t v36 = v12;
  int v34 = v21;
  if ((v1 & 1) == 0)
  {
    if (v5)
    {
      uint64_t v31 = v5;
LABEL_12:
      uint64_t v33 = *(void (**)(uint64_t, char *, uint64_t))(v8 + 16);
      OUTLINED_FUNCTION_12();
      v22();
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = OUTLINED_FUNCTION_14_0();
      uint64_t v32 = v24;
      *(_DWORD *)uint64_t v23 = 136315138;
      uint64_t v39 = v24;
      uint64_t v25 = StaticString.description.getter();
      uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v39);
      OUTLINED_FUNCTION_7_22(v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      os_signpost_id_t v28 = OSSignpostID.rawValue.getter();
      os_log_t v29 = v35;
      _os_signpost_emit_with_name_impl(&dword_0, v35, (os_signpost_type_t)v34, v28, v31, "%s", v23, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();

      (*(void (**)(char *, uint64_t))(v8 + 8))(v16, v6);
      v33(v36, v18, v6);
      goto LABEL_13;
    }
    __break(1u);
    goto LABEL_15;
  }
  if ((unint64_t)v5 >> 32)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v5 >> 11 != 27)
  {
    if (v5 >> 16 <= 0x10)
    {
      uint64_t v31 = (const char *)&v40;
      goto LABEL_12;
    }
    goto LABEL_16;
  }
LABEL_17:
  __break(1u);
}

void *_StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1, (uint64_t)v2);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  }
  v2[2] = v4 + 1;
  *((unsigned char *)v2 + v4 + 32) = 0;
  return v2;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  if (!*(void *)(a1 + 16)) {
    return _swiftEmptyArrayStorage;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  char v1 = (const void *)OUTLINED_FUNCTION_76();
  size_t v2 = _swift_stdlib_malloc_size(v1);
  OUTLINED_FUNCTION_16_32(v2);
  specialized Sequence._copySequenceContents(initializing:)(v3, v4, v5, v6);
  OUTLINED_FUNCTION_42_13();
  OUTLINED_FUNCTION_70_4();
  if (!v7)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v1;
}

{
  const void *v1;
  size_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  if (!*(void *)(a1 + 16)) {
    return _swiftEmptyArrayStorage;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  char v1 = (const void *)OUTLINED_FUNCTION_76();
  size_t v2 = _swift_stdlib_malloc_size(v1);
  OUTLINED_FUNCTION_16_32(v2);
  specialized Sequence._copySequenceContents(initializing:)(v3, v4, v5, v6);
  OUTLINED_FUNCTION_42_13();
  OUTLINED_FUNCTION_70_4();
  if (!v7)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;

  if ((a1 & 0xC000000000000001) != 0)
  {
    size_t v2 = __CocoaSet.count.getter();
    if (v2) {
      goto LABEL_3;
    }
    return _swiftEmptyArrayStorage;
  }
  size_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
LABEL_3:
  if (v2 <= 0)
  {
    uint64_t v3 = _swiftEmptyArrayStorage;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v3 = (void *)OUTLINED_FUNCTION_76();
    _swift_stdlib_malloc_size(v3);
    OUTLINED_FUNCTION_15_26();
    v3[2] = v2;
    v3[3] = v4;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v7, v3 + 4, v2, a1);
  double result = (void *)outlined consume of [String : Any].Iterator._Variant();
  if (v5 == v2) {
    return v3;
  }
  __break(1u);
  return result;
}

void specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5 = a4 >> 1;
  uint64_t v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return;
  }
  if (v6)
  {
    OUTLINED_FUNCTION_48_11();
    if (!(v8 ^ v9 | v7))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v10 = (void *)OUTLINED_FUNCTION_76();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v6;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 16);
    }
    if (v5 != v4)
    {
      specialized UnsafeMutablePointer.initialize(from:count:)();
      return;
    }
    goto LABEL_9;
  }
}

{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  void *v10;
  size_t v11;

  unint64_t v5 = a4 >> 1;
  uint64_t v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return;
  }
  if (v6)
  {
    OUTLINED_FUNCTION_48_11();
    if (!(v8 ^ v9 | v7))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TransformationResult>);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v6;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
    }
    if (v5 != v4)
    {
      specialized UnsafeMutablePointer.initialize(from:count:)();
      return;
    }
    goto LABEL_9;
  }
}

{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  void *v11;
  uint64_t v12;

  uint64_t v6 = a4 >> 1;
  char v7 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return;
  }
  if (v7)
  {
    OUTLINED_FUNCTION_48_11();
    if (!(v9 ^ v10 | v8))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      size_t v11 = (void *)OUTLINED_FUNCTION_76();
      _swift_stdlib_malloc_size(v11);
      OUTLINED_FUNCTION_15_26();
      v11[2] = v7;
      v11[3] = v12;
    }
    if (v6 != v4)
    {
      specialized UnsafeMutablePointer.initialize(from:count:)(v5 + 8 * v4, v7);
      return;
    }
    goto LABEL_9;
  }
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1)
{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(void *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(void *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(void *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(void *, uint64_t, unint64_t))&specialized _ArrayBuffer._copyContents(initializing:));
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int v2 = String.UTF8View._foreignCount()();
    if (v2) {
      goto LABEL_6;
    }
    return &_swiftEmptyArrayStorage;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    Swift::Int v2 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
LABEL_6:
  uint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    uint64_t v4 = v3;
    uint64_t v5 = _StringGuts.copyUTF8(into:)();
    if ((v6 & 1) != 0 || v5 != v2) {
      goto LABEL_14;
    }
    return v4;
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_14:
  double result = (void *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  void *v6;
  size_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_86_0();
  if (v3)
  {
    OUTLINED_FUNCTION_8_17();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_23_4();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_7_16();
    }
  }
  OUTLINED_FUNCTION_45_2();
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Substring>);
    char v6 = (void *)OUTLINED_FUNCTION_76();
    char v7 = _swift_stdlib_malloc_size(v6);
    v6[2] = v1;
    v6[3] = 2 * ((uint64_t)(v7 - 32) / 32);
  }
  if (v0)
  {
    char v8 = (char *)OUTLINED_FUNCTION_73();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v8, v9, v10);
    OUTLINED_FUNCTION_27_5();
  }
  else
  {
    size_t v11 = OUTLINED_FUNCTION_43_4();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v11, v12, v13, v14);
  }
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  void *v6;
  size_t v7;
  char *v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  OUTLINED_FUNCTION_86_0();
  if (v3)
  {
    OUTLINED_FUNCTION_8_17();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_23_4();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_7_16();
    }
  }
  OUTLINED_FUNCTION_45_2();
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PhoneNumberTag>);
    char v6 = (void *)swift_allocObject();
    char v7 = _swift_stdlib_malloc_size(v6);
    v6[2] = v1;
    v6[3] = 2 * v7 - 64;
  }
  if (v0)
  {
    char v8 = (char *)OUTLINED_FUNCTION_73();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v8, v9, v10);
    OUTLINED_FUNCTION_27_5();
  }
  else
  {
    size_t v11 = OUTLINED_FUNCTION_43_4();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v11, v12, v13, v14);
  }
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  uint64_t v0;
  void (*v1)(void, uint64_t, void *, uint64_t);
  void (*v2)(uint64_t, uint64_t, void *);
  char v3;
  uint64_t v4;
  uint64_t *v5;
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  size_t v13;
  void *v14;

  OUTLINED_FUNCTION_78();
  if (v6)
  {
    OUTLINED_FUNCTION_8_17();
    if (v8 != v9)
    {
      OUTLINED_FUNCTION_23_4();
      if (v8)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_7_16();
    }
  }
  else
  {
    char v7 = v4;
  }
  uint64_t v10 = *(void *)(v0 + 16);
  if (v7 <= v10) {
    size_t v11 = *(void *)(v0 + 16);
  }
  else {
    size_t v11 = v7;
  }
  if (v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(v5);
    uint64_t v12 = (void *)OUTLINED_FUNCTION_76();
    uint64_t v13 = _swift_stdlib_malloc_size(v12);
    OUTLINED_FUNCTION_58_1(v13);
  }
  else
  {
    uint64_t v12 = _swiftEmptyArrayStorage;
  }
  uint64_t v14 = v12 + 4;
  if (v3)
  {
    v2(v0 + 32, v10, v14);
    OUTLINED_FUNCTION_27_5();
  }
  else
  {
    v1(0, v10, v14, v0);
  }
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  void *v6;
  size_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  OUTLINED_FUNCTION_86_0();
  if (v3)
  {
    OUTLINED_FUNCTION_8_17();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_23_4();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_7_16();
    }
  }
  OUTLINED_FUNCTION_45_2();
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<INPersonHandleFaceTimeType>);
    char v6 = (void *)OUTLINED_FUNCTION_76();
    char v7 = _swift_stdlib_malloc_size(v6);
    v6[2] = v1;
    v6[3] = 2 * ((uint64_t)(v7 - 32) / 8);
  }
  if (v0)
  {
    char v8 = (char *)OUTLINED_FUNCTION_73();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v8, v9, v10);
    OUTLINED_FUNCTION_27_5();
  }
  else
  {
    size_t v11 = OUTLINED_FUNCTION_43_4();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v11, v12, v13, v14);
  }
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  uint64_t v0;
  void (*v1)(void, uint64_t, void *, uint64_t);
  void (*v2)(uint64_t, uint64_t, void *);
  char v3;
  uint64_t v4;
  uint64_t *v5;
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  size_t v13;
  void *v14;

  OUTLINED_FUNCTION_78();
  if (v6)
  {
    OUTLINED_FUNCTION_8_17();
    if (v8 != v9)
    {
      OUTLINED_FUNCTION_23_4();
      if (v8)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_7_16();
    }
  }
  else
  {
    char v7 = v4;
  }
  uint64_t v10 = *(void *)(v0 + 16);
  if (v7 <= v10) {
    size_t v11 = *(void *)(v0 + 16);
  }
  else {
    size_t v11 = v7;
  }
  if (v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(v5);
    uint64_t v12 = (void *)OUTLINED_FUNCTION_76();
    uint64_t v13 = _swift_stdlib_malloc_size(v12);
    OUTLINED_FUNCTION_58_1(v13);
  }
  else
  {
    uint64_t v12 = _swiftEmptyArrayStorage;
  }
  uint64_t v14 = v12 + 4;
  if (v3)
  {
    v2(v0 + 32, v10, v14);
    OUTLINED_FUNCTION_27_5();
  }
  else
  {
    v1(0, v10, v14, v0);
  }
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t *v6;
  void *v7;
  size_t v8;
  char *v9;
  size_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  OUTLINED_FUNCTION_86_0();
  if (v3)
  {
    OUTLINED_FUNCTION_8_17();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_23_4();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_7_16();
    }
  }
  OUTLINED_FUNCTION_45_2();
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(v6);
    char v7 = (void *)swift_allocObject();
    char v8 = _swift_stdlib_malloc_size(v7);
    v7[2] = v1;
    v7[3] = 2 * v8 - 64;
  }
  if (v0)
  {
    char v9 = (char *)OUTLINED_FUNCTION_73();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v9, v10, v11);
    OUTLINED_FUNCTION_27_5();
  }
  else
  {
    uint64_t v12 = OUTLINED_FUNCTION_43_4();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v12, v13, v14, v15);
  }
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SpeakableString>, (uint64_t (*)(void))&type metadata accessor for SpeakableString, (void (*)(void))&type metadata accessor for SpeakableString);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SemanticValue>, (uint64_t (*)(void))&type metadata accessor for SemanticValue, (void (*)(void))&type metadata accessor for SemanticValue);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ContactQuery>, (uint64_t (*)(void))&type metadata accessor for ContactQuery, (void (*)(void))&type metadata accessor for ContactQuery);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Result<TemplatingResult, Error>>, &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<AppDescription>, (uint64_t (*)(void))type metadata accessor for AppDescription, (void (*)(void))type metadata accessor for AppDescription);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UsoIdentifier>, (uint64_t (*)(void))&type metadata accessor for UsoIdentifier, (void (*)(void))&type metadata accessor for UsoIdentifier);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<DisambiguationItemWithDirectInvocationModel>, type metadata accessor for DisambiguationItemWithDirectInvocationModel, (void (*)(void))type metadata accessor for DisambiguationItemWithDirectInvocationModel);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(contact: PhoneCallNLv4Contact, contactQuery: ContactQuery)>, &demangling cache variable for type metadata for (contact: PhoneCallNLv4Contact, contactQuery: ContactQuery));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CommsAppFeature>, (uint64_t (*)(void))&type metadata accessor for CommsAppFeature, (void (*)(void))&type metadata accessor for CommsAppFeature);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_UsoEntityIdentifier>, (uint64_t (*)(void))&type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier, (void (*)(void))&type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<DisplayHint>, (uint64_t (*)(void))&type metadata accessor for DisplayHint, (void (*)(void))&type metadata accessor for DisplayHint);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_UserDialogAct>, (uint64_t (*)(void))&type metadata accessor for Siri_Nlu_External_UserDialogAct, (void (*)(void))&type metadata accessor for Siri_Nlu_External_UserDialogAct);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<RREntity>, (uint64_t (*)(void))&type metadata accessor for RREntity, (void (*)(void))&type metadata accessor for RREntity);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CommonFlowGuard>, (uint64_t (*)(void))&type metadata accessor for CommonFlowGuard, (void (*)(void))&type metadata accessor for CommonFlowGuard);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PhoneRRTarget>, type metadata accessor for PhoneRRTarget, (void (*)(void))type metadata accessor for PhoneRRTarget);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<RRResult>, (uint64_t (*)(void))&type metadata accessor for RRResult, (void (*)(void))&type metadata accessor for RRResult);
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TransformationResult>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  if (v5)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v8, v12);
    *(void *)(a4 + 16) = 0;
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, a4);
  }
  return v10;
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UsoVocIdentifier>);
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SignalProviding>);
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || &v13[16 * v8] <= v12) {
      memmove(v12, v13, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5)
{
  if (a3)
  {
    OUTLINED_FUNCTION_8_17();
    if (v8 != v9)
    {
      OUTLINED_FUNCTION_23_4();
      if (v8)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_7_16();
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v10 = *(void *)(a4 + 16);
  if (v7 <= v10) {
    uint64_t v11 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v11 = v7;
  }
  if (v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v12 = (char *)swift_allocObject();
    size_t v13 = _swift_stdlib_malloc_size(v12);
    *((void *)v12 + 2) = v10;
    *((void *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 40);
  }
  else
  {
    uint64_t v12 = (char *)&_swiftEmptyArrayStorage;
  }
  if (a1)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v10, v12 + 32);
    OUTLINED_FUNCTION_27_5();
  }
  else
  {
    uint64_t v14 = OUTLINED_FUNCTION_88_0();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v14, v15, v16, v17, v18);
  }
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    OUTLINED_FUNCTION_8_17();
    if (v10 != v11)
    {
      OUTLINED_FUNCTION_23_4();
      if (v10)
      {
        __break(1u);
        goto LABEL_23;
      }
      OUTLINED_FUNCTION_7_16();
    }
  }
  else
  {
    uint64_t v9 = a2;
  }
  uint64_t v12 = *(void *)(a4 + 16);
  if (v9 <= v12) {
    uint64_t v13 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v13 = v9;
  }
  if (!v13)
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(a6);
  OUTLINED_FUNCTION_19_0(v14);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v18 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = (void *)swift_allocObject();
  size_t v20 = _swift_stdlib_malloc_size(v19);
  if (!v16 || (v20 - v18 == 0x8000000000000000 ? (BOOL v21 = v16 == -1) : (BOOL v21 = 0), v21))
  {
LABEL_23:
    OUTLINED_FUNCTION_1_18();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v19[2] = v12;
  v19[3] = 2 * ((uint64_t)(v20 - v18) / v16);
LABEL_18:
  __swift_instantiateConcreteTypeFromMangledName(a6);
  OUTLINED_FUNCTION_55_1();
  if (a1)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a4 + v22, v12);
    OUTLINED_FUNCTION_27_5();
  }
  else
  {
    uint64_t v23 = OUTLINED_FUNCTION_88_0();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v23, v24, v25, v26, v27);
  }
  return (uint64_t)v19;
}

Swift::Void __swiftcall Signpost.OpenSignpost.end()()
{
  OUTLINED_FUNCTION_24_0();
  char v21 = v1;
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for OSSignpostError();
  OUTLINED_FUNCTION_0_0();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_4();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = type metadata accessor for OSSignpostID();
  OUTLINED_FUNCTION_0_0();
  uint64_t v13 = v12;
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_5_1();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for OSSignposter();
  __swift_project_value_buffer(v15, (uint64_t)static OSSignposter.siriPhone);
  uint64_t v16 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  os_signpost_type_t v20 = static os_signpost_type_t.end.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0) {
    goto LABEL_15;
  }
  if ((v21 & 1) == 0)
  {
    if (v3)
    {
LABEL_11:
      swift_retain();
      checkForErrorAndConsumeState(state:)();
      swift_release();
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v6 + 88))(v10, v4) == enum case for OSSignpostError.doubleEnd(_:))
      {
        uint64_t v17 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, v4);
        uint64_t v17 = "";
      }
      unint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v18 = 0;
      os_signpost_id_t v19 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_0, v16, v20, v19, v3, v17, v18, 2u);
      OUTLINED_FUNCTION_6();
LABEL_15:

      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v0, v11);
      OUTLINED_FUNCTION_26_1();
      return;
    }
    __break(1u);
  }
  if ((unint64_t)v3 >> 32)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v3 >> 11 != 27)
  {
    if (v3 >> 16 <= 0x10)
    {
      uint64_t v3 = (const char *)&v22;
      goto LABEL_11;
    }
    goto LABEL_17;
  }
LABEL_18:
  __break(1u);
}

uint64_t PhoneCallControlNLTransformer.transformToCallControlNLIntent(usoTask:)(uint64_t a1)
{
  void (*v13)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void (*v34)(void);
  os_log_type_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39[3];
  uint64_t v40[2];

  Swift::Int v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoTask, PhoneCallControlNLIntent?>);
  OUTLINED_FUNCTION_1();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_4();
  uint64_t v10 = v9 - v8;
  static Signpost.begin(_:)();
  uint64_t v12 = v11;
  type metadata accessor for UsoTask();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallControlNLIntent?);
  Transformer.init(transform:)();
  uint64_t v38 = v10;
  uint64_t v13 = (void (*)(uint64_t *__return_ptr, uint64_t *))Transformer.transform.getter();
  v39[0] = a1;
  v13(v40, v39);
  swift_release();
  uint64_t v14 = v40[0];
  if (!v40[0]) {
    goto LABEL_7;
  }
  uint64_t v15 = one-time initialization token for siriPhone;
  swift_retain();
  if (v15 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = __swift_project_value_buffer(v16, (uint64_t)static Logger.siriPhone);
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  unint64_t v18 = Logger.logObject.getter();
  os_signpost_id_t v19 = static os_log_type_t.debug.getter();
  if (!OUTLINED_FUNCTION_8_2(v19))
  {
    OUTLINED_FUNCTION_4_0();
    OUTLINED_FUNCTION_14_3();
    swift_release_n();

LABEL_7:
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v38, v4);
    goto LABEL_8;
  }
  OUTLINED_FUNCTION_14_0();
  v40[0] = OUTLINED_FUNCTION_11_13();
  *(_DWORD *)uint64_t v12 = 136315650;
  os_signpost_type_t v20 = v2[7];
  char v21 = v2[8];
  uint64_t v37 = v18;
  uint64_t v23 = v2[9];
  uint64_t v22 = v2[10];
  v39[0] = 0;
  v39[1] = 0xE000000000000000;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v36 = v17;
  DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v20, v21, v23, v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v39[0] = OUTLINED_FUNCTION_12_6(v39[0]);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  OUTLINED_FUNCTION_4_0();
  swift_bridgeObjectRelease();
  *(_WORD *)(v12 + 12) = 2080;
  swift_retain();
  uint64_t v24 = UsoTask.description.getter();
  uint64_t v26 = v25;
  swift_release();
  uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, v40);
  OUTLINED_FUNCTION_9_16(v27);
  OUTLINED_FUNCTION_14_3();
  swift_bridgeObjectRelease();
  *(_WORD *)(v12 + 22) = 2080;
  os_signpost_id_t v28 = *(uint64_t (**)(uint64_t))(*(void *)v14 + 144);
  os_log_t v29 = swift_retain();
  uint64_t v30 = v28(v29);
  uint64_t v32 = v31;
  swift_release();
  uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, v40);
  OUTLINED_FUNCTION_7_18(v33);
  swift_release_n();
  swift_bridgeObjectRelease();
  _os_log_impl(&dword_0, v37, v36, "%s transformed %s into %s", (uint8_t *)v12, 0x20u);
  swift_arrayDestroy();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_6();
  swift_release();

  OUTLINED_FUNCTION_13_6();
  OUTLINED_FUNCTION_11();
  v34();
LABEL_8:
  Signpost.OpenSignpost.end()();
  swift_release();
  return v14;
}

unsigned char *partial apply for closure #1 in static Transformer<>.transformer.getter@<X0>(void *a1@<X8>)
{
  return closure #1 in static Transformer<>.transformer.getter(a1);
}

void closure #1 in static Transformer<>.transformer.getter(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  static Signpost.begin(_:)();
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  int v32 = v11;
  if (v4 && (uint64_t v12 = dispatch thunk of UsoEntity_common_PhoneCall.recipients.getter()) != 0)
  {
    unint64_t v13 = v12;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v13 = (unint64_t)_swiftEmptyArrayStorage;
  }
  v37[0] = _swiftEmptyArrayStorage;
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v14 = *(void *)((char *)&dword_10 + (v13 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
  }
  uint64_t v35 = v6;
  uint64_t v36 = a2;
  uint64_t v33 = v10;
  uint64_t v34 = v8;
  if (v14)
  {
    if (v14 < 1)
    {
      __break(1u);
      goto LABEL_36;
    }
    for (uint64_t i = 0; i != v14; ++i)
    {
      if ((v13 & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      dispatch thunk of CodeGenListEntry.entry.getter();
      swift_release();
      if (v40)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((char *)&dword_10 + (v37[0] & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                          + (v37[0] & 0xFFFFFFFFFFFFFF8)) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v16 = v37[0];
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v16 = (unint64_t)_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  if (!(v16 >> 62))
  {
    uint64_t v17 = *(void *)((char *)&dword_10 + (v16 & 0xFFFFFFFFFFFFFF8));
    if (v17) {
      goto LABEL_22;
    }
LABEL_33:
    swift_bridgeObjectRelease();
    os_signpost_id_t v19 = _swiftEmptyArrayStorage;
LABEL_34:
    *uint64_t v36 = v19;
    Signpost.OpenSignpost.end()();
    swift_release();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v17) {
    goto LABEL_33;
  }
LABEL_22:
  uint64_t v40 = _swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v17 & 0x8000000000000000) == 0)
  {
    v31[1] = v2;
    uint64_t v18 = 0;
    os_signpost_id_t v19 = v40;
    do
    {
      if ((v16 & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      uint64_t v20 = type metadata accessor for PhoneCallNLv4Contact();
      uint64_t v21 = swift_allocObject();
      uint64_t v22 = swift_retain();
      uint64_t v23 = specialized PhoneCallNLv4Contact.init(contactConvertible:contactRole:)(v22, 1, v21);
      uint64_t v38 = v20;
      uint64_t v39 = &protocol witness table for PhoneCallNLv4Contact;
      swift_release();
      v37[0] = v23;
      uint64_t v40 = v19;
      unint64_t v24 = v19[2];
      if (v24 >= v19[3] >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      ++v18;
      uint64_t v25 = v38;
      uint64_t v26 = (uint64_t)v39;
      uint64_t v27 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v37, v38);
      __chkstk_darwin(v27);
      os_log_t v29 = (char *)v31 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v30 + 16))(v29);
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, (uint64_t)v29, (uint64_t *)&v40, v25, v26);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
      os_signpost_id_t v19 = v40;
    }
    while (v17 != v18);
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
LABEL_36:
  __break(1u);
}

unsigned char *closure #1 in static Transformer<>.transformer.getter@<X0>(void *a1@<X8>)
{
  if (UsoTask.isCallControlTask()())
  {
    uint64_t result = static Transformer<>.getPhoneCallControlNLIntent(for:)();
    if (result) {
      goto LABEL_18;
    }
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.siriPhone);
    swift_retain_n();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      os_log_type_t v22 = v5;
      log = v4;
      uint64_t v6 = swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136315394;
      if (one-time initialization token for logPrefix != -1) {
        swift_once();
      }
      uint64_t v7 = static Transformer<>.logPrefix;
      uint64_t v8 = unk_5D4930;
      uint64_t v10 = qword_5D4938;
      uint64_t v9 = unk_5D4940;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v7, v8, v10, v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v6 + 12) = 2080;
      swift_retain();
      uint64_t v11 = UsoTask.description.getter();
      unint64_t v13 = v12;
      swift_release();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, log, v22, "%s PhoneCallControlNLIntent was nil for %s", (uint8_t *)v6, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();

      uint64_t result = 0;
      goto LABEL_18;
    }

    swift_release_n();
LABEL_17:
    uint64_t result = 0;
    goto LABEL_18;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.siriPhone);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v15, v16))
  {

    goto LABEL_17;
  }
  unint64_t v24 = a1;
  uint64_t v17 = (uint8_t *)swift_slowAlloc();
  uint64_t v25 = swift_slowAlloc();
  *(_DWORD *)uint64_t v17 = 136315138;
  if (one-time initialization token for logPrefix != -1) {
    swift_once();
  }
  uint64_t v18 = static Transformer<>.logPrefix;
  uint64_t v19 = unk_5D4930;
  uint64_t v20 = qword_5D4938;
  uint64_t v21 = unk_5D4940;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v18, v19, v20, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, &v25);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  _os_log_impl(&dword_0, v15, v16, "%s usoTask is not a CallControls task.", v17, 0xCu);
  swift_arrayDestroy();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_6();

  uint64_t result = 0;
  a1 = v24;
LABEL_18:
  *a1 = result;
  return result;
}

uint64_t UsoTask.isCallControlTask()()
{
  if (UsoTask.baseEntityAsString.getter() == 0x535F6E6F6D6D6F63 && v0 == 0xEE00676E69747465)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v2 & 1) == 0
      && (UsoTask.isSwitchToFaceTimeOrVideoCallTask.getter() & 1) == 0
      && (UsoTask.isSwitchToSpeakerphoneTask.getter() & 1) == 0)
    {
      return 0;
    }
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.siriPhone);
  os_log_type_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v10 = v8;
    DefaultStringInterpolation.appendInterpolation(type:tags:function:)((uint64_t)&type metadata for String, (uint64_t)&outlined read-only object #0 of UsoTask.isCallControlTask(), 0, 0);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v5, v6, "%s task is call control or switch to FaceTime task.", v7, 0xCu);
    uint64_t v3 = 1;
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    return 1;
  }
  return v3;
}

uint64_t UsoTask.isSwitchToFaceTimeOrVideoCallTask.getter()
{
  type metadata accessor for UsoEntity_common_PhoneCallMode.DefinedValues();
  OUTLINED_FUNCTION_14_11();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_37();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_PhoneCallMode.DefinedValues?, UsoEntity_common_PhoneCallMode.DefinedValues?));
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_12_0();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_PhoneCallMode.DefinedValues?);
  __chkstk_darwin(v9 - 8);
  OUTLINED_FUNCTION_6_44();
  uint64_t v11 = __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v36 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v36 - v14;
  static UsoTask_CodegenConverter.convert(task:)();
  if (!v39[3])
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v39, &demangling cache variable for type metadata for Any?);
    goto LABEL_7;
  }
  type metadata accessor for UsoTask_update_common_PhoneCall();
  if ((OUTLINED_FUNCTION_5_42() & 1) == 0)
  {
LABEL_7:
    char v21 = 0;
    return v21 & 1;
  }
  uint64_t v37 = v3;
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_ReferenceTarget.target.getter();
  swift_release();
  uint64_t v16 = v39[0];
  uint64_t v38 = v5;
  if (v39[0])
  {
    uint64_t v17 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
    swift_release();
    if (v17)
    {
      UsoEntity_common_App.applicationId.getter();
      uint64_t v19 = v18;
      uint64_t v16 = v20;
      swift_release();
    }
    else
    {
      uint64_t v19 = 0;
      uint64_t v16 = 0;
    }
  }
  else
  {
    uint64_t v19 = 0;
  }
  char v22 = static PhoneCallAppNameConstants.isFaceTime(appId:)(v19, v16);
  swift_bridgeObjectRelease();
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_ReferenceTarget.target.getter();
  swift_release();
  if (v39[0] && (uint64_t v23 = dispatch thunk of UsoEntity_common_PhoneCall.mode.getter(), swift_release(), v23))
  {
    dispatch thunk of UsoEntity_common_PhoneCallMode.definedValue.getter();
    swift_release();
  }
  else
  {
    __swift_storeEnumTagSinglePayload((uint64_t)v15, 1, 1, v0);
  }
  uint64_t v24 = v38;
  OUTLINED_FUNCTION_8_51();
  v25();
  __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v0);
  uint64_t v26 = v1 + *(int *)(v7 + 48);
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0((uint64_t)v15, v1, &demangling cache variable for type metadata for UsoEntity_common_PhoneCallMode.DefinedValues?);
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0((uint64_t)v13, v26, &demangling cache variable for type metadata for UsoEntity_common_PhoneCallMode.DefinedValues?);
  OUTLINED_FUNCTION_2_63(v1);
  if (v30)
  {
    swift_release();
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v13, &demangling cache variable for type metadata for UsoEntity_common_PhoneCallMode.DefinedValues?);
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v15, &demangling cache variable for type metadata for UsoEntity_common_PhoneCallMode.DefinedValues?);
    OUTLINED_FUNCTION_2_63(v26);
    if (v27) {
      uint64_t v28 = &demangling cache variable for type metadata for UsoEntity_common_PhoneCallMode.DefinedValues?;
    }
    else {
      uint64_t v28 = &demangling cache variable for type metadata for (UsoEntity_common_PhoneCallMode.DefinedValues?, UsoEntity_common_PhoneCallMode.DefinedValues?);
    }
    if (v27) {
      char v29 = -1;
    }
    else {
      char v29 = 0;
    }
  }
  else
  {
    _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(v1, v2, &demangling cache variable for type metadata for UsoEntity_common_PhoneCallMode.DefinedValues?);
    OUTLINED_FUNCTION_2_63(v26);
    if (v30)
    {
      swift_release();
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v13, &demangling cache variable for type metadata for UsoEntity_common_PhoneCallMode.DefinedValues?);
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v15, &demangling cache variable for type metadata for UsoEntity_common_PhoneCallMode.DefinedValues?);
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v2, v0);
      char v29 = 0;
      uint64_t v28 = &demangling cache variable for type metadata for (UsoEntity_common_PhoneCallMode.DefinedValues?, UsoEntity_common_PhoneCallMode.DefinedValues?);
    }
    else
    {
      uint64_t v31 = v37;
      OUTLINED_FUNCTION_7_46();
      v32();
      lazy protocol witness table accessor for type UsoEntity_common_PhoneCallMode.DefinedValues and conformance UsoEntity_common_PhoneCallMode.DefinedValues(&lazy protocol witness table cache variable for type UsoEntity_common_PhoneCallMode.DefinedValues and conformance UsoEntity_common_PhoneCallMode.DefinedValues, (void (*)(uint64_t))&type metadata accessor for UsoEntity_common_PhoneCallMode.DefinedValues);
      char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
      swift_release();
      char v33 = v22;
      uint64_t v34 = *(void (**)(void))(v24 + 8);
      ((void (*)(uint64_t, uint64_t))v34)(v31, v0);
      uint64_t v28 = &demangling cache variable for type metadata for UsoEntity_common_PhoneCallMode.DefinedValues?;
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v13, &demangling cache variable for type metadata for UsoEntity_common_PhoneCallMode.DefinedValues?);
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v15, &demangling cache variable for type metadata for UsoEntity_common_PhoneCallMode.DefinedValues?);
      OUTLINED_FUNCTION_12_1();
      v34();
      char v22 = v33;
    }
  }
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v1, v28);
  char v21 = v22 | v29;
  return v21 & 1;
}

uint64_t UsoTask.isSwitchToSpeakerphoneTask.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
  __chkstk_darwin(v1 - 8);
  OUTLINED_FUNCTION_12_0();
  type metadata accessor for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues();
  OUTLINED_FUNCTION_14_11();
  uint64_t v3 = v2;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v20 - v8;
  static UsoTask_CodegenConverter.convert(task:)();
  if (!v21[3])
  {
    uint64_t v11 = &demangling cache variable for type metadata for Any?;
    uint64_t v12 = v21;
LABEL_12:
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v12, v11);
    goto LABEL_14;
  }
  type metadata accessor for UsoTask_update_common_PhoneCall();
  if (OUTLINED_FUNCTION_5_42())
  {
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_ReferenceTarget.target.getter();
    swift_release();
    if (!v21[0]) {
      goto LABEL_13;
    }
    unint64_t v10 = dispatch thunk of UsoEntity_common_PhoneCall.attributes.getter();
    swift_release();
    if (!v10) {
      goto LABEL_13;
    }
    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v19) {
        goto LABEL_7;
      }
    }
    else if (*(void *)((char *)&dword_10 + (v10 & 0xFFFFFFFFFFFFFF8)))
    {
LABEL_7:
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v10 & 0xC000000000000001) == 0, v10);
      if ((v10 & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      swift_bridgeObjectRelease();
      dispatch thunk of CodeGenListEntry.entry.getter();
      if (v20[1])
      {
        CodeGenBase.entity.getter();
        swift_release();
      }
      type metadata accessor for UsoEntity_applePhoneCall_PhoneCallAttribute();
      static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
      swift_release();
      if (v21[0])
      {
        dispatch thunk of UsoEntity_applePhoneCall_PhoneCallAttribute.definedValue.getter();
        OUTLINED_FUNCTION_2_63(v0);
        if (!v15)
        {
          OUTLINED_FUNCTION_7_46();
          v16();
          OUTLINED_FUNCTION_8_51();
          v17();
          char v13 = specialized == infix<A>(_:_:)((uint64_t)v9, (uint64_t)v7);
          swift_release();
          swift_release();
          swift_release();
          uint64_t v18 = *(void (**)(void))(v3 + 8);
          OUTLINED_FUNCTION_12_1();
          v18();
          OUTLINED_FUNCTION_12_1();
          v18();
          return v13 & 1;
        }
        swift_release();
        swift_release();
        swift_release();
        uint64_t v11 = &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?;
        uint64_t v12 = (void *)v0;
        goto LABEL_12;
      }
      swift_release();
LABEL_13:
      swift_release();
      goto LABEL_14;
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
LABEL_14:
  char v13 = 0;
  return v13 & 1;
}

void NLTransformer.transformToPhoneCallNLIntent(parse:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v84 = v0;
  uint64_t v85 = v3;
  uint64_t v5 = v4;
  type metadata accessor for USOParse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v79 = v7;
  uint64_t v80 = v6;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_3_1();
  uint64_t v78 = v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  uint64_t v10 = OUTLINED_FUNCTION_11_0(v9);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Siri_Nlu_External_UserParse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v82 = v14;
  uint64_t v83 = v13;
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_46_0();
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v77 - v16;
  uint64_t v18 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v20 = v19;
  __chkstk_darwin(v21);
  OUTLINED_FUNCTION_5_1();
  uint64_t v22 = type metadata accessor for NLIntent();
  OUTLINED_FUNCTION_0_0();
  uint64_t v24 = v23;
  __chkstk_darwin(v25);
  OUTLINED_FUNCTION_53();
  uint64_t v26 = *(void (**)(uint64_t *, uint8_t *, uint64_t))(v20 + 16);
  uint64_t v81 = v5;
  v26(v1, v5, v18);
  int v27 = (*(uint64_t (**)(uint64_t *, uint64_t))(v20 + 88))(v1, v18);
  if (v27 == enum case for Parse.NLv3IntentOnly(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v20 + 96))(v1, v18);
LABEL_5:
    OUTLINED_FUNCTION_41_2();
    OUTLINED_FUNCTION_15_10();
    v31(v30);
    OUTLINED_FUNCTION_22();
    (*(void (**)(uint64_t))(v32 + 208))(v2);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v2, v22);
    goto LABEL_6;
  }
  uint64_t v77 = v18;
  if (v27 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    uint64_t v28 = OUTLINED_FUNCTION_12_8();
    v29(v28);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    swift_release();
    goto LABEL_5;
  }
  if (v27 == enum case for Parse.directInvocation(_:))
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    int v34 = __swift_project_value_buffer(v33, (uint64_t)static Logger.siriPhone);
    OUTLINED_FUNCTION_14_5();
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_8_2(v36))
    {
      LODWORD(v83) = v34;
      OUTLINED_FUNCTION_5_22();
      uint64_t v82 = OUTLINED_FUNCTION_14_0();
      OUTLINED_FUNCTION_8_24(v82, 4.8149e-34);
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_29_7();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v37 = OUTLINED_FUNCTION_3_29();
      OUTLINED_FUNCTION_23_7(v37);
      OUTLINED_FUNCTION_2_30();
      swift_bridgeObjectRelease();
      uint64_t v38 = "%s Direct Invocation parse can't be transformed to PhoneCallNLIntent";
LABEL_25:
      _os_log_impl(&dword_0, v35, (os_log_type_t)v83, v38, v81, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();

LABEL_27:
      double v76 = OUTLINED_FUNCTION_18_10();
      (*(void (**)(uint64_t *, double))(v20 + 8))(v1, v76);
      goto LABEL_6;
    }
    goto LABEL_26;
  }
  if (v27 != enum case for Parse.NLv4IntentOnly(_:))
  {
    if (v27 == enum case for Parse.uso(_:))
    {
      uint64_t v60 = OUTLINED_FUNCTION_12_8();
      v61(v60);
      uint64_t v63 = v78;
      uint64_t v62 = v79;
      uint64_t v64 = v80;
      OUTLINED_FUNCTION_15_10();
      v66(v65);
      Parse.typeForLogging()();
      USOParse.userParse.getter();
      NLTransformer.transformToPhoneCallNLIntent(typeForLogging:userParse:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_11();
      v68(v67);
      (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v63, v64);
      goto LABEL_6;
    }
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v72 = type metadata accessor for Logger();
    int v73 = __swift_project_value_buffer(v72, (uint64_t)static Logger.siriPhone);
    OUTLINED_FUNCTION_14_5();
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v74 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_8_2(v74))
    {
      LODWORD(v83) = v73;
      OUTLINED_FUNCTION_5_22();
      uint64_t v82 = OUTLINED_FUNCTION_14_0();
      OUTLINED_FUNCTION_8_24(v82, 4.8149e-34);
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_29_7();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v75 = OUTLINED_FUNCTION_3_29();
      OUTLINED_FUNCTION_23_7(v75);
      OUTLINED_FUNCTION_2_30();
      swift_bridgeObjectRelease();
      uint64_t v38 = "%s got an unknown parse";
      goto LABEL_25;
    }
LABEL_26:

    OUTLINED_FUNCTION_2_30();
    goto LABEL_27;
  }
  uint64_t v39 = OUTLINED_FUNCTION_12_8();
  v40(v39);
  uint64_t v41 = *v1;
  static ConversionUtils.toUserParse(from:)();
  uint64_t v42 = v83;
  OUTLINED_FUNCTION_28_6((uint64_t)v12, 1, v83);
  if (v43)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v44 = type metadata accessor for Logger();
    __swift_project_value_buffer(v44, (uint64_t)static Logger.siriPhone);
    uint64_t v45 = v84;
    OUTLINED_FUNCTION_14_5();
    swift_unknownObjectRetain_n();
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = OUTLINED_FUNCTION_11_7();
      uint64_t v49 = OUTLINED_FUNCTION_10_0();
      uint64_t v83 = v49;
      *(_DWORD *)uint64_t v48 = 136315394;
      uint64_t v82 = v48 + 4;
      uint64_t v50 = v45[4];
      uint64_t v51 = v45[5];
      uint64_t v53 = v45[6];
      uint64_t v52 = v45[7];
      OUTLINED_FUNCTION_20_9(v49);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v50, v51, v53, v52);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v87, &v88);
      OUTLINED_FUNCTION_7_22(v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_2_30();
      swift_bridgeObjectRelease();
      *(_WORD *)(v48 + 12) = 2080;
      uint64_t v86 = v41;
      swift_unknownObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIRINLUUserDialogAct);
      uint64_t v55 = String.init<A>(describing:)();
      uint64_t v57 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, &v88);
      OUTLINED_FUNCTION_39_4(v57);
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_45_3(&dword_0, v58, v59, "%s couldn't transform UserDialogAct %s into UserParse to get the UDAs.");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
      swift_unknownObjectRelease();
    }
    else
    {

      OUTLINED_FUNCTION_2_30();
      swift_unknownObjectRelease_n();
    }
    OUTLINED_FUNCTION_18_10();
  }
  else
  {
    uint64_t v69 = v82;
    OUTLINED_FUNCTION_41_2();
    OUTLINED_FUNCTION_15_10();
    v71(v70);
    Parse.typeForLogging()();
    NLTransformer.transformToPhoneCallNLIntent(typeForLogging:userParse:)();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v69 + 8))(v17, v42);
  }
LABEL_6:
  OUTLINED_FUNCTION_26_1();
}

Swift::String __swiftcall Parse.typeForLogging()()
{
  uint64_t v1 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_65_2();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v0, v0, v1);
  int v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v0, v1);
  if (v5 == enum case for Parse.NLv4IntentOnly(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 96))(v0, v1);
    swift_unknownObjectRelease();
    unint64_t v6 = OUTLINED_FUNCTION_2_120();
  }
  else
  {
    int v8 = v5;
    int v9 = enum case for Parse.uso(_:);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
    if (v8 == v9) {
      unint64_t v6 = 7304053;
    }
    else {
      unint64_t v6 = 0xD000000000000012;
    }
    if (v8 == v9) {
      uint64_t v7 = (void *)0xE300000000000000;
    }
    else {
      uint64_t v7 = (void *)0x8000000000490DE0;
    }
  }
  result._object = v7;
  result._countAndFlagsBits = v6;
  return result;
}

void NLTransformer.transformToPhoneCallNLIntent(typeForLogging:userParse:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v3 = v0;
  unint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v11 = OUTLINED_FUNCTION_11_0(v10);
  __chkstk_darwin(v11);
  uint64_t v12 = OUTLINED_FUNCTION_26_9();
  OUTLINED_FUNCTION_0_0();
  uint64_t v14 = v13;
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_37();
  Siri_Nlu_External_UserParse.preferredUserDialogAct.getter(v1);
  OUTLINED_FUNCTION_28_6(v1, 1, v12);
  if (v16)
  {
    outlined destroy of UUID?(v1, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.siriPhone);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = OUTLINED_FUNCTION_11_7();
      uint64_t v27 = OUTLINED_FUNCTION_10_0();
      *(_DWORD *)uint64_t v20 = 136315394;
      uint64_t v26 = v7;
      uint64_t v21 = v3[4];
      uint64_t v22 = v3[5];
      uint64_t v24 = v3[6];
      uint64_t v23 = v3[7];
      uint64_t v28 = v27;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v21, v22, v24, v23);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_3_29();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 12) = 2080;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v5, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_0, v18, v19, "%s %s: No user dialog act found in userParse.", (uint8_t *)v20, 0x16u);
      OUTLINED_FUNCTION_27_6();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_release_n();
    }
    *(void *)(v9 + 32) = 0;
    OUTLINED_FUNCTION_42_1();
  }
  else
  {
    OUTLINED_FUNCTION_41_2();
    OUTLINED_FUNCTION_15_10();
    v25();
    (*(void (**)(uint64_t))(*v0 + 216))(v2);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v2, v12);
  }
  OUTLINED_FUNCTION_26_1();
}

uint64_t NLTransformer.transformToPhoneCallNLIntent(usoUserDialogAct:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  static Signpost.begin(_:)();
  NLTransformer.transformationResult(userDialogAct:)(a1, &v5);
  NLTransformer.appendToNLIntentHistory(transformationResult:)(&v5);
  outlined init with take of PhoneCallNLIntent?((uint64_t)&v6, a2, &demangling cache variable for type metadata for PhoneCallNLIntent?);
  Signpost.OpenSignpost.end()();
  return swift_release();
}

void NLTransformer.transformationResult(userDialogAct:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = Siri_Nlu_External_UserDialogAct.hashValue.getter();
  NLTransformer.alreadyTransformed(newHash:)(v5, v26);
  if (v27 == 1)
  {
    uint64_t v6 = outlined destroy of UUID?((uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for TransformationResult?);
    (*(void (**)(_OWORD *__return_ptr, uint64_t))(*v2 + 152))(v26, v6);
    if (v27 == 1)
    {
      outlined destroy of UUID?((uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for TransformationResult?);
      memset(v24, 0, sizeof(v24));
      uint64_t v25 = 0;
    }
    else
    {
      outlined init with copy of TransformationResult?((uint64_t)v26 + 8, (uint64_t)v24, &demangling cache variable for type metadata for PhoneCallNLIntent?);
      outlined destroy of UUID?((uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for TransformationResult?);
    }
    OUTLINED_FUNCTION_22();
    (*(void (**)(void *__return_ptr, uint64_t, _OWORD *))(v7 + 96))(v23, a1, v24);
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.siriPhone);
    outlined init with copy of TransformationResult?((uint64_t)v23, (uint64_t)v26, &demangling cache variable for type metadata for PhoneCallNLIntent?);
    swift_retain_n();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v20 = v5;
      uint64_t v11 = OUTLINED_FUNCTION_11_7();
      v21[0] = OUTLINED_FUNCTION_10_0();
      *(_DWORD *)uint64_t v11 = 136315394;
      uint64_t v13 = v2[4];
      uint64_t v12 = v2[5];
      uint64_t v15 = v2[6];
      uint64_t v14 = v2[7];
      v22[0] = 0;
      v22[1] = 0xE000000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v13, v12, v15, v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v22[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_6_2();
      swift_bridgeObjectRelease();
      *(_WORD *)(v11 + 12) = 2080;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallNLIntent?);
      uint64_t v16 = Optional.debugDescription.getter();
      v22[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of UUID?((uint64_t)v26, &demangling cache variable for type metadata for PhoneCallNLIntent?);
      OUTLINED_FUNCTION_45_3(&dword_0, v18, v19, "%s found no cached result. Transformation generated phoneNLIntent: %s");
      OUTLINED_FUNCTION_27_6();
      OUTLINED_FUNCTION_6();
      uint64_t v5 = v20;
      OUTLINED_FUNCTION_6();
    }
    else
    {

      outlined destroy of UUID?((uint64_t)v26, &demangling cache variable for type metadata for PhoneCallNLIntent?);
      OUTLINED_FUNCTION_6_2();
    }
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for PhoneCallNLIntent?);
    *a2 = v5;
    outlined init with take of PhoneCallNLIntent?((uint64_t)v23, (uint64_t)(a2 + 1), &demangling cache variable for type metadata for PhoneCallNLIntent?);
    outlined init with copy of TransformationResult(a2, v26);
    outlined init with take of PhoneCallNLIntent?((uint64_t)v26, (uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for TransformationResult?);
    swift_beginAccess();
    outlined assign with take of PhoneCallNLIntent?((uint64_t)v22, (uint64_t)(v2 + 9), (uint64_t *)&demangling cache variable for type metadata for TransformationResult?);
    swift_endAccess();
  }
  else
  {
    OUTLINED_FUNCTION_33_4();
  }
}

void NLTransformer.alreadyTransformed(newHash:)(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  OUTLINED_FUNCTION_22();
  (*(void (**)(long long *__return_ptr))(v5 + 152))(&v24);
  if ((void)v26 != 1)
  {
    long long v27 = v24;
    long long v28 = v25;
    long long v29 = v26;
    if ((void)v24 != a1)
    {
      outlined destroy of TransformationResult((uint64_t)&v27);
      goto LABEL_10;
    }
    outlined init with copy of TransformationResult?((uint64_t)&v27 + 8, (uint64_t)&v24, &demangling cache variable for type metadata for PhoneCallNLIntent?);
    uint64_t v6 = *((void *)&v25 + 1);
    outlined destroy of UUID?((uint64_t)&v24, &demangling cache variable for type metadata for PhoneCallNLIntent?);
    if (v6)
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      __swift_project_value_buffer(v7, (uint64_t)static Logger.siriPhone);
      outlined init with copy of TransformationResult((uint64_t *)&v27, &v24);
      OUTLINED_FUNCTION_14_5();
      uint64_t v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_22_7(v9))
      {
        uint64_t v10 = OUTLINED_FUNCTION_11_7();
        uint64_t v20 = OUTLINED_FUNCTION_10_0();
        uint64_t v21 = 0;
        uint64_t v23 = v20;
        OUTLINED_FUNCTION_16_15(4.8151e-34);
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_31_7();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, v22, &v23);
        OUTLINED_FUNCTION_24_12();
        OUTLINED_FUNCTION_2_30();
        swift_bridgeObjectRelease();
        *(_WORD *)(v10 + 12) = 2080;
        outlined init with copy of TransformationResult?((uint64_t)&v24 + 8, (uint64_t)&v21, &demangling cache variable for type metadata for PhoneCallNLIntent?);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallNLIntent?);
        uint64_t v11 = String.init<A>(describing:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v23);
        OUTLINED_FUNCTION_40_5();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of TransformationResult((uint64_t)&v24);
        uint64_t v13 = "%s found cached result. Returning result: %s";
LABEL_15:
        _os_log_impl(&dword_0, v8, v2, v13, (uint8_t *)v10, 0x16u);
        OUTLINED_FUNCTION_27_6();
        OUTLINED_FUNCTION_6();
        OUTLINED_FUNCTION_6();
LABEL_17:

        long long v19 = v28;
        *a2 = v27;
        a2[1] = v19;
        long long v14 = v29;
        goto LABEL_18;
      }
    }
    else
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v15 = type metadata accessor for Logger();
      __swift_project_value_buffer(v15, (uint64_t)static Logger.siriPhone);
      outlined init with copy of TransformationResult((uint64_t *)&v27, &v24);
      OUTLINED_FUNCTION_14_5();
      uint64_t v8 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_22_7(v16))
      {
        uint64_t v10 = OUTLINED_FUNCTION_11_7();
        uint64_t v23 = OUTLINED_FUNCTION_10_0();
        OUTLINED_FUNCTION_16_15(4.8151e-34);
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_31_7();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, v22, &v23);
        OUTLINED_FUNCTION_24_12();
        OUTLINED_FUNCTION_2_30();
        swift_bridgeObjectRelease();
        *(_WORD *)(v10 + 12) = 2080;
        uint64_t v21 = v24;
        uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v23);
        OUTLINED_FUNCTION_40_5();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of TransformationResult((uint64_t)&v24);
        uint64_t v13 = "%s found in cache entry-key %s with a nil value. Returning nil as upstream transformer failed";
        goto LABEL_15;
      }
    }
    OUTLINED_FUNCTION_2_30();
    outlined destroy of TransformationResult((uint64_t)&v24);
    goto LABEL_17;
  }
  outlined destroy of UUID?((uint64_t)&v24, (uint64_t *)&demangling cache variable for type metadata for TransformationResult?);
LABEL_10:
  OUTLINED_FUNCTION_42_1();
  long long v14 = xmmword_467740;
LABEL_18:
  a2[2] = v14;
}

uint64_t NLTransformer.currentTransformation.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  return outlined init with copy of TransformationResult?(v1 + 72, a1, (uint64_t *)&demangling cache variable for type metadata for TransformationResult?);
}

uint64_t outlined init with copy of Result<TemplatingResult, Error>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of TransformationResult?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  OUTLINED_FUNCTION_38_5(a1, a2, a3);
  OUTLINED_FUNCTION_15();
  uint64_t v4 = OUTLINED_FUNCTION_32_6();
  v5(v4);
  return v3;
}

uint64_t getEnumTagSinglePayload for TransformationResult(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 48))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 32);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

void *initializeWithCopy for TransformationResult(void *a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2 + 1;
  *a1 = v5;
  uint64_t v6 = a1 + 1;
  uint64_t v7 = a2[4];
  if (v7)
  {
    uint64_t v8 = a2[5];
    a1[4] = v7;
    a1[5] = v8;
    (**(void (***)(void *, void *))(v7 - 8))(v6, v4);
  }
  else
  {
    long long v9 = *((_OWORD *)v4 + 1);
    *(_OWORD *)uint64_t v6 = *(_OWORD *)v4;
    *((_OWORD *)v6 + 1) = v9;
    v6[4] = v4[4];
  }
  return a1;
}

uint64_t storeEnumTagSinglePayload for TransformationResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)Swift::String result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }
  return result;
}

uint64_t outlined destroy of TransformationResult(uint64_t a1)
{
  return a1;
}

uint64_t destroy for TransformationResult(uint64_t result)
{
  if (*(void *)(result + 32)) {
    return __swift_destroy_boxed_opaque_existential_1(result + 8);
  }
  return result;
}

void NLv4Transformer.transformUserDialogAct(userDialogAct:previousPhoneCallNLIntent:)()
{
  void (*v36)(uint64_t *__return_ptr, uint64_t);
  uint64_t v37;
  os_log_t v38;
  char *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(void);
  uint64_t v53;
  uint64_t v54[2];
  uint64_t v55;
  unint64_t v56;

  OUTLINED_FUNCTION_24_0();
  uint64_t v46 = v0;
  uint64_t v48 = v1;
  uint64_t v3 = v2;
  uint64_t v50 = v4;
  uint64_t v5 = type metadata accessor for TransformerInput(0);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_4();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  OUTLINED_FUNCTION_1();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_5_8();
  uint64_t v53 = v14;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_5_17();
  uint64_t v44 = v16;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v17);
  long long v19 = (char *)&v38 - v18;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v21 = __swift_project_value_buffer(v20, (uint64_t)static Logger.siriPhone);
  uint64_t v52 = *(void (**)(void))(v12 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v52)(v19, v3, v10);
  char v43 = v21;
  unint64_t v22 = Logger.logObject.getter();
  uint64_t v40 = static os_log_type_t.debug.getter();
  BOOL v23 = os_log_type_enabled(v22, (os_log_type_t)v40);
  uint64_t v51 = v12;
  uint64_t v49 = v3;
  os_log_type_t v47 = v5;
  uint64_t v45 = v9;
  if (v23)
  {
    uint64_t v39 = v19;
    uint64_t v38 = v22;
    uint64_t v41 = v12 + 16;
    uint64_t v42 = v10;
    uint64_t v24 = OUTLINED_FUNCTION_11_7();
    v54[0] = OUTLINED_FUNCTION_10_0();
    *(_DWORD *)uint64_t v24 = 136315394;
    if (one-time initialization token for logPrefix != -1) {
      swift_once();
    }
    uint64_t v26 = static NLv4Transformer.logPrefix;
    uint64_t v25 = unk_5D5060;
    uint64_t v27 = qword_5D5068;
    uint64_t v28 = unk_5D5070;
    uint64_t v55 = 0;
    unint64_t v56 = 0xE000000000000000;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v26, v25, v27, v28);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 12) = 2080;
    uint64_t v29 = v44;
    uint64_t v30 = v39;
    uint64_t v31 = v42;
    uint64_t v32 = v52;
    ((void (*)(uint64_t, char *, uint64_t))v52)(v44, v39, v42);
    uint64_t v33 = specialized String.init(describing:)(v29);
    uint64_t v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v30, v31);
    os_log_t v35 = v38;
    _os_log_impl(&dword_0, v38, (os_log_type_t)v40, "%s attempting to transform %s into NLv4PhoneCallNLIntent.", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v19, v10);

    uint64_t v32 = v52;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<TransformerInput, PhoneCallNLIntent?>);
  os_log_type_t v36 = (void (*)(uint64_t *__return_ptr, uint64_t))Transformer.transform.getter();
  uint64_t v37 = v45;
  OUTLINED_FUNCTION_80_8();
  v32();
  outlined init with copy of ConfirmationResponse?(v48, v37 + *(int *)(v47 + 20), &demangling cache variable for type metadata for PhoneCallNLIntent?);
  v36(&v55, v37);
  swift_release();
  outlined destroy of TransformerInput(v37, (void (*)(void))type metadata accessor for TransformerInput);
  outlined init with take of AnnotatedApp?((uint64_t)&v55, v50, &demangling cache variable for type metadata for PhoneCallNLIntent?);
  OUTLINED_FUNCTION_26_1();
}

uint64_t type metadata accessor for TransformerInput(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for TransformerInput);
}

uint64_t specialized String.init(describing:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[3] = a2;
  v8[4] = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(boxed_opaque_existential_1, a1, a2);
  type metadata accessor for SiriNLUTypesPrintUtils();
  static SiriNLUTypesPrintUtils.printableProtoObject(object:)();
  uint64_t v6 = String.init<A>(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v6;
}

uint64_t lazy protocol witness table accessor for type RREntity and conformance RREntity(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t OUTLINED_FUNCTION_65()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_14(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_35()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_38()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_33(uint64_t result)
{
  *(void *)(v1 + 64) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_65_1(uint64_t result)
{
  *(void *)(v2 + 56) = v1;
  *(void *)(v3 + 48) = v1;
  *(void *)(v3 + 72) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_65_3()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_65_4()
{
  return 0x6F54646E6F636573;
}

uint64_t OUTLINED_FUNCTION_44(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_65_5(uint64_t result)
{
  *(void *)(v1 + 56) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_9()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_65_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_65_8()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_65_9()
{
  return Reducer.init(builder:)();
}

void OUTLINED_FUNCTION_65_10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v11 + 704) = a11;
}

uint64_t OUTLINED_FUNCTION_65_11()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_65_12()
{
  return v0;
}

void OUTLINED_FUNCTION_65_13(float a1)
{
  float *v1 = a1;
}

uint64_t OUTLINED_FUNCTION_65_16()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t static Transformer<>.findNextVoicemailTask(usoTask:)(uint64_t a1, void (*a2)(void))
{
  static UsoTask_CodegenConverter.convert(task:)();
  if (v5)
  {
    a2(0);
    uint64_t result = swift_dynamicCast();
    if (result)
    {
      swift_release();
      return 1;
    }
  }
  else
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for Any?);
    return 0;
  }
  return result;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t lazy protocol witness table accessor for type UsoEntity_common_ReferenceType.DefinedValues and conformance UsoEntity_common_ReferenceType.DefinedValues(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of UUID?(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_15();
  OUTLINED_FUNCTION_11();
  v3();
  return a1;
}

uint64_t outlined destroy of TransformerInput(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_15();
  OUTLINED_FUNCTION_11();
  v3();
  return a1;
}

uint64_t destroy for TransformerInput(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t result = a1 + *(int *)(a2 + 20);
  if (*(void *)(result + 24)) {
    return __swift_destroy_boxed_opaque_existential_1(result);
  }
  return result;
}

void *outlined init with copy of TransformationResult(uint64_t *a1, void *a2)
{
  return a2;
}

void *assignWithCopy for TransformationResult(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a1 + 1;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = a2[4];
  if (!a1[4])
  {
    if (v5)
    {
      a1[4] = v5;
      a1[5] = a2[5];
      (**(void (***)(uint64_t, uint64_t))(v5 - 8))((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
      return a1;
    }
LABEL_7:
    long long v6 = *(_OWORD *)v4;
    long long v7 = *((_OWORD *)v4 + 1);
    v3[4] = v4[4];
    *(_OWORD *)uint64_t v3 = v6;
    *((_OWORD *)v3 + 1) = v7;
    return a1;
  }
  if (!v5)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 1));
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1(a1 + 1, a2 + 1);
  return a1;
}

uint64_t NLTransformer.appendToNLIntentHistory(transformationResult:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_22();
  uint64_t v5 = *(uint64_t (**)(void))(v4 + 128);
  uint64_t v6 = *(void *)(v5() + 16);
  swift_bridgeObjectRelease();
  long long v7 = outlined init with copy of TransformationResult(a1, v15);
  if (v6)
  {
    uint64_t v8 = ((uint64_t (*)(void *))v5)(v7);
    specialized BidirectionalCollection.last.getter(v8, (uint64_t)v14);
    swift_bridgeObjectRelease();
    if (v14[4] != 1)
    {
      uint64_t v9 = v14[0];
      outlined destroy of TransformationResult((uint64_t)v14);
      uint64_t v10 = v15[0];
      uint64_t result = outlined destroy of TransformationResult((uint64_t)v15);
      if (v9 == v10) {
        return result;
      }
      goto LABEL_6;
    }
    outlined destroy of UUID?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for TransformationResult?);
  }
  outlined destroy of TransformationResult((uint64_t)v15);
LABEL_6:
  swift_beginAccess();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  uint64_t v12 = *(void *)(*(void *)(v2 + 64) + 16);
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v12);
  uint64_t v13 = *(void *)(v2 + 64);
  *(void *)(v13 + 16) = v12 + 1;
  outlined init with copy of TransformationResult(a1, (void *)(v13 + 48 * v12 + 32));
  return swift_endAccess();
}

uint64_t NLTransformer.nlIntentHistory.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t outlined init with copy of AnyPhoneNLIntent?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPhoneNLIntent?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_15();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t outlined destroy of SubmitCommandError?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.actionForInput(_:resolveRecord:) in conformance CallingIntentNeedsValueFlowStrategy<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 376))();
}

void CallingIntentNeedsValueFlowStrategy.actionForInput(_:resolveRecord:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v64 = v7;
  uint64_t v65 = v6;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v62 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v58 - v10;
  uint64_t v12 = type metadata accessor for Input();
  OUTLINED_FUNCTION_0_0();
  uint64_t v14 = v13;
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_4();
  uint64_t v18 = v17 - v16;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  uint64_t v20 = __swift_project_value_buffer(v19, (uint64_t)static Logger.siriPhone);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v18, v3, v12);
  uint64_t v63 = v20;
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = OUTLINED_FUNCTION_11_7();
    uint64_t v60 = v3;
    uint64_t v24 = v23;
    uint64_t v58 = swift_slowAlloc();
    v67[0] = v58;
    *(_DWORD *)uint64_t v24 = 136315394;
    uint64_t v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000020, 0x8000000000499A50, v67);
    uint64_t v61 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 12) = 2080;
    uint64_t v59 = v1;
    _s11SiriKitFlow5InputVACs23CustomStringConvertibleAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, (void (*)(uint64_t))&type metadata accessor for Input);
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v67);
    uint64_t v1 = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v27 = OUTLINED_FUNCTION_66_8();
    v28(v27);
    _os_log_impl(&dword_0, v21, v22, "#CallingIntentNeedsValueFlowStrategy %s input: %s", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
    uint64_t v29 = OUTLINED_FUNCTION_66_8();
    v30(v29);
  }

  outlined init with copy of SignalProviding(v1 + 24, (uint64_t)v67);
  Input.parse.getter();
  unsigned __int8 v31 = ContactPromptResponseParser.parseResponse(from:)((uint64_t)v11);
  uint64_t v32 = v64;
  uint64_t v33 = v65;
  unint64_t v34 = *(void (**)(uint64_t))(v64 + 8);
  uint64_t v35 = OUTLINED_FUNCTION_63_6();
  v34(v35);
  outlined destroy of ContactPromptResponseParser((uint64_t)v67);
  if (v31 - 1 < 2)
  {
    os_log_type_t v41 = v63;
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_8_2(v43))
    {
      uint64_t v44 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_32_2(v44);
      OUTLINED_FUNCTION_10_24(&dword_0, v42, v41, "#CallingIntentNeedsValueFlowStrategy Intent cancelled");
      OUTLINED_FUNCTION_5_16();
    }

    static ActionForInput.cancel()();
  }
  else
  {
    if (v31 == 5)
    {
      os_log_type_t v36 = v63;
      uint64_t v37 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_8_2(v45))
      {
        uint64_t v46 = (_WORD *)OUTLINED_FUNCTION_7_2();
        OUTLINED_FUNCTION_32_2(v46);
        uint64_t v40 = "#CallingIntentNeedsValueFlowStrategy unknown intent, ignore this request";
        goto LABEL_16;
      }
LABEL_17:

      static ActionForInput.ignore()();
      goto LABEL_24;
    }
    if (v31 == 6)
    {
      os_log_type_t v36 = v63;
      uint64_t v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_8_2(v38))
      {
        uint64_t v39 = (_WORD *)OUTLINED_FUNCTION_7_2();
        OUTLINED_FUNCTION_32_2(v39);
        uint64_t v40 = "#CallingIntentNeedsValueFlowStrategy user updated app name or phone verb, ignore current request from current flow";
LABEL_16:
        OUTLINED_FUNCTION_10_24(&dword_0, v37, v36, v40);
        OUTLINED_FUNCTION_5_16();
        goto LABEL_17;
      }
      goto LABEL_17;
    }
    os_log_type_t v47 = v62;
    Input.parse.getter();
    int v48 = (*(uint64_t (**)(char *, uint64_t))(v32 + 88))(v47, v33);
    if (v48 == enum case for Parse.NLv3IntentOnly(_:) || v48 == enum case for Parse.directInvocation(_:)) {
      goto LABEL_20;
    }
    if (v48 == enum case for Parse.NLv4IntentOnly(_:))
    {
      (*(void (**)(char *, uint64_t))(v32 + 96))(v47, v33);
      swift_unknownObjectRelease();
      goto LABEL_21;
    }
    if (v48 == enum case for Parse.uso(_:))
    {
LABEL_20:
      ((void (*)(char *, uint64_t))v34)(v47, v33);
LABEL_21:
      os_log_type_t v49 = v63;
      uint64_t v50 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_8_2(v51))
      {
        uint64_t v52 = (_WORD *)OUTLINED_FUNCTION_7_2();
        OUTLINED_FUNCTION_32_2(v52);
        OUTLINED_FUNCTION_10_24(&dword_0, v50, v49, "#CallingIntentNeedsValueFlowStrategy actionForInput: handling..");
        OUTLINED_FUNCTION_5_16();
      }

      static ActionForInput.handle()();
      goto LABEL_24;
    }
    os_log_type_t v53 = v63;
    uint64_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_8_2(v55))
    {
      unint64_t v56 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_32_2(v56);
      OUTLINED_FUNCTION_10_24(&dword_0, v54, v53, "#CallingIntentNeedsValueFlowStrategy Received unsupported parse while determining action which is not yet supported. Skipping..");
      OUTLINED_FUNCTION_5_16();
    }

    static ActionForInput.ignore()();
    uint64_t v57 = OUTLINED_FUNCTION_63_6();
    v34(v57);
  }
LABEL_24:
  OUTLINED_FUNCTION_26_1();
}

uint64_t initializeBufferWithCopyOfBuffer for PhoneContactHeader(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t ContactPromptResponseParser.parseResponse(from:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 64))(v4, v5);
  if (result == 5)
  {
    uint64_t v7 = a1[3];
    uint64_t v8 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    uint64_t v9 = *(void *)((*(uint64_t (**)(uint64_t, uint64_t))(v8 + 24))(v7, v8) + 16);
    swift_bridgeObjectRelease();
    if (v9)
    {
      uint64_t v10 = a1[3];
      uint64_t v11 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v10);
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 24))(v10, v11);
      uint64_t v13 = *(void *)(v12 + 16);
      if (!v13)
      {
LABEL_9:
        swift_bridgeObjectRelease();
        return 1;
      }
      uint64_t v14 = v12 + 32;
      while (1)
      {
        outlined init with copy of SignalProviding(v14, (uint64_t)v35);
        uint64_t v15 = v36;
        uint64_t v16 = v37;
        __swift_project_boxed_opaque_existential_1(v35, v36);
        __int16 v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 368))(v15, v16);
        outlined init with copy of SignalProviding((uint64_t)v35, (uint64_t)&v27);
        if ((v17 & 0xFF00) == 0x200) {
          break;
        }
        uint64_t v18 = v29;
        uint64_t v19 = v30;
        __swift_project_boxed_opaque_existential_1(&v27, v29);
        uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 368))(v18, v19);
        if ((v20 & 0xFF00) == 0x200) {
          break;
        }
        int v21 = v20 & 0xFFFFFF;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v27);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
        if ((v21 & 0x10000) == 0) {
          goto LABEL_11;
        }
        v14 += 40;
        if (!--v13) {
          goto LABEL_9;
        }
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v27);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
LABEL_11:
      swift_bridgeObjectRelease();
    }
    uint64_t v22 = v2[3];
    uint64_t v23 = v2[4];
    __swift_project_boxed_opaque_existential_1(v2, v22);
    uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 72))(v22, v23);
    (*(void (**)(void *__return_ptr))(*(void *)v24 + 240))(v35);
    swift_release();
    _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0((uint64_t)v35, (uint64_t)&v27, (uint64_t *)&demangling cache variable for type metadata for TransformationResult?);
    if (v30 == 1)
    {
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)&v27, (uint64_t *)&demangling cache variable for type metadata for TransformationResult?);
      long long v31 = 0u;
      long long v32 = 0u;
      uint64_t v33 = 0;
    }
    else
    {
      _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0((uint64_t)&v28, (uint64_t)&v31, &demangling cache variable for type metadata for PhoneCallNLIntent?);
      outlined destroy of TransformationResult((uint64_t)&v27);
      if (*((void *)&v32 + 1))
      {
        outlined init with take of AppSelectionSignalComponent(&v31, (uint64_t)v34);
        __swift_project_boxed_opaque_existential_1(a1, a1[3]);
        outlined init with copy of SignalProviding((uint64_t)v34, (uint64_t)&v27);
        PhoneCallNLIntent.shouldResetRequest(previousNLIntent:)();
        char v26 = v25;
        outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)&v27, &demangling cache variable for type metadata for PhoneCallNLIntent?);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
        outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v35, (uint64_t *)&demangling cache variable for type metadata for TransformationResult?);
        if (v26) {
          return 6;
        }
        return 8;
      }
    }
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v35, (uint64_t *)&demangling cache variable for type metadata for TransformationResult?);
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)&v31, &demangling cache variable for type metadata for PhoneCallNLIntent?);
    return 8;
  }
  return result;
}

uint64_t ContactPromptResponseParser.parseResponse(from:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CommonDirectAction?);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v12 - v6;
  static CommonDirectAction.from(_:)(a1, (uint64_t *)((char *)&v12 - v6));
  uint64_t v8 = type metadata accessor for CommonDirectAction();
  if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v8) == 1) {
    goto LABEL_7;
  }
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0((uint64_t)v7, (uint64_t)v5, &demangling cache variable for type metadata for CommonDirectAction?);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 6)
  {
    uint64_t v10 = 0;
    goto LABEL_8;
  }
  if (EnumCaseMultiPayload != 7)
  {
    outlined destroy of CommonDirectAction((uint64_t)v5);
LABEL_7:
    uint64_t v10 = 8;
    goto LABEL_8;
  }
  uint64_t v10 = 1;
LABEL_8:
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v7, &demangling cache variable for type metadata for CommonDirectAction?);
  return v10;
}

{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t);
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v36;
  void (*v37)(uint64_t);
  uint64_t v38;
  void (*v39)(uint64_t);
  long long v40;
  uint64_t v41;
  uint64_t v42[5];

  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Parse.DirectInvocation();
  OUTLINED_FUNCTION_0_0();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a1, v10);
  uint64_t v16 = (*(uint64_t (**)(char *, uint64_t))(v12 + 88))(v15, v10);
  if (v16 == enum case for Parse.NLv3IntentOnly(_:))
  {
LABEL_2:
    __int16 v17 = OUTLINED_FUNCTION_2_60();
    v18(v17);
LABEL_5:
    uint64_t v22 = v2[3];
    uint64_t v23 = v2[4];
    __swift_project_boxed_opaque_existential_1(v2, v22);
    uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 72))(v22, v23);
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v24 + 192))(&v40, a1);
    swift_release();
    if (v41)
    {
      outlined init with take of AppSelectionSignalComponent(&v40, (uint64_t)v42);
      char v25 = ContactPromptResponseParser.parseResponse(from:)(v42);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
      goto LABEL_11;
    }
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)&v40, &demangling cache variable for type metadata for PhoneCallNLIntent?);
    goto LABEL_8;
  }
  if (v16 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    uint64_t v19 = OUTLINED_FUNCTION_1_54();
    v20(v19);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    swift_release();
    type metadata accessor for NLIntent();
    OUTLINED_FUNCTION_15();
    (*(void (**)(char *))(v21 + 8))(v15);
    goto LABEL_5;
  }
  if (v16 == enum case for Parse.directInvocation(_:))
  {
    char v26 = OUTLINED_FUNCTION_1_54();
    v27(v26);
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v15, v4);
    char v25 = ContactPromptResponseParser.parseResponse(from:)((uint64_t)v9);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v4);
  }
  else
  {
    if (v16 == enum case for Parse.NLv4IntentOnly(_:))
    {
      uint64_t v36 = OUTLINED_FUNCTION_1_54();
      v37(v36);
      swift_unknownObjectRelease();
      goto LABEL_5;
    }
    if (v16 == enum case for Parse.uso(_:)) {
      goto LABEL_2;
    }
    if (v16 != enum case for Parse.empty(_:))
    {
      os_log_type_t v38 = OUTLINED_FUNCTION_2_60();
      v39(v38);
LABEL_8:
      char v25 = 5;
      goto LABEL_11;
    }
    char v25 = 8;
  }
LABEL_11:
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  __swift_project_value_buffer(v28, (uint64_t)static Logger.siriPhone);
  uint64_t v29 = Logger.logObject.getter();
  uint64_t v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v29, v30))
  {
    long long v31 = swift_slowAlloc();
    v42[0] = swift_slowAlloc();
    *(_DWORD *)long long v31 = 136315394;
    *(void *)&uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000014, 0x80000000004950B0, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v31 + 12) = 2080;
    if (v25 == 8)
    {
      long long v32 = 0xE300000000000000;
      uint64_t v33 = 7104878;
    }
    else
    {
      uint64_t v33 = ContactPromptResponse.debugDescription.getter(v25);
      long long v32 = v34;
    }
    *(void *)&uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v32, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v29, v30, "#ContactPromptResponseParser %s: %s", (uint8_t *)v31, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  return v25;
}

uint64_t ContactPromptResponse.debugDescription.getter(char a1)
{
  switch(a1)
  {
    case 5:
      return 0x6E776F6E6B6E752ELL;
    case 6:
      return 0xD000000000000015;
    case 7:
      return 0x6F4374657365722ELL;
  }
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  strcpy((char *)v5, ".confirmation(");
  v3._countAndFlagsBits = PhoneCallConfirmation.rawValue.getter(a1);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return v5[0];
}

uint64_t outlined destroy of ContactPromptResponseParser(uint64_t a1)
{
  return a1;
}

uint64_t protocol witness for RCHFlowStrategyAsync.actionForInput(input:) in conformance CallingIntentRCHFlowStrategy<A, B>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))();
}

uint64_t CallingIntentRCHFlowStrategy.actionForInput(input:)()
{
  uint64_t v1 = type metadata accessor for Parse();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  Swift::String v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = v0 + 2;
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v6);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 72))(v6, v7);
  Input.parse.getter();
  (*(void (**)(long long *__return_ptr, char *))(*(void *)v8 + 192))(&v38, v4);
  swift_release();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if (v39)
  {
    outlined init with take of AppSelectionSignalComponent(&v38, (uint64_t)v43);
    if ((static ExecutionPath.choosePath(for:sharedGlobals:)(v43, v5) - 3) >= 3u)
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      uint64_t v20 = (void *)OUTLINED_FUNCTION_25_0(v19, (uint64_t)static Logger.siriPhone);
      os_log_type_t v21 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_14_2(v21))
      {
        uint64_t v22 = (_WORD *)OUTLINED_FUNCTION_7_2();
        OUTLINED_FUNCTION_28_14(v22);
        OUTLINED_FUNCTION_24_1(&dword_0, v23, v24, "#CallingIntentRCHFlowStrategy ignore current request because intent should be handled by the server");
        OUTLINED_FUNCTION_6();
      }

      static ActionForInput.ignore()();
    }
    else
    {
      uint64_t v10 = v0[5];
      uint64_t v9 = v0[6];
      __swift_project_boxed_opaque_existential_1(v5, v10);
      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 72))(v10, v9);
      (*(void (**)(long long *__return_ptr))(*(void *)v11 + 240))(&v38);
      swift_release();
      if (v40 == 1)
      {
        _s16SiriDialogEngine15SpeakableStringVSgWOhTm_1((uint64_t)&v38, (uint64_t *)&demangling cache variable for type metadata for TransformationResult?);
        memset(v41, 0, sizeof(v41));
        uint64_t v42 = 0;
      }
      else
      {
        outlined init with copy of PhoneCallNLIntent?((uint64_t)&v38 + 8, (uint64_t)v41);
        outlined destroy of TransformationResult((uint64_t)&v38);
      }
      __swift_project_boxed_opaque_existential_1(v43, v43[3]);
      PhoneCallNLIntent.shouldResetRequest(previousNLIntent:)();
      if (v25)
      {
        if (one-time initialization token for siriPhone != -1) {
          swift_once();
        }
        uint64_t v26 = type metadata accessor for Logger();
        uint64_t v27 = (void *)OUTLINED_FUNCTION_25_0(v26, (uint64_t)static Logger.siriPhone);
        os_log_type_t v28 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_14_2(v28))
        {
          uint64_t v29 = (_WORD *)OUTLINED_FUNCTION_7_2();
          OUTLINED_FUNCTION_28_14(v29);
          OUTLINED_FUNCTION_24_1(&dword_0, v30, v31, "#CallingIntentRCHFlowStrategy ignore current request because shouldResetRequest from nlIntent is true");
          OUTLINED_FUNCTION_6();
        }

        static ActionForInput.ignore()();
      }
      else
      {
        if (one-time initialization token for siriPhone != -1) {
          swift_once();
        }
        uint64_t v32 = type metadata accessor for Logger();
        uint64_t v33 = (void *)OUTLINED_FUNCTION_25_0(v32, (uint64_t)static Logger.siriPhone);
        os_log_type_t v34 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_14_2(v34))
        {
          uint64_t v35 = (_WORD *)OUTLINED_FUNCTION_7_2();
          OUTLINED_FUNCTION_28_14(v35);
          OUTLINED_FUNCTION_24_1(&dword_0, v36, v37, "#CallingIntentRCHFlowStrategy Received a recognized Input");
          OUTLINED_FUNCTION_6();
        }

        static ActionForInput.handle()();
      }
      _s16SiriDialogEngine15SpeakableStringVSgWOhTm_1((uint64_t)v41, &demangling cache variable for type metadata for PhoneCallNLIntent?);
    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
  }
  else
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_1((uint64_t)&v38, &demangling cache variable for type metadata for PhoneCallNLIntent?);
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    uint64_t v13 = (void *)OUTLINED_FUNCTION_25_0(v12, (uint64_t)static Logger.siriPhone);
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_14_2(v14))
    {
      uint64_t v15 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_28_14(v15);
      OUTLINED_FUNCTION_24_1(&dword_0, v16, v17, "#CallingIntentRCHFlowStrategy Input not a recognized PhoneCallNLIntent.");
      OUTLINED_FUNCTION_6();
    }

    return static ActionForInput.ignore()();
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance UsoTask()
{
  return UsoTask.description.getter();
}

uint64_t UsoTask.description.getter()
{
  _StringGuts.grow(_:)(53);
  v0._countAndFlagsBits = 0xD00000000000001BLL;
  v0._object = (void *)0x8000000000495B50;
  String.append(_:)(v0);
  v1._countAndFlagsBits = UsoTask.verbString.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._object = (void *)0x8000000000495B70;
  v2._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v2);
  v3._countAndFlagsBits = UsoTask.baseEntityAsString.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 32010;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  return 0;
}

unsigned char *static Transformer<>.getPhoneCallControlNLIntent(for:)()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.siriPhone);
  swift_retain_n();
  Swift::String v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  Swift::String v3 = &unk_469000;
  Swift::String v4 = &unk_583000;
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v5 = swift_slowAlloc();
    *(void *)&long long v70 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315394;
    if (one-time initialization token for logPrefix != -1) {
      swift_once();
    }
    uint64_t v6 = static Transformer<>.logPrefix;
    uint64_t v7 = unk_5D4930;
    uint64_t v8 = qword_5D4938;
    uint64_t v9 = unk_5D4940;
    *(void *)&v72[0] = 0;
    *((void *)&v72[0] + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v6, v7, v8, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)&v72[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, (uint64_t *)&v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    swift_retain();
    uint64_t v10 = UsoTask.description.getter();
    unint64_t v12 = v11;
    swift_release();
    *(void *)&v72[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, (uint64_t *)&v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v1, v2, "%s attempting to get call control action for %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    Swift::String v4 = (void *)&unk_583000;
    Swift::String v3 = (void *)&unk_469000;
  }
  else
  {

    swift_release_n();
  }
  static UsoTask_CodegenConverter.convert(task:)();
  if (!v71)
  {
    outlined destroy of Any?((uint64_t)&v70);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v70 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136315138;
      if (v4[469] != -1) {
        swift_once();
      }
      uint64_t v20 = static Transformer<>.logPrefix;
      uint64_t v21 = unk_5D4930;
      uint64_t v22 = qword_5D4938;
      uint64_t v23 = unk_5D4940;
      *(void *)&v72[0] = 0;
      *((void *)&v72[0] + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v20, v21, v22, v23);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)&v72[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(*(uint64_t *)&v72[0], *((unint64_t *)&v72[0] + 1), (uint64_t *)&v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v17, v18, "%s could not convert task.", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return 0;
  }
  outlined init with take of Any(&v70, v72);
  if (UsoTask.isSwitchToFaceTimeOrVideoCallTask.getter())
  {
    if (UsoTask.hasFaceTimeAudioSemantics.getter()) {
      char v13 = 4;
    }
    else {
      char v13 = 3;
    }
    PhoneCallControlNLIntent.Verb.rawValue.getter(v13);
    if (v15 == 0xD000000000000015 && v14 == 0x8000000000490E70)
    {
      swift_bridgeObjectRelease();
      char v16 = 9;
    }
    else
    {
      char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v34) {
        char v16 = 9;
      }
      else {
        char v16 = 8;
      }
    }
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v35, v36))
    {
      char v67 = v16;
      char v68 = v13;
      uint64_t v37 = swift_slowAlloc();
      uint64_t v69 = swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = v3[288];
      if (v4[469] != -1) {
        swift_once();
      }
      uint64_t v38 = static Transformer<>.logPrefix;
      uint64_t v39 = unk_5D4930;
      uint64_t v41 = qword_5D4938;
      uint64_t v40 = unk_5D4940;
      *(void *)&long long v70 = 0;
      *((void *)&v70 + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v38, v39, v41, v40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)&long long v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, *((unint64_t *)&v70 + 1), &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v37 + 12) = 2080;
      unint64_t v42 = PhoneCallControlAction.description.getter(v67);
      *(void *)&long long v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v35, v36, "%s getPhoneCallControlAction parsed task to PhoneCallControlAction.%s", (uint8_t *)v37, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
      char v13 = v68;
    }
    else
    {

      __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
    }
    type metadata accessor for PhoneCallControlNLIntent();
    swift_allocObject();
    char v32 = v13;
    char v33 = 5;
    return PhoneCallControlNLIntent.init(verb:target:)(v32, v33);
  }
  if (UsoTask.isSwitchToSpeakerphoneTask.getter())
  {
    char v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v69 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = v3[288];
      if (v4[469] != -1) {
        swift_once();
      }
      uint64_t v28 = static Transformer<>.logPrefix;
      uint64_t v29 = unk_5D4930;
      uint64_t v30 = qword_5D4938;
      uint64_t v31 = unk_5D4940;
      *(void *)&long long v70 = 0;
      *((void *)&v70 + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v28, v29, v30, v31);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)&long long v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, *((unint64_t *)&v70 + 1), &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 12) = 2080;
      *(void *)&long long v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000012, 0x8000000000490E90, &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_0, v25, v26, "%s getPhoneCallControlAction parsed task to PhoneCallControlAction.%s", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
    type metadata accessor for PhoneCallControlNLIntent();
    swift_allocObject();
    char v32 = 0;
    char v33 = 3;
    return PhoneCallControlNLIntent.init(verb:target:)(v32, v33);
  }
  uint64_t v44 = UsoTask.settingsUsoIdentifiers.getter();
  v45.namespaceToIdentifierMap._rawValue = CallControlUsoIdentifiers.init(usoIdentifiers:)((Swift::OpaquePointer)v44).namespaceToIdentifierMap._rawValue;
  __int16 v46 = static Transformer<>.mapIdentifiersToTarget(usoIdentifiers:)((uint64_t)v45.namespaceToIdentifierMap._rawValue);
  swift_bridgeObjectRelease();
  char v47 = static Transformer<>.mapTaskToVerb(usoTask:isTargetWithNegation:)((uint64_t)v72, HIBYTE(v46) & 1);
  if (v47 == 7)
  {
    int v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = (uint8_t *)swift_slowAlloc();
      uint64_t v69 = swift_slowAlloc();
      *(_DWORD *)uint64_t v50 = 136315138;
      if (v4[469] != -1) {
        swift_once();
      }
      uint64_t v51 = static Transformer<>.logPrefix;
      uint64_t v52 = unk_5D4930;
      uint64_t v53 = qword_5D4938;
      uint64_t v54 = unk_5D4940;
      *(void *)&long long v70 = 0;
      *((void *)&v70 + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v51, v52, v53, v54);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)&long long v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, *((unint64_t *)&v70 + 1), &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v48, v49, "%s could not determine a verb for call control.", v50, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
    return 0;
  }
  char v56 = v47;
  type metadata accessor for PhoneCallControlNLIntent();
  swift_allocObject();
  uint64_t v24 = PhoneCallControlNLIntent.init(verb:target:)(v56, v46);
  swift_retain_n();
  uint64_t v57 = Logger.logObject.getter();
  os_log_type_t v58 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v57, v58))
  {
    uint64_t v59 = swift_slowAlloc();
    uint64_t v69 = swift_slowAlloc();
    *(_DWORD *)uint64_t v59 = v3[288];
    if (v4[469] != -1) {
      swift_once();
    }
    uint64_t v60 = static Transformer<>.logPrefix;
    uint64_t v61 = unk_5D4930;
    *(void *)&long long v70 = 0;
    *((void *)&v70 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v60, v61, 0xD000000000000021, 0x80000000004947D0);
    swift_bridgeObjectRelease();
    *(void *)&long long v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, *((unint64_t *)&v70 + 1), &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v59 + 12) = 2080;
    uint64_t v62 = *(uint64_t (**)(uint64_t))(*(void *)v24 + 144);
    uint64_t v63 = swift_retain();
    uint64_t v64 = v62(v63);
    unint64_t v66 = v65;
    swift_release();
    *(void *)&long long v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v66, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v57, v58, "%s intent = %s)", (uint8_t *)v59, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
  return v24;
}

uint64_t UsoTask.settingsUsoIdentifiers.getter()
{
  static UsoTask_CodegenConverter.convert(task:)();
  if (v45[3])
  {
    outlined init with copy of Any?((uint64_t)v45, (uint64_t)v44);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Uso_VerbTemplate_ReferenceTrigger<UsoEntity_common_Setting>);
    if (swift_dynamicCast())
    {
      dispatch thunk of Uso_VerbTemplate_ReferenceTrigger.reference.getter();
      uint64_t v0 = v43;
      uint64_t v1 = dispatch thunk of Uso_VerbTemplate_ReferenceTrigger.userEntities.getter();
      if (v1) {
        unint64_t v2 = v1;
      }
      else {
        unint64_t v2 = (unint64_t)&_swiftEmptyArrayStorage;
      }
      if (v2 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
        if (!v3) {
          goto LABEL_65;
        }
        goto LABEL_8;
      }
      uint64_t v3 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFFF8));
      swift_bridgeObjectRetain();
      if (v3)
      {
LABEL_8:
        if (v3 >= 1)
        {
          for (uint64_t i = 0; i != v3; ++i)
          {
            if ((v2 & 0xC000000000000001) != 0) {
              specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              swift_retain();
            }
            dispatch thunk of CodeGenListEntry.entry.getter();
            swift_release();
            if (v42)
            {
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              if (*(void *)((char *)&dword_10 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              }
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
            }
          }
          goto LABEL_65;
        }
        __break(1u);
LABEL_61:
        swift_bridgeObjectRetain();
        uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
        if (!v7) {
          goto LABEL_65;
        }
        goto LABEL_26;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Uso_VerbTemplate_ReferenceNumberTrigger<UsoEntity_common_Setting>);
      if (swift_dynamicCast())
      {
        dispatch thunk of Uso_VerbTemplate_ReferenceNumberTrigger.reference.getter();
        uint64_t v0 = v43;
        uint64_t v6 = dispatch thunk of Uso_VerbTemplate_ReferenceNumberTrigger.userEntities.getter();
        if (v6) {
          unint64_t v2 = v6;
        }
        else {
          unint64_t v2 = (unint64_t)&_swiftEmptyArrayStorage;
        }
        if (v2 >> 62) {
          goto LABEL_61;
        }
        uint64_t v7 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFFF8));
        swift_bridgeObjectRetain();
        if (v7)
        {
LABEL_26:
          if (v7 >= 1)
          {
            for (uint64_t j = 0; j != v7; ++j)
            {
              if ((v2 & 0xC000000000000001) != 0) {
                specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else {
                swift_retain();
              }
              dispatch thunk of CodeGenListEntry.entry.getter();
              swift_release();
              if (v42)
              {
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                if (*(void *)((char *)&dword_10 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >> 1) {
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                }
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
              }
            }
            goto LABEL_65;
          }
          __break(1u);
LABEL_64:
          swift_bridgeObjectRetain();
          uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
          if (!v10) {
            goto LABEL_65;
          }
LABEL_43:
          if (v10 < 1)
          {
            __break(1u);
LABEL_107:
            uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
            __break(1u);
            return result;
          }
          for (uint64_t k = 0; k != v10; ++k)
          {
            if ((v2 & 0xC000000000000001) != 0) {
              specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              swift_retain();
            }
            dispatch thunk of CodeGenListEntry.entry.getter();
            swift_release();
            if (v42)
            {
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              if (*(void *)((char *)&dword_10 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              }
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
            }
          }
        }
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Uso_VerbTemplate_Reference<UsoEntity_common_Setting>);
        if (!swift_dynamicCast())
        {
          type metadata accessor for UsoTask_noVerb_common_Setting();
          if (swift_dynamicCast())
          {
            swift_retain();
            dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
            swift_release();
            uint64_t v0 = v43;
            swift_release();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
          }
          else
          {
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
            uint64_t v0 = 0;
          }
          uint64_t v5 = (uint64_t)&_swiftEmptyArrayStorage;
          goto LABEL_66;
        }
        dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
        uint64_t v0 = v43;
        uint64_t v9 = dispatch thunk of Uso_VerbTemplate_Reference.userEntities.getter();
        if (v9) {
          unint64_t v2 = v9;
        }
        else {
          unint64_t v2 = (unint64_t)&_swiftEmptyArrayStorage;
        }
        if (v2 >> 62) {
          goto LABEL_64;
        }
        uint64_t v10 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFFF8));
        swift_bridgeObjectRetain();
        if (v10) {
          goto LABEL_43;
        }
      }
    }
LABEL_65:
    swift_bridgeObjectRelease();
    uint64_t v5 = (uint64_t)&_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
    goto LABEL_66;
  }
  uint64_t v0 = 0;
  uint64_t v5 = (uint64_t)&_swiftEmptyArrayStorage;
LABEL_66:
  outlined destroy of Any?((uint64_t)v45);
  v45[0] = &_swiftEmptyArrayStorage;
  if (v0)
  {
    swift_retain();
    unint64_t v12 = UsoEntity_common_Setting.nameIdentifiers.getter();
    swift_release();
    specialized Array.append<A>(contentsOf:)((uint64_t)v12);
    swift_retain();
    uint64_t v13 = dispatch thunk of UsoEntity_common_Setting.associatedSetting.getter();
    swift_release();
    if (v13)
    {
      uint64_t v14 = UsoEntity_common_Setting.nameIdentifiers.getter();
      swift_release();
    }
    else
    {
      uint64_t v14 = &_swiftEmptyArrayStorage;
    }
  }
  else
  {
    uint64_t v14 = &_swiftEmptyArrayStorage;
    specialized Array.append<A>(contentsOf:)((uint64_t)&_swiftEmptyArrayStorage);
  }
  specialized Array.append<A>(contentsOf:)((uint64_t)v14);
  if ((unint64_t)&_swiftEmptyArrayStorage >> 62) {
    goto LABEL_103;
  }
  uint64_t v15 = *(void *)((char *)&dword_10 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  for (; v15; uint64_t v15 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v41 = v5 & 0xC000000000000001;
    uint64_t v16 = v45[0];
    uint64_t v17 = 4;
    while (1)
    {
      if (v41) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      uint64_t v18 = v17 - 3;
      if (__OFADD__(v17 - 4, 1)) {
        break;
      }
      uint64_t v19 = v5;
      uint64_t v20 = UsoEntity_common_UserEntity.nameIdentifiers.getter();
      uint64_t v21 = v20[2];
      uint64_t v22 = *(void *)(v16 + 16);
      uint64_t v5 = v22 + v21;
      if (__OFADD__(v22, v21)) {
        goto LABEL_99;
      }
      uint64_t v23 = v20;
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (!isUniquelyReferenced_nonNull_native || (uint64_t v25 = *(void *)(v16 + 24) >> 1, v25 < v5))
      {
        if (v22 <= v5) {
          uint64_t v26 = v22 + v21;
        }
        else {
          uint64_t v26 = v22;
        }
        uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v26, 1, v16);
        uint64_t v25 = *(void *)(v16 + 24) >> 1;
      }
      if (v23[2])
      {
        uint64_t v27 = *(void *)(v16 + 16);
        uint64_t v5 = v25 - v27;
        uint64_t v28 = *(void *)(type metadata accessor for UsoIdentifier() - 8);
        uint64_t v29 = *(void *)(v28 + 72);
        if (v5 < v21) {
          goto LABEL_101;
        }
        unint64_t v30 = (*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
        unint64_t v31 = v16 + v30 + v29 * v27;
        char v32 = (char *)v23 + v30;
        uint64_t v33 = v29 * v21;
        unint64_t v34 = v31 + v33;
        unint64_t v35 = (unint64_t)&v32[v33];
        if ((unint64_t)v32 < v34 && v31 < v35) {
          goto LABEL_107;
        }
        swift_arrayInitWithCopy();
        if (v21)
        {
          uint64_t v37 = *(void *)(v16 + 16);
          BOOL v38 = __OFADD__(v37, v21);
          uint64_t v39 = v37 + v21;
          if (v38) {
            goto LABEL_102;
          }
          *(void *)(v16 + 16) = v39;
        }
      }
      else if (v21)
      {
        goto LABEL_100;
      }
      swift_bridgeObjectRelease();
      swift_release();
      ++v17;
      uint64_t v5 = v19;
      if (v18 == v15)
      {
        swift_bridgeObjectRelease();
        v45[0] = v16;
        goto LABEL_105;
      }
    }
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
LABEL_103:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
LABEL_105:
  swift_bridgeObjectRelease();
  swift_release();
  return v45[0];
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_45()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_47()
{
  return swift_slowAlloc();
}

BOOL OUTLINED_FUNCTION_18(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_79(float a1)
{
  float *v1 = a1;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_79_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_79_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_79_3()
{
  return 1953718636;
}

void OUTLINED_FUNCTION_49_0(uint64_t a1@<X8>)
{
  *(void *)(v1 + 88) = (a1 - 32) | 0x8000000000000000;
}

uint64_t OUTLINED_FUNCTION_79_4(uint64_t result)
{
  v2[6] = v1;
  v2[9] = result;
  v2[10] = 0x656D614E707061;
  v2[11] = 0xE700000000000000;
  return result;
}

void OUTLINED_FUNCTION_8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0x16u);
}

uint64_t OUTLINED_FUNCTION_25(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_79_6()
{
  return static CATOption.defaultMode.getter();
}

void OUTLINED_FUNCTION_79_7()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_79_8()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_79_9(uint64_t result)
{
  *(void *)(v1 - 120) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_79_10(uint64_t result)
{
  *(void *)(v1 + 144) = result;
  return result;
}

unint64_t OUTLINED_FUNCTION_66(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

uint64_t OUTLINED_FUNCTION_93()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_4_0()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_66_2()
{
  return 0x7072656B61657073;
}

uint64_t OUTLINED_FUNCTION_66_3(uint64_t a1, uint64_t a2)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

__n128 *OUTLINED_FUNCTION_66_4(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x6954656361467369;
  result[2].n128_u64[1] = 0xEA0000000000656DLL;
  return result;
}

unint64_t OUTLINED_FUNCTION_21(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

uint64_t OUTLINED_FUNCTION_66_6(uint64_t result)
{
  *(void *)(v2 + 48) = v1;
  *(void *)(v2 + 72) = result;
  strcpy((char *)(v2 + 80), "hintIdentifier");
  *(unsigned char *)(v2 + 95) = -18;
  return result;
}

void OUTLINED_FUNCTION_3(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_66_8()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_16()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_66_9(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  return outlined init with copy of SignalProviding(a1, (uint64_t)va);
}

void OUTLINED_FUNCTION_66_10()
{
}

uint64_t OUTLINED_FUNCTION_66_11()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_66_12()
{
  return static SiriKitLifecycle._logCrashToEventBus(_:)();
}

void *UsoEntity_common_UserEntity.nameIdentifiers.getter()
{
  uint64_t result = (void *)dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
  if (!result) {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

PhoneCallFlowDelegatePlugin::CallControlUsoIdentifiers __swiftcall CallControlUsoIdentifiers.init(usoIdentifiers:)(Swift::OpaquePointer usoIdentifiers)
{
  rawValue = usoIdentifiers._rawValue;
  uint64_t v81 = type metadata accessor for UsoIdentifier();
  OUTLINED_FUNCTION_0_0();
  uint64_t v64 = v1;
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_5_8();
  uint64_t v77 = v3;
  __chkstk_darwin(v4);
  uint64_t v80 = (char *)&v62 - v5;
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
  uint64_t v85 = Dictionary.init(dictionaryLiteral:)();
  if (one-time initialization token for identifierTypeRegistry != -1) {
LABEL_43:
  }
    swift_once();
  os_log_type_t v6 = static CallControlUsoIdentifiers.identifierTypeRegistry;
  uint64_t v67 = *(void *)((char *)&dword_10 + (void)static CallControlUsoIdentifiers.identifierTypeRegistry);
  if (v67)
  {
    uint64_t v7 = rawValue[2];
    unint64_t v66 = static CallControlUsoIdentifiers.identifierTypeRegistry + 8;
    uint64_t v75 = (void (**)(char *, uint64_t))(v64 + 8);
    uint64_t v76 = v64 + 16;
    swift_bridgeObjectRetain();
    unint64_t v8 = 0;
    uint64_t v71 = 0;
    uint64_t v65 = v7;
    uint64_t v63 = v6;
    uint64_t v9 = v77;
    while (1)
    {
      if (v8 >= *((void *)v6 + 2))
      {
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
      unint64_t v69 = v8;
      uint64_t v10 = *(void *)&v66[4 * v8 + 2];
      unint64_t v11 = *(uint64_t (**)(void))(v10 + 8);
      long long v74 = *(_OWORD *)&v66[4 * v8];
      uint64_t v12 = v74;
      uint64_t v79 = v10;
      uint64_t v72 = v11(v74);
      uint64_t v70 = v13;
      if (v7)
      {
        uint64_t v14 = (char *)rawValue
            + ((*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80));
        uint64_t v78 = *(void *)(v64 + 72);
        uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v64 + 16);
        uint64_t v73 = v12 - 8;
        swift_bridgeObjectRetain();
        uint64_t v16 = _swiftEmptyArrayStorage;
        do
        {
          uint64_t v18 = v80;
          uint64_t v17 = v81;
          v15(v80, v14, v81);
          v15((char *)v9, v18, v17);
          uint64_t v19 = type metadata accessor for Optional();
          OUTLINED_FUNCTION_0_0();
          uint64_t v21 = v20;
          __chkstk_darwin(v22);
          uint64_t v24 = (char *)&v62 - v23;
          UsoVocIdentifier.init(usoIdentifier:)(v9, v12, v79, (uint64_t)&v62 - v23);
          if (__swift_getEnumTagSinglePayload((uint64_t)v24, 1, v12) == 1)
          {
            (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v19);
            memset(v83, 0, sizeof(v83));
          }
          else
          {
            *(_OWORD *)&v83[24] = v74;
            boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v83);
            (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(boxed_opaque_existential_1, v24, v12);
          }
          (*v75)(v80, v81);
          if (*(void *)&v83[24])
          {
            outlined init with take of AppSelectionSignalComponent((long long *)v83, (uint64_t)&v84);
            outlined init with take of AppSelectionSignalComponent(&v84, (uint64_t)v83);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, (uint64_t)v16);
              uint64_t v16 = v28;
            }
            unint64_t v27 = v16[2];
            unint64_t v26 = v16[3];
            if (v27 >= v26 >> 1)
            {
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1, (uint64_t)v16);
              uint64_t v16 = v29;
            }
            v16[2] = v27 + 1;
            outlined init with take of AppSelectionSignalComponent((long long *)v83, (uint64_t)&v16[5 * v27 + 4]);
          }
          else
          {
            outlined destroy of SubmitCommandError?((uint64_t)v83, &demangling cache variable for type metadata for UsoVocIdentifier?);
          }
          v14 += v78;
          --v7;
        }
        while (v7);
        swift_bridgeObjectRelease();
        os_log_type_t v6 = v63;
      }
      else
      {
        uint64_t v16 = _swiftEmptyArrayStorage;
      }
      uint64_t v30 = v71;
      unint64_t v31 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay27PhoneCallFlowDelegatePlugin16UsoVocIdentifier_pG_SSs5NeverOTg504_s27defg17Plugin0B21Controli42IdentifiersV03usoH0ACSay12SiriOntology0G10k14VG_tcfcSSAA0g3J61L0_pcfu0_33_708b1cfa6b73d3a2bcd73f98c7ddf494AaI_pSSTf3nnnpk_nTf1cn_n((uint64_t)v16);
      uint64_t v71 = v30;
      swift_bridgeObjectRelease();
      uint64_t v32 = Set.init(minimumCapacity:)();
      *(void *)uint64_t v83 = v32;
      uint64_t v33 = v31[2];
      if (v33)
      {
        unint64_t v34 = v31 + 5;
        do
        {
          swift_bridgeObjectRetain();
          specialized Set._Variant.insert(_:)();
          swift_bridgeObjectRelease();
          v34 += 2;
          --v33;
        }
        while (v33);
        swift_bridgeObjectRelease();
        uint64_t v35 = *(void *)v83;
      }
      else
      {
        uint64_t v35 = v32;
        swift_bridgeObjectRelease();
      }
      uint64_t v36 = v85;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v84 = v36;
      uint64_t v85 = 0x8000000000000000;
      uint64_t v38 = v70;
      unint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(v72, v70);
      uint64_t v41 = *(void *)(v36 + 16);
      BOOL v42 = (v40 & 1) == 0;
      Swift::Int v43 = v41 + v42;
      if (__OFADD__(v41, v42)) {
        goto LABEL_41;
      }
      unint64_t v44 = v39;
      char v45 = v40;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Set<String>>);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v43))
      {
        unint64_t v46 = specialized __RawDictionaryStorage.find<A>(_:)(v72, v38);
        if ((v45 & 1) != (v47 & 1))
        {
          result.namespaceToIdentifierMap._rawValue = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return result;
        }
        unint64_t v44 = v46;
      }
      int v48 = (void *)v84;
      if (v45)
      {
        uint64_t v49 = *(void *)(v84 + 56);
        swift_bridgeObjectRelease();
        *(void *)(v49 + 8 * v44) = v35;
      }
      else
      {
        *(void *)(v84 + 8 * (v44 >> 6) + 64) |= 1 << v44;
        uint64_t v50 = (void *)(v48[6] + 16 * v44);
        *uint64_t v50 = v72;
        v50[1] = v38;
        *(void *)(v48[7] + 8 * v44) = v35;
        uint64_t v51 = v48[2];
        BOOL v52 = __OFADD__(v51, 1);
        uint64_t v53 = v51 + 1;
        if (v52) {
          goto LABEL_42;
        }
        v48[2] = v53;
        swift_bridgeObjectRetain();
      }
      unint64_t v8 = v69 + 1;
      uint64_t v85 = (uint64_t)v48;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v7 = v65;
      if (v8 == v67)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v54 = type metadata accessor for Logger();
  __swift_project_value_buffer(v54, (uint64_t)static Logger.siriPhone);
  os_log_type_t v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v55, v56))
  {
    uint64_t v57 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v84 = swift_slowAlloc();
    *(_DWORD *)uint64_t v57 = 136315138;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v58 = Dictionary.description.getter();
    unint64_t v60 = v59;
    swift_bridgeObjectRelease();
    uint64_t v82 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v60, (uint64_t *)&v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v55, v56, "#CallControlUsoIdentifiers %s", v57, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_beginAccess();
  return (PhoneCallFlowDelegatePlugin::CallControlUsoIdentifiers)v85;
}

uint64_t static CallControlUsoIdentifiers.PhoneSetting.namespace.getter()
{
  return 0x746553656E6F6870;
}

unint64_t static CallControlUsoIdentifiers.FloatSettingName.namespace.getter()
{
  return 0xD000000000000010;
}

uint64_t static Transformer<>.mapIdentifiersToTarget(usoIdentifiers:)(uint64_t a1)
{
  if ((CallControlUsoIdentifiers.hasAnyVolumeIdentifier.getter() & 1) == 0)
  {
    if (CallControlUsoIdentifiers.hasMuteCallIdentifier.getter(a1))
    {
      int v2 = 256;
LABEL_7:
      int v3 = 2;
      return v2 | v3;
    }
    if (CallControlUsoIdentifiers.hasUnmuteCallIdentifier.getter(a1))
    {
      int v2 = 0;
      goto LABEL_7;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UsoVocIdentifier>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_467710;
    *(void *)(inited + 56) = &type metadata for CallControlUsoIdentifiers.BoolSettingName;
    *(void *)(inited + 64) = &protocol witness table for CallControlUsoIdentifiers.BoolSettingName;
    __swift_project_boxed_opaque_existential_1((void *)(inited + 32), (uint64_t)&type metadata for CallControlUsoIdentifiers.BoolSettingName);
    uint64_t DynamicType = swift_getDynamicType();
    uint64_t v6 = *(void *)(inited + 64);
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    swift_bridgeObjectRetain();
    uint64_t v8 = v7(DynamicType, v6);
    if (*(void *)(a1 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9), (v11 & 1) != 0))
    {
      uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8 * v10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v13 = *(void *)(inited + 56);
      uint64_t v14 = *(void *)(inited + 64);
      __swift_project_boxed_opaque_existential_1((void *)(inited + 32), v13);
      uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 16))(v13, v14);
      specialized Set.contains(_:)(v15, v16, v12);
      char v18 = v17;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v18)
      {
        int v3 = 2;
LABEL_29:
        swift_setDeallocating();
        specialized _ContiguousArrayStorage.__deallocating_deinit();
        int v2 = 0;
        return v2 | v3;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_setDeallocating();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    uint64_t v19 = swift_initStackObject();
    *(_OWORD *)(v19 + 16) = xmmword_467710;
    *(unsigned char *)(v19 + 32) = 8;
    *(void *)(v19 + 56) = &type metadata for CallControlUsoIdentifiers.PhoneSetting;
    *(void *)(v19 + 64) = &protocol witness table for CallControlUsoIdentifiers.PhoneSetting;
    __swift_project_boxed_opaque_existential_1((void *)(v19 + 32), (uint64_t)&type metadata for CallControlUsoIdentifiers.PhoneSetting);
    uint64_t v20 = swift_getDynamicType();
    uint64_t v21 = *(void *)(v19 + 64);
    uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t))(v21 + 8);
    swift_bridgeObjectRetain();
    uint64_t v23 = v22(v20, v21);
    if (*(void *)(a1 + 16) && (unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v24), (v26 & 1) != 0))
    {
      uint64_t v27 = *(void *)(*(void *)(a1 + 56) + 8 * v25);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v28 = *(void *)(v19 + 56);
      uint64_t v29 = *(void *)(v19 + 64);
      __swift_project_boxed_opaque_existential_1((void *)(v19 + 32), v28);
      uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 16))(v28, v29);
      specialized Set.contains(_:)(v30, v31, v27);
      char v33 = v32;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v33)
      {
        int v3 = 3;
        goto LABEL_29;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_setDeallocating();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    uint64_t v34 = swift_initStackObject();
    *(_OWORD *)(v34 + 16) = xmmword_467710;
    *(unsigned char *)(v34 + 32) = 0;
    *(void *)(v34 + 56) = &type metadata for CallControlUsoIdentifiers.PhoneSetting;
    *(void *)(v34 + 64) = &protocol witness table for CallControlUsoIdentifiers.PhoneSetting;
    __swift_project_boxed_opaque_existential_1((void *)(v34 + 32), (uint64_t)&type metadata for CallControlUsoIdentifiers.PhoneSetting);
    uint64_t v35 = swift_getDynamicType();
    uint64_t v36 = *(void *)(v34 + 64);
    uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t))(v36 + 8);
    swift_bridgeObjectRetain();
    uint64_t v38 = v37(v35, v36);
    if (*(void *)(a1 + 16) && (unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(v38, v39), (v41 & 1) != 0))
    {
      uint64_t v42 = *(void *)(*(void *)(a1 + 56) + 8 * v40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v43 = *(void *)(v34 + 56);
      uint64_t v44 = *(void *)(v34 + 64);
      __swift_project_boxed_opaque_existential_1((void *)(v34 + 32), v43);
      uint64_t v45 = (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 16))(v43, v44);
      specialized Set.contains(_:)(v45, v46, v42);
      char v48 = v47;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v48)
      {
        int v3 = 0;
        goto LABEL_29;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_setDeallocating();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    uint64_t v49 = swift_initStackObject();
    *(_OWORD *)(v49 + 16) = xmmword_467710;
    *(unsigned char *)(v49 + 32) = 5;
    *(void *)(v49 + 56) = &type metadata for CallControlUsoIdentifiers.PhoneSetting;
    *(void *)(v49 + 64) = &protocol witness table for CallControlUsoIdentifiers.PhoneSetting;
    __swift_project_boxed_opaque_existential_1((void *)(v49 + 32), (uint64_t)&type metadata for CallControlUsoIdentifiers.PhoneSetting);
    uint64_t v50 = swift_getDynamicType();
    uint64_t v51 = *(void *)(v49 + 64);
    BOOL v52 = *(uint64_t (**)(uint64_t, uint64_t))(v51 + 8);
    swift_bridgeObjectRetain();
    uint64_t v53 = v52(v50, v51);
    if (*(void *)(a1 + 16) && (unint64_t v55 = specialized __RawDictionaryStorage.find<A>(_:)(v53, v54), (v56 & 1) != 0))
    {
      uint64_t v57 = *(void *)(*(void *)(a1 + 56) + 8 * v55);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v58 = *(void *)(v49 + 56);
      uint64_t v59 = *(void *)(v49 + 64);
      __swift_project_boxed_opaque_existential_1((void *)(v49 + 32), v58);
      uint64_t v60 = (*(uint64_t (**)(uint64_t, uint64_t))(v59 + 16))(v58, v59);
      specialized Set.contains(_:)(v60, v61, v57);
      char v63 = v62;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v63)
      {
        int v3 = 1;
        goto LABEL_29;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    int v3 = 5;
    goto LABEL_29;
  }
  int v2 = 0;
  int v3 = 4;
  return v2 | v3;
}

uint64_t CallControlUsoIdentifiers.hasAnyVolumeIdentifier.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UsoVocIdentifier>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_46DE40;
  *(void *)(inited + 56) = &type metadata for CallControlUsoIdentifiers.PhoneSetting;
  *(void *)(inited + 64) = &protocol witness table for CallControlUsoIdentifiers.PhoneSetting;
  *(unsigned char *)(inited + 32) = 1;
  *(void *)(inited + 96) = &type metadata for CallControlUsoIdentifiers.PhoneSetting;
  *(void *)(inited + 104) = &protocol witness table for CallControlUsoIdentifiers.PhoneSetting;
  *(unsigned char *)(inited + 72) = 4;
  *(void *)(inited + 136) = &type metadata for CallControlUsoIdentifiers.FloatSettingName;
  *(void *)(inited + 144) = &protocol witness table for CallControlUsoIdentifiers.FloatSettingName;
  *(unsigned char *)(inited + 112) = 0;
  *(void *)(inited + 176) = &type metadata for CallControlUsoIdentifiers.FloatSettingName;
  *(void *)(inited + 184) = &protocol witness table for CallControlUsoIdentifiers.FloatSettingName;
  *(unsigned char *)(inited + 152) = 1;
  *(void *)(inited + 216) = &type metadata for CallControlUsoIdentifiers.FloatSettingName;
  *(void *)(inited + 224) = &protocol witness table for CallControlUsoIdentifiers.FloatSettingName;
  *(unsigned char *)(inited + 192) = 2;
  swift_bridgeObjectRetain();
  for (uint64_t i = 0; i != 200; i += 40)
  {
    OUTLINED_FUNCTION_2_104();
    OUTLINED_FUNCTION_9_67();
    v2();
    OUTLINED_FUNCTION_13_46();
    if (v4 && (OUTLINED_FUNCTION_12_51(v3), (v5 & 1) != 0))
    {
      OUTLINED_FUNCTION_5_66();
      swift_bridgeObjectRelease();
      __swift_project_boxed_opaque_existential_1((void *)(inited + i + 32), *(void *)(inited + i + 56));
      uint64_t v6 = OUTLINED_FUNCTION_4_85();
      uint64_t v8 = v7(v6);
      OUTLINED_FUNCTION_16_49(v8, v9);
      char v11 = v10;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v11)
      {
        uint64_t v12 = 1;
        goto LABEL_9;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v12 = 0;
LABEL_9:
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  return v12;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *PhoneCallFlowDelegatePlugin::CallControlUsoIdentifiers result = *a2;
  return result;
}

uint64_t protocol witness for UsoVocIdentifier.rawValue.getter in conformance CallControlUsoIdentifiers.PhoneSetting()
{
  return CallControlUsoIdentifiers.PhoneSetting.rawValue.getter(*v0);
}

uint64_t CallControlUsoIdentifiers.PhoneSetting.rawValue.getter(char a1)
{
  uint64_t result = 0x6172656D6163;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6C6F765F6C6C6163;
      break;
    case 2:
    case 3:
    case 4:
      uint64_t result = 0x5F6C6172656E6567;
      break;
    case 5:
      uint64_t result = 1684828008;
      break;
    case 6:
      uint64_t result = 0x74756D5F666C6573;
      break;
    case 7:
      uint64_t result = 0x6D6E755F666C6573;
      break;
    case 8:
      uint64_t result = 0x7072656B61657073;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for UsoVocIdentifier.rawValue.getter in conformance CallControlUsoIdentifiers.FloatSettingName()
{
  return CallControlUsoIdentifiers.FloatSettingName.rawValue.getter(*v0);
}

uint64_t CallControlUsoIdentifiers.FloatSettingName.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x707954616964656DLL;
  }
  if (a1 == 1) {
    return 0x6563696F76;
  }
  return 0x656D756C6F76;
}

uint64_t CallControlUsoIdentifiers.hasMuteCallIdentifier.getter(uint64_t a1)
{
  return CallControlUsoIdentifiers.hasMuteCallIdentifier.getter(a1, 6, 2);
}

uint64_t CallControlUsoIdentifiers.hasMuteCallIdentifier.getter(uint64_t a1, char a2, char a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UsoVocIdentifier>);
  uint64_t inited = swift_initStackObject();
  *(unsigned char *)(inited + 32) = a2;
  uint64_t v6 = inited + 32;
  *(_OWORD *)(inited + 16) = xmmword_467720;
  *(void *)(inited + 56) = &type metadata for CallControlUsoIdentifiers.PhoneSetting;
  *(void *)(inited + 64) = &protocol witness table for CallControlUsoIdentifiers.PhoneSetting;
  *(void *)(inited + 96) = &type metadata for CallControlUsoIdentifiers.PhoneSetting;
  *(void *)(inited + 104) = &protocol witness table for CallControlUsoIdentifiers.PhoneSetting;
  *(unsigned char *)(inited + 72) = a3;
  swift_bridgeObjectRetain();
  int v7 = 0;
  uint64_t v8 = 0;
  do
  {
    while (1)
    {
      int v9 = v7;
      char v10 = (void *)(v6 + 40 * v8);
      OUTLINED_FUNCTION_2_104();
      OUTLINED_FUNCTION_9_67();
      v11();
      OUTLINED_FUNCTION_13_46();
      if (!v13) {
        break;
      }
      OUTLINED_FUNCTION_12_51(v12);
      if ((v14 & 1) == 0) {
        break;
      }
      OUTLINED_FUNCTION_5_66();
      swift_bridgeObjectRelease();
      __swift_project_boxed_opaque_existential_1(v10, v10[3]);
      uint64_t v15 = OUTLINED_FUNCTION_4_85();
      uint64_t v17 = v16(v15);
      OUTLINED_FUNCTION_16_49(v17, v18);
      int v20 = v19;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v8 = 1;
      int v7 = 1;
      if ((v20 | v9)) {
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRelease();
    int v7 = 1;
    uint64_t v8 = 1;
  }
  while ((v9 & 1) == 0);
  LOBYTE(v20) = 0;
LABEL_8:
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  return v20 & 1;
}

uint64_t CallControlUsoIdentifiers.hasUnmuteCallIdentifier.getter(uint64_t a1)
{
  return CallControlUsoIdentifiers.hasMuteCallIdentifier.getter(a1, 7, 3);
}

uint64_t static Transformer<>.mapTaskToVerb(usoTask:isTargetWithNegation:)(uint64_t a1, char a2)
{
  outlined init with copy of Any(a1, (uint64_t)v14);
  type metadata accessor for UsoTask_enable_common_Setting();
  if (swift_dynamicCast())
  {
    swift_release();
    uint64_t v3 = a2 & 1;
  }
  else
  {
    type metadata accessor for UsoTask_disable_common_Setting();
    if (swift_dynamicCast())
    {
      swift_release();
      uint64_t v3 = (a2 & 1) == 0;
    }
    else
    {
      type metadata accessor for UsoTask_toggle_common_Setting();
      if (swift_dynamicCast())
      {
        swift_release();
        uint64_t v3 = 2;
      }
      else
      {
        type metadata accessor for UsoTask_set_common_Setting();
        if (swift_dynamicCast()
          || (type metadata accessor for UsoTask_increaseBy_common_Setting(), swift_dynamicCast())
          || (type metadata accessor for UsoTask_decreaseBy_common_Setting(), swift_dynamicCast())
          || (type metadata accessor for UsoTask_setNumber_common_Setting(), swift_dynamicCast()))
        {
          swift_release();
          uint64_t v3 = 5;
        }
        else
        {
          type metadata accessor for UsoTask_summarise_common_Setting();
          if (swift_dynamicCast()
            || (type metadata accessor for UsoTask_checkExistence_common_Setting(), swift_dynamicCast())
            || (type metadata accessor for UsoTask_noVerb_common_Setting(), swift_dynamicCast()))
          {
            swift_release();
            uint64_t v3 = 6;
          }
          else
          {
            if (one-time initialization token for siriPhone != -1) {
              swift_once();
            }
            uint64_t v5 = type metadata accessor for Logger();
            __swift_project_value_buffer(v5, (uint64_t)static Logger.siriPhone);
            uint64_t v6 = Logger.logObject.getter();
            os_log_type_t v7 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v6, v7))
            {
              uint64_t v8 = (uint8_t *)swift_slowAlloc();
              uint64_t v13 = swift_slowAlloc();
              *(_DWORD *)uint64_t v8 = 136315138;
              if (one-time initialization token for logPrefix != -1) {
                swift_once();
              }
              uint64_t v9 = static Transformer<>.logPrefix;
              uint64_t v10 = unk_5D4930;
              uint64_t v11 = qword_5D4938;
              uint64_t v12 = unk_5D4940;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v9, v10, v11, v12);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, &v13);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              _os_log_impl(&dword_0, v6, v7, "#%s unsupported UsoTask", v8, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }

            uint64_t v3 = 7;
          }
        }
      }
    }
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  return v3;
}

uint64_t type metadata accessor for PhoneCallControlNLIntent()
{
  return self;
}

unsigned char *PhoneCallControlNLIntent.init(verb:target:)(char a1, char a2)
{
  v2[18] = 11;
  v2[16] = a1;
  v2[17] = a2;
  return v2;
}

unint64_t PhoneCallControlNLIntent.description.getter()
{
  _StringGuts.grow(_:)(46);
  swift_bridgeObjectRelease();
  PhoneCallControlNLIntent.Verb.description.getter(*(unsigned char *)(v0 + 16));
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0x746567726174202CLL;
  v2._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallControlNLIntent.Target?);
  v3._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0xD00000000000001FLL;
}

void PhoneCallControlNLIntent.Verb.description.getter(char a1)
{
  switch(a1)
  {
    case 1:
      OUTLINED_FUNCTION_11_76();
      break;
    case 2:
      OUTLINED_FUNCTION_20_50();
      break;
    case 3:
      OUTLINED_FUNCTION_7_1();
      break;
    case 4:
      OUTLINED_FUNCTION_24_10();
      break;
    case 5:
      OUTLINED_FUNCTION_10_72();
      break;
    default:
      return;
  }
}

uint64_t getEnumTagSinglePayload for SearchCallHistoryBinaryButtonModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 4) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v5 = v6 - 5;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t protocol witness for IntentCacheProviding.cacheIntent(uda:value:) in conformance SingleIntentCacheProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))();
}

uint64_t SingleIntentCacheProvider.cacheIntent(uda:value:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = Siri_Nlu_External_UserDialogAct.hashValue.getter();
  *(void *)(v2 + 24) = a2;
  swift_retain();

  return swift_release();
}

uint64_t PhoneCallControlNLIntent.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t UsoEntity_common_Agent.asCommonPerson()()
{
  return UsoEntity_common_Agent.asCommonGroup()((void (*)(void))&type metadata accessor for UsoEntity_common_Person);
}

uint64_t static Transformer<>.isCallingLastNumberUserCalled(callTask:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
  uint64_t v1 = __chkstk_darwin(v0 - 8);
  int v3 = (char *)v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  int v5 = (char *)v25 - v4;
  dispatch thunk of Uso_VerbTemplate_Target.target.getter();
  if (!v27) {
    goto LABEL_33;
  }
  unint64_t v6 = dispatch thunk of UsoEntity_common_PhoneCall.attributes.getter();
  swift_release();
  if (!v6) {
    goto LABEL_33;
  }
  if (!(v6 >> 62))
  {
    if (*(void *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFFF8))) {
      goto LABEL_5;
    }
LABEL_32:
    swift_bridgeObjectRelease();
LABEL_33:
    char v22 = 0;
    return v22 & 1;
  }
  swift_bridgeObjectRetain();
  uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v23) {
    goto LABEL_32;
  }
LABEL_5:
  unint64_t v7 = v6 & 0xC000000000000001;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v6 & 0xC000000000000001) == 0, v6);
  if ((v6 & 0xC000000000000001) != 0) {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    swift_retain();
  }
  dispatch thunk of CodeGenListEntry.entry.getter();
  swift_release();
  if (v26)
  {
    CodeGenBase.entity.getter();
    swift_release();
  }
  type metadata accessor for UsoEntity_applePhoneCall_PhoneCallAttribute();
  static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
  swift_release();
  if (!v27) {
    goto LABEL_32;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?>);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_467710;
  dispatch thunk of UsoEntity_applePhoneCall_PhoneCallAttribute.definedValue.getter();
  specialized Set.init(_nonEmptyArrayLiteral:)();
  uint64_t v27 = v8;
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = *(void *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFFF8));
  }
  if (v9 < 2)
  {
    swift_bridgeObjectRelease();
LABEL_24:
    char v15 = 0;
    goto LABEL_25;
  }
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(1, v7 == 0, v6);
  if (v7) {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    swift_retain();
  }
  swift_bridgeObjectRelease();
  dispatch thunk of CodeGenListEntry.entry.getter();
  swift_release();
  if (v25[1])
  {
    CodeGenBase.entity.getter();
    swift_release();
  }
  static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
  swift_release();
  if (!v26) {
    goto LABEL_24;
  }
  dispatch thunk of UsoEntity_applePhoneCall_PhoneCallAttribute.definedValue.getter();
  specialized Set._Variant.insert(_:)((uint64_t)v5, (uint64_t)v3);
  outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
  uint64_t v10 = v27;
  uint64_t v11 = enum case for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues.applePhoneCall_PhoneCallAttribute_PhoneCallAttributesLast(_:);
  uint64_t v12 = type metadata accessor for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues();
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104);
  v13(v5, v11, v12);
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v12);
  swift_bridgeObjectRetain();
  LOBYTE(v11) = specialized Set.contains(_:)((uint64_t)v5, v10);
  swift_bridgeObjectRelease();
  outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
  if ((v11 & 1) == 0)
  {
    swift_release();
    goto LABEL_24;
  }
  uint64_t v14 = v27;
  v13(v5, enum case for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues.applePhoneCall_PhoneCallAttribute_PhoneCallAttributesOutgoing(_:), v12);
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v12);
  swift_bridgeObjectRetain();
  char v15 = specialized Set.contains(_:)((uint64_t)v5, v14);
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
LABEL_25:
  uint64_t v16 = v27;
  if (*(void *)(v27 + 16) == 1)
  {
    uint64_t v17 = enum case for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues.applePhoneCall_PhoneCallAttribute_PhoneCallAttributesLast(_:);
    uint64_t v18 = type metadata accessor for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues();
    int v19 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 104);
    v19(v5, v17, v18);
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v18);
    swift_bridgeObjectRetain();
    LOBYTE(v17) = specialized Set.contains(_:)((uint64_t)v5, v16);
    swift_bridgeObjectRelease();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
    uint64_t v20 = v27;
    if (v17)
    {
      swift_release();
      swift_bridgeObjectRelease();
      char v21 = 1;
    }
    else
    {
      v19(v5, enum case for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues.applePhoneCall_PhoneCallAttribute_PhoneCallAttributesRecent(_:), v18);
      __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v18);
      swift_bridgeObjectRetain();
      char v21 = specialized Set.contains(_:)((uint64_t)v5, v20);
      swift_bridgeObjectRelease();
      swift_release();
      outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    char v21 = 0;
  }
  char v22 = v15 | v21;
  return v22 & 1;
}

uint64_t UsoTask.usoAssociatedApp.getter()
{
  static UsoTask_CodegenConverter.convert(task:)();
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0((uint64_t)v13, (uint64_t)v11, &demangling cache variable for type metadata for Any?);
  if (v12)
  {
    _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0((uint64_t)v11, (uint64_t)v10, &demangling cache variable for type metadata for Any?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Uso_VerbTemplate_Target<UsoEntity_common_PhoneCall>);
    if (OUTLINED_FUNCTION_1_59())
    {
      OUTLINED_FUNCTION_3_55();
      dispatch thunk of Uso_VerbTemplate_Target.target.getter();
      goto LABEL_6;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Uso_VerbTemplate_Reference<UsoEntity_common_PhoneCall>);
    if (OUTLINED_FUNCTION_1_59())
    {
      OUTLINED_FUNCTION_3_55();
      dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
      goto LABEL_6;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Uso_VerbTemplate_ReferenceTarget<UsoEntity_common_PhoneCall>);
    if (OUTLINED_FUNCTION_1_59())
    {
      OUTLINED_FUNCTION_3_55();
      dispatch thunk of Uso_VerbTemplate_ReferenceTarget.target.getter();
      if (v9)
      {
        uint64_t v0 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
        swift_release();
        if (v0) {
          goto LABEL_18;
        }
      }
      dispatch thunk of Uso_VerbTemplate_ReferenceTarget.reference.getter();
LABEL_16:
      if (v9)
      {
LABEL_17:
        uint64_t v0 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
        swift_release();
LABEL_18:
        swift_release();
        outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v13, &demangling cache variable for type metadata for Any?);
LABEL_20:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
        goto LABEL_30;
      }
LABEL_19:
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v13, &demangling cache variable for type metadata for Any?);
      swift_release();
      uint64_t v0 = 0;
      goto LABEL_20;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Uso_VerbTemplate_ReferenceSelect<UsoEntity_common_PhoneCall>);
    if (OUTLINED_FUNCTION_1_59())
    {
      OUTLINED_FUNCTION_3_55();
      dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter();
      if (v9)
      {
        uint64_t v0 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
        swift_release();
        if (v0) {
          goto LABEL_18;
        }
      }
      dispatch thunk of Uso_VerbTemplate_ReferenceSelect.select.getter();
      goto LABEL_16;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Uso_VerbTemplate_NoVerb<UsoEntity_common_PhoneCall>);
    if (swift_dynamicCast())
    {
      OUTLINED_FUNCTION_3_55();
      dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
LABEL_6:
      if (v9) {
        goto LABEL_17;
      }
      goto LABEL_19;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.siriPhone);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    v10[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_retain();
    uint64_t v5 = UsoTask.description.getter();
    unint64_t v7 = v6;
    swift_release();
    v10[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v2, v3, "Unrecognized UsoTask type: %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v13, &demangling cache variable for type metadata for Any?);
  uint64_t v0 = 0;
LABEL_30:
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v11, &demangling cache variable for type metadata for Any?);
  return v0;
}

uint64_t _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_15();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t static Transformer<>.overrideVerbForApp(originalVerb:usoApp:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    UsoEntity_common_App.applicationId.getter();
    if (v4)
    {
      uint64_t v5 = v3;
      uint64_t v6 = v4;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_467720;
      *(void *)(inited + 32) = 0xD000000000000012;
      *(void *)(inited + 40) = 0x8000000000492070;
      if (one-time initialization token for macFaceTimeBundleId != -1) {
        swift_once();
      }
      uint64_t v8 = unk_5D4E10;
      *(void *)(inited + 48) = static PhoneCallAppNameConstants.macFaceTimeBundleId;
      *(void *)(inited + 56) = v8;
      swift_bridgeObjectRetain();
      specialized Set.init(_nonEmptyArrayLiteral:)();
      specialized Set.contains(_:)(v5, v6, v9);
      char v11 = v10;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v11)
      {
        if (one-time initialization token for siriPhone != -1) {
          swift_once();
        }
        uint64_t v12 = type metadata accessor for Logger();
        __swift_project_value_buffer(v12, (uint64_t)static Logger.siriPhone);
        uint64_t v13 = Logger.logObject.getter();
        os_log_type_t v14 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v13, v14))
        {
          uint64_t v15 = swift_slowAlloc();
          uint64_t v23 = swift_slowAlloc();
          *(_DWORD *)uint64_t v15 = 136315394;
          if (one-time initialization token for logPrefix != -1) {
            swift_once();
          }
          uint64_t v16 = static NLv4Transformer.logPrefix;
          uint64_t v17 = unk_5D5060;
          uint64_t v19 = qword_5D5068;
          uint64_t v18 = unk_5D5070;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v16, v17, v19, v18);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, &v23);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v15 + 12) = 2080;
          uint64_t v20 = PhoneCallVerb.rawValue.getter(a1);
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v23);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_0, v13, v14, "%s overriding verb from .%s to .facetime because user specified FaceTime app", (uint8_t *)v15, 0x16u);
          a1 = 2;
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          return 2;
        }
      }
    }
  }
  return a1;
}

uint64_t static Transformer<>.incomingCallTransformerOutput(phoneCallVerb:voicemailVerb:phoneCallUsoTask:audioRoute:)@<X0>(unsigned __int8 a1@<W0>, char a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  char v8 = a1;
  int v10 = a1;
  uint64_t v157 = type metadata accessor for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues();
  uint64_t v153 = *(void *)(v157 - 8);
  __chkstk_darwin(v157);
  v145 = (char *)&v136 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v154 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?));
  uint64_t v12 = __chkstk_darwin(v154);
  uint64_t v148 = (uint64_t)&v136 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v147 = (uint64_t)&v136 - v15;
  __chkstk_darwin(v14);
  uint64_t v152 = (uint64_t)&v136 - v16;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
  uint64_t v18 = __chkstk_darwin(v17 - 8);
  v146 = (char *)&v136 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v158 = (uint64_t)&v136 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v136 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v143 = (uint64_t)&v136 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v149 = (uint64_t)&v136 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v150 = (uint64_t)&v136 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v144 = (uint64_t)&v136 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v35 = (char *)&v136 - v34;
  __chkstk_darwin(v33);
  uint64_t v151 = (uint64_t)&v136 - v36;
  static Signpost.begin(_:)();
  uint64_t v161 = v37;
  uint64_t v163 = v38;
  uint64_t v164 = v39;
  int v162 = v40;
  v174 = _swiftEmptyArrayStorage;
  char v173 = 9;
  if (v10 != 17)
  {
    if (PhoneCallVerb.rawValue.getter(v8) == 1684957542 && v41 == 0xE400000000000000)
    {
LABEL_17:
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }
    char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v43) {
      goto LABEL_18;
    }
  }
  if (a2 == 6)
  {
LABEL_8:
    *(void *)(a5 + 32) = 0;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    Signpost.OpenSignpost.end()();
    return swift_release();
  }
  if (VoiceMail.VoiceMailVerb.rawValue.getter(a2) == 2036427888 && v45 == 0xE400000000000000) {
    goto LABEL_17;
  }
  char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v47 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_18:
  static UsoTask_CodegenConverter.convert(task:)();
  v142 = v24;
  v156 = (uint64_t *)a5;
  if (!*((void *)&v167 + 1))
  {
    outlined destroy of UUID?((uint64_t)&v166, &demangling cache variable for type metadata for Any?);
    goto LABEL_29;
  }
  type metadata accessor for UsoTask_request_common_PhoneCall();
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_29;
  }
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter();
  swift_release();
  if (!(void)v166 || (unint64_t v48 = dispatch thunk of UsoEntity_common_PhoneCall.attributes.getter(), swift_release(), !v48))
  {
    swift_release();
    goto LABEL_29;
  }
  if (v48 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v130 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v130) {
      goto LABEL_24;
    }
LABEL_194:
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  if (!*(void *)((char *)&dword_10 + (v48 & 0xFFFFFFFFFFFFFF8))) {
    goto LABEL_194;
  }
LABEL_24:
  int v49 = a4;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v48 & 0xC000000000000001) == 0, v48);
  if ((v48 & 0xC000000000000001) != 0)
  {
    uint64_t v50 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    uint64_t v50 = *(void *)(v48 + 32);
    swift_retain();
  }
  swift_bridgeObjectRelease();
  static Transformer<>.updatePhoneNounAndAttributesForLatestCallHistory(attribute:phoneCallAttributes:phoneCallNoun:)(v50, (uint64_t *)&v174, &v173);
  swift_release();
  swift_release();
  a4 = v49;
LABEL_29:
  static UsoTask_CodegenConverter.convert(task:)();
  outlined init with copy of ConfirmationResponse?((uint64_t)&v172, (uint64_t)&v166, &demangling cache variable for type metadata for Any?);
  if (*((void *)&v167 + 1))
  {
    int v51 = a4;
    type metadata accessor for UsoTask_summarise_common_PhoneCall();
    if (swift_dynamicCast())
    {
      uint64_t v52 = v171;
      goto LABEL_34;
    }
  }
  else
  {
    int v51 = a4;
    outlined destroy of UUID?((uint64_t)&v166, &demangling cache variable for type metadata for Any?);
  }
  uint64_t v52 = 0;
LABEL_34:
  outlined init with copy of ConfirmationResponse?((uint64_t)&v172, (uint64_t)&v171, &demangling cache variable for type metadata for Any?);
  uint64_t v155 = a3;
  if (v52)
  {
    outlined destroy of UUID?((uint64_t)&v171, &demangling cache variable for type metadata for Any?);
    goto LABEL_36;
  }
  outlined init with take of AnnotatedApp?((uint64_t)&v171, (uint64_t)&v166, &demangling cache variable for type metadata for Any?);
  if (!*((void *)&v167 + 1))
  {
    outlined destroy of UUID?((uint64_t)&v166, &demangling cache variable for type metadata for Any?);
LABEL_79:
    outlined init with copy of ConfirmationResponse?((uint64_t)&v172, (uint64_t)&v166, &demangling cache variable for type metadata for Any?);
    if (*((void *)&v167 + 1))
    {
      type metadata accessor for UsoTask_noVerb_common_PhoneCall();
      if (swift_dynamicCast())
      {
        LODWORD(v52) = v170;
        char v173 = 1;
        swift_retain();
        dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
        swift_release();
        if ((void)v166)
        {
          uint64_t v53 = dispatch thunk of UsoEntity_common_PhoneCall.attributes.getter();
          swift_release();
        }
        else
        {
          uint64_t v53 = 0;
        }
        swift_retain();
        dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
        swift_release();
        if ((void)v166)
        {
          uint64_t v54 = dispatch thunk of UsoEntity_common_PhoneCall.sender.getter();
          swift_release();
        }
        else
        {
          uint64_t v54 = 0;
        }
        swift_retain();
        dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
        swift_release();
        if (!(void)v166)
        {
          uint64_t v160 = 0;
          goto LABEL_47;
        }
LABEL_46:
        uint64_t v160 = dispatch thunk of UsoEntity_common_PhoneCall.associatedDateTimeRange.getter();
        swift_release();
LABEL_47:
        swift_release();
        goto LABEL_49;
      }
    }
    else
    {
      outlined destroy of UUID?((uint64_t)&v166, &demangling cache variable for type metadata for Any?);
    }
    uint64_t v160 = 0;
    uint64_t v54 = 0;
    unint64_t v55 = (unint64_t)_swiftEmptyArrayStorage;
    goto LABEL_52;
  }
  type metadata accessor for UsoTask_read_common_PhoneCall();
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_79;
  }
  LODWORD(v52) = v170;
LABEL_36:
  char v173 = 1;
  dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
  if ((void)v166)
  {
    uint64_t v53 = dispatch thunk of UsoEntity_common_PhoneCall.attributes.getter();
    swift_release();
  }
  else
  {
    uint64_t v53 = 0;
  }
  dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
  if ((void)v166)
  {
    uint64_t v54 = dispatch thunk of UsoEntity_common_PhoneCall.sender.getter();
    swift_release();
  }
  else
  {
    uint64_t v54 = 0;
  }
  dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
  if ((void)v166) {
    goto LABEL_46;
  }
  swift_release();
  uint64_t v160 = 0;
LABEL_49:
  if (v53) {
    unint64_t v55 = v53;
  }
  else {
    unint64_t v55 = (unint64_t)_swiftEmptyArrayStorage;
  }
LABEL_52:
  if (v55 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v56 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v56) {
      goto LABEL_60;
    }
  }
  else
  {
    uint64_t v56 = *(void *)((char *)&dword_10 + (v55 & 0xFFFFFFFFFFFFFF8));
    if (!v56) {
      goto LABEL_60;
    }
  }
  if (v56 < 1)
  {
    __break(1u);
LABEL_173:
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v60 = v113;
    goto LABEL_65;
  }
  for (uint64_t i = 0; i != v56; ++i)
  {
    if ((v55 & 0xC000000000000001) != 0)
    {
      uint64_t v58 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v58 = *(void *)(v55 + 8 * i + 32);
      swift_retain();
    }
    static Transformer<>.updatePhoneNounAndAttributesForGeneralCallHistory(attribute:phoneCallAttributes:)(v58, (uint64_t *)&v174);
    swift_release();
  }
LABEL_60:
  swift_bridgeObjectRelease();
  if (v54)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ContactQuery>);
    type metadata accessor for ContactQuery();
    uint64_t v59 = (void *)swift_allocObject();
    *((_OWORD *)v59 + 1) = xmmword_467710;
    v159 = v59;
    swift_retain();
    UsoEntity_common_Agent.toContactQuery()();
    swift_release();
  }
  else
  {
    v159 = _swiftEmptyArrayStorage;
  }
  LODWORD(v52) = v51;
  if (!v160) {
    goto LABEL_68;
  }
  uint64_t v60 = v174;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_173;
  }
LABEL_65:
  unint64_t v61 = v60[2];
  if (v61 >= v60[3] >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v60 = v114;
  }
  v60[2] = v61 + 1;
  *((unsigned char *)v60 + v61 + 32) = 11;
  v174 = v60;
LABEL_68:
  outlined init with copy of ConfirmationResponse?((uint64_t)&v172, (uint64_t)&v166, &demangling cache variable for type metadata for Any?);
  if (*((void *)&v167 + 1))
  {
    type metadata accessor for UsoTask_play_common_Voicemail();
    if (swift_dynamicCast()) {
      uint64_t v62 = v170;
    }
    else {
      uint64_t v62 = 0;
    }
  }
  else
  {
    outlined destroy of UUID?((uint64_t)&v166, &demangling cache variable for type metadata for Any?);
    uint64_t v62 = 0;
  }
  outlined init with copy of ConfirmationResponse?((uint64_t)&v172, (uint64_t)&v170, &demangling cache variable for type metadata for Any?);
  if (v62)
  {
    char v63 = &v170;
LABEL_87:
    outlined destroy of UUID?((uint64_t)v63, &demangling cache variable for type metadata for Any?);
LABEL_88:
    dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
    uint64_t v64 = v158;
    if ((void)v166)
    {
      uint64_t v65 = dispatch thunk of CodeGenGlobalArgs.usoReferenceType.getter();
      swift_release();
      if (v65)
      {
        uint64_t v158 = v54;
        swift_release();
        if (one-time initialization token for siriPhone != -1) {
          swift_once();
        }
        uint64_t v66 = type metadata accessor for Logger();
        __swift_project_value_buffer(v66, (uint64_t)static Logger.siriPhone);
        uint64_t v67 = Logger.logObject.getter();
        os_log_type_t v68 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v67, v68))
        {
          uint64_t v141 = v62;
          int v140 = v52;
          unint64_t v69 = (uint8_t *)swift_slowAlloc();
          v169[0] = swift_slowAlloc();
          *(_DWORD *)unint64_t v69 = 136315138;
          if (one-time initialization token for logPrefix != -1) {
            swift_once();
          }
          uint64_t v70 = static NLv4Transformer.logPrefix;
          uint64_t v71 = unk_5D5060;
          uint64_t v52 = qword_5D5068;
          uint64_t v72 = unk_5D5070;
          *(void *)&long long v166 = 0;
          *((void *)&v166 + 1) = 0xE000000000000000;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v70, v71, v52, v72);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *(void *)&long long v166 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v166, *((unint64_t *)&v166 + 1), v169);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_0, v67, v68, "%s current request is recognized as play it", v69, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          LOBYTE(v52) = v140;
        }
        else
        {
        }
        uint64_t v76 = v174;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v76 = v115;
        }
        unint64_t v73 = v76[2];
        if (v73 >= v76[3] >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v76 = v116;
        }
        v76[2] = v73 + 1;
        *((unsigned char *)v76 + v73 + 32) = 6;
        v174 = v76;
        LOBYTE(v73) = 2;
        goto LABEL_176;
      }
    }
    dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
    LOBYTE(v73) = v166;
    if ((void)v166)
    {
      unint64_t v74 = dispatch thunk of UsoEntity_common_Voicemail.attributes.getter();
      swift_release();
      if (!v74) {
        goto LABEL_126;
      }
      if (v74 >> 62)
      {
        swift_bridgeObjectRetain();
        unint64_t v73 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v73) {
          goto LABEL_100;
        }
      }
      else
      {
        unint64_t v73 = *(void *)((char *)&dword_10 + (v74 & 0xFFFFFFFFFFFFFF8));
        if (v73)
        {
LABEL_100:
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v74 & 0xC000000000000001) == 0, v74);
          if ((v74 & 0xC000000000000001) != 0)
          {
            uint64_t v75 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            uint64_t v75 = *(void *)(v74 + 32);
            swift_retain();
          }
          swift_bridgeObjectRelease();
          dispatch thunk of CodeGenListEntry.entry.getter();
          if (v169[0])
          {
            CodeGenBase.entity.getter();
            swift_release();
          }
          uint64_t v77 = v157;
          type metadata accessor for UsoEntity_applePhoneCall_PhoneCallAttribute();
          static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
          swift_release();
          if ((void)v166)
          {
            uint64_t v136 = v75;
            uint64_t v141 = v62;
            uint64_t v78 = v151;
            uint64_t v139 = v166;
            dispatch thunk of UsoEntity_applePhoneCall_PhoneCallAttribute.definedValue.getter();
            if (one-time initialization token for phoneCallAttributesLast != -1) {
              swift_once();
            }
            uint64_t v79 = __swift_project_value_buffer(v77, (uint64_t)static Transformer<>.phoneCallAttributesLast);
            uint64_t v80 = *(void (**)(uint64_t, uint64_t, uint64_t))(v153 + 16);
            uint64_t v138 = v153 + 16;
            v137 = v80;
            v80((uint64_t)v35, v79, v77);
            __swift_storeEnumTagSinglePayload((uint64_t)v35, 0, 1, v77);
            uint64_t v81 = v152;
            uint64_t v82 = v152 + *(int *)(v154 + 48);
            outlined init with copy of ConfirmationResponse?(v78, v152, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
            uint64_t v83 = v157;
            outlined init with copy of ConfirmationResponse?((uint64_t)v35, v82, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
            if (__swift_getEnumTagSinglePayload(v81, 1, v83) == 1)
            {
              outlined destroy of UUID?((uint64_t)v35, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
              uint64_t v83 = v157;
              outlined destroy of UUID?(v78, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
              int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v82, 1, v83);
              uint64_t v85 = v150;
              uint64_t v86 = v149;
              if (EnumTagSinglePayload == 1)
              {
                uint64_t v87 = v152;
LABEL_144:
                outlined destroy of UUID?(v87, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
                goto LABEL_145;
              }
            }
            else
            {
              uint64_t v88 = v144;
              outlined init with copy of ConfirmationResponse?(v81, v144, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
              if (__swift_getEnumTagSinglePayload(v82, 1, v83) != 1)
              {
                uint64_t v90 = v153;
                v91 = v145;
                (*(void (**)(char *, uint64_t, uint64_t))(v153 + 32))(v145, v82, v83);
                lazy protocol witness table accessor for type UsoEntity_common_ReferenceType.DefinedValues and conformance UsoEntity_common_ReferenceType.DefinedValues(&lazy protocol witness table cache variable for type UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues and conformance UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues, (void (*)(uint64_t))&type metadata accessor for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues);
                char v92 = dispatch thunk of static Equatable.== infix(_:_:)();
                v93 = *(void (**)(char *, uint64_t))(v90 + 8);
                v93(v91, v83);
                outlined destroy of UUID?((uint64_t)v35, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
                outlined destroy of UUID?(v151, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
                v93((char *)v88, v157);
                uint64_t v83 = v157;
                outlined destroy of UUID?(v152, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
                uint64_t v85 = v150;
                uint64_t v86 = v149;
                if (v92)
                {
LABEL_145:
                  v97 = v174;
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  {
                    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
                    v97 = v131;
                  }
                  unint64_t v98 = v97[2];
                  if (v98 >= v97[3] >> 1)
                  {
                    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
                    v97 = v132;
                  }
                  v97[2] = v98 + 1;
                  *((unsigned char *)v97 + v98 + 32) = 6;
                  v174 = v97;
                  uint64_t v83 = v157;
LABEL_153:
                  uint64_t v100 = (uint64_t)v142;
                  dispatch thunk of UsoEntity_applePhoneCall_PhoneCallAttribute.definedValue.getter();
                  if (one-time initialization token for phoneCallAttributesNewVoicemail != -1) {
                    swift_once();
                  }
                  uint64_t v101 = __swift_project_value_buffer(v83, (uint64_t)static Transformer<>.phoneCallAttributesNewVoicemail);
                  v137(v64, v101, v83);
                  __swift_storeEnumTagSinglePayload(v64, 0, 1, v83);
                  uint64_t v102 = v148;
                  uint64_t v103 = v148 + *(int *)(v154 + 48);
                  outlined init with copy of ConfirmationResponse?(v100, v148, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
                  outlined init with copy of ConfirmationResponse?(v64, v103, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
                  if (__swift_getEnumTagSinglePayload(v102, 1, v83) == 1)
                  {
                    outlined destroy of UUID?(v64, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
                    outlined destroy of UUID?(v100, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
                    if (__swift_getEnumTagSinglePayload(v103, 1, v83) == 1)
                    {
                      outlined destroy of UUID?(v102, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
LABEL_162:
                      v108 = v174;
                      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                      {
                        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
                        v108 = v133;
                      }
                      unint64_t v73 = v108[2];
                      if (v73 >= v108[3] >> 1)
                      {
                        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
                        v108 = v134;
                      }
                      v108[2] = v73 + 1;
                      *((unsigned char *)v108 + v73 + 32) = 12;
                      swift_release();
                      swift_release();
                      LOBYTE(v73) = 0;
                      v174 = v108;
                      goto LABEL_176;
                    }
                  }
                  else
                  {
                    uint64_t v104 = (uint64_t)v146;
                    outlined init with copy of ConfirmationResponse?(v102, (uint64_t)v146, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
                    if (__swift_getEnumTagSinglePayload(v103, 1, v83) != 1)
                    {
                      uint64_t v105 = v153;
                      v106 = v145;
                      (*(void (**)(char *, uint64_t, uint64_t))(v153 + 32))(v145, v103, v83);
                      lazy protocol witness table accessor for type UsoEntity_common_ReferenceType.DefinedValues and conformance UsoEntity_common_ReferenceType.DefinedValues(&lazy protocol witness table cache variable for type UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues and conformance UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues, (void (*)(uint64_t))&type metadata accessor for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues);
                      LODWORD(v161) = dispatch thunk of static Equatable.== infix(_:_:)();
                      v107 = *(void (**)(char *, uint64_t))(v105 + 8);
                      v107(v106, v83);
                      outlined destroy of UUID?(v158, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
                      outlined destroy of UUID?((uint64_t)v142, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
                      v107(v146, v83);
                      outlined destroy of UUID?(v102, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
                      if (v161) {
                        goto LABEL_162;
                      }
                      goto LABEL_167;
                    }
                    outlined destroy of UUID?(v64, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
                    outlined destroy of UUID?((uint64_t)v142, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
                    (*(void (**)(uint64_t, uint64_t))(v153 + 8))(v104, v83);
                  }
                  outlined destroy of UUID?(v102, &demangling cache variable for type metadata for (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?));
LABEL_167:
                  swift_release();
                  swift_release();
                  LOBYTE(v73) = 0;
                  goto LABEL_176;
                }
LABEL_139:
                int v140 = v52;
                dispatch thunk of UsoEntity_applePhoneCall_PhoneCallAttribute.definedValue.getter();
                if (one-time initialization token for phoneCallAttributesRecent != -1) {
                  swift_once();
                }
                uint64_t v94 = __swift_project_value_buffer(v83, (uint64_t)static Transformer<>.phoneCallAttributesRecent);
                v137(v86, v94, v83);
                __swift_storeEnumTagSinglePayload(v86, 0, 1, v83);
                uint64_t v95 = v147;
                uint64_t v52 = v147 + *(int *)(v154 + 48);
                outlined init with copy of ConfirmationResponse?(v85, v147, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
                uint64_t v96 = v95;
                outlined init with copy of ConfirmationResponse?(v86, v52, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
                if (__swift_getEnumTagSinglePayload(v95, 1, v83) == 1)
                {
                  outlined destroy of UUID?(v86, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
                  uint64_t v96 = v147;
                  outlined destroy of UUID?(v85, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
                  if (__swift_getEnumTagSinglePayload(v52, 1, v83) == 1)
                  {
                    uint64_t v87 = v96;
                    LOBYTE(v52) = v140;
                    goto LABEL_144;
                  }
                }
                else
                {
                  uint64_t v99 = v143;
                  outlined init with copy of ConfirmationResponse?(v95, v143, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
                  if (__swift_getEnumTagSinglePayload(v52, 1, v83) != 1)
                  {
                    uint64_t v109 = v153;
                    v110 = v145;
                    (*(void (**)(char *, uint64_t, uint64_t))(v153 + 32))(v145, v52, v83);
                    lazy protocol witness table accessor for type UsoEntity_common_ReferenceType.DefinedValues and conformance UsoEntity_common_ReferenceType.DefinedValues(&lazy protocol witness table cache variable for type UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues and conformance UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues, (void (*)(uint64_t))&type metadata accessor for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues);
                    char v111 = dispatch thunk of static Equatable.== infix(_:_:)();
                    v112 = *(void (**)(char *, uint64_t))(v109 + 8);
                    v112(v110, v157);
                    outlined destroy of UUID?(v149, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
                    outlined destroy of UUID?(v150, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
                    v112((char *)v99, v157);
                    uint64_t v83 = v157;
                    outlined destroy of UUID?(v96, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
                    LOBYTE(v52) = v140;
                    if ((v111 & 1) == 0) {
                      goto LABEL_153;
                    }
                    goto LABEL_145;
                  }
                  outlined destroy of UUID?(v149, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
                  outlined destroy of UUID?(v150, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
                  (*(void (**)(uint64_t, uint64_t))(v153 + 8))(v99, v83);
                }
                outlined destroy of UUID?(v96, &demangling cache variable for type metadata for (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?));
                LOBYTE(v52) = v140;
                goto LABEL_153;
              }
              outlined destroy of UUID?((uint64_t)v35, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
              outlined destroy of UUID?(v151, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
              (*(void (**)(uint64_t, uint64_t))(v153 + 8))(v88, v83);
              uint64_t v85 = v150;
              uint64_t v86 = v149;
            }
            outlined destroy of UUID?(v152, &demangling cache variable for type metadata for (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?));
            goto LABEL_139;
          }
          swift_release();
LABEL_126:
          LOBYTE(v73) = 0;
          goto LABEL_176;
        }
      }
      swift_bridgeObjectRelease();
    }
LABEL_176:
    dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
    if ((void)v166)
    {
      uint64_t v117 = dispatch thunk of UsoEntity_common_Voicemail.sender.getter();
      swift_release();
      if (v117)
      {
        swift_bridgeObjectRelease();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ContactQuery>);
        type metadata accessor for ContactQuery();
        v118 = (void *)swift_allocObject();
        *((_OWORD *)v118 + 1) = xmmword_467710;
        v159 = v118;
        UsoEntity_common_Agent.toContactQuery()();
        swift_release();
      }
    }
    dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
    if ((void)v166
      && (uint64_t v119 = dispatch thunk of UsoEntity_common_Voicemail.associatedDateTimeRange.getter(), swift_release(), v119))
    {
      swift_release();
      v120 = v174;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v120 = v128;
      }
      unint64_t v121 = v120[2];
      if (v121 >= v120[3] >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v120 = v129;
      }
      v120[2] = v121 + 1;
      *((unsigned char *)v120 + v121 + 32) = 11;
      swift_release();
      a2 = 0;
      v174 = v120;
    }
    else
    {
      swift_release();
      a2 = 0;
    }
    goto LABEL_187;
  }
  outlined init with copy of ConfirmationResponse?((uint64_t)&v170, (uint64_t)&v166, &demangling cache variable for type metadata for Any?);
  if (*((void *)&v167 + 1))
  {
    type metadata accessor for UsoTask_read_common_Voicemail();
    if (swift_dynamicCast())
    {
      uint64_t v62 = v169[0];
      goto LABEL_85;
    }
  }
  else
  {
    outlined destroy of UUID?((uint64_t)&v166, &demangling cache variable for type metadata for Any?);
  }
  uint64_t v62 = 0;
LABEL_85:
  outlined init with take of AnnotatedApp?((uint64_t)&v170, (uint64_t)&v166, &demangling cache variable for type metadata for Any?);
  if (v62)
  {
    char v63 = (uint64_t *)&v166;
    goto LABEL_87;
  }
  outlined init with take of AnnotatedApp?((uint64_t)&v166, (uint64_t)v169, &demangling cache variable for type metadata for Any?);
  if (v169[3])
  {
    type metadata accessor for UsoTask_summarise_common_Voicemail();
    if (swift_dynamicCast())
    {
      uint64_t v62 = v165;
      goto LABEL_88;
    }
  }
  else
  {
    outlined destroy of UUID?((uint64_t)v169, &demangling cache variable for type metadata for Any?);
  }
  outlined init with copy of ConfirmationResponse?((uint64_t)&v172, (uint64_t)&v166, &demangling cache variable for type metadata for Any?);
  if (*((void *)&v167 + 1))
  {
    type metadata accessor for UsoTask_call_common_Voicemail();
    if (swift_dynamicCast())
    {
      swift_release();
      a2 = 0;
      LOBYTE(v73) = 0;
LABEL_187:
      char v89 = 2;
      char v8 = 17;
      goto LABEL_188;
    }
  }
  else
  {
    outlined destroy of UUID?((uint64_t)&v166, &demangling cache variable for type metadata for Any?);
  }
  char v89 = 0;
  LOBYTE(v73) = 2;
LABEL_188:
  uint64_t v122 = UsoTask.usoAssociatedApp.getter();
  if (v122)
  {
    uint64_t v123 = v122;
    *((void *)&v167 + 1) = type metadata accessor for UsoEntity_common_App();
    v168 = &protocol witness table for UsoEntity_common_App;
    *(void *)&long long v166 = v123;
  }
  else
  {
    v168 = 0;
    long long v167 = 0u;
    long long v166 = 0u;
  }
  swift_release();
  swift_release();
  uint64_t v124 = (uint64_t)v174;
  char v125 = v173;
  outlined destroy of UUID?((uint64_t)&v172, &demangling cache variable for type metadata for Any?);
  v126 = v156;
  v156[3] = (uint64_t)&type metadata for PhoneCallNLv4Intent;
  v126[4] = (uint64_t)&protocol witness table for PhoneCallNLv4Intent;
  uint64_t v127 = swift_allocObject();
  uint64_t *v126 = v127;
  BYTE6(v135) = v73;
  BYTE5(v135) = a2;
  BYTE4(v135) = v8;
  WORD1(v135) = 8963;
  BYTE1(v135) = v125;
  LOBYTE(v135) = v89;
  PhoneCallNLv4Intent.init(contactQueries:contacts:app:phoneCallAVMode:phoneCallAttributes:phoneCallAudioRoute:phoneCallCapability:phoneCallConfirmation:phoneCallDestinationType:phoneCallNoun:phoneCallPreferredProvider:phoneCallReference:phoneCallVerb:voiceMailVerb:voiceMailNoun:smsGroups:references:)((uint64_t)v159, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)&v166, 2, v124, v52, 2, 5, v127 + 16, v135, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage);
  Signpost.OpenSignpost.end()();
  return swift_release();
}

uint64_t PhoneCallVerb.rawValue.getter(char a1)
{
  uint64_t result = 1819042147;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x636162206C6C6163;
      break;
    case 2:
    case 3:
      uint64_t result = OUTLINED_FUNCTION_59_0();
      break;
    case 4:
      uint64_t result = OUTLINED_FUNCTION_66_2();
      break;
    case 5:
      uint64_t result = 1684957542;
      break;
    case 6:
      uint64_t result = OUTLINED_FUNCTION_191();
      break;
    case 7:
      uint64_t result = 0x79666972616C63;
      break;
    case 8:
      uint64_t result = 1684104562;
      break;
    case 9:
      uint64_t result = 0x6D7269666E6F63;
      break;
    case 10:
      uint64_t result = 0x726577736E61;
      break;
    case 11:
      uint64_t result = 0x70755F676E6168;
      break;
    case 12:
      uint64_t result = 0x6574656C6564;
      break;
    case 13:
      uint64_t result = 0x65526F54746E6177;
      break;
    case 14:
      uint64_t result = 1852403562;
      break;
    case 15:
      uint64_t result = 0x6974726150646461;
      break;
    case 16:
      uint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined init with take of AppSelectionSignalComponent(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t *UsoTask.convertToCommonPhoneCallEntity()()
{
  static UsoTask_CodegenConverter.convert(task:)();
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0((uint64_t)v23, (uint64_t)v21, &demangling cache variable for type metadata for Any?);
  if (v22)
  {
    _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0((uint64_t)v21, (uint64_t)&v19, &demangling cache variable for type metadata for Any?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Uso_VerbTemplate_Target<UsoEntity_common_PhoneCall>);
    if (OUTLINED_FUNCTION_13_27())
    {
      dispatch thunk of Uso_VerbTemplate_Target.target.getter();
LABEL_8:
      swift_release();
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v23, &demangling cache variable for type metadata for Any?);
      uint64_t v0 = v18;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19);
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v21, &demangling cache variable for type metadata for Any?);
      return v0;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Uso_VerbTemplate_Reference<UsoEntity_common_PhoneCall>);
    if (OUTLINED_FUNCTION_13_27())
    {
      dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
      goto LABEL_8;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Uso_VerbTemplate_ReferenceTarget<UsoEntity_common_PhoneCall>);
    if (swift_dynamicCast())
    {
      dispatch thunk of Uso_VerbTemplate_ReferenceTarget.target.getter();
      goto LABEL_8;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19);
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.siriPhone);
  swift_retain_n();
  long long v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_retain();
    uint64_t v5 = UsoTask.description.getter();
    unint64_t v7 = v6;
    swift_release();
    uint64_t v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v2, v3, "Cannot transform UsoTask to task with common_PhoneCall: %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v8 = type metadata accessor for TransformationError();
  lazy protocol witness table accessor for type UsoEntity_common_PhoneCallMode.DefinedValues and conformance UsoEntity_common_PhoneCallMode.DefinedValues((unint64_t *)&lazy protocol witness table cache variable for type TransformationError and conformance TransformationError, (void (*)(uint64_t))&type metadata accessor for TransformationError);
  swift_allocError();
  int v10 = v9;
  uint64_t v19 = 0;
  unint64_t v20 = 0xE000000000000000;
  _StringGuts.grow(_:)(50);
  swift_bridgeObjectRelease();
  uint64_t v19 = 0xD000000000000012;
  unint64_t v20 = 0x8000000000495B10;
  swift_retain();
  uint64_t v11 = UsoTask.description.getter();
  uint64_t v13 = v12;
  swift_release();
  v14._countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0xD00000000000001ELL;
  v15._object = (void *)0x8000000000495B30;
  String.append(_:)(v15);
  unint64_t v16 = v20;
  *int v10 = v19;
  v10[1] = v16;
  (*(void (**)(void *, void, uint64_t))(*(void *)(v8 - 8) + 104))(v10, enum case for TransformationError.cannotTransform(_:), v8);
  swift_willThrow();
  uint64_t v0 = &demangling cache variable for type metadata for Any?;
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v23, &demangling cache variable for type metadata for Any?);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v21, &demangling cache variable for type metadata for Any?);
  return v0;
}

void static PhoneCallNLv4Intent.appendNewContactQueries(contactQueries:persons:)()
{
  OUTLINED_FUNCTION_24_0();
  unint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactQuery?);
  uint64_t v5 = OUTLINED_FUNCTION_11_0(v4);
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_4();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = type metadata accessor for ContactQuery();
  OUTLINED_FUNCTION_1();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_4();
  uint64_t v15 = v14 - v13;
  unint64_t v16 = *(void *)(v3 + 16);
  unint64_t v17 = v1 >> 62;
  if (v16 > 1) {
    goto LABEL_4;
  }
  if (v17)
  {
    swift_bridgeObjectRetain();
    uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v41 >= 2) {
      goto LABEL_4;
    }
    swift_bridgeObjectRetain();
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_12;
    }
LABEL_27:
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8));
  if (v18 > 1)
  {
LABEL_4:
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.siriPhone);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 134218240;
      unint64_t v43 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2048;
      if (v17)
      {
        swift_bridgeObjectRetain();
        uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v23 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8));
      }
      swift_bridgeObjectRelease();
      unint64_t v43 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v20, v21, "#PhoneCallNLv4Intent appendNewContactQueries is skipped since contactQueries array has size:%ld and persons array has size:%ld", (uint8_t *)v22, 0x16u);
      OUTLINED_FUNCTION_6();
    }
    else
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
    }
    goto LABEL_28;
  }
  swift_bridgeObjectRetain();
  if (!v18) {
    goto LABEL_27;
  }
LABEL_12:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v1 & 0xC000000000000001) == 0, v1);
  if ((v1 & 0xC000000000000001) != 0) {
    id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v24 = *(id *)(v1 + 32);
  }
  uint64_t v25 = v24;
  swift_bridgeObjectRelease();
  if ((INPerson.isUnnamedHandleLabel.getter() & 1) == 0)
  {

    goto LABEL_28;
  }
  specialized Collection.first.getter();
  OUTLINED_FUNCTION_2_63(v8);
  if (v26)
  {

    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v8, &demangling cache variable for type metadata for ContactQuery?);
LABEL_28:
    swift_bridgeObjectRetain();
    goto LABEL_29;
  }
  OUTLINED_FUNCTION_51_10();
  OUTLINED_FUNCTION_7_46();
  v27();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  __swift_project_value_buffer(v28, (uint64_t)static Logger.siriPhone);
  id v29 = v25;
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = swift_slowAlloc();
    uint64_t v42 = v30;
    uint64_t v33 = (void *)swift_slowAlloc();
    unint64_t v43 = swift_slowAlloc();
    *(_DWORD *)uint64_t v32 = 138412546;
    id v34 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v33 = v29;

    *(_WORD *)(v32 + 12) = 2080;
    swift_beginAccess();
    lazy protocol witness table accessor for type ContactQuery and conformance ContactQuery(&lazy protocol witness table cache variable for type ContactQuery and conformance ContactQuery, (void (*)(uint64_t))&type metadata accessor for ContactQuery);
    uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, (uint64_t *)&v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v42, v31, "#PhoneCallNLv4Intent append isMe to contact queries based on person:%@ contactQuery:%s", (uint8_t *)v32, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
  }
  swift_beginAccess();
  ContactQuery.isMe.setter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ContactQuery>);
  unint64_t v37 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_467710;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 16))(v38 + v37, v15, v9);
  uint64_t v39 = OUTLINED_FUNCTION_7_14();
  v40(v39);

LABEL_29:
  OUTLINED_FUNCTION_26_1();
}

id INPerson.isUnnamedHandleLabel.getter()
{
  id result = [v0 personHandle];
  if (result)
  {
    uint64_t v2 = result;
    id v3 = [result label];
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = outlined bridged method (pb) of @objc INCallGroup.groupName.getter(v2, (SEL *)&selRef_value);
      char v7 = specialized Optional<A>.isNilOrEmpty.getter(v5, v6);
      swift_bridgeObjectRelease();
      if (v7)
      {
        uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v10 = v9;
        swift_bridgeObjectRelease();
        uint64_t v11 = HIBYTE(v10) & 0xF;
        if ((v10 & 0x2000000000000000) == 0) {
          uint64_t v11 = v8 & 0xFFFFFFFFFFFFLL;
        }
        if (v11 && (INPerson.hasNameComponents.getter() & 1) == 0)
        {
          id v12 = [v0 displayName];
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v15 = v14;

          swift_bridgeObjectRelease();
          uint64_t v16 = HIBYTE(v15) & 0xF;
          if ((v15 & 0x2000000000000000) == 0) {
            uint64_t v16 = v13 & 0xFFFFFFFFFFFFLL;
          }
          if (!v16)
          {
            id v17 = [v0 relationship];

            return (id)!v17;
          }
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t UsoEntity_common_Agent.asCommonGroup()()
{
  return UsoEntity_common_Agent.asCommonGroup()((void (*)(void))&type metadata accessor for UsoEntity_common_Group);
}

uint64_t UsoEntity_common_Agent.asCommonGroup()(void (*a1)(void))
{
  CodeGenBase.entity.getter();
  a1(0);
  static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
  swift_release();
  return v3;
}

uint64_t type metadata accessor for PhoneCallNLv4Contact()
{
  return self;
}

void *specialized PhoneCallNLv4Contact.init(contactConvertible:contactRole:)(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5)
{
  int v121 = a2;
  uint64_t v137 = type metadata accessor for UsoEntity_common_Quantifier.DefinedValues();
  uint64_t v129 = *(void *)(v137 - 8);
  __chkstk_darwin(v137);
  v113 = (char *)&v109 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_Quantifier.DefinedValues?, UsoEntity_common_Quantifier.DefinedValues?));
  __chkstk_darwin(v120);
  uint64_t v132 = (uint64_t)&v109 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v116 = (uint64_t)&v109 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v131 = (uint64_t)&v109 - v15;
  __chkstk_darwin(v14);
  uint64_t v136 = (uint64_t)&v109 - v16;
  uint64_t v133 = type metadata accessor for UsoEntity_common_SearchQualifier.DefinedValues();
  uint64_t v128 = *(void *)(v133 - 8);
  __chkstk_darwin(v133);
  v112 = (char *)&v109 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_SearchQualifier.DefinedValues?, UsoEntity_common_SearchQualifier.DefinedValues?));
  __chkstk_darwin(v119);
  uint64_t v19 = (char *)&v109 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  uint64_t v115 = (uint64_t)&v109 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v127 = (uint64_t)&v109 - v24;
  __chkstk_darwin(v23);
  uint64_t v135 = (uint64_t)&v109 - v25;
  uint64_t v26 = type metadata accessor for UsoEntity_common_ReferenceType.DefinedValues();
  uint64_t v126 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  v110 = (char *)&v109 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_ReferenceType.DefinedValues?, UsoEntity_common_ReferenceType.DefinedValues?));
  __chkstk_darwin(v118);
  uint64_t v138 = (uint64_t)&v109 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
  uint64_t v30 = __chkstk_darwin(v29 - 8);
  uint64_t v123 = (char *)&v109 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v125 = (uint64_t)&v109 - v33;
  __chkstk_darwin(v32);
  uint64_t v122 = (uint64_t)&v109 - v34;
  v142[3] = a4;
  v142[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v142);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(boxed_opaque_existential_1, a1, a4);
  v134 = a3;
  a3[8] = 0;
  unint64_t v36 = a3 + 8;
  *((unsigned char *)v36 - 48) = 38;
  v114 = v36 - 6;
  *(_OWORD *)(v36 - 3) = 0u;
  char v111 = v36 - 3;
  *(_OWORD *)(v36 - 5) = 0u;
  *((unsigned char *)v36 - 8) = 0;
  v36[1] = 0;
  v36[2] = 0;
  v36[3] = 1;
  bzero(v36 + 4, 0xB8uLL);
  v36[27] = 3;
  *((_DWORD *)v36 + 56) = 33554435;
  *((unsigned char *)v36 + 228) = 0;
  uint64_t v117 = v36 + 29;
  v36[29] = &_swiftEmptySetSingleton;
  *((_OWORD *)v36 + 15) = 0u;
  *((_OWORD *)v36 + 16) = 0u;
  v36[34] = 0;
  *((_WORD *)v36 + 140) = 1023;
  unint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 16);
  uint64_t v139 = a4;
  uint64_t v38 = v37(a4, a5);
  uint64_t v124 = v19;
  uint64_t v130 = boxed_opaque_existential_1;
  if (v38)
  {
    CodeGenBase.entity.getter();
    swift_release();
    type metadata accessor for UsoEntity_common_PersonRelationship();
    swift_retain();
    static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
    swift_release();
    if (v140[0])
    {
      UsoEntity_common_PersonRelationship.relationshipIdentifierOrLabel.getter();
      uint64_t v39 = a5;
      uint64_t v40 = v26;
      uint64_t v42 = v41;
      uint64_t v44 = v43;
      swift_release();
      swift_release();
      uint64_t v45 = v134;
      swift_beginAccess();
      v45[28] = v42;
      v45[29] = v44;
      uint64_t v26 = v40;
      a5 = v39;
      uint64_t v19 = v124;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
    }
  }
  uint64_t v46 = v139;
  UsoContactConvertible.emergencyType.getter();
  uint64_t v48 = v47;
  uint64_t v50 = v49;
  swift_beginAccess();
  int v51 = v134;
  uint64_t v52 = v134[34];
  unint64_t v53 = v134[35];
  v134[34] = v48;
  v51[35] = v50;
  outlined consume of PhoneCallEmergencyType?(v52, v53);
  uint64_t v54 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 56))(v46, a5);
  swift_beginAccess();
  v51[37] = v54;
  swift_bridgeObjectRelease();
  uint64_t v55 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 8))(v46, a5);
  uint64_t v57 = v56;
  swift_beginAccess();
  v51[8] = v55;
  v51[9] = v57;
  swift_bridgeObjectRelease();
  if ((*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(v46, a5))
  {
    uint64_t v58 = v122;
    dispatch thunk of UsoEntity_common_ReferenceType.definedValue.getter();
    swift_release();
  }
  else
  {
    uint64_t v58 = v122;
    __swift_storeEnumTagSinglePayload(v122, 1, 1, v26);
  }
  uint64_t v59 = v138;
  uint64_t v60 = v125;
  (*(void (**)(uint64_t, void, uint64_t))(v126 + 104))(v125, enum case for UsoEntity_common_ReferenceType.DefinedValues.common_ReferenceType_DefiniteReference(_:), v26);
  __swift_storeEnumTagSinglePayload(v60, 0, 1, v26);
  uint64_t v61 = v59 + *(int *)(v118 + 48);
  outlined init with copy of TransformationResult?(v58, v138, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
  uint64_t v62 = v138;
  outlined init with copy of TransformationResult?(v60, v61, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
  BOOL v63 = __swift_getEnumTagSinglePayload(v62, 1, v26) == 1;
  uint64_t v64 = v60;
  uint64_t v65 = (uint64_t)v123;
  if (v63)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v64, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
    uint64_t v62 = v138;
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v58, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
    if (__swift_getEnumTagSinglePayload(v61, 1, v26) != 1)
    {
LABEL_14:
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v62, &demangling cache variable for type metadata for (UsoEntity_common_ReferenceType.DefinedValues?, UsoEntity_common_ReferenceType.DefinedValues?));
      goto LABEL_17;
    }
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v62, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
    goto LABEL_16;
  }
  outlined init with copy of TransformationResult?(v62, (uint64_t)v123, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v61, 1, v26);
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v125, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v58, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
    (*(void (**)(uint64_t, uint64_t))(v126 + 8))(v65, v26);
    goto LABEL_14;
  }
  uint64_t v67 = v126;
  os_log_type_t v68 = v110;
  (*(void (**)(char *, uint64_t, uint64_t))(v126 + 32))(v110, v61, v26);
  lazy protocol witness table accessor for type ContactQuery and conformance ContactQuery(&lazy protocol witness table cache variable for type UsoEntity_common_ReferenceType.DefinedValues and conformance UsoEntity_common_ReferenceType.DefinedValues, (void (*)(uint64_t))&type metadata accessor for UsoEntity_common_ReferenceType.DefinedValues);
  LODWORD(v118) = dispatch thunk of static Equatable.== infix(_:_:)();
  unint64_t v69 = *(void (**)(char *, uint64_t))(v67 + 8);
  v69(v68, v26);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v125, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v122, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
  v69(v123, v26);
  uint64_t v19 = v124;
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v62, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
  if (v118)
  {
LABEL_16:
    uint64_t v70 = v114;
    swift_beginAccess();
    unsigned char *v70 = 31;
  }
LABEL_17:
  if ((*(uint64_t (**)(uint64_t, uint64_t))(a5 + 32))(v139, a5))
  {
    CodeGenBase.entity.getter();
    swift_release();
    type metadata accessor for UsoEntity_common_PhoneNumber();
    swift_retain();
    static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
    swift_release();
    if (v140[0])
    {
      dispatch thunk of UsoEntity_common_PhoneNumber.value.getter();
      uint64_t v72 = v71;
      swift_bridgeObjectRelease();
      if (v72)
      {
        uint64_t v73 = dispatch thunk of UsoEntity_common_PhoneNumber.value.getter();
        uint64_t v138 = a5;
        unint64_t v74 = v134;
        uint64_t v76 = v75;
        swift_release();
        swift_beginAccess();
        v74[26] = v73;
        v74[27] = v76;
        a5 = v138;
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_release();
      }
      uint64_t v19 = v124;
    }
    type metadata accessor for UsoEntity_common_EmailAddress();
    swift_retain();
    static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
    swift_release();
    if (v140[0])
    {
      dispatch thunk of UsoEntity_common_EmailAddress.value.getter();
      uint64_t v78 = v77;
      swift_bridgeObjectRelease();
      if (v78)
      {
        uint64_t v79 = dispatch thunk of UsoEntity_common_EmailAddress.value.getter();
        uint64_t v81 = v80;
        swift_release();
        swift_release();
        swift_beginAccess();
        uint64_t v82 = v134;
        v134[5] = v79;
        v82[6] = v81;
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_release();
        swift_release();
      }
      uint64_t v19 = v124;
    }
    else
    {
      swift_release();
    }
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t))(a5 + 40))(v139, a5))
  {
    dispatch thunk of UsoEntity_common_SearchQualifier.definedValue.getter();
    swift_release();
  }
  else
  {
    __swift_storeEnumTagSinglePayload(v135, 1, 1, v133);
  }
  uint64_t v83 = v127;
  uint64_t v84 = v133;
  (*(void (**)(uint64_t, void, uint64_t))(v128 + 104))(v127, enum case for UsoEntity_common_SearchQualifier.DefinedValues.common_SearchQualifier_Exactly(_:), v133);
  __swift_storeEnumTagSinglePayload(v83, 0, 1, v84);
  uint64_t v85 = (uint64_t)&v19[*(int *)(v119 + 48)];
  outlined init with copy of TransformationResult?(v135, (uint64_t)v19, &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
  outlined init with copy of TransformationResult?(v83, v85, &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v19, 1, v84) == 1)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v83, &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v135, &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
    if (__swift_getEnumTagSinglePayload(v85, 1, v133) == 1)
    {
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v19, &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
      __int16 v86 = 256;
      goto LABEL_41;
    }
LABEL_37:
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v19, &demangling cache variable for type metadata for (UsoEntity_common_SearchQualifier.DefinedValues?, UsoEntity_common_SearchQualifier.DefinedValues?));
    __int16 v86 = 0;
    goto LABEL_41;
  }
  uint64_t v87 = v115;
  outlined init with copy of TransformationResult?((uint64_t)v19, v115, &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
  if (__swift_getEnumTagSinglePayload(v85, 1, v133) == 1)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v127, &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v135, &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
    (*(void (**)(uint64_t, uint64_t))(v128 + 8))(v87, v133);
    goto LABEL_37;
  }
  uint64_t v88 = v128;
  char v89 = v112;
  uint64_t v90 = v85;
  uint64_t v91 = v133;
  (*(void (**)(char *, uint64_t, uint64_t))(v128 + 32))(v112, v90, v133);
  lazy protocol witness table accessor for type ContactQuery and conformance ContactQuery(&lazy protocol witness table cache variable for type UsoEntity_common_SearchQualifier.DefinedValues and conformance UsoEntity_common_SearchQualifier.DefinedValues, (void (*)(uint64_t))&type metadata accessor for UsoEntity_common_SearchQualifier.DefinedValues);
  char v92 = dispatch thunk of static Equatable.== infix(_:_:)();
  v93 = *(void (**)(char *, uint64_t))(v88 + 8);
  v93(v89, v91);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v127, &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v135, &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
  v93((char *)v87, v91);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v19, &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
  if (v92) {
    __int16 v86 = 256;
  }
  else {
    __int16 v86 = 0;
  }
LABEL_41:
  uint64_t v94 = (uint64_t)(v36 + 30);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(a5 + 48))(v139, a5)
    && (uint64_t v95 = dispatch thunk of CodeGenGlobalArgs.usoQuantifier.getter(), swift_release(), v95))
  {
    dispatch thunk of UsoEntity_common_Quantifier.definedValue.getter();
    swift_release();
  }
  else
  {
    __swift_storeEnumTagSinglePayload(v136, 1, 1, v137);
  }
  uint64_t v96 = (uint64_t)v36 + 226;
  uint64_t v97 = v131;
  uint64_t v98 = v137;
  (*(void (**)(uint64_t, void, uint64_t))(v129 + 104))(v131, enum case for UsoEntity_common_Quantifier.DefinedValues.common_Quantifier_None(_:), v137);
  __swift_storeEnumTagSinglePayload(v97, 0, 1, v98);
  uint64_t v99 = v132;
  uint64_t v100 = v132 + *(int *)(v120 + 48);
  outlined init with copy of TransformationResult?(v136, v132, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
  outlined init with copy of TransformationResult?(v97, v100, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
  if (__swift_getEnumTagSinglePayload(v99, 1, v98) == 1)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v131, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v136, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
    if (__swift_getEnumTagSinglePayload(v100, 1, v137) == 1)
    {
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v132, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
      int v101 = 0x10000;
      goto LABEL_54;
    }
LABEL_50:
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v132, &demangling cache variable for type metadata for (UsoEntity_common_Quantifier.DefinedValues?, UsoEntity_common_Quantifier.DefinedValues?));
    int v101 = 0;
    goto LABEL_54;
  }
  uint64_t v102 = v116;
  outlined init with copy of TransformationResult?(v132, v116, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
  if (__swift_getEnumTagSinglePayload(v100, 1, v137) == 1)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v131, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v136, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
    (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v102, v137);
    goto LABEL_50;
  }
  uint64_t v103 = v129;
  uint64_t v104 = v113;
  uint64_t v105 = v137;
  (*(void (**)(char *, uint64_t, uint64_t))(v129 + 32))(v113, v100, v137);
  lazy protocol witness table accessor for type ContactQuery and conformance ContactQuery(&lazy protocol witness table cache variable for type UsoEntity_common_Quantifier.DefinedValues and conformance UsoEntity_common_Quantifier.DefinedValues, (void (*)(uint64_t))&type metadata accessor for UsoEntity_common_Quantifier.DefinedValues);
  LODWORD(v139) = dispatch thunk of static Equatable.== infix(_:_:)();
  v106 = *(void (**)(char *, uint64_t))(v103 + 8);
  v106(v104, v105);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v131, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v136, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
  v106((char *)v102, v105);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v132, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
  if (v139) {
    int v101 = 0x10000;
  }
  else {
    int v101 = 0;
  }
LABEL_54:
  __int16 v107 = v86 | v121 | (unsigned __int16)v101;
  swift_beginAccess();
  *(unsigned char *)(v96 + 2) = BYTE2(v101);
  *(_WORD *)uint64_t v96 = v107;
  outlined init with copy of SignalProviding((uint64_t)v142, (uint64_t)v140);
  char v141 = 2;
  swift_beginAccess();
  outlined assign with take of PhoneCallNLIntent?((uint64_t)v140, v94, &demangling cache variable for type metadata for BackingContact?);
  swift_endAccess();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v142);
  return v134;
}

uint64_t specialized PhoneCallNLv4Contact.init(contactConvertible:contactRole:)(uint64_t a1, int a2, uint64_t a3)
{
  int v120 = a2;
  uint64_t v131 = type metadata accessor for UsoEntity_common_Quantifier.DefinedValues();
  OUTLINED_FUNCTION_0_0();
  uint64_t v125 = v5;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_3_1();
  uint64_t v109 = v7;
  uint64_t v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_Quantifier.DefinedValues?, UsoEntity_common_Quantifier.DefinedValues?));
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_3_1();
  uint64_t v129 = v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
  __chkstk_darwin(v10 - 8);
  OUTLINED_FUNCTION_5_8();
  uint64_t v113 = v11;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v12);
  uint64_t v118 = (char *)&v104 - v13;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_10_14();
  uint64_t v127 = v15;
  OUTLINED_FUNCTION_36();
  uint64_t v16 = type metadata accessor for UsoEntity_common_SearchQualifier.DefinedValues();
  OUTLINED_FUNCTION_0_0();
  uint64_t v124 = v17;
  __chkstk_darwin(v18);
  OUTLINED_FUNCTION_3_1();
  uint64_t v108 = v19;
  uint64_t v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_SearchQualifier.DefinedValues?, UsoEntity_common_SearchQualifier.DefinedValues?));
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v20);
  OUTLINED_FUNCTION_3_1();
  uint64_t v128 = v21;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
  __chkstk_darwin(v22 - 8);
  OUTLINED_FUNCTION_5_8();
  uint64_t v112 = v23;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v24);
  uint64_t v126 = (uint64_t)&v104 - v25;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v26);
  OUTLINED_FUNCTION_10_14();
  uint64_t v130 = v27;
  OUTLINED_FUNCTION_36();
  uint64_t v28 = type metadata accessor for UsoEntity_common_ReferenceType.DefinedValues();
  OUTLINED_FUNCTION_0_0();
  uint64_t v123 = v29;
  __chkstk_darwin(v30);
  OUTLINED_FUNCTION_3_1();
  uint64_t v106 = v31;
  uint64_t v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_ReferenceType.DefinedValues?, UsoEntity_common_ReferenceType.DefinedValues?));
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v32);
  OUTLINED_FUNCTION_3_1();
  uint64_t v132 = v33;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
  uint64_t v35 = __chkstk_darwin(v34 - 8);
  unint64_t v37 = (char *)&v104 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  uint64_t v122 = (uint64_t)&v104 - v38;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v39);
  OUTLINED_FUNCTION_10_14();
  uint64_t v121 = v40;
  OUTLINED_FUNCTION_36();
  v135[3] = type metadata accessor for UsoEntity_common_Agent();
  v135[4] = &protocol witness table for UsoEntity_common_Agent;
  v135[0] = a1;
  *(void *)(a3 + 64) = 0;
  uint64_t v41 = a3 + 64;
  *(unsigned char *)(a3 + 16) = 38;
  char v111 = (unsigned char *)(a3 + 16);
  *(_OWORD *)(a3 + 40) = 0u;
  uint64_t v107 = a3 + 40;
  *(_OWORD *)(a3 + 24) = 0u;
  *(unsigned char *)(a3 + 56) = 0;
  *(void *)(a3 + 72) = 0;
  *(void *)(a3 + 80) = 0;
  *(void *)(a3 + 88) = 1;
  uint64_t v114 = a3 + 272;
  bzero((void *)(a3 + 96), 0xB8uLL);
  *(void *)(a3 + 280) = 3;
  *(_DWORD *)(a3 + 288) = 33554435;
  *(unsigned char *)(a3 + 292) = 0;
  *(void *)(a3 + 296) = &_swiftEmptySetSingleton;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(void *)(a3 + 336) = 0;
  *(_WORD *)(a3 + 344) = 1023;
  uint64_t v42 = UsoEntity_common_Agent.identifyingRelationship.getter();
  uint64_t v117 = v16;
  if (v42)
  {
    CodeGenBase.entity.getter();
    swift_release();
    type metadata accessor for UsoEntity_common_PersonRelationship();
    swift_retain();
    OUTLINED_FUNCTION_11_17();
    swift_release();
    if (v133[0])
    {
      uint64_t v105 = a3;
      UsoEntity_common_PersonRelationship.relationshipIdentifierOrLabel.getter();
      uint64_t v44 = v43;
      v110 = v37;
      uint64_t v46 = v45;
      swift_release();
      swift_release();
      a3 = v105;
      OUTLINED_FUNCTION_6_16();
      *(void *)(a3 + 224) = v44;
      *(void *)(a3 + 232) = v46;
      uint64_t v16 = v117;
      unint64_t v37 = v110;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
    }
  }
  uint64_t v47 = specialized UsoContactConvertible.emergencyType.getter();
  uint64_t v49 = v48;
  OUTLINED_FUNCTION_6_16();
  uint64_t v50 = *(void *)(a3 + 272);
  unint64_t v51 = *(void *)(a3 + 280);
  *(void *)(a3 + 272) = v47;
  *(void *)(a3 + 280) = v49;
  outlined consume of PhoneCallEmergencyType?(v50, v51);
  uint64_t v52 = specialized UsoContactConvertible.vocabularyAppsBundleSet.getter();
  OUTLINED_FUNCTION_6_16();
  *(void *)(a3 + 296) = v52;
  swift_bridgeObjectRelease();
  uint64_t v53 = dispatch thunk of UsoEntity_common_Agent.name.getter();
  uint64_t v55 = v54;
  OUTLINED_FUNCTION_6_16();
  *(void *)(a3 + 64) = v53;
  *(void *)(a3 + 72) = v55;
  swift_bridgeObjectRelease();
  if (dispatch thunk of CodeGenGlobalArgs.usoReferenceType.getter())
  {
    uint64_t v56 = v121;
    dispatch thunk of UsoEntity_common_ReferenceType.definedValue.getter();
    swift_release();
  }
  else
  {
    uint64_t v56 = v121;
    __swift_storeEnumTagSinglePayload(v121, 1, 1, v28);
  }
  uint64_t v57 = v132;
  uint64_t v58 = v122;
  (*(void (**)(uint64_t, void, uint64_t))(v123 + 104))(v122, enum case for UsoEntity_common_ReferenceType.DefinedValues.common_ReferenceType_DefiniteReference(_:), v28);
  __swift_storeEnumTagSinglePayload(v58, 0, 1, v28);
  uint64_t v59 = v57 + *(int *)(v115 + 48);
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(v56, v132, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
  uint64_t v60 = v132;
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(v58, v59, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
  OUTLINED_FUNCTION_28_6(v60, 1, v28);
  if (v62)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v58, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
    uint64_t v60 = v132;
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v56, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
    OUTLINED_FUNCTION_28_6(v59, 1, v28);
    if (v62)
    {
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v60, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
      uint64_t v61 = v127;
LABEL_18:
      uint64_t v67 = v111;
      OUTLINED_FUNCTION_6_16();
      *uint64_t v67 = 31;
      goto LABEL_19;
    }
LABEL_16:
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v60, &demangling cache variable for type metadata for (UsoEntity_common_ReferenceType.DefinedValues?, UsoEntity_common_ReferenceType.DefinedValues?));
    uint64_t v61 = v127;
    goto LABEL_19;
  }
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(v60, (uint64_t)v37, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
  OUTLINED_FUNCTION_28_6(v59, 1, v28);
  if (v62)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v122, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v56, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
    (*(void (**)(char *, uint64_t))(v123 + 8))(v37, v28);
    goto LABEL_16;
  }
  uint64_t v63 = v123;
  uint64_t v64 = *(void (**)(uint64_t, uint64_t, uint64_t))(v123 + 32);
  v110 = v37;
  v64(v106, v59, v28);
  lazy protocol witness table accessor for type UsoEntity_common_Quantifier.DefinedValues and conformance UsoEntity_common_Quantifier.DefinedValues(&lazy protocol witness table cache variable for type UsoEntity_common_ReferenceType.DefinedValues and conformance UsoEntity_common_ReferenceType.DefinedValues, (void (*)(uint64_t))&type metadata accessor for UsoEntity_common_ReferenceType.DefinedValues);
  LODWORD(v115) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v65 = v16;
  uint64_t v66 = *(void (**)(void))(v63 + 8);
  OUTLINED_FUNCTION_10_8();
  v66();
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v122, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v121, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
  OUTLINED_FUNCTION_10_8();
  v66();
  uint64_t v16 = v65;
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v60, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
  uint64_t v61 = v127;
  if (v115) {
    goto LABEL_18;
  }
LABEL_19:
  if (dispatch thunk of UsoEntity_common_Agent.specifyingContactAddress.getter())
  {
    CodeGenBase.entity.getter();
    swift_release();
    type metadata accessor for UsoEntity_common_PhoneNumber();
    swift_retain();
    OUTLINED_FUNCTION_11_17();
    swift_release();
    if (v133[0])
    {
      dispatch thunk of UsoEntity_common_PhoneNumber.value.getter();
      uint64_t v69 = v68;
      swift_bridgeObjectRelease();
      if (v69)
      {
        uint64_t v70 = dispatch thunk of UsoEntity_common_PhoneNumber.value.getter();
        uint64_t v72 = v71;
        swift_release();
        OUTLINED_FUNCTION_6_16();
        *(void *)(a3 + 208) = v70;
        *(void *)(a3 + 216) = v72;
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_release();
      }
      uint64_t v61 = v127;
    }
    type metadata accessor for UsoEntity_common_EmailAddress();
    swift_retain();
    OUTLINED_FUNCTION_11_17();
    swift_release();
    if (v133[0])
    {
      dispatch thunk of UsoEntity_common_EmailAddress.value.getter();
      uint64_t v74 = v73;
      swift_bridgeObjectRelease();
      if (v74)
      {
        uint64_t v75 = dispatch thunk of UsoEntity_common_EmailAddress.value.getter();
        uint64_t v77 = v76;
        swift_release();
        swift_release();
        OUTLINED_FUNCTION_6_16();
        *(void *)(a3 + 40) = v75;
        *(void *)(a3 + 48) = v77;
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_release();
        swift_release();
      }
      uint64_t v61 = v127;
    }
    else
    {
      swift_release();
    }
    uint64_t v16 = v117;
  }
  if (dispatch thunk of CodeGenGlobalArgs.usoSearchQualifier.getter())
  {
    dispatch thunk of UsoEntity_common_SearchQualifier.definedValue.getter();
    swift_release();
  }
  else
  {
    __swift_storeEnumTagSinglePayload(v130, 1, 1, v16);
  }
  uint64_t v78 = v126;
  (*(void (**)(uint64_t, void, uint64_t))(v124 + 104))(v126, enum case for UsoEntity_common_SearchQualifier.DefinedValues.common_SearchQualifier_Exactly(_:), v16);
  __swift_storeEnumTagSinglePayload(v78, 0, 1, v16);
  uint64_t v79 = v128;
  uint64_t v80 = v128 + *(int *)(v116 + 48);
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(v130, v128, &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(v78, v80, &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
  OUTLINED_FUNCTION_28_6(v79, 1, v16);
  if (v62)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v126, &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v130, &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
    OUTLINED_FUNCTION_28_6(v80, 1, v16);
    if (v62)
    {
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v128, &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
      int v81 = 256;
LABEL_47:
      LODWORD(v132) = v81;
      goto LABEL_48;
    }
  }
  else
  {
    uint64_t v82 = v112;
    _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(v128, v112, &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
    OUTLINED_FUNCTION_28_6(v80, 1, v16);
    if (!v83)
    {
      uint64_t v84 = v124;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v124 + 32))(v108, v80, v16);
      lazy protocol witness table accessor for type UsoEntity_common_Quantifier.DefinedValues and conformance UsoEntity_common_Quantifier.DefinedValues(&lazy protocol witness table cache variable for type UsoEntity_common_SearchQualifier.DefinedValues and conformance UsoEntity_common_SearchQualifier.DefinedValues, (void (*)(uint64_t))&type metadata accessor for UsoEntity_common_SearchQualifier.DefinedValues);
      char v85 = dispatch thunk of static Equatable.== infix(_:_:)();
      __int16 v86 = *(void (**)(void))(v84 + 8);
      OUTLINED_FUNCTION_10_8();
      v86();
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v126, &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v130, &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
      uint64_t v61 = v127;
      OUTLINED_FUNCTION_10_8();
      v86();
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v128, &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
      if (v85) {
        int v81 = 256;
      }
      else {
        int v81 = 0;
      }
      goto LABEL_47;
    }
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v126, &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v130, &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
    (*(void (**)(uint64_t, uint64_t))(v124 + 8))(v82, v16);
  }
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v128, &demangling cache variable for type metadata for (UsoEntity_common_SearchQualifier.DefinedValues?, UsoEntity_common_SearchQualifier.DefinedValues?));
  LODWORD(v132) = 0;
LABEL_48:
  uint64_t v87 = v41 + 240;
  if (UsoEntity_common_Agent.asCommonPerson()()
    && (uint64_t v88 = dispatch thunk of CodeGenGlobalArgs.usoQuantifier.getter(), swift_release(), v88))
  {
    dispatch thunk of UsoEntity_common_Quantifier.definedValue.getter();
    swift_release();
  }
  else
  {
    __swift_storeEnumTagSinglePayload(v61, 1, 1, v131);
  }
  uint64_t v89 = v41 + 226;
  uint64_t v90 = (uint64_t)v118;
  uint64_t v91 = v131;
  (*(void (**)(char *, void, uint64_t))(v125 + 104))(v118, enum case for UsoEntity_common_Quantifier.DefinedValues.common_Quantifier_None(_:), v131);
  __swift_storeEnumTagSinglePayload(v90, 0, 1, v91);
  uint64_t v92 = v129;
  uint64_t v93 = v129 + *(int *)(v119 + 48);
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(v61, v129, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(v90, v93, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
  OUTLINED_FUNCTION_28_6(v92, 1, v91);
  if (v62)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v90, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v61, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
    OUTLINED_FUNCTION_28_6(v93, 1, v131);
    if (v62)
    {
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v129, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
      int v94 = 0x10000;
      goto LABEL_64;
    }
LABEL_60:
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v129, &demangling cache variable for type metadata for (UsoEntity_common_Quantifier.DefinedValues?, UsoEntity_common_Quantifier.DefinedValues?));
    int v94 = 0;
    goto LABEL_64;
  }
  uint64_t v95 = v113;
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(v129, v113, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
  OUTLINED_FUNCTION_28_6(v93, 1, v131);
  if (v96)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v90, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v61, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
    (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v95, v131);
    goto LABEL_60;
  }
  uint64_t v130 = v87;
  uint64_t v97 = v125;
  uint64_t v98 = v109;
  uint64_t v99 = v93;
  uint64_t v100 = v131;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v125 + 32))(v109, v99, v131);
  lazy protocol witness table accessor for type UsoEntity_common_Quantifier.DefinedValues and conformance UsoEntity_common_Quantifier.DefinedValues(&lazy protocol witness table cache variable for type UsoEntity_common_Quantifier.DefinedValues and conformance UsoEntity_common_Quantifier.DefinedValues, (void (*)(uint64_t))&type metadata accessor for UsoEntity_common_Quantifier.DefinedValues);
  LODWORD(v128) = dispatch thunk of static Equatable.== infix(_:_:)();
  int v101 = *(void (**)(uint64_t, uint64_t))(v97 + 8);
  v101(v98, v100);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v90, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v61, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
  v101(v95, v100);
  uint64_t v87 = v130;
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v129, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
  if (v128) {
    int v94 = 0x10000;
  }
  else {
    int v94 = 0;
  }
LABEL_64:
  __int16 v102 = v132 | v120 | (unsigned __int16)v94;
  OUTLINED_FUNCTION_6_16();
  *(unsigned char *)(v89 + 2) = BYTE2(v94);
  *(_WORD *)uint64_t v89 = v102;
  outlined init with copy of SignalProviding((uint64_t)v135, (uint64_t)v133);
  char v134 = 2;
  swift_beginAccess();
  outlined assign with take of BackingContact?((uint64_t)v133, v87);
  swift_endAccess();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v135);
  return a3;
}

uint64_t UsoEntity_common_Agent.identifyingRelationship.getter()
{
  uint64_t result = UsoEntity_common_Agent.asCommonPerson()();
  if (result)
  {
    uint64_t v1 = dispatch thunk of UsoEntity_common_Person.identifyingRelationship.getter();
    swift_release();
    return v1;
  }
  return result;
}

uint64_t specialized UsoContactConvertible.emergencyType.getter()
{
  uint64_t v102 = type metadata accessor for IdentifierValue();
  uint64_t v97 = *(void *)(v102 - 8);
  __chkstk_darwin(v102);
  int v101 = (char *)&v95 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for IdentifierNamespace();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v107 = (char *)&v95 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (IdentifierNamespace?, IdentifierNamespace?));
  uint64_t v5 = __chkstk_darwin(v119);
  uint64_t v7 = (char *)&v95 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v95 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifierNamespace?);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v105 = (void (**)(char *, uint64_t, uint64_t))((char *)&v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v95 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  v110 = (uint64_t (**)(char *, uint64_t))((char *)&v95 - v17);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v106 = (uint64_t)&v95 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v95 - v21;
  __chkstk_darwin(v20);
  uint64_t v108 = (uint64_t)&v95 - v23;
  uint64_t v120 = type metadata accessor for UsoIdentifier();
  uint64_t v24 = *(void *)(v120 - 8);
  uint64_t v25 = __chkstk_darwin(v120);
  uint64_t v27 = (char *)&v95 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v121 = (char *)&v95 - v28;
  uint64_t v125 = _swiftEmptyArrayStorage;
  uint64_t v29 = specialized UsoContactConvertible.nameIdentifiers.getter();
  uint64_t v30 = v29[2];
  uint64_t v118 = v9;
  uint64_t v99 = v0;
  uint64_t v117 = v24;
  uint64_t v98 = v3;
  if (v30)
  {
    char v96 = v22;
    uint64_t v32 = *(char **)(v24 + 16);
    uint64_t v31 = v24 + 16;
    uint64_t v115 = v32;
    unint64_t v33 = (*(unsigned __int8 *)(v31 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 64);
    uint64_t v95 = v29;
    uint64_t v34 = (char *)v29 + v33;
    uint64_t v35 = *(void *)(v31 + 56);
    uint64_t v113 = (void (**)(char *, void, uint64_t))(v3 + 104);
    uint64_t v114 = v35;
    uint64_t v100 = (void (**)(char *, uint64_t, uint64_t))(v3 + 32);
    LODWORD(v112) = enum case for IdentifierNamespace.nsEmergencyOrganization(_:);
    uint64_t v104 = (void (**)(void (**)(char *, uint64_t, uint64_t), uint64_t))(v3 + 8);
    uint64_t v116 = (void (*)(char *, char *, uint64_t))v31;
    char v111 = (void (**)(char *, uint64_t))(v31 - 8);
    uint64_t v36 = v120;
    unint64_t v37 = v110;
    *(void *)&long long v103 = v27;
    while (1)
    {
      ((void (*)(char *, char *, uint64_t))v115)(v27, v34, v36);
      UsoIdentifier.namespaceSemantic.getter();
      (*v113)(v15, v112, v2);
      __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v2);
      uint64_t v38 = (uint64_t)&v7[*(int *)(v119 + 48)];
      _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0((uint64_t)v37, (uint64_t)v7, &demangling cache variable for type metadata for IdentifierNamespace?);
      _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0((uint64_t)v15, v38, &demangling cache variable for type metadata for IdentifierNamespace?);
      if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v2) == 1) {
        break;
      }
      uint64_t v39 = v105;
      _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0((uint64_t)v7, (uint64_t)v105, &demangling cache variable for type metadata for IdentifierNamespace?);
      if (__swift_getEnumTagSinglePayload(v38, 1, v2) == 1)
      {
        outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v15, &demangling cache variable for type metadata for IdentifierNamespace?);
        outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v37, &demangling cache variable for type metadata for IdentifierNamespace?);
        (*v104)(v39, v2);
        uint64_t v27 = (char *)v103;
LABEL_8:
        outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v7, &demangling cache variable for type metadata for (IdentifierNamespace?, IdentifierNamespace?));
        goto LABEL_15;
      }
      uint64_t v40 = v107;
      (*v100)(v107, v38, v2);
      lazy protocol witness table accessor for type UsoEntity_common_Quantifier.DefinedValues and conformance UsoEntity_common_Quantifier.DefinedValues(&lazy protocol witness table cache variable for type IdentifierNamespace and conformance IdentifierNamespace, (void (*)(uint64_t))&type metadata accessor for IdentifierNamespace);
      char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v42 = *v104;
      uint64_t v43 = (void (**)(char *, uint64_t, uint64_t))v40;
      uint64_t v9 = v118;
      (*v104)(v43, v2);
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v15, &demangling cache variable for type metadata for IdentifierNamespace?);
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v110, &demangling cache variable for type metadata for IdentifierNamespace?);
      v42(v39, v2);
      unint64_t v37 = v110;
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v7, &demangling cache variable for type metadata for IdentifierNamespace?);
      uint64_t v27 = (char *)v103;
      if (v41) {
        goto LABEL_10;
      }
LABEL_15:
      uint64_t v36 = v120;
      (*v111)(v27, v120);
      v34 += v114;
      if (!--v30)
      {
        swift_bridgeObjectRelease();
        uint64_t v22 = v96;
        goto LABEL_18;
      }
    }
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v15, &demangling cache variable for type metadata for IdentifierNamespace?);
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v37, &demangling cache variable for type metadata for IdentifierNamespace?);
    if (__swift_getEnumTagSinglePayload(v38, 1, v2) == 1)
    {
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v7, &demangling cache variable for type metadata for IdentifierNamespace?);
LABEL_10:
      uint64_t v44 = UsoIdentifier.value.getter();
      uint64_t v46 = v45;
      uint64_t v47 = v125;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v109 = v46;
      uint64_t v49 = v44;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v47 = v53;
      }
      unint64_t v50 = v47[2];
      if (v50 >= v47[3] >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v47 = v54;
      }
      v47[2] = v50 + 1;
      unint64_t v51 = &v47[2 * v50];
      uint64_t v52 = v109;
      v51[4] = v49;
      v51[5] = v52;
      uint64_t v125 = v47;
      uint64_t v9 = v118;
      unint64_t v37 = v110;
      goto LABEL_15;
    }
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
LABEL_18:
  uint64_t v55 = (char *)specialized UsoContactConvertible.nameIdentifiers.getter();
  uint64_t v56 = *((void *)v55 + 2);
  uint64_t v57 = v108;
  if (v56)
  {
    uint64_t v116 = *(void (**)(char *, char *, uint64_t))(v117 + 16);
    unint64_t v58 = (*(unsigned __int8 *)(v117 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v117 + 80);
    char v96 = v55;
    uint64_t v59 = &v55[v58];
    uint64_t v115 = *(char **)(v117 + 72);
    LODWORD(v114) = enum case for IdentifierNamespace.nsPhoneCallContactName(_:);
    uint64_t v113 = (void (**)(char *, void, uint64_t))(v98 + 104);
    uint64_t v105 = (void (**)(char *, uint64_t, uint64_t))(v98 + 32);
    uint64_t v112 = (void (**)(uint64_t, uint64_t))(v98 + 8);
    uint64_t v60 = (void (**)(char *, uint64_t))(v117 + 8);
    v110 = (uint64_t (**)(char *, uint64_t))(v97 + 88);
    LODWORD(v109) = enum case for IdentifierValue.vEmergencyServices(_:);
    LODWORD(v104) = enum case for IdentifierValue.vEmergencyContact(_:);
    uint64_t v100 = (void (**)(char *, uint64_t, uint64_t))(v97 + 8);
    long long v103 = xmmword_467750;
    uint64_t v61 = v120;
    v117 += 16;
    do
    {
      v116(v121, v59, v61);
      UsoIdentifier.namespaceSemantic.getter();
      (*v113)(v22, v114, v2);
      __swift_storeEnumTagSinglePayload((uint64_t)v22, 0, 1, v2);
      uint64_t v62 = (uint64_t)&v9[*(int *)(v119 + 48)];
      _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(v57, (uint64_t)v9, &demangling cache variable for type metadata for IdentifierNamespace?);
      _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0((uint64_t)v22, v62, &demangling cache variable for type metadata for IdentifierNamespace?);
      if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v2) == 1)
      {
        outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v22, &demangling cache variable for type metadata for IdentifierNamespace?);
        outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v57, &demangling cache variable for type metadata for IdentifierNamespace?);
        if (__swift_getEnumTagSinglePayload(v62, 1, v2) != 1) {
          goto LABEL_25;
        }
        outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v9, &demangling cache variable for type metadata for IdentifierNamespace?);
      }
      else
      {
        uint64_t v63 = v106;
        _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0((uint64_t)v9, v106, &demangling cache variable for type metadata for IdentifierNamespace?);
        if (__swift_getEnumTagSinglePayload(v62, 1, v2) == 1)
        {
          outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v22, &demangling cache variable for type metadata for IdentifierNamespace?);
          outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v57, &demangling cache variable for type metadata for IdentifierNamespace?);
          (*v112)(v63, v2);
LABEL_25:
          outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v9, &demangling cache variable for type metadata for (IdentifierNamespace?, IdentifierNamespace?));
LABEL_26:
          uint64_t v61 = v120;
          (*v60)(v121, v120);
          goto LABEL_42;
        }
        uint64_t v64 = v107;
        (*v105)(v107, v62, v2);
        lazy protocol witness table accessor for type UsoEntity_common_Quantifier.DefinedValues and conformance UsoEntity_common_Quantifier.DefinedValues(&lazy protocol witness table cache variable for type IdentifierNamespace and conformance IdentifierNamespace, (void (*)(uint64_t))&type metadata accessor for IdentifierNamespace);
        uint64_t v65 = v63;
        LODWORD(v111) = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v66 = *v112;
        uint64_t v67 = v64;
        uint64_t v9 = v118;
        (*v112)((uint64_t)v67, v2);
        outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v22, &demangling cache variable for type metadata for IdentifierNamespace?);
        outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v108, &demangling cache variable for type metadata for IdentifierNamespace?);
        uint64_t v68 = v65;
        uint64_t v57 = v108;
        v66(v68, v2);
        outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v9, &demangling cache variable for type metadata for IdentifierNamespace?);
        if ((v111 & 1) == 0) {
          goto LABEL_26;
        }
      }
      uint64_t v69 = v101;
      UsoIdentifier.valueSemantic.getter();
      int v70 = (*v110)(v69, v102);
      if (v70 == v109)
      {
        uint64_t v71 = v125;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v71 = v75;
        }
        unint64_t v72 = v71[2];
        if (v72 >= v71[3] >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v71 = v76;
        }
        v71[2] = v72 + 1;
        *(_OWORD *)&v71[2 * v72 + 4] = v103;
      }
      else
      {
        if (v70 != v104)
        {
          uint64_t v61 = v120;
          (*v60)(v121, v120);
          ((void (*)(char *, uint64_t))*v100)(v101, v102);
          goto LABEL_42;
        }
        uint64_t v71 = v125;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v71 = v77;
        }
        unint64_t v73 = v71[2];
        if (v73 >= v71[3] >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v71 = v78;
        }
        v71[2] = v73 + 1;
        uint64_t v74 = &v71[2 * v73];
        v74[4] = 0;
        v74[5] = 0;
      }
      uint64_t v125 = v71;
      uint64_t v61 = v120;
      (*v60)(v121, v120);
      uint64_t v9 = v118;
LABEL_42:
      uint64_t v59 = &v115[(void)v59];
      --v56;
    }
    while (v56);
  }
  swift_bridgeObjectRelease();
  if (dispatch thunk of UsoEntity_common_Agent.specifyingContactAddress.getter())
  {
    CodeGenBase.entity.getter();
    swift_release();
  }
  type metadata accessor for UsoEntity_common_PhoneNumber();
  static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
  swift_release();
  if (v123)
  {
    swift_retain();
    UsoEntity_common_PhoneNumber.tags.getter();
    uint64_t v80 = v79;
    swift_release();
  }
  else
  {
    uint64_t v80 = _swiftEmptyArrayStorage;
  }
  BOOL v81 = specialized Sequence<>.contains(_:)((uint64_t)v80);
  swift_bridgeObjectRelease();
  if (v81)
  {
    uint64_t v82 = v125;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v82 = v93;
    }
    unint64_t v83 = v82[2];
    if (v83 >= v82[3] >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v82 = v94;
    }
    v82[2] = v83 + 1;
    *(_OWORD *)&v82[2 * v83 + 4] = xmmword_46A560;
    uint64_t v125 = v82;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v84 = type metadata accessor for Logger();
  __swift_project_value_buffer(v84, (uint64_t)static Logger.siriPhone);
  char v85 = Logger.logObject.getter();
  os_log_type_t v86 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v85, v86))
  {
    uint64_t v87 = swift_slowAlloc();
    uint64_t v122 = swift_slowAlloc();
    uint64_t v123 = 0;
    *(_DWORD *)uint64_t v87 = 136315394;
    unint64_t v124 = 0xE000000000000000;
    DefaultStringInterpolation.appendInterpolation(type:tags:function:)((uint64_t)&type metadata for String, (uint64_t)&outlined read-only object #0 of specialized UsoContactConvertible.emergencyType.getter, 0, 0);
    uint64_t v123 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v123, v124, &v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v87 + 12) = 2080;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v88 = Array.description.getter();
    unint64_t v90 = v89;
    swift_bridgeObjectRelease();
    uint64_t v123 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v88, v90, &v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v85, v86, "%s Parsed emergencyTypes: %s, returning first entry", (uint8_t *)v87, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_beginAccess();
  if (v125[2])
  {
    uint64_t v91 = v125[4];
    outlined copy of PhoneCallEmergencyType(v91, v125[5]);
  }
  else
  {
    uint64_t v91 = 0;
  }
  swift_bridgeObjectRelease();
  swift_release();
  return v91;
}

void *specialized UsoContactConvertible.nameIdentifiers.getter()
{
  if (!UsoEntity_common_Agent.asCommonPerson()()
    || (uint64_t v0 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)(), swift_release(), !v0))
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  return (void *)v0;
}

uint64_t lazy protocol witness table accessor for type UsoEntity_common_Quantifier.DefinedValues and conformance UsoEntity_common_Quantifier.DefinedValues(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined consume of PhoneCallEmergencyType?(uint64_t a1, unint64_t a2)
{
  if (a2 != 3) {
    return outlined consume of PhoneCallEmergencyType(a1, a2);
  }
  return a1;
}

void *specialized UsoContactConvertible.vocabularyAppsBundleSet.getter()
{
  uint64_t v0 = type metadata accessor for UsoIdentifier();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = &_swiftEmptySetSingleton;
  uint64_t v4 = specialized UsoContactConvertible.nameIdentifiers.getter();
  uint64_t v5 = v4[2];
  if (v5)
  {
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(v1 + 16);
    uint64_t v6 = v1 + 16;
    uint64_t v7 = v8;
    unint64_t v9 = (*(unsigned __int8 *)(v6 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 64);
    uint64_t v17 = v4;
    uint64_t v10 = (char *)v4 + v9;
    uint64_t v11 = *(void *)(v6 + 56);
    while (1)
    {
      v7(v3, v10, v0);
      uint64_t v12 = UsoIdentifier.namespace.getter();
      if (v13)
      {
        if (v12 == 0x64695F6D657469 && v13 == 0xE700000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v15 & 1) == 0) {
            goto LABEL_12;
          }
        }
        UsoIdentifier.appBundleId.getter();
        specialized Set._Variant.insert(_:)();
        swift_bridgeObjectRelease();
      }
LABEL_12:
      (*(void (**)(char *, uint64_t))(v6 - 8))(v3, v0);
      v10 += v11;
      if (!--v5)
      {
        swift_bridgeObjectRelease();
        return v18;
      }
    }
  }
  swift_bridgeObjectRelease();
  return &_swiftEmptySetSingleton;
}

uint64_t outlined assign with take of BackingContact?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BackingContact?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for BackingContact(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 3) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t storeEnumTagSinglePayload for BackingContact(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

Swift::Void __swiftcall SiriPhoneContact.update(person:)(INPerson person)
{
  uint64_t v196 = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  __chkstk_darwin(v3 - 8);
  v180 = (char *)&v175 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_5_17();
  uint64_t v181 = v6;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_5_17();
  uint64_t v178 = v8;
  OUTLINED_FUNCTION_18_0();
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v175 - v11;
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_5_17();
  uint64_t v188 = v13;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_5_17();
  uint64_t v189 = v15;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v16);
  OUTLINED_FUNCTION_5_17();
  uint64_t v187 = v17;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v18);
  OUTLINED_FUNCTION_5_17();
  uint64_t v193 = v19;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v20);
  OUTLINED_FUNCTION_5_17();
  uint64_t v185 = v21;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v22);
  OUTLINED_FUNCTION_5_17();
  uint64_t v186 = v23;
  OUTLINED_FUNCTION_18_0();
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v175 - v26;
  uint64_t v28 = __chkstk_darwin(v25);
  uint64_t v30 = (char *)&v175 - v29;
  __chkstk_darwin(v28);
  OUTLINED_FUNCTION_5_17();
  uint64_t v190 = v31;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v32);
  OUTLINED_FUNCTION_5_17();
  uint64_t v192 = v33;
  OUTLINED_FUNCTION_18_0();
  uint64_t v35 = __chkstk_darwin(v34);
  unint64_t v37 = (char *)&v175 - v36;
  uint64_t v38 = __chkstk_darwin(v35);
  uint64_t v40 = (char *)&v175 - v39;
  uint64_t v41 = __chkstk_darwin(v38);
  uint64_t v43 = (char *)&v175 - v42;
  __chkstk_darwin(v41);
  uint64_t v45 = (char *)&v175 - v44;
  Class isa = person.super.isa;
  id v46 = [(objc_class *)person.super.isa nameComponents];
  v179 = v12;
  if (v46)
  {
    uint64_t v47 = v46;
    static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v48 = type metadata accessor for PersonNameComponents();
    uint64_t v49 = (uint64_t)v43;
    uint64_t v50 = 0;
  }
  else
  {
    uint64_t v48 = type metadata accessor for PersonNameComponents();
    uint64_t v49 = (uint64_t)v43;
    uint64_t v50 = 1;
  }
  __swift_storeEnumTagSinglePayload(v49, v50, 1, v48);
  outlined init with take of String?((uint64_t)v43, (uint64_t)v45, &demangling cache variable for type metadata for PersonNameComponents?);
  type metadata accessor for PersonNameComponents();
  uint64_t v191 = v48;
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v45, 1, v48);
  Class v52 = isa;
  if (EnumTagSinglePayload)
  {
    uint64_t v53 = (uint64_t)v45;
LABEL_6:
    outlined destroy of PersonNameComponents?(v53);
LABEL_7:
    uint64_t v190 = 0;
    uint64_t v192 = 0;
    goto LABEL_8;
  }
  uint64_t v61 = PersonNameComponents.givenName.getter();
  uint64_t v62 = (uint64_t)v45;
  unint64_t v64 = v63;
  outlined destroy of PersonNameComponents?(v62);
  if (!v64) {
    goto LABEL_7;
  }
  uint64_t v65 = HIBYTE(v64) & 0xF;
  if ((v64 & 0x2000000000000000) == 0) {
    uint64_t v65 = v61 & 0xFFFFFFFFFFFFLL;
  }
  if (!v65) {
    goto LABEL_70;
  }
  uint64_t v184 = v64;
  id v66 = OUTLINED_FUNCTION_19_15();
  if (v66)
  {
    uint64_t v67 = v66;
    static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v68 = 0;
  }
  else
  {
    uint64_t v68 = 1;
  }
  uint64_t v138 = v191;
  __swift_storeEnumTagSinglePayload((uint64_t)v37, v68, 1, v191);
  outlined init with take of String?((uint64_t)v37, (uint64_t)v40, &demangling cache variable for type metadata for PersonNameComponents?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v40, 1, v138))
  {
    swift_bridgeObjectRelease();
    uint64_t v53 = (uint64_t)v40;
    goto LABEL_6;
  }
  uint64_t v139 = PersonNameComponents.familyName.getter();
  unint64_t v141 = v140;
  outlined destroy of PersonNameComponents?((uint64_t)v40);
  if (!v141)
  {
LABEL_70:
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  uint64_t v142 = HIBYTE(v141) & 0xF;
  if ((v141 & 0x2000000000000000) == 0) {
    uint64_t v142 = v139 & 0xFFFFFFFFFFFFLL;
  }
  if (!v142)
  {
    swift_bridgeObjectRelease();
    goto LABEL_70;
  }
  uint64_t v183 = v139;
  id v143 = OUTLINED_FUNCTION_19_15();
  if (v143)
  {
    uint64_t v144 = v143;
    uint64_t v145 = v190;
    static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v146 = 0;
    uint64_t v147 = v192;
  }
  else
  {
    uint64_t v146 = 1;
    uint64_t v147 = v192;
    uint64_t v145 = v190;
  }
  uint64_t v164 = v191;
  __swift_storeEnumTagSinglePayload(v145, v146, 1, v191);
  outlined init with take of String?(v145, v147, &demangling cache variable for type metadata for PersonNameComponents?);
  if (__swift_getEnumTagSinglePayload(v147, 1, v164))
  {
    outlined destroy of PersonNameComponents?(v147);
    uint64_t v165 = v184;
  }
  else
  {
    uint64_t v168 = PersonNameComponents.middleName.getter();
    uint64_t v169 = v147;
    unint64_t v171 = v170;
    outlined destroy of PersonNameComponents?(v169);
    uint64_t v165 = v184;
    if (v171)
    {
      uint64_t v172 = HIBYTE(v171) & 0xF;
      if ((v171 & 0x2000000000000000) == 0) {
        uint64_t v172 = v168 & 0xFFFFFFFFFFFFLL;
      }
      if (v172)
      {
        uint64_t v201 = v61;
        uint64_t v202 = v184;
        v173._countAndFlagsBits = 32;
        v173._object = (void *)0xE100000000000000;
        String.append(_:)(v173);
        v174._countAndFlagsBits = v168;
        v174._object = (void *)v171;
        String.append(_:)(v174);
        swift_bridgeObjectRelease();
        goto LABEL_100;
      }
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v201 = v61;
  uint64_t v202 = v165;
LABEL_100:
  v166._countAndFlagsBits = 32;
  v166._object = (void *)0xE100000000000000;
  String.append(_:)(v166);
  v167._countAndFlagsBits = v183;
  v167._object = (void *)v141;
  String.append(_:)(v167);
  swift_bridgeObjectRelease();
  uint64_t v190 = v201;
  uint64_t v192 = v202;
LABEL_8:
  uint64_t v54 = v194;
  id v55 = [(objc_class *)v52 isMe];
  (*(void (**)(id, uint64_t, uint64_t))(v54 + 16))(v55, v196, v54);
  id v56 = [(objc_class *)v52 contactIdentifier];
  if (v56)
  {
    uint64_t v57 = v56;
    uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v60 = v59;
  }
  else
  {
    uint64_t v58 = 0;
    uint64_t v60 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 40))(v58, v60, v196, v54);
  id v69 = OUTLINED_FUNCTION_19_15();
  if (v69)
  {
    int v70 = v69;
    static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v71 = 0;
  }
  else
  {
    uint64_t v71 = 1;
  }
  OUTLINED_FUNCTION_16_3((uint64_t)v27, v71);
  outlined init with take of String?((uint64_t)v27, (uint64_t)v30, &demangling cache variable for type metadata for PersonNameComponents?);
  if (OUTLINED_FUNCTION_12_15((uint64_t)v30))
  {
    uint64_t v183 = 0;
    uint64_t v184 = 0;
  }
  else
  {
    uint64_t v72 = PersonNameComponents.givenName.getter();
    uint64_t v183 = v73;
    uint64_t v184 = v72;
  }
  uint64_t v74 = v186;
  outlined destroy of PersonNameComponents?((uint64_t)v30);
  id v75 = OUTLINED_FUNCTION_19_15();
  if (v75)
  {
    uint64_t v76 = v75;
    uint64_t v77 = v185;
    static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v78 = v77;
    uint64_t v79 = 0;
    uint64_t v80 = v189;
  }
  else
  {
    uint64_t v79 = 1;
    uint64_t v80 = v189;
    uint64_t v78 = v185;
  }
  OUTLINED_FUNCTION_16_3(v78, v79);
  outlined init with take of String?(v78, v74, &demangling cache variable for type metadata for PersonNameComponents?);
  if (OUTLINED_FUNCTION_12_15(v74))
  {
    uint64_t v189 = 0;
    uint64_t v186 = 0;
  }
  else
  {
    uint64_t v189 = PersonNameComponents.middleName.getter();
    uint64_t v186 = v81;
  }
  outlined destroy of PersonNameComponents?(v74);
  id v82 = [(objc_class *)v52 nameComponents];
  if (v82)
  {
    unint64_t v83 = v82;
    uint64_t v84 = v187;
    static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v85 = v84;
    uint64_t v86 = 0;
  }
  else
  {
    uint64_t v86 = 1;
    uint64_t v85 = v187;
  }
  OUTLINED_FUNCTION_16_3(v85, v86);
  uint64_t v87 = v85;
  uint64_t v88 = v193;
  outlined init with take of String?(v87, v193, &demangling cache variable for type metadata for PersonNameComponents?);
  if (OUTLINED_FUNCTION_12_15(v88))
  {
    uint64_t v187 = 0;
    uint64_t v185 = 0;
  }
  else
  {
    uint64_t v89 = PersonNameComponents.familyName.getter();
    uint64_t v88 = v193;
    uint64_t v187 = v89;
    uint64_t v185 = v90;
  }
  outlined destroy of PersonNameComponents?(v88);
  id v91 = [(objc_class *)v52 nameComponents];
  uint64_t v92 = v188;
  if (v91)
  {
    uint64_t v93 = v91;
    static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v94 = 0;
  }
  else
  {
    uint64_t v94 = 1;
  }
  OUTLINED_FUNCTION_16_3(v92, v94);
  outlined init with take of String?(v92, v80, &demangling cache variable for type metadata for PersonNameComponents?);
  if (OUTLINED_FUNCTION_12_15(v80))
  {
    uint64_t v95 = 0;
    uint64_t v182 = 0;
  }
  else
  {
    uint64_t v95 = PersonNameComponents.nickname.getter();
    uint64_t v182 = v96;
  }
  outlined destroy of PersonNameComponents?(v80);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v54 + 104))(v199, v196, v54);
  outlined init with take of String?((uint64_t)v199, (uint64_t)&v201, &demangling cache variable for type metadata for PhoneCallPersonName?);
  outlined init with take of String?((uint64_t)v199, (uint64_t)v200, &demangling cache variable for type metadata for PhoneCallPersonName?);
  uint64_t v188 = v95;
  if (v200[1] == 1)
  {
    uint64_t v97 = (uint64_t)v180;
    uint64_t v98 = v181;
    uint64_t v99 = v178;
    uint64_t v100 = (uint64_t)v179;
  }
  else
  {
    uint64_t v102 = v209;
    uint64_t v101 = v210;
    uint64_t v103 = v202;
    uint64_t v193 = v201;
    uint64_t v176 = v207;
    uint64_t v177 = v205;
    long long v175 = v211;
    swift_bridgeObjectRetain();
    uint64_t v104 = v102;
    Class v52 = isa;
    outlined consume of PhoneCallPersonName?(v193, v103);
    uint64_t v97 = (uint64_t)v180;
    uint64_t v98 = v181;
    uint64_t v99 = v178;
    uint64_t v100 = (uint64_t)v179;
    uint64_t v193 = v101;
    if (v101)
    {
      uint64_t v190 = v104;
      goto LABEL_46;
    }
  }
  uint64_t v105 = v192;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v193 = v105;
LABEL_46:
  id v106 = OUTLINED_FUNCTION_19_15();
  if (v106)
  {
    uint64_t v107 = v106;
    static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v108 = 0;
  }
  else
  {
    uint64_t v108 = 1;
  }
  OUTLINED_FUNCTION_16_3(v99, v108);
  outlined init with take of String?(v99, v100, &demangling cache variable for type metadata for PersonNameComponents?);
  if (OUTLINED_FUNCTION_12_15(v100))
  {
    uint64_t v109 = 0;
    uint64_t v110 = 0;
  }
  else
  {
    uint64_t v109 = PersonNameComponents.namePrefix.getter();
    uint64_t v110 = v111;
  }
  outlined destroy of PersonNameComponents?(v100);
  id v112 = [(objc_class *)v52 nameComponents];
  if (v112)
  {
    uint64_t v113 = v112;
    static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v114 = 0;
  }
  else
  {
    uint64_t v114 = 1;
  }
  OUTLINED_FUNCTION_16_3(v97, v114);
  outlined init with take of String?(v97, v98, &demangling cache variable for type metadata for PersonNameComponents?);
  if (OUTLINED_FUNCTION_12_15(v98))
  {
    uint64_t v115 = 0;
    uint64_t v116 = 0;
  }
  else
  {
    uint64_t v115 = PersonNameComponents.nameSuffix.getter();
    uint64_t v116 = v117;
  }
  outlined destroy of PersonNameComponents?(v98);
  uint64_t v201 = v184;
  uint64_t v202 = v183;
  uint64_t v203 = v189;
  uint64_t v204 = v186;
  uint64_t v205 = v187;
  uint64_t v206 = v185;
  uint64_t v207 = v188;
  uint64_t v208 = v182;
  uint64_t v118 = v194;
  uint64_t v209 = v190;
  uint64_t v210 = v193;
  *(void *)&long long v211 = v109;
  *((void *)&v211 + 1) = v110;
  uint64_t v212 = v115;
  uint64_t v213 = v116;
  uint64_t v119 = v196;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v194 + 112))(&v201, v196, v194);
  Class v120 = isa;
  if ([(objc_class *)isa relationship])
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_21_14();
  }
  uint64_t v121 = OUTLINED_FUNCTION_2_38();
  v122(v121);
  id v123 = OUTLINED_FUNCTION_9_30();
  if (v123)
  {
    unint64_t v124 = v123;
    uint64_t v125 = (char *)[v123 type];

    if (v125 == (unsigned char *)&dword_0 + 2)
    {
      id v126 = OUTLINED_FUNCTION_9_30();
      uint64_t v127 = v126;
      if (v126)
      {
        id v128 = [v126 value];

        if (v128)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          OUTLINED_FUNCTION_21_14();
        }
      }
      uint64_t v135 = OUTLINED_FUNCTION_2_38();
      v136(v135);
      uint64_t v137 = 0x656E6F6870;
LABEL_82:
      (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v118 + 232))(v137, 0xE500000000000000, v119, v118);
      goto LABEL_83;
    }
  }
  id v129 = OUTLINED_FUNCTION_9_30();
  if (v129)
  {
    uint64_t v130 = v129;
    uint64_t v131 = (char *)[v129 type];

    if (v131 == (unsigned char *)&dword_0 + 1)
    {
      id v132 = OUTLINED_FUNCTION_9_30();
      uint64_t v133 = v132;
      if (v132)
      {
        id v134 = [v132 value];

        if (v134)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          OUTLINED_FUNCTION_21_14();
        }
      }
      uint64_t v148 = OUTLINED_FUNCTION_2_38();
      v149(v148);
      uint64_t v137 = 0x6C69616D65;
      goto LABEL_82;
    }
  }
LABEL_83:
  id v150 = OUTLINED_FUNCTION_9_30();
  uint64_t v151 = v150;
  if (v150)
  {
    id v152 = [v150 label];

    if (v152)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_21_14();
    }
  }
  uint64_t v153 = OUTLINED_FUNCTION_2_38();
  v154(v153);
  id v155 = OUTLINED_FUNCTION_9_30();
  if (v155
    && (v156 = v155,
        uint64_t v157 = (char *)[v155 emergencyType],
        v156,
        v157 == (unsigned char *)&dword_0 + 1))
  {
    uint64_t v158 = 0;
  }
  else
  {
    id v159 = OUTLINED_FUNCTION_9_30();
    if (v159
      && (uint64_t v160 = v159,
          uint64_t v161 = (char *)[v159 emergencyType],
          v160,
          v161 == (unsigned char *)&dword_0 + 2))
    {
      uint64_t v158 = 1;
    }
    else
    {
      uint64_t v158 = 2;
    }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v118 + 304))(v158, v119, v118);
  v197[0] = v120;
  char v198 = 0;
  int v162 = *(void (**)(Class *, uint64_t, uint64_t))(v118 + 392);
  uint64_t v163 = v120;
  v162(v197, v119, v118);
  swift_bridgeObjectRelease();
}

uint64_t outlined init with take of String?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v4 = OUTLINED_FUNCTION_7_0();
  v5(v4);
  return a2;
}

uint64_t outlined init with take of PhoneCallPersonName?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallPersonName?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of SpeakableString?(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_11();
  v3();
  return a1;
}

uint64_t outlined destroy of PersonNameComponents?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t protocol witness for SiriPhoneContact.isMe.setter in conformance PhoneCallNLv4Contact()
{
  OUTLINED_FUNCTION_22();
  return (*(uint64_t (**)(void))(v0 + 320))();
}

uint64_t PhoneCallNLv4Contact.isMe.setter(char a1)
{
  uint64_t result = OUTLINED_FUNCTION_4_4();
  *(unsigned char *)(v1 + 56) = a1;
  return result;
}

uint64_t protocol witness for SiriPhoneContact.contactId.setter in conformance PhoneCallNLv4Contact()
{
  OUTLINED_FUNCTION_22();
  return (*(uint64_t (**)(void))(v0 + 272))();
}

uint64_t PhoneCallNLv4Contact.contactId.setter()
{
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_4_4();
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v0;
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for SiriPhoneContact.personName.getter in conformance PhoneCallNLv4Contact@<X0>(uint64_t a1@<X8>)
{
  OUTLINED_FUNCTION_22();
  (*(void (**)(void *__return_ptr))(v2 + 360))(v4);
  return outlined init with take of PhoneCallNLIntent?((uint64_t)v4, a1, &demangling cache variable for type metadata for PhoneCallPersonName?);
}

uint64_t PhoneCallNLv4Contact.personName.getter@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v3 = v1[10];
  uint64_t v4 = v1[11];
  uint64_t v5 = v1[12];
  uint64_t v6 = v1[13];
  uint64_t v7 = v1[14];
  uint64_t v8 = v1[15];
  uint64_t v9 = v1[16];
  uint64_t v10 = v1[17];
  uint64_t v16 = v1[22];
  uint64_t v17 = v1[23];
  uint64_t v14 = v1[20];
  uint64_t v15 = v1[21];
  uint64_t v12 = v1[18];
  uint64_t v13 = v1[19];
  uint64_t result = outlined copy of PhoneCallPersonName?(v3, v4);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v12;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  return result;
}

uint64_t outlined copy of PhoneCallPersonName?(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined init with take of PhoneCallApp?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallApp?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of PhoneCallNLIntent?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  OUTLINED_FUNCTION_38_5(a1, a2, a3);
  OUTLINED_FUNCTION_15();
  uint64_t v4 = OUTLINED_FUNCTION_32_6();
  v5(v4);
  return v3;
}

uint64_t protocol witness for SiriPhoneContact.personName.setter in conformance PhoneCallNLv4Contact()
{
  OUTLINED_FUNCTION_22();
  return (*(uint64_t (**)(void))(v0 + 368))();
}

void *PhoneCallNLv4Contact.personName.setter(void *a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 88);
  uint64_t v5 = *(void *)(v1 + 80);
  outlined init with take of PhoneCallNLIntent?((uint64_t)a1, v1 + 80, &demangling cache variable for type metadata for PhoneCallPersonName?);
  outlined retain of PhoneCallPersonName?(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of PhoneCallPersonName?);
  outlined consume of PhoneCallPersonName?(v5, v3);
  return outlined retain of PhoneCallPersonName?(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of PhoneCallPersonName?);
}

uint64_t outlined consume of PhoneCallPersonName?(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t protocol witness for SiriPhoneContact.relationship.setter in conformance PhoneCallNLv4Contact()
{
  OUTLINED_FUNCTION_22();
  return (*(uint64_t (**)(void))(v0 + 440))();
}

uint64_t PhoneCallNLv4Contact.relationship.setter()
{
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_4_4();
  *(void *)(v1 + 224) = v2;
  *(void *)(v1 + 232) = v0;
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for SiriPhoneContact.handleLabel.setter in conformance PhoneCallNLv4Contact()
{
  OUTLINED_FUNCTION_22();
  return (*(uint64_t (**)(void))(v0 + 488))();
}

uint64_t PhoneCallNLv4Contact.handleLabel.setter()
{
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_4_4();
  *(void *)(v1 + 256) = v2;
  *(void *)(v1 + 264) = v0;
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for SiriPhoneContact.emergencyLocationType.setter in conformance PhoneCallNLv4Contact()
{
  OUTLINED_FUNCTION_22();
  return (*(uint64_t (**)(void))(v0 + 536))();
}

uint64_t PhoneCallNLv4Contact.emergencyLocationType.setter(char a1)
{
  uint64_t result = OUTLINED_FUNCTION_4_4();
  *(unsigned char *)(v1 + 288) = a1;
  return result;
}

uint64_t protocol witness for SiriPhoneContact.backingContact.setter in conformance PhoneCallNLv4Contact()
{
  OUTLINED_FUNCTION_22();
  return (*(uint64_t (**)(void))(v0 + 632))();
}

uint64_t PhoneCallNLv4Contact.backingContact.setter()
{
  swift_beginAccess();
  uint64_t v0 = OUTLINED_FUNCTION_7_0();
  outlined assign with take of PhoneCallNLIntent?(v0, v1, v2);
  return swift_endAccess();
}

uint64_t assignWithCopy for BackingContact(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 3) {
      unsigned int v4 = *(_DWORD *)a1 + 3;
    }
    if (v4 == 2)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    else if (v4 == 1)
    {
      swift_release();
    }
    else
    {
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 3) {
      unsigned int v5 = *(_DWORD *)a2 + 3;
    }
    if (v5 == 2)
    {
      uint64_t v6 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 2;
    }
    else if (v5 == 1)
    {
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 40) = 1;
      swift_retain();
    }
    else
    {
      uint64_t v7 = *(void **)a2;
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 40) = 0;
      id v8 = v7;
    }
  }
  return a1;
}

void destroy for BackingContact(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 3) {
    unsigned int v1 = *(_DWORD *)a1 + 3;
  }
  if (v1 == 2)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  else if (v1 == 1)
  {
    swift_release();
  }
  else
  {
  }
}

uint64_t outlined init with copy of PhoneCallNLv4Intent(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for PhoneCallNLv4Intent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  unsigned int v5 = (_OWORD *)(a1 + 16);
  uint64_t v6 = a2 + 16;
  uint64_t v7 = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    uint64_t v8 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = v7;
    *(void *)(a1 + 48) = v8;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8))(a1 + 16, v6, v7);
  }
  else
  {
    long long v9 = *(_OWORD *)(v6 + 16);
    *unsigned int v5 = *(_OWORD *)v6;
    *(_OWORD *)(a1 + 32) = v9;
    *(void *)(a1 + 48) = *(void *)(v6 + 32);
  }
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  uint64_t v11 = *(void *)(a2 + 88);
  uint64_t v10 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = v11;
  *(void *)(a1 + 96) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t static PhoneCallNLv4Intent.getMergedNLIntent(previousNLIntent:currentNLIntent:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  outlined init with copy of TransformationResult?(a1, (uint64_t)&v70, &demangling cache variable for type metadata for PhoneCallNLIntent?);
  if (!v71)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)&v70, &demangling cache variable for type metadata for PhoneCallNLIntent?);
    uint64_t v26 = OUTLINED_FUNCTION_7_14();
    return outlined init with copy of SignalProviding(v26, v27);
  }
  unint64_t v64 = a3;
  outlined init with take of AppSelectionSignalComponent(&v70, (uint64_t)v72);
  __swift_project_boxed_opaque_existential_1(v72, v73);
  uint64_t v6 = OUTLINED_FUNCTION_32_16();
  v7(v6);
  if (specialized static PhoneCallNLIntent.isAppModified(previousNLIntent:currentNLIntent:)((uint64_t)v72, a2))
  {
    __swift_project_boxed_opaque_existential_1(a2, a2[3]);
    uint64_t v8 = OUTLINED_FUNCTION_32_16();
    v9(v8);
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)&v70, &demangling cache variable for type metadata for PhoneCallApp?);
    outlined init with take of PhoneCallNLIntent?((uint64_t)v69, (uint64_t)&v70, &demangling cache variable for type metadata for PhoneCallApp?);
  }
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  uint64_t v10 = OUTLINED_FUNCTION_27_21();
  char v12 = v11(v10);
  outlined init with copy of SignalProviding((uint64_t)v72, (uint64_t)v69);
  if (v12 == 2)
  {
    __swift_project_boxed_opaque_existential_1(v69, v69[3]);
    uint64_t v13 = OUTLINED_FUNCTION_27_21();
    char v12 = v14(v13);
  }
  char v63 = v12;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
  uint64_t v15 = a2[3];
  __swift_project_boxed_opaque_existential_1(a2, v15);
  uint64_t v16 = OUTLINED_FUNCTION_26_22();
  char v18 = v17(v16);
  outlined init with copy of SignalProviding((uint64_t)v72, (uint64_t)v67);
  if (v18 == 4)
  {
    uint64_t v15 = v68;
    __swift_project_boxed_opaque_existential_1(v67, v68);
    uint64_t v19 = OUTLINED_FUNCTION_26_22();
    char v18 = v20(v19);
  }
  char v62 = v18;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
  OUTLINED_FUNCTION_9_47();
  int v22 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v21 + 72))(v15, v3);
  outlined init with copy of SignalProviding((uint64_t)a2, (uint64_t)v66);
  if (v22 == 5) {
    goto LABEL_19;
  }
  uint64_t v23 = OUTLINED_FUNCTION_10_36(v66);
  char v25 = v24(v23);
  if (v25 == 5)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v66);
LABEL_17:
    uint64_t v33 = a2;
    goto LABEL_21;
  }
  PhoneCallDestinationType.rawValue.getter(v25);
  if (v30 == 0x6C616D726F6ELL && v29 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
LABEL_19:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v66);
    goto LABEL_20;
  }
  char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v66);
  if ((v32 & 1) == 0) {
    goto LABEL_17;
  }
LABEL_20:
  uint64_t v33 = v72;
LABEL_21:
  uint64_t v34 = OUTLINED_FUNCTION_10_36(v33);
  char v61 = v35(v34);
  uint64_t v36 = v73;
  uint64_t v37 = v74;
  uint64_t v38 = OUTLINED_FUNCTION_11_38(v72);
  char v40 = v39(v38);
  char v41 = specialized static PhoneCallNLIntent.isPhoneCallVerbModified(previousNLIntent:currentNLIntent:)((uint64_t)v72, a2);
  outlined init with copy of SignalProviding((uint64_t)v72, (uint64_t)v65);
  if ((v41 & 1) != 0 || (uint64_t v36 = v65[3], v37 = v65[4], v42 = OUTLINED_FUNCTION_11_38(v65), v43(v42) == 17))
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
    OUTLINED_FUNCTION_9_47();
    char v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 104))(v36, v37);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
  }
  OUTLINED_FUNCTION_9_47();
  uint64_t v45 = OUTLINED_FUNCTION_22_29();
  uint64_t v47 = v46(v45);
  OUTLINED_FUNCTION_9_47();
  uint64_t v48 = OUTLINED_FUNCTION_22_29();
  uint64_t v50 = v49(v48);
  outlined init with copy of TransformationResult?((uint64_t)&v70, (uint64_t)v65, &demangling cache variable for type metadata for PhoneCallApp?);
  OUTLINED_FUNCTION_9_47();
  uint64_t v51 = OUTLINED_FUNCTION_22_29();
  uint64_t v53 = v52(v51);
  uint64_t v55 = a2[3];
  uint64_t v54 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v55);
  uint64_t v56 = (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 136))(v55, v54);
  uint64_t v58 = a2[3];
  uint64_t v57 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v58);
  uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 144))(v58, v57);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)&v70, &demangling cache variable for type metadata for PhoneCallApp?);
  v64[3] = (uint64_t)&type metadata for PhoneCallNLv4Intent;
  v64[4] = (uint64_t)&protocol witness table for PhoneCallNLv4Intent;
  uint64_t v60 = swift_allocObject();
  *unint64_t v64 = v60;
  *(void *)(v60 + 16) = v47;
  *(void *)(v60 + 24) = v50;
  outlined init with take of PhoneCallNLIntent?((uint64_t)v65, v60 + 32, &demangling cache variable for type metadata for PhoneCallApp?);
  *(unsigned char *)(v60 + 72) = v63;
  *(void *)(v60 + 80) = v53;
  *(unsigned char *)(v60 + 88) = v62;
  *(_WORD *)(v60 + 89) = 1282;
  *(unsigned char *)(v60 + 91) = v61;
  *(_WORD *)(v60 + 92) = 777;
  *(unsigned char *)(v60 + 94) = 35;
  *(unsigned char *)(v60 + 95) = v40;
  *(_WORD *)(v60 + 96) = 518;
  *(void *)(v60 + 104) = v56;
  *(void *)(v60 + 112) = v59;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
}

uint64_t outlined destroy of PhoneCallNLv4Intent(uint64_t a1)
{
  return a1;
}

uint64_t destroy for PhoneCallNLv4Intent(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void type metadata accessor for PhoneCallAVMode()
{
}

uint64_t getEnumTagSinglePayload for PhoneCallAVMode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return OUTLINED_FUNCTION_220(-1);
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return OUTLINED_FUNCTION_220((*a1 | (v4 << 8)) - 2);
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return OUTLINED_FUNCTION_220((*a1 | (v4 << 8)) - 2);
    }
    int v4 = a1[1];
    if (a1[1]) {
      return OUTLINED_FUNCTION_220((*a1 | (v4 << 8)) - 2);
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return OUTLINED_FUNCTION_220(v8);
}

uint64_t OUTLINED_FUNCTION_190_1()
{
  return SearchCallHistoryCATs.intentHandledResponseMissedCall(callRecordCount:totalCallRecordCount:intent:)();
}

void type metadata accessor for PhoneCallAttribute()
{
}

uint64_t getEnumTag for SearchCallHistoryBinaryButtonModel.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

void type metadata accessor for PhoneCallAudioRoute()
{
}

uint64_t getEnumTagSinglePayload for VoiceMailPosition(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 3) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v5 = v6 - 4;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

void type metadata accessor for PhoneCallCapability()
{
}

void type metadata accessor for PhoneCallConfirmation()
{
}

uint64_t getEnumTagSinglePayload for PhoneCallConfirmation(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return OUTLINED_FUNCTION_220(-1);
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return OUTLINED_FUNCTION_220((*a1 | (v4 << 8)) - 5);
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return OUTLINED_FUNCTION_220((*a1 | (v4 << 8)) - 5);
    }
    int v4 = a1[1];
    if (a1[1]) {
      return OUTLINED_FUNCTION_220((*a1 | (v4 << 8)) - 5);
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return OUTLINED_FUNCTION_220(v8);
}

void type metadata accessor for PhoneCallDestinationType()
{
}

void type metadata accessor for PhoneCallNoun()
{
}

uint64_t getEnumTagSinglePayload for SingleCallRecordModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF8)
  {
    if (a2 + 8 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 8) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 9;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v5 = v6 - 9;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

void type metadata accessor for PhoneCallPreferredProvider()
{
}

uint64_t getEnumTagSinglePayload for PhoneCallPreferredProvider(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return OUTLINED_FUNCTION_220(-1);
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return OUTLINED_FUNCTION_220((*a1 | (v4 << 8)) - 3);
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return OUTLINED_FUNCTION_220((*a1 | (v4 << 8)) - 3);
    }
    int v4 = a1[1];
    if (a1[1]) {
      return OUTLINED_FUNCTION_220((*a1 | (v4 << 8)) - 3);
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return OUTLINED_FUNCTION_220(v8);
}

void type metadata accessor for PhoneCallReference()
{
}

uint64_t getEnumTagSinglePayload for PhoneCallReference(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xDE)
  {
    if (a2 + 34 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 34) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 35;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x23;
  int v5 = v6 - 35;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

void type metadata accessor for PhoneCallVerb()
{
}

uint64_t getEnumTagSinglePayload for PhoneCallVerb(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF0)
  {
    if (a2 + 16 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 16) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 17;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x11;
  int v5 = v6 - 17;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

void type metadata accessor for VoiceMail.VoiceMailVerb()
{
}

uint64_t getEnumTagSinglePayload for SingleResultCallHistoryModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFB)
  {
    if (a2 + 5 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 5) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 6;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v5 = v6 - 6;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

void type metadata accessor for VoiceMail.VoiceMailNoun()
{
}

Swift::Bool __swiftcall PhoneCallNLIntent.isEmergencyResourceCall()()
{
  OUTLINED_FUNCTION_21_22();
  v1();
  OUTLINED_FUNCTION_155();
  if (v0)
  {
    OUTLINED_FUNCTION_116_0();
    do
    {
      OUTLINED_FUNCTION_178();
      uint64_t v2 = OUTLINED_FUNCTION_73_3(v6);
      if (v3 >= 3)
      {
        if (v3 != 3)
        {
          outlined consume of PhoneCallEmergencyType?(v2, v3);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
          OUTLINED_FUNCTION_2_16();
          return 1;
        }
      }
      else
      {
        outlined consume of PhoneCallEmergencyType?(v2, v3);
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
      OUTLINED_FUNCTION_177();
    }
    while (!v4);
    OUTLINED_FUNCTION_2_16();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t OUTLINED_FUNCTION_21_0()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_15_0()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_158_0(uint64_t a1@<X8>)
{
  *(void *)(v1 + 88) = (a1 - 32) | 0x8000000000000000;
}

uint64_t OUTLINED_FUNCTION_211@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 224) = v2;
  *(void *)(v1 + 232) = (a1 - 32) | 0x8000000000000000;
  return 0;
}

uint64_t OUTLINED_FUNCTION_158_1()
{
  return dispatch thunk of CATWrapper.execute(catId:parameters:)();
}

uint64_t OUTLINED_FUNCTION_158_2()
{
  *(_WORD *)(v0 + 12) = 2080;
  return App.appIdentifier.getter();
}

uint64_t OUTLINED_FUNCTION_61()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_217@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  *(_DWORD *)(result + 1) = a2;
  return result;
}

void OUTLINED_FUNCTION_167_1(uint64_t a1@<X8>)
{
  *(void *)(v1 + 88) = (a1 - 32) | 0x8000000000000000;
}

uint64_t SiriPhoneContact.getEmergencyType()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 272))();
}

uint64_t protocol witness for SiriPhoneContact.emergencyType.getter in conformance PhoneCallNLv4Contact()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 504))();
}

uint64_t PhoneCallNLv4Contact.emergencyType.getter()
{
  OUTLINED_FUNCTION_5_21();
  uint64_t v0 = OUTLINED_FUNCTION_7_0();
  outlined copy of PhoneCallEmergencyType?(v0, v1);
  return OUTLINED_FUNCTION_7_0();
}

uint64_t outlined copy of PhoneCallEmergencyType?(uint64_t a1, unint64_t a2)
{
  if (a2 != 3) {
    return outlined copy of PhoneCallEmergencyType(a1, a2);
  }
  return a1;
}

uint64_t OUTLINED_FUNCTION_159()
{
  return 0x6472696874;
}

uint64_t OUTLINED_FUNCTION_159_0@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_214@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 88) = (a2 - 32) | 0x8000000000000000;
  return 0;
}

uint64_t OUTLINED_FUNCTION_159_1(uint64_t result)
{
  *(void *)(v1 + 80) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_244@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 32) = a2;
  *(void *)(a1 + 40) = (v2 - 32) | 0x8000000000000000;
  return 0;
}

uint64_t OUTLINED_FUNCTION_159_2()
{
  *(_WORD *)(v0 + 12) = 2080;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_159_3()
{
  return *(void *)(v0 - 296);
}

uint64_t OUTLINED_FUNCTION_159_4()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

Swift::Bool __swiftcall PhoneCallNLIntent.isEmergencyCall()()
{
  PhoneCallNLIntent.isOutgoingCall()();
  return result;
}

Swift::Bool __swiftcall PhoneCallNLIntent.isEmergencyServicesCall()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  OUTLINED_FUNCTION_21_22();
  uint64_t v5 = v4();
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    uint64_t v7 = v5 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of SiriPhoneContact();
      uint64_t v8 = v23[4];
      uint64_t v9 = OUTLINED_FUNCTION_114(v23);
      uint64_t v10 = SiriPhoneContact.getEmergencyType()(v9, v8);
      if (v11 != 3)
      {
        if (v11 == 1)
        {
          int v12 = 1;
          outlined consume of PhoneCallEmergencyType?(v10, 1uLL);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
          swift_bridgeObjectRelease_n();
          goto LABEL_11;
        }
        outlined consume of PhoneCallEmergencyType?(v10, v11);
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
      v7 += 40;
      if (!--v6)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_9;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_9:
  int v12 = 0;
LABEL_11:
  (*(void (**)(uint64_t, uint64_t))(v2 + 72))(v3, v2);
  OUTLINED_FUNCTION_91_5();
  if (v17)
  {
    if (!v12) {
      return 0;
    }
  }
  else
  {
    PhoneCallDestinationType.rawValue.getter(v13);
    BOOL v17 = v15 == 0x636E656772656D65 && v16 == 0xE900000000000079;
    if (v17)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      OUTLINED_FUNCTION_118_0();
      _stringCompareWithSmolCheck(_:_:expecting:)();
      OUTLINED_FUNCTION_15_0();
    }
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.siriPhone);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    OUTLINED_FUNCTION_1_3(&dword_0, v21, v22, "#PhoneCallNLIntent EmergencyServices intent");
    OUTLINED_FUNCTION_6();
  }

  return 1;
}

uint64_t PhoneCallNLv4Intent.phoneCallDestinationType.getter()
{
  return *(unsigned __int8 *)(v0 + 75);
}

uint64_t OUTLINED_FUNCTION_210()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_141()
{
  return *(void *)(v0 + 16);
}

uint64_t OUTLINED_FUNCTION_210_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 136) = (a2 - 32) | 0x8000000000000000;
  return 0;
}

Swift::Bool __swiftcall PhoneCallNLIntent.isEmergencyContactCall()()
{
  OUTLINED_FUNCTION_21_22();
  v1();
  OUTLINED_FUNCTION_155();
  if (v0)
  {
    OUTLINED_FUNCTION_116_0();
    while (1)
    {
      OUTLINED_FUNCTION_178();
      uint64_t v2 = OUTLINED_FUNCTION_73_3(v6);
      if (v3 != 3)
      {
        if (!v3)
        {
          outlined consume of PhoneCallEmergencyType?(v2, 0);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
          OUTLINED_FUNCTION_2_16();
          return 1;
        }
        outlined consume of PhoneCallEmergencyType?(v2, v3);
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
      OUTLINED_FUNCTION_177();
      if (v4)
      {
        OUTLINED_FUNCTION_2_16();
        return 0;
      }
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

Swift::Bool __swiftcall PhoneCallNLIntent.isEmergencyNumberCall()()
{
  OUTLINED_FUNCTION_21_22();
  v1();
  OUTLINED_FUNCTION_155();
  if (v0)
  {
    OUTLINED_FUNCTION_116_0();
    while (1)
    {
      OUTLINED_FUNCTION_178();
      uint64_t v2 = OUTLINED_FUNCTION_73_3(v6);
      if (v3 != 3)
      {
        if (v3 == 2)
        {
          outlined consume of PhoneCallEmergencyType?(v2, 2uLL);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
          OUTLINED_FUNCTION_2_16();
          return 1;
        }
        outlined consume of PhoneCallEmergencyType?(v2, v3);
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
      OUTLINED_FUNCTION_177();
      if (v4)
      {
        OUTLINED_FUNCTION_2_16();
        return 0;
      }
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t static ExecutionPath.shouldRouteToLocalSearch(nlIntent:sharedGlobals:)(void *a1)
{
  outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v5);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
  int v2 = swift_dynamicCast();
  if (v2)
  {
    outlined destroy of PhoneCallNLv4Intent((uint64_t)&v4);
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    LOBYTE(v2) = PhoneCallNLIntent.isBusinessNameCall()();
  }
  return v2 & 1;
}

Swift::Bool __swiftcall PhoneCallNLIntent.isBusinessNameCall()()
{
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_14_11();
  __chkstk_darwin(v0);
  OUTLINED_FUNCTION_29_16();
  uint64_t v2 = v1();
  if (!v2) {
    goto LABEL_26;
  }
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 + 16);
  if (!v4)
  {
LABEL_22:
    swift_bridgeObjectRelease();
    uint64_t v8 = OUTLINED_FUNCTION_4_49();
    v9(v8);
    goto LABEL_25;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  while (2)
  {
    uint64_t v6 = v3 + v5++;
    switch(*(unsigned char *)(v6 + 32))
    {
      case 1:
        OUTLINED_FUNCTION_52_9();
        goto LABEL_19;
      case 2:
        OUTLINED_FUNCTION_25_18();
        goto LABEL_19;
      case 3:
        OUTLINED_FUNCTION_10_30();
        goto LABEL_19;
      case 4:
        OUTLINED_FUNCTION_15_23();
        goto LABEL_19;
      case 5:
        OUTLINED_FUNCTION_37_12();
        goto LABEL_19;
      case 6:
        OUTLINED_FUNCTION_58_8();
        goto LABEL_19;
      case 7:
        swift_bridgeObjectRelease();
        goto LABEL_24;
      case 8:
        OUTLINED_FUNCTION_18_21();
        goto LABEL_19;
      case 9:
        OUTLINED_FUNCTION_11_3();
        goto LABEL_19;
      case 0xA:
        OUTLINED_FUNCTION_22_20();
        goto LABEL_19;
      case 0xB:
        OUTLINED_FUNCTION_119();
        goto LABEL_19;
      case 0xC:
        OUTLINED_FUNCTION_17_19();
        goto LABEL_19;
      case 0xD:
        OUTLINED_FUNCTION_51_7();
        goto LABEL_19;
      default:
LABEL_19:
        OUTLINED_FUNCTION_109_0();
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v7 & 1) == 0)
        {
          if (v4 == v5)
          {
            swift_bridgeObjectRelease();
            goto LABEL_22;
          }
          continue;
        }
LABEL_24:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v10 = OUTLINED_FUNCTION_4_49();
        v11(v10);
        OUTLINED_FUNCTION_185();
        PhoneCallNLIntent.hasPhoneNumber()();
LABEL_25:
        uint64_t v12 = OUTLINED_FUNCTION_156_0();
        v13(v12);
LABEL_26:
        OUTLINED_FUNCTION_40_11();
        OUTLINED_FUNCTION_26_1();
        return result;
    }
  }
}

uint64_t PhoneCallNLv4Intent.phoneCallAttributes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_95(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

__n128 *OUTLINED_FUNCTION_162_0@<X0>(__n128 *result@<X0>, unint64_t a2@<X8>, __n128 a3@<Q0>)
{
  result[1] = a3;
  result[5].n128_u64[1] = (v3 - 32) | 0x8000000000000000;
  result[6].n128_u8[0] = v4;
  result[7].n128_u64[1] = a2;
  result[8].n128_u64[0] = v5;
  return result;
}

uint64_t OUTLINED_FUNCTION_212@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 136) = (a1 - 32) | 0x8000000000000000;
  return 0;
}

uint64_t OUTLINED_FUNCTION_162_1(uint64_t a1)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v1, (uint64_t *)(v2 - 112));
}

Swift::Bool __swiftcall PhoneCallNLIntent.hasPhoneNumber()()
{
  OUTLINED_FUNCTION_21_22();
  v1();
  OUTLINED_FUNCTION_155();
  if (v0)
  {
    OUTLINED_FUNCTION_116_0();
    do
    {
      OUTLINED_FUNCTION_178();
      __swift_project_boxed_opaque_existential_1(v6, v6[3]);
      Swift::String_optional v2 = SiriPhoneContact.getPhoneNumber()();
      if (v2.value._object)
      {
        swift_bridgeObjectRelease();
        if (((uint64_t)v2.value._object & 0x2000000000000000) != 0) {
          unint64_t v3 = ((unint64_t)v2.value._object >> 56) & 0xF;
        }
        else {
          unint64_t v3 = v2.value._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
        if (v3)
        {
          OUTLINED_FUNCTION_2_16();
          return 1;
        }
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
      }
      OUTLINED_FUNCTION_177();
    }
    while (!v4);
    OUTLINED_FUNCTION_2_16();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return 0;
}

Swift::String_optional __swiftcall SiriPhoneContact.getPhoneNumber()()
{
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 152))();
  result.value._object = v2;
  result.value._countAndFlagsBits = v1;
  return result;
}

uint64_t protocol witness for SiriPhoneContact.telephoneNumber.getter in conformance PhoneCallNLv4Contact()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 408))();
}

uint64_t PhoneCallNLv4Contact.telephoneNumber.getter()
{
  return OUTLINED_FUNCTION_7_0();
}

uint64_t specialized SharedGlobalsProviding.featureManager.getter()
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  memcpy(__dst, &static PhoneCallFeatureFlags.instance, sizeof(__dst));
  type metadata accessor for PhoneCallFeatureManager();
  uint64_t v0 = swift_allocObject();
  unint64_t v3 = &type metadata for PhoneCallFeatureFlags;
  char v4 = &protocol witness table for PhoneCallFeatureFlags;
  *(void *)&long long v2 = swift_allocObject();
  memcpy((void *)(v2 + 16), &static PhoneCallFeatureFlags.instance, 0xB0uLL);
  outlined init with take of AppSelectionSignalComponent(&v2, v0 + 16);
  outlined retain of PhoneCallFeatureFlags((uint64_t)__dst);
  return v0;
}

uint64_t type metadata accessor for PhoneCallFeatureManager()
{
  return self;
}

uint64_t PhoneCallFeatureManager.shouldEnableCompositionFlow.getter()
{
  OUTLINED_FUNCTION_22();
  OUTLINED_FUNCTION_1_86();
  v0();
  OUTLINED_FUNCTION_2_102(v4);
  uint64_t v1 = OUTLINED_FUNCTION_3_35();
  v2(v1);
  return OUTLINED_FUNCTION_4_83((uint64_t)v4);
}

uint64_t PhoneCallFeatureManager.featureFlags.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  return outlined init with copy of SignalProviding(v1 + 16, a1);
}

uint64_t outlined init with copy of SignalProviding(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t PhoneCallFeatureFlags.shouldEnableCompositionFlow.getter()
{
  OUTLINED_FUNCTION_0_15();
  if (!v1) {
    return 1;
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  while (1)
  {
    OUTLINED_FUNCTION_3_22(v2, v3, v4, v5, v6, v7, v8, v9, v20);
    uint64_t v10 = isFeatureEnabled(_:)();
    OUTLINED_FUNCTION_4_19(v10, v11, v12, v13, v14, v15, v16, v17, v21);
    if ((v0 & 1) == 0) {
      break;
    }
    OUTLINED_FUNCTION_2_19();
    if (v18)
    {
      outlined release of Set<String>((uint64_t)v22);
      return 1;
    }
  }
  outlined release of Set<String>((uint64_t)v22);
  return 0;
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance SiriPhoneFeature()
{
  return "SiriPhone";
}

void protocol witness for FeatureFlagsKey.feature.getter in conformance SiriPhoneFeature()
{
}

void SiriPhoneFeature.feature.getter()
{
}

uint64_t outlined release of Set<String>(uint64_t a1)
{
  return a1;
}

uint64_t HandleIntentSubmitter.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocClassInstance();
}

uint64_t PhoneCallFeatureManager.shouldEnablePOMMESFallback.getter()
{
  OUTLINED_FUNCTION_22();
  OUTLINED_FUNCTION_1_86();
  v0();
  OUTLINED_FUNCTION_2_102(v4);
  uint64_t v1 = OUTLINED_FUNCTION_3_35();
  v2(v1);
  return OUTLINED_FUNCTION_4_83((uint64_t)v4);
}

uint64_t PhoneCallFeatureFlags.pommesGeoSearchFlag.getter()
{
  OUTLINED_FUNCTION_0_15();
  if (!v1) {
    return 1;
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  while (1)
  {
    OUTLINED_FUNCTION_3_22(v2, v3, v4, v5, v6, v7, v8, v9, v20);
    uint64_t v10 = isFeatureEnabled(_:)();
    OUTLINED_FUNCTION_4_19(v10, v11, v12, v13, v14, v15, v16, v17, v21);
    if ((v0 & 1) == 0) {
      break;
    }
    OUTLINED_FUNCTION_2_19();
    if (v18)
    {
      outlined release of Set<String>((uint64_t)v22);
      return 1;
    }
  }
  outlined release of Set<String>((uint64_t)v22);
  return 0;
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance PommesFeature()
{
  return "Pommes";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance PommesFeature()
{
  return "geo_search";
}

uint64_t ContactNeedsValueGuardFlow.flowState.setter(uint64_t a1)
{
  OUTLINED_FUNCTION_13_4();
  uint64_t v4 = v1 + *(void *)(v3 + 96);
  swift_beginAccess();
  OUTLINED_FUNCTION_13_4();
  OUTLINED_FUNCTION_13_4();
  uint64_t v5 = type metadata accessor for ContactNeedsValueGuardFlow.FlowState();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(v4, a1, v5);
  swift_endAccess();
  ContactNeedsValueGuardFlow.flowState.didset();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
}

unsigned char *assignWithCopy for ContactNeedsValueGuardFlow.FlowState(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 - 8);
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(a1, a3);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ExecutionPath.FallbackLocation, Parse))
                  + 48);
      uint64_t v9 = &a1[v8];
      uint64_t v10 = &a2[v8];
      uint64_t v11 = type metadata accessor for Parse();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(v5 + 64));
        return a1;
      }
      uint64_t v7 = type metadata accessor for PluginAction();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void ContactNeedsValueGuardFlow.flowState.didset()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ContactNeedsValueGuardFlow.FlowState();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v14 - v4;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.siriPhone);
  swift_retain_n();
  v14[0] = (id)Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled((os_log_t)v14[0], v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v15 = v9;
    uint64_t v10 = v1 + *(void *)(*(void *)v1 + 96);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v10, v2);
    swift_getWitnessTable();
    uint64_t v11 = String.init<A>(describing:)();
    v14[1] = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_0, (os_log_t)v14[0], v7, "#ContactNeedsValueGuardFlow state => %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
    id v13 = v14[0];
  }
}

uint64_t protocol witness for Flow.execute() in conformance ContactNeedsValueGuardFlow<A>(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 168) + **(int **)(**(void **)v1 + 168));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = protocol witness for Flow.execute() in conformance ContactNeedsValueGuardFlow<A>;
  return v6(a1);
}

uint64_t protocol witness for Flow.execute() in conformance ContactNeedsValueGuardFlow<A>()
{
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t ContactNeedsValueGuardFlow.execute()()
{
  OUTLINED_FUNCTION_22();
  (*(void (**)(void))(v1 + 128))();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 168) + 32))(*(void *)(v0 + 176), *(void *)(v0 + 192), *(void *)(v0 + 160));
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.siriPhone);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
      OUTLINED_FUNCTION_25_4(&dword_0, v22, v23, "#ContactNeedsValueGuardFlow execute() Request needs execution of emergency resource flow on device. Deferring to Emergency plugin.");
      OUTLINED_FUNCTION_6();
    }
    uint64_t v25 = *(void *)(v0 + 168);
    uint64_t v24 = *(void *)(v0 + 176);
    uint64_t v26 = *(void *)(v0 + 160);

    static ExecuteResponse.redirect(nextPluginAction:)();
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
    goto LABEL_26;
  }
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v3 = *(unsigned __int8 **)(v0 + 192);
    uint64_t v4 = *(void *)(v0 + 152);
    uint64_t v5 = *(void *)(v0 + 128);
    uint64_t v6 = *(void *)(v0 + 136);
    int v7 = *v3;
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ExecutionPath.FallbackLocation, Parse));
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v6 + 32))(v4, &v3[*(int *)(v8 + 48)], v5);
    if (v7 == 2)
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      __swift_project_value_buffer(v9, (uint64_t)static Logger.siriPhone);
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v10, v11))
      {
        unint64_t v12 = (uint8_t *)OUTLINED_FUNCTION_7_2();
        *(_WORD *)unint64_t v12 = 0;
        _os_log_impl(&dword_0, v10, v11, "#ContactNeedsValueGuardFlow execute() deferring to CompositionFlow", v12, 2u);
        OUTLINED_FUNCTION_6();
      }
      uint64_t v14 = *(void *)(v0 + 144);
      uint64_t v13 = *(void *)(v0 + 152);
      uint64_t v15 = *(void *)(v0 + 128);
      uint64_t v16 = *(void *)(v0 + 136);
      uint64_t v17 = *(void *)(v0 + 120);

      type metadata accessor for BusinessCompositionFlow();
      OUTLINED_FUNCTION_12();
      v18();
      outlined init with copy of SignalProviding(v17 + *(void *)(*(void *)v17 + 112), v0 + 56);
      *(void *)(v0 + 104) = BusinessCompositionFlow.__allocating_init(parse:sharedGlobals:)(v14, v0 + 56);
      lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type BusinessCompositionFlow and conformance BusinessCompositionFlow, (void (*)(uint64_t))type metadata accessor for BusinessCompositionFlow);
      static ExecuteResponse.complete<A>(next:)();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v13, v15);
    }
    else
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v35 = type metadata accessor for Logger();
      __swift_project_value_buffer(v35, (uint64_t)static Logger.siriPhone);
      uint64_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v36, v37))
      {
        uint64_t v38 = (uint8_t *)OUTLINED_FUNCTION_7_2();
        *(_WORD *)uint64_t v38 = 0;
        _os_log_impl(&dword_0, v36, v37, "#ContactNeedsValueGuardFlow execute() Returning unhandled due to needsServerExecution", v38, 2u);
        OUTLINED_FUNCTION_6();
      }
      uint64_t v39 = *(void *)(v0 + 152);
      uint64_t v40 = *(void *)(v0 + 128);
      uint64_t v41 = *(void *)(v0 + 136);
      uint64_t v42 = *(void *)(v0 + 120);

      outlined init with copy of SignalProviding(v42 + *(void *)(*(void *)v42 + 112), v0 + 16);
      type metadata accessor for RedirectToServerFlow();
      swift_allocObject();
      *(void *)(v0 + 96) = RedirectToServerFlow.init(to:sharedGlobals:isSentinelFlow:)(v7, (long long *)(v0 + 16), 0);
      lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type RedirectToServerFlow and conformance RedirectToServerFlow, (void (*)(uint64_t))type metadata accessor for RedirectToServerFlow);
      static ExecuteResponse.ongoing<A>(next:)();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v39, v40);
    }
LABEL_26:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v43 = *(uint64_t (**)(void))(v0 + 8);
    return v43();
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  __swift_project_value_buffer(v27, (uint64_t)static Logger.siriPhone);
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v28, v29))
  {
    *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
    OUTLINED_FUNCTION_25_4(&dword_0, v30, v31, "#ContactNeedsValueGuardFlow execute() Request needs execution on device. Moving onto NeedsValue flow strategy.");
    OUTLINED_FUNCTION_6();
  }

  OUTLINED_FUNCTION_19();
  uint64_t v44 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of AnyValueFlow.execute()
                                        + async function pointer to dispatch thunk of AnyValueFlow.execute());
  char v32 = (void *)swift_task_alloc();
  *(void *)(v0 + 200) = v32;
  *char v32 = v0;
  v32[1] = ContactNeedsValueGuardFlow.execute();
  uint64_t v33 = *(void *)(v0 + 112);
  return v44(v33);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v4;

  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  return _swift_task_switch(ContactNeedsValueGuardFlow.execute(), 0, 0);
}

uint64_t ContactNeedsValueGuardFlow.execute()(uint64_t a1)
{
  v2[14] = a1;
  v2[15] = v1;
  uint64_t v3 = type metadata accessor for Parse();
  v2[16] = v3;
  OUTLINED_FUNCTION_19_0(v3);
  v2[17] = v4;
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for PluginAction();
  v2[20] = v5;
  OUTLINED_FUNCTION_19_0(v5);
  v2[21] = v6;
  v2[22] = swift_task_alloc();
  v2[23] = type metadata accessor for ContactNeedsValueGuardFlow.FlowState();
  v2[24] = swift_task_alloc();
  return _swift_task_switch(ContactNeedsValueGuardFlow.execute(), 0, 0);
}

uint64_t outlined init with copy of SharedGlobalsProviding(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  OUTLINED_FUNCTION_10();
  (*v3)(a2);
  return a2;
}

uint64_t outlined init with copy of SiriPhoneContact()
{
  OUTLINED_FUNCTION_4_5();
  uint64_t v2 = *(void *)(v1 + 24);
  *(void *)(v0 + 24) = v2;
  *(void *)(v0 + 32) = *(void *)(v1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(v0);
  return v0;
}

uint64_t _s27PhoneCallFlowDelegatePlugin22SharedGlobalsProviding_pWOcTm_0()
{
  OUTLINED_FUNCTION_4_5();
  *(void *)(v0 + 24) = *(void *)(v1 + 24);
  *(void *)(v0 + 32) = *(void *)(v1 + 32);
  OUTLINED_FUNCTION_10();
  (*v2)(v0);
  return v0;
}

uint64_t type metadata accessor for RedirectToServerFlow()
{
  return self;
}

uint64_t RedirectToServerFlow.init(to:sharedGlobals:isSentinelFlow:)(char a1, long long *a2, char a3)
{
  *(unsigned char *)(v3 + 16) = a1;
  outlined init with take of AppSelectionSignalComponent(a2, v3 + 24);
  *(unsigned char *)(v3 + 64) = a3;
  return v3;
}

uint64_t protocol witness for SiriEnvironmentLocating.siriEnvironment.setter in conformance RedirectToCompanionFlow()
{
  return SiriEnvironmentLocating<>.siriEnvironment.setter();
}

uint64_t protocol witness for SiriEnvironmentLocating.siriEnvironment.getter in conformance RedirectToCompanionFlow()
{
  return SiriEnvironmentLocating<>.siriEnvironment.getter();
}

uint64_t protocol witness for Flow.execute() in conformance RedirectToServerFlow(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 120) + **(int **)(**(void **)v1 + 120));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return v6(a1);
}

uint64_t UnsupportedFlowCATs.startCallEmergencyInRetailStore()()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v3();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v9;

  OUTLINED_FUNCTION_1_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v5 = v4;
  uint64_t v6 = swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(uint64_t))(v4 + 8);
  if (!v0) {
    uint64_t v6 = v3;
  }
  return v7(v6);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_16_1();
  uint64_t v0 = OUTLINED_FUNCTION_3_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  void *v1 = v2;
  v1[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  OUTLINED_FUNCTION_43_2();
  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_46();
  return v3();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t (*v4)(unint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  void *v1 = v2;
  v1[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  uint64_t v3 = OUTLINED_FUNCTION_44_0(47);
  return v4(v3);
}

{
  return OUTLINED_FUNCTION_7_12();
}

uint64_t RedirectToServerFlow.execute()()
{
  OUTLINED_FUNCTION_1_0();
  v1[14] = v2;
  v1[15] = v0;
  uint64_t v3 = type metadata accessor for FlowUnhandledReason();
  v1[16] = v3;
  OUTLINED_FUNCTION_19_0(v3);
  v1[17] = v4;
  v1[18] = OUTLINED_FUNCTION_35();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v1[19] = OUTLINED_FUNCTION_35();
  uint64_t v5 = type metadata accessor for PommesContext.Source();
  v1[20] = v5;
  OUTLINED_FUNCTION_19_0(v5);
  v1[21] = v6;
  v1[22] = OUTLINED_FUNCTION_35();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  v1[23] = OUTLINED_FUNCTION_35();
  uint64_t v7 = type metadata accessor for NLContextUpdate();
  v1[24] = v7;
  OUTLINED_FUNCTION_19_0(v7);
  v1[25] = v8;
  v1[26] = OUTLINED_FUNCTION_35();
  return _swift_task_switch(RedirectToServerFlow.execute(), 0, 0);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t (*v10)(void);
  uint64_t v12;

  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_0, v1, v2, "#RedirectToServerFlow: Couldn't submit PommesContext before server fallback", v3, 2u);
    OUTLINED_FUNCTION_6();
  }
  swift_errorRelease();

  uint64_t v4 = OUTLINED_FUNCTION_3_103();
  v5(v4);
  static ExecuteResponse.unhandled(reason:isComplete:)();
  uint64_t v6 = OUTLINED_FUNCTION_6_90();
  v7(v6);
  uint64_t v8 = OUTLINED_FUNCTION_2_117();
  v9(v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v10();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t (*v7)(void);
  uint64_t v9;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v1 = OUTLINED_FUNCTION_3_103();
  v2(v1);
  static ExecuteResponse.unhandled(reason:isComplete:)();
  uint64_t v3 = OUTLINED_FUNCTION_6_90();
  v4(v3);
  uint64_t v5 = OUTLINED_FUNCTION_2_117();
  v6(v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v7();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(void);
  uint64_t v32;
  _OWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  uint64_t v35 = v0;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 216) = __swift_project_value_buffer(v1, (uint64_t)static Logger.siriPhone);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  uint64_t v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = *(void *)(v0 + 120);
  if (v4)
  {
    uint64_t v6 = swift_slowAlloc();
    *(void *)&v33[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315394;
    *(unsigned char *)(v0 + 244) = *(unsigned char *)(v5 + 16);
    uint64_t v7 = String.init<A>(describing:)();
    *(void *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, (uint64_t *)v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v6 + 12) = 1024;
    uint64_t v9 = *(unsigned __int8 *)(v5 + 64);
    swift_release();
    *(_DWORD *)(v0 + 240) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_0, v2, v3, "#RedirectToServerFlow: Triggering server redirect to %s, isSentinelFlow = %{BOOL}d", (uint8_t *)v6, 0x12u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v10 = *(void *)(v0 + 120);
  if (*(unsigned char *)(v10 + 16))
  {
    if (*(unsigned char *)(v10 + 16) == 1)
    {
      unint64_t v12 = *(void *)(v0 + 200);
      os_log_type_t v11 = *(void *)(v0 + 208);
      uint64_t v13 = *(void *)(v0 + 184);
      char v32 = *(void *)(v0 + 192);
      uint64_t v14 = *(void *)(v0 + 168);
      uint64_t v15 = *(void *)(v0 + 176);
      uint64_t v16 = *(void *)(v0 + 152);
      uint64_t v17 = *(void *)(v0 + 160);
      NLContextUpdate.init()();
      (*(void (**)(uint64_t, void, uint64_t))(v14 + 104))(v15, enum case for PommesContext.Source.pluginDefined(_:), v17);
      PommesContext.init(source:domain:listenAfterSpeaking:)();
      char v18 = type metadata accessor for PommesContext();
      __swift_storeEnumTagSinglePayload(v13, 0, 1, v18);
      NLContextUpdate.pommesContext.setter();
      uint64_t v19 = *(void *)(v10 + 48);
      uint64_t v20 = *(void *)(v10 + 56);
      __swift_project_boxed_opaque_existential_1((void *)(v10 + 24), v19);
      (*(void (**)(uint64_t, uint64_t))(v20 + 16))(v19, v20);
      os_log_type_t v21 = *(void *)(v0 + 40);
      uint64_t v22 = *(void *)(v0 + 56);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v21);
      uint64_t v34 = 0;
      memset(v33, 0, sizeof(v33));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v16, v11, v32);
      __swift_storeEnumTagSinglePayload(v16, 0, 1, v32);
      *(void *)(v0 + 88) = type metadata accessor for AceOutput();
      *(void *)(v0 + 96) = &protocol witness table for AceOutput;
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 64));
      AceOutput.init(commands:flowActivity:nlContextUpdate:)();
      uint64_t v23 = (void *)swift_task_alloc();
      *(void *)(v0 + 224) = v23;
      *uint64_t v23 = v0;
      v23[1] = RedirectToServerFlow.execute();
      return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 64, v21, v22);
    }
    uint64_t v24 = Logger.logObject.getter();
    uint64_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl(&dword_0, v24, v25, "#RedirectToServerFlow: Invalid location.", v26, 2u);
      OUTLINED_FUNCTION_6();
    }
    uint64_t v28 = *(void *)(v0 + 136);
    uint64_t v27 = *(void *)(v0 + 144);
    os_log_type_t v29 = *(void *)(v0 + 128);

    (*(void (**)(uint64_t, void, uint64_t))(v28 + 104))(v27, enum case for FlowUnhandledReason.needsServerExecution(_:), v29);
  }
  else
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 136) + 104))(*(void *)(v0 + 144), enum case for FlowUnhandledReason.needsServerExecution(_:), *(void *)(v0 + 128));
  }
  static ExecuteResponse.unhandled(reason:isComplete:)();
  (*(void (**)(void, void))(*(void *)(v0 + 136) + 8))(*(void *)(v0 + 144), *(void *)(v0 + 128));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v30();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t (*v6)();
  uint64_t v8;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v5 = v4;
  *(void *)(v3 + 232) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v6 = RedirectToServerFlow.execute();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1(v3 + 64);
    uint64_t v6 = RedirectToServerFlow.execute();
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t protocol witness for FlowPlugin.warmup(refId:) in conformance PhoneCallFlowDelegatePlugin()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 160))();
}

Swift::Void __swiftcall PhoneCallFlowDelegatePlugin.warmup(refId:)(Swift::String refId)
{
  object = refId._object;
  uint64_t countAndFlagsBits = refId._countAndFlagsBits;
  uint64_t v4 = v1[12];
  uint64_t v5 = v1[13];
  __swift_project_boxed_opaque_existential_1(v1 + 9, v4);
  (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(v5 + 8))(countAndFlagsBits, object, v4, v5);
}

Swift::Void __swiftcall EligibleAppFinder.prefetchApps(intentTypeNames:)(Swift::OpaquePointer intentTypeNames)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_4();
  uint64_t v9 = v8 - v7;
  uint64_t v20 = type metadata accessor for DispatchQoS();
  OUTLINED_FUNCTION_0_0();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_4();
  uint64_t v15 = v14 - v13;
  uint64_t v16 = (void *)v1[2];
  uint64_t v17 = (Swift::OpaquePointer *)swift_allocObject();
  v17[2]._rawValue = intentTypeNames._rawValue;
  v17[3]._rawValue = v1;
  aBlock[4] = partial apply for closure #1 in EligibleAppFinder.prefetchApps(intentTypeNames:);
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_7;
  char v18 = _Block_copy(aBlock);
  id v19 = v16;
  swift_bridgeObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v15, v20);
  swift_release();
}

uint64_t EligibleAppFinder.makeTask(intentTypeName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v4 - 8);
  OUTLINED_FUNCTION_4();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload(v7, 1, 1, v8);
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = a1;
  v9[5] = a2;
  LODWORD(a1) = __swift_getEnumTagSinglePayload(v7, 1, v8);
  swift_bridgeObjectRetain();
  if (a1 == 1)
  {
    outlined destroy of TaskPriority?(v7);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
    if (v9[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      dispatch thunk of Actor.unownedExecutor.getter();
      swift_unknownObjectRelease();
    }
  }
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = &async function pointer to partial apply for closure #1 in EligibleAppFinder.makeTask(intentTypeName:);
  *(void *)(v10 + 24) = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [App]);
  return swift_task_create();
}

uint64_t protocol witness for Flow.onAsync(input:) in conformance RedirectToCompanionFlow()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_4_2();
  void *v4 = v3;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v3 + 8);
  return v5(v2);
}

uint64_t protocol witness for Flow.onAsync(input:) in conformance RedirectToCompanionFlow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for Flow.onAsync(input:) in conformance RedirectToCompanionFlow;
  return Flow.onAsync(input:)(a1, a2, a3);
}

uint64_t protocol witness for Flow.on(input:) in conformance RedirectToServerFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))() & 1;
}

uint64_t PlayVoiceMailAction.isLeadingSavedVoiceMailPostPrompt.getter()
{
  return *(unsigned __int8 *)(v0 + 64);
}

void NLTransformer.transformToPhoneCallNLIntent(nlv3Intent:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v57 = v0;
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for NLIntent();
  OUTLINED_FUNCTION_0_0();
  uint64_t v55 = v6;
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_3_1();
  uint64_t v9 = v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NonTerminalIntentNode?);
  uint64_t v11 = OUTLINED_FUNCTION_11_0(v10);
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_46_0();
  uint64_t v53 = v12 - v13;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v46 - v15;
  static Signpost.begin(_:)();
  uint64_t v56 = v17;
  uint64_t v19 = v18;
  int v21 = v20;
  NLIntent.domainNode.getter();
  uint64_t v22 = type metadata accessor for NonTerminalIntentNode();
  OUTLINED_FUNCTION_28_6((uint64_t)v16, 1, v22);
  if (v38)
  {
    outlined destroy of UUID?((uint64_t)v16, &demangling cache variable for type metadata for NonTerminalIntentNode?);
  }
  else
  {
    uint64_t v54 = v5;
    uint64_t v35 = v19;
    uint64_t v36 = NonTerminalIntentNode.ontologyNodeName.getter();
    OUTLINED_FUNCTION_49_3();
    OUTLINED_FUNCTION_11();
    v37();
    BOOL v38 = v36 == 0x6C6143656E6F6870 && v16 == (char *)0xE90000000000006CLL;
    if (v38)
    {
      swift_bridgeObjectRelease();
LABEL_18:
      NLTransformer.transformationResult(nlv3Intent:)();
      NLTransformer.appendToNLIntentHistory(transformationResult:)(&v58);
      outlined init with take of PhoneCallNLIntent?((uint64_t)&v59, v4, &demangling cache variable for type metadata for PhoneCallNLIntent?);
      goto LABEL_21;
    }
    char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v19 = v35;
    uint64_t v5 = v54;
    if (v39) {
      goto LABEL_18;
    }
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.siriPhone);
  uint64_t v24 = v55;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v9, v2, v5);
  uint64_t v25 = v57;
  swift_retain_n();
  uint64_t v26 = Logger.logObject.getter();
  int v52 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v26, (os_log_type_t)v52))
  {
    os_log_t v48 = v26;
    uint64_t v54 = v5;
    int v49 = v21;
    uint64_t v50 = v19;
    uint64_t v51 = v4;
    uint64_t v27 = OUTLINED_FUNCTION_11_7();
    uint64_t v47 = OUTLINED_FUNCTION_10_0();
    v60[0] = v47;
    *(_DWORD *)uint64_t v27 = 136315394;
    uint64_t v46 = v27 + 4;
    uint64_t v28 = v25[4];
    uint64_t v29 = v25[5];
    uint64_t v30 = v25;
    uint64_t v31 = v25[6];
    uint64_t v32 = v30[7];
    uint64_t v58 = 0;
    unint64_t v59 = 0xE000000000000000;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v28, v29, v31, v32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, v60);
    OUTLINED_FUNCTION_51_1(v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2080;
    uint64_t v34 = v53;
    NLIntent.domainNode.getter();
    OUTLINED_FUNCTION_28_6(v34, 1, v22);
    if (v38)
    {
      outlined destroy of UUID?(v34, &demangling cache variable for type metadata for NonTerminalIntentNode?);
      unint64_t v40 = 0xE700000000000000;
      uint64_t v41 = 0x6E776F6E6B6E75;
    }
    else
    {
      unint64_t v40 = v34;
      uint64_t v41 = NonTerminalIntentNode.ontologyNodeName.getter();
      OUTLINED_FUNCTION_49_3();
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v34, v22);
    }
    uint64_t v4 = v51;
    uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v40, v60);
    OUTLINED_FUNCTION_51_1(v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_11();
    v44();
    os_log_t v45 = v48;
    _os_log_impl(&dword_0, v48, (os_log_type_t)v52, "%s NLv3Intent is not in the phoneCall domain: %s", (uint8_t *)v27, 0x16u);
    OUTLINED_FUNCTION_27_6();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
    swift_release_n();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v9, v5);
  }
  *(void *)(v4 + 32) = 0;
  *(_OWORD *)uint64_t v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
LABEL_21:
  Signpost.OpenSignpost.end()();
  swift_release();
  OUTLINED_FUNCTION_26_1();
}

void NLTransformer.transformationResult(nlv3Intent:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for NLIntent();
  OUTLINED_FUNCTION_0_0();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_35_7();
  uint64_t v11 = type metadata accessor for PhoneCallNLv3Intent(0);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_46_0();
  uint64_t v15 = v13 - v14;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v32 - v17;
  uint64_t v37 = NLIntent.hashValue.getter();
  NLTransformer.alreadyTransformed(newHash:)(v37, v39);
  if (v40 == 1)
  {
    outlined destroy of UUID?((uint64_t)v39, (uint64_t *)&demangling cache variable for type metadata for TransformationResult?);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v1, v4, v7);
    PhoneCallNLv3Intent.init(intent:)(v1, (uint64_t)v18);
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.siriPhone);
    outlined init with copy of PhoneCallNLv3Intent((uint64_t)v18, v15);
    swift_retain_n();
    int v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    int v22 = v21;
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v23 = OUTLINED_FUNCTION_11_7();
      uint64_t v35 = OUTLINED_FUNCTION_10_0();
      v38[0] = v35;
      *(_DWORD *)uint64_t v23 = 136315394;
      uint64_t v32 = v23 + 4;
      uint64_t v36 = v11;
      uint64_t v25 = v2[4];
      uint64_t v24 = v2[5];
      int v34 = v22;
      uint64_t v27 = v2[6];
      uint64_t v26 = v2[7];
      *(void *)&v39[0] = 0;
      *((void *)&v39[0] + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      os_log_t v33 = v20;
      DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v25, v24, v27, v26);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)&v39[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(*(uint64_t *)&v39[0], *((unint64_t *)&v39[0] + 1), v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_6_2();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2080;
      lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent();
      uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&v39[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, v38);
      uint64_t v11 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of PhoneCallNLv3Intent(v15);
      os_log_t v30 = v33;
      _os_log_impl(&dword_0, v33, (os_log_type_t)v34, "%s found no cached result. Transformation generated phoneNLIntent: %s", (uint8_t *)v23, 0x16u);
      OUTLINED_FUNCTION_27_6();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {
      OUTLINED_FUNCTION_6_2();
      outlined destroy of PhoneCallNLv3Intent(v15);
    }
    void v6[4] = v11;
    v6[5] = (uint64_t)&protocol witness table for PhoneCallNLv3Intent;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v6 + 1);
    outlined init with take of PhoneCallNLv3Intent((uint64_t)v18, (uint64_t)boxed_opaque_existential_1);
    *uint64_t v6 = v37;
    outlined init with copy of TransformationResult(v6, v39);
    outlined init with take of PhoneCallNLIntent?((uint64_t)v39, (uint64_t)v38, (uint64_t *)&demangling cache variable for type metadata for TransformationResult?);
    swift_beginAccess();
    outlined assign with take of PhoneCallNLIntent?((uint64_t)v38, (uint64_t)(v2 + 9), (uint64_t *)&demangling cache variable for type metadata for TransformationResult?);
    swift_endAccess();
  }
  else
  {
    OUTLINED_FUNCTION_33_4();
  }
  OUTLINED_FUNCTION_26_1();
}

uint64_t type metadata accessor for RedirectToCompanionFlow.State(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for PhoneCallNLv3Intent(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for PhoneCallNLv3Intent);
}

uint64_t PhoneCallNLv3Intent.init(intent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (int *)type metadata accessor for PhoneCallNLv3Intent(0);
  uint64_t v4 = v3[5];
  type metadata accessor for AppOntologyNode();
  OUTLINED_FUNCTION_21_48();
  uint64_t v72 = v5;
  swift_allocObject();
  uint64_t v6 = AppOntologyNode.init(name:multicardinal:)();
  *(void *)(a2 + v4) = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallAttribute>);
  OUTLINED_FUNCTION_21_48();
  uint64_t v70 = v7;
  swift_allocObject();
  uint64_t v71 = v6;
  swift_retain();
  uint64_t v8 = TerminalOntologyNode.init(name:multicardinal:)();
  OUTLINED_FUNCTION_30_35(v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallAudioRoute>);
  OUTLINED_FUNCTION_21_48();
  uint64_t v68 = v9;
  swift_allocObject();
  uint64_t v69 = v6;
  swift_retain();
  uint64_t v10 = OUTLINED_FUNCTION_45_26();
  OUTLINED_FUNCTION_30_35(v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallCapability>);
  OUTLINED_FUNCTION_21_48();
  uint64_t v66 = v11;
  swift_allocObject();
  uint64_t v67 = v6;
  swift_retain();
  uint64_t v12 = OUTLINED_FUNCTION_45_26();
  OUTLINED_FUNCTION_30_35(v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallPreferredProvider>);
  OUTLINED_FUNCTION_21_48();
  uint64_t v62 = v13;
  swift_allocObject();
  uint64_t v64 = v6;
  swift_retain();
  uint64_t v14 = TerminalOntologyNode.init(name:multicardinal:)();
  OUTLINED_FUNCTION_30_35(v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallDestinationType>);
  OUTLINED_FUNCTION_21_48();
  uint64_t v56 = v15;
  swift_allocObject();
  uint64_t v58 = v6;
  swift_retain();
  uint64_t v16 = TerminalOntologyNode.init(name:multicardinal:)();
  OUTLINED_FUNCTION_30_35(v16);
  type metadata accessor for PhoneCallContactOntologyNode(0);
  OUTLINED_FUNCTION_21_48();
  uint64_t v61 = v17;
  swift_allocObject();
  uint64_t v53 = v6;
  swift_retain();
  uint64_t v18 = PhoneCallContactOntologyNode.init(name:multicardinal:)();
  OUTLINED_FUNCTION_30_35(v18);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<String>);
  OUTLINED_FUNCTION_21_48();
  uint64_t v65 = v19;
  swift_allocObject();
  uint64_t v55 = v6;
  swift_retain();
  uint64_t v20 = TerminalOntologyNode.init(name:multicardinal:)();
  OUTLINED_FUNCTION_30_35(v20);
  uint64_t v21 = v3[14];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallNoun>);
  OUTLINED_FUNCTION_21_48();
  uint64_t v57 = v22;
  swift_allocObject();
  uint64_t v59 = v6;
  swift_retain();
  OUTLINED_FUNCTION_52_23();
  uint64_t v23 = TerminalOntologyNode.init(name:multicardinal:)();
  *(void *)(a2 + v21) = v23;
  uint64_t v24 = v3[15];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallVerb>);
  OUTLINED_FUNCTION_21_48();
  uint64_t v63 = v25;
  swift_allocObject();
  uint64_t v54 = v23;
  swift_retain();
  OUTLINED_FUNCTION_0_2();
  uint64_t v26 = TerminalOntologyNode.init(name:multicardinal:)();
  *(void *)(a2 + v24) = v26;
  uint64_t v27 = v3[16];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OntologyNode>);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_467720;
  uint64_t v29 = one-time initialization token for voiceMailNoun;
  uint64_t v60 = v26;
  swift_retain();
  if (v29 != -1) {
    swift_once();
  }
  uint64_t v30 = static VoiceMail.voiceMailNoun;
  *(void *)(v28 + 56) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<VoiceMail.VoiceMailNoun>);
  *(void *)(v28 + 64) = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type TerminalOntologyNode<VoiceMail.VoiceMailNoun> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<VoiceMail.VoiceMailNoun>);
  *(void *)(v28 + 32) = v30;
  uint64_t v31 = one-time initialization token for voiceMailVerb;
  swift_retain();
  if (v31 != -1) {
    swift_once();
  }
  uint64_t v32 = static VoiceMail.voiceMailVerb;
  *(void *)(v28 + 96) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<VoiceMail.VoiceMailVerb>);
  *(void *)(v28 + 104) = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type TerminalOntologyNode<VoiceMail.VoiceMailVerb> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<VoiceMail.VoiceMailVerb>);
  *(void *)(v28 + 72) = v32;
  uint64_t v33 = type metadata accessor for NonTerminalOntologyNode();
  OUTLINED_FUNCTION_21_0();
  swift_retain();
  uint64_t v34 = NonTerminalOntologyNode.init(name:multicardinal:childNodes:)();
  *(void *)(a2 + v27) = v34;
  uint64_t v35 = type metadata accessor for SmsGroupOntologyNode(0);
  OUTLINED_FUNCTION_21_0();
  uint64_t v52 = v34;
  swift_retain();
  uint64_t v36 = SmsGroupOntologyNode.init(name:multicardinal:)();
  OUTLINED_FUNCTION_30_35(v36);
  type metadata accessor for NLIntent();
  OUTLINED_FUNCTION_1_44();
  uint64_t v38 = v37;
  uint64_t v51 = v39;
  (*(void (**)(uint64_t, uint64_t))(v37 + 16))(a2, a1);
  uint64_t v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_48A870;
  *(void *)(v40 + 56) = v72;
  *(void *)(v40 + 64) = &protocol witness table for NonTerminalOntologyNode;
  *(void *)(v40 + 32) = v71;
  *(void *)(v40 + 96) = v70;
  *(void *)(v40 + 104) = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type TerminalOntologyNode<PhoneCallAttribute> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallAttribute>);
  *(void *)(v40 + 72) = v69;
  *(void *)(v40 + 136) = v68;
  *(void *)(v40 + 144) = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type TerminalOntologyNode<PhoneCallAudioRoute> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallAudioRoute>);
  *(void *)(v40 + 112) = v67;
  *(void *)(v40 + 176) = v66;
  *(void *)(v40 + 184) = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type TerminalOntologyNode<PhoneCallCapability> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallCapability>);
  *(void *)(v40 + 152) = v64;
  *(void *)(v40 + 216) = v62;
  *(void *)(v40 + 224) = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type TerminalOntologyNode<PhoneCallPreferredProvider> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallPreferredProvider>);
  *(void *)(v40 + 192) = v58;
  *(void *)(v40 + 256) = v56;
  *(void *)(v40 + 264) = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type TerminalOntologyNode<PhoneCallDestinationType> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallDestinationType>);
  *(void *)(v40 + 232) = v53;
  uint64_t v41 = one-time initialization token for confirmation;
  uint64_t v73 = v27;
  swift_retain();
  if (v41 != -1) {
    swift_once();
  }
  uint64_t v42 = static PhoneCallNLv3Intent.confirmation;
  *(void *)(v40 + 296) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallConfirmation>);
  uint64_t v43 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type TerminalOntologyNode<PhoneCallConfirmation> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallConfirmation>);
  *(void *)(v40 + 272) = v42;
  *(void *)(v40 + 336) = v61;
  *(void *)(v40 + 344) = &protocol witness table for NonTerminalOntologyNode;
  *(void *)(v40 + 304) = v43;
  *(void *)(v40 + 312) = v55;
  uint64_t v44 = one-time initialization token for callId;
  swift_retain();
  if (v44 != -1) {
    swift_once();
  }
  uint64_t v45 = static PhoneCallNLv3Intent.callId;
  *(void *)(v40 + 376) = v65;
  uint64_t v46 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type TerminalOntologyNode<String> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<String>);
  *(void *)(v40 + 352) = v45;
  *(void *)(v40 + 416) = v65;
  *(void *)(v40 + 424) = v46;
  *(void *)(v40 + 384) = v46;
  *(void *)(v40 + 392) = v59;
  *(void *)(v40 + 456) = v57;
  *(void *)(v40 + 464) = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type TerminalOntologyNode<PhoneCallNoun> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallNoun>);
  *(void *)(v40 + 432) = v54;
  uint64_t v47 = one-time initialization token for reference;
  swift_retain();
  if (v47 != -1) {
    swift_once();
  }
  uint64_t v48 = static PhoneCallNLv3Intent.reference;
  *(void *)(v40 + 496) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallReference>);
  *(void *)(v40 + 504) = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type TerminalOntologyNode<PhoneCallReference> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallReference>);
  *(void *)(v40 + 472) = v48;
  *(void *)(v40 + 536) = v63;
  *(void *)(v40 + 544) = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type TerminalOntologyNode<PhoneCallVerb> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallVerb>);
  *(void *)(v40 + 512) = v60;
  *(void *)(v40 + 576) = v33;
  *(void *)(v40 + 584) = &protocol witness table for NonTerminalOntologyNode;
  *(void *)(v40 + 552) = v52;
  *(void *)(v40 + 616) = v35;
  *(void *)(v40 + 624) = &protocol witness table for NonTerminalOntologyNode;
  *(void *)(v40 + 592) = v73;
  type metadata accessor for DomainOntologyNode();
  OUTLINED_FUNCTION_21_0();
  swift_retain();
  OUTLINED_FUNCTION_52_23();
  uint64_t v49 = DomainOntologyNode.init(name:childNodes:isInEventTree:)();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8))(a1, v51);
  *(void *)(a2 + v3[6]) = v49;
  return result;
}

uint64_t type metadata accessor for PhoneCallContactOntologyNode(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for PhoneCallContactOntologyNode);
}

uint64_t PhoneCallContactOntologyNode.init(name:multicardinal:)()
{
  OUTLINED_FUNCTION_24_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OntologyNode>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_46DE50;
  if (one-time initialization token for personNode != -1) {
    swift_once();
  }
  uint64_t v1 = static PhoneCallContactOntologyNode.personNode;
  *(void *)(v0 + 56) = type metadata accessor for NonTerminalOntologyNode();
  *(void *)(v0 + 64) = &protocol witness table for NonTerminalOntologyNode;
  *(void *)(v0 + 32) = v1;
  uint64_t v2 = one-time initialization token for phoneNumberNode;
  swift_retain();
  if (v2 != -1) {
    swift_once();
  }
  uint64_t v3 = static PhoneCallContactOntologyNode.phoneNumberNode;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<String>);
  *(void *)(v0 + 96) = v4;
  uint64_t v5 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type TerminalOntologyNode<String> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<String>);
  *(void *)(v0 + 104) = v5;
  *(void *)(v0 + 72) = v3;
  uint64_t v6 = one-time initialization token for phoneCallContactNameNode;
  swift_retain();
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v7 = static PhoneCallContactOntologyNode.phoneCallContactNameNode;
  *(void *)(v0 + 136) = v4;
  *(void *)(v0 + 144) = v5;
  *(void *)(v0 + 112) = v7;
  uint64_t v8 = one-time initialization token for phoneCallContactIdNode;
  swift_retain();
  if (v8 != -1) {
    swift_once();
  }
  uint64_t v9 = static PhoneCallContactOntologyNode.phoneCallContactIdNode;
  *(void *)(v0 + 176) = v4;
  *(void *)(v0 + 184) = v5;
  *(void *)(v0 + 152) = v9;
  uint64_t v10 = one-time initialization token for phoneCallContactRole;
  swift_retain();
  if (v10 != -1) {
    swift_once();
  }
  uint64_t v11 = static PhoneCallContactOntologyNode.phoneCallContactRole;
  *(void *)(v0 + 216) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallContactRole.NLv3>);
  *(void *)(v0 + 224) = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type TerminalOntologyNode<PhoneCallContactRole.NLv3> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallContactRole.NLv3>);
  *(void *)(v0 + 192) = v11;
  uint64_t v12 = one-time initialization token for phoneCallContactReferenceNode;
  swift_retain();
  if (v12 != -1) {
    swift_once();
  }
  uint64_t v13 = static PhoneCallContactOntologyNode.phoneCallContactReferenceNode;
  *(void *)(v0 + 256) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallContactReference>);
  *(void *)(v0 + 264) = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type TerminalOntologyNode<PhoneCallContactReference> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallContactReference>);
  *(void *)(v0 + 232) = v13;
  uint64_t v14 = one-time initialization token for emailAddressNode;
  swift_retain();
  if (v14 != -1) {
    swift_once();
  }
  uint64_t v15 = static PhoneCallContactOntologyNode.emailAddressNode;
  *(void *)(v0 + 296) = v4;
  *(void *)(v0 + 304) = v5;
  *(void *)(v0 + 272) = v15;
  uint64_t v16 = one-time initialization token for contactTypeNode;
  swift_retain();
  if (v16 != -1) {
    swift_once();
  }
  uint64_t v17 = static PhoneCallContactOntologyNode.contactTypeNode;
  *(void *)(v0 + 336) = v4;
  *(void *)(v0 + 344) = v5;
  *(void *)(v0 + 312) = v17;
  swift_retain();
  OUTLINED_FUNCTION_53_25();
  OUTLINED_FUNCTION_26_1();
  return NonTerminalOntologyNode.init(name:multicardinal:childNodes:)();
}

uint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for SmsGroupOntologyNode(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for SmsGroupOntologyNode);
}

uint64_t SmsGroupOntologyNode.init(name:multicardinal:)()
{
  OUTLINED_FUNCTION_24_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OntologyNode>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_467720;
  if (one-time initialization token for smsGroupName != -1) {
    swift_once();
  }
  uint64_t v1 = static SmsGroupOntologyNode.smsGroupName;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<String>);
  *(void *)(v0 + 56) = v2;
  uint64_t v3 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type TerminalOntologyNode<String> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<String>);
  *(void *)(v0 + 64) = v3;
  *(void *)(v0 + 32) = v1;
  uint64_t v4 = one-time initialization token for smsGroupNameId;
  swift_retain();
  if (v4 != -1) {
    swift_once();
  }
  uint64_t v5 = static SmsGroupOntologyNode.smsGroupNameId;
  *(void *)(v0 + 96) = v2;
  *(void *)(v0 + 104) = v3;
  *(void *)(v0 + 72) = v5;
  swift_retain();
  OUTLINED_FUNCTION_53_25();
  OUTLINED_FUNCTION_26_1();
  return NonTerminalOntologyNode.init(name:multicardinal:childNodes:)();
}

uint64_t outlined init with copy of PhoneCallNLv3Intent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PhoneCallNLv3Intent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t initializeWithCopy for PhoneCallNLv3Intent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for NLIntent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  uint64_t v10 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  *(void *)(a1 + v10) = *(void *)(a2 + v10);
  uint64_t v11 = a3[14];
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  uint64_t v12 = a3[16];
  *(void *)(a1 + a3[15]) = *(void *)(a2 + a3[15]);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  *(void *)(a1 + a3[17]) = *(void *)(a2 + a3[17]);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

unint64_t lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent;
  if (!lazy protocol witness table cache variable for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent)
  {
    type metadata accessor for PhoneCallNLv3Intent(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PhoneCallNLv3Intent(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent, (void (*)(uint64_t))type metadata accessor for PhoneCallNLv3Intent);

  return NLIntentWrapper.description.getter(a1, v2);
}

uint64_t protocol witness for NLIntentWrapper.intent.getter in conformance PhoneCallNLv3Intent()
{
  uint64_t v0 = OUTLINED_FUNCTION_60_19();
  v1(v0);
  OUTLINED_FUNCTION_15();
  uint64_t v2 = OUTLINED_FUNCTION_7_0();

  return v3(v2);
}

{
  return protocol witness for NLIntentWrapper.intent.getter in conformance PhoneCallNLv3Intent();
}

uint64_t outlined destroy of PhoneCallNLv3Intent(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_15();
  OUTLINED_FUNCTION_11();
  v3();
  return a1;
}

uint64_t _s27PhoneCallFlowDelegatePlugin0aB10NLv3IntentVWOhTm_0(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_39_8();
  OUTLINED_FUNCTION_11();
  v3();
  return a1;
}

uint64_t outlined destroy of PhoneCallNLv3Intent(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PhoneCallNLv3Intent(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for PhoneCallNLv3Intent(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NLIntent();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t outlined init with take of PhoneCallNLv3Intent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PhoneCallNLv3Intent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for PhoneCallNLv3Intent(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for NLIntent();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    uint64_t v8 = a3[6];
    *(uint64_t *)((char *)v4 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)v4 + v8) = *(uint64_t *)((char *)a2 + v8);
    uint64_t v9 = a3[8];
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(uint64_t *)((char *)v4 + v9) = *(uint64_t *)((char *)a2 + v9);
    uint64_t v10 = a3[10];
    *(uint64_t *)((char *)v4 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    *(uint64_t *)((char *)v4 + v10) = *(uint64_t *)((char *)a2 + v10);
    uint64_t v11 = a3[12];
    *(uint64_t *)((char *)v4 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
    *(uint64_t *)((char *)v4 + v11) = *(uint64_t *)((char *)a2 + v11);
    uint64_t v12 = a3[14];
    *(uint64_t *)((char *)v4 + a3[13]) = *(uint64_t *)((char *)a2 + a3[13]);
    *(uint64_t *)((char *)v4 + v12) = *(uint64_t *)((char *)a2 + v12);
    uint64_t v13 = a3[16];
    *(uint64_t *)((char *)v4 + a3[15]) = *(uint64_t *)((char *)a2 + a3[15]);
    *(uint64_t *)((char *)v4 + v13) = *(uint64_t *)((char *)a2 + v13);
    *(uint64_t *)((char *)v4 + a3[17]) = *(uint64_t *)((char *)a2 + a3[17]);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

uint64_t PhoneCallNLv3Intent.phoneCallConfirmation.getter()
{
  return PhoneCallNLv3Intent.phoneCallConfirmation.getter();
}

{
  char v0;
  unsigned __int8 v2;

  OUTLINED_FUNCTION_31_39();
  if (!v0) {
    swift_once();
  }
  type metadata accessor for PhoneCallNLv3Intent(0);
  lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent, (void (*)(uint64_t))type metadata accessor for PhoneCallNLv3Intent);
  OUTLINED_FUNCTION_46_27();
  return v2;
}

uint64_t protocol witness for IntentNodeTraversable.traversableIntentNode.getter in conformance PhoneCallNLv3Intent(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent, (void (*)(uint64_t))type metadata accessor for PhoneCallNLv3Intent);

  return NLIntentWrapper.traversableIntentNode.getter(a1, v2);
}

uint64_t protocol witness for IntentNodeTraversable.traversableOntologyNode.getter in conformance PhoneCallNLv3Intent(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent, (void (*)(uint64_t))type metadata accessor for PhoneCallNLv3Intent);

  return NLIntentWrapper.traversableOntologyNode.getter(a1, v2);
}

uint64_t protocol witness for NLIntentWrapper.domainOntologyNode.getter in conformance PhoneCallNLv3Intent()
{
  return swift_retain();
}

unsigned char *storeEnumTagSinglePayload for PhoneCallConfirmation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        uint64_t result = (unsigned char *)OUTLINED_FUNCTION_219((uint64_t)result, v6);
        break;
      case 2:
        uint64_t result = (unsigned char *)OUTLINED_FUNCTION_216((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        uint64_t result = (unsigned char *)OUTLINED_FUNCTION_217((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          uint64_t result = OUTLINED_FUNCTION_218(result, a2 + 4);
        break;
    }
  }
  return result;
}

void OUTLINED_FUNCTION_189_0(uint64_t a1@<X8>)
{
  v2[36] = a1;
  v2[39] = v1;
  v2[40] = v3;
}

uint64_t OUTLINED_FUNCTION_189_1()
{
  return v0;
}

uint64_t PhoneCallNLv3Intent.contacts.getter()
{
  OUTLINED_FUNCTION_12_63();
  lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent, (void (*)(uint64_t))type metadata accessor for PhoneCallNLv3Intent);
  IntentNodeTraversable.intentNodes(forOntologyNode:)();
  OUTLINED_FUNCTION_55_22();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology21NonTerminalIntentNodeVG_27PhoneCallFlowDelegatePlugin0dJ7Contact_ps5NeverOTg5(v1, v2, v3, v4);
  OUTLINED_FUNCTION_15_0();
  return v0;
}

uint64_t closure #1 in PhoneCallNLv3Intent.contacts.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for NonTerminalIntentNode();
  OUTLINED_FUNCTION_1();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_53();
  (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v2, a1);
  type metadata accessor for PhoneCallNLv3Intent(0);
  uint64_t v7 = type metadata accessor for PhoneCallContactIntentNode(0);
  OUTLINED_FUNCTION_21_48();
  uint64_t v8 = swift_allocObject();
  PhoneCallContactIntentNode.init(intentNode:ontologyNode:)();
  a2[3] = v7;
  a2[4] = (uint64_t)&protocol witness table for PhoneCallContactIntentNode;
  *a2 = v8;
  return swift_retain();
}

uint64_t type metadata accessor for PhoneCallContactIntentNode(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for PhoneCallContactIntentNode);
}

uint64_t PhoneCallContactIntentNode.init(intentNode:ontologyNode:)()
{
  OUTLINED_FUNCTION_6_5();
  uint64_t v2 = (void *)(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin26PhoneCallContactIntentNode_handleLabel);
  *uint64_t v2 = 0;
  v2[1] = 0;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin26PhoneCallContactIntentNode_emergencyLocationType) = 3;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin26PhoneCallContactIntentNode_contactSource) = 3;
  type metadata accessor for NonTerminalIntentNode();
  OUTLINED_FUNCTION_15();
  uint64_t v3 = OUTLINED_FUNCTION_7_5();
  v4(v3);
  *(void *)(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin26PhoneCallContactIntentNode_ontologyNode) = v0;
  return v1;
}

uint64_t PhoneCallContactIntentNode.__deallocating_deinit()
{
  PhoneCallContactIntentNode.deinit();

  return swift_deallocClassInstance();
}

uint64_t PhoneCallContactIntentNode.deinit()
{
  type metadata accessor for NonTerminalIntentNode();
  OUTLINED_FUNCTION_15();
  OUTLINED_FUNCTION_11();
  v1();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for SiriPhoneContact.searchQualifier.getter in conformance PhoneCallContactIntentNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 520))() & 0xFFFFFF;
}

uint64_t PhoneCallContactIntentNode.searchQualifier.getter()
{
  if (one-time initialization token for phoneCallContactRole != -1) {
    swift_once();
  }
  type metadata accessor for PhoneCallContactIntentNode(0);
  lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type PhoneCallContactIntentNode and conformance PhoneCallContactIntentNode, (void (*)(uint64_t))type metadata accessor for PhoneCallContactIntentNode);
  OUTLINED_FUNCTION_46_27();
  uint64_t result = 0;
  switch(v1)
  {
    case 1:
      return result;
    case 2:
      uint64_t result = 1;
      break;
    case 3:
      uint64_t result = 512;
      break;
    default:
      uint64_t result = 2;
      break;
  }
  return result;
}

uint64_t protocol witness for IntentNodeTraversable.traversableIntentNode.getter in conformance PhoneCallContactIntentNode(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return NonTerminalIntentNodeWrapper.traversableIntentNode.getter(a1, WitnessTable);
}

uint64_t protocol witness for NonTerminalIntentNodeWrapper.intentNode.getter in conformance PhoneCallContactIntentNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t PhoneCallContactIntentNode.intentNode.getter()
{
  swift_beginAccess();
  type metadata accessor for NonTerminalIntentNode();
  OUTLINED_FUNCTION_15();
  OUTLINED_FUNCTION_33_31();
  return v0();
}

uint64_t protocol witness for IntentNodeTraversable.traversableOntologyNode.getter in conformance PhoneCallContactIntentNode(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return NonTerminalIntentNodeWrapper.traversableOntologyNode.getter(a1, WitnessTable);
}

uint64_t protocol witness for NonTerminalIntentNodeWrapper.ontologyNode.getter in conformance PhoneCallContactIntentNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))();
}

uint64_t PhoneCallContactIntentNode.ontologyNode.getter()
{
  return swift_retain();
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance PhoneCallContactRole.NLv3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance PhoneCallAttribute(a1, a2, a3, (uint64_t)lazy protocol witness table accessor for type PhoneCallContactRole.NLv3 and conformance PhoneCallContactRole.NLv3, (uint64_t)lazy protocol witness table accessor for type PhoneCallContactRole.NLv3 and conformance PhoneCallContactRole.NLv3, (uint64_t)lazy protocol witness table accessor for type PhoneCallContactRole.NLv3 and conformance PhoneCallContactRole.NLv3, a7, a8, a9, a10);
}

PhoneCallFlowDelegatePlugin::PhoneCallContactRole::NLv3_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallContactRole.NLv3@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallContactRole::NLv3_optional *a2@<X8>)
{
  result.value = PhoneCallContactRole.NLv3.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

PhoneCallFlowDelegatePlugin::PhoneCallContactRole::NLv3_optional __swiftcall PhoneCallContactRole.NLv3.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of PhoneCallContactRole.NLv3.init(rawValue:);
  return (PhoneCallFlowDelegatePlugin::PhoneCallContactRole::NLv3_optional)PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds.init(rawValue:)(rawValue, v1);
}

uint64_t *OUTLINED_FUNCTION_16_0()
{
  *(void *)(v2 + 72) = v1;
  return __swift_allocate_boxed_opaque_existential_1(v0);
}

uint64_t OUTLINED_FUNCTION_160_1(uint64_t a1)
{
  v2[6] = v1;
  v2[9] = a1;
  v2[10] = v3;
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_95_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_151_0()
{
  return 1954047342;
}

void OUTLINED_FUNCTION_151_1()
{
  *(void *)(v0 + 80) = 0x6954656361467369;
  *(void *)(v0 + 88) = 0xEA0000000000656DLL;
}

uint64_t *OUTLINED_FUNCTION_187()
{
  *(void *)(v2 + 120) = v1;
  return __swift_allocate_boxed_opaque_existential_1(v0);
}

uint64_t OUTLINED_FUNCTION_151_2()
{
  *(_WORD *)(v0 + 32) = 2080;
  return type metadata accessor for ContactQuery();
}

void NLTransformer.getPreviousTransformedNLResult()(uint64_t a1@<X8>)
{
  OUTLINED_FUNCTION_22();
  uint64_t v3 = (*(uint64_t (**)(void))(v2 + 128))();
  uint64_t v4 = specialized BidirectionalCollection.suffix(_:)(2, v3);
  uint64_t v8 = specialized Array.init<A>(_:)(v4, v5, v6, v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
  if (v8[2] > 1uLL)
  {
    outlined init with copy of TransformationResult(v8 + 4, (void *)a1);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_42_1();
    *(_OWORD *)(a1 + 32) = xmmword_467740;
  }
}

uint64_t specialized BidirectionalCollection.suffix(_:)(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v3 = *(void *)(a2 + 16);
  PhoneCallFlowDelegatePlugin::PhoneCallContactRole::NLv3_optional result = specialized Array.index(_:offsetBy:limitedBy:)(v3, -result, 0, a2);
  if (v4) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = result;
  }
  if (v3 < v5) {
    goto LABEL_9;
  }
  if ((v5 & 0x8000000000000000) == 0) {
    return a2;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t specialized Array.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if (a2 < 1)
  {
    if (v3 <= 0 && v3 > a2) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000000000000) == 0 && v3 < (unint64_t)a2)
  {
    return 0;
  }
  BOOL v5 = __OFADD__(result, a2);
  result += a2;
  if (v5) {
    goto LABEL_14;
  }
  return result;
}

uint64_t outlined init with copy of ConfirmationResponse?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_15();
  uint64_t v4 = OUTLINED_FUNCTION_74();
  v5(v4);
  return a2;
}

uint64_t outlined init with copy of CommonDirectAction?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CommonDirectAction?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void PhoneCallNLIntent.shouldResetRequest(previousNLIntent:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_1();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_27();
  uint64_t v8 = __chkstk_darwin(v7);
  outlined init with copy of PhoneCallNLIntent?(v8, (uint64_t)&v38);
  if (v39)
  {
    outlined init with take of AppSelectionSignalComponent(&v38, (uint64_t)v41);
    uint64_t v39 = v3;
    uint64_t v40 = v1;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v38);
    int v9 = *(void (**)(void))(v5 + 16);
    OUTLINED_FUNCTION_8_12();
    v9();
    BOOL v10 = static PhoneCallNLIntent.isAppModified(previousNLIntent:currentNLIntent:)((uint64_t)v41, &v38);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
    if (v10)
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v11 = type metadata accessor for Logger();
      __swift_project_value_buffer(v11, (uint64_t)static Logger.siriPhone);
      outlined init with copy of SiriPhoneContact();
      OUTLINED_FUNCTION_8_12();
      v9();
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = swift_slowAlloc();
        swift_slowAlloc();
        *(_DWORD *)uint64_t v14 = 136315394;
        OUTLINED_FUNCTION_114(&v38);
        uint64_t v15 = PhoneCallNLIntent.applicationId.getter();
        if (!v16) {
          uint64_t v15 = 7104878;
        }
        uint64_t v17 = OUTLINED_FUNCTION_200(v15);
        OUTLINED_FUNCTION_96_2(v17);
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
        *(_WORD *)(v14 + 12) = 2080;
        uint64_t v18 = PhoneCallNLIntent.applicationId.getter();
        if (!v19) {
          uint64_t v18 = 7104878;
        }
        uint64_t v20 = OUTLINED_FUNCTION_200(v18);
        OUTLINED_FUNCTION_149_0(v20);
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_0_35();
        v21();
        _os_log_impl(&dword_0, v12, v13, "#PhoneCallNLIntent applicationId is changed from %s to %s, set shouldResetRequest as true", (uint8_t *)v14, 0x16u);
        OUTLINED_FUNCTION_196();
        OUTLINED_FUNCTION_6();
        OUTLINED_FUNCTION_6();

        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v39 = v3;
      uint64_t v40 = v1;
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v38);
      OUTLINED_FUNCTION_8_12();
      v9();
      char v22 = static PhoneCallNLIntent.isPhoneCallVerbModified(previousNLIntent:currentNLIntent:)((uint64_t)v41, &v38);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
      if ((v22 & 1) == 0) {
        goto LABEL_27;
      }
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      __swift_project_value_buffer(v23, (uint64_t)static Logger.siriPhone);
      outlined init with copy of SiriPhoneContact();
      OUTLINED_FUNCTION_8_12();
      v9();
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = swift_slowAlloc();
        swift_slowAlloc();
        *(_DWORD *)uint64_t v26 = 136315394;
        __swift_project_boxed_opaque_existential_1(&v38, v39);
        OUTLINED_FUNCTION_28_15();
        v27();
        OUTLINED_FUNCTION_24_23();
        if (v29) {
          uint64_t v31 = 7104878;
        }
        else {
          uint64_t v31 = PhoneCallVerb.rawValue.getter(v28);
        }
        uint64_t v32 = OUTLINED_FUNCTION_200(v31);
        OUTLINED_FUNCTION_96_2(v32);
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
        *(_WORD *)(v26 + 12) = 2080;
        OUTLINED_FUNCTION_28_15();
        v33();
        OUTLINED_FUNCTION_24_23();
        if (v29) {
          uint64_t v35 = 7104878;
        }
        else {
          uint64_t v35 = PhoneCallVerb.rawValue.getter(v34);
        }
        uint64_t v36 = OUTLINED_FUNCTION_200(v35);
        OUTLINED_FUNCTION_149_0(v36);
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_0_35();
        v37();
        _os_log_impl(&dword_0, v24, v25, "#PhoneCallNLIntent phoneCallVerb is changed from %s to %s, set shouldResetRequest as true", (uint8_t *)v26, 0x16u);
        OUTLINED_FUNCTION_196();
        OUTLINED_FUNCTION_6();
        OUTLINED_FUNCTION_6();

        goto LABEL_27;
      }
    }
    OUTLINED_FUNCTION_0_35();
    v30();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
LABEL_27:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
    goto LABEL_28;
  }
  outlined destroy of SubmitCommandError?((uint64_t)&v38, &demangling cache variable for type metadata for PhoneCallNLIntent?);
LABEL_28:
  OUTLINED_FUNCTION_26_1();
}

BOOL static PhoneCallNLIntent.isAppModified(previousNLIntent:currentNLIntent:)(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  uint64_t v4 = OUTLINED_FUNCTION_203();
  specialized Optional<A>.isNilOrEmpty.getter(v4, v5);
  OUTLINED_FUNCTION_77_3();
  outlined init with copy of SiriPhoneContact();
  outlined init with copy of SiriPhoneContact();
  if (v3) {
    goto LABEL_2;
  }
  __swift_project_boxed_opaque_existential_1(v28, v28[3]);
  uint64_t v10 = OUTLINED_FUNCTION_203();
  uint64_t v12 = v11;
  OUTLINED_FUNCTION_114(v27);
  uint64_t v13 = PhoneCallNLIntent.applicationId.getter();
  if (!v12)
  {
    if (!v14) {
      goto LABEL_2;
    }
LABEL_26:
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    uint64_t v24 = v27;
LABEL_29:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    return 1;
  }
  if (!v14) {
    goto LABEL_26;
  }
  if (v10 == v13 && v12 == v14)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_2:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
    goto LABEL_3;
  }
  char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  if ((v16 & 1) == 0) {
    return 1;
  }
LABEL_3:
  uint64_t v6 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  uint64_t v7 = OUTLINED_FUNCTION_204();
  specialized Optional<A>.isNilOrEmpty.getter(v7, v8);
  OUTLINED_FUNCTION_77_3();
  outlined init with copy of SiriPhoneContact();
  outlined init with copy of SiriPhoneContact();
  if (v6)
  {
LABEL_4:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    return 0;
  }
  __swift_project_boxed_opaque_existential_1(v26, v26[3]);
  OUTLINED_FUNCTION_205();
  uint64_t v17 = PhoneCallNLIntent.appName.getter();
  uint64_t v19 = v18;
  __swift_project_boxed_opaque_existential_1(v25, v25[3]);
  uint64_t v20 = OUTLINED_FUNCTION_204();
  if (!v19)
  {
    if (!v21) {
      goto LABEL_4;
    }
    goto LABEL_28;
  }
  if (!v21)
  {
LABEL_28:
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    uint64_t v24 = v25;
    goto LABEL_29;
  }
  if (v17 == v20 && v19 == v21)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_4;
  }
  char v23 = OUTLINED_FUNCTION_3_50();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  return (v23 & 1) == 0;
}

uint64_t OUTLINED_FUNCTION_193()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_193_1()
{
  uint64_t result = 0;
  *(void *)(v0 + 200) = 0;
  *(void *)(v0 + 208) = 0;
  return result;
}

uint64_t PhoneCallNLIntent.applicationId.getter()
{
  OUTLINED_FUNCTION_152_0();
  v0();
  uint64_t v1 = v6;
  if (v6)
  {
    __swift_project_boxed_opaque_existential_1(v5, v6);
    uint64_t v2 = OUTLINED_FUNCTION_3_35();
    uint64_t v1 = v3(v2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
  else
  {
    outlined destroy of SubmitCommandError?((uint64_t)v5, &demangling cache variable for type metadata for PhoneCallApp?);
  }
  return v1;
}

uint64_t PhoneCallNLv3Intent.app.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NonTerminalIntentNode?);
  uint64_t v4 = OUTLINED_FUNCTION_11_0(v3);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_38_32();
  lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent, (void (*)(uint64_t))type metadata accessor for PhoneCallNLv3Intent);
  IntentNodeTraversable.intentNode(forOntologyNode:)();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF12SiriOntology21NonTerminalIntentNodeV_s5NeverO27PhoneCallFlowDelegatePlugin0jK3App_pTg5((void (*)(char *))partial apply for closure #1 in PhoneCallNLv3Intent.app.getter, a1);
  return outlined destroy of UUID?(v1, &demangling cache variable for type metadata for NonTerminalIntentNode?);
}

uint64_t outlined init with copy of PersonOntologyNode.PersonSelfReference?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_15();
  OUTLINED_FUNCTION_33_31();
  v4();
  return a2;
}

uint64_t specialized Optional<A>.isNilOrEmpty.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  BOOL v3 = v2 == 0;
  return !a2 || v3;
}

void OUTLINED_FUNCTION_195_0(char a1@<W8>)
{
  *(void *)(v2 + 120) = v1;
  *(unsigned char *)(v2 + 96) = a1;
}

void OUTLINED_FUNCTION_195_1()
{
  *(void *)(v0 + 104) = 0;
  *(void *)(v0 + 112) = 0;
}

uint64_t PhoneCallNLIntent.appName.getter()
{
  OUTLINED_FUNCTION_152_0();
  v0();
  uint64_t v1 = v6;
  if (v6)
  {
    __swift_project_boxed_opaque_existential_1(v5, v6);
    uint64_t v2 = OUTLINED_FUNCTION_3_35();
    uint64_t v1 = v3(v2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
  else
  {
    outlined destroy of SubmitCommandError?((uint64_t)v5, &demangling cache variable for type metadata for PhoneCallApp?);
  }
  return v1;
}

uint64_t static PhoneCallNLIntent.isPhoneCallVerbModified(previousNLIntent:currentNLIntent:)(uint64_t a1, void *a2)
{
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  OUTLINED_FUNCTION_28_15();
  v2();
  OUTLINED_FUNCTION_24_23();
  if (!v11)
  {
    uint64_t v17 = PhoneCallVerb.rawValue.getter(v3);
    if (v17 == 1819042147 && v18 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      OUTLINED_FUNCTION_30_15();
      OUTLINED_FUNCTION_77_3();
    }
    outlined init with copy of SiriPhoneContact();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    outlined init with copy of SiriPhoneContact();
    outlined init with copy of SiriPhoneContact();
    goto LABEL_23;
  }
  outlined init with copy of SiriPhoneContact();
  __swift_project_boxed_opaque_existential_1(v24, v24[3]);
  OUTLINED_FUNCTION_28_15();
  int v5 = v4();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  outlined init with copy of SiriPhoneContact();
  outlined init with copy of SiriPhoneContact();
  if (v5 == 17)
  {
LABEL_23:
    char v20 = 0;
    goto LABEL_27;
  }
  __swift_project_boxed_opaque_existential_1(v23, v23[3]);
  OUTLINED_FUNCTION_28_15();
  char v7 = v6();
  __swift_project_boxed_opaque_existential_1(v22, v22[3]);
  OUTLINED_FUNCTION_28_15();
  char v9 = v8();
  LOBYTE(v10) = v9 == 17 && v7 == 17;
  BOOL v11 = v7 == 17 || v9 == 17;
  if (!v11)
  {
    char v12 = v9;
    uint64_t v10 = PhoneCallVerb.rawValue.getter(v7);
    uint64_t v14 = v13;
    if (v10 == PhoneCallVerb.rawValue.getter(v12) && v14 == v15) {
      OUTLINED_FUNCTION_6_42();
    }
    else {
      LOBYTE(v10) = OUTLINED_FUNCTION_3_50();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  char v20 = v10 ^ 1;
LABEL_27:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  return v20 & 1;
}

uint64_t PhoneCallNLv3Intent.phoneCallVerb.getter()
{
  OUTLINED_FUNCTION_12_63();
  lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent, (void (*)(uint64_t))type metadata accessor for PhoneCallNLv3Intent);
  OUTLINED_FUNCTION_10_73();
  return v1;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance PhoneCallVerb(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance PhoneCallAttribute(a1, a2, a3, (uint64_t)lazy protocol witness table accessor for type PhoneCallVerb and conformance PhoneCallVerb, (uint64_t)lazy protocol witness table accessor for type PhoneCallVerb and conformance PhoneCallVerb, (uint64_t)lazy protocol witness table accessor for type PhoneCallVerb and conformance PhoneCallVerb, a7, a8, a9, a10);
}

PhoneCallFlowDelegatePlugin::PhoneCallVerb_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallVerb@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallVerb_optional *a2@<X8>)
{
  result.value = PhoneCallVerb.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

PhoneCallFlowDelegatePlugin::PhoneCallVerb_optional __swiftcall PhoneCallVerb.init(rawValue:)(Swift::String rawValue)
{
  OUTLINED_FUNCTION_4_5();
  _findStringSwitchCaseWithCache(cases:string:cache:)();
  OUTLINED_FUNCTION_15_0();
  if (v1 >= 0x11) {
    return (PhoneCallFlowDelegatePlugin::PhoneCallVerb_optional)17;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::PhoneCallVerb_optional)v1;
  }
}

uint64_t OUTLINED_FUNCTION_57_0(uint64_t result)
{
  *(void *)(v1 + 48) = result;
  return result;
}

unsigned char *storeEnumTagSinglePayload for PhoneCallVerb(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 16 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 16) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEF)
  {
    unsigned int v6 = ((a2 - 240) >> 8) + 1;
    *PhoneCallFlowDelegatePlugin::PhoneCallVerb_optional result = a2 + 16;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *PhoneCallFlowDelegatePlugin::PhoneCallVerb_optional result = a2 + 16;
        break;
    }
  }
  return result;
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.parseValueResponse(input:resolveRecord:) in conformance CallingIntentNeedsValueFlowStrategy<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(**(void **)v3 + 384)
                                                          + **(int **)(**(void **)v3 + 384));
  unint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *unint64_t v8 = v4;
  v8[1] = UnsupportedFlowCATs.deleteVoicemail();
  return v10(a1, a2, a3);
}

uint64_t CallingIntentNeedsValueFlowStrategy.parseValueResponse(input:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30)
{
  OUTLINED_FUNCTION_81_2();
  a29 = v31;
  a30 = v32;
  a28 = v30;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v33 = (void *)v30[93];
  char v34 = (void (*)(uint64_t))v30[83];
  uint64_t v35 = type metadata accessor for Logger();
  __swift_project_value_buffer(v35, (uint64_t)static Logger.siriPhone);
  uint64_t v36 = OUTLINED_FUNCTION_53_14();
  v34(v36);
  id v37 = v33;
  long long v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.debug.getter();
  BOOL v40 = os_log_type_enabled(v38, v39);
  uint64_t v41 = (void *)v30[93];
  uint64_t v42 = (void (*)(uint64_t))v30[85];
  uint64_t v43 = v30[68];
  if (v40)
  {
    a9 = v30 + 53;
    a10 = v30 + 57;
    a13 = v30[85];
    uint64_t v44 = (_DWORD *)OUTLINED_FUNCTION_11_7();
    a11 = swift_slowAlloc();
    a12 = v43;
    a16 = OUTLINED_FUNCTION_14_0();
    *uint64_t v44 = 136315394;
    v30[53] = v41;
    id v45 = v41;
    swift_getWitnessTable();
    uint64_t v46 = String.init<A>(describing:)();
    v30[57] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, &a16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    v30[52] = OUTLINED_FUNCTION_58_12();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_86_7();
    OUTLINED_FUNCTION_12_20();
    v48();
    OUTLINED_FUNCTION_75_6(&dword_0, v49, v50, "#CallingIntentNeedsValueFlowStrategy SKIntent after NCR replacement: %s, and with previousIntent: %@");
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_69_8();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_5_16();
  }
  else
  {

    uint64_t v51 = OUTLINED_FUNCTION_82_5();
    v42(v51);
  }

  uint64_t v52 = v30[91];
  uint64_t v53 = (void *)v30[90];
  uint64_t v54 = v30[66];
  uint64_t v55 = v30[58];
  uint64_t v56 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v52 + 8) + 8) + 8))(v54);
  uint64_t v57 = (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 40))(v54, v52);
  a19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([INPerson]?, [INCallGroup]?));
  a16 = v56;
  a17 = v57;
  IntentPromptAnswer.init(answeredValue:updatedIntent:)();

  uint64_t v58 = type metadata accessor for IntentPromptAnswer();
  __swift_storeEnumTagSinglePayload(v55, 0, 1, v58);
  uint64_t v68 = v30[63];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v30 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_28_3();
  return v60(v59, v60, v61, v62, v63, v64, v65, v66, a9, a10, a11, a12, a13, v68, v30 + 2, a16, a17, a18, a19,
           a20,
           a21,
           a22);
}

uint64_t CallingIntentNeedsValueFlowStrategy.parseValueResponse(input:resolveRecord:)()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 744) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  os_log_type_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  unint64_t v34;
  unint64_t v35;
  int8x16_t *v36;
  __int8 *v37;
  void (*v38)(uint64_t);
  void (*v39)(void);
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  os_log_type_t v55;
  _WORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  Swift::Bool v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  Swift::Bool v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  void (*v77)(uint64_t);
  uint64_t v78;
  void *v79;
  id v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  os_log_type_t v89;
  _WORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t (*v97)(uint64_t);
  uint64_t v98;
  uint64_t v99;
  void *v100;
  os_log_type_t v101;
  _WORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(uint64_t);
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t);
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t AssociatedConformanceWitness;
  char v122;
  void (*v123)(void);
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  char v132;
  void (*v133)(void);
  uint64_t v134;
  void *v135;
  os_log_type_t v136;
  _WORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  os_log_type_t v145;
  _WORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  os_log_type_t v155;
  _WORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t (*v161)(void);
  uint64_t v163;
  void *v164;
  os_log_type_t v165;
  _WORD *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void (*v172)(void);
  id v173;
  uint64_t v174;
  void *v175;
  void (*v176)(void);
  uint64_t v177;
  uint64_t v178;
  void (*v179)(uint64_t, uint64_t, uint64_t);
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int8x16_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  Swift::Bool v190;
  void *v191;
  uint64_t (*v192)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;

  uint64_t v1 = *(void *)(v0 + 640);
  uint64_t v2 = *(void *)(v0 + 624);
  uint64_t v3 = *(void *)(v0 + 488);
  uint64_t v4 = (void *)(v3 + 24);
  uint64_t v194 = v3;
  __swift_project_boxed_opaque_existential_1((void *)(v3 + 24), *(void *)(v3 + 48));
  uint64_t v5 = OUTLINED_FUNCTION_61();
  char v7 = v6(v5);
  Input.parse.getter();
  (*(void (**)(uint64_t))(*(void *)v7 + 192))(v1);
  swift_release();
  uint64_t v10 = *(void (**)(void))(v2 + 8);
  char v9 = v2 + 8;
  uint64_t v8 = (uint64_t)v10;
  *(void *)(v0 + 648) = v10;
  *(void *)(v0 + 656) = v9 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  OUTLINED_FUNCTION_39_1();
  OUTLINED_FUNCTION_26_0();
  v10();
  if (!*(void *)(v0 + 80))
  {
    outlined destroy of PhoneCallNLIntent?(v0 + 56, &demangling cache variable for type metadata for PhoneCallNLIntent?);
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    uint64_t v15 = (void *)OUTLINED_FUNCTION_25_0(v14, (uint64_t)static Logger.siriPhone);
    char v16 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_18(v16))
    {
      uint64_t v17 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_32_2(v17);
      OUTLINED_FUNCTION_25_4(&dword_0, v18, v19, "#CallingIntentNeedsValueFlowStrategy Received unsupported parse type. Skipping..");
      OUTLINED_FUNCTION_5_16();
    }
    char v20 = *(_OWORD **)(v0 + 504);

    *char v20 = xmmword_46A560;
    OUTLINED_FUNCTION_38();
    swift_storeEnumTagMultiPayload();
    _s11SiriKitFlow5InputVACs23CustomStringConvertibleAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError, (void (*)(uint64_t))type metadata accessor for PhoneError);
    uint64_t v21 = OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_36_24(v21, v22);
    outlined destroy of PhoneError((uint64_t)v20);
    swift_willThrow();
    goto LABEL_67;
  }
  outlined init with take of AppSelectionSignalComponent((long long *)(v0 + 56), v0 + 16);
  uint64_t v11 = *(void *)(v0 + 40);
  char v12 = *(void *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v11);
  uint64_t v13 = *(void *)((*(uint64_t (**)(uint64_t, uint64_t))(v12 + 24))(v11, v12) + 16);
  swift_bridgeObjectRelease();
  outlined init with copy of SignalProviding(v0 + 16, v0 + 96);
  uint64_t v193 = (void *)(v0 + 16);
  if (v13)
  {
    __swift_destroy_boxed_opaque_existential_1(v0 + 96);
    outlined init with copy of SignalProviding(v0 + 16, v0 + 136);
LABEL_12:
    __swift_destroy_boxed_opaque_existential_1(v0 + 136);
    goto LABEL_13;
  }
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), *(void *)(v0 + 120));
  char v23 = (unint64_t)PhoneCallNLIntent.getPersons()();
  if (v23 >> 62) {
    uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v24 = *(void *)((char *)&dword_10 + (v23 & 0xFFFFFFFFFFFFFF8));
  }
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  outlined init with copy of SignalProviding(v0 + 16, v0 + 136);
  if (v24) {
    goto LABEL_12;
  }
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 136), *(void *)(v0 + 160));
  uint64_t v96 = OUTLINED_FUNCTION_38();
  uint64_t v98 = *(void *)(v97(v96) + 16);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 136);
  if (!v98)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v99 = type metadata accessor for Logger();
    uint64_t v100 = (void *)OUTLINED_FUNCTION_25_0(v99, (uint64_t)static Logger.siriPhone);
    uint64_t v101 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_18(v101))
    {
      uint64_t v102 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_32_2(v102);
      OUTLINED_FUNCTION_25_4(&dword_0, v103, v104, "#CallingIntentNeedsValueFlowStrategy contacts, resolved persons, and smsGroups were empty at prompt. IntentPromptAnswer = nil, reprompt.");
      OUTLINED_FUNCTION_5_16();
    }
    uint64_t v105 = *(void *)(v0 + 464);

    id v106 = type metadata accessor for IntentPromptAnswer();
    __swift_storeEnumTagSinglePayload(v105, 1, 1, v106);
    goto LABEL_76;
  }
LABEL_13:
  uint64_t v191 = v4;
  uint64_t v176 = (void (*)(void))v8;
  uint64_t v177 = v9;
  os_log_type_t v25 = *(void *)(v0 + 608);
  uint64_t v183 = v0 + 176;
  uint64_t v184 = *(void *)(v0 + 552);
  uint64_t v26 = *(void *)(v0 + 544);
  uint64_t v27 = *(void *)(v0 + 536);
  char v28 = *(void *)(v0 + 480);
  uint64_t v189 = *(void *)(v0 + 600);
  uint64_t v185 = *(int8x16_t *)(v0 + 512);
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v0 + 488) + 224), *(void *)(*(void *)(v0 + 488) + 248));
  uint64_t v186 = v28;
  uint64_t v187 = type metadata accessor for SiriKitEvent();
  v180 = v27;
  char v29 = (void *)ParameterResolutionRecord.intent.getter();
  uint64_t v30 = [v29 typeName];

  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v181 = v32;
  uint64_t v182 = v31;

  uint64_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16);
  *(void *)(v0 + 664) = v33;
  *(void *)(v0 + 672) = (v26 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v33(v25, v28, v27);
  outlined init with copy of SignalProviding(v0 + 16, v0 + 176);
  char v34 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  uint64_t v35 = (v184 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v36 = (int8x16_t *)swift_allocObject();
  v36[1] = vextq_s8(v185, v185, 8uLL);
  id v37 = &v36->i8[v34];
  long long v38 = (void (*)(uint64_t))(v26 + 16);
  (*(void (**)(__int8 *, uint64_t, uint64_t))(v26 + 32))(v37, v25, v180);
  outlined init with take of AppSelectionSignalComponent((long long *)(v0 + 176), (uint64_t)v36->i64 + v35);
  SiriKitEvent.__allocating_init(stateType:taskType:statusReason:_:)();
  dispatch thunk of SiriKitEventSending.send(_:)();
  swift_release();
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
  OUTLINED_FUNCTION_96();
  LOBYTE(v35) = PhoneCallNLIntent.isGroupFaceTimeCall()();
  v33(v189, v28, v180);
  if (v35)
  {
    __swift_project_boxed_opaque_existential_1(v191, *(void *)(v194 + 48));
    OUTLINED_FUNCTION_24_2();
    v39();
    BOOL v40 = *(void *)(v0 + 360);
    uint64_t v188 = *(void *)(v0 + 368);
    uint64_t v41 = (void *)OUTLINED_FUNCTION_78_2();
    long long v38 = (void (*)(uint64_t))__swift_project_boxed_opaque_existential_1(v41, v42);
    uint64_t v43 = ParameterResolutionRecord.app.getter();
    DeviceState.isGroupFaceTimeDeviceUnsupported(app:)(v43, v40, v188, v44, v45, v46, v47, v48, v8, v177, v178, v180, v181, v182, v183, v184, v185.i64[0], v185.i64[1], v28,
      v187);
    uint64_t v50 = v49;
    swift_release();
    uint64_t v51 = OUTLINED_FUNCTION_85_6();
    v38(v51);
    __swift_destroy_boxed_opaque_existential_1(v0 + 336);
    if (v50)
    {
      uint64_t v52 = v0 + 16;
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v53 = type metadata accessor for Logger();
      uint64_t v54 = (void *)OUTLINED_FUNCTION_25_0(v53, (uint64_t)static Logger.siriPhone);
      uint64_t v55 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_18(v55))
      {
        uint64_t v56 = (_WORD *)OUTLINED_FUNCTION_7_2();
        OUTLINED_FUNCTION_32_2(v56);
        OUTLINED_FUNCTION_25_4(&dword_0, v57, v58, "#CallingIntentNeedsValueFlowStrategy Group FaceTime is unsupported for mac, homepod and watch");
        OUTLINED_FUNCTION_5_16();
      }
      uint64_t v59 = *(void *)(v0 + 504);

LABEL_64:
      swift_storeEnumTagMultiPayload();
      _s11SiriKitFlow5InputVACs23CustomStringConvertibleAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError, (void (*)(uint64_t))type metadata accessor for PhoneError);
      id v159 = OUTLINED_FUNCTION_20_0();
      OUTLINED_FUNCTION_36_24(v159, v160);
      outlined destroy of PhoneError(v59);
      swift_willThrow();
LABEL_65:
      id v152 = v52;
      goto LABEL_66;
    }
  }
  else
  {
    uint64_t v60 = OUTLINED_FUNCTION_85_6();
    v38(v60);
  }
  v179 = v33;
  *(void *)(v0 + 680) = v38;
  uint64_t v61 = *(void *)(v0 + 592);
  uint64_t v62 = *(void *)(v0 + 536);
  uint64_t v63 = *(void *)(v0 + 480);
  __swift_project_boxed_opaque_existential_1(v193, *(void *)(v0 + 40));
  uint64_t v64 = PhoneCallNLIntent.isEmergencyContactCall()();
  outlined init with copy of SignalProviding((uint64_t)v193, v0 + 216);
  v179(v61, v63, v62);
  uint64_t v65 = *(void *)(v0 + 592);
  if (v64)
  {
    uint64_t v66 = *(void *)(v0 + 584);
    uint64_t v67 = *(void *)(v0 + 536);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 216), *(void *)(v0 + 240));
    uint64_t v68 = PhoneCallNLIntent.isFaceTimeCall()();
    v179(v66, v65, v67);
    uint64_t v69 = *(void *)(v0 + 584);
    uint64_t v70 = *(void *)(v0 + 536);
    uint64_t v71 = v194;
    if (v68)
    {
      OUTLINED_FUNCTION_44_21();
      ((void (*)(void))v38)();
      OUTLINED_FUNCTION_44_21();
      ((void (*)(void))v38)();
      __swift_destroy_boxed_opaque_existential_1(v0 + 216);
LABEL_31:
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v87 = type metadata accessor for Logger();
      uint64_t v88 = (void *)OUTLINED_FUNCTION_25_0(v87, (uint64_t)static Logger.siriPhone);
      uint64_t v89 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_18(v89))
      {
        uint64_t v90 = (_WORD *)OUTLINED_FUNCTION_7_2();
        OUTLINED_FUNCTION_32_2(v90);
        OUTLINED_FUNCTION_25_4(&dword_0, v91, v92, "#CallingIntentNeedsValueFlowStrategy FaceTime/3rd-party emergency contact calling is unsupported");
        OUTLINED_FUNCTION_5_16();
      }
      uint64_t v93 = *(void *)(v0 + 504);

      OUTLINED_FUNCTION_38();
      swift_storeEnumTagMultiPayload();
      _s11SiriKitFlow5InputVACs23CustomStringConvertibleAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError, (void (*)(uint64_t))type metadata accessor for PhoneError);
      uint64_t v94 = OUTLINED_FUNCTION_20_0();
      OUTLINED_FUNCTION_36_24(v94, v95);
      outlined destroy of PhoneError(v93);
      swift_willThrow();
LABEL_58:
      id v152 = v0 + 16;
LABEL_66:
      __swift_destroy_boxed_opaque_existential_1(v152);
LABEL_67:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      OUTLINED_FUNCTION_47_0();
LABEL_68:
      return v161();
    }
    ParameterResolutionRecord.app.getter();
    uint64_t v190 = App.isFirstParty()();
    swift_release();
    ((void (*)(uint64_t, uint64_t))v38)(v69, v70);
    OUTLINED_FUNCTION_44_21();
    ((void (*)(void))v38)();
    __swift_destroy_boxed_opaque_existential_1(v0 + 216);
    if (!v190) {
      goto LABEL_31;
    }
  }
  else
  {
    OUTLINED_FUNCTION_12_20();
    ((void (*)(void))v38)();
    __swift_destroy_boxed_opaque_existential_1(v0 + 216);
    uint64_t v71 = v194;
  }
  uint64_t v72 = *(void *)(v0 + 632);
  uint64_t v73 = *(void *)(v0 + 624);
  uint64_t v74 = *(void *)(v0 + 616);
  Input.parse.getter();
  id v75 = (*(uint64_t (**)(uint64_t, uint64_t))(v73 + 88))(v72, v74);
  if (v75 != enum case for Parse.NLv3IntentOnly(_:))
  {
    if (v75 == enum case for Parse.NLv4IntentOnly(_:))
    {
      (*(void (**)(void, void))(*(void *)(v0 + 624) + 96))(*(void *)(v0 + 632), *(void *)(v0 + 616));
      swift_unknownObjectRelease();
LABEL_44:
      uint64_t v107 = v71;
      uint64_t v108 = OUTLINED_FUNCTION_29_26();
      v109(v108);
      uint64_t v110 = ParameterResolutionRecord.app.getter();
      uint64_t v111 = (void *)OUTLINED_FUNCTION_31_27(v110);
      *(void *)(v0 + 720) = v111;
      swift_release();
      outlined destroy of SKTransformer(v0 + 256);
      if (!v111)
      {
        if (one-time initialization token for siriPhone != -1) {
          swift_once();
        }
        uint64_t v153 = type metadata accessor for Logger();
        uint64_t v154 = (void *)OUTLINED_FUNCTION_25_0(v153, (uint64_t)static Logger.siriPhone);
        id v155 = static os_log_type_t.error.getter();
        uint64_t v52 = v0 + 16;
        if (OUTLINED_FUNCTION_18(v155))
        {
          v156 = (_WORD *)OUTLINED_FUNCTION_7_2();
          OUTLINED_FUNCTION_32_2(v156);
          OUTLINED_FUNCTION_25_4(&dword_0, v157, v158, "#CallingIntentNeedsValueFlowStrategy SiriKit conversion failed for NLv4/USO.");
          OUTLINED_FUNCTION_5_16();
        }
        uint64_t v59 = *(void *)(v0 + 504);

        OUTLINED_FUNCTION_38();
        goto LABEL_64;
      }
      id v112 = *(void *)(v71 + 48);
      uint64_t v113 = *(void *)(v71 + 56);
      __swift_project_boxed_opaque_existential_1(v191, v112);
      uint64_t v114 = *(void (**)(uint64_t, uint64_t))(v113 + 56);
      uint64_t v115 = v111;
      v114(v112, v113);
      OUTLINED_FUNCTION_23();
      LOBYTE(v112) = (*(uint64_t (**)(void))(v116 + 224))();
      swift_release();
      if (v112)
      {
        uint64_t v117 = *(void *)(v0 + 568);
        uint64_t v118 = *(void *)(v0 + 536);
        uint64_t v119 = *(void *)(v0 + 528);
        Class v120 = *(void *)(v0 + 480);
        AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        uint64_t v122 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 136))(v119, AssociatedConformanceWitness);
        v179(v117, v120, v118);
        if (v122)
        {
          __swift_project_boxed_opaque_existential_1(v191, *(void *)(v107 + 48));
          OUTLINED_FUNCTION_61();
          OUTLINED_FUNCTION_24_2();
          v123();
          unint64_t v124 = *(void *)(v0 + 400);
          v195 = *(void *)(v0 + 408);
          __swift_project_boxed_opaque_existential_1((void *)(v0 + 376), v124);
          uint64_t v125 = ParameterResolutionRecord.app.getter();
          DeviceState.isGroupFaceTimeDeviceUnsupported(app:)(v125, v124, v195, v126, v127, v128, v129, v130, (uint64_t)v176, v177, (uint64_t)v179, v180, v181, v182, v183, v184, v185.i64[0], v185.i64[1], v186,
            v187);
          id v132 = v131;
          swift_release();
          OUTLINED_FUNCTION_12_20();
          v133();
          __swift_destroy_boxed_opaque_existential_1(v0 + 376);
          uint64_t v52 = v0 + 16;
          if (v132)
          {
            if (one-time initialization token for siriPhone != -1) {
              swift_once();
            }
            id v134 = type metadata accessor for Logger();
            uint64_t v135 = (void *)OUTLINED_FUNCTION_25_0(v134, (uint64_t)static Logger.siriPhone);
            uint64_t v136 = static os_log_type_t.error.getter();
            if (OUTLINED_FUNCTION_18(v136))
            {
              uint64_t v137 = (_WORD *)OUTLINED_FUNCTION_7_2();
              OUTLINED_FUNCTION_32_2(v137);
              OUTLINED_FUNCTION_25_4(&dword_0, v138, v139, "#CallingIntentNeedsValueFlowStrategy Group FaceTime is unsupported for mac, homepod and watch");
              OUTLINED_FUNCTION_5_16();
            }
            unint64_t v140 = *(void *)(v0 + 504);

            swift_storeEnumTagMultiPayload();
            _s11SiriKitFlow5InputVACs23CustomStringConvertibleAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError, (void (*)(uint64_t))type metadata accessor for PhoneError);
            unint64_t v141 = OUTLINED_FUNCTION_20_0();
            OUTLINED_FUNCTION_36_24(v141, v142);
            outlined destroy of PhoneError(v140);
            swift_willThrow();

            goto LABEL_65;
          }
        }
        else
        {
          OUTLINED_FUNCTION_12_20();
          v172();
        }
      }
      *(void *)(v0 + 728) = swift_getAssociatedConformanceWitness();
      Swift::String v173 = v115;
      CallingIntentNeedsValueFlowStrategy.updateINIntent(currentINIntent:resolveRecord:)();

      OUTLINED_FUNCTION_2();
      uint64_t v192 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v174 + 440)
                                                                        + **(int **)(v174 + 440));
      long long v175 = (void *)swift_task_alloc();
      *(void *)(v0 + 736) = v175;
      *long long v175 = v0;
      v175[1] = CallingIntentNeedsValueFlowStrategy.parseValueResponse(input:resolveRecord:);
      uint64_t v84 = OUTLINED_FUNCTION_39_1();
      uint64_t v86 = 0;
      goto LABEL_79;
    }
    if (v75 == enum case for Parse.uso(_:))
    {
      ((void (*)(void, void))v176)(*(void *)(v0 + 632), *(void *)(v0 + 616));
      goto LABEL_44;
    }
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v163 = type metadata accessor for Logger();
    uint64_t v164 = (void *)OUTLINED_FUNCTION_25_0(v163, (uint64_t)static Logger.siriPhone);
    uint64_t v165 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_18(v165))
    {
      Swift::String v166 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_32_2(v166);
      OUTLINED_FUNCTION_25_4(&dword_0, v167, v168, "#CallingIntentNeedsValueFlowStrategy Pass-thru expected, as SiriKit will call us for other types of parses");
      OUTLINED_FUNCTION_5_16();
    }
    uint64_t v169 = *(void *)(v0 + 464);

    unint64_t v170 = type metadata accessor for IntentPromptAnswer();
    __swift_storeEnumTagSinglePayload(v169, 1, 1, v170);
    unint64_t v171 = OUTLINED_FUNCTION_38();
    v176(v171);
LABEL_76:
    OUTLINED_FUNCTION_22_41();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v193);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_6_0();
    goto LABEL_68;
  }
  uint64_t v76 = OUTLINED_FUNCTION_29_26();
  v77(v76);
  uint64_t v78 = ParameterResolutionRecord.app.getter();
  uint64_t v79 = (void *)OUTLINED_FUNCTION_31_27(v78);
  *(void *)(v0 + 688) = v79;
  swift_release();
  outlined destroy of SKTransformer(v0 + 296);
  if (!v79)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    id v143 = type metadata accessor for Logger();
    uint64_t v144 = (void *)OUTLINED_FUNCTION_25_0(v143, (uint64_t)static Logger.siriPhone);
    uint64_t v145 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_18(v145))
    {
      uint64_t v146 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_32_2(v146);
      OUTLINED_FUNCTION_25_4(&dword_0, v147, v148, "#CallingIntentNeedsValueFlowStrategy SiriKit conversion failed for NLv3.");
      OUTLINED_FUNCTION_5_16();
    }
    uint64_t v149 = *(void *)(v0 + 504);

    swift_storeEnumTagMultiPayload();
    _s11SiriKitFlow5InputVACs23CustomStringConvertibleAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError, (void (*)(uint64_t))type metadata accessor for PhoneError);
    swift_allocError();
    PhoneError.logged()(v150);
    outlined destroy of PhoneError(v149);
    swift_willThrow();
    uint64_t v151 = OUTLINED_FUNCTION_39_1();
    v176(v151);
    goto LABEL_58;
  }
  *(void *)(v0 + 696) = swift_getAssociatedConformanceWitness();
  uint64_t v80 = v79;
  CallingIntentNeedsValueFlowStrategy.updateINIntent(currentINIntent:resolveRecord:)();
  OUTLINED_FUNCTION_2();
  uint64_t v192 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v81 + 440) + **(int **)(v81 + 440));
  id v82 = (void *)swift_task_alloc();
  *(void *)(v0 + 704) = v82;
  *id v82 = v0;
  v82[1] = CallingIntentNeedsValueFlowStrategy.parseValueResponse(input:resolveRecord:);
  unint64_t v83 = *(void *)(v0 + 480);
  uint64_t v84 = (uint64_t)v80;
  uint64_t v85 = v0 + 16;
  uint64_t v86 = 1;
LABEL_79:
  return v192(v84, v85, v83, v86);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 712) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  OUTLINED_FUNCTION_1_0();
  v1[60] = v2;
  v1[61] = v0;
  v1[58] = v3;
  v1[59] = v4;
  uint64_t v5 = *v0;
  uint64_t v6 = type metadata accessor for PhoneError();
  v1[62] = v6;
  OUTLINED_FUNCTION_11_0(v6);
  v1[63] = OUTLINED_FUNCTION_35();
  v1[64] = *(void *)(v5 + 272);
  OUTLINED_FUNCTION_81_7();
  v1[65] = *(void *)(v7 + 264);
  v1[66] = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for ParameterResolutionRecord();
  v1[67] = v8;
  OUTLINED_FUNCTION_19_0(v8);
  v1[68] = v9;
  v1[69] = *(void *)(v10 + 64);
  v1[70] = OUTLINED_FUNCTION_28_2();
  v1[71] = swift_task_alloc();
  v1[72] = swift_task_alloc();
  v1[73] = swift_task_alloc();
  v1[74] = swift_task_alloc();
  v1[75] = swift_task_alloc();
  v1[76] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Parse();
  v1[77] = v11;
  OUTLINED_FUNCTION_19_0(v11);
  v1[78] = v12;
  v1[79] = OUTLINED_FUNCTION_28_2();
  v1[80] = swift_task_alloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v13, v14, v15);
}

#error "236D8: call analysis failed (funcsize=231)"

uint64_t partial apply for closure #1 in CallingIntentNeedsValueFlowStrategy.parseValueResponse(input:resolveRecord:)(uint64_t a1)
{
  swift_getAssociatedTypeWitness();
  uint64_t v3 = OUTLINED_FUNCTION_94_2();
  OUTLINED_FUNCTION_19_0(v3);
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  char v9 = (void *)(v1 + ((*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8));

  return closure #1 in CallingIntentNeedsValueFlowStrategy.parseValueResponse(input:resolveRecord:)(a1, v1 + v8, v9);
}

uint64_t closure #1 in CallingIntentNeedsValueFlowStrategy.parseValueResponse(input:resolveRecord:)(uint64_t a1, uint64_t a2, void *a3)
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for ParameterResolutionRecord();
  ParameterResolutionRecord.app.getter();
  dispatch thunk of SiriKitEvent.SiriKitEventBuilder.app.setter();
  uint64_t v4 = ParameterResolutionRecord.app.getter();
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  specialized static PhoneDomainContextMetricsUtils.populatePhoneDomainContext(phoneCallNLIntent:contextNLType:app:resolvedSiriKitContacts:callStateProvider:)(a3, 0, v4, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)static CallStateProvider.instance);
  swift_release();
  return dispatch thunk of SiriKitEvent.SiriKitEventBuilder.domainContext.setter();
}

void static PhoneDomainContextMetricsUtils.addContactRecipientTypeNLv3(phoneCallContacts:phoneContext:)(uint64_t a1, void *a2)
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = (void *)OUTLINED_FUNCTION_25_0(v4, (uint64_t)static Logger.siriPhone);
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_21_19(v6))
  {
    *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
    OUTLINED_FUNCTION_16_4(&dword_0, v7, v8, "#PhoneDomainContextMetricsUtils addContactRecipientTypeNLv3");
    OUTLINED_FUNCTION_6();
  }

  uint64_t v9 = *(void *)(a1 + 16);
  if (v9)
  {
    uint64_t v10 = a1 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of SignalProviding(v10, (uint64_t)v34);
      uint64_t v11 = OUTLINED_FUNCTION_11_37(v34);
      char v13 = default argument 3 of SAUISayIt.init(message:dialogIdentifier:canUseServerTTS:listenAfterSpeaking:)(v11, v12);
      char v14 = OUTLINED_FUNCTION_6_54(v13);
      if (SiriPhoneContact.getFullName(filteredAlternatives:)(v14).value._object
        && (OUTLINED_FUNCTION_2_80(), OUTLINED_FUNCTION_1_72(), v15))
      {
        uint64_t v16 = 4;
      }
      else
      {
        uint64_t v17 = OUTLINED_FUNCTION_11_37(v34);
        char v19 = default argument 3 of SAUISayIt.init(message:dialogIdentifier:canUseServerTTS:listenAfterSpeaking:)(v17, v18);
        char v20 = OUTLINED_FUNCTION_6_54(v19);
        if (SiriPhoneContact.getFirstName(filteredAlternatives:)(v20).value._object
          && (OUTLINED_FUNCTION_2_80(), OUTLINED_FUNCTION_1_72(), v21))
        {
          uint64_t v16 = 2;
        }
        else
        {
          uint64_t v22 = OUTLINED_FUNCTION_11_37(v34);
          char v24 = default argument 3 of SAUISayIt.init(message:dialogIdentifier:canUseServerTTS:listenAfterSpeaking:)(v22, v23);
          char v25 = OUTLINED_FUNCTION_6_54(v24);
          if (SiriPhoneContact.getLastName(filteredAlternatives:)(v25).value._object
            && (OUTLINED_FUNCTION_2_80(), OUTLINED_FUNCTION_1_72(), v26))
          {
            uint64_t v16 = 3;
          }
          else
          {
            OUTLINED_FUNCTION_5_51(v34);
            if (SiriPhoneContact.getNickName()().value._object
              && (OUTLINED_FUNCTION_2_80(), OUTLINED_FUNCTION_1_72(), v27))
            {
              uint64_t v16 = 5;
            }
            else
            {
              uint64_t v28 = v35;
              uint64_t v29 = v36;
              __swift_project_boxed_opaque_existential_1(v34, v35);
              (*(void (**)(uint64_t, uint64_t))(v29 + 416))(v28, v29);
              if (v30 && (OUTLINED_FUNCTION_2_80(), OUTLINED_FUNCTION_1_72(), v31))
              {
                uint64_t v16 = 6;
              }
              else
              {
                OUTLINED_FUNCTION_5_51(v34);
                if (SiriPhoneContact.getOrganzationName()().value._object
                  && (OUTLINED_FUNCTION_2_80(), OUTLINED_FUNCTION_1_72(), v32))
                {
                  uint64_t v16 = 7;
                }
                else
                {
                  OUTLINED_FUNCTION_5_51(v34);
                  if (!(unint64_t)SiriPhoneContact.getPhoneNumber()().value._object) {
                    goto LABEL_29;
                  }
                  OUTLINED_FUNCTION_2_80();
                  OUTLINED_FUNCTION_1_72();
                  if (!v33) {
                    goto LABEL_29;
                  }
                  uint64_t v16 = 9;
                }
              }
            }
          }
        }
      }
      [a2 addPersonType:v16];
LABEL_29:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
      v10 += 40;
      if (!--v9)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
  }
}

uint64_t OUTLINED_FUNCTION_5()
{
  return *(void *)v0;
}

uint64_t OUTLINED_FUNCTION_11_0(uint64_t a1)
{
  return a1 - 8;
}

uint64_t OUTLINED_FUNCTION_19_0(uint64_t a1)
{
  return a1 - 8;
}

uint64_t OUTLINED_FUNCTION_30_0(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_5_0()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

void *OUTLINED_FUNCTION_8_0()
{
  return malloc(0x28uLL);
}

uint64_t OUTLINED_FUNCTION_7_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_5_2()
{
  return *(void *)(v0 - 152);
}

uint64_t OUTLINED_FUNCTION_5_3()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_5_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_5_5()
{
  return v0;
}

unint64_t OUTLINED_FUNCTION_7_1()
{
  return 0xD000000000000010;
}

uint64_t OUTLINED_FUNCTION_5_6()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_3_0()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_8_1()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_9_0()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_21_1(uint64_t a1)
{
  return _swift_task_switch(a1, 0, 0);
}

uint64_t OUTLINED_FUNCTION_26_2@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

__n128 *OUTLINED_FUNCTION_27_0(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x656369766564;
  result[2].n128_u64[1] = 0xE600000000000000;
  return result;
}

uint64_t OUTLINED_FUNCTION_31_0()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_47_0()
{
  return v0 + 8;
}

uint64_t OUTLINED_FUNCTION_6()
{
  return swift_slowDealloc();
}

uint64_t OUTLINED_FUNCTION_7_2()
{
  return swift_slowAlloc();
}

void OUTLINED_FUNCTION_24_1(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t OUTLINED_FUNCTION_14_0()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_6_0()
{
  return v0 + 8;
}

uint64_t OUTLINED_FUNCTION_13(uint64_t a1)
{
  return a1 - 8;
}

__n128 OUTLINED_FUNCTION_5_10(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_5_11(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return v1 - 96;
}

uint64_t OUTLINED_FUNCTION_25_0(uint64_t a1, uint64_t a2)
{
  __swift_project_value_buffer(a1, a2);
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_5_12()
{
  *uint64_t v0 = v1;
  return swift_storeEnumTagMultiPayload();
}

void OUTLINED_FUNCTION_5_13()
{
  uint64_t v1 = 0x2E65756C61562ELL;
  unint64_t v2 = 0xE700000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t OUTLINED_FUNCTION_9_2()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_3_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_28_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_30_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_32()
{
  return *v0;
}

uint64_t OUTLINED_FUNCTION_5_14()
{
  return type metadata accessor for RedirectToCompanionFlow.State(0) - 8;
}

uint64_t OUTLINED_FUNCTION_5_15(uint64_t result)
{
  *(void *)(v1 - 112) = 0;
  *(void *)(v1 - 104) = 0xE000000000000000;
  *(void *)(v1 - 96) = result;
  return result;
}

BOOL OUTLINED_FUNCTION_8_2(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_3_3()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_6_1@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return outlined init with copy of SpeakableString?(v2 + a2, a1);
}

uint64_t OUTLINED_FUNCTION_14_1(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(a1, 1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_5_16()
{
  return swift_slowDealloc();
}

uint64_t OUTLINED_FUNCTION_5_18()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_5_20()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t OUTLINED_FUNCTION_7_3()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_18_1()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_4_4()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_5_21()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_8_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_5_22()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_5_23()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_5_24()
{
  return Hasher.init(_seed:)();
}

void OUTLINED_FUNCTION_5_26(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0x16u);
}

uint64_t OUTLINED_FUNCTION_5_27()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_24_3()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_5_28()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_5_29()
{
  uint64_t v2 = *(void *)(v0 + 40);
  __swift_project_boxed_opaque_existential_1(v1, v2);
  return v2;
}

uint64_t OUTLINED_FUNCTION_11_2()
{
  return SpeakableString.init(print:speak:)();
}

BOOL OUTLINED_FUNCTION_5_32(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_5_33()
{
  __swift_project_boxed_opaque_existential_1(v1, *(void *)(v2 + 40));
  return v0;
}

uint64_t OUTLINED_FUNCTION_5_34()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_18_2()
{
  return v0;
}

uint64_t IdentifyIncomingCallerCATsSimple.OfferFollowUpIntentDialogIds.rawValue.getter()
{
  return 0x31676F6C616964;
}

uint64_t OUTLINED_FUNCTION_5_35()
{
  return *(void *)(v0 + 416);
}

uint64_t OUTLINED_FUNCTION_5_36()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t OUTLINED_FUNCTION_5_37()
{
  return swift_slowAlloc();
}

void OUTLINED_FUNCTION_15_1()
{
  *(void *)(v1 - 256) = v0;
}

BOOL OUTLINED_FUNCTION_8_4(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_5_38(char a1, char a2, __int16 a3)
{
  return SiriKitEventSending.sendCallControlEvent(action:target:state:)(a1, a2, a3);
}

void OUTLINED_FUNCTION_86(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_96()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_5_39()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_5_40()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_11_3()
{
  return 0x676E69676E6972;
}

void OUTLINED_FUNCTION_5_41(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 136) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_5_42()
{
  return swift_dynamicCast();
}

void OUTLINED_FUNCTION_5_43()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

_WORD *OUTLINED_FUNCTION_5_44(_WORD *result)
{
  *__n128 result = 0;
  return result;
}

void OUTLINED_FUNCTION_5_45(uint64_t a1@<X8>)
{
  unint64_t v3 = 0xD000000000000015;
  unint64_t v2 = (a1 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&v3);
}

uint64_t OUTLINED_FUNCTION_5_46()
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000038, v0 | 0x8000000000000000, (uint64_t *)(v1 - 96));
}

id OUTLINED_FUNCTION_1_2(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

uint64_t OUTLINED_FUNCTION_5_47()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_5_48()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_16_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_5_49@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 144) = a1;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

void OUTLINED_FUNCTION_5_50(float a1)
{
  float *v1 = a1;
}

uint64_t OUTLINED_FUNCTION_5_51(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return v1;
}

uint64_t OUTLINED_FUNCTION_5_52()
{
  return *(void *)(v0 - 168);
}

uint64_t OUTLINED_FUNCTION_5_53()
{
  return type metadata accessor for URL();
}

uint64_t OUTLINED_FUNCTION_5_54()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_5_55()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_5_56()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_5_57()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_38_0()
{
  return swift_bridgeObjectRetain();
}

__n128 OUTLINED_FUNCTION_5_58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26)
{
  specialized PhoneCallBaseCatTemplatingService.init(ducFamily:sharedGlobals:displayTextCats:phoneCallCommonCats:appInfoBuilder:labelTemplating:startCallCats:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26);
  return result;
}

uint64_t OUTLINED_FUNCTION_5_60()
{
  __swift_project_boxed_opaque_existential_1((void *)(v1 - 168), *(void *)(v1 - 144));
  return v0;
}

void OUTLINED_FUNCTION_5_61()
{
  *(void *)(v0 - 80) = 0;
  *(void *)(v0 - 72) = 0xE000000000000000;
}

uint64_t OUTLINED_FUNCTION_8_5()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_5_62()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_5_63()
{
  return type metadata accessor for OngoingCallConfirmIntentFlow.State(0) - 8;
}

void OUTLINED_FUNCTION_55(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v6, a4, v4, 0xCu);
}

void *OUTLINED_FUNCTION_5_65()
{
  return __swift_project_boxed_opaque_existential_1(v0, *(void *)(v1 + 120));
}

uint64_t OUTLINED_FUNCTION_5_66()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_5_67@<X0>(uint64_t a1@<X8>, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v4 = v2 + *(void *)(a1 + 40);
  return outlined init with copy of SignalProviding(v4, (uint64_t)va);
}

void *OUTLINED_FUNCTION_5_68()
{
  return specialized HangUpCallIntentRCHFlowStrategy.init(app:sharedGlobals:hangUpCallCATsSimple:responseGenerator:)(v3, v2, v1, v6, v0, v4, v5);
}

uint64_t OUTLINED_FUNCTION_5_69()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_5_70()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_5_71(uint64_t a1)
{
  *(void *)(v2 + 416) = a1;
  uint64_t v4 = *(void *)(v3 + 40);
  __swift_project_boxed_opaque_existential_1(v1, v4);
  return v4;
}

uint64_t OUTLINED_FUNCTION_5_72(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return v1;
}

void *OUTLINED_FUNCTION_5_73()
{
  return specialized AnnounceIncomingCallNotificationDirectAction.init(appBundleId:notification:contactStore:)(v3, v2, v1, v6, v0, v4, v5);
}

uint64_t OUTLINED_FUNCTION_7_4@<X0>(uint64_t a1@<X8>)
{
  return v1 + a1;
}

uint64_t OUTLINED_FUNCTION_5_75()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_5_77()
{
  uint64_t v1 = v0[3];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return v1;
}

void OUTLINED_FUNCTION_5_78()
{
  *(void *)(v1 - 168) = *(void *)(v0 + 16);
}

uint64_t OUTLINED_FUNCTION_5_79()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_5_80()
{
  return 0x48656C6261736964;
}

uint64_t OUTLINED_FUNCTION_5_81()
{
  return dispatch thunk of Hashable.hash(into:)();
}

double OUTLINED_FUNCTION_5_82(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10, long long a11)
{
  a1[1] = a9;
  a1[2] = a10;
  double result = *(double *)&a11;
  a1[3] = a11;
  return result;
}

void OUTLINED_FUNCTION_5_83()
{
  *(void *)(*(void *)(v0 + 56) + 8 * v2) = v1;
}

uint64_t OUTLINED_FUNCTION_5_84()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_5_85(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return v1 - 96;
}

Swift::Int OUTLINED_FUNCTION_5_86()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

Swift::String_optional __swiftcall SiriPhoneContact.getFullName(filteredAlternatives:)(Swift::Bool filteredAlternatives)
{
  uint64_t v2 = OUTLINED_FUNCTION_1_41(filteredAlternatives, v1);
  uint64_t v4 = v3(v2);
  OUTLINED_FUNCTION_11_21(v4, v5, &demangling cache variable for type metadata for PhoneCallPersonName?, v6, v7, v8, v9, v10, v15[0], v15[1], v15[2], v15[3], v15[4], v15[5], v15[6], v15[7], v15[8], v15[9], v15[10],
    v15[11],
    v15[12],
    v15[13],
    v16);
  OUTLINED_FUNCTION_13_13();
  if (v11)
  {
    OUTLINED_FUNCTION_14_15();
  }
  else
  {
    swift_bridgeObjectRetain();
    outlined release of PhoneCallPersonName?(v15);
  }
  uint64_t v12 = OUTLINED_FUNCTION_7_0();
  result.value._object = v13;
  result.value._uint64_t countAndFlagsBits = v12;
  return result;
}

uint64_t protocol witness for SiriPhoneContact.personName.getter in conformance PhoneCallContactIntentNode@<X0>(uint64_t a1@<X8>)
{
  (*(void (**)(void *__return_ptr))(**(void **)v1 + 304))(v4);
  return outlined init with take of PhoneCallPersonName?((uint64_t)v4, a1);
}

void PhoneCallContactIntentNode.personName.getter()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v4 = v3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonOntologyNode.PersonNamePostfix?);
  uint64_t v6 = OUTLINED_FUNCTION_11_0(v5);
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_12_0();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonOntologyNode.PersonNamePrefix?);
  uint64_t v8 = OUTLINED_FUNCTION_11_0(v7);
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_35_7();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonIntentNode?);
  uint64_t v10 = OUTLINED_FUNCTION_11_0(v9);
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_8_7();
  uint64_t v11 = type metadata accessor for PersonIntentNode();
  OUTLINED_FUNCTION_1();
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_52();
  PhoneCallContactIntentNode.person.getter();
  uint64_t v13 = OUTLINED_FUNCTION_44_28();
  OUTLINED_FUNCTION_28_6(v13, v14, v11);
  if (v42)
  {
    outlined destroy of UUID?(v1, &demangling cache variable for type metadata for PersonIntentNode?);
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 1;
  }
  else
  {
    uint64_t v29 = OUTLINED_FUNCTION_40_31();
    v30(v29);
    type metadata accessor for PersonOntologyNode();
    static PersonOntologyNode.personFirstNameNode.getter();
    uint64_t v31 = OUTLINED_FUNCTION_35_37();
    uint64_t v60 = v32;
    uint64_t v61 = v31;
    swift_release();
    static PersonOntologyNode.personMiddleNameNode.getter();
    uint64_t v33 = OUTLINED_FUNCTION_35_37();
    uint64_t v58 = v34;
    uint64_t v59 = v33;
    swift_release();
    static PersonOntologyNode.personLastNameNode.getter();
    uint64_t v35 = OUTLINED_FUNCTION_35_37();
    uint64_t v56 = v36;
    uint64_t v57 = v35;
    swift_release();
    uint64_t v37 = PersonIntentNodeContaining.nickName.getter();
    uint64_t v54 = v38;
    uint64_t v55 = v37;
    static PersonOntologyNode.personFullNameNode.getter();
    uint64_t v39 = OUTLINED_FUNCTION_35_37();
    uint64_t v52 = v40;
    uint64_t v53 = v39;
    swift_release();
    PersonIntentNodeContaining.namePrefix.getter();
    uint64_t v41 = type metadata accessor for PersonOntologyNode.PersonNamePrefix();
    OUTLINED_FUNCTION_28_6(v2, 1, v41);
    if (v42)
    {
      outlined destroy of UUID?(v2, &demangling cache variable for type metadata for PersonOntologyNode.PersonNamePrefix?);
      uint64_t v24 = 0;
      uint64_t v25 = 0;
    }
    else
    {
      uint64_t v24 = PersonOntologyNode.PersonNamePrefix.rawValue.getter();
      uint64_t v25 = v43;
      OUTLINED_FUNCTION_10();
      (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v2, v41);
    }
    PersonIntentNodeContaining.namePostfix.getter();
    uint64_t v45 = type metadata accessor for PersonOntologyNode.PersonNamePostfix();
    OUTLINED_FUNCTION_28_6(v0, 1, v45);
    if (v42)
    {
      uint64_t v46 = OUTLINED_FUNCTION_51_23();
      v47(v46);
      outlined destroy of UUID?(v0, &demangling cache variable for type metadata for PersonOntologyNode.PersonNamePostfix?);
      uint64_t v26 = 0;
      uint64_t v27 = 0;
    }
    else
    {
      uint64_t v26 = PersonOntologyNode.PersonNamePostfix.rawValue.getter();
      uint64_t v27 = v48;
      uint64_t v49 = OUTLINED_FUNCTION_51_23();
      v50(v49);
      OUTLINED_FUNCTION_10();
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v0, v45);
    }
    uint64_t v28 = v60;
    uint64_t v15 = v61;
    uint64_t v17 = v58;
    uint64_t v16 = v59;
    uint64_t v19 = v56;
    uint64_t v18 = v57;
    uint64_t v21 = v54;
    uint64_t v20 = v55;
    uint64_t v23 = v52;
    uint64_t v22 = v53;
  }
  uint64_t *v4 = v15;
  v4[1] = v28;
  v4[2] = v16;
  void v4[3] = v17;
  v4[4] = v18;
  v4[5] = v19;
  v4[6] = v20;
  v4[7] = v21;
  v4[8] = v22;
  v4[9] = v23;
  v4[10] = v24;
  v4[11] = v25;
  v4[12] = v26;
  v4[13] = v27;
  OUTLINED_FUNCTION_26_1();
}

void PhoneCallContactIntentNode.person.getter()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v4 = v3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NonTerminalIntentNode?);
  uint64_t v6 = OUTLINED_FUNCTION_11_0(v5);
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_53();
  uint64_t v7 = type metadata accessor for NonTerminalIntentNode();
  OUTLINED_FUNCTION_1();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_27();
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v17 - v12;
  uint64_t v18 = v0;
  if (one-time initialization token for personNode != -1) {
    swift_once();
  }
  type metadata accessor for PhoneCallContactIntentNode(0);
  lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type PhoneCallContactIntentNode and conformance PhoneCallContactIntentNode, (void (*)(uint64_t))type metadata accessor for PhoneCallContactIntentNode);
  IntentNodeTraversable.intentNode(forOntologyNode:)();
  OUTLINED_FUNCTION_28_6(v2, 1, v7);
  if (v14)
  {
    outlined destroy of UUID?(v2, &demangling cache variable for type metadata for NonTerminalIntentNode?);
    uint64_t v15 = 1;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v13, v2, v7);
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 16))(v1, v13, v7);
    type metadata accessor for PersonOntologyNode();
    OUTLINED_FUNCTION_21_0();
    PersonOntologyNode.init(name:multicardinal:)();
    PersonIntentNode.init(intentNode:ontologyNode:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v7);
    uint64_t v15 = 0;
  }
  uint64_t v16 = type metadata accessor for PersonIntentNode();
  __swift_storeEnumTagSinglePayload(v4, v15, 1, v16);
  OUTLINED_FUNCTION_26_1();
}

uint64_t static PersonIntentNode.getProcessedNameField(person:terminalNode:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalIntentNode?);
  uint64_t v1 = OUTLINED_FUNCTION_11_0(v0);
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_4();
  uint64_t v4 = v3 - v2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement?);
  uint64_t v6 = OUTLINED_FUNCTION_11_0(v5);
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_4();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.Origin?);
  uint64_t v11 = OUTLINED_FUNCTION_11_0(v10);
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_4();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.OriginDetail?);
  uint64_t v16 = OUTLINED_FUNCTION_11_0(v15);
  __chkstk_darwin(v16);
  OUTLINED_FUNCTION_4();
  uint64_t v19 = v18 - v17;
  uint64_t v20 = type metadata accessor for TerminalElement.MatchingSpan();
  OUTLINED_FUNCTION_1();
  uint64_t v44 = v21;
  __chkstk_darwin(v22);
  OUTLINED_FUNCTION_4();
  uint64_t v25 = v24 - v23;
  type metadata accessor for PersonIntentNode();
  IntentNodeTraversable.value<A>(forNode:)();
  uint64_t result = v45;
  if (v46)
  {
    IntentNodeTraversable.intentNode<A>(forOntologyNode:)();
    uint64_t v27 = type metadata accessor for TerminalIntentNode();
    if (__swift_getEnumTagSinglePayload(v4, 1, v27) == 1)
    {
      uint64_t v28 = &demangling cache variable for type metadata for TerminalIntentNode?;
      uint64_t v29 = v4;
    }
    else
    {
      uint64_t v30 = TerminalIntentNode.elements.getter();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_11();
      v31();
      specialized BidirectionalCollection.last.getter(v30, v9);
      swift_bridgeObjectRelease();
      uint64_t v32 = type metadata accessor for TerminalElement();
      if (__swift_getEnumTagSinglePayload(v9, 1, v32) == 1)
      {
        uint64_t v28 = &demangling cache variable for type metadata for TerminalElement?;
        uint64_t v29 = v9;
      }
      else
      {
        TerminalElement.origin.getter();
        OUTLINED_FUNCTION_10();
        OUTLINED_FUNCTION_11();
        v33();
        uint64_t v34 = type metadata accessor for TerminalElement.Origin();
        if (__swift_getEnumTagSinglePayload(v14, 1, v34) != 1)
        {
          TerminalElement.Origin.originDetail.getter();
          OUTLINED_FUNCTION_10();
          OUTLINED_FUNCTION_11();
          v36();
          uint64_t v37 = type metadata accessor for TerminalElement.OriginDetail();
          if (__swift_getEnumTagSinglePayload(v19, 1, v37) != 1)
          {
            OUTLINED_FUNCTION_1();
            uint64_t v39 = v38;
            if ((*(unsigned int (**)(uint64_t, uint64_t))(v40 + 88))(v19, v37) == enum case for TerminalElement.OriginDetail.matchingSpan(_:))
            {
              (*(void (**)(uint64_t, uint64_t))(v39 + 96))(v19, v37);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 32))(v25, v19, v20);
              uint64_t v41 = static PersonIntentNode.getFilteredAlternatives(span:)();
              uint64_t v43 = v42;
              (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v25, v20);
              if (v43)
              {
                swift_bridgeObjectRelease();
                return v41;
              }
            }
            else
            {
              (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v19, v37);
            }
            return v45;
          }
LABEL_9:
          outlined destroy of FlowActivity?(v19, &demangling cache variable for type metadata for TerminalElement.OriginDetail?);
          return v45;
        }
        uint64_t v28 = &demangling cache variable for type metadata for TerminalElement.Origin?;
        uint64_t v29 = v14;
      }
    }
    outlined destroy of FlowActivity?(v29, v28);
    uint64_t v35 = type metadata accessor for TerminalElement.OriginDetail();
    __swift_storeEnumTagSinglePayload(v19, 1, 1, v35);
    goto LABEL_9;
  }
  return result;
}

uint64_t specialized BidirectionalCollection.last.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v5 = v3 - 1;
    uint64_t v6 = type metadata accessor for TerminalElement();
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1+ ((*(unsigned __int8 *)(*(void *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80))+ *(void *)(*(void *)(v6 - 8) + 72) * v5, v6);
    uint64_t v7 = OUTLINED_FUNCTION_0_59();
  }
  else
  {
    type metadata accessor for TerminalElement();
    uint64_t v7 = OUTLINED_FUNCTION_17_1();
  }

  return __swift_storeEnumTagSinglePayload(v7, v8, v9, v10);
}

{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t vars8;

  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v5 = v3 - 1;
    uint64_t v6 = *(void *)(type metadata accessor for DisambiguationItemWithDirectInvocationModel(0) - 8);
    outlined init with copy of DisambiguationItemWithDirectInvocationModel(a1+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v5, a2);
    uint64_t v7 = OUTLINED_FUNCTION_0_59();
  }
  else
  {
    type metadata accessor for DisambiguationItemWithDirectInvocationModel(0);
    uint64_t v7 = OUTLINED_FUNCTION_17_1();
  }

  return __swift_storeEnumTagSinglePayload(v7, v8, v9, v10);
}

double specialized BidirectionalCollection.last.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    outlined init with copy of TransformationResult((uint64_t *)(a1 + 48 * v2 - 16), (void *)a2);
  }
  else
  {
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(void *)&double result = 1;
    *(_OWORD *)(a2 + 32) = xmmword_467740;
  }
  return result;
}

uint64_t specialized BidirectionalCollection.last.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 32 * v1);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t static PersonIntentNode.getFilteredAlternatives(span:)()
{
  unint64_t v0 = *(void *)(TerminalElement.MatchingSpan.alternateInterpretationConfidences.getter() + 16);
  swift_bridgeObjectRelease();
  uint64_t v1 = 0;
  if (v0 >= 2)
  {
    uint64_t v2 = TerminalElement.MatchingSpan.alternateInterpretationConfidences.getter();
    double v3 = COERCE_DOUBLE(specialized Sequence<>.max()(v2));
    char v5 = v4;
    swift_bridgeObjectRelease();
    if (v5)
    {
      return 0;
    }
    else
    {
      uint64_t v6 = TerminalElement.MatchingSpan.alternateInterpretationConfidences.getter();
      uint64_t v7 = specialized _NativeDictionary.filter(_:)(v6, v3 * 0.2);
      swift_bridgeObjectRelease();
      swift_retain_n();
      uint64_t v8 = swift_bridgeObjectRetain();
      uint64_t v9 = specialized _copyCollectionToContiguousArray<A>(_:)(v8);
      swift_release();
      uint64_t v11 = v9;
      specialized MutableCollection<>.sort(by:)((uint64_t *)&v11, v7);
      swift_release_n();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      uint64_t v1 = BidirectionalCollection<>.joined(separator:)();
      swift_release();
    }
  }
  return v1;
}

void __swiftcall PhoneCallPersonName.init(firstName:middleName:lastName:nickName:fullName:namePrefix:nameSuffix:)(PhoneCallFlowDelegatePlugin::PhoneCallPersonName *__return_ptr retstr, Swift::String_optional firstName, Swift::String_optional middleName, Swift::String_optional lastName, Swift::String_optional nickName, Swift::String_optional fullName, Swift::String_optional namePrefix, Swift::String_optional nameSuffix)
{
  retstr->firstName = firstName;
  retstr->middleName = middleName;
  retstr->lastName = lastName;
  retstr->nickName = nickName;
  retstr->fullName = fullName;
  retstr->namePrefix = namePrefix;
  retstr->nameSuffix = nameSuffix;
}

uint64_t *outlined release of PhoneCallPersonName?(uint64_t *a1)
{
  return a1;
}

void *outlined release of PhoneCallPersonName?(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a1;
}

Swift::String_optional __swiftcall SiriPhoneContact.getFirstName(filteredAlternatives:)(Swift::Bool filteredAlternatives)
{
  uint64_t v2 = OUTLINED_FUNCTION_1_41(filteredAlternatives, v1);
  uint64_t v4 = v3(v2);
  OUTLINED_FUNCTION_11_21(v4, v5, &demangling cache variable for type metadata for PhoneCallPersonName?, v6, v7, v8, v9, v10, v16[0], v16[1], v16[2], v16[3], v16[4], v16[5], v16[6], v16[7], v16[8], v16[9], v16[10],
    v16[11],
    v16[12],
    v16[13],
    v17);
  uint64_t v11 = v18;
  if (v18 == (unsigned char *)&dword_0 + 1)
  {
    uint64_t v12 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v12 = v17;
    swift_bridgeObjectRetain();
    outlined release of PhoneCallPersonName?(v16);
  }
  uint64_t v13 = v12;
  uint64_t v14 = v11;
  result.value._object = v14;
  result.value._uint64_t countAndFlagsBits = v13;
  return result;
}

uint64_t PhoneCallNLv3Intent.smsGroups.getter()
{
  OUTLINED_FUNCTION_12_63();
  lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent, (void (*)(uint64_t))type metadata accessor for PhoneCallNLv3Intent);
  IntentNodeTraversable.intentNodes(forOntologyNode:)();
  OUTLINED_FUNCTION_55_22();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology21NonTerminalIntentNodeVG_27PhoneCallFlowDelegatePlugin8SmsGroup_ps5NeverOTg5(v1, v2, v3, v4);
  OUTLINED_FUNCTION_15_0();
  return v0;
}

Swift::Bool __swiftcall PhoneCallNLIntent.isFaceTimeCall()()
{
  OUTLINED_FUNCTION_14_11();
  __chkstk_darwin(v0);
  OUTLINED_FUNCTION_12_0();
  Swift::Bool v1 = PhoneCallNLIntent.hasAnyFaceTime()();
  uint64_t v2 = OUTLINED_FUNCTION_4_49();
  v3(v2);
  if (v1) {
    goto LABEL_11;
  }
  uint64_t v4 = OUTLINED_FUNCTION_93_4();
  v5(v4);
  OUTLINED_FUNCTION_129_0();
  if (!v10)
  {
    uint64_t v8 = PhoneCallNoun.rawValue.getter(v6);
    BOOL v10 = v8 == 0x61665F70756F7267 && v9 == 0xEE00656D69746563;
    if (!v10)
    {
      char v7 = OUTLINED_FUNCTION_75_3();
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    OUTLINED_FUNCTION_238();
LABEL_11:
    char v7 = 1;
    goto LABEL_12;
  }
  char v7 = 0;
LABEL_12:
  OUTLINED_FUNCTION_53_8();
  v11();
  return v7 & 1;
}

Swift::Bool __swiftcall PhoneCallNLIntent.hasAnyFaceTime()()
{
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_14_11();
  uint64_t v1 = v0;
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_12_24();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_89_1();
  Swift::Bool v4 = PhoneCallNLIntent.hasAudioCallSemantic()();
  uint64_t v5 = *(void (**)(void))(v1 + 16);
  OUTLINED_FUNCTION_8_48();
  v5();
  if (v4)
  {
    Swift::Bool v6 = 1;
  }
  else
  {
    OUTLINED_FUNCTION_184();
    Swift::Bool v6 = PhoneCallNLIntent.hasVideoCallSemantic()();
  }
  char v7 = *(void (**)(void))(v1 + 8);
  OUTLINED_FUNCTION_14_23();
  v7();
  OUTLINED_FUNCTION_8_48();
  v5();
  if (v6 || (uint64_t v8 = PhoneCallNLIntent.applicationId.getter(), !v9))
  {
    OUTLINED_FUNCTION_14_23();
    v7();
  }
  else
  {
    if (v8 != 0xD000000000000012 || v9 != 0x8000000000492070) {
      OUTLINED_FUNCTION_173();
    }
    OUTLINED_FUNCTION_14_23();
    v7();
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_26_1();
  return result;
}

Swift::Bool __swiftcall PhoneCallNLIntent.hasAudioCallSemantic()()
{
  OUTLINED_FUNCTION_28();
  (*(void (**)(void))(v0 + 80))();
  OUTLINED_FUNCTION_129_0();
  if (!v4)
  {
    uint64_t v2 = PhoneCallNoun.rawValue.getter(v1);
    BOOL v4 = v2 == 0x656D697465636166 && v3 == 0xEE006F6964756120;
    if (v4)
    {
      OUTLINED_FUNCTION_102_2();
    }
    else
    {
      OUTLINED_FUNCTION_23_18();
      swift_bridgeObjectRelease();
    }
  }
  OUTLINED_FUNCTION_28_15();
  v5();
  OUTLINED_FUNCTION_24_23();
  if (!v4)
  {
    uint64_t v7 = PhoneCallVerb.rawValue.getter(v6);
    if (v7 == 0x656D697465636166 && v8 == 0xEE006F6964756120)
    {
      OUTLINED_FUNCTION_102_2();
    }
    else
    {
      OUTLINED_FUNCTION_23_18();
      OUTLINED_FUNCTION_124_0();
    }
  }
  OUTLINED_FUNCTION_24();
  return result;
}

uint64_t PhoneCallNLv3Intent.phoneCallNoun.getter()
{
  OUTLINED_FUNCTION_12_63();
  lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent, (void (*)(uint64_t))type metadata accessor for PhoneCallNLv3Intent);
  OUTLINED_FUNCTION_10_73();
  return v1;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance PhoneCallNoun(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance PhoneCallAttribute(a1, a2, a3, (uint64_t)lazy protocol witness table accessor for type PhoneCallNoun and conformance PhoneCallNoun, (uint64_t)lazy protocol witness table accessor for type PhoneCallNoun and conformance PhoneCallNoun, (uint64_t)lazy protocol witness table accessor for type PhoneCallNoun and conformance PhoneCallNoun, a7, a8, a9, a10);
}

PhoneCallFlowDelegatePlugin::PhoneCallNoun_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallNoun@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallNoun_optional *a2@<X8>)
{
  result.value = PhoneCallNoun.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

PhoneCallFlowDelegatePlugin::PhoneCallNoun_optional __swiftcall PhoneCallNoun.init(rawValue:)(Swift::String rawValue)
{
  OUTLINED_FUNCTION_4_5();
  v3._object = v1;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PhoneCallNoun.init(rawValue:), v3);
  OUTLINED_FUNCTION_15_0();
  if (v2 >= 9) {
    return (PhoneCallFlowDelegatePlugin::PhoneCallNoun_optional)9;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::PhoneCallNoun_optional)v2;
  }
}

unsigned char *storeEnumTagSinglePayload for PhoneCallNoun(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *PhoneCallFlowDelegatePlugin::PhoneCallNoun_optional result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *PhoneCallFlowDelegatePlugin::PhoneCallNoun_optional result = a2 + 8;
        break;
    }
  }
  return result;
}

uint64_t PhoneCallNoun.rawValue.getter(char a1)
{
  uint64_t result = 1819042147;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x736C6C6163;
      break;
    case 2:
    case 3:
      uint64_t result = OUTLINED_FUNCTION_59_0();
      break;
    case 4:
      uint64_t result = 0x61665F70756F7267;
      break;
    case 5:
      uint64_t result = OUTLINED_FUNCTION_66_2();
      break;
    case 6:
      uint64_t result = OUTLINED_FUNCTION_7_1();
      break;
    case 7:
      uint64_t result = OUTLINED_FUNCTION_140_0();
      break;
    case 8:
      uint64_t result = OUTLINED_FUNCTION_139_0();
      break;
    default:
      return result;
  }
  return result;
}

void OUTLINED_FUNCTION_164()
{
  *(void *)(v3 + 184) = (v1 - 32) | 0x8000000000000000;
  *(unsigned char *)(v3 + 192) = v0;
  *(void *)(v3 + 216) = v2;
  *(void *)(v3 + 224) = v4;
}

uint64_t OUTLINED_FUNCTION_215@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 88) = (a1 - 32) | 0x8000000000000000;
  return 0;
}

uint64_t OUTLINED_FUNCTION_164_0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  v2[18] = a2;
  v2[21] = result;
  v2[22] = 0x746E65746E69;
  v2[23] = 0xE600000000000000;
  return result;
}

uint64_t OUTLINED_FUNCTION_164_3()
{
  return v0;
}

Swift::Bool __swiftcall PhoneCallNLIntent.hasVideoCallSemantic()()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = *(void (**)(void))(v0 + 80);
  v4();
  OUTLINED_FUNCTION_129_0();
  if (!v8)
  {
    uint64_t v6 = PhoneCallNoun.rawValue.getter(v5);
    BOOL v8 = v6 == 0x656D697465636166 && v7 == 0xE800000000000000;
    if (!v8) {
      OUTLINED_FUNCTION_26_18();
    }
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_28_15();
  v9();
  OUTLINED_FUNCTION_24_23();
  if (!v8)
  {
    uint64_t v11 = PhoneCallVerb.rawValue.getter(v10);
    if (v11 != 0x656D697465636166 || v12 != 0xE800000000000000) {
      OUTLINED_FUNCTION_26_18();
    }
    swift_bridgeObjectRelease();
  }
  ((void (*)(uint64_t, uint64_t))v4)(v3, v1);
  OUTLINED_FUNCTION_129_0();
  if (!v8)
  {
    uint64_t v15 = PhoneCallNoun.rawValue.getter(v14);
    if (v15 == 0x61665F70756F7267 && v16 == 0xEE00656D69746563)
    {
      OUTLINED_FUNCTION_238();
    }
    else
    {
      OUTLINED_FUNCTION_75_3();
      OUTLINED_FUNCTION_124_0();
    }
  }
  OUTLINED_FUNCTION_26_1();
  return result;
}

Swift::Bool __swiftcall App.isFirstParty()()
{
  App.appIdentifier.getter();
  if (v0)
  {
    lazy protocol witness table accessor for type String and conformance String();
    lazy protocol witness table accessor for type String and conformance String();
    char v1 = BidirectionalCollection<>.starts<A>(with:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v1 = 0;
  }
  return v1 & 1;
}

Swift::Bool __swiftcall PhoneCallNLIntent.isHangUpCall()()
{
  OUTLINED_FUNCTION_16_30();
  v0();
  OUTLINED_FUNCTION_24_23();
  if (v3) {
    return 0;
  }
  OUTLINED_FUNCTION_78_3(v1);
  if (v3) {
    BOOL v5 = v4 == 0xE700000000000000;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    OUTLINED_FUNCTION_201();
    OUTLINED_FUNCTION_110_0();
    OUTLINED_FUNCTION_15_0();
    return 0;
  }
}

uint64_t OUTLINED_FUNCTION_13_0()
{
  return v0 + 8;
}

double OUTLINED_FUNCTION_103()
{
  double result = 0.0;
  *uint64_t v0 = 0u;
  v0[1] = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_204()
{
  return PhoneCallNLIntent.appName.getter();
}

id static PhoneDomainContextMetricsUtils.addPhoneCallType(phoneCallNLIntent:phoneContext:)(uint64_t a1, void *a2)
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.siriPhone);
  outlined init with copy of SignalProviding(a1, (uint64_t)v15);
  BOOL v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    outlined init with copy of SignalProviding((uint64_t)v15, (uint64_t)v13);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
    uint64_t v8 = String.init<A>(describing:)();
    v13[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    _os_log_impl(&dword_0, v5, v6, "#PhoneDomainContextMetricsUtils addPhoneCallType with phoneIntent: %s", v7, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }

  OUTLINED_FUNCTION_0_50();
  if (PhoneCallNLIntent.isAudioCall()()) {
    return [a2 setPhoneCallType:1];
  }
  OUTLINED_FUNCTION_0_50();
  if (PhoneCallNLIntent.isVideoCall()())
  {
    uint64_t v11 = a2;
    uint64_t v12 = 2;
  }
  else
  {
    uint64_t v11 = a2;
    uint64_t v12 = 0;
  }
  return [v11 setPhoneCallType:v12];
}

Swift::Bool __swiftcall PhoneCallNLIntent.isAudioCall()()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v2 = v0;
  OUTLINED_FUNCTION_14_11();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_12_24();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_31_12();
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_49_11();
  Swift::Bool v8 = PhoneCallNLIntent.hasAudioCallSemantic()();
  unint64_t v9 = *(void (**)(void))(v4 + 16);
  OUTLINED_FUNCTION_42_11();
  v9();
  BOOL v10 = v8 || PhoneCallNLIntent.hasCallVerb()();
  uint64_t v11 = *(void (**)(void))(v4 + 8);
  OUTLINED_FUNCTION_0_35();
  v11();
  OUTLINED_FUNCTION_42_11();
  v9();
  if (v10)
  {
    OUTLINED_FUNCTION_227();
    Swift::Bool v12 = PhoneCallNLIntent.isFind()();
    OUTLINED_FUNCTION_0_35();
    v11();
    OUTLINED_FUNCTION_42_11();
    v9();
    if (!v12)
    {
      OUTLINED_FUNCTION_228();
      OUTLINED_FUNCTION_97_1();
      v13();
      OUTLINED_FUNCTION_194();
    }
  }
  else
  {
    OUTLINED_FUNCTION_0_35();
    v11();
    ((void (*)(uint64_t, uint64_t))v9)(v1, v2);
  }
  OUTLINED_FUNCTION_0_35();
  v11();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_26_1();
  return result;
}

uint64_t OUTLINED_FUNCTION_213_0@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 128) = v2;
  *(void *)(v1 + 136) = (a1 - 32) | 0x8000000000000000;
  return 0;
}

uint64_t OUTLINED_FUNCTION_213_1()
{
  return swift_bridgeObjectRetain();
}

Swift::Bool __swiftcall PhoneCallNLIntent.hasCallVerb()()
{
  OUTLINED_FUNCTION_16_30();
  v0();
  OUTLINED_FUNCTION_24_23();
  if (v3) {
    return 0;
  }
  OUTLINED_FUNCTION_78_3(v1);
  if (v3) {
    BOOL v5 = v4 == 0xE400000000000000;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_30_15();
    OUTLINED_FUNCTION_15_0();
  }
  return 1;
}

Swift::Bool __swiftcall PhoneCallNLIntent.isFind()()
{
  OUTLINED_FUNCTION_16_30();
  v0();
  OUTLINED_FUNCTION_24_23();
  if (v3) {
    return 0;
  }
  OUTLINED_FUNCTION_78_3(v1);
  if (v3) {
    BOOL v5 = v4 == 0xE400000000000000;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    OUTLINED_FUNCTION_35_16();
    OUTLINED_FUNCTION_15_0();
    return 0;
  }
}

uint64_t PhoneCallNLv3Intent.voiceMailNoun.getter()
{
  return PhoneCallNLv3Intent.phoneCallConfirmation.getter();
}

void static PhoneDomainContextMetricsUtils.addEmergencyType(phoneCallNLIntent:phoneContext:)(uint64_t a1, void *a2)
{
  char v3 = [objc_allocWithZone((Class)FLOWSchemaFLOWPhoneCallEmergencyContext) init];
  if (v3)
  {
    uint64_t v7 = v3;
    OUTLINED_FUNCTION_0_50();
    if (PhoneCallNLIntent.isEmergencyNumberCall()()) {
      [v7 setEmergencyCallType:2];
    }
    OUTLINED_FUNCTION_0_50();
    if (PhoneCallNLIntent.isEmergencyServicesCall()()) {
      [v7 setEmergencyCallType:3];
    }
    OUTLINED_FUNCTION_0_50();
    if (PhoneCallNLIntent.isEmergencyContactCall()()) {
      [v7 setEmergencyCallType:1];
    }
    [a2 setEmergencyContext:v7];
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    uint64_t v7 = OUTLINED_FUNCTION_25_0(v4, (uint64_t)static Logger.siriPhone);
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v5))
    {
      uint64_t v6 = (uint8_t *)OUTLINED_FUNCTION_7_2();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_0, v7, v5, "#PhoneDomainContextMetricsUtils returning without logging phoneCall emergency context", v6, 2u);
      OUTLINED_FUNCTION_6();
    }
  }
}

uint64_t protocol witness for SiriPhoneContact.emergencyType.getter in conformance PhoneCallContactIntentNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 448))();
}

void PhoneCallContactIntentNode.emergencyType.getter()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement?);
  uint64_t v4 = OUTLINED_FUNCTION_11_0(v3);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_52();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalIntentNode?);
  uint64_t v6 = OUTLINED_FUNCTION_11_0(v5);
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_27();
  __chkstk_darwin(v7);
  unint64_t v9 = (char *)v45 - v8;
  unint64_t v46 = v0;
  unint64_t v48 = v0;
  if (one-time initialization token for phoneNumberNode != -1) {
    swift_once();
  }
  type metadata accessor for PhoneCallContactIntentNode(0);
  lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type PhoneCallContactIntentNode and conformance PhoneCallContactIntentNode, (void (*)(uint64_t))type metadata accessor for PhoneCallContactIntentNode);
  IntentNodeTraversable.intentNode<A>(forOntologyNode:)();
  outlined init with copy of PersonOntologyNode.PersonSelfReference?((uint64_t)v9, v1, &demangling cache variable for type metadata for TerminalIntentNode?);
  uint64_t v10 = type metadata accessor for TerminalIntentNode();
  uint64_t v11 = OUTLINED_FUNCTION_44_28();
  OUTLINED_FUNCTION_28_6(v11, v12, v10);
  unint64_t v47 = v9;
  if (v18)
  {
    uint64_t v13 = &demangling cache variable for type metadata for TerminalIntentNode?;
    uint64_t v14 = v1;
LABEL_9:
    outlined destroy of UUID?(v14, v13);
    goto LABEL_10;
  }
  uint64_t v15 = TerminalIntentNode.elements.getter();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_11();
  v16();
  specialized BidirectionalCollection.last.getter(v15, v2);
  swift_bridgeObjectRelease();
  uint64_t v17 = type metadata accessor for TerminalElement();
  OUTLINED_FUNCTION_28_6(v2, 1, v17);
  if (v18)
  {
    uint64_t v13 = &demangling cache variable for type metadata for TerminalElement?;
    uint64_t v14 = v2;
    goto LABEL_9;
  }
  uint64_t v27 = TerminalElement.semanticTags.getter();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_11();
  v28();
  uint64_t v29 = *(void *)(v27 + 16);
  if (v29)
  {
    swift_bridgeObjectRetain();
    v45[1] = v27;
    uint64_t v30 = (unint64_t *)(v27 + 40);
    uint64_t v31 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v32 = *(v30 - 1);
      unint64_t v33 = *v30;
      swift_bridgeObjectRetain();
      String.index(_:offsetBy:limitedBy:)();
      String.subscript.getter();
      Swift::String v34 = Substring.lowercased()();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      unint64_t v35 = specialized Collection.dropFirst(_:)(1uLL, v32, v33);
      Swift::String v52 = v34;
      unint64_t v48 = v35;
      uint64_t v49 = v36;
      uint64_t v50 = v37;
      uint64_t v51 = v38;
      lazy protocol witness table accessor for type Substring and conformance Substring();
      swift_bridgeObjectRetain();
      String.append<A>(contentsOf:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      Swift::Int v39 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PhoneCallContactIntentNode.emergencyType.getter, v52);
      swift_bridgeObjectRelease();
      if (!v39)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v31 = v42;
        }
        unint64_t v40 = v31[2];
        unint64_t v41 = v40 + 1;
        if (v40 >= v31[3] >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v31 = v43;
        }
        void v31[2] = v41;
      }
      v30 += 2;
      --v29;
    }
    while (v29);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v31 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  BOOL v44 = specialized Sequence<>.contains(_:)((uint64_t)v31);
  swift_bridgeObjectRelease();
  if (v44) {
    goto LABEL_33;
  }
LABEL_10:
  OUTLINED_FUNCTION_22();
  v19 += 32;
  uint64_t v20 = *v19;
  uint64_t v21 = (*v19)();
  if (v22)
  {
    if (v21 == 0xD000000000000012 && v22 == 0x80000000004936B0)
    {
      swift_bridgeObjectRelease();
LABEL_33:
      outlined destroy of UUID?((uint64_t)v47, &demangling cache variable for type metadata for TerminalIntentNode?);
      goto LABEL_34;
    }
    char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v21 = swift_bridgeObjectRelease();
    if (v23) {
      goto LABEL_33;
    }
  }
  uint64_t v24 = ((uint64_t (*)(uint64_t))v20)(v21);
  if (!v25) {
    goto LABEL_33;
  }
  uint64_t v26 = (uint64_t)v47;
  if (v24 == 0xD000000000000011 && v25 == 0x80000000004936D0)
  {
    outlined destroy of UUID?((uint64_t)v47, &demangling cache variable for type metadata for TerminalIntentNode?);
    swift_bridgeObjectRelease();
  }
  else
  {
    _stringCompareWithSmolCheck(_:_:expecting:)();
    outlined destroy of UUID?(v26, &demangling cache variable for type metadata for TerminalIntentNode?);
    swift_bridgeObjectRelease();
  }
LABEL_34:
  OUTLINED_FUNCTION_26_1();
}

uint64_t PhoneCallContactIntentNode.contactName.getter()
{
  return PhoneCallContactIntentNode.contactId.getter(&one-time initialization token for phoneCallContactNameNode);
}

uint64_t PhoneCallNLv3Intent.phoneCallDestinationType.getter()
{
  OUTLINED_FUNCTION_12_63();
  lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent, (void (*)(uint64_t))type metadata accessor for PhoneCallNLv3Intent);
  OUTLINED_FUNCTION_10_73();
  return v1;
}

uint64_t outlined destroy of CallStateProvider(uint64_t a1)
{
  return a1;
}

uint64_t destroy for CallStateProvider(id *a1)
{
  uint64_t v1 = (uint64_t)(a1 + 1);

  return __swift_destroy_boxed_opaque_existential_1(v1);
}

Swift::Bool __swiftcall PhoneCallNLIntent.isGroupFaceTimeCall()()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_14_11();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_27();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_31_12();
  __chkstk_darwin(v7);
  v30[1] = (char *)v30 - v8;
  OUTLINED_FUNCTION_18_0();
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)v30 - v11;
  uint64_t v14 = *(uint64_t (**)(uint64_t))(v13 + 128);
  uint64_t v15 = *(void *)(v14(v10) + 16);
  swift_bridgeObjectRelease();
  uint64_t v31 = v2;
  Swift::Bool v16 = PhoneCallNLIntent.isFaceTimeCall()();
  uint64_t v32 = v4;
  if (v15)
  {
    uint64_t v17 = *(void (**)(void))(v4 + 16);
    OUTLINED_FUNCTION_54_8();
    v18();
    if (v16)
    {
      unint64_t v19 = *(void *)(((uint64_t (*)(uint64_t, uint64_t))v14)(v0, v31) + 16);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_42_11();
      v17();
      if (v19 <= 1)
      {
        uint64_t v25 = OUTLINED_FUNCTION_105_0();
        v26(v25);
        swift_bridgeObjectRelease();
      }
      uint64_t v27 = *(void (**)(void))(v32 + 8);
      OUTLINED_FUNCTION_76_3();
      v27();
      ((void (*)(char *))v27)(v12);
    }
    else
    {
      (*(void (**)(char *))(v32 + 8))(v12);
    }
  }
  else
  {
    uint64_t v20 = *(void (**)(void))(v4 + 16);
    OUTLINED_FUNCTION_54_8();
    v21();
    if (v16)
    {
      uint64_t v22 = v31;
      OUTLINED_FUNCTION_38_11();
      unint64_t v24 = *(void *)(v23() + 16);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_42_11();
      v20();
      if (v24 <= 1)
      {
        (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 136))(v0, v22);
        swift_bridgeObjectRelease();
      }
      uint64_t v28 = *(void (**)(void))(v32 + 8);
      OUTLINED_FUNCTION_76_3();
      v28();
      v28();
    }
    else
    {
      (*(void (**)())(v32 + 8))();
    }
  }
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_26_1();
  return result;
}

void PhoneCallNLv3Intent.contactQueries.getter()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v2 = type metadata accessor for ContactQuery();
  OUTLINED_FUNCTION_1();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  Swift::Bool v16 = (void *)*(int *)(OUTLINED_FUNCTION_38_32() + 48);
  lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent, (void (*)(uint64_t))type metadata accessor for PhoneCallNLv3Intent);
  uint64_t v6 = IntentNodeTraversable.intentNodes(forOntologyNode:)();
  uint64_t v18 = v0;
  uint64_t v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology21NonTerminalIntentNodeVG_27PhoneCallFlowDelegatePlugin0dJ7Contact_ps5NeverOTg5((uint64_t)closure #1 in PhoneCallNLv3Intent.contacts.getterpartial apply, (uint64_t)&v17, v6, (uint64_t)&v22);
  swift_bridgeObjectRelease();
  uint64_t v8 = v7[2];
  swift_bridgeObjectRelease();
  if (v8)
  {
    uint64_t v9 = IntentNodeTraversable.intentNodes(forOntologyNode:)();
    __chkstk_darwin(v9);
    v15[2] = v0;
    uint64_t v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology21NonTerminalIntentNodeVG_27PhoneCallFlowDelegatePlugin0dJ7Contact_ps5NeverOTg5((uint64_t)closure #1 in PhoneCallNLv3Intent.contacts.getterpartial apply, (uint64_t)v15, v9, (uint64_t)&v21);
    swift_bridgeObjectRelease();
    uint64_t v11 = v10[2];
    if (v11)
    {
      uint64_t v20 = _swiftEmptyArrayStorage;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      Swift::Bool v16 = v10;
      uint64_t v12 = (uint64_t)(v10 + 4);
      uint64_t v13 = v20;
      do
      {
        outlined init with copy of SignalProviding(v12, (uint64_t)v19);
        __swift_project_boxed_opaque_existential_1(v19, v19[3]);
        SiriPhoneContact.asSiriInferenceContact.getter();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v13 = v20;
        }
        unint64_t v14 = v13[2];
        if (v14 >= v13[3] >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v13 = v20;
        }
        v13[2] = v14 + 1;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))((unint64_t)v13+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v14, v1, v2);
        uint64_t v20 = v13;
        v12 += 40;
        --v11;
      }
      while (v11);
    }
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_26_1();
}

void SiriPhoneContact.asSiriInferenceContact.getter()
{
  OUTLINED_FUNCTION_24_0();
  unint64_t v3 = v0;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactHandleQuery?);
  uint64_t v11 = OUTLINED_FUNCTION_11_0(v10);
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_30_22();
  type metadata accessor for ContactHandle.HandleType();
  OUTLINED_FUNCTION_0_0();
  uint64_t v90 = v13;
  uint64_t v91 = v12;
  uint64_t v14 = __chkstk_darwin(v12);
  Swift::Bool v16 = (char *)v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)v81 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactQuery?);
  uint64_t v20 = OUTLINED_FUNCTION_11_0(v19);
  __chkstk_darwin(v20);
  OUTLINED_FUNCTION_65_0();
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactRelationshipQuery?);
  uint64_t v22 = OUTLINED_FUNCTION_11_0(v21);
  __chkstk_darwin(v22);
  OUTLINED_FUNCTION_4();
  uint64_t v25 = v24 - v23;
  ContactQuery.init()();
  if ((unint64_t)SiriPhoneContact.getFullName(filteredAlternatives:)(1).value._object) {
    ContactQuery.fullName.setter();
  }
  OUTLINED_FUNCTION_16_45();
  if ((unint64_t)SiriPhoneContact.getPrefixName()().value._object) {
    ContactQuery.namePrefix.setter();
  }
  char v26 = OUTLINED_FUNCTION_48_18();
  if ((unint64_t)SiriPhoneContact.getFirstName(filteredAlternatives:)(v26).value._object) {
    ContactQuery.givenName.setter();
  }
  char v27 = OUTLINED_FUNCTION_48_18();
  if ((unint64_t)SiriPhoneContact.getMiddleName(filteredAlternatives:)(v27).value._object) {
    ContactQuery.middleName.setter();
  }
  char v28 = OUTLINED_FUNCTION_48_18();
  if ((unint64_t)SiriPhoneContact.getLastName(filteredAlternatives:)(v28).value._object) {
    ContactQuery.familyName.setter();
  }
  OUTLINED_FUNCTION_16_45();
  if ((unint64_t)SiriPhoneContact.getPostfixName()().value._object) {
    ContactQuery.nameSuffix.setter();
  }
  uint64_t v88 = v18;
  OUTLINED_FUNCTION_16_45();
  if ((unint64_t)SiriPhoneContact.getNickName()().value._object) {
    ContactQuery.nickname.setter();
  }
  (*(void (**)(uint64_t, uint64_t))(v5 + 416))(v7, v5);
  if (v29)
  {
    OUTLINED_FUNCTION_3_4();
    uint64_t v30 = type metadata accessor for ContactQuery();
    __swift_storeEnumTagSinglePayload(v2, 1, 1, v30);
    OUTLINED_FUNCTION_7_0();
    ContactRelationshipQuery.init(label:fromContact:)();
    uint64_t v31 = type metadata accessor for ContactRelationshipQuery();
    __swift_storeEnumTagSinglePayload(v25, 0, 1, v31);
    ContactQuery.relationship.setter();
  }
  OUTLINED_FUNCTION_16_45();
  if ((unint64_t)SiriPhoneContact.getOrganzationName()().value._object) {
    ContactQuery.organizationName.setter();
  }
  OUTLINED_FUNCTION_16_45();
  Swift::Bool v32 = SiriPhoneContact.isMe()();
  uint64_t v34 = v90;
  uint64_t v33 = v91;
  if (v32) {
    ContactQuery.isMe.setter();
  }
  uint64_t v89 = v7;
  OUTLINED_FUNCTION_16_45();
  if ((unint64_t)SiriPhoneContact.getContactName()().value._object)
  {
    ContactQuery.givenName.getter();
    OUTLINED_FUNCTION_86_8();
    OUTLINED_FUNCTION_52_13();
    if (v35
      || (ContactQuery.middleName.getter(), OUTLINED_FUNCTION_86_8(), OUTLINED_FUNCTION_52_13(), v36)
      || (ContactQuery.familyName.getter(), OUTLINED_FUNCTION_86_8(), OUTLINED_FUNCTION_52_13(), v37))
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      ContactQuery.givenName.setter();
    }
    uint64_t v33 = v91;
  }
  OUTLINED_FUNCTION_16_45();
  Swift::String_optional v38 = SiriPhoneContact.getHandleType()();
  if (v38.value._object)
  {
    uint64_t v85 = v9;
    uint64_t v86 = v5;
    uint64_t v84 = v1;
    Swift::String_optional v82 = v38;
    Swift::String_optional v96 = v38;
    v81[1] = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v39 = StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)();
    uint64_t v40 = *(void *)(v39 + 16);
    unint64_t v87 = v0;
    unint64_t v83 = v16;
    v81[0] = v39;
    if (v40)
    {
      unint64_t v41 = (uint64_t *)(v39 + 56);
      uint64_t countAndFlagsBits = _swiftEmptyArrayStorage;
      OUTLINED_FUNCTION_82_6();
      do
      {
        unint64_t v43 = *(v41 - 3);
        unint64_t v44 = *(v41 - 2);
        uint64_t v46 = *(v41 - 1);
        uint64_t v45 = *v41;
        unint64_t v47 = v43 >> 16;
        unint64_t v48 = v44 >> 16;
        if (v46 != 0x656E6F6870 || v45 != 0xE500000000000000 || v47 != 0 || v48 != 5)
        {
          OUTLINED_FUNCTION_81_8();
          if ((_stringCompareInternal(_:_:_:_:expecting:)() & 1) == 0)
          {
            BOOL v52 = v46 == v3 && v45 == 0xE500000000000000;
            BOOL v53 = v52 && v47 == 0;
            if (!v53 || v48 != 5)
            {
              OUTLINED_FUNCTION_81_8();
              if ((_stringCompareInternal(_:_:_:_:expecting:)() & 1) == 0)
              {
                swift_bridgeObjectRetain();
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                v96.value._uint64_t countAndFlagsBits = (uint64_t)countAndFlagsBits;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                  uint64_t countAndFlagsBits = (void *)v96.value._countAndFlagsBits;
                }
                unint64_t v3 = countAndFlagsBits[2];
                unint64_t v56 = countAndFlagsBits[3];
                if (v3 >= v56 >> 1)
                {
                  OUTLINED_FUNCTION_71(v56);
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                  uint64_t countAndFlagsBits = (void *)v96.value._countAndFlagsBits;
                }
                countAndFlagsBits[2] = v3 + 1;
                uint64_t v57 = &countAndFlagsBits[4 * v3];
                v57[4] = v43;
                v57[5] = v44;
                v57[6] = v46;
                v57[7] = v45;
                OUTLINED_FUNCTION_82_6();
              }
            }
          }
        }
        v41 += 4;
        --v40;
      }
      while (v40);
    }
    else
    {
      uint64_t countAndFlagsBits = _swiftEmptyArrayStorage;
      OUTLINED_FUNCTION_82_6();
    }
    swift_bridgeObjectRelease();
    v96.value._uint64_t countAndFlagsBits = (uint64_t)countAndFlagsBits;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Substring]);
    lazy protocol witness table accessor for type [Substring] and conformance [A]();
    lazy protocol witness table accessor for type Substring and conformance Substring();
    uint64_t v58 = Sequence<>.joined(separator:)();
    uint64_t v60 = v59;
    swift_release();
    v96.value._uint64_t countAndFlagsBits = v58;
    v96.value._object = v60;
    uint64_t v94 = 0x6C616E6F73726570;
    unint64_t v95 = 0xE800000000000000;
    uint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v93 = v61;
    StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    Swift::String_optional v96 = v82;
    uint64_t v94 = v3;
    unint64_t v95 = 0xE500000000000000;
    LOBYTE(v58) = StringProtocol.contains<A>(_:)();
    swift_bridgeObjectRelease();
    uint64_t v62 = v90;
    uint64_t v33 = v91;
    uint64_t v63 = *(void (**)(char *, void, uint64_t))(v90 + 104);
    uint64_t v64 = (unsigned int *)&enum case for ContactHandle.HandleType.email(_:);
    if ((v58 & 1) == 0) {
      uint64_t v64 = (unsigned int *)&enum case for ContactHandle.HandleType.phone(_:);
    }
    v63(v88, *v64, v91);
    char v65 = (*(uint64_t (**)(uint64_t))(v86 + 344))(v89);
    uint64_t v66 = v84;
    if (v65)
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v67 = type metadata accessor for Logger();
      uint64_t v68 = (void *)OUTLINED_FUNCTION_25_0(v67, (uint64_t)static Logger.siriPhone);
      os_log_type_t v69 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_8_2(v69))
      {
        *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
        OUTLINED_FUNCTION_1_3(&dword_0, v70, v71, "#ContactResolution received AmbiguousHandle. Setting handleType as unknown");
        OUTLINED_FUNCTION_6();
      }

      uint64_t v62 = v90;
      uint64_t v72 = v88;
      (*(void (**)(char *, uint64_t))(v90 + 8))(v88, v33);
      v63(v72, enum case for ContactHandle.HandleType.unknown(_:), v33);
    }
    uint64_t v73 = v83;
    OUTLINED_FUNCTION_12();
    v75(v74);
    ContactHandleQuery.init(type:label:value:)();
    uint64_t v76 = type metadata accessor for ContactHandleQuery();
    __swift_storeEnumTagSinglePayload(v66, 0, 1, v76);
    ContactQuery.handle.setter();
    uint64_t v77 = OUTLINED_FUNCTION_65_7();
    v78(v77);
    uint64_t v34 = v62;
    Swift::Bool v16 = v73;
  }
  OUTLINED_FUNCTION_16_45();
  if ((unint64_t)SiriPhoneContact.getPhoneNumber()().value._object)
  {
    OUTLINED_FUNCTION_3_4();
    (*(void (**)(char *, void, uint64_t))(v34 + 104))(v16, enum case for ContactHandle.HandleType.phone(_:), v33);
    OUTLINED_FUNCTION_73_7();
    uint64_t v79 = type metadata accessor for ContactHandleQuery();
    OUTLINED_FUNCTION_87_5(v79);
  }
  OUTLINED_FUNCTION_16_45();
  if ((unint64_t)SiriPhoneContact.getEmailAddress()().value._object)
  {
    OUTLINED_FUNCTION_3_4();
    (*(void (**)(char *, void, uint64_t))(v34 + 104))(v16, enum case for ContactHandle.HandleType.email(_:), v33);
    OUTLINED_FUNCTION_73_7();
    uint64_t v80 = type metadata accessor for ContactHandleQuery();
    OUTLINED_FUNCTION_87_5(v80);
  }
  OUTLINED_FUNCTION_26_1();
}

Swift::String_optional __swiftcall SiriPhoneContact.getPrefixName()()
{
  OUTLINED_FUNCTION_6_26();
  uint64_t v1 = v0();
  OUTLINED_FUNCTION_11_21(v1, v2, &demangling cache variable for type metadata for PhoneCallPersonName?, v3, v4, v5, v6, v7, v12[0], v12[1], v12[2], v12[3], v12[4], v12[5], v12[6], v12[7], v12[8], v12[9], v12[10],
    v12[11],
    v12[12],
    v12[13],
    v13);
  OUTLINED_FUNCTION_13_13();
  if (v8)
  {
    OUTLINED_FUNCTION_14_15();
  }
  else
  {
    swift_bridgeObjectRetain();
    outlined release of PhoneCallPersonName?(v12);
  }
  uint64_t v9 = OUTLINED_FUNCTION_7_0();
  result.value._object = v10;
  result.value._uint64_t countAndFlagsBits = v9;
  return result;
}

Swift::String_optional __swiftcall SiriPhoneContact.getMiddleName(filteredAlternatives:)(Swift::Bool filteredAlternatives)
{
  uint64_t v2 = OUTLINED_FUNCTION_1_41(filteredAlternatives, v1);
  uint64_t v4 = v3(v2);
  OUTLINED_FUNCTION_11_21(v4, v5, &demangling cache variable for type metadata for PhoneCallPersonName?, v6, v7, v8, v9, v10, v15[0], v15[1], v15[2], v15[3], v15[4], v15[5], v15[6], v15[7], v15[8], v15[9], v15[10],
    v15[11],
    v15[12],
    v15[13],
    v16);
  OUTLINED_FUNCTION_13_13();
  if (v11)
  {
    OUTLINED_FUNCTION_14_15();
  }
  else
  {
    swift_bridgeObjectRetain();
    outlined release of PhoneCallPersonName?(v15);
  }
  uint64_t v12 = OUTLINED_FUNCTION_7_0();
  result.value._object = v13;
  result.value._uint64_t countAndFlagsBits = v12;
  return result;
}

Swift::String_optional __swiftcall SiriPhoneContact.getLastName(filteredAlternatives:)(Swift::Bool filteredAlternatives)
{
  uint64_t v2 = OUTLINED_FUNCTION_1_41(filteredAlternatives, v1);
  uint64_t v4 = v3(v2);
  OUTLINED_FUNCTION_11_21(v4, v5, &demangling cache variable for type metadata for PhoneCallPersonName?, v6, v7, v8, v9, v10, v15[0], v15[1], v15[2], v15[3], v15[4], v15[5], v15[6], v15[7], v15[8], v15[9], v15[10],
    v15[11],
    v15[12],
    v15[13],
    v16);
  OUTLINED_FUNCTION_13_13();
  if (v11)
  {
    OUTLINED_FUNCTION_14_15();
  }
  else
  {
    swift_bridgeObjectRetain();
    outlined release of PhoneCallPersonName?(v15);
  }
  uint64_t v12 = OUTLINED_FUNCTION_7_0();
  result.value._object = v13;
  result.value._uint64_t countAndFlagsBits = v12;
  return result;
}

Swift::String_optional __swiftcall SiriPhoneContact.getPostfixName()()
{
  OUTLINED_FUNCTION_6_26();
  uint64_t v1 = v0();
  OUTLINED_FUNCTION_11_21(v1, v2, &demangling cache variable for type metadata for PhoneCallPersonName?, v3, v4, v5, v6, v7, v12[0], v12[1], v12[2], v12[3], v12[4], v12[5], v12[6], v12[7], v12[8], v12[9], v12[10],
    v12[11],
    v12[12],
    v12[13],
    v13);
  OUTLINED_FUNCTION_13_13();
  if (v8)
  {
    OUTLINED_FUNCTION_14_15();
  }
  else
  {
    swift_bridgeObjectRetain();
    outlined release of PhoneCallPersonName?(v12);
  }
  uint64_t v9 = OUTLINED_FUNCTION_7_0();
  result.value._object = v10;
  result.value._uint64_t countAndFlagsBits = v9;
  return result;
}

Swift::String_optional __swiftcall SiriPhoneContact.getNickName()()
{
  OUTLINED_FUNCTION_6_26();
  uint64_t v1 = v0();
  OUTLINED_FUNCTION_11_21(v1, v2, &demangling cache variable for type metadata for PhoneCallPersonName?, v3, v4, v5, v6, v7, v12[0], v12[1], v12[2], v12[3], v12[4], v12[5], v12[6], v12[7], v12[8], v12[9], v12[10],
    v12[11],
    v12[12],
    v12[13],
    v13);
  OUTLINED_FUNCTION_13_13();
  if (v8)
  {
    OUTLINED_FUNCTION_14_15();
  }
  else
  {
    swift_bridgeObjectRetain();
    outlined release of PhoneCallPersonName?(v12);
  }
  uint64_t v9 = OUTLINED_FUNCTION_7_0();
  result.value._object = v10;
  result.value._uint64_t countAndFlagsBits = v9;
  return result;
}

Swift::String_optional __swiftcall SiriPhoneContact.getRelationship()()
{
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 200))();
  result.value._object = v2;
  result.value._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t protocol witness for SiriPhoneContact.relationship.getter in conformance PhoneCallContactIntentNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 376))();
}

uint64_t PhoneCallContactIntentNode.relationship.getter()
{
  return PhoneCallContactIntentNode.organizationName.getter((void (*)(uint64_t, void *))&PersonIntentNodeContaining.relationship.getter);
}

Swift::String_optional __swiftcall SiriPhoneContact.getOrganzationName()()
{
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 128))();
  result.value._object = v2;
  result.value._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t protocol witness for SiriPhoneContact.organizationName.getter in conformance PhoneCallContactIntentNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 328))();
}

uint64_t PhoneCallContactIntentNode.organizationName.getter(void (*a1)(uint64_t, void *))
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonIntentNode?);
  uint64_t v4 = OUTLINED_FUNCTION_11_0(v3);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_12_0();
  PhoneCallContactIntentNode.person.getter();
  uint64_t v5 = type metadata accessor for PersonIntentNode();
  OUTLINED_FUNCTION_28_6(v1, 1, v5);
  if (v6)
  {
    outlined destroy of UUID?(v1, &demangling cache variable for type metadata for PersonIntentNode?);
  }
  else
  {
    a1(v5, &protocol witness table for PersonIntentNode);
    OUTLINED_FUNCTION_10();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v5);
  }
  return OUTLINED_FUNCTION_7_0();
}

uint64_t PhoneCallContactIntentNode.organizationName.getter()
{
  return PhoneCallContactIntentNode.organizationName.getter((void (*)(uint64_t, void *))&PersonIntentNodeContaining.company.getter);
}

Swift::Bool __swiftcall SiriPhoneContact.isMe()()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for SiriPhoneContact.isMe.getter in conformance PhoneCallContactIntentNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 280))() & 1;
}

void PhoneCallContactIntentNode.isMe.getter()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v2 = type metadata accessor for PersonOntologyNode.PersonSelfReference();
  OUTLINED_FUNCTION_1();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_3_1();
  uint64_t v31 = v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PersonOntologyNode.PersonSelfReference?, PersonOntologyNode.PersonSelfReference?));
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_12_0();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonIntentNode?);
  uint64_t v10 = OUTLINED_FUNCTION_11_0(v9);
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_35_7();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonOntologyNode.PersonSelfReference?);
  uint64_t v12 = OUTLINED_FUNCTION_11_0(v11);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v30 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v30 - v19;
  PhoneCallContactIntentNode.person.getter();
  uint64_t v21 = type metadata accessor for PersonIntentNode();
  OUTLINED_FUNCTION_28_6(v1, 1, v21);
  if (v26)
  {
    outlined destroy of UUID?(v1, &demangling cache variable for type metadata for PersonIntentNode?);
    __swift_storeEnumTagSinglePayload((uint64_t)v20, 1, 1, v2);
  }
  else
  {
    PersonIntentNodeContaining.selfReference.getter();
    OUTLINED_FUNCTION_10();
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v1, v21);
  }
  uint64_t v23 = v4;
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v18, enum case for PersonOntologyNode.PersonSelfReference.me(_:), v2);
  __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v2);
  uint64_t v24 = v0 + *(int *)(v7 + 48);
  outlined init with copy of PersonOntologyNode.PersonSelfReference?((uint64_t)v20, v0, &demangling cache variable for type metadata for PersonOntologyNode.PersonSelfReference?);
  outlined init with copy of PersonOntologyNode.PersonSelfReference?((uint64_t)v18, v24, &demangling cache variable for type metadata for PersonOntologyNode.PersonSelfReference?);
  OUTLINED_FUNCTION_28_6(v0, 1, v2);
  if (v26)
  {
    outlined destroy of UUID?((uint64_t)v18, &demangling cache variable for type metadata for PersonOntologyNode.PersonSelfReference?);
    outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for PersonOntologyNode.PersonSelfReference?);
    OUTLINED_FUNCTION_28_6(v24, 1, v2);
    if (v26) {
      uint64_t v25 = &demangling cache variable for type metadata for PersonOntologyNode.PersonSelfReference?;
    }
    else {
      uint64_t v25 = &demangling cache variable for type metadata for (PersonOntologyNode.PersonSelfReference?, PersonOntologyNode.PersonSelfReference?);
    }
  }
  else
  {
    outlined init with copy of PersonOntologyNode.PersonSelfReference?(v0, (uint64_t)v15, &demangling cache variable for type metadata for PersonOntologyNode.PersonSelfReference?);
    OUTLINED_FUNCTION_28_6(v24, 1, v2);
    if (v26)
    {
      outlined destroy of UUID?((uint64_t)v18, &demangling cache variable for type metadata for PersonOntologyNode.PersonSelfReference?);
      outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for PersonOntologyNode.PersonSelfReference?);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v15, v2);
      uint64_t v25 = &demangling cache variable for type metadata for (PersonOntologyNode.PersonSelfReference?, PersonOntologyNode.PersonSelfReference?);
    }
    else
    {
      char v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
      uint64_t v28 = v31;
      v27(v31, v24, v2);
      lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type PersonOntologyNode.PersonSelfReference and conformance PersonOntologyNode.PersonSelfReference, (void (*)(uint64_t))&type metadata accessor for PersonOntologyNode.PersonSelfReference);
      dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
      v29(v28, v2);
      uint64_t v25 = &demangling cache variable for type metadata for PersonOntologyNode.PersonSelfReference?;
      outlined destroy of UUID?((uint64_t)v18, &demangling cache variable for type metadata for PersonOntologyNode.PersonSelfReference?);
      outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for PersonOntologyNode.PersonSelfReference?);
      v29((uint64_t)v15, v2);
    }
  }
  outlined destroy of UUID?(v0, v25);
  OUTLINED_FUNCTION_26_1();
}

Swift::String_optional __swiftcall SiriPhoneContact.getContactName()()
{
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 56))();
  result.value._object = v2;
  result.value._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t protocol witness for SiriPhoneContact.contactName.getter in conformance PhoneCallContactIntentNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 256))();
}

Swift::String_optional __swiftcall SiriPhoneContact.getHandleType()()
{
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 224))();
  result.value._object = v2;
  result.value._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t protocol witness for SiriPhoneContact.handleType.getter in conformance PhoneCallContactIntentNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 400))();
}

uint64_t PhoneCallContactIntentNode.handleType.getter()
{
  return PhoneCallContactIntentNode.contactId.getter(&one-time initialization token for contactTypeNode);
}

uint64_t protocol witness for SiriPhoneContact.telephoneNumber.getter in conformance PhoneCallContactIntentNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 352))();
}

uint64_t PhoneCallContactIntentNode.telephoneNumber.getter()
{
  return PhoneCallContactIntentNode.contactId.getter(&one-time initialization token for phoneNumberNode);
}

Swift::String_optional __swiftcall SiriPhoneContact.getEmailAddress()()
{
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 176))();
  result.value._object = v2;
  result.value._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t protocol witness for SiriPhoneContact.emailAddress.getter in conformance PhoneCallContactIntentNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 232))();
}

uint64_t PhoneCallContactIntentNode.emailAddress.getter()
{
  return PhoneCallContactIntentNode.contactId.getter(&one-time initialization token for emailAddressNode);
}

uint64_t OUTLINED_FUNCTION_196()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_196_0()
{
  return swift_allocObject();
}

void OUTLINED_FUNCTION_196_1()
{
  *(void *)(v0 + 56) = 0;
  *(void *)(v0 + 64) = 0;
}

uint64_t OUTLINED_FUNCTION_178()
{
  return outlined init with copy of SiriPhoneContact();
}

uint64_t OUTLINED_FUNCTION_104()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_178_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a1 + 48) = v2;
  return *(unsigned int *)(a2 + 4);
}

uint64_t OUTLINED_FUNCTION_178_2()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t specialized SharedGlobalsProviding.skTransformer.getter@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = (uint64_t)&type metadata for SharedGlobals;
  a1[4] = (uint64_t)&protocol witness table for SharedGlobals;
  uint64_t v3 = swift_allocObject();
  *a1 = v3;

  return outlined init with copy of SharedGlobals(v1, v3 + 16);
}

uint64_t outlined init with copy of SharedGlobals(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for SharedGlobals(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = a2 + 8;
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v5;
  uint64_t v6 = v5;
  uint64_t v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_retain();
  v7(a1 + 8, v4, v6);
  long long v8 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 48, a2 + 48);
  uint64_t v9 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v9;
  uint64_t v11 = *(void *)(a2 + 104);
  uint64_t v10 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = v11;
  *(void *)(a1 + 112) = v10;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t SKTransformer.convertToSKIntent<A>(ofType:input:rchFlowContext:)(uint64_t a1, uint8_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return SKTransformer.convertToSKIntent<A>(input:rchFlowContext:)(a2, a3, a4, a5, a6);
}

uint64_t SKTransformer.convertToSKIntent<A>(input:rchFlowContext:)(uint8_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v50 = a3;
  uint64_t v51 = a4;
  uint64_t v49 = a2;
  uint64_t v9 = type metadata accessor for Input();
  OUTLINED_FUNCTION_0_0();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v16 = v15;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v54 = a1;
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v48 = __swift_project_value_buffer(v20, (uint64_t)static Logger.siriPhone);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  BOOL v23 = os_log_type_enabled(v21, v22);
  uint64_t v52 = a5;
  if (v23)
  {
    uint64_t v24 = OUTLINED_FUNCTION_11_7();
    uint64_t v47 = v9;
    uint64_t v25 = v24;
    uint64_t v26 = OUTLINED_FUNCTION_10_0();
    uint64_t v46 = v14;
    v57[0] = v26;
    *(_DWORD *)uint64_t v25 = 136315394;
    uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000028, 0x8000000000493750, v57);
    OUTLINED_FUNCTION_8_36(v27);
    *(_WORD *)(v25 + 12) = 2080;
    *(void *)&long long v55 = a5;
    swift_getMetatypeMetadata();
    uint64_t v28 = String.init<A>(describing:)();
    uint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, v57);
    OUTLINED_FUNCTION_8_36(v30);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v21, v22, "#SKTransformer %s to %s", (uint8_t *)v25, 0x16u);
    OUTLINED_FUNCTION_11_22();
    uint64_t v14 = v46;
    OUTLINED_FUNCTION_6();
    uint64_t v9 = v47;
    OUTLINED_FUNCTION_6();
  }

  uint64_t v31 = v6[3];
  uint64_t v32 = v6[4];
  __swift_project_boxed_opaque_existential_1(v6, v31);
  uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 72))(v31, v32);
  uint64_t v34 = v54;
  Input.parse.getter();
  (*(void (**)(long long *__return_ptr, char *))(*(void *)v33 + 192))(&v55, v19);
  swift_release();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v53);
  if (v56)
  {
    outlined init with take of AppSelectionSignalComponent(&v55, (uint64_t)v57);
    uint64_t v35 = SKTransformer.convertToSKIntent<A>(phoneCallNLIntent:rchFlowContext:)((uint64_t)v57, v49, v50, v51, v52);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
  }
  else
  {
    outlined destroy of PhoneCallNLIntent?((uint64_t)&v55);
    (*(void (**)(char *, uint8_t *, uint64_t))(v11 + 16))(v14, v34, v9);
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      Swift::String_optional v38 = (uint8_t *)swift_slowAlloc();
      v57[0] = swift_slowAlloc();
      *(_DWORD *)Swift::String_optional v38 = 136315138;
      uint64_t v54 = v38 + 4;
      Input.parse.getter();
      uint64_t v39 = String.init(describing:)((uint64_t)v19);
      *(void *)&long long v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v41 = OUTLINED_FUNCTION_15_18();
      v42(v41);
      _os_log_impl(&dword_0, v36, v37, "#SKTransformer Could not transform Input to PhoneCallNLIntent: %s. Returning nil.", v38, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {
      uint64_t v43 = OUTLINED_FUNCTION_15_18();
      v44(v43);
    }

    return 0;
  }
  return v35;
}

uint64_t SKTransformer.convertToSKIntent<A>(phoneCallNLIntent:rchFlowContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for PhoneCallNLv3Intent(0);
  OUTLINED_FUNCTION_10();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_3_1();
  uint64_t v43 = v7;
  static Signpost.begin(_:)();
  uint64_t v9 = v8;
  uint64_t v45 = a5;
  id v10 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  id v11 = [v10 _className];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_4_36();
  static Signpost.begin(_:string1:)();
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.siriPhone);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = OUTLINED_FUNCTION_11_7();
    v46[0] = OUTLINED_FUNCTION_10_0();
    *(_DWORD *)uint64_t v17 = 136315394;
    uint64_t v18 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000034, 0x8000000000493710, v46);
    OUTLINED_FUNCTION_10_21(v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 12) = 2080;
    uint64_t v47 = v45;
    swift_getMetatypeMetadata();
    uint64_t v19 = String.init<A>(describing:)();
    uint64_t v13 = v9;
    uint64_t v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v46);
    OUTLINED_FUNCTION_10_21(v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v15, v16, "#SKTransformer %s to %s", (uint8_t *)v17, 0x16u);
    OUTLINED_FUNCTION_11_22();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }

  outlined init with copy of SharedGlobalsProviding(a1, (uint64_t)&v47);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
  if (!swift_dynamicCast())
  {
    if (swift_dynamicCast())
    {
      uint64_t v27 = (uint64_t *)OUTLINED_FUNCTION_1_42();
      uint64_t v31 = SKTransformer.nlv4Conversion<A>(phoneCallNLIntent:rchFlowContext:)(v27, v28, v29, v30);
      if (v13)
      {
        outlined destroy of PhoneCallNLv4Intent((uint64_t)v46);
        goto LABEL_11;
      }
      uint64_t v41 = v31;
      outlined destroy of PhoneCallNLv4Intent((uint64_t)v46);
    }
    else
    {
      uint64_t v41 = 0;
    }
LABEL_18:
    OUTLINED_FUNCTION_12_16();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v47);
    goto LABEL_19;
  }
  uint64_t v22 = OUTLINED_FUNCTION_1_42();
  uint64_t v26 = SKTransformer.nlv3Conversion<A>(phoneCallNLIntent:rchFlowContext:)(v22, v23, v24, v25);
  if (!v13)
  {
    uint64_t v41 = v26;
    outlined destroy of PhoneCallNLv3Intent(v43);
    goto LABEL_18;
  }
  outlined destroy of PhoneCallNLv3Intent(v43);
LABEL_11:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v47);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = OUTLINED_FUNCTION_11_7();
    v46[0] = OUTLINED_FUNCTION_10_0();
    *(_DWORD *)uint64_t v34 = 136315394;
    uint64_t v35 = _typeName(_:qualified:)();
    uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v34 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v37 = Error.localizedDescription.getter();
    uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    OUTLINED_FUNCTION_16_24(&dword_0, v39, v40, "#SKTransformer Error converting PhoneCallNLIntent to %s: %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v41 = 0;
  OUTLINED_FUNCTION_12_16();
LABEL_19:
  Signpost.OpenSignpost.end()();
  Signpost.OpenSignpost.end()();
  swift_release();
  swift_release();
  return v41;
}

void static Signpost.begin(_:string1:)()
{
  OUTLINED_FUNCTION_24_0();
  unint64_t v3 = v2;
  uint64_t v46 = v4;
  uint64_t v47 = v5;
  unint64_t v7 = v6;
  int v54 = v8;
  uint64_t v52 = v9;
  id v11 = v10;
  uint64_t v12 = type metadata accessor for OSSignpostID();
  OUTLINED_FUNCTION_0_0();
  uint64_t v53 = v13;
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_12_25();
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v48 = (char *)&v40 - v17;
  __chkstk_darwin(v16);
  uint64_t v18 = OUTLINED_FUNCTION_21_23();
  OUTLINED_FUNCTION_0_0();
  uint64_t v20 = v19;
  __chkstk_darwin(v21);
  OUTLINED_FUNCTION_4();
  uint64_t v24 = v23 - v22;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v25 = __swift_project_value_buffer(v18, (uint64_t)static OSSignposter.siriPhone);
  uint64_t v49 = v20;
  uint64_t v50 = v18;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v24, v25, v18);
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v26 = OSSignposter.logHandle.getter();
  int v27 = static os_signpost_type_t.begin.getter();
  char v28 = OS_os_log.signpostsEnabled.getter();
  uint64_t v51 = v1;
  if ((v28 & 1) == 0)
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    uint64_t v29 = v12;
    uint64_t v30 = v53;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 16))(v51, v0, v12);
LABEL_13:
    type metadata accessor for OSSignpostIntervalState();
    swift_allocObject();
    OUTLINED_FUNCTION_14_24();
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v0, v29);
    OUTLINED_FUNCTION_11();
    v39();
    OUTLINED_FUNCTION_22_21();
    OUTLINED_FUNCTION_26_1();
    return;
  }
  uint64_t v44 = v24;
  uint64_t v45 = v11;
  int v43 = v27;
  if (v54)
  {
    if ((unint64_t)v11 >> 32)
    {
      __break(1u);
    }
    else
    {
      if (v11 >> 11 == 27)
      {
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
      if (v11 >> 16 <= 0x10)
      {
        uint64_t v40 = (const char *)&v57;
        goto LABEL_12;
      }
    }
    __break(1u);
    goto LABEL_16;
  }
  if (v11)
  {
    uint64_t v40 = v11;
LABEL_12:
    uint64_t v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 16);
    uint64_t v31 = v48;
    OUTLINED_FUNCTION_12();
    v32();
    uint64_t v33 = OUTLINED_FUNCTION_14_0();
    uint64_t v41 = swift_slowAlloc();
    uint64_t v56 = v41;
    *(_DWORD *)uint64_t v33 = 136315650;
    uint64_t v29 = v12;
    swift_bridgeObjectRetain();
    uint64_t v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v7, &v56);
    OUTLINED_FUNCTION_8_50();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v33 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v3, &v56);
    OUTLINED_FUNCTION_9_40(v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v33 + 22) = 2080;
    uint64_t v35 = StaticString.description.getter();
    uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &v56);
    OUTLINED_FUNCTION_9_40(v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_signpost_id_t v38 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_0, v26, (os_signpost_type_t)v43, v38, v40, "%s=%{public, signpost.telemetry:string1}s%s", (uint8_t *)v33, 0x20u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();

    uint64_t v30 = v53;
    (*(void (**)(char *, uint64_t))(v53 + 8))(v31, v12);
    v42(v51, v0, v12);
    goto LABEL_13;
  }
LABEL_17:
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  __break(1u);
}

uint64_t SKTransformer.nlv3Conversion<A>(phoneCallNLIntent:rchFlowContext:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  void (*v23)(long long *__return_ptr, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void (*v31)(long long *__return_ptr, uint64_t);
  uint64_t v32;
  uint64_t v33;
  id v34;
  char *v35;
  void (*v36)(uint64_t);
  void *v37;
  void *v38;
  id v39;
  id v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t result;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  char *v50;
  uint64_t v51;
  void (*v52)(uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  id v63;
  id v64;
  id v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(long long *__return_ptr, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  long long v98[3];
  uint64_t v99;

  Swift::String_optional v96 = a3;
  uint64_t v91 = a4;
  uint64_t v97 = a2;
  uint64_t v94 = a1;
  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INSearchCallHistoryIntent>);
  uint64_t v78 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  uint64_t v76 = (char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INHangUpCallIntent>);
  uint64_t v80 = *(void *)(v81 - 8);
  __chkstk_darwin(v81);
  uint64_t v79 = (char *)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String_optional v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INIdentifyIncomingCallerIntent>);
  uint64_t v84 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  unint64_t v83 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INJoinCallIntent>);
  unint64_t v87 = *(void *)(v85 - 8);
  __chkstk_darwin(v85);
  uint64_t v86 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INAnswerCallIntent>);
  uint64_t v89 = *(void *)(v8 - 8);
  uint64_t v90 = v8;
  __chkstk_darwin(v8);
  uint64_t v88 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INStartVideoCallIntent>);
  uint64_t v92 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INStartAudioCallIntent>);
  uint64_t v93 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INStartCallIntent>);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v74 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INStartCallIntent);
  if (!swift_dynamicCastMetatype())
  {
    id v75 = v12;
    uint64_t v25 = v10;
    uint64_t v26 = v95;
    int v27 = v96;
    char v28 = v97;
    type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for INStartAudioCallIntent);
    if (swift_dynamicCastMetatype())
    {
      outlined init with copy of SharedGlobalsProviding(v26, (uint64_t)v98);
      uint64_t v29 = swift_allocObject();
      *(void *)(v29 + 16) = v28;
      *(void *)(v29 + 24) = v27;
      outlined init with take of AppSelectionSignalComponent(v98, v29 + 32);
      uint64_t v30 = v27;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
      Transformer.init(transform:)();
      uint64_t v31 = (void (*)(long long *__return_ptr, uint64_t))Transformer.transform.getter();
      (*(void (**)(char *, uint64_t))(v93 + 8))(v15, v13);
      uint64_t v32 = v99;
      v31(v98, v94);
      goto LABEL_12;
    }
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INStartVideoCallIntent);
    if (swift_dynamicCastMetatype())
    {
      outlined init with copy of SharedGlobalsProviding(v26, (uint64_t)v98);
      uint64_t v33 = swift_allocObject();
      *(void *)(v33 + 16) = v28;
      *(void *)(v33 + 24) = v27;
      outlined init with take of AppSelectionSignalComponent(v98, v33 + 32);
      uint64_t v34 = v27;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
      uint64_t v35 = v75;
      Transformer.init(transform:)();
      unint64_t v36 = (void (*)(uint64_t))Transformer.transform.getter();
      (*(void (**)(char *, uint64_t))(v92 + 8))(v35, v25);
    }
    else
    {
      type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for INAnswerCallIntent);
      if (!swift_dynamicCastMetatype())
      {
        type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INJoinCallIntent);
        uint64_t v45 = swift_dynamicCastMetatype();
        uint64_t v46 = v99;
        uint64_t v47 = v28;
        if (v45)
        {
          outlined init with copy of SharedGlobalsProviding(v26, (uint64_t)v98);
          uint64_t v48 = swift_allocObject();
          *(void *)(v48 + 16) = v28;
          *(void *)(v48 + 24) = v27;
          outlined init with take of AppSelectionSignalComponent(v98, v48 + 32);
          uint64_t v49 = v27;
          swift_retain();
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
          uint64_t v50 = v86;
          Transformer.init(transform:)();
          uint64_t v51 = v85;
          uint64_t v52 = (void (*)(uint64_t))Transformer.transform.getter();
          (*(void (**)(char *, uint64_t))(v87 + 8))(v50, v51);
          uint64_t v32 = v46;
          v52(v94);
LABEL_12:
          if (!v32) {
            goto LABEL_26;
          }
          return swift_release();
        }
        type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for INIdentifyIncomingCallerIntent);
        uint64_t v53 = swift_dynamicCastMetatype();
        int v54 = v94;
        uint64_t v55 = v26;
        if (v53)
        {
          outlined init with copy of SharedGlobalsProviding(v26, (uint64_t)v98);
          uint64_t v56 = swift_allocObject();
          *(void *)(v56 + 16) = v47;
          *(void *)(v56 + 24) = v27;
          outlined init with take of AppSelectionSignalComponent(v98, v56 + 32);
          uint64_t v57 = v27;
          swift_retain();
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
          uint64_t v58 = v83;
          Transformer.init(transform:)();
          uint64_t v59 = v82;
          unint64_t v36 = (void (*)(uint64_t))Transformer.transform.getter();
          uint64_t v60 = v84;
        }
        else
        {
          type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INHangUpCallIntent);
          if (!swift_dynamicCastMetatype())
          {
            type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for INSearchCallHistoryIntent);
            if (!swift_dynamicCastMetatype())
            {
              uint64_t v71 = type metadata accessor for TransformationError();
              lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
              swift_allocError();
              (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v71 - 8) + 104))(v72, enum case for TransformationError.notImplemented(_:), v71);
              return swift_willThrow();
            }
            swift_retain();
            char v65 = v27;
            uint64_t v66 = v76;
            static Transformer<>.transformer(sharedGlobals:app:previousIntent:)(v55, v47, v27);
            uint64_t v67 = v54;
            uint64_t v68 = v77;
            os_log_type_t v69 = (void (*)(long long *__return_ptr, uint64_t))Transformer.transform.getter();
            (*(void (**)(char *, uint64_t))(v78 + 8))(v66, v68);
            uint64_t v70 = v99;
            v69(v98, v67);
            if (!v70)
            {
              swift_release();

              goto LABEL_26;
            }
            swift_release();

            return swift_release();
          }
          outlined init with copy of SharedGlobalsProviding(v26, (uint64_t)v98);
          uint64_t v61 = (void *)swift_allocObject();
          v61[2] = v47;
          v61[3] = v27;
          outlined init with take of AppSelectionSignalComponent(v98, (uint64_t)(v61 + 4));
          uint64_t v62 = v91;
          v61[9] = v91;
          uint64_t v63 = v62;
          swift_retain();
          uint64_t v64 = v27;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
          uint64_t v58 = v79;
          Transformer.init(transform:)();
          uint64_t v59 = v81;
          unint64_t v36 = (void (*)(uint64_t))Transformer.transform.getter();
          uint64_t v60 = v80;
        }
        (*(void (**)(char *, uint64_t))(v60 + 8))(v58, v59);
        int v43 = v54;
LABEL_11:
        uint64_t v32 = v99;
        v36(v43);
        goto LABEL_12;
      }
      outlined init with copy of SharedGlobalsProviding(v26, (uint64_t)v98);
      uint64_t v37 = (void *)swift_allocObject();
      v37[2] = v28;
      void v37[3] = v27;
      outlined init with take of AppSelectionSignalComponent(v98, (uint64_t)(v37 + 4));
      os_signpost_id_t v38 = v91;
      v37[9] = v91;
      uint64_t v39 = v38;
      swift_retain();
      uint64_t v40 = v27;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
      uint64_t v41 = v88;
      Transformer.init(transform:)();
      uint64_t v42 = v90;
      unint64_t v36 = (void (*)(uint64_t))Transformer.transform.getter();
      (*(void (**)(char *, uint64_t))(v89 + 8))(v41, v42);
    }
    int v43 = v94;
    goto LABEL_11;
  }
  outlined init with copy of SharedGlobalsProviding(v95, (uint64_t)v98);
  uint64_t v20 = swift_allocObject();
  uint64_t v21 = v96;
  *(void *)(v20 + 16) = v97;
  *(void *)(v20 + 24) = v21;
  outlined init with take of AppSelectionSignalComponent(v98, v20 + 32);
  id v22 = v21;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
  Transformer.init(transform:)();
  uint64_t v23 = (void (*)(long long *__return_ptr, uint64_t))Transformer.transform.getter();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  uint64_t v24 = v99;
  v23(v98, v94);
  if (v24) {
    return swift_release();
  }
LABEL_26:
  swift_release();
  uint64_t v73 = *(void **)&v98[0];
  Swift::String_optional result = swift_dynamicCastUnknownClass();
  if (!result)
  {

    return 0;
  }
  return result;
}

uint64_t type metadata accessor for CNContactStore(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void INIntent.setMetaData(app:previousIntent:sharedGlobals:)(uint64_t a1, id a2)
{
  unint64_t v3 = v2;
  id v5 = [a2 _metadata];
  if (!v5)
  {
    id v5 = [v3 _metadata];
    if (!v5) {
      id v5 = [objc_allocWithZone((Class)_INPBIntentMetadata) init];
    }
  }
  [v3 _setMetadata:v5];

  uint64_t v6 = outlined bridged method (pb) of @objc INCallGroup.groupName.getter(v3, (SEL *)&selRef_intentId);
  char v8 = specialized Optional<A>.isNilOrEmpty.getter(v6, v7);
  swift_bridgeObjectRelease();
  if (v8)
  {
    id v9 = [v3 _metadata];
    if (v9)
    {
      uint64_t v10 = v9;
      type metadata accessor for SiriEnvironment();
      uint64_t v11 = static SiriEnvironment.forCurrentTask.getter();
      NSString v12 = (NSString)v11;
      if (v11)
      {
        SiriEnvironment.flowTask.getter();
        swift_release();
        dispatch thunk of FlowTaskProvider.id.getter();
        uint64_t v14 = v13;
        uint64_t v11 = swift_release();
        if (v14)
        {
          NSString v12 = String._bridgeToObjectiveC()();
          uint64_t v11 = swift_bridgeObjectRelease();
        }
        else
        {
          NSString v12 = 0;
        }
      }
      OUTLINED_FUNCTION_69_5(v11, "setIntentId:");
    }
  }
  OUTLINED_FUNCTION_37_13();
  uint64_t v15 = OUTLINED_FUNCTION_2_2();
  v16(v15);
  __swift_project_boxed_opaque_existential_1(v40, v40[3]);
  dispatch thunk of AceServiceInvoker.peerInfo()();
  INIntent.setPeerInfoMetadata(from:)(v37);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
  OUTLINED_FUNCTION_37_13();
  uint64_t v17 = OUTLINED_FUNCTION_2_2();
  v18(v17);
  INIntent.setDeviceMetadata(from:)(v40);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
  OUTLINED_FUNCTION_37_13();
  uint64_t v19 = OUTLINED_FUNCTION_2_2();
  v20(v19);
  uint64_t v21 = v38;
  uint64_t v22 = v39;
  __swift_project_boxed_opaque_existential_1(v37, v38);
  if (a1)
  {
    uint64_t v23 = App.appIdentifier.getter();
    uint64_t v25 = v24;
  }
  else
  {
    uint64_t v23 = 0;
    uint64_t v25 = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 16))(v40, v23, v25, v21, v22);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
  INIntent.setAppMetadata(from:cachedApp:)(a1, (uint64_t)v40);
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)static Logger.siriPhone);
  id v27 = v3;
  char v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = swift_slowAlloc();
    v37[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v30 = 136315394;
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002ELL, 0x8000000000496060, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v30 + 12) = 2080;
    id v31 = objc_msgSend(v27, "_metadata", v36);
    if (v31
      && (uint64_t v32 = v31,
          id v33 = [v31 dictionaryRepresentation],
          v32,
          v33))
    {
      static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      Dictionary.init(dictionaryLiteral:)();
    }
    Dictionary._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v34 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v28, v29, "#INIntent %s: %s", (uint8_t *)v30, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
  }
  outlined release of AnnotatedApp?(v40);
}

uint64_t SharedGlobalsProviding.aceServiceInvoker.getter()
{
  return static AceService.current.getter();
}

void DeviceState.isPrimaryDisplayDisabled.getter()
{
}

uint64_t DeviceState.idiom.getter()
{
  if (dispatch thunk of DeviceState.isMac.getter()) {
    return 7;
  }
  OUTLINED_FUNCTION_7_14();
  if (dispatch thunk of DeviceState.isPad.getter()) {
    return 2;
  }
  OUTLINED_FUNCTION_7_14();
  if (dispatch thunk of DeviceState.isWatch.getter()) {
    return 3;
  }
  OUTLINED_FUNCTION_7_14();
  if (dispatch thunk of DeviceState.isHomePod.getter()) {
    return 4;
  }
  OUTLINED_FUNCTION_7_14();
  if (dispatch thunk of DeviceState.isCarPlay.getter()) {
    return 5;
  }
  OUTLINED_FUNCTION_7_14();
  if (dispatch thunk of DeviceState.isAppleTV.getter()) {
    return 6;
  }
  else {
    return 1;
  }
}

uint64_t DeviceState.triggerMethod.getter()
{
  type metadata accessor for InputOrigin();
  OUTLINED_FUNCTION_1();
  __chkstk_darwin(v0);
  OUTLINED_FUNCTION_4();
  dispatch thunk of DeviceState.inputOrigin.getter();
  uint64_t v1 = OUTLINED_FUNCTION_7_14();
  int v3 = v2(v1);
  if (v3 == enum case for InputOrigin.homeButton(_:)) {
    return 10;
  }
  if (v3 == enum case for InputOrigin.remoteButton(_:)) {
    return 20;
  }
  if (v3 == enum case for InputOrigin.voiceTrigger(_:)) {
    return 30;
  }
  OUTLINED_FUNCTION_53_8();
  v5();
  return 0;
}

uint64_t SharedGlobalsProviding.appResolutionProvider.getter@<X0>(uint64_t *a1@<X8>)
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  uint64_t v2 = static AppResolutionProvider.instance;
  a1[3] = type metadata accessor for AppResolutionProvider();
  a1[4] = (uint64_t)&protocol witness table for AppResolutionProvider;
  *a1 = v2;

  return swift_retain();
}

uint64_t type metadata accessor for AppResolutionProvider()
{
  return self;
}

uint64_t protocol witness for AppResolutionProviding.get(appId:) in conformance AppResolutionProvider@<X0>(uint64_t a1@<X8>)
{
  (*(void (**)(void *__return_ptr))(**(void **)v1 + 160))(v4);
  return _s27PhoneCallFlowDelegatePlugin12AnnotatedAppVSgWObTm_0((uint64_t)v4, a1, &demangling cache variable for type metadata for AnnotatedApp?);
}

void AppResolutionProvider.get(appId:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  if (a2)
  {
    unint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 96);
    uint64_t v8 = swift_bridgeObjectRetain();
    uint64_t v9 = v7(v8);
    specialized Dictionary.subscript.getter(a1, a2, v9, v20);
    long long v18 = v20[1];
    long long v19 = v20[0];
    long long v17 = v20[2];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v11 = v17;
    long long v10 = v18;
    long long v12 = v19;
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.siriPhone);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_0, v14, v15, "#AppResolution could not retrieve annotated app with an app identifier nil", v16, 2u);
      swift_slowDealloc();
    }

    long long v12 = 0uLL;
    long long v10 = 0uLL;
    long long v11 = 0uLL;
  }
  *a3 = v12;
  a3[1] = v10;
  a3[2] = v11;
}

uint64_t AppResolutionProvider.annotatedApps.getter()
{
  return swift_bridgeObjectRetain();
}

void type metadata accessor for INCallAudioRoute(uint64_t a1)
{
}

uint64_t closure #1 in closure #1 in static Transformer<>.transformer(sharedGlobals:app:previousIntent:)@<X0>(uint64_t a1@<X8>)
{
  v15[1] = a1;
  v15[0] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallAudioRoute>);
  uint64_t v1 = *(void *)(v15[0] - 8);
  __chkstk_darwin(v15[0]);
  uint64_t v3 = (char *)v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Reducer<PhoneCallNLIntent, INStartVideoCallIntentExport>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  long long v10 = (char *)v15 - v9;
  swift_getKeyPath();
  type metadata accessor for INCallAudioRoute(0);
  -- infix<A, B, C>(_:_:)();
  swift_release();
  swift_getKeyPath();
  --> infix<A, B, C, D>(_:_:)();
  swift_release();
  swift_release();
  (*(void (**)(char *, void))(v1 + 8))(v3, v15[0]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INStartVideoCallIntentExport);
  static ReducerBuilder.buildExpression(_:)();
  long long v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v8, v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Reducer<PhoneCallNLIntent, INStartVideoCallIntentExport>>);
  unint64_t v12 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_467710;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 16))(v13 + v12, v10, v4);
  static ReducerBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(char *, uint64_t))v11)(v10, v4);
}

{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t);
  unint64_t v12;
  uint64_t v13;
  void v15[2];

  v15[1] = a1;
  v15[0] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallAudioRoute>);
  uint64_t v1 = *(void *)(v15[0] - 8);
  __chkstk_darwin(v15[0]);
  uint64_t v3 = (char *)v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Reducer<PhoneCallNLIntent, INStartAudioCallIntentExport>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  long long v10 = (char *)v15 - v9;
  swift_getKeyPath();
  type metadata accessor for INCallAudioRoute(0);
  -- infix<A, B, C>(_:_:)();
  swift_release();
  swift_getKeyPath();
  --> infix<A, B, C, D>(_:_:)();
  swift_release();
  swift_release();
  (*(void (**)(char *, void))(v1 + 8))(v3, v15[0]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INStartAudioCallIntentExport);
  static ReducerBuilder.buildExpression(_:)();
  long long v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v8, v4);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Reducer<PhoneCallNLIntent, INStartAudioCallIntentExport>>);
  unint64_t v12 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_467710;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 16))(v13 + v12, v10, v4);
  static ReducerBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(char *, uint64_t))v11)(v10, v4);
}

{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t);
  unint64_t v12;
  uint64_t v13;
  void v15[2];

  v15[1] = a1;
  v15[0] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallAudioRoute>);
  uint64_t v1 = *(void *)(v15[0] - 8);
  __chkstk_darwin(v15[0]);
  uint64_t v3 = (char *)v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Reducer<PhoneCallNLIntent, INStartCallIntentExport>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  long long v10 = (char *)v15 - v9;
  swift_getKeyPath();
  type metadata accessor for INCallAudioRoute(0);
  -- infix<A, B, C>(_:_:)();
  swift_release();
  swift_getKeyPath();
  --> infix<A, B, C, D>(_:_:)();
  swift_release();
  swift_release();
  (*(void (**)(char *, void))(v1 + 8))(v3, v15[0]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INStartCallIntentExport);
  static ReducerBuilder.buildExpression(_:)();
  long long v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v8, v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Reducer<PhoneCallNLIntent, INStartCallIntentExport>>);
  unint64_t v12 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_467710;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 16))(v13 + v12, v10, v4);
  static ReducerBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(char *, uint64_t))v11)(v10, v4);
}

#error "2BDF4: call analysis failed (funcsize=45)"

void InputOrigin.isVoiceTrigger.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  OUTLINED_FUNCTION_24_0();
  a19 = v21;
  a20 = v22;
  uint64_t v23 = v20;
  uint64_t v24 = type metadata accessor for InputOrigin();
  OUTLINED_FUNCTION_1();
  uint64_t v26 = v25;
  __chkstk_darwin(v27);
  OUTLINED_FUNCTION_46_0();
  uint64_t v30 = v28 - v29;
  __chkstk_darwin(v31);
  id v33 = (char *)&a9 - v32;
  uint64_t v34 = *(void (**)(uint64_t))(v26 + 104);
  uint64_t v35 = OUTLINED_FUNCTION_20_47();
  v34(v35);
  char v36 = specialized == infix<A>(_:_:)(v23, (uint64_t)v33);
  uint64_t v37 = *(void (**)(void))(v26 + 8);
  OUTLINED_FUNCTION_53_8();
  v37();
  OUTLINED_FUNCTION_42_11();
  v38();
  if ((v36 & 1) == 0)
  {
    uint64_t v39 = OUTLINED_FUNCTION_20_47();
    v34(v39);
    specialized == infix<A>(_:_:)(v30, (uint64_t)v33);
    ((void (*)(char *, uint64_t))v37)(v33, v24);
  }
  OUTLINED_FUNCTION_53_8();
  v37();
  OUTLINED_FUNCTION_26_1();
}

uint64_t PhoneCallNLv3Intent.phoneCallAudioRoute.getter()
{
  OUTLINED_FUNCTION_12_63();
  lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent, (void (*)(uint64_t))type metadata accessor for PhoneCallNLv3Intent);
  OUTLINED_FUNCTION_10_73();
  return v1;
}

unsigned char *storeEnumTagSinglePayload for PhoneCallAudioRoute(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void DeviceState.isTriggerlessFollowup.getter()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v20 = v2;
  OUTLINED_FUNCTION_1();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_4();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = type metadata accessor for InputOrigin();
  OUTLINED_FUNCTION_1();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_46_0();
  uint64_t v15 = v13 - v14;
  __chkstk_darwin(v16);
  OUTLINED_FUNCTION_49_11();
  dispatch thunk of DeviceState.inputOrigin.getter();
  long long v19 = *(void (**)(uint64_t, void, uint64_t))(v11 + 104);
  v19(v15, enum case for InputOrigin.clientGenerated(_:), v9);
  char v17 = specialized == infix<A>(_:_:)(v1, v15);
  long long v18 = *(void (**)(void))(v11 + 8);
  OUTLINED_FUNCTION_16_58();
  v18();
  OUTLINED_FUNCTION_16_58();
  v18();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v8, v0, v20);
  if ((v17 & 1) == 0)
  {
    dispatch thunk of DeviceState.inputOrigin.getter();
    v19(v15, enum case for InputOrigin.triggerlessFollowup(_:), v9);
    specialized == infix<A>(_:_:)(v1, v15);
    OUTLINED_FUNCTION_16_58();
    v18();
    ((void (*)(uint64_t, uint64_t))v18)(v1, v9);
  }
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v8, v20);
  OUTLINED_FUNCTION_26_1();
}

uint64_t closure #2 in closure #1 in static Transformer<>.transformer(sharedGlobals:app:previousIntent:)@<X0>(uint64_t a1@<X8>)
{
  v15[1] = a1;
  v15[0] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<[SiriPhoneContact], [INPerson]?>);
  uint64_t v1 = *(void *)(v15[0] - 8);
  __chkstk_darwin(v15[0]);
  uint64_t v3 = (char *)v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Reducer<PhoneCallNLIntent, INStartCallIntentExport>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v15 - v9;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]?);
  -- infix<A, B, C>(_:_:)();
  swift_release();
  swift_getKeyPath();
  --> infix<A, B, C, D>(_:_:)();
  swift_release();
  swift_release();
  (*(void (**)(char *, void))(v1 + 8))(v3, v15[0]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INStartCallIntentExport);
  static ReducerBuilder.buildExpression(_:)();
  uint64_t v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v8, v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Reducer<PhoneCallNLIntent, INStartCallIntentExport>>);
  unint64_t v12 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_467710;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 16))(v13 + v12, v10, v4);
  static ReducerBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(char *, uint64_t))v11)(v10, v4);
}

{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t);
  unint64_t v12;
  uint64_t v13;
  void v15[2];

  v15[1] = a1;
  v15[0] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<[SiriPhoneContact], [INPerson]?>);
  uint64_t v1 = *(void *)(v15[0] - 8);
  __chkstk_darwin(v15[0]);
  uint64_t v3 = (char *)v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Reducer<PhoneCallNLIntent, INStartAudioCallIntentExport>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v15 - v9;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]?);
  -- infix<A, B, C>(_:_:)();
  swift_release();
  swift_getKeyPath();
  --> infix<A, B, C, D>(_:_:)();
  swift_release();
  swift_release();
  (*(void (**)(char *, void))(v1 + 8))(v3, v15[0]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INStartAudioCallIntentExport);
  static ReducerBuilder.buildExpression(_:)();
  uint64_t v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v8, v4);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Reducer<PhoneCallNLIntent, INStartAudioCallIntentExport>>);
  unint64_t v12 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_467710;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 16))(v13 + v12, v10, v4);
  static ReducerBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(char *, uint64_t))v11)(v10, v4);
}

{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t);
  unint64_t v12;
  uint64_t v13;
  void v15[2];

  v15[1] = a1;
  v15[0] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<[SiriPhoneContact], [INPerson]?>);
  uint64_t v1 = *(void *)(v15[0] - 8);
  __chkstk_darwin(v15[0]);
  uint64_t v3 = (char *)v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Reducer<PhoneCallNLIntent, INStartVideoCallIntentExport>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v15 - v9;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]?);
  -- infix<A, B, C>(_:_:)();
  swift_release();
  swift_getKeyPath();
  --> infix<A, B, C, D>(_:_:)();
  swift_release();
  swift_release();
  (*(void (**)(char *, void))(v1 + 8))(v3, v15[0]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INStartVideoCallIntentExport);
  static ReducerBuilder.buildExpression(_:)();
  uint64_t v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v8, v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Reducer<PhoneCallNLIntent, INStartVideoCallIntentExport>>);
  unint64_t v12 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_467710;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 16))(v13 + v12, v10, v4);
  static ReducerBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(char *, uint64_t))v11)(v10, v4);
}

uint64_t key path getter for PhoneCallNLIntent.contacts : PhoneCallNLIntent@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 24))(v3, v4);
  *a2 = result;
  return result;
}

id @nonobjc INPersonHandle.init(value:type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v5 = 0;
  }
  id v6 = [v3 initWithValue:v5 type:a3];

  return v6;
}

Swift::String_optional __swiftcall SiriPhoneContact.getDisplayName()()
{
  uint64_t countAndFlagsBits = (*(uint64_t (**)(void))(v0 + 56))();
  if (object) {
    goto LABEL_4;
  }
  OUTLINED_FUNCTION_25_10();
  Swift::String_optional v3 = SiriPhoneContact.getNickName()();
  object = v3.value._object;
  uint64_t countAndFlagsBits = v3.value._countAndFlagsBits;
  if (v3.value._object
    || (uint64_t v4 = OUTLINED_FUNCTION_25_10(),
        default argument 3 of SAUISayIt.init(message:dialogIdentifier:canUseServerTTS:listenAfterSpeaking:)(v4, v5),
        char v6 = OUTLINED_FUNCTION_18_15(),
        Swift::String_optional v7 = SiriPhoneContact.getFullName(filteredAlternatives:)(v6),
        object = v7.value._object,
        uint64_t countAndFlagsBits = v7.value._countAndFlagsBits,
        v7.value._object))
  {
LABEL_4:
    uint64_t v8 = countAndFlagsBits;
    uint64_t v9 = object;
  }
  else
  {
    uint64_t v12 = OUTLINED_FUNCTION_25_10();
    default argument 3 of SAUISayIt.init(message:dialogIdentifier:canUseServerTTS:listenAfterSpeaking:)(v12, v13);
    char v14 = OUTLINED_FUNCTION_18_15();
    Swift::String_optional v15 = SiriPhoneContact.getFirstName(filteredAlternatives:)(v14);
    uint64_t v8 = v15.value._countAndFlagsBits;
    uint64_t v16 = v15.value._object;
    uint64_t v17 = OUTLINED_FUNCTION_25_10();
    default argument 3 of SAUISayIt.init(message:dialogIdentifier:canUseServerTTS:listenAfterSpeaking:)(v17, v18);
    char v19 = OUTLINED_FUNCTION_18_15();
    Swift::String_optional v20 = SiriPhoneContact.getLastName(filteredAlternatives:)(v19);
    uint64_t v9 = v20.value._object;
    if (v15.value._object && (OUTLINED_FUNCTION_26_11(), v21))
    {
      if (!v20.value._object)
      {
        uint64_t v9 = v15.value._object;
        goto LABEL_5;
      }
    }
    else
    {
      if (!v20.value._object)
      {
        swift_bridgeObjectRelease();
        uint64_t v8 = 0;
        goto LABEL_5;
      }
      unint64_t v22 = ((unint64_t)v20.value._object >> 56) & 0xF;
      if (((uint64_t)v20.value._object & 0x2000000000000000) == 0) {
        unint64_t v22 = v20.value._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      if (!v22)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v8 = 0;
        uint64_t v9 = 0;
        goto LABEL_5;
      }
      if (!v15.value._object)
      {
        uint64_t v8 = 0;
        uint64_t v16 = (void *)0xE000000000000000;
      }
    }
    OUTLINED_FUNCTION_26_11();
    if (v23)
    {
      v24._uint64_t countAndFlagsBits = 32;
      v24._object = (void *)0xE100000000000000;
      String.append(_:)(v24);
      String.append(_:)(v20.value);
      swift_bridgeObjectRelease();
      uint64_t v9 = v16;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v8 = v20.value._countAndFlagsBits;
    }
  }
LABEL_5:
  uint64_t v10 = v8;
  uint64_t v11 = v9;
  result.value._object = v11;
  result.value._uint64_t countAndFlagsBits = v10;
  return result;
}

uint64_t protocol witness for SiriPhoneContact.contactId.getter in conformance PhoneCallContactIntentNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 184))();
}

uint64_t PhoneCallContactIntentNode.contactId.getter(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }
  type metadata accessor for PhoneCallContactIntentNode(0);
  lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type PhoneCallContactIntentNode and conformance PhoneCallContactIntentNode, (void (*)(uint64_t))type metadata accessor for PhoneCallContactIntentNode);
  OUTLINED_FUNCTION_46_27();
  return v2;
}

uint64_t PhoneCallContactIntentNode.contactId.getter()
{
  return PhoneCallContactIntentNode.contactId.getter(&one-time initialization token for phoneCallContactIdNode);
}

id @nonobjc INPerson.init(personHandle:nameComponents:displayName:image:contactIdentifier:customIdentifier:relationship:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v11 = v10;
  uint64_t v17 = type metadata accessor for PersonNameComponents();
  Class isa = 0;
  if (__swift_getEnumTagSinglePayload(a2, 1, v17) != 1)
  {
    Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(a2, v17);
  }
  if (a4)
  {
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v19 = 0;
  }
  if (a7)
  {
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v20 = 0;
  }
  if (a9)
  {
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v21 = 0;
  }
  id v22 = [v11 initWithPersonHandle:a1 nameComponents:isa displayName:v19 image:a5 contactIdentifier:v20 customIdentifier:v21 relationship:a10];

  return v22;
}

void key path getter for INAddCallParticipantIntentExport.participants : INAddCallParticipantIntentExport(uint64_t a1)
{
  uint64_t v2 = (void *)OUTLINED_FUNCTION_23_38(a1);
  id v4 = [v2 *v3];
  if (v4)
  {
    uint64_t v5 = v4;
    OUTLINED_FUNCTION_24_34();
    uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t *v1 = v6;
}

void key path setter for INAddCallParticipantIntentExport.participants : INAddCallParticipantIntentExport(void *a1, void **a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6, SEL *a7)
{
  uint64_t v8 = *a2;
  if (*a1)
  {
    type metadata accessor for CNContactStore(0, a5);
    v9.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    v9.super.Class isa = 0;
  }
  Class isa = v9.super.isa;
  [v8 *a7];
}

void type metadata accessor for INCallDestinationType(uint64_t a1)
{
}

uint64_t closure #3 in closure #1 in static Transformer<>.transformer(sharedGlobals:app:previousIntent:)@<X0>(uint64_t a1@<X8>)
{
  v15[1] = a1;
  v15[0] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallDestinationType>);
  uint64_t v1 = *(void *)(v15[0] - 8);
  __chkstk_darwin(v15[0]);
  Swift::String_optional v3 = (char *)v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Reducer<PhoneCallNLIntent, INStartAudioCallIntentExport>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v15 - v9;
  swift_getKeyPath();
  type metadata accessor for INCallDestinationType(0);
  -- infix<A, B, C>(_:_:)();
  swift_release();
  swift_getKeyPath();
  --> infix<A, B, C, D>(_:_:)();
  swift_release();
  swift_release();
  (*(void (**)(char *, void))(v1 + 8))(v3, v15[0]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INStartAudioCallIntentExport);
  static ReducerBuilder.buildExpression(_:)();
  uint64_t v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v8, v4);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Reducer<PhoneCallNLIntent, INStartAudioCallIntentExport>>);
  unint64_t v12 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_467710;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 16))(v13 + v12, v10, v4);
  static ReducerBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(char *, uint64_t))v11)(v10, v4);
}

{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t);
  unint64_t v12;
  uint64_t v13;
  void v15[2];

  v15[1] = a1;
  v15[0] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallDestinationType>);
  uint64_t v1 = *(void *)(v15[0] - 8);
  __chkstk_darwin(v15[0]);
  Swift::String_optional v3 = (char *)v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Reducer<PhoneCallNLIntent, INStartCallIntentExport>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v15 - v9;
  swift_getKeyPath();
  type metadata accessor for INCallDestinationType(0);
  -- infix<A, B, C>(_:_:)();
  swift_release();
  swift_getKeyPath();
  --> infix<A, B, C, D>(_:_:)();
  swift_release();
  swift_release();
  (*(void (**)(char *, void))(v1 + 8))(v3, v15[0]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INStartCallIntentExport);
  static ReducerBuilder.buildExpression(_:)();
  uint64_t v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v8, v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Reducer<PhoneCallNLIntent, INStartCallIntentExport>>);
  unint64_t v12 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_467710;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 16))(v13 + v12, v10, v4);
  static ReducerBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(char *, uint64_t))v11)(v10, v4);
}

void partial apply for closure #1 in static Transformer<>.transformer(sharedGlobals:previousIntent:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
}

Swift::Bool __swiftcall PhoneCallNLIntent.hasVoiceMail()()
{
  OUTLINED_FUNCTION_14_11();
  __chkstk_darwin(v0);
  OUTLINED_FUNCTION_41_9();
  int v2 = v1();
  uint64_t v3 = OUTLINED_FUNCTION_4_49();
  v4(v3);
  if (v2 == 6)
  {
    uint64_t v5 = OUTLINED_FUNCTION_92_3();
    v6(v5);
    OUTLINED_FUNCTION_194();
    if (v7) {
      Swift::Bool v8 = 0;
    }
    else {
      Swift::Bool v8 = 1;
    }
  }
  else
  {
    Swift::Bool v8 = 1;
  }
  OUTLINED_FUNCTION_3_23();
  v9();
  return v8;
}

uint64_t PhoneCallNLv3Intent.voiceMailVerb.getter()
{
  return PhoneCallNLv3Intent.phoneCallConfirmation.getter();
}

unsigned char *storeEnumTagSinglePayload for VoiceMail.VoiceMailVerb(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *Swift::String_optional result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *Swift::String_optional result = a2 + 5;
        break;
    }
  }
  return result;
}

unint64_t OUTLINED_FUNCTION_161()
{
  unint64_t v3 = v2 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
  if (v0 == 1) {
    return v1;
  }
  else {
    return v3;
  }
}

uint64_t OUTLINED_FUNCTION_208@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 136) = (a1 - 32) | 0x8000000000000000;
  return 0;
}

uint64_t OUTLINED_FUNCTION_58()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_161_0(uint64_t result, char a2, uint64_t a3, char a4, uint64_t a5)
{
  *(void *)(v6 + 32) = a5;
  *(void *)(v6 + 40) = v5;
  *(unsigned char *)(v6 + 73) = a4;
  *(unsigned char *)(v6 + 72) = a2;
  *(void *)(v6 + 16) = result;
  *(void *)(v6 + 24) = a3;
  return result;
}

Swift::Bool __swiftcall PhoneCallNLIntent.isRedial()()
{
  OUTLINED_FUNCTION_28();
  OUTLINED_FUNCTION_14_11();
  __chkstk_darwin(v0);
  OUTLINED_FUNCTION_16_30();
  v1();
  OUTLINED_FUNCTION_24_23();
  if (!v5)
  {
    uint64_t v3 = PhoneCallVerb.rawValue.getter(v2);
    BOOL v5 = v3 == 0x6C6169646572 && v4 == 0xE600000000000000;
    if (v5)
    {
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_36_0();
      Swift::Bool v6 = PhoneCallNLIntent.hasAnyContactReference()();
      uint64_t v7 = OUTLINED_FUNCTION_4_49();
      v8(v7);
      if (v6)
      {
        OUTLINED_FUNCTION_14_23();
        v9();
      }
      else
      {
        OUTLINED_FUNCTION_198();
        OUTLINED_FUNCTION_38_11();
        uint64_t v11 = *(void *)(v10() + 16);
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_14_23();
        v12();
        if (v11)
        {
          if (one-time initialization token for siriPhone != -1) {
            swift_once();
          }
          uint64_t v13 = type metadata accessor for Logger();
          __swift_project_value_buffer(v13, (uint64_t)static Logger.siriPhone);
          char v14 = Logger.logObject.getter();
          os_log_type_t v15 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v14, v15))
          {
            *(_WORD *)swift_slowAlloc() = 0;
            OUTLINED_FUNCTION_1_3(&dword_0, v16, v17, "#PhoneCallNLIntent Not a redial request as utterance contains either number or contact name");
            OUTLINED_FUNCTION_6();
          }
        }
      }
    }
    else
    {
      OUTLINED_FUNCTION_84_4();
      OUTLINED_FUNCTION_211_0();
    }
  }
  OUTLINED_FUNCTION_24();
  return result;
}

uint64_t OUTLINED_FUNCTION_198_1(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

Swift::Bool __swiftcall PhoneCallNLIntent.isCallBack()()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v3 = v1;
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_14_11();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  uint64_t v61 = (char *)v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_18_0();
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (void (*)(uint64_t))((char *)v54 - v12);
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_49_11();
  uint64_t v60 = *(void *)(v14 + 104);
  OUTLINED_FUNCTION_225_0();
  v15();
  OUTLINED_FUNCTION_24_23();
  if (v18)
  {
    char v17 = 0;
  }
  else
  {
    OUTLINED_FUNCTION_78_3(v16);
    if (v18 && v19 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease();
      char v17 = 1;
    }
    else
    {
      char v17 = OUTLINED_FUNCTION_30_15();
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v21 = (uint64_t)v7 + 16;
  uint64_t v58 = (void (*)(void))*((void *)v7 + 2);
  ((void (*)(uint64_t, uint64_t))v58)(v2, v3);
  if (v17)
  {
    uint64_t v59 = v7;
    uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 40))(v0, v5);
    if (v22) {
      uint64_t v23 = (void *)v22;
    }
    else {
      uint64_t v23 = _swiftEmptyArrayStorage;
    }
    uint64_t v24 = v23[2];
    if (v24)
    {
      v54[1] = v21;
      uint64_t v55 = v3;
      swift_bridgeObjectRetain();
      uint64_t v25 = 0;
      uint64_t v26 = v24 - 1;
      uint64_t v56 = "onHold";
      unint64_t v57 = 0xE900000000000065;
      while (2)
      {
        switch(*((unsigned char *)v23 + v25 + 32))
        {
          case 1:
            OUTLINED_FUNCTION_52_9();
            goto LABEL_31;
          case 2:
            OUTLINED_FUNCTION_25_18();
            goto LABEL_31;
          case 3:
            OUTLINED_FUNCTION_10_30();
            goto LABEL_31;
          case 4:
            OUTLINED_FUNCTION_15_23();
            goto LABEL_31;
          case 5:
            OUTLINED_FUNCTION_37_12();
            goto LABEL_31;
          case 6:
            swift_bridgeObjectRelease();
            char v27 = 1;
            goto LABEL_34;
          case 7:
            OUTLINED_FUNCTION_13_23();
            goto LABEL_31;
          case 8:
            OUTLINED_FUNCTION_18_21();
            goto LABEL_31;
          case 9:
            OUTLINED_FUNCTION_11_3();
            goto LABEL_31;
          case 0xA:
            OUTLINED_FUNCTION_22_20();
            goto LABEL_31;
          case 0xB:
            OUTLINED_FUNCTION_119();
            goto LABEL_31;
          case 0xC:
            OUTLINED_FUNCTION_17_19();
            goto LABEL_31;
          case 0xD:
            OUTLINED_FUNCTION_51_7();
            goto LABEL_31;
          default:
LABEL_31:
            char v27 = OUTLINED_FUNCTION_35_16();
            swift_bridgeObjectRelease();
            if ((v27 & 1) == 0)
            {
              BOOL v18 = v26 == v25++;
              if (!v18) {
                continue;
              }
            }
LABEL_34:
            swift_bridgeObjectRelease();
            uint64_t v7 = v59;
            uint64_t v3 = v55;
            break;
        }
        break;
      }
    }
    else
    {
      char v27 = 0;
      uint64_t v7 = v59;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v27 = 0;
  }
  uint64_t v29 = (void (*)())*((void *)v7 + 1);
  uint64_t v28 = (void (*)())((char *)v7 + 8);
  uint64_t v59 = v29;
  v29();
  OUTLINED_FUNCTION_36_0();
  OUTLINED_FUNCTION_225_0();
  v30();
  OUTLINED_FUNCTION_24_23();
  if (v18)
  {
    uint64_t v32 = (uint64_t)v61;
    if ((v27 & 1) == 0) {
      goto LABEL_63;
    }
  }
  else
  {
    uint64_t v13 = (void (*)(uint64_t))v5;
    uint64_t v32 = 0xE90000000000006BLL;
    uint64_t v3 = 0x636162206C6C6163;
    uint64_t v33 = PhoneCallVerb.rawValue.getter(v31);
    if (v33 == 0x636162206C6C6163 && v34 == 0xE90000000000006BLL)
    {
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_171();
    }
    else
    {
      uint64_t v32 = OUTLINED_FUNCTION_81_4();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_171();
      if ((v36 & 1) == 0) {
        goto LABEL_63;
      }
    }
  }
  Swift::Bool v37 = PhoneCallNLIntent.hasAnyContactReference()();
  uint64_t v38 = v58;
  ((void (*)(void (*)(uint64_t), uint64_t))v58)(v13, v3);
  if (v37)
  {
    uint64_t v39 = OUTLINED_FUNCTION_153_1();
    v13(v39);
  }
  else
  {
    OUTLINED_FUNCTION_198();
    OUTLINED_FUNCTION_38_11();
    uint64_t v41 = *(void *)(v40() + 16);
    swift_bridgeObjectRelease();
    uint64_t v42 = OUTLINED_FUNCTION_153_1();
    v13(v42);
    if (v41)
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v43 = type metadata accessor for Logger();
      __swift_project_value_buffer(v43, (uint64_t)static Logger.siriPhone);
      uint64_t v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v46 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v46 = 0;
        _os_log_impl(&dword_0, v44, v45, "#PhoneCallNLIntent Not a call back request as utterance contains either number or contact name", v46, 2u);
        OUTLINED_FUNCTION_6();
      }
      goto LABEL_62;
    }
  }
  uint64_t v59 = v28;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v47 = type metadata accessor for Logger();
  __swift_project_value_buffer(v47, (uint64_t)static Logger.siriPhone);
  OUTLINED_FUNCTION_8_48();
  v38();
  uint64_t v44 = Logger.logObject.getter();
  os_log_type_t v48 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v44, v48))
  {
    uint64_t v49 = v32;
    uint64_t v50 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v50 = 67109120;
    OUTLINED_FUNCTION_198();
    OUTLINED_FUNCTION_38_11();
    uint64_t v52 = *(void *)(v51() + 16);
    swift_bridgeObjectRelease();
    v13(v49);
    BOOL v62 = v52 == 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v44, v48, "PhoneCallNLIntent contacts empty: %{BOOL}d", v50, 8u);
    OUTLINED_FUNCTION_6();
  }
  else
  {
    v13(v32);
  }
LABEL_62:

LABEL_63:
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_26_1();
  return result;
}

uint64_t PhoneCallNLv3Intent.phoneCallAttributes.getter()
{
  uint64_t v2 = *(void *)(v1 + *(int *)(OUTLINED_FUNCTION_12_63() + 28));
  uint64_t v3 = lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent, (void (*)(uint64_t))type metadata accessor for PhoneCallNLv3Intent);

  return IntentNodeTraversable.values<A>(forNode:)(v2, v0, v3);
}

void type metadata accessor for INPreferredCallProvider(uint64_t a1)
{
}

uint64_t closure #4 in closure #1 in static Transformer<>.transformer(sharedGlobals:app:previousIntent:)@<X0>(uint64_t a1@<X8>)
{
  v15[1] = a1;
  v15[0] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INPreferredCallProvider>);
  uint64_t v1 = *(void *)(v15[0] - 8);
  __chkstk_darwin(v15[0]);
  uint64_t v3 = (char *)v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Reducer<PhoneCallNLIntent, INStartAudioCallIntentExport>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v15 - v9;
  swift_getKeyPath();
  type metadata accessor for INPreferredCallProvider(0);
  -- infix<A, B, C>(_:_:)();
  swift_release();
  swift_getKeyPath();
  --> infix<A, B, C, D>(_:_:)();
  swift_release();
  swift_release();
  (*(void (**)(char *, void))(v1 + 8))(v3, v15[0]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INStartAudioCallIntentExport);
  static ReducerBuilder.buildExpression(_:)();
  uint64_t v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v8, v4);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Reducer<PhoneCallNLIntent, INStartAudioCallIntentExport>>);
  unint64_t v12 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_467710;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 16))(v13 + v12, v10, v4);
  static ReducerBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(char *, uint64_t))v11)(v10, v4);
}

{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t);
  unint64_t v12;
  uint64_t v13;
  void v15[2];

  v15[1] = a1;
  v15[0] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INPreferredCallProvider>);
  uint64_t v1 = *(void *)(v15[0] - 8);
  __chkstk_darwin(v15[0]);
  uint64_t v3 = (char *)v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Reducer<PhoneCallNLIntent, INStartCallIntentExport>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v15 - v9;
  swift_getKeyPath();
  type metadata accessor for INPreferredCallProvider(0);
  -- infix<A, B, C>(_:_:)();
  swift_release();
  swift_getKeyPath();
  --> infix<A, B, C, D>(_:_:)();
  swift_release();
  swift_release();
  (*(void (**)(char *, void))(v1 + 8))(v3, v15[0]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INStartCallIntentExport);
  static ReducerBuilder.buildExpression(_:)();
  uint64_t v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v8, v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Reducer<PhoneCallNLIntent, INStartCallIntentExport>>);
  unint64_t v12 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_467710;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 16))(v13 + v12, v10, v4);
  static ReducerBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(char *, uint64_t))v11)(v10, v4);
}

uint64_t closure #1 in static Transformer<>.transformer(sharedGlobals:app:previousIntent:)partial apply()
{
  return _s13SiriUtilities11TransformerV27PhoneCallFlowDelegatePluginAD0dE8NLIntent_pRszSo011INPreferredE8ProviderVRs_rlE11transformer13sharedGlobals3app14previousIntentACyAdE_pAGGAD06SharedN9Providing_p_0A13AppResolution0T0CSgSo8INIntentCSgtFZAgdE_pcfU_TA_0();
}

Swift::Bool __swiftcall PhoneCallNLIntent.isRedialOrCallBack()()
{
  Swift::Bool v0 = PhoneCallNLIntent.isRedial()();
  return (v0 | PhoneCallNLIntent.isCallBack()()) & 1;
}

Swift::Bool __swiftcall App.isFaceTime()()
{
  uint64_t v0 = App.appIdentifier.getter();
  if (v1)
  {
    uint64_t v2 = v0;
    uint64_t v3 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_467720;
    *(void *)(inited + 32) = 0xD000000000000012;
    *(void *)(inited + 40) = 0x8000000000492070;
    if (one-time initialization token for macFaceTimeBundleId != -1) {
      swift_once();
    }
    uint64_t v5 = unk_5D4E10;
    *(void *)(inited + 48) = static PhoneCallAppNameConstants.macFaceTimeBundleId;
    *(void *)(inited + 56) = v5;
    swift_bridgeObjectRetain();
    specialized Set.init(_nonEmptyArrayLiteral:)();
    specialized Set.contains(_:)(v2, v3, v6);
    char v8 = v7;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v8 = 0;
  }
  return v8 & 1;
}

uint64_t OUTLINED_FUNCTION_57_1()
{
  return swift_allocObject();
}

BOOL OUTLINED_FUNCTION_14_2(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void OUTLINED_FUNCTION_1_3(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t OUTLINED_FUNCTION_6_2()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_7_5()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_57_2()
{
  return type metadata accessor for SpeakableString();
}

uint64_t OUTLINED_FUNCTION_62_0()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_57_3()
{
  return static CATOption.defaultMode.getter();
}

uint64_t OUTLINED_FUNCTION_57_4()
{
  return *(void *)(v0 + 32);
}

uint64_t OUTLINED_FUNCTION_57_5()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_57_6()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_57_8@<X0>(uint64_t a1@<X8>)
{
  return v1 + *(void *)(a1 + 40);
}

uint64_t OUTLINED_FUNCTION_19_1(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

unint64_t OUTLINED_FUNCTION_40(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

void OUTLINED_FUNCTION_153(uint64_t a1@<X8>)
{
  v2[6] = a1;
  v2[9] = v1;
  v2[10] = v3 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

uint64_t OUTLINED_FUNCTION_57_13()
{
  return 0x676E69676E6972;
}

uint64_t OUTLINED_FUNCTION_57_14(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(v3, v4, a3);
}

uint64_t OUTLINED_FUNCTION_57_15(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return a13;
}

uint64_t OUTLINED_FUNCTION_57_16(uint64_t a1)
{
  uint64_t v3 = *(void **)(v2 - 88);
  v3[3] = a1;
  *uint64_t v3 = v1;
  return v1;
}

uint64_t OUTLINED_FUNCTION_57_18()
{
  return swift_release();
}

Swift::Bool __swiftcall PhoneCallNLIntent.isFirstPartyOrDefaultAppRequest()()
{
  PhoneCallNLIntent.applicationId.getter();
  if (!v0) {
    return 1;
  }
  type metadata accessor for App();
  OUTLINED_FUNCTION_205();
  App.__allocating_init(appIdentifier:)();
  Swift::Bool v1 = App.isFirstParty()();
  swift_release();
  return v1;
}

uint64_t specialized UserDefaultsSetting.wrappedValue.getter(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0 && !AFIsInternalInstall()) {
    return 0;
  }
  if (one-time initialization token for userDefaults != -1) {
    swift_once();
  }
  uint64_t v3 = (void *)static PhoneCallFeatureFlags.userDefaults;
  if (static PhoneCallFeatureFlags.userDefaults)
  {
    NSString v4 = String._bridgeToObjectiveC()();
    id v5 = [v3 valueForKey:v4];

    if (v5)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v7, 0, sizeof(v7));
    }
    outlined init with take of Any?((uint64_t)v7, (uint64_t)v8);
  }
  else
  {
    memset(v8, 0, sizeof(v8));
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  if (swift_dynamicCast()) {
    return *(void *)&v7[0];
  }
  else {
    return 0;
  }
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for INAudioCallTTYType(uint64_t a1)
{
}

uint64_t closure #5 in closure #1 in static Transformer<>.transformer(sharedGlobals:app:previousIntent:)@<X0>(uint64_t a1@<X8>)
{
  v15[1] = a1;
  v15[0] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INAudioCallTTYType>);
  uint64_t v1 = *(void *)(v15[0] - 8);
  __chkstk_darwin(v15[0]);
  uint64_t v3 = (char *)v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Reducer<PhoneCallNLIntent, INStartCallIntentExport>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  char v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v15 - v9;
  swift_getKeyPath();
  type metadata accessor for INAudioCallTTYType(0);
  -- infix<A, B, C>(_:_:)();
  swift_release();
  swift_getKeyPath();
  --> infix<A, B, C, D>(_:_:)();
  swift_release();
  swift_release();
  (*(void (**)(char *, void))(v1 + 8))(v3, v15[0]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INStartCallIntentExport);
  static ReducerBuilder.buildExpression(_:)();
  uint64_t v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v8, v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Reducer<PhoneCallNLIntent, INStartCallIntentExport>>);
  unint64_t v12 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_467710;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 16))(v13 + v12, v10, v4);
  static ReducerBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(char *, uint64_t))v11)(v10, v4);
}

{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t);
  unint64_t v12;
  uint64_t v13;
  void v15[2];

  v15[1] = a1;
  v15[0] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallRecordType>);
  uint64_t v1 = *(void *)(v15[0] - 8);
  __chkstk_darwin(v15[0]);
  uint64_t v3 = (char *)v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Reducer<PhoneCallNLIntent, INStartAudioCallIntentExport>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  char v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v15 - v9;
  swift_getKeyPath();
  type metadata accessor for INCallRecordType(0);
  -- infix<A, B, C>(_:_:)();
  swift_release();
  swift_getKeyPath();
  --> infix<A, B, C, D>(_:_:)();
  swift_release();
  swift_release();
  (*(void (**)(char *, void))(v1 + 8))(v3, v15[0]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INStartAudioCallIntentExport);
  static ReducerBuilder.buildExpression(_:)();
  uint64_t v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v8, v4);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Reducer<PhoneCallNLIntent, INStartAudioCallIntentExport>>);
  unint64_t v12 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_467710;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 16))(v13 + v12, v10, v4);
  static ReducerBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(char *, uint64_t))v11)(v10, v4);
}

void type metadata accessor for INCallCapability(uint64_t a1)
{
}

uint64_t closure #6 in closure #1 in static Transformer<>.transformer(sharedGlobals:app:previousIntent:)@<X0>(uint64_t a1@<X8>)
{
  v15[1] = a1;
  v15[0] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallCapability>);
  uint64_t v1 = *(void *)(v15[0] - 8);
  __chkstk_darwin(v15[0]);
  uint64_t v3 = (char *)v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Reducer<PhoneCallNLIntent, INStartCallIntentExport>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  char v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v15 - v9;
  swift_getKeyPath();
  type metadata accessor for INCallCapability(0);
  -- infix<A, B, C>(_:_:)();
  swift_release();
  swift_getKeyPath();
  --> infix<A, B, C, D>(_:_:)();
  swift_release();
  swift_release();
  (*(void (**)(char *, void))(v1 + 8))(v3, v15[0]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INStartCallIntentExport);
  static ReducerBuilder.buildExpression(_:)();
  uint64_t v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v8, v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Reducer<PhoneCallNLIntent, INStartCallIntentExport>>);
  unint64_t v12 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_467710;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 16))(v13 + v12, v10, v4);
  static ReducerBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(char *, uint64_t))v11)(v10, v4);
}

{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t);
  unint64_t v12;
  uint64_t v13;
  void v15[2];

  v15[1] = a1;
  v15[0] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INAudioCallTTYType>);
  uint64_t v1 = *(void *)(v15[0] - 8);
  __chkstk_darwin(v15[0]);
  uint64_t v3 = (char *)v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Reducer<PhoneCallNLIntent, INStartAudioCallIntentExport>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  char v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v15 - v9;
  swift_getKeyPath();
  type metadata accessor for INAudioCallTTYType(0);
  -- infix<A, B, C>(_:_:)();
  swift_release();
  swift_getKeyPath();
  --> infix<A, B, C, D>(_:_:)();
  swift_release();
  swift_release();
  (*(void (**)(char *, void))(v1 + 8))(v3, v15[0]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INStartAudioCallIntentExport);
  static ReducerBuilder.buildExpression(_:)();
  uint64_t v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v8, v4);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Reducer<PhoneCallNLIntent, INStartAudioCallIntentExport>>);
  unint64_t v12 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_467710;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 16))(v13 + v12, v10, v4);
  static ReducerBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(char *, uint64_t))v11)(v10, v4);
}

void DeviceState.isAnyCar.getter()
{
}

{
  char v0;
  void (*v1)(void);
  void (*v2)(uint64_t);
  uint64_t (*v3)(uint64_t);
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  char v11;
  uint64_t v12;
  void (*v13)(void);
  uint64_t v14;
  void (*v15)(uint64_t);

  OUTLINED_FUNCTION_24_0();
  os_log_type_t v15 = v2;
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_1();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_6_44();
  uint64_t v9 = __chkstk_darwin(v8);
  v10(v9);
  OUTLINED_FUNCTION_19_43();
  OUTLINED_FUNCTION_42_11();
  v1();
  if (v0)
  {
    uint64_t v11 = 1;
  }
  else
  {
    unint64_t v12 = OUTLINED_FUNCTION_36_0();
    uint64_t v11 = v4(v12);
  }
  uint64_t v13 = *(void (**)(void))(v6 + 8);
  OUTLINED_FUNCTION_12_1();
  v13();
  OUTLINED_FUNCTION_42_11();
  v1();
  if ((v11 & 1) == 0)
  {
    uint64_t v14 = OUTLINED_FUNCTION_36_0();
    v15(v14);
  }
  OUTLINED_FUNCTION_12_1();
  v13();
  OUTLINED_FUNCTION_40_11();
  OUTLINED_FUNCTION_26_1();
}

uint64_t partial apply for closure #7 in closure #1 in static Transformer<>.transformer(sharedGlobals:app:previousIntent:)@<X0>(uint64_t a1@<X8>)
{
  return closure #7 in closure #1 in static Transformer<>.transformer(sharedGlobals:app:previousIntent:)(a1);
}

uint64_t closure #7 in closure #1 in static Transformer<>.transformer(sharedGlobals:app:previousIntent:)@<X0>(uint64_t a1@<X8>)
{
  v15[1] = a1;
  v15[0] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallRecordFilter?>);
  uint64_t v1 = *(void *)(v15[0] - 8);
  __chkstk_darwin(v15[0]);
  uint64_t v3 = (char *)v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Reducer<PhoneCallNLIntent, INStartCallIntentExport>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  char v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v15 - v9;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INCallRecordFilter?);
  -- infix<A, B, C>(_:_:)();
  swift_release();
  swift_getKeyPath();
  --> infix<A, B, C, D>(_:_:)();
  swift_release();
  swift_release();
  (*(void (**)(char *, void))(v1 + 8))(v3, v15[0]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INStartCallIntentExport);
  static ReducerBuilder.buildExpression(_:)();
  uint64_t v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v8, v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Reducer<PhoneCallNLIntent, INStartCallIntentExport>>);
  unint64_t v12 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_467710;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 16))(v13 + v12, v10, v4);
  static ReducerBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(char *, uint64_t))v11)(v10, v4);
}

id closure #1 in static Transformer<>.transformer(device:callCapability:participants:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  OUTLINED_FUNCTION_50_8();
  Swift::Bool v8 = PhoneCallNLIntent.isRedial()();
  outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v27);
  if (v8)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
    goto LABEL_4;
  }
  __swift_project_boxed_opaque_existential_1(v27, v27[3]);
  OUTLINED_FUNCTION_50_8();
  Swift::Bool v9 = PhoneCallNLIntent.isCallBack()();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  if (v9)
  {
LABEL_4:
    uint64_t v10 = a1[3];
    uint64_t v11 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v10);
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 40))(v10, v11);
    v27[6] = a3;
    if (v12)
    {
      uint64_t v13 = *(void *)(v12 + 16);
      if (v13)
      {
        uint64_t v14 = 0;
        os_log_type_t v15 = (PhoneCallFlowDelegatePlugin::PhoneCallAttribute *)(v12 + 32);
        do
        {
          PhoneCallFlowDelegatePlugin::PhoneCallAttribute v16 = *v15++;
          __swift_project_boxed_opaque_existential_1(a1, a1[3]);
          __C::INCallRecordTypeOptions_optional v28 = PhoneCallNLIntent.getCallRecordTypeOption(attr:)(v16);
          if ((v28.value.rawValue & ~v14) != 0) {
            Swift::UInt rawValue = v28.value.rawValue;
          }
          else {
            Swift::UInt rawValue = 0;
          }
          if (v28.is_nil) {
            Swift::UInt rawValue = 0;
          }
          v14 |= rawValue;
          --v13;
        }
        while (v13);
      }
      else
      {
        uint64_t v14 = 0;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v19 = a1[3];
    uint64_t v20 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v19);
    uint64_t v21 = *(void *)((*(uint64_t (**)(uint64_t, uint64_t))(v20 + 24))(v19, v20) + 16);
    swift_bridgeObjectRelease();
    outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v26);
    if (v21 == 1)
    {
      __swift_project_boxed_opaque_existential_1(v26, v26[3]);
      Swift::Bool v22 = PhoneCallNLIntent.hasAnyContactReference()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
      if (v22)
      {
        id v23 = objc_allocWithZone((Class)INCallRecordFilter);
        uint64_t v24 = 0;
LABEL_23:
        id result = @nonobjc INCallRecordFilter.init(participants:callTypes:callCapability:)(v24, v14, a2);
        goto LABEL_24;
      }
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    }
    id v25 = objc_allocWithZone((Class)INCallRecordFilter);
    uint64_t v24 = swift_bridgeObjectRetain();
    goto LABEL_23;
  }
  id result = 0;
LABEL_24:
  *a4 = result;
  return result;
}

id key path getter for INStartCallIntentExport.callRecordFilter : INStartCallIntentExport@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 callRecordFilter];
  *a2 = result;
  return result;
}

uint64_t partial apply for closure #8 in closure #1 in static Transformer<>.transformer(sharedGlobals:app:previousIntent:)@<X0>(uint64_t a1@<X8>)
{
  return closure #8 in closure #1 in static Transformer<>.transformer(sharedGlobals:app:previousIntent:)(a1);
}

uint64_t closure #8 in closure #1 in static Transformer<>.transformer(sharedGlobals:app:previousIntent:)@<X0>(uint64_t a1@<X8>)
{
  v15[1] = a1;
  v15[0] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Transformer<[SmsGroup], [INCallGroup]?>);
  uint64_t v1 = *(void *)(v15[0] - 8);
  __chkstk_darwin(v15[0]);
  uint64_t v3 = (char *)v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Reducer<PhoneCallNLIntent, INStartCallIntentExport>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  Swift::Bool v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v15 - v9;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INCallGroup]?);
  -- infix<A, B, C>(_:_:)();
  swift_release();
  swift_getKeyPath();
  --> infix<A, B, C, D>(_:_:)();
  swift_release();
  swift_release();
  (*(void (**)(char *, void))(v1 + 8))(v3, v15[0]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INStartCallIntentExport);
  static ReducerBuilder.buildExpression(_:)();
  uint64_t v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v8, v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Reducer<PhoneCallNLIntent, INStartCallIntentExport>>);
  unint64_t v12 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_467710;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 16))(v13 + v12, v10, v4);
  static ReducerBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(char *, uint64_t))v11)(v10, v4);
}

uint64_t key path getter for PhoneCallNLIntent.smsGroups : PhoneCallNLIntent@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 136))(v3, v4);
  *a2 = result;
  return result;
}

void closure #1 in static Transformer<>.transformer(device:groupResolver:)partial apply(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
}

void closure #1 in static Transformer<>.transformer(device:groupResolver:)(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = _swiftEmptyArrayStorage;
  unint64_t v47 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v6 = *(void *)(v4 + 16);
  if (v6)
  {
    uint64_t v9 = v4 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of SignalProviding(v9, (uint64_t)v44);
      uint64_t v10 = v45;
      uint64_t v11 = v46;
      __swift_project_boxed_opaque_existential_1(v44, v45);
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 16))(v10, v11);
      if (v13)
      {
        uint64_t v14 = v12;
        unint64_t v15 = v13;
        swift_bridgeObjectRelease();
        uint64_t v16 = HIBYTE(v15) & 0xF;
        if ((v15 & 0x2000000000000000) == 0) {
          uint64_t v16 = v14 & 0xFFFFFFFFFFFFLL;
        }
        if (v16) {
          goto LABEL_9;
        }
      }
      __swift_project_boxed_opaque_existential_1(v44, v45);
      uint64_t v17 = OUTLINED_FUNCTION_0_33();
      uint64_t v19 = v18(v17);
      if (!v20)
      {
LABEL_9:
        __swift_project_boxed_opaque_existential_1(v44, v45);
        uint64_t v22 = OUTLINED_FUNCTION_0_33();
        uint64_t v24 = v23(v22);
        uint64_t v26 = v25;
        uint64_t v27 = v45;
        uint64_t v28 = v46;
        __swift_project_boxed_opaque_existential_1(v44, v45);
        uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 16))(v27, v28);
        uint64_t v31 = v30;
        id v32 = objc_allocWithZone((Class)INCallGroup);
        @nonobjc INCallGroup.init(groupName:groupId:)(v24, v26, v29, v31);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((char *)&dword_10 + (v47 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                       + (v47 & 0xFFFFFFFFFFFFFF8)) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
        uint64_t v21 = static Transformer<>.resolveGroupNameIdentifier(groupName:device:groupResolver:)(v19, v20, a2, a3);
        swift_bridgeObjectRelease();
        specialized Array.append<A>(contentsOf:)((unint64_t)v21);
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
      v9 += 40;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    uint64_t v5 = (void *)v47;
  }
  unint64_t v33 = static Transformer<>.normalizeFirstPartyMessagesGroups(_:)((unint64_t)v5);
  swift_bridgeObjectRelease();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v34 = type metadata accessor for Logger();
  __swift_project_value_buffer(v34, (uint64_t)static Logger.siriPhone);
  swift_bridgeObjectRetain_n();
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = swift_slowAlloc();
    v44[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 136315394;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Transformer<[SmsGroup], [INCallGroup]?>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<[SmsGroup], [INCallGroup]?>.Type);
    uint64_t v38 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v37 + 12) = 2080;
    type metadata accessor for INCallGroup();
    swift_bridgeObjectRetain();
    uint64_t v40 = Array.description.getter();
    unint64_t v42 = v41;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v42, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v35, v36, "#%s --> %s", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  *a4 = v33;
}

unint64_t static Transformer<>.normalizeFirstPartyMessagesGroups(_:)(unint64_t a1)
{
  swift_getKeyPath();
  unint64_t v15 = &_swiftEmptySetSingleton;
  swift_retain();
  unint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = specialized Sequence.filter(_:)(v2);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v4 = static Transformer<>.groupFirstPartyChatsByIdentifier(_:)((unint64_t)v3);
  swift_bridgeObjectRelease();
  uint64_t v5 = specialized _NativeDictionary.filter(_:)((uint64_t)v4);
  swift_bridgeObjectRelease();
  uint64_t v6 = specialized Set.init<A>(_:)(v5);
  swift_bridgeObjectRetain();
  unint64_t v7 = (unint64_t)specialized Sequence.compactMap<A>(_:)(a1, (uint64_t)v6);
  swift_bridgeObjectRelease();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.siriPhone);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    unint64_t v15 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315650;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Transformer<[SmsGroup], [INCallGroup]?>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<[SmsGroup], [INCallGroup]?>.Type);
    uint64_t v12 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, (uint64_t *)&v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2048;
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 22) = 2048;
    if (v7 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v9, v10, "#%s normalizeFirstPartyMessagesGroups: Before deduping: %ld, After deduping: %ld", (uint8_t *)v11, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  return v7;
}

void *specialized Sequence.filter(_:)(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
LABEL_3:
  uint64_t v10 = v2;
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = v2;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v3 >= *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8)))
        {
          __break(1u);
LABEL_17:
          __break(1u);
LABEL_18:
          uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
          goto LABEL_3;
        }
        id v5 = *(id *)(a1 + 8 * v3 + 32);
      }
      uint64_t v6 = v5;
      unint64_t v7 = v3 + 1;
      if (__OFADD__(v3, 1)) {
        goto LABEL_17;
      }
      swift_getAtKeyPath();
      char v8 = specialized Set._Variant.insert(_:)();
      swift_bridgeObjectRelease();
      if (v8)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        uint64_t v4 = v10;
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
      }
      ++v3;
    }
    while (v7 != v4);
  }
  swift_release();
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  unint64_t v7;
  char v8;
  uint64_t v10;

  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
LABEL_3:
  uint64_t v10 = v2;
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = v2;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v3 >= *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8)))
        {
          __break(1u);
LABEL_17:
          __break(1u);
LABEL_18:
          uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
          goto LABEL_3;
        }
        id v5 = *(id *)(a1 + 8 * v3 + 32);
      }
      uint64_t v6 = v5;
      unint64_t v7 = v3 + 1;
      if (__OFADD__(v3, 1)) {
        goto LABEL_17;
      }
      swift_getAtKeyPath();
      char v8 = specialized Set._Variant.insert(_:)();
      swift_bridgeObjectRelease();
      if (v8)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        uint64_t v4 = v10;
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
      }
      ++v3;
    }
    while (v7 != v4);
  }
  swift_release();
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t *static Transformer<>.groupFirstPartyChatsByIdentifier(_:)(unint64_t a1)
{
  uint64_t v35 = type metadata accessor for UUID();
  uint64_t v2 = *(uint64_t **)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = (uint64_t *)&_swiftEmptyDictionarySingleton;
  if (a1 >> 62)
  {
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    if (v5) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (v5)
    {
LABEL_3:
      unint64_t v38 = a1 & 0xC000000000000001;
      id v32 = &v46;
      uint64_t v34 = (void (**)(char *, uint64_t))(v2 + 1);
      uint64_t v6 = (uint64_t *)&_swiftEmptyDictionarySingleton;
      uint64_t v7 = 4;
      long long v33 = xmmword_46A030;
      unint64_t v37 = a1;
      uint64_t v36 = v5;
      while (1)
      {
        uint64_t v2 = (uint64_t *)(v7 - 4);
        if (v38) {
          id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v8 = *(id *)(a1 + 8 * v7);
        }
        id v9 = v8;
        uint64_t v10 = v7 - 3;
        if (__OFADD__(v2, 1))
        {
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
          goto LABEL_27;
        }
        uint64_t v11 = outlined bridged method (pb) of @objc INCallGroup.groupId.getter(v8);
        if (v12
          && (FirstPartyChatGUID.init(_:)(v11, v12, v41),
              outlined init with take of FirstPartyChatGUID?((uint64_t)v41, (uint64_t)v42),
              *((void *)&v42[0] + 1)))
        {
          long long v45 = v42[0];
          long long v46 = v42[1];
          uint64_t v14 = v43;
          uint64_t v13 = v44;
          long long v47 = v42[0];
          swift_bridgeObjectRetain();
          outlined release of String?((uint64_t)&v47);
          long long v48 = *v32;
          outlined release of String?((uint64_t)&v48);
          swift_bridgeObjectRelease();
        }
        else
        {
          UUID.init()();
          uint64_t v14 = UUID.uuidString.getter();
          uint64_t v13 = v15;
          (*v34)(v4, v35);
        }
        uint64_t v2 = v6;
        a1 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v13);
        uint64_t v17 = v6[2];
        BOOL v18 = (v16 & 1) == 0;
        uint64_t v19 = v17 + v18;
        if (__OFADD__(v17, v18)) {
          goto LABEL_25;
        }
        char v20 = v16;
        if (v6[3] < v19)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, 1);
          uint64_t v6 = v40;
          unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v13);
          if ((v20 & 1) != (v22 & 1))
          {
            uint64_t result = (uint64_t *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          a1 = v21;
        }
        if (v20)
        {
          swift_bridgeObjectRelease();
          id v23 = (void *)(v6[7] + 8 * a1);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((char *)&dword_10 + (*v23 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                          + (*v23 & 0xFFFFFFFFFFFFFF8)) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          uint64_t v24 = swift_allocObject();
          *(_OWORD *)(v24 + 16) = v33;
          *(void *)(v24 + 32) = v9;
          uint64_t v39 = v24;
          uint64_t v2 = &v39;
          specialized Array._endMutation()();
          uint64_t v25 = v39;
          v6[(a1 >> 6) + 8] |= 1 << a1;
          uint64_t v26 = (uint64_t *)(v6[6] + 16 * a1);
          *uint64_t v26 = v14;
          v26[1] = v13;
          *(void *)(v6[7] + 8 * a1) = v25;
          uint64_t v27 = v6[2];
          BOOL v28 = __OFADD__(v27, 1);
          uint64_t v29 = v27 + 1;
          if (v28) {
            goto LABEL_26;
          }
          v6[2] = v29;
        }
        a1 = v37;
        ++v7;
        if (v10 == v36)
        {
          swift_bridgeObjectRelease();
          return v6;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return (uint64_t *)&_swiftEmptyDictionarySingleton;
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  char v9 = *(unsigned char *)(a1 + 32);
  unsigned int v10 = v9 & 0x3F;
  unint64_t v11 = (unint64_t)((1 << v9) + 63) >> 6;
  swift_bridgeObjectRetain_n();
  uint64_t isStackAllocationSafe = a4;
  uint64_t v13 = (void *)isStackAllocationSafe;
  if (v10 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    uint64_t v14 = (uint64_t *)((char *)&v20 - ((8 * v11 + 15) & 0x3FFFFFFFFFFFFFF0));
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v11, v14);
    swift_bridgeObjectRetain();
    id v15 = v13;
    uint64_t v16 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v14, v11, a1, a2, a3, v15);
    if (v4) {
      swift_willThrow();
    }
    else {
      a2 = v16;
    }

    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v17 = (void *)swift_slowAlloc();
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v11, v17);
    swift_bridgeObjectRetain();
    id v18 = v13;
    a2 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v17, v11, a1, a2, a3, v18);
    swift_slowDealloc();

    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease_n();
  return a2;
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, double a2)
{
  uint64_t v4 = isStackAllocationSafe;
  char v5 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v6 = (unint64_t)((1 << v5) + 63) >> 6;
  if ((v5 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    uint64_t v7 = (unint64_t *)((char *)&v12 - ((8 * v6 + 15) & 0x3FFFFFFFFFFFFFF0));
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v6, v7);
    specialized closure #1 in _NativeDictionary.filter(_:)(v7, v6, v4, a2);
    if (v2) {
      swift_willThrow();
    }
    else {
      return v8;
    }
  }
  else
  {
    char v9 = (unint64_t *)swift_slowAlloc();
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v6, v9);
    specialized closure #1 in _NativeDictionary.filter(_:)(v9, v6, v4, a2);
    uint64_t v4 = v10;
    swift_slowDealloc();
  }
  return v4;
}

uint64_t specialized UnsafeMutablePointer.assign(repeating:count:)(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

void specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v5 = 0;
  int64_t v6 = 0;
  uint64_t v7 = a3 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v6 << 6);
      goto LABEL_20;
    }
    int64_t v14 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v14 >= v11) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      int64_t v6 = v14 + 1;
      if (v14 + 1 >= v11) {
        goto LABEL_24;
      }
      unint64_t v15 = *(void *)(v7 + 8 * v6);
      if (!v15)
      {
        int64_t v6 = v14 + 2;
        if (v14 + 2 >= v11) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v7 + 8 * v6);
        if (!v15) {
          break;
        }
      }
    }
LABEL_19:
    unint64_t v10 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_20:
    if (*(double *)(*(void *)(a3 + 56) + 8 * v13) > a4)
    {
      *(unint64_t *)((char *)a1 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      if (__OFADD__(v5++, 1))
      {
        __break(1u);
LABEL_24:
        specialized _NativeDictionary.extractDictionary(using:count:)(a1, a2, v5);
        return;
      }
    }
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v11) {
    goto LABEL_24;
  }
  unint64_t v15 = *(void *)(v7 + 8 * v16);
  if (v15)
  {
    int64_t v6 = v16;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v6 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v6 >= v11) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v6);
    ++v16;
    if (v15) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
}

uint64_t specialized closure #1 in _NativeDictionary.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v27 = (unint64_t *)result;
  uint64_t v9 = 0;
  int64_t v10 = 0;
  uint64_t v11 = a3 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(a3 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (v14)
  {
    unint64_t v16 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    unint64_t v17 = v16 | (v10 << 6);
LABEL_20:
    unint64_t v21 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v17);
    uint64_t result = *v21;
    if (*v21 != a4 || v21[1] != a5)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0)
      {
        *(unint64_t *)((char *)v27 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
        if (__OFADD__(v9++, 1))
        {
          __break(1u);
LABEL_28:
          uint64_t v24 = specialized _NativeDictionary.extractDictionary(using:count:)(v27, a2, v9, a3);

          swift_bridgeObjectRelease();
          return v24;
        }
      }
    }
  }
  int64_t v18 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v18 >= v15) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v11 + 8 * v18);
  ++v10;
  if (v19) {
    goto LABEL_19;
  }
  int64_t v10 = v18 + 1;
  if (v18 + 1 >= v15) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v11 + 8 * v10);
  if (v19) {
    goto LABEL_19;
  }
  int64_t v10 = v18 + 2;
  if (v18 + 2 >= v15) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v11 + 8 * v10);
  if (v19)
  {
LABEL_19:
    unint64_t v14 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v10 << 6);
    goto LABEL_20;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v15) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v11 + 8 * v20);
  if (v19)
  {
    int64_t v10 = v20;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v10 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v10 >= v15) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v11 + 8 * v10);
    ++v20;
    if (v19) {
      goto LABEL_19;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

unint64_t type metadata accessor for INCallGroup()
{
  unint64_t result = lazy cache variable for type metadata for INCallGroup;
  if (!lazy cache variable for type metadata for INCallGroup)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for INCallGroup);
  }
  return result;
}

Swift::Void __swiftcall INStartCallIntent.updateIsGroupCall(isGroupCall:)(Swift::Bool isGroupCall)
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.siriPhone);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 67109120;
    v6[0] = isGroupCall;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v3, v4, "#INStartCallIntent Updating intent with isGroupCall : %{BOOL}d", v5, 8u);
    OUTLINED_FUNCTION_6();
  }

  uint64_t v7 = &type metadata for Bool;
  LOBYTE(v6[0]) = isGroupCall;
  NSObject.update(with:at:)((uint64_t)v6, 0x4370756F72477369, 0xEB000000006C6C61);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

void NSObject.update(with:at:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v6 = a5 >> 1;
  if (a5 >> 1 == a4)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.siriPhone);
    oslog = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(oslog, v8)) {
      goto LABEL_19;
    }
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    int64_t v10 = "No keyPath specified, not updating object";
    goto LABEL_18;
  }
  if ((uint64_t)(a5 >> 1) <= a4)
  {
    __break(1u);
LABEL_31:
    swift_once();
LABEL_16:
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.siriPhone);
    oslog = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      int64_t v10 = "keyPath invalid for object";
LABEL_18:
      _os_log_impl(&dword_0, oslog, v8, v10, v9, 2u);
      swift_slowDealloc();
    }
LABEL_19:

    return;
  }
  uint64_t v13 = (uint64_t *)(a3 + 16 * a4);
  uint64_t v15 = *v13;
  unint64_t v14 = v13[1];
  uint64_t v16 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0) {
    uint64_t v16 = v15 & 0xFFFFFFFFFFFFLL;
  }
  if (!v16)
  {
LABEL_15:
    if (one-time initialization token for siriPhone == -1) {
      goto LABEL_16;
    }
    goto LABEL_31;
  }
  unint64_t v17 = v5;
  swift_bridgeObjectRetain_n();
  if (![v5 respondsToSelector:Selector.init(_:)()])
  {
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  if (__OFSUB__(v6, a4))
  {
    __break(1u);
    return;
  }
  if (v6 - a4 == 1)
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    uint64_t v21 = _bridgeAnythingToObjectiveC<A>(_:)();
    oslog = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v17 setValue:v21 forKey:oslog];
    swift_unknownObjectRelease();
    goto LABEL_19;
  }
  os_log_t osloga = (os_log_t)String._bridgeToObjectiveC()();
  id v23 = [v5 valueForKey:osloga];

  if (v23)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v33, 0, sizeof(v33));
  }
  outlined init with take of Any?((uint64_t)v33, (uint64_t)v34);
  if (v35)
  {
    type metadata accessor for NSObject();
    if (swift_dynamicCast())
    {
      uint64_t v24 = specialized ArraySlice.subscript.getter(a4 + 1, v6, a2, a3, a4, a5);
      NSObject.update(with:at:)(a1, v24, v25, v26, v27);
      id v28 = v32;
      NSString v29 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v17 setValue:v28 forKey:v29];
      swift_unknownObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    outlined destroy of Any?((uint64_t)v34);
  }
}

uint64_t NSObject.update(with:at:)(uint64_t result, uint64_t a2)
{
  uint64_t v12 = (void *)result;
  uint64_t v11 = *(void *)(a2 + 16);
  if (v11)
  {
    swift_bridgeObjectRetain();
    lazy protocol witness table accessor for type String and conformance String();
    for (uint64_t i = 0; i != v11; ++i)
    {
      swift_bridgeObjectRetain();
      uint64_t v3 = StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)();
      swift_bridgeObjectRelease();
      uint64_t v4 = *(void *)(v3 + 16);
      if (v4)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v5 = v3 + 56;
        do
        {
          swift_bridgeObjectRetain();
          uint64_t v6 = static String._fromSubstring(_:)();
          uint64_t v8 = v7;
          swift_bridgeObjectRelease();
          unint64_t v9 = _swiftEmptyArrayStorage[2];
          if (v9 >= _swiftEmptyArrayStorage[3] >> 1) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          _swiftEmptyArrayStorage[2] = v9 + 1;
          int64_t v10 = &_swiftEmptyArrayStorage[2 * v9];
          v10[4] = v6;
          uint64_t v10[5] = v8;
          v5 += 32;
          --v4;
        }
        while (v4);
      }
      swift_bridgeObjectRelease();
      NSObject.update(with:at:)(v12, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)&_swiftEmptyArrayStorage[4], 0, (2 * _swiftEmptyArrayStorage[2]) | 1);
      swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t NSObject.update(with:at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_467710;
  *(void *)(inited + 32) = a2;
  *(void *)(inited + 40) = a3;
  swift_bridgeObjectRetain();
  NSObject.update(with:at:)(a1, inited);
  swift_setDeallocating();
  return specialized _ContiguousArrayStorage.__deallocating_deinit();
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

void specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  OUTLINED_FUNCTION_9_15();
  if (v5)
  {
    OUTLINED_FUNCTION_8_17();
    if (v6 != v7)
    {
      OUTLINED_FUNCTION_23_4();
      if (v6)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_7_16();
    }
  }
  OUTLINED_FUNCTION_15_6();
  if (v4)
  {
    __swift_instantiateConcreteTypeFromMangledName(v8);
    unint64_t v9 = (const void *)swift_allocObject();
    OUTLINED_FUNCTION_33_3(v9);
    OUTLINED_FUNCTION_27_4(v10);
  }
  uint64_t v11 = OUTLINED_FUNCTION_13_5();
  if (v3)
  {
    v2(v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v11);
  }
  swift_release();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_9_15();
  if (v6)
  {
    OUTLINED_FUNCTION_8_17();
    if (v7 != v8)
    {
      OUTLINED_FUNCTION_23_4();
      if (v7)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_7_16();
    }
  }
  OUTLINED_FUNCTION_15_6();
  if (v5)
  {
    __swift_instantiateConcreteTypeFromMangledName(v9);
    uint64_t v10 = (const void *)swift_allocObject();
    OUTLINED_FUNCTION_33_3(v10);
    *(void *)(v5 + 16) = v4;
    *(void *)(v5 + 24) = 2 * (v11 / 40);
  }
  uint64_t v12 = OUTLINED_FUNCTION_13_5();
  if (v3)
  {
    v2(v12);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v12);
  }
  swift_release();
}

{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  size_t v18;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_26_5();
  if (v8)
  {
    OUTLINED_FUNCTION_8_17();
    if (v10 != v11)
    {
      OUTLINED_FUNCTION_23_4();
      if (v10)
      {
LABEL_23:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_7_16();
    }
  }
  else
  {
    unint64_t v9 = v6;
  }
  uint64_t v12 = *(void *)(v0 + 16);
  if (v9 <= v12) {
    uint64_t v13 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v13 = v9;
  }
  if (!v13) {
    goto LABEL_17;
  }
  __swift_instantiateConcreteTypeFromMangledName(v7);
  unint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(v4);
  OUTLINED_FUNCTION_19_0(v14);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (void *)OUTLINED_FUNCTION_21_5();
  int64_t v18 = _swift_stdlib_malloc_size(v17);
  if (!v16)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v18 - v5 == 0x8000000000000000 && v16 == -1) {
    goto LABEL_22;
  }
  v17[2] = v12;
  v17[3] = 2 * ((uint64_t)(v18 - v5) / v16);
LABEL_17:
  int64_t v20 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(v4) - 8);
  uint64_t v21 = OUTLINED_FUNCTION_24_8(*(unsigned __int8 *)(v20 + 80));
  if (v3)
  {
    v2(v21);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v21);
  }
  swift_release();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_9_15();
  if (v5)
  {
    OUTLINED_FUNCTION_8_17();
    if (v6 != v7)
    {
      OUTLINED_FUNCTION_23_4();
      if (v6)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_7_16();
    }
  }
  OUTLINED_FUNCTION_15_6();
  if (v4)
  {
    __swift_instantiateConcreteTypeFromMangledName(v8);
    unint64_t v9 = (const void *)swift_allocObject();
    OUTLINED_FUNCTION_33_3(v9);
    OUTLINED_FUNCTION_27_4(v10);
  }
  uint64_t v11 = OUTLINED_FUNCTION_13_5();
  if (v3)
  {
    v2(v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v11);
  }
  swift_release();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_9_15();
  if (v5)
  {
    OUTLINED_FUNCTION_8_17();
    if (v6 != v7)
    {
      OUTLINED_FUNCTION_23_4();
      if (v6)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_7_16();
    }
  }
  OUTLINED_FUNCTION_15_6();
  if (v4)
  {
    __swift_instantiateConcreteTypeFromMangledName(v8);
    unint64_t v9 = (const void *)swift_allocObject();
    OUTLINED_FUNCTION_33_3(v9);
    OUTLINED_FUNCTION_27_4(v10);
  }
  uint64_t v11 = OUTLINED_FUNCTION_13_5();
  if (v3)
  {
    v2(v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v11);
  }
  swift_release();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  size_t v18;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_26_5();
  if (v8)
  {
    OUTLINED_FUNCTION_8_17();
    if (v10 != v11)
    {
      OUTLINED_FUNCTION_23_4();
      if (v10)
      {
LABEL_23:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_7_16();
    }
  }
  else
  {
    unint64_t v9 = v6;
  }
  uint64_t v12 = *(void *)(v0 + 16);
  if (v9 <= v12) {
    uint64_t v13 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v13 = v9;
  }
  if (!v13) {
    goto LABEL_17;
  }
  __swift_instantiateConcreteTypeFromMangledName(v7);
  unint64_t v14 = v4(0);
  OUTLINED_FUNCTION_19_0(v14);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (void *)OUTLINED_FUNCTION_21_5();
  int64_t v18 = _swift_stdlib_malloc_size(v17);
  if (!v16)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v18 - v5 == 0x8000000000000000 && v16 == -1) {
    goto LABEL_22;
  }
  v17[2] = v12;
  v17[3] = 2 * ((uint64_t)(v18 - v5) / v16);
LABEL_17:
  int64_t v20 = *(void *)(v4(0) - 8);
  uint64_t v21 = OUTLINED_FUNCTION_24_8(*(unsigned __int8 *)(v20 + 80));
  if (v3)
  {
    v2(v21);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v21);
  }
  swift_release();
}

id partial apply for closure #1 in static Transformer<>.transformer(sharedGlobals:app:sirikitIntent:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static Transformer<>.transformer(sharedGlobals:app:sirikitIntent:)(a1, (void *)(v2 + 16), *(void **)(v2 + 56), *(void *)(v2 + 64), a2);
}

id closure #1 in static Transformer<>.transformer(sharedGlobals:app:sirikitIntent:)@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v76 = a5;
  type metadata accessor for Locale();
  OUTLINED_FUNCTION_1();
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_3_1();
  uint64_t v61 = v10;
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 24))(v11, v12);
  uint64_t v14 = a2[3];
  uint64_t v15 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v14);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v15 + 72);
  uint64_t v17 = v15;
  int64_t v18 = a3;
  v16(v14, v17);
  _s27PhoneCallFlowDelegatePlugin22SharedGlobalsProviding_pWOcTm_0();
  swift_release();
  static SiriKitEventSender.current.getter();
  static Transformer<>.makeCallReferenceUsoEntity(contacts:referenceResolver:siriKitEventSender:)(v13, (uint64_t)&v70, &v68, v67);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v70);
  outlined init with take of AnnotatedApp?((uint64_t)v67, (uint64_t)&v68, &demangling cache variable for type metadata for TargetContacts?);
  if (!(void)v68) {
    goto LABEL_24;
  }
  long long v70 = v68;
  *(_OWORD *)uint64_t v71 = v69[0];
  *(_OWORD *)&v71[9] = *(_OWORD *)((char *)v69 + 9);
  uint64_t v19 = *(void *)&v69[0];
  if (*(void *)&v69[0] && *(void *)(*(void *)&v69[0] + 16))
  {
    uint64_t v72 = v70;
    swift_bridgeObjectRetain();
    outlined release of Set<String>((uint64_t)&v72);
    outlined init with take of AnnotatedApp?((uint64_t)&v70 + 8, (uint64_t)&v73, &demangling cache variable for type metadata for [ContactSourceType]?);
    outlined release of Set<String>((uint64_t)&v73);
    swift_bridgeObjectRelease();
    outlined init with take of AnnotatedApp?((uint64_t)&v71[8], (uint64_t)v74, &demangling cache variable for type metadata for [UsoEntity_common_Group]?);
    outlined release of Set<String>((uint64_t)v74);
    outlined init with take of AnnotatedApp?((uint64_t)&v71[16], (uint64_t)v75, &demangling cache variable for type metadata for [UsoEntity]?);
    outlined release of Set<String>((uint64_t)v75);
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v58 = (uint64_t)a3;
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.siriPhone);
    swift_bridgeObjectRetain_n();
    uint64_t v21 = Logger.logObject.getter();
    int v22 = static os_log_type_t.debug.getter();
    uint64_t v60 = v5;
    if (os_log_type_enabled(v21, (os_log_type_t)v22))
    {
      HIDWORD(v57) = v22;
      uint64_t v23 = OUTLINED_FUNCTION_11_7();
      uint64_t v56 = OUTLINED_FUNCTION_10_0();
      v63[0] = v56;
      *(_DWORD *)uint64_t v23 = 136315394;
      if (one-time initialization token for logPrefix != -1) {
        swift_once();
      }
      uint64_t v24 = static NLv4Transformer.logPrefix;
      uint64_t v25 = unk_5D5060;
      uint64_t v64 = 0;
      unint64_t v65 = 0xE000000000000000;
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_50_21();
      DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v24, v25, 0xD00000000000002DLL, v26);
      swift_bridgeObjectRelease();
      uint64_t v64 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2080;
      uint64_t v55 = v23 + 14;
      type metadata accessor for ContactQuery();
      swift_bridgeObjectRetain();
      uint64_t v27 = Array.description.getter();
      unint64_t v29 = v28;
      swift_bridgeObjectRelease();
      uint64_t v64 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v21, BYTE4(v57), "%s SRR returned contact queries: %s", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    Swift::Bool v40 = PhoneCallNLIntent.isDisplayNameEmergencyContact()();
    uint64_t v41 = a2[3];
    uint64_t v42 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v41);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(v42 + 8))(&v64, v41, v42);
    __swift_project_boxed_opaque_existential_1(&v64, v66);
    dispatch thunk of DeviceState.siriLocale.getter();
    static SiriKitEventSender.current.getter();
    type metadata accessor for EmergencyContactResolution();
    uint64_t v43 = swift_allocObject();
    uint64_t v44 = a1[3];
    uint64_t v45 = a1[4];
    long long v46 = __swift_project_boxed_opaque_existential_1(a1, v44);
    uint64_t v52 = v45;
    LOBYTE(v51) = 1;
    int64_t v18 = (void *)v58;
    specialized static ContactResolution.updateSiriKitIntent(siriKitIntent:contactQueries:hasEmergencyContact:app:locale:nlIntent:sharedGlobals:multicardinalIndex:siriKitEventSender:emergencyContactResolution:)(v58, v19, v40, a4, v61, (uint64_t)v46, (uint64_t)a2, 0, v51, (uint64_t)v63, v43, v44, v52, v53, v54, v55, v56, v57, v58,
      v60,
      v61);
    swift_bridgeObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
    OUTLINED_FUNCTION_11();
    v47();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v64);
    goto LABEL_24;
  }
  if ((unint64_t)v70 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v49 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v49) {
      goto LABEL_12;
    }
LABEL_23:
    swift_bridgeObjectRelease();
    outlined init with take of AnnotatedApp?((uint64_t)&v70 + 8, (uint64_t)v75, &demangling cache variable for type metadata for [ContactSourceType]?);
    outlined release of Set<String>((uint64_t)v75);
    swift_bridgeObjectRelease();
    outlined init with take of AnnotatedApp?((uint64_t)&v71[8], (uint64_t)v63, &demangling cache variable for type metadata for [UsoEntity_common_Group]?);
    outlined release of Set<String>((uint64_t)v63);
    outlined init with take of AnnotatedApp?((uint64_t)&v71[16], (uint64_t)&v64, &demangling cache variable for type metadata for [UsoEntity]?);
    outlined release of Set<String>((uint64_t)&v64);
    goto LABEL_24;
  }
  if (!*(void *)((char *)&dword_10 + (v70 & 0xFFFFFFFFFFFFFF8))) {
    goto LABEL_23;
  }
LABEL_12:
  outlined init with take of AnnotatedApp?((uint64_t)&v70 + 8, (uint64_t)v74, &demangling cache variable for type metadata for [ContactSourceType]?);
  outlined release of Set<String>((uint64_t)v74);
  swift_bridgeObjectRelease();
  outlined init with take of AnnotatedApp?((uint64_t)&v71[8], (uint64_t)v75, &demangling cache variable for type metadata for [UsoEntity_common_Group]?);
  outlined release of Set<String>((uint64_t)v75);
  outlined init with take of AnnotatedApp?((uint64_t)&v71[16], (uint64_t)v63, &demangling cache variable for type metadata for [UsoEntity]?);
  outlined release of Set<String>((uint64_t)v63);
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  __swift_project_value_buffer(v30, (uint64_t)static Logger.siriPhone);
  swift_bridgeObjectRetain_n();
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v59 = a3;
    uint64_t v33 = OUTLINED_FUNCTION_11_7();
    uint64_t v73 = OUTLINED_FUNCTION_10_0();
    *(_DWORD *)uint64_t v33 = 136315394;
    if (one-time initialization token for logPrefix != -1) {
      swift_once();
    }
    uint64_t v34 = static NLv4Transformer.logPrefix;
    uint64_t v35 = unk_5D5060;
    uint64_t v64 = 0;
    unint64_t v65 = 0xE000000000000000;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_50_21();
    DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v34, v35, 0xD00000000000002DLL, v36);
    swift_bridgeObjectRelease();
    uint64_t v64 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v64, v65, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 12) = 2080;
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INPerson);
    swift_bridgeObjectRetain();
    uint64_t v37 = Array.description.getter();
    unint64_t v39 = v38;
    swift_bridgeObjectRelease();
    uint64_t v64 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v39, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v31, v32, "%s SRR returned updated contacts: %s", (uint8_t *)v33, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();

    int64_t v18 = v59;
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  long long v48 = static ContactResolution.dedupeContacts(contacts:)();
  swift_bridgeObjectRelease();
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
  uint64_t v64 = v48;
  NSObject.update(with:at:)((uint64_t)&v64, 0x73746361746E6F63, 0xE800000000000000);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v64);
LABEL_24:
  *uint64_t v76 = v18;
  return v18;
}

uint64_t static Transformer<>.makeCallReferenceUsoEntity(contacts:referenceResolver:siriKitEventSender:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v53 = a4;
  uint64_t v7 = type metadata accessor for UsoEntity_common_ReferenceType.DefinedValues();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v55 = (unint64_t)_swiftEmptyArrayStorage;
  type metadata accessor for UsoEntityBuilder_common_ReferenceType();
  swift_allocObject();
  uint64_t v11 = UsoEntityBuilder_common_ReferenceType.init()();
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for UsoEntity_common_ReferenceType.DefinedValues.common_ReferenceType_DefiniteReference(_:), v7);
  dispatch thunk of UsoEntityBuilder_common_ReferenceType.setDefinedValue(value:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  type metadata accessor for UsoEntityBuilder_common_Person();
  swift_allocObject();
  uint64_t v12 = UsoEntityBuilder_common_Person.init()();
  swift_retain();
  dispatch thunk of UsoEntityBuilderGlobalArgs.setUsoReferenceType(value:)();
  uint64_t v52 = v11;
  swift_release();
  uint64_t v51 = v12;
  if (static UsoBuilderConversionUtils.convertEntityBuilderToEntity(entityBuilder:)())
  {
    uint64_t v13 = *(void *)(a1 + 16);
    if (v13)
    {
      uint64_t v49 = a2;
      uint64_t v50 = a3;
      uint64_t v14 = a1;
      uint64_t v15 = a1 + 32;
      swift_retain();
      uint64_t v48 = v14;
      swift_bridgeObjectRetain();
      while (1)
      {
        _s27PhoneCallFlowDelegatePlugin22SharedGlobalsProviding_pWOcTm_0();
        __swift_project_boxed_opaque_existential_1(&v60, *(uint64_t *)&v61[8]);
        v16.value = SiriPhoneContact.getContactReference()().value;
        if (v16.value == PhoneCallFlowDelegatePlugin_PhoneCallContactReference_unknownDefault)
        {
          _s27PhoneCallFlowDelegatePlugin22SharedGlobalsProviding_pWOcTm_0();
        }
        else
        {
          PhoneCallContactReference.rawValue.getter(v16.value);
          if (v18 == 6647407 && v17 == 0xE300000000000000)
          {
            swift_bridgeObjectRelease();
            _s27PhoneCallFlowDelegatePlugin22SharedGlobalsProviding_pWOcTm_0();
LABEL_21:
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v58);
LABEL_22:
            swift_retain();
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((char *)&dword_10 + (v55 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                           + (v55 & 0xFFFFFFFFFFFFFF8)) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            goto LABEL_25;
          }
          char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          _s27PhoneCallFlowDelegatePlugin22SharedGlobalsProviding_pWOcTm_0();
          if (v20) {
            goto LABEL_21;
          }
        }
        __swift_project_boxed_opaque_existential_1(&v58, *(uint64_t *)&v59[8]);
        v21.value = SiriPhoneContact.getContactReference()().value;
        if (v21.value == PhoneCallFlowDelegatePlugin_PhoneCallContactReference_unknownDefault)
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v58);
        }
        else
        {
          PhoneCallContactReference.rawValue.getter(v21.value);
          if (v23 == 2037277037 && v22 == 0xE400000000000000)
          {
            swift_bridgeObjectRelease();
            goto LABEL_21;
          }
          char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v58);
          if (v25) {
            goto LABEL_22;
          }
        }
LABEL_25:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v60);
        v15 += 40;
        if (!--v13)
        {
          swift_release();
          swift_bridgeObjectRelease();
          a3 = v50;
          a2 = v49;
          break;
        }
      }
    }
  }
  if (v55 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v46) {
      goto LABEL_38;
    }
  }
  else if (!*(void *)((char *)&dword_10 + (v55 & 0xFFFFFFFFFFFFFF8)))
  {
    goto LABEL_38;
  }
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INStartCallIntent);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  uint64_t v27 = outlined bridged method (pb) of @objc static INIntent.typeName()(ObjCClassFromMetadata);
  if (v28) {
    uint64_t v29 = v27;
  }
  else {
    uint64_t v29 = 0;
  }
  if (v28) {
    unint64_t v30 = v28;
  }
  else {
    unint64_t v30 = 0xE000000000000000;
  }
  __chkstk_darwin(v27);
  v47[-2] = &v55;
  v47[-1] = a2;
  static SiriKitEventSender.current.getter();
  uint64_t v49 = v29;
  specialized static PhoneSelfPerformanceLogger.signpost<A>(domainExecutionType:taskType:siriKitEventSender:_:)();
  uint64_t v31 = v56[0];
  uint64_t v32 = v56[1];
  uint64_t v33 = v56[2];
  uint64_t v34 = v56[3];
  uint64_t v35 = v56[4];
  LODWORD(v50) = v57;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v60);
  outlined init with take of AnnotatedApp?((uint64_t)v56, (uint64_t)&v58, &demangling cache variable for type metadata for TargetContacts?);
  if ((void)v58)
  {
    long long v60 = v58;
    *(_OWORD *)uint64_t v61 = *(_OWORD *)v59;
    *(_OWORD *)&v61[9] = *(_OWORD *)&v59[9];
    v47[1] = v30;
    uint64_t v62 = v58;
    swift_bridgeObjectRetain();
    uint64_t v48 = v31;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined release of Set<String>((uint64_t)&v62);
    outlined init with take of AnnotatedApp?((uint64_t)&v60 + 8, (uint64_t)v63, &demangling cache variable for type metadata for [ContactSourceType]?);
    outlined release of Set<String>((uint64_t)v63);
    outlined init with take of AnnotatedApp?((uint64_t)v61, (uint64_t)v64, &demangling cache variable for type metadata for [ContactQuery]?);
    outlined release of Set<String>((uint64_t)v64);
    outlined init with take of AnnotatedApp?((uint64_t)&v61[8], (uint64_t)v65, &demangling cache variable for type metadata for [UsoEntity_common_Group]?);
    outlined release of Set<String>((uint64_t)v65);
    outlined init with take of AnnotatedApp?((uint64_t)&v61[16], (uint64_t)&v66, &demangling cache variable for type metadata for [UsoEntity]?);
    outlined release of Set<String>((uint64_t)&v66);
    __swift_project_boxed_opaque_existential_1(a3, a3[3]);
    type metadata accessor for SiriKitEvent();
    char v54 = 0;
    SiriKitEvent.__allocating_init(stateType:taskType:statusReason:_:)();
    uint64_t v36 = v48;
    dispatch thunk of SiriKitEventSending.send(_:)();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    char v37 = (char)v50;
    goto LABEL_46;
  }
  swift_bridgeObjectRelease();
LABEL_38:
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v38 = type metadata accessor for Logger();
  __swift_project_value_buffer(v38, (uint64_t)static Logger.siriPhone);
  unint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v39, v40))
  {
    uint64_t v41 = (uint8_t *)swift_slowAlloc();
    uint64_t v66 = swift_slowAlloc();
    *(_DWORD *)uint64_t v41 = 136315138;
    if (one-time initialization token for logPrefix != -1) {
      swift_once();
    }
    uint64_t v42 = static NLv4Transformer.logPrefix;
    uint64_t v43 = unk_5D5060;
    *(void *)&long long v60 = 0;
    *((void *)&v60 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v42, v43, 0xD00000000000004ALL, 0x800000000049BD40);
    swift_bridgeObjectRelease();
    *(void *)&long long v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, *((unint64_t *)&v60 + 1), &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v39, v40, "%s makeCallReferenceUsoEntity: no person resolved", v41, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
    swift_release();
  }
  else
  {

    swift_release();
    swift_release();
  }
  swift_release();
  uint64_t v36 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  char v37 = 0;
LABEL_46:
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v45 = v53;
  void *v53 = v36;
  v45[1] = v32;
  void v45[2] = v33;
  v45[3] = v34;
  void v45[4] = v35;
  *((unsigned char *)v45 + 40) = v37;
  return result;
}

PhoneCallFlowDelegatePlugin::PhoneCallContactReference_optional __swiftcall SiriPhoneContact.getContactReference()()
{
  return (PhoneCallFlowDelegatePlugin::PhoneCallContactReference_optional)(*(unsigned __int8 (**)(void))(v0 + 320))();
}

uint64_t protocol witness for SiriPhoneContact.contactReference.getter in conformance PhoneCallContactIntentNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 208))();
}

uint64_t PhoneCallContactIntentNode.contactReference.getter()
{
  if (one-time initialization token for phoneCallContactReferenceNode != -1) {
    swift_once();
  }
  type metadata accessor for PhoneCallContactIntentNode(0);
  lazy protocol witness table accessor for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent(&lazy protocol witness table cache variable for type PhoneCallContactIntentNode and conformance PhoneCallContactIntentNode, (void (*)(uint64_t))type metadata accessor for PhoneCallContactIntentNode);
  OUTLINED_FUNCTION_46_27();
  return v1;
}

unsigned char *storeEnumTagSinglePayload for PhoneCallContactReference(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 37 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 37) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xDB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xDA)
  {
    unsigned int v6 = ((a2 - 219) >> 8) + 1;
    *uint64_t result = a2 + 37;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 37;
        break;
    }
  }
  return result;
}

uint64_t objectdestroy_24Tm()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t objectdestroy_3Tm()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t objectdestroy_38Tm()
{
  swift_release();

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 88);
  __swift_destroy_boxed_opaque_existential_1(v0 + 128);
  __swift_destroy_boxed_opaque_existential_1(v0 + 168);
  swift_release();

  return _swift_deallocObject(v0, 224, 7);
}

uint64_t objectdestroy_38Tm_0()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t outlined destroy of SKTransformer(uint64_t a1)
{
  return a1;
}

#error "34340: call analysis failed (funcsize=357)"

uint64_t @nonobjc INStartCallIntent.contacts.getter()
{
  return outlined bridged method (pb) of @objc INStartCallIntent.contacts.getter(v0, (SEL *)&selRef_contacts, (unint64_t *)&lazy cache variable for type metadata for INPerson);
}

void CallingIntentNeedsValueFlowStrategy.updateContactsInIntent(callingIntent:contacts:multicardinalIndex:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  OUTLINED_FUNCTION_57();
  a25 = v26;
  a26 = v27;
  char v29 = v28;
  uint64_t v31 = v30;
  unint64_t v33 = v32;
  uint64_t v35 = v34;
  char v37 = v36;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v39 = *(void *)(*(void *)(v35 + 8) + 8);
  os_log_type_t v40 = *(uint64_t (**)(uint64_t, uint64_t))(v39 + 8);
  unint64_t v41 = v40(ObjectType, v39);
  if (!v41)
  {
LABEL_32:
    OUTLINED_FUNCTION_34_20();
    return;
  }
  unint64_t v42 = v41;
  if (!(v41 >> 62))
  {
    if (*(void *)((char *)&dword_10 + (v41 & 0xFFFFFFFFFFFFFF8))) {
      goto LABEL_4;
    }
LABEL_21:
    OUTLINED_FUNCTION_34_20();
    swift_bridgeObjectRelease();
    return;
  }
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_21;
  }
LABEL_4:
  uint64_t v69 = ObjectType;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v42 & 0xC000000000000001) == 0, v42);
  if ((v42 & 0xC000000000000001) != 0) {
    id v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v43 = *(id *)(v42 + 32);
  }
  uint64_t v44 = v43;
  swift_bridgeObjectRelease();
  if (v29) {
    uint64_t v31 = 0;
  }
  uint64_t v45 = &unk_583000;
  if (!v33) {
    goto LABEL_26;
  }
  if (v33 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v55 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v55) {
      goto LABEL_11;
    }
LABEL_26:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v56 = swift_allocObject();
    *(_OWORD *)(v56 + 16) = xmmword_46A030;
    *(void *)(v56 + 32) = v44;
    a14 = v56;
    specialized Array._endMutation()();
    uint64_t v57 = a14;
    long long v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16);
    id v59 = v44;
    uint64_t v53 = v69;
    v58(v57, v69, v39);
    goto LABEL_27;
  }
  if (!*(void *)((char *)&dword_10 + (v33 & 0xFFFFFFFFFFFFFF8))) {
    goto LABEL_26;
  }
LABEL_11:
  a14 = v33;
  uint64_t v46 = one-time initialization token for siriPhone;
  swift_bridgeObjectRetain();
  if (v46 != -1) {
    swift_once();
  }
  uint64_t v47 = type metadata accessor for Logger();
  uint64_t v48 = OUTLINED_FUNCTION_25_0(v47, (uint64_t)static Logger.siriPhone);
  os_log_type_t v49 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v48, v49))
  {
    long long v68 = v44;
    uint64_t v50 = (uint8_t *)OUTLINED_FUNCTION_47();
    *(_DWORD *)uint64_t v50 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v48, v49, "#CallingIntentNeedsValueFlowStrategy updating contact at multicardinalValueIndex : %ld", v50, 0xCu);
    uint64_t v44 = v68;
    OUTLINED_FUNCTION_6();
  }

  uint64_t v45 = (void *)&unk_583000;
  if (v33 >> 62)
  {
    id v67 = v44;
    swift_bridgeObjectRetain();
    uint64_t v51 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v51 = *(void *)((char *)&dword_10 + (v33 & 0xFFFFFFFFFFFFFF8));
    id v52 = v44;
  }
  uint64_t v53 = v69;
  if (v51 < v31)
  {
    __break(1u);
  }
  else if ((v31 & 0x8000000000000000) == 0)
  {
    specialized Array.replaceSubrange<A>(_:with:)(v31, v31, (uint64_t)v44);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(a14, v69, v39);
LABEL_27:
    swift_bridgeObjectRelease();
    if (v45[466] != -1) {
      swift_once();
    }
    uint64_t v60 = type metadata accessor for Logger();
    __swift_project_value_buffer(v60, (uint64_t)static Logger.siriPhone);
    id v61 = v37;
    uint64_t v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v64 = (uint8_t *)OUTLINED_FUNCTION_47();
      a14 = OUTLINED_FUNCTION_14_0();
      *(_DWORD *)uint64_t v64 = 136315138;
      v40(v53, v39);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]?);
      uint64_t v65 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v66, &a14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v62, v63, "#CallingIntentNeedsValueFlowStrategy updated contacts: %s", v64, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {
    }
    goto LABEL_32;
  }
  __break(1u);
}

Swift::Void __swiftcall INStartCallIntent.overwriteContacts(newContacts:)(Swift::OpaquePointer newContacts)
{
  void v6[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
  v6[0] = newContacts._rawValue;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = (__n128 *)swift_initStackObject();
  OUTLINED_FUNCTION_45_4(inited, (__n128)xmmword_467720);
  OUTLINED_FUNCTION_134();
  *(void *)(v3 + 48) = v4;
  *(void *)(v3 + 56) = v5;
  swift_bridgeObjectRetain();
  NSObject.update(with:at:)((uint64_t)v6, (uint64_t)inited);
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

uint64_t specialized _ContiguousArrayStorage.__deallocating_deinit()
{
  OUTLINED_FUNCTION_59_6();
  swift_arrayDestroy();
  OUTLINED_FUNCTION_17_7();

  return swift_deallocClassInstance();
}

{
  uint64_t vars8;

  OUTLINED_FUNCTION_59_6();
  swift_arrayDestroy();
  OUTLINED_FUNCTION_17_7();

  return swift_deallocClassInstance();
}

{
  return specialized _ContiguousArrayStorage.__deallocating_deinit(&demangling cache variable for type metadata for UsoVocIdentifier);
}

{
  uint64_t vars8;

  type metadata accessor for RRCandidate();
  swift_arrayDestroy();
  OUTLINED_FUNCTION_17_7();

  return swift_deallocClassInstance();
}

{
  uint64_t vars8;

  OUTLINED_FUNCTION_59_6();
  swift_arrayDestroy();
  OUTLINED_FUNCTION_17_7();

  return swift_deallocClassInstance();
}

{
  uint64_t vars8;

  OUTLINED_FUNCTION_59_6();
  swift_arrayDestroy();
  OUTLINED_FUNCTION_17_7();

  return swift_deallocClassInstance();
}

id @nonobjc INStartCallIntent.preferredCallProvider.getter()
{
  return [v0 preferredCallProvider];
}

uint64_t CallingIntentNeedsValueFlowStrategy.executeCRR(siriKitIntent:nlIntent:resolveRecord:isNLv3Only:)()
{
  unsigned __int8 v1 = *(void **)(v0 + 16);
  swift_getAssociatedTypeWitness();
  OUTLINED_FUNCTION_61();
  swift_getAssociatedConformanceWitness();
  CallingIntentNeedsValueFlowStrategy.executeCRRDeprecated(siriKitIntent:nlIntent:resolveRecord:isNLv3Only:)();
  OUTLINED_FUNCTION_47_0();
  unsigned int v6 = v2;
  id v3 = v1;
  uint64_t v4 = *(void *)(v0 + 16);
  return v6(v4);
}

uint64_t CallingIntentNeedsValueFlowStrategy.executeCRR(siriKitIntent:nlIntent:resolveRecord:isNLv3Only:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(unsigned char *)(v5 + 56) = a4;
  *(void *)(v5 + 32) = a3;
  *(void *)(v5 + 40) = v4;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  OUTLINED_FUNCTION_2();
  *(void *)(v5 + 48) = v6;
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

void CallingIntentNeedsValueFlowStrategy.executeCRRDeprecated(siriKitIntent:nlIntent:resolveRecord:isNLv3Only:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v1 = v0;
  char v3 = v2;
  uint64_t v64 = v4;
  id v67 = v5;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = type metadata accessor for ParameterIdentifier();
  OUTLINED_FUNCTION_0_0();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_4();
  uint64_t v16 = v15 - v14;
  type metadata accessor for Locale();
  OUTLINED_FUNCTION_0_0();
  __chkstk_darwin(v17);
  OUTLINED_FUNCTION_4();
  uint64_t v20 = v19 - v18;
  uint64_t v65 = v7;
  uint64_t v66 = v9;
  uint64_t v62 = v21;
  if (v3)
  {
    swift_getAssociatedTypeWitness();
    OUTLINED_FUNCTION_94_2();
    uint64_t v61 = ParameterResolutionRecord.app.getter();
    __swift_project_boxed_opaque_existential_1((void *)(v1 + 24), *(void *)(v1 + 48));
    OUTLINED_FUNCTION_24_2();
    v22();
    __swift_project_boxed_opaque_existential_1(v73, v74);
    dispatch thunk of DeviceState.siriLocale.getter();
    ParameterResolutionRecord.parameter.getter();
    uint64_t v23 = ParameterIdentifier.multicardinalIndex.getter();
    uint64_t v25 = v24 & 1;
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v16, v10);
    uint64_t ObjectType = swift_getObjectType();
    specialized static ContactResolution.updateSiriKitIntentNLv3(siriKitIntent:nlIntent:app:locale:sharedGlobals:multicardinalIndex:)(v9, (uint64_t)v67, v61, v20, v1 + 24, v23, v25, ObjectType, v65, v49, v50, v52, v54, v56, v57, v59, v1 + 24, v61, v62,
      v64,
      v65);
    swift_release();
    OUTLINED_FUNCTION_26_0();
    v27();
  }
  else
  {
    uint64_t v60 = v16;
    uint64_t v51 = v19 - v18;
    __swift_project_boxed_opaque_existential_1((void *)(v1 + 24), *(void *)(v1 + 48));
    uint64_t v28 = OUTLINED_FUNCTION_78_6();
    v29(v28);
    OUTLINED_FUNCTION_23();
    char v31 = (*(uint64_t (**)(void))(v30 + 224))();
    swift_release();
    uint64_t v58 = swift_getObjectType();
    uint64_t v32 = v67[3];
    uint64_t v33 = v67[4];
    uint64_t v34 = (void *)OUTLINED_FUNCTION_39_1();
    __swift_project_boxed_opaque_existential_1(v34, v35);
    uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 128))(v32, v33);
    __swift_project_boxed_opaque_existential_1(v67, v67[3]);
    OUTLINED_FUNCTION_80_5();
    Swift::Bool v55 = PhoneCallNLIntent.isEmergencyContactCall()();
    swift_getAssociatedTypeWitness();
    OUTLINED_FUNCTION_94_2();
    ParameterResolutionRecord.app.getter();
    if (v31)
    {
      OUTLINED_FUNCTION_83_3();
      uint64_t v37 = ParameterIdentifier.multicardinalIndex.getter();
      uint64_t v39 = v38 & 1;
      OUTLINED_FUNCTION_11();
      v40();
      static SiriKitEventSender.current.getter();
      type metadata accessor for EmergencyContactResolution();
      uint64_t v41 = OUTLINED_FUNCTION_18_17();
      uint64_t v71 = type metadata accessor for ContactGroupResolver();
      uint64_t v72 = &protocol witness table for ContactGroupResolver;
      __swift_allocate_boxed_opaque_existential_1(&v68);
      ContactGroupResolver.init()();
      OUTLINED_FUNCTION_60_10();
      specialized static ReferenceContactResolutionWrapper.resolveUpdateSKIntent(siriKitIntent:contactQueries:hasEmergencyContact:app:nlIntent:sharedGlobals:multicardinalIndex:siriKitEventSender:emergencyContactResolution:contactGroupResolver:)(v66, v36, v55, v58, (uint64_t)v67, v1 + 24, v37, v39, (uint64_t)v73, v41, (uint64_t)&v68, v58, v58, v16, v12, v10, v62, v64, v65,
        v66,
        (uint64_t)v67,
        v68,
        v69,
        v70,
        v71);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
    }
    else
    {
      __swift_project_boxed_opaque_existential_1((void *)(v1 + 24), *(void *)(v1 + 48));
      OUTLINED_FUNCTION_24_2();
      v42();
      __swift_project_boxed_opaque_existential_1(v73, v74);
      uint64_t v43 = v51;
      dispatch thunk of DeviceState.siriLocale.getter();
      OUTLINED_FUNCTION_83_3();
      uint64_t v44 = ParameterIdentifier.multicardinalIndex.getter();
      char v46 = v45 & 1;
      OUTLINED_FUNCTION_11();
      v47();
      static SiriKitEventSender.current.getter();
      type metadata accessor for EmergencyContactResolution();
      OUTLINED_FUNCTION_18_17();
      OUTLINED_FUNCTION_60_10();
      LOBYTE(v51) = v46;
      specialized static ContactResolution.updateSiriKitIntent(siriKitIntent:contactQueries:hasEmergencyContact:app:locale:nlIntent:sharedGlobals:multicardinalIndex:siriKitEventSender:emergencyContactResolution:)(v66, v36, v55, v58, v43, (uint64_t)v67, v1 + 24, v44, v51, (uint64_t)&v68, v48, v58, v58, v60, v12, v10, v62, v64, v65,
        v66,
        (char)v67,
        v68,
        v69,
        v70,
        v71);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v43, v63);
    }
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
  OUTLINED_FUNCTION_26_1();
}

uint64_t dynamic_cast_existential_1_conditional(uint64_t a1)
{
  if (swift_conformsToProtocol2()) {
    return a1;
  }
  else {
    return 0;
  }
}

id @nonobjc INStartCallIntent.destinationType.getter()
{
  return [v0 destinationType];
}

BOOL INPerson.hasHandleValue.getter()
{
  id v1 = [v0 personHandle];
  if (v1)
  {
    id v1 = (id)outlined bridged method (ob) of @objc INPersonHandle.value.getter(v1, (SEL *)&selRef_value);
    unint64_t v3 = v2;
  }
  else
  {
    unint64_t v3 = 0;
  }
  char v4 = specialized Optional<A>.isNilOrEmpty.getter((uint64_t)v1, v3);
  swift_bridgeObjectRelease();
  return (v4 & 1) == 0;
}

Swift::Bool __swiftcall PhoneCallNLIntent.isDisplayNameEmergencyContact()()
{
  OUTLINED_FUNCTION_21_22();
  uint64_t v2 = *(void *)(v1() + 16);
  if (!v2)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  OUTLINED_FUNCTION_116_0();
  while (1)
  {
    OUTLINED_FUNCTION_178();
    uint64_t v3 = v9;
    uint64_t v4 = v10;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 408))(v3, v4);
    if (!v6)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
      goto LABEL_9;
    }
    if (v5 == 0xD000000000000011 && v6 == 0x80000000004936D0) {
      break;
    }
    OUTLINED_FUNCTION_173();
    OUTLINED_FUNCTION_77_3();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    if (v3) {
      goto LABEL_14;
    }
LABEL_9:
    v0 += 40;
    if (!--v2)
    {
      OUTLINED_FUNCTION_2_16();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
LABEL_14:
  OUTLINED_FUNCTION_2_16();
  return 1;
}

uint64_t OUTLINED_FUNCTION_201_0(uint64_t result)
{
  *(void *)(v1 + 72) = result;
  *(void *)(v1 + 48) = v2;
  return result;
}

uint64_t OUTLINED_FUNCTION_201_1@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  v2[12] = a2;
  v2[15] = result;
  v2[16] = 0xD000000000000013;
  return result;
}

uint64_t type metadata accessor for EmergencyContactResolution()
{
  return self;
}

uint64_t type metadata accessor for ContactResolverConfigHashable()
{
  uint64_t result = type metadata singleton initialization cache for ContactResolverConfigHashable;
  if (!type metadata singleton initialization cache for ContactResolverConfigHashable) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (agent: UsoEntity_common_Agent, person: UsoEntity_common_Person));
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (agent: UsoEntity_common_Agent, contactRole: PhoneCallContactRole));
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ());
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (a2 - a1 < 0)
  {
LABEL_9:
    OUTLINED_FUNCTION_1_18();
    OUTLINED_FUNCTION_40_3();
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  OUTLINED_FUNCTION_19_9();
  OUTLINED_FUNCTION_59_1();
  if (v8) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = v7 > a3;
  }
  if (!v9)
  {
    swift_arrayInitWithCopy();
    swift_bridgeObjectRelease();
    return a1;
  }
  OUTLINED_FUNCTION_1_18();
  OUTLINED_FUNCTION_39_2();
LABEL_11:
  uint64_t result = OUTLINED_FUNCTION_9_2();
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  unint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    OUTLINED_FUNCTION_1_18();
    OUTLINED_FUNCTION_40_3();
    goto LABEL_11;
  }
  unint64_t v6 = a4 + 40 * a1 + 32;
  unint64_t v7 = a3 + 40 * v5;
  if (v6 >= v7 || v6 + 40 * v5 <= a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    swift_arrayInitWithCopy();
    swift_bridgeObjectRelease();
    return v7;
  }
  OUTLINED_FUNCTION_1_18();
  OUTLINED_FUNCTION_39_2();
LABEL_11:
  uint64_t result = OUTLINED_FUNCTION_9_2();
  __break(1u);
  return result;
}

uint64_t outlined bridged method (pb) of @objc INIntent.intentId.getter(void *a1)
{
  return outlined bridged method (pb) of @objc INCallGroup.groupName.getter(a1, (SEL *)&selRef_intentId);
}

uint64_t outlined init with copy of ContactHandleTypePreference?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactHandleTypePreference?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ContactHandleTypePreference?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactHandleTypePreference?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for PhoneSelfPerformanceLogger()
{
  return self;
}

uint64_t PhoneSelfPerformanceLogger.init(siriKitEventSender:domainExecutionType:taskType:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for UUID();
  __chkstk_darwin(v10 - 8);
  *(unsigned char *)(v5 + 88) = 0;
  outlined init with copy of SignalProviding(a1, v5 + 16);
  *(_DWORD *)(v5 + 56) = a2;
  *(void *)(v5 + 64) = a3;
  *(void *)(v5 + 72) = a4;
  type metadata accessor for SISchemaUUID();
  UUID.init()();
  *(void *)(v5 + 80) = SISchemaUUID.__allocating_init(nsuuid:)();
  PhoneSelfPerformanceLogger.createAndLogStartEvent()();
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v5;
}

id SISchemaUUID.__allocating_init(nsuuid:)()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v2 = [v0 initWithNSUUID:isa];

  type metadata accessor for UUID();
  OUTLINED_FUNCTION_15();
  uint64_t v3 = OUTLINED_FUNCTION_69_2();
  v4(v3);
  return v2;
}

void PhoneSelfPerformanceLogger.createAndLogStartEvent()()
{
  id v1 = [objc_allocWithZone((Class)FLOWSchemaFLOWDomainExecutionStarted) init];
  if (v1)
  {
    id v2 = v1;
    [v1 setDomainExecutionType:*(unsigned int *)(v0 + 56)];
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_4_24(v3, (uint64_t)static Logger.siriPhone);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      unint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)unint64_t v6 = 136315138;
      uint64_t v7 = FLOWSchemaFLOWDomainExecutionType.description.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_6_2();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v4, v5, "#PhoneSelfPerformanceLogger Registered start event for %s", v6, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {

      OUTLINED_FUNCTION_6_2();
    }
    PhoneSelfPerformanceLogger.logEvent(_:eventType:)((uint64_t)v2, 0);
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_4_24(v9, (uint64_t)static Logger.siriPhone);
    uint64_t v10 = (void *)Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_21_19(v11))
    {
      OUTLINED_FUNCTION_4_55();
      uint64_t v16 = OUTLINED_FUNCTION_11_29();
      uint64_t v12 = OUTLINED_FUNCTION_4_76(4.8149e-34);
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v16);
      OUTLINED_FUNCTION_7_3();
      OUTLINED_FUNCTION_6_2();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_22_6(&dword_0, v14, v15, "#PhoneSelfPerformanceLogger Failed to create start event for %s");
      OUTLINED_FUNCTION_6_71();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {

      OUTLINED_FUNCTION_6_2();
    }
  }
}

void PhoneSelfPerformanceLogger.logEvent(_:eventType:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  osos_log_t log = [objc_allocWithZone((Class)FLOWSchemaFLOWDomainExecutionContext) init];
  if (!oslog)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.siriPhone);
    osos_log_t log = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_0, oslog, v9, "#PhoneSelfPerformanceLogger Failed to create execution context", v10, 2u);
      OUTLINED_FUNCTION_6();
    }
    goto LABEL_30;
  }
  self;
  uint64_t v5 = swift_dynamicCastObjCClass();
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = &selRef_setStartedOrChanged_;
  }
  else
  {
    self;
    uint64_t v11 = swift_dynamicCastObjCClass();
    if (v11)
    {
      uint64_t v6 = v11;
      uint64_t v7 = &selRef_setFailed_;
    }
    else
    {
      self;
      uint64_t v12 = swift_dynamicCastObjCClass();
      if (!v12) {
        goto LABEL_13;
      }
      uint64_t v6 = v12;
      uint64_t v7 = &selRef_setEnded_;
    }
  }
  objc_msgSend(oslog, *v7, v6);
LABEL_13:
  id v13 = [objc_allocWithZone((Class)FLOWSchemaFLOWClientEvent) init];
  if (v13)
  {
    uint64_t v14 = v13;
    [oslog setContextId:v3[10]];
    [v14 setFlowDomainExecutionContext:oslog];
    type metadata accessor for SiriKitEvent();
    swift_bridgeObjectRetain();
    id v15 = v14;
    SiriKitEvent.__allocating_init(taskType:domainPerfContext:_:)();
    __swift_project_boxed_opaque_existential_1(v3 + 2, v3[5]);
    dispatch thunk of SiriKitEventSending.send(_:)();
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_4_24(v16, (uint64_t)static Logger.siriPhone);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136315394;
      if (a2)
      {
        if (a2 == 1) {
          uint64_t v20 = 0x6572756C696166;
        }
        else {
          uint64_t v20 = 6581861;
        }
        if (a2 == 1) {
          unint64_t v21 = 0xE700000000000000;
        }
        else {
          unint64_t v21 = 0xE300000000000000;
        }
      }
      else
      {
        unint64_t v21 = 0xE500000000000000;
        uint64_t v20 = 0x7472617473;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 12) = 2080;
      uint64_t v26 = FLOWSchemaFLOWDomainExecutionType.description.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_6_2();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v17, v18, "#PhoneSelfPerformanceLogger successfully sent %s performance event for %s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();

      swift_release();
      return;
    }

    swift_release();
    OUTLINED_FUNCTION_6_2();

    goto LABEL_30;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Logger.siriPhone);
  os_log_t log = (os_log_t)Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(log, v23))
  {

LABEL_30:
    uint64_t v25 = oslog;
    goto LABEL_31;
  }
  char v24 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)char v24 = 0;
  _os_log_impl(&dword_0, log, v23, "#PhoneSelfPerformanceLogger Failed to create client event", v24, 2u);
  OUTLINED_FUNCTION_6();

  uint64_t v25 = log;
LABEL_31:
}

uint64_t SharedGlobals.phoneContactResolver.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SharedGlobalsProviding(v1 + 48, a1);
}

uint64_t protocol witness for SiriKitContactResolverProtocol.resolveContacts(queries:configHash:) in conformance PhoneContactResolver()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 192))();
}

NSObject *PhoneContactResolver.resolveContacts(queries:configHash:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v8 = type metadata accessor for ContactResolverConfigHashable();
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v56 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v56 - v15;
  uint64_t v17 = PhoneContactResolver.get(config:queries:)(a2, a1);
  if (v17)
  {
    os_log_type_t v18 = v17;
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.siriPhone);
    outlined init with copy of ContactResolverConfigHashable(a2, (uint64_t)v16);
    swift_bridgeObjectRetain_n();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v60 = v3;
      uint64_t v23 = v22;
      uint64_t v59 = (char *)swift_slowAlloc();
      uint64_t v62 = v59;
      *(_DWORD *)uint64_t v23 = 136315394;
      type metadata accessor for ContactQuery();
      swift_bridgeObjectRetain();
      uint64_t v24 = Array.description.getter();
      uint64_t v25 = v18;
      unint64_t v27 = v26;
      swift_bridgeObjectRelease();
      uint64_t v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v27, (uint64_t *)&v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_4_50();
      os_log_type_t v18 = v25;
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2080;
      uint64_t v28 = ContactResolverConfigHashable.description.getter();
      uint64_t v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, (uint64_t *)&v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of ContactResolverConfigHashable((uint64_t)v16);
      _os_log_impl(&dword_0, v20, v21, "#PhoneContactResolver resolveContacts: reusing cached result for contactQuery:%s and config:%s.", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {
      OUTLINED_FUNCTION_4_50();
      outlined destroy of ContactResolverConfigHashable((uint64_t)v16);
    }
  }
  else
  {
    uint64_t v59 = v11;
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    uint64_t v31 = __swift_project_value_buffer(v30, (uint64_t)static Logger.siriPhone);
    outlined init with copy of ContactResolverConfigHashable(a2, (uint64_t)v14);
    swift_bridgeObjectRetain_n();
    os_log_type_t v18 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v32))
    {
      uint64_t v33 = swift_slowAlloc();
      uint64_t v57 = v31;
      uint64_t v34 = v33;
      uint64_t v56 = swift_slowAlloc();
      uint64_t v62 = (char *)v56;
      *(_DWORD *)uint64_t v34 = 136315394;
      type metadata accessor for ContactQuery();
      swift_bridgeObjectRetain();
      uint64_t v35 = Array.description.getter();
      uint64_t v58 = v2;
      uint64_t v36 = v35;
      uint64_t v60 = v3;
      unint64_t v38 = v37;
      swift_bridgeObjectRelease();
      uint64_t v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v38, (uint64_t *)&v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_4_50();
      swift_bridgeObjectRelease();
      *(_WORD *)(v34 + 12) = 2080;
      uint64_t v39 = ContactResolverConfigHashable.description.getter();
      uint64_t v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, (uint64_t *)&v62);
      uint64_t v5 = v58;
      uint64_t v4 = v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of ContactResolverConfigHashable((uint64_t)v14);
      _os_log_impl(&dword_0, v18, v32, "#PhoneContactResolver resolveContacts: no cached result for contactQuery:%s and config:%s.", (uint8_t *)v34, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {
      OUTLINED_FUNCTION_4_50();
      outlined destroy of ContactResolverConfigHashable((uint64_t)v14);
    }

    __chkstk_darwin(v41);
    *(&v56 - 4) = v5;
    *(&v56 - 3) = a1;
    *(&v56 - 2) = a2;
    uint64_t v42 = PhoneContactResolver.signpost(configHash:around:)(a2, (uint64_t)partial apply for closure #1 in PhoneContactResolver.resolveContacts(queries:configHash:), (uint64_t)(&v56 - 6));
    if (!v4)
    {
      os_log_type_t v18 = v42;
      uint64_t v43 = (uint64_t)v59;
      outlined init with copy of ContactResolverConfigHashable(a2, (uint64_t)v59);
      swift_bridgeObjectRetain_n();
      uint64_t v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.debug.getter();
      int v46 = v45;
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v47 = swift_slowAlloc();
        uint64_t v48 = swift_slowAlloc();
        uint64_t v58 = v5;
        uint64_t v62 = (char *)v48;
        *(_DWORD *)uint64_t v47 = 136315394;
        LODWORD(v56) = v46;
        type metadata accessor for ContactQuery();
        swift_bridgeObjectRetain();
        uint64_t v49 = Array.description.getter();
        uint64_t v60 = 0;
        uint64_t v50 = v49;
        uint64_t v57 = v18;
        unint64_t v52 = v51;
        swift_bridgeObjectRelease();
        uint64_t v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v52, (uint64_t *)&v62);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_4_50();
        swift_bridgeObjectRelease();
        *(_WORD *)(v47 + 12) = 2080;
        uint64_t v53 = ContactResolverConfigHashable.description.getter();
        uint64_t v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, (uint64_t *)&v62);
        os_log_type_t v18 = v57;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of ContactResolverConfigHashable(v43);
        _os_log_impl(&dword_0, v44, (os_log_type_t)v56, "#PhoneContactResolver resolveContacts: caching result from CRR for contactQuery:%s and config:%s.", (uint8_t *)v47, 0x16u);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_6();
        OUTLINED_FUNCTION_6();
      }
      else
      {
        OUTLINED_FUNCTION_4_50();
        outlined destroy of ContactResolverConfigHashable(v43);
      }

      PhoneContactResolver.update(config:queries:resolvedSiriKitContacts:)();
    }
  }
  return v18;
}

uint64_t PhoneContactResolver.get(config:queries:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_beginAccess();
  uint64_t v6 = *(void *)(v2 + 16);
  if (!*(void *)(v6 + 16)) {
    return 0;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v9 = *(void *)(*(void *)(v6 + 56) + 8 * v7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = swift_bridgeObjectRetain();
  char v11 = specialized static Array<A>.== infix(_:_:)(v10, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v11 & 1) == 0) {
    return 0;
  }
  swift_beginAccess();
  uint64_t v12 = *(void *)(v3 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v13 = specialized Dictionary.subscript.getter(a2, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t ContactResolverConfigHashable.hash(into:)(uint64_t a1)
{
  type metadata accessor for ContactActionType();
  OUTLINED_FUNCTION_0_0();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_4();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v4 = type metadata accessor for ContactResolverConfigHashable();
  type metadata accessor for Locale();
  lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type Locale and conformance Locale, (void (*)(uint64_t))&type metadata accessor for Locale);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v5 = *(void *)(v1 + *(int *)(v4 + 28));
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v5);
  swift_bridgeObjectRelease();
  ContactResolverConfig.actionType.getter();
  lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type ContactActionType and conformance ContactActionType, (void (*)(uint64_t))&type metadata accessor for ContactActionType);
  dispatch thunk of Hashable.hash(into:)();
  OUTLINED_FUNCTION_10_8();
  return v6();
}

void specialized Array<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = a2 + 40;
    do
    {
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v4 += 16;
      --v3;
    }
    while (v3);
  }
}

{
  Swift::UInt v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = *(void *)(type metadata accessor for ContactQuery() - 8);
    uint64_t v5 = a2 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v6 = *(void *)(v4 + 72);
    lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type ContactQuery and conformance ContactQuery, (void (*)(uint64_t))&type metadata accessor for ContactQuery);
    do
    {
      dispatch thunk of Hashable.hash(into:)();
      v5 += v6;
      --v3;
    }
    while (v3);
  }
}

uint64_t outlined init with copy of ContactResolverConfigHashable(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ContactResolverConfigHashable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void *initializeWithCopy for ContactResolverConfigHashable(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Locale();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  uint64_t v13 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for ContactResolverConfig();
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
  swift_bridgeObjectRetain();
  v17(v14, v15, v16);
  return a1;
}

uint64_t outlined destroy of ContactResolverConfigHashable(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ContactResolverConfigHashable();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for ContactResolverConfigHashable(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + *(int *)(a2 + 32);
  uint64_t v7 = type metadata accessor for ContactResolverConfig();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);

  return v8(v6, v7);
}

uint64_t protocol witness for SiriKitContactResolverProtocol.resolveContacts(queries:configHash:) in conformance SiriKitContactResolver()
{
  return SiriKitContactResolver.resolveContacts(queries:configHash:)();
}

uint64_t SiriKitContactResolver.resolveContacts(queries:configHash:)()
{
  return SiriKitContactResolver.resolveContacts(queries:config:)();
}

uint64_t PhoneContactResolver.update(config:queries:resolvedSiriKitContacts:)()
{
  return swift_bridgeObjectRelease();
}

uint64_t static PhoneContactDisambiguationProperties.maxItemsForVoxReadout.getter()
{
  return 5;
}

char *OUTLINED_FUNCTION_27_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  return &a11;
}

void OUTLINED_FUNCTION_27_4(uint64_t a1@<X8>)
{
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = 2 * (a1 / v1);
}

uint64_t OUTLINED_FUNCTION_27_5()
{
  *(void *)(v0 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_14_3()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_4_6(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_27_6()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_27_7()
{
  return swift_arrayDestroy();
}

__n128 *OUTLINED_FUNCTION_106(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x746E65746E69;
  result[2].n128_u64[1] = 0xE600000000000000;
  return result;
}

uint64_t OUTLINED_FUNCTION_27_9(uint64_t result)
{
  *(void *)(v1 - 128) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_35_0(uint64_t result)
{
  *(void *)(v1 + 56) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_60(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_27_10()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_27_11()
{
  return outlined init with copy of Result<TemplatingResult, Error>(v1, v0, v2);
}

uint64_t OUTLINED_FUNCTION_27_12(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  return outlined init with copy of ButtonBuilder(v6, (uint64_t)va);
}

uint64_t OUTLINED_FUNCTION_27_13(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(0);
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_27_14()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_27_16(uint64_t result)
{
  *(void *)(v2 + 48) = v1;
  *(void *)(v2 + 72) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_27_17(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_24_4(uint64_t a1)
{
  *(void *)(v1 + 72) = a1;
  *(void *)(v1 + 80) = 0xD000000000000018;
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_27_18(uint64_t a1)
{
  *(void *)(v1 + 120) = a1;
  *(void *)(v1 + 128) = 0xD000000000000015;
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_27_19()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_27_20(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 2, v1);
}

uint64_t OUTLINED_FUNCTION_27_21()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_27_22(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_task_switch(a1, a2, a3);
}

uint64_t OUTLINED_FUNCTION_89(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_27_23(float a1)
{
  *uint64_t v2 = a1;
  *(void *)(v1 + 312) = v3;
  return swift_getMetatypeMetadata();
}

uint64_t OUTLINED_FUNCTION_27_26()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_27_27()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

unint64_t OUTLINED_FUNCTION_27_28()
{
  return 0xD000000000000038;
}

uint64_t OUTLINED_FUNCTION_27_29()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_27_30()
{
  return type metadata accessor for ContactResolverConfigHashable();
}

uint64_t OUTLINED_FUNCTION_27_32()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_27_33(float a1)
{
  float *v1 = a1;
  *(void *)(v2 - 240) = v1 + 1;
  *(void *)(v2 - 168) = 0;
  *(void *)(v2 - 160) = 0xE000000000000000;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_27_34()
{
  return *(void *)(v0 - 280);
}

uint64_t OUTLINED_FUNCTION_27_35()
{
  uint64_t v2 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 256);
  return outlined init with copy of ButtonConfigurationModel(v2, v3);
}

void OUTLINED_FUNCTION_27_36()
{
  *(_DWORD *)(v0 - 176) = 0;
  *(_DWORD *)(v0 - 168) = 0;
  *(_DWORD *)(v0 - 160) = 0;
  *(_DWORD *)(v0 - 152) = 0;
  *(_DWORD *)(v0 - 136) = 0;
  *(_DWORD *)(v0 - 128) = 0;
  *(_DWORD *)(v0 - 120) = 0;
  *(_DWORD *)(v0 - 216) = 1;
  *(_DWORD *)(v0 - 208) = 1;
  *(_DWORD *)(v0 - 200) = 1;
  *(_DWORD *)(v0 - 192) = 1;
}

uint64_t OUTLINED_FUNCTION_27_37()
{
  return v0;
}

BOOL OUTLINED_FUNCTION_27_38(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_0_2()
{
  return 0x6C6143656E6F6870;
}

uint64_t OUTLINED_FUNCTION_27_39()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_27_41(uint64_t a1)
{
  *(void *)(v1 - 72) = a1;
  return v1 - 72;
}

uint64_t OUTLINED_FUNCTION_21_2()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_34()
{
  return 0;
}

unint64_t OUTLINED_FUNCTION_44_0(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

void OUTLINED_FUNCTION_25_4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v4, a4, v6, 2u);
}

uint64_t OUTLINED_FUNCTION_20_0()
{
  return swift_allocError();
}

uint64_t OUTLINED_FUNCTION_21_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_21_5()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_36()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_21_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_1_4(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_21_8(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_0_3(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_19_2()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_10_0()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_43_0()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_21_9()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_21_10@<X0>(uint64_t a1@<X8>)
{
  return specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(a1 + 63) >> 6, v1);
}

uint64_t OUTLINED_FUNCTION_21_11()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_21_12(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  return v1 - 112;
}

uint64_t OUTLINED_FUNCTION_21_13()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_16_3(uint64_t a1, uint64_t a2)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

void OUTLINED_FUNCTION_21_14()
{
}

uint64_t OUTLINED_FUNCTION_21_15()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_115()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_9_4()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_21_16()
{
  *(void *)(v2 - 256) = v0;
  return v1;
}

uint64_t OUTLINED_FUNCTION_36_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_21_17()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_21_18()
{
  return v0;
}

BOOL OUTLINED_FUNCTION_21_19(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

BOOL OUTLINED_FUNCTION_37_0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_21_20()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_2_1()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_21_23()
{
  return type metadata accessor for OSSignposter();
}

uint64_t OUTLINED_FUNCTION_21_24()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_19_3()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_21_25()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_21_26(uint64_t a1, uint64_t a2)
{
  __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_21_27(float a1)
{
  float *v1 = a1;
  *(void *)(v2 + 376) = v3;
  return swift_getMetatypeMetadata();
}

uint64_t OUTLINED_FUNCTION_21_28(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(a1, 0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_21_30(uint64_t a1)
{
  v2[6] = v1;
  v2[9] = a1;
  v2[10] = 0x746E65746E69;
  v2[11] = 0xE600000000000000;
  return 0;
}

uint64_t OUTLINED_FUNCTION_21_31()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_21_32@<X0>(uint64_t a1@<X8>)
{
  return __swift_storeEnumTagSinglePayload(v1 + a1, 1, 1, v2);
}

uint64_t OUTLINED_FUNCTION_21_33(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 - 280) = a5;
  *(void *)(v5 - 288) = a4;
  *(void *)(v5 - 296) = a2;
  *(void *)(v5 - 304) = result;
  return result;
}

void OUTLINED_FUNCTION_21_34(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 256) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_21_36()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_21_37()
{
  return String.init<A>(describing:)();
}

uint64_t OUTLINED_FUNCTION_21_38()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_21_39()
{
  **(void **)(v0 + 224) = *(void *)(v0 + 176);
  return swift_storeEnumTagMultiPayload();
}

uint64_t OUTLINED_FUNCTION_21_40()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_21_45(uint64_t result)
{
  *(void *)(v1 + 56) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_21_46()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_21_47()
{
  return type metadata accessor for SpeakableString();
}

uint64_t outlined init with take of ContactResolverConfigHashable(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ContactResolverConfigHashable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t PhoneSelfPerformanceLogger.__deallocating_deinit()
{
  PhoneSelfPerformanceLogger.deinit();

  return swift_deallocClassInstance();
}

uint64_t PhoneSelfPerformanceLogger.deinit()
{
  if ((*(unsigned char *)(v0 + 88) & 1) == 0) {
    PhoneSelfPerformanceLogger.createAndLogEndEventIfNoFailure()();
  }
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();

  return v0;
}

void PhoneSelfPerformanceLogger.createAndLogEndEventIfNoFailure()()
{
  id v0 = [objc_allocWithZone((Class)FLOWSchemaFLOWDomainExecutionEnded) init];
  if (v0)
  {
    id v8 = v0;
    PhoneSelfPerformanceLogger.logEvent(_:eventType:)((uint64_t)v0, 2);
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_4_24(v1, (uint64_t)static Logger.siriPhone);
    uint64_t v2 = (void *)Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_21_19(v3))
    {
      OUTLINED_FUNCTION_4_55();
      uint64_t v9 = OUTLINED_FUNCTION_11_29();
      uint64_t v4 = OUTLINED_FUNCTION_4_76(4.8149e-34);
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, &v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_6_2();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_22_6(&dword_0, v6, v7, "#PhoneSelfPerformanceLogger Failed to register end event for %s");
      OUTLINED_FUNCTION_6_71();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {

      OUTLINED_FUNCTION_6_2();
    }
  }
}

void static PhoneDomainContextMetricsUtils.addContactRecipientTypeNLv4(phoneContext:resolvedSiriKitContacts:)(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ResolvedSiriKitContact();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  id v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v29 - v9;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v37 = __swift_project_value_buffer(v11, (uint64_t)static Logger.siriPhone);
  os_log_type_t v12 = v37;
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_8_2(v14))
  {
    uint64_t v15 = (uint8_t *)OUTLINED_FUNCTION_7_2();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl(&dword_0, v13, v12, "#PhoneDomainContextMetricsUtils addContactRecipientTypeNLv4", v15, 2u);
    OUTLINED_FUNCTION_6();
  }

  uint64_t v16 = *(void *)(a2 + 16);
  if (v16)
  {
    os_log_type_t v18 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    uint64_t v17 = v5 + 16;
    uint64_t v35 = v18;
    uint64_t v19 = (char *)(a2 + ((*(unsigned __int8 *)(v17 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 64)));
    uint64_t v33 = *(void *)(v17 + 56);
    v29[1] = a2;
    swift_bridgeObjectRetain();
    *(void *)&long long v20 = 67109120;
    long long v30 = v20;
    uint64_t v34 = (void (**)(char *, uint64_t))(v17 - 8);
    uint64_t v31 = v17;
    uint64_t v32 = (v17 - 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v36 = v10;
    do
    {
      os_log_type_t v21 = v35;
      v35(v10, v19, v4);
      v21(v8, v10, v4);
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = v8;
        uint64_t v25 = a1;
        uint64_t v26 = swift_slowAlloc();
        *(_DWORD *)uint64_t v26 = v30;
        int v27 = ResolvedSiriKitContact.personType.getter();
        uint64_t v28 = *v34;
        (*v34)(v24, v4);
        *(_DWORD *)(v26 + 4) = v27;
        _os_log_impl(&dword_0, v22, v23, "#PhoneDomainContextMetricsUtils personType : %d", (uint8_t *)v26, 8u);
        a1 = v25;
        id v8 = v24;
        OUTLINED_FUNCTION_6();
      }
      else
      {
        uint64_t v28 = *v34;
        (*v34)(v8, v4);
      }

      uint64_t v10 = v36;
      [a1 addPersonType:ResolvedSiriKitContact.personType.getter()];
      v28(v10, v4);
      v19 += v33;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
  }
}

void *static ContactResolution.dedupeContacts(contacts:)()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.siriPhone);
  swift_bridgeObjectRetain_n();
  uint64_t v1 = (void *)Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_21_19(v2))
  {
    os_log_type_t v3 = (_DWORD *)OUTLINED_FUNCTION_47();
    os_log_type_t v12 = (void *)OUTLINED_FUNCTION_14_0();
    *os_log_type_t v3 = 136315138;
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INPerson);
    swift_bridgeObjectRetain();
    uint64_t v4 = Array.description.getter();
    unint64_t v6 = v5;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v6, (uint64_t *)&v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_22_6(&dword_0, v7, v8, "#ContactResolution attempting to dedupe contacts: %s");
    OUTLINED_FUNCTION_6_71();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  os_log_type_t v12 = &_swiftEmptySetSingleton;
  unint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = specialized _ArrayProtocol.filter(_:)(v9, (uint64_t)&v12);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t outlined bridged method (pb) of @objc INPerson.contactIdentifier.getter(void *a1)
{
  return outlined bridged method (pb) of @objc SAUIConfirmationOption.label.getter(a1, (SEL *)&selRef_contactIdentifier);
}

uint64_t outlined bridged method (pb) of @objc SAUIConfirmationOption.label.getter(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (!v2) {
    return 0;
  }
  os_log_type_t v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t outlined bridged method (pb) of @objc INPerson.siriMatches.getter(void *a1)
{
  id v1 = [a1 siriMatches];
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INPerson);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

unint64_t type metadata accessor for SISchemaUUID()
{
  unint64_t result = lazy cache variable for type metadata for SISchemaUUID;
  if (!lazy cache variable for type metadata for SISchemaUUID)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID);
  }
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

void specialized _ArrayBuffer._consumeAndCreateNew()()
{
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  if (a1 >> 62)
  {
    OUTLINED_FUNCTION_32_3();
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_15_0();
  }

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
}

uint64_t UnsetRelationshipTemplatesWrapper.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t @nonobjc INStartCallIntent.callGroups.getter()
{
  return outlined bridged method (pb) of @objc INStartCallIntent.contacts.getter(v0, (SEL *)&selRef_callGroups, (unint64_t *)&lazy cache variable for type metadata for INCallGroup);
}

id CallingIntentNeedsValueFlowStrategy.mergePreviousIntentIntoCurrentOne(previousIntent:callingIntent:)(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, os_log_type_t type, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  OUTLINED_FUNCTION_57();
  uint64_t v28 = v27;
  swift_getAssociatedTypeWitness();
  OUTLINED_FUNCTION_7_0();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  long long v30 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32);
  uint64_t v31 = swift_checkMetadataState();
  uint64_t v32 = v30(v31, AssociatedConformanceWitness);
  uint64_t v33 = OUTLINED_FUNCTION_25_29();
  uint64_t v34 = &unk_583000;
  if (v32 != ((uint64_t (*)(uint64_t))v30)(v33))
  {
    uint64_t v35 = OUTLINED_FUNCTION_25_29();
    if (!((uint64_t (*)(uint64_t))v30)(v35))
    {
      uint64_t v36 = OUTLINED_FUNCTION_25_29();
      ((void (*)(uint64_t))v30)(v36);
      OUTLINED_FUNCTION_35_25();
      v37();
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v38 = type metadata accessor for Logger();
      __swift_project_value_buffer(v38, (uint64_t)static Logger.siriPhone);
      id v39 = v28;
      unint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v40, v41))
      {
        uint64_t v42 = (uint8_t *)OUTLINED_FUNCTION_47();
        *(_DWORD *)uint64_t v42 = 134217984;
        uint64_t v43 = OUTLINED_FUNCTION_25_29();
        ((void (*)(uint64_t))v30)(v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl(&dword_0, v40, v41, "#CallingIntentNeedsValueFlowStrategy updated audio route to %ld from previous intent", v42, 0xCu);
        uint64_t v34 = (void *)&unk_583000;
        OUTLINED_FUNCTION_6();
      }
      else
      {
      }
    }
  }
  uint64_t v44 = *(uint64_t (**)(uint64_t))(AssociatedConformanceWitness + 24);
  uint64_t v45 = OUTLINED_FUNCTION_15_45();
  uint64_t v46 = v44(v45);
  uint64_t v47 = OUTLINED_FUNCTION_15_45();
  if (v46 != v44(v47))
  {
    uint64_t v48 = OUTLINED_FUNCTION_15_45();
    if (!v44(v48))
    {
      uint64_t v49 = OUTLINED_FUNCTION_15_45();
      v44(v49);
      OUTLINED_FUNCTION_35_25();
      v50();
      OUTLINED_FUNCTION_38();
      OUTLINED_FUNCTION_46_15();
      v51();
      OUTLINED_FUNCTION_35_25();
      v52();
      if (v34[466] != -1) {
        swift_once();
      }
      uint64_t v53 = type metadata accessor for Logger();
      __swift_project_value_buffer(v53, (uint64_t)static Logger.siriPhone);
      unint64_t v54 = v28;
      Swift::Bool v55 = Logger.logObject.getter();
      os_log_type_t v56 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v55, v56))
      {
        uint64_t v57 = OUTLINED_FUNCTION_11_7();
        *(_DWORD *)uint64_t v57 = 134218240;
        uint64_t v58 = OUTLINED_FUNCTION_15_45();
        v44(v58);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v57 + 12) = 2048;
        OUTLINED_FUNCTION_46_15();
        v59();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl(&dword_0, v55, v56, "#CallingIntentNeedsValueFlowStrategy updated callCapability to:%ld and PreferredCallProvider to: %ld from previous intent", (uint8_t *)v57, 0x16u);
        OUTLINED_FUNCTION_6();
      }
      else
      {

        Swift::Bool v55 = v54;
      }
    }
  }
  OUTLINED_FUNCTION_34_20();
  return v60;
}

id @nonobjc INStartCallIntent.audioRoute.getter()
{
  return [v0 audioRoute];
}

id @nonobjc INStartCallIntent.callCapability.getter()
{
  return [v0 callCapability];
}

uint64_t protocol witness for Flow.exitValue.getter in conformance ContactNeedsValueGuardFlow<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t ContactNeedsValueGuardFlow.exitValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  OUTLINED_FUNCTION_9_11();
  uint64_t v4 = type metadata accessor for ContactNeedsValueGuardFlow.FlowState();
  OUTLINED_FUNCTION_0_0();
  uint64_t v6 = v5;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (unsigned __int8 *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v22 - v12;
  (*(void (**)(uint64_t))(v3 + 128))(v11);
  if (OUTLINED_FUNCTION_26_4() != 1) {
    goto LABEL_5;
  }
  OUTLINED_FUNCTION_12();
  v14();
  int v15 = *v10;
  uint64_t v16 = &v10[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ExecutionPath.FallbackLocation, Parse))
                    + 48)];
  if (v15 != 2)
  {
    type metadata accessor for Parse();
    OUTLINED_FUNCTION_15();
    (*(void (**)(unsigned __int8 *))(v20 + 8))(v16);
LABEL_5:
    OUTLINED_FUNCTION_22();
    dispatch thunk of AnyValueFlow.exitValue.getter();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v13, v4);
  }
  uint64_t v17 = enum case for PromptResult.cancelled<A>(_:);
  type metadata accessor for IntentPromptAnswer();
  type metadata accessor for PromptResult();
  OUTLINED_FUNCTION_15();
  (*(void (**)(uint64_t, uint64_t))(v18 + 104))(a1, v17);
  type metadata accessor for Parse();
  OUTLINED_FUNCTION_15();
  OUTLINED_FUNCTION_11();
  v19();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v13, v4);
}

uint64_t partial apply for specialized closure #1 in static PhoneCallFlowFactory.makeAppResolutionFlowBeforeNextResolveFlowProducer<A>(delegate:app:sharedGlobal:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  return specialized closure #1 in static PhoneCallFlowFactory.makeAppResolutionFlowBeforeNextResolveFlowProducer<A>(delegate:app:sharedGlobal:)(a1, a2, a3, a4, a5, a6, *(void *)(v6 + 16), v6 + 24, (uint64_t)&outlined read-only object #0 of specialized closure #1 in static PhoneCallFlowFactory.makeAppResolutionFlowBeforeNextResolveFlowProducer<A>(delegate:app:sharedGlobal:));
}

{
  uint64_t v6;

  return specialized closure #1 in static PhoneCallFlowFactory.makeAppResolutionFlowBeforeNextResolveFlowProducer<A>(delegate:app:sharedGlobal:)(a1, a2, a3, a4, a5, a6, *(void *)(v6 + 16), v6 + 24, (uint64_t)&outlined read-only object #0 of specialized closure #1 in static PhoneCallFlowFactory.makeAppResolutionFlowBeforeNextResolveFlowProducer<A>(delegate:app:sharedGlobal:));
}

{
  uint64_t v6;

  return specialized closure #1 in static PhoneCallFlowFactory.makeAppResolutionFlowBeforeNextResolveFlowProducer<A>(delegate:app:sharedGlobal:)(a1, a2, a3, a4, a5, a6, *(void *)(v6 + 16), v6 + 24, (uint64_t)&outlined read-only object #0 of specialized closure #1 in static PhoneCallFlowFactory.makeAppResolutionFlowBeforeNextResolveFlowProducer<A>(delegate:app:sharedGlobal:));
}

uint64_t specialized closure #1 in static PhoneCallFlowFactory.makeAppResolutionFlowBeforeNextResolveFlowProducer<A>(delegate:app:sharedGlobal:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (specialized Sequence<>.contains(_:)(a6, a9))
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.siriPhone);
    int v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)OUTLINED_FUNCTION_7_2();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_0, v15, v16, "#PhoneCallFlowFactory makeAppResolutionFlowBeforeNextResolveFlowProducer: resolutionResultCode is needsDisambiguation or needsConfirmation, don't start app resolution again", v17, 2u);
      OUTLINED_FUNCTION_6();
    }

    return 0;
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.siriPhone);
    swift_retain_n();
    id v20 = a3;
    swift_bridgeObjectRetain_n();
    id v21 = v20;
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v36 = a4;
      uint64_t v24 = swift_slowAlloc();
      __dst[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136315906;
      type metadata accessor for App();
      lazy protocol witness table accessor for type AddCallParticipantHandleIntentFlowStrategy and conformance AddCallParticipantHandleIntentFlowStrategy((unint64_t *)&lazy protocol witness table cache variable for type App and conformance App, (void (*)(uint64_t))&type metadata accessor for App);
      uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, __dst);
      OUTLINED_FUNCTION_52_3();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 12) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v24 + 22) = 2080;
      uint64_t v27 = INIntent.debugDescriptionLite.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, __dst);
      OUTLINED_FUNCTION_52_3();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 32) = 2080;
      swift_bridgeObjectRetain();
      *(void *)&long long v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, a5, __dst);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_0, v22, v23, "#PhoneCallFlowFactory makeAppResolutionFlowBeforeNextResolveFlowProducer: app:%s resolutionResultCode:%ld intent:%s parameterName: %s ", (uint8_t *)v24, 0x2Au);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_release_n();
    }
    outlined init with copy of SignalProviding(a8, (uint64_t)v44);
    uint64_t v29 = one-time initialization token for instance;
    swift_retain();
    if (v29 != -1) {
      swift_once();
    }
    memcpy(__dst, &static PhoneCallFeatureFlags.instance, 0xB0uLL);
    type metadata accessor for PhoneCallFeatureManager();
    uint64_t v30 = swift_allocObject();
    unint64_t v40 = &type metadata for PhoneCallFeatureFlags;
    os_log_type_t v41 = &protocol witness table for PhoneCallFeatureFlags;
    *(void *)&long long v38 = swift_allocObject();
    memcpy((void *)(v38 + 16), &static PhoneCallFeatureFlags.instance, 0xB0uLL);
    outlined init with take of AppSelectionSignalComponent(&v38, v30 + 16);
    outlined retain of PhoneCallFeatureFlags((uint64_t)__dst);
    if (one-time initialization token for instance != -1) {
      swift_once();
    }
    uint64_t v31 = static ThirdPartyAnnotatedAppStore.instance;
    uint64_t v42 = type metadata accessor for ThirdPartyAnnotatedAppStore();
    uint64_t v43 = &protocol witness table for ThirdPartyAnnotatedAppStore;
    uint64_t v39 = v30;
    unint64_t v40 = (ValueMetadata *)v31;
    *(void *)&long long v38 = AnnotatedAppFinder.isInstalledOnDevice(appBundleId:);
    *((void *)&v38 + 1) = 0;
    type metadata accessor for AppResolutionBeforeResolveFlow(0);
    uint64_t v32 = (void *)OUTLINED_FUNCTION_21_0();
    outlined init with copy of AnnotatedAppFinder((uint64_t)&v38, (uint64_t)v37);
    uint64_t v33 = specialized AppResolutionBeforeResolveFlow.init(previousTurnIntent:previouslyResolvedApp:sharedGlobals:appFinder:)(v21, a7, v44, v37, v32);
    id v34 = v21;
    swift_retain();
    outlined destroy of AnnotatedAppFinder((uint64_t)&v38);
    *(void *)&long long v38 = v33;
    lazy protocol witness table accessor for type AddCallParticipantHandleIntentFlowStrategy and conformance AddCallParticipantHandleIntentFlowStrategy(&lazy protocol witness table cache variable for type AppResolutionBeforeResolveFlow and conformance AppResolutionBeforeResolveFlow, (void (*)(uint64_t))type metadata accessor for AppResolutionBeforeResolveFlow);
    uint64_t v18 = Flow.eraseToAnyValueFlow()();
    swift_release();
  }
  return v18;
}

uint64_t type metadata accessor for AppResolutionBeforeResolveFlow.State(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for AppResolutionBeforeResolveFlow.State);
}

uint64_t lazy protocol witness table accessor for type AddCallParticipantHandleIntentFlowStrategy and conformance AddCallParticipantHandleIntentFlowStrategy(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AddCallParticipantHandleIntentFlowStrategy and conformance AddCallParticipantHandleIntentFlowStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type AddCallParticipantHandleIntentFlowStrategy and conformance AddCallParticipantHandleIntentFlowStrategy;
  if (!lazy protocol witness table cache variable for type AddCallParticipantHandleIntentFlowStrategy and conformance AddCallParticipantHandleIntentFlowStrategy)
  {
    type metadata accessor for AddCallParticipantHandleIntentFlowStrategy();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AddCallParticipantHandleIntentFlowStrategy and conformance AddCallParticipantHandleIntentFlowStrategy);
  }
  return result;
}

uint64_t type metadata accessor for ThirdPartyAnnotatedAppStore()
{
  return self;
}

uint64_t type metadata accessor for AppResolutionBeforeResolveFlow(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for AppResolutionBeforeResolveFlow);
}

uint64_t outlined init with copy of AnnotatedAppFinder(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for AnnotatedAppFinder(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = a2 + 24;
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v5;
  uint64_t v6 = v5;
  uint64_t v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_retain();
  swift_retain();
  v7(a1 + 24, v4, v6);
  return a1;
}

uint64_t outlined init with take of AppResolutionBeforeResolveFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppResolutionBeforeResolveFlow.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of AnnotatedAppFinder(uint64_t a1)
{
  return a1;
}

uint64_t destroy for AnnotatedAppFinder(uint64_t a1)
{
  swift_release();
  swift_release();

  return __swift_destroy_boxed_opaque_existential_1(a1 + 24);
}

uint64_t protocol witness for CallNotificationContextProviding.update(aceServiceInvoker:refId:applicationId:) in conformance CallNotificationContextProvider()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = *v0;
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t protocol witness for Flow.execute() in conformance AppResolutionBeforeResolveFlow(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 176) + **(int **)(**(void **)v1 + 176));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = protocol witness for CallNotificationContextProviding.update(aceServiceInvoker:refId:applicationId:) in conformance CallNotificationContextProvider;
  return v6(a1);
}

void AppResolutionBeforeResolveFlow.execute()()
{
  uint64_t v1 = v0[25];
  if (v1)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.siriPhone);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      long long v5 = (uint8_t *)OUTLINED_FUNCTION_7_2();
      *(_WORD *)long long v5 = 0;
      _os_log_impl(&dword_0, v3, v4, "#AppResolutionBeforeResolveFlow pushing app resolution flow", v5, 2u);
      OUTLINED_FUNCTION_6();
    }
    uint64_t v6 = (void *)v0[22];
    uint64_t v7 = v0[21];
    uint64_t v8 = v0[19];
    uint64_t v9 = v0[16];

    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    outlined assign with take of AppResolutionBeforeResolveFlow.State(v8, v9 + v7);
    swift_endAccess();
    v0[14] = v1;
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = v6;
    *(void *)(v10 + 24) = v9;
    id v11 = v6;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyAppResolutionFlow<INIntent>);
    lazy protocol witness table accessor for type AnyAppResolutionFlow<INIntent> and conformance AnyAppResolutionFlow<A>();
    static ExecuteResponse.ongoing<A>(next:childCompletion:)();
    swift_release();

    swift_release();
    swift_release();
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.siriPhone);
    swift_retain_n();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    BOOL v15 = os_log_type_enabled(v13, v14);
    uint64_t v16 = v0[23];
    if (v15)
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136315138;
      v0[11] = v16;
      type metadata accessor for App();
      lazy protocol witness table accessor for type AppResolutionBeforeResolveFlow and conformance AppResolutionBeforeResolveFlow((unint64_t *)&lazy protocol witness table cache variable for type App and conformance App, (void (*)(uint64_t))&type metadata accessor for App);
      uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[12] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_0, v13, v14, "#AppResolutionBeforeResolveFlow no app resolution flow, returning previously resolved app: %s", v17, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {
      swift_release_n();
    }

    id v20 = (void *)v0[22];
    uint64_t v22 = v0[18];
    id v21 = (void *)v0[19];
    uint64_t v23 = v0[16] + v0[21];
    *id v21 = v0[23];
    uint64_t v24 = enum case for AppResolutionFlowResult.resolved(_:);
    type metadata accessor for AppResolutionFlowResult();
    OUTLINED_FUNCTION_15();
    (*(void (**)(void *, uint64_t))(v25 + 104))(v21, v24);
    swift_storeEnumTagMultiPayload();
    outlined init with take of AppResolutionBeforeResolveFlow.State((uint64_t)v21, v22);
    swift_beginAccess();
    swift_retain();
    outlined assign with take of AppResolutionBeforeResolveFlow.State(v22, v23);
    swift_endAccess();
    static ExecuteResponse.complete()();
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_28_1();
  __asm { BRAA            X1, X16 }
}

uint64_t AppResolutionBeforeResolveFlow.execute()()
{
  OUTLINED_FUNCTION_1_0();
  v1[15] = v2;
  v1[16] = v0;
  v1[17] = type metadata accessor for AppResolutionBeforeResolveFlow.State(0);
  v1[18] = swift_task_alloc();
  v1[19] = swift_task_alloc();
  v1[20] = swift_task_alloc();
  return _swift_task_switch(AppResolutionBeforeResolveFlow.execute(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint8_t *v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  void *v21;

  id v21 = v0;
  uint64_t v1 = v0[20];
  uint64_t v2 = v0[16];
  uint64_t v3 = OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin30AppResolutionBeforeResolveFlow_state;
  v0[21] = OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin30AppResolutionBeforeResolveFlow_state;
  uint64_t v4 = v2 + v3;
  swift_beginAccess();
  outlined init with copy of AppResolutionBeforeResolveFlow.State(v4, v1);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v6 = type metadata accessor for Logger();
      __swift_project_value_buffer(v6, (uint64_t)static Logger.siriPhone);
      swift_retain_n();
      uint64_t v7 = Logger.logObject.getter();
      uint64_t v8 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = v0[19];
        uint64_t v10 = (uint8_t *)swift_slowAlloc();
        id v20 = swift_slowAlloc();
        *(_DWORD *)uint64_t v10 = 136315138;
        outlined init with copy of AppResolutionBeforeResolveFlow.State(v4, v9);
        id v11 = specialized String.init<A>(describing:)(v9);
        v0[13] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v20);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl(&dword_0, v7, v8, "#AppResolutionBeforeResolveFlow execute() called in %s", v10, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_6();
        OUTLINED_FUNCTION_6();
      }
      else
      {
        swift_release_n();
      }
    }
    uint64_t v17 = v0[20];
    static ExecuteResponse.complete()();
    outlined destroy of AppResolutionBeforeResolveFlow.State(v17, (void (*)(void))type metadata accessor for AppResolutionBeforeResolveFlow.State);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_28_1();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v13 = (void *)v0[20];
  v0[22] = *v13;
  v0[23] = v13[1];
  os_log_type_t v14 = (void *)swift_task_alloc();
  v0[24] = v14;
  *os_log_type_t v14 = v0;
  v14[1] = AppResolutionBeforeResolveFlow.execute();
  OUTLINED_FUNCTION_28_1();
  return AppResolutionBeforeResolveFlow.makeAppResolutionFlow(intent:previouslyResolvedApp:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  *(void *)(v1 + 200) = v0;
  swift_task_dealloc();
  return _swift_task_switch(AppResolutionBeforeResolveFlow.execute(), 0, 0);
}

uint64_t outlined init with copy of AppResolutionBeforeResolveFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppResolutionBeforeResolveFlow.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void *initializeWithCopy for AppResolutionBeforeResolveFlow.State(void *a1, void **a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v10 = type metadata accessor for AppResolutionFlowResult();
    (*(void (**)(void *, void **, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      return a1;
    }
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    *a1 = v7;
    a1[1] = v8;
    id v9 = v7;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t AppResolutionBeforeResolveFlow.makeAppResolutionFlow(intent:previouslyResolvedApp:)()
{
  uint64_t v88 = v0;
  uint64_t v1 = *(void **)(v0 + 920);
  uint64_t v2 = v1[12];
  uint64_t v3 = v1[13];
  __swift_project_boxed_opaque_existential_1(v1 + 9, v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 72))(v2, v3);
  (*(void (**)(uint64_t))(*(void *)v4 + 232))(v4);
  swift_release();
  if (*(void *)(v0 + 48) == 1)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for TransformationResult?);
    *(_OWORD *)(v0 + 560) = 0u;
    *(_OWORD *)(v0 + 576) = 0u;
    *(void *)(v0 + 592) = 0;
LABEL_8:
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v0 + 560, &demangling cache variable for type metadata for PhoneCallNLIntent?);
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.siriPhone);
    uint64_t v18 = (void *)Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_18(v19))
    {
      *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
      OUTLINED_FUNCTION_25_4(&dword_0, v20, v21, "#AppResolutionBeforeResolveFlow NL should already be transformed before, it is not expected to get nil history");
      OUTLINED_FUNCTION_6();
    }

    goto LABEL_26;
  }
  outlined init with copy of PhoneCallNLIntent?(v0 + 24, v0 + 560);
  outlined destroy of TransformationResult(v0 + 16);
  if (!*(void *)(v0 + 584)) {
    goto LABEL_8;
  }
  long long v5 = (void *)(v0 + 64);
  uint64_t v85 = v0 + 520;
  outlined init with take of AppSelectionSignalComponent((long long *)(v0 + 560), v0 + 520);
  uint64_t v6 = v1[12];
  uint64_t v7 = v1[13];
  uint64_t v84 = v1 + 9;
  __swift_project_boxed_opaque_existential_1(v1 + 9, v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 152))(v6, v7);
  uint64_t v8 = *(void *)(v0 + 672);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 640), *(void *)(v0 + 664));
  uint64_t v9 = App.appIdentifier.getter();
  (*(void (**)(uint64_t))(v8 + 16))(v9);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 640);
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v10 = (_OWORD *)(v0 + 304);
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.siriPhone);
  outlined retain of AnnotatedApp?((void *)(v0 + 64), (void (*)(void, void, void, void, void, void))outlined copy of AnnotatedApp?);
  outlined retain of AnnotatedApp?((void *)(v0 + 64), (void (*)(void, void, void, void, void, void))outlined copy of AnnotatedApp?);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  uint64_t v86 = (void *)(v0 + 64);
  if (os_log_type_enabled(v12, v13))
  {
    os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
    v87[0] = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v14 = 136315138;
    outlined init with take of AnnotatedApp?((uint64_t)v5, v0 + 112, &demangling cache variable for type metadata for AnnotatedApp?);
    outlined retain of AnnotatedApp?(v5, (void (*)(void, void, void, void, void, void))outlined copy of AnnotatedApp?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedApp?);
    uint64_t v15 = String.init<A>(describing:)();
    *(void *)(v0 + 904) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined retain of AnnotatedApp?(v5, (void (*)(void, void, void, void, void, void))outlined consume of AnnotatedApp?);
    outlined retain of AnnotatedApp?(v5, (void (*)(void, void, void, void, void, void))outlined consume of AnnotatedApp?);
    _os_log_impl(&dword_0, v12, v13, "#AppResolutionBeforeResolveFlow Previously-resolved annotated app %s", v14, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
    outlined retain of AnnotatedApp?((void *)(v0 + 64), (void (*)(void, void, void, void, void, void))outlined consume of AnnotatedApp?);
    outlined retain of AnnotatedApp?((void *)(v0 + 64), (void (*)(void, void, void, void, void, void))outlined consume of AnnotatedApp?);
  }

  outlined init with take of AnnotatedApp?((uint64_t)v5, v0 + 304, &demangling cache variable for type metadata for AnnotatedApp?);
  if (*(void *)v10)
  {
    long long v22 = *(_OWORD *)(v0 + 336);
    *(_OWORD *)(v0 + 272) = *(_OWORD *)(v0 + 320);
    *(_OWORD *)(v0 + 288) = v22;
    *(_OWORD *)(v0 + 256) = *v10;
    int v23 = *(unsigned __int8 *)(v0 + 288);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_release();
    *(void *)(v0 + 888) = *(void *)(v0 + 264);
    outlined release of Set<String>(v0 + 888);
    outlined init with take of AnnotatedApp?(v0 + 272, v0 + 856, &demangling cache variable for type metadata for String?);
    outlined release of String?(v0 + 856);
    *(void *)(v0 + 896) = *(void *)(v0 + 296);
    outlined release of Set<String>(v0 + 896);
    if (v23 == 2)
    {
      uint64_t v24 = (void *)Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_18(v25))
      {
        *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
        uint64_t v28 = "#AppResolutionBeforeResolveFlow User specifically requested this app, not running SeAS";
LABEL_24:
        OUTLINED_FUNCTION_25_4(&dword_0, v26, v27, v28);
        OUTLINED_FUNCTION_6();
        goto LABEL_25;
      }
      goto LABEL_25;
    }
  }
  uint64_t v29 = *(void **)(v0 + 920);
  type metadata accessor for AppQuery.Builder();
  outlined init with copy of SignalProviding(v85, v0 + 680);
  uint64_t v30 = AppQuery.Builder.__allocating_init(intent:)((void *)(v0 + 680));
  uint64_t v82 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 160))(v30);
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  swift_release();
  uint64_t v35 = v29[7];
  uint64_t v36 = v29[8];
  uint64_t v78 = (uint64_t)(v29 + 4);
  __swift_project_boxed_opaque_existential_1(v29 + 4, v35);
  uint64_t v37 = v1[12];
  uint64_t v38 = v1[13];
  __swift_project_boxed_opaque_existential_1(v84, v37);
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v38);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 8))(v82, v32, v34, v0 + 720, v35, v36);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 720);
  outlined init with take of AnnotatedApp?(v0 + 160, v0 + 208, &demangling cache variable for type metadata for AnnotatedApp?);
  if (!*(void *)(v0 + 208))
  {
    uint64_t v24 = (void *)Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_18(v62))
    {
      *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
      uint64_t v28 = "#AppResolutionBeforeResolveFlow No matching app";
      goto LABEL_24;
    }
LABEL_25:

    outlined retain of AnnotatedApp?(v86, (void (*)(void, void, void, void, void, void))outlined consume of AnnotatedApp?);
    __swift_destroy_boxed_opaque_existential_1(v85);
LABEL_26:
    uint64_t v61 = 0;
    goto LABEL_27;
  }
  uint64_t v83 = v0 + 440;
  uint64_t v81 = v0 + 840;
  uint64_t v39 = *(void *)(v0 + 952);
  uint64_t v40 = *(void *)(v0 + 944);
  uint64_t v41 = *(void *)(v0 + 936);
  long long v42 = *(_OWORD *)(v0 + 224);
  *(_OWORD *)(v0 + 352) = *(_OWORD *)(v0 + 208);
  *(_OWORD *)(v0 + 368) = v42;
  *(_OWORD *)(v0 + 384) = *(_OWORD *)(v0 + 240);
  uint64_t v43 = v1[12];
  uint64_t v44 = v1[13];
  __swift_project_boxed_opaque_existential_1(v84, v43);
  (*(void (**)(uint64_t, uint64_t))(v44 + 104))(v43, v44);
  uint64_t v72 = *(void *)(v0 + 792);
  uint64_t v74 = *(void **)(v0 + 784);
  uint64_t v70 = __swift_project_boxed_opaque_existential_1((void *)(v0 + 760), (uint64_t)v74);
  static PhoneCallNLv3Intent.placeCall()(v39);
  (*(void (**)(uint64_t, void, uint64_t))(v40 + 104))(v39, enum case for Parse.NLv3IntentOnly(_:), v41);
  Input.init(parse:)();
  uint64_t v45 = *(void *)(v0 + 360);
  uint64_t v46 = swift_bridgeObjectRetain();
  uint64_t v66 = specialized _copyCollectionToContiguousArray<A>(_:)(v46);
  uint64_t v69 = v45;
  swift_bridgeObjectRelease();
  outlined init with copy of SignalProviding(v78, v0 + 800);
  outlined init with copy of SignalProviding((uint64_t)v84, v0 + 480);
  type metadata accessor for StartCallCATsSimple();
  memset(v87, 0, 40);
  static CATOption.defaultMode.getter();
  uint64_t v47 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for PhoneCallDisplayTextCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v48 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  uint64_t v49 = ResponseFactory.init()();
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  uint64_t v50 = *(void *)(v0 + 976);
  uint64_t v67 = *(void *)(v0 + 968);
  uint64_t v79 = *(void *)(v0 + 960);
  uint64_t v51 = static EligibleAppFinder.instance;
  type metadata accessor for AppInfoBuilder();
  uint64_t v52 = swift_allocObject();
  uint64_t v53 = type metadata accessor for PhoneAppResolutionOnDeviceFlowStrategy();
  uint64_t v54 = swift_allocObject();
  swift_retain();
  specialized PhoneAppResolutionOnDeviceFlowStrategy.init(supportedIntents:appFinder:sharedGlobals:startCallCATsSimple:phoneCallDisplayTextCATsSimple:responseGenerator:eligibleAppsFinder:appInfoBuilder:smartAppSelection:phoneAppResolutionHelper:phoneAppResolutionLogger:)((uint64_t)v66, v0 + 800, v0 + 480, v47, v48, v49, v51, v52, 0, 0, (uint64_t)v87, v54, v65, v0 + 480, (uint64_t)v66, v67, v69, (uint64_t)v70, v0 + 600,
    v72,
    v74,
    v0 + 400,
    v0 + 872,
    v79);
  *(void *)(v0 + 872) = v55;
  outlined init with copy of SignalProviding(v85, (uint64_t)v71);
  outlined init with copy of SignalProviding((uint64_t)v84, (uint64_t)v76);
  uint64_t v56 = type metadata accessor for PhoneProtectedAppCheckStrategy();
  uint64_t v57 = swift_allocObject();
  outlined init with take of AppSelectionSignalComponent(v71, v57 + 16);
  outlined init with take of AppSelectionSignalComponent(v76, v57 + 56);
  *(void *)(v0 + 464) = v56;
  *(void *)(v0 + 472) = lazy protocol witness table accessor for type AppResolutionBeforeResolveFlow and conformance AppResolutionBeforeResolveFlow(&lazy protocol witness table cache variable for type PhoneProtectedAppCheckStrategy and conformance PhoneProtectedAppCheckStrategy, (void (*)(uint64_t))type metadata accessor for PhoneProtectedAppCheckStrategy);
  *(void *)(v0 + 440) = v57;
  uint64_t v58 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v73 + 72);
  unint64_t v59 = type metadata accessor for INIntent();
  uint64_t v60 = lazy protocol witness table accessor for type AppResolutionBeforeResolveFlow and conformance AppResolutionBeforeResolveFlow(&lazy protocol witness table cache variable for type PhoneAppResolutionOnDeviceFlowStrategy and conformance PhoneAppResolutionOnDeviceFlowStrategy, (void (*)(uint64_t))type metadata accessor for PhoneAppResolutionOnDeviceFlowStrategy);
  uint64_t v61 = v58(v50, v77, v83, v53, v59, v60, v75, v73);
  swift_release();
  swift_bridgeObjectRelease();
  outlined init with take of AnnotatedApp?(v0 + 368, v81, &demangling cache variable for type metadata for String?);
  outlined release of String?(v81);
  *(void *)(v0 + 880) = *(void *)(v0 + 392);
  outlined release of Set<String>(v0 + 880);
  outlined retain of AnnotatedApp?(v86, (void (*)(void, void, void, void, void, void))outlined consume of AnnotatedApp?);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v50, v80);
  __swift_destroy_boxed_opaque_existential_1(v85);
  __swift_destroy_boxed_opaque_existential_1(v83);
  __swift_destroy_boxed_opaque_existential_1(v0 + 760);
LABEL_27:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v63 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v63(v61);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_1_0();
  v1[115] = v0;
  v1[114] = v2;
  type metadata accessor for CATOption();
  v1[116] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Parse();
  v1[117] = v3;
  OUTLINED_FUNCTION_19_0(v3);
  v1[118] = v4;
  v1[119] = swift_task_alloc();
  long long v5 = type metadata accessor for Input();
  v1[120] = v5;
  OUTLINED_FUNCTION_19_0(v5);
  v1[121] = v6;
  v1[122] = swift_task_alloc();
  return _swift_task_switch(AppResolutionBeforeResolveFlow.makeAppResolutionFlow(intent:previouslyResolvedApp:), 0, 0);
}

uint64_t NLTransformer.getCurrentNLResult()@<X0>(uint64_t a1@<X8>)
{
  OUTLINED_FUNCTION_22();
  uint64_t v3 = (*(uint64_t (**)(void))(v2 + 128))();
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    outlined init with copy of TransformationResult((uint64_t *)(v3 + 48 * v4 - 16), (void *)a1);
  }
  else
  {
    OUTLINED_FUNCTION_42_1();
    *(_OWORD *)(a1 + 32) = xmmword_467740;
  }

  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for SharedGlobalsProviding.skFlowFactory.getter in conformance SharedGlobals@<X0>(uint64_t *a1@<X8>)
{
  return specialized SharedGlobalsProviding.flowFinder.getter((uint64_t (*)(void))type metadata accessor for SiriKitFlowFactory, (uint64_t)&protocol witness table for SiriKitFlowFactory, a1);
}

uint64_t specialized SharedGlobalsProviding.flowFinder.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = a1(0);
  uint64_t result = swift_allocObject();
  a3[3] = v5;
  a3[4] = a2;
  *a3 = result;
  return result;
}

uint64_t type metadata accessor for SiriKitFlowFactory()
{
  return self;
}

uint64_t type metadata accessor for StartCallCATsSimple()
{
  uint64_t result = type metadata singleton initialization cache for StartCallCATsSimple;
  if (!type metadata singleton initialization cache for StartCallCATsSimple) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t StartCallCATsSimple.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return StartCallCATsSimple.init(templateDir:options:globals:)(a1, a2);
}

uint64_t StartCallCATsSimple.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_8_18();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  uint64_t v11 = OUTLINED_FUNCTION_11_0(v10);
  __chkstk_darwin(v11);
  outlined init with copy of SpeakableString?(a1, (uint64_t)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a2, v2);
  uint64_t v13 = CATWrapperSimple.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a2, v2);
  _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(a1, (uint64_t *)&demangling cache variable for type metadata for URL?);
  return v13;
}

uint64_t type metadata accessor for PhoneCallDisplayTextCATs()
{
  uint64_t result = type metadata singleton initialization cache for PhoneCallDisplayTextCATs;
  if (!type metadata singleton initialization cache for PhoneCallDisplayTextCATs) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void PhoneCallDisplayTextCATs.__allocating_init(templateDir:options:globals:)()
{
}

void PhoneCallDisplayTextCATs.init(templateDir:options:globals:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for CATOption();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_53();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  uint64_t v8 = OUTLINED_FUNCTION_11_0(v7);
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_4();
  outlined init with copy of SpeakableString?(v4, v10 - v9, (uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v0, v2, v5);
  CATWrapper.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v2, v5);
  _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v4, (uint64_t *)&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_26_1();
}

uint64_t type metadata accessor for PhoneCallDisplayTextCATsSimple()
{
  uint64_t result = type metadata singleton initialization cache for PhoneCallDisplayTextCATsSimple;
  if (!type metadata singleton initialization cache for PhoneCallDisplayTextCATsSimple) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t PhoneCallDisplayTextCATsSimple.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return PhoneCallDisplayTextCATsSimple.init(templateDir:options:globals:)(a1, a2);
}

uint64_t PhoneCallDisplayTextCATsSimple.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_8_18();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  uint64_t v11 = OUTLINED_FUNCTION_11_0(v10);
  __chkstk_darwin(v11);
  outlined init with copy of SpeakableString?(a1, (uint64_t)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a2, v2);
  uint64_t v13 = CATWrapperSimple.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a2, v2);
  _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(a1, (uint64_t *)&demangling cache variable for type metadata for URL?);
  return v13;
}

uint64_t type metadata accessor for StartCallCATs()
{
  uint64_t result = type metadata singleton initialization cache for StartCallCATs;
  if (!type metadata singleton initialization cache for StartCallCATs) {
    return swift_getSingletonMetadata();
  }
  return result;
}

#error "3C010: call analysis failed (funcsize=19)"

void StartCallCATs.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  OUTLINED_FUNCTION_24_0();
  a19 = v21;
  a20 = v22;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v27 = type metadata accessor for CATOption();
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  OUTLINED_FUNCTION_53();
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  uint64_t v30 = OUTLINED_FUNCTION_11_0(v29);
  __chkstk_darwin(v30);
  outlined init with copy of SpeakableString?(v26, (uint64_t)&a9 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v20, v24, v27);
  CATWrapper.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v24, v27);
  _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v26, (uint64_t *)&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_26_1();
}

uint64_t type metadata accessor for StartCallCATPatternsExecutor(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for StartCallCATPatternsExecutor);
}

#error "3C1DC: call analysis failed (funcsize=21)"

void StartCallCATPatternsExecutor.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  OUTLINED_FUNCTION_24_0();
  a19 = v21;
  a20 = v22;
  uint64_t v24 = v23;
  OUTLINED_FUNCTION_37_6();
  uint64_t v25 = type metadata accessor for CATOption();
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)&a9 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  uint64_t v30 = OUTLINED_FUNCTION_11_0(v29);
  __chkstk_darwin(v30);
  _s16SiriDialogEngine15SpeakableStringVSgWOcTm_0(v20, (uint64_t)&a9 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v28, v24, v25);
  CATWrapper.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
  _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v20, (uint64_t *)&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_26_1();
}

uint64_t OUTLINED_FUNCTION_4_7()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_108()
{
  return type metadata accessor for StartCallConfirmContactsParameters(0);
}

uint64_t OUTLINED_FUNCTION_108_0()
{
  return 0x6E6F73726570;
}

void OUTLINED_FUNCTION_108_1(uint64_t a1@<X8>)
{
  *(unsigned char *)(v2 + 96) = v1;
  *(void *)(v2 + 120) = a1;
  strcpy((char *)(v2 + 128), "rePromptCount");
  *(_WORD *)(v2 + 142) = -4864;
}

uint64_t OUTLINED_FUNCTION_108_2@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  v2[18] = a2;
  v2[21] = result;
  v2[22] = 0x5074737269467369;
  v2[23] = 0xEF70704179747261;
  return result;
}

uint64_t OUTLINED_FUNCTION_141_0()
{
  *(unsigned char *)(v2 + 96) = v0;
  *(void *)(v2 + 120) = v1;
  *(void *)(v2 + 128) = 0x746E65746E69;
  *(void *)(v2 + 136) = 0xE600000000000000;
  return 0;
}

uint64_t OUTLINED_FUNCTION_108_3(uint64_t result)
{
  v2[18] = v1;
  v2[21] = result;
  v2[22] = v3 - 2;
  return result;
}

uint64_t OUTLINED_FUNCTION_108_4()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_108_5()
{
  uint64_t v2 = *(void *)(v0 + 32);
  return outlined init with copy of SignalProviding(v2, v0 + 224);
}

uint64_t OUTLINED_FUNCTION_95_1@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  return 0;
}

uint64_t OUTLINED_FUNCTION_95_3()
{
  return 0x73756F6976657270;
}

uint64_t OUTLINED_FUNCTION_144(uint64_t a1)
{
  *(void *)(v1 + 72) = a1;
  *(void *)(v1 + 80) = 0xD000000000000014;
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_95_4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 + 48) = a2;
  *(void *)(v2 + 72) = result;
  strcpy((char *)(v2 + 80), "isLastOfGroup");
  *(_WORD *)(v2 + 94) = -4864;
  return result;
}

void *OUTLINED_FUNCTION_95_6@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = a1;
  return a2;
}

uint64_t OUTLINED_FUNCTION_95_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_95_8()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_22_0(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_119()
{
  return 0x676E615265746164;
}

uint64_t OUTLINED_FUNCTION_88()
{
  return dispatch thunk of CATWrapper.execute(catId:parameters:)();
}

uint64_t OUTLINED_FUNCTION_42(uint64_t a1, uint64_t a2)
{
  __swift_project_value_buffer(a1, a2);
  return swift_errorRetain();
}

uint64_t OUTLINED_FUNCTION_119_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  *(void *)(v30 - 96) = a30;
  return outlined release of Set<String>(v30 - 96);
}

uint64_t type metadata accessor for AppInfoBuilder()
{
  return self;
}

uint64_t type metadata accessor for PhoneAppResolutionOnDeviceFlowStrategy()
{
  return self;
}

uint64_t type metadata accessor for EligibleAppFinder()
{
  return self;
}

uint64_t type metadata accessor for AppUsageProvider()
{
  return self;
}

uint64_t type metadata accessor for PhoneAppResolutionHelper()
{
  uint64_t result = type metadata singleton initialization cache for PhoneAppResolutionHelper;
  if (!type metadata singleton initialization cache for PhoneAppResolutionHelper) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for TrialSmartAppSelectionConfigProvider()
{
  return self;
}

uint64_t type metadata accessor for DiagnosticLogPermission()
{
  return self;
}

uint64_t type metadata accessor for SmartAppSelectionFeatureManager()
{
  return self;
}

void *SmartAppSelectionFeatureManager.init(sharedGlobals:trialSmartAppSelectionConfigProvider:diagnosticLogPermission:)(long long *a1, uint64_t a2, uint64_t a3)
{
  v3[9] = type metadata accessor for SmartAppSelectionFeatureManager();
  v3[10] = &outlined read-only object #0 of SmartAppSelectionFeatureManager.init(sharedGlobals:trialSmartAppSelectionConfigProvider:diagnosticLogPermission:);
  v3[11] = 0;
  v3[12] = 0;
  v3[2] = a2;
  outlined init with take of AppSelectionSignalComponent(a1, (uint64_t)(v3 + 3));
  v3[8] = a3;
  return v3;
}

uint64_t SharedGlobalsProviding.currentRequest.getter()
{
  type metadata accessor for SiriEnvironment();
  if (!static SiriEnvironment.forCurrentTask.getter()) {
    return 0;
  }
  uint64_t v0 = SiriEnvironment.currentRequest.getter();
  swift_release();
  return v0;
}

uint64_t outlined init with copy of PhoneAppResolutionLogging?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneAppResolutionLogging?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t static PhoneCallNLv3Intent.placeCall()@<X0>(uint64_t a1@<X8>)
{
  return static PhoneCallNLv3Intent.placeCall()(a1);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);

  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.Value?);
  uint64_t v5 = OUTLINED_FUNCTION_11_0(v4);
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_8_7();
  uint64_t v6 = type metadata accessor for TerminalIntentNode();
  OUTLINED_FUNCTION_1();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_12_0();
  TerminalElement.SemanticValue.init(_:javaPojoName:)();
  uint64_t v10 = enum case for TerminalElement.Value.semantic(_:);
  uint64_t v11 = type metadata accessor for TerminalElement.Value();
  OUTLINED_FUNCTION_15();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 104))(v2, v10, v11);
  __swift_storeEnumTagSinglePayload(v2, 0, 1, v11);
  OUTLINED_FUNCTION_0_2();
  TerminalIntentNode.init(name:value:semanticTags:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IntentNode>);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_467710;
  *(void *)(v13 + 56) = v6;
  *(void *)(v13 + 64) = &protocol witness table for TerminalIntentNode;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v13 + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v8 + 16))(boxed_opaque_existential_1, v1, v6);
  static PhoneCallNLv3Intent.phoneCallNLv3Intent(_:)(v13, a1);
  swift_bridgeObjectRelease();
  uint64_t v15 = OUTLINED_FUNCTION_54_23();
  return v16(v15);
}

uint64_t static PhoneCallNLv3Intent.phoneCallNLv3Intent(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = a1;
  uint64_t v22 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MitigatorClassification?);
  __chkstk_darwin(v2 - 8);
  uint64_t v21 = (uint64_t)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLState?);
  __chkstk_darwin(v4 - 8);
  uint64_t v20 = (uint64_t)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IntentNode>);
  uint64_t v6 = swift_allocObject();
  long long v23 = xmmword_467710;
  *(_OWORD *)(v6 + 16) = xmmword_467710;
  os_log_type_t v19 = (uint64_t *)(v6 + 32);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = v23;
  uint64_t v17 = (uint64_t *)(v7 + 32);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = v23;
  unint64_t v16 = (uint64_t *)(v8 + 32);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = v23;
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = v23;
  uint64_t v11 = type metadata accessor for NonTerminalIntentNode();
  *(void *)(v10 + 56) = v11;
  *(void *)(v10 + 64) = &protocol witness table for NonTerminalIntentNode;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v10 + 32));
  swift_bridgeObjectRetain();
  NonTerminalIntentNode.init(name:childNodes:resultIDs:)();
  *(void *)(v9 + 56) = v11;
  *(void *)(v9 + 64) = &protocol witness table for NonTerminalIntentNode;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v9 + 32));
  NonTerminalIntentNode.init(name:childNodes:resultIDs:)();
  *(void *)(v8 + 56) = v11;
  *(void *)(v8 + 64) = &protocol witness table for NonTerminalIntentNode;
  __swift_allocate_boxed_opaque_existential_1(v16);
  NonTerminalIntentNode.init(name:childNodes:resultIDs:)();
  *(void *)(v7 + 56) = v11;
  *(void *)(v7 + 64) = &protocol witness table for NonTerminalIntentNode;
  __swift_allocate_boxed_opaque_existential_1(v17);
  NonTerminalIntentNode.init(name:childNodes:resultIDs:)();
  *(void *)(v6 + 56) = v11;
  *(void *)(v6 + 64) = &protocol witness table for NonTerminalIntentNode;
  __swift_allocate_boxed_opaque_existential_1(v19);
  NonTerminalIntentNode.init(name:childNodes:resultIDs:)();
  v24[3] = v11;
  void v24[4] = (uint64_t)&protocol witness table for NonTerminalIntentNode;
  __swift_allocate_boxed_opaque_existential_1(v24);
  NonTerminalIntentNode.init(name:childNodes:resultIDs:)();
  uint64_t v12 = type metadata accessor for NLState();
  __swift_storeEnumTagSinglePayload(v20, 1, 1, v12);
  uint64_t v13 = type metadata accessor for MitigatorClassification();
  __swift_storeEnumTagSinglePayload(v21, 1, 1, v13);
  return NLIntent.init(rootNode:score:originalInput:allWordsMatched:primary:usingExplicitInput:intentRank:isNERBasedParse:intentID:nlState:mitigatorClassification:strippedVoiceTrigger:isInvalidVoiceTrigger:isSuggested:metaDomainActions:)();
}

uint64_t lazy protocol witness table accessor for type AppResolutionBeforeResolveFlow and conformance AppResolutionBeforeResolveFlow(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void **assignWithCopy for AppResolutionBeforeResolveFlow.State(void **a1, void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of AppResolutionBeforeResolveFlow.State((uint64_t)a1, (void (*)(void))type metadata accessor for AppResolutionBeforeResolveFlow.State);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v9 = type metadata accessor for AppResolutionFlowResult();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        return a1;
      }
      uint64_t v7 = *a2;
      *a1 = *a2;
      a1[1] = a2[1];
      id v8 = v7;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AppResolutionBeforeResolveFlow.State(id *a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    uint64_t v3 = type metadata accessor for AppResolutionFlowResult();
    uint64_t v4 = *(uint64_t (**)(id *, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  else if (!result)
  {

    return swift_release();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnyAppResolutionFlow<INIntent> and conformance AnyAppResolutionFlow<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyAppResolutionFlow<INIntent> and conformance AnyAppResolutionFlow<A>;
  if (!lazy protocol witness table cache variable for type AnyAppResolutionFlow<INIntent> and conformance AnyAppResolutionFlow<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AnyAppResolutionFlow<INIntent>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyAppResolutionFlow<INIntent> and conformance AnyAppResolutionFlow<A>);
  }
  return result;
}

uint64_t protocol witness for AppResolutionOnDeviceFlowStrategyAsync.resolveApp(input:) in conformance PhoneAppResolutionOnDeviceFlowStrategy()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = OUTLINED_FUNCTION_3_21();
  return v4(v3);
}

uint64_t protocol witness for AppResolutionOnDeviceFlowStrategyAsync.resolveApp(input:) in conformance PhoneAppResolutionOnDeviceFlowStrategy(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 296) + **(int **)(**(void **)v1 + 296));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = protocol witness for AppResolutionOnDeviceFlowStrategyAsync.resolveApp(input:) in conformance PhoneAppResolutionOnDeviceFlowStrategy;
  return v6(a1);
}

#error "3D48C: call analysis failed (funcsize=203)"

uint64_t PhoneAppResolutionOnDeviceFlowStrategy.resolveApp(input:)()
{
  *(void *)(v1 + 152) = v0;
  return OUTLINED_FUNCTION_21_1((uint64_t)PhoneAppResolutionOnDeviceFlowStrategy.resolveApp(input:));
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 176) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  OUTLINED_FUNCTION_16_1();
  if (*(void *)(v0 + 176))
  {
    __swift_destroy_boxed_opaque_existential_1(v0 + 64);
    swift_release();
  }
  else
  {
    PhoneAppResolutionOnDeviceFlowStrategy.resolveAppByQuery(phoneCallIntent:)((void *)(v0 + 64));
    OUTLINED_FUNCTION_48_21();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  }
  uint64_t v1 = OUTLINED_FUNCTION_3_21();
  return v2(v1);
}

uint64_t PhoneAppResolutionOnDeviceFlowStrategy.shouldSmartAppSelectOrForceAppDisambiguate(phoneCallNLIntent:)()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 128) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_1_0();
  v1[5] = v2;
  v1[6] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppResolverResult?);
  OUTLINED_FUNCTION_11_0(v3);
  v1[7] = OUTLINED_FUNCTION_35();
  uint64_t v4 = type metadata accessor for AppResolverResult();
  v1[8] = v4;
  OUTLINED_FUNCTION_19_0(v4);
  v1[9] = v5;
  v1[10] = OUTLINED_FUNCTION_35();
  uint64_t v6 = type metadata accessor for AppResolutionResult();
  v1[11] = v6;
  OUTLINED_FUNCTION_19_0(v6);
  v1[12] = v7;
  v1[13] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v8, v9, v10);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v17;

  OUTLINED_FUNCTION_18_3();
  if (v0[16])
  {
    uint64_t v2 = v0[12];
    uint64_t v1 = v0[13];
    uint64_t v3 = v0[11];
    swift_retain();
    AppResolutionAction.result.getter();
    uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3);
    uint64_t v6 = v0[12];
    uint64_t v5 = v0[13];
    uint64_t v7 = v0[11];
    if (v4 == enum case for AppResolutionResult.needsDisambiguation(_:))
    {
      uint64_t v9 = v0[5];
      uint64_t v8 = v0[6];
      (*(void (**)(void, void))(v6 + 96))(v0[13], v0[11]);
      swift_bridgeObjectRelease();
      PhoneAppResolutionOnDeviceFlowStrategy.shadowPredictAndStore(phoneCallNLIntent:)(v9);
      uint64_t v10 = *(void *)(v8 + 328);
      uint64_t v11 = *(void *)(v8 + 336);
      __swift_project_boxed_opaque_existential_1((void *)(v8 + 304), v10);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(3, v10, v11);
      swift_release();
      swift_release();
      *(unsigned char *)(v8 + 344) = 4;
      goto LABEL_6;
    }
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  }
  uint64_t v12 = OUTLINED_FUNCTION_50_17();
  v13(v12);
  swift_release();
LABEL_6:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v14 = OUTLINED_FUNCTION_3_21();
  return v15(v14);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v8 = v7;
  *(void *)(v5 + 168) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 176) = v3;
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_16_1();
  uint64_t v1 = v0[6];
  *(void *)(v1 + 16) = v0[22];
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v1 + 16);
  v0[23] = v2;
  swift_bridgeObjectRetain();
  swift_task_alloc();
  OUTLINED_FUNCTION_31_2();
  v0[24] = v3;
  *uint64_t v3 = v4;
  v3[1] = PhoneAppResolutionOnDeviceFlowStrategy.shouldSmartAppSelectOrForceAppDisambiguate(phoneCallNLIntent:);
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[5];
  return PhoneAppResolutionOnDeviceFlowStrategy.executeSmartAppSelect(phoneCallNLIntent:inputApps:)(v5, v6, v2);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v3, v4, v5);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 208) = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v4, v5, v6);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v8;

  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = v0[26];
  uint64_t v3 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v4 = v0[8];
  Signpost.OpenSignpost.end()();
  PhoneAppResolutionOnDeviceFlowStrategy.logAppSelectionActionToSelf(action:)(v1);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v1) {
    *(unsigned char *)(v0[6] + 344) = 3;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = OUTLINED_FUNCTION_3_21();
  return v6(v5);
}

#error "3D8B8: call analysis failed (funcsize=290)"

uint64_t PhoneAppResolutionHelper.shouldForcedDisambiguateApps(phoneCallNLIntent:)()
{
  OUTLINED_FUNCTION_22();
  if (((*(uint64_t (**)(void))(v0 + 200))() & 1) == 0) {
    return 0;
  }
  OUTLINED_FUNCTION_22();
  return (*(uint64_t (**)(void))(v1 + 120))() & 1;
}

uint64_t PhoneAppResolutionHelper.shouldDisambiguateAppsCommon(phoneCallIntent:)(void *a1)
{
  OUTLINED_FUNCTION_1_56(a1);
  Swift::Bool v2 = PhoneCallNLIntent.hasApplicationNameOrId()();
  outlined init with copy of SharedGlobalsProviding((uint64_t)a1, (uint64_t)v32);
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
    outlined init with copy of SharedGlobalsProviding((uint64_t)a1, (uint64_t)v31);
LABEL_20:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    outlined init with copy of SharedGlobalsProviding((uint64_t)a1, (uint64_t)v28);
    goto LABEL_21;
  }
  OUTLINED_FUNCTION_1_56(v32);
  Swift::Bool v3 = PhoneCallNLIntent.isOutgoingCallExcludeCallBackAndRedial()();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
  outlined init with copy of SharedGlobalsProviding((uint64_t)a1, (uint64_t)v31);
  if (!v3) {
    goto LABEL_20;
  }
  OUTLINED_FUNCTION_1_56(v31);
  Swift::Bool v4 = PhoneCallNLIntent.isEmergencyCall()();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  outlined init with copy of SharedGlobalsProviding((uint64_t)a1, (uint64_t)v28);
  if (v4)
  {
LABEL_21:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    outlined init with copy of SharedGlobalsProviding((uint64_t)a1, (uint64_t)v27);
    goto LABEL_22;
  }
  uint64_t v5 = v29;
  uint64_t v6 = v30;
  __swift_project_boxed_opaque_existential_1(v28, v29);
  uint64_t v7 = *(void *)((*(uint64_t (**)(uint64_t, uint64_t))(v6 + 24))(v5, v6) + 16);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  outlined init with copy of SharedGlobalsProviding((uint64_t)a1, (uint64_t)v27);
  if (v7 != 1)
  {
LABEL_22:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
    outlined init with copy of SharedGlobalsProviding((uint64_t)a1, (uint64_t)v26);
    goto LABEL_23;
  }
  OUTLINED_FUNCTION_1_56(v27);
  Swift::Bool v8 = PhoneCallNLIntent.isBusinessNameCall()();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  outlined init with copy of SharedGlobalsProviding((uint64_t)a1, (uint64_t)v26);
  if (v8)
  {
LABEL_23:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    outlined init with copy of SharedGlobalsProviding((uint64_t)a1, (uint64_t)v25);
    goto LABEL_24;
  }
  OUTLINED_FUNCTION_1_56(v26);
  Swift::Bool v9 = PhoneCallNLIntent.isTelephonyTargetFromSrr()();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  outlined init with copy of SharedGlobalsProviding((uint64_t)a1, (uint64_t)v25);
  if (v9)
  {
LABEL_24:
    uint64_t v19 = 0;
    goto LABEL_25;
  }
  uint64_t v10 = v25[4];
  __swift_project_boxed_opaque_existential_1(v25, v25[3]);
  uint64_t v11 = OUTLINED_FUNCTION_18_22();
  uint64_t v13 = v12(v11, v10);
  uint64_t v14 = *(void *)(v13 + 16);
  if (v14)
  {
    uint64_t v15 = v13 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of SharedGlobalsProviding(v15, (uint64_t)v24);
      __swift_project_boxed_opaque_existential_1(v24, v24[3]);
      OUTLINED_FUNCTION_29_4();
      if ((unint64_t)SiriPhoneContact.getPhoneNumber()().value._object) {
        break;
      }
      outlined init with copy of SharedGlobalsProviding((uint64_t)v24, (uint64_t)v21);
      uint64_t v16 = v22;
      uint64_t v17 = v23;
      __swift_project_boxed_opaque_existential_1(v21, v22);
      (*(void (**)(uint64_t, uint64_t))(v17 + 248))(v16, v17);
      if (v18)
      {
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_17_20();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
        goto LABEL_28;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
      v15 += 40;
      if (!--v14)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_27;
      }
    }
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_17_20();
    outlined init with copy of SharedGlobalsProviding((uint64_t)v24, (uint64_t)v21);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
LABEL_28:
    swift_bridgeObjectRelease_n();
    goto LABEL_24;
  }
  swift_bridgeObjectRelease();
LABEL_27:
  uint64_t v19 = 1;
LABEL_25:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  return v19;
}

Swift::Bool __swiftcall PhoneCallNLIntent.hasApplicationNameOrId()()
{
  OUTLINED_FUNCTION_28();
  OUTLINED_FUNCTION_14_11();
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_12_0();
  uint64_t v2 = PhoneCallNLIntent.appName.getter();
  specialized Optional<A>.isNilOrEmpty.getter(v2, v3);
  OUTLINED_FUNCTION_211_0();
  uint64_t v4 = OUTLINED_FUNCTION_4_49();
  v5(v4);
  if (v0)
  {
    uint64_t v6 = PhoneCallNLIntent.applicationId.getter();
    specialized Optional<A>.isNilOrEmpty.getter(v6, v7);
    OUTLINED_FUNCTION_77_3();
  }
  OUTLINED_FUNCTION_14_23();
  v8();
  OUTLINED_FUNCTION_24();
  return result;
}

Swift::Bool __swiftcall PhoneCallNLIntent.isOutgoingCallExcludeCallBackAndRedial()()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_5_8();
  uint64_t v26 = v4;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_89_1();
  unint64_t v7 = *(void (**)(void))(v6 + 104);
  v7();
  OUTLINED_FUNCTION_24_23();
  if (v11)
  {
    int v25 = 0;
  }
  else
  {
    uint64_t v9 = PhoneCallVerb.rawValue.getter(v8);
    BOOL v11 = v9 == 0x656D697465636166 && v10 == 0xEE006F6964756120;
    if (v11)
    {
      OUTLINED_FUNCTION_102_2();
      int v25 = 1;
    }
    else
    {
      int v25 = OUTLINED_FUNCTION_23_18();
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v12 = OUTLINED_FUNCTION_154_0();
  ((void (*)(uint64_t))v7)(v12);
  OUTLINED_FUNCTION_24_23();
  if (v11)
  {
    int v24 = 0;
  }
  else
  {
    uint64_t v14 = PhoneCallVerb.rawValue.getter(v13);
    if (v14 == 0x656D697465636166 && v15 == 0xE800000000000000)
    {
      swift_bridgeObjectRelease();
      int v24 = 1;
    }
    else
    {
      int v24 = OUTLINED_FUNCTION_26_18();
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v17 = OUTLINED_FUNCTION_154_0();
  int v18 = ((unsigned __int8 (*)(uint64_t))v7)(v17);
  uint64_t v19 = *(void (**)(void))(v3 + 16);
  OUTLINED_FUNCTION_8_12();
  v19();
  BOOL v20 = v18 == 17 && PhoneCallNLIntent.hasPhoneNumber()();
  uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v21(v0, v2);
  int v22 = PhoneCallNLIntent.hasCallVerb()() | v25 | v24;
  OUTLINED_FUNCTION_8_12();
  v19();
  if ((v22 & 1) == 0 && !v20) {
    PhoneCallNLIntent.isInferredCallFromRedialOrCallBack()();
  }
  v21(v26, v2);
  OUTLINED_FUNCTION_40_11();
  OUTLINED_FUNCTION_26_1();
  return result;
}

uint64_t OUTLINED_FUNCTION_157()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_11_6@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_157_1@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(result + 32) = v2;
  *(void *)(result + 40) = (a2 - 32) | 0x8000000000000000;
  return result;
}

uint64_t OUTLINED_FUNCTION_186@<X0>(uint64_t *a1@<X2>, uint64_t a2@<X8>)
{
  return outlined init with copy of SpeakableString?(a2, v2, a1);
}

void OUTLINED_FUNCTION_225()
{
  *(void *)(v3 + 184) = (v1 - 32) | 0x8000000000000000;
  *(unsigned char *)(v3 + 192) = v0;
  *(void *)(v3 + 216) = v2;
  *(void *)(v3 + 224) = v4;
}

void OUTLINED_FUNCTION_157_3()
{
}

uint64_t protocol witness for SiriPhoneContact.handleLabel.getter in conformance PhoneCallContactIntentNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 424))();
}

uint64_t PhoneCallContactIntentNode.handleLabel.getter()
{
  OUTLINED_FUNCTION_4_7();
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

Swift::Bool __swiftcall SmartAppSelectionFeatureManager.isForcedAppDisambiguationEnabled()()
{
  Swift::Bool v1 = v0;
  uint64_t v2 = OUTLINED_FUNCTION_12_10();
  v3(v2);
  OUTLINED_FUNCTION_23();
  char v5 = (*(uint64_t (**)(void))(v4 + 168))();
  swift_release();
  if ((v5 & 1) == 0)
  {
    uint64_t v16 = OUTLINED_FUNCTION_12_10();
    v17(v16);
    OUTLINED_FUNCTION_23();
    char v19 = (*(uint64_t (**)(void))(v18 + 176))();
    uint64_t v20 = swift_release();
    if (v19)
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v21 = type metadata accessor for Logger();
      OUTLINED_FUNCTION_4_24(v21, (uint64_t)static Logger.siriPhone);
      int v22 = (void *)Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_4_27(v23))
      {
        OUTLINED_FUNCTION_5_22();
        OUTLINED_FUNCTION_5_23();
        OUTLINED_FUNCTION_2_32(4.8149e-34);
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_0_22();
        swift_bridgeObjectRelease();
        uint64_t v24 = swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_13_8(v24, v25, v26, v27, v28);
        OUTLINED_FUNCTION_7_24();
        OUTLINED_FUNCTION_6_2();
        swift_bridgeObjectRelease();
        uint64_t v31 = "%s ForceTrialFeatureOff flag is on for internal testing, forcedAppDisambiguation is off";
LABEL_11:
        OUTLINED_FUNCTION_19_10(&dword_0, v29, v30, v31);
        OUTLINED_FUNCTION_27_7();
LABEL_12:
        OUTLINED_FUNCTION_6();
        OUTLINED_FUNCTION_6();

        return 0;
      }
    }
    else
    {
      if (((*(uint64_t (**)(uint64_t))(*(void *)v0 + 144))(v20) & 1) == 0) {
        return 0;
      }
      if (SmartAppSelectionFeatureManager.isLongEnoughSinceLastForcedAppDisambiguationShowed()())
      {
        OUTLINED_FUNCTION_22();
        if ((*(uint64_t (**)(void, uint64_t))(v32 + 96))(0, v0 + 24))
        {
          if (one-time initialization token for siriPhone != -1) {
            swift_once();
          }
          uint64_t v33 = type metadata accessor for Logger();
          OUTLINED_FUNCTION_4_24(v33, (uint64_t)static Logger.siriPhone);
          unint64_t v7 = (void *)Logger.logObject.getter();
          os_log_type_t v34 = static os_log_type_t.debug.getter();
          if (OUTLINED_FUNCTION_4_27(v34))
          {
            OUTLINED_FUNCTION_5_22();
            OUTLINED_FUNCTION_5_23();
            OUTLINED_FUNCTION_2_32(4.8149e-34);
            swift_bridgeObjectRetain();
            OUTLINED_FUNCTION_0_22();
            swift_bridgeObjectRelease();
            uint64_t v35 = swift_bridgeObjectRelease();
            OUTLINED_FUNCTION_13_8(v35, v36, v37, v38, v39);
            OUTLINED_FUNCTION_7_24();
            OUTLINED_FUNCTION_6_2();
            swift_bridgeObjectRelease();
            OUTLINED_FUNCTION_19_10(&dword_0, v40, v41, "%s forcedAppDisambiguation is enabled for current request");
            OUTLINED_FUNCTION_16_16();
            OUTLINED_FUNCTION_6();
            OUTLINED_FUNCTION_6();

            return v1;
          }
LABEL_20:

          OUTLINED_FUNCTION_6_2();
          return 1;
        }
        if (one-time initialization token for siriPhone != -1) {
          swift_once();
        }
        uint64_t v51 = type metadata accessor for Logger();
        OUTLINED_FUNCTION_4_24(v51, (uint64_t)static Logger.siriPhone);
        int v22 = (void *)Logger.logObject.getter();
        os_log_type_t v52 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_4_27(v52))
        {
          OUTLINED_FUNCTION_5_22();
          OUTLINED_FUNCTION_5_23();
          OUTLINED_FUNCTION_2_32(4.8149e-34);
          swift_bridgeObjectRetain();
          OUTLINED_FUNCTION_0_22();
          swift_bridgeObjectRelease();
          uint64_t v53 = swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_13_8(v53, v54, v55, v56, v57);
          OUTLINED_FUNCTION_7_24();
          OUTLINED_FUNCTION_6_2();
          swift_bridgeObjectRelease();
          uint64_t v31 = "%s trial experiment for forcedAppDisambiguation is off since current request isn't picked up randomly";
          goto LABEL_11;
        }
      }
      else
      {
        if (one-time initialization token for siriPhone != -1) {
          swift_once();
        }
        uint64_t v42 = type metadata accessor for Logger();
        OUTLINED_FUNCTION_4_24(v42, (uint64_t)static Logger.siriPhone);
        int v22 = (void *)Logger.logObject.getter();
        os_log_type_t v43 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_4_27(v43))
        {
          swift_slowAlloc();
          OUTLINED_FUNCTION_5_23();
          OUTLINED_FUNCTION_19_11(4.8151e-34);
          swift_bridgeObjectRetain();
          OUTLINED_FUNCTION_24_13();
          swift_bridgeObjectRelease();
          uint64_t v44 = swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_13_8(v44, v45, v46, v47, v48);
          OUTLINED_FUNCTION_20_10();
          OUTLINED_FUNCTION_6_2();
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_18_11();
          OUTLINED_FUNCTION_26_10(&dword_0, v49, v50, "%s forcedAppDisambiguation is off since there is a forced apps disambiguation within %ld days");
          swift_arrayDestroy();
          goto LABEL_12;
        }
      }
    }

    OUTLINED_FUNCTION_6_2();
    return 0;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_4_24(v6, (uint64_t)static Logger.siriPhone);
  unint64_t v7 = (void *)Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (!OUTLINED_FUNCTION_4_27(v8)) {
    goto LABEL_20;
  }
  OUTLINED_FUNCTION_5_22();
  OUTLINED_FUNCTION_5_23();
  OUTLINED_FUNCTION_2_32(4.8149e-34);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_0_22();
  swift_bridgeObjectRelease();
  uint64_t v9 = swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_13_8(v9, v10, v11, v12, v13);
  OUTLINED_FUNCTION_7_24();
  OUTLINED_FUNCTION_6_2();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_19_10(&dword_0, v14, v15, "%s forcedAppDisambiguation override flag is on");
  OUTLINED_FUNCTION_16_16();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_6();

  return v1;
}

uint64_t PhoneCallFeatureManager.shouldEnableForcedAppDisambiguation.getter()
{
  OUTLINED_FUNCTION_22();
  OUTLINED_FUNCTION_1_86();
  v0();
  OUTLINED_FUNCTION_2_102(v4);
  uint64_t v1 = OUTLINED_FUNCTION_3_35();
  v2(v1);
  return OUTLINED_FUNCTION_4_83((uint64_t)v4);
}

uint64_t PhoneCallFeatureFlags.forcedAppDisambiguationFlag.getter()
{
  OUTLINED_FUNCTION_0_15();
  if (!v1) {
    return 1;
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  while (1)
  {
    OUTLINED_FUNCTION_3_22(v2, v3, v4, v5, v6, v7, v8, v9, v20);
    uint64_t v10 = isFeatureEnabled(_:)();
    OUTLINED_FUNCTION_4_19(v10, v11, v12, v13, v14, v15, v16, v17, v21);
    if ((v0 & 1) == 0) {
      break;
    }
    OUTLINED_FUNCTION_2_19();
    if (v18)
    {
      outlined release of Set<String>((uint64_t)v22);
      return 1;
    }
  }
  outlined release of Set<String>((uint64_t)v22);
  return 0;
}

uint64_t PhoneCallFeatureManager.shouldForceTrialFeatureOff.getter()
{
  OUTLINED_FUNCTION_22();
  OUTLINED_FUNCTION_1_86();
  v0();
  OUTLINED_FUNCTION_2_102(v8);
  uint64_t v1 = OUTLINED_FUNCTION_3_35();
  v2(v1);
  if (v3)
  {
    Swift::String v4 = String.lowercased()();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    if (v4._countAndFlagsBits == 1702195828 && v4._object == (void *)0xE400000000000000)
    {
      swift_bridgeObjectRelease();
      char v6 = 1;
    }
    else
    {
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    char v6 = 0;
  }
  return v6 & 1;
}

uint64_t PhoneCallFeatureFlags.forceTrialFeatureOff.getter()
{
  return specialized UserDefaultsSetting.wrappedValue.getter(*(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
}

Swift::Bool __swiftcall SmartAppSelectionFeatureManager.shouldEnableSignalCollectionBasedOnCommonConditions()()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7];
  __swift_project_boxed_opaque_existential_1(v0 + 3, v1);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v2 + 8))(&v33, v1, v2);
  char v3 = SmartAppSelectionFeatureManager.validateDevice(_:)(&v33);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
  if (v3)
  {
    OUTLINED_FUNCTION_22();
    if ((*(uint64_t (**)(void))(v4 + 80))()) {
      return 1;
    }
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_4_24(v20, (uint64_t)static Logger.siriPhone);
    uint64_t v7 = (void *)Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_4_27(v21))
    {
      OUTLINED_FUNCTION_5_22();
      uint64_t v32 = OUTLINED_FUNCTION_5_23();
      OUTLINED_FUNCTION_1_29(4.8149e-34);
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_0_22();
      swift_bridgeObjectRelease();
      uint64_t v22 = swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_15_12(v22, v23, v24, v25, v26, v27, v28, v29, v30, v32, v32, v33, v34);
      OUTLINED_FUNCTION_6_18();
      OUTLINED_FUNCTION_6_2();
      swift_bridgeObjectRelease();
      char v19 = "%s forcedAppDisambiguation/appNameSpecifiedByUserDataCollection is off since diagnostic and log permission i"
            "s not allowed on this device";
      goto LABEL_12;
    }
LABEL_13:

    OUTLINED_FUNCTION_6_2();
    return 0;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_4_24(v6, (uint64_t)static Logger.siriPhone);
  uint64_t v7 = (void *)Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (!OUTLINED_FUNCTION_4_27(v8)) {
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_5_22();
  uint64_t v31 = OUTLINED_FUNCTION_5_23();
  OUTLINED_FUNCTION_1_29(4.8149e-34);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_0_22();
  swift_bridgeObjectRelease();
  uint64_t v9 = swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_15_12(v9, v10, v11, v12, v13, v14, v15, v16, v30, v31, v31, v33, v34);
  OUTLINED_FUNCTION_6_18();
  OUTLINED_FUNCTION_6_2();
  swift_bridgeObjectRelease();
  char v19 = "%s forcedAppDisambiguation/appNameSpecifiedByUserDataCollection is off since current device is not eligible";
LABEL_12:
  OUTLINED_FUNCTION_19_10(&dword_0, v17, v18, v19);
  OUTLINED_FUNCTION_27_7();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_6();

  return 0;
}

uint64_t SmartAppSelectionFeatureManager.validateDevice(_:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  char v2 = dispatch thunk of DeviceState.isPhone.getter();
  outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v5);
  if (v2)
  {
    char v3 = 1;
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v5, v5[3]);
    char v3 = dispatch thunk of DeviceState.isCarPlay.getter();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  return v3 & 1;
}

Swift::Bool __swiftcall DiagnosticLogPermission.isDiagnosticsAndUsageEnabled()()
{
  return DiagnosticLogSubmissionEnabled();
}

BOOL SmartAppSelectionFeatureManager.isLongEnoughSinceLastForcedAppDisambiguationShowed()()
{
  type metadata accessor for Date();
  OUTLINED_FUNCTION_14_11();
  __chkstk_darwin(v3);
  uint64_t v4 = OUTLINED_FUNCTION_17_8();
  v5(v4);
  OUTLINED_FUNCTION_28_7();
  Date.timeIntervalSince1970.getter();
  uint64_t v6 = OUTLINED_FUNCTION_21_9();
  v7(v6);
  v12[0] = 0;
  uint64_t v13 = v2;
  uint64_t v14 = _swiftEmptyArrayStorage;
  unint64_t v8 = lazy protocol witness table accessor for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory();
  SiriPhoneDefaultsProviding.getOrDefault<A>(key:defaultValue:)(2, (uint64_t)v12, v0, (uint64_t)&type metadata for ForcedAppDisambiguationHistory, v1, v8, (uint64_t)v15);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  ForcedAppDisambiguationHistory.daysSinceLastShowed.getter();
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  return v10 > 28;
}

id SharedGlobalsProviding.siriPhoneDefaults.getter@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  uint64_t v2 = (void *)static SiriPhoneDefaults.instance;
  a1[3] = &type metadata for SiriPhoneDefaults;
  a1[4] = &protocol witness table for SiriPhoneDefaults;
  *a1 = v2;

  return v2;
}

void SiriPhoneDefaultsProviding.getOrDefault<A>(key:defaultValue:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v25 = a7;
  OUTLINED_FUNCTION_1();
  uint64_t v13 = v12;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Optional();
  OUTLINED_FUNCTION_1();
  uint64_t v19 = v18;
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v23 - v21;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 8))(a1, a4, a6, a3, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v24, a4);
  if (__swift_getEnumTagSinglePayload((uint64_t)v22, 1, a4) == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v25, v16, a4);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v17);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, a4);
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v25, v22, a4);
  }
  OUTLINED_FUNCTION_26_1();
}

void protocol witness for SiriPhoneDefaultsProviding.get<A>(key:) in conformance SiriPhoneDefaults(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  SiriPhoneDefaults.get<A>(key:)(*v3, a1, a2, a3);
}

void SiriPhoneDefaults.get<A>(key:)(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v53 = a3;
  uint64_t v54 = a4;
  type metadata accessor for Optional();
  OUTLINED_FUNCTION_1();
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)&v46 - v7;
  OUTLINED_FUNCTION_1();
  uint64_t v52 = v9;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v46 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v46 - v17;
  if (a1
    && (NSString v19 = String._bridgeToObjectiveC()(),
        swift_bridgeObjectRelease(),
        id v20 = [a1 dictionaryForKey:v19],
        v19,
        v20))
  {
    uint64_t v21 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    specialized _dictionaryUpCast<A, B, C, D>(_:)(v21);
    static DictionaryEncoderDecoder.decode<A>(type:_:)();
    swift_bridgeObjectRelease();
    __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, a2);
    swift_bridgeObjectRelease();
    uint64_t v31 = v52;
    uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v52 + 32);
    v32(v18, v8, a2);
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.siriPhone);
    unint64_t v34 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v34(v16, v18, a2);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.debug.getter();
    uint64_t v51 = v35;
    int v50 = v36;
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)OUTLINED_FUNCTION_47();
      uint64_t v48 = OUTLINED_FUNCTION_14_0();
      uint64_t v55 = v48;
      uint64_t v49 = v32;
      *(_DWORD *)uint64_t v37 = 136315138;
      uint64_t v46 = v37 + 4;
      uint64_t v47 = v37;
      v34(v13, v16, a2);
      uint64_t v38 = *(void (**)(void))(v31 + 8);
      OUTLINED_FUNCTION_3_86();
      v38();
      uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v41 = v40;
      OUTLINED_FUNCTION_3_86();
      v38();
      uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, &v55);
      OUTLINED_FUNCTION_7_22(v42);
      uint64_t v32 = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      os_log_type_t v43 = v51;
      _os_log_impl(&dword_0, v51, (os_log_type_t)v50, "#SiriPhoneDefaults Get: %s", v47, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {
      OUTLINED_FUNCTION_3_86();
      v44();
    }
    uint64_t v45 = v54;
    v32((char *)v54, v18, a2);
    __swift_storeEnumTagSinglePayload(v45, 0, 1, a2);
    OUTLINED_FUNCTION_26_1();
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.siriPhone);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl(&dword_0, v23, v24, "#SiriPhoneDefaults No entry found.", v25, 2u);
      OUTLINED_FUNCTION_6();
    }

    OUTLINED_FUNCTION_26_1();
    __swift_storeEnumTagSinglePayload(v26, v27, v28, v29);
  }
}

uint64_t storeEnumTagSinglePayload for AppQuery(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)Swift::Bool result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AppQuery(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t destroy for ForcedAppDisambiguationHistory()
{
  return swift_bridgeObjectRelease();
}

void Array.subscript.readspecialized (id *a1)
{
}

void ForcedAppDisambiguationHistory.daysSinceLastShowed.getter()
{
  type metadata accessor for Date();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = v0;
  uint64_t v3 = __chkstk_darwin(v2);
  __chkstk_darwin(v3);
  Date.init(timeIntervalSince1970:)();
  Date.init()();
  Date.distance(to:)();
  double v5 = v4;
  uint64_t v6 = *(void (**)(void))(v1 + 8);
  OUTLINED_FUNCTION_2_112();
  v6();
  OUTLINED_FUNCTION_2_112();
  v6();
  if (v5 / 86400.0 < 0.0) {
    double v7 = 0.0;
  }
  else {
    double v7 = v5 / 86400.0;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.siriPhone);
  swift_bridgeObjectRetain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    os_log_type_t v16 = v10;
    uint64_t v11 = swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315650;
    uint64_t v17 = v15;
    DefaultStringInterpolation.appendInterpolation(type:tags:function:)((uint64_t)&type metadata for ForcedAppDisambiguationHistory, (uint64_t)&outlined read-only object #0 of ForcedAppDisambiguationHistory.daysSinceLastShowed.getter, 0, 0);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    Date.init(timeIntervalSince1970:)();
    lazy protocol witness table accessor for type Date and conformance Date();
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v14 = v13;
    OUTLINED_FUNCTION_2_112();
    v6();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 22) = 2048;
    if ((~*(void *)&v7 & 0x7FF0000000000000) == 0)
    {
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    if (v7 <= -9.22337204e18)
    {
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    if (v7 >= 9.22337204e18)
    {
LABEL_20:
      __break(1u);
      return;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v9, v16, "%s is shown at %s, which is %ld days ago last time", (uint8_t *)v11, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    if ((~*(void *)&v7 & 0x7FF0000000000000) == 0)
    {
      __break(1u);
      goto LABEL_16;
    }
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v7 >= 9.22337204e18)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
}

BOOL TrialSmartAppSelectionConfigProvider.isEnabled(configKey:sharedGlobals:)(char a1)
{
  unint64_t v2 = 0xD000000000000017;
  unint64_t v3 = 0x80000000004907A0;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 0x80000000004907C0;
      unint64_t v2 = 0xD000000000000016;
      break;
    case 2:
      unint64_t v3 = 0xEC000000656C7552;
      unint64_t v2 = 0x6567617355707061;
      break;
    case 3:
      unint64_t v3 = 0xEC0000006E6F6974;
      unint64_t v2 = 0x63656C6553707061;
      break;
    default:
      break;
  }
  v4._uint64_t countAndFlagsBits = 0xD000000000000032;
  v4._object = (void *)0x8000000000490D90;
  unint64_t v5 = v3;
  Swift::Bool v6 = TRIClient.isEnabled(forFactor:withNamespace:)(*(Swift::String *)&v2, v4);
  swift_bridgeObjectRelease();
  return v6;
}

Swift::Bool __swiftcall TRIClient.isEnabled(forFactor:withNamespace:)(Swift::String forFactor, Swift::String withNamespace)
{
  unint64_t v3 = type metadata accessor for TRIClient();
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v2 levelForFactor:v4 withNamespaceName:v5];

  if (!v6)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_0_68(v13, (uint64_t)static Logger.siriPhone);
    unint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v14, v15))
    {

      OUTLINED_FUNCTION_2_16();
      return 0;
    }
    uint64_t v16 = swift_slowAlloc();
    uint64_t v17 = OUTLINED_FUNCTION_10_0();
    *(_DWORD *)uint64_t v16 = 136315394;
    OUTLINED_FUNCTION_1_102(v17, (uint64_t)&outlined read-only object #0 of TRIClient.isEnabled(forFactor:withNamespace:));
    OUTLINED_FUNCTION_14_13(v18, v19, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2080;
    uint64_t v21 = swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_2_115(v21, v22, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_8_90();
    _os_log_impl(&dword_0, v14, v15, "%s - Trial factor %s can't be loaded", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
LABEL_31:

    return 0;
  }
  unsigned int v7 = [v6 levelOneOfCase];
  if (v7 == 10)
  {
    unsigned __int8 v12 = [v6 BOOLeanValue];
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_0_68(v24, (uint64_t)static Logger.siriPhone);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v25, v26))
    {

      OUTLINED_FUNCTION_2_16();
      return v12;
    }
    uint64_t v27 = swift_slowAlloc();
    uint64_t v58 = OUTLINED_FUNCTION_10_0();
    *(_DWORD *)uint64_t v27 = 136315650;
    OUTLINED_FUNCTION_1_102(v58, (uint64_t)&outlined read-only object #0 of TRIClient.isEnabled(forFactor:withNamespace:));
    OUTLINED_FUNCTION_14_13(v28, v29, v30, v58, 0, 0xE000000000000000, v58);
    OUTLINED_FUNCTION_5_75();
    swift_bridgeObjectRelease();
    uint64_t v31 = OUTLINED_FUNCTION_11_69();
    OUTLINED_FUNCTION_2_115(v31, v32, v33);
    OUTLINED_FUNCTION_12_56();
    OUTLINED_FUNCTION_8_90();
    *(_WORD *)(v27 + 22) = 1024;
    OUTLINED_FUNCTION_7_82();
    unint64_t v34 = "%s - Trial factor %s is configured as BOOLean value %{BOOL}d";
    uint64_t v35 = v25;
    os_log_type_t v36 = v26;
    uint64_t v37 = (uint8_t *)v27;
    uint32_t v38 = 28;
LABEL_28:
    _os_log_impl(&dword_0, v35, v36, v34, v37, v38);
    OUTLINED_FUNCTION_6_88();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();

    return v12;
  }
  if (v7 != 15)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_0_68(v39, (uint64_t)static Logger.siriPhone);
    unint64_t v14 = v6;
    unint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = swift_slowAlloc();
      uint64_t v59 = OUTLINED_FUNCTION_10_0();
      *(_DWORD *)uint64_t v42 = 136315650;
      OUTLINED_FUNCTION_1_102(v59, (uint64_t)&outlined read-only object #0 of TRIClient.isEnabled(forFactor:withNamespace:));
      OUTLINED_FUNCTION_14_13(v43, v44, v45, v59, 0, 0xE000000000000000, v59);
      OUTLINED_FUNCTION_5_75();
      swift_bridgeObjectRelease();
      *(_WORD *)(v42 + 12) = 2080;
      uint64_t v46 = swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_2_115(v46, v47, v48);
      OUTLINED_FUNCTION_12_56();
      OUTLINED_FUNCTION_8_90();
      *(_WORD *)(v42 + 22) = 1024;
      [v14 levelOneOfCase];

      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_0, v40, v41, "%s - Trial factor %s is configed as unsupported type %d, only BooleanValue and StringValue(True, False) are supported", (uint8_t *)v42, 0x1Cu);
      OUTLINED_FUNCTION_6_88();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();

      return 0;
    }

    OUTLINED_FUNCTION_2_16();
    goto LABEL_31;
  }
  Swift::Bool result = [v6 doubleValue];
  double v10 = v9;
  if (v9 <= 0.0)
  {
    unsigned __int8 v12 = 0;
    goto LABEL_24;
  }
  double v11 = 1.0 / v9;
  if ((~COERCE__INT64(1.0 / v10) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v11 <= -9.22337204e18)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v11 >= 9.22337204e18)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if ((uint64_t)v11 >= 1)
  {
    unsigned __int8 v12 = specialized static FixedWidthInteger.random<A>(in:using:)(1, (uint64_t)v11) == 1;
LABEL_24:
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v49 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_0_68(v49, (uint64_t)static Logger.siriPhone);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v25, v50))
    {

      OUTLINED_FUNCTION_2_16();
      return v12;
    }
    uint64_t v51 = swift_slowAlloc();
    uint64_t v60 = OUTLINED_FUNCTION_10_0();
    *(_DWORD *)uint64_t v51 = 136315906;
    DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v3, (uint64_t)&outlined read-only object #0 of TRIClient.isEnabled(forFactor:withNamespace:), 0, 0);
    OUTLINED_FUNCTION_14_13(v52, v53, v54, v60, 0, 0xE000000000000000, v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v55 = OUTLINED_FUNCTION_11_69();
    OUTLINED_FUNCTION_2_115(v55, v56, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_8_90();
    *(_WORD *)(v51 + 22) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v51 + 32) = 1024;
    OUTLINED_FUNCTION_7_82();
    unint64_t v34 = "%s - Trial factor %s is configured as double value %f, 1 is maximum, and current request is randomly selected: %{BOOL}d";
    uint64_t v35 = v25;
    os_log_type_t v36 = v50;
    uint64_t v37 = (uint8_t *)v51;
    uint32_t v38 = 38;
    goto LABEL_28;
  }
LABEL_38:
  __break(1u);
  return result;
}

unint64_t specialized RandomNumberGenerator.next<A>(upperBound:)(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    swift_stdlib_random();
    Swift::Bool result = (0 * (unsigned __int128)v1) >> 64;
    if (-(uint64_t)v1 % v1)
    {
      while (1)
        swift_stdlib_random();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

BOOL PhoneAppResolutionHelper.shouldQueryAppSelection(phoneCallNLIntent:)(uint64_t a1)
{
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_22();
  char v5 = (*(uint64_t (**)(void))(v4 + 208))();
  outlined init with copy of SharedGlobalsProviding(a1, (uint64_t)&v20);
  if (v5)
  {
    char v6 = (*(uint64_t (**)(uint64_t *))(*(void *)v2 + 200))(&v20);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v20);
    outlined init with copy of SharedGlobalsProviding(a1, (uint64_t)v19);
    if (v6)
    {
      OUTLINED_FUNCTION_1_56(v19);
      BOOL v7 = !PhoneCallNLIntent.hasVideoCallSemantic()();
      goto LABEL_6;
    }
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v20);
    outlined init with copy of SharedGlobalsProviding(a1, (uint64_t)v19);
  }
  BOOL v7 = 0;
LABEL_6:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.siriPhone);
  OUTLINED_FUNCTION_18_22();
  swift_retain_n();
  double v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    v19[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315394;
    uint64_t v12 = *(void *)(v2 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin24PhoneAppResolutionHelper_logPrefix);
    uint64_t v13 = *(void *)(v2 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin24PhoneAppResolutionHelper_logPrefix + 8);
    uint64_t v15 = *(void *)(v2 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin24PhoneAppResolutionHelper_logPrefix + 16);
    uint64_t v14 = *(void *)(v2 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin24PhoneAppResolutionHelper_logPrefix + 24);
    uint64_t v20 = 0;
    unint64_t v21 = 0xE000000000000000;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v12, v13, v15, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    if (v7) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = 7630702;
    }
    if (v7) {
      unint64_t v17 = 0xE000000000000000;
    }
    else {
      unint64_t v17 = 0xE300000000000000;
    }
    uint64_t v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v9, v10, "%s this request is %s eligible for smart app selection.", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {

    swift_release_n();
  }
  return v7;
}

Swift::Bool __swiftcall PhoneAppResolutionHelper.isAppSelectionEnabled()()
{
  OUTLINED_FUNCTION_22();
  return (*(uint64_t (**)(void))(v0 + 136))() & 1;
}

Swift::Bool __swiftcall SmartAppSelectionFeatureManager.isAppSelectionEnabled()()
{
  Swift::Bool v1 = (char)v0;
  uint64_t v2 = v0 + 3;
  uint64_t v3 = OUTLINED_FUNCTION_12_10();
  v4(v3);
  OUTLINED_FUNCTION_23();
  char v6 = (*(uint64_t (**)(void))(v5 + 184))();
  swift_release();
  if ((v6 & 1) == 0)
  {
    uint64_t v20 = v0[6];
    uint64_t v21 = v0[7];
    __swift_project_boxed_opaque_existential_1(v0 + 3, v20);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v21 + 8))(&v66, v20, v21);
    char v22 = SmartAppSelectionFeatureManager.validateDevice(_:)(&v66);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v66);
    if (v22)
    {
      OUTLINED_FUNCTION_22();
      if ((*(uint64_t (**)(uint64_t, void *))(v23 + 96))(3, v2))
      {
        if (one-time initialization token for siriPhone != -1) {
          swift_once();
        }
        uint64_t v24 = type metadata accessor for Logger();
        OUTLINED_FUNCTION_4_24(v24, (uint64_t)static Logger.siriPhone);
        uint64_t v8 = (void *)Logger.logObject.getter();
        os_log_type_t v25 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_4_27(v25))
        {
          OUTLINED_FUNCTION_5_22();
          uint64_t v63 = OUTLINED_FUNCTION_5_23();
          OUTLINED_FUNCTION_1_29(4.8149e-34);
          swift_bridgeObjectRetain();
          OUTLINED_FUNCTION_0_22();
          swift_bridgeObjectRelease();
          uint64_t v26 = swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_15_12(v26, v27, v28, v29, v30, v31, v32, v33, v61, v63, v63, v66, v67);
          OUTLINED_FUNCTION_6_18();
          OUTLINED_FUNCTION_6_2();
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_19_10(&dword_0, v34, v35, "%s trial experiment for AppSelection is on");
          OUTLINED_FUNCTION_25_8();
          OUTLINED_FUNCTION_6();
          OUTLINED_FUNCTION_6();

          return v1;
        }
LABEL_12:

        OUTLINED_FUNCTION_6_2();
        return 1;
      }
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v50 = type metadata accessor for Logger();
      OUTLINED_FUNCTION_4_24(v50, (uint64_t)static Logger.siriPhone);
      uint64_t v37 = (void *)Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_4_27(v51))
      {
        OUTLINED_FUNCTION_5_22();
        uint64_t v65 = OUTLINED_FUNCTION_5_23();
        OUTLINED_FUNCTION_1_29(4.8149e-34);
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_0_22();
        swift_bridgeObjectRelease();
        uint64_t v52 = swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_15_12(v52, v53, v54, v55, v56, v57, v58, v59, v61, v65, v65, v66, v67);
        OUTLINED_FUNCTION_6_18();
        OUTLINED_FUNCTION_6_2();
        swift_bridgeObjectRelease();
        uint64_t v49 = "%s trial experiment for AppSelection is off";
        goto LABEL_21;
      }
    }
    else
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for Logger();
      OUTLINED_FUNCTION_4_24(v36, (uint64_t)static Logger.siriPhone);
      uint64_t v37 = (void *)Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_4_27(v38))
      {
        OUTLINED_FUNCTION_5_22();
        uint64_t v64 = OUTLINED_FUNCTION_5_23();
        OUTLINED_FUNCTION_1_29(4.8149e-34);
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_0_22();
        swift_bridgeObjectRelease();
        uint64_t v39 = swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_15_12(v39, v40, v41, v42, v43, v44, v45, v46, v61, v64, v64, v66, v67);
        OUTLINED_FUNCTION_6_18();
        OUTLINED_FUNCTION_6_2();
        swift_bridgeObjectRelease();
        uint64_t v49 = "%s SEAS is off since current device is not eligible";
LABEL_21:
        OUTLINED_FUNCTION_19_10(&dword_0, v47, v48, v49);
        OUTLINED_FUNCTION_27_7();
        OUTLINED_FUNCTION_6();
        OUTLINED_FUNCTION_6();

        return 0;
      }
    }

    OUTLINED_FUNCTION_6_2();
    return 0;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_4_24(v7, (uint64_t)static Logger.siriPhone);
  uint64_t v8 = (void *)Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (!OUTLINED_FUNCTION_4_27(v9)) {
    goto LABEL_12;
  }
  OUTLINED_FUNCTION_5_22();
  uint64_t v62 = OUTLINED_FUNCTION_5_23();
  OUTLINED_FUNCTION_1_29(4.8149e-34);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_0_22();
  swift_bridgeObjectRelease();
  uint64_t v10 = swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_15_12(v10, v11, v12, v13, v14, v15, v16, v17, v61, v62, v62, v66, v67);
  OUTLINED_FUNCTION_6_18();
  OUTLINED_FUNCTION_6_2();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_19_10(&dword_0, v18, v19, "%s SmartEnoughAppSelection override flag is on");
  OUTLINED_FUNCTION_25_8();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_6();

  return v1;
}

uint64_t PhoneCallFeatureManager.shouldEnableSmartEnoughAppSelection.getter()
{
  OUTLINED_FUNCTION_22();
  OUTLINED_FUNCTION_1_86();
  v0();
  OUTLINED_FUNCTION_2_102(v4);
  uint64_t v1 = OUTLINED_FUNCTION_3_35();
  v2(v1);
  return OUTLINED_FUNCTION_4_83((uint64_t)v4);
}

uint64_t PhoneCallFeatureFlags.smartEnoughAppSelectionFlag.getter()
{
  OUTLINED_FUNCTION_0_15();
  if (!v1) {
    return 1;
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  while (1)
  {
    OUTLINED_FUNCTION_3_22(v2, v3, v4, v5, v6, v7, v8, v9, v20);
    uint64_t v10 = isFeatureEnabled(_:)();
    OUTLINED_FUNCTION_4_19(v10, v11, v12, v13, v14, v15, v16, v17, v21);
    if ((v0 & 1) == 0) {
      break;
    }
    OUTLINED_FUNCTION_2_19();
    if (v18)
    {
      outlined release of Set<String>((uint64_t)v22);
      return 1;
    }
  }
  outlined release of Set<String>((uint64_t)v22);
  return 0;
}

uint64_t PhoneAppResolutionHelper.appsToDisambiguate(for:)(uint64_t a1)
{
  *(void *)(v2 + 96) = a1;
  *(void *)(v2 + 104) = v1;
  return _swift_task_switch(PhoneAppResolutionHelper.appsToDisambiguate(for:), 0, 0);
}

uint64_t PhoneAppResolutionHelper.appsToDisambiguate(for:)()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_5_7();
  void *v4 = v3;
  *(void *)(v6 + 136) = v5;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(PhoneAppResolutionHelper.appsToDisambiguate(for:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 104);
  static Signpost.begin(_:)();
  *(void *)(v0 + 56) = v3;
  *(void *)(v0 + 64) = v4;
  *(void *)(v0 + 72) = v5;
  *(_WORD *)(v0 + 80) = v6;
  *(void *)(v0 + 112) = v3;
  static PhoneCallRequestSupportPolicy.getIntentFromInputParse(phoneCallNLIntent:sharedGlobals:)(v1, v2 + 56, v5, v6, v7, v8, v9, v10, v35, v37, v38, v39, v40, v41, v42, v43, v44, v0, v45,
    v46);
  uint64_t v12 = v11;
  uint64_t v13 = [v11 _className];

  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;

  uint64_t v17 = [objc_allocWithZone((Class)INStartCallIntent) init];
  char v18 = [v17 _className];

  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;

  if (v14 == v19 && v16 == v21)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = xmmword_467710;
      *(void *)(v24 + 32) = v14;
      *(void *)(v24 + 40) = v16;
      goto LABEL_9;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_467720;
  *(void *)(v24 + 32) = v14;
  *(void *)(v24 + 40) = v16;
  os_log_type_t v25 = [objc_allocWithZone((Class)INStartAudioCallIntent) init];
  uint64_t v26 = [v25 _className];

  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v29 = v28;

  *(void *)(v24 + 48) = v27;
  *(void *)(v24 + 56) = v29;
LABEL_9:
  *(void *)(v0 + 120) = v24;
  uint64_t v30 = *(void **)(v0 + 104);
  uint64_t v31 = v30[5];
  uint64_t v32 = v30[6];
  __swift_project_boxed_opaque_existential_1(v30 + 2, v31);
  uint64_t v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 + 16) + **(int **)(v32 + 16));
  uint64_t v33 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v33;
  *uint64_t v33 = v0;
  v33[1] = PhoneAppResolutionHelper.appsToDisambiguate(for:);
  return v36(v24, v31, v32);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  BOOL v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(unint64_t);
  uint8_t *buf;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;

  uint64_t v33 = v0;
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v31 = _swiftEmptyArrayStorage;
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v2) {
      goto LABEL_3;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    uint64_t v7 = (unint64_t)_swiftEmptyArrayStorage;
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8));
  if (!v2) {
    goto LABEL_14;
  }
LABEL_3:
  if (v2 < 1)
  {
    __break(1u);
    goto LABEL_47;
  }
  uint64_t v3 = 0;
  uint64_t v4 = v1 & 0xC000000000000001;
  do
  {
    if (v4) {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      swift_retain();
    }
    App.appIdentifier.getter();
    uint64_t v6 = v5;
    swift_bridgeObjectRelease();
    if (v6)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {
      swift_release();
    }
    ++v3;
  }
  while (v2 != v3);
  swift_bridgeObjectRelease();
  uint64_t v7 = (unint64_t)v31;
LABEL_15:
  uint64_t v31 = _swiftEmptyArrayStorage;
  if ((v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(v7 + 16);
    if (v8) {
      goto LABEL_18;
    }
LABEL_29:
    swift_release();
    uint64_t v10 = _swiftEmptyArrayStorage;
    goto LABEL_30;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
  if (!v8) {
    goto LABEL_29;
  }
LABEL_18:
  if (v8 < 1)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  for (uint64_t i = 0; i != v8; ++i)
  {
    if ((v7 & 0xC000000000000001) != 0) {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      swift_retain();
    }
    if (App.isFirstParty()())
    {
      swift_release();
    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
  }
  swift_release();
  uint64_t v10 = v31;
LABEL_30:
  uint64_t v29 = (unint64_t)v10;
  __swift_project_boxed_opaque_existential_1(*(void **)(v0 + 96), *(void *)(*(void *)(v0 + 96) + 24));
  if (!PhoneCallNLIntent.hasVideoCallSemantic()())
  {
    if (one-time initialization token for siriPhone == -1)
    {
LABEL_36:
      uint64_t v15 = type metadata accessor for Logger();
      __swift_project_value_buffer(v15, (uint64_t)static Logger.siriPhone);
      swift_retain_n();
      uint64_t v16 = Logger.logObject.getter();
      uint64_t v17 = static os_log_type_t.debug.getter();
      char v18 = os_log_type_enabled(v16, v17);
      uint64_t v19 = *(void *)(v0 + 104);
      if (v18)
      {
        uint64_t v20 = (uint8_t *)swift_slowAlloc();
        uint64_t v28 = swift_slowAlloc();
        *(_DWORD *)uint64_t v20 = 136315138;
        uint64_t v30 = v28;
        uint64_t v31 = 0;
        buf = v20;
        char v22 = *(void *)(v19 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin24PhoneAppResolutionHelper_logPrefix);
        uint64_t v21 = *(void *)(v19 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin24PhoneAppResolutionHelper_logPrefix + 8);
        uint64_t v23 = *(void *)(v19 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin24PhoneAppResolutionHelper_logPrefix + 16);
        uint64_t v24 = *(void *)(v19 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin24PhoneAppResolutionHelper_logPrefix + 24);
        uint64_t v32 = 0xE000000000000000;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v22, v21, v23, v24);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(void *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_39_10();
        _os_log_impl(&dword_0, v16, v17, "%s adding Phone as another app to disambiguate..", buf, 0xCu);
        OUTLINED_FUNCTION_13_24();
        OUTLINED_FUNCTION_6();
        OUTLINED_FUNCTION_6();
      }
      else
      {
        OUTLINED_FUNCTION_39_10();
      }

      type metadata accessor for App();
      goto LABEL_41;
    }
LABEL_48:
    swift_once();
    goto LABEL_36;
  }
  uint64_t v11 = *(void **)(v0 + 104);
  uint64_t v12 = v11[10];
  uint64_t v13 = v11[11];
  __swift_project_boxed_opaque_existential_1(v11 + 7, v12);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
  uint64_t v14 = dispatch thunk of DeviceState.isMac.getter();
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  if (v14)
  {
    if (one-time initialization token for macFaceTimeBundleId != -1) {
      swift_once();
    }
    swift_bridgeObjectRetain();
  }
  type metadata accessor for App();
LABEL_41:
  App.__allocating_init(appIdentifier:)();
  swift_retain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((char *)&dword_10 + (v29 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                 + (v29 & 0xFFFFFFFFFFFFFF8)) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_release();
  Signpost.OpenSignpost.end()();
  swift_release();
  os_log_type_t v25 = *(uint64_t (**)(unint64_t))(v0 + 8);
  return v25(v29);
}

void static PhoneCallRequestSupportPolicy.getIntentFromInputParse(phoneCallNLIntent:sharedGlobals:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  OUTLINED_FUNCTION_11_51();
  a19 = v21;
  a20 = v22;
  uint64_t v24 = v23;
  OUTLINED_FUNCTION_137_2();
  type metadata accessor for PhoneError();
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v25);
  OUTLINED_FUNCTION_4();
  uint64_t v28 = v27 - v26;
  char v29 = static PhoneCallRequestSupportPolicy.getSiriKitIntentName(nlIntent:sharedGlobals:)(v20, v24);
  if (v29 == 8)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Logger.siriPhone);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      a10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 136315138;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallIntentClassNames?);
      uint64_t v34 = String.init<A>(describing:)();
      uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, &a10);
      OUTLINED_FUNCTION_106_4(v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v31, v32, "#PhoneCallRequestSupportPolicy intentTypeName=%s", v33, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }

    swift_storeEnumTagMultiPayload();
    _s27PhoneCallFlowDelegatePlugin0A5ErrorOACs0F0AAWlTm_14((unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError, (void (*)(uint64_t))type metadata accessor for PhoneError);
    swift_allocError();
    PhoneError.logged()(v37);
    _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_10(v28, (void (*)(void))type metadata accessor for PhoneError);
    swift_willThrow();
  }
  else
  {
    PhoneCallIntentClassNames.intentInstance.getter(v29);
  }
  OUTLINED_FUNCTION_9_58();
}

uint64_t static PhoneCallRequestSupportPolicy.getSiriKitIntentName(nlIntent:sharedGlobals:)(void *a1, void *a2)
{
  uint64_t v3 = a2[3];
  uint64_t v4 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v3);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 8))(v18, v3, v4);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  Swift::Bool v5 = PhoneCallNLIntent.isAnswerCall()();
  outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v17);
  if (v5)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
LABEL_4:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    return 0;
  }
  __swift_project_boxed_opaque_existential_1(v17, v17[3]);
  Swift::Bool v6 = PhoneCallNLIntent.isJoinCall()();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  if (v6) {
    goto LABEL_4;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  Swift::Bool v8 = PhoneCallNLIntent.isAddParticipant()();
  outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v16);
  if (v8)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
LABEL_8:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    return 7;
  }
  __swift_project_boxed_opaque_existential_1(v16, v16[3]);
  Swift::Bool v9 = PhoneCallNLIntent.isRemoveParticipant()();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  if (v9) {
    goto LABEL_8;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if (PhoneCallNLIntent.isHangUpCall()())
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    return 1;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if (PhoneCallNLIntent.isIncomingCallSearch()())
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    return 2;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  Swift::Bool v10 = PhoneCallNLIntent.isSearchCallOrVoiceMail()();
  outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v15);
  if (v10)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
LABEL_17:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    return 3;
  }
  __swift_project_boxed_opaque_existential_1(v15, v15[3]);
  Swift::Bool v11 = PhoneCallNLIntent.isDelete()();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  if (v11) {
    goto LABEL_17;
  }
  if (static PhoneCallRequestSupportPolicy.isAudioRequired(nlIntent:device:)(a1, (uint64_t)v18))
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    return 5;
  }
  else if (static PhoneCallRequestSupportPolicy.isVideoCall(nlIntent:device:)(a1, (uint64_t)v18))
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    return 6;
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    Swift::Bool v12 = PhoneCallNLIntent.isOutgoingCall()();
    outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v14);
    if (v12)
    {
      __swift_project_boxed_opaque_existential_1(v14, v14[3]);
      Swift::Bool v13 = PhoneCallNLIntent.isVoiceMailCall()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
      if (v13) {
        return 8;
      }
      else {
        return 4;
      }
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
      return 8;
    }
  }
}

Swift::Bool __swiftcall PhoneCallNLIntent.isAnswerCall()()
{
  OUTLINED_FUNCTION_16_30();
  v0();
  OUTLINED_FUNCTION_24_23();
  if (v3) {
    return 0;
  }
  OUTLINED_FUNCTION_78_3(v1);
  if (v3) {
    BOOL v5 = v4 == 0xE600000000000000;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_84_4();
    OUTLINED_FUNCTION_15_0();
  }
  return 1;
}

Swift::Bool __swiftcall PhoneCallNLIntent.isJoinCall()()
{
  OUTLINED_FUNCTION_16_30();
  v0();
  OUTLINED_FUNCTION_24_23();
  if (v3) {
    return 0;
  }
  OUTLINED_FUNCTION_78_3(v1);
  if (v3) {
    BOOL v5 = v4 == 0xE400000000000000;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    OUTLINED_FUNCTION_35_16();
    OUTLINED_FUNCTION_15_0();
    return 0;
  }
}

Swift::Bool __swiftcall PhoneCallNLIntent.isAddParticipant()()
{
  OUTLINED_FUNCTION_16_30();
  v0();
  OUTLINED_FUNCTION_24_23();
  if (v5) {
    return 0;
  }
  uint64_t v3 = PhoneCallVerb.rawValue.getter(v1);
  BOOL v5 = v3 == 0x6974726150646461 && v4 == 0xEE00746E61706963;
  if (v5)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    _stringCompareWithSmolCheck(_:_:expecting:)();
    OUTLINED_FUNCTION_15_0();
  }
  return 1;
}

Swift::Bool __swiftcall PhoneCallNLIntent.isRemoveParticipant()()
{
  OUTLINED_FUNCTION_16_30();
  v0();
  OUTLINED_FUNCTION_24_23();
  if (v2) {
    return 0;
  }
  uint64_t v4 = PhoneCallVerb.rawValue.getter(v1);
  if (v4 == 0xD000000000000011 && v5 == 0x800000000048DB80)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    OUTLINED_FUNCTION_173();
    OUTLINED_FUNCTION_15_0();
    return 1;
  }
}

Swift::Bool __swiftcall PhoneCallNLIntent.isIncomingCallSearch()()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_14_11();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_12_24();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_16_30();
  v7();
  OUTLINED_FUNCTION_91_5();
  if (!v12) {
    goto LABEL_50;
  }
  (*(void (**)(uint64_t, uint64_t))(v2 + 80))(v0, v2);
  OUTLINED_FUNCTION_129_0();
  if (v12)
  {
    char v9 = 0;
  }
  else
  {
    char v9 = 99;
    uint64_t v10 = PhoneCallNoun.rawValue.getter(v8);
    BOOL v12 = v10 == 1819042147 && v11 == 0xE400000000000000;
    if (v12)
    {
      swift_bridgeObjectRelease();
      char v9 = 1;
    }
    else
    {
      OUTLINED_FUNCTION_30_15();
      OUTLINED_FUNCTION_193();
    }
  }
  Swift::Bool v13 = *(void (**)(void))(v4 + 16);
  OUTLINED_FUNCTION_8_48();
  v13();
  if (v9) {
    goto LABEL_21;
  }
  uint64_t v14 = OUTLINED_FUNCTION_105_0();
  char v16 = v15(v14);
  if (v16 != 35)
  {
    char v17 = 111;
    PhoneCallReference.rawValue.getter(v16);
    if (v19 != 6647407 || v18 != 0xE300000000000000)
    {
      OUTLINED_FUNCTION_210();
      OUTLINED_FUNCTION_193();
      goto LABEL_22;
    }
    swift_bridgeObjectRelease();
LABEL_21:
    char v17 = 1;
    goto LABEL_22;
  }
  char v17 = 0;
LABEL_22:
  uint64_t v21 = *(void (**)(void))(v4 + 8);
  OUTLINED_FUNCTION_0_35();
  v21();
  OUTLINED_FUNCTION_8_48();
  v13();
  if (v17)
  {
    uint64_t v22 = OUTLINED_FUNCTION_44_12();
    uint64_t v24 = v23(v22);
    if (v24) {
      uint64_t v25 = (void *)v24;
    }
    else {
      uint64_t v25 = _swiftEmptyArrayStorage;
    }
    uint64_t v26 = v25[2];
    if (v26)
    {
      swift_bridgeObjectRetain();
      uint64_t v27 = 0;
      while (2)
      {
        switch(*((unsigned char *)v25 + v27 + 32))
        {
          case 1:
            OUTLINED_FUNCTION_52_9();
            goto LABEL_43;
          case 2:
            OUTLINED_FUNCTION_25_18();
            goto LABEL_43;
          case 3:
            OUTLINED_FUNCTION_10_30();
            goto LABEL_43;
          case 4:
            OUTLINED_FUNCTION_15_23();
            goto LABEL_43;
          case 5:
            OUTLINED_FUNCTION_37_12();
            goto LABEL_43;
          case 6:
            OUTLINED_FUNCTION_58_8();
            goto LABEL_43;
          case 7:
            OUTLINED_FUNCTION_13_23();
            goto LABEL_43;
          case 8:
            swift_bridgeObjectRelease();
            goto LABEL_46;
          case 9:
            OUTLINED_FUNCTION_11_3();
            goto LABEL_43;
          case 0xA:
            OUTLINED_FUNCTION_22_20();
            goto LABEL_43;
          case 0xB:
            OUTLINED_FUNCTION_119();
            goto LABEL_43;
          case 0xC:
            OUTLINED_FUNCTION_17_19();
            goto LABEL_43;
          case 0xD:
            OUTLINED_FUNCTION_51_7();
            goto LABEL_43;
          default:
LABEL_43:
            char v28 = OUTLINED_FUNCTION_110_0();
            swift_bridgeObjectRelease();
            if ((v28 & 1) == 0)
            {
              BOOL v12 = v26 - 1 == v27++;
              if (!v12) {
                continue;
              }
            }
LABEL_46:
            swift_bridgeObjectRelease();
            break;
        }
        break;
      }
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v29 = OUTLINED_FUNCTION_156_0();
  ((void (*)(uint64_t))v21)(v29);
LABEL_50:
  OUTLINED_FUNCTION_26_1();
  return result;
}

Swift::Bool __swiftcall PhoneCallNLIntent.isSearchCallOrVoiceMail()()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v2 = v0;
  OUTLINED_FUNCTION_14_11();
  uint64_t v4 = v3;
  uint64_t v5 = v3;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_5_8();
  uint64_t v53 = v7;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v8);
  uint64_t v52 = (char *)v50 - v9;
  OUTLINED_FUNCTION_18_0();
  uint64_t v11 = __chkstk_darwin(v10);
  Swift::Bool v13 = (char *)v50 - v12;
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_233();
  uint64_t v15 = __chkstk_darwin(v14);
  __chkstk_darwin(v15);
  char v17 = (char *)v50 - v16;
  uint64_t v19 = v18;
  Swift::Bool v20 = PhoneCallNLIntent.isFind()();
  uint64_t v55 = v4;
  uint64_t v22 = *(void (**)(void))(v4 + 16);
  uint64_t v21 = v4 + 16;
  uint64_t v56 = v22;
  ((void (*)(char *, uint64_t))v22)(v17, v2);
  uint64_t v54 = v19;
  if (v20)
  {
    uint64_t v23 = *(void (**)(void))(v5 + 8);
    OUTLINED_FUNCTION_14_23();
    v23();
    OUTLINED_FUNCTION_100_0();
    v24();
    uint64_t v25 = v2;
    uint64_t v26 = v53;
    v23();
LABEL_3:
    uint64_t v27 = v56;
    OUTLINED_FUNCTION_60_6();
    v27();
    char v28 = v27;
    uint64_t v29 = v23;
LABEL_4:
    BOOL v30 = !PhoneCallNLIntent.isIncomingCallSearch()();
    goto LABEL_5;
  }
  Swift::Bool v31 = PhoneCallNLIntent.hasReadVerb()();
  OUTLINED_FUNCTION_100_0();
  v32();
  if (v31)
  {
    v50[0] = v13;
    OUTLINED_FUNCTION_97_1();
    int v34 = v33();
    unint64_t v35 = *(void (**)(void))(v5 + 8);
    OUTLINED_FUNCTION_14_23();
    v35();
    os_log_type_t v51 = v35;
    ((void (*)(char *))v35)(v17);
    uint64_t v25 = v2;
    v50[1] = v21;
    ((void (*)(uint64_t, uint64_t))v56)(v1, v2);
    if (v34 == 2)
    {
      uint64_t v26 = v53;
      uint64_t v23 = v51;
      v51();
      goto LABEL_3;
    }
    Swift::Bool v13 = (char *)v50[0];
  }
  else
  {
    uint64_t v37 = *(void (**)(void))(v5 + 8);
    OUTLINED_FUNCTION_14_23();
    v37();
    os_log_type_t v51 = v37;
    ((void (*)(char *))v37)(v17);
    uint64_t v25 = v2;
    OUTLINED_FUNCTION_100_0();
    v38();
  }
  Swift::Bool v39 = PhoneCallNLIntent.hasCallVerb()();
  OUTLINED_FUNCTION_60_6();
  v40();
  uint64_t v26 = v53;
  if (v39)
  {
    OUTLINED_FUNCTION_97_1();
    int v42 = v41();
    uint64_t v43 = v13;
    uint64_t v44 = v51;
    ((void (*)(char *))v51)(v43);
    uint64_t v29 = v44;
    OUTLINED_FUNCTION_76_3();
    v44();
    uint64_t v45 = v56;
    OUTLINED_FUNCTION_60_6();
    v45();
    char v28 = v45;
    if (v42 != 2) {
      goto LABEL_4;
    }
    BOOL v30 = 0;
  }
  else
  {
    uint64_t v46 = v13;
    uint64_t v47 = v51;
    ((void (*)(char *))v51)(v46);
    uint64_t v48 = v1;
    uint64_t v29 = v47;
    ((void (*)(uint64_t))v47)(v48);
    uint64_t v49 = v56;
    OUTLINED_FUNCTION_60_6();
    v49();
    BOOL v30 = 0;
    char v28 = v49;
  }
LABEL_5:
  OUTLINED_FUNCTION_76_3();
  v29();
  ((void (*)(uint64_t, uint64_t))v28)(v26, v25);
  if (!v30) {
    PhoneCallNLIntent.hasVoiceMail()();
  }
  OUTLINED_FUNCTION_76_3();
  v29();
  OUTLINED_FUNCTION_40_11();
  OUTLINED_FUNCTION_26_1();
  return result;
}

Swift::Bool __swiftcall PhoneCallNLIntent.hasReadVerb()()
{
  OUTLINED_FUNCTION_16_30();
  v0();
  OUTLINED_FUNCTION_24_23();
  if (v3) {
    return 0;
  }
  OUTLINED_FUNCTION_78_3(v1);
  if (v3) {
    BOOL v5 = v4 == 0xE400000000000000;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    OUTLINED_FUNCTION_35_16();
    OUTLINED_FUNCTION_15_0();
    return 0;
  }
}

__n128 *OUTLINED_FUNCTION_19_4(__n128 *result, __n128 a2)
{
  result[1] = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_10_1@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 32) = v2;
  *(void *)(a1 + 40) = (a2 - 32) | 0x8000000000000000;
  return 0;
}

uint64_t OUTLINED_FUNCTION_163()
{
  return 0x6C6261736964;
}

__n128 OUTLINED_FUNCTION_163_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,long long a23)
{
  return (__n128)a23;
}

uint64_t OUTLINED_FUNCTION_163_1(uint64_t a1, unint64_t a2)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 120));
}

uint64_t OUTLINED_FUNCTION_23_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_217_0()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_180(uint64_t result, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  *(void *)(v9 + 48) = a8;
  *(void *)(v9 + 56) = v8;
  *(unsigned char *)(v9 + 98) = a7;
  *(void *)(v9 + 32) = a5;
  *(void *)(v9 + 40) = a6;
  *(unsigned char *)(v9 + 97) = a4;
  *(unsigned char *)(v9 + 96) = a2;
  *(void *)(v9 + 16) = result;
  *(void *)(v9 + 24) = a3;
  return result;
}

uint64_t OUTLINED_FUNCTION_180_0()
{
  return swift_bridgeObjectRelease();
}

Swift::Bool __swiftcall PhoneCallNLIntent.isDelete()()
{
  OUTLINED_FUNCTION_16_30();
  v0();
  OUTLINED_FUNCTION_24_23();
  if (v3) {
    return 0;
  }
  OUTLINED_FUNCTION_78_3(v1);
  if (v3) {
    BOOL v5 = v4 == 0xE600000000000000;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    OUTLINED_FUNCTION_186_0();
    OUTLINED_FUNCTION_84_4();
    OUTLINED_FUNCTION_15_0();
    return 0;
  }
}

uint64_t static PhoneCallRequestSupportPolicy.isAudioRequired(nlIntent:device:)(void *a1, uint64_t a2)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  Swift::Bool v4 = PhoneCallNLIntent.hasAnyFaceTime()();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  char v5 = PhoneCallNLIntent.hasAudioCallSemantic()();
  outlined init with copy of SignalProviding(a2, (uint64_t)v9);
  if (v4)
  {
    __swift_project_boxed_opaque_existential_1(v9, v9[3]);
    DeviceState.isAnyCar.getter();
    char v7 = v6;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    v5 |= v7;
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
  return v5 & 1;
}

uint64_t static PhoneCallRequestSupportPolicy.isVideoCall(nlIntent:device:)(void *a1, uint64_t a2)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  Swift::Bool v4 = PhoneCallNLIntent.hasVideoCallSemantic()();
  outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v8);
  outlined init with copy of SignalProviding(a2, (uint64_t)v7);
  if (v4) {
    char v5 = static PhoneCallRequestSupportPolicy.isAudioRequired(nlIntent:device:)(v8, (uint64_t)v7) ^ 1;
  }
  else {
    char v5 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v5 & 1;
}

Swift::Bool __swiftcall PhoneCallNLIntent.isOutgoingCall()()
{
  PhoneCallNLIntent.isOutgoingCall()();
  return result;
}

void PhoneCallNLIntent.isOutgoingCall()()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v21 = v1;
  char v3 = v2;
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_14_11();
  uint64_t v7 = v6;
  uint64_t v8 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  Swift::Bool v13 = (char *)&v20 - v12;
  char v15 = v14(v11);
  uint64_t v16 = *(void (**)(void))(v7 + 16);
  OUTLINED_FUNCTION_42_11();
  v16();
  if (v15)
  {
    char v17 = 1;
  }
  else
  {
    uint64_t v18 = OUTLINED_FUNCTION_36_0();
    char v17 = v3(v18);
  }
  uint64_t v19 = *(void (**)(char *, uint64_t))(v7 + 8);
  v19(v13, v0);
  OUTLINED_FUNCTION_42_11();
  v16();
  if ((v17 & 1) == 0) {
    v21(v0, v5);
  }
  v19(v10, v0);
  OUTLINED_FUNCTION_40_11();
  OUTLINED_FUNCTION_26_1();
}

Swift::Bool __swiftcall PhoneCallNLIntent.isVoiceMailCall()()
{
  OUTLINED_FUNCTION_14_11();
  __chkstk_darwin(v0);
  OUTLINED_FUNCTION_12_0();
  Swift::Bool v1 = PhoneCallNLIntent.isOutgoingCall()();
  uint64_t v2 = OUTLINED_FUNCTION_4_49();
  v3(v2);
  if (v1)
  {
    OUTLINED_FUNCTION_185();
    Swift::Bool v4 = PhoneCallNLIntent.hasVoiceMail()();
  }
  else
  {
    Swift::Bool v4 = 0;
  }
  OUTLINED_FUNCTION_53_8();
  v5();
  return v4;
}

id PhoneCallIntentClassNames.intentInstance.getter(char a1)
{
  switch(a1)
  {
    case 1:
      if (one-time initialization token for emptyHangUpCallIntent != -1) {
        swift_once();
      }
      Swift::Bool v1 = &static PhoneCallIntentClassNames.emptyHangUpCallIntent;
      break;
    case 2:
      if (one-time initialization token for emptyIncomingCallSearchIntent != -1) {
        swift_once();
      }
      Swift::Bool v1 = &static PhoneCallIntentClassNames.emptyIncomingCallSearchIntent;
      break;
    case 3:
      if (one-time initialization token for emptySearchCallHistoryIntent != -1) {
        swift_once();
      }
      Swift::Bool v1 = &static PhoneCallIntentClassNames.emptySearchCallHistoryIntent;
      break;
    case 4:
      if (one-time initialization token for emptyStartCallIntent != -1) {
        swift_once();
      }
      Swift::Bool v1 = &static PhoneCallIntentClassNames.emptyStartCallIntent;
      break;
    case 5:
      if (one-time initialization token for emptyStartAudioCallIntent != -1) {
        swift_once();
      }
      Swift::Bool v1 = &static PhoneCallIntentClassNames.emptyStartAudioCallIntent;
      break;
    case 6:
      if (one-time initialization token for emptyStartVideoCallIntent != -1) {
        swift_once();
      }
      Swift::Bool v1 = &static PhoneCallIntentClassNames.emptyStartVideoCallIntent;
      break;
    case 7:
      if (one-time initialization token for emptyAddCallParticipantIntent != -1) {
        swift_once();
      }
      Swift::Bool v1 = &static PhoneCallIntentClassNames.emptyAddCallParticipantIntent;
      break;
    default:
      if (one-time initialization token for emptyAnswerCallIntent != -1) {
        swift_once();
      }
      Swift::Bool v1 = &static PhoneCallIntentClassNames.emptyAnswerCallIntent;
      break;
  }
  uint64_t v2 = (void *)*v1;

  return v2;
}

uint64_t AppUsageProvider.relativeAppUsageProbabilities(forCandidateBundleIds:daysAgo:)(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_allocWithZone((Class)_PSSuggester) init];
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v5 = [v3 relativeAppUsageProbabilitiesForCandidateBundleIds:isa daysAgo:a2];

  type metadata accessor for NSNumber();
  uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v6;
}

void PhoneAppResolutionHelper.getUsageTime(relativeAppUsage:app:)(uint64_t a1)
{
  uint64_t v2 = App.appIdentifier.getter();
  if (v3)
  {
    uint64_t v4 = v3;
    if (*(void *)(a1 + 16)
      && (uint64_t v5 = v2,
          swift_bridgeObjectRetain(),
          specialized __RawDictionaryStorage.find<A>(_:)(v5, v4),
          uint64_t v7 = v6,
          swift_bridgeObjectRelease(),
          (v7 & 1) != 0))
    {
      specialized Dictionary.subscript.getter(v5, v4, a1);
      OUTLINED_FUNCTION_18_22();
      swift_bridgeObjectRelease();
      if (v7)
      {
        [v7 doubleValue];
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t static PhoneCallRequestSupportPolicy.getSiriKitIntent(phoneCallNLIntent:sharedGlobals:app:intentTypeName:)(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  uint64_t v5 = a2[3];
  uint64_t v6 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 80))(var58, v5, v6);
  switch(a4)
  {
    case 1:
      OUTLINED_FUNCTION_28_38();
      uint64_t v7 = OUTLINED_FUNCTION_15_57();
      uint64_t v14 = specialized SKTransformer.convertToSKIntent<A>(phoneCallNLIntent:rchFlowContext:)(v7, v8, v9, v10, v11, v12, v13);
      goto LABEL_11;
    case 2:
      swift_retain();
      uint64_t v49 = specialized SKTransformer.nlv4Conversion<A>(phoneCallNLIntent:rchFlowContext:);
      goto LABEL_6;
    case 3:
      swift_retain();
      uint64_t v49 = specialized SKTransformer.nlv4Conversion<A>(phoneCallNLIntent:rchFlowContext:);
      goto LABEL_6;
    case 4:
      OUTLINED_FUNCTION_28_38();
      uint64_t v23 = OUTLINED_FUNCTION_15_57();
      uint64_t v14 = specialized SKTransformer.convertToSKIntent<A>(phoneCallNLIntent:rchFlowContext:)(v23, v24, v25, v26, v27, v28, v29);
      goto LABEL_11;
    case 5:
      OUTLINED_FUNCTION_28_38();
      uint64_t v30 = OUTLINED_FUNCTION_15_57();
      uint64_t v14 = specialized SKTransformer.convertToSKIntent<A>(phoneCallNLIntent:rchFlowContext:)(v30, v31, v32, v33, v34, v35, v36);
      goto LABEL_11;
    case 6:
      OUTLINED_FUNCTION_28_38();
      uint64_t v37 = OUTLINED_FUNCTION_15_57();
      uint64_t v14 = specialized SKTransformer.convertToSKIntent<A>(phoneCallNLIntent:rchFlowContext:)(v37, v38, v39, v40, v41, v42, v43);
      goto LABEL_11;
    case 7:
      swift_retain();
      uint64_t v44 = OUTLINED_FUNCTION_132_4();
      uint64_t v14 = specialized SKTransformer.convertToSKIntent<A>(phoneCallNLIntent:rchFlowContext:)(v44, v45, v46);
      goto LABEL_11;
    default:
      swift_retain();
      uint64_t v49 = specialized SKTransformer.nlv4Conversion<A>(phoneCallNLIntent:rchFlowContext:);
LABEL_6:
      uint64_t v15 = OUTLINED_FUNCTION_132_4();
      specialized SKTransformer.convertToSKIntent<A>(phoneCallNLIntent:rchFlowContext:)(v15, v16, v17, v18, v19, v20, v21, v22, (uint64_t)v49, var58[0], var58[1], var58[2], var58[3], var58[4], var58[5], var58[6], var58[7], var58[8], var58[9],
        var58[10],
        (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))var58[11]);
LABEL_11:
      uint64_t v47 = v14;
      swift_release();
      outlined destroy of SKTransformer((uint64_t)var58);
      return v47;
  }
}

uint64_t static PhoneCallRequestSupportPolicy.getSiriKitIntent(phoneCallNLIntent:sharedGlobals:app:intentTypeName:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a4 == 8)
  {
    static PhoneCallRequestSupportPolicy.getIntentFromInputParse(phoneCallNLIntent:sharedGlobals:)(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, vars0,
      vars8);
    uint64_t v12 = v11;
    id v13 = [v11 _className];

    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;

    v17._uint64_t countAndFlagsBits = v14;
    v17._object = v16;
    v18.value = PhoneCallIntentClassNames.init(intentClassName:)(v17).value;
    if (v18.value == PhoneCallFlowDelegatePlugin_PhoneCallIntentClassNames_unknownDefault)
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      uint64_t v20 = (void *)OUTLINED_FUNCTION_25_0(v19, (uint64_t)static Logger.siriPhone);
      os_log_type_t v21 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_8_2(v21))
      {
        uint64_t v22 = (_WORD *)OUTLINED_FUNCTION_7_2();
        OUTLINED_FUNCTION_32_2(v22);
        OUTLINED_FUNCTION_1_3(&dword_0, v23, v24, "#PhoneCallRequestSupportPolicy getSiriKitIntent: couldn't convert input to its corresponding INIntent");
        OUTLINED_FUNCTION_6();
      }

      return 0;
    }
    LOBYTE(a4) = v18;
  }

  return static PhoneCallRequestSupportPolicy.getSiriKitIntent(phoneCallNLIntent:sharedGlobals:app:intentTypeName:)(a1, a2, a3, a4);
}

PhoneCallFlowDelegatePlugin::PhoneCallIntentClassNames_optional __swiftcall PhoneCallIntentClassNames.init(intentClassName:)(Swift::String intentClassName)
{
  object = intentClassName._object;
  uint64_t countAndFlagsBits = intentClassName._countAndFlagsBits;
  if (one-time initialization token for emptyAnswerCallIntent != -1) {
    swift_once();
  }
  id v5 = [(id)static PhoneCallIntentClassNames.emptyAnswerCallIntent _className];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_1_15();
  if (v2 == countAndFlagsBits && v1 == object)
  {
    OUTLINED_FUNCTION_2_16();
    return 0;
  }
  OUTLINED_FUNCTION_0_11();
  OUTLINED_FUNCTION_3_18();
  if (v2)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if (one-time initialization token for emptyHangUpCallIntent != -1) {
    swift_once();
  }
  id v9 = [(id)static PhoneCallIntentClassNames.emptyHangUpCallIntent _className];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_1_15();
  if (v2 == countAndFlagsBits && v1 == object)
  {
    OUTLINED_FUNCTION_2_16();
    return (PhoneCallFlowDelegatePlugin::PhoneCallIntentClassNames_optional)1;
  }
  OUTLINED_FUNCTION_0_11();
  OUTLINED_FUNCTION_3_18();
  if (v2)
  {
    swift_bridgeObjectRelease();
    return (PhoneCallFlowDelegatePlugin::PhoneCallIntentClassNames_optional)1;
  }
  if (one-time initialization token for emptyIncomingCallSearchIntent != -1) {
    swift_once();
  }
  id v11 = [(id)static PhoneCallIntentClassNames.emptyIncomingCallSearchIntent _className];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_1_15();
  if (v2 == countAndFlagsBits && v1 == object)
  {
    v7.value = PhoneCallFlowDelegatePlugin_PhoneCallIntentClassNames_incomingCallSearch;
    OUTLINED_FUNCTION_2_16();
    return v7;
  }
  OUTLINED_FUNCTION_0_11();
  OUTLINED_FUNCTION_3_18();
  if (v2)
  {
    swift_bridgeObjectRelease();
    return (PhoneCallFlowDelegatePlugin::PhoneCallIntentClassNames_optional)2;
  }
  if (one-time initialization token for emptySearchCallHistoryIntent != -1) {
    swift_once();
  }
  id v13 = [(id)static PhoneCallIntentClassNames.emptySearchCallHistoryIntent _className];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_1_15();
  if (v2 == countAndFlagsBits && v1 == object)
  {
    OUTLINED_FUNCTION_2_16();
    return (PhoneCallFlowDelegatePlugin::PhoneCallIntentClassNames_optional)3;
  }
  OUTLINED_FUNCTION_0_11();
  OUTLINED_FUNCTION_3_18();
  if (v2)
  {
    swift_bridgeObjectRelease();
    return (PhoneCallFlowDelegatePlugin::PhoneCallIntentClassNames_optional)3;
  }
  if (one-time initialization token for emptyStartCallIntent != -1) {
    swift_once();
  }
  id v15 = [(id)static PhoneCallIntentClassNames.emptyStartCallIntent _className];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_1_15();
  if (v2 == countAndFlagsBits && v1 == object)
  {
    OUTLINED_FUNCTION_2_16();
    return (PhoneCallFlowDelegatePlugin::PhoneCallIntentClassNames_optional)4;
  }
  OUTLINED_FUNCTION_0_11();
  OUTLINED_FUNCTION_3_18();
  if (v2)
  {
    swift_bridgeObjectRelease();
    return (PhoneCallFlowDelegatePlugin::PhoneCallIntentClassNames_optional)4;
  }
  if (one-time initialization token for emptyStartAudioCallIntent != -1) {
    swift_once();
  }
  id v17 = [(id)static PhoneCallIntentClassNames.emptyStartAudioCallIntent _className];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_1_15();
  if (v2 == countAndFlagsBits && v1 == object)
  {
    OUTLINED_FUNCTION_2_16();
    return (PhoneCallFlowDelegatePlugin::PhoneCallIntentClassNames_optional)5;
  }
  OUTLINED_FUNCTION_0_11();
  OUTLINED_FUNCTION_3_18();
  if (v2)
  {
    swift_bridgeObjectRelease();
    return (PhoneCallFlowDelegatePlugin::PhoneCallIntentClassNames_optional)5;
  }
  if (one-time initialization token for emptyStartVideoCallIntent != -1) {
    swift_once();
  }
  id v19 = [(id)static PhoneCallIntentClassNames.emptyStartVideoCallIntent _className];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_1_15();
  if (v2 == countAndFlagsBits && v1 == object)
  {
    OUTLINED_FUNCTION_2_16();
    return (PhoneCallFlowDelegatePlugin::PhoneCallIntentClassNames_optional)6;
  }
  OUTLINED_FUNCTION_0_11();
  OUTLINED_FUNCTION_3_18();
  if (v2)
  {
    swift_bridgeObjectRelease();
    return (PhoneCallFlowDelegatePlugin::PhoneCallIntentClassNames_optional)6;
  }
  if (one-time initialization token for emptyAddCallParticipantIntent != -1) {
    swift_once();
  }
  id v21 = [(id)static PhoneCallIntentClassNames.emptyAddCallParticipantIntent _className];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_1_15();
  if (v2 == countAndFlagsBits && v1 == object)
  {
    OUTLINED_FUNCTION_2_16();
    return (PhoneCallFlowDelegatePlugin::PhoneCallIntentClassNames_optional)7;
  }
  else
  {
    char v23 = OUTLINED_FUNCTION_0_11();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v23) {
      return (PhoneCallFlowDelegatePlugin::PhoneCallIntentClassNames_optional)7;
    }
    else {
      return (PhoneCallFlowDelegatePlugin::PhoneCallIntentClassNames_optional)8;
    }
  }
}

Swift::String __swiftcall INPerson.asBase64()()
{
  id v0 = (id)INIntentSlotValueTransformToContactValue();
  if (!v0)
  {
    __break(1u);
    goto LABEL_5;
  }
  id v0 = (id)outlined bridged method (ob) of @objc PBCodable.data.getter(v0);
  if (v1 >> 60 == 15)
  {
LABEL_5:
    __break(1u);
    goto LABEL_6;
  }
  Swift::String v2 = Data.base64EncodedString(options:)(0);
  uint64_t v3 = OUTLINED_FUNCTION_7_0();
  outlined consume of Data?(v3, v4);
  OUTLINED_FUNCTION_134();
  uint64_t v8 = v5;
  unint64_t v9 = v6;
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  id v0 = v8;
  unint64_t v1 = v9;
LABEL_6:
  result._object = (void *)v1;
  result._uint64_t countAndFlagsBits = (uint64_t)v0;
  return result;
}

uint64_t outlined bridged method (ob) of @objc PBCodable.data.getter(void *a1)
{
  id v2 = [a1 data];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

void outlined bridged method (mbnn) of @objc INPerson.contactIdentifier.setter(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a3 setContactIdentifier:v4];
}

void *PhoneAppResolutionHelper.getSiriRememberVersionApps(apps:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    OUTLINED_FUNCTION_32_3();
    uint64_t result = (void *)_CocoaArrayWrapper.endIndex.getter();
    uint64_t v2 = (uint64_t)result;
    if (result) {
      goto LABEL_3;
    }
LABEL_20:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  uint64_t result = (void *)swift_bridgeObjectRetain();
  if (!v2) {
    goto LABEL_20;
  }
LABEL_3:
  if (v2 >= 1)
  {
    uint64_t v4 = 0;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      uint64_t v5 = App.appIdentifier.getter();
      if (!v6) {
        goto LABEL_19;
      }
      if (v5 == 0xD000000000000015 && v6 == 0x80000000004932A0)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v7 & 1) == 0)
        {
          swift_retain();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((char *)&dword_10 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >> 1) {
            OUTLINED_FUNCTION_23_19();
          }
          goto LABEL_18;
        }
      }
      type metadata accessor for App();
      App.__allocating_init(appIdentifier:)();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((char *)&dword_10 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >> 1) {
        OUTLINED_FUNCTION_23_19();
      }
LABEL_18:
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
LABEL_19:
      ++v4;
      swift_release();
      if (v2 == v4) {
        goto LABEL_20;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t PhoneAppResolutionHelper.getAppSelectionRecommendation(startCallIntent:phoneCallNLIntent:apps:)()
{
  uint64_t v30 = v0;
  unint64_t v1 = v0[11];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8));
  }
  if (v2 < 2)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.siriPhone);
    swift_bridgeObjectRetain();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 134217984;
      v0[5] = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v14, v15, "#PhoneAppResolutionHelper getAppSelectionRecommendation: get app counts %ld which is not expected, return noMatchFound", v16, 0xCu);
      OUTLINED_FUNCTION_6();
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    uint64_t v23 = v0[7];
    uint64_t v24 = enum case for AppResolverResult.noMatchFound(_:);
    type metadata accessor for AppResolverResult();
    OUTLINED_FUNCTION_10();
    (*(void (**)(uint64_t, uint64_t))(v25 + 104))(v23, v24);
    swift_task_dealloc();
    uint64_t v26 = (uint64_t (*)(void))v0[1];
    return v26();
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.siriPhone);
    swift_retain_n();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    BOOL v6 = os_log_type_enabled(v4, v5);
    uint64_t v7 = v0[12];
    if (v6)
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      v29[0] = swift_slowAlloc();
      buf = v8;
      *(_DWORD *)uint64_t v8 = 136315138;
      uint64_t v9 = *(void *)(v7 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin24PhoneAppResolutionHelper_logPrefix);
      uint64_t v10 = *(void *)(v7 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin24PhoneAppResolutionHelper_logPrefix + 8);
      uint64_t v12 = *(void *)(v7 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin24PhoneAppResolutionHelper_logPrefix + 16);
      uint64_t v11 = *(void *)(v7 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin24PhoneAppResolutionHelper_logPrefix + 24);
      v29[1] = 0;
      void v29[2] = 0xE000000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v9, v10, v12, v11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_39_10();
      _os_log_impl(&dword_0, v4, v5, "%s getAppSelectionRecommendation: Found more than 1 app and starts to query AppMatcher", buf, 0xCu);
      OUTLINED_FUNCTION_13_24();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {
      OUTLINED_FUNCTION_39_10();
    }

    id v17 = (void *)v0[12];
    uint64_t v18 = v17[16];
    uint64_t v19 = v17[17];
    __swift_project_boxed_opaque_existential_1(v17 + 13, v18);
    (*(void (**)(void, uint64_t, uint64_t))(v19 + 8))(0, v18, v19);
    swift_release();
    PhoneAppResolutionHelper.generateAppSelectionInputFeature(startCallIntent:phoneCallNLIntent:apps:)();
    OUTLINED_FUNCTION_96();
    swift_beginAccess();
    uint64_t v20 = (void *)swift_task_alloc();
    v0[16] = v20;
    *uint64_t v20 = v0;
    v20[1] = PhoneAppResolutionHelper.getAppSelectionRecommendation(startCallIntent:phoneCallNLIntent:apps:);
    uint64_t v21 = v0[15];
    uint64_t v22 = v0[7];
    return AppResolver.resolveApp(features:)(v22, v21);
  }
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  (*(void (**)(void, void))(v0[14] + 8))(v0[15], v0[13]);
  swift_task_dealloc();
  unint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_1_0();
  v1[11] = v2;
  v1[12] = v0;
  v1[9] = v3;
  v1[10] = v4;
  v1[7] = v5;
  v1[8] = v6;
  uint64_t v7 = type metadata accessor for CommsAppResolutionFeature();
  v1[13] = v7;
  v1[14] = *(void *)(v7 - 8);
  v1[15] = swift_task_alloc();
  return _swift_task_switch(PhoneAppResolutionHelper.getAppSelectionRecommendation(startCallIntent:phoneCallNLIntent:apps:), 0, 0);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_5_7();
  NSObject *v4 = v3;
  swift_task_dealloc();
  swift_endAccess();
  return _swift_task_switch(PhoneAppResolutionHelper.getAppSelectionRecommendation(startCallIntent:phoneCallNLIntent:apps:), 0, 0);
}

uint64_t protocol witness for PhoneAppResolutionLogging.emitTriggeredLog(codePathId:) in conformance PhoneAppResolutionLogger(char a1)
{
  return PhoneAppResolutionLogger.emitTriggeredLog(codePathId:)(a1 & 1);
}

uint64_t PhoneAppResolutionLogger.emitTriggeredLog(codePathId:)(char a1)
{
  char v2 = a1 & 1;
  id v3 = [objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager()) init];
  uint64_t v4 = specialized PhoneAppResolutionLogger.emitTriggeredLog(codePathId:experimentationAnalyticsManager:)(v2, v3, v1);

  return v4;
}

uint64_t specialized PhoneAppResolutionLogger.emitTriggeredLog(codePathId:experimentationAnalyticsManager:)(char a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[3] = type metadata accessor for ExperimentationAnalyticsManager();
  void v23[4] = &protocol witness table for ExperimentationAnalyticsManager;
  v23[0] = a2;
  uint64_t v9 = a3[1];
  if (v9)
  {
    uint64_t v10 = *a3;
    id v11 = a2;
    swift_bridgeObjectRetain();
    static TaskPriority.utility.getter();
    uint64_t v12 = type metadata accessor for TaskPriority();
    __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v12);
    outlined init with copy of SignalProviding((uint64_t)v23, (uint64_t)v22);
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = 0;
    *(void *)(v13 + 24) = 0;
    *(void *)(v13 + 32) = v10;
    *(void *)(v13 + 40) = v9;
    outlined init with take of AppSelectionSignalComponent(v22, v13 + 48);
    *(unsigned char *)(v13 + 88) = a1 & 1;
    uint64_t v14 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v8, (uint64_t)&closure #1 in PhoneAppResolutionLogger.emitTriggeredLog(codePathId:experimentationAnalyticsManager:)partial apply, v13);
  }
  else
  {
    uint64_t v15 = one-time initialization token for siriPhone;
    id v16 = a2;
    if (v15 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.siriPhone);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl(&dword_0, v18, v19, "#PhoneAppResolutionLogger emitTriggeredLog: no request ID in context, skipping triggered log", v20, 2u);
      swift_slowDealloc();
    }

    uint64_t v14 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  return v14;
}

uint64_t specialized PhoneAppResolutionLogger.emitTriggeredLog(codePathId:experimentationAnalyticsManager:)(char a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[3] = a4;
  void v25[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v25);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(boxed_opaque_existential_1, a2, a4);
  uint64_t v14 = a3[1];
  if (v14)
  {
    uint64_t v15 = *a3;
    swift_bridgeObjectRetain();
    static TaskPriority.utility.getter();
    uint64_t v16 = type metadata accessor for TaskPriority();
    __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v16);
    outlined init with copy of SignalProviding((uint64_t)v25, (uint64_t)v24);
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = 0;
    *(void *)(v17 + 24) = 0;
    *(void *)(v17 + 32) = v15;
    *(void *)(v17 + 40) = v14;
    outlined init with take of AppSelectionSignalComponent(v24, v17 + 48);
    *(unsigned char *)(v17 + 88) = a1 & 1;
    uint64_t v18 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v12, (uint64_t)&async function pointer to partial apply for closure #1 in PhoneAppResolutionLogger.emitTriggeredLog(codePathId:experimentationAnalyticsManager:), v17);
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.siriPhone);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl(&dword_0, v20, v21, "#PhoneAppResolutionLogger emitTriggeredLog: no request ID in context, skipping triggered log", v22, 2u);
      swift_slowDealloc();
    }

    uint64_t v18 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  return v18;
}

void PhoneAppResolutionHelper.generateAppSelectionInputFeature(startCallIntent:phoneCallNLIntent:apps:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  v23[2] = v7;
  uint64_t v8 = type metadata accessor for CommunicationTypeSignal.CommunicationType();
  OUTLINED_FUNCTION_1();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_5_41(v12, v23[0]);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v23 - v14;
  outlined init with copy of SharedGlobalsProviding((uint64_t)v4, (uint64_t)v24);
  __swift_project_boxed_opaque_existential_1(v24, v24[3]);
  Swift::Bool v16 = PhoneCallNLIntent.isGroupFaceTimeCall()();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  OUTLINED_FUNCTION_1_56(v4);
  Swift::Bool v17 = PhoneCallNLIntent.isVideoCall()();
  uint64_t v18 = (unsigned int *)&enum case for CommunicationTypeSignal.CommunicationType.groupVideoCall(_:);
  if (!v17) {
    uint64_t v18 = (unsigned int *)&enum case for CommunicationTypeSignal.CommunicationType.groupAudioCall(_:);
  }
  uint64_t v19 = (unsigned int *)&enum case for CommunicationTypeSignal.CommunicationType.videoCall(_:);
  if (!v17) {
    uint64_t v19 = (unsigned int *)&enum case for CommunicationTypeSignal.CommunicationType.audioCall(_:);
  }
  if (!v16) {
    uint64_t v18 = v19;
  }
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v15, *v18, v8);
  (*(void (**)(void *, uint64_t))(*(void *)v0 + 232))(v4, v2);
  uint64_t v20 = v4[3];
  uint64_t v21 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v20);
  uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t))(v21 + 24);
  v6;
  v22(v20, v21);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 16))(v23[1], v15, v8);
  CommsAppResolutionFeature.init(intent:nlContactCount:appFeatures:communicationType:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v8);
  OUTLINED_FUNCTION_26_1();
}

NSUUID_optional __swiftcall NSUUID.__allocating_init(uuidString:)(Swift::String uuidString)
{
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = (objc_class *)[v1 initWithUUIDString:v2];

  os_log_type_t v5 = v3;
  result.value.super.Class isa = v5;
  result.is_nil = v4;
  return result;
}

uint64_t protocol witness for ExperimentationAnalyticsManaging.cacheTrialExperimentIdentifiers(for:namespaces:) in conformance ExperimentationAnalyticsManager(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of ExperimentationAnalyticsManager.cacheTrialExperimentIdentifiers(for:namespaces:)
                                                + async function pointer to dispatch thunk of ExperimentationAnalyticsManager.cacheTrialExperimentIdentifiers(for:namespaces:));
  os_log_type_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *os_log_type_t v5 = v2;
  v5[1] = UnsupportedFlowCATs.deleteVoicemail();
  return v7(a1, a2);
}

Swift::Bool __swiftcall PhoneCallNLIntent.isVideoCall()()
{
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_14_11();
  uint64_t v1 = v0;
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_12_24();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_89_1();
  Swift::Bool v4 = PhoneCallNLIntent.hasAnyFaceTime()();
  os_log_type_t v5 = *(void (**)(void))(v1 + 16);
  OUTLINED_FUNCTION_36_15();
  v5();
  if (v4)
  {
    OUTLINED_FUNCTION_184();
    BOOL v6 = !PhoneCallNLIntent.hasAudioCallSemantic()();
  }
  else
  {
    BOOL v6 = 0;
  }
  uint64_t v7 = *(void (**)(void))(v1 + 8);
  OUTLINED_FUNCTION_14_23();
  v7();
  OUTLINED_FUNCTION_36_15();
  v5();
  if (v6)
  {
    OUTLINED_FUNCTION_185();
    PhoneCallNLIntent.isFind()();
  }
  OUTLINED_FUNCTION_14_23();
  v7();
  OUTLINED_FUNCTION_40_11();
  OUTLINED_FUNCTION_26_1();
  return result;
}

void PhoneAppResolutionHelper.generateAppFeatures(phoneCallNLIntent:apps:)()
{
  OUTLINED_FUNCTION_24_0();
  unint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v52 = type metadata accessor for CommsAppFeature();
  OUTLINED_FUNCTION_1();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_5_41(v7, v48[0]);
  __chkstk_darwin(v8);
  uint64_t v50 = (char *)v48 - v9;
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v10 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
  }
  uint64_t v49 = v3;
  if (v10)
  {
    if (v10 < 1)
    {
      __break(1u);
      goto LABEL_35;
    }
    uint64_t v11 = 0;
    uint64_t v12 = _swiftEmptyArrayStorage;
    do
    {
      if ((v1 & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      uint64_t v13 = App.appIdentifier.getter();
      unint64_t v15 = v14;
      swift_release();
      if (!v15)
      {
        uint64_t v13 = 0;
        unint64_t v15 = 0xE000000000000000;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_8_49();
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v12 = v19;
      }
      unint64_t v17 = v12[2];
      unint64_t v16 = v12[3];
      if (v17 >= v16 >> 1)
      {
        OUTLINED_FUNCTION_6_43(v16);
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v12 = v20;
      }
      ++v11;
      v12[2] = v17 + 1;
      uint64_t v18 = &v12[2 * v17];
      v18[4] = v13;
      void v18[5] = v15;
    }
    while (v10 != v11);
  }
  else
  {
    uint64_t v12 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  uint64_t v21 = v49[4];
  __swift_project_boxed_opaque_existential_1(v49, v49[3]);
  uint64_t v22 = *(uint64_t (**)(uint64_t))(v21 + 24);
  uint64_t v23 = OUTLINED_FUNCTION_24_24();
  uint64_t v24 = *(void *)(v22(v23) + 16);
  swift_bridgeObjectRelease();
  if (!v24)
  {
    uint64_t v49 = &_swiftEmptySetSingleton;
    goto LABEL_22;
  }
  uint64_t v25 = OUTLINED_FUNCTION_24_24();
  uint64_t v26 = v22(v25);
  if (!*(void *)(v26 + 16))
  {
LABEL_35:
    __break(1u);
    return;
  }
  outlined init with copy of SharedGlobalsProviding(v26 + 32, (uint64_t)v53);
  swift_bridgeObjectRelease();
  __swift_project_boxed_opaque_existential_1(v53, v53[3]);
  uint64_t v27 = OUTLINED_FUNCTION_29_4();
  uint64_t v49 = (void *)SiriPhoneContact.getVocabularyAppsBundleSet()(v27, v28);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
LABEL_22:
  uint64_t v29 = v12[2];
  if (v29)
  {
    uint64_t v30 = type metadata accessor for App();
    v48[1] = v5 + 32;
    v48[2] = v30;
    v48[0] = v5 + 8;
    uint64_t v31 = v12 + 5;
    uint64_t v32 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v34 = *(v31 - 1);
      uint64_t v33 = *v31;
      swift_bridgeObjectRetain_n();
      App.__allocating_init(appIdentifier:)();
      Swift::Bool v35 = App.isFirstParty()();
      swift_release();
      if (v35)
      {
        uint64_t v36 = 0x73746361746E6F43;
        uint64_t v37 = 0xE800000000000000;
      }
      else
      {
        uint64_t v36 = v34;
        uint64_t v37 = v33;
      }
      specialized Set.contains(_:)(v36, v37, (uint64_t)v49);
      uint64_t v38 = v50;
      CommsAppFeature.init(bundleID:isContactInApp:)();
      (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(v51, v38, v52);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        char v42 = OUTLINED_FUNCTION_8_49();
        uint64_t v32 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v42, v43, v44, (uint64_t)v32);
      }
      unint64_t v40 = v32[2];
      unint64_t v39 = v32[3];
      if (v40 >= v39 >> 1)
      {
        char v45 = OUTLINED_FUNCTION_6_43(v39);
        uint64_t v32 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v45, v46, v47, (uint64_t)v32);
      }
      v31 += 2;
      v32[2] = v40 + 1;
      uint64_t v41 = v52;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))((unint64_t)v32+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v40, v51, v52);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v50, v41);
      --v29;
    }
    while (v29);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_26_1();
}

uint64_t SiriPhoneContact.getVocabularyAppsBundleSet()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 376))();
}

uint64_t protocol witness for SiriPhoneContact.vocabularyAppsBundleSet.getter in conformance PhoneCallContactIntentNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 528))();
}

void *variable initialization expression of SharedNeedsValueContext.registeredPrompts()
{
  return &_swiftEmptySetSingleton;
}

uint64_t protocol witness for ExperimentationAnalyticsManaging.emitTriggerFromCache(for:requestID:) in conformance ExperimentationAnalyticsManager(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of ExperimentationAnalyticsManager.emitTriggerFromCache(for:requestID:)
                                                + async function pointer to dispatch thunk of ExperimentationAnalyticsManager.emitTriggerFromCache(for:requestID:));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return v7(a1, a2);
}

uint64_t objectdestroy_17Tm()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t PhoneAppResolutionLogger.emitAndLinkExecutionResultMessage(_:)(char a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = &__src[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static TaskPriority.utility.getter();
  uint64_t v6 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v6);
  outlined init with copy of PhoneAppResolutionLogger(v1, (uint64_t)__src);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = 0;
  *(void *)(v7 + 24) = 0;
  *(unsigned char *)(v7 + 32) = a1;
  memcpy((void *)(v7 + 40), __src, 0x90uLL);
  return _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v5, (uint64_t)&async function pointer to partial apply for closure #1 in PhoneAppResolutionLogger.emitAndLinkExecutionResultMessage(_:), v7);
}

uint64_t PhoneAppResolutionLogger.EvaluationResult.toSelfSchema()(char a1)
{
  return dword_487C10[a1];
}

void *PhoneAppResolutionLogger.linkMessage(inferenceID:requestID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = [objc_allocWithZone((Class)SISchemaRequestLink) init];
  if (v8)
  {
    uint64_t v9 = v8;
    id v10 = [objc_allocWithZone((Class)SISchemaRequestLinkInfo) init];
    if (v10)
    {
      uint64_t v11 = v10;
      id v12 = [objc_allocWithZone((Class)SISchemaRequestLinkInfo) init];
      if (v12)
      {
        uint64_t v13 = v12;
        [v12 setComponent:27];
        type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID);
        unint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v14(v7, a1, v4);
        id v15 = SISchemaUUID.__allocating_init(nsuuid:)();
        [v13 setUuid:v15];

        [v11 setComponent:1];
        v14(v7, a2, v4);
        id v16 = SISchemaUUID.__allocating_init(nsuuid:)();
        [v11 setUuid:v16];

        [v9 setSource:v13];
        [v9 setTarget:v11];

        return v9;
      }
    }
    else
    {
      uint64_t v11 = v9;
    }
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.siriPhone);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl(&dword_0, v18, v19, "#PhoneAppResolutionLogger linkMessage: Failed to create RequestLink SELF message templates. Skipping Emission.", v20, 2u);
    swift_slowDealloc();
  }

  return 0;
}

uint64_t PhoneCallFeatureManager.shouldEnableHSAnswerCallNotification.getter()
{
  OUTLINED_FUNCTION_22();
  OUTLINED_FUNCTION_1_86();
  v0();
  OUTLINED_FUNCTION_2_102(v4);
  uint64_t v1 = OUTLINED_FUNCTION_3_35();
  v2(v1);
  return OUTLINED_FUNCTION_4_83((uint64_t)v4);
}

uint64_t PhoneCallFeatureFlags.hsAnswerCallNotificationFlag.getter()
{
  OUTLINED_FUNCTION_0_15();
  if (!v1) {
    return 1;
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  while (1)
  {
    OUTLINED_FUNCTION_3_22(v2, v3, v4, v5, v6, v7, v8, v9, v20);
    uint64_t v10 = isFeatureEnabled(_:)();
    OUTLINED_FUNCTION_4_19(v10, v11, v12, v13, v14, v15, v16, v17, v21);
    if ((v0 & 1) == 0) {
      break;
    }
    OUTLINED_FUNCTION_2_19();
    if (v18)
    {
      outlined release of Set<String>((uint64_t)v22);
      return 1;
    }
  }
  outlined release of Set<String>((uint64_t)v22);
  return 0;
}

uint64_t SharedGlobals.callNotificationContext.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SharedGlobalsProviding(v1 + 8, a1);
}

uint64_t protocol witness for CallNotificationContextProviding.hasCallNotification(for:) in conformance CallNotificationContextProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))() & 1;
}

Swift::Bool __swiftcall CallNotificationContextProvider.hasCallNotification(for:)(Swift::String a1)
{
  OUTLINED_FUNCTION_4_37();
  uint64_t v2 = *(void (**)(uint64_t *))(v1 + 176);
  uint64_t v3 = swift_retain();
  uint64_t v11 = OUTLINED_FUNCTION_3_38(v3, v4, v5, v6, v7, v8, v9, v10, v13);
  v2(v11);
  swift_release();
  if (v15) {
    outlined consume of CallNotificationContextProvider.CallNotification?(v14, v15);
  }
  return v15 != 0;
}

void DictionaryBackedCache.get(key:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v59 = v4;
  uint64_t v5 = *v0;
  uint64_t v6 = type metadata accessor for Date();
  OUTLINED_FUNCTION_1();
  uint64_t v54 = v7;
  __chkstk_darwin(v8);
  uint64_t v53 = (char *)v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = (uint64_t)v5[11];
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v51 = v6;
  uint64_t v52 = v10;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v56 = type metadata accessor for Optional();
  OUTLINED_FUNCTION_1();
  uint64_t v13 = v12;
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  os_log_type_t v19 = (char *)v47 - v18;
  OUTLINED_FUNCTION_1();
  uint64_t v55 = v20;
  OUTLINED_FUNCTION_9_1();
  __chkstk_darwin(v21);
  uint64_t v57 = (char *)v47 - v22;
  OUTLINED_FUNCTION_37_4();
  uint64_t v23 = v5[10];
  uint64_t v24 = v5;
  uint64_t v25 = v3;
  uint64_t v26 = v24[12];
  swift_bridgeObjectRetain();
  Dictionary.subscript.getter();
  swift_bridgeObjectRelease();
  if (__swift_getEnumTagSinglePayload((uint64_t)v19, 1, TupleTypeMetadata2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v56);
LABEL_7:
    uint64_t v45 = v58;
    uint64_t v44 = v59;
    goto LABEL_8;
  }
  v47[1] = v26;
  void v47[2] = v23;
  uint64_t v48 = v17;
  uint64_t v49 = v13;
  uint64_t v50 = v25;
  uint64_t v27 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v28 = &v57[v27];
  uint64_t v29 = &v19[v27];
  uint64_t v30 = v52;
  OUTLINED_FUNCTION_1();
  uint64_t v32 = v31;
  (*(void (**)(void))(v33 + 32))();
  uint64_t v34 = v54;
  uint64_t v35 = v51;
  uint64_t v36 = (*(uint64_t (**)(char *, char *, uint64_t))(v54 + 32))(v28, v29, v51);
  uint64_t v37 = v53;
  ((void (*)(uint64_t))v1[5])(v36);
  lazy protocol witness table accessor for type Date and conformance Date();
  LOBYTE(v29) = dispatch thunk of static Comparable.< infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v37, v35);
  if ((v29 & 1) == 0)
  {
    (*v1)[24](v50);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v57, TupleTypeMetadata2);
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  uint64_t v38 = (uint64_t)v48;
  Dictionary.subscript.getter();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_11();
  v39();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v38, 1, TupleTypeMetadata2);
  uint64_t v42 = v58;
  uint64_t v41 = v59;
  if (!EnumTagSinglePayload)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v59, v38, v30);
    OUTLINED_FUNCTION_11();
    v46();
    goto LABEL_9;
  }
  OUTLINED_FUNCTION_11();
  v43();
  uint64_t v44 = v41;
  uint64_t v45 = v42;
LABEL_8:
  __swift_storeEnumTagSinglePayload(v44, 1, 1, v45);
LABEL_9:
  OUTLINED_FUNCTION_26_1();
}

uint64_t storeEnumTagSinglePayload for CallNotificationContextProvider.CallNotification(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)Swift::Bool result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CallNotificationContextProvider.CallNotification(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t specialized Set._isDisjoint<A>(with:)(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 1;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return 1;
  }
  uint64_t v22 = a1 + 32;
  uint64_t v4 = a2 + 56;
  swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  while (!*(void *)(a2 + 16))
  {
LABEL_20:
    if (++v5 == v2)
    {
      uint64_t v20 = 1;
      goto LABEL_24;
    }
  }
  uint64_t v6 = (uint64_t *)(v22 + 16 * v5);
  uint64_t v8 = *v6;
  uint64_t v7 = v6[1];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v9 = Hasher._finalize()();
  uint64_t v10 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v11 = v9 & ~v10;
  if (((*(void *)(v4 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  uint64_t v12 = *(void *)(a2 + 48);
  uint64_t v13 = (void *)(v12 + 16 * v11);
  BOOL v14 = *v13 == v8 && v13[1] == v7;
  if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v15 = ~v10;
    for (unint64_t i = v11 + 1; ; unint64_t i = v17 + 1)
    {
      uint64_t v17 = i & v15;
      if (((*(void *)(v4 + (((i & v15) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v15)) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v12 + 16 * v17);
      BOOL v19 = *v18 == v8 && v18[1] == v7;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_23;
      }
    }
    goto LABEL_19;
  }
LABEL_23:
  swift_bridgeObjectRelease();
  uint64_t v20 = 0;
LABEL_24:
  swift_bridgeObjectRelease();
  return v20;
}

uint64_t protocol witness for AppResolutionProviding.set(annotatedApp:) in conformance AppResolutionProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

void AppResolutionProvider.set(annotatedApp:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = a1 + 16;
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v19 = *(void *)(a1 + 40);
  App.appIdentifier.getter();
  if (v10)
  {
    uint64_t v24 = v5;
    _s27PhoneCallFlowDelegatePlugin12AnnotatedAppVSgWObTm_0(v6, (uint64_t)v23, &demangling cache variable for type metadata for String?);
    uint64_t v22 = *(void *)(a1 + 40);
    swift_beginAccess();
    swift_retain();
    outlined retain of Set<String>((uint64_t)&v24);
    outlined retain of String?((uint64_t)v23);
    outlined retain of Set<String>((uint64_t)&v22);
    specialized Dictionary._Variant.setValue(_:forKey:)();
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v11 = v1[3];
    v2[3] = v4;
    v2[4] = v5;
    v2[5] = v7;
    v2[6] = v8;
    v2[7] = v9;
    v2[8] = v19;
    swift_retain();
    outlined retain of Set<String>((uint64_t)&v24);
    outlined retain of String?((uint64_t)v23);
    outlined retain of Set<String>((uint64_t)&v22);
    outlined consume of AnnotatedApp?(v11);
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.siriPhone);
    v23[0] = *(void *)(a1 + 8);
    _s27PhoneCallFlowDelegatePlugin12AnnotatedAppVSgWObTm_0(v6, (uint64_t)v20, &demangling cache variable for type metadata for String?);
    uint64_t v24 = *(void *)(a1 + 40);
    swift_retain();
    outlined retain of Set<String>((uint64_t)v23);
    outlined retain of String?((uint64_t)v20);
    outlined retain of Set<String>((uint64_t)&v24);
    swift_retain();
    outlined retain of Set<String>((uint64_t)v23);
    outlined retain of String?((uint64_t)v20);
    outlined retain of Set<String>((uint64_t)&v24);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      uint64_t v21 = v4;
      uint64_t v22 = v16;
      *(_DWORD *)uint64_t v15 = 136315138;
      type metadata accessor for App();
      lazy protocol witness table accessor for type App and conformance App();
      uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      outlined release of Set<String>((uint64_t)v23);
      outlined release of String?((uint64_t)v20);
      outlined release of Set<String>((uint64_t)&v24);
      swift_release();
      outlined release of Set<String>((uint64_t)v23);
      outlined release of String?((uint64_t)v20);
      outlined release of Set<String>((uint64_t)&v24);
      _os_log_impl(&dword_0, v13, v14, "#AppResolution annotatedApp: %s could not be cached since it doesn't have an app identifier", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release();
      outlined release of Set<String>((uint64_t)v23);
      outlined release of String?((uint64_t)v20);
      outlined release of Set<String>((uint64_t)&v24);
      swift_release();
      outlined release of Set<String>((uint64_t)v23);
      outlined release of String?((uint64_t)v20);
      outlined release of Set<String>((uint64_t)&v24);
    }
  }
}

uint64_t OUTLINED_FUNCTION_40_1()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t OUTLINED_FUNCTION_40_2()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_8_6()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

void OUTLINED_FUNCTION_84(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t OUTLINED_FUNCTION_13_1()
{
  return v0 + 8;
}

uint64_t OUTLINED_FUNCTION_40_4(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_11_7()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_9_5()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_40_6()
{
  return CATWrapperSimple.__allocating_init(options:globals:)();
}

uint64_t OUTLINED_FUNCTION_48_0()
{
  return 0;
}

unint64_t OUTLINED_FUNCTION_36_1(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

uint64_t OUTLINED_FUNCTION_20_1()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_12_2()
{
  return v0;
}

_WORD *OUTLINED_FUNCTION_40_7(_WORD *result)
{
  *Swift::Bool result = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_40_8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t a15)
{
  uint64_t v16 = a14;
  unint64_t v17 = a15;
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &a13);
}

uint64_t OUTLINED_FUNCTION_40_9(uint64_t a1)
{
  outlined consume of (@escaping @callee_guaranteed () -> ())?(a1);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(0);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(0);
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_40_11()
{
  return v0 & 1;
}

uint64_t OUTLINED_FUNCTION_32_0@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_40_13()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_40_14(uint64_t a1)
{
  v2[18] = v1;
  v2[21] = a1;
  v2[22] = 0x746E65746E69;
  v2[23] = 0xE600000000000000;
  return 0;
}

uint64_t OUTLINED_FUNCTION_40_15()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_40_16()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_40_17(uint64_t a1)
{
  v1[3] = a1;
  void *v1 = v2;
  return v2;
}

__n128 OUTLINED_FUNCTION_40_19@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)(a2 - 256);
  a1[1] = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_40_20()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_7_7()
{
  return swift_beginAccess();
}

double OUTLINED_FUNCTION_40_22()
{
  double result = 0.0;
  *(_OWORD *)(v0 + 112) = 0u;
  *(void *)(v0 + 128) = 0;
  *(_OWORD *)(v0 + 96) = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_40_23(uint64_t a1)
{
  *(void *)(v1 - 168) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_40_24()
{
  return Transformer.init(transform:)();
}

uint64_t OUTLINED_FUNCTION_40_25()
{
  return *(void *)(v0 - 360);
}

uint64_t OUTLINED_FUNCTION_40_26(uint64_t a1)
{
  *(void *)(v2 - 152) = a1;
  return outlined init with copy of SignalProviding(v1 + 24, v2 - 120);
}

uint64_t OUTLINED_FUNCTION_40_27()
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x7475706E69286E6FLL, 0xEA0000000000293ALL, (uint64_t *)(v0 - 88));
}

uint64_t *OUTLINED_FUNCTION_40_28()
{
  uint64_t v3 = *(uint64_t **)(v1 - 88);
  v3[3] = v0;
  return __swift_allocate_boxed_opaque_existential_1(v3);
}

void OUTLINED_FUNCTION_40_29(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v6, v4, a4, v5, 2u);
}

uint64_t OUTLINED_FUNCTION_40_31()
{
  return v0;
}

void *OUTLINED_FUNCTION_40_32()
{
  return __swift_project_boxed_opaque_existential_1(v0, v0[3]);
}

uint64_t OUTLINED_FUNCTION_25_5()
{
  return static CATOption.defaultMode.getter();
}

uint64_t OUTLINED_FUNCTION_32_1()
{
  return v0;
}

_WORD *OUTLINED_FUNCTION_32_2(_WORD *result)
{
  *double result = 0;
  return result;
}

char *OUTLINED_FUNCTION_11_8@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_46_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return a11;
}

uint64_t OUTLINED_FUNCTION_25_7()
{
  return type metadata accessor for Siri_Nlu_External_UserParse();
}

uint64_t OUTLINED_FUNCTION_25_8()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_25_9()
{
  return __swift_getEnumTagSinglePayload(v1, 1, v0);
}

uint64_t OUTLINED_FUNCTION_28_2()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_25_10()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_25_11()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_25_12@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 - 256) = a1;
  return static CATOption.defaultMode.getter();
}

uint64_t OUTLINED_FUNCTION_2_2()
{
  return v0;
}

void OUTLINED_FUNCTION_25_14(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_25_15(uint64_t a1)
{
  *(void *)(v1 - 232) = a1;
  return v1 - 232;
}

void OUTLINED_FUNCTION_16_4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t OUTLINED_FUNCTION_25_16(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return dispatch thunk of DeviceState.isMac.getter();
}

uint64_t OUTLINED_FUNCTION_25_17()
{
  uint64_t v1 = *(void *)(v0 - 96);
  __swift_project_boxed_opaque_existential_1((void *)(v0 - 120), v1);
  return v1;
}

uint64_t OUTLINED_FUNCTION_25_18()
{
  return 0x746E65636572;
}

void OUTLINED_FUNCTION_2_3(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t OUTLINED_FUNCTION_25_20()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_29_2@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 32) = a2;
  *(void *)(a1 + 40) = 0xE600000000000000;
  return 0;
}

uint64_t OUTLINED_FUNCTION_25_21(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

__n128 *OUTLINED_FUNCTION_3_6(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x6F6365526C6C6163;
  result[2].n128_u64[1] = 0xEA00000000006472;
  return result;
}

uint64_t OUTLINED_FUNCTION_72(uint64_t result)
{
  *(void *)(v1 + 48) = result;
  return result;
}

void OUTLINED_FUNCTION_25_22(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0x20u);
}

uint64_t OUTLINED_FUNCTION_25_23()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_25_24()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_25_25()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

unint64_t OUTLINED_FUNCTION_25_27()
{
  return 0xD000000000000039;
}

void OUTLINED_FUNCTION_25_28()
{
  __swift_project_boxed_opaque_existential_1(v0, v1);
  DeviceState.isPrimaryDisplayDisabled.getter();
}

uint64_t OUTLINED_FUNCTION_25_29()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_25_30()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_25_32(uint64_t a1, uint64_t a2)
{
  __swift_project_value_buffer(a1, a2);
  return swift_retain_n();
}

uint64_t OUTLINED_FUNCTION_25_33()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_25_34()
{
  *(void *)(v1 - 120) = v0;
  return *(void *)(v1 - 72);
}

void OUTLINED_FUNCTION_25_36()
{
  *(_DWORD *)(v0 - 136) = 0;
  *(_DWORD *)(v0 - 128) = 0;
  *(_DWORD *)(v0 - 120) = 0;
  *(_DWORD *)(v0 - 216) = 1;
  *(_DWORD *)(v0 - 208) = 1;
  *(_DWORD *)(v0 - 200) = 1;
  *(_DWORD *)(v0 - 192) = 1;
  *(_DWORD *)(v0 - 184) = 1;
  *(_DWORD *)(v0 - 176) = 1;
  *(_DWORD *)(v0 - 168) = 1;
  *(_DWORD *)(v0 - 160) = 1;
}

uint64_t OUTLINED_FUNCTION_25_37()
{
  uint64_t v1 = *(void *)(v0 + 40);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v1);
  return v1;
}

uint64_t OUTLINED_FUNCTION_25_38()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_25_39()
{
  *(void *)(v0 - 160) = 0;
  *(void *)(v0 - 152) = 0xE000000000000000;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_25_41()
{
  __swift_destroy_boxed_opaque_existential_1(v0 - 208);
  __swift_destroy_boxed_opaque_existential_1(v0 - 168);
  __swift_destroy_boxed_opaque_existential_1(v0 - 128);
  uint64_t v1 = *(void *)(v0 - 360);
  return __swift_destroy_boxed_opaque_existential_1(v1);
}

uint64_t OUTLINED_FUNCTION_25_42()
{
  return type metadata accessor for ContactResolverConfigHashable();
}

uint64_t OUTLINED_FUNCTION_25_44()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_25_45()
{
  return __swift_storeEnumTagSinglePayload(v0, 0, 1, v1);
}

void OUTLINED_FUNCTION_25_46()
{
  *(void *)(v1 + 48) = v0;
}

uint64_t protocol witness for AppResolutionOnDeviceFlowStrategyAsync.makeAppResolutionSuccessfulResponse(app:) in conformance PhoneAppResolutionOnDeviceFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = protocol witness for PromptForConfirmationFlowStrategyAsync.parseConfirmationResponse(input:) in conformance UnsupportedSearchParametersFlowStrategy;
  return AppResolutionOnDeviceFlowStrategyAsync.makeAppResolutionSuccessfulResponse(app:)(a1, a2, a3, a4);
}

uint64_t partial apply for closure #1 in AppResolutionBeforeResolveFlow.execute()(uint64_t a1)
{
  return closure #1 in AppResolutionBeforeResolveFlow.execute()(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t closure #1 in AppResolutionBeforeResolveFlow.execute()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v52 = a3;
  uint64_t v47 = a2;
  uint64_t v4 = type metadata accessor for AppResolutionBeforeResolveFlow.State(0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v50 = (uint64_t)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v49 = (char *)&v43 - v7;
  uint64_t v8 = type metadata accessor for AppResolutionFlowResult();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v48 = (uint64_t *)((char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = __chkstk_darwin(v10);
  os_log_type_t v14 = (char *)&v43 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v43 - v15;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = __swift_project_value_buffer(v17, (uint64_t)static Logger.siriPhone);
  uint64_t v19 = *(uint8_t **)(v9 + 16);
  uint64_t v51 = a1;
  ((void (*)(char *, uint64_t, uint64_t))v19)(v16, a1, v8);
  uint64_t v46 = v18;
  uint64_t v20 = v8;
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = swift_slowAlloc();
    uint64_t v45 = v4;
    uint64_t v24 = (uint8_t *)v23;
    uint64_t v44 = swift_slowAlloc();
    v54[0] = v44;
    *(_DWORD *)uint64_t v24 = 136315138;
    uint64_t v43 = v24 + 4;
    ((void (*)(char *, char *, uint64_t))v19)(v14, v16, v20);
    uint64_t v25 = String.init<A>(describing:)();
    uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v27 = *(void (**)(char *, uint64_t))(v9 + 8);
    v27(v16, v20);
    _os_log_impl(&dword_0, v21, v22, "#AppResolutionBeforeResolveFlow app resolution flow completed with %s", v24, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v27 = *(void (**)(char *, uint64_t))(v9 + 8);
    v27(v16, v20);
  }

  uint64_t v28 = v48;
  uint64_t v29 = v51;
  ((void (*)(uint64_t *, uint64_t, uint64_t))v19)(v48, v51, v20);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v9 + 88))(v28, v20) == enum case for AppResolutionFlowResult.resolved(_:))
  {
    uint64_t v43 = v19;
    uint64_t v44 = v9 + 16;
    uint64_t v30 = *(void (**)(uint64_t *, uint64_t))(v9 + 96);
    uint64_t v45 = v20;
    v30(v28, v20);
    uint64_t v31 = *v28;
    swift_retain_n();
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      uint64_t v53 = v31;
      v54[0] = v35;
      *(_DWORD *)uint64_t v34 = 136315138;
      type metadata accessor for App();
      lazy protocol witness table accessor for type AppResolutionBeforeResolveFlow and conformance AppResolutionBeforeResolveFlow((unint64_t *)&lazy protocol witness table cache variable for type App and conformance App, (void (*)(uint64_t))&type metadata accessor for App);
      uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v32, v33, "#AppResolutionBeforeResolveFlow set meta data for app: %s", v34, 0xCu);
      swift_arrayDestroy();
      uint64_t v29 = v51;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v38 = swift_retain();
    INIntent.setMetaData(app:previousIntent:sharedGlobals:)(v38, 0);
    swift_release_n();
    uint64_t v20 = v45;
    uint64_t v19 = v43;
  }
  else
  {
    v27((char *)v28, v20);
  }
  uint64_t v39 = (uint64_t)v49;
  ((void (*)(char *, uint64_t, uint64_t))v19)(v49, v29, v20);
  swift_storeEnumTagMultiPayload();
  uint64_t v40 = v50;
  outlined init with take of AppResolutionBeforeResolveFlow.State(v39, v50);
  uint64_t v41 = v52 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin30AppResolutionBeforeResolveFlow_state;
  swift_beginAccess();
  outlined assign with take of AppResolutionBeforeResolveFlow.State(v40, v41);
  return swift_endAccess();
}

uint64_t protocol witness for Flow.exitValue.getter in conformance AppResolutionBeforeResolveFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 160))();
}

uint64_t AppResolutionBeforeResolveFlow.exitValue.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for PhoneError();
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v3);
  uint64_t v5 = (uint64_t *)((char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for AppResolutionBeforeResolveFlow.State(0);
  OUTLINED_FUNCTION_15();
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v26 - v10;
  uint64_t v12 = type metadata accessor for AppResolutionFlowResult();
  OUTLINED_FUNCTION_1();
  uint64_t v14 = v13;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin30AppResolutionBeforeResolveFlow_state;
  swift_beginAccess();
  outlined init with copy of AppResolutionBeforeResolveFlow.State(v18, (uint64_t)v11);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v19(v17, v11, v12);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v19)(a1, v17, v12);
  }
  else
  {
    outlined destroy of AppResolutionBeforeResolveFlow.State((uint64_t)v11, (void (*)(void))type metadata accessor for AppResolutionBeforeResolveFlow.State);
    outlined init with copy of AppResolutionBeforeResolveFlow.State(v18, (uint64_t)v9);
    unint64_t v21 = AppResolutionBeforeResolveFlow.State.description.getter();
    uint64_t v23 = v22;
    outlined destroy of AppResolutionBeforeResolveFlow.State((uint64_t)v9, (void (*)(void))type metadata accessor for AppResolutionBeforeResolveFlow.State);
    *uint64_t v5 = 0xD00000000000001ELL;
    v5[1] = 0x8000000000482580;
    void v5[2] = v21;
    void v5[3] = v23;
    swift_storeEnumTagMultiPayload();
    lazy protocol witness table accessor for type AppResolutionBeforeResolveFlow and conformance AppResolutionBeforeResolveFlow((unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError, (void (*)(uint64_t))type metadata accessor for PhoneError);
    uint64_t v24 = swift_allocError();
    PhoneError.logged()(v25);
    outlined destroy of AppResolutionBeforeResolveFlow.State((uint64_t)v5, (void (*)(void))type metadata accessor for PhoneError);
    *(void *)a1 = v24;
    *(unsigned char *)(a1 + 8) = 0;
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(v14 + 104))(a1, enum case for AppResolutionFlowResult.error(_:), v12);
  }
}

uint64_t PhoneAppResolutionOnDeviceFlowStrategy.__deallocating_deinit()
{
  PhoneAppResolutionOnDeviceFlowStrategy.deinit();

  return swift_deallocClassInstance();
}

uint64_t PhoneAppResolutionOnDeviceFlowStrategy.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  __swift_destroy_boxed_opaque_existential_1(v0 + 72);
  __swift_destroy_boxed_opaque_existential_1(v0 + 112);
  __swift_destroy_boxed_opaque_existential_1(v0 + 152);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 200);
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 256);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 304);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AnnounceGroupFaceTimeInviteCATPatternsExecutor.__deallocating_deinit()
{
  CATWrapper.deinit();

  return swift_deallocClassInstance();
}

uint64_t AnnounceGroupFaceTimeInviteCATsSimple.__deallocating_deinit()
{
  CATWrapperSimple.deinit();

  return swift_deallocClassInstance();
}

uint64_t PhoneAppResolutionHelper.__deallocating_deinit()
{
  PhoneAppResolutionHelper.deinit();

  return swift_deallocClassInstance();
}

uint64_t PhoneAppResolutionHelper.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 104);
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin24PhoneAppResolutionHelper_appResolver;
  type metadata accessor for AppResolver();
  OUTLINED_FUNCTION_10();
  (*(void (**)(uint64_t))(v2 + 8))(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SmartAppSelectionFeatureManager.__deallocating_deinit()
{
  SmartAppSelectionFeatureManager.deinit();

  return swift_deallocClassInstance();
}

uint64_t SmartAppSelectionFeatureManager.deinit()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TrialSmartAppSelectionConfigProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t destroy for PhoneAppResolutionLogger(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  __swift_destroy_boxed_opaque_existential_1(a1 + 64);

  return __swift_destroy_boxed_opaque_existential_1(a1 + 104);
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance CallingIntentRCHFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for CallingIntentRCHFlowStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for Flow.onAsync(input:) in conformance RedirectToCompanionFlow;
  return IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:)(a1, a2, v9, a4);
}

uint64_t type metadata accessor for CallingIntentRCHFlowStrategy()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for specialized closure #2 in static PhoneCallFlowFactory.getGenericStartCallProducers<A>(delegate:app:)(uint64_t a1, uint64_t a2)
{
  return specialized closure #2 in static PhoneCallFlowFactory.getGenericStartCallProducers<A>(delegate:app:)(a1, a2, v2);
}

{
  uint64_t v2;

  return specialized closure #2 in static PhoneCallFlowFactory.getGenericStartCallProducers<A>(delegate:app:)(a1, a2, v2);
}

{
  uint64_t v2;

  return specialized closure #2 in static PhoneCallFlowFactory.getGenericStartCallProducers<A>(delegate:app:)(a1, a2, v2);
}

uint64_t specialized closure #2 in static PhoneCallFlowFactory.getGenericStartCallProducers<A>(delegate:app:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v39 = a2;
  uint64_t v35 = a1;
  uint64_t v4 = type metadata accessor for ParameterIdentifier();
  uint64_t v40 = *(void *)(v4 - 8);
  uint64_t v41 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CATOption();
  __chkstk_darwin(v7 - 8);
  type metadata accessor for StartCallCATs();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v38 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for StartCallCATPatternsExecutor(0);
  static CATOption.defaultMode.getter();
  uint64_t v37 = CATWrapper.__allocating_init(options:globals:)();
  uint64_t v8 = type metadata accessor for PhoneCallCommonCATs();
  static CATOption.defaultMode.getter();
  uint64_t v34 = v8;
  uint64_t v36 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for PhoneCallCommonCATPatternsExecutor();
  static CATOption.defaultMode.getter();
  uint64_t v9 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for StartCallCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v10 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for PhoneCallDisplayTextCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v11 = CATWrapperSimple.__allocating_init(options:globals:)();
  static SiriKitEventSender.current.getter();
  type metadata accessor for AppInfoBuilder();
  uint64_t v12 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CallingIntentUnsupportedValueFlowStrategy<StartVideoCallRCHFlowDelegate>);
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = a3;
  uint64_t v15 = v9;
  uint64_t v16 = v39;
  uint64_t v17 = specialized CallingIntentUnsupportedValueFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:phoneCallCommonCATs:phoneCallCommonCatPatterns:startCallCatsSimple:phoneCallDisplayTextCATsSimple:siriKitEventSender:appInfoBuilder:)(a3, v38, v37, v36, v15, v10, v11, v52, v12, v13, &direct field offset for StartVideoCallRCHFlowDelegate.sharedGlobals);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INStartVideoCallIntent>);
  ParameterResolutionRecord.parameter.getter();
  uint64_t v18 = ParameterIdentifier.name.getter();
  uint64_t v20 = v19;
  (*(void (**)(char *, uint64_t))(v40 + 8))(v6, v41);
  v21._uint64_t countAndFlagsBits = v18;
  v21._object = v20;
  if ((PhoneCallSlotNames.init(rawValue:)(v21).value & 0xFE) == 4)
  {
    char v22 = specialized ParameterResolutionRecord<>.isUnsetRelationship.getter(&demangling cache variable for type metadata for ParameterResolutionRecord<INStartVideoCallIntent>, (uint64_t (*)(void))outlined bridged method (pb) of @objc INStartVideoCallIntent.contacts.getter);
    uint64_t v23 = v35;
    if (v22)
    {
      outlined init with copy of SignalProviding(v14 + direct field offset for StartVideoCallRCHFlowDelegate.sharedGlobals, (uint64_t)&v51);
      id v24 = [objc_allocWithZone((Class)CNContactStore) init];
      uint64_t v49 = type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for CNContactStore);
      uint64_t v50 = &protocol witness table for CNContactStore;
      id v48 = v24;
      uint64_t v46 = &type metadata for LabelTemplatesProvider;
      uint64_t v47 = &protocol witness table for LabelTemplatesProvider;
      uint64_t v25 = swift_allocObject();
      uint64_t v45 = v25;
      *(_OWORD *)(v25 + 16) = 0u;
      *(_OWORD *)(v25 + 32) = 0u;
      uint64_t v26 = type metadata accessor for UnsetRelationshipTemplatesWrapper();
      uint64_t v27 = swift_allocObject();
      uint64_t v43 = v26;
      uint64_t v44 = &protocol witness table for UnsetRelationshipTemplatesWrapper;
      uint64_t v42 = v27;
      type metadata accessor for PhoneCallDisplayTextCATs();
      static CATOption.defaultMode.getter();
      CATWrapper.__allocating_init(options:globals:)();
      static CATOption.defaultMode.getter();
      CATWrapper.__allocating_init(options:globals:)();
      specialized ContactUnsetRelationshipFlowStrategy.init(sharedGlobals:contactStore:labelTemplates:unsetRelationshipTemplates:displayTextCatFamily:phoneCallCommonCats:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactUnsetRelationshipFlowStrategy<INStartVideoCallIntent>);
      type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for INStartVideoCallIntentResponse);
      lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type ContactUnsetRelationshipFlowStrategy<INStartVideoCallIntent> and conformance ContactUnsetRelationshipFlowStrategy<A>, &demangling cache variable for type metadata for ContactUnsetRelationshipFlowStrategy<INStartVideoCallIntent>);
      uint64_t v28 = (uint64_t (*)(uint64_t, uint64_t))static RCHChildFlowFactoryHelper.makeUnsupportedUnsetRelationshipFlowProducer<A, B>(strategy:)();
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v52, &demangling cache variable for type metadata for ContactUnsetRelationshipFlowStrategy<INStartVideoCallIntent>);
      uint64_t v29 = v28(v23, v16);
    }
    else
    {
      v52[0] = v17;
      lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type CallingIntentUnsupportedValueFlowStrategy<StartVideoCallRCHFlowDelegate> and conformance CallingIntentUnsupportedValueFlowStrategy<A>, &demangling cache variable for type metadata for CallingIntentUnsupportedValueFlowStrategy<StartVideoCallRCHFlowDelegate>);
      uint64_t v31 = (uint64_t (*)(uint64_t, uint64_t))static RCHChildFlowFactoryHelper.makeUnsupportedValueAndPromptFlowProducer<A>(strategy:)();
      uint64_t v29 = v31(v23, v16);
    }
  }
  else
  {
    v52[0] = v17;
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type CallingIntentUnsupportedValueFlowStrategy<StartVideoCallRCHFlowDelegate> and conformance CallingIntentUnsupportedValueFlowStrategy<A>, &demangling cache variable for type metadata for CallingIntentUnsupportedValueFlowStrategy<StartVideoCallRCHFlowDelegate>);
    uint64_t v30 = (uint64_t (*)(uint64_t, uint64_t))static RCHChildFlowFactoryHelper.makeUnsupportedValueAndCancelFlowProducer<A>(strategy:)();
    uint64_t v29 = v30(v35, v16);
  }
  uint64_t v32 = v29;
  swift_release();
  swift_release();
  return v32;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  Swift::String v21;
  char v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  uint64_t (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _UNKNOWN **v44;
  uint64_t v45;
  ValueMetadata *v46;
  _UNKNOWN **v47;
  id v48;
  uint64_t v49;
  _UNKNOWN **v50;
  uint64_t v51;
  void v52[24];

  uint64_t v39 = a2;
  uint64_t v35 = a1;
  uint64_t v4 = type metadata accessor for ParameterIdentifier();
  uint64_t v40 = *(void *)(v4 - 8);
  uint64_t v41 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CATOption();
  __chkstk_darwin(v7 - 8);
  type metadata accessor for StartCallCATs();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v38 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for StartCallCATPatternsExecutor(0);
  static CATOption.defaultMode.getter();
  uint64_t v37 = CATWrapper.__allocating_init(options:globals:)();
  uint64_t v8 = type metadata accessor for PhoneCallCommonCATs();
  static CATOption.defaultMode.getter();
  uint64_t v34 = v8;
  uint64_t v36 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for PhoneCallCommonCATPatternsExecutor();
  static CATOption.defaultMode.getter();
  uint64_t v9 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for StartCallCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v10 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for PhoneCallDisplayTextCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v11 = CATWrapperSimple.__allocating_init(options:globals:)();
  static SiriKitEventSender.current.getter();
  type metadata accessor for AppInfoBuilder();
  uint64_t v12 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CallingIntentUnsupportedValueFlowStrategy<StartCallRCHFlowDelegate>);
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = a3;
  uint64_t v15 = v9;
  uint64_t v16 = v39;
  uint64_t v17 = specialized CallingIntentUnsupportedValueFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:phoneCallCommonCATs:phoneCallCommonCatPatterns:startCallCatsSimple:phoneCallDisplayTextCATsSimple:siriKitEventSender:appInfoBuilder:)(a3, v38, v37, v36, v15, v10, v11, v52, v12, v13, &direct field offset for StartCallRCHFlowDelegate.sharedGlobals);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INStartCallIntent>);
  ParameterResolutionRecord.parameter.getter();
  uint64_t v18 = ParameterIdentifier.name.getter();
  uint64_t v20 = v19;
  (*(void (**)(char *, uint64_t))(v40 + 8))(v6, v41);
  v21._uint64_t countAndFlagsBits = v18;
  v21._object = v20;
  if ((PhoneCallSlotNames.init(rawValue:)(v21).value & 0xFE) == 4)
  {
    char v22 = specialized ParameterResolutionRecord<>.isUnsetRelationship.getter();
    uint64_t v23 = v35;
    if (v22)
    {
      outlined init with copy of SignalProviding(v14 + direct field offset for StartCallRCHFlowDelegate.sharedGlobals, (uint64_t)&v51);
      id v24 = [objc_allocWithZone((Class)CNContactStore) init];
      uint64_t v49 = type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for CNContactStore);
      uint64_t v50 = &protocol witness table for CNContactStore;
      id v48 = v24;
      uint64_t v46 = &type metadata for LabelTemplatesProvider;
      uint64_t v47 = &protocol witness table for LabelTemplatesProvider;
      uint64_t v25 = swift_allocObject();
      uint64_t v45 = v25;
      *(_OWORD *)(v25 + 16) = 0u;
      *(_OWORD *)(v25 + 32) = 0u;
      uint64_t v26 = type metadata accessor for UnsetRelationshipTemplatesWrapper();
      uint64_t v27 = swift_allocObject();
      uint64_t v43 = v26;
      uint64_t v44 = &protocol witness table for UnsetRelationshipTemplatesWrapper;
      uint64_t v42 = v27;
      type metadata accessor for PhoneCallDisplayTextCATs();
      static CATOption.defaultMode.getter();
      CATWrapper.__allocating_init(options:globals:)();
      static CATOption.defaultMode.getter();
      CATWrapper.__allocating_init(options:globals:)();
      specialized ContactUnsetRelationshipFlowStrategy.init(sharedGlobals:contactStore:labelTemplates:unsetRelationshipTemplates:displayTextCatFamily:phoneCallCommonCats:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactUnsetRelationshipFlowStrategy<INStartCallIntent>);
      type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for INStartCallIntentResponse);
      lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type ContactUnsetRelationshipFlowStrategy<INStartCallIntent> and conformance ContactUnsetRelationshipFlowStrategy<A>, &demangling cache variable for type metadata for ContactUnsetRelationshipFlowStrategy<INStartCallIntent>);
      uint64_t v28 = (uint64_t (*)(uint64_t, uint64_t))static RCHChildFlowFactoryHelper.makeUnsupportedUnsetRelationshipFlowProducer<A, B>(strategy:)();
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v52, &demangling cache variable for type metadata for ContactUnsetRelationshipFlowStrategy<INStartCallIntent>);
      uint64_t v29 = v28(v23, v16);
    }
    else
    {
      v52[0] = v17;
      lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type CallingIntentUnsupportedValueFlowStrategy<StartCallRCHFlowDelegate> and conformance CallingIntentUnsupportedValueFlowStrategy<A>, &demangling cache variable for type metadata for CallingIntentUnsupportedValueFlowStrategy<StartCallRCHFlowDelegate>);
      uint64_t v31 = (uint64_t (*)(uint64_t, uint64_t))static RCHChildFlowFactoryHelper.makeUnsupportedValueAndPromptFlowProducer<A>(strategy:)();
      uint64_t v29 = v31(v23, v16);
    }
  }
  else
  {
    v52[0] = v17;
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type CallingIntentUnsupportedValueFlowStrategy<StartCallRCHFlowDelegate> and conformance CallingIntentUnsupportedValueFlowStrategy<A>, &demangling cache variable for type metadata for CallingIntentUnsupportedValueFlowStrategy<StartCallRCHFlowDelegate>);
    uint64_t v30 = (uint64_t (*)(uint64_t, uint64_t))static RCHChildFlowFactoryHelper.makeUnsupportedValueAndCancelFlowProducer<A>(strategy:)();
    uint64_t v29 = v30(v35, v16);
  }
  uint64_t v32 = v29;
  swift_release();
  swift_release();
  return v32;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  Swift::String v21;
  char v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  uint64_t (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _UNKNOWN **v44;
  uint64_t v45;
  ValueMetadata *v46;
  _UNKNOWN **v47;
  id v48;
  uint64_t v49;
  _UNKNOWN **v50;
  uint64_t v51;
  void v52[24];

  uint64_t v39 = a2;
  uint64_t v35 = a1;
  uint64_t v4 = type metadata accessor for ParameterIdentifier();
  uint64_t v40 = *(void *)(v4 - 8);
  uint64_t v41 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CATOption();
  __chkstk_darwin(v7 - 8);
  type metadata accessor for StartCallCATs();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v38 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for StartCallCATPatternsExecutor(0);
  static CATOption.defaultMode.getter();
  uint64_t v37 = CATWrapper.__allocating_init(options:globals:)();
  uint64_t v8 = type metadata accessor for PhoneCallCommonCATs();
  static CATOption.defaultMode.getter();
  uint64_t v34 = v8;
  uint64_t v36 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for PhoneCallCommonCATPatternsExecutor();
  static CATOption.defaultMode.getter();
  uint64_t v9 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for StartCallCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v10 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for PhoneCallDisplayTextCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v11 = CATWrapperSimple.__allocating_init(options:globals:)();
  static SiriKitEventSender.current.getter();
  type metadata accessor for AppInfoBuilder();
  uint64_t v12 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CallingIntentUnsupportedValueFlowStrategy<StartAudioCallRCHFlowDelegate>);
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = a3;
  uint64_t v15 = v9;
  uint64_t v16 = v39;
  uint64_t v17 = specialized CallingIntentUnsupportedValueFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:phoneCallCommonCATs:phoneCallCommonCatPatterns:startCallCatsSimple:phoneCallDisplayTextCATsSimple:siriKitEventSender:appInfoBuilder:)(a3, v38, v37, v36, v15, v10, v11, v52, v12, v13, &direct field offset for StartAudioCallRCHFlowDelegate.sharedGlobals);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INStartAudioCallIntent>);
  ParameterResolutionRecord.parameter.getter();
  uint64_t v18 = ParameterIdentifier.name.getter();
  uint64_t v20 = v19;
  (*(void (**)(char *, uint64_t))(v40 + 8))(v6, v41);
  v21._uint64_t countAndFlagsBits = v18;
  v21._object = v20;
  if ((PhoneCallSlotNames.init(rawValue:)(v21).value & 0xFE) == 4)
  {
    char v22 = specialized ParameterResolutionRecord<>.isUnsetRelationship.getter(&demangling cache variable for type metadata for ParameterResolutionRecord<INStartAudioCallIntent>, (uint64_t (*)(void))outlined bridged method (pb) of @objc INStartVideoCallIntent.contacts.getter);
    uint64_t v23 = v35;
    if (v22)
    {
      outlined init with copy of SignalProviding(v14 + direct field offset for StartAudioCallRCHFlowDelegate.sharedGlobals, (uint64_t)&v51);
      id v24 = [objc_allocWithZone((Class)CNContactStore) init];
      uint64_t v49 = type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for CNContactStore);
      uint64_t v50 = &protocol witness table for CNContactStore;
      id v48 = v24;
      uint64_t v46 = &type metadata for LabelTemplatesProvider;
      uint64_t v47 = &protocol witness table for LabelTemplatesProvider;
      uint64_t v25 = swift_allocObject();
      uint64_t v45 = v25;
      *(_OWORD *)(v25 + 16) = 0u;
      *(_OWORD *)(v25 + 32) = 0u;
      uint64_t v26 = type metadata accessor for UnsetRelationshipTemplatesWrapper();
      uint64_t v27 = swift_allocObject();
      uint64_t v43 = v26;
      uint64_t v44 = &protocol witness table for UnsetRelationshipTemplatesWrapper;
      uint64_t v42 = v27;
      type metadata accessor for PhoneCallDisplayTextCATs();
      static CATOption.defaultMode.getter();
      CATWrapper.__allocating_init(options:globals:)();
      static CATOption.defaultMode.getter();
      CATWrapper.__allocating_init(options:globals:)();
      specialized ContactUnsetRelationshipFlowStrategy.init(sharedGlobals:contactStore:labelTemplates:unsetRelationshipTemplates:displayTextCatFamily:phoneCallCommonCats:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactUnsetRelationshipFlowStrategy<INStartAudioCallIntent>);
      type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for INStartAudioCallIntentResponse);
      lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type ContactUnsetRelationshipFlowStrategy<INStartAudioCallIntent> and conformance ContactUnsetRelationshipFlowStrategy<A>, &demangling cache variable for type metadata for ContactUnsetRelationshipFlowStrategy<INStartAudioCallIntent>);
      uint64_t v28 = (uint64_t (*)(uint64_t, uint64_t))static RCHChildFlowFactoryHelper.makeUnsupportedUnsetRelationshipFlowProducer<A, B>(strategy:)();
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v52, &demangling cache variable for type metadata for ContactUnsetRelationshipFlowStrategy<INStartAudioCallIntent>);
      uint64_t v29 = v28(v23, v16);
    }
    else
    {
      v52[0] = v17;
      lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type CallingIntentUnsupportedValueFlowStrategy<StartAudioCallRCHFlowDelegate> and conformance CallingIntentUnsupportedValueFlowStrategy<A>, &demangling cache variable for type metadata for CallingIntentUnsupportedValueFlowStrategy<StartAudioCallRCHFlowDelegate>);
      uint64_t v31 = (uint64_t (*)(uint64_t, uint64_t))static RCHChildFlowFactoryHelper.makeUnsupportedValueAndPromptFlowProducer<A>(strategy:)();
      uint64_t v29 = v31(v23, v16);
    }
  }
  else
  {
    v52[0] = v17;
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type CallingIntentUnsupportedValueFlowStrategy<StartAudioCallRCHFlowDelegate> and conformance CallingIntentUnsupportedValueFlowStrategy<A>, &demangling cache variable for type metadata for CallingIntentUnsupportedValueFlowStrategy<StartAudioCallRCHFlowDelegate>);
    uint64_t v30 = (uint64_t (*)(uint64_t, uint64_t))static RCHChildFlowFactoryHelper.makeUnsupportedValueAndCancelFlowProducer<A>(strategy:)();
    uint64_t v29 = v30(v35, v16);
  }
  uint64_t v32 = v29;
  swift_release();
  swift_release();
  return v32;
}

uint64_t type metadata accessor for PhoneCallCommonCATs()
{
  uint64_t result = type metadata singleton initialization cache for PhoneCallCommonCATs;
  if (!type metadata singleton initialization cache for PhoneCallCommonCATs) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t PhoneCallCommonCATs.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return PhoneCallCommonCATs.init(templateDir:options:globals:)(a1, a2);
}

uint64_t PhoneCallCommonCATs.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CATOption();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  uint64_t v9 = OUTLINED_FUNCTION_11_0(v8);
  __chkstk_darwin(v9);
  outlined init with copy of SpeakableString?(a1, (uint64_t)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  uint64_t v11 = CATWrapper.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(a1, (uint64_t *)&demangling cache variable for type metadata for URL?);
  return v11;
}

uint64_t type metadata accessor for PhoneCallCommonCATPatternsExecutor()
{
  uint64_t result = type metadata singleton initialization cache for PhoneCallCommonCATPatternsExecutor;
  if (!type metadata singleton initialization cache for PhoneCallCommonCATPatternsExecutor) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t PhoneCallCommonCATPatternsExecutor.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return PhoneCallCommonCATPatternsExecutor.init(templateDir:options:globals:)(a1, a2);
}

uint64_t PhoneCallCommonCATPatternsExecutor.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CATOption();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v8 - 8);
  outlined init with copy of URL?(a1, (uint64_t)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  uint64_t v10 = CATWrapper.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  outlined destroy of URL?(a1);
  return v10;
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of URL?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for PhoneCallCommonCATsSimple()
{
  uint64_t result = type metadata singleton initialization cache for PhoneCallCommonCATsSimple;
  if (!type metadata singleton initialization cache for PhoneCallCommonCATsSimple) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t PhoneCallCommonCATsSimple.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return PhoneCallCommonCATsSimple.init(templateDir:options:globals:)(a1, a2);
}

uint64_t PhoneCallCommonCATsSimple.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_8_18();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v10 - 8);
  outlined init with copy of Result<TemplatingResult, Error>(a1, (uint64_t)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a2, v2);
  uint64_t v12 = CATWrapperSimple.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a2, v2);
  outlined destroy of SubmitCommandError?(a1, (uint64_t *)&demangling cache variable for type metadata for URL?);
  return v12;
}

uint64_t closure #1 in variable initialization expression of UnsupportedCallFlowOutputFactory.completionOutputManifest()
{
  return OutputGenerationManifest.listenAfterSpeaking.setter();
}

PhoneCallFlowDelegatePlugin::PhoneCallSlotNames_optional __swiftcall PhoneCallSlotNames.init(rawValue:)(Swift::String rawValue)
{
  unint64_t v1 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v1 >= 0x14) {
    return (PhoneCallFlowDelegatePlugin::PhoneCallSlotNames_optional)20;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::PhoneCallSlotNames_optional)v1;
  }
}

uint64_t specialized ParameterResolutionRecord<>.isUnsetRelationship.getter(uint64_t *a1, uint64_t (*a2)(void))
{
  uint64_t v5 = type metadata accessor for ParameterIdentifier();
  OUTLINED_FUNCTION_0_0();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_53();
  __swift_instantiateConcreteTypeFromMangledName(a1);
  ParameterResolutionRecord.app.getter();
  Swift::Bool v9 = App.isFirstParty()();
  swift_release();
  if (v9)
  {
    ParameterResolutionRecord.parameter.getter();
    uint64_t v10 = ParameterIdentifier.multicardinalIndex.getter();
    char v12 = v11;
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v2, v5);
    uint64_t v13 = (v12 & 1) != 0 ? 0 : v10;
    uint64_t v14 = (void *)ParameterResolutionRecord.intent.getter();
    unint64_t v15 = a2();

    if (v15)
    {
      if (v13 < 0) {
        goto LABEL_14;
      }
      if (v15 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v16 = *(void *)((char *)&dword_10 + (v15 & 0xFFFFFFFFFFFFFF8));
      }
      if (v13 >= v16)
      {
LABEL_14:
        swift_bridgeObjectRelease();
      }
      else
      {
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v13, (v15 & 0xC000000000000001) == 0, v15);
        if ((v15 & 0xC000000000000001) != 0) {
          id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v17 = *(id *)(v15 + 8 * v13 + 32);
        }
        uint64_t v18 = v17;
        swift_bridgeObjectRelease();
        id v19 = [v18 relationship];

        if (v19)
        {
          uint64_t v20 = (void *)ParameterResolutionRecord.intent.getter();
        }
      }
    }
  }
  return 0;
}

uint64_t specialized ParameterResolutionRecord<>.isUnsetRelationship.getter()
{
  uint64_t v0 = type metadata accessor for ParameterIdentifier();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INStartCallIntent>);
  ParameterResolutionRecord.app.getter();
  Swift::Bool v4 = App.isFirstParty()();
  swift_release();
  if (!v4) {
    return 0;
  }
  ParameterResolutionRecord.parameter.getter();
  uint64_t v5 = ParameterIdentifier.multicardinalIndex.getter();
  char v7 = v6;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t v8 = (v7 & 1) != 0 ? 0 : v5;
  Swift::Bool v9 = (void *)ParameterResolutionRecord.intent.getter();
  unint64_t v10 = outlined bridged method (pb) of @objc INStartCallIntent.contacts.getter(v9);

  if (!v10) {
    return 0;
  }
  if (v8 < 0) {
    goto LABEL_19;
  }
  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = *(void *)((char *)&dword_10 + (v10 & 0xFFFFFFFFFFFFFF8));
  }
  if (v8 >= v11)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    return 0;
  }
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v8, (v10 & 0xC000000000000001) == 0, v10);
  if ((v10 & 0xC000000000000001) != 0) {
    id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v12 = *(id *)(v10 + 8 * v8 + 32);
  }
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  id v14 = [v13 relationship];

  if (!v14) {
    return 0;
  }
  unint64_t v15 = (void *)ParameterResolutionRecord.intent.getter();
  uint64_t v16 = (void *)ParameterResolutionRecord.result.getter();
  uint64_t v35 = v15;
  id v36 = v16;
  id v17 = v15;
  id v18 = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (INStartCallIntent, INIntentResolutionResult));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (INStartCallIntent, INStartCallContactResolutionResult));
  if (!swift_dynamicCast())
  {

    id v14 = v35;
    id v32 = v36;

    goto LABEL_22;
  }

  id v19 = v34;
  uint64_t v20 = (char *)[v34 unsupportedReason];

  Swift::String v21 = v35;
  if (v20 != (unsigned char *)&dword_0 + 1)
  {
LABEL_22:

    return 0;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Logger.siriPhone);
  id v23 = v14;
  id v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = swift_slowAlloc();
    uint64_t v35 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v26 = 136315650;
    id v33 = (id)type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INStartCallIntent);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INStartCallIntent.Type);
    uint64_t v27 = String.init<A>(describing:)();
    id v33 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, (uint64_t *)&v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 2080;
    id v33 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000013, 0x8000000000493DD0, (uint64_t *)&v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v26 + 22) = 2080;
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v33 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, (uint64_t *)&v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v24, v25, "#ParameterResolutionRecord<%s> %s Found unsetRelationship = %s", (uint8_t *)v26, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 1;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  Swift::Bool v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  id v17;
  char *v18;
  void *v19;
  uint64_t v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  id v30;
  id v31;
  void *v32;
  id v33;

  uint64_t v0 = type metadata accessor for ParameterIdentifier();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INAddCallParticipantIntent>);
  ParameterResolutionRecord.app.getter();
  Swift::Bool v4 = App.isFirstParty()();
  swift_release();
  if (!v4) {
    return 0;
  }
  ParameterResolutionRecord.parameter.getter();
  uint64_t v5 = ParameterIdentifier.multicardinalIndex.getter();
  char v7 = v6;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t v8 = (v7 & 1) != 0 ? 0 : v5;
  Swift::Bool v9 = (void *)ParameterResolutionRecord.intent.getter();
  unint64_t v10 = outlined bridged method (pb) of @objc INAddCallParticipantIntent.participants.getter(v9);

  if (!v10) {
    return 0;
  }
  if (v8 < 0) {
    goto LABEL_19;
  }
  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = *(void *)((char *)&dword_10 + (v10 & 0xFFFFFFFFFFFFFF8));
  }
  if (v8 >= v11)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    return 0;
  }
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v8, (v10 & 0xC000000000000001) == 0);
  if ((v10 & 0xC000000000000001) != 0) {
    id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v12 = *(id *)(v10 + 8 * v8 + 32);
  }
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  id v14 = [v13 relationship];

  if (!v14) {
    return 0;
  }
  unint64_t v15 = ParameterResolutionRecord.intent.getter();
  uint64_t v16 = (void *)ParameterResolutionRecord.result.getter();
  id v32 = (void *)v15;
  id v33 = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (INAddCallParticipantIntent, INIntentResolutionResult));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (INAddCallParticipantIntent, INAddCallParticipantParticipantResolutionResult));
  if ((swift_dynamicCast() & 1) == 0)
  {

    id v14 = v32;
    goto LABEL_22;
  }

  id v17 = v31;
  id v18 = (char *)[v31 unsupportedReason];

  id v19 = v32;
  if (v18 != (unsigned char *)&dword_0 + 1)
  {
LABEL_22:

    return 0;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.siriPhone);
  Swift::String v21 = v14;
  uint64_t v22 = Logger.logObject.getter();
  id v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v22, v23))
  {
    id v24 = swift_slowAlloc();
    id v32 = (void *)swift_slowAlloc();
    *(_DWORD *)id v24 = 136315650;
    unint64_t v30 = (id)type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INAddCallParticipantIntent);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INAddCallParticipantIntent.Type);
    os_log_type_t v25 = String.init<A>(describing:)();
    unint64_t v30 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, (uint64_t *)&v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 12) = 2080;
    unint64_t v30 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000013, 0x8000000000493DD0, (uint64_t *)&v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 22) = 2080;
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v30 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, (uint64_t *)&v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v22, v23, "#ParameterResolutionRecord<%s> %s Found unsetRelationship = %s", (uint8_t *)v24, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 1;
}

uint64_t outlined bridged method (pb) of @objc INStartCallIntent.contacts.getter(void *a1, SEL *a2, unint64_t *a3)
{
  id v4 = [a1 *a2];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  type metadata accessor for CNContactStore(0, a3);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v6;
}

uint64_t outlined bridged method (pb) of @objc INStartCallIntent.contacts.getter(void *a1)
{
  return outlined bridged method (pb) of @objc INStartCallIntent.contacts.getter(a1, (SEL *)&selRef_contacts, (unint64_t *)&lazy cache variable for type metadata for INPerson);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeUnsupportedValueOutput(resolveRecord:) in conformance CallingIntentUnsupportedValueFlowStrategy<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 296)
                                                + **(int **)(**(void **)v2 + 296));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = UnsupportedFlowCATs.deleteVoicemail();
  return v8(a1, a2);
}

uint64_t CallingIntentUnsupportedValueFlowStrategy.makeUnsupportedValueOutput(resolveRecord:)()
{
  OUTLINED_FUNCTION_1_0();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  return v0();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  NSObject *v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  *(void *)(v3 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_6_0();
    return v10();
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_1_0();
  v1[4] = v2;
  v1[5] = v0;
  v1[3] = v3;
  OUTLINED_FUNCTION_2();
  v1[6] = v4;
  uint64_t v5 = type metadata accessor for PhoneError();
  v1[7] = v5;
  OUTLINED_FUNCTION_11_0(v5);
  v1[8] = OUTLINED_FUNCTION_35();
  uint64_t v6 = type metadata accessor for ParameterIdentifier();
  v1[9] = v6;
  OUTLINED_FUNCTION_19_0(v6);
  v1[10] = v7;
  v1[11] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  void (*v1)(void);
  void *v2;
  uint64_t v3;
  void *v4;
  char v5;
  int *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;

  OUTLINED_FUNCTION_48();
  swift_getAssociatedTypeWitness();
  OUTLINED_FUNCTION_94_2();
  ParameterResolutionRecord.parameter.getter();
  ParameterIdentifier.name.getter();
  OUTLINED_FUNCTION_85_3();
  OUTLINED_FUNCTION_38();
  OUTLINED_FUNCTION_26_0();
  v1();
  uint64_t v2 = (void *)ParameterResolutionRecord.result.getter();
  uint64_t v3 = OUTLINED_FUNCTION_61();
  uint64_t v5 = CallingIntentUnsupportedValueFlowStrategy.shouldEnableFeatureOnResponseFramework(parameterName:intentResolutionResult:)(v3, v4);

  swift_bridgeObjectRelease();
  if (v5)
  {
    uint64_t v6 = *(int **)(**(void **)(v0 + 40) + 312);
    uint64_t v13 = (uint64_t (*)(uint64_t))((char *)v6 + *v6);
    swift_task_alloc();
    OUTLINED_FUNCTION_31_2();
    *(void *)(v0 + 96) = v7;
    *char v7 = v8;
    v7[1] = CallingIntentUnsupportedValueFlowStrategy.makeUnsupportedValueOutput(resolveRecord:);
    uint64_t v9 = OUTLINED_FUNCTION_53_7();
    return v13(v9);
  }
  else
  {
    swift_task_alloc();
    OUTLINED_FUNCTION_31_2();
    *(void *)(v0 + 112) = v11;
    *uint64_t v11 = v12;
    v11[1] = CallingIntentUnsupportedValueFlowStrategy.makeUnsupportedValueOutput(resolveRecord:);
    OUTLINED_FUNCTION_53_7();
    return CallingIntentUnsupportedValueFlowStrategy.makeUnsupportedValueTemplatingResultOutput(resolveRecord:)();
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_21_21();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v5)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_16_1();
  v0[2] = v0[13];
  swift_errorRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {
    uint64_t v1 = v0[8];
    if (swift_getEnumCaseMultiPayload() == 4)
    {
      swift_errorRelease();
      _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_2(v1, (void (*)(void))type metadata accessor for PhoneError);
      swift_task_alloc();
      OUTLINED_FUNCTION_31_2();
      v0[15] = v2;
      *uint64_t v2 = v3;
      v2[1] = CallingIntentUnsupportedValueFlowStrategy.makeUnsupportedValueOutput(resolveRecord:);
      OUTLINED_FUNCTION_53_7();
      return CallingIntentUnsupportedValueFlowStrategy.makeUnsupportedValueTemplatingResultOutput(resolveRecord:)();
    }
    _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_2(v1, (void (*)(void))type metadata accessor for PhoneError);
  }
  swift_errorRelease();
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v5();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  id v4 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v5 = v4;
  *(void *)(v6 + 128) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v0();
}

uint64_t CallingIntentUnsupportedValueFlowStrategy.shouldEnableFeatureOnResponseFramework(parameterName:intentResolutionResult:)(uint64_t a1, void *a2)
{
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = a1;
  v4._object = a2;
  if (PhoneCallSlotNames.init(rawValue:)(v4).value == PhoneCallFlowDelegatePlugin_PhoneCallSlotNames_preferredCallProvider)
  {
    if ([self supportsDisplayingFaceTimeVideoCalls]) {
      return 0;
    }
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.siriPhone);
    char v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_0, v7, v8, "#CallingIntentUnsupportedValueFlowStrategy shouldEnableFeatureOnResponseFramework: this device has more likely FaceTime restriction based on region. Returning unsupported call capability RF dialog..", v9, 2u);
      OUTLINED_FUNCTION_6();
    }
  }
  return 1;
}

uint64_t CallingIntentUnsupportedValueFlowStrategy.makeUnsupportedValueRFOutput(resolveRecord:)()
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  void *v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  v3[27] = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    unint64_t v10 = (void *)v3[24];
    uint64_t v11 = (void *)v3[23];
    swift_release();

    OUTLINED_FUNCTION_84_3();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_6_0();
    return v12();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t (*v11)(void);
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  void *v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  *(void *)(v3 + 248) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    unint64_t v10 = *(void **)(v3 + 224);

    OUTLINED_FUNCTION_84_3();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_6_0();
    return v11();
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_1_0();
  v1[4] = v2;
  v1[5] = v0;
  v1[3] = v3;
  Swift::String v4 = type metadata accessor for PhoneError();
  v1[6] = v4;
  OUTLINED_FUNCTION_11_0(v4);
  v1[7] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_86_2();
  OUTLINED_FUNCTION_86_2();
  swift_getAssociatedTypeWitness();
  uint64_t v5 = OUTLINED_FUNCTION_94_2();
  v1[8] = v5;
  OUTLINED_FUNCTION_19_0(v5);
  v1[9] = v6;
  v1[10] = OUTLINED_FUNCTION_35();
  uint64_t v7 = type metadata accessor for ParameterIdentifier();
  v1[11] = v7;
  OUTLINED_FUNCTION_19_0(v7);
  v1[12] = v8;
  v1[13] = OUTLINED_FUNCTION_28_2();
  v1[14] = swift_task_alloc();
  v1[15] = swift_task_alloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = *(void **)(v0 + 224);

  OUTLINED_FUNCTION_56_8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_20_2();
  return v3(v2, v3, v4, v5, v6, v7, v8, v9);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_21_21();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = *(void **)(v0 + 192);
  uint64_t v2 = *(void **)(v0 + 184);
  swift_release();

  OUTLINED_FUNCTION_56_8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_20_2();
  return v4(v3, v4, v5, v6, v7, v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_56_8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_20_2();
  return v1(v0, v1, v2, v3, v4, v5, v6, v7);
}

uint64_t CallingIntentUnsupportedValueFlowStrategy.makeUnsupportedValueRFOutput(resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint8_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30)
{
  OUTLINED_FUNCTION_81_2();
  a29 = v31;
  a30 = v32;
  a28 = v30;
  uint64_t v33 = v30[12];
  ParameterResolutionRecord.parameter.getter();
  uint64_t v34 = ParameterIdentifier.name.getter();
  id v36 = v35;
  uint64_t v37 = *(void (**)(void))(v33 + 8);
  OUTLINED_FUNCTION_38();
  OUTLINED_FUNCTION_26();
  v37();
  v38._uint64_t countAndFlagsBits = v34;
  v38._object = v36;
  switch(PhoneCallSlotNames.init(rawValue:)(v38).value)
  {
    case PhoneCallFlowDelegatePlugin_PhoneCallSlotNames_preferredCallProvider:
      uint64_t v44 = (void *)swift_task_alloc();
      v30[22] = v44;
      *uint64_t v44 = v30;
      v44[1] = CallingIntentUnsupportedValueFlowStrategy.makeUnsupportedValueRFOutput(resolveRecord:);
      OUTLINED_FUNCTION_53_7();
      OUTLINED_FUNCTION_28_3();
      uint64_t result = CallingIntentUnsupportedValueFlowStrategy.makePreferredCallProviderUnsupportedValueOutput(resolveRecord:)();
      break;
    case PhoneCallFlowDelegatePlugin_PhoneCallSlotNames_contact:
    case PhoneCallFlowDelegatePlugin_PhoneCallSlotNames_contacts:
      v30[16] = ParameterResolutionRecord.app.getter();
      v30[17] = ParameterResolutionRecord.intent.getter();
      ParameterResolutionRecord.parameter.getter();
      ParameterIdentifier.name.getter();
      v30[18] = v39;
      OUTLINED_FUNCTION_26();
      v37();
      ParameterResolutionRecord.parameter.getter();
      ParameterIdentifier.multicardinalIndex.getter();
      OUTLINED_FUNCTION_26();
      v37();
      v30[19] = ParameterResolutionRecord.result.getter();
      swift_task_alloc();
      OUTLINED_FUNCTION_31_2();
      v30[20] = v40;
      *uint64_t v40 = v41;
      v40[1] = CallingIntentUnsupportedValueFlowStrategy.makeUnsupportedValueRFOutput(resolveRecord:);
      OUTLINED_FUNCTION_28_3();
      uint64_t result = CallingIntentUnsupportedValueFlowStrategy.makeContactUnsupportedValueOutput(app:intent:parameterName:multicardinalValueIndex:intentResolutionResult:)();
      break;
    case PhoneCallFlowDelegatePlugin_PhoneCallSlotNames_callCapability:
      v30[23] = ParameterResolutionRecord.intent.getter();
      v30[24] = ParameterResolutionRecord.result.getter();
      v30[25] = ParameterResolutionRecord.app.getter();
      swift_task_alloc();
      OUTLINED_FUNCTION_31_2();
      v30[26] = v59;
      *uint64_t v59 = v60;
      v59[1] = CallingIntentUnsupportedValueFlowStrategy.makeUnsupportedValueRFOutput(resolveRecord:);
      OUTLINED_FUNCTION_98_2();
      OUTLINED_FUNCTION_28_3();
      uint64_t result = CallingIntentUnsupportedValueFlowStrategy.makeCallCapabilityUnsupportedValueOutput(intent:intentResolutionResult:app:)();
      break;
    case PhoneCallFlowDelegatePlugin_PhoneCallSlotNames_callRecordToCallBack:
      v30[28] = ParameterResolutionRecord.intent.getter();
      v30[29] = ParameterResolutionRecord.result.getter();
      uint64_t v62 = swift_task_alloc();
      uint64_t v63 = (void *)OUTLINED_FUNCTION_70_2(v62);
      *uint64_t v63 = v64;
      v63[1] = CallingIntentUnsupportedValueFlowStrategy.makeUnsupportedValueRFOutput(resolveRecord:);
      OUTLINED_FUNCTION_98_2();
      OUTLINED_FUNCTION_28_3();
      uint64_t result = CallingIntentUnsupportedValueFlowStrategy.makeContactsNoCallHistoryForRedialUnsupportedValueOutput(intent:intentResolutionResult:)();
      break;
    default:
      uint64_t v83 = v37;
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v47 = v30[9];
      uint64_t v46 = v30[10];
      uint64_t v48 = v30[8];
      uint64_t v49 = v30[4];
      uint64_t v50 = type metadata accessor for Logger();
      __swift_project_value_buffer(v50, (uint64_t)static Logger.siriPhone);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(v46, v49, v48);
      uint64_t v51 = Logger.logObject.getter();
      os_log_type_t v52 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v51, v52))
      {
        a13 = v30[11];
        a14 = v30 + 2;
        a11 = v30[10];
        a12 = v30[8];
        uint64_t v53 = (uint8_t *)OUTLINED_FUNCTION_47();
        a15 = OUTLINED_FUNCTION_14_0();
        a17 = a15;
        *(_DWORD *)uint64_t v53 = 136315138;
        a10 = v53 + 4;
        ParameterResolutionRecord.parameter.getter();
        uint64_t v54 = ParameterIdentifier.name.getter();
        unint64_t v56 = v55;
        OUTLINED_FUNCTION_26();
        v57();
        void v30[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v56, &a17);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_5_30();
        v58();
        _os_log_impl(&dword_0, v51, v52, "#CallingIntentUnsupportedValueFlowStrategy makeUnsupportedValueOutput: the corresponding dialog for Slot %s hasn't been migrated to Response Framework.", v53, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_6();
        OUTLINED_FUNCTION_6();
      }
      else
      {
        (*(void (**)(void, void))(v30[9] + 8))(v30[10], v30[8]);
      }

      uint64_t v66 = (void *)v30[7];
      a17 = 0;
      a18 = 0xE000000000000000;
      _StringGuts.grow(_:)(20);
      swift_bridgeObjectRelease();
      a17 = 0xD000000000000012;
      a18 = 0x8000000000494B20;
      ParameterResolutionRecord.parameter.getter();
      ParameterIdentifier.name.getter();
      OUTLINED_FUNCTION_85_3();
      OUTLINED_FUNCTION_78_2();
      OUTLINED_FUNCTION_26();
      v67();
      v68._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_61();
      String.append(_:)(v68);
      swift_bridgeObjectRelease();
      unint64_t v69 = a18;
      *uint64_t v66 = a17;
      v66[1] = v69;
      OUTLINED_FUNCTION_134();
      v66[2] = v70;
      void v66[3] = v71;
      OUTLINED_FUNCTION_134();
      v66[4] = v72;
      v66[5] = v73;
      v66[6] = 124;
      OUTLINED_FUNCTION_38();
      swift_storeEnumTagMultiPayload();
      _s27PhoneCallFlowDelegatePlugin0A5ErrorOACs0F0AAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError, (void (*)(uint64_t))type metadata accessor for PhoneError);
      swift_allocError();
      PhoneError.logged()(v74);
      _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_2((uint64_t)v66, (void (*)(void))type metadata accessor for PhoneError);
      swift_willThrow();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      OUTLINED_FUNCTION_28_3();
      uint64_t result = v76(v75, v76, v77, v78, v79, v80, v81, v82, a9, a10, a11, a12, a13, a14, a15, v83, a17, a18, a19,
                 a20,
                 a21,
                 a22);
      break;
  }
  return result;
}

uint64_t CallingIntentUnsupportedValueFlowStrategy.makeUnsupportedValueRFOutput(resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_40_10();
  uint64_t v14 = v13;
  OUTLINED_FUNCTION_4_2();
  *unint64_t v15 = v14;
  *unint64_t v15 = *v12;
  *(void *)(v14 + 168) = v11;
  swift_task_dealloc();
  uint64_t v16 = *(void **)(v10 + 152);
  id v17 = *(void **)(v10 + 136);
  if (v11)
  {

    swift_bridgeObjectRelease();
    swift_release();
    OUTLINED_FUNCTION_11_1();
    OUTLINED_FUNCTION_31_1();
    return _swift_task_switch(v18, v19, v20);
  }
  else
  {
    swift_bridgeObjectRelease();

    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_31_1();
    return v23(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10);
  }
}

uint64_t CallingIntentUnsupportedValueFlowStrategy.makeContactUnsupportedValueOutput(app:intent:parameterName:multicardinalValueIndex:intentResolutionResult:)()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v8 = v7;
  *(void *)(v5 + 976) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 984) = v3;
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  void *v12;
  uint64_t v13;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v21)(uint64_t, void, void, unint64_t, unint64_t, uint64_t);
  void *v22;
  uint64_t v23;

  uint64_t v1 = v0[113];
  uint64_t v22 = (void *)v0[109];
  uint64_t v21 = (void (*)(uint64_t, void, void, unint64_t, unint64_t, uint64_t))v0[105];
  uint64_t v2 = (void *)v0[93];
  uint64_t v3 = v0[92];
  uint64_t v4 = v0[85];
  uint64_t v5 = v0[82];
  uint64_t v6 = dispatch thunk of LabelExecutionResult.subscript.getter();
  uint64_t v8 = v7;
  swift_release();
  ButtonConfigurationModel.init(label:url:)(v6, v8, v2);
  outlined init with copy of ButtonConfigurationModel((uint64_t)v2, v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ButtonConfigurationModel>);
  uint64_t v9 = OUTLINED_FUNCTION_47_2();
  *(_OWORD *)(v9 + 16) = xmmword_467710;
  outlined init with take of ButtonConfigurationModel(v3, v9 + v1);
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v21(v5, 0, 0, 0xD000000000000020, 0x8000000000494D20, 1);
  uint64_t v10 = OUTLINED_FUNCTION_2_57((void *)(v4 + 24));
  v11(v10);
  id v12 = (void *)OUTLINED_FUNCTION_20_7();
  __swift_project_boxed_opaque_existential_1(v12, v13);
  v0[66] = type metadata accessor for PhoneSnippetDataModels();
  v0[67] = _s27PhoneCallFlowDelegatePlugin0A5ErrorOACs0F0AAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels and conformance PhoneSnippetDataModels, (void (*)(uint64_t))type metadata accessor for PhoneSnippetDataModels);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 63);
  uint64_t *boxed_opaque_existential_1 = v9;
  *((unsigned char *)boxed_opaque_existential_1 + 8) = 1;
  swift_storeEnumTagMultiPayload();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  unint64_t v15 = OUTLINED_FUNCTION_93();
  *(_OWORD *)(v15 + 16) = xmmword_46A030;
  *(void *)(v15 + 32) = v22;
  id v23 = v15;
  specialized Array._endMutation()();
  v0[114] = v23;
  uint64_t v16 = v22;
  swift_task_alloc();
  OUTLINED_FUNCTION_31_2();
  v0[115] = (uint64_t)v17;
  *id v17 = v18;
  v17[1] = CallingIntentUnsupportedValueFlowStrategy.makeContactUnsupportedValueOutput(app:intent:parameterName:multicardinalValueIndex:intentResolutionResult:);
  OUTLINED_FUNCTION_95_2();
  OUTLINED_FUNCTION_39();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  v2[73] = v1;
  v2[74] = v4;
  v2[75] = v0;
  OUTLINED_FUNCTION_44_11();
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  *(void *)(v7 + 1168) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 504;
  OUTLINED_FUNCTION_44_11();
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v3);
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 872) = v4;
  *(void *)(v2 + 880) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v8 = v7;
  *(void *)(v5 + 936) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 944) = v3;
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_40_0();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v1;
  *(void *)(v5 + 1048) = v0;
  swift_task_dealloc();
  uint64_t v7 = *(void *)(v4 + 712);
  if (!v0) {
    *(void *)(v5 + 1056) = v3;
  }
  outlined destroy of UsoBuilderOptions?(v7, &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_31_1();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  OUTLINED_FUNCTION_1_0();
  v1[85] = v0;
  v1[84] = v2;
  v1[83] = v3;
  v1[82] = v4;
  v1[81] = v5;
  v1[80] = v6;
  OUTLINED_FUNCTION_2();
  v1[86] = v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallNLv3Intent?);
  OUTLINED_FUNCTION_11_0(v8);
  v1[87] = OUTLINED_FUNCTION_35();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v9);
  v1[88] = OUTLINED_FUNCTION_28_2();
  v1[89] = swift_task_alloc();
  v1[90] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for ButtonConfigurationModel();
  OUTLINED_FUNCTION_19_0(v10);
  v1[91] = v11;
  v1[92] = OUTLINED_FUNCTION_28_2();
  v1[93] = swift_task_alloc();
  id v12 = type metadata accessor for Locale();
  v1[94] = v12;
  OUTLINED_FUNCTION_19_0(v12);
  v1[95] = v13;
  v1[96] = OUTLINED_FUNCTION_28_2();
  v1[97] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for OutputGenerationManifest();
  v1[98] = v14;
  OUTLINED_FUNCTION_19_0(v14);
  v1[99] = v15;
  v1[100] = OUTLINED_FUNCTION_28_2();
  v1[101] = swift_task_alloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v16, v17, v18);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v8 = v7;
  *(void *)(v5 + 896) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 904) = v3;
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  v2[76] = v1;
  v2[77] = v4;
  v2[78] = v0;
  OUTLINED_FUNCTION_44_11();
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  *(void *)(v7 + 1192) = v0;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v8 = v7;
  *(void *)(v5 + 1088) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 1096) = v3;
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v8 = v7;
  *(void *)(v5 + 1128) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 1136) = v3;
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_16_1();
  uint64_t v1 = (void *)(class metadata base offset for PhoneCallDisplayTextCATsSimple
                + **(void **)(*(void *)(v0 + 680) + 176)
                + 264);
  uint64_t v13 = *v1 + *(int *)*v1;
  uint64_t v14 = (uint64_t)v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 888) = v2;
  *uint64_t v2 = v0;
  v2[1] = CallingIntentUnsupportedValueFlowStrategy.makeContactUnsupportedValueOutput(app:intent:parameterName:multicardinalValueIndex:intentResolutionResult:);
  OUTLINED_FUNCTION_46_1((uint64_t)v2, v3, v4, v5, v6, v7, v8, v9, v12, v13, v14);
  return v10();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t CallingIntentUnsupportedValueFlowStrategy.makeContactUnsupportedValueOutput(app:intent:parameterName:multicardinalValueIndex:intentResolutionResult:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_30_12();

  swift_release();
  uint64_t v15 = OUTLINED_FUNCTION_24_21();
  v16(v15);
  OUTLINED_FUNCTION_3_49();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_22_15();
  OUTLINED_FUNCTION_28_1();
  return v18(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10, a11, a12, a13, a14);
}

{
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void (*v17)(void);
  uint64_t v18;
  uint64_t (*v19)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_30_12();
  uint64_t v15 = *(void **)(v14 + 1024);
  uint64_t v16 = *(void *)(v14 + 720);
  swift_release();

  swift_release();
  outlined destroy of UsoBuilderOptions?(v16, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_66_1();
  v17();
  OUTLINED_FUNCTION_3_49();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_22_15();
  OUTLINED_FUNCTION_28_1();
  return v19(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10, a11, a12, a13, a14);
}

{
  uint64_t v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  uint64_t (*v17)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_30_12();
  uint64_t v14 = OUTLINED_FUNCTION_19_23();
  v15(v14);
  OUTLINED_FUNCTION_3_49();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_22_15();
  OUTLINED_FUNCTION_28_1();
  return v17(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10, a11, a12, a13, a14);
}

{
  uint64_t v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  uint64_t (*v17)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_30_12();
  uint64_t v14 = OUTLINED_FUNCTION_19_23();
  v15(v14);
  OUTLINED_FUNCTION_3_49();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_22_15();
  OUTLINED_FUNCTION_28_1();
  return v17(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10, a11, a12, a13, a14);
}

{
  uint64_t v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  uint64_t (*v17)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_30_12();
  uint64_t v14 = OUTLINED_FUNCTION_19_23();
  v15(v14);
  OUTLINED_FUNCTION_3_49();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_22_15();
  OUTLINED_FUNCTION_28_1();
  return v17(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10, a11, a12, a13, a14);
}

{
  uint64_t v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  uint64_t (*v17)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_30_12();
  uint64_t v14 = OUTLINED_FUNCTION_19_23();
  v15(v14);
  OUTLINED_FUNCTION_3_49();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_22_15();
  OUTLINED_FUNCTION_28_1();
  return v17(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10, a11, a12, a13, a14);
}

{
  uint64_t v14;
  uint64_t v15;
  void (*v16)(void);
  uint64_t v17;
  uint64_t (*v18)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_30_12();
  uint64_t v15 = *(void *)(v14 + 704);
  swift_release();
  outlined destroy of UsoBuilderOptions?(v15, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_3_23();
  v16();
  OUTLINED_FUNCTION_3_49();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_22_15();
  OUTLINED_FUNCTION_28_1();
  return v18(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10, a11, a12, a13, a14);
}

{
  uint64_t v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  uint64_t (*v17)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_30_12();
  uint64_t v14 = OUTLINED_FUNCTION_19_23();
  v15(v14);
  OUTLINED_FUNCTION_3_49();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_22_15();
  OUTLINED_FUNCTION_28_1();
  return v17(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10, a11, a12, a13, a14);
}

{
  uint64_t v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  uint64_t (*v17)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_30_12();
  swift_release();
  uint64_t v14 = OUTLINED_FUNCTION_79_2();
  v15(v14);
  OUTLINED_FUNCTION_3_49();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_22_15();
  OUTLINED_FUNCTION_28_1();
  return v17(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10, a11, a12, a13, a14);
}

void CallingIntentUnsupportedValueFlowStrategy.makeContactUnsupportedValueOutput(app:intent:parameterName:multicardinalValueIndex:intentResolutionResult:)()
{
  uint64_t v1 = *(void *)(v0 + 688);
  uint64_t v2 = *(void *)(v0 + 656);
  uint64_t v3 = *(void *)(v1 + 272);
  *(void *)(v0 + 816) = v3;
  *(void *)(v0 + 824) = *(void *)(v1 + 264);
  swift_getAssociatedTypeWitness();
  OUTLINED_FUNCTION_38();
  uint64_t v179 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v4 = *(void *)(v179 + 8);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
  uint64_t v6 = swift_checkMetadataState();
  uint64_t v174 = v4 + 8;
  if (v5(v6, v4))
  {
    OUTLINED_FUNCTION_81_3();
    uint64_t v3 = v8 ? _CocoaArrayWrapper.endIndex.getter() : *(void *)(v7 + 16);
    swift_bridgeObjectRelease();
    if (v3)
    {
      uint64_t v9 = OUTLINED_FUNCTION_68_0();
      if (((uint64_t (*)(uint64_t))v5)(v9))
      {
        OUTLINED_FUNCTION_81_3();
        if (v11) {
          uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
        }
        else {
          uint64_t v12 = *(void *)(v10 + 16);
        }
        uint64_t v13 = *(void *)(v0 + 664);
        if (v12 > v13 && (v13 & 0x8000000000000000) == 0)
        {
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v13, (v2 & 0xC000000000000001) == 0, v2);
          if ((v2 & 0xC000000000000001) == 0)
          {
            uint64_t v14 = *(void **)(v2 + 8 * *(void *)(v0 + 664) + 32);
LABEL_18:
            id v18 = v14;
LABEL_19:
            uint64_t v19 = v18;
            swift_bridgeObjectRelease();
LABEL_24:
            uint64_t v172 = v5;
            *(void *)(v0 + 832) = v19;
            uint64_t v20 = *(void **)(v0 + 672);
            uint64_t v21 = **(void **)(v0 + 680) + 256;
            *(void *)(v0 + 840) = *(void *)v21;
            *(void *)(v0 + 848) = v21 & 0xFFFFFFFFFFFFLL | 0xF4C9000000000000;
            OUTLINED_FUNCTION_42_10();
            v22();
            id v23 = [v20 unsupportedReason];
            if (one-time initialization token for siriPhone != -1) {
              swift_once();
            }
            uint64_t v24 = *(void **)(v0 + 672);
            uint64_t v25 = type metadata accessor for Logger();
            __swift_project_value_buffer(v25, (uint64_t)static Logger.siriPhone);
            id v26 = v24;
            uint64_t v27 = Logger.logObject.getter();
            os_log_type_t v28 = static os_log_type_t.debug.getter();
            BOOL v29 = os_log_type_enabled(v27, v28);
            unint64_t v30 = *(void **)(v0 + 672);
            if (v29)
            {
              uint64_t v170 = (uint64_t)v23;
              uint64_t v177 = v4;
              uint64_t v31 = (uint8_t *)OUTLINED_FUNCTION_47();
              *(_DWORD *)uint64_t v31 = 134217984;
              uint64_t v24 = v31 + 12;
              *(void *)(v0 + 632) = [v30 unsupportedReason];
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              _os_log_impl(&dword_0, v27, v28, "#CallingIntentUnsupportedValueFlowStrategy making contact unsupported value output for unsupported reason %ld", v31, 0xCu);
              uint64_t v4 = v177;
              OUTLINED_FUNCTION_6();
            }
            else
            {
            }
            if ((id)_INStartCallContactUnsupportedReasonForeignEmergencyDisambiguation == v23)
            {
              uint64_t v32 = Logger.logObject.getter();
              os_log_type_t v33 = static os_log_type_t.debug.getter();
              if (os_log_type_enabled(v32, v33))
              {
                uint64_t v34 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)uint64_t v34 = 0;
                _os_log_impl(&dword_0, v32, v33, "#CallingIntentUnsupportedValueFlowStrategy: contact unsupported value output for foreign emergency disambiguation", v34, 2u);
                OUTLINED_FUNCTION_6();
              }

              type metadata accessor for EmptyOutput();
              static EmptyOutput.instance.getter();
              uint64_t v35 = OUTLINED_FUNCTION_27_14();
              v36(v35);

              OUTLINED_FUNCTION_6_41();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              OUTLINED_FUNCTION_6_0();
              OUTLINED_FUNCTION_2_49();
              __asm { BRAA            X1, X16 }
            }
            switch((unint64_t)v23)
            {
              case 2uLL:
                OUTLINED_FUNCTION_60_5();
                uint64_t v180 = *(void *)(class metadata base offset for StartCallCATsSimple + v39 + 832)
                     + **(int **)(class metadata base offset for StartCallCATsSimple + v39 + 832);
                uint64_t v185 = class metadata base offset for StartCallCATsSimple + v39 + 832;
                uint64_t v40 = (void *)swift_task_alloc();
                *(void *)(v0 + 928) = v40;
                *uint64_t v40 = v0;
                v40[1] = CallingIntentUnsupportedValueFlowStrategy.makeContactUnsupportedValueOutput(app:intent:parameterName:multicardinalValueIndex:intentResolutionResult:);
                OUTLINED_FUNCTION_76_2((uint64_t)v40, v41, v42, v43, v44, v45, v46, v47, v168, v169, v170, (uint64_t)v172, v174, v177, v180, v185);
                OUTLINED_FUNCTION_2_49();
                __asm { BRAA            X1, X16 }
                return;
              case 3uLL:
                uint64_t v63 = *(void *)(v0 + 656);
                type metadata accessor for PhoneStartCallIntent(0);
                uint64_t v64 = specialized static PhoneStartCallIntent.makeForSlotTemplating(intent:isRelationshipRequest:)(v63, 0);
                *(void *)(v0 + 1008) = v64;
                if (v19
                  && (id v65 = [v19 personHandle]) != 0
                  && (uint64_t v66 = v65,
                      id v67 = [v65 label],
                      v66,
                      v67)
                  && (static String._unconditionallyBridgeFromObjectiveC(_:)(), uint64_t v69 = v68, v67, v69))
                {
                  uint64_t v24 = *(void **)(v0 + 720);
                  swift_bridgeObjectRetain();
                  OUTLINED_FUNCTION_83_1();
                  uint64_t v70 = type metadata accessor for SpeakableString();
                  OUTLINED_FUNCTION_48_8(v70);
                }
                else
                {
                  uint64_t v114 = type metadata accessor for SpeakableString();
                  OUTLINED_FUNCTION_92_2(v114);
                }
                uint64_t v115 = *(void *)(v64 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneStartCallIntent_contacts);
                if (!v115) {
                  goto LABEL_102;
                }
                unint64_t v116 = *(void *)(v115 + 24);
                if (v116 >> 62)
                {
                  OUTLINED_FUNCTION_57_6();
                  if (_CocoaArrayWrapper.endIndex.getter())
                  {
LABEL_75:
                    uint64_t v118 = OUTLINED_FUNCTION_102_1();
                    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v118, v119, v120);
                    if (!v24)
                    {
                      swift_retain();
LABEL_77:
                      swift_bridgeObjectRelease();
                      uint64_t v121 = DialogPerson.personHandle.getter();
                      swift_release();
                      goto LABEL_103;
                    }
LABEL_113:
                    specialized _ArrayBuffer._getElementSlowPath(_:)();
                    goto LABEL_77;
                  }
                }
                else
                {
                  uint64_t v117 = *(void *)((char *)&dword_10 + (v116 & 0xFFFFFFFFFFFFFF8));
                  swift_bridgeObjectRetain();
                  if (v117) {
                    goto LABEL_75;
                  }
                }
                swift_bridgeObjectRelease();
LABEL_102:
                uint64_t v121 = 0;
LABEL_103:
                *(void *)(v0 + 1016) = v121;
                if (INPersonContainingIntent.hasSiriMatches.getter())
                {
                  if (v19)
                  {
                    id v147 = [v19 siriMatches];
                    if (v147)
                    {
                      uint64_t v148 = v147;
                      type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INPerson);
                      unint64_t v149 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

                      if (v149 >> 62)
                      {
                        OUTLINED_FUNCTION_57_6();
                        uint64_t v152 = _CocoaArrayWrapper.endIndex.getter();
                        swift_bridgeObjectRelease();
                        if (v152) {
                          goto LABEL_108;
                        }
                      }
                      else if (*(void *)((char *)&dword_10 + (v149 & 0xFFFFFFFFFFFFFF8)))
                      {
LABEL_108:
                        OUTLINED_FUNCTION_103_0();
                        uint64_t v19 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
                        uint64_t v150 = v6;
                        swift_bridgeObjectRelease();
                        goto LABEL_117;
                      }
                      uint64_t v150 = v6;
                      swift_bridgeObjectRelease();
                    }
                    else
                    {
                      uint64_t v150 = v6;
                    }
                    uint64_t v19 = 0;
                  }
                  else
                  {
                    uint64_t v150 = v6;
                  }
                }
                else
                {
                  uint64_t v150 = v6;
                  id v151 = v19;
                }
LABEL_117:
                *(void *)(v0 + 1024) = v19;
                uint64_t v153 = *(void *)(v179 + 16);
                uint64_t v154 = *(uint64_t (**)(uint64_t, uint64_t))(v153 + 8);
                swift_retain();
                uint64_t v176 = v19;
                if (!v154(v150, v153))
                {
LABEL_128:
                  uint64_t v160 = *(void *)(v0 + 768);
                  uint64_t v161 = *(void *)(v0 + 712);
                  SpeakableString.init(print:speak:)();
                  uint64_t v162 = type metadata accessor for SpeakableString();
                  __swift_storeEnumTagSinglePayload(v161, 0, 1, v162);
                  type metadata accessor for PhonePerson(0);
                  char ContactRelatedOr = INPersonContainingIntent.isFirstContactRelatedOrMyself.getter();
                  static Device.current.getter();
                  __swift_project_boxed_opaque_existential_1((void *)(v0 + 304), *(void *)(v0 + 328));
                  dispatch thunk of DeviceState.siriLocale.getter();
                  __swift_destroy_boxed_opaque_existential_1(v0 + 304);
                  *(void *)(v0 + 1032) = static PhonePerson.make(phonePerson:options:locale:)(v176, ContactRelatedOr & 1, v160);
                  OUTLINED_FUNCTION_26_0();
                  v164();
                  uint64_t v165 = (void *)swift_task_alloc();
                  *(void *)(v0 + 1040) = v165;
                  *uint64_t v165 = v0;
                  v165[1] = CallingIntentUnsupportedValueFlowStrategy.makeContactUnsupportedValueOutput(app:intent:parameterName:multicardinalValueIndex:intentResolutionResult:);
                  OUTLINED_FUNCTION_2_49();
                  __asm { BRAA            X6, X16 }
                }
                uint64_t v155 = INPreferredCallProviderGetBackingType();
                if (v155 == 4)
                {
                  v156 = @"THIRD_PARTY_PROVIDER";
                  uint64_t v157 = @"THIRD_PARTY_PROVIDER";
                }
                else
                {
                  if (v155 == 3)
                  {
                    v156 = @"FACETIME_PROVIDER";
                  }
                  else
                  {
                    if (v155 != 2)
                    {
                      v156 = +[NSString stringWithFormat:@"(unknown: %i)", v155];
                      goto LABEL_127;
                    }
                    v156 = @"TELEPHONY_PROVIDER";
                  }
                  uint64_t v158 = v156;
                }
LABEL_127:
                id v159 = v156;
                static String._unconditionallyBridgeFromObjectiveC(_:)();

                goto LABEL_128;
              case 4uLL:
                unint64_t v71 = v172(v6, v4);
                if (!v71) {
                  goto LABEL_97;
                }
                if (v71 >> 62)
                {
                  unint64_t v73 = v71;
                  swift_bridgeObjectRetain();
                  uint64_t v72 = _CocoaArrayWrapper.endIndex.getter();
                  if (!v72) {
                    goto LABEL_96;
                  }
                }
                else
                {
                  uint64_t v72 = *(void *)((char *)&dword_10 + (v71 & 0xFFFFFFFFFFFFFF8));
                  unint64_t v73 = v71;
                  swift_bridgeObjectRetain();
                  if (!v72) {
                    goto LABEL_96;
                  }
                }
                uint64_t v179 = type metadata accessor for PhonePerson(0);
                if (v72 < 1)
                {
                  __break(1u);
                  goto LABEL_113;
                }
                uint64_t v74 = 0;
                uint64_t v75 = (void *)(v0 + 544);
                do
                {
                  if ((v73 & 0xC000000000000001) != 0) {
                    id v76 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                  }
                  else {
                    id v76 = *(id *)(v73 + 8 * v74 + 32);
                  }
                  uint64_t v77 = v76;
                  uint64_t v78 = *(void *)(v0 + 776);
                  static Device.current.getter();
                  __swift_project_boxed_opaque_existential_1(v75, *(void *)(v0 + 568));
                  dispatch thunk of DeviceState.siriLocale.getter();
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
                  uint64_t v79 = static PhonePerson.make(phonePerson:options:locale:)(v77, 0, v78);
                  OUTLINED_FUNCTION_3_23();
                  v80();

                  if (v79)
                  {
                    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                    if (*(void *)((char *)&dword_10
                                   + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >> 1)
                      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                    specialized Array._endMutation()();
                  }
                  ++v74;
                }
                while (v72 != v74);
LABEL_96:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
LABEL_97:
                type metadata accessor for PhonePersonList();
                *(void *)(v0 + 856) = PhonePersonList.__allocating_init(list:)((uint64_t)_swiftEmptyArrayStorage);
                uint64_t v144 = (void *)swift_task_alloc();
                *(void *)(v0 + 864) = v144;
                *uint64_t v144 = v0;
                v144[1] = CallingIntentUnsupportedValueFlowStrategy.makeContactUnsupportedValueOutput(app:intent:parameterName:multicardinalValueIndex:intentResolutionResult:);
                OUTLINED_FUNCTION_2_49();
                __asm { BRAA            X2, X16 }
                return;
              case 5uLL:
                OUTLINED_FUNCTION_60_5();
                uint64_t v182 = *(void *)(class metadata base offset for StartCallCATsSimple + v81 + 928)
                     + **(int **)(class metadata base offset for StartCallCATsSimple + v81 + 928);
                uint64_t v187 = class metadata base offset for StartCallCATsSimple + v81 + 928;
                uint64_t v82 = (void *)swift_task_alloc();
                *(void *)(v0 + 1120) = v82;
                *uint64_t v82 = v0;
                v82[1] = CallingIntentUnsupportedValueFlowStrategy.makeContactUnsupportedValueOutput(app:intent:parameterName:multicardinalValueIndex:intentResolutionResult:);
                OUTLINED_FUNCTION_76_2((uint64_t)v82, v83, v84, v85, v86, v87, v88, v89, v168, v169, v170, (uint64_t)v172, v174, v177, v182, v187);
                OUTLINED_FUNCTION_2_49();
                __asm { BRAA            X1, X16 }
                return;
              case 6uLL:
                OUTLINED_FUNCTION_60_5();
                uint64_t v183 = *(void *)(class metadata base offset for StartCallCATsSimple + v92 + 848)
                     + **(int **)(class metadata base offset for StartCallCATsSimple + v92 + 848);
                uint64_t v188 = class metadata base offset for StartCallCATsSimple + v92 + 848;
                uint64_t v93 = (void *)swift_task_alloc();
                *(void *)(v0 + 968) = v93;
                *uint64_t v93 = v0;
                v93[1] = CallingIntentUnsupportedValueFlowStrategy.makeContactUnsupportedValueOutput(app:intent:parameterName:multicardinalValueIndex:intentResolutionResult:);
                OUTLINED_FUNCTION_76_2((uint64_t)v93, v94, v95, v96, v97, v98, v99, v100, v168, v169, v170, (uint64_t)v172, v174, v177, v183, v188);
                OUTLINED_FUNCTION_2_49();
                __asm { BRAA            X1, X16 }
                return;
              case 7uLL:
                OUTLINED_FUNCTION_60_5();
                uint64_t v184 = *(void *)(class metadata base offset for StartCallCATsSimple + v103 + 912)
                     + **(int **)(class metadata base offset for StartCallCATsSimple + v103 + 912);
                uint64_t v189 = class metadata base offset for StartCallCATsSimple + v103 + 912;
                uint64_t v104 = (void *)swift_task_alloc();
                *(void *)(v0 + 1080) = v104;
                *uint64_t v104 = v0;
                v104[1] = CallingIntentUnsupportedValueFlowStrategy.makeContactUnsupportedValueOutput(app:intent:parameterName:multicardinalValueIndex:intentResolutionResult:);
                OUTLINED_FUNCTION_76_2((uint64_t)v104, v105, v106, v107, v108, v109, v110, v111, v168, v169, v170, (uint64_t)v172, v174, v177, v184, v189);
                OUTLINED_FUNCTION_2_49();
                __asm { BRAA            X1, X16 }
                return;
              default:
                type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INIntentResponse);
                static ContactsSlotTemplating.isMissingMeCardCase(intent:)();
                uint64_t v50 = *(void **)(v0 + 680);
                if (v51)
                {
                  os_log_type_t v52 = (void *)(class metadata base offset for StartCallCATsSimple
                                 + **(void **)((char *)v50
                                               + direct field offset for CallingIntentUnsupportedValueFlowStrategy.startCallCatsSimple)
                                 + 880);
                  uint64_t v181 = *v52 + *(int *)*v52;
                  uint64_t v186 = (uint64_t)v52;
                  uint64_t v53 = (void *)swift_task_alloc();
                  *(void *)(v0 + 1160) = v53;
                  void *v53 = v0;
                  v53[1] = CallingIntentUnsupportedValueFlowStrategy.makeContactUnsupportedValueOutput(app:intent:parameterName:multicardinalValueIndex:intentResolutionResult:);
                  OUTLINED_FUNCTION_76_2((uint64_t)v53, v54, v55, v56, v57, v58, v59, v60, v168, v169, v170, (uint64_t)v172, v174, v177, v181, v186);
                  OUTLINED_FUNCTION_2_49();
                  __asm { BRAA            X1, X16 }
                }
                Swift::String v173 = (void *)(v0 + 104);
                App.isFirstParty()();
                uint64_t v122 = v50[6];
                uint64_t v123 = v50[7];
                __swift_project_boxed_opaque_existential_1(v50 + 3, v122);
                uint64_t v124 = (*(uint64_t (**)(uint64_t, uint64_t))(v123 + 72))(v122, v123);
                (*(void (**)(uint64_t))(*(void *)v124 + 152))(v124);
                swift_release();
                uint64_t v178 = (void *)(v0 + 144);
                if (*(void *)(v0 + 48) == 1)
                {
                  outlined destroy of UsoBuilderOptions?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for TransformationResult?);
                  *(_OWORD *)(v0 + 64) = 0u;
                  *(_OWORD *)(v0 + 80) = 0u;
                  *(void *)(v0 + 96) = 0;
                }
                else
                {
                  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(v0 + 24, v0 + 64, &demangling cache variable for type metadata for PhoneCallNLIntent?);
                  outlined destroy of TransformationResult(v0 + 16);
                  if (*(void *)(v0 + 88))
                  {
                    uint64_t v125 = *(void *)(v0 + 696);
                    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
                    uint64_t v126 = type metadata accessor for PhoneCallNLv3Intent(0);
                    int v127 = swift_dynamicCast();
                    __swift_storeEnumTagSinglePayload(v125, v127 ^ 1u, 1, v126);
                    if (__swift_getEnumTagSinglePayload(v125, 1, v126) != 1)
                    {
                      outlined destroy of UsoBuilderOptions?(*(void *)(v0 + 696), &demangling cache variable for type metadata for PhoneCallNLv3Intent?);
                      if (v19)
                      {
                        id v128 = v19;
                        id v175 = INPerson.nameLowercasedWithFirstUppercased.getter();
                      }
                      else
                      {
                        id v175 = 0;
                      }
                      goto LABEL_86;
                    }
LABEL_85:
                    outlined destroy of UsoBuilderOptions?(*(void *)(v0 + 696), &demangling cache variable for type metadata for PhoneCallNLv3Intent?);
                    id v130 = v19;
                    id v175 = v19;
LABEL_86:
                    uint64_t v131 = *(void *)(v0 + 776);
                    id v132 = *(void **)(v0 + 680);
                    uint64_t v171 = *(void *)(v0 + 648);
                    type metadata accessor for PhonePerson(0);
                    static Device.current.getter();
                    __swift_project_boxed_opaque_existential_1(v173, *(void *)(v0 + 128));
                    OUTLINED_FUNCTION_20_7();
                    dispatch thunk of DeviceState.siriLocale.getter();
                    __swift_destroy_boxed_opaque_existential_1((uint64_t)v173);
                    *(void *)(v0 + 1176) = static PhonePerson.make(phonePerson:options:locale:)(v175, 0, v131);

                    OUTLINED_FUNCTION_61();
                    OUTLINED_FUNCTION_5_30();
                    v133();
                    uint64_t v134 = v132[41];
                    uint64_t v135 = v132[42];
                    __swift_project_boxed_opaque_existential_1(v132 + 38, v134);
                    (*(void (**)(void))(*v132 + 208))();
                    __swift_project_boxed_opaque_existential_1(v178, *(void *)(v0 + 168));
                    dispatch thunk of DeviceState.siriLocale.getter();
                    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v135 + 16))(v171, v131, v134, v135);
                    uint64_t v137 = v136;
                    OUTLINED_FUNCTION_61();
                    OUTLINED_FUNCTION_5_30();
                    v138();
                    __swift_destroy_boxed_opaque_existential_1((uint64_t)v178);
                    if (v137)
                    {
                      swift_bridgeObjectRetain();
                      OUTLINED_FUNCTION_83_1();
                      uint64_t v139 = type metadata accessor for SpeakableString();
                      OUTLINED_FUNCTION_48_8(v139);
                    }
                    else
                    {
                      uint64_t v140 = type metadata accessor for SpeakableString();
                      OUTLINED_FUNCTION_93_3(v140);
                    }
                    OUTLINED_FUNCTION_60_5();
                    swift_retain();
                    unint64_t v141 = (void *)swift_task_alloc();
                    *(void *)(v0 + 1184) = v141;
                    *unint64_t v141 = v0;
                    v141[1] = CallingIntentUnsupportedValueFlowStrategy.makeContactUnsupportedValueOutput(app:intent:parameterName:multicardinalValueIndex:intentResolutionResult:);
                    OUTLINED_FUNCTION_2_49();
                    __asm { BRAA            X4, X16 }
                  }
                }
                outlined destroy of UsoBuilderOptions?(v0 + 64, &demangling cache variable for type metadata for PhoneCallNLIntent?);
                uint64_t v129 = type metadata accessor for PhoneCallNLv3Intent(0);
                OUTLINED_FUNCTION_92_2(v129);
                goto LABEL_85;
            }
          }
          goto LABEL_93;
        }
        swift_bridgeObjectRelease();
      }
    }
  }
  uint64_t v15 = OUTLINED_FUNCTION_68_0();
  if (((uint64_t (*)(uint64_t))v5)(v15))
  {
    OUTLINED_FUNCTION_81_3();
    if (v17)
    {
      if (_CocoaArrayWrapper.endIndex.getter())
      {
LABEL_16:
        OUTLINED_FUNCTION_103_0();
        if (!v3)
        {
          uint64_t v14 = *(void **)(v2 + 32);
          goto LABEL_18;
        }
LABEL_93:
        id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        goto LABEL_19;
      }
    }
    else if (*(void *)(v16 + 16))
    {
      goto LABEL_16;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v19 = 0;
  goto LABEL_24;
}

uint64_t CallingIntentUnsupportedValueFlowStrategy.makeContactUnsupportedValueOutput(app:intent:parameterName:multicardinalValueIndex:intentResolutionResult:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_40_0();
  uint64_t v11 = (void *)v10[132];
  uint64_t v12 = OUTLINED_FUNCTION_2_57((void *)(v10[85] + 24));
  v13(v12);
  OUTLINED_FUNCTION_13_22();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v14 = (__n128 *)OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_16_5(v14, (__n128)xmmword_46A030);
  v10[133] = a10;
  id v15 = v11;
  swift_task_alloc();
  OUTLINED_FUNCTION_31_2();
  v10[134] = v16;
  *uint64_t v16 = v17;
  v16[1] = CallingIntentUnsupportedValueFlowStrategy.makeContactUnsupportedValueOutput(app:intent:parameterName:multicardinalValueIndex:intentResolutionResult:);
  OUTLINED_FUNCTION_10_29();
  OUTLINED_FUNCTION_30_2();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10);
}

{
  void *v10;
  void *v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  __n128 *v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_40_0();
  uint64_t v11 = (void *)v10[118];
  uint64_t v12 = OUTLINED_FUNCTION_2_57((void *)(v10[85] + 24));
  v13(v12);
  OUTLINED_FUNCTION_13_22();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v14 = (__n128 *)OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_16_5(v14, (__n128)xmmword_46A030);
  v10[119] = a10;
  id v15 = v11;
  swift_task_alloc();
  OUTLINED_FUNCTION_31_2();
  v10[120] = v16;
  *uint64_t v16 = v17;
  v16[1] = CallingIntentUnsupportedValueFlowStrategy.makeContactUnsupportedValueOutput(app:intent:parameterName:multicardinalValueIndex:intentResolutionResult:);
  OUTLINED_FUNCTION_10_29();
  OUTLINED_FUNCTION_30_2();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10);
}

{
  void *v10;
  void *v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  __n128 *v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_40_0();
  uint64_t v11 = (void *)v10[123];
  uint64_t v12 = OUTLINED_FUNCTION_2_57((void *)(v10[85] + 24));
  v13(v12);
  OUTLINED_FUNCTION_13_22();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v14 = (__n128 *)OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_16_5(v14, (__n128)xmmword_46A030);
  v10[124] = a10;
  id v15 = v11;
  swift_task_alloc();
  OUTLINED_FUNCTION_31_2();
  v10[125] = v16;
  *uint64_t v16 = v17;
  v16[1] = CallingIntentUnsupportedValueFlowStrategy.makeContactUnsupportedValueOutput(app:intent:parameterName:multicardinalValueIndex:intentResolutionResult:);
  OUTLINED_FUNCTION_10_29();
  OUTLINED_FUNCTION_30_2();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10);
}

{
  void *v10;
  void *v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  __n128 *v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_40_0();
  uint64_t v11 = (void *)v10[142];
  uint64_t v12 = OUTLINED_FUNCTION_2_57((void *)(v10[85] + 24));
  v13(v12);
  OUTLINED_FUNCTION_13_22();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v14 = (__n128 *)OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_16_5(v14, (__n128)xmmword_46A030);
  v10[143] = a10;
  id v15 = v11;
  swift_task_alloc();
  OUTLINED_FUNCTION_31_2();
  v10[144] = v16;
  *uint64_t v16 = v17;
  v16[1] = CallingIntentUnsupportedValueFlowStrategy.makeContactUnsupportedValueOutput(app:intent:parameterName:multicardinalValueIndex:intentResolutionResult:);
  OUTLINED_FUNCTION_10_29();
  OUTLINED_FUNCTION_30_2();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10);
}

{
  void *v10;
  void *v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  __n128 *v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_40_0();
  uint64_t v11 = (void *)v10[137];
  uint64_t v12 = OUTLINED_FUNCTION_2_57((void *)(v10[85] + 24));
  v13(v12);
  OUTLINED_FUNCTION_13_22();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v14 = (__n128 *)OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_16_5(v14, (__n128)xmmword_46A030);
  v10[138] = a10;
  id v15 = v11;
  swift_task_alloc();
  OUTLINED_FUNCTION_31_2();
  v10[139] = v16;
  *uint64_t v16 = v17;
  v16[1] = CallingIntentUnsupportedValueFlowStrategy.makeContactUnsupportedValueOutput(app:intent:parameterName:multicardinalValueIndex:intentResolutionResult:);
  OUTLINED_FUNCTION_10_29();
  OUTLINED_FUNCTION_30_2();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10);
}

{
  void *v10;
  void (*v11)(void);
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  __n128 *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_40_0();
  uint64_t v12 = v10[88];
  swift_release();
  outlined destroy of UsoBuilderOptions?(v12, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v13 = (void *)v10[77];
  OUTLINED_FUNCTION_52_8();
  OUTLINED_FUNCTION_42_10();
  v11();
  uint64_t v14 = OUTLINED_FUNCTION_2_57((void *)(v12 + 24));
  v15(v14);
  OUTLINED_FUNCTION_13_22();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v16 = (__n128 *)OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_89_4(v16, (__n128)xmmword_46A030);
  v10[151] = a9;
  uint64_t v17 = v13;
  uint64_t v18 = (void *)swift_task_alloc();
  v10[152] = v18;
  *uint64_t v18 = v10;
  v18[1] = CallingIntentUnsupportedValueFlowStrategy.makeContactUnsupportedValueOutput(app:intent:parameterName:multicardinalValueIndex:intentResolutionResult:);
  OUTLINED_FUNCTION_10_29();
  OUTLINED_FUNCTION_31_1();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10);
}

{
  uint64_t v10;
  void *v11;
  void (*v12)(void);
  void *v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  __n128 *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_40_0();
  uint64_t v13 = (void *)v11[74];
  OUTLINED_FUNCTION_52_8();
  OUTLINED_FUNCTION_42_10();
  v12();
  uint64_t v14 = OUTLINED_FUNCTION_2_57((void *)(v10 + 24));
  v15(v14);
  OUTLINED_FUNCTION_13_22();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v16 = (__n128 *)OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_89_4(v16, (__n128)xmmword_46A030);
  v11[151] = a9;
  uint64_t v17 = v13;
  uint64_t v18 = (void *)swift_task_alloc();
  v11[152] = v18;
  *uint64_t v18 = v11;
  v18[1] = CallingIntentUnsupportedValueFlowStrategy.makeContactUnsupportedValueOutput(app:intent:parameterName:multicardinalValueIndex:intentResolutionResult:);
  OUTLINED_FUNCTION_10_29();
  OUTLINED_FUNCTION_31_1();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10);
}

uint64_t CallingIntentUnsupportedValueFlowStrategy.makeContactUnsupportedValueOutput(app:intent:parameterName:multicardinalValueIndex:intentResolutionResult:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_19_13();
  OUTLINED_FUNCTION_48();
  uint64_t v13 = *(void **)(v12 + 1024);
  uint64_t v14 = *(void **)(v12 + 832);
  uint64_t v15 = *(void *)(v12 + 720);

  swift_release();
  swift_release();
  outlined destroy of UsoBuilderOptions?(v15, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_26();
  v16();
  __swift_destroy_boxed_opaque_existential_1(v12 + 344);

  OUTLINED_FUNCTION_6_41();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_4_3();
  return v18(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10, a11, a12);
}

{
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(void);
  uint64_t v17;
  uint64_t (*v18)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  OUTLINED_FUNCTION_19_13();
  OUTLINED_FUNCTION_48();
  uint64_t v13 = *(void **)(v12 + 832);
  uint64_t v14 = *(void *)(v12 + 792);
  uint64_t v15 = *(void *)(v12 + 744);

  swift_release();
  uint64_t v16 = *(void (**)(void))(v14 + 8);
  OUTLINED_FUNCTION_78_2();
  OUTLINED_FUNCTION_26_0();
  v16();
  _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_2(v15, (void (*)(void))type metadata accessor for ButtonConfigurationModel);
  OUTLINED_FUNCTION_26_0();
  v16();
  __swift_destroy_boxed_opaque_existential_1(v12 + 464);

  OUTLINED_FUNCTION_6_41();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_4_3();
  return v18(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10, a11, a12);
}

{
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  uint64_t (*v17)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  OUTLINED_FUNCTION_19_13();
  OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_39_11(*(void **)(v12 + 944));
  uint64_t v14 = OUTLINED_FUNCTION_27_14();
  v15(v14);
  __swift_destroy_boxed_opaque_existential_1(v12 + 424);

  OUTLINED_FUNCTION_6_41();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_4_3();
  return v17(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10, a11, a12);
}

{
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  uint64_t (*v17)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  OUTLINED_FUNCTION_19_13();
  OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_39_11(*(void **)(v12 + 984));
  uint64_t v14 = OUTLINED_FUNCTION_27_14();
  v15(v14);
  __swift_destroy_boxed_opaque_existential_1(v12 + 384);

  OUTLINED_FUNCTION_6_41();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_4_3();
  return v17(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10, a11, a12);
}

{
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void (*v15)(void);
  uint64_t v16;
  uint64_t (*v17)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  OUTLINED_FUNCTION_19_13();
  OUTLINED_FUNCTION_48();
  uint64_t v13 = *(void **)(v12 + 832);
  uint64_t v14 = *(void *)(v12 + 792);

  uint64_t v15 = *(void (**)(void))(v14 + 8);
  OUTLINED_FUNCTION_66_1();
  v15();
  OUTLINED_FUNCTION_66_1();
  v15();
  __swift_destroy_boxed_opaque_existential_1(v12 + 184);

  OUTLINED_FUNCTION_6_41();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_4_3();
  return v17(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10, a11, a12);
}

{
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  uint64_t (*v17)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  OUTLINED_FUNCTION_19_13();
  OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_39_11(*(void **)(v12 + 1096));
  uint64_t v14 = OUTLINED_FUNCTION_27_14();
  v15(v14);
  __swift_destroy_boxed_opaque_existential_1(v12 + 264);

  OUTLINED_FUNCTION_6_41();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_4_3();
  return v17(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10, a11, a12);
}

{
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  uint64_t (*v17)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  OUTLINED_FUNCTION_19_13();
  OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_39_11(*(void **)(v12 + 1136));
  uint64_t v14 = OUTLINED_FUNCTION_27_14();
  v15(v14);
  __swift_destroy_boxed_opaque_existential_1(v12 + 224);

  OUTLINED_FUNCTION_6_41();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_4_3();
  return v17(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10, a11, a12);
}

unint64_t type metadata accessor for DialogElement()
{
  unint64_t result = lazy cache variable for type metadata for DialogElement;
  if (!lazy cache variable for type metadata for DialogElement)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for DialogElement);
  }
  return result;
}

void static ContactsSlotTemplating.isMissingMeCardCase(intent:)()
{
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_11();
  unint64_t v1 = v0();
  unint64_t v2 = v1;
  if (!v1)
  {
    uint64_t v6 = 0;
    unint64_t v8 = 0;
LABEL_10:
    uint64_t v4 = 0;
    goto LABEL_11;
  }
  if (v1 >> 62)
  {
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  if (!*(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8)))
  {
LABEL_9:
    swift_bridgeObjectRelease();
    uint64_t v6 = 0;
    unint64_t v8 = 0;
    LODWORD(v2) = 0;
    goto LABEL_10;
  }
LABEL_4:
  OUTLINED_FUNCTION_8_38();
  if ((v2 & 0xC000000000000001) != 0) {
    id v3 = (id)OUTLINED_FUNCTION_28_8();
  }
  else {
    id v3 = *(id *)(v2 + 32);
  }
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  LODWORD(v2) = [v4 isMe];
  id v5 = [v4 displayName];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v8 = v7;

LABEL_11:
  specialized Optional<A>.isNilOrEmpty.getter(v6, v8);
  swift_bridgeObjectRelease();
  if (!v4)
  {
LABEL_15:
    uint64_t v10 = 0;
    goto LABEL_16;
  }
  id v9 = [v4 personHandle];
  uint64_t v10 = v9;
  if (v9)
  {
    id v11 = [v9 label];

    if (v11)
    {
      uint64_t v10 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v13 = v12;

      goto LABEL_17;
    }
    goto LABEL_15;
  }
LABEL_16:
  unint64_t v13 = 0;
LABEL_17:
  specialized Optional<A>.isNilOrEmpty.getter((uint64_t)v10, v13);
  swift_bridgeObjectRelease();
  if (v2) {
    INPersonContainingIntent.hasSiriMatches.getter();
  }

  OUTLINED_FUNCTION_26_1();
}

uint64_t storeEnumTagSinglePayload for PhoneCallNLv3Intent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_429E00);
}

uint64_t getEnumTagSinglePayload for PhoneCallNLv3Intent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_429DE8);
}

id INPerson.nameLowercasedWithFirstUppercased.getter()
{
  OUTLINED_FUNCTION_24_0();
  id v71 = v1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  uint64_t v7 = OUTLINED_FUNCTION_11_0(v6);
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_5_8();
  uint64_t v68 = v8;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v9);
  uint64_t v69 = (char *)v67 - v10;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v11);
  uint64_t v70 = (uint64_t)v67 - v12;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_29_19();
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_23_21();
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_17_21();
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)v67 - v18;
  __chkstk_darwin(v17);
  OUTLINED_FUNCTION_71_4();
  __chkstk_darwin(v20);
  OUTLINED_FUNCTION_39_12();
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)v67 - v22;
  id v24 = [v71 displayName];
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v27 = v26;

  uint64_t v72 = v25;
  uint64_t v73 = v27;
  v67[1] = lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.capitalized.getter();
  swift_bridgeObjectRelease();
  NSString v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v71 setDisplayName:v28];

  id v29 = [v71 nameComponents];
  if (v29)
  {
    unint64_t v30 = v29;
    static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

    type metadata accessor for PersonNameComponents();
    uint64_t v31 = v2;
    uint64_t v32 = 0;
  }
  else
  {
    type metadata accessor for PersonNameComponents();
    uint64_t v31 = v2;
    uint64_t v32 = 1;
  }
  OUTLINED_FUNCTION_36_17(v31, v32);
  outlined init with take of AnnotatedApp?(v2, (uint64_t)v23, &demangling cache variable for type metadata for PersonNameComponents?);
  type metadata accessor for PersonNameComponents();
  if (OUTLINED_FUNCTION_35_18((uint64_t)v23))
  {
    _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0((uint64_t)v23, v3, &demangling cache variable for type metadata for PersonNameComponents?);
    OUTLINED_FUNCTION_27_17(v3);
    if (v33)
    {
      Class isa = 0;
    }
    else
    {
      Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_28_17();
      v38();
    }
    OUTLINED_FUNCTION_32_13();

    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v23, &demangling cache variable for type metadata for PersonNameComponents?);
    id v39 = v71;
    uint64_t v40 = &selRef_setBundleId_;
  }
  else
  {
    id v34 = [v71 nameComponents];
    if (v34)
    {
      uint64_t v35 = v34;
      static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v36 = 0;
    }
    else
    {
      uint64_t v36 = 1;
    }
    OUTLINED_FUNCTION_36_17(v4, v36);
    outlined init with take of AnnotatedApp?(v4, (uint64_t)v19, &demangling cache variable for type metadata for PersonNameComponents?);
    if (OUTLINED_FUNCTION_35_18((uint64_t)v19) || (uint64_t v41 = PersonNameComponents.givenName.getter(), !v42))
    {
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v19, &demangling cache variable for type metadata for PersonNameComponents?);
    }
    else
    {
      uint64_t v43 = v41;
      uint64_t v44 = v42;
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v19, &demangling cache variable for type metadata for PersonNameComponents?);
      uint64_t v72 = v43;
      uint64_t v73 = v44;
      StringProtocol.capitalized.getter();
      swift_bridgeObjectRelease();
    }
    OUTLINED_FUNCTION_52_10();
    PersonNameComponents.givenName.setter();
    OUTLINED_FUNCTION_27_17((uint64_t)v23);
    uint64_t v40 = &selRef_setBundleId_;
    if (v33)
    {
      Class v45 = 0;
    }
    else
    {
      Class v45 = PersonNameComponents._bridgeToObjectiveC()().super.isa;
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_28_17();
      v46();
    }
    OUTLINED_FUNCTION_32_13();

    id v39 = v71;
  }
  id v47 = [v39 v40[5]];
  if (v47)
  {
    uint64_t v48 = v47;
    static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v49 = 0;
  }
  else
  {
    uint64_t v49 = 1;
  }
  OUTLINED_FUNCTION_36_17(v5, v49);
  outlined init with take of AnnotatedApp?(v5, v0, &demangling cache variable for type metadata for PersonNameComponents?);
  if (OUTLINED_FUNCTION_35_18(v0))
  {
    uint64_t v50 = v70;
    _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(v0, v70, &demangling cache variable for type metadata for PersonNameComponents?);
    OUTLINED_FUNCTION_27_17(v50);
    if (v33)
    {
      Class v56 = 0;
    }
    else
    {
      Class v56 = PersonNameComponents._bridgeToObjectiveC()().super.isa;
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_28_17();
      v57();
    }
    OUTLINED_FUNCTION_32_13();

    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v0, &demangling cache variable for type metadata for PersonNameComponents?);
  }
  else
  {
    id v51 = [v71 v40[5]];
    if (v51)
    {
      os_log_type_t v52 = v51;
      uint64_t v53 = v68;
      static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v54 = 0;
    }
    else
    {
      uint64_t v54 = 1;
      uint64_t v53 = v68;
    }
    uint64_t v55 = (uint64_t)v69;
    OUTLINED_FUNCTION_36_17(v53, v54);
    outlined init with take of AnnotatedApp?(v53, v55, &demangling cache variable for type metadata for PersonNameComponents?);
    if (OUTLINED_FUNCTION_35_18(v55) || (uint64_t v58 = PersonNameComponents.familyName.getter(), !v59))
    {
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v55, &demangling cache variable for type metadata for PersonNameComponents?);
    }
    else
    {
      uint64_t v60 = v58;
      uint64_t v61 = v59;
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v55, &demangling cache variable for type metadata for PersonNameComponents?);
      uint64_t v72 = v60;
      uint64_t v73 = v61;
      StringProtocol.capitalized.getter();
      swift_bridgeObjectRelease();
    }
    OUTLINED_FUNCTION_52_10();
    PersonNameComponents.familyName.setter();
    OUTLINED_FUNCTION_27_17(v0);
    if (v33)
    {
      Class v62 = 0;
    }
    else
    {
      Class v62 = PersonNameComponents._bridgeToObjectiveC()().super.isa;
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_28_17();
      v63();
    }
    OUTLINED_FUNCTION_32_13();
  }
  OUTLINED_FUNCTION_26_1();
  return v64;
}

uint64_t outlined init with take of AnnotatedApp?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_15();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t outlined init with take of Date?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for PhonePerson(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for PhonePerson);
}

uint64_t static PhonePerson.make(phonePerson:options:locale:)(void *a1, char a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_0_0();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DialogPerson();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a3, v6);
  id v12 = a1;
  uint64_t v13 = DialogPerson.init(person:locale:isRelative:)(a1, (uint64_t)v11, a2 & 1);
  if (!v13) {
    return 0;
  }
  uint64_t v14 = v13;
  type metadata accessor for DialogPersonHandle();
  id v15 = [v12 personHandle];
  uint64_t v16 = static DialogPersonHandle.make(phoneHandle:locale:)(v15, a3);

  type metadata accessor for PhonePerson.Builder(0);
  swift_allocObject();
  DialogPerson.Builder.init()();
  specialized DialogPerson.copy<A>(to:)();
  swift_release();
  dispatch thunk of DialogPerson.Builder.withPersonHandle(_:)();
  swift_release();
  DialogPerson.Builder.applyOptions(_:)(a2);
  swift_release();
  uint64_t v17 = dispatch thunk of DialogPerson.Builder.build()();
  swift_release();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.siriPhone);
  swift_retain_n();
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    void v27[3] = v14;
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    uint64_t v28 = v17;
    uint64_t v29 = v22;
    *(_DWORD *)uint64_t v21 = 136315138;
    v27[1] = v21 + 4;
    type metadata accessor for PhonePerson(0);
    v27[2] = v16;
    lazy protocol witness table accessor for type PhonePerson and conformance DialogPerson();
    CATType.toDictionary.getter();
    uint64_t v23 = Dictionary.description.getter();
    unint64_t v25 = v24;
    swift_bridgeObjectRelease();
    uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v19, v20, "DialogPerson: %s", v21, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_release();
  }
  else
  {

    swift_release();
    swift_release_n();
  }
  swift_release();
  return v17;
}

uint64_t static DialogPersonHandle.make(phoneHandle:locale:)(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CharacterSet();
  uint64_t v51 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)v46 - v12;
  __chkstk_darwin(v11);
  id v15 = (char *)v46 - v14;
  uint64_t v16 = type metadata accessor for SpeakableString();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1) {
    return 0;
  }
  id v20 = a1;
  id v21 = (id)INIntentSlotValueTransformToContactHandle();
  if (!v21)
  {

    return 0;
  }
  id v48 = v21;
  id v22 = [v21 type];
  os_log_type_t v52 = v20;
  uint64_t v49 = v10;
  uint64_t v47 = a2;
  switch((int)v22)
  {
    case 0:
      uint64_t v23 = @"Unknown";
      goto LABEL_12;
    case 1:
      uint64_t v23 = @"EmailAddress";
      goto LABEL_12;
    case 2:
      uint64_t v23 = @"PhoneNumber";
      goto LABEL_12;
    case 3:
      uint64_t v23 = @"Website";
      goto LABEL_12;
    case 4:
      uint64_t v23 = @"InstantMessage";
LABEL_12:
      unint64_t v25 = v23;
      break;
    default:
      uint64_t v23 = +[NSString stringWithFormat:@"(unknown: %i)", v22];
      break;
  }
  uint64_t v26 = v23;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v50 = v19;
  SpeakableString.init(print:speak:)();
  uint64_t v27 = outlined bridged method (pb) of @objc INPersonHandle.value.getter(v52);
  if (v28)
  {
    uint64_t v29 = v27;
    unint64_t v30 = v28;
    uint64_t v31 = static CharacterSet.controlCharacters.getter();
    __chkstk_darwin(v31);
    unint64_t v44 = (unint64_t)v6;
    swift_bridgeObjectRetain();
    specialized RangeReplaceableCollection.filter(_:)((uint64_t (*)(void *))_sSS27PhoneCallFlowDelegatePluginE6remove10charactersSS10Foundation12CharacterSetV_tFSbs7UnicodeO6ScalarVXEfU_TA_0, (uint64_t)v43, v29, v30);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v6, v4);
    SpeakableString.init(print:speak:)();
    uint64_t v32 = 0;
  }
  else
  {
    uint64_t v32 = 1;
  }
  uint64_t v33 = 1;
  __swift_storeEnumTagSinglePayload((uint64_t)v15, v32, 1, v16);
  id v34 = v52;
  id v35 = [v52 label];
  if (v35)
  {
    uint64_t v36 = v35;
    static Signpost.begin(_:)();
    uint64_t v51 = v37;
    v46[1] = v38;
    uint64_t v57 = Locale.identifier.getter();
    uint64_t v58 = v39;
    uint64_t v55 = 45;
    unint64_t v56 = 0xE100000000000000;
    uint64_t v53 = 95;
    unint64_t v54 = 0xE100000000000000;
    unint64_t v44 = lazy protocol witness table accessor for type String and conformance String();
    unint64_t v45 = v44;
    v43[0] = &type metadata for String;
    v43[1] = v44;
    StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    swift_bridgeObjectRelease();
    static LabelMappingUtil.translateINPersonHandleLabel(_:languageCode:)();
    id v34 = v52;
    swift_bridgeObjectRelease();
    Signpost.OpenSignpost.end()();
    SpeakableString.init(print:speak:)();

    swift_release();
    uint64_t v33 = 0;
  }
  uint64_t v40 = v50;
  __swift_storeEnumTagSinglePayload((uint64_t)v13, v33, 1, v16);
  type metadata accessor for DialogPersonHandle.Builder();
  swift_allocObject();
  DialogPersonHandle.Builder.init()();
  uint64_t v41 = (uint64_t)v49;
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v49, v40, v16);
  __swift_storeEnumTagSinglePayload(v41, 0, 1, v16);
  dispatch thunk of DialogPersonHandle.Builder.withType(_:)();
  swift_release();
  outlined destroy of SpeakableString?(v41);
  dispatch thunk of DialogPersonHandle.Builder.withValue(_:)();
  swift_release();
  dispatch thunk of DialogPersonHandle.Builder.withLabel(_:)();
  swift_release();
  uint64_t v24 = dispatch thunk of DialogPersonHandle.Builder.build()();

  swift_release();
  outlined destroy of SpeakableString?((uint64_t)v13);
  outlined destroy of SpeakableString?((uint64_t)v15);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v40, v16);
  return v24;
}

uint64_t type metadata accessor for PhonePerson.Builder(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for PhonePerson.Builder);
}

uint64_t specialized DialogPerson.copy<A>(to:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  DialogPerson.givenName.getter();
  dispatch thunk of DialogPerson.Builder.withGivenName(_:)();
  outlined destroy of SpeakableString?((uint64_t)v2);
  DialogPerson.middleName.getter();
  dispatch thunk of DialogPerson.Builder.withMiddleName(_:)();
  swift_release();
  outlined destroy of SpeakableString?((uint64_t)v2);
  DialogPerson.familyName.getter();
  dispatch thunk of DialogPerson.Builder.withFamilyName(_:)();
  swift_release();
  outlined destroy of SpeakableString?((uint64_t)v2);
  DialogPerson.nickname.getter();
  dispatch thunk of DialogPerson.Builder.withNickname(_:)();
  swift_release();
  outlined destroy of SpeakableString?((uint64_t)v2);
  DialogPerson.fullNameFromInput.getter();
  dispatch thunk of DialogPerson.Builder.withFullName(_:)();
  swift_release();
  outlined destroy of SpeakableString?((uint64_t)v2);
  DialogPerson.pronoun.getter();
  dispatch thunk of DialogPerson.Builder.withPronoun(_:)();
  swift_release();
  swift_release();
  DialogPerson.company.getter();
  dispatch thunk of DialogPerson.Builder.withCompany(_:)();
  swift_release();
  outlined destroy of SpeakableString?((uint64_t)v2);
  DialogPerson.useConversationalName.getter();
  dispatch thunk of DialogPerson.Builder.withUseConversationalName(_:)();
  swift_release();
  DialogPerson.related.getter();
  dispatch thunk of DialogPerson.Builder.withRelated(_:)();
  swift_release();
  DialogPerson.personHandle.getter();
  dispatch thunk of DialogPerson.Builder.withPersonHandle(_:)();
  swift_release();
  swift_release();
  DialogPerson.friendlyPhoneNumberName.getter();
  dispatch thunk of DialogPerson.Builder.withFriendlyPhoneNumberName(_:)();
  swift_release();
  DialogPerson.friendlyPhoneNumberNameShort.getter();
  dispatch thunk of DialogPerson.Builder.withFriendlyPhoneNumberNameShort(_:)();
  swift_release();
  DialogPerson.relationship.getter();
  dispatch thunk of DialogPerson.Builder.withRelationship(_:)();
  swift_release();
  outlined destroy of SpeakableString?((uint64_t)v2);
  DialogPerson.useRelationshipName.getter();
  uint64_t v3 = dispatch thunk of DialogPerson.Builder.withUseRelationshipName(_:)();
  swift_release();
  return v3;
}

uint64_t DialogPerson.Builder.applyOptions(_:)(char a1)
{
  if (a1)
  {
    dispatch thunk of DialogPerson.Builder.withUseConversationalName(_:)();
    swift_release();
  }
  if ((a1 & 2) != 0)
  {
    dispatch thunk of DialogPerson.Builder.withFriendlyPhoneNumberNameShort(_:)();
    swift_release();
  }

  return swift_retain();
}

uint64_t PhonePerson.Builder.build()()
{
  return DialogPerson.init(builder:)();
}

uint64_t PhonePerson.Builder.__deallocating_deinit()
{
  DialogPerson.Builder.deinit();

  return swift_deallocClassInstance();
}

uint64_t CallingIntentBaseFlowStrategy.deviceState.getter()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7];
  __swift_project_boxed_opaque_existential_1(v0 + 3, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t protocol witness for AppInfoBuilding.getAppName(_:requestedLocale:) in conformance AppInfoBuilder()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))();
}

uint64_t AppInfoBuilder.getAppName(_:requestedLocale:)()
{
  type metadata accessor for AppInformationResolver();
  swift_allocObject();
  swift_retain();
  AppInformationResolver.init(app:)();
  uint64_t v0 = dispatch thunk of AppInformationResolver.getLocalizedAppDisplayName(inLocale:)();
  swift_release();
  return v0;
}

uint64_t protocol witness for StartCallCATPatternsExecuting.unsupportedContactsNoContactFound(isFirstPartyApp:_:) in conformance StartCallCATPatternsExecutor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(int **)(class metadata base offset for StartCallCATPatternsExecutor + **v3 + 216);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = StartCallCATPatternsExecutor.errorWithCodeScreenTimeRestrictionEnabled();
  return v11(a1, a2, a3);
}

uint64_t StartCallCATPatternsExecutor.unsupportedContactsNoContactFound(isFirstPartyApp:_:)()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v4 = OUTLINED_FUNCTION_56_2(v1, v2, v3);
  uint64_t v5 = type metadata accessor for StartCallUnsupportedContactsNoContactFoundParameters(v4);
  *(void *)(v0 + 40) = v5;
  OUTLINED_FUNCTION_11_0(v5);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_0_14();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v4 + 80) = v1;
  }
  OUTLINED_FUNCTION_7_27();
  OUTLINED_FUNCTION_20_2();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  uint64_t v2 = *(void *)(v0 + 40);
  char v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void (**)(uint64_t))(v0 + 16);
  uint64_t v4 = *(unsigned char *)(v0 + 88);
  uint64_t v5 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v5);
  *(void *)(v1 + *(int *)(v2 + 20)) = 0;
  *(unsigned char *)(v1 + *(int *)(v2 + 24)) = v4;
  uint64_t v6 = OUTLINED_FUNCTION_39_6();
  v3(v6);
  uint64_t v7 = StartCallUnsupportedContactsNoContactFoundParameters.asKeyValuePairs()();
  OUTLINED_FUNCTION_47_4(v7);
  uint64_t v8 = OUTLINED_FUNCTION_9_0();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_33(v8);
  *uint64_t v9 = v10;
  v9[1] = StartCallCATPatternsExecutor.unsupportedContactsNoContactFound(isFirstPartyApp:_:);
  OUTLINED_FUNCTION_74_1(43);
  OUTLINED_FUNCTION_20_2();
  return v14(v11, v12, v13, v14, v15, v16, v17, v18);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of StartCallConfirmContactsParameters();
  swift_task_dealloc();
  uint64_t v0 = OUTLINED_FUNCTION_4_31();
  return v1(v0);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of StartCallConfirmContactsParameters();
  swift_task_dealloc();
  OUTLINED_FUNCTION_13_0();
  return v0();
}

uint64_t type metadata accessor for StartCallUnsupportedContactsNoContactFoundParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for StartCallUnsupportedContactsNoContactFoundParameters);
}

uint64_t outlined assign with copy of SpeakableString?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t StartCallUnsupportedContactsNoContactFoundParameters.asKeyValuePairs()()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v3 = OUTLINED_FUNCTION_11_0(v2);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_12_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_46A250;
  OUTLINED_FUNCTION_36_8(v4);
  uint64_t v5 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_30_0(v1);
  if (v6)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_118();
  }
  else
  {
    *(void *)(v4 + 72) = v5;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v4 + 48));
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_99();
    v7();
  }
  *(void *)(v4 + 80) = 0x746361746E6F63;
  *(void *)(v4 + 88) = 0xE700000000000000;
  uint64_t v8 = type metadata accessor for StartCallUnsupportedContactsNoContactFoundParameters(0);
  uint64_t v9 = *(void *)(v0 + *(int *)(v8 + 20));
  if (v9)
  {
    type metadata accessor for DialogPerson();
  }
  else
  {
    *(void *)(v4 + 104) = 0;
    *(void *)(v4 + 112) = 0;
  }
  *(void *)(v4 + 96) = v9;
  OUTLINED_FUNCTION_132();
  *(void *)(v4 + 120) = v10;
  *(void *)(v4 + 128) = v11;
  OUTLINED_FUNCTION_142();
  *(void *)(v4 + 136) = v12;
  LOBYTE(v12) = *(unsigned char *)(v0 + *(int *)(v8 + 24));
  *(void *)(v4 + 168) = &type metadata for Bool;
  *(unsigned char *)(v4 + 144) = v12;
  swift_retain();
  return v4;
}

uint64_t OUTLINED_FUNCTION_109@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with take of SpeakableString?(a1, a2);
}

uint64_t OUTLINED_FUNCTION_75()
{
  return v0;
}

void *OUTLINED_FUNCTION_38_1@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  result[15] = a2;
  result[16] = 0x6953776F646E6977;
  result[17] = 0xEA0000000000657ALL;
  return result;
}

void OUTLINED_FUNCTION_109_1(uint64_t a1@<X8>)
{
  *(void *)(v1 + 328) = (a1 - 32) | 0x8000000000000000;
}

uint64_t OUTLINED_FUNCTION_59_0()
{
  return 0x656D697465636166;
}

uint64_t OUTLINED_FUNCTION_4_8()
{
  return swift_allocError();
}

uint64_t OUTLINED_FUNCTION_14_5()
{
  return swift_retain_n();
}

uint64_t OUTLINED_FUNCTION_142_0@<X0>(uint64_t *a1@<X2>, uint64_t a2@<X8>)
{
  return outlined init with copy of SpeakableString?(a2, v2, a1);
}

uint64_t OUTLINED_FUNCTION_142_1(uint64_t result)
{
  v2[6] = v1;
  v2[9] = result;
  v2[10] = 0xD000000000000010;
  return result;
}

uint64_t OUTLINED_FUNCTION_147(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

uint64_t INSearchCallHistoryIntentResponse.statusCode.getter()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_107_0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  v2[6] = a2;
  v2[9] = result;
  v2[10] = 0x436465776F6C6C61;
  v2[11] = 0xEF73746361746E6FLL;
  return result;
}

uint64_t OUTLINED_FUNCTION_107_1@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  v2[24] = a2;
  v2[27] = result;
  v2[28] = 0x5074737269467369;
  v2[29] = 0xEF70704179747261;
  return result;
}

uint64_t OUTLINED_FUNCTION_1_5()
{
  uint64_t v1 = v0[3];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return v1;
}

__n128 *OUTLINED_FUNCTION_107_2(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x6953776F646E6977;
  result[2].n128_u64[1] = 0xEA0000000000657ALL;
  return result;
}

void OUTLINED_FUNCTION_24_5(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, a2, v5, a4, v4, 0xCu);
}

void OUTLINED_FUNCTION_107_3(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t OUTLINED_FUNCTION_107_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_20_3(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

void *OUTLINED_FUNCTION_128(uint64_t a1, uint64_t a2, size_t a3)
{
  return memcpy(v3, v4, a3);
}

uint64_t OUTLINED_FUNCTION_128_1()
{
  return v0 + 8;
}

void OUTLINED_FUNCTION_170(uint64_t a1@<X8>)
{
  *(void *)(v3 + 232) = (v1 - 32) | 0x8000000000000000;
  *(void *)(v3 + 264) = a1;
  *(unsigned char *)(v3 + 240) = v2;
}

void OUTLINED_FUNCTION_128_2()
{
  *(unsigned char *)(v2 + 240) = v0;
  *(void *)(v2 + 264) = v1;
  *(void *)(v2 + 272) = 0x656D614E707061;
  *(void *)(v2 + 280) = 0xE700000000000000;
}

uint64_t OUTLINED_FUNCTION_128_3@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_128_5()
{
  return v0;
}

uint64_t outlined destroy of StartCallConfirmContactsParameters()
{
  uint64_t v1 = OUTLINED_FUNCTION_37_6();
  v2(v1);
  OUTLINED_FUNCTION_10();
  (*(void (**)(uint64_t))(v3 + 8))(v0);
  return v0;
}

uint64_t destroy for StartCallUnsupportedContactsNoContactFoundParameters(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SpeakableString();
  if (!__swift_getEnumTagSinglePayload(a1, 1, v2)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  }

  return swift_release();
}

uint64_t PhonePerson.__deallocating_deinit()
{
  DialogPerson.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeUpdatedIntentForUnsupportedValue(resolveRecord:) in conformance CallingIntentUnsupportedValueFlowStrategy<A>(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 368) + **(int **)(**(void **)v1 + 368));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return v6(a1);
}

uint64_t CallingIntentUnsupportedValueFlowStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)()
{
  uint64_t v53 = v0;
  if (CallingIntentUnsupportedValueFlowStrategy.shouldClearContactsSlot(resolveRecord:)())
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.siriPhone);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)OUTLINED_FUNCTION_47();
      unint64_t v52 = OUTLINED_FUNCTION_14_0();
      *(_DWORD *)uint64_t v4 = 136315138;
      v0[10] = OUTLINED_FUNCTION_47_9((uint64_t)"makeUpdatedIntentForUnsupportedValue(resolveRecord:)");
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_0, v2, v3, "#CallingIntentUnsupportedValueFlowStrategy %s: clearing contacts slot. We will prompt for a single contact.", v4, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }

    uint64_t v5 = (void *)ParameterResolutionRecord.intent.getter();
    v0[5] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
    v0[2] = _swiftEmptyArrayStorage;
    NSObject.update(with:at:)((uint64_t)(v0 + 2), 0x73746361746E6F63, 0xE800000000000000);

    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v6 = v0[23];
    uint64_t v7 = v0[20];
    uint64_t v8 = v0[21];
    uint64_t v9 = v0[11];
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.siriPhone);
    uint64_t v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
    v50(v6, v9, v7);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    BOOL v13 = os_log_type_enabled(v11, v12);
    uint64_t v14 = v0[21];
    if (v13)
    {
      uint64_t v15 = swift_slowAlloc();
      unint64_t v52 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315394;
      v0[8] = OUTLINED_FUNCTION_47_9((uint64_t)"makeUpdatedIntentForUnsupportedValue(resolveRecord:)");
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v15 + 12) = 2080;
      ParameterResolutionRecord.parameter.getter();
      uint64_t v16 = ParameterIdentifier.name.getter();
      unint64_t v18 = v17;
      OUTLINED_FUNCTION_66_1();
      v19();
      v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, (uint64_t *)&v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v49 = *(void (**)(void, void))(v14 + 8);
      OUTLINED_FUNCTION_3_23();
      v20();
      _os_log_impl(&dword_0, v11, v12, "#CallingIntentUnsupportedValueFlowStrategy %s: unsupported for %s", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {
      uint64_t v49 = *(void (**)(void, void))(v14 + 8);
      OUTLINED_FUNCTION_3_23();
      v21();
    }
    uint64_t v22 = v0[14];
    ParameterResolutionRecord.parameter.getter();
    uint64_t v23 = ParameterIdentifier.name.getter();
    unint64_t v25 = v24;
    uint64_t v26 = *(void (**)(uint64_t))(v22 + 8);
    uint64_t v27 = OUTLINED_FUNCTION_20_7();
    v26(v27);
    v28._uint64_t countAndFlagsBits = v23;
    v28._object = v25;
    if ((PhoneCallSlotNames.init(rawValue:)(v28).value & 0xFE) == 4)
    {
      *(void *)type = v0[19];
      ParameterResolutionRecord.parameter.getter();
      uint64_t v29 = ParameterIdentifier.multicardinalIndex.getter();
      char v31 = v30;
      uint64_t v32 = OUTLINED_FUNCTION_78_2();
      v26(v32);
      if (v31) {
        int64_t v33 = 0;
      }
      else {
        int64_t v33 = v29;
      }
      id v34 = (void *)ParameterResolutionRecord.intent.getter();
      uint64_t v35 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness() + 8) + 8);
      unint64_t v36 = (*(uint64_t (**)(os_log_type_t *, uint64_t))(v35 + 8))(*(os_log_type_t **)type, v35);

      if (!v36) {
        unint64_t v36 = (unint64_t)_swiftEmptyArrayStorage;
      }
      unint64_t v52 = v36;
      if (v36 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v37 = *(void *)((char *)&dword_10 + (v36 & 0xFFFFFFFFFFFFFF8));
      }
      if (v33 < v37)
      {

        unint64_t v36 = v52;
      }
      uint64_t v38 = v0[19];
      uint64_t v39 = (void *)ParameterResolutionRecord.intent.getter();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v35 + 16))(v36, v38, v35);
      swift_bridgeObjectRelease();
    }
    v50(v0[22], v0[11], v0[20]);
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = swift_slowAlloc();
      uint64_t v51 = (void *)swift_slowAlloc();
      unint64_t v52 = OUTLINED_FUNCTION_14_0();
      *(_DWORD *)uint64_t v42 = 136315394;
      v0[6] = OUTLINED_FUNCTION_47_9((uint64_t)"makeUpdatedIntentForUnsupportedValue(resolveRecord:)");
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v42 + 12) = 2112;
      uint64_t v43 = ParameterResolutionRecord.intent.getter();
      v0[7] = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v51 = v43;
      OUTLINED_FUNCTION_12_20();
      v44();
      _os_log_impl(&dword_0, v40, v41, "#CallingIntentUnsupportedValueFlowStrategy %s: updatedIntent = %@.", (uint8_t *)v42, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {
      v49(v0[22], v0[20]);
    }
  }
  uint64_t v45 = ParameterResolutionRecord.intent.getter();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v46 = (uint64_t (*)(uint64_t))v0[1];
  return v46(v45);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  v1[11] = v2;
  v1[12] = v0;
  os_log_type_t v3 = type metadata accessor for ParameterIdentifier();
  v1[13] = v3;
  OUTLINED_FUNCTION_19_0(v3);
  v1[14] = v4;
  v1[15] = swift_task_alloc();
  v1[16] = swift_task_alloc();
  OUTLINED_FUNCTION_86_2();
  v1[17] = *(void *)(v5 + 272);
  OUTLINED_FUNCTION_86_2();
  v1[18] = *(void *)(v6 + 264);
  v1[19] = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for ParameterResolutionRecord();
  v1[20] = v7;
  OUTLINED_FUNCTION_19_0(v7);
  v1[21] = v8;
  v1[22] = OUTLINED_FUNCTION_28_2();
  v1[23] = swift_task_alloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v9, v10, v11);
}

BOOL CallingIntentUnsupportedValueFlowStrategy.shouldClearContactsSlot(resolveRecord:)()
{
  swift_getAssociatedTypeWitness();
  OUTLINED_FUNCTION_94_2();
  uint64_t v0 = (void *)ParameterResolutionRecord.result.getter();
  self;
  uint64_t v1 = (void *)swift_dynamicCastObjCClass();
  if (v1)
  {
    uint64_t v2 = (char *)[v1 unsupportedReason];

    return v2 == (unsigned char *)&dword_0 + 2;
  }
  else
  {

    return 0;
  }
}

uint64_t specialized Array.remove(at:)(unint64_t a1)
{
  unint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v1 = v3;
  if (!result || (v3 & 0x8000000000000000) != 0 || (v3 & 0x4000000000000000) != 0)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    unint64_t v3 = result;
    unint64_t *v1 = result;
  }
  uint64_t v5 = v3 & 0xFFFFFFFFFFFFFF8;
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    unint64_t v8 = v6 - 1 - a1;
    uint64_t v9 = v5 + 8 * a1;
    uint64_t v10 = *(void *)(v9 + 32);
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v9 + 40, v8, v9 + 32);
    *(void *)(v5 + 16) = v7;
    specialized Array._endMutation()();
    return v10;
  }
  return result;
}

uint64_t static SignalValueObject.unsetValueInt.getter()
{
  return -1;
}

uint64_t OUTLINED_FUNCTION_36_2()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_64()
{
  return String.uppercased()()._countAndFlagsBits;
}

uint64_t OUTLINED_FUNCTION_17_0(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_64_0(uint64_t a1)
{
  return a1 - 8;
}

uint64_t OUTLINED_FUNCTION_64_1()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_16_5(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[2].n128_u64[0] = v2;
  return specialized Array._endMutation()();
}

uint64_t OUTLINED_FUNCTION_64_2()
{
  return 0x4C6F546472696874;
}

void OUTLINED_FUNCTION_91()
{
  *(void *)(v3 + 232) = (v1 - 32) | 0x8000000000000000;
  *(unsigned char *)(v3 + 240) = v0;
  *(void *)(v3 + 264) = v2;
  *(void *)(v3 + 272) = 0x636E657265666E69;
  *(void *)(v3 + 280) = 0xEF656372756F5365;
}

uint64_t OUTLINED_FUNCTION_19_5(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_64_4()
{
  return SimulateCrash();
}

void OUTLINED_FUNCTION_64_5()
{
  DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v2, v3, v0, v1);
}

uint64_t *OUTLINED_FUNCTION_64_7(uint64_t a1)
{
  *(void *)(v2 + 88) = a1;
  return __swift_allocate_boxed_opaque_existential_1(v1);
}

uint64_t OUTLINED_FUNCTION_64_8@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 81) = a1;
  return 0;
}

uint64_t OUTLINED_FUNCTION_64_9()
{
  uint64_t v3 = *(void *)(v1 - 72);
  *(void *)(v1 - 256) = v3;
  *(void *)(v0 + 120) = v3;
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_64_11(uint64_t a1, uint64_t a2)
{
  return specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, a2, v2);
}

uint64_t partial apply for specialized closure #1 in static PhoneCallFlowFactory.getGenericStartCallProducers<A>(delegate:app:)(uint64_t a1, uint64_t a2)
{
  return specialized closure #1 in static PhoneCallFlowFactory.getGenericStartCallProducers<A>(delegate:app:)(a1, a2, v2);
}

{
  uint64_t v2;

  return specialized closure #1 in static PhoneCallFlowFactory.getGenericStartCallProducers<A>(delegate:app:)(a1, a2, v2);
}

{
  uint64_t v2;

  return specialized closure #1 in static PhoneCallFlowFactory.getGenericStartCallProducers<A>(delegate:app:)(a1, a2, v2);
}

uint64_t specialized closure #1 in static PhoneCallFlowFactory.getGenericStartCallProducers<A>(delegate:app:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v44 = a3;
  uint64_t v45 = a2;
  uint64_t v47 = a1;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactNeedsValueGuardFlow<INStartVideoCallIntent>.FlowState);
  __chkstk_darwin(v39);
  uint64_t v40 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for ParameterIdentifier();
  uint64_t v4 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  unint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CATOption();
  __chkstk_darwin(v7 - 8);
  type metadata accessor for StartCallCATs();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v43 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for StartCallCATPatternsExecutor(0);
  static CATOption.defaultMode.getter();
  uint64_t v42 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for StartCallCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v41 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for PhoneCallCommonCATs();
  static CATOption.defaultMode.getter();
  uint64_t v8 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for PhoneCallCommonCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v9 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for PhoneCallCommonCATPatternsExecutor();
  static CATOption.defaultMode.getter();
  uint64_t v10 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for PhoneCallDisplayTextCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v11 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  uint64_t v12 = ResponseFactory.init()();
  static SiriKitEventSender.current.getter();
  type metadata accessor for AppInfoBuilder();
  uint64_t v13 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CallingIntentNeedsValueFlowStrategy<StartVideoCallRCHFlowDelegate>);
  uint64_t v14 = swift_allocObject();
  uint64_t v38 = v13;
  uint64_t v15 = v44;
  uint64_t v16 = v9;
  uint64_t v17 = v45;
  uint64_t v18 = specialized CallingIntentNeedsValueFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:startCallCATsSimple:phoneCallCommonCATs:phoneCallCommonCATsSimple:phoneCallCommonCatPatterns:phoneCallDisplayTextCATsSimple:responseGenerator:siriKitEventSender:appInfoBuilder:)(v44, v43, v42, v41, v8, v16, v10, v11, v12, v49, v38, v14, &direct field offset for StartVideoCallRCHFlowDelegate.sharedGlobals);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INStartVideoCallIntent>);
  ParameterResolutionRecord.parameter.getter();
  uint64_t v19 = ParameterIdentifier.name.getter();
  id v21 = v20;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v46);
  v22._uint64_t countAndFlagsBits = v19;
  v22._object = v21;
  if ((PhoneCallSlotNames.init(rawValue:)(v22).value & 0xFE) == 4)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.siriPhone);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl(&dword_0, v24, v25, "#PhoneCallFlowFactory Contact slot needs value. Wrapping needsValueStrategy in NeedsValueGuardFlow.", v26, 2u);
      swift_slowDealloc();
    }

    v49[0] = v18;
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type CallingIntentNeedsValueFlowStrategy<StartVideoCallRCHFlowDelegate> and conformance CallingIntentNeedsValueFlowStrategy<A>, &demangling cache variable for type metadata for CallingIntentNeedsValueFlowStrategy<StartVideoCallRCHFlowDelegate>);
    uint64_t v27 = (uint64_t (*)(uint64_t, uint64_t))static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)();
    uint64_t v28 = v27(v47, v17);
    swift_release();
    outlined init with copy of SignalProviding(v15 + direct field offset for StartVideoCallRCHFlowDelegate.sharedGlobals, (uint64_t)v49);
    uint64_t v29 = (uint64_t)v40;
    swift_storeEnumTagMultiPayload();
    outlined init with copy of SignalProviding((uint64_t)v49, (uint64_t)v48);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactNeedsValueGuardFlow<INStartVideoCallIntent>);
    swift_allocObject();
    uint64_t v30 = specialized ContactNeedsValueGuardFlow.init(flow:state:sharedGlobals:)(v28, v29, v48, &demangling cache variable for type metadata for ContactNeedsValueGuardFlow<INStartVideoCallIntent>.FlowState);
    swift_retain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
    v49[0] = v30;
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type ContactNeedsValueGuardFlow<INStartVideoCallIntent> and conformance ContactNeedsValueGuardFlow<A>, &demangling cache variable for type metadata for ContactNeedsValueGuardFlow<INStartVideoCallIntent>);
    uint64_t v31 = Flow.eraseToAnyValueFlow()();
    swift_release();
    swift_release();
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.siriPhone);
    int64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl(&dword_0, v33, v34, "#PhoneCallFlowFactory Needs value for non contact slot. Appending needsValueStrategy only.", v35, 2u);
      swift_slowDealloc();
    }

    v49[0] = v18;
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type CallingIntentNeedsValueFlowStrategy<StartVideoCallRCHFlowDelegate> and conformance CallingIntentNeedsValueFlowStrategy<A>, &demangling cache variable for type metadata for CallingIntentNeedsValueFlowStrategy<StartVideoCallRCHFlowDelegate>);
    unint64_t v36 = (uint64_t (*)(uint64_t, uint64_t))static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)();
    uint64_t v31 = v36(v47, v17);
    swift_release();
  }
  swift_release();
  return v31;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  Swift::String v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t (*v36)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  long long v48[2];
  void v49[6];

  uint64_t v44 = a3;
  uint64_t v45 = a2;
  uint64_t v47 = a1;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactNeedsValueGuardFlow<INStartAudioCallIntent>.FlowState);
  __chkstk_darwin(v39);
  uint64_t v40 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for ParameterIdentifier();
  uint64_t v4 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  unint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CATOption();
  __chkstk_darwin(v7 - 8);
  type metadata accessor for StartCallCATs();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v43 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for StartCallCATPatternsExecutor(0);
  static CATOption.defaultMode.getter();
  uint64_t v42 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for StartCallCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v41 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for PhoneCallCommonCATs();
  static CATOption.defaultMode.getter();
  uint64_t v8 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for PhoneCallCommonCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v9 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for PhoneCallCommonCATPatternsExecutor();
  static CATOption.defaultMode.getter();
  uint64_t v10 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for PhoneCallDisplayTextCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v11 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  uint64_t v12 = ResponseFactory.init()();
  static SiriKitEventSender.current.getter();
  type metadata accessor for AppInfoBuilder();
  uint64_t v13 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CallingIntentNeedsValueFlowStrategy<StartAudioCallRCHFlowDelegate>);
  uint64_t v14 = swift_allocObject();
  uint64_t v38 = v13;
  uint64_t v15 = v44;
  uint64_t v16 = v9;
  uint64_t v17 = v45;
  uint64_t v18 = specialized CallingIntentNeedsValueFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:startCallCATsSimple:phoneCallCommonCATs:phoneCallCommonCATsSimple:phoneCallCommonCatPatterns:phoneCallDisplayTextCATsSimple:responseGenerator:siriKitEventSender:appInfoBuilder:)(v44, v43, v42, v41, v8, v16, v10, v11, v12, v49, v38, v14, &direct field offset for StartAudioCallRCHFlowDelegate.sharedGlobals);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INStartAudioCallIntent>);
  ParameterResolutionRecord.parameter.getter();
  uint64_t v19 = ParameterIdentifier.name.getter();
  id v21 = v20;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v46);
  v22._uint64_t countAndFlagsBits = v19;
  v22._object = v21;
  if ((PhoneCallSlotNames.init(rawValue:)(v22).value & 0xFE) == 4)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.siriPhone);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl(&dword_0, v24, v25, "#PhoneCallFlowFactory Contact slot needs value. Wrapping needsValueStrategy in NeedsValueGuardFlow.", v26, 2u);
      swift_slowDealloc();
    }

    v49[0] = v18;
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type CallingIntentNeedsValueFlowStrategy<StartAudioCallRCHFlowDelegate> and conformance CallingIntentNeedsValueFlowStrategy<A>, &demangling cache variable for type metadata for CallingIntentNeedsValueFlowStrategy<StartAudioCallRCHFlowDelegate>);
    uint64_t v27 = (uint64_t (*)(uint64_t, uint64_t))static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)();
    uint64_t v28 = v27(v47, v17);
    swift_release();
    outlined init with copy of SignalProviding(v15 + direct field offset for StartAudioCallRCHFlowDelegate.sharedGlobals, (uint64_t)v49);
    uint64_t v29 = (uint64_t)v40;
    swift_storeEnumTagMultiPayload();
    outlined init with copy of SignalProviding((uint64_t)v49, (uint64_t)v48);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactNeedsValueGuardFlow<INStartAudioCallIntent>);
    swift_allocObject();
    uint64_t v30 = specialized ContactNeedsValueGuardFlow.init(flow:state:sharedGlobals:)(v28, v29, v48, &demangling cache variable for type metadata for ContactNeedsValueGuardFlow<INStartAudioCallIntent>.FlowState);
    swift_retain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
    v49[0] = v30;
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type ContactNeedsValueGuardFlow<INStartAudioCallIntent> and conformance ContactNeedsValueGuardFlow<A>, &demangling cache variable for type metadata for ContactNeedsValueGuardFlow<INStartAudioCallIntent>);
    uint64_t v31 = Flow.eraseToAnyValueFlow()();
    swift_release();
    swift_release();
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.siriPhone);
    int64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl(&dword_0, v33, v34, "#PhoneCallFlowFactory Needs value for non contact slot. Appending needsValueStrategy only.", v35, 2u);
      swift_slowDealloc();
    }

    v49[0] = v18;
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type CallingIntentNeedsValueFlowStrategy<StartAudioCallRCHFlowDelegate> and conformance CallingIntentNeedsValueFlowStrategy<A>, &demangling cache variable for type metadata for CallingIntentNeedsValueFlowStrategy<StartAudioCallRCHFlowDelegate>);
    unint64_t v36 = (uint64_t (*)(uint64_t, uint64_t))static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)();
    uint64_t v31 = v36(v47, v17);
    swift_release();
  }
  swift_release();
  return v31;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  Swift::String v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t (*v36)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  long long v48[2];
  void v49[6];

  uint64_t v44 = a3;
  uint64_t v45 = a2;
  uint64_t v47 = a1;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactNeedsValueGuardFlow<INStartCallIntent>.FlowState);
  __chkstk_darwin(v39);
  uint64_t v40 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for ParameterIdentifier();
  uint64_t v4 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  unint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CATOption();
  __chkstk_darwin(v7 - 8);
  type metadata accessor for StartCallCATs();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v43 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for StartCallCATPatternsExecutor(0);
  static CATOption.defaultMode.getter();
  uint64_t v42 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for StartCallCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v41 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for PhoneCallCommonCATs();
  static CATOption.defaultMode.getter();
  uint64_t v8 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for PhoneCallCommonCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v9 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for PhoneCallCommonCATPatternsExecutor();
  static CATOption.defaultMode.getter();
  uint64_t v10 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for PhoneCallDisplayTextCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v11 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  uint64_t v12 = ResponseFactory.init()();
  static SiriKitEventSender.current.getter();
  type metadata accessor for AppInfoBuilder();
  uint64_t v13 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CallingIntentNeedsValueFlowStrategy<StartCallRCHFlowDelegate>);
  uint64_t v14 = swift_allocObject();
  uint64_t v38 = v13;
  uint64_t v15 = v44;
  uint64_t v16 = v9;
  uint64_t v17 = v45;
  uint64_t v18 = specialized CallingIntentNeedsValueFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:startCallCATsSimple:phoneCallCommonCATs:phoneCallCommonCATsSimple:phoneCallCommonCatPatterns:phoneCallDisplayTextCATsSimple:responseGenerator:siriKitEventSender:appInfoBuilder:)(v44, v43, v42, v41, v8, v16, v10, v11, v12, v49, v38, v14, &direct field offset for StartCallRCHFlowDelegate.sharedGlobals);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INStartCallIntent>);
  ParameterResolutionRecord.parameter.getter();
  uint64_t v19 = ParameterIdentifier.name.getter();
  id v21 = v20;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v46);
  v22._uint64_t countAndFlagsBits = v19;
  v22._object = v21;
  if ((PhoneCallSlotNames.init(rawValue:)(v22).value & 0xFE) == 4)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.siriPhone);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl(&dword_0, v24, v25, "#PhoneCallFlowFactory Contact slot needs value. Wrapping needsValueStrategy in NeedsValueGuardFlow.", v26, 2u);
      swift_slowDealloc();
    }

    v49[0] = v18;
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type CallingIntentNeedsValueFlowStrategy<StartCallRCHFlowDelegate> and conformance CallingIntentNeedsValueFlowStrategy<A>, &demangling cache variable for type metadata for CallingIntentNeedsValueFlowStrategy<StartCallRCHFlowDelegate>);
    uint64_t v27 = (uint64_t (*)(uint64_t, uint64_t))static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)();
    uint64_t v28 = v27(v47, v17);
    swift_release();
    outlined init with copy of SignalProviding(v15 + direct field offset for StartCallRCHFlowDelegate.sharedGlobals, (uint64_t)v49);
    uint64_t v29 = (uint64_t)v40;
    swift_storeEnumTagMultiPayload();
    outlined init with copy of SignalProviding((uint64_t)v49, (uint64_t)v48);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactNeedsValueGuardFlow<INStartCallIntent>);
    swift_allocObject();
    uint64_t v30 = specialized ContactNeedsValueGuardFlow.init(flow:state:sharedGlobals:)(v28, v29, v48, &demangling cache variable for type metadata for ContactNeedsValueGuardFlow<INStartCallIntent>.FlowState);
    swift_retain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
    v49[0] = v30;
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type ContactNeedsValueGuardFlow<INStartCallIntent> and conformance ContactNeedsValueGuardFlow<A>, &demangling cache variable for type metadata for ContactNeedsValueGuardFlow<INStartCallIntent>);
    uint64_t v31 = Flow.eraseToAnyValueFlow()();
    swift_release();
    swift_release();
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.siriPhone);
    int64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl(&dword_0, v33, v34, "#PhoneCallFlowFactory Needs value for non contact slot. Appending needsValueStrategy only.", v35, 2u);
      swift_slowDealloc();
    }

    v49[0] = v18;
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type CallingIntentNeedsValueFlowStrategy<StartCallRCHFlowDelegate> and conformance CallingIntentNeedsValueFlowStrategy<A>, &demangling cache variable for type metadata for CallingIntentNeedsValueFlowStrategy<StartCallRCHFlowDelegate>);
    unint64_t v36 = (uint64_t (*)(uint64_t, uint64_t))static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)();
    uint64_t v31 = v36(v47, v17);
    swift_release();
  }
  swift_release();
  return v31;
}

uint64_t ContactNeedsValueGuardFlow.__allocating_init(flow:state:sharedGlobals:)(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v6 = swift_allocObject();
  ContactNeedsValueGuardFlow.init(flow:state:sharedGlobals:)(a1, a2, a3);
  return v6;
}

uint64_t ContactNeedsValueGuardFlow.init(flow:state:sharedGlobals:)(uint64_t a1, uint64_t a2, long long *a3)
{
  OUTLINED_FUNCTION_9_11();
  *(void *)(v3 + *(void *)(v6 + 104)) = v7;
  OUTLINED_FUNCTION_22();
  OUTLINED_FUNCTION_9_11();
  uint64_t v9 = v3 + v8;
  type metadata accessor for ContactNeedsValueGuardFlow.FlowState();
  OUTLINED_FUNCTION_15();
  (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v9, a2);
  outlined init with take of AppSelectionSignalComponent(a3, v3 + *(void *)(*(void *)v3 + 112));
  return v3;
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.makePromptForValue(resolveRecord:) in conformance CallingIntentNeedsValueFlowStrategy<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 392)
                                                + **(int **)(**(void **)v2 + 392));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return v8(a1, a2);
}

uint64_t CallingIntentNeedsValueFlowStrategy.makePromptForValue(resolveRecord:)()
{
  uint64_t v62 = v0;
  uint64_t v59 = v0 + 224;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v60 = v0 + 312;
  uint64_t v1 = *(void *)(v0 + 464);
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.siriPhone);
  uint64_t v3 = *(void (**)(uint64_t))(v1 + 16);
  uint64_t v4 = OUTLINED_FUNCTION_80_5();
  v3(v4);
  uint64_t v5 = OUTLINED_FUNCTION_39_1();
  uint64_t v58 = v3;
  v3(v5);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void *)(v0 + 464);
  if (v8)
  {
    os_log_t log = v6;
    uint64_t v10 = *(void *)(v0 + 448);
    os_log_type_t type = v7;
    uint64_t v11 = *(void *)(v0 + 432);
    uint64_t v55 = *(void *)(v0 + 424);
    uint64_t v12 = OUTLINED_FUNCTION_14_0();
    uint64_t v61 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315650;
    *(void *)(v0 + 368) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000022, 0x8000000000499A80, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2080;
    ParameterResolutionRecord.parameter.getter();
    uint64_t v13 = ParameterIdentifier.name.getter();
    unint64_t v15 = v14;
    uint64_t v16 = *(void (**)(void))(v11 + 8);
    ((void (*)(uint64_t, uint64_t))v16)(v10, v55);
    *(void *)(v0 + 376) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v17 = *(void (**)(void))(v9 + 8);
    OUTLINED_FUNCTION_10_8();
    v17();
    *(_WORD *)(v12 + 22) = 2080;
    ParameterResolutionRecord.parameter.getter();
    uint64_t v18 = ParameterIdentifier.multicardinalIndex.getter();
    char v20 = v19;
    OUTLINED_FUNCTION_12_20();
    v16();
    *(void *)(v0 + 352) = v18;
    char v21 = v20 & 1;
    Swift::String v22 = v17;
    *(unsigned char *)(v0 + 360) = v21;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
    uint64_t v23 = String.init<A>(describing:)();
    *(void *)(v0 + 392) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_10_8();
    v17();
    _os_log_impl(&dword_0, log, type, "#CallingIntentNeedsValueFlowStrategy %s parameter={ %s, %s }", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_5_16();
  }
  else
  {
    Swift::String v22 = *(void (**)(void))(v9 + 8);
    OUTLINED_FUNCTION_10_8();
    v22();
    OUTLINED_FUNCTION_10_8();
    v22();
  }
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v0 + 416) + 24), *(void *)(*(void *)(v0 + 416) + 48));
  uint64_t v25 = OUTLINED_FUNCTION_78_6();
  v26(v25);
  OUTLINED_FUNCTION_23();
  (*(void (**)(void))(v27 + 240))();
  swift_release();
  if (*(void *)(v0 + 256) == 1)
  {
    outlined destroy of PhoneCallNLIntent?(v59, (uint64_t *)&demangling cache variable for type metadata for TransformationResult?);
    *(_OWORD *)(v0 + 272) = 0u;
    *(_OWORD *)(v0 + 288) = 0u;
    *(void *)(v0 + 304) = 0;
  }
  else
  {
    outlined init with copy of PhoneCallNLIntent?(v0 + 232, v0 + 272, &demangling cache variable for type metadata for PhoneCallNLIntent?);
    outlined destroy of TransformationResult(v59);
  }
  uint64_t v28 = (_OWORD *)(v0 + 120);
  outlined init with copy of PhoneCallNLIntent?(v0 + 272, v60, &demangling cache variable for type metadata for PhoneCallNLIntent?);
  if (!*(void *)(v0 + 336))
  {
    outlined destroy of PhoneCallNLIntent?(v60, &demangling cache variable for type metadata for PhoneCallNLIntent?);
    _OWORD *v28 = 0u;
    *(_OWORD *)(v0 + 136) = 0u;
    *(_OWORD *)(v0 + 152) = 0u;
    *(_OWORD *)(v0 + 168) = 0u;
    *(_OWORD *)(v0 + 184) = 0u;
    *(_OWORD *)(v0 + 200) = 0u;
    *(void *)(v0 + 216) = 0;
    goto LABEL_18;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
  OUTLINED_FUNCTION_96();
  if ((swift_dynamicCast() & 1) == 0)
  {
    *(void *)(v0 + 216) = 0;
    *(_OWORD *)(v0 + 184) = 0u;
    *(_OWORD *)(v0 + 200) = 0u;
    *(_OWORD *)(v0 + 152) = 0u;
    *(_OWORD *)(v0 + 168) = 0u;
    _OWORD *v28 = 0u;
    *(_OWORD *)(v0 + 136) = 0u;
    goto LABEL_18;
  }
  if (!*(void *)v28)
  {
LABEL_18:
    outlined destroy of PhoneCallNLIntent?(v0 + 120, &demangling cache variable for type metadata for PhoneCallNLv4Intent?);
    goto LABEL_19;
  }
  uint64_t v29 = (void *)OUTLINED_FUNCTION_7_0();
  memcpy(v29, v30, 0x68uLL);
  if (PhoneCallNLv4Intent.isCallLabelOnly()())
  {
    uint64_t v31 = v22;
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v32, v33))
    {
      os_log_type_t v34 = (uint8_t *)OUTLINED_FUNCTION_7_2();
      *(_WORD *)os_log_type_t v34 = 0;
      _os_log_impl(&dword_0, v32, v33, "#CallingIntentNeedsValueFlowStrategy - redirected here from Needs DisambiguationFlowStrategy missing label loop, so setting startOver to true.", v34, 2u);
      OUTLINED_FUNCTION_6();
    }

    OUTLINED_FUNCTION_22();
    (*(void (**)(uint64_t))(v35 + 336))(1);
    outlined destroy of PhoneCallNLv4Intent(v0 + 16);
    Swift::String v22 = v31;
  }
  else
  {
    outlined destroy of PhoneCallNLv4Intent(v0 + 16);
  }
LABEL_19:
  unint64_t v36 = (void *)ParameterResolutionRecord.result.getter();
  id v37 = [v36 unsupportedReason];

  if (v37)
  {
    uint64_t v38 = (void *)ParameterResolutionRecord.result.getter();
    id v39 = [v38 alternatives];

    uint64_t v40 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v41 = *(void *)(v40 + 16);
    swift_bridgeObjectRelease();
    if (!v41)
    {
      ((void (*)(void, void, void))v58)(*(void *)(v0 + 472), *(void *)(v0 + 408), *(void *)(v0 + 456));
      uint64_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = (uint8_t *)OUTLINED_FUNCTION_47();
        *(_DWORD *)uint64_t v44 = 134217984;
        uint64_t v45 = (void *)ParameterResolutionRecord.result.getter();
        id v46 = [v45 unsupportedReason];

        OUTLINED_FUNCTION_80_5();
        OUTLINED_FUNCTION_12_20();
        v47();
        *(void *)(v0 + 384) = v46;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_6();
      }
      else
      {
        uint64_t v48 = OUTLINED_FUNCTION_80_5();
        ((void (*)(uint64_t))v22)(v48);
      }
      uint64_t v49 = *(void *)(v0 + 416);

      *(unsigned char *)(v49 + direct field offset for CallingIntentNeedsValueFlowStrategy.isUnsupportedFollowUp) = 1;
    }
  }
  *(void *)(v0 + 496) = ParameterResolutionRecord.app.getter();
  *(void *)(v0 + 504) = ParameterResolutionRecord.intent.getter();
  ParameterResolutionRecord.parameter.getter();
  ParameterIdentifier.name.getter();
  *(void *)(v0 + 512) = v50;
  OUTLINED_FUNCTION_78_2();
  OUTLINED_FUNCTION_26_0();
  v51();
  *(void *)(v0 + 520) = ParameterResolutionRecord.result.getter();
  swift_task_alloc();
  OUTLINED_FUNCTION_31_2();
  *(void *)(v0 + 528) = v52;
  *unint64_t v52 = v53;
  v52[1] = CallingIntentNeedsValueFlowStrategy.makePromptForValue(resolveRecord:);
  return CallingIntentNeedsValueFlowStrategy.makePromptForNeedsValueOutput(app:intent:parameterName:intentResolutionResult:)();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  uint64_t v0 = OUTLINED_FUNCTION_77_7();
  outlined destroy of PhoneCallNLIntent?(v0, &demangling cache variable for type metadata for PhoneCallNLIntent?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  return v1();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_16_1();
  v1[51] = v2;
  v1[52] = v0;
  v1[50] = v3;
  uint64_t v4 = type metadata accessor for ParameterIdentifier();
  v1[53] = v4;
  OUTLINED_FUNCTION_19_0(v4);
  v1[54] = v5;
  v1[55] = swift_task_alloc();
  v1[56] = swift_task_alloc();
  OUTLINED_FUNCTION_81_7();
  swift_getAssociatedTypeWitness();
  uint64_t v6 = OUTLINED_FUNCTION_94_2();
  v1[57] = v6;
  OUTLINED_FUNCTION_19_0(v6);
  v1[58] = v7;
  v1[59] = OUTLINED_FUNCTION_28_2();
  v1[60] = swift_task_alloc();
  v1[61] = swift_task_alloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_5_7();
  uint8_t *v4 = v3;
  uint8_t *v4 = *v1;
  *(void *)(v3 + 536) = v0;
  swift_task_dealloc();
  uint64_t v5 = *(void **)(v2 + 520);
  uint64_t v6 = *(void **)(v2 + 504);
  if (v0)
  {

    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {

    swift_release();
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  uint64_t v0 = OUTLINED_FUNCTION_77_7();
  outlined destroy of PhoneCallNLIntent?(v0, &demangling cache variable for type metadata for PhoneCallNLIntent?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v1();
}

Swift::Bool __swiftcall PhoneCallNLv4Intent.isCallLabelOnly()()
{
  int v1 = *(unsigned __int8 *)(v0 + 79);
  if (v1 == 17)
  {
    outlined init with copy of PhoneCallNLv4Intent(v0, (uint64_t)v10);
LABEL_13:
    unsigned __int8 v5 = 0;
    goto LABEL_14;
  }
  if (PhoneCallVerb.rawValue.getter(v1) == 1819042147 && v2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    outlined init with copy of PhoneCallNLv4Intent(v0, (uint64_t)v10);
  }
  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    outlined init with copy of PhoneCallNLv4Intent(v0, (uint64_t)v10);
    unsigned __int8 v5 = 0;
    if ((v4 & 1) == 0) {
      goto LABEL_14;
    }
  }
  if (*(void *)(v11 + 16) != 1) {
    goto LABEL_13;
  }
  specialized Collection.first.getter(v8);
  unsigned __int8 v5 = v9;
  if (v9)
  {
    Class isa = OUTLINED_FUNCTION_48_14(v8).super.isa;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    unsigned __int8 v5 = INPerson.isUnnamedHandleLabel.getter();
  }
  else
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v8, &demangling cache variable for type metadata for SiriPhoneContact?);
  }
LABEL_14:
  outlined destroy of PhoneCallNLv4Intent((uint64_t)v10);
  return v5 & 1;
}

INPerson __swiftcall SiriPhoneContact.toINPerson()()
{
  uint64_t v3 = v1;
  uint64_t v4 = v0;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  __chkstk_darwin(v5 - 8);
  OUTLINED_FUNCTION_3_1();
  uint64_t v77 = v6;
  uint64_t v79 = type metadata accessor for PersonNameComponents();
  uint64_t v7 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  OUTLINED_FUNCTION_3_1();
  uint64_t v76 = v8;
  uint64_t v9 = OUTLINED_FUNCTION_17_13();
  v10(v9);
  if (v11)
  {
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v12 = 0;
  }
  uint64_t v74 = v7;
  uint64_t v13 = *(unsigned __int8 (**)(uint64_t, uint64_t))(v3 + 296);
  switch(v13(v4, v3))
  {
    case 1u:
    case 2u:
      char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v14 & 1) == 0) {
        goto LABEL_8;
      }
      goto LABEL_7;
    case 3u:
LABEL_8:
      uint64_t v15 = 0;
      switch(v13(v4, v3))
      {
        case 1u:
          swift_bridgeObjectRelease();
          goto LABEL_11;
        case 3u:
          goto LABEL_13;
        default:
          char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v16) {
LABEL_11:
          }
            uint64_t v15 = 2;
          else {
            uint64_t v15 = 0;
          }
          break;
      }
      break;
    default:
      swift_bridgeObjectRelease();
LABEL_7:
      uint64_t v15 = 1;
      break;
  }
LABEL_13:
  id v17 = objc_allocWithZone((Class)INPersonHandle);
  id v18 = v12;
  id v78 = @nonobjc INPersonHandle.init(value:type:label:)(0, 0, 0, v12);
  uint64_t v19 = OUTLINED_FUNCTION_17_13();
  uint64_t v21 = v20(v19);
  uint64_t v73 = v18;
  if (v22)
  {
    uint64_t v23 = v21;
    OUTLINED_FUNCTION_8_35();
    if (v24)
    {
      id v25 = objc_allocWithZone((Class)INPersonHandle);
      id v26 = v18;
      id v27 = @nonobjc INPersonHandle.init(value:type:label:emergencyType:)(v23, v2, 2, v12, v15);

      id v78 = v27;
      uint64_t v28 = v4;
      goto LABEL_21;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v28 = v4;
  uint64_t v29 = OUTLINED_FUNCTION_17_13();
  uint64_t v31 = v30(v29);
  if (v32)
  {
    uint64_t v33 = v31;
    OUTLINED_FUNCTION_8_35();
    if (v34)
    {
      id v35 = objc_allocWithZone((Class)INPersonHandle);
      id v36 = v18;
      id v37 = @nonobjc INPersonHandle.init(value:type:label:)(v33, v2, 1, v12);

      id v78 = v37;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
LABEL_21:
  PersonNameComponents.init()();
  uint64_t v38 = *(void (**)(uint64_t))(v3 + 104);
  uint64_t v39 = OUTLINED_FUNCTION_0_29();
  v38(v39);
  outlined init with take of String?((uint64_t)v80, (uint64_t)v91, &demangling cache variable for type metadata for PhoneCallPersonName?);
  if (v91[1] != 1)
  {
    swift_bridgeObjectRetain();
    outlined release of PhoneCallPersonName?(v80);
  }
  PersonNameComponents.givenName.setter();
  uint64_t v40 = OUTLINED_FUNCTION_0_29();
  v38(v40);
  outlined init with take of String?((uint64_t)v81, (uint64_t)v90, &demangling cache variable for type metadata for PhoneCallPersonName?);
  if (v90[1] == 1)
  {
    OUTLINED_FUNCTION_20_14();
  }
  else
  {
    swift_bridgeObjectRetain();
    outlined release of PhoneCallPersonName?(v81);
  }
  OUTLINED_FUNCTION_7_34();
  PersonNameComponents.middleName.setter();
  uint64_t v41 = OUTLINED_FUNCTION_0_29();
  v38(v41);
  outlined init with take of String?((uint64_t)v82, (uint64_t)v89, &demangling cache variable for type metadata for PhoneCallPersonName?);
  if (v89[1] == 1)
  {
    OUTLINED_FUNCTION_20_14();
  }
  else
  {
    swift_bridgeObjectRetain();
    outlined release of PhoneCallPersonName?(v82);
  }
  OUTLINED_FUNCTION_7_34();
  PersonNameComponents.familyName.setter();
  uint64_t v42 = OUTLINED_FUNCTION_0_29();
  v38(v42);
  outlined init with take of String?((uint64_t)v83, (uint64_t)v88, &demangling cache variable for type metadata for PhoneCallPersonName?);
  if (v88[1] == 1)
  {
    OUTLINED_FUNCTION_20_14();
  }
  else
  {
    swift_bridgeObjectRetain();
    outlined release of PhoneCallPersonName?(v83);
  }
  OUTLINED_FUNCTION_7_34();
  PersonNameComponents.nickname.setter();
  uint64_t v43 = OUTLINED_FUNCTION_0_29();
  v38(v43);
  outlined init with take of String?((uint64_t)v84, (uint64_t)v87, &demangling cache variable for type metadata for PhoneCallPersonName?);
  if (v87[1] == 1)
  {
    OUTLINED_FUNCTION_20_14();
  }
  else
  {
    swift_bridgeObjectRetain();
    outlined release of PhoneCallPersonName?(v84);
  }
  OUTLINED_FUNCTION_7_34();
  PersonNameComponents.namePrefix.setter();
  uint64_t v44 = OUTLINED_FUNCTION_0_29();
  v38(v44);
  outlined init with take of String?((uint64_t)v85, (uint64_t)v86, &demangling cache variable for type metadata for PhoneCallPersonName?);
  if (v86[1] == 1)
  {
    OUTLINED_FUNCTION_20_14();
  }
  else
  {
    swift_bridgeObjectRetain();
    outlined release of PhoneCallPersonName?(v85);
  }
  OUTLINED_FUNCTION_7_34();
  PersonNameComponents.nameSuffix.setter();
  (*(void (**)(uint64_t, uint64_t))(v3 + 200))(v28, v3);
  if (v45)
  {
    OUTLINED_FUNCTION_8_35();
    if (v46)
    {
      NSString v72 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      goto LABEL_43;
    }
    swift_bridgeObjectRelease();
  }
  NSString v72 = 0;
LABEL_43:
  uint64_t v47 = *(void (**)(uint64_t))(v3 + 408);
  uint64_t v48 = OUTLINED_FUNCTION_23_10();
  v47(v48);
  uint64_t v50 = v49;
  swift_bridgeObjectRelease();
  if (v50)
  {
    uint64_t v51 = v74;
    uint64_t v52 = v77;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 16))(v77, v76, v79);
    uint64_t v53 = 0;
  }
  else
  {
    uint64_t v53 = 1;
    uint64_t v51 = v74;
    uint64_t v52 = v77;
  }
  __swift_storeEnumTagSinglePayload(v52, v53, 1, v79);
  uint64_t v54 = OUTLINED_FUNCTION_23_10();
  uint64_t v75 = ((uint64_t (*)(uint64_t))v47)(v54);
  uint64_t v71 = v55;
  unint64_t v56 = *(uint64_t (**)(uint64_t))(v3 + 32);
  uint64_t v57 = OUTLINED_FUNCTION_22_11();
  uint64_t v58 = v56(v57);
  uint64_t v68 = v59;
  uint64_t v69 = v58;
  uint64_t v60 = OUTLINED_FUNCTION_22_11();
  uint64_t v61 = v56(v60);
  uint64_t v63 = v62;
  id v64 = objc_allocWithZone((Class)INPerson);
  id v70 = v72;
  id v65 = v78;
  id v66 = @nonobjc INPerson.init(personHandle:nameComponents:displayName:image:contactIdentifier:customIdentifier:relationship:)(v65, v77, v75, v71, 0, v69, v68, v61, v63, v72);
  objc_msgSend(v66, "setIsMe:", (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v28, v3) & 1);

  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v76, v79);
  return (INPerson)v66;
}

uint64_t protocol witness for SiriPhoneContact.handleLabel.getter in conformance PhoneCallNLv4Contact()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 480))();
}

uint64_t PhoneCallNLv4Contact.handleLabel.getter()
{
  return OUTLINED_FUNCTION_7_0();
}

uint64_t protocol witness for SiriPhoneContact.emergencyLocationType.getter in conformance PhoneCallNLv4Contact()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 528))();
}

uint64_t PhoneCallNLv4Contact.emergencyLocationType.getter()
{
  OUTLINED_FUNCTION_5_21();
  return *(unsigned __int8 *)(v0 + 288);
}

id @nonobjc INPersonHandle.init(value:type:label:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = v4;
  if (a2)
  {
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v8 = 0;
  }
  id v9 = [v5 initWithValue:v8 type:a3 label:a4];

  return v9;
}

uint64_t protocol witness for SiriPhoneContact.emailAddress.getter in conformance PhoneCallNLv4Contact()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 288))();
}

uint64_t PhoneCallNLv4Contact.emailAddress.getter()
{
  return OUTLINED_FUNCTION_7_0();
}

uint64_t protocol witness for SiriPhoneContact.relationship.getter in conformance PhoneCallNLv4Contact()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 432))();
}

uint64_t PhoneCallNLv4Contact.relationship.getter()
{
  return OUTLINED_FUNCTION_7_0();
}

uint64_t protocol witness for SiriPhoneContact.contactName.getter in conformance PhoneCallNLv4Contact()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 336))();
}

uint64_t PhoneCallNLv4Contact.contactName.getter()
{
  return OUTLINED_FUNCTION_7_0();
}

uint64_t protocol witness for SiriPhoneContact.contactId.getter in conformance PhoneCallNLv4Contact()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 264))();
}

uint64_t PhoneCallNLv4Contact.contactId.getter()
{
  return OUTLINED_FUNCTION_7_0();
}

uint64_t protocol witness for SiriPhoneContact.isMe.getter in conformance PhoneCallNLv4Contact()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 312))() & 1;
}

uint64_t PhoneCallNLv4Contact.isMe.getter()
{
  OUTLINED_FUNCTION_5_21();
  return *(unsigned __int8 *)(v0 + 56);
}

uint64_t CallingIntentNeedsValueFlowStrategy.makePromptForNeedsValueOutput(app:intent:parameterName:intentResolutionResult:)()
{
  uint64_t v1 = v0[26];
  swift_getAssociatedTypeWitness();
  OUTLINED_FUNCTION_38();
  uint64_t v2 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness() + 8) + 16);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8);
  uint64_t v4 = swift_checkMetadataState();
  uint64_t v5 = v3(v4, v2);
  uint64_t v6 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v6);
  if (!App.isFirstParty()())
  {
    uint64_t v31 = v5;
    uint64_t v7 = v0[23];
    uint64_t v8 = v0[24];
    id v9 = (void *)v0[12];
    uint64_t v28 = v0[8];
    uint64_t v29 = v0[22];
    uint64_t v10 = v9[41];
    uint64_t v11 = v9[42];
    __swift_project_boxed_opaque_existential_1(v9 + 38, v10);
    OUTLINED_FUNCTION_22();
    (*(void (**)(void))(v12 + 208))();
    __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
    dispatch thunk of DeviceState.siriLocale.getter();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 16))(v28, v8, v10, v11);
    uint64_t v14 = v13;
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v29);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
    if (v14)
    {
      swift_bridgeObjectRetain();
      SpeakableString.init(print:speak:)();
      OUTLINED_FUNCTION_4_70();
      swift_bridgeObjectRelease();
    }
    else
    {
      __swift_storeEnumTagSinglePayload(v0[25], 1, 1, v6);
    }
    outlined destroy of PhoneCallNLIntent?(v0[26], &demangling cache variable for type metadata for SpeakableString?);
    uint64_t v15 = OUTLINED_FUNCTION_7_0();
    outlined init with take of SpeakableString?(v15, v16);
    uint64_t v5 = v31;
  }
  BOOL v17 = v5 == 2;
  uint64_t v18 = v0[12];
  uint64_t v19 = *(void **)(v18 + 112);
  OUTLINED_FUNCTION_22();
  double v21 = (double)(*(uint64_t (**)(void))(v20 + 304))();
  OUTLINED_FUNCTION_2();
  char v23 = (*(uint64_t (**)(void))(v22 + 328))();
  uint64_t v24 = *(unsigned __int8 *)(v18 + direct field offset for CallingIntentNeedsValueFlowStrategy.isUnsupportedFollowUp);
  uint64_t v30 = (uint64_t (*)(uint64_t, BOOL, void, void, void, uint64_t))(*(void *)(class metadata base offset for StartCallCATsSimple
                                                                                             + *v19
                                                                                             + 656)
                                                                                 + **(int **)(class metadata base offset for StartCallCATsSimple
                                                                                            + *v19
                                                                                            + 656));
  id v25 = (void *)swift_task_alloc();
  v0[27] = v25;
  *id v25 = v0;
  v25[1] = CallingIntentNeedsValueFlowStrategy.makePromptForNeedsValueOutput(app:intent:parameterName:intentResolutionResult:);
  uint64_t v26 = v0[26];
  return v30(v26, v17, *(void *)&v21, 0, v23 & 1, v24);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v8 = v7;
  *(void *)(v5 + 224) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 232) = v3;
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined destroy of PhoneCallNLIntent?(*(void *)(v0 + 208), &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v1();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = *(void *)(v0 + 208);

  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_26_0();
  v2();
  uint64_t v3 = OUTLINED_FUNCTION_78_2();
  v4(v3);
  outlined destroy of PhoneCallNLIntent?(v1, &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  return v5();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  OUTLINED_FUNCTION_1_0();
  v1[11] = v2;
  v1[12] = v0;
  v1[9] = v3;
  v1[10] = v4;
  v1[7] = v5;
  v1[8] = v6;
  OUTLINED_FUNCTION_2();
  v1[13] = v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_11_0(v8);
  v1[14] = OUTLINED_FUNCTION_35();
  id v9 = type metadata accessor for DialogPhase();
  OUTLINED_FUNCTION_11_0(v9);
  v1[15] = OUTLINED_FUNCTION_35();
  uint64_t v10 = type metadata accessor for OutputGenerationManifest();
  v1[16] = v10;
  OUTLINED_FUNCTION_19_0(v10);
  v1[17] = v11;
  v1[18] = OUTLINED_FUNCTION_35();
  uint64_t v12 = type metadata accessor for NLContextUpdate();
  v1[19] = v12;
  OUTLINED_FUNCTION_19_0(v12);
  v1[20] = v13;
  v1[21] = OUTLINED_FUNCTION_35();
  uint64_t v14 = type metadata accessor for Locale();
  v1[22] = v14;
  OUTLINED_FUNCTION_19_0(v14);
  v1[23] = v15;
  v1[24] = OUTLINED_FUNCTION_35();
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v16);
  v1[25] = OUTLINED_FUNCTION_28_2();
  v1[26] = swift_task_alloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v17, v18, v19);
}

uint64_t CallingIntentNeedsValueFlowStrategy.makePromptForNeedsValueOutput(app:intent:parameterName:intentResolutionResult:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = *(void **)(v10 + 232);
  uint64_t v13 = *(void *)(v10 + 160);
  uint64_t v12 = *(void *)(v10 + 168);
  uint64_t v14 = *(void *)(v10 + 152);
  uint64_t v15 = *(void *)(v10 + 112);
  uint64_t v16 = *(void *)(v10 + 96);
  specialized static PhoneCallNLContextProvider.makeNeedsValueContextFor(parameter:)(*(void *)(v10 + 80), *(void **)(v10 + 88));
  static DialogPhase.clarification.getter();
  OutputGenerationManifest.init(dialogPhase:_:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v15, v12, v14);
  __swift_storeEnumTagSinglePayload(v15, 0, 1, v14);
  OutputGenerationManifest.nlContextUpdate.setter();
  __swift_project_boxed_opaque_existential_1((void *)(v16 + 184), *(void *)(v16 + 208));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  BOOL v17 = (__n128 *)swift_allocObject();
  OUTLINED_FUNCTION_16_5(v17, (__n128)xmmword_46A030);
  *(void *)(v10 + 240) = v30;
  id v18 = v11;
  swift_task_alloc();
  OUTLINED_FUNCTION_31_2();
  *(void *)(v10 + 248) = v19;
  *uint64_t v19 = v20;
  v19[1] = CallingIntentNeedsValueFlowStrategy.makePromptForNeedsValueOutput(app:intent:parameterName:intentResolutionResult:);
  OUTLINED_FUNCTION_54_15();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v21, v22, v23, v24, v25, v26, v27, v28, a9, a10);
}

uint64_t CallingIntentNeedsValueFlowStrategy.startingOver.getter()
{
  OUTLINED_FUNCTION_4_7();
  return *v0;
}

uint64_t OUTLINED_FUNCTION_96_0()
{
  return type metadata accessor for SpeakableString();
}

uint64_t OUTLINED_FUNCTION_96_1()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_96_2(uint64_t a1)
{
  *(void *)(v1 - 176) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_36_3()
{
  *(void *)(v0 + 80) = 0x41656E6F68507369;
  *(void *)(v0 + 88) = 0xEA00000000007070;
}

uint64_t OUTLINED_FUNCTION_96_6@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_96_7()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_96_8(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return dispatch thunk of DeviceState.siriLocale.getter();
}

uint64_t type metadata accessor for StartCallPromptForContactsParameters(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for StartCallPromptForContactsParameters);
}

uint64_t CallingIntentNeedsValueFlowStrategy.rePromptCount.getter()
{
  OUTLINED_FUNCTION_4_7();
  return *(void *)v0;
}

uint64_t StartCallPromptForContactsParameters.asKeyValuePairs()()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v3 = OUTLINED_FUNCTION_11_0(v2);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_12_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_46DE40;
  OUTLINED_FUNCTION_36_8(v4);
  uint64_t v5 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_30_0(v1);
  if (v6)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_118();
  }
  else
  {
    *(void *)(v4 + 72) = v5;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v4 + 48));
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_99();
    v7();
  }
  OUTLINED_FUNCTION_25_3();
  *(void *)(v4 + 80) = v8;
  *(void *)(v4 + 88) = v9;
  *(unsigned char *)(v4 + 96) = *(unsigned char *)(v0
                                 + *(int *)(type metadata accessor for StartCallPromptForContactsParameters(0) + 20));
  *(void *)(v4 + 120) = &type metadata for Bool;
  *(void *)(v4 + 128) = 0xD000000000000015;
  OUTLINED_FUNCTION_134();
  *(void *)(v4 + 136) = v12;
  *(unsigned char *)(v4 + 144) = *(unsigned char *)(v0 + v10[6]);
  *(void *)(v4 + 168) = v11;
  strcpy((char *)(v4 + 176), "rePromptCount");
  *(_WORD *)(v4 + 190) = -4864;
  uint64_t v13 = (uint64_t *)(v0 + v10[7]);
  if (v13[1])
  {
    uint64_t v14 = 0;
    *(void *)(v4 + 200) = 0;
    *(void *)(v4 + 208) = 0;
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = *v13;
    uint64_t v14 = &type metadata for Double;
  }
  *(void *)(v4 + 192) = v15;
  *(void *)(v4 + 216) = v14;
  strcpy((char *)(v4 + 224), "startingOver");
  *(unsigned char *)(v4 + 237) = 0;
  *(_WORD *)(v4 + 238) = -5120;
  char v16 = *(unsigned char *)(v0 + v10[8]);
  *(void *)(v4 + 264) = v11;
  *(unsigned char *)(v4 + 240) = v16;
  return v4;
}

uint64_t destroy for StartCallPromptForContactsParameters()
{
  uint64_t v1 = OUTLINED_FUNCTION_70_0();
  uint64_t result = OUTLINED_FUNCTION_28_9(v0);
  if (!result)
  {
    OUTLINED_FUNCTION_10();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
    return v4(v0, v1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_2_4()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_74()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_146_0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  v2[12] = a2;
  v2[15] = result;
  v2[16] = 0x656369766564;
  v2[17] = 0xE600000000000000;
  return result;
}

uint64_t OUTLINED_FUNCTION_146_1(uint64_t result)
{
  *(unsigned char *)(result + 45) = 0;
  *(_WORD *)(result + 46) = -5120;
  return result;
}

uint64_t OUTLINED_FUNCTION_146_3()
{
  return swift_bridgeObjectRetain();
}

unint64_t PhoneCallNLConstants.canonicalName.getter(char a1)
{
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  PhoneCallNLConstants.rawValue.getter(a1);
  Swift::String v2 = String.firstLetterCapitalized()();
  swift_bridgeObjectRelease();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  return 0xD000000000000012;
}

unint64_t PhoneCallNLConstants.rawValue.getter(char a1)
{
  unint64_t result = 0x6E69616D6F64;
  switch(a1)
  {
    case 1:
    case 7:
      unint64_t result = 0x6C6143656E6F6870;
      break;
    case 2:
      unint64_t result = 0xD000000000000012;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
      unint64_t result = 0xD000000000000014;
      break;
    case 5:
      unint64_t result = 0xD000000000000019;
      break;
    case 6:
      unint64_t result = 0xD000000000000015;
      break;
    case 8:
      unint64_t result = 0x6D754E656E6F6870;
      break;
    case 9:
      unint64_t result = 0x6464416C69616D65;
      break;
    case 10:
      unint64_t result = 0x75466E6F73726570;
      break;
    case 11:
      unint64_t result = 0x69466E6F73726570;
      break;
    case 12:
      unint64_t result = 0x614C6E6F73726570;
      break;
    case 13:
      unint64_t result = 0x54746361746E6F63;
      break;
    case 14:
      unint64_t result = 0x69614D6563696F76;
      break;
    case 15:
      unint64_t result = 0x6C6143656E6F6870;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t String.firstLetterCapitalized()(uint64_t a1, unint64_t a2, uint64_t (*a3)(uint64_t))
{
  swift_bridgeObjectRetain();
  uint64_t v6 = specialized Collection.prefix(_:)(1);
  uint64_t v7 = a3(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Collection.dropFirst(_:)(1uLL, a1, a2);
  lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain();
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7;
}

Swift::String __swiftcall String.firstLetterCapitalized()()
{
  uint64_t v2 = String.firstLetterCapitalized()(v0, v1, (uint64_t (*)(uint64_t))&Substring.uppercased());
  result._object = v3;
  result._uint64_t countAndFlagsBits = v2;
  return result;
}

uint64_t specialized Collection.prefix(_:)(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    String.index(_:offsetBy:limitedBy:)();
    uint64_t v1 = String.subscript.getter();
    swift_bridgeObjectRelease();
    return v1;
  }
  return result;
}

uint64_t specialized Collection.prefix(_:)(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v3 = *(void *)(a2 + 16);
  Swift::String result = specialized Array.index(_:offsetBy:limitedBy:)(0, result, v3);
  if (v4) {
    unint64_t v5 = v3;
  }
  else {
    unint64_t v5 = result;
  }
  if ((v5 & 0x8000000000000000) != 0) {
    goto LABEL_9;
  }
  if (v3 >= v5) {
    return a2;
  }
LABEL_10:
  __break(1u);
  return result;
}

unint64_t specialized Collection.dropFirst(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0) {
      uint64_t v3 = HIBYTE(a3) & 0xF;
    }
    else {
      uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0) {
      uint64_t v4 = 11;
    }
    unint64_t v5 = v4 | (v3 << 16);
    Swift::String result = String.index(_:offsetBy:limitedBy:)();
    if (v6) {
      Swift::String result = v5;
    }
    if (4 * v3 >= result >> 14)
    {
      uint64_t v7 = String.subscript.getter();
      swift_bridgeObjectRelease();
      return v7;
    }
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

uint64_t closure #1 in CallHistoryPromptDialogProvider.getAceCommandForVoicemail(searchCallHistorySharedGlobals:isLastPage:)()
{
  return OutputGenerationManifest.listenAfterSpeaking.setter();
}

uint64_t AppResolutionBeforeResolveFlow.__deallocating_deinit()
{
  AppResolutionBeforeResolveFlow.deinit();

  return swift_deallocClassInstance();
}

uint64_t AppResolutionBeforeResolveFlow.deinit()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  __swift_destroy_boxed_opaque_existential_1(v0 + 72);
  outlined destroy of AppResolutionBeforeResolveFlow.State(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin30AppResolutionBeforeResolveFlow_state, (void (*)(void))type metadata accessor for AppResolutionBeforeResolveFlow.State);
  return v0;
}

uint64_t ContactNeedsValueGuardFlow.__deallocating_deinit()
{
  ContactNeedsValueGuardFlow.deinit();

  return swift_deallocClassInstance();
}

uint64_t ContactNeedsValueGuardFlow.deinit()
{
  OUTLINED_FUNCTION_9_11();
  OUTLINED_FUNCTION_9_11();
  type metadata accessor for ContactNeedsValueGuardFlow.FlowState();
  OUTLINED_FUNCTION_15();
  OUTLINED_FUNCTION_11();
  v1();
  swift_release();
  OUTLINED_FUNCTION_22();
  __swift_destroy_boxed_opaque_existential_1(v0 + *(void *)(v2 + 112));
  return v0;
}

uint64_t CallingIntentNeedsValueFlowStrategy.__deallocating_deinit()
{
  CallingIntentBaseFlowStrategy.deinit();

  return swift_deallocClassInstance();
}

uint64_t CallingIntentBaseFlowStrategy.deinit()
{
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 72);
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 136);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 184);
  __swift_destroy_boxed_opaque_existential_1(v0 + 224);
  __swift_destroy_boxed_opaque_existential_1(v0 + 264);
  __swift_destroy_boxed_opaque_existential_1(v0 + 304);
  uint64_t v1 = v0 + direct field offset for CallingIntentBaseFlowStrategy.completionOutputManifest;
  type metadata accessor for OutputGenerationManifest();
  OUTLINED_FUNCTION_15();
  (*(void (**)(uint64_t))(v2 + 8))(v1);
  return v0;
}

uint64_t CallingIntentUnsupportedValueFlowStrategy.__deallocating_deinit()
{
  CallingIntentUnsupportedValueFlowStrategy.deinit();

  return swift_deallocClassInstance();
}

uint64_t CallingIntentUnsupportedValueFlowStrategy.deinit()
{
  uint64_t v0 = CallingIntentBaseFlowStrategy.deinit();
  swift_release();
  return v0;
}

uint64_t RedirectToServerFlow.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);

  return swift_deallocClassInstance();
}

void *UsoEntity_common_Setting.nameIdentifiers.getter()
{
  unint64_t result = (void *)dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
  if (!result) {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t UsoVocIdentifier.init(usoIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v72 = a3;
  uint64_t v77 = a4;
  uint64_t v80 = a2;
  type metadata accessor for Optional();
  OUTLINED_FUNCTION_0_0();
  uint64_t v67 = v6;
  uint64_t v68 = v5;
  __chkstk_darwin(v5);
  uint64_t v69 = (char *)&v67 - v7;
  type metadata accessor for UsoIdentifier.NluComponent();
  OUTLINED_FUNCTION_0_0();
  uint64_t v75 = v9;
  uint64_t v76 = v8;
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_3_1();
  uint64_t v70 = v10;
  uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoIdentifier.NluComponent?, UsoIdentifier.NluComponent?));
  __chkstk_darwin(v74);
  OUTLINED_FUNCTION_3_1();
  uint64_t v79 = v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  __chkstk_darwin(v12 - 8);
  OUTLINED_FUNCTION_5_8();
  uint64_t v73 = v13;
  uint64_t v15 = __chkstk_darwin(v14);
  BOOL v17 = (char *)&v67 - v16;
  __chkstk_darwin(v15);
  uint64_t v78 = (uint64_t)&v67 - v18;
  uint64_t v19 = type metadata accessor for UsoIdentifier();
  OUTLINED_FUNCTION_0_0();
  uint64_t v82 = v20;
  __chkstk_darwin(v21);
  OUTLINED_FUNCTION_5_8();
  uint64_t v81 = v22;
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v67 - v24;
  uint64_t v26 = type metadata accessor for IdentifierAppBundle();
  OUTLINED_FUNCTION_0_0();
  uint64_t v28 = v27;
  uint64_t v30 = __chkstk_darwin(v29);
  uint64_t v32 = (char *)&v67 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  uint64_t v34 = (char *)&v67 - v33;
  UsoIdentifier.appBundleSemantic.getter();
  (*(void (**)(char *, void, uint64_t))(v28 + 104))(v32, enum case for IdentifierAppBundle.abSiriNL(_:), v26);
  char v35 = static IdentifierAppBundle.== infix(_:_:)();
  id v36 = *(void (**)(char *, uint64_t))(v28 + 8);
  v36(v32, v26);
  id v37 = v34;
  uint64_t v38 = v82;
  v36(v37, v26);
  uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v38 + 16);
  uint64_t v83 = a1;
  v39(v25, a1, v19);
  if ((v35 & 1) == 0)
  {
    uint64_t v46 = *(void (**)(void))(v38 + 8);
    ((void (*)(char *, uint64_t))v46)(v25, v19);
    uint64_t v48 = v80;
    uint64_t v49 = v81;
LABEL_9:
    v39((char *)v49, v83, v19);
LABEL_10:
    ((void (*)(uint64_t, uint64_t))v46)(v49, v19);
    goto LABEL_11;
  }
  uint64_t v40 = v73;
  uint64_t v71 = v19;
  uint64_t v41 = v78;
  UsoIdentifier.sourceComponent.getter();
  uint64_t v19 = v75;
  uint64_t v42 = v25;
  uint64_t v43 = v76;
  (*(void (**)(char *, void, uint64_t))(v75 + 104))(v17, enum case for UsoIdentifier.NluComponent.spanMatchVocFile(_:), v76);
  __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v43);
  uint64_t v44 = v79;
  uint64_t v45 = v79 + *(int *)(v74 + 48);
  outlined init with copy of UsoIdentifier.NluComponent?(v41, v79);
  outlined init with copy of UsoIdentifier.NluComponent?((uint64_t)v17, v45);
  if (__swift_getEnumTagSinglePayload(v44, 1, v43) == 1)
  {
    outlined destroy of SubmitCommandError?((uint64_t)v17, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    outlined destroy of SubmitCommandError?(v78, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    uint64_t v46 = *(void (**)(void))(v82 + 8);
    OUTLINED_FUNCTION_1_89();
    v46();
    if (__swift_getEnumTagSinglePayload(v45, 1, v43) == 1)
    {
      outlined destroy of SubmitCommandError?(v79, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      uint64_t v47 = OUTLINED_FUNCTION_7_74();
      ((void (*)(uint64_t))v39)(v47);
      uint64_t v48 = v80;
      goto LABEL_15;
    }
    goto LABEL_8;
  }
  uint64_t v74 = (uint64_t)v42;
  outlined init with copy of UsoIdentifier.NluComponent?(v44, v40);
  if (__swift_getEnumTagSinglePayload(v45, 1, v43) == 1)
  {
    outlined destroy of SubmitCommandError?((uint64_t)v17, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    outlined destroy of SubmitCommandError?(v78, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    uint64_t v46 = *(void (**)(void))(v82 + 8);
    OUTLINED_FUNCTION_1_89();
    v46();
    OUTLINED_FUNCTION_11_59();
    v50();
LABEL_8:
    uint64_t v48 = v80;
    uint64_t v49 = v81;
    outlined destroy of SubmitCommandError?(v79, &demangling cache variable for type metadata for (UsoIdentifier.NluComponent?, UsoIdentifier.NluComponent?));
    goto LABEL_9;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v70, v45, v43);
  lazy protocol witness table accessor for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent();
  LODWORD(v75) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v54 = *(void (**)(void))(v19 + 8);
  OUTLINED_FUNCTION_11_59();
  v54();
  outlined destroy of SubmitCommandError?((uint64_t)v17, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  outlined destroy of SubmitCommandError?(v78, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  uint64_t v46 = *(void (**)(void))(v82 + 8);
  uint64_t v49 = v71;
  ((void (*)(uint64_t, uint64_t))v46)(v74, v71);
  OUTLINED_FUNCTION_11_59();
  v54();
  uint64_t v19 = v49;
  outlined destroy of SubmitCommandError?(v79, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  uint64_t v55 = OUTLINED_FUNCTION_7_74();
  ((void (*)(uint64_t))v39)(v55);
  uint64_t v48 = v80;
  if ((v75 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_15:
  uint64_t v56 = UsoIdentifier.namespace.getter();
  uint64_t v58 = v57;
  uint64_t v59 = v72;
  uint64_t v60 = (*(uint64_t (**)(uint64_t, uint64_t))(v72 + 8))(v48, v72);
  if (!v58)
  {
    OUTLINED_FUNCTION_1_89();
    v46();
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  if (v56 != v60 || v58 != v61)
  {
    char v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_1_89();
    v46();
    swift_bridgeObjectRelease();
    if (v63) {
      goto LABEL_24;
    }
LABEL_11:
    ((void (*)(uint64_t, uint64_t))v46)(v83, v19);
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_89();
  v46();
  swift_bridgeObjectRelease();
LABEL_24:
  uint64_t v64 = v83;
  uint64_t v65 = UsoIdentifier.value.getter();
  uint64_t v66 = (uint64_t)v69;
  (*(void (**)(uint64_t))(v59 + 24))(v65);
  ((void (*)(uint64_t, uint64_t))v46)(v64, v19);
  if (!__swift_getEnumTagSinglePayload(v66, 1, v48))
  {
    uint64_t v52 = v77;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 32))(v77, v66, v48);
    uint64_t v51 = 0;
    return __swift_storeEnumTagSinglePayload(v52, v51, 1, v48);
  }
  (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v66, v68);
LABEL_12:
  uint64_t v51 = 1;
  uint64_t v52 = v77;
  return __swift_storeEnumTagSinglePayload(v52, v51, 1, v48);
}

uint64_t outlined init with copy of UsoIdentifier.NluComponent?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for CallControlUsoIdentifiers.PhoneSetting(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent()
{
  unint64_t result = lazy protocol witness table cache variable for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent;
  if (!lazy protocol witness table cache variable for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent)
  {
    type metadata accessor for UsoIdentifier.NluComponent();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent);
  }
  return result;
}

PhoneCallFlowDelegatePlugin::CallControlUsoIdentifiers::PhoneSetting_optional protocol witness for UsoVocIdentifier.init(rawValue:) in conformance CallControlUsoIdentifiers.PhoneSetting@<W0>(uint64_t a1@<X0>, PhoneCallFlowDelegatePlugin::CallControlUsoIdentifiers::PhoneSetting_optional *a2@<X8>)
{
  result.value = CallControlUsoIdentifiers.PhoneSetting.init(rawValue:)(*(Swift::String *)&a1).value;
  a2->value = result.value;
  return result;
}

PhoneCallFlowDelegatePlugin::CallControlUsoIdentifiers::PhoneSetting_optional __swiftcall CallControlUsoIdentifiers.PhoneSetting.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of CallControlUsoIdentifiers.PhoneSetting.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 9) {
    return (PhoneCallFlowDelegatePlugin::CallControlUsoIdentifiers::PhoneSetting_optional)9;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::CallControlUsoIdentifiers::PhoneSetting_optional)v3;
  }
}

uint64_t specialized Set._Variant.insert(_:)()
{
  OUTLINED_FUNCTION_18_9();
  uint64_t v5 = *v1;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  OUTLINED_FUNCTION_16_14();
  if (v9)
  {
    uint64_t v10 = *(void *)(v5 + 48);
    uint64_t v11 = (void *)(v10 + 16 * v8);
    BOOL v12 = *v11 == v4 && v11[1] == v3;
    if (v12 || (OUTLINED_FUNCTION_9_18() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v13 = (Swift::Int *)(*(void *)(*(void *)v2 + 48) + 16 * v8);
      Swift::Int v14 = v13[1];
      *uint64_t v0 = *v13;
      v0[1] = v14;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v16 = ~v7;
    while (1)
    {
      unint64_t v8 = (v8 + 1) & v16;
      OUTLINED_FUNCTION_16_14();
      if ((v17 & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v10 + 16 * v8);
      BOOL v19 = *v18 == v4 && v18[1] == v3;
      if (v19 || (OUTLINED_FUNCTION_9_18() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  OUTLINED_FUNCTION_14_10();
  specialized _NativeSet.insertNew(_:at:isUnique:)(v4, v3, v8, isUniquelyReferenced_nonNull_native);
  *(void *)uint64_t v2 = v21;
  swift_bridgeObjectRelease();
  *uint64_t v0 = v4;
  v0[1] = v3;
  return 1;
}

{
  Swift::Int *v0;
  uint64_t *v1;
  uint64_t v2;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  BOOL v13;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int *v16;
  Swift::Int v17;
  uint64_t v18;

  OUTLINED_FUNCTION_18_9();
  uint64_t v5 = *v1;
  Hasher.init(_seed:)();
  if (v3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
  }
  Hasher._finalize()();
  OUTLINED_FUNCTION_15_9();
  unint64_t v8 = v7 & ~v6;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    OUTLINED_FUNCTION_14_10();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v4, v3, v8, isUniquelyReferenced_nonNull_native);
    *(void *)uint64_t v2 = v18;
    swift_bridgeObjectRelease();
    *uint64_t v0 = v4;
    v0[1] = v3;
    return 1;
  }
  char v9 = ~v6;
  uint64_t v10 = *(void *)(v5 + 48);
  while (1)
  {
    uint64_t v11 = (void *)(v10 + 16 * v8);
    BOOL v12 = v11[1];
    if (v12) {
      break;
    }
    if (!v3) {
      goto LABEL_18;
    }
LABEL_15:
    unint64_t v8 = (v8 + 1) & v9;
    if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
      goto LABEL_16;
    }
  }
  if (!v3) {
    goto LABEL_15;
  }
  uint64_t v13 = *v11 == v4 && v12 == v3;
  if (!v13 && (OUTLINED_FUNCTION_9_18() & 1) == 0) {
    goto LABEL_15;
  }
  swift_bridgeObjectRelease();
LABEL_18:
  swift_bridgeObjectRelease();
  uint64_t v16 = (Swift::Int *)(*(void *)(*(void *)v2 + 48) + 16 * v8);
  char v17 = v16[1];
  *uint64_t v0 = *v16;
  v0[1] = v17;
  swift_bridgeObjectRetain();
  return 0;
}

uint64_t specialized Set._Variant.insert(_:)(unsigned char *a1, Swift::Int a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  uint64_t v18 = v2;
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if ((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    uint64_t v9 = ~v7;
    while (1)
    {
      if (*(unsigned char *)(*(void *)(v5 + 48) + v8))
      {
        if (*(unsigned char *)(*(void *)(v5 + 48) + v8) == 1)
        {
          uint64_t v10 = 0x654E646E41646E65;
          unint64_t v11 = 0xED00006C6C614377;
        }
        else
        {
          uint64_t v10 = 0x4E646E41646C6F68;
          unint64_t v11 = 0xEE006C6C61437765;
        }
      }
      else
      {
        unint64_t v11 = 0xE300000000000000;
        uint64_t v10 = 6579297;
      }
      if ((_BYTE)a2)
      {
        uint64_t v12 = a2 == 1 ? 0x654E646E41646E65 : 0x4E646E41646C6F68;
        unint64_t v13 = a2 == 1 ? 0xED00006C6C614377 : 0xEE006C6C61437765;
      }
      else
      {
        unint64_t v13 = 0xE300000000000000;
        uint64_t v12 = 6579297;
      }
      if (v10 == v12 && v11 == v13) {
        break;
      }
      char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v15) {
        goto LABEL_24;
      }
      unint64_t v8 = (v8 + 1) & v9;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_22;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_24:
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    LOBYTE(a2) = *(unsigned char *)(*(void *)(*v18 + 48) + v8);
  }
  else
  {
LABEL_22:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v19 = *v18;
    *uint64_t v18 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v8, isUniquelyReferenced_nonNull_native);
    *uint64_t v18 = v19;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
  }
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v3 = v2;
  uint64_t v40 = a1;
  uint64_t v5 = type metadata accessor for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues();
  OUTLINED_FUNCTION_0_0();
  unint64_t v49 = v6;
  __chkstk_darwin(v7);
  uint64_t v44 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?));
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13 - 8);
  uint64_t v48 = (uint64_t)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v38 - v18;
  __chkstk_darwin(v17);
  uint64_t v39 = (char *)&v38 - v20;
  uint64_t v21 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Optional<A>.hash(into:)();
  Hasher._finalize()();
  OUTLINED_FUNCTION_15_9();
  unint64_t v24 = v23 & ~v22;
  uint64_t v51 = v21 + 56;
  if (((*(void *)(v21 + 56 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v35 = (uint64_t)v39;
    uint64_t v34 = v40;
LABEL_16:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(a2, v35, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
    uint64_t v52 = *v3;
    *Swift::Int v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(v35, v24, isUniquelyReferenced_nonNull_native);
    *Swift::Int v3 = v52;
    swift_bridgeObjectRelease();
    outlined init with take of UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?(a2, v34);
    return 1;
  }
  uint64_t v38 = v2;
  uint64_t v25 = ~v22;
  uint64_t v50 = *(void *)(v14 + 72);
  uint64_t v42 = (void (**)(char *, uint64_t, uint64_t))(v49 + 32);
  uint64_t v43 = v21;
  uint64_t v46 = (void (**)(uint64_t, uint64_t))(v49 + 8);
  uint64_t v47 = ~v22;
  uint64_t v41 = v9;
  while (1)
  {
    uint64_t v26 = *(void *)(v21 + 48);
    unint64_t v49 = v50 * v24;
    _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(v26 + v50 * v24, (uint64_t)v19, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
    uint64_t v27 = (uint64_t)&v12[*(int *)(v9 + 48)];
    _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0((uint64_t)v19, (uint64_t)v12, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
    _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(a2, v27, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
    OUTLINED_FUNCTION_30_0((uint64_t)v12);
    if (v29) {
      break;
    }
    uint64_t v28 = v48;
    _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0((uint64_t)v12, v48, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
    OUTLINED_FUNCTION_30_0(v27);
    if (v29)
    {
      (*v46)(v28, v5);
      uint64_t v25 = v47;
LABEL_11:
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v12, &demangling cache variable for type metadata for (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?));
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v19, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
      goto LABEL_13;
    }
    uint64_t v30 = v44;
    (*v42)(v44, v27, v5);
    lazy protocol witness table accessor for type UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues and conformance UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues(&lazy protocol witness table cache variable for type UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues and conformance UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues, (void (*)(uint64_t))&type metadata accessor for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues);
    int v45 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v31 = a2;
    uint64_t v32 = *v46;
    uint64_t v33 = v30;
    uint64_t v21 = v43;
    (*v46)((uint64_t)v33, v5);
    v32(v28, v5);
    a2 = v31;
    uint64_t v9 = v41;
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v12, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v19, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
    uint64_t v25 = v47;
    if (v45) {
      goto LABEL_17;
    }
LABEL_13:
    unint64_t v24 = (v24 + 1) & v25;
    if (((*(void *)(v51 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v34 = v40;
      Swift::Int v3 = v38;
      uint64_t v35 = (uint64_t)v39;
      goto LABEL_16;
    }
  }
  OUTLINED_FUNCTION_30_0(v27);
  if (!v29) {
    goto LABEL_11;
  }
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v12, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v19, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
LABEL_17:
  swift_bridgeObjectRelease();
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(a2, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(*(void *)(*v38 + 48) + v49, v40, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
  return 0;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    uint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

{
  uint64_t *v4;
  uint64_t *v5;
  Swift::Int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v19;
  Swift::Int *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 <= v9 || (a4 & 1) == 0)
  {
    if (a4)
    {
      specialized _NativeSet.resize(capacity:)();
    }
    else
    {
      if (v10 > v9)
      {
        uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
        goto LABEL_23;
      }
      specialized _NativeSet.copyAndResize(capacity:)();
    }
    uint64_t v11 = *v4;
    Hasher.init(_seed:)();
    if (a2)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    uint64_t result = Hasher._finalize()();
    uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
    a3 = result & ~v12;
    uint64_t v13 = v11 + 56;
    if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
    {
      uint64_t v14 = ~v12;
      uint64_t v15 = *(void *)(v11 + 48);
      do
      {
        BOOL v16 = (void *)(v15 + 16 * a3);
        uint64_t v17 = v16[1];
        if (v17)
        {
          if (a2)
          {
            if (*v16 == v8 && v17 == a2) {
              goto LABEL_26;
            }
            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if (result) {
              goto LABEL_26;
            }
          }
        }
        else if (!a2)
        {
          goto LABEL_26;
        }
        a3 = (a3 + 1) & v14;
      }
      while (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
    }
  }
LABEL_23:
  uint64_t v19 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v20 = (Swift::Int *)(*(void *)(v19 + 48) + 16 * a3);
  *uint64_t v20 = v8;
  v20[1] = a2;
  uint64_t v21 = *(void *)(v19 + 16);
  uint64_t v22 = __OFADD__(v21, 1);
  BOOL v23 = v21 + 1;
  if (v22)
  {
    __break(1u);
LABEL_26:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    *(void *)(v19 + 16) = v23;
  }
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v7 = type metadata accessor for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v44 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?));
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
  uint64_t v43 = *(void *)(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13);
  BOOL v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v38 - v18;
  unint64_t v20 = *(void *)(*v3 + 16);
  unint64_t v21 = *(void *)(*v3 + 24);
  uint64_t v39 = v3;
  if (v21 <= v20 || (a3 & 1) == 0)
  {
    if (a3)
    {
      uint64_t v38 = v17;
      specialized _NativeSet.resize(capacity:)();
    }
    else
    {
      if (v21 > v20)
      {
        specialized _NativeSet.copy()();
        goto LABEL_18;
      }
      uint64_t v38 = v17;
      specialized _NativeSet.copyAndResize(capacity:)();
    }
    uint64_t v22 = *v3;
    Hasher.init(_seed:)();
    specialized Optional<A>.hash(into:)();
    Swift::Int v23 = Hasher._finalize()();
    uint64_t v24 = -1 << *(unsigned char *)(v22 + 32);
    a2 = v23 & ~v24;
    uint64_t v49 = v22 + 56;
    if ((*(void *)(v22 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v48 = ~v24;
      uint64_t v25 = *(void *)(v43 + 72);
      uint64_t v41 = (void (**)(char *, uint64_t, uint64_t))(v8 + 32);
      uint64_t v42 = v19;
      uint64_t v46 = (void (**)(char *, uint64_t))(v8 + 8);
      uint64_t v47 = v25;
      uint64_t v40 = v22;
      do
      {
        _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(*(void *)(v22 + 48) + v47 * a2, (uint64_t)v19, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
        uint64_t v26 = (uint64_t)&v12[*(int *)(v10 + 48)];
        _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0((uint64_t)v19, (uint64_t)v12, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
        _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(a1, v26, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
        if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v7) == 1)
        {
          if (__swift_getEnumTagSinglePayload(v26, 1, v7) == 1) {
            goto LABEL_21;
          }
        }
        else
        {
          _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0((uint64_t)v12, (uint64_t)v16, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
          if (__swift_getEnumTagSinglePayload(v26, 1, v7) != 1)
          {
            uint64_t v27 = v16;
            uint64_t v28 = v44;
            (*v41)(v44, v26, v7);
            lazy protocol witness table accessor for type UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues and conformance UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues(&lazy protocol witness table cache variable for type UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues and conformance UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues, (void (*)(uint64_t))&type metadata accessor for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues);
            int v45 = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v29 = v10;
            uint64_t v30 = a1;
            uint64_t v31 = *v46;
            uint64_t v32 = v28;
            BOOL v16 = v27;
            uint64_t v19 = v42;
            (*v46)(v32, v7);
            v31(v16, v7);
            a1 = v30;
            uint64_t v10 = v29;
            uint64_t v22 = v40;
            outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v12, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
            outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v19, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
            if (v45) {
              goto LABEL_22;
            }
            goto LABEL_17;
          }
          (*v46)(v16, v7);
        }
        outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v12, &demangling cache variable for type metadata for (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?));
        outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v19, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
LABEL_17:
        a2 = (a2 + 1) & v48;
      }
      while (((*(void *)(v49 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
    }
  }
LABEL_18:
  uint64_t v33 = *v39;
  *(void *)(*v39 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = outlined init with take of UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?(a1, *(void *)(v33 + 48) + *(void *)(v43 + 72) * a2);
  uint64_t v35 = *(void *)(v33 + 16);
  BOOL v36 = __OFADD__(v35, 1);
  uint64_t v37 = v35 + 1;
  if (v36)
  {
    __break(1u);
LABEL_21:
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v12, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v19, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
LABEL_22:
    uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    *(void *)(v33 + 16) = v37;
  }
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, unint64_t a2, char a3)
{
  char v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_29;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_29;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = ~v9;
    do
    {
      if (*(unsigned char *)(*(void *)(v8 + 48) + a2))
      {
        if (*(unsigned char *)(*(void *)(v8 + 48) + a2) == 1)
        {
          uint64_t v11 = 0x654E646E41646E65;
          unint64_t v12 = 0xED00006C6C614377;
        }
        else
        {
          uint64_t v11 = 0x4E646E41646C6F68;
          unint64_t v12 = 0xEE006C6C61437765;
        }
      }
      else
      {
        unint64_t v12 = 0xE300000000000000;
        uint64_t v11 = 6579297;
      }
      if (v5)
      {
        uint64_t v13 = v5 == 1 ? 0x654E646E41646E65 : 0x4E646E41646C6F68;
        unint64_t v14 = v5 == 1 ? 0xED00006C6C614377 : 0xEE006C6C61437765;
      }
      else
      {
        unint64_t v14 = 0xE300000000000000;
        uint64_t v13 = 6579297;
      }
      if (v11 == v13 && v12 == v14) {
        goto LABEL_32;
      }
      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (v16) {
        goto LABEL_33;
      }
      a2 = (a2 + 1) & v10;
    }
    while (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_29:
  uint64_t v17 = *v21;
  *(void *)(*v21 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(unsigned char *)(*(void *)(v17 + 48) + a2) = v5;
  uint64_t v18 = *(void *)(v17 + 16);
  BOOL v19 = __OFADD__(v18, 1);
  uint64_t v20 = v18 + 1;
  if (!v19)
  {
    *(void *)(v17 + 16) = v20;
    return result;
  }
  __break(1u);
LABEL_32:
  swift_bridgeObjectRelease_n();
LABEL_33:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unsigned char *storeEnumTagSinglePayload for CallControlUsoIdentifiers.FloatSettingName(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

PhoneCallFlowDelegatePlugin::CallControlUsoIdentifiers::FloatSettingName_optional protocol witness for UsoVocIdentifier.init(rawValue:) in conformance CallControlUsoIdentifiers.FloatSettingName@<W0>(uint64_t a1@<X0>, PhoneCallFlowDelegatePlugin::CallControlUsoIdentifiers::FloatSettingName_optional *a2@<X8>)
{
  result.value = CallControlUsoIdentifiers.FloatSettingName.init(rawValue:)(*(Swift::String *)&a1).value;
  a2->value = result.value;
  return result;
}

PhoneCallFlowDelegatePlugin::CallControlUsoIdentifiers::FloatSettingName_optional __swiftcall CallControlUsoIdentifiers.FloatSettingName.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of CallControlUsoIdentifiers.FloatSettingName.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return (PhoneCallFlowDelegatePlugin::CallControlUsoIdentifiers::FloatSettingName_optional)3;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::CallControlUsoIdentifiers::FloatSettingName_optional)v3;
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PhoneCallControlNLIntent.Target()
{
  return PhoneCallControlNLIntent.Target.description.getter(*v0);
}

uint64_t PhoneCallControlNLIntent.Target.description.getter(char a1)
{
  uint64_t result = 0x6172656D6163;
  switch(a1)
  {
    case 1:
      uint64_t result = OUTLINED_FUNCTION_13_60();
      break;
    case 2:
      uint64_t result = OUTLINED_FUNCTION_7_90();
      break;
    case 3:
      uint64_t result = OUTLINED_FUNCTION_66_2();
      break;
    case 4:
      uint64_t result = 0x656D756C6F76;
      break;
    default:
      return result;
  }
  return result;
}

Swift::Void __swiftcall UsoEntityBuilderNameContaining.setName(value:identifiers:)(Swift::String value, Swift::OpaquePointer identifiers)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  (*(void (**)(uint64_t, void *))(v3 + 16))(value._countAndFlagsBits, value._object);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v5, v4))
  {
    uint64_t v7 = *((void *)identifiers._rawValue + 2);
    if (v7)
    {
      uint64_t v8 = type metadata accessor for UsoIdentifier();
      OUTLINED_FUNCTION_19_0(v8);
      uint64_t v10 = (char *)identifiers._rawValue
          + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
      uint64_t v12 = *(void *)(v11 + 72);
      swift_bridgeObjectRetain();
      do
      {
        dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)();
        v10 += v12;
        --v7;
      }
      while (v7);
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
    }
  }
}

uint64_t protocol witness for UsoEntityBuilderNameContaining.name.getter in conformance UsoEntityBuilder_common_Group()
{
  return dispatch thunk of UsoEntityBuilder_common_Group.name.getter();
}

uint64_t protocol witness for UsoEntityBuilderNameContaining.setName(value:) in conformance UsoEntityBuilder_common_Group()
{
  return dispatch thunk of UsoEntityBuilder_common_Group.setName(value:)();
}

uint64_t protocol witness for UsoEntityBuilderNameContaining.name.getter in conformance UsoEntityBuilder_common_Person()
{
  return dispatch thunk of UsoEntityBuilder_common_Person.name.getter();
}

unint64_t variable initialization expression of SearchCallHistoryBinaryButtonModel.responseViewId()
{
  return OUTLINED_FUNCTION_10_2(33);
}

unint64_t variable initialization expression of SingleResultCallHistoryModel.responseViewId()
{
  return OUTLINED_FUNCTION_10_2(23);
}

void *default argument 1 of INIdentifyIncomingCallerIntentResponse.init(statusCode:callRecords:)()
{
  return &_swiftEmptyArrayStorage;
}

unint64_t variable initialization expression of SingleResultVoicemailModel.responseViewId()
{
  return OUTLINED_FUNCTION_10_2(21);
}

uint64_t variable initialization expression of PlayVoicemailModel.responseViewId()
{
  return 0x63696F5679616C50;
}

uint64_t variable initialization expression of SingleVoicemailModel.responseViewId()
{
  return 0x6F56656C676E6953;
}

unint64_t variable initialization expression of SingleCallRecordModel.responseViewId()
{
  return OUTLINED_FUNCTION_10_2(16);
}

uint64_t default argument 1 of ContactUnsetRelationshipFlowStrategy.init(sharedGlobals:contactStore:labelTemplates:unsetRelationshipTemplates:displayTextCatFamily:phoneCallCommonCats:)@<X0>(void *a1@<X8>)
{
  id v2 = [objc_allocWithZone((Class)CNContactStore) init];
  uint64_t result = type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for CNContactStore);
  a1[3] = result;
  a1[4] = &protocol witness table for CNContactStore;
  *a1 = v2;
  return result;
}

double default argument 2 of ContactUnsetRelationshipFlowStrategy.init(sharedGlobals:contactStore:labelTemplates:unsetRelationshipTemplates:displayTextCatFamily:phoneCallCommonCats:)@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = &type metadata for LabelTemplatesProvider;
  *(void *)(a1 + 32) = &protocol witness table for LabelTemplatesProvider;
  uint64_t v1 = OUTLINED_FUNCTION_65();
  return OUTLINED_FUNCTION_47_1(v1);
}

uint64_t default argument 3 of ContactUnsetRelationshipFlowStrategy.init(sharedGlobals:contactStore:labelTemplates:unsetRelationshipTemplates:displayTextCatFamily:phoneCallCommonCats:)@<X0>(uint64_t *a1@<X8>)
{
  return default argument 3 of ContactUnsetRelationshipFlowStrategy.init(sharedGlobals:contactStore:labelTemplates:unsetRelationshipTemplates:displayTextCatFamily:phoneCallCommonCats:)((uint64_t (*)(void))type metadata accessor for UnsetRelationshipTemplatesWrapper, (uint64_t)&protocol witness table for UnsetRelationshipTemplatesWrapper, a1);
}

uint64_t default argument 6 of static StartCallViewBuilders.makeDefaultDisambiguationBuilder<A>(app:intent:parameterName:disambiguationList:deviceIsLocked:sharedGlobals:displayTextCats:)(uint64_t a1, uint64_t a2)
{
  return default argument 4 of ContactUnsetRelationshipFlowStrategy.init(sharedGlobals:contactStore:labelTemplates:unsetRelationshipTemplates:displayTextCatFamily:phoneCallCommonCats:)(a1, a2, (void (*)(uint64_t))type metadata accessor for PhoneCallDisplayTextCATs, (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

uint64_t default argument 4 of IncomingCallActionConfirmationStrategy.init(incomingCallIntentResponse:incomingCallCats:sharedGlobals:announceCallsContext:phoneCommonCats:phoneCallCommonCatPatterns:)(uint64_t a1, uint64_t a2)
{
  return default argument 4 of ContactUnsetRelationshipFlowStrategy.init(sharedGlobals:contactStore:labelTemplates:unsetRelationshipTemplates:displayTextCatFamily:phoneCallCommonCats:)(a1, a2, (void (*)(uint64_t))type metadata accessor for PhoneCallCommonCATs, (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

unint64_t default argument 0 of PhoneCallBaseCatTemplatingService.init(ducFamily:sharedGlobals:displayTextCats:phoneCallCommonCats:appInfoBuilder:labelTemplating:startCallCats:)()
{
  return OUTLINED_FUNCTION_10_2(16);
}

uint64_t default argument 6 of PhoneCallBaseCatTemplatingService.init(ducFamily:sharedGlobals:displayTextCats:phoneCallCommonCats:appInfoBuilder:labelTemplating:startCallCats:)(uint64_t a1, uint64_t a2)
{
  return default argument 6 of PhoneCallBaseCatTemplatingService.init(ducFamily:sharedGlobals:displayTextCats:phoneCallCommonCats:appInfoBuilder:labelTemplating:startCallCats:)(a1, a2, (void (*)(uint64_t))type metadata accessor for StartCallCATs, (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

uint64_t default argument 3 of UnsupportedFaceTimeOutputProvider.init(unsupportedPhoneCall:sharedGlobals:startCallCats:startCallCATsSimple:phoneCallDisplayTextCATsSimple:unsupportedFlowCats:labelTemplates:)()
{
  return default argument 1 of static CommonOutputs.genericError(sharedGlobals:startCallCATsSimple:)((void (*)(uint64_t))type metadata accessor for StartCallCATsSimple, (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
}

Swift::Bool (__swiftcall *default argument 1 of FirstPartyAnnotatedAppStore.init(featureManager:appExistsPredicate:)())(Swift::String appBundleId)
{
  return AnnotatedAppFinder.isInstalledOnDevice(appBundleId:);
}

void specialized _arrayForceCast<A, B>(_:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    OUTLINED_FUNCTION_32_3();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  }
  if (v2)
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    if (v2 < 0)
    {
      __break(1u);
    }
    else
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if ((a1 & 0xC000000000000001) != 0) {
          specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v4 = *(id *)(a1 + 8 * i + 32);
        }
        type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INPerson);
        swift_dynamicCast();
        uint64_t v5 = v8;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v5 = v8;
        }
        unint64_t v6 = v5[2];
        if (v6 >= v5[3] >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v5 = v8;
        }
        void v5[2] = v6 + 1;
        outlined init with take of Any(&v7, &v5[4 * v6 + 4]);
      }
    }
  }
}

void *specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v4 = a1 + 32;
    uint64_t v2 = _swiftEmptyArrayStorage;
    do
    {
      outlined init with copy of SignalProviding(v4, (uint64_t)v7);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SignalProviding);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AppSelectionSignalComponent);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v2 = v9;
      }
      unint64_t v5 = v2[2];
      if (v5 >= v2[3] >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v2 = v9;
      }
      v2[2] = v5 + 1;
      outlined init with take of AppSelectionSignalComponent(&v8, (uint64_t)&v2[5 * v5 + 4]);
      v4 += 40;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void specialized _arrayForceCast<A, B>(_:)()
{
  OUTLINED_FUNCTION_24_0();
  unint64_t v1 = v0;
  if (v0 >> 62)
  {
    OUTLINED_FUNCTION_32_3();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((char *)&dword_10 + (v0 & 0xFFFFFFFFFFFFFF8));
  }
  if (!v2)
  {
LABEL_14:
    OUTLINED_FUNCTION_26_1();
    return;
  }
  OUTLINED_FUNCTION_43_1();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v2 & 0x8000000000000000) == 0)
  {
    uint64_t v3 = 0;
    do
    {
      if ((v1 & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      uint64_t v4 = type metadata accessor for PhoneCallNLv4Contact();
      uint64_t v5 = OUTLINED_FUNCTION_42_0(v4);
      if (v7)
      {
        OUTLINED_FUNCTION_49_1(v6);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v8 = v18[3];
      }
      else
      {
        uint64_t v8 = v5;
      }
      ++v3;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v18, v8);
      OUTLINED_FUNCTION_1();
      __chkstk_darwin(v9);
      uint64_t v11 = OUTLINED_FUNCTION_20_4(v10, v18[0]);
      v12(v11);
      uint64_t v13 = OUTLINED_FUNCTION_51();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v14, v15, v16, v17);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    }
    while (v2 != v3);
    goto LABEL_14;
  }
  __break(1u);
}

{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *);
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18[6];

  OUTLINED_FUNCTION_24_0();
  unint64_t v1 = v0;
  if (v0 >> 62)
  {
    OUTLINED_FUNCTION_32_3();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((char *)&dword_10 + (v0 & 0xFFFFFFFFFFFFFF8));
  }
  if (!v2)
  {
LABEL_14:
    OUTLINED_FUNCTION_26_1();
    return;
  }
  OUTLINED_FUNCTION_43_1();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v2 & 0x8000000000000000) == 0)
  {
    uint64_t v3 = 0;
    do
    {
      if ((v1 & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      uint64_t v4 = type metadata accessor for UsoEntity_common_Group();
      uint64_t v5 = OUTLINED_FUNCTION_42_0(v4);
      if (v7)
      {
        OUTLINED_FUNCTION_49_1(v6);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v8 = v18[3];
      }
      else
      {
        uint64_t v8 = v5;
      }
      ++v3;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v18, v8);
      OUTLINED_FUNCTION_1();
      __chkstk_darwin(v9);
      uint64_t v11 = OUTLINED_FUNCTION_20_4(v10, v18[0]);
      v12(v11);
      uint64_t v13 = OUTLINED_FUNCTION_51();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v14, v15, v16, v17);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    }
    while (v2 != v3);
    goto LABEL_14;
  }
  __break(1u);
}

uint64_t variable initialization expression of PhoneFlow.typeName()
{
  return 0x6F6C46656E6F6850;
}

unint64_t variable initialization expression of PlayVoiceMailAction.debugDescription()
{
  return OUTLINED_FUNCTION_10_2(19);
}

uint64_t default argument 4 of ReadVoiceMailAction.init(paginatedCallRecord:intent:intentResponse:aceServiceInvoker:searchCallHistoryCatFamily:)()
{
  return default argument 1 of static CommonOutputs.genericError(sharedGlobals:startCallCATsSimple:)((void (*)(uint64_t))type metadata accessor for SearchCallHistoryCATs, (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

uint64_t default argument 9 of static ReferenceContactResolutionWrapper.resolveUpdateSKIntent(siriKitIntent:contactQueries:hasEmergencyContact:app:nlIntent:sharedGlobals:multicardinalIndex:siriKitEventSender:emergencyContactResolution:contactGroupResolver:)@<X0>(uint64_t *a1@<X8>)
{
  return default argument 5 of static HangUpCallIntentConversion.convertToIntent(phoneCallNLIntent:app:sharedGlobals:previousIntent:previousIntentResponse:groupResolver:)((uint64_t (*)(void))&type metadata accessor for ContactGroupResolver, (uint64_t)&protocol witness table for ContactGroupResolver, (uint64_t (*)(void))&ContactGroupResolver.init(), a1);
}

uint64_t variable initialization expression of IncomingCallActionConfirmationStrategy.confirmationSynonymMap()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(FollowUpOfferType, Set<PhoneCallVerb>)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_467710;
  *(unsigned char *)(inited + 32) = 2;
  *(void *)(inited + 40) = specialized Set.init(_nonEmptyArrayLiteral:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<PhoneCallVerb>);
  lazy protocol witness table accessor for type FollowUpOfferType and conformance FollowUpOfferType();
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t default argument 5 of IncomingCallActionConfirmationStrategy.init(incomingCallIntentResponse:incomingCallCats:sharedGlobals:announceCallsContext:phoneCommonCats:phoneCallCommonCatPatterns:)@<X0>(uint64_t *a1@<X8>)
{
  return default argument 5 of IncomingCallActionConfirmationStrategy.init(incomingCallIntentResponse:incomingCallCats:sharedGlobals:announceCallsContext:phoneCommonCats:phoneCallCommonCatPatterns:)((uint64_t (*)(uint64_t))type metadata accessor for PhoneCallCommonCATPatternsExecutor, (uint64_t)&protocol witness table for PhoneCallCommonCATPatternsExecutor, a1);
}

uint64_t default argument 1 of static CommonOutputs.promptCancelled(sharedGlobals:phoneCallCommonCATsSimple:)()
{
  return default argument 1 of static CommonOutputs.genericError(sharedGlobals:startCallCATsSimple:)((void (*)(uint64_t))type metadata accessor for PhoneCallCommonCATsSimple, (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v5 = *v3++;
      uint64_t v4 = v5;
      if ((v5 & ~v2) == 0) {
        uint64_t v4 = 0;
      }
      v2 |= v4;
      --v1;
    }
    while (v1);
  }
  else
  {
    uint64_t v2 = 0;
  }
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t default argument 2 of static PhoneCallRecord.getBuilder(callRecord:options:appInfoBuilder:locale:)@<X0>(uint64_t *a1@<X8>)
{
  return default argument 2 of static PhoneContactDisplayHintFactory.build(for:deviceState:appInfoBuilder:)((uint64_t (*)(void))type metadata accessor for AppInfoBuilder, (uint64_t)&protocol witness table for AppInfoBuilder, a1);
}

uint64_t default argument 1 of AddOrCallPromptForValueStrategy.init(sharedGlobals:ongoingCallCats:ongoingCallCATsSimple:phoneCallDisplayTextCATsSimple:responseGenerator:)()
{
  return default argument 1 of static CommonOutputs.genericError(sharedGlobals:startCallCATsSimple:)((void (*)(uint64_t))type metadata accessor for OngoingCallCATs, (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

uint64_t default argument 2 of AddOrCallPromptForValueStrategy.init(sharedGlobals:ongoingCallCats:ongoingCallCATsSimple:phoneCallDisplayTextCATsSimple:responseGenerator:)()
{
  return default argument 1 of static CommonOutputs.genericError(sharedGlobals:startCallCATsSimple:)((void (*)(uint64_t))type metadata accessor for OngoingCallCATsSimple, (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
}

uint64_t default argument 4 of UnsupportedFaceTimeOutputProvider.init(unsupportedPhoneCall:sharedGlobals:startCallCats:startCallCATsSimple:phoneCallDisplayTextCATsSimple:unsupportedFlowCats:labelTemplates:)()
{
  return default argument 1 of static CommonOutputs.genericError(sharedGlobals:startCallCATsSimple:)((void (*)(uint64_t))type metadata accessor for PhoneCallDisplayTextCATsSimple, (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
}

unint64_t variable initialization expression of ReadVoiceMailAction.debugDescription()
{
  return OUTLINED_FUNCTION_10_2(19);
}

uint64_t default argument 2 of AnnounceDropInCallFlow.init(announcementType:sharedGlobals:announceCallBellCatPatterns:responseGenerator:)@<X0>(uint64_t *a1@<X8>)
{
  return default argument 2 of AnnounceDropInCallFlow.init(announcementType:sharedGlobals:announceCallBellCatPatterns:responseGenerator:)((uint64_t (*)(uint64_t))type metadata accessor for AnnounceCallBellCATPatternsExecutor, (uint64_t)&protocol witness table for AnnounceCallBellCATPatternsExecutor, a1);
}

BOOL specialized OptionSet<>.contains(_:)(uint64_t a1, uint64_t a2)
{
  return (a1 & ~a2) == 0;
}

unint64_t variable initialization expression of PhoneCallFeatureFlags._forceCallsToHandle()
{
  return OUTLINED_FUNCTION_66(18);
}

unint64_t variable initialization expression of PhoneCallFeatureFlags._forceTrialFeatureOff()
{
  return OUTLINED_FUNCTION_66(20);
}

uint64_t variable initialization expression of PhoneCallFeatureFlags._siriInCallFlag()
{
  return variable initialization expression of PhoneCallFeatureFlags._siriInCallFlag((uint64_t)&type metadata for SiriInCallFeature, (uint64_t (*)(void))lazy protocol witness table accessor for type SiriInCallFeature and conformance SiriInCallFeature);
}

uint64_t variable initialization expression of PhoneCallFeatureFlags._siriLagunaFlag()
{
  return variable initialization expression of PhoneCallFeatureFlags._siriInCallFlag((uint64_t)&type metadata for TelephonyUtilitiesFeature, (uint64_t (*)(void))lazy protocol witness table accessor for type TelephonyUtilitiesFeature and conformance TelephonyUtilitiesFeature);
}

uint64_t variable initialization expression of PhoneCallFeatureFlags._faceTimeUninstallFlag()
{
  return variable initialization expression of PhoneCallFeatureFlags._siriInCallFlag((uint64_t)&type metadata for IDSFeature, (uint64_t (*)(void))lazy protocol witness table accessor for type IDSFeature and conformance IDSFeature);
}

uint64_t variable initialization expression of PhoneCallFeatureFlags._forcedAppDisambiguationFlag()
{
  return variable initialization expression of PhoneCallFeatureFlags._forcedAppDisambiguationFlag(3);
}

uint64_t variable initialization expression of PhoneCallFeatureFlags._smartEnoughAppSelectionFlag()
{
  return variable initialization expression of PhoneCallFeatureFlags._forcedAppDisambiguationFlag(4);
}

uint64_t variable initialization expression of PhoneCallFeatureFlags._answerCallNotificationOnLockedScreenFlag()
{
  return variable initialization expression of PhoneCallFeatureFlags._forcedAppDisambiguationFlag(6);
}

uint64_t variable initialization expression of PhoneCallFeatureFlags._hsAnswerCallNotificationFlag()
{
  return variable initialization expression of PhoneCallFeatureFlags._forcedAppDisambiguationFlag(8);
}

uint64_t variable initialization expression of PhoneCallFeatureFlags._quickStopCallBellFlag()
{
  return variable initialization expression of PhoneCallFeatureFlags._siriInCallFlag((uint64_t)&type metadata for SiriPlaybackControlFeature, (uint64_t (*)(void))lazy protocol witness table accessor for type SiriPlaybackControlFeature and conformance SiriPlaybackControlFeature);
}

uint64_t variable initialization expression of PhoneCallFeatureFlags._cancelCallBellFlag()
{
  return variable initialization expression of PhoneCallFeatureFlags._forcedAppDisambiguationFlag(11);
}

uint64_t variable initialization expression of PhoneCallFeatureFlags._pommesGeoSearchFlag()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureFlagsKey>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_467720;
  *(void *)(v0 + 56) = &type metadata for SiriPhoneFeature;
  *(void *)(v0 + 64) = lazy protocol witness table accessor for type SiriPhoneFeature and conformance SiriPhoneFeature();
  *(unsigned char *)(v0 + 32) = 5;
  *(void *)(v0 + 96) = &type metadata for PommesFeature;
  *(void *)(v0 + 104) = lazy protocol witness table accessor for type PommesFeature and conformance PommesFeature();
  return v0;
}

uint64_t variable initialization expression of PhoneCallFeatureFlags._shouldEnableCompositionFlow()
{
  return variable initialization expression of PhoneCallFeatureFlags._forcedAppDisambiguationFlag(7);
}

uint64_t variable initialization expression of PhoneCallFeatureFlags._shouldEnableSRRRefactor()
{
  return variable initialization expression of PhoneCallFeatureFlags._forcedAppDisambiguationFlag(9);
}

uint64_t variable initialization expression of PhoneCallFeatureFlags._useEntitySpansForBusinessCallFlag()
{
  return variable initialization expression of PhoneCallFeatureFlags._forcedAppDisambiguationFlag(10);
}

uint64_t variable initialization expression of PhoneCallFeatureFlags._shouldEnableCompositionFlowForAllLocales()
{
  return variable initialization expression of PhoneCallFeatureFlags._forcedAppDisambiguationFlag(12);
}

uint64_t variable initialization expression of PhoneCallFeatureFlags._forcedAppDisambiguationFlag(char a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureFlagsKey>);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_467710;
  *(void *)(v2 + 56) = &type metadata for SiriPhoneFeature;
  *(void *)(v2 + 64) = lazy protocol witness table accessor for type SiriPhoneFeature and conformance SiriPhoneFeature();
  *(unsigned char *)(v2 + 32) = a1;
  return v2;
}

uint64_t variable initialization expression of PhoneCallFeatureFlags._protectedAppsFlag()
{
  return variable initialization expression of PhoneCallFeatureFlags._siriInCallFlag((uint64_t)&type metadata for AppProtection, (uint64_t (*)(void))lazy protocol witness table accessor for type AppProtection and conformance AppProtection);
}

uint64_t variable initialization expression of PhoneCallFeatureFlags._siriInCallFlag(uint64_t a1, uint64_t (*a2)(void))
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureFlagsKey>);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_467710;
  *(void *)(v4 + 56) = a1;
  *(void *)(v4 + 64) = a2();
  return v4;
}

void variable initialization expression of PhoneCallControlNLTransformer.logPrefix()
{
}

uint64_t default argument 0 of PhoneCallControlNLTransformer.init(cacheProvider:)()
{
  OUTLINED_FUNCTION_37_1();
  type metadata accessor for SingleIntentCacheProvider();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_467730;
  return OUTLINED_FUNCTION_46_2(v0, (uint64_t)&protocol witness table for SingleIntentCacheProvider);
}

void *default argument 0 of AppSelectionUserPersonaCollector.init(userPersonaSignal:)()
{
  uint64_t v0 = type metadata accessor for SignalComputationContext();
  OUTLINED_FUNCTION_1();
  uint64_t v2 = v1;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DomainUseCase>);
  uint64_t v6 = type metadata accessor for DomainUseCase();
  OUTLINED_FUNCTION_1();
  uint64_t v8 = v7;
  unint64_t v9 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_467710;
  (*(void (**)(unint64_t, void, uint64_t))(v8 + 104))(v10 + v9, enum case for DomainUseCase.phoneCall(_:), v6);
  OUTLINED_FUNCTION_7_8();
  SignalComputationContext.init(bundleIds:entityId:sharedUserId:domainUseCases:)();
  uint64_t v11 = static DomainUserPersonaSignal.instances(context:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v0);
  uint64_t v12 = specialized _arrayForceCast<A, B>(_:)(v11);
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t default argument 1 of AnswerCallOutputStrategy.init(device:incomingCallCats:announceCallsContext:audioSessionManager:entitlementChecker:)()
{
  return default argument 1 of static CommonOutputs.genericError(sharedGlobals:startCallCATsSimple:)((void (*)(uint64_t))type metadata accessor for AnswerCallCATsSimple, (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
}

void default argument 3 of IncomingCallActionHandleIntentFlowStrategy.init(strategy:sharedGlobals:callStateNotificationManager:audioSessionManager:sbsManager:)(uint64_t a1@<X8>)
{
}

void default argument 4 of AnswerCallOutputStrategy.init(device:incomingCallCats:announceCallsContext:audioSessionManager:entitlementChecker:)(uint64_t a1@<X8>)
{
}

uint64_t default argument 3 of ContactsSlotTemplating.init(deviceState:startCallCats:locale:appInfoBuilder:)()
{
  type metadata accessor for AppInfoBuilder();
  uint64_t v0 = OUTLINED_FUNCTION_35_2();
  return OUTLINED_FUNCTION_46_2(v0, (uint64_t)&protocol witness table for AppInfoBuilder);
}

uint64_t specialized DictionaryBackedCache.init(timeToLiveInSeconds:capacity:nowDateProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return specialized DictionaryBackedCache.init(timeToLiveInSeconds:capacity:nowDateProvider:)(a1, a2, a3, &demangling cache variable for type metadata for (value: AnnotatedApp?, expirationDate: Date), a4);
}

{
  return specialized DictionaryBackedCache.init(timeToLiveInSeconds:capacity:nowDateProvider:)(a1, a2, a3, &demangling cache variable for type metadata for (value: CallNotificationContextProvider.CallNotification?, expirationDate: Date), a4);
}

uint64_t specialized DictionaryBackedCache.init(timeToLiveInSeconds:capacity:nowDateProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, double a5)
{
  __swift_instantiateConcreteTypeFromMangledName(a4);
  *(void *)(v5 + 16) = Dictionary.init(minimumCapacity:)();
  *(double *)(v5 + 24) = a5;
  *(void *)(v5 + 32) = a1;
  *(void *)(v5 + 40) = a2;
  *(void *)(v5 + 48) = a3;
  return v5;
}

unint64_t variable initialization expression of YesNoConfirmationModel.responseViewId()
{
  return OUTLINED_FUNCTION_10_2(17);
}

uint64_t variable initialization expression of CallStateNotificationManager.tasks()
{
  type metadata accessor for UUID();
  type metadata accessor for CallStateOneTimeTask();
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);

  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t default argument 0 of IdentifyIncomingCallerOutputStrategy.init(incomingCallCats:)()
{
  return default argument 1 of static CommonOutputs.genericError(sharedGlobals:startCallCATsSimple:)((void (*)(uint64_t))type metadata accessor for IdentifyIncomingCallerCATsSimple, (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
}

void variable initialization expression of NLTransformer.logPrefix()
{
}

double variable initialization expression of NLTransformer.currentTransformation@<D0>(_OWORD *a1@<X8>)
{
  *a1 = 0u;
  a1[1] = 0u;
  *(void *)&double result = 1;
  a1[2] = xmmword_467740;
  return result;
}

uint64_t default argument 0 of PhoneCallFeatureManager.init(featureFlags:)@<X0>(uint64_t *a1@<X8>)
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  memcpy(v4, &static PhoneCallFeatureFlags.instance, sizeof(v4));
  a1[3] = (uint64_t)&type metadata for PhoneCallFeatureFlags;
  a1[4] = (uint64_t)&protocol witness table for PhoneCallFeatureFlags;
  uint64_t v2 = OUTLINED_FUNCTION_60_0();
  *a1 = v2;
  memcpy((void *)(v2 + 16), &static PhoneCallFeatureFlags.instance, 0xB0uLL);
  return outlined retain of PhoneCallFeatureFlags((uint64_t)v4);
}

uint64_t default argument 5 of AnnounceVoicemailReadingFlow.init(synchronousBurstIndex:voicemail:hintHistory:burstNotificationManager:sharedGlobals:announceVoicemailCats:)()
{
  return default argument 1 of static CommonOutputs.genericError(sharedGlobals:startCallCATsSimple:)((void (*)(uint64_t))type metadata accessor for AnnounceVoicemailCATs, (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

void variable initialization expression of SmartAppSelectionFeatureManager.logPrefix()
{
}

id default argument 0 of TrialSmartAppSelectionConfigProvider.init(trialConfigSource:)()
{
  id v0 = [self clientWithIdentifier:112];

  return v0;
}

uint64_t default argument 2 of SmartAppSelectionFeatureManager.init(sharedGlobals:trialSmartAppSelectionConfigProvider:diagnosticLogPermission:)()
{
  type metadata accessor for DiagnosticLogPermission();

  return swift_allocObject();
}

uint64_t variable initialization expression of ThirdPartyAnnotatedAppStore.cache()
{
  return variable initialization expression of ThirdPartyAnnotatedAppStore.cache(&demangling cache variable for type metadata for DictionaryBackedCache<String, AnnotatedApp>, &demangling cache variable for type metadata for (value: AnnotatedApp?, expirationDate: Date), 1.0);
}

uint64_t variable initialization expression of UnsupportedFlowSearchCallHistoryParameters.nonDefaultAppName()
{
  OUTLINED_FUNCTION_37_1();
  type metadata accessor for SpeakableString();
  uint64_t v0 = OUTLINED_FUNCTION_17_1();

  return __swift_storeEnumTagSinglePayload(v0, v1, v2, v3);
}

void variable initialization expression of ContinueReadingVoicemailFlow.logPrefix()
{
}

uint64_t variable initialization expression of CallNotificationContextProvider.cache()
{
  return variable initialization expression of ThirdPartyAnnotatedAppStore.cache(&demangling cache variable for type metadata for DictionaryBackedCache<String, CallNotificationContextProvider.CallNotification>, &demangling cache variable for type metadata for (value: CallNotificationContextProvider.CallNotification?, expirationDate: Date), 30.0);
}

uint64_t variable initialization expression of ThirdPartyAnnotatedAppStore.cache(uint64_t *a1, uint64_t *a2, double a3)
{
  return specialized DictionaryBackedCache.init(timeToLiveInSeconds:capacity:nowDateProvider:)(5, (uint64_t)closure #1 in default argument 2 of DictionaryBackedCache.init(timeToLiveInSeconds:capacity:nowDateProvider:), 0, a2, a3);
}

id default argument 3 of CallingIntentContinueInAppFlow.init(factory:rchRecord:sharedGlobals:deviceStateConnection:)()
{
  id v0 = objc_allocWithZone((Class)AFDeviceStateConnection);

  return [v0 init];
}

uint64_t default argument 1 of CallingIntentContinueInAppStrategy.init(sharedGlobals:startCallCATsSimple:phoneCallDisplayTextCATsSimple:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return default argument 1 of CallingIntentContinueInAppStrategy.init(sharedGlobals:startCallCATsSimple:phoneCallDisplayTextCATsSimple:)(a1, a2, a3, (void (*)(uint64_t))type metadata accessor for StartCallCATsSimple);
}

uint64_t default argument 2 of CallingIntentContinueInAppStrategy.init(sharedGlobals:startCallCATsSimple:phoneCallDisplayTextCATsSimple:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return default argument 1 of CallingIntentContinueInAppStrategy.init(sharedGlobals:startCallCATsSimple:phoneCallDisplayTextCATsSimple:)(a1, a2, a3, (void (*)(uint64_t))type metadata accessor for PhoneCallDisplayTextCATsSimple);
}

uint64_t default argument 1 of EmergencyContactSlotResolver.init(sharedGlobals:medicalIDStore:)@<X0>(void *a1@<X8>)
{
  id v2 = [objc_allocWithZone((Class)HKHealthStore) init];
  id v3 = [objc_allocWithZone((Class)HKMedicalIDStore) initWithHealthStore:v2];

  uint64_t result = type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for HKMedicalIDStore);
  a1[3] = result;
  a1[4] = &protocol witness table for HKMedicalIDStore;
  *a1 = v3;
  return result;
}

uint64_t default argument 1 of CallingIntentContinueInAppStrategy.init(sharedGlobals:startCallCATsSimple:phoneCallDisplayTextCATsSimple:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v5 = type metadata accessor for CATOption();
  uint64_t v6 = OUTLINED_FUNCTION_11_0(v5);
  __chkstk_darwin(v6);
  uint64_t v7 = OUTLINED_FUNCTION_16_6();
  a4(v7);
  static CATOption.defaultMode.getter();
  return CATWrapperSimple.__allocating_init(options:globals:)();
}

uint64_t default argument 1 of SearchCallHistoryHandleFlowStrategy.init(sharedGlobals:searchCallHistoryCATsSimple:)()
{
  return default argument 1 of static CommonOutputs.genericError(sharedGlobals:startCallCATsSimple:)((void (*)(uint64_t))type metadata accessor for SearchCallHistoryCATsSimple, (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
}

uint64_t default argument 3 of PhoneCallBaseCatTemplatingService.init(ducFamily:sharedGlobals:displayTextCats:phoneCallCommonCats:appInfoBuilder:labelTemplating:startCallCats:)(uint64_t a1, uint64_t a2)
{
  return default argument 6 of PhoneCallBaseCatTemplatingService.init(ducFamily:sharedGlobals:displayTextCats:phoneCallCommonCats:appInfoBuilder:labelTemplating:startCallCats:)(a1, a2, (void (*)(uint64_t))type metadata accessor for PhoneCallCommonCATs, (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

uint64_t default argument 2 of PhoneTCCFlowStrategy.init(sharedGlobals:phoneCallCommonCats:phoneCallCommonCatPatterns:labelTemplatesProvider:tccTemplatesProvider:appInfoBuilder:)()
{
  uint64_t v0 = type metadata accessor for CATOption();
  uint64_t v1 = OUTLINED_FUNCTION_11_0(v0);
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_16_6();
  type metadata accessor for PhoneCallCommonCATPatternsExecutor();
  static CATOption.defaultMode.getter();
  uint64_t v2 = CATWrapper.__allocating_init(options:globals:)();
  return OUTLINED_FUNCTION_55_0(v2, (uint64_t)&protocol witness table for PhoneCallCommonCATPatternsExecutor);
}

void default argument 4 of PhoneTCCFlowStrategy.init(sharedGlobals:phoneCallCommonCats:phoneCallCommonCatPatterns:labelTemplatesProvider:tccTemplatesProvider:appInfoBuilder:)(uint64_t a1@<X8>)
{
}

uint64_t default argument 1 of CallingIntentUnsupportedValueFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:phoneCallCommonCATs:phoneCallCommonCatPatterns:startCallCatsSimple:phoneCallDisplayTextCATsSimple:siriKitEventSender:appInfoBuilder:)(uint64_t a1, uint64_t a2)
{
  return default argument 4 of ContactUnsetRelationshipFlowStrategy.init(sharedGlobals:contactStore:labelTemplates:unsetRelationshipTemplates:displayTextCatFamily:phoneCallCommonCats:)(a1, a2, (void (*)(uint64_t))type metadata accessor for StartCallCATs, (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

uint64_t default argument 2 of CallingIntentUnsupportedValueFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:phoneCallCommonCATs:phoneCallCommonCatPatterns:startCallCatsSimple:phoneCallDisplayTextCATsSimple:siriKitEventSender:appInfoBuilder:)@<X0>(uint64_t *a1@<X8>)
{
  return default argument 5 of IncomingCallActionConfirmationStrategy.init(incomingCallIntentResponse:incomingCallCats:sharedGlobals:announceCallsContext:phoneCommonCats:phoneCallCommonCatPatterns:)(type metadata accessor for StartCallCATPatternsExecutor, (uint64_t)&protocol witness table for StartCallCATPatternsExecutor, a1);
}

uint64_t default argument 5 of CallingIntentUnsupportedValueFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:phoneCallCommonCATs:phoneCallCommonCatPatterns:startCallCatsSimple:phoneCallDisplayTextCATsSimple:siriKitEventSender:appInfoBuilder:)(uint64_t a1, uint64_t a2)
{
  return default argument 4 of ContactUnsetRelationshipFlowStrategy.init(sharedGlobals:contactStore:labelTemplates:unsetRelationshipTemplates:displayTextCatFamily:phoneCallCommonCats:)(a1, a2, (void (*)(uint64_t))type metadata accessor for StartCallCATsSimple, (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
}

uint64_t default argument 5 of CallingIntentBaseFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:startCallCATsSimple:phoneCallCommonCATs:phoneCallCommonCATsSimple:phoneCallCommonCatPatterns:phoneCallDisplayTextCATsSimple:responseGenerator:siriKitEventSender:appInfoBuilder:)(uint64_t a1, uint64_t a2)
{
  return default argument 4 of ContactUnsetRelationshipFlowStrategy.init(sharedGlobals:contactStore:labelTemplates:unsetRelationshipTemplates:displayTextCatFamily:phoneCallCommonCats:)(a1, a2, (void (*)(uint64_t))type metadata accessor for PhoneCallCommonCATsSimple, (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
}

uint64_t default argument 6 of CallingIntentUnsupportedValueFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:phoneCallCommonCATs:phoneCallCommonCatPatterns:startCallCatsSimple:phoneCallDisplayTextCATsSimple:siriKitEventSender:appInfoBuilder:)(uint64_t a1, uint64_t a2)
{
  return default argument 4 of ContactUnsetRelationshipFlowStrategy.init(sharedGlobals:contactStore:labelTemplates:unsetRelationshipTemplates:displayTextCatFamily:phoneCallCommonCats:)(a1, a2, (void (*)(uint64_t))type metadata accessor for PhoneCallDisplayTextCATsSimple, (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
}

uint64_t default argument 7 of InCallActionHandleIntentFlowStrategy.init(sharedGlobals:phoneCallBaseCatTemplatingService:aceViewProvider:nlContextProvider:canUseServerTTS:shouldShowDialogAfterIntentHandled:hangUpCallCATsSimple:responseGenerator:biomeEventSender:)()
{
  type metadata accessor for ResponseFactory();
  OUTLINED_FUNCTION_21_0();
  uint64_t v0 = ResponseFactory.init()();
  return OUTLINED_FUNCTION_55_0(v0, (uint64_t)&protocol witness table for ResponseFactory);
}

uint64_t default argument 8 of CallingIntentUnsupportedValueFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:phoneCallCommonCATs:phoneCallCommonCatPatterns:startCallCatsSimple:phoneCallDisplayTextCATsSimple:siriKitEventSender:appInfoBuilder:)@<X0>(uint64_t *a1@<X8>)
{
  return default argument 3 of ContactUnsetRelationshipFlowStrategy.init(sharedGlobals:contactStore:labelTemplates:unsetRelationshipTemplates:displayTextCatFamily:phoneCallCommonCats:)((uint64_t (*)(void))type metadata accessor for AppInfoBuilder, (uint64_t)&protocol witness table for AppInfoBuilder, a1);
}

uint64_t default argument 5 of IncomingCallActionConfirmationStrategy.init(incomingCallIntentResponse:incomingCallCats:sharedGlobals:announceCallsContext:phoneCommonCats:phoneCallCommonCatPatterns:)@<X0>(uint64_t (*a1)(uint64_t)@<X2>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for CATOption();
  uint64_t v7 = OUTLINED_FUNCTION_11_0(v6);
  __chkstk_darwin(v7);
  uint64_t v8 = OUTLINED_FUNCTION_8_7();
  uint64_t v9 = a1(v8);
  static CATOption.defaultMode.getter();
  uint64_t result = CATWrapper.__allocating_init(options:globals:)();
  a3[3] = v9;
  a3[4] = a2;
  *a3 = result;
  return result;
}

uint64_t default argument 3 of ContactUnsetRelationshipFlowStrategy.init(sharedGlobals:contactStore:labelTemplates:unsetRelationshipTemplates:displayTextCatFamily:phoneCallCommonCats:)@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v5 = a1(0);
  uint64_t result = swift_allocObject();
  a3[3] = v5;
  a3[4] = a2;
  *a3 = result;
  return result;
}

uint64_t default argument 2 of UnsupportedFaceTimeOutputProvider.init(unsupportedPhoneCall:sharedGlobals:startCallCats:startCallCATsSimple:phoneCallDisplayTextCATsSimple:unsupportedFlowCats:labelTemplates:)()
{
  return default argument 1 of static CommonOutputs.genericError(sharedGlobals:startCallCATsSimple:)((void (*)(uint64_t))type metadata accessor for StartCallCATs, (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

uint64_t default argument 6 of FaceTimeMessageControllerFlow.init(app:skIntent:intentResponse:sharedGlobals:state:startCallCATs:flowFinder:siriKitEventSender:)@<X0>(uint64_t *a1@<X8>)
{
  return default argument 2 of static PhoneContactDisplayHintFactory.build(for:deviceState:appInfoBuilder:)((uint64_t (*)(void))type metadata accessor for FlowFinder, (uint64_t)&protocol witness table for FlowFinder, a1);
}

uint64_t default argument 2 of IncomingCallActionHandleIntentFlowStrategy.init(strategy:sharedGlobals:callStateNotificationManager:audioSessionManager:sbsManager:)()
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for CallStateNotificationManager();
  OUTLINED_FUNCTION_48_1(v0, (uint64_t)&protocol witness table for CallStateNotificationManager);

  return swift_retain();
}

void default argument 4 of IncomingCallActionHandleIntentFlowStrategy.init(strategy:sharedGlobals:callStateNotificationManager:audioSessionManager:sbsManager:)(uint64_t a1@<X8>)
{
}

uint64_t default argument 2 of HangUpCallIntentRCHFlowStrategy.init(app:sharedGlobals:hangUpCallCATsSimple:responseGenerator:)()
{
  return default argument 1 of static CommonOutputs.genericError(sharedGlobals:startCallCATsSimple:)((void (*)(uint64_t))type metadata accessor for HangUpCallCATsSimple, (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
}

uint64_t default argument 6 of InCallActionHandleIntentFlowStrategy.init(sharedGlobals:phoneCallBaseCatTemplatingService:aceViewProvider:nlContextProvider:canUseServerTTS:shouldShowDialogAfterIntentHandled:hangUpCallCATsSimple:responseGenerator:biomeEventSender:)(uint64_t a1, uint64_t a2)
{
  return default argument 6 of PhoneCallBaseCatTemplatingService.init(ducFamily:sharedGlobals:displayTextCats:phoneCallCommonCats:appInfoBuilder:labelTemplating:startCallCats:)(a1, a2, (void (*)(uint64_t))type metadata accessor for HangUpCallCATsSimple, (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
}

id default argument 8 of InCallActionHandleIntentFlowStrategy.init(sharedGlobals:phoneCallBaseCatTemplatingService:aceViewProvider:nlContextProvider:canUseServerTTS:shouldShowDialogAfterIntentHandled:hangUpCallCATsSimple:responseGenerator:biomeEventSender:)@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  uint64_t v2 = (void *)static BiomeEventSender.instance;
  a1[3] = &type metadata for BiomeEventSender;
  a1[4] = &protocol witness table for BiomeEventSender;
  *a1 = v2;

  return v2;
}

uint64_t variable initialization expression of OngoingCallErrorFlowFactory.addCallParticipantCats()
{
  return default argument 1 of static CommonOutputs.genericError(sharedGlobals:startCallCATsSimple:)((void (*)(uint64_t))type metadata accessor for AddCallParticipantCATsSimple, (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
}

uint64_t default argument 6 of ParticipantOutputProvider.init(sharedGlobals:app:templatingService:cats:startCallCats:startCallCatPatterns:addCallParticipantCatPatterns:responseGenerator:crrOutputGenerator:)@<X0>(uint64_t *a1@<X8>)
{
  return default argument 2 of AnnounceDropInCallFlow.init(announcementType:sharedGlobals:announceCallBellCatPatterns:responseGenerator:)((uint64_t (*)(uint64_t))type metadata accessor for AddCallParticipantCATPatternsExecutor, (uint64_t)&protocol witness table for AddCallParticipantCATPatternsExecutor, a1);
}

uint64_t default argument 2 of ParticipantOutputProvider.init(sharedGlobals:app:cats:startCallCats:)()
{
  return default argument 1 of static CommonOutputs.genericError(sharedGlobals:startCallCATsSimple:)((void (*)(uint64_t))type metadata accessor for AddCallParticipantCATs, (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

Swift::Void (__swiftcall *default argument 1 of static OutputGenerationManifest.yesNoCallConfirmationManifest(model:_:)())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t variable initialization expression of AnnounceDropInCallFlow.completionOutputManifest()
{
  return variable initialization expression of UnsupportedCallFlowOutputFactory.completionOutputManifest();
}

uint64_t default argument 5 of UnsupportedFaceTimeOutputProvider.init(unsupportedPhoneCall:sharedGlobals:startCallCats:startCallCATsSimple:phoneCallDisplayTextCATsSimple:unsupportedFlowCats:labelTemplates:)()
{
  return default argument 1 of static CommonOutputs.genericError(sharedGlobals:startCallCATsSimple:)((void (*)(uint64_t))type metadata accessor for UnsupportedFlowCATs, (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

uint64_t default argument 2 of UnsupportedFeatureGuardFlow.init(check:sharedGlobals:unsupportedFlowCATsSimple:)()
{
  return default argument 1 of static CommonOutputs.genericError(sharedGlobals:startCallCATsSimple:)((void (*)(uint64_t))type metadata accessor for UnsupportedFlowCATsSimple, (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
}

uint64_t default argument 2 of PhoneCallBaseCatTemplatingService.init(ducFamily:sharedGlobals:displayTextCats:phoneCallCommonCats:appInfoBuilder:labelTemplating:startCallCats:)(uint64_t a1, uint64_t a2)
{
  return default argument 6 of PhoneCallBaseCatTemplatingService.init(ducFamily:sharedGlobals:displayTextCats:phoneCallCommonCats:appInfoBuilder:labelTemplating:startCallCats:)(a1, a2, (void (*)(uint64_t))type metadata accessor for PhoneCallDisplayTextCATs, (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

uint64_t default argument 6 of PhoneCallBaseCatTemplatingService.init(ducFamily:sharedGlobals:displayTextCats:phoneCallCommonCats:appInfoBuilder:labelTemplating:startCallCats:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t (*a4)(uint64_t, void))
{
  uint64_t v7 = type metadata accessor for CATOption();
  uint64_t v8 = OUTLINED_FUNCTION_11_0(v7);
  __chkstk_darwin(v8);
  uint64_t v9 = OUTLINED_FUNCTION_9_6();
  a3(v9);
  OUTLINED_FUNCTION_25_5();
  return a4(v4, 0);
}

uint64_t variable initialization expression of FaceTimeSettingsBuilder.phoneCallDisplayTextCATs()
{
  return default argument 1 of static CommonOutputs.genericError(sharedGlobals:startCallCATsSimple:)((void (*)(uint64_t))type metadata accessor for PhoneCallDisplayTextCATs, (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

uint64_t default argument 2 of SearchCallHistoryTemplatingService.init(sharedGlobals:displayTextCats:phoneCallCommonCats:searchCallHistoryCatFamily:startCallCatFamily:appInfoBuilder:labelTemplating:)()
{
  return default argument 1 of static CommonOutputs.genericError(sharedGlobals:startCallCATsSimple:)((void (*)(uint64_t))type metadata accessor for PhoneCallCommonCATs, (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

Swift::Bool (__swiftcall *default argument 0 of AnnotatedAppFinder.init(firstPartyAnnotatedAppStore:thirdPartyAnnotatedAppStore:)())(Swift::String appBundleId)
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  memcpy(__dst, &static PhoneCallFeatureFlags.instance, sizeof(__dst));
  type metadata accessor for PhoneCallFeatureManager();
  uint64_t v0 = OUTLINED_FUNCTION_57_1();
  uint64_t v12 = &type metadata for PhoneCallFeatureFlags;
  uint64_t v13 = &protocol witness table for PhoneCallFeatureFlags;
  uint64_t v1 = OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_44_1(v1, v2, v3, v4, v5, v6, v7, v8, v10, v11);
  outlined init with take of AppSelectionSignalComponent(&v11, v0 + 16);
  outlined retain of PhoneCallFeatureFlags((uint64_t)__dst);
  return AnnotatedAppFinder.isInstalledOnDevice(appBundleId:);
}

uint64_t default argument 1 of AnnotatedAppFinder.init(firstPartyAnnotatedAppStore:thirdPartyAnnotatedAppStore:)()
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for ThirdPartyAnnotatedAppStore();
  OUTLINED_FUNCTION_48_1(v0, (uint64_t)&protocol witness table for ThirdPartyAnnotatedAppStore);

  return swift_retain();
}

uint64_t default argument 4 of ContactUnsetRelationshipFlowStrategy.init(sharedGlobals:contactStore:labelTemplates:unsetRelationshipTemplates:displayTextCatFamily:phoneCallCommonCats:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t (*a4)(uint64_t, void))
{
  uint64_t v7 = type metadata accessor for CATOption();
  uint64_t v8 = OUTLINED_FUNCTION_11_0(v7);
  __chkstk_darwin(v8);
  uint64_t v9 = OUTLINED_FUNCTION_9_6();
  a3(v9);
  OUTLINED_FUNCTION_25_5();
  return a4(v4, 0);
}

uint64_t variable initialization expression of StartCallFlow.flowName()
{
  return 0x6C61437472617453;
}

uint64_t default argument 2 of UnsupportedCallControlIntentOutputProvider.init(intent:sharedGlobals:callControlCats:unsupportedCats:)()
{
  return default argument 1 of static CommonOutputs.genericError(sharedGlobals:startCallCATsSimple:)((void (*)(uint64_t))type metadata accessor for PhoneCallControlCATsSimple, (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
}

void variable initialization expression of PromptForValueAfterReadingVoicemailFlowStrategy.logPrefix()
{
}

void variable initialization expression of ReadCallRecordsYesNoPromptFlowStrategy.logPrefix()
{
}

uint64_t variable initialization expression of AppSelectionState.forcedDisambiguationShadowPrediction()
{
  OUTLINED_FUNCTION_37_1();
  type metadata accessor for AppResolverResult();
  uint64_t v0 = OUTLINED_FUNCTION_17_1();

  return __swift_storeEnumTagSinglePayload(v0, v1, v2, v3);
}

uint64_t default argument 0 of PhoneContactResolver.init(configCache:queryCache:resolver:)()
{
  type metadata accessor for ContactResolverConfigHashable();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ContactQuery]);
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type ContactResolverConfigHashable and conformance ContactResolverConfigHashable, (void (*)(uint64_t))type metadata accessor for ContactResolverConfigHashable);
  OUTLINED_FUNCTION_58_0();

  return Dictionary.init(minimumCapacity:)();
}

uint64_t default argument 1 of PhoneContactResolver.init(configCache:queryCache:resolver:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ContactQuery]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ResolvedSiriKitContact]);
  lazy protocol witness table accessor for type [ContactQuery] and conformance <A> [A]();
  OUTLINED_FUNCTION_58_0();

  return Dictionary.init(minimumCapacity:)();
}

uint64_t default argument 2 of PhoneContactResolver.init(configCache:queryCache:resolver:)@<X0>(uint64_t *a1@<X8>)
{
  return default argument 5 of static HangUpCallIntentConversion.convertToIntent(phoneCallNLIntent:app:sharedGlobals:previousIntent:previousIntentResponse:groupResolver:)((uint64_t (*)(void))&type metadata accessor for SiriKitContactResolver, (uint64_t)&protocol witness table for SiriKitContactResolver, (uint64_t (*)(void))&SiriKitContactResolver.init(), a1);
}

uint64_t default argument 1 of HangUpCallTemplatingService.init(sharedGlobals:hangUpCats:displayTextCats:phoneCallCommonCats:appInfoBuilder:)()
{
  return default argument 1 of static CommonOutputs.genericError(sharedGlobals:startCallCATsSimple:)((void (*)(uint64_t))type metadata accessor for HangUpCallCATs, (uint64_t (*)(uint64_t, void))&CATWrapper.__allocating_init(options:globals:));
}

void variable initialization expression of PhoneAppResolutionHelper.logPrefix()
{
}

uint64_t default argument 4 of PhoneAppResolutionHelper.init(sharedGlobals:eligibleAppsFinder:smartAppSelection:phoneAppResolutionLogger:appUsageProvider:appResolver:)()
{
  type metadata accessor for AppUsageProvider();

  return swift_allocObject();
}

uint64_t default argument 5 of PhoneAppResolutionHelper.init(sharedGlobals:eligibleAppsFinder:smartAppSelection:phoneAppResolutionLogger:appUsageProvider:appResolver:)()
{
  return AppResolver.init(appResolutionRules:)();
}

void variable initialization expression of IntentConversionFlow.logPrefix()
{
}

uint64_t default argument 6 of StartCallCatTemplatingService.init(sharedGlobals:startCallCats:displayTextCats:phoneCallCommonCats:unsupportedFlowCats:appInfoBuilder:operationManager:)()
{
  return default argument 6 of StartCallCatTemplatingService.init(sharedGlobals:startCallCats:displayTextCats:phoneCallCommonCats:unsupportedFlowCats:appInfoBuilder:operationManager:)((void (*)(void))type metadata accessor for TemplatingOperationManager, 56, (uint64_t (*)(void))TemplatingOperationManager.init());
}

uint64_t CallingIntentContinueInAppStrategy.shouldCheckResponseModeToOutputIntentHandledDialog.getter()
{
  return 1;
}

uint64_t default argument 1 of TemplatingParallelizer.init(name:timeout:qos:)@<X0>(void *a1@<X8>)
{
  *a1 = 500;
  uint64_t v2 = enum case for DispatchTimeInterval.milliseconds(_:);
  type metadata accessor for DispatchTimeInterval();
  OUTLINED_FUNCTION_15();
  int v5 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v4 + 104);

  return v5(a1, v2, v3);
}

id variable initialization expression of BiomeEventSender.discoverabilitySource()
{
  id v0 = [(id)BiomeLibrary() Discoverability];
  swift_unknownObjectRelease();
  id v1 = [v0 Signals];
  swift_unknownObjectRelease();
  id v2 = [v1 source];

  return v2;
}

uint64_t specialized OptionSet.union(_:)(uint64_t a1, uint64_t a2)
{
  return a2 | a1;
}

uint64_t default argument 9 of static ContactResolution.updateSiriKitIntent(siriKitIntent:contactQueries:hasEmergencyContact:app:locale:nlIntent:sharedGlobals:multicardinalIndex:siriKitEventSender:emergencyContactResolution:)()
{
  type metadata accessor for EmergencyContactResolution();

  return swift_allocObject();
}

uint64_t default argument 2 of SearchCallHistoryBaseFlowStrategy.init(sharedGlobals:responseGenerator:searchCallCatPatterns:appInfoBuilder:)@<X0>(uint64_t *a1@<X8>)
{
  return default argument 2 of AnnounceDropInCallFlow.init(announcementType:sharedGlobals:announceCallBellCatPatterns:responseGenerator:)(type metadata accessor for SearchCallHistoryCATPatternsExecutor, (uint64_t)&protocol witness table for SearchCallHistoryCATPatternsExecutor, a1);
}

unint64_t variable initialization expression of StartVideoCallFlow.flowName()
{
  return OUTLINED_FUNCTION_10_2(18);
}

unint64_t variable initialization expression of ContactConfirmationModel.responseViewId()
{
  return OUTLINED_FUNCTION_10_2(19);
}

double variable initialization expression of ContactConfirmationModel.phoneContactHeader@<D0>(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void variable initialization expression of VoicemailShouldPlayPromptFlowStrategy.logPrefix()
{
}

uint64_t default argument 4 of static NLv4IntentConversion.convertToIntent(parse:sharedGlobals:app:previousIntent:groupResolver:)()
{
  OUTLINED_FUNCTION_37_1();
  v0[3] = type metadata accessor for ContactGroupResolver();
  v0[4] = (uint64_t)&protocol witness table for ContactGroupResolver;
  __swift_allocate_boxed_opaque_existential_1(v0);
  return ContactGroupResolver.init()();
}

uint64_t default argument 4 of SearchCallHistorySharedGlobals.init(appInfoBuilder:searchCallCatPatterns:responseGenerator:phoneCommonCats:phoneCallCommonCatPatterns:callHistoryPromptDialogProvider:searchCallHistoryCATs:searchCallHistoryCATsSimple:phoneCallDisplayTextCATsSimple:)@<X0>(uint64_t *a1@<X8>)
{
  return default argument 2 of AnnounceDropInCallFlow.init(announcementType:sharedGlobals:announceCallBellCatPatterns:responseGenerator:)((uint64_t (*)(uint64_t))type metadata accessor for PhoneCallCommonCATPatternsExecutor, (uint64_t)&protocol witness table for PhoneCallCommonCATPatternsExecutor, a1);
}

uint64_t default argument 1 of AnnounceIncomingCallerOutputStrategy.init(announceCallsContext:incomingCallCats:)()
{
  return default argument 1 of static CommonOutputs.genericError(sharedGlobals:startCallCATsSimple:)((void (*)(uint64_t))type metadata accessor for AnnounceIncomingCallCATsSimple, (uint64_t (*)(uint64_t, void))&CATWrapperSimple.__allocating_init(options:globals:));
}

uint64_t variable initialization expression of UnsupportedCallFlowOutputFactory.completionOutputManifest()
{
  uint64_t v0 = type metadata accessor for DialogPhase();
  uint64_t v1 = OUTLINED_FUNCTION_11_0(v0);
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_41();
  return OUTLINED_FUNCTION_61_0();
}

void variable initialization expression of UnsupportedSearchParametersFlowStrategy.logPrefix()
{
}

uint64_t default argument 1 of NLTransformer.transformToAnyPhoneNLIntent(parse:callStateProvider:)@<X0>(uint64_t *a1@<X8>)
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  a1[3] = (uint64_t)&type metadata for CallStateProvider;
  a1[4] = (uint64_t)&protocol witness table for CallStateProvider;
  uint64_t v2 = swift_allocObject();
  *a1 = v2;

  return outlined init with copy of CallStateProvider((uint64_t)static CallStateProvider.instance, v2 + 16);
}

PhoneCallFlowDelegatePlugin::AnnounceVoicemailDirectAction::CodingKeys_optional __swiftcall AnnounceVoicemailDirectAction.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (PhoneCallFlowDelegatePlugin::AnnounceVoicemailDirectAction::CodingKeys_optional)4;
}

uint64_t variable initialization expression of PhoneCallDirectInvocationNLIntent.phoneCallNoun()
{
  return 9;
}

uint64_t variable initialization expression of PhoneCallDirectInvocationNLIntent.phoneCallReference()
{
  return 35;
}

uint64_t variable initialization expression of PhoneCallDirectInvocationNLIntent.phoneCallVerb()
{
  return 17;
}

uint64_t variable initialization expression of PhoneCallDirectInvocationNLIntent.voiceMailVerb()
{
  return 6;
}

uint64_t variable initialization expression of PhoneCallNLv4Contact.contactReference()
{
  return 38;
}

double variable initialization expression of PhoneCallNLv4Contact.personName@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = xmmword_467750;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  return result;
}

uint64_t variable initialization expression of PhoneCallNLv4Contact.emergencyType()
{
  return 0;
}

uint64_t variable initialization expression of PhoneCallNLv4Contact.searchQualifier()
{
  return 512;
}

double variable initialization expression of PhoneCallNLv4Contact.backingContact@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 40) = -1;
  return result;
}

uint64_t default argument 2 of static PhoneReferenceResolution.resolveEntity(_:referenceResolver:matchedResultsSetting:)@<X0>(uint64_t a1@<X8>)
{
  return default argument 2 of static PhoneReferenceResolution.resolveEntity(_:referenceResolver:matchedResultsSetting:)((unsigned int *)&enum case for MatchedResultsSetting.defaultMatching(_:), (void (*)(void))&type metadata accessor for MatchedResultsSetting, a1);
}

uint64_t default argument 5 of static HangUpCallIntentConversion.convertToIntent(phoneCallNLIntent:app:sharedGlobals:previousIntent:previousIntentResponse:groupResolver:)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t *a4@<X8>)
{
  a4[3] = a1(0);
  a4[4] = a2;
  __swift_allocate_boxed_opaque_existential_1(a4);
  return a3();
}

uint64_t variable initialization expression of ContactNeedsDisambiguationFlowStrategy.cachedPromptResponse()
{
  return 0;
}

void default argument 1 of HangUpAndCallHandleIntentStrategy.init(sharedGlobals:options:)()
{
}

unint64_t variable initialization expression of EmergencyCountdownModel.responseViewId()
{
  return OUTLINED_FUNCTION_10_2(23);
}

void variable initialization expression of SeasContactInSingleAppRule.logPrefix()
{
}

uint64_t variable initialization expression of ReaderNlIntent.traversableIntentNode()
{
  OUTLINED_FUNCTION_37_1();
  type metadata accessor for NonTerminalIntentNode();
  uint64_t v0 = OUTLINED_FUNCTION_17_1();

  return __swift_storeEnumTagSinglePayload(v0, v1, v2, v3);
}

uint64_t variable initialization expression of InCallActionHandleIntentFlowStrategy.completionOutputManifest()
{
  return variable initialization expression of CallingIntentBaseFlowStrategy.completionOutputManifest();
}

unint64_t variable initialization expression of HangUpTipGenerator.templateIdentifier()
{
  return OUTLINED_FUNCTION_10_2(19);
}

unint64_t default argument 0 of DIIdentifier.init(namespace:id:)()
{
  return OUTLINED_FUNCTION_10_2(37);
}

void variable initialization expression of CallHistoryPromptDialogProvider.logPrefix()
{
}

void variable initialization expression of SearchCallHistoryRCHFlowDelegate.logPrefix()
{
}

uint64_t variable initialization expression of CommunalDeviceEmergencyFlow._identifiedUser()
{
  return variable initialization expression of CommunalDeviceEmergencyFlow._identifiedUser((uint64_t)&unk_467760, &demangling cache variable for type metadata for SiriEnvironmentValue<IdentifiedUser>);
}

uint64_t key path getter for SiriEnvironment.userIdentity : SiriEnvironment@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SiriEnvironment.userIdentity.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for SiriEnvironment.userIdentity : SiriEnvironment()
{
  return SiriEnvironment.userIdentity.setter();
}

uint64_t key path getter for UserIdentityProvider.identifiedUser : UserIdentityProvider()
{
  return dispatch thunk of UserIdentityProvider.identifiedUser.getter();
}

uint64_t variable initialization expression of CommunalDeviceEmergencyFlow._multiUserState()
{
  return variable initialization expression of CommunalDeviceEmergencyFlow._identifiedUser((uint64_t)&unk_4677A8, &demangling cache variable for type metadata for SiriEnvironmentValue<MultiUserState>);
}

uint64_t variable initialization expression of CommunalDeviceEmergencyFlow._identifiedUser(uint64_t a1, uint64_t *a2)
{
  return SiriEnvironmentValue.init(_:)();
}

uint64_t key path getter for SiriEnvironment.currentRequest : SiriEnvironment@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SiriEnvironment.currentRequest.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for SiriEnvironment.currentRequest : SiriEnvironment()
{
  return SiriEnvironment.currentRequest.setter();
}

uint64_t key path getter for CurrentRequest.multiUserState : CurrentRequest()
{
  return CurrentRequest.multiUserState.getter();
}

NSNumber default argument 3 of SAUIColor.init(r:g:b:alpha:)()
{
  return NSNumber.init(integerLiteral:)(1);
}

void variable initialization expression of SingleCallResultFlow.logPrefix()
{
}

uint64_t default argument 5 of SearchCallHistorySharedGlobals.init(appInfoBuilder:searchCallCatPatterns:responseGenerator:phoneCommonCats:phoneCallCommonCatPatterns:callHistoryPromptDialogProvider:searchCallHistoryCATs:searchCallHistoryCATsSimple:phoneCallDisplayTextCATsSimple:)()
{
  return default argument 6 of StartCallCatTemplatingService.init(sharedGlobals:startCallCats:displayTextCats:phoneCallCommonCats:unsupportedFlowCats:appInfoBuilder:operationManager:)((void (*)(void))type metadata accessor for CallHistoryPromptDialogProvider, 48, (uint64_t (*)(void))CallHistoryPromptDialogProvider.init());
}

uint64_t default argument 6 of StartCallCatTemplatingService.init(sharedGlobals:startCallCats:displayTextCats:phoneCallCommonCats:unsupportedFlowCats:appInfoBuilder:operationManager:)(void (*a1)(void), uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

unint64_t variable initialization expression of ForeignEmergencyCallDisambiguationModel.responseViewId()
{
  return OUTLINED_FUNCTION_10_2(30);
}

unint64_t variable initialization expression of LocalEmergencyCallDisambiguationModel.responseViewId()
{
  return OUTLINED_FUNCTION_10_2(28);
}

uint64_t variable initialization expression of LazyContainer.queue()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  OUTLINED_FUNCTION_1();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  uint64_t v5 = OUTLINED_FUNCTION_40_1();
  uint64_t v6 = OUTLINED_FUNCTION_11_0(v5);
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_8_7();
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes();
  uint64_t v8 = OUTLINED_FUNCTION_11_0(v7);
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_53();
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v9._uint64_t countAndFlagsBits = 0x5F797A614CLL;
  v9._object = (void *)0xE500000000000000;
  String.append(_:)(v9);
  swift_getMetatypeMetadata();
  v10._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  String.append(_:)(v11);
  static OS_dispatch_queue.Attributes.concurrent.getter();
  static DispatchQoS.unspecified.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v0, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v1);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t variable initialization expression of LazyContainer.$__lazy_storage_$__value@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return __swift_storeEnumTagSinglePayload(a2, 1, 1, a1);
}

void variable initialization expression of EligibleAppFinder.queue()
{
}

{
  uint64_t v0;
  void (*v1)(void);
  void (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_24_0();
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  OUTLINED_FUNCTION_1();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_52();
  type metadata accessor for OS_dispatch_queue.Attributes();
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_53();
  uint64_t v8 = type metadata accessor for DispatchQoS();
  Swift::String v9 = OUTLINED_FUNCTION_11_0(v8);
  __chkstk_darwin(v9);
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v2();
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v0, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v3);
  OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  OUTLINED_FUNCTION_26_1();
}

void *variable initialization expression of EligibleAppFinder.taskMap()
{
  return &_swiftEmptyDictionarySingleton;
}

unint64_t variable initialization expression of ReadCallRecordAction.debugDescription()
{
  return OUTLINED_FUNCTION_10_2(20);
}

uint64_t variable initialization expression of PhoneCallBaseCatTemplatingService.voxDisambiguationPauseSeparator()
{
  return 0x3D65737561705C1BLL;
}

double variable initialization expression of PhoneAppSelectionSignalsGatherer.timeout()
{
  return 10.0;
}

id default argument 1 of PhoneAppResolutionLogger.init(sharedGlobals:messageStream:eligibleAppsFinder:)()
{
  id v0 = [self sharedAnalytics];
  id v1 = [v0 defaultMessageStream];

  return v1;
}

double variable initialization expression of SignalValueObject.doubleValue()
{
  return -1.0;
}

uint64_t variable initialization expression of IdiomKeyedHintHistory.idiomMap()
{
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();

  return Dictionary.init(dictionaryLiteral:)();
}

BOOL specialized SetAlgebra.isEmpty.getter(uint64_t a1)
{
  return a1 == 0;
}

unint64_t variable initialization expression of StartAudioCallFlow.flowName()
{
  return OUTLINED_FUNCTION_10_2(18);
}

id variable initialization expression of SiriPhoneDefaults.userDefaults()
{
  id v0 = objc_allocWithZone((Class)NSUserDefaults);
  return @nonobjc NSUserDefaults.init(suiteName:)(0xD000000000000014, 0x8000000000491380);
}

uint64_t variable initialization expression of CallingIntentBaseFlowStrategy.completionOutputManifest()
{
  uint64_t v0 = type metadata accessor for DialogPhase();
  uint64_t v1 = OUTLINED_FUNCTION_11_0(v0);
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_41();
  return OUTLINED_FUNCTION_61_0();
}

void variable initialization expression of SearchCallHistoryFlow.logPrefix()
{
}

uint64_t default argument 6 of SingleCallResultFlow.init(app:callRecord:intent:intentResponse:isIncomingCallFollowupPrompt:sharedGlobals:schGlobals:)@<X0>(void *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CATOption();
  uint64_t v4 = OUTLINED_FUNCTION_11_0(v3);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_9_6();
  type metadata accessor for AppInfoBuilder();
  uint64_t v5 = OUTLINED_FUNCTION_35_2();
  OUTLINED_FUNCTION_46_2(v5, (uint64_t)&protocol witness table for AppInfoBuilder);
  type metadata accessor for SearchCallHistoryCATPatternsExecutor(0);
  OUTLINED_FUNCTION_25_5();
  uint64_t v6 = OUTLINED_FUNCTION_67_0();
  a1[8] = v1;
  a1[9] = &protocol witness table for SearchCallHistoryCATPatternsExecutor;
  a1[5] = v6;
  uint64_t v7 = type metadata accessor for ResponseFactory();
  uint64_t v8 = OUTLINED_FUNCTION_21_0();
  uint64_t v9 = ResponseFactory.init()();
  a1[13] = v7;
  a1[14] = &protocol witness table for ResponseFactory;
  a1[10] = v9;
  type metadata accessor for PhoneCallCommonCATs();
  OUTLINED_FUNCTION_25_5();
  uint64_t v10 = OUTLINED_FUNCTION_67_0();
  type metadata accessor for PhoneCallCommonCATPatternsExecutor();
  OUTLINED_FUNCTION_25_5();
  uint64_t v11 = OUTLINED_FUNCTION_67_0();
  a1[19] = v8;
  a1[20] = &protocol witness table for PhoneCallCommonCATPatternsExecutor;
  a1[16] = v11;
  type metadata accessor for CallHistoryPromptDialogProvider();
  OUTLINED_FUNCTION_65();
  uint64_t v12 = CallHistoryPromptDialogProvider.init()();
  type metadata accessor for SearchCallHistoryCATs();
  OUTLINED_FUNCTION_25_5();
  uint64_t v13 = OUTLINED_FUNCTION_67_0();
  type metadata accessor for SearchCallHistoryCATsSimple();
  OUTLINED_FUNCTION_25_5();
  uint64_t v14 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for PhoneCallDisplayTextCATsSimple();
  OUTLINED_FUNCTION_25_5();
  uint64_t result = CATWrapperSimple.__allocating_init(options:globals:)();
  a1[15] = v10;
  a1[21] = v12;
  a1[22] = v13;
  a1[23] = v14;
  a1[24] = result;
  return result;
}

void variable initialization expression of SearchCallHistoryHandleFlowStrategy.logPrefix()
{
}

uint64_t variable initialization expression of ParticipantOutputProvider.contactsSlotName()
{
  return 0x73746361746E6F63;
}

uint64_t default argument 5 of ParticipantOutputProvider.init(sharedGlobals:app:templatingService:cats:startCallCats:startCallCatPatterns:addCallParticipantCatPatterns:responseGenerator:crrOutputGenerator:)@<X0>(uint64_t *a1@<X8>)
{
  return default argument 2 of AnnounceDropInCallFlow.init(announcementType:sharedGlobals:announceCallBellCatPatterns:responseGenerator:)(type metadata accessor for StartCallCATPatternsExecutor, (uint64_t)&protocol witness table for StartCallCATPatternsExecutor, a1);
}

uint64_t default argument 2 of AnnounceDropInCallFlow.init(announcementType:sharedGlobals:announceCallBellCatPatterns:responseGenerator:)@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for CATOption();
  uint64_t v7 = OUTLINED_FUNCTION_11_0(v6);
  __chkstk_darwin(v7);
  uint64_t v8 = OUTLINED_FUNCTION_8_7();
  uint64_t v9 = a1(v8);
  static CATOption.defaultMode.getter();
  uint64_t result = CATWrapper.__allocating_init(options:globals:)();
  a3[3] = v9;
  a3[4] = a2;
  *a3 = result;
  return result;
}

void variable initialization expression of PhoneAppResolutionOnDeviceFlowStrategy.logSeasPrefix()
{
}

void variable initialization expression of PhoneAppResolutionOnDeviceFlowStrategy.logAppPrefix()
{
}

void variable initialization expression of PhoneAppResolutionOnDeviceFlowStrategy.logAppAndSeasPrefix()
{
}

uint64_t variable initialization expression of AppResolutionProvider.annotatedApps()
{
  return Dictionary.init(dictionaryLiteral:)();
}

double variable initialization expression of AppResolutionProvider.lastSetApp@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t specialized OptionSet.symmetricDifference(_:)(uint64_t a1, uint64_t a2)
{
  return a2 ^ a1;
}

uint64_t specialized OptionSet<>.remove(_:)(uint64_t a1)
{
  uint64_t result = *v1 & a1;
  if (result) {
    *v1 &= ~a1;
  }
  return result;
}

uint64_t specialized OptionSet<>.update(with:)(uint64_t a1)
{
  uint64_t v2 = *v1;
  *v1 |= a1;
  return v2 & a1;
}

uint64_t specialized OptionSet<>.formSymmetricDifference(_:)(uint64_t result)
{
  *v1 ^= result;
  return result;
}

uint64_t specialized SetAlgebra.subtracting(_:)(uint64_t a1, uint64_t a2)
{
  return a2 & ~a1;
}

BOOL specialized SetAlgebra.isDisjoint(with:)(uint64_t a1, uint64_t a2)
{
  return (a2 & a1) == 0;
}

uint64_t specialized SetAlgebra.subtract(_:)(uint64_t result)
{
  *v1 &= ~result;
  return result;
}

uint64_t default argument 2 of static PhoneContactDisplayHintFactory.build(for:deviceState:appInfoBuilder:)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = a1(0);
  uint64_t result = swift_allocObject();
  a3[3] = v5;
  a3[4] = a2;
  *a3 = result;
  return result;
}

uint64_t default argument 3 of PhoneCallRecord.init(callRecord:options:appInfoBuilder:locale:)()
{
  static Device.current.getter();
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  dispatch thunk of DeviceState.siriLocale.getter();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v1);
}

uint64_t default argument 0 of FirstPartyAnnotatedAppStore.init(featureManager:appExistsPredicate:)()
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  memcpy(__dst, &static PhoneCallFeatureFlags.instance, sizeof(__dst));
  type metadata accessor for PhoneCallFeatureManager();
  uint64_t v0 = OUTLINED_FUNCTION_57_1();
  uint64_t v12 = &type metadata for PhoneCallFeatureFlags;
  uint64_t v13 = &protocol witness table for PhoneCallFeatureFlags;
  uint64_t v1 = OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_44_1(v1, v2, v3, v4, v5, v6, v7, v8, v10, v11);
  outlined init with take of AppSelectionSignalComponent(&v11, v0 + 16);
  outlined retain of PhoneCallFeatureFlags((uint64_t)__dst);
  return v0;
}

void variable initialization expression of ReadVoicemailResultSetFlowProvider.logPrefix()
{
}

_UNKNOWN **variable initialization expression of AnnounceCallConfirmationStrategy.sectionIDs()
{
  return &outlined read-only object #0 of variable initialization expression of AnnounceCallConfirmationStrategy.sectionIDs;
}

void variable initialization expression of ReadCallHistoryResultSetFlowProvider.logPrefix()
{
}

void variable initialization expression of PlayVoicemailReadIntroductionFlow.logPrefix()
{
}

uint64_t default argument 2 of PhoneCallControlFlow.init(input:sharedGlobals:appFinder:)@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  memcpy(__dst, &static PhoneCallFeatureFlags.instance, sizeof(__dst));
  type metadata accessor for PhoneCallFeatureManager();
  uint64_t v2 = OUTLINED_FUNCTION_57_1();
  int v7 = &type metadata for PhoneCallFeatureFlags;
  int v8 = &protocol witness table for PhoneCallFeatureFlags;
  *(void *)&long long v6 = OUTLINED_FUNCTION_60_0();
  memcpy((void *)(v6 + 16), &static PhoneCallFeatureFlags.instance, 0xB0uLL);
  outlined init with take of AppSelectionSignalComponent(&v6, v2 + 16);
  outlined retain of PhoneCallFeatureFlags((uint64_t)__dst);
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  uint64_t v3 = static ThirdPartyAnnotatedAppStore.instance;
  a1[3] = &type metadata for AnnotatedAppFinder;
  a1[4] = &protocol witness table for AnnotatedAppFinder;
  int v4 = (void *)swift_allocObject();
  *a1 = v4;
  v4[8] = type metadata accessor for ThirdPartyAnnotatedAppStore();
  v4[9] = &protocol witness table for ThirdPartyAnnotatedAppStore;
  v4[4] = v2;
  v4[5] = v3;
  v4[2] = AnnotatedAppFinder.isInstalledOnDevice(appBundleId:);
  void v4[3] = 0;
  return swift_retain();
}

uint64_t default argument 3 of PhoneCallFlow.init(input:sharedGlobals:appFinder:eligibleAppsFinder:)()
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for EligibleAppFinder();
  OUTLINED_FUNCTION_48_1(v0, (uint64_t)&protocol witness table for EligibleAppFinder);

  return swift_retain();
}

unint64_t variable initialization expression of SearchCallHistoryModel.responseViewId()
{
  return OUTLINED_FUNCTION_10_2(17);
}

void variable initialization expression of PluginPrewarmProvider.queue()
{
}

void variable initialization expression of TemplatingOperationManager.operationQueue()
{
}

uint64_t variable initialization expression of TemplatingOperationManager.templatingQueue()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  OUTLINED_FUNCTION_1();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_16_6();
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  uint64_t v6 = OUTLINED_FUNCTION_11_0(v5);
  __chkstk_darwin(v6);
  uint64_t v7 = OUTLINED_FUNCTION_40_1();
  uint64_t v8 = OUTLINED_FUNCTION_11_0(v7);
  __chkstk_darwin(v8);
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  static DispatchQoS.userInteractive.getter();
  static OS_dispatch_queue.Attributes.concurrent.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v0, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v1);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t variable initialization expression of TemplatingOperationManager.operations()
{
  type metadata accessor for TemplatingOperation();
  lazy protocol witness table accessor for type TemplatingOperationType and conformance TemplatingOperationType();

  return Dictionary.init(dictionaryLiteral:)();
}

void variable initialization expression of SeasAppUsageRule.logPrefix()
{
}

uint64_t default argument 1 of SmartAppSelectionFeatureManager.init(sharedGlobals:trialSmartAppSelectionConfigProvider:diagnosticLogPermission:)()
{
  id v0 = [self clientWithIdentifier:112];
  type metadata accessor for TrialSmartAppSelectionConfigProvider();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v0;
  return result;
}

uint64_t variable initialization expression of PhoneCallControlNLIntent.action()
{
  return 11;
}

uint64_t default argument 1 of static CommonOutputs.genericError(sharedGlobals:startCallCATsSimple:)(void (*a1)(uint64_t), uint64_t (*a2)(uint64_t, void))
{
  uint64_t v5 = type metadata accessor for CATOption();
  uint64_t v6 = OUTLINED_FUNCTION_11_0(v5);
  __chkstk_darwin(v6);
  uint64_t v7 = OUTLINED_FUNCTION_9_6();
  a1(v7);
  OUTLINED_FUNCTION_25_5();
  return a2(v2, 0);
}

uint64_t variable initialization expression of PhoneCallNLv3Intent.appNode()
{
  return AppOntologyNode.init(name:multicardinal:)();
}

uint64_t variable initialization expression of PhoneCallNLv3Intent.attributes()
{
  return variable initialization expression of PhoneCallNLv3Intent.attributes(&demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallAttribute>);
}

uint64_t variable initialization expression of PhoneCallNLv3Intent.audioRoute()
{
  return OUTLINED_FUNCTION_6_3(&demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallAudioRoute>);
}

uint64_t variable initialization expression of PhoneCallNLv3Intent.capability()
{
  return OUTLINED_FUNCTION_6_3(&demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallCapability>);
}

uint64_t variable initialization expression of PhoneCallNLv3Intent.preferredProvider()
{
  return OUTLINED_FUNCTION_6_3(&demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallPreferredProvider>);
}

uint64_t variable initialization expression of PhoneCallNLv3Intent.destinationType()
{
  return OUTLINED_FUNCTION_6_3(&demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallDestinationType>);
}

uint64_t variable initialization expression of PhoneCallNLv3Intent.contact()
{
  return variable initialization expression of PhoneCallNLv3Intent.smsGroup((void (*)(void))type metadata accessor for PhoneCallContactOntologyNode, 0xD000000000000010, 0x800000000048D230, (uint64_t (*)(uint64_t, uint64_t, uint64_t))PhoneCallContactOntologyNode.init(name:multicardinal:));
}

uint64_t variable initialization expression of PhoneCallNLv3Intent.smsGroup(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  return a4(a2, a3, 1);
}

uint64_t variable initialization expression of PhoneCallNLv3Intent.message()
{
  return OUTLINED_FUNCTION_6_3(&demangling cache variable for type metadata for TerminalOntologyNode<String>);
}

uint64_t variable initialization expression of PhoneCallNLv3Intent.noun()
{
  return OUTLINED_FUNCTION_6_3(&demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallNoun>);
}

uint64_t variable initialization expression of PhoneCallNLv3Intent.verb()
{
  return OUTLINED_FUNCTION_6_3(&demangling cache variable for type metadata for TerminalOntologyNode<PhoneCallVerb>);
}

uint64_t variable initialization expression of PhoneCallNLv3Intent.attributes(uint64_t *a1)
{
  return TerminalOntologyNode.init(name:multicardinal:)();
}

uint64_t variable initialization expression of PhoneCallNLv3Intent.voiceMail()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OntologyNode>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_467720;
  if (one-time initialization token for voiceMailNoun != -1) {
    swift_once();
  }
  uint64_t v1 = static VoiceMail.voiceMailNoun;
  *(void *)(v0 + 56) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<VoiceMail.VoiceMailNoun>);
  *(void *)(v0 + 64) = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type TerminalOntologyNode<VoiceMail.VoiceMailNoun> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<VoiceMail.VoiceMailNoun>);
  *(void *)(v0 + 32) = v1;
  uint64_t v2 = one-time initialization token for voiceMailVerb;
  swift_retain();
  if (v2 != -1) {
    swift_once();
  }
  uint64_t v3 = static VoiceMail.voiceMailVerb;
  *(void *)(v0 + 96) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<VoiceMail.VoiceMailVerb>);
  *(void *)(v0 + 104) = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type TerminalOntologyNode<VoiceMail.VoiceMailVerb> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<VoiceMail.VoiceMailVerb>);
  *(void *)(v0 + 72) = v3;
  type metadata accessor for NonTerminalOntologyNode();
  OUTLINED_FUNCTION_21_0();
  swift_retain();
  return NonTerminalOntologyNode.init(name:multicardinal:childNodes:)();
}

uint64_t variable initialization expression of PhoneCallNLv3Intent.smsGroup()
{
  return variable initialization expression of PhoneCallNLv3Intent.smsGroup((void (*)(void))type metadata accessor for SmsGroupOntologyNode, 0x70756F7247736D73, 0xE800000000000000, (uint64_t (*)(uint64_t, uint64_t, uint64_t))SmsGroupOntologyNode.init(name:multicardinal:));
}

uint64_t variable initialization expression of SharedConfirmationRepromptContext.promptedTypes()
{
  lazy protocol witness table accessor for type SharedConfirmationRepromptContext.PromptType and conformance SharedConfirmationRepromptContext.PromptType();

  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t default argument 4 of static PicsDisambiguationBuilder.makeMixedRichCardSectionDisambiguationSnippetPhone(disambiguationItems:deviceIsLocked:sharedGlobals:persons:imageSize:)@<X0>(uint64_t a1@<X8>)
{
  return default argument 2 of static PhoneReferenceResolution.resolveEntity(_:referenceResolver:matchedResultsSetting:)(&enum case for ImageSize.default(_:), (void (*)(void))&type metadata accessor for ImageSize, a1);
}

uint64_t default argument 2 of static PhoneReferenceResolution.resolveEntity(_:referenceResolver:matchedResultsSetting:)@<X0>(unsigned int *a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  a2(0);
  OUTLINED_FUNCTION_15();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 104);

  return v7(a3, v4, v5);
}

void variable initialization expression of CallStateProvider.callCenter()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  OUTLINED_FUNCTION_1();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_9_6();
  type metadata accessor for OS_dispatch_queue.Attributes();
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_8_7();
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = OUTLINED_FUNCTION_11_0(v6);
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_52();
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  static DispatchQoS.unspecified.getter();
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v0, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v1);
  uint64_t v8 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  [objc_allocWithZone((Class)TUCallCenter) initWithQueue:v8];

  OUTLINED_FUNCTION_26_1();
}

void variable initialization expression of CallStateProvider.callCapabilities(uint64_t a1@<X8>)
{
}

uint64_t variable initialization expression of CallStateProvider.callHandleFormatter()
{
  return type metadata accessor for SPHCallHandleFormatter();
}

uint64_t variable initialization expression of CallingIntentConfirmationFlowStrategy.confirmationResponse()
{
  OUTLINED_FUNCTION_37_1();
  type metadata accessor for ConfirmationResponse();
  uint64_t v0 = OUTLINED_FUNCTION_17_1();

  return __swift_storeEnumTagSinglePayload(v0, v1, v2, v3);
}

id @nonobjc NSUserDefaults.init(suiteName:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    NSString v3 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v3 = 0;
  }
  id v4 = [v2 initWithSuiteName:v3];

  return v4;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance INCallRecordType()
{
  uint64_t v1 = OUTLINED_FUNCTION_5();
  INStartAudioCallIntent.overwriteCallGroups(newCallGroups:)((Swift::OpaquePointer)v1);
  *uint64_t v0 = v2;
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance INPersonHandleLabel()
{
  return specialized _SwiftNewtypeWrapper<>._bridgeToObjectiveC()(*v0, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

NSString protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance INPersonHandleLabel@<X0>(void *a1@<X8>)
{
  NSString result = specialized static _SwiftNewtypeWrapper<>._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  return result;
}

void *protocol witness for OptionSet.init(rawValue:) in conformance AFCallState@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t protocol witness for SetAlgebra.init() in conformance INCallCapabilityOptions@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = variable initialization expression of IdentifyIncomingCallerDirectAction.callerContactIdentifiers();
  *a1 = result;
  return result;
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance INCallCapabilityOptions(uint64_t a1)
{
  uint64_t v2 = OUTLINED_FUNCTION_33_0(a1);
  uint64_t result = specialized OptionSet.intersection(_:)(v2, v3);
  uint64_t *v1 = result;
  return result;
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance INCallCapabilityOptions(uint64_t a1, void *a2)
{
  return specialized OptionSet<>.insert(_:)(a1, *a2);
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance INCallCapabilityOptions(void *a1)
{
  return specialized OptionSet<>.formUnion(_:)(*a1);
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance INCallCapabilityOptions(void *a1)
{
  return specialized OptionSet<>.formIntersection(_:)(*a1);
}

uint64_t protocol witness for SetAlgebra.isSubset(of:) in conformance INCallCapabilityOptions(void *a1)
{
  return specialized SetAlgebra.isSubset(of:)(*a1, *v1);
}

uint64_t protocol witness for SetAlgebra.isSuperset(of:) in conformance INCallCapabilityOptions(void *a1)
{
  return specialized OptionSet<>.contains(_:)(*a1, *v1);
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance INCallCapabilityOptions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance INAddCallParticipantParticipantUnsupportedReason(uint64_t *a1, uint64_t *a2)
{
  return static OneTimeHintHistory.__derived_struct_equals(_:_:)(*a1, *a2);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TUCallStatus(int *a1, int *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance TUCallStatus@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = TUCallStatus.init(rawValue:)(*a1);
  *(_DWORD *)a2 = result;
  *(unsigned char *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t TUCallStatus.init(rawValue:)(uint64_t result)
{
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance TUCallStatus(_DWORD *a1@<X8>)
{
  INStartAudioCallIntent.overwriteCallGroups(newCallGroups:)((Swift::OpaquePointer)*v1);
  *a1 = v3;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance INSiriAuthorizationStatus()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance INSiriAuthorizationStatus(int a1)
{
  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance INSiriAuthorizationStatus(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance INIntentSlotValueType()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

BOOL protocol witness for SetAlgebra.contains(_:) in conformance AFCallState(uint64_t *a1)
{
  return specialized OptionSet<>.contains(_:)(*a1, *v1);
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance AFCallState@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized OptionSet.union(_:)(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance AFCallState@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized OptionSet.symmetricDifference(_:)(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance AFCallState@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized OptionSet<>.remove(_:)(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance AFCallState@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized OptionSet<>.update(with:)(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance AFCallState(uint64_t *a1)
{
  return specialized OptionSet<>.formSymmetricDifference(_:)(*a1);
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance AFCallState@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized SetAlgebra.subtracting(_:)(*a1, *v2);
  *a2 = result;
  return result;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance AFCallState(uint64_t *a1)
{
  return specialized SetAlgebra.isDisjoint(with:)(*a1, *v1);
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance AFCallState()
{
  return specialized SetAlgebra.isEmpty.getter(*v0);
}

uint64_t protocol witness for SetAlgebra.subtract(_:) in conformance AFCallState(uint64_t *a1)
{
  return specialized SetAlgebra.subtract(_:)(*a1);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance INCallAudioRoute(uint64_t a1@<X8>)
{
  INCallAudioRoute.init(rawValue:)();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3 & 1;
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance AFCallState@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AFCallState(void *a1@<X8>)
{
  *a1 = *v1;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance INIntentSlotValueType(void *a1@<X8>)
{
  INStartAudioCallIntent.overwriteCallGroups(newCallGroups:)((Swift::OpaquePointer)v1->_rawValue);
  *a1 = v3;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance AFCallState@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance INPersonHandleLabel@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance INPersonHandleLabel@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = INPersonHandleLabel.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance INPersonHandleLabel(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type INPersonHandleLabel and conformance INPersonHandleLabel, type metadata accessor for INPersonHandleLabel);
  uint64_t v3 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type INPersonHandleLabel and conformance INPersonHandleLabel, type metadata accessor for INPersonHandleLabel);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance INPersonHandleLabel()
{
  return specialized _SwiftNewtypeWrapper<>._bridgeToObjectiveC()(*v0, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance INPersonHandleLabel()
{
  return specialized _SwiftNewtypeWrapper<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance INPersonHandleLabel()
{
  return specialized _SwiftNewtypeWrapper<>._rawHashValue(seed:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance INPersonHandleLabel()
{
  return specialized == infix<A>(_:_:)();
}

void *specialized static Array._allocateUninitialized(_:)(uint64_t a1)
{
  if (a1 < 0)
  {
    OUTLINED_FUNCTION_23_1();
    uint64_t result = (void *)OUTLINED_FUNCTION_22_1();
    __break(1u);
  }
  else if (a1)
  {
    uint64_t result = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    result[2] = a1;
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_5D1B8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_5D1F8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 192, 7);
}

uint64_t outlined retain of PhoneCallFeatureFlags(uint64_t a1)
{
  return a1;
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t a1)
{
  return specialized static Array._allocateUninitialized(_:)(a1, (unint64_t *)&lazy cache variable for type metadata for SABaseCommand);
}

{
  return specialized static Array._allocateUninitialized(_:)(a1, &lazy cache variable for type metadata for INIntentSlotDescription);
}

{
  return specialized static Array._allocateUninitialized(_:)(a1, &lazy cache variable for type metadata for SANotificationOnDeviceObject);
}

{
  uint64_t result;

  if (a1 < 0)
  {
    OUTLINED_FUNCTION_23_1();
    uint64_t result = OUTLINED_FUNCTION_22_1();
    __break(1u);
  }
  else if (a1)
  {
    type metadata accessor for App();
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((char *)&dword_10 + (result & 0xFFFFFFFFFFFFFF8)) = a1;
  }
  else
  {
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t a1, unint64_t *a2)
{
  if (a1 < 0)
  {
    OUTLINED_FUNCTION_23_1();
    uint64_t result = OUTLINED_FUNCTION_22_1();
    __break(1u);
  }
  else if (a1)
  {
    type metadata accessor for CNContactStore(0, a2);
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((char *)&dword_10 + (result & 0xFFFFFFFFFFFFFF8)) = a1;
  }
  else
  {
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  return result;
}

void specialized Set.init(_nonEmptyArrayLiteral:)()
{
  OUTLINED_FUNCTION_62_1();
  if (!v1
    || (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>),
        uint64_t v2 = OUTLINED_FUNCTION_12_3(),
        uint64_t v3 = v2,
        (uint64_t v24 = *(void *)(v0 + 16)) == 0))
  {
LABEL_23:
    swift_bridgeObjectRelease();
    return;
  }
  unint64_t v4 = 0;
  uint64_t v5 = v2 + 56;
  while (v4 < *(void *)(v0 + 16))
  {
    uint64_t v6 = (uint64_t *)(v0 + 32 + 16 * v4);
    uint64_t v8 = *v6;
    uint64_t v7 = v6[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v9 = Hasher._finalize()();
    uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
    unint64_t v11 = v9 & ~v10;
    unint64_t v12 = v11 >> 6;
    uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
    uint64_t v14 = 1 << v11;
    if (((1 << v11) & v13) != 0)
    {
      uint64_t v15 = *(void *)(v3 + 48);
      uint64_t v16 = (void *)(v15 + 16 * v11);
      BOOL v17 = *v16 == v8 && v16[1] == v7;
      if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
LABEL_11:
        swift_bridgeObjectRelease();
        goto LABEL_22;
      }
      uint64_t v18 = ~v10;
      while (1)
      {
        unint64_t v11 = (v11 + 1) & v18;
        unint64_t v12 = v11 >> 6;
        uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
        uint64_t v14 = 1 << v11;
        if ((v13 & (1 << v11)) == 0) {
          break;
        }
        BOOL v19 = (void *)(v15 + 16 * v11);
        BOOL v20 = *v19 == v8 && v19[1] == v7;
        if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_11;
        }
      }
    }
    *(void *)(v5 + 8 * v12) = v14 | v13;
    unint64_t v21 = (void *)(*(void *)(v3 + 48) + 16 * v11);
    *unint64_t v21 = v8;
    v21[1] = v7;
    OUTLINED_FUNCTION_38_2();
    if (v23) {
      goto LABEL_25;
    }
    *(void *)(v3 + 16) = v22;
LABEL_22:
    if (++v4 == v24) {
      goto LABEL_23;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;

  OUTLINED_FUNCTION_62_1();
  if (!v1
    || (__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<AppAndDeviceRestriction.AppCategory>),
        uint64_t v5 = OUTLINED_FUNCTION_12_3(),
        (uint64_t v6 = *(void *)(v0 + 16)) == 0))
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return;
  }
  OUTLINED_FUNCTION_45_0();
  while (v2 < *(void *)(v0 + 16))
  {
    uint64_t v7 = *(unsigned __int8 *)(v4 + v2);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v7);
    Hasher._finalize()();
    OUTLINED_FUNCTION_29_3();
    if (!v13)
    {
      if (v7 == *(unsigned __int8 *)(v9 + v8)) {
        goto LABEL_12;
      }
      while (1)
      {
        OUTLINED_FUNCTION_36_4();
        if (v13) {
          break;
        }
        if (v7 == *(unsigned __int8 *)(v9 + v8)) {
          goto LABEL_12;
        }
      }
    }
    *(void *)(v3 + 8 * v10) = v12 | v11;
    *(unsigned char *)(v9 + v8) = v7;
    OUTLINED_FUNCTION_38_2();
    if (v15) {
      goto LABEL_15;
    }
    *(void *)(v5 + 16) = v14;
LABEL_12:
    if (++v2 == v6) {
      goto LABEL_13;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;

  OUTLINED_FUNCTION_62_1();
  if (!v1
    || (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<INSiriAuthorizationStatus>),
        uint64_t v5 = OUTLINED_FUNCTION_12_3(),
        (uint64_t v6 = *(void *)(v0 + 16)) == 0))
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return;
  }
  OUTLINED_FUNCTION_45_0();
  while (v2 < *(void *)(v0 + 16))
  {
    uint64_t v7 = *(void *)(v4 + 8 * v2);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v7);
    Hasher._finalize()();
    OUTLINED_FUNCTION_29_3();
    if (!v13)
    {
      if (*(void *)(v9 + 8 * v8) == v7) {
        goto LABEL_12;
      }
      while (1)
      {
        OUTLINED_FUNCTION_36_4();
        if (v13) {
          break;
        }
        if (*(void *)(v9 + 8 * v8) == v7) {
          goto LABEL_12;
        }
      }
    }
    *(void *)(v3 + 8 * v10) = v12 | v11;
    *(void *)(v9 + 8 * v8) = v7;
    OUTLINED_FUNCTION_38_2();
    if (v15) {
      goto LABEL_15;
    }
    *(void *)(v5 + 16) = v14;
LABEL_12:
    if (++v2 == v6) {
      goto LABEL_13;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void (**v12)(char *, uint64_t);
  uint64_t v13;
  void (*v14)(void);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (**v29)(uint64_t, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;

  OUTLINED_FUNCTION_24_0();
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SiriKitReliabilityCodes();
  OUTLINED_FUNCTION_1();
  uint64_t v32 = v3;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  BOOL v36 = (char *)&v27 - v8;
  if (*(void *)(v1 + 16)
    && (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<SiriKitReliabilityCodes>),
        Swift::Int v9 = OUTLINED_FUNCTION_12_3(),
        uint64_t v10 = v9,
        (uint64_t v31 = *(void *)(v1 + 16)) != 0))
  {
    unint64_t v11 = 0;
    uint64_t v30 = v1 + ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80));
    uint64_t v34 = v32 + 16;
    uint64_t v35 = v9 + 56;
    unint64_t v12 = (void (**)(char *, uint64_t))(v32 + 8);
    uint64_t v28 = v1;
    uint64_t v29 = (void (**)(uint64_t, char *, uint64_t))(v32 + 32);
    while (v11 < *(void *)(v1 + 16))
    {
      uint64_t v13 = *(void *)(v32 + 72);
      uint64_t v14 = *(void (**)(void))(v32 + 16);
      OUTLINED_FUNCTION_56_0();
      v14();
      lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type SiriKitReliabilityCodes and conformance SiriKitReliabilityCodes, (void (*)(uint64_t))&type metadata accessor for SiriKitReliabilityCodes);
      uint64_t v15 = dispatch thunk of Hashable._rawHashValue(seed:)() & ~(-1 << *(unsigned char *)(v10 + 32));
      OUTLINED_FUNCTION_50();
      if ((v18 & v17) != 0)
      {
        uint64_t v33 = v11;
        BOOL v20 = ~v19;
        while (1)
        {
          OUTLINED_FUNCTION_56_0();
          v14();
          lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type SiriKitReliabilityCodes and conformance SiriKitReliabilityCodes, (void (*)(uint64_t))&type metadata accessor for SiriKitReliabilityCodes);
          unint64_t v21 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v22 = *v12;
          (*v12)(v7, v2);
          if (v21) {
            break;
          }
          uint64_t v15 = (v15 + 1) & v20;
          OUTLINED_FUNCTION_50();
          if ((v17 & v18) == 0)
          {
            uint64_t v1 = v28;
            unint64_t v11 = v33;
            goto LABEL_10;
          }
        }
        v22(v36, v2);
        uint64_t v1 = v28;
        unint64_t v11 = v33;
      }
      else
      {
LABEL_10:
        char v23 = v36;
        *(void *)(v35 + 8 * v16) = v18 | v17;
        (*v29)(*(void *)(v10 + 48) + v15 * v13, v23, v2);
        uint64_t v24 = *(void *)(v10 + 16);
        uint64_t v25 = __OFADD__(v24, 1);
        uint64_t v26 = v24 + 1;
        if (v25) {
          goto LABEL_16;
        }
        *(void *)(v10 + 16) = v26;
      }
      if (++v11 == v31) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_26_1();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char v38;
  void (*v39)(char *, uint64_t);
  char *v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void (**v51)(char *, char *, uint64_t);
  char *v52;
  uint64_t v53;
  uint64_t v54;
  void (**v55)(char *, uint64_t);
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  OUTLINED_FUNCTION_24_0();
  uint64_t v2 = v1;
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?));
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_8_7();
  unint64_t v4 = type metadata accessor for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues();
  OUTLINED_FUNCTION_1();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  uint64_t v52 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::Int v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
  uint64_t v10 = OUTLINED_FUNCTION_19_0(v9);
  uint64_t v49 = v11;
  unint64_t v12 = __chkstk_darwin(v10);
  uint64_t v56 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v44 - v15;
  BOOL v17 = __chkstk_darwin(v14);
  BOOL v19 = (char *)&v44 - v18;
  __chkstk_darwin(v17);
  uint64_t v59 = (uint64_t)&v44 - v20;
  if (!*(void *)(v2 + 16)) {
    goto LABEL_24;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?>);
  unint64_t v21 = OUTLINED_FUNCTION_12_3();
  uint64_t v22 = v21;
  uint64_t v48 = *(void *)(v2 + 16);
  if (!v48) {
    goto LABEL_24;
  }
  char v23 = 0;
  uint64_t v53 = v21 + 56;
  uint64_t v47 = v2 + ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80));
  uint64_t v51 = (void (**)(char *, char *, uint64_t))(v6 + 32);
  uint64_t v55 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v46 = v2;
  int v45 = v19;
  while (1)
  {
    if (v23 >= *(void *)(v2 + 16))
    {
      __break(1u);
      goto LABEL_26;
    }
    uint64_t v58 = *(void *)(v49 + 72);
    uint64_t v24 = v59;
    outlined init with copy of UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?(v47 + v58 * v23, v59);
    Hasher.init(_seed:)();
    outlined init with copy of UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?(v24, (uint64_t)v19);
    OUTLINED_FUNCTION_30_0((uint64_t)v19);
    uint64_t v50 = v23;
    if (v34)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      uint64_t v25 = v52;
      (*v51)(v52, v19, v4);
      Hasher._combine(_:)(1u);
      lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues and conformance UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues, (void (*)(uint64_t))&type metadata accessor for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues);
      dispatch thunk of Hashable.hash(into:)();
      (*v55)(v25, v4);
    }
    uint64_t v27 = v53;
    uint64_t v26 = v54;
    uint64_t v28 = Hasher._finalize()();
    uint64_t v57 = ~(-1 << *(unsigned char *)(v22 + 32));
    uint64_t v29 = v28 & v57;
    uint64_t v30 = (v28 & (unint64_t)v57) >> 6;
    uint64_t v31 = *(void *)(v27 + 8 * v30);
    uint64_t v32 = 1 << (v28 & v57);
    if ((v32 & v31) == 0) {
      break;
    }
    while (1)
    {
      outlined init with copy of UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?(*(void *)(v22 + 48) + v29 * v58, (uint64_t)v16);
      uint64_t v33 = v0 + *(int *)(v26 + 48);
      outlined init with copy of UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?((uint64_t)v16, v0);
      outlined init with copy of UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?(v59, v33);
      OUTLINED_FUNCTION_30_0(v0);
      if (v34) {
        break;
      }
      outlined init with copy of UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?(v0, (uint64_t)v56);
      OUTLINED_FUNCTION_30_0(v33);
      if (v34)
      {
        (*v55)(v56, v4);
LABEL_17:
        outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v0, &demangling cache variable for type metadata for (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?));
        outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v16, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
        goto LABEL_19;
      }
      uint64_t v35 = v22;
      BOOL v36 = (uint64_t)v56;
      uint64_t v37 = v52;
      (*v51)(v52, (char *)v33, v4);
      lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues and conformance UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues, (void (*)(uint64_t))&type metadata accessor for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues);
      uint64_t v38 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v39 = *v55;
      uint64_t v40 = v37;
      uint64_t v22 = v35;
      uint64_t v27 = v53;
      (*v55)(v40, v4);
      v39((char *)v36, v4);
      uint64_t v26 = v54;
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v0, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v16, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
      if (v38) {
        goto LABEL_22;
      }
LABEL_19:
      uint64_t v29 = (v29 + 1) & v57;
      uint64_t v30 = v29 >> 6;
      uint64_t v31 = *(void *)(v27 + 8 * (v29 >> 6));
      uint64_t v32 = 1 << v29;
      if ((v31 & (1 << v29)) == 0) {
        goto LABEL_20;
      }
    }
    OUTLINED_FUNCTION_30_0(v33);
    if (!v34) {
      goto LABEL_17;
    }
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v0, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v16, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
LABEL_22:
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v59, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
LABEL_23:
    char v23 = v50 + 1;
    uint64_t v2 = v46;
    BOOL v19 = v45;
    if (v50 + 1 == v48)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_26_1();
      return;
    }
  }
LABEL_20:
  *(void *)(v27 + 8 * v30) = v32 | v31;
  outlined init with take of UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?(v59, *(void *)(v22 + 48) + v29 * v58);
  uint64_t v41 = *(void *)(v22 + 16);
  uint64_t v42 = __OFADD__(v41, 1);
  uint64_t v43 = v41 + 1;
  if (!v42)
  {
    *(void *)(v22 + 16) = v43;
    goto LABEL_23;
  }
LABEL_26:
  __break(1u);
}

unsigned char *specialized Set.init(_nonEmptyArrayLiteral:)()
{
  OUTLINED_FUNCTION_62_1();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<PhoneCallVerb>);
    uint64_t v2 = OUTLINED_FUNCTION_12_3();
    uint64_t v3 = (unsigned char *)v2;
    uint64_t v28 = *(void *)(v0 + 16);
    if (v28)
    {
      unint64_t v4 = 0;
      uint64_t v5 = v2 + 56;
      uint64_t v26 = v0;
      uint64_t v27 = v0 + 32;
      do
      {
        if (v4 >= *(void *)(v0 + 16))
        {
          __break(1u);
LABEL_60:
          __break(1u);
          JUMPOUT(0x5DCF8);
        }
        uint64_t v6 = *(unsigned __int8 *)(v27 + v4++);
        Hasher.init(_seed:)();
        switch(v6)
        {
          case 2:
          case 3:
            OUTLINED_FUNCTION_63();
            break;
          default:
            break;
        }
        String.hash(into:)();
        swift_bridgeObjectRelease();
        Swift::Int v7 = Hasher._finalize()();
        uint64_t v8 = ~(-1 << v3[32]);
        unint64_t v9 = v7 & v8;
        unint64_t v10 = (v7 & (unint64_t)v8) >> 6;
        uint64_t v11 = *(void *)(v5 + 8 * v10);
        uint64_t v12 = 1 << (v7 & v8);
        if ((v12 & v11) != 0)
        {
          while (1)
          {
            unint64_t v13 = 0xE400000000000000;
            uint64_t v14 = 1819042147;
            switch(*(unsigned char *)(*((void *)v3 + 6) + v9))
            {
              case 1:
                uint64_t v14 = 0x636162206C6C6163;
                unint64_t v13 = 0xE90000000000006BLL;
                break;
              case 2:
                unint64_t v13 = 0xE800000000000000;
                uint64_t v14 = OUTLINED_FUNCTION_59_0();
                break;
              case 3:
                uint64_t v14 = OUTLINED_FUNCTION_59_0();
                uint64_t v15 = 0x6F6964756120;
                goto LABEL_25;
              case 4:
                uint64_t v14 = 0x7072656B61657073;
                uint64_t v16 = 1701736296;
                goto LABEL_22;
              case 5:
                uint64_t v14 = 1684957542;
                break;
              case 6:
                unint64_t v13 = 0xE600000000000000;
                uint64_t v14 = 0x6C6169646572;
                break;
              case 7:
                unint64_t v13 = 0xE700000000000000;
                uint64_t v14 = 0x79666972616C63;
                break;
              case 8:
                uint64_t v14 = 1684104562;
                break;
              case 9:
                unint64_t v13 = 0xE700000000000000;
                uint64_t v14 = 0x6D7269666E6F63;
                break;
              case 0xA:
                unint64_t v13 = 0xE600000000000000;
                uint64_t v14 = 0x726577736E61;
                break;
              case 0xB:
                unint64_t v13 = 0xE700000000000000;
                uint64_t v14 = 0x70755F676E6168;
                break;
              case 0xC:
                unint64_t v13 = 0xE600000000000000;
                uint64_t v14 = 0x6574656C6564;
                break;
              case 0xD:
                uint64_t v14 = 0x65526F54746E6177;
                uint64_t v16 = 1952540016;
LABEL_22:
                unint64_t v13 = v16 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
                break;
              case 0xE:
                uint64_t v14 = 1852403562;
                break;
              case 0xF:
                uint64_t v14 = 0x6974726150646461;
                uint64_t v15 = 0x746E61706963;
LABEL_25:
                unint64_t v13 = v15 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
                break;
              case 0x10:
                unint64_t v13 = 0x800000000048DB80;
                uint64_t v14 = 0xD000000000000011;
                break;
              default:
                break;
            }
            unint64_t v17 = 0xE400000000000000;
            unint64_t v18 = 1819042147;
            switch((int)v6)
            {
              case 1:
                unint64_t v18 = 0x636162206C6C6163;
                unint64_t v17 = 0xE90000000000006BLL;
                break;
              case 2:
                unint64_t v17 = 0xE800000000000000;
                OUTLINED_FUNCTION_54();
                break;
              case 3:
                OUTLINED_FUNCTION_54();
                uint64_t v19 = 0x6F6964756120;
                goto LABEL_44;
              case 4:
                unint64_t v18 = 0x7072656B61657073;
                uint64_t v20 = 1701736296;
                goto LABEL_41;
              case 5:
                unint64_t v18 = 1684957542;
                break;
              case 6:
                unint64_t v17 = 0xE600000000000000;
                unint64_t v18 = 0x6C6169646572;
                break;
              case 7:
                unint64_t v17 = 0xE700000000000000;
                unint64_t v18 = 0x79666972616C63;
                break;
              case 8:
                unint64_t v18 = 1684104562;
                break;
              case 9:
                unint64_t v17 = 0xE700000000000000;
                unint64_t v18 = 0x6D7269666E6F63;
                break;
              case 10:
                unint64_t v17 = 0xE600000000000000;
                unint64_t v18 = 0x726577736E61;
                break;
              case 11:
                unint64_t v17 = 0xE700000000000000;
                unint64_t v18 = 0x70755F676E6168;
                break;
              case 12:
                unint64_t v17 = 0xE600000000000000;
                unint64_t v18 = 0x6574656C6564;
                break;
              case 13:
                unint64_t v18 = 0x65526F54746E6177;
                uint64_t v20 = 1952540016;
LABEL_41:
                unint64_t v17 = v20 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
                break;
              case 14:
                unint64_t v18 = 1852403562;
                break;
              case 15:
                unint64_t v18 = 0x6974726150646461;
                uint64_t v19 = 0x746E61706963;
LABEL_44:
                unint64_t v17 = v19 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
                break;
              case 16:
                unint64_t v17 = 0x800000000048DB80;
                unint64_t v18 = 0xD000000000000011;
                break;
              default:
                break;
            }
            if (v14 == v18 && v13 == v17) {
              break;
            }
            char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v22) {
              goto LABEL_55;
            }
            unint64_t v9 = (v9 + 1) & v8;
            unint64_t v10 = v9 >> 6;
            uint64_t v11 = *(void *)(v5 + 8 * (v9 >> 6));
            uint64_t v12 = 1 << v9;
            if ((v11 & (1 << v9)) == 0) {
              goto LABEL_52;
            }
          }
          swift_bridgeObjectRelease_n();
        }
        else
        {
LABEL_52:
          *(void *)(v5 + 8 * v10) = v12 | v11;
          *(unsigned char *)(*((void *)v3 + 6) + v9) = v6;
          OUTLINED_FUNCTION_38_2();
          if (v24) {
            goto LABEL_60;
          }
          *((void *)v3 + 2) = v23;
        }
LABEL_55:
        uint64_t v0 = v26;
      }
      while (v4 != v28);
    }
  }
  else
  {
    uint64_t v3 = &_swiftEmptySetSingleton;
  }
  swift_bridgeObjectRelease();
  return v3;
}

unint64_t lazy protocol witness table accessor for type FollowUpOfferType and conformance FollowUpOfferType()
{
  unint64_t result = lazy protocol witness table cache variable for type FollowUpOfferType and conformance FollowUpOfferType;
  if (!lazy protocol witness table cache variable for type FollowUpOfferType and conformance FollowUpOfferType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FollowUpOfferType and conformance FollowUpOfferType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FollowUpOfferType and conformance FollowUpOfferType;
  if (!lazy protocol witness table cache variable for type FollowUpOfferType and conformance FollowUpOfferType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FollowUpOfferType and conformance FollowUpOfferType);
  }
  return result;
}

uint64_t sub_5DE10()
{
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 40);

  return _swift_deallocObject(v0, 80, 7);
}

unint64_t lazy protocol witness table accessor for type SiriInCallFeature and conformance SiriInCallFeature()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriInCallFeature and conformance SiriInCallFeature;
  if (!lazy protocol witness table cache variable for type SiriInCallFeature and conformance SiriInCallFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriInCallFeature and conformance SiriInCallFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriInCallFeature and conformance SiriInCallFeature;
  if (!lazy protocol witness table cache variable for type SiriInCallFeature and conformance SiriInCallFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriInCallFeature and conformance SiriInCallFeature);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TelephonyUtilitiesFeature and conformance TelephonyUtilitiesFeature()
{
  unint64_t result = lazy protocol witness table cache variable for type TelephonyUtilitiesFeature and conformance TelephonyUtilitiesFeature;
  if (!lazy protocol witness table cache variable for type TelephonyUtilitiesFeature and conformance TelephonyUtilitiesFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TelephonyUtilitiesFeature and conformance TelephonyUtilitiesFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TelephonyUtilitiesFeature and conformance TelephonyUtilitiesFeature;
  if (!lazy protocol witness table cache variable for type TelephonyUtilitiesFeature and conformance TelephonyUtilitiesFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TelephonyUtilitiesFeature and conformance TelephonyUtilitiesFeature);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IDSFeature and conformance IDSFeature()
{
  unint64_t result = lazy protocol witness table cache variable for type IDSFeature and conformance IDSFeature;
  if (!lazy protocol witness table cache variable for type IDSFeature and conformance IDSFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IDSFeature and conformance IDSFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IDSFeature and conformance IDSFeature;
  if (!lazy protocol witness table cache variable for type IDSFeature and conformance IDSFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IDSFeature and conformance IDSFeature);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SiriPhoneFeature and conformance SiriPhoneFeature()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriPhoneFeature and conformance SiriPhoneFeature;
  if (!lazy protocol witness table cache variable for type SiriPhoneFeature and conformance SiriPhoneFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriPhoneFeature and conformance SiriPhoneFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriPhoneFeature and conformance SiriPhoneFeature;
  if (!lazy protocol witness table cache variable for type SiriPhoneFeature and conformance SiriPhoneFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriPhoneFeature and conformance SiriPhoneFeature);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SiriPlaybackControlFeature and conformance SiriPlaybackControlFeature()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriPlaybackControlFeature and conformance SiriPlaybackControlFeature;
  if (!lazy protocol witness table cache variable for type SiriPlaybackControlFeature and conformance SiriPlaybackControlFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriPlaybackControlFeature and conformance SiriPlaybackControlFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriPlaybackControlFeature and conformance SiriPlaybackControlFeature;
  if (!lazy protocol witness table cache variable for type SiriPlaybackControlFeature and conformance SiriPlaybackControlFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriPlaybackControlFeature and conformance SiriPlaybackControlFeature);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PommesFeature and conformance PommesFeature()
{
  unint64_t result = lazy protocol witness table cache variable for type PommesFeature and conformance PommesFeature;
  if (!lazy protocol witness table cache variable for type PommesFeature and conformance PommesFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesFeature and conformance PommesFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PommesFeature and conformance PommesFeature;
  if (!lazy protocol witness table cache variable for type PommesFeature and conformance PommesFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesFeature and conformance PommesFeature);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AppProtection and conformance AppProtection()
{
  unint64_t result = lazy protocol witness table cache variable for type AppProtection and conformance AppProtection;
  if (!lazy protocol witness table cache variable for type AppProtection and conformance AppProtection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppProtection and conformance AppProtection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AppProtection and conformance AppProtection;
  if (!lazy protocol witness table cache variable for type AppProtection and conformance AppProtection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppProtection and conformance AppProtection);
  }
  return result;
}

uint64_t sub_5E06C()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t lazy protocol witness table accessor for type UUID and conformance UUID(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [ContactQuery] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [ContactQuery] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [ContactQuery] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [ContactQuery]);
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type ContactQuery and conformance ContactQuery, (void (*)(uint64_t))&type metadata accessor for ContactQuery);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ContactQuery] and conformance <A> [A]);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

void specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = a1;
  if (!*(void *)(a1 + 16)) {
    goto LABEL_29;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<OngoingCallOfferOptions>);
  uint64_t v2 = OUTLINED_FUNCTION_12_3();
  uint64_t v3 = v2;
  uint64_t v23 = *(void *)(v1 + 16);
  if (!v23) {
    goto LABEL_29;
  }
  unint64_t v4 = 0;
  uint64_t v5 = v2 + 56;
  uint64_t v21 = v1;
  uint64_t v22 = v1 + 32;
  while (1)
  {
    if (v4 >= *(void *)(v1 + 16))
    {
      __break(1u);
      goto LABEL_31;
    }
    int v6 = *(unsigned __int8 *)(v22 + v4++);
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v7 = Hasher._finalize()();
    uint64_t v8 = ~(-1 << *(unsigned char *)(v3 + 32));
    unint64_t v9 = v7 & v8;
    unint64_t v10 = (v7 & (unint64_t)v8) >> 6;
    uint64_t v11 = *(void *)(v5 + 8 * v10);
    uint64_t v12 = 1 << (v7 & v8);
    if ((v12 & v11) == 0) {
      break;
    }
    while (1)
    {
      if (*(unsigned char *)(*(void *)(v3 + 48) + v9))
      {
        if (*(unsigned char *)(*(void *)(v3 + 48) + v9) == 1)
        {
          uint64_t v13 = 0x654E646E41646E65;
          unint64_t v14 = 0xED00006C6C614377;
          if (!v6) {
            goto LABEL_18;
          }
        }
        else
        {
          uint64_t v13 = 0x4E646E41646C6F68;
          unint64_t v14 = 0xEE006C6C61437765;
          if (!v6)
          {
LABEL_18:
            unint64_t v16 = 0xE300000000000000;
            uint64_t v15 = 6579297;
            goto LABEL_19;
          }
        }
      }
      else
      {
        unint64_t v14 = 0xE300000000000000;
        uint64_t v13 = 6579297;
        if (!v6) {
          goto LABEL_18;
        }
      }
      uint64_t v15 = v6 == 1 ? 0x654E646E41646E65 : 0x4E646E41646C6F68;
      unint64_t v16 = v6 == 1 ? 0xED00006C6C614377 : 0xEE006C6C61437765;
LABEL_19:
      if (v13 == v15 && v14 == v16) {
        break;
      }
      char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v18) {
        goto LABEL_28;
      }
      unint64_t v9 = (v9 + 1) & v8;
      unint64_t v10 = v9 >> 6;
      uint64_t v11 = *(void *)(v5 + 8 * (v9 >> 6));
      uint64_t v12 = 1 << v9;
      if ((v11 & (1 << v9)) == 0) {
        goto LABEL_25;
      }
    }
    swift_bridgeObjectRelease_n();
LABEL_28:
    uint64_t v1 = v21;
    if (v4 == v23)
    {
LABEL_29:
      swift_bridgeObjectRelease();
      return;
    }
  }
LABEL_25:
  *(void *)(v5 + 8 * v10) = v12 | v11;
  *(unsigned char *)(*(void *)(v3 + 48) + v9) = v6;
  OUTLINED_FUNCTION_38_2();
  if (!v20)
  {
    *(void *)(v3 + 16) = v19;
    goto LABEL_28;
  }
LABEL_31:
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type TemplatingOperationType and conformance TemplatingOperationType()
{
  unint64_t result = lazy protocol witness table cache variable for type TemplatingOperationType and conformance TemplatingOperationType;
  if (!lazy protocol witness table cache variable for type TemplatingOperationType and conformance TemplatingOperationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TemplatingOperationType and conformance TemplatingOperationType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TemplatingOperationType and conformance TemplatingOperationType;
  if (!lazy protocol witness table cache variable for type TemplatingOperationType and conformance TemplatingOperationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TemplatingOperationType and conformance TemplatingOperationType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SharedConfirmationRepromptContext.PromptType and conformance SharedConfirmationRepromptContext.PromptType()
{
  unint64_t result = lazy protocol witness table cache variable for type SharedConfirmationRepromptContext.PromptType and conformance SharedConfirmationRepromptContext.PromptType;
  if (!lazy protocol witness table cache variable for type SharedConfirmationRepromptContext.PromptType and conformance SharedConfirmationRepromptContext.PromptType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharedConfirmationRepromptContext.PromptType and conformance SharedConfirmationRepromptContext.PromptType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SharedConfirmationRepromptContext.PromptType and conformance SharedConfirmationRepromptContext.PromptType;
  if (!lazy protocol witness table cache variable for type SharedConfirmationRepromptContext.PromptType and conformance SharedConfirmationRepromptContext.PromptType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharedConfirmationRepromptContext.PromptType and conformance SharedConfirmationRepromptContext.PromptType);
  }
  return result;
}

void type metadata accessor for TUHandleType(uint64_t a1)
{
}

void type metadata accessor for INResolutionResultCode(uint64_t a1)
{
}

void type metadata accessor for FLOWSchemaFLOWDomainExecutionType(uint64_t a1)
{
}

void type metadata accessor for SKIPhoneDropInAnnouncementType(uint64_t a1)
{
}

void type metadata accessor for AFCallState(uint64_t a1)
{
}

void type metadata accessor for INPersonHandleEmergencyType(uint64_t a1)
{
}

void type metadata accessor for INStartCallIntentResponseCode(uint64_t a1)
{
}

void type metadata accessor for INCallRecordTypeOptions(uint64_t a1)
{
}

void type metadata accessor for INCallCapabilityOptions(uint64_t a1)
{
}

void type metadata accessor for CFErrorRef(uint64_t a1)
{
}

void type metadata accessor for INIntentSlotValueType(uint64_t a1)
{
}

void type metadata accessor for INCallRecordType(uint64_t a1)
{
}

void type metadata accessor for TUCallStatus(uint64_t a1)
{
}

void type metadata accessor for INFERENCESchemaINFERENCEAppSelectionUserPersona(uint64_t a1)
{
}

uint64_t base witness table accessor for Equatable in INCallCapabilityOptions()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type INCallCapabilityOptions and conformance INCallCapabilityOptions, type metadata accessor for INCallCapabilityOptions);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in INCallCapabilityOptions()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type INCallCapabilityOptions and conformance INCallCapabilityOptions, type metadata accessor for INCallCapabilityOptions);
}

uint64_t base witness table accessor for RawRepresentable in INCallCapabilityOptions()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type INCallCapabilityOptions and conformance INCallCapabilityOptions, type metadata accessor for INCallCapabilityOptions);
}

uint64_t base witness table accessor for SetAlgebra in INCallCapabilityOptions()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type INCallCapabilityOptions and conformance INCallCapabilityOptions, type metadata accessor for INCallCapabilityOptions);
}

uint64_t base witness table accessor for Equatable in INCallRecordTypeOptions()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type INCallRecordTypeOptions and conformance INCallRecordTypeOptions, type metadata accessor for INCallRecordTypeOptions);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in INCallRecordTypeOptions()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type INCallRecordTypeOptions and conformance INCallRecordTypeOptions, type metadata accessor for INCallRecordTypeOptions);
}

uint64_t base witness table accessor for RawRepresentable in INCallRecordTypeOptions()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type INCallRecordTypeOptions and conformance INCallRecordTypeOptions, type metadata accessor for INCallRecordTypeOptions);
}

uint64_t base witness table accessor for SetAlgebra in INCallRecordTypeOptions()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type INCallRecordTypeOptions and conformance INCallRecordTypeOptions, type metadata accessor for INCallRecordTypeOptions);
}

uint64_t base witness table accessor for Equatable in AFCallState()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type AFCallState and conformance AFCallState, type metadata accessor for AFCallState);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in AFCallState()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type AFCallState and conformance AFCallState, type metadata accessor for AFCallState);
}

uint64_t base witness table accessor for RawRepresentable in AFCallState()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type AFCallState and conformance AFCallState, type metadata accessor for AFCallState);
}

uint64_t base witness table accessor for SetAlgebra in AFCallState()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type AFCallState and conformance AFCallState, type metadata accessor for AFCallState);
}

uint64_t base witness table accessor for Equatable in INIntentSlotValueType()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type INIntentSlotValueType and conformance INIntentSlotValueType, type metadata accessor for INIntentSlotValueType);
}

void specialized Set.init(_nonEmptyArrayLiteral:)(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_3;
    }
  }
  else if (*(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8)))
  {
LABEL_3:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<App>);
    uint64_t v3 = (unsigned char *)OUTLINED_FUNCTION_12_3();
    goto LABEL_6;
  }
  uint64_t v3 = &_swiftEmptySetSingleton;
LABEL_6:
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v5)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
    if (!v5) {
      goto LABEL_24;
    }
  }
  unint64_t v6 = 0;
  Swift::Int v7 = v3 + 56;
  unint64_t v20 = a1 & 0xC000000000000001;
  unint64_t v18 = a1 + 32;
  uint64_t v19 = a1 & 0xFFFFFFFFFFFFFF8;
  while (1)
  {
    if (v20)
    {
      uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v6 >= *(void *)(v19 + 16)) {
        goto LABEL_27;
      }
      uint64_t v8 = *(void *)(v18 + 8 * v6);
      swift_retain();
    }
    BOOL v9 = __OFADD__(v6++, 1);
    if (v9) {
      break;
    }
    type metadata accessor for App();
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type App and conformance App, (void (*)(uint64_t))&type metadata accessor for App);
    uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v11 = -1 << v3[32];
    unint64_t v12 = v10 & ~v11;
    unint64_t v13 = v12 >> 6;
    uint64_t v14 = *(void *)&v7[8 * (v12 >> 6)];
    uint64_t v15 = 1 << v12;
    if (((1 << v12) & v14) != 0)
    {
      uint64_t v16 = ~v11;
      lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type App and conformance App, (void (*)(uint64_t))&type metadata accessor for App);
      while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
      {
        unint64_t v12 = (v12 + 1) & v16;
        unint64_t v13 = v12 >> 6;
        uint64_t v14 = *(void *)&v7[8 * (v12 >> 6)];
        uint64_t v15 = 1 << v12;
        if ((v14 & (1 << v12)) == 0) {
          goto LABEL_20;
        }
      }
      swift_release();
    }
    else
    {
LABEL_20:
      *(void *)&v7[8 * v13] = v15 | v14;
      *(void *)(*((void *)v3 + 6) + 8 * v12) = v8;
      OUTLINED_FUNCTION_38_2();
      if (v9) {
        goto LABEL_26;
      }
      *((void *)v3 + 2) = v17;
    }
    if (v6 == v5) {
      goto LABEL_24;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
}

void specialized RawRepresentable<>.hash(into:)(int a1, Swift::UInt a2)
{
}

uint64_t specialized _SwiftNewtypeWrapper<>.hash(into:)()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, Swift::UInt a2)
{
  return Hasher._finalize()();
}

Swift::Int specialized _SwiftNewtypeWrapper<>._rawHashValue(seed:)()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

BOOL static OneTimeHintHistory.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t specialized == infix<A>(_:_:)()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

{
  uint64_t v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_146();
  switch(v3)
  {
    case 1:
      OUTLINED_FUNCTION_236();
      break;
    case 3:
      OUTLINED_FUNCTION_234();
      break;
    case 4:
      OUTLINED_FUNCTION_235();
      break;
    case 5:
      OUTLINED_FUNCTION_237();
      break;
    default:
      break;
  }
  OUTLINED_FUNCTION_144_1();
  switch(v6)
  {
    case 1:
      uint64_t v1 = 0xE600000000000000;
      OUTLINED_FUNCTION_188();
      break;
    case 2:
      char v5 = 1885956979;
      break;
    case 3:
      OUTLINED_FUNCTION_230();
      break;
    case 4:
      OUTLINED_FUNCTION_232();
      break;
    case 5:
      uint64_t v1 = 0xE600000000000000;
      OUTLINED_FUNCTION_186_0();
      break;
    default:
      break;
  }
  if (v4 == v5 && v0 == v1) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    uint64_t v2 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  unint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_87_2();
  char v5 = v4;
  unint64_t v6 = 0x7373694D7473754ALL;
  Swift::Int v7 = 0xEE006C6C61436465;
  switch(v5)
  {
    case 1:
      unint64_t v6 = OUTLINED_FUNCTION_224();
      break;
    case 2:
      unint64_t v6 = 0x69486C6C61436F4ELL;
      Swift::Int v7 = 0xED000079726F7473;
      break;
    case 3:
      uint64_t v8 = OUTLINED_FUNCTION_179();
      goto LABEL_7;
    case 4:
      BOOL v9 = OUTLINED_FUNCTION_179();
      goto LABEL_9;
    case 5:
      uint64_t v8 = 0x327473726966;
LABEL_7:
      unint64_t v6 = v8 & 0xFFFFFFFFFFFFLL | 0x6423000000000000;
      uint64_t v10 = 0x31676F6C6169;
      goto LABEL_10;
    case 6:
      BOOL v9 = 0x327473726966;
LABEL_9:
      unint64_t v6 = v9 & 0xFFFFFFFFFFFFLL | 0x6423000000000000;
      uint64_t v10 = 0x32676F6C6169;
LABEL_10:
      Swift::Int v7 = v10 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
      break;
    default:
      break;
  }
  switch(v2)
  {
    case 1:
      OUTLINED_FUNCTION_221();
      break;
    case 2:
      uint64_t v3 = 0x69486C6C61436F4ELL;
      uint64_t v0 = 0xED000079726F7473;
      break;
    case 3:
      OUTLINED_FUNCTION_170_0();
      goto LABEL_17;
    case 4:
      OUTLINED_FUNCTION_170_0();
      goto LABEL_19;
    case 5:
      uint64_t v11 = 0x327473726966;
LABEL_17:
      uint64_t v3 = v11 & 0xFFFFFFFFFFFFLL | 0x6423000000000000;
      unint64_t v13 = 0x31676F6C6169;
      goto LABEL_20;
    case 6:
      unint64_t v12 = 0x327473726966;
LABEL_19:
      uint64_t v3 = v12 & 0xFFFFFFFFFFFFLL | 0x6423000000000000;
      unint64_t v13 = 0x32676F6C6169;
LABEL_20:
      uint64_t v0 = v13 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
      break;
    default:
      break;
  }
  if (v6 == v3 && v7 == v0) {
    OUTLINED_FUNCTION_20_21();
  }
  else {
    uint64_t v1 = OUTLINED_FUNCTION_5_40();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1 & 1;
}

{
  char v0;
  char v1;
  unint64_t v2;
  char v3;
  unint64_t v4;
  unint64_t v5;

  OUTLINED_FUNCTION_41_0();
  if (v3) {
    uint64_t v4 = v2;
  }
  else {
    uint64_t v4 = 0x8000000000490B50;
  }
  if (v1) {
    char v5 = v2;
  }
  else {
    char v5 = 0x8000000000490B50;
  }
  if (v4 == v5) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    uint64_t v0 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

{
  char v0;
  char v1;
  unint64_t v2;
  char v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  OUTLINED_FUNCTION_165();
  if (v1)
  {
    OUTLINED_FUNCTION_135_1();
    uint64_t v2 = OUTLINED_FUNCTION_161();
    if (v8) {
      Swift::Int v7 = v5;
    }
    else {
      Swift::Int v7 = v6;
    }
  }
  else
  {
    Swift::Int v7 = 0xE700000000000000;
    uint64_t v2 = OUTLINED_FUNCTION_166() & 0xFFFFFFFFFFFFLL | 0x74000000000000;
  }
  if (v3)
  {
    OUTLINED_FUNCTION_135_1();
    OUTLINED_FUNCTION_175();
    if (v8) {
      uint64_t v4 = v10;
    }
    else {
      uint64_t v4 = v12;
    }
    if (v8) {
      unint64_t v13 = v11;
    }
    else {
      unint64_t v13 = v9;
    }
  }
  else
  {
    unint64_t v13 = 0xE700000000000000;
  }
  if (v2 == v4 && v7 == v13) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    uint64_t v0 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

{
  uint64_t v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_146();
  switch(v3)
  {
    case 1:
      OUTLINED_FUNCTION_236();
      break;
    case 3:
      OUTLINED_FUNCTION_234();
      break;
    case 4:
      OUTLINED_FUNCTION_235();
      break;
    default:
      break;
  }
  OUTLINED_FUNCTION_144_1();
  switch(v6)
  {
    case 1:
      uint64_t v1 = 0xE600000000000000;
      OUTLINED_FUNCTION_188();
      break;
    case 2:
      char v5 = 1885956979;
      break;
    case 3:
      OUTLINED_FUNCTION_230();
      break;
    case 4:
      OUTLINED_FUNCTION_232();
      break;
    default:
      break;
  }
  if (v4 == v5 && v0 == v1) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    uint64_t v2 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v0;
  char v1;
  char v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  OUTLINED_FUNCTION_176();
  if (v1) {
    uint64_t v4 = 0xD000000000000015;
  }
  else {
    uint64_t v4 = 0x6F56746165706572;
  }
  char v5 = v3 | 0x8000000000000000;
  if (v1) {
    unint64_t v6 = v5;
  }
  else {
    unint64_t v6 = 0xEF6C69616D656369;
  }
  if (v2) {
    Swift::Int v7 = 0x6F56746165706572;
  }
  else {
    Swift::Int v7 = 0xD000000000000015;
  }
  if (v2) {
    uint64_t v8 = 0xEF6C69616D656369;
  }
  else {
    uint64_t v8 = v5;
  }
  if (v4 == v7 && v6 == v8) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    uint64_t v0 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

{
  char v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v1 = 0xEC000000656D614ELL;
  OUTLINED_FUNCTION_109_0();
  char v5 = v4;
  unint64_t v6 = 0x7373656E69737562;
  Swift::Int v7 = 0xEC000000656D614ELL;
  switch(v5)
  {
    case 1:
      unint64_t v6 = OUTLINED_FUNCTION_108_0() & 0xFFFFFFFFFFFFLL | 0x614E000000000000;
      Swift::Int v7 = 0xEA0000000000656DLL;
      break;
    case 2:
      unint64_t v6 = OUTLINED_FUNCTION_108_0() & 0xFFFFFFFFFFFFLL | 0x7250000000000000;
      Swift::Int v7 = 0xEC00000078696665;
      break;
    case 3:
      unint64_t v6 = OUTLINED_FUNCTION_108_0() & 0xFFFFFFFFFFFFLL | 0x7553000000000000;
      Swift::Int v7 = 0xEC00000078696666;
      break;
    default:
      break;
  }
  switch(v2)
  {
    case 1:
      OUTLINED_FUNCTION_107();
      uint64_t v3 = v8 & 0xFFFFFFFFFFFFLL | 0x614E000000000000;
      uint64_t v1 = 0xEA0000000000656DLL;
      break;
    case 2:
      OUTLINED_FUNCTION_107();
      uint64_t v3 = v9 & 0xFFFFFFFFFFFFLL | 0x7250000000000000;
      uint64_t v1 = 0xEC00000078696665;
      break;
    case 3:
      OUTLINED_FUNCTION_107();
      uint64_t v3 = v10 & 0xFFFFFFFFFFFFLL | 0x7553000000000000;
      uint64_t v1 = 0xEC00000078696666;
      break;
    default:
      break;
  }
  if (v6 == v3 && v7 == v1) {
    OUTLINED_FUNCTION_20_21();
  }
  else {
    uint64_t v0 = OUTLINED_FUNCTION_5_40();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

{
  unint64_t v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_146();
  switch(v3)
  {
    case 1:
      uint64_t v4 = "OngoingCall#NewCallPrompt";
      goto LABEL_4;
    case 2:
      uint64_t v4 = "CONFIRM_START_CALL";
LABEL_4:
      uint64_t v0 = (unint64_t)v4 | 0x8000000000000000;
      break;
    case 3:
      uint64_t v0 = 0x800000000048DCD0;
      break;
    case 4:
      uint64_t v0 = 0xE90000000000004CLL;
      break;
    default:
      break;
  }
  OUTLINED_FUNCTION_144_1();
  switch(v11)
  {
    case 1:
      unint64_t v6 = v7 + 1;
      unint64_t v12 = v10 - 32;
      goto LABEL_10;
    case 2:
      unint64_t v6 = v7 + 2;
      unint64_t v12 = v9 - 32;
LABEL_10:
      uint64_t v1 = v12 | 0x8000000000000000;
      break;
    case 3:
      uint64_t v1 = (v8 - 32) | 0x8000000000000000;
      unint64_t v6 = 0xD000000000000011;
      break;
    case 4:
      unint64_t v6 = 0x4C41435F44414552;
      uint64_t v1 = 0xE90000000000004CLL;
      break;
    default:
      break;
  }
  if (v5 == v6 && v0 == v1) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    uint64_t v2 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v0;
  unint64_t v1;
  char v2;
  unint64_t v3;
  char v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;

  uint64_t v1 = 0xEB00000000737365;
  OUTLINED_FUNCTION_197();
  if (v4)
  {
    OUTLINED_FUNCTION_167();
    if (v5 == 1) {
      Swift::Int v7 = 0xD000000000000012;
    }
    else {
      Swift::Int v7 = 0x54746C7561666564;
    }
    if (v5 == 1) {
      uint64_t v8 = v6;
    }
    else {
      uint64_t v8 = 0xED00007465677261;
    }
  }
  else
  {
    Swift::Int v7 = 0x6E69737542727273;
    uint64_t v8 = 0xEB00000000737365;
  }
  if (v2)
  {
    OUTLINED_FUNCTION_41_0();
    if (v10 == 1) {
      uint64_t v3 = 0xD000000000000012;
    }
    else {
      uint64_t v3 = 0x54746C7561666564;
    }
    if (v10 == 1) {
      uint64_t v1 = v9;
    }
    else {
      uint64_t v1 = 0xED00007465677261;
    }
  }
  if (v7 == v3 && v8 == v1) {
    OUTLINED_FUNCTION_20_21();
  }
  else {
    uint64_t v0 = OUTLINED_FUNCTION_5_40();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

{
  unint64_t v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_146();
  switch(v3)
  {
    case 1:
      uint64_t v0 = 0xE500000000000000;
      break;
    case 2:
      OUTLINED_FUNCTION_192();
      break;
    case 3:
      OUTLINED_FUNCTION_125_0();
      goto LABEL_6;
    case 4:
      uint64_t v0 = 0x656D69746563;
LABEL_6:
      uint64_t v0 = v0 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
      break;
    case 5:
      OUTLINED_FUNCTION_48_9();
      break;
    case 6:
      OUTLINED_FUNCTION_117_0();
      break;
    case 7:
      OUTLINED_FUNCTION_140_0();
      uint64_t v0 = 0xE900000000000079;
      break;
    case 8:
      OUTLINED_FUNCTION_139_0();
      uint64_t v0 = 0xE900000000000068;
      break;
    default:
      break;
  }
  OUTLINED_FUNCTION_144_1();
  switch(v6)
  {
    case 1:
      uint64_t v1 = 0xE500000000000000;
      OUTLINED_FUNCTION_121();
      char v5 = v7 & 0xFFFF0000FFFFFFFFLL | 0x7300000000;
      break;
    case 2:
      OUTLINED_FUNCTION_190();
      break;
    case 3:
      OUTLINED_FUNCTION_120();
      goto LABEL_16;
    case 4:
      char v5 = 0x61665F70756F7267;
      uint64_t v1 = 0x656D69746563;
LABEL_16:
      uint64_t v1 = v1 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
      break;
    case 5:
      OUTLINED_FUNCTION_45_9();
      break;
    case 6:
      OUTLINED_FUNCTION_113_0();
      break;
    case 7:
      OUTLINED_FUNCTION_118_0();
      uint64_t v1 = 0xE900000000000079;
      break;
    case 8:
      OUTLINED_FUNCTION_222();
      uint64_t v1 = 0xE900000000000068;
      break;
    default:
      break;
  }
  if (v4 == v5 && v0 == v1) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    uint64_t v2 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;

  OUTLINED_FUNCTION_214_0();
  if (v0 == v1) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

{
  unint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  OUTLINED_FUNCTION_215_0();
  uint64_t v4 = 7562617;
  switch(v5)
  {
    case 1:
      uint64_t v0 = 0xE200000000000000;
      uint64_t v4 = 28526;
      break;
    case 2:
      uint64_t v4 = OUTLINED_FUNCTION_86_3();
      break;
    case 3:
      uint64_t v4 = OUTLINED_FUNCTION_90_3();
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE300000000000000;
  switch(v2)
  {
    case 1:
      unint64_t v6 = 0xE200000000000000;
      uint64_t v3 = 28526;
      break;
    case 2:
      OUTLINED_FUNCTION_85_4();
      break;
    case 3:
      OUTLINED_FUNCTION_89_5();
      break;
    default:
      break;
  }
  if (v4 == v3 && v0 == v6) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    uint64_t v1 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1 & 1;
}

{
  unint64_t v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_146();
  switch(v3)
  {
    case 1:
      OUTLINED_FUNCTION_163();
      uint64_t v0 = 0xED00006172656D61;
      break;
    case 2:
      OUTLINED_FUNCTION_163();
      uint64_t v0 = 0xEB00000000646C6FLL;
      break;
    case 3:
      uint64_t v0 = 0xEC0000006172656DLL;
      break;
    case 4:
      uint64_t v0 = 0xEA0000000000646CLL;
      break;
    case 5:
      uint64_t v0 = 0xEE00656E6F68706FLL;
      break;
    case 6:
      OUTLINED_FUNCTION_117_0();
      break;
    default:
      break;
  }
  OUTLINED_FUNCTION_144_1();
  switch(v6)
  {
    case 1:
      OUTLINED_FUNCTION_162();
      char v5 = v7 & 0xFFFFFFFFFFFFLL | 0x4365000000000000;
      uint64_t v1 = 0xED00006172656D61;
      break;
    case 2:
      OUTLINED_FUNCTION_162();
      char v5 = v8 & 0xFFFFFFFFFFFFLL | 0x4865000000000000;
      uint64_t v1 = 0xEB00000000646C6FLL;
      break;
    case 3:
      OUTLINED_FUNCTION_160();
      char v5 = v9 & 0xFFFFFFFFFFFFLL | 0x6143000000000000;
      uint64_t v1 = 0xEC0000006172656DLL;
      break;
    case 4:
      OUTLINED_FUNCTION_160();
      char v5 = v10 & 0xFFFFFFFFFFFFLL | 0x6F48000000000000;
      uint64_t v1 = 0xEA0000000000646CLL;
      break;
    case 5:
      char v5 = 0x7263694D6574756DLL;
      uint64_t v1 = 0xEE00656E6F68706FLL;
      break;
    case 6:
      OUTLINED_FUNCTION_113_0();
      break;
    default:
      break;
  }
  if (v4 == v5 && v0 == v1) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    uint64_t v2 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  unint64_t v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_182();
  switch(v3)
  {
    case 1:
      uint64_t v0 = 0xE400000000000000;
      break;
    case 2:
      uint64_t v0 = 0xEA0000000000656ELL;
      break;
    case 3:
      OUTLINED_FUNCTION_48_9();
      break;
    default:
      break;
  }
  OUTLINED_FUNCTION_189();
  switch(v6)
  {
    case 1:
      uint64_t v1 = 0xE400000000000000;
      char v5 = 1684828008;
      break;
    case 2:
      char v5 = 0x6F68706F7263696DLL;
      uint64_t v1 = 0xEA0000000000656ELL;
      break;
    case 3:
      OUTLINED_FUNCTION_45_9();
      break;
    case 4:
      char v5 = 0x656D756C6F76;
      break;
    default:
      break;
  }
  if (v4 == v5 && v0 == v1) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    uint64_t v2 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  unint64_t v0;
  char v1;
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_160();
  uint64_t v2 = 0xE600000000000000;
  switch(v3)
  {
    case 1:
      uint64_t v2 = 0xE700000000000000;
      OUTLINED_FUNCTION_163();
      break;
    case 3:
      uint64_t v2 = 0x8000000000490E50;
      OUTLINED_FUNCTION_123_0();
      break;
    case 4:
      OUTLINED_FUNCTION_187_0();
      uint64_t v2 = v4 | 0x8000000000000000;
      break;
    case 5:
      uint64_t v2 = 0xE800000000000000;
      break;
    case 6:
      uint64_t v2 = 0xE400000000000000;
      break;
    default:
      break;
  }
  OUTLINED_FUNCTION_189();
  switch(v7)
  {
    case 1:
      uint64_t v0 = 0xE700000000000000;
      OUTLINED_FUNCTION_162();
      unint64_t v6 = v8 & 0xFFFFFFFFFFFFLL | 0x65000000000000;
      break;
    case 2:
      unint64_t v6 = 0x656C67676F74;
      break;
    case 3:
      OUTLINED_FUNCTION_113_0();
      break;
    case 4:
      OUTLINED_FUNCTION_158();
      uint64_t v0 = v9 | 0x8000000000000000;
      break;
    case 5:
      uint64_t v0 = 0xE800000000000000;
      unint64_t v6 = 0x6C6576654C746573;
      break;
    case 6:
      uint64_t v0 = 0xE400000000000000;
      unint64_t v6 = 1684104562;
      break;
    default:
      break;
  }
  if (v5 == v6 && v2 == v0) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    uint64_t v1 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1 & 1;
}

{
  unint64_t v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_146();
  switch(v3)
  {
    case 1:
      uint64_t v0 = 0xE90000000000006BLL;
      break;
    case 2:
      OUTLINED_FUNCTION_192();
      break;
    case 3:
      OUTLINED_FUNCTION_125_0();
      uint64_t v0 = v0 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
      break;
    case 4:
      OUTLINED_FUNCTION_48_9();
      break;
    case 6:
      uint64_t v0 = 0xE600000000000000;
      break;
    case 7:
      uint64_t v0 = 0xE700000000000000;
      break;
    case 9:
      uint64_t v0 = 0xE700000000000000;
      break;
    case 10:
      uint64_t v0 = 0xE600000000000000;
      break;
    case 11:
      uint64_t v0 = 0xE700000000000000;
      break;
    case 12:
      OUTLINED_FUNCTION_237();
      break;
    default:
      break;
  }
  OUTLINED_FUNCTION_144_1();
  switch(v6)
  {
    case 1:
      char v5 = 0x636162206C6C6163;
      uint64_t v1 = 0xE90000000000006BLL;
      break;
    case 2:
      OUTLINED_FUNCTION_190();
      break;
    case 3:
      OUTLINED_FUNCTION_120();
      uint64_t v1 = v1 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
      break;
    case 4:
      OUTLINED_FUNCTION_45_9();
      break;
    case 5:
      char v5 = 1684957542;
      break;
    case 6:
      uint64_t v1 = 0xE600000000000000;
      char v5 = 0x6C6169646572;
      break;
    case 7:
      uint64_t v1 = 0xE700000000000000;
      char v5 = 0x79666972616C63;
      break;
    case 8:
      char v5 = 1684104562;
      break;
    case 9:
      uint64_t v1 = 0xE700000000000000;
      char v5 = 0x6D7269666E6F63;
      break;
    case 10:
      uint64_t v1 = 0xE600000000000000;
      char v5 = 0x726577736E61;
      break;
    case 11:
      uint64_t v1 = 0xE700000000000000;
      OUTLINED_FUNCTION_201();
      break;
    case 12:
      uint64_t v1 = 0xE600000000000000;
      OUTLINED_FUNCTION_186_0();
      break;
    case 13:
      char v5 = 1852403562;
      break;
    default:
      break;
  }
  if (v4 == v5 && v0 == v1) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    uint64_t v2 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  unint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  OUTLINED_FUNCTION_215_0();
  uint64_t v4 = 7562617;
  switch(v5)
  {
    case 1:
      uint64_t v0 = 0xE200000000000000;
      uint64_t v4 = 28526;
      break;
    case 2:
      uint64_t v0 = 0xE600000000000000;
      uint64_t v4 = 0x6C65636E6163;
      break;
    case 3:
      uint64_t v4 = OUTLINED_FUNCTION_86_3();
      break;
    case 4:
      uint64_t v4 = OUTLINED_FUNCTION_90_3();
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE300000000000000;
  switch(v2)
  {
    case 1:
      unint64_t v6 = 0xE200000000000000;
      uint64_t v3 = 28526;
      break;
    case 2:
      unint64_t v6 = 0xE600000000000000;
      uint64_t v3 = 0x6C65636E6163;
      break;
    case 3:
      OUTLINED_FUNCTION_85_4();
      break;
    case 4:
      OUTLINED_FUNCTION_89_5();
      break;
    default:
      break;
  }
  if (v4 == v3 && v0 == v6) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    uint64_t v1 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1 & 1;
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;

  OUTLINED_FUNCTION_214_0();
  if (v0 == v1) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

{
  char v0;
  unint64_t v1;
  char v2;
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v1 = 0xE900000000000073;
  OUTLINED_FUNCTION_121();
  uint64_t v4 = v3 | 0x6570795400000000;
  char v5 = 0xE900000000000073;
  Swift::Int v7 = v6;
  uint64_t v8 = 0x657079546C6C6163;
  switch(v7)
  {
    case 1:
      uint64_t v8 = OUTLINED_FUNCTION_187_0();
      char v5 = v9 | 0x8000000000000000;
      break;
    case 2:
      char v5 = 0x800000000048C230;
      uint64_t v8 = OUTLINED_FUNCTION_123_0();
      break;
    case 3:
      uint64_t v8 = 0x6E65697069636572;
      char v5 = 0xE900000000000074;
      break;
    default:
      break;
  }
  switch(v2)
  {
    case 1:
      OUTLINED_FUNCTION_158();
      uint64_t v1 = v10 | 0x8000000000000000;
      break;
    case 2:
      OUTLINED_FUNCTION_174();
      break;
    case 3:
      uint64_t v4 = 0x6E65697069636572;
      uint64_t v1 = 0xE900000000000074;
      break;
    default:
      break;
  }
  if (v8 == v4 && v5 == v1) {
    OUTLINED_FUNCTION_20_21();
  }
  else {
    uint64_t v0 = OUTLINED_FUNCTION_5_40();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

{
  char v0;
  unint64_t v1;
  char v2;
  unsigned int v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;

  uint64_t v1 = 0xEE007974696C6962;
  OUTLINED_FUNCTION_121();
  uint64_t v4 = v3 | 0x6170614300000000;
  unint64_t v6 = v5;
  Swift::Int v7 = 0x617061436C6C6163;
  uint64_t v8 = 0xEE007974696C6962;
  switch(v6)
  {
    case 1:
      Swift::Int v7 = 0x756F526F69647561;
      uint64_t v8 = 0xEA00000000006574;
      break;
    case 2:
      Swift::Int v7 = OUTLINED_FUNCTION_224();
      break;
    case 3:
      Swift::Int v7 = 0x74616E6974736564;
      uint64_t v8 = 0xEF657079546E6F69;
      break;
    case 4:
      uint64_t v8 = 0xE800000000000000;
      Swift::Int v7 = OUTLINED_FUNCTION_166() & 0xFFFFFFFFFFFFLL | 0x7374000000000000;
      break;
    case 5:
      Swift::Int v7 = 0x756F72476C6C6163;
      uint64_t v8 = 0xEA00000000007370;
      break;
    default:
      break;
  }
  switch(v2)
  {
    case 1:
      uint64_t v4 = 0x756F526F69647561;
      uint64_t v1 = 0xEA00000000006574;
      break;
    case 2:
      OUTLINED_FUNCTION_221();
      break;
    case 3:
      uint64_t v4 = 0x74616E6974736564;
      uint64_t v1 = 0xEF657079546E6F69;
      break;
    case 4:
      uint64_t v1 = 0xE800000000000000;
      OUTLINED_FUNCTION_165();
      uint64_t v4 = v9 & 0xFFFFFFFFFFFFLL | 0x7374000000000000;
      break;
    case 5:
      OUTLINED_FUNCTION_121();
      uint64_t v4 = v10 | 0x756F724700000000;
      uint64_t v1 = 0xEA00000000007370;
      break;
    default:
      break;
  }
  if (v7 == v4 && v8 == v1) {
    OUTLINED_FUNCTION_20_21();
  }
  else {
    uint64_t v0 = OUTLINED_FUNCTION_5_40();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

{
  unint64_t v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_182();
  switch(v3)
  {
    case 1:
      uint64_t v0 = 0xEB00000000656D75;
      break;
    case 2:
      OUTLINED_FUNCTION_111_0();
      uint64_t v4 = 1702131053;
      goto LABEL_11;
    case 3:
      OUTLINED_FUNCTION_111_0();
      char v5 = 0x6574756D6E75;
      goto LABEL_6;
    case 4:
      OUTLINED_FUNCTION_111_0();
      char v5 = 0x656D756C6F76;
LABEL_6:
      uint64_t v0 = v5 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
      break;
    case 5:
      uint64_t v0 = 0xE400000000000000;
      break;
    case 6:
      uint64_t v0 = 0xE900000000000065;
      break;
    case 7:
      uint64_t v0 = 0xEB00000000657475;
      break;
    case 8:
      uint64_t v4 = 1701736296;
LABEL_11:
      uint64_t v0 = v4 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
      break;
    default:
      break;
  }
  OUTLINED_FUNCTION_189();
  switch(v8)
  {
    case 1:
      OUTLINED_FUNCTION_121();
      Swift::Int v7 = v9 | 0x6C6F765F00000000;
      uint64_t v1 = 0xEB00000000656D75;
      break;
    case 2:
      OUTLINED_FUNCTION_112_0();
      uint64_t v10 = 1702131053;
      goto LABEL_22;
    case 3:
      OUTLINED_FUNCTION_112_0();
      uint64_t v11 = 0x6574756D6E75;
      goto LABEL_17;
    case 4:
      OUTLINED_FUNCTION_112_0();
      uint64_t v11 = 0x656D756C6F76;
LABEL_17:
      uint64_t v1 = v11 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
      break;
    case 5:
      uint64_t v1 = 0xE400000000000000;
      Swift::Int v7 = 1684828008;
      break;
    case 6:
      Swift::Int v7 = 0x74756D5F666C6573;
      uint64_t v1 = 0xE900000000000065;
      break;
    case 7:
      Swift::Int v7 = 0x6D6E755F666C6573;
      uint64_t v1 = 0xEB00000000657475;
      break;
    case 8:
      Swift::Int v7 = 0x7072656B61657073;
      uint64_t v10 = 1701736296;
LABEL_22:
      uint64_t v1 = v10 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
      break;
    default:
      break;
  }
  if (v6 == v7 && v0 == v1) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    uint64_t v2 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v0;
  unsigned __int8 v1;
  char v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  OUTLINED_FUNCTION_107();
  uint64_t v4 = v1;
  if (v1)
  {
    if (v1 == 1) {
      char v5 = 0x7461446567616D69;
    }
    else {
      char v5 = 0x63417463656C6573;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xE900000000000061;
    }
    else {
      unint64_t v6 = 0xEC0000006E6F6974;
    }
  }
  else
  {
    unint64_t v6 = 0xE600000000000000;
    char v5 = OUTLINED_FUNCTION_108_0();
  }
  if (v2)
  {
    if (v2 == 1) {
      uint64_t v3 = 0x7461446567616D69;
    }
    else {
      uint64_t v3 = 0x63417463656C6573;
    }
    if (v2 == 1) {
      Swift::Int v7 = 0xE900000000000061;
    }
    else {
      Swift::Int v7 = 0xEC0000006E6F6974;
    }
  }
  else
  {
    Swift::Int v7 = 0xE600000000000000;
  }
  if (v5 == v3 && v6 == v7) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    uint64_t v0 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

{
  unint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;

  OUTLINED_FUNCTION_172();
  if (v3)
  {
    OUTLINED_FUNCTION_167();
    OUTLINED_FUNCTION_141_1();
    if (v4) {
      uint64_t v10 = v6;
    }
    else {
      uint64_t v10 = v9;
    }
    if (v4) {
      uint64_t v1 = v7;
    }
    else {
      uint64_t v1 = v8;
    }
  }
  else
  {
    uint64_t v10 = OUTLINED_FUNCTION_223(19);
  }
  if (v5)
  {
    OUTLINED_FUNCTION_41_0();
    if (v12 == 1)
    {
      uint64_t v0 = v11;
    }
    else
    {
      unint64_t v6 = 0x636972656E6567;
      uint64_t v0 = 0xE700000000000000;
    }
  }
  if (v10 == v6 && v1 == v0) {
    OUTLINED_FUNCTION_20_21();
  }
  else {
    uint64_t v2 = OUTLINED_FUNCTION_5_40();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v0;
  char v1;
  char v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  OUTLINED_FUNCTION_176();
  if (v1) {
    uint64_t v4 = 0xD000000000000014;
  }
  else {
    uint64_t v4 = 0x31676F6C616964;
  }
  char v5 = v3 | 0x8000000000000000;
  if (v1) {
    unint64_t v6 = v5;
  }
  else {
    unint64_t v6 = 0xE700000000000000;
  }
  if (v2) {
    Swift::Int v7 = 0x31676F6C616964;
  }
  else {
    Swift::Int v7 = 0xD000000000000014;
  }
  if (v2) {
    uint64_t v8 = 0xE700000000000000;
  }
  else {
    uint64_t v8 = v5;
  }
  if (v4 == v7 && v6 == v8) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    uint64_t v0 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

{
  unint64_t v0;
  unint64_t v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;

  OUTLINED_FUNCTION_172();
  if (v3)
  {
    OUTLINED_FUNCTION_167();
    if (v6 == 1) {
      uint64_t v8 = v5 + 1;
    }
    else {
      uint64_t v8 = 0x6143656E4F736168;
    }
    if (v6 == 1) {
      uint64_t v1 = v7;
    }
    else {
      uint64_t v1 = 0xEE00657079546C6CLL;
    }
  }
  else
  {
    uint64_t v8 = OUTLINED_FUNCTION_223(19);
  }
  if (v4)
  {
    OUTLINED_FUNCTION_41_0();
    if (v11 == 1) {
      char v5 = v9 + 1;
    }
    else {
      char v5 = 0x6143656E4F736168;
    }
    if (v11 == 1) {
      uint64_t v0 = v10;
    }
    else {
      uint64_t v0 = 0xEE00657079546C6CLL;
    }
  }
  if (v8 == v5 && v1 == v0) {
    OUTLINED_FUNCTION_20_21();
  }
  else {
    uint64_t v2 = OUTLINED_FUNCTION_5_40();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  uint64_t v0;
  unint64_t v1;
  char v2;
  unsigned __int8 v3;
  char v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_172();
  unint64_t v6 = v3;
  if (v3)
  {
    if (v3 == 1) {
      Swift::Int v7 = v5 + 6;
    }
    else {
      Swift::Int v7 = 0x636972656E6567;
    }
    if (v6 == 1) {
      uint64_t v1 = 0x800000000048F3E0;
    }
    else {
      uint64_t v1 = 0xE700000000000000;
    }
  }
  else
  {
    Swift::Int v7 = OUTLINED_FUNCTION_223(17);
  }
  if (v4)
  {
    OUTLINED_FUNCTION_41_0();
    OUTLINED_FUNCTION_141_1();
    if (v8) {
      char v5 = v10;
    }
    else {
      char v5 = v12;
    }
    if (v8) {
      uint64_t v0 = v9;
    }
    else {
      uint64_t v0 = v11;
    }
  }
  if (v7 == v5 && v1 == v0) {
    OUTLINED_FUNCTION_20_21();
  }
  else {
    uint64_t v2 = OUTLINED_FUNCTION_5_40();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v0;
  char v1;
  char v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  OUTLINED_FUNCTION_176();
  if (v1) {
    uint64_t v4 = 0xD00000000000001ELL;
  }
  else {
    uint64_t v4 = 0x65766947656D6153;
  }
  char v5 = v3 | 0x8000000000000000;
  if (v1) {
    unint64_t v6 = v5;
  }
  else {
    unint64_t v6 = 0xED0000656D614E6ELL;
  }
  if (v2) {
    Swift::Int v7 = 0x65766947656D6153;
  }
  else {
    Swift::Int v7 = 0xD00000000000001ELL;
  }
  if (v2) {
    uint64_t v8 = 0xED0000656D614E6ELL;
  }
  else {
    uint64_t v8 = v5;
  }
  if (v4 == v7 && v6 == v8) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    uint64_t v0 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

{
  char v0;
  char v1;
  char v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  OUTLINED_FUNCTION_176();
  if (v1) {
    uint64_t v4 = 0x436D7269666E6F43;
  }
  else {
    uint64_t v4 = 0xD000000000000012;
  }
  char v5 = v3 | 0x8000000000000000;
  if (v1) {
    unint64_t v6 = 0xEE00746361746E6FLL;
  }
  else {
    unint64_t v6 = v5;
  }
  if (v2) {
    Swift::Int v7 = 0xD000000000000012;
  }
  else {
    Swift::Int v7 = 0x436D7269666E6F43;
  }
  if (v2) {
    uint64_t v8 = v5;
  }
  else {
    uint64_t v8 = 0xEE00746361746E6FLL;
  }
  if (v4 == v7 && v6 == v8) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    uint64_t v0 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

{
  char v0;
  char v1;
  unsigned int v2;
  uint64_t v3;
  char v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;

  OUTLINED_FUNCTION_121();
  uint64_t v3 = v2 | 0x676E6900000000;
  if (v4)
  {
    OUTLINED_FUNCTION_167();
    if (v5 == 1) {
      Swift::Int v7 = 0xD000000000000011;
    }
    else {
      Swift::Int v7 = 7565171;
    }
    if (v5 == 1) {
      uint64_t v8 = v6;
    }
    else {
      uint64_t v8 = 0xE300000000000000;
    }
  }
  else
  {
    uint64_t v8 = 0xE700000000000000;
    Swift::Int v7 = 0x676E696C6C6163;
  }
  if (v1)
  {
    OUTLINED_FUNCTION_41_0();
    if (v10 == 1) {
      uint64_t v3 = 0xD000000000000011;
    }
    else {
      uint64_t v3 = 7565171;
    }
    if (v10 == 1) {
      uint64_t v11 = v9;
    }
    else {
      uint64_t v11 = 0xE300000000000000;
    }
  }
  else
  {
    uint64_t v11 = 0xE700000000000000;
  }
  if (v7 == v3 && v8 == v11) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    uint64_t v0 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

{
  char v0;
  char v1;
  char v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  OUTLINED_FUNCTION_176();
  if (v1) {
    uint64_t v4 = 0x32676F6C616964;
  }
  else {
    uint64_t v4 = 0xD000000000000016;
  }
  char v5 = v3 | 0x8000000000000000;
  if (v1) {
    unint64_t v6 = 0xE700000000000000;
  }
  else {
    unint64_t v6 = v5;
  }
  if (v2) {
    Swift::Int v7 = 0xD000000000000016;
  }
  else {
    Swift::Int v7 = 0x32676F6C616964;
  }
  if (v2) {
    uint64_t v8 = v5;
  }
  else {
    uint64_t v8 = 0xE700000000000000;
  }
  if (v4 == v7 && v6 == v8) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    uint64_t v0 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;

  OUTLINED_FUNCTION_214_0();
  if (v0 == v1) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = OUTLINED_FUNCTION_110_0();
  }
  OUTLINED_FUNCTION_212_0();
  return v2 & 1;
}

{
  char v0;
  char v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_209();
  uint64_t v3 = 0xE800000000000000;
  char v5 = v4;
  unint64_t v6 = 0x656D695465636146;
  switch(v5)
  {
    case 1:
      Swift::Int v7 = 0x6F69647541;
      goto LABEL_4;
    case 2:
      unint64_t v6 = 0x63614670756F7247;
      Swift::Int v7 = 0x656D695465;
LABEL_4:
      uint64_t v3 = v7 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
      break;
    case 3:
      uint64_t v3 = 0xE600000000000000;
      unint64_t v6 = 0x6C616D726F4ELL;
      break;
    case 4:
      unint64_t v6 = OUTLINED_FUNCTION_117_0();
      break;
    default:
      break;
  }
  uint64_t v8 = 0xE800000000000000;
  switch(v1)
  {
    case 1:
      BOOL v9 = 0x6F69647541;
      goto LABEL_10;
    case 2:
      uint64_t v2 = 0x63614670756F7247;
      BOOL v9 = 0x656D695465;
LABEL_10:
      uint64_t v8 = v9 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
      break;
    case 3:
      uint64_t v8 = 0xE600000000000000;
      uint64_t v2 = 0x6C616D726F4ELL;
      break;
    case 4:
      OUTLINED_FUNCTION_113_0();
      break;
    default:
      break;
  }
  if (v6 == v2 && v3 == v8) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    uint64_t v0 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

{
  uint64_t v0;
  char v1;
  char v2;
  unint64_t v3;
  char v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;

  OUTLINED_FUNCTION_87_2();
  if (v4)
  {
    OUTLINED_FUNCTION_167();
    if (v5 == 1) {
      Swift::Int v7 = 0xD000000000000015;
    }
    else {
      Swift::Int v7 = 0x696D6F636E496F4ELL;
    }
    if (v5 == 1) {
      uint64_t v8 = v6;
    }
    else {
      uint64_t v8 = v0 + 777;
    }
  }
  else
  {
    Swift::Int v7 = 0x7373694D7473754ALL;
    uint64_t v8 = 0xEE006C6C61436465;
  }
  if (v2)
  {
    OUTLINED_FUNCTION_41_0();
    if (v10 == 1) {
      uint64_t v3 = 0xD000000000000015;
    }
    else {
      uint64_t v3 = 0x696D6F636E496F4ELL;
    }
    if (v10 == 1) {
      uint64_t v0 = v9;
    }
    else {
      v0 += 777;
    }
  }
  if (v7 == v3 && v8 == v0) {
    OUTLINED_FUNCTION_20_21();
  }
  else {
    uint64_t v1 = OUTLINED_FUNCTION_5_40();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1 & 1;
}

{
  char v0;
  unsigned __int8 v1;
  char v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  OUTLINED_FUNCTION_61_6();
  uint64_t v4 = v1;
  if (v1)
  {
    if (v1 == 1) {
      char v5 = 0x646C6F486E4FLL;
    }
    else {
      char v5 = 0x676E69676E6952;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xE600000000000000;
    }
    else {
      unint64_t v6 = 0xE700000000000000;
    }
  }
  else
  {
    unint64_t v6 = 0xE700000000000000;
    char v5 = OUTLINED_FUNCTION_62_8();
  }
  if (v2)
  {
    if (v2 == 1) {
      uint64_t v3 = 0x646C6F486E4FLL;
    }
    else {
      uint64_t v3 = 0x676E69676E6952;
    }
    if (v2 == 1) {
      Swift::Int v7 = 0xE600000000000000;
    }
    else {
      Swift::Int v7 = 0xE700000000000000;
    }
  }
  else
  {
    Swift::Int v7 = 0xE700000000000000;
  }
  if (v5 == v3 && v6 == v7) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    uint64_t v0 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

{
  char v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  uint64_t v1 = 0xED00006F69647541;
  OUTLINED_FUNCTION_209();
  char v5 = v4;
  unint64_t v6 = 0x656D695465636146;
  Swift::Int v7 = 0xED00006F69647541;
  switch(v5)
  {
    case 1:
      Swift::Int v7 = 0xED00006F65646956;
      break;
    case 2:
      Swift::Int v7 = 0xE700000000000000;
      unint64_t v6 = OUTLINED_FUNCTION_62_8();
      break;
    case 3:
      Swift::Int v7 = 0xE500000000000000;
      unint64_t v6 = 0x656E6F6850;
      break;
    case 4:
      unint64_t v6 = OUTLINED_FUNCTION_72_6();
      Swift::Int v7 = 0xEA00006F69647541;
      break;
    case 5:
      unint64_t v6 = OUTLINED_FUNCTION_72_6();
      uint64_t v8 = 0xED00696475417541;
      goto LABEL_8;
    case 6:
      unint64_t v6 = OUTLINED_FUNCTION_72_6();
      uint64_t v8 = 0xED00656469567541;
LABEL_8:
      Swift::Int v7 = v8 & 0xFFFFFFFFFFFFLL | 0xEF6F000000000000;
      break;
    default:
      break;
  }
  switch(v2)
  {
    case 1:
      uint64_t v1 = 0xED00006F65646956;
      break;
    case 2:
      uint64_t v1 = 0xE700000000000000;
      OUTLINED_FUNCTION_61_6();
      break;
    case 3:
      uint64_t v1 = 0xE500000000000000;
      uint64_t v3 = 0x656E6F6850;
      break;
    case 4:
      OUTLINED_FUNCTION_71_3();
      uint64_t v1 = 0xEA00006F69647541;
      break;
    case 5:
      OUTLINED_FUNCTION_71_3();
      BOOL v9 = 0xED00696475417541;
      goto LABEL_16;
    case 6:
      OUTLINED_FUNCTION_71_3();
      BOOL v9 = 0xED00656469567541;
LABEL_16:
      uint64_t v1 = v9 & 0xFFFFFFFFFFFFLL | 0xEF6F000000000000;
      break;
    default:
      break;
  }
  if (v6 == v3 && v7 == v1) {
    OUTLINED_FUNCTION_20_21();
  }
  else {
    uint64_t v0 = OUTLINED_FUNCTION_5_40();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;

  OUTLINED_FUNCTION_214_0();
  if (v0 == v1) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = OUTLINED_FUNCTION_110_0();
  }
  OUTLINED_FUNCTION_212_0();
  return v2 & 1;
}

uint64_t specialized static _SwiftNewtypeWrapper<>._forceBridgeFromObjectiveC(_:result:)(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t specialized static _SwiftNewtypeWrapper<>._conditionallyBridgeFromObjectiveC(_:result:)(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

NSString specialized static _SwiftNewtypeWrapper<>._unconditionallyBridgeFromObjectiveC(_:)()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v0 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  return v0;
}

Swift::Int specialized RawRepresentable<>.hashValue.getter(Swift::UInt a1)
{
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_3_115();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t outlined init with copy of UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for INPersonHandleType(uint64_t a1)
{
}

void type metadata accessor for INPersonHandleLabel(uint64_t a1)
{
}

void type metadata accessor for INAddCallParticipantParticipantUnsupportedReason(uint64_t a1)
{
}

void type metadata accessor for INPersonHandleFaceTimeType(uint64_t a1)
{
}

void type metadata accessor for INSiriAuthorizationStatus(uint64_t a1)
{
}

void type metadata accessor for TUHandleType(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t base witness table accessor for Equatable in INSiriAuthorizationStatus()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type INSiriAuthorizationStatus and conformance INSiriAuthorizationStatus, type metadata accessor for INSiriAuthorizationStatus);
}

uint64_t base witness table accessor for RawRepresentable in INPersonHandleLabel()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type INPersonHandleLabel and conformance INPersonHandleLabel, type metadata accessor for INPersonHandleLabel);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in INPersonHandleLabel()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type INPersonHandleLabel and conformance INPersonHandleLabel, type metadata accessor for INPersonHandleLabel);
}

uint64_t base witness table accessor for Equatable in INPersonHandleLabel()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type INPersonHandleLabel and conformance INPersonHandleLabel, type metadata accessor for INPersonHandleLabel);
}

uint64_t specialized _SwiftNewtypeWrapper<>._bridgeToObjectiveC()(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = a2(v3);
  swift_bridgeObjectRelease();
  return v4;
}

void AppQuery.Builder.overrides.setter()
{
}

uint64_t AnnounceVoicemailDirectAction.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t CallingIntentContinueInAppStrategy.requireUnlock(intentResolutionRecord:)()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_6_3(uint64_t *a1)
{
  return variable initialization expression of PhoneCallNLv3Intent.attributes(a1);
}

uint64_t OUTLINED_FUNCTION_8_7()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_9_6()
{
  return 0;
}

unint64_t OUTLINED_FUNCTION_10_2(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

uint64_t OUTLINED_FUNCTION_12_3()
{
  return static _SetStorage.allocate(capacity:)();
}

double OUTLINED_FUNCTION_14_6@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_16_6()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_17_1()
{
  return v0;
}

void OUTLINED_FUNCTION_18_4()
{
}

char *OUTLINED_FUNCTION_20_4@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_22_1()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

PhoneCallFlowDelegatePlugin::PhoneCallMetrics::CodingKeys_optional __swiftcall PhoneCallMetrics.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (PhoneCallFlowDelegatePlugin::PhoneCallMetrics::CodingKeys_optional)2;
}

void OUTLINED_FUNCTION_31_3(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = v2;
}

uint64_t OUTLINED_FUNCTION_32_3()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_33_0(uint64_t a1)
{
  return *(void *)a1;
}

PhoneCallFlowDelegatePlugin::PhoneCallProvider::CodingKeys_optional __swiftcall PhoneCallProvider.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (PhoneCallFlowDelegatePlugin::PhoneCallProvider::CodingKeys_optional)3;
}

uint64_t OUTLINED_FUNCTION_35_2()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_37_1()
{
  return 0;
}

uint64_t default argument 0 of ContactDonationInfo.init(thirdPartyAppId:contactInNumberOfThirdPartyApps:contactExistsInFirstParty:)()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_41()
{
  return static DialogPhase.completion.getter();
}

uint64_t OUTLINED_FUNCTION_42_0(uint64_t result)
{
  *(void *)(v4 - 104) = result;
  *(void *)(v4 - 96) = v3;
  *(void *)(v4 - 128) = v2;
  *(void *)(v4 - 88) = v1;
  return result;
}

uint64_t OUTLINED_FUNCTION_43_1()
{
  *(void *)(v1 - 88) = v0;
  return 0;
}

void *OUTLINED_FUNCTION_44_1(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unint64_t v12 = (void *)(a1 + 16);
  return memcpy(v12, v10, 0xB0uLL);
}

uint64_t OUTLINED_FUNCTION_46_2@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  v2[3] = v3;
  v2[4] = a2;
  *uint64_t v2 = result;
  return result;
}

double OUTLINED_FUNCTION_47_1(uint64_t a1)
{
  void *v1 = a1;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_48_1@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v2[3] = a1;
  v2[4] = a2;
  *uint64_t v2 = v3;
  return v3;
}

BOOL OUTLINED_FUNCTION_49_1@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t OUTLINED_FUNCTION_51()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_55_0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  v2[3] = v3;
  v2[4] = a2;
  *uint64_t v2 = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_58_0()
{
  return 20;
}

uint64_t OUTLINED_FUNCTION_60_0()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_61_0()
{
  return OutputGenerationManifest.init(dialogPhase:_:)();
}

uint64_t OUTLINED_FUNCTION_67_0()
{
  return CATWrapper.__allocating_init(options:globals:)();
}

uint64_t property wrapper backing initializer of EmergencyCountdownModel.callingLabel()
{
  return Loggable.init(wrappedValue:)();
}

uint64_t EmergencyCountdownModel.sashTitle.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  Loggable.wrappedValue.getter();
  return v1;
}

uint64_t key path setter for SearchCallHistoryBinaryButtonModel.primaryText : SearchCallHistoryBinaryButtonModel()
{
  return YesNoConfirmationModel.yesText.setter();
}

uint64_t YesNoConfirmationModel.yesText.setter()
{
  return Loggable.wrappedValue.setter();
}

uint64_t (*YesNoConfirmationModel.yesText.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_8_0();
  *uint64_t v0 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  void v1[4] = Loggable.wrappedValue.modify();
  return SearchCallHistoryBinaryButtonModel.primaryText.modify;
}

uint64_t property wrapper backing initializer of SearchCallHistoryBinaryButtonModel.primaryAction()
{
  type metadata accessor for SABaseClientBoundCommand();

  return CodableAceObject.init(wrappedValue:)();
}

unint64_t type metadata accessor for SABaseClientBoundCommand()
{
  unint64_t result = lazy cache variable for type metadata for SABaseClientBoundCommand;
  if (!lazy cache variable for type metadata for SABaseClientBoundCommand)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SABaseClientBoundCommand);
  }
  return result;
}

uint64_t SearchCallHistoryBinaryButtonModel.primaryAction.getter()
{
  return CodableAceObject.wrappedValue.getter();
}

uint64_t type metadata accessor for SearchCallHistoryBinaryButtonModel()
{
  uint64_t result = type metadata singleton initialization cache for SearchCallHistoryBinaryButtonModel;
  if (!type metadata singleton initialization cache for SearchCallHistoryBinaryButtonModel) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t key path setter for SearchCallHistoryBinaryButtonModel.primaryAction : SearchCallHistoryBinaryButtonModel(id *a1)
{
  id v1 = *a1;
  return SearchCallHistoryBinaryButtonModel.primaryAction.setter();
}

uint64_t SearchCallHistoryBinaryButtonModel.primaryAction.setter()
{
  return CodableAceObject.wrappedValue.setter();
}

uint64_t (*SearchCallHistoryBinaryButtonModel.primaryAction.modify())()
{
  id v1 = OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_3_7((uint64_t)v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseClientBoundCommand>);
  *(void *)(v0 + 32) = CodableAceObject.wrappedValue.modify();
  return SearchCallHistoryBinaryButtonModel.primaryText.modify;
}

uint64_t SearchCallHistoryBinaryButtonModel.secondaryText.getter()
{
  type metadata accessor for SearchCallHistoryBinaryButtonModel();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  Loggable.wrappedValue.getter();
  return v1;
}

uint64_t key path setter for SearchCallHistoryBinaryButtonModel.secondaryText : SearchCallHistoryBinaryButtonModel()
{
  return SearchCallHistoryBinaryButtonModel.secondaryText.setter();
}

uint64_t SearchCallHistoryBinaryButtonModel.secondaryText.setter()
{
  return Loggable.wrappedValue.setter();
}

uint64_t (*SearchCallHistoryBinaryButtonModel.secondaryText.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_3_7((uint64_t)v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  *(void *)(v0 + 32) = Loggable.wrappedValue.modify();
  return SearchCallHistoryBinaryButtonModel.primaryText.modify;
}

uint64_t SearchCallHistoryBinaryButtonModel.secondaryAction.getter()
{
  return CodableAceObject.wrappedValue.getter();
}

uint64_t key path setter for SearchCallHistoryBinaryButtonModel.secondaryAction : SearchCallHistoryBinaryButtonModel(id *a1)
{
  id v1 = *a1;
  return SearchCallHistoryBinaryButtonModel.secondaryAction.setter();
}

uint64_t SearchCallHistoryBinaryButtonModel.secondaryAction.setter()
{
  return CodableAceObject.wrappedValue.setter();
}

uint64_t (*SearchCallHistoryBinaryButtonModel.secondaryAction.modify())()
{
  id v1 = OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_3_7((uint64_t)v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseClientBoundCommand>);
  *(void *)(v0 + 32) = CodableAceObject.wrappedValue.modify();
  return SearchCallHistoryBinaryButtonModel.primaryText.modify;
}

void SearchCallHistoryBinaryButtonModel.primaryText.modify(void *a1)
{
  id v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 32))(*a1, 0);

  free(v1);
}

uint64_t SearchCallHistoryBinaryButtonModel.responseViewId.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for SearchCallHistoryBinaryButtonModel() + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SearchCallHistoryBinaryButtonModel.responseViewId.setter(uint64_t a1, uint64_t a2)
{
  char v5 = (void *)(v2 + *(int *)(type metadata accessor for SearchCallHistoryBinaryButtonModel() + 32));
  uint64_t result = swift_bridgeObjectRelease();
  *char v5 = a1;
  v5[1] = a2;
  return result;
}

Swift::Void (__swiftcall *SearchCallHistoryBinaryButtonModel.responseViewId.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

void SearchCallHistoryBinaryButtonModel.init(primaryText:primaryAction:secondaryText:secondaryAction:)(void *a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3 = (void *)(a2 + *(int *)(type metadata accessor for SearchCallHistoryBinaryButtonModel() + 32));
  *uint64_t v3 = 0xD000000000000021;
  v3[1] = 0x8000000000491120;
  Loggable.init(wrappedValue:)();
  type metadata accessor for SABaseClientBoundCommand();
  id v4 = a1;
  CodableAceObject.init(wrappedValue:)();
  Loggable.init(wrappedValue:)();
  CodableAceObject.init(wrappedValue:)();
}

BOOL static AppResolutionSource.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void AppResolutionSource.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

uint64_t SearchCallHistoryBinaryButtonModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x547972616D697270 && a2 == 0xEB00000000747865;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x417972616D697270 && a2 == 0xED00006E6F697463;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x7261646E6F636573 && a2 == 0xED00007478655479;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x7261646E6F636573 && a2 == 0xEF6E6F6974634179;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else if (a1 == 0x65736E6F70736572 && a2 == 0xEE00644977656956)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else
        {
          char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v10) {
            return 4;
          }
          else {
            return 5;
          }
        }
      }
    }
  }
}

Swift::Int AppResolutionSource.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t SearchCallHistoryBinaryButtonModel.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0x547972616D697270;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x417972616D697270;
      break;
    case 2:
    case 3:
      uint64_t result = 0x7261646E6F636573;
      break;
    case 4:
      uint64_t result = 0x65736E6F70736572;
      break;
    default:
      return result;
  }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SearchCallHistoryBinaryButtonModel.CodingKeys(char *a1, char *a2)
{
  return static AppResolutionSource.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SearchCallHistoryBinaryButtonModel.CodingKeys()
{
  return AppResolutionSource.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance SearchCallHistoryBinaryButtonModel.CodingKeys(uint64_t a1)
{
  AppResolutionSource.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SearchCallHistoryBinaryButtonModel.CodingKeys()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SearchCallHistoryBinaryButtonModel.CodingKeys()
{
  return SearchCallHistoryBinaryButtonModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SearchCallHistoryBinaryButtonModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = SearchCallHistoryBinaryButtonModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance SearchCallHistoryBinaryButtonModel.CodingKeys()
{
  return AnnounceVoicemailDirectAction.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance SearchCallHistoryBinaryButtonModel.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = static PhoneContactDisambiguationProperties.maxItemsForVoxReadout.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SearchCallHistoryBinaryButtonModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SearchCallHistoryBinaryButtonModel.CodingKeys and conformance SearchCallHistoryBinaryButtonModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SearchCallHistoryBinaryButtonModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SearchCallHistoryBinaryButtonModel.CodingKeys and conformance SearchCallHistoryBinaryButtonModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SearchCallHistoryBinaryButtonModel.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SearchCallHistoryBinaryButtonModel.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_4();
  uint64_t v9 = v8 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SearchCallHistoryBinaryButtonModel.CodingKeys and conformance SearchCallHistoryBinaryButtonModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  lazy protocol witness table accessor for type Loggable<String> and conformance <A> Loggable<A>(&lazy protocol witness table cache variable for type Loggable<String> and conformance <A> Loggable<A>);
  OUTLINED_FUNCTION_5_0();
  if (!v1)
  {
    type metadata accessor for SearchCallHistoryBinaryButtonModel();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseClientBoundCommand>);
    lazy protocol witness table accessor for type CodableAceObject<SABaseClientBoundCommand> and conformance CodableAceObject<A>(&lazy protocol witness table cache variable for type CodableAceObject<SABaseClientBoundCommand> and conformance CodableAceObject<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    OUTLINED_FUNCTION_5_0();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
}

unint64_t lazy protocol witness table accessor for type SearchCallHistoryBinaryButtonModel.CodingKeys and conformance SearchCallHistoryBinaryButtonModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryBinaryButtonModel.CodingKeys and conformance SearchCallHistoryBinaryButtonModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryBinaryButtonModel.CodingKeys and conformance SearchCallHistoryBinaryButtonModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryBinaryButtonModel.CodingKeys and conformance SearchCallHistoryBinaryButtonModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryBinaryButtonModel.CodingKeys and conformance SearchCallHistoryBinaryButtonModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryBinaryButtonModel.CodingKeys and conformance SearchCallHistoryBinaryButtonModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryBinaryButtonModel.CodingKeys and conformance SearchCallHistoryBinaryButtonModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryBinaryButtonModel.CodingKeys and conformance SearchCallHistoryBinaryButtonModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryBinaryButtonModel.CodingKeys and conformance SearchCallHistoryBinaryButtonModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryBinaryButtonModel.CodingKeys and conformance SearchCallHistoryBinaryButtonModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchCallHistoryBinaryButtonModel.CodingKeys and conformance SearchCallHistoryBinaryButtonModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SearchCallHistoryBinaryButtonModel.CodingKeys and conformance SearchCallHistoryBinaryButtonModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchCallHistoryBinaryButtonModel.CodingKeys and conformance SearchCallHistoryBinaryButtonModel.CodingKeys);
  }
  return result;
}

uint64_t SearchCallHistoryBinaryButtonModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v56 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseClientBoundCommand>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v58 = v4;
  uint64_t v59 = v3;
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v57 = (char *)v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v61 = (char *)v49 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v60 = v9;
  uint64_t v11 = __chkstk_darwin(v10);
  unint64_t v13 = (char *)v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v62 = (char *)v49 - v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SearchCallHistoryBinaryButtonModel.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v63 = v16;
  uint64_t v64 = v15;
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_4();
  uint64_t v19 = v18 - v17;
  uint64_t v20 = type metadata accessor for SearchCallHistoryBinaryButtonModel();
  __chkstk_darwin(v20);
  OUTLINED_FUNCTION_4();
  uint64_t v23 = v22 - v21;
  uint64_t v25 = (uint64_t *)(v22 - v21 + *(int *)(v24 + 32));
  *uint64_t v25 = 0xD000000000000021;
  v25[1] = 0x8000000000491120;
  uint64_t v66 = v25;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SearchCallHistoryBinaryButtonModel.CodingKeys and conformance SearchCallHistoryBinaryButtonModel.CodingKeys();
  uint64_t v65 = v19;
  uint64_t v26 = (uint64_t)v67;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v26)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v27 = v61;
    uint64_t v54 = v13;
    uint64_t v55 = v20;
    uint64_t v67 = a1;
    uint64_t v28 = v23;
    char v72 = 0;
    uint64_t v29 = lazy protocol witness table accessor for type Loggable<String> and conformance <A> Loggable<A>(&lazy protocol witness table cache variable for type Loggable<String> and conformance <A> Loggable<A>);
    uint64_t v30 = v62;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v51 = v29;
    uint64_t v31 = *(void (**)(uint64_t, char *, uint64_t))(v60 + 32);
    uint64_t v53 = v28;
    v31(v28, v30, v8);
    char v71 = 1;
    uint64_t v32 = v27;
    uint64_t v33 = lazy protocol witness table accessor for type CodableAceObject<SABaseClientBoundCommand> and conformance CodableAceObject<A>(&lazy protocol witness table cache variable for type CodableAceObject<SABaseClientBoundCommand> and conformance CodableAceObject<A>);
    uint64_t v34 = v59;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v52 = v8;
    v49[1] = v33;
    uint64_t v50 = v31;
    uint64_t v35 = v55;
    BOOL v36 = v32;
    uint64_t v37 = *(void (**)(uint64_t, char *, uint64_t))(v58 + 32);
    v37(v53 + *(int *)(v55 + 20), v36, v34);
    char v70 = 2;
    uint64_t v38 = v54;
    uint64_t v62 = 0;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v50(v53 + *(int *)(v35 + 24), v38, v8);
    char v69 = 3;
    uint64_t v39 = v57;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v40 = v53;
    v37(v53 + *(int *)(v35 + 28), v39, v34);
    char v68 = 4;
    uint64_t v41 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v42 = v66;
    uint64_t v43 = v41;
    uint64_t v45 = v44;
    uint64_t v46 = OUTLINED_FUNCTION_2_5();
    v47(v46);
    swift_bridgeObjectRelease();
    *uint64_t v42 = v43;
    v42[1] = v45;
    outlined init with copy of SearchCallHistoryBinaryButtonModel(v40, v56);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
    return outlined destroy of SearchCallHistoryBinaryButtonModel(v40);
  }
}

uint64_t lazy protocol witness table accessor for type Loggable<String> and conformance <A> Loggable<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Loggable<String>);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type CodableAceObject<SABaseClientBoundCommand> and conformance CodableAceObject<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CodableAceObject<SABaseClientBoundCommand>);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of SearchCallHistoryBinaryButtonModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SearchCallHistoryBinaryButtonModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of SearchCallHistoryBinaryButtonModel(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SearchCallHistoryBinaryButtonModel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t protocol witness for PhoneSnippetModel.responseViewId.getter in conformance SearchCallHistoryBinaryButtonModel(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 32));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t instantiation function for generic protocol witness table for SearchCallHistoryBinaryButtonModel(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type SearchCallHistoryBinaryButtonModel and conformance SearchCallHistoryBinaryButtonModel(&lazy protocol witness table cache variable for type SearchCallHistoryBinaryButtonModel and conformance SearchCallHistoryBinaryButtonModel);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for Decodable in SearchCallHistoryBinaryButtonModel()
{
  return lazy protocol witness table accessor for type SearchCallHistoryBinaryButtonModel and conformance SearchCallHistoryBinaryButtonModel(&lazy protocol witness table cache variable for type SearchCallHistoryBinaryButtonModel and conformance SearchCallHistoryBinaryButtonModel);
}

uint64_t base witness table accessor for Encodable in SearchCallHistoryBinaryButtonModel()
{
  return lazy protocol witness table accessor for type SearchCallHistoryBinaryButtonModel and conformance SearchCallHistoryBinaryButtonModel(&lazy protocol witness table cache variable for type SearchCallHistoryBinaryButtonModel and conformance SearchCallHistoryBinaryButtonModel);
}

uint64_t lazy protocol witness table accessor for type SearchCallHistoryBinaryButtonModel and conformance SearchCallHistoryBinaryButtonModel(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for SearchCallHistoryBinaryButtonModel();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance SearchCallHistoryBinaryButtonModel@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SearchCallHistoryBinaryButtonModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SearchCallHistoryBinaryButtonModel(void *a1)
{
  return SearchCallHistoryBinaryButtonModel.encode(to:)(a1);
}

uint64_t sub_6196C()
{
  OUTLINED_FUNCTION_7_6();
  uint64_t result = EmergencyCountdownModel.sashTitle.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_61998()
{
  OUTLINED_FUNCTION_7_6();
  uint64_t result = SearchCallHistoryBinaryButtonModel.primaryAction.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_619C4()
{
  OUTLINED_FUNCTION_7_6();
  uint64_t result = SearchCallHistoryBinaryButtonModel.secondaryText.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_619F0()
{
  OUTLINED_FUNCTION_7_6();
  uint64_t result = SearchCallHistoryBinaryButtonModel.secondaryAction.getter();
  *uint64_t v0 = result;
  return result;
}

char *initializeBufferWithCopyOfBuffer for SearchCallHistoryBinaryButtonModel(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v19(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseClientBoundCommand>);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    v12(v9, v10, v11);
    v19(&a1[a3[6]], &a2[a3[6]], v7);
    v12(&a1[a3[7]], &a2[a3[7]], v11);
    uint64_t v13 = a3[8];
    uint64_t v14 = &a1[v13];
    uint64_t v15 = &a2[v13];
    uint64_t v16 = *((void *)v15 + 1);
    *(void *)uint64_t v14 = *(void *)v15;
    *((void *)v14 + 1) = v16;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for SearchCallHistoryBinaryButtonModel(uint64_t a1, int *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  uint64_t v6 = a1 + a2[5];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseClientBoundCommand>);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  v5(a1 + a2[6], v4);
  v8(a1 + a2[7], v7);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SearchCallHistoryBinaryButtonModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v17(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseClientBoundCommand>);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  v11(v8, v9, v10);
  v17(a1 + a3[6], a2 + a3[6], v6);
  v11(a1 + a3[7], a2 + a3[7], v10);
  uint64_t v12 = a3[8];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SearchCallHistoryBinaryButtonModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v16(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseClientBoundCommand>);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24);
  v11(v8, v9, v10);
  v16(a1 + a3[6], a2 + a3[6], v6);
  v11(a1 + a3[7], a2 + a3[7], v10);
  uint64_t v12 = a3[8];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  *uint64_t v13 = *v14;
  v13[1] = v14[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for SearchCallHistoryBinaryButtonModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v13(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseClientBoundCommand>);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v13(a1 + a3[6], a2 + a3[6], v6);
  v11(a1 + a3[7], a2 + a3[7], v10);
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  return a1;
}

uint64_t assignWithTake for SearchCallHistoryBinaryButtonModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v18(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseClientBoundCommand>);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40);
  v11(v8, v9, v10);
  v18(a1 + a3[6], a2 + a3[6], v6);
  v11(a1 + a3[7], a2 + a3[7], v10);
  uint64_t v12 = a3[8];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchCallHistoryBinaryButtonModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_621E4);
}

uint64_t sub_621E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  OUTLINED_FUNCTION_1_6();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
LABEL_5:
    return __swift_getEnumTagSinglePayload(v9, a2, v8);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseClientBoundCommand>);
  OUTLINED_FUNCTION_1_6();
  if (*(_DWORD *)(v11 + 84) == a2)
  {
    uint64_t v8 = v10;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    goto LABEL_5;
  }
  unint64_t v13 = *(void *)(a1 + *(int *)(a3 + 32) + 8);
  if (v13 >= 0xFFFFFFFF) {
    LODWORD(v13) = -1;
  }
  return (v13 + 1);
}

uint64_t storeEnumTagSinglePayload for SearchCallHistoryBinaryButtonModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_622B8);
}

void sub_622B8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  OUTLINED_FUNCTION_1_6();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseClientBoundCommand>);
    OUTLINED_FUNCTION_1_6();
    if (*(_DWORD *)(v13 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 32) + 8) = (a2 - 1);
      return;
    }
    uint64_t v10 = v12;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
  }

  __swift_storeEnumTagSinglePayload(v11, a2, a2, v10);
}

void type metadata completion function for SearchCallHistoryBinaryButtonModel()
{
  type metadata accessor for Loggable<String>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CodableAceObject<SABaseClientBoundCommand>();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for Loggable<String>()
{
  if (!lazy cache variable for type metadata for Loggable<String>)
  {
    unint64_t v0 = type metadata accessor for Loggable();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Loggable<String>);
    }
  }
}

void type metadata accessor for CodableAceObject<SABaseClientBoundCommand>()
{
  if (!lazy cache variable for type metadata for CodableAceObject<SABaseClientBoundCommand>)
  {
    type metadata accessor for SABaseClientBoundCommand();
    unint64_t v0 = type metadata accessor for CodableAceObject();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CodableAceObject<SABaseClientBoundCommand>);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for SearchCallHistoryBinaryButtonModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x625B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for SearchCallHistoryBinaryButtonModel.CodingKeys(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

void *type metadata accessor for SearchCallHistoryBinaryButtonModel.CodingKeys()
{
  return &unk_5508F8;
}

uint64_t OUTLINED_FUNCTION_2_5()
{
  return *(void *)(v0 - 104);
}

uint64_t OUTLINED_FUNCTION_3_7(uint64_t a1)
{
  void *v1 = a1;
  return type metadata accessor for SearchCallHistoryBinaryButtonModel();
}

uint64_t OUTLINED_FUNCTION_6_4()
{
  return *(void *)(v0 - 104);
}

uint64_t SingleResultVoicemailModel.responseViewId.getter()
{
  return OUTLINED_FUNCTION_7_0();
}

uint64_t SingleResultVoicemailModel.responseViewId.setter()
{
  OUTLINED_FUNCTION_6_5();
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = v2;
  v1[1] = v0;
  return result;
}

Swift::Void (__swiftcall *AnnounceGroupFaceTimeInviteOfferFollowUpIntentParameters.confirmAction.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t SingleResultVoicemailModel.displayName.getter()
{
  return OUTLINED_FUNCTION_7_0();
}

uint64_t SingleResultVoicemailModel.displayName.setter()
{
  OUTLINED_FUNCTION_6_5();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = v2;
  *(void *)(v1 + 24) = v0;
  return result;
}

Swift::Void (__swiftcall *SingleResultVoicemailModel.displayName.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t SingleResultVoicemailModel.displayCallDetail.getter()
{
  return OUTLINED_FUNCTION_7_0();
}

uint64_t SingleResultVoicemailModel.displayCallDetail.setter()
{
  OUTLINED_FUNCTION_6_5();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v0;
  return result;
}

Swift::Void (__swiftcall *SingleResultVoicemailModel.displayCallDetail.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t SingleResultVoicemailModel.displayDateTime.getter()
{
  return OUTLINED_FUNCTION_7_0();
}

uint64_t SingleResultVoicemailModel.displayDateTime.setter()
{
  OUTLINED_FUNCTION_6_5();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 48) = v2;
  *(void *)(v1 + 56) = v0;
  return result;
}

Swift::Void (__swiftcall *SingleResultVoicemailModel.displayDateTime.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t PhoneCallNLv4Intent.phoneCallAttributes.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 64) = a1;
  return result;
}

Swift::Void (__swiftcall *SingleResultVoicemailModel.callDuration.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t SingleResultCallHistoryModel.searchCallHistoryBinaryButtonModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SingleResultCallHistoryModel() + 36);

  return outlined init with copy of SearchCallHistoryBinaryButtonModel?(v3, a1);
}

uint64_t type metadata accessor for SingleResultCallHistoryModel()
{
  uint64_t result = type metadata singleton initialization cache for SingleResultCallHistoryModel;
  if (!type metadata singleton initialization cache for SingleResultCallHistoryModel) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined init with copy of SearchCallHistoryBinaryButtonModel?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchCallHistoryBinaryButtonModel?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t SingleResultCallHistoryModel.init(displayName:displayCallDetail:displayDateTime:contactIds:searchCallHistoryBinaryButtonModel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  *a9 = 0xD000000000000017;
  a9[1] = 0x8000000000491150;
  a9[2] = a1;
  a9[3] = a2;
  a9[4] = a3;
  a9[5] = a4;
  a9[6] = a5;
  a9[7] = a6;
  a9[8] = a7;
  uint64_t v10 = (uint64_t)a9 + *(int *)(type metadata accessor for SingleResultCallHistoryModel() + 36);

  return outlined init with take of SearchCallHistoryBinaryButtonModel?(a8, v10);
}

uint64_t outlined init with take of SearchCallHistoryBinaryButtonModel?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchCallHistoryBinaryButtonModel?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t SingleResultCallHistoryModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65736E6F70736572 && a2 == 0xEE00644977656956;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x4E79616C70736964 && a2 == 0xEB00000000656D61;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000011 && a2 == 0x8000000000490A40 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      BOOL v7 = a1 == 0x4479616C70736964 && a2 == 0xEF656D6954657461;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        BOOL v8 = a1 == 0x49746361746E6F63 && a2 == 0xEA00000000007364;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else if (a1 == 0xD000000000000022 && a2 == 0x8000000000491550)
        {
          swift_bridgeObjectRelease();
          return 5;
        }
        else
        {
          char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v9) {
            return 5;
          }
          else {
            return 6;
          }
        }
      }
    }
  }
}

unint64_t SingleResultCallHistoryModel.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x65736E6F70736572;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x4E79616C70736964;
      break;
    case 2:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0x4479616C70736964;
      break;
    case 4:
      unint64_t result = 0x49746361746E6F63;
      break;
    case 5:
      unint64_t result = 0xD000000000000022;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance SingleResultCallHistoryModel.CodingKeys()
{
  return SingleResultCallHistoryModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SingleResultCallHistoryModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = SingleResultCallHistoryModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance SingleResultCallHistoryModel.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = variable initialization expression of PhoneCallDirectInvocationNLIntent.voiceMailVerb();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SingleResultCallHistoryModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SingleResultCallHistoryModel.CodingKeys and conformance SingleResultCallHistoryModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SingleResultCallHistoryModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SingleResultCallHistoryModel.CodingKeys and conformance SingleResultCallHistoryModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SingleResultCallHistoryModel.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SingleResultCallHistoryModel.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_5_1();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SingleResultCallHistoryModel.CodingKeys and conformance SingleResultCallHistoryModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  OUTLINED_FUNCTION_2_6();
  if (!v1)
  {
    OUTLINED_FUNCTION_2_6();
    OUTLINED_FUNCTION_2_6();
    OUTLINED_FUNCTION_2_6();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    type metadata accessor for SingleResultCallHistoryModel();
    type metadata accessor for SearchCallHistoryBinaryButtonModel();
    lazy protocol witness table accessor for type SearchCallHistoryBinaryButtonModel and conformance SearchCallHistoryBinaryButtonModel(&lazy protocol witness table cache variable for type SearchCallHistoryBinaryButtonModel and conformance SearchCallHistoryBinaryButtonModel, (void (*)(uint64_t))type metadata accessor for SearchCallHistoryBinaryButtonModel);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v2, v4);
}

unint64_t lazy protocol witness table accessor for type SingleResultCallHistoryModel.CodingKeys and conformance SingleResultCallHistoryModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SingleResultCallHistoryModel.CodingKeys and conformance SingleResultCallHistoryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SingleResultCallHistoryModel.CodingKeys and conformance SingleResultCallHistoryModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SingleResultCallHistoryModel.CodingKeys and conformance SingleResultCallHistoryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SingleResultCallHistoryModel.CodingKeys and conformance SingleResultCallHistoryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SingleResultCallHistoryModel.CodingKeys and conformance SingleResultCallHistoryModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SingleResultCallHistoryModel.CodingKeys and conformance SingleResultCallHistoryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SingleResultCallHistoryModel.CodingKeys and conformance SingleResultCallHistoryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SingleResultCallHistoryModel.CodingKeys and conformance SingleResultCallHistoryModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SingleResultCallHistoryModel.CodingKeys and conformance SingleResultCallHistoryModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SingleResultCallHistoryModel.CodingKeys and conformance SingleResultCallHistoryModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SingleResultCallHistoryModel.CodingKeys and conformance SingleResultCallHistoryModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SingleResultCallHistoryModel.CodingKeys and conformance SingleResultCallHistoryModel.CodingKeys);
  }
  return result;
}

uint64_t SingleResultCallHistoryModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchCallHistoryBinaryButtonModel?);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SingleResultCallHistoryModel.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  __chkstk_darwin(v8);
  uint64_t v9 = type metadata accessor for SingleResultCallHistoryModel();
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_5_1();
  v3[1] = 0x8000000000491150;
  uint64_t v10 = a1[3];
  uint64_t v24 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v10);
  lazy protocol witness table accessor for type SingleResultCallHistoryModel.CodingKeys and conformance SingleResultCallHistoryModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v21 = v9;
    uint64_t v11 = (uint64_t)v7;
    uint64_t v12 = v22;
    char v31 = 0;
    *uint64_t v3 = OUTLINED_FUNCTION_3_8();
    v3[1] = v13;
    char v30 = 1;
    v3[2] = OUTLINED_FUNCTION_3_8();
    v3[3] = v14;
    char v29 = 2;
    v3[4] = OUTLINED_FUNCTION_3_8();
    v3[5] = v15;
    char v28 = 3;
    v3[6] = OUTLINED_FUNCTION_3_8();
    v3[7] = v16;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    char v27 = 4;
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    OUTLINED_FUNCTION_4_9();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v3[8] = v25;
    type metadata accessor for SearchCallHistoryBinaryButtonModel();
    char v26 = 5;
    lazy protocol witness table accessor for type SearchCallHistoryBinaryButtonModel and conformance SearchCallHistoryBinaryButtonModel(&lazy protocol witness table cache variable for type SearchCallHistoryBinaryButtonModel and conformance SearchCallHistoryBinaryButtonModel, (void (*)(uint64_t))type metadata accessor for SearchCallHistoryBinaryButtonModel);
    OUTLINED_FUNCTION_4_9();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v17 = OUTLINED_FUNCTION_0_5();
    v18(v17);
    outlined init with take of SearchCallHistoryBinaryButtonModel?(v11, (uint64_t)v3 + *(int *)(v21 + 36));
    outlined init with copy of SingleResultCallHistoryModel((uint64_t)v3, v12);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    return outlined destroy of SingleResultCallHistoryModel((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for SingleResultCallHistoryModel);
  }
}

uint64_t lazy protocol witness table accessor for type [String] and conformance <A> [A](unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of SingleResultCallHistoryModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SingleResultCallHistoryModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t ButtonConfigurationModel.label.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t instantiation function for generic protocol witness table for SingleResultCallHistoryModel(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type SearchCallHistoryBinaryButtonModel and conformance SearchCallHistoryBinaryButtonModel(&lazy protocol witness table cache variable for type SingleResultCallHistoryModel and conformance SingleResultCallHistoryModel, (void (*)(uint64_t))type metadata accessor for SingleResultCallHistoryModel);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for Decodable in SingleResultCallHistoryModel()
{
  return lazy protocol witness table accessor for type SearchCallHistoryBinaryButtonModel and conformance SearchCallHistoryBinaryButtonModel(&lazy protocol witness table cache variable for type SingleResultCallHistoryModel and conformance SingleResultCallHistoryModel, (void (*)(uint64_t))type metadata accessor for SingleResultCallHistoryModel);
}

uint64_t base witness table accessor for Encodable in SingleResultCallHistoryModel()
{
  return lazy protocol witness table accessor for type SearchCallHistoryBinaryButtonModel and conformance SearchCallHistoryBinaryButtonModel(&lazy protocol witness table cache variable for type SingleResultCallHistoryModel and conformance SingleResultCallHistoryModel, (void (*)(uint64_t))type metadata accessor for SingleResultCallHistoryModel);
}

uint64_t lazy protocol witness table accessor for type SearchCallHistoryBinaryButtonModel and conformance SearchCallHistoryBinaryButtonModel(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance SingleResultCallHistoryModel@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SingleResultCallHistoryModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SingleResultCallHistoryModel(void *a1)
{
  return SingleResultCallHistoryModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for SingleResultCallHistoryModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v14 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    uint64_t v8 = a2[7];
    a1[6] = a2[6];
    a1[7] = v8;
    uint64_t v9 = *(int *)(a3 + 36);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    a1[8] = a2[8];
    uint64_t v12 = (int *)type metadata accessor for SearchCallHistoryBinaryButtonModel();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, (uint64_t)v12))
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchCallHistoryBinaryButtonModel?);
      memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
      char v26 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
      v26(v10, v11, v15);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseClientBoundCommand>);
      uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16);
      v20(v17, v18, v19);
      v26(&v10[v12[6]], &v11[v12[6]], v15);
      v20(&v10[v12[7]], &v11[v12[7]], v19);
      uint64_t v21 = v12[8];
      uint64_t v22 = &v10[v21];
      uint64_t v23 = &v11[v21];
      uint64_t v24 = *((void *)v23 + 1);
      *(void *)uint64_t v22 = *(void *)v23;
      *((void *)v22 + 1) = v24;
      swift_bridgeObjectRetain();
      __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, (uint64_t)v12);
    }
  }
  return v3;
}

uint64_t destroy for SingleResultCallHistoryModel(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = (int *)type metadata accessor for SearchCallHistoryBinaryButtonModel();
  uint64_t result = __swift_getEnumTagSinglePayload(v4, 1, (uint64_t)v5);
  if (!result)
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
    v8(v4, v7);
    uint64_t v9 = v4 + v5[5];
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseClientBoundCommand>);
    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
    v11(v9, v10);
    v8(v4 + v5[6], v7);
    v11(v4 + v5[7], v10);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *initializeWithCopy for SingleResultCallHistoryModel(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  a1[8] = a2[8];
  uint64_t v11 = (int *)type metadata accessor for SearchCallHistoryBinaryButtonModel();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, (uint64_t)v11))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchCallHistoryBinaryButtonModel?);
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
    uint64_t v24 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
    v24(v9, v10, v13);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseClientBoundCommand>);
    uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
    v18(v15, v16, v17);
    v24(&v9[v11[6]], &v10[v11[6]], v13);
    v18(&v9[v11[7]], &v10[v11[7]], v17);
    uint64_t v19 = v11[8];
    uint64_t v20 = &v9[v19];
    uint64_t v21 = &v10[v19];
    uint64_t v22 = *((void *)v21 + 1);
    *(void *)uint64_t v20 = *(void *)v21;
    *((void *)v20 + 1) = v22;
    swift_bridgeObjectRetain();
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, (uint64_t)v11);
  }
  return a1;
}

void *assignWithCopy for SingleResultCallHistoryModel(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = (int *)type metadata accessor for SearchCallHistoryBinaryButtonModel();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, (uint64_t)v9);
  int v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, (uint64_t)v9);
  if (!EnumTagSinglePayload)
  {
    if (!v11)
    {
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
      uint64_t v33 = *(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 24);
      v33(v7, v8, v23);
      uint64_t v24 = v9[5];
      uint64_t v25 = &v7[v24];
      char v26 = &v8[v24];
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseClientBoundCommand>);
      char v28 = *(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 24);
      v28(v25, v26, v27);
      v33(&v7[v9[6]], &v8[v9[6]], v23);
      v28(&v7[v9[7]], &v8[v9[7]], v27);
      uint64_t v29 = v9[8];
      char v30 = &v7[v29];
      char v31 = &v8[v29];
      *(void *)char v30 = *(void *)v31;
      *((void *)v30 + 1) = *((void *)v31 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of SingleResultCallHistoryModel((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for SearchCallHistoryBinaryButtonModel);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchCallHistoryBinaryButtonModel?);
    memcpy(v7, v8, *(void *)(*(void *)(v21 - 8) + 64));
    return a1;
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  uint64_t v32 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
  v32(v7, v8, v12);
  uint64_t v13 = v9[5];
  uint64_t v14 = &v7[v13];
  uint64_t v15 = &v8[v13];
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseClientBoundCommand>);
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
  v17(v14, v15, v16);
  v32(&v7[v9[6]], &v8[v9[6]], v12);
  v17(&v7[v9[7]], &v8[v9[7]], v16);
  uint64_t v18 = v9[8];
  uint64_t v19 = &v7[v18];
  uint64_t v20 = &v8[v18];
  *(void *)uint64_t v19 = *(void *)v20;
  *((void *)v19 + 1) = *((void *)v20 + 1);
  swift_bridgeObjectRetain();
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, (uint64_t)v9);
  return a1;
}

uint64_t outlined destroy of SingleResultCallHistoryModel(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t initializeWithTake for SingleResultCallHistoryModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = (int *)type metadata accessor for SearchCallHistoryBinaryButtonModel();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, (uint64_t)v9))
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchCallHistoryBinaryButtonModel?);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
    uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32);
    v18(v7, v8, v11);
    uint64_t v12 = v9[5];
    uint64_t v13 = &v7[v12];
    uint64_t v14 = &v8[v12];
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseClientBoundCommand>);
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32);
    v16(v13, v14, v15);
    v18(&v7[v9[6]], &v8[v9[6]], v11);
    v16(&v7[v9[7]], &v8[v9[7]], v15);
    *(_OWORD *)&v7[v9[8]] = *(_OWORD *)&v8[v9[8]];
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, (uint64_t)v9);
  }
  return a1;
}

void *assignWithTake for SingleResultCallHistoryModel(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 36);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = (int *)type metadata accessor for SearchCallHistoryBinaryButtonModel();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, (uint64_t)v13);
  int v15 = __swift_getEnumTagSinglePayload((uint64_t)v12, 1, (uint64_t)v13);
  if (!EnumTagSinglePayload)
  {
    if (!v15)
    {
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
      BOOL v36 = *(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 40);
      v36(v11, v12, v24);
      uint64_t v25 = v13[5];
      char v26 = &v11[v25];
      uint64_t v27 = &v12[v25];
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseClientBoundCommand>);
      uint64_t v29 = *(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 40);
      v29(v26, v27, v28);
      v36(&v11[v13[6]], &v12[v13[6]], v24);
      v29(&v11[v13[7]], &v12[v13[7]], v28);
      uint64_t v30 = v13[8];
      char v31 = &v11[v30];
      uint64_t v32 = &v12[v30];
      uint64_t v34 = *(void *)v32;
      uint64_t v33 = *((void *)v32 + 1);
      *(void *)char v31 = v34;
      *((void *)v31 + 1) = v33;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of SingleResultCallHistoryModel((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SearchCallHistoryBinaryButtonModel);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchCallHistoryBinaryButtonModel?);
    memcpy(v11, v12, *(void *)(*(void *)(v22 - 8) + 64));
    return a1;
  }
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  uint64_t v35 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32);
  v35(v11, v12, v16);
  uint64_t v17 = v13[5];
  uint64_t v18 = &v11[v17];
  uint64_t v19 = &v12[v17];
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseClientBoundCommand>);
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32);
  v21(v18, v19, v20);
  v35(&v11[v13[6]], &v12[v13[6]], v16);
  v21(&v11[v13[7]], &v12[v13[7]], v20);
  *(_OWORD *)&v11[v13[8]] = *(_OWORD *)&v12[v13[8]];
  __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, (uint64_t)v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for SingleResultCallHistoryModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_64788);
}

uint64_t sub_64788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchCallHistoryBinaryButtonModel?);
    uint64_t v9 = a1 + *(int *)(a3 + 36);
    return __swift_getEnumTagSinglePayload(v9, a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for SingleResultCallHistoryModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_64828);
}

uint64_t sub_64828(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchCallHistoryBinaryButtonModel?);
    uint64_t v8 = v5 + *(int *)(a4 + 36);
    return __swift_storeEnumTagSinglePayload(v8, a2, a2, v7);
  }
  return result;
}

void type metadata completion function for SingleResultCallHistoryModel()
{
  type metadata accessor for SearchCallHistoryBinaryButtonModel?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for SearchCallHistoryBinaryButtonModel?()
{
  if (!lazy cache variable for type metadata for SearchCallHistoryBinaryButtonModel?)
  {
    type metadata accessor for SearchCallHistoryBinaryButtonModel();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SearchCallHistoryBinaryButtonModel?);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for SingleResultCallHistoryModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x64A7CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

void *type metadata accessor for SingleResultCallHistoryModel.CodingKeys()
{
  return &unk_5509A0;
}

uint64_t OUTLINED_FUNCTION_0_5()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_2_6()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_3_8()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_4_9()
{
  return v0;
}

uint64_t *SingleResultVoicemailModel.resultViewID.unsafeMutableAddressor()
{
  return &static SingleResultVoicemailModel.resultViewID;
}

uint64_t static SingleResultVoicemailModel.resultViewID.getter()
{
  swift_beginAccess();
  uint64_t v0 = static SingleResultVoicemailModel.resultViewID;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t static SingleResultVoicemailModel.resultViewID.setter(uint64_t a1, char *a2)
{
  static SingleResultVoicemailModel.resultViewID = a1;
  off_584FD8 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*static SingleResultVoicemailModel.resultViewID.modify())()
{
  return static SingleResultVoicemailModel.resultViewID.modify;
}

uint64_t SingleResultVoicemailModel.callDuration.getter()
{
  return OUTLINED_FUNCTION_7_0();
}

uint64_t SingleResultVoicemailModel.callDuration.setter()
{
  OUTLINED_FUNCTION_6_5();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 64) = v2;
  *(void *)(v1 + 72) = v0;
  return result;
}

double SingleResultVoicemailModel.callDurationInterval.getter()
{
  return *(double *)(v0 + 80);
}

void SingleResultVoicemailModel.callDurationInterval.setter(double a1)
{
  *(double *)(v1 + 80) = a1;
}

Swift::Void (__swiftcall *SingleResultVoicemailModel.callDurationInterval.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t SingleResultVoicemailModel.contactIds.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SingleResultVoicemailModel.contactIds.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 88) = a1;
  return result;
}

Swift::Void (__swiftcall *SingleResultVoicemailModel.contactIds.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t SingleResultVoicemailModel.transcript.getter()
{
  return OUTLINED_FUNCTION_7_0();
}

uint64_t SingleResultVoicemailModel.transcript.setter()
{
  OUTLINED_FUNCTION_6_5();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 96) = v2;
  *(void *)(v1 + 104) = v0;
  return result;
}

Swift::Void (__swiftcall *SingleResultVoicemailModel.transcript.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t SingleResultVoicemailModel.transcriptTitle.getter()
{
  return OUTLINED_FUNCTION_7_0();
}

uint64_t SingleResultVoicemailModel.transcriptTitle.setter()
{
  OUTLINED_FUNCTION_6_5();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 112) = v2;
  *(void *)(v1 + 120) = v0;
  return result;
}

Swift::Void (__swiftcall *EmergencyCountdownOutputBuilder.displayTextCATsSimple.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

unint64_t type metadata accessor for SAIntentGroupRunSiriKitExecutor()
{
  unint64_t result = lazy cache variable for type metadata for SAIntentGroupRunSiriKitExecutor;
  if (!lazy cache variable for type metadata for SAIntentGroupRunSiriKitExecutor)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupRunSiriKitExecutor);
  }
  return result;
}

uint64_t SingleResultVoicemailModel.callbackDirectInvocation.getter()
{
  return CodableAceObject.wrappedValue.getter();
}

uint64_t type metadata accessor for SingleResultVoicemailModel()
{
  uint64_t result = type metadata singleton initialization cache for SingleResultVoicemailModel;
  if (!type metadata singleton initialization cache for SingleResultVoicemailModel) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t key path setter for SingleResultVoicemailModel.callbackDirectInvocation : SingleResultVoicemailModel(id *a1)
{
  id v1 = *a1;
  return SingleResultVoicemailModel.callbackDirectInvocation.setter();
}

uint64_t SingleResultVoicemailModel.callbackDirectInvocation.setter()
{
  return CodableAceObject.wrappedValue.setter();
}

uint64_t (*SingleResultVoicemailModel.callbackDirectInvocation.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for SingleResultVoicemailModel();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  v2[4] = CodableAceObject.wrappedValue.modify();
  return SearchCallHistoryBinaryButtonModel.primaryText.modify;
}

uint64_t property wrapper backing initializer of SingleResultVoicemailModel.repeatDirectInvocation()
{
  type metadata accessor for SAIntentGroupRunSiriKitExecutor();

  return CodableAceObject.init(wrappedValue:)();
}

uint64_t SingleResultVoicemailModel.repeatDirectInvocation.getter()
{
  return CodableAceObject.wrappedValue.getter();
}

uint64_t key path setter for SingleResultVoicemailModel.repeatDirectInvocation : SingleResultVoicemailModel(id *a1)
{
  id v1 = *a1;
  return SingleResultVoicemailModel.repeatDirectInvocation.setter();
}

uint64_t SingleResultVoicemailModel.repeatDirectInvocation.setter()
{
  return CodableAceObject.wrappedValue.setter();
}

uint64_t (*SingleResultVoicemailModel.repeatDirectInvocation.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for SingleResultVoicemailModel();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  v2[4] = CodableAceObject.wrappedValue.modify();
  return SearchCallHistoryBinaryButtonModel.primaryText.modify;
}

uint64_t SingleResultVoicemailModel.searchCallHistoryBinaryButtonModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SingleResultVoicemailModel();
  return outlined init with copy of SearchCallHistoryBinaryButtonModel(v1 + *(int *)(v3 + 60), a1, (void (*)(void))type metadata accessor for SearchCallHistoryBinaryButtonModel);
}

uint64_t SingleResultVoicemailModel.init(displayName:displayCallDetail:displayDateTime:callDuration:callDurationInterval:transcript:transcriptTitle:callbackDirectInvocation:repeatDirectInvocation:contactIds:searchCallHistoryBinaryButtonModel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, long long a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17)
{
  *(void *)a9 = 0xD000000000000015;
  *(void *)(a9 + 8) = 0x8000000000491170;
  *(void *)(a9 + 16) = a1;
  *(void *)(a9 + 24) = a2;
  *(void *)(a9 + 32) = a3;
  *(void *)(a9 + 40) = a4;
  *(void *)(a9 + 48) = a5;
  *(void *)(a9 + 56) = a6;
  *(void *)(a9 + 64) = a7;
  *(void *)(a9 + 72) = a8;
  *(double *)(a9 + 80) = a10;
  *(_OWORD *)(a9 + 96) = a11;
  *(void *)(a9 + 112) = a12;
  *(void *)(a9 + 120) = a13;
  uint64_t v18 = type metadata accessor for SingleResultVoicemailModel();
  type metadata accessor for SAIntentGroupRunSiriKitExecutor();
  id v19 = a15;
  CodableAceObject.init(wrappedValue:)();
  *(void *)(a9 + 88) = a16;
  CodableAceObject.init(wrappedValue:)();

  uint64_t v20 = a9 + *(int *)(v18 + 60);

  return outlined init with take of SearchCallHistoryBinaryButtonModel(a17, v20);
}

uint64_t outlined init with take of SearchCallHistoryBinaryButtonModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SearchCallHistoryBinaryButtonModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t SingleResultVoicemailModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65736E6F70736572 && a2 == 0xEE00644977656956;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x4E79616C70736964 && a2 == 0xEB00000000656D61;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000011 && a2 == 0x8000000000490A40 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      BOOL v7 = a1 == 0x4479616C70736964 && a2 == 0xEF656D6954657461;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        BOOL v8 = a1 == 0x617275446C6C6163 && a2 == 0xEC0000006E6F6974;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else if (a1 == 0xD000000000000014 && a2 == 0x8000000000490AD0 {
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        }
        {
          swift_bridgeObjectRelease();
          return 5;
        }
        else
        {
          BOOL v9 = a1 == 0x49746361746E6F63 && a2 == 0xEA00000000007364;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 6;
          }
          else
          {
            BOOL v10 = a1 == 0x697263736E617274 && a2 == 0xEA00000000007470;
            if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 7;
            }
            else
            {
              BOOL v11 = a1 == 0x697263736E617274 && a2 == -1196430878757850000;
              if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 8;
              }
              else if (a1 == 0xD000000000000018 && a2 == 0x8000000000491580 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 9;
              }
              else if (a1 == 0xD000000000000016 && a2 == 0x80000000004915A0 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 10;
              }
              else if (a1 == 0xD000000000000022 && a2 == 0x8000000000491550)
              {
                swift_bridgeObjectRelease();
                return 11;
              }
              else
              {
                char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if (v12) {
                  return 11;
                }
                else {
                  return 12;
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t SingleResultVoicemailModel.CodingKeys.init(intValue:)()
{
  return 12;
}

unint64_t SingleResultVoicemailModel.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x65736E6F70736572;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x4E79616C70736964;
      break;
    case 2:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0x4479616C70736964;
      break;
    case 4:
      unint64_t result = 0x617275446C6C6163;
      break;
    case 5:
      unint64_t result = 0xD000000000000014;
      break;
    case 6:
      unint64_t result = 0x49746361746E6F63;
      break;
    case 7:
      unint64_t result = 0x697263736E617274;
      break;
    case 8:
      unint64_t result = 0x697263736E617274;
      break;
    case 9:
      unint64_t result = 0xD000000000000018;
      break;
    case 10:
      unint64_t result = 0xD000000000000016;
      break;
    case 11:
      unint64_t result = 0xD000000000000022;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance SingleResultVoicemailModel.CodingKeys()
{
  return SingleResultVoicemailModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SingleResultVoicemailModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = SingleResultVoicemailModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance SingleResultVoicemailModel.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = SingleResultVoicemailModel.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SingleResultVoicemailModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SingleResultVoicemailModel.CodingKeys and conformance SingleResultVoicemailModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SingleResultVoicemailModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SingleResultVoicemailModel.CodingKeys and conformance SingleResultVoicemailModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SingleResultVoicemailModel.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SingleResultVoicemailModel.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_4();
  uint64_t v9 = v8 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SingleResultVoicemailModel.CodingKeys and conformance SingleResultVoicemailModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    OUTLINED_FUNCTION_1_7(1);
    OUTLINED_FUNCTION_1_7(2);
    OUTLINED_FUNCTION_1_7(3);
    OUTLINED_FUNCTION_1_7(4);
    KeyedEncodingContainer.encode(_:forKey:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    OUTLINED_FUNCTION_1_7(7);
    OUTLINED_FUNCTION_1_7(8);
    type metadata accessor for SingleResultVoicemailModel();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
    lazy protocol witness table accessor for type CodableAceObject<SAIntentGroupRunSiriKitExecutor> and conformance CodableAceObject<A>(&lazy protocol witness table cache variable for type CodableAceObject<SAIntentGroupRunSiriKitExecutor> and conformance CodableAceObject<A>);
    OUTLINED_FUNCTION_13_2();
    OUTLINED_FUNCTION_13_2();
    type metadata accessor for SearchCallHistoryBinaryButtonModel();
    _s27PhoneCallFlowDelegatePlugin06SearchB24HistoryBinaryButtonModelVACSEAAWlTm_0(&lazy protocol witness table cache variable for type SearchCallHistoryBinaryButtonModel and conformance SearchCallHistoryBinaryButtonModel, (void (*)(uint64_t))type metadata accessor for SearchCallHistoryBinaryButtonModel);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
}

unint64_t lazy protocol witness table accessor for type SingleResultVoicemailModel.CodingKeys and conformance SingleResultVoicemailModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SingleResultVoicemailModel.CodingKeys and conformance SingleResultVoicemailModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SingleResultVoicemailModel.CodingKeys and conformance SingleResultVoicemailModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SingleResultVoicemailModel.CodingKeys and conformance SingleResultVoicemailModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SingleResultVoicemailModel.CodingKeys and conformance SingleResultVoicemailModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SingleResultVoicemailModel.CodingKeys and conformance SingleResultVoicemailModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SingleResultVoicemailModel.CodingKeys and conformance SingleResultVoicemailModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SingleResultVoicemailModel.CodingKeys and conformance SingleResultVoicemailModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SingleResultVoicemailModel.CodingKeys and conformance SingleResultVoicemailModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SingleResultVoicemailModel.CodingKeys and conformance SingleResultVoicemailModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SingleResultVoicemailModel.CodingKeys and conformance SingleResultVoicemailModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SingleResultVoicemailModel.CodingKeys and conformance SingleResultVoicemailModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SingleResultVoicemailModel.CodingKeys and conformance SingleResultVoicemailModel.CodingKeys);
  }
  return result;
}

uint64_t SingleResultVoicemailModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v61 = a2;
  type metadata accessor for SearchCallHistoryBinaryButtonModel();
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_4();
  uint64_t v6 = v5 - v4;
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v66 = v7;
  uint64_t v9 = __chkstk_darwin(v8);
  BOOL v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v58 - v12;
  uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SingleResultVoicemailModel.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v62 = v14;
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_4();
  uint64_t v18 = v17 - v16;
  uint64_t v67 = (int *)type metadata accessor for SingleResultVoicemailModel();
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v19);
  OUTLINED_FUNCTION_4();
  uint64_t v22 = (void *)(v21 - v20);
  *uint64_t v22 = 0xD000000000000015;
  v22[1] = 0x8000000000491170;
  char v70 = (uint64_t *)(v21 - v20);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SingleResultVoicemailModel.CodingKeys and conformance SingleResultVoicemailModel.CodingKeys();
  uint64_t v63 = v18;
  uint64_t v23 = v69;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v65 = a1;
  if (v23)
  {
    uint64_t v69 = v23;
    LODWORD(v26) = 0;
    int v27 = 0;
    int v28 = 0;
    LODWORD(v13) = 0;
    int v29 = 0;
    int v30 = 0;
    LODWORD(v31) = 0;
    int v32 = 0;
    LODWORD(v64) = 0;
  }
  else
  {
    char v31 = v13;
    uint64_t v59 = v6;
    uint64_t v60 = v11;
    int v27 = v62;
    LOBYTE(v72) = 0;
    int v30 = v64;
    uint64_t v24 = KeyedDecodingContainer.decode(_:forKey:)();
    char v26 = v70;
    uint64_t *v70 = v24;
    v26[1] = v25;
    int v28 = v27;
    _OWORD v26[2] = OUTLINED_FUNCTION_3_9(1);
    void v26[3] = v35;
    void v26[4] = OUTLINED_FUNCTION_3_9(2);
    v26[5] = v36;
    v26[6] = OUTLINED_FUNCTION_3_9(3);
    v26[7] = v37;
    v26[8] = OUTLINED_FUNCTION_3_9(4);
    v26[9] = v38;
    LOBYTE(v72) = 5;
    KeyedDecodingContainer.decode(_:forKey:)();
    v26[10] = v39;
    uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    char v71 = 6;
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v26[11] = v72;
    uint64_t v40 = OUTLINED_FUNCTION_3_9(7);
    uint64_t v41 = v70;
    v70[12] = v40;
    v41[13] = v42;
    uint64_t v43 = OUTLINED_FUNCTION_3_9(8);
    uint64_t v69 = 0;
    uint64_t v45 = v70;
    v70[14] = v43;
    v45[15] = v44;
    LOBYTE(v72) = 9;
    int v29 = lazy protocol witness table accessor for type CodableAceObject<SAIntentGroupRunSiriKitExecutor> and conformance CodableAceObject<A>(&lazy protocol witness table cache variable for type CodableAceObject<SAIntentGroupRunSiriKitExecutor> and conformance CodableAceObject<A>);
    uint64_t v46 = v69;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v69 = v46;
    if (v46)
    {
      uint64_t v47 = OUTLINED_FUNCTION_5_2();
      v48(v47);
      int v32 = 0;
      OUTLINED_FUNCTION_6_6();
    }
    else
    {
      int v28 = v66 + 32;
      uint64_t v13 = *(char **)(v66 + 32);
      ((void (*)(char *, char *, uint64_t))v13)((char *)v70 + v67[13], v31, v68);
      LOBYTE(v72) = 10;
      uint64_t v49 = v69;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v69 = v49;
      if (v49)
      {
        uint64_t v50 = OUTLINED_FUNCTION_5_2();
        v51(v50);
        OUTLINED_FUNCTION_6_6();
        int v32 = 1;
      }
      else
      {
        ((void (*)(char *, char *, uint64_t))v13)((char *)v70 + v67[14], v60, v68);
        LOBYTE(v72) = 11;
        _s27PhoneCallFlowDelegatePlugin06SearchB24HistoryBinaryButtonModelVACSEAAWlTm_0(&lazy protocol witness table cache variable for type SearchCallHistoryBinaryButtonModel and conformance SearchCallHistoryBinaryButtonModel, (void (*)(uint64_t))type metadata accessor for SearchCallHistoryBinaryButtonModel);
        uint64_t v52 = v69;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        uint64_t v69 = v52;
        if (!v52)
        {
          uint64_t v55 = OUTLINED_FUNCTION_5_2();
          v56(v55);
          uint64_t v57 = (uint64_t)v70;
          outlined init with take of SearchCallHistoryBinaryButtonModel(v59, (uint64_t)v70 + v67[15]);
          outlined init with copy of SearchCallHistoryBinaryButtonModel(v57, v61, (void (*)(void))type metadata accessor for SingleResultVoicemailModel);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
          return outlined destroy of SingleResultVoicemailModel(v57);
        }
        uint64_t v53 = OUTLINED_FUNCTION_5_2();
        v54(v53);
        LODWORD(v26) = 1;
        int v27 = 1;
        int v28 = 1;
        LODWORD(v13) = 1;
        int v29 = 1;
        int v30 = 1;
        LODWORD(v31) = 1;
        int v32 = 1;
        LODWORD(v64) = 1;
      }
    }
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
  uint64_t v33 = v70;
  uint64_t result = swift_bridgeObjectRelease();
  if (v26)
  {
    uint64_t result = swift_bridgeObjectRelease();
    if (!v27)
    {
LABEL_6:
      if (!v28) {
        goto LABEL_7;
      }
      goto LABEL_18;
    }
  }
  else if (!v27)
  {
    goto LABEL_6;
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (!v28)
  {
LABEL_7:
    if (!v13) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = swift_bridgeObjectRelease();
  if (!v13)
  {
LABEL_8:
    if (!v29) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = swift_bridgeObjectRelease();
  if (!v29)
  {
LABEL_9:
    if (!v30) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = swift_bridgeObjectRelease();
  if (!v30)
  {
LABEL_10:
    if (!v31) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = swift_bridgeObjectRelease();
  if (!v31)
  {
LABEL_11:
    if (!v32) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_22:
  uint64_t result = swift_bridgeObjectRelease();
  if (v32) {
LABEL_12:
  }
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v66 + 8))((char *)v33 + v67[13], v68);
LABEL_13:
  if (v64) {
    return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))((char *)v33 + v67[14], v68);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type CodableAceObject<SAIntentGroupRunSiriKitExecutor> and conformance CodableAceObject<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of SearchCallHistoryBinaryButtonModel(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_15();
  uint64_t v4 = OUTLINED_FUNCTION_7_0();
  v5(v4);
  return a2;
}

uint64_t outlined destroy of SingleResultVoicemailModel(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SingleResultVoicemailModel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t protocol witness for Decodable.init(from:) in conformance SingleResultVoicemailModel@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SingleResultVoicemailModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SingleResultVoicemailModel(void *a1)
{
  return SingleResultVoicemailModel.encode(to:)(a1);
}

PhoneCallFlowDelegatePlugin::VoicemailUpdateAction_optional __swiftcall VoicemailUpdateAction.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of VoicemailUpdateAction.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.value = PhoneCallFlowDelegatePlugin_VoicemailUpdateAction_repeatVoicemail;
  }
  else {
    v4.value = PhoneCallFlowDelegatePlugin_VoicemailUpdateAction_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t VoicemailUpdateAction.rawValue.getter(char a1)
{
  if (a1) {
    return 0x6F56746165706572;
  }
  else {
    return 0xD000000000000015;
  }
}

uint64_t instantiation function for generic protocol witness table for SingleResultVoicemailModel(uint64_t a1)
{
  uint64_t result = _s27PhoneCallFlowDelegatePlugin06SearchB24HistoryBinaryButtonModelVACSEAAWlTm_0(&lazy protocol witness table cache variable for type SingleResultVoicemailModel and conformance SingleResultVoicemailModel, (void (*)(uint64_t))type metadata accessor for SingleResultVoicemailModel);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for Decodable in SingleResultVoicemailModel()
{
  return _s27PhoneCallFlowDelegatePlugin06SearchB24HistoryBinaryButtonModelVACSEAAWlTm_0(&lazy protocol witness table cache variable for type SingleResultVoicemailModel and conformance SingleResultVoicemailModel, (void (*)(uint64_t))type metadata accessor for SingleResultVoicemailModel);
}

uint64_t base witness table accessor for Encodable in SingleResultVoicemailModel()
{
  return _s27PhoneCallFlowDelegatePlugin06SearchB24HistoryBinaryButtonModelVACSEAAWlTm_0(&lazy protocol witness table cache variable for type SingleResultVoicemailModel and conformance SingleResultVoicemailModel, (void (*)(uint64_t))type metadata accessor for SingleResultVoicemailModel);
}

uint64_t _s27PhoneCallFlowDelegatePlugin06SearchB24HistoryBinaryButtonModelVACSEAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance VoicemailUpdateAction()
{
  return specialized == infix<A>(_:_:)();
}

unint64_t lazy protocol witness table accessor for type VoicemailUpdateAction and conformance VoicemailUpdateAction()
{
  unint64_t result = lazy protocol witness table cache variable for type VoicemailUpdateAction and conformance VoicemailUpdateAction;
  if (!lazy protocol witness table cache variable for type VoicemailUpdateAction and conformance VoicemailUpdateAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoicemailUpdateAction and conformance VoicemailUpdateAction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoicemailUpdateAction and conformance VoicemailUpdateAction;
  if (!lazy protocol witness table cache variable for type VoicemailUpdateAction and conformance VoicemailUpdateAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoicemailUpdateAction and conformance VoicemailUpdateAction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoicemailUpdateAction and conformance VoicemailUpdateAction;
  if (!lazy protocol witness table cache variable for type VoicemailUpdateAction and conformance VoicemailUpdateAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoicemailUpdateAction and conformance VoicemailUpdateAction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoicemailUpdateAction and conformance VoicemailUpdateAction;
  if (!lazy protocol witness table cache variable for type VoicemailUpdateAction and conformance VoicemailUpdateAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoicemailUpdateAction and conformance VoicemailUpdateAction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoicemailUpdateAction and conformance VoicemailUpdateAction;
  if (!lazy protocol witness table cache variable for type VoicemailUpdateAction and conformance VoicemailUpdateAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoicemailUpdateAction and conformance VoicemailUpdateAction);
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance VoicemailUpdateAction()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance VoicemailUpdateAction()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance VoicemailUpdateAction()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

PhoneCallFlowDelegatePlugin::VoicemailUpdateAction_optional protocol witness for RawRepresentable.init(rawValue:) in conformance VoicemailUpdateAction@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::VoicemailUpdateAction_optional *a2@<X8>)
{
  result.value = VoicemailUpdateAction.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance VoicemailUpdateAction@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = VoicemailUpdateAction.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance VoicemailUpdateAction()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance VoicemailUpdateAction()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for UpdateResponseCommand.init(_:) in conformance VoicemailUpdateAction()
{
  return UpdateResponseCommand<>.init(_:)();
}

uint64_t protocol witness for UpdateResponseCommand.serializeData() in conformance VoicemailUpdateAction()
{
  return UpdateResponseCommand<>.serializeData()();
}

uint64_t sub_66B3C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SingleResultVoicemailModel.callbackDirectInvocation.getter();
  *a1 = result;
  return result;
}

uint64_t sub_66B6C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SingleResultVoicemailModel.repeatDirectInvocation.getter();
  *a1 = result;
  return result;
}

char *initializeBufferWithCopyOfBuffer for SingleResultVoicemailModel(char *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v32 = *a2;
    *(void *)a1 = *a2;
    a1 = (char *)(v32 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *((void *)a1 + 1) = v7;
    uint64_t v8 = a2[3];
    *((void *)a1 + 2) = a2[2];
    *((void *)a1 + 3) = v8;
    uint64_t v9 = a2[5];
    *((void *)a1 + 4) = a2[4];
    *((void *)a1 + 5) = v9;
    uint64_t v10 = a2[7];
    *((void *)a1 + 6) = a2[6];
    *((void *)a1 + 7) = v10;
    uint64_t v11 = a2[9];
    *((void *)a1 + 8) = a2[8];
    *((void *)a1 + 9) = v11;
    uint64_t v12 = a2[11];
    *((void *)a1 + 10) = a2[10];
    *((void *)a1 + 11) = v12;
    uint64_t v13 = a2[13];
    *((void *)a1 + 12) = a2[12];
    *((void *)a1 + 13) = v13;
    uint64_t v14 = a2[15];
    uint64_t v15 = a3[13];
    uint64_t v34 = (char *)a2 + v15;
    uint64_t v36 = &a1[v15];
    *((void *)a1 + 14) = a2[14];
    *((void *)a1 + 15) = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
    v17(v36, v34, v16);
    v17(&a1[a3[14]], (char *)a2 + a3[14], v16);
    uint64_t v18 = a3[15];
    uint64_t v19 = &a1[v18];
    uint64_t v20 = (char *)a2 + v18;
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16);
    v35(v19, v20, v21);
    uint64_t v22 = (int *)type metadata accessor for SearchCallHistoryBinaryButtonModel();
    uint64_t v23 = v22[5];
    uint64_t v24 = &v19[v23];
    uint64_t v25 = &v20[v23];
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseClientBoundCommand>);
    int v27 = *(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16);
    v27(v24, v25, v26);
    v35(&v19[v22[6]], &v20[v22[6]], v21);
    v27(&v19[v22[7]], &v20[v22[7]], v26);
    uint64_t v28 = v22[8];
    int v29 = &v19[v28];
    int v30 = &v20[v28];
    uint64_t v31 = *((void *)v30 + 1);
    *(void *)int v29 = *(void *)v30;
    *((void *)v29 + 1) = v31;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for SingleResultVoicemailModel(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[13];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(a1 + a2[14], v5);
  uint64_t v7 = a1 + a2[15];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v7, v8);
  uint64_t v10 = (int *)type metadata accessor for SearchCallHistoryBinaryButtonModel();
  uint64_t v11 = v7 + v10[5];
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseClientBoundCommand>);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8);
  v13(v11, v12);
  v9(v7 + v10[6], v8);
  v13(v7 + v10[7], v12);

  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for SingleResultVoicemailModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = *((void *)a2 + 1);
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = v6;
  uint64_t v7 = *((void *)a2 + 3);
  *((void *)a1 + 2) = *((void *)a2 + 2);
  *((void *)a1 + 3) = v7;
  uint64_t v8 = *((void *)a2 + 5);
  *((void *)a1 + 4) = *((void *)a2 + 4);
  *((void *)a1 + 5) = v8;
  uint64_t v9 = *((void *)a2 + 7);
  *((void *)a1 + 6) = *((void *)a2 + 6);
  *((void *)a1 + 7) = v9;
  uint64_t v10 = *((void *)a2 + 9);
  *((void *)a1 + 8) = *((void *)a2 + 8);
  *((void *)a1 + 9) = v10;
  uint64_t v11 = *((void *)a2 + 11);
  *((void *)a1 + 10) = *((void *)a2 + 10);
  *((void *)a1 + 11) = v11;
  uint64_t v12 = *((void *)a2 + 13);
  *((void *)a1 + 12) = *((void *)a2 + 12);
  *((void *)a1 + 13) = v12;
  uint64_t v13 = *((void *)a2 + 15);
  uint64_t v14 = a3[13];
  uint64_t v32 = &a2[v14];
  uint64_t v34 = &a1[v14];
  *((void *)a1 + 14) = *((void *)a2 + 14);
  *((void *)a1 + 15) = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
  v16(v34, v32, v15);
  v16(&a1[a3[14]], &a2[a3[14]], v15);
  uint64_t v17 = a3[15];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  uint64_t v33 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16);
  v33(v18, v19, v20);
  uint64_t v21 = (int *)type metadata accessor for SearchCallHistoryBinaryButtonModel();
  uint64_t v22 = v21[5];
  uint64_t v23 = &v18[v22];
  uint64_t v24 = &v19[v22];
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseClientBoundCommand>);
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16);
  v26(v23, v24, v25);
  v33(&v18[v21[6]], &v19[v21[6]], v20);
  v26(&v18[v21[7]], &v19[v21[7]], v25);
  uint64_t v27 = v21[8];
  uint64_t v28 = &v18[v27];
  int v29 = &v19[v27];
  uint64_t v30 = *((void *)v29 + 1);
  *(void *)uint64_t v28 = *(void *)v29;
  *((void *)v28 + 1) = v30;
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for SingleResultVoicemailModel(char *a1, char *a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = *((void *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 2) = *((void *)a2 + 2);
  *((void *)a1 + 3) = *((void *)a2 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 4) = *((void *)a2 + 4);
  *((void *)a1 + 5) = *((void *)a2 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 6) = *((void *)a2 + 6);
  *((void *)a1 + 7) = *((void *)a2 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 8) = *((void *)a2 + 8);
  *((void *)a1 + 9) = *((void *)a2 + 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 10) = *((void *)a2 + 10);
  *((void *)a1 + 11) = *((void *)a2 + 11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 12) = *((void *)a2 + 12);
  *((void *)a1 + 13) = *((void *)a2 + 13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 14) = *((void *)a2 + 14);
  *((void *)a1 + 15) = *((void *)a2 + 15);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[13];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  v10(&a1[a3[14]], &a2[a3[14]], v9);
  uint64_t v11 = a3[15];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  uint64_t v25 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 24);
  v25(v12, v13, v14);
  uint64_t v15 = (int *)type metadata accessor for SearchCallHistoryBinaryButtonModel();
  uint64_t v16 = v15[5];
  uint64_t v17 = &v12[v16];
  uint64_t v18 = &v13[v16];
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseClientBoundCommand>);
  uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 24);
  v20(v17, v18, v19);
  v25(&v12[v15[6]], &v13[v15[6]], v14);
  v20(&v12[v15[7]], &v13[v15[7]], v19);
  uint64_t v21 = v15[8];
  uint64_t v22 = &v12[v21];
  uint64_t v23 = &v13[v21];
  *(void *)uint64_t v22 = *(void *)v23;
  *((void *)v22 + 1) = *((void *)v23 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for SingleResultVoicemailModel(char *a1, char *a2, int *a3)
{
  long long v6 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v6;
  long long v7 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a1 + 3) = v7;
  long long v8 = *((_OWORD *)a2 + 5);
  *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
  *((_OWORD *)a1 + 5) = v8;
  long long v9 = *((_OWORD *)a2 + 7);
  uint64_t v10 = a3[13];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
  *((_OWORD *)a1 + 7) = v9;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32);
  v14(v11, v12, v13);
  v14(&a1[a3[14]], &a2[a3[14]], v13);
  uint64_t v15 = a3[15];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32);
  v26(v16, v17, v18);
  uint64_t v19 = (int *)type metadata accessor for SearchCallHistoryBinaryButtonModel();
  uint64_t v20 = v19[5];
  uint64_t v21 = &v16[v20];
  uint64_t v22 = &v17[v20];
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseClientBoundCommand>);
  uint64_t v24 = *(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32);
  v24(v21, v22, v23);
  v26(&v16[v19[6]], &v17[v19[6]], v18);
  v24(&v16[v19[7]], &v17[v19[7]], v23);
  *(_OWORD *)&v16[v19[8]] = *(_OWORD *)&v17[v19[8]];
  return a1;
}

char *assignWithTake for SingleResultVoicemailModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = *((void *)a2 + 1);
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *((void *)a2 + 3);
  *((void *)a1 + 2) = *((void *)a2 + 2);
  *((void *)a1 + 3) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *((void *)a2 + 5);
  *((void *)a1 + 4) = *((void *)a2 + 4);
  *((void *)a1 + 5) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *((void *)a2 + 7);
  *((void *)a1 + 6) = *((void *)a2 + 6);
  *((void *)a1 + 7) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *((void *)a2 + 9);
  *((void *)a1 + 8) = *((void *)a2 + 8);
  *((void *)a1 + 9) = v10;
  swift_bridgeObjectRelease();
  *((void *)a1 + 10) = *((void *)a2 + 10);
  *((void *)a1 + 11) = *((void *)a2 + 11);
  swift_bridgeObjectRelease();
  uint64_t v11 = *((void *)a2 + 13);
  *((void *)a1 + 12) = *((void *)a2 + 12);
  *((void *)a1 + 13) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *((void *)a2 + 15);
  *((void *)a1 + 14) = *((void *)a2 + 14);
  *((void *)a1 + 15) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[13];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 40);
  v17(v14, v15, v16);
  v17(&a1[a3[14]], &a2[a3[14]], v16);
  uint64_t v18 = a3[15];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  uint64_t v34 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 40);
  v34(v19, v20, v21);
  uint64_t v22 = (int *)type metadata accessor for SearchCallHistoryBinaryButtonModel();
  uint64_t v23 = v22[5];
  uint64_t v24 = &v19[v23];
  uint64_t v25 = &v20[v23];
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseClientBoundCommand>);
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 40);
  v27(v24, v25, v26);
  v34(&v19[v22[6]], &v20[v22[6]], v21);
  v27(&v19[v22[7]], &v20[v22[7]], v26);
  uint64_t v28 = v22[8];
  int v29 = &v19[v28];
  uint64_t v30 = &v20[v28];
  uint64_t v32 = *(void *)v30;
  uint64_t v31 = *((void *)v30 + 1);
  *(void *)int v29 = v32;
  *((void *)v29 + 1) = v31;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SingleResultVoicemailModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_6794C);
}

uint64_t sub_6794C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
    OUTLINED_FUNCTION_1_6();
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 52);
    }
    else
    {
      uint64_t v10 = type metadata accessor for SearchCallHistoryBinaryButtonModel();
      uint64_t v11 = *(int *)(a3 + 60);
    }
    return __swift_getEnumTagSinglePayload(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for SingleResultVoicemailModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_67A10);
}

uint64_t sub_67A10(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
    OUTLINED_FUNCTION_1_6();
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 52);
    }
    else
    {
      uint64_t v10 = type metadata accessor for SearchCallHistoryBinaryButtonModel();
      uint64_t v11 = *(int *)(a4 + 60);
    }
    return __swift_storeEnumTagSinglePayload(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for SingleResultVoicemailModel()
{
  type metadata accessor for CodableAceObject<SAIntentGroupRunSiriKitExecutor>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for SearchCallHistoryBinaryButtonModel();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for CodableAceObject<SAIntentGroupRunSiriKitExecutor>()
{
  if (!lazy cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>)
  {
    type metadata accessor for SAIntentGroupRunSiriKitExecutor();
    unint64_t v0 = type metadata accessor for CodableAceObject();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
    }
  }
}

uint64_t getEnumTagSinglePayload for VoicemailUpdateAction(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for VoicemailUpdateAction(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x67D64);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for VoicemailUpdateAction(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for VoicemailUpdateAction()
{
  return &type metadata for VoicemailUpdateAction;
}

uint64_t getEnumTagSinglePayload for SingleResultVoicemailModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF5)
  {
    if (a2 + 11 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 11) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 12;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v5 = v6 - 12;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for SingleResultVoicemailModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *uint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x67EFCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

void *type metadata accessor for SingleResultVoicemailModel.CodingKeys()
{
  return &unk_550B08;
}

uint64_t OUTLINED_FUNCTION_1_7@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 72) = a1;
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_2_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_3_9@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 72) = a1;
  return KeyedDecodingContainer.decode(_:forKey:)();
}

void OUTLINED_FUNCTION_6_6()
{
  *(_DWORD *)(v0 - 144) = 0;
}

void OUTLINED_FUNCTION_7_9()
{
  *(_DWORD *)(v0 - 144) = 0;
}

void OUTLINED_FUNCTION_8_8()
{
  *(_DWORD *)(v0 - 144) = 0;
}

void OUTLINED_FUNCTION_9_7()
{
  *(_DWORD *)(v0 - 144) = 0;
}

uint64_t OUTLINED_FUNCTION_13_2()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t ContactConfirmationModel.responseViewId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t property wrapper backing initializer of PlayVoicemailModel.callRecords()
{
  return Loggable.init(wrappedValue:)();
}

uint64_t PlayVoicemailModel.callRecords.getter()
{
  type metadata accessor for PlayVoicemailModel();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<[SingleVoicemailModel]>);
  Loggable.wrappedValue.getter();
  return v1;
}

uint64_t type metadata accessor for PlayVoicemailModel()
{
  uint64_t result = type metadata singleton initialization cache for PlayVoicemailModel;
  if (!type metadata singleton initialization cache for PlayVoicemailModel) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t key path setter for PlayVoicemailModel.callRecords : PlayVoicemailModel()
{
  return PlayVoicemailModel.callRecords.setter();
}

uint64_t PlayVoicemailModel.callRecords.setter()
{
  return Loggable.wrappedValue.setter();
}

uint64_t (*PlayVoicemailModel.callRecords.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_4_10((uint64_t)v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<[SingleVoicemailModel]>);
  *(void *)(v0 + 32) = Loggable.wrappedValue.modify();
  return SearchCallHistoryBinaryButtonModel.primaryText.modify;
}

uint64_t PlayVoicemailModel.voicemailTitle.getter()
{
  type metadata accessor for PlayVoicemailModel();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  Loggable.wrappedValue.getter();
  return v1;
}

uint64_t key path setter for PlayVoicemailModel.voicemailTitle : PlayVoicemailModel()
{
  return PlayVoicemailModel.voicemailTitle.setter();
}

uint64_t PlayVoicemailModel.voicemailTitle.setter()
{
  return Loggable.wrappedValue.setter();
}

uint64_t (*PlayVoicemailModel.voicemailTitle.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_4_10((uint64_t)v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  *(void *)(v0 + 32) = Loggable.wrappedValue.modify();
  return SearchCallHistoryBinaryButtonModel.primaryText.modify;
}

uint64_t PlayVoicemailModel.openPhoneText.getter()
{
  type metadata accessor for PlayVoicemailModel();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  Loggable.wrappedValue.getter();
  return v1;
}

uint64_t key path setter for PlayVoicemailModel.openPhoneText : PlayVoicemailModel()
{
  return PlayVoicemailModel.openPhoneText.setter();
}

uint64_t PlayVoicemailModel.openPhoneText.setter()
{
  return Loggable.wrappedValue.setter();
}

uint64_t (*PlayVoicemailModel.openPhoneText.modify())()
{
  uint64_t v1 = OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_4_10((uint64_t)v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  *(void *)(v0 + 32) = Loggable.wrappedValue.modify();
  return SearchCallHistoryBinaryButtonModel.primaryText.modify;
}

uint64_t property wrapper backing initializer of PlayVoicemailModel.openPhoneAction()
{
  type metadata accessor for SABaseCommand();

  return CodableAceObject.init(wrappedValue:)();
}

unint64_t type metadata accessor for SABaseCommand()
{
  unint64_t result = lazy cache variable for type metadata for SABaseCommand;
  if (!lazy cache variable for type metadata for SABaseCommand)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SABaseCommand);
  }
  return result;
}

uint64_t PlayVoicemailModel.openPhoneAction.getter()
{
  return CodableAceObject.wrappedValue.getter();
}

uint64_t key path setter for PlayVoicemailModel.openPhoneAction : PlayVoicemailModel(id *a1)
{
  id v1 = *a1;
  return PlayVoicemailModel.openPhoneAction.setter();
}

uint64_t PlayVoicemailModel.openPhoneAction.setter()
{
  return CodableAceObject.wrappedValue.setter();
}

uint64_t (*PlayVoicemailModel.openPhoneAction.modify())()
{
  id v1 = OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_4_10((uint64_t)v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseCommand>);
  *(void *)(v0 + 32) = CodableAceObject.wrappedValue.modify();
  return SearchCallHistoryBinaryButtonModel.primaryText.modify;
}

uint64_t PlayVoicemailModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65736E6F70736572 && a2 == 0xEE00644977656956;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6F6365526C6C6163 && a2 == 0xEB00000000736472;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x69616D6563696F76 && a2 == 0xEE00656C7469546CLL;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x6E6F68506E65706FLL && a2 == 0xED00007478655465;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else if (a1 == 0x6E6F68506E65706FLL && a2 == 0xEF6E6F6974634165)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else
        {
          char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v10) {
            return 4;
          }
          else {
            return 5;
          }
        }
      }
    }
  }
}

uint64_t PlayVoicemailModel.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0x65736E6F70736572;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6F6365526C6C6163;
      break;
    case 2:
      uint64_t result = 0x69616D6563696F76;
      break;
    case 3:
    case 4:
      uint64_t result = 0x6E6F68506E65706FLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PlayVoicemailModel.CodingKeys()
{
  return PlayVoicemailModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PlayVoicemailModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = PlayVoicemailModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PlayVoicemailModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlayVoicemailModel.CodingKeys and conformance PlayVoicemailModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PlayVoicemailModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlayVoicemailModel.CodingKeys and conformance PlayVoicemailModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PlayVoicemailModel.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PlayVoicemailModel.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_4();
  uint64_t v9 = v8 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PlayVoicemailModel.CodingKeys and conformance PlayVoicemailModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for PlayVoicemailModel();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<[SingleVoicemailModel]>);
    lazy protocol witness table accessor for type Loggable<[SingleVoicemailModel]> and conformance <A> Loggable<A>((uint64_t)&lazy protocol witness table cache variable for type Loggable<[SingleVoicemailModel]> and conformance <A> Loggable<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
    _s10SnippetKit8LoggableVySSGACyxGSEAASeRzSERzlWlTm_0((uint64_t)&lazy protocol witness table cache variable for type Loggable<String> and conformance <A> Loggable<A>);
    OUTLINED_FUNCTION_8_9();
    OUTLINED_FUNCTION_8_9();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseCommand>);
    lazy protocol witness table accessor for type CodableAceObject<SABaseCommand> and conformance CodableAceObject<A>((uint64_t)&lazy protocol witness table cache variable for type CodableAceObject<SABaseCommand> and conformance CodableAceObject<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
}

unint64_t lazy protocol witness table accessor for type PlayVoicemailModel.CodingKeys and conformance PlayVoicemailModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PlayVoicemailModel.CodingKeys and conformance PlayVoicemailModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlayVoicemailModel.CodingKeys and conformance PlayVoicemailModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlayVoicemailModel.CodingKeys and conformance PlayVoicemailModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlayVoicemailModel.CodingKeys and conformance PlayVoicemailModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlayVoicemailModel.CodingKeys and conformance PlayVoicemailModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlayVoicemailModel.CodingKeys and conformance PlayVoicemailModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlayVoicemailModel.CodingKeys and conformance PlayVoicemailModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlayVoicemailModel.CodingKeys and conformance PlayVoicemailModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlayVoicemailModel.CodingKeys and conformance PlayVoicemailModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlayVoicemailModel.CodingKeys and conformance PlayVoicemailModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlayVoicemailModel.CodingKeys and conformance PlayVoicemailModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlayVoicemailModel.CodingKeys and conformance PlayVoicemailModel.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [SingleVoicemailModel] and conformance <A> [A](uint64_t a1)
{
  unint64_t result = OUTLINED_FUNCTION_7_10(a1);
  if (!result)
  {
    uint64_t v4 = v3;
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SingleVoicemailModel]);
    lazy protocol witness table accessor for type SingleVoicemailModel and conformance SingleVoicemailModel(v4);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

uint64_t PlayVoicemailModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v46 = a2;
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseCommand>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v45 = v3;
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_4();
  uint64_t v48 = v6 - v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v55 = v7;
  uint64_t v56 = v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v44 - v12;
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<[SingleVoicemailModel]>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v49 = v14;
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_4();
  uint64_t v18 = v17 - v16;
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PlayVoicemailModel.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  int v20 = v19;
  __chkstk_darwin(v21);
  OUTLINED_FUNCTION_4();
  uint64_t v24 = v23 - v22;
  uint64_t v57 = (int *)type metadata accessor for PlayVoicemailModel();
  __chkstk_darwin(v57);
  OUTLINED_FUNCTION_4();
  uint64_t v27 = (uint64_t *)(v26 - v25);
  strcpy((char *)(v26 - v25), "PlayVoicemail");
  *(_WORD *)(v26 - v25 + 14) = -4864;
  uint64_t v28 = a1[3];
  uint64_t v53 = a1;
  unsigned int v29 = __swift_project_boxed_opaque_existential_1(a1, v28);
  lazy protocol witness table accessor for type PlayVoicemailModel.CodingKeys and conformance PlayVoicemailModel.CodingKeys();
  uint64_t v52 = v24;
  uint64_t v30 = v54;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v30)
  {
    uint64_t v54 = v11;
    char v62 = 0;
    *uint64_t v27 = KeyedDecodingContainer.decode(_:forKey:)();
    v27[1] = v33;
    char v61 = 1;
    lazy protocol witness table accessor for type Loggable<[SingleVoicemailModel]> and conformance <A> Loggable<A>((uint64_t)&lazy protocol witness table cache variable for type Loggable<[SingleVoicemailModel]> and conformance <A> Loggable<A>);
    uint64_t v34 = v51;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v35 = v55;
    (*(void (**)(char *, uint64_t, uint64_t))(v49 + 32))((char *)v27 + v57[5], v18, v34);
    char v60 = 2;
    _s10SnippetKit8LoggableVySSGACyxGSEAASeRzSERzlWlTm_0((uint64_t)&lazy protocol witness table cache variable for type Loggable<String> and conformance <A> Loggable<A>);
    uint64_t v36 = v13;
    OUTLINED_FUNCTION_5_3();
    uint64_t v37 = v57;
    uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v56 + 32);
    v38((char *)v27 + v57[6], v36, v35);
    char v59 = 3;
    OUTLINED_FUNCTION_5_3();
    v38((char *)v27 + v37[7], v54, v35);
    char v58 = 4;
    lazy protocol witness table accessor for type CodableAceObject<SABaseCommand> and conformance CodableAceObject<A>((uint64_t)&lazy protocol witness table cache variable for type CodableAceObject<SABaseCommand> and conformance CodableAceObject<A>);
    uint64_t v39 = v47;
    uint64_t v40 = v48;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v41 = OUTLINED_FUNCTION_9_8();
    v42(v41);
    (*(void (**)(char *, uint64_t, uint64_t))(v45 + 32))((char *)v27 + v57[8], v40, v39);
    outlined init with copy of PlayVoicemailModel((uint64_t)v27, v46);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
    return outlined destroy of PlayVoicemailModel((uint64_t)v27);
  }
  OUTLINED_FUNCTION_6_7();
  uint64_t v31 = v55;
  uint64_t v32 = v57;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v28)
  {
    if (!v20) {
      goto LABEL_6;
    }
LABEL_9:
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v56 + 8))((char *)v27 + v32[6], v31);
    if (!v29) {
      return result;
    }
    return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))((char *)v27 + v32[7], v31);
  }
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v49 + 8))((char *)v27 + v32[5], v51);
  if (v20) {
    goto LABEL_9;
  }
LABEL_6:
  if (v29) {
    return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))((char *)v27 + v32[7], v31);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Loggable<[SingleVoicemailModel]> and conformance <A> Loggable<A>(uint64_t a1)
{
  unint64_t result = OUTLINED_FUNCTION_7_10(a1);
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Loggable<[SingleVoicemailModel]>);
    lazy protocol witness table accessor for type [SingleVoicemailModel] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [SingleVoicemailModel] and conformance <A> [A]);
    lazy protocol witness table accessor for type [SingleVoicemailModel] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [SingleVoicemailModel] and conformance <A> [A]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t _s10SnippetKit8LoggableVySSGACyxGSEAASeRzSERzlWlTm_0(uint64_t a1)
{
  unint64_t result = OUTLINED_FUNCTION_7_10(a1);
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Loggable<String>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAceObject<SABaseCommand> and conformance CodableAceObject<A>(uint64_t a1)
{
  unint64_t result = OUTLINED_FUNCTION_7_10(a1);
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CodableAceObject<SABaseCommand>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

uint64_t outlined init with copy of PlayVoicemailModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PlayVoicemailModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  void (*v6)(uint64_t);

  uint64_t v3 = OUTLINED_FUNCTION_62_0();
  v4(v3);
  OUTLINED_FUNCTION_15();
  uint64_t v5 = OUTLINED_FUNCTION_74();
  v6(v5);
  return a2;
}

uint64_t outlined destroy of PlayVoicemailModel(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PlayVoicemailModel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t PlayVoicemailModel.init(responseViewId:callRecords:voicemailTitle:openPhoneText:openPhoneAction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  type metadata accessor for PlayVoicemailModel();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SingleVoicemailModel]);
  Loggable.init(wrappedValue:)();
  Loggable.init(wrappedValue:)();
  Loggable.init(wrappedValue:)();
  type metadata accessor for SABaseCommand();
  return CodableAceObject.init(wrappedValue:)();
}

unint64_t instantiation function for generic protocol witness table for PlayVoicemailModel(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type SingleVoicemailModel and conformance SingleVoicemailModel((uint64_t)&lazy protocol witness table cache variable for type PlayVoicemailModel and conformance PlayVoicemailModel);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t base witness table accessor for Decodable in PlayVoicemailModel()
{
  return lazy protocol witness table accessor for type SingleVoicemailModel and conformance SingleVoicemailModel((uint64_t)&lazy protocol witness table cache variable for type PlayVoicemailModel and conformance PlayVoicemailModel);
}

unint64_t base witness table accessor for Encodable in PlayVoicemailModel()
{
  return lazy protocol witness table accessor for type SingleVoicemailModel and conformance SingleVoicemailModel((uint64_t)&lazy protocol witness table cache variable for type PlayVoicemailModel and conformance PlayVoicemailModel);
}

unint64_t lazy protocol witness table accessor for type SingleVoicemailModel and conformance SingleVoicemailModel(uint64_t a1)
{
  unint64_t result = OUTLINED_FUNCTION_7_10(a1);
  if (!result)
  {
    v3(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance PlayVoicemailModel@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return PlayVoicemailModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PlayVoicemailModel(void *a1)
{
  return PlayVoicemailModel.encode(to:)(a1);
}

uint64_t sub_699A8()
{
  OUTLINED_FUNCTION_7_6();
  uint64_t result = PlayVoicemailModel.callRecords.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_699D4()
{
  OUTLINED_FUNCTION_7_6();
  uint64_t result = PlayVoicemailModel.voicemailTitle.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_69A00()
{
  OUTLINED_FUNCTION_7_6();
  uint64_t result = PlayVoicemailModel.openPhoneText.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_69A2C()
{
  OUTLINED_FUNCTION_7_6();
  uint64_t result = PlayVoicemailModel.openPhoneAction.getter();
  *uint64_t v0 = result;
  return result;
}

char *initializeBufferWithCopyOfBuffer for PlayVoicemailModel(char *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *(void *)a1 = *a2;
    a1 = (char *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *((void *)a1 + 1) = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = &a1[v8];
    uint64_t v10 = (char *)a2 + v8;
    swift_bridgeObjectRetain();
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<[SingleVoicemailModel]>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[6];
    uint64_t v13 = &a1[v12];
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
    v16(v13, v14, v15);
    v16(&a1[a3[7]], (char *)a2 + a3[7], v15);
    uint64_t v17 = a3[8];
    uint64_t v18 = &a1[v17];
    int v19 = (char *)a2 + v17;
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseCommand>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
  }
  return a1;
}

uint64_t destroy for PlayVoicemailModel(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<[SingleVoicemailModel]>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + a2[6];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(a1 + a2[7], v7);
  uint64_t v9 = a1 + a2[8];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseCommand>);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);

  return v11(v9, v10);
}

char *initializeWithCopy for PlayVoicemailModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = *((void *)a2 + 1);
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = &a1[v7];
  uint64_t v9 = &a2[v7];
  swift_bridgeObjectRetain();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<[SingleVoicemailModel]>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
  v15(v12, v13, v14);
  v15(&a1[a3[7]], &a2[a3[7]], v14);
  uint64_t v16 = a3[8];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseCommand>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
  return a1;
}

char *assignWithCopy for PlayVoicemailModel(char *a1, char *a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = *((void *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<[SingleVoicemailModel]>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24);
  v14(v11, v12, v13);
  v14(&a1[a3[7]], &a2[a3[7]], v13);
  uint64_t v15 = a3[8];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseCommand>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

char *initializeWithTake for PlayVoicemailModel(char *a1, char *a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<[SingleVoicemailModel]>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32);
  v14(v11, v12, v13);
  v14(&a1[a3[7]], &a2[a3[7]], v13);
  uint64_t v15 = a3[8];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseCommand>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
  return a1;
}

char *assignWithTake for PlayVoicemailModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = *((void *)a2 + 1);
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = &a1[v7];
  uint64_t v9 = &a2[v7];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<[SingleVoicemailModel]>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 40);
  v15(v12, v13, v14);
  v15(&a1[a3[7]], &a2[a3[7]], v14);
  uint64_t v16 = a3[8];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseCommand>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 40))(v17, v18, v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlayVoicemailModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_6A2A4);
}

uint64_t sub_6A2A4(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<[SingleVoicemailModel]>);
    OUTLINED_FUNCTION_1_6();
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a3[5];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
      OUTLINED_FUNCTION_1_6();
      if (*(_DWORD *)(v13 + 84) == a2)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a3[6];
      }
      else
      {
        uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseCommand>);
        uint64_t v11 = a3[8];
      }
    }
    return __swift_getEnumTagSinglePayload(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PlayVoicemailModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_6A394);
}

uint64_t sub_6A394(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<[SingleVoicemailModel]>);
    OUTLINED_FUNCTION_1_6();
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a4[5];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Loggable<String>);
      OUTLINED_FUNCTION_1_6();
      if (*(_DWORD *)(v13 + 84) == a3)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a4[6];
      }
      else
      {
        uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SABaseCommand>);
        uint64_t v11 = a4[8];
      }
    }
    return __swift_storeEnumTagSinglePayload(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for PlayVoicemailModel()
{
  type metadata accessor for Loggable<[SingleVoicemailModel]>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Loggable<String>();
    if (v1 <= 0x3F)
    {
      type metadata accessor for CodableAceObject<SABaseCommand>();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void type metadata accessor for Loggable<[SingleVoicemailModel]>()
{
  if (!lazy cache variable for type metadata for Loggable<[SingleVoicemailModel]>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SingleVoicemailModel]);
    unint64_t v0 = type metadata accessor for Loggable();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Loggable<[SingleVoicemailModel]>);
    }
  }
}

void type metadata accessor for CodableAceObject<SABaseCommand>()
{
  if (!lazy cache variable for type metadata for CodableAceObject<SABaseCommand>)
  {
    type metadata accessor for SABaseCommand();
    unint64_t v0 = type metadata accessor for CodableAceObject();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CodableAceObject<SABaseCommand>);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for PlayVoicemailModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x6A6FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

void *type metadata accessor for PlayVoicemailModel.CodingKeys()
{
  return &unk_550BF0;
}

uint64_t OUTLINED_FUNCTION_3_10()
{
  return *(void *)(v0 - 128);
}

uint64_t OUTLINED_FUNCTION_4_10(uint64_t a1)
{
  void *v1 = a1;
  return type metadata accessor for PlayVoicemailModel();
}

uint64_t OUTLINED_FUNCTION_7_10(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t OUTLINED_FUNCTION_8_9()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_9_8()
{
  return *(void *)(v0 - 128);
}

uint64_t SingleVoicemailModel.unseen.getter()
{
  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t SingleVoicemailModel.unseen.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 80) = result;
  return result;
}

uint64_t SingleVoicemailModel.openVoicemailRSKE.getter()
{
  return CodableAceObject.wrappedValue.getter();
}

uint64_t type metadata accessor for SingleVoicemailModel()
{
  uint64_t result = type metadata singleton initialization cache for SingleVoicemailModel;
  if (!type metadata singleton initialization cache for SingleVoicemailModel) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t key path setter for SingleVoicemailModel.openVoicemailRSKE : SingleVoicemailModel(id *a1)
{
  id v1 = *a1;
  return SingleVoicemailModel.openVoicemailRSKE.setter();
}

uint64_t SingleVoicemailModel.openVoicemailRSKE.setter()
{
  return CodableAceObject.wrappedValue.setter();
}

uint64_t (*SingleVoicemailModel.openVoicemailRSKE.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for SingleVoicemailModel();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  v2[4] = CodableAceObject.wrappedValue.modify();
  return SearchCallHistoryBinaryButtonModel.primaryText.modify;
}

uint64_t SingleVoicemailModel.openContactRSKE.getter()
{
  return CodableAceObject.wrappedValue.getter();
}

uint64_t key path setter for SingleVoicemailModel.openContactRSKE : SingleVoicemailModel(id *a1)
{
  id v1 = *a1;
  return SingleVoicemailModel.openContactRSKE.setter();
}

uint64_t SingleVoicemailModel.openContactRSKE.setter()
{
  return CodableAceObject.wrappedValue.setter();
}

uint64_t (*SingleVoicemailModel.openContactRSKE.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for SingleVoicemailModel();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  v2[4] = CodableAceObject.wrappedValue.modify();
  return SearchCallHistoryBinaryButtonModel.primaryText.modify;
}

void SingleVoicemailModel.init(displayName:displayCallDetail:displayDateTime:callDuration:unseen:openVoicemailRSKE:openContactRSKE:)(uint64_t a1@<X6>, uint64_t a2@<X7>, uint64_t a3@<X8>, char a4, void *a5)
{
  OUTLINED_FUNCTION_3_11();
  *(void *)a3 = v8;
  *(void *)(a3 + 8) = v9;
  *(void *)(a3 + 16) = v10;
  *(void *)(a3 + 24) = v11;
  *(void *)(a3 + 32) = v12;
  *(void *)(a3 + 40) = v13;
  *(void *)(a3 + 48) = v14;
  *(void *)(a3 + 56) = v15;
  type metadata accessor for SingleVoicemailModel();
  type metadata accessor for SAIntentGroupRunSiriKitExecutor();
  id v16 = a5;
  CodableAceObject.init(wrappedValue:)();
  *(void *)(a3 + 64) = a1;
  *(void *)(a3 + 72) = a2;
  *(unsigned char *)(a3 + 80) = a4;
  CodableAceObject.init(wrappedValue:)();
}

uint64_t SingleVoicemailModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65736E6F70736572 && a2 == 0xEE00644977656956;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x4E79616C70736964 && a2 == 0xEB00000000656D61;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000011 && a2 == 0x8000000000490A40 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      BOOL v7 = a1 == 0x4479616C70736964 && a2 == 0xEF656D6954657461;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        BOOL v8 = a1 == 0x617275446C6C6163 && a2 == 0xEC0000006E6F6974;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else
        {
          BOOL v9 = a1 == 0x6E6565736E75 && a2 == 0xE600000000000000;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 5;
          }
          else if (a1 == 0xD000000000000011 && a2 == 0x80000000004915C0 {
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          }
          {
            swift_bridgeObjectRelease();
            return 6;
          }
          else if (a1 == 0x746E6F436E65706FLL && a2 == 0xEF454B5352746361)
          {
            swift_bridgeObjectRelease();
            return 7;
          }
          else
          {
            char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v11) {
              return 7;
            }
            else {
              return 8;
            }
          }
        }
      }
    }
  }
}

uint64_t SingleVoicemailModel.CodingKeys.init(intValue:)()
{
  return 8;
}

unint64_t SingleVoicemailModel.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x65736E6F70736572;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x4E79616C70736964;
      break;
    case 2:
    case 6:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0x4479616C70736964;
      break;
    case 4:
      unint64_t result = 0x617275446C6C6163;
      break;
    case 5:
      unint64_t result = 0x6E6565736E75;
      break;
    case 7:
      unint64_t result = 0x746E6F436E65706FLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance SingleVoicemailModel.CodingKeys()
{
  return SingleVoicemailModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SingleVoicemailModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = SingleVoicemailModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance SingleVoicemailModel.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = SingleVoicemailModel.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SingleVoicemailModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SingleVoicemailModel.CodingKeys and conformance SingleVoicemailModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SingleVoicemailModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SingleVoicemailModel.CodingKeys and conformance SingleVoicemailModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SingleVoicemailModel.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SingleVoicemailModel.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_4();
  uint64_t v9 = v8 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SingleVoicemailModel.CodingKeys and conformance SingleVoicemailModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  OUTLINED_FUNCTION_2_6();
  if (!v1)
  {
    OUTLINED_FUNCTION_2_6();
    OUTLINED_FUNCTION_2_6();
    OUTLINED_FUNCTION_2_6();
    OUTLINED_FUNCTION_2_6();
    KeyedEncodingContainer.encode(_:forKey:)();
    type metadata accessor for SingleVoicemailModel();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
    lazy protocol witness table accessor for type CodableAceObject<SAIntentGroupRunSiriKitExecutor> and conformance CodableAceObject<A>(&lazy protocol witness table cache variable for type CodableAceObject<SAIntentGroupRunSiriKitExecutor> and conformance CodableAceObject<A>);
    OUTLINED_FUNCTION_8_9();
    OUTLINED_FUNCTION_8_9();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
}

unint64_t lazy protocol witness table accessor for type SingleVoicemailModel.CodingKeys and conformance SingleVoicemailModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SingleVoicemailModel.CodingKeys and conformance SingleVoicemailModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SingleVoicemailModel.CodingKeys and conformance SingleVoicemailModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SingleVoicemailModel.CodingKeys and conformance SingleVoicemailModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SingleVoicemailModel.CodingKeys and conformance SingleVoicemailModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SingleVoicemailModel.CodingKeys and conformance SingleVoicemailModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SingleVoicemailModel.CodingKeys and conformance SingleVoicemailModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SingleVoicemailModel.CodingKeys and conformance SingleVoicemailModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SingleVoicemailModel.CodingKeys and conformance SingleVoicemailModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SingleVoicemailModel.CodingKeys and conformance SingleVoicemailModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SingleVoicemailModel.CodingKeys and conformance SingleVoicemailModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SingleVoicemailModel.CodingKeys and conformance SingleVoicemailModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SingleVoicemailModel.CodingKeys and conformance SingleVoicemailModel.CodingKeys);
  }
  return result;
}

uint64_t SingleVoicemailModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v39 = a2;
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v42 = v3;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v37 - v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SingleVoicemailModel.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v40 = v11;
  uint64_t v41 = v10;
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_4();
  int v14 = v13 - v12;
  uint64_t v43 = type metadata accessor for SingleVoicemailModel();
  __chkstk_darwin(v43);
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_3_11();
  *uint64_t v17 = v15;
  v17[1] = v16;
  uint64_t v18 = (uint64_t)v17;
  uint64_t v19 = a1[4];
  uint64_t v20 = (uint64_t)a1;
  unsigned int v21 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SingleVoicemailModel.CodingKeys and conformance SingleVoicemailModel.CodingKeys();
  uint64_t v22 = v45;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v22)
  {
    uint64_t v45 = (void (*)(void, void, void))v9;
    uint64_t v38 = v7;
    char v53 = 0;
    *(void *)uint64_t v18 = KeyedDecodingContainer.decode(_:forKey:)();
    *(void *)(v18 + 8) = v23;
    char v52 = 1;
    *(void *)(v18 + 16) = KeyedDecodingContainer.decode(_:forKey:)();
    *(void *)(v18 + 24) = v24;
    char v51 = 2;
    *(void *)(v18 + 32) = KeyedDecodingContainer.decode(_:forKey:)();
    *(void *)(v18 + 40) = v25;
    char v50 = 3;
    *(void *)(v18 + 48) = KeyedDecodingContainer.decode(_:forKey:)();
    *(void *)(v18 + 56) = v26;
    char v49 = 4;
    *(void *)(v18 + 64) = KeyedDecodingContainer.decode(_:forKey:)();
    *(void *)(v18 + 72) = v27;
    char v48 = 5;
    *(unsigned char *)(v18 + 80) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    char v47 = 6;
    uint64_t v28 = lazy protocol witness table accessor for type CodableAceObject<SAIntentGroupRunSiriKitExecutor> and conformance CodableAceObject<A>(&lazy protocol witness table cache variable for type CodableAceObject<SAIntentGroupRunSiriKitExecutor> and conformance CodableAceObject<A>);
    unsigned int v29 = v45;
    v37[1] = v28;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v30 = v18 + *(int *)(v43 + 40);
    uint64_t v31 = v29;
    uint64_t v32 = v44;
    uint64_t v45 = *(void (**)(void, void, void))(v42 + 32);
    v45(v30, v31, v44);
    char v46 = 7;
    uint64_t v33 = v38;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v34 = OUTLINED_FUNCTION_5_4();
    v35(v34);
    v45(v18 + *(int *)(v43 + 44), v33, v32);
    outlined init with copy of SingleVoicemailModel(v18, v39);
    __swift_destroy_boxed_opaque_existential_1(v20);
    return outlined destroy of SingleVoicemailModel(v18);
  }
  OUTLINED_FUNCTION_4_1();
  __swift_destroy_boxed_opaque_existential_1(v20);
  uint64_t result = swift_bridgeObjectRelease();
  if (v14)
  {
    uint64_t result = swift_bridgeObjectRelease();
    if (!v19)
    {
LABEL_5:
      if (!v21) {
        goto LABEL_6;
      }
LABEL_10:
      uint64_t result = swift_bridgeObjectRelease();
      if (!v14) {
        return result;
      }
      return (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 8))(v18 + *(int *)(v43 + 40), v44);
    }
  }
  else if (!v19)
  {
    goto LABEL_5;
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (v21) {
    goto LABEL_10;
  }
LABEL_6:
  if (v14) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 8))(v18 + *(int *)(v43 + 40), v44);
  }
  return result;
}

uint64_t outlined init with copy of SingleVoicemailModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SingleVoicemailModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of SingleVoicemailModel(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SingleVoicemailModel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t instantiation function for generic protocol witness table for SingleVoicemailModel(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type SingleVoicemailModel and conformance SingleVoicemailModel(&lazy protocol witness table cache variable for type SingleVoicemailModel and conformance SingleVoicemailModel);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for Decodable in SingleVoicemailModel()
{
  return lazy protocol witness table accessor for type SingleVoicemailModel and conformance SingleVoicemailModel(&lazy protocol witness table cache variable for type SingleVoicemailModel and conformance SingleVoicemailModel);
}

uint64_t base witness table accessor for Encodable in SingleVoicemailModel()
{
  return lazy protocol witness table accessor for type SingleVoicemailModel and conformance SingleVoicemailModel(&lazy protocol witness table cache variable for type SingleVoicemailModel and conformance SingleVoicemailModel);
}

uint64_t lazy protocol witness table accessor for type SingleVoicemailModel and conformance SingleVoicemailModel(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for SingleVoicemailModel();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance SingleVoicemailModel@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SingleVoicemailModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SingleVoicemailModel(void *a1)
{
  return SingleVoicemailModel.encode(to:)(a1);
}

uint64_t sub_6BAE0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SingleVoicemailModel.openVoicemailRSKE.getter();
  *a1 = result;
  return result;
}

uint64_t sub_6BB10@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SingleVoicemailModel.openContactRSKE.getter();
  *a1 = result;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SingleVoicemailModel(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *(void *)a1 = *a2;
    a1 = v18 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v9;
    uint64_t v10 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v10;
    uint64_t v11 = a2[8];
    uint64_t v12 = a2[9];
    *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
    uint64_t v13 = *(int *)(a3 + 40);
    uint64_t v14 = a1 + v13;
    uint64_t v15 = (uint64_t)a2 + v13;
    *(void *)(a1 + 64) = v11;
    *(void *)(a1 + 72) = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16);
    v17(v14, v15, v16);
    v17(a1 + *(int *)(a3 + 44), (uint64_t)a2 + *(int *)(a3 + 44), v16);
  }
  return a1;
}

uint64_t destroy for SingleVoicemailModel(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v8)((void *)(v5 - 8), v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 44);

  return v8(v6, v5);
}

uint64_t initializeWithCopy for SingleVoicemailModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v11 = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v12 = *(int *)(a3 + 40);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 72) = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16);
  v16(v13, v14, v15);
  v16(a1 + *(int *)(a3 + 44), a2 + *(int *)(a3 + 44), v15);
  return a1;
}

uint64_t assignWithCopy for SingleVoicemailModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  v10(a1 + *(int *)(a3 + 44), a2 + *(int *)(a3 + 44), v9);
  return a1;
}

uint64_t initializeWithTake for SingleVoicemailModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  long long v8 = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v9 = *(int *)(a3 + 40);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  *(_OWORD *)(a1 + 64) = v8;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32);
  v13(v10, v11, v12);
  v13(a1 + *(int *)(a3 + 44), a2 + *(int *)(a3 + 44), v12);
  return a1;
}

uint64_t assignWithTake for SingleVoicemailModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v11 = *(int *)(a3 + 40);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40);
  v15(v12, v13, v14);
  v15(a1 + *(int *)(a3 + 44), a2 + *(int *)(a3 + 44), v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for SingleVoicemailModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_6C1C0);
}

uint64_t sub_6C1C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
    uint64_t v9 = a1 + *(int *)(a3 + 40);
    return __swift_getEnumTagSinglePayload(v9, a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for SingleVoicemailModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_6C260);
}

uint64_t sub_6C260(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
    uint64_t v8 = v5 + *(int *)(a4 + 40);
    return __swift_storeEnumTagSinglePayload(v8, a2, a2, v7);
  }
  return result;
}

void type metadata completion function for SingleVoicemailModel()
{
  type metadata accessor for CodableAceObject<SAIntentGroupRunSiriKitExecutor>();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t getEnumTagSinglePayload for SingleVoicemailModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF9)
  {
    if (a2 + 7 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 7) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 8;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v5 = v6 - 8;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for SingleVoicemailModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x6C4E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

void *type metadata accessor for SingleVoicemailModel.CodingKeys()
{
  return &unk_550CB8;
}

uint64_t OUTLINED_FUNCTION_1_8()
{
  return v0;
}

uint64_t PhoneCallDirectInvocationNLIntent.smsGroups.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PhoneCallDirectInvocationNLIntent.smsGroups.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 80) = a1;
  return result;
}

uint64_t SingleCallRecordModel.isVideoCall.getter()
{
  return *(unsigned __int8 *)(v0 + 88);
}

uint64_t SingleCallRecordModel.isVideoCall.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 88) = result;
  return result;
}

uint64_t SingleCallRecordModel.directInvocation.getter()
{
  return CodableAceObject.wrappedValue.getter();
}

uint64_t type metadata accessor for SingleCallRecordModel()
{
  uint64_t result = type metadata singleton initialization cache for SingleCallRecordModel;
  if (!type metadata singleton initialization cache for SingleCallRecordModel) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t key path setter for SingleCallRecordModel.directInvocation : SingleCallRecordModel(id *a1)
{
  id v1 = *a1;
  return SingleCallRecordModel.directInvocation.setter();
}

uint64_t SingleCallRecordModel.directInvocation.setter()
{
  return CodableAceObject.wrappedValue.setter();
}

uint64_t (*SingleCallRecordModel.directInvocation.modify(void *a1))()
{
  int v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for SingleCallRecordModel();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  v2[4] = CodableAceObject.wrappedValue.modify();
  return SearchCallHistoryBinaryButtonModel.primaryText.modify;
}

uint64_t SingleCallRecordModel.openContactDirectInvocation.getter()
{
  return CodableAceObject.wrappedValue.getter();
}

uint64_t key path setter for SingleCallRecordModel.openContactDirectInvocation : SingleCallRecordModel(id *a1)
{
  id v1 = *a1;
  return SingleCallRecordModel.openContactDirectInvocation.setter();
}

uint64_t SingleCallRecordModel.openContactDirectInvocation.setter()
{
  return CodableAceObject.wrappedValue.setter();
}

uint64_t (*SingleCallRecordModel.openContactDirectInvocation.modify(void *a1))()
{
  int v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for SingleCallRecordModel();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  v2[4] = CodableAceObject.wrappedValue.modify();
  return SearchCallHistoryBinaryButtonModel.primaryText.modify;
}

void SingleCallRecordModel.init(displayName:displayCallDetail:displayDateTime:currentCallType:contactIds:directInvocation:openContactDirectInvocation:isVideoCall:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, void *a11, uint64_t a12, char a13)
{
  *(void *)a9 = 0xD000000000000010;
  *(void *)(a9 + 8) = 0x8000000000491190;
  *(void *)(a9 + 16) = a1;
  *(void *)(a9 + 24) = a2;
  *(void *)(a9 + 32) = a3;
  *(void *)(a9 + 40) = a4;
  *(void *)(a9 + 48) = a5;
  *(void *)(a9 + 56) = a6;
  type metadata accessor for SingleCallRecordModel();
  type metadata accessor for SAIntentGroupRunSiriKitExecutor();
  id v16 = a11;
  CodableAceObject.init(wrappedValue:)();
  *(void *)(a9 + 72) = a8;
  *(void *)(a9 + 80) = a10;
  *(void *)(a9 + 64) = a7;
  CodableAceObject.init(wrappedValue:)();

  *(unsigned char *)(a9 + 88) = a13;
}

uint64_t SingleCallRecordModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65736E6F70736572 && a2 == 0xEE00644977656956;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x4E79616C70736964 && a2 == 0xEB00000000656D61;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000011 && a2 == 0x8000000000490A40 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      BOOL v7 = a1 == 0x4479616C70736964 && a2 == 0xEF656D6954657461;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        BOOL v8 = a1 == 0x43746E6572727563 && a2 == 0xEF657079546C6C61;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else
        {
          BOOL v9 = a1 == 0x49746361746E6F63 && a2 == 0xEA00000000007364;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 5;
          }
          else
          {
            BOOL v10 = a1 == 0x436F656469567369 && a2 == 0xEB000000006C6C61;
            if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 6;
            }
            else if (a1 == 0xD000000000000010 && a2 == 0x80000000004915E0 {
                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            }
            {
              swift_bridgeObjectRelease();
              return 7;
            }
            else if (a1 == 0xD00000000000001BLL && a2 == 0x8000000000491600)
            {
              swift_bridgeObjectRelease();
              return 8;
            }
            else
            {
              char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if (v11) {
                return 8;
              }
              else {
                return 9;
              }
            }
          }
        }
      }
    }
  }
}

unint64_t SingleCallRecordModel.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x65736E6F70736572;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x4E79616C70736964;
      break;
    case 2:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0x4479616C70736964;
      break;
    case 4:
      unint64_t result = 0x43746E6572727563;
      break;
    case 5:
      unint64_t result = 0x49746361746E6F63;
      break;
    case 6:
      unint64_t result = 0x436F656469567369;
      break;
    case 7:
      unint64_t result = 0xD000000000000010;
      break;
    case 8:
      unint64_t result = 0xD00000000000001BLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance SingleCallRecordModel.CodingKeys()
{
  return SingleCallRecordModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SingleCallRecordModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = SingleCallRecordModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance SingleCallRecordModel.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = variable initialization expression of PhoneCallDirectInvocationNLIntent.phoneCallNoun();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SingleCallRecordModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SingleCallRecordModel.CodingKeys and conformance SingleCallRecordModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SingleCallRecordModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SingleCallRecordModel.CodingKeys and conformance SingleCallRecordModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SingleCallRecordModel.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SingleCallRecordModel.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_4();
  uint64_t v9 = v8 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SingleCallRecordModel.CodingKeys and conformance SingleCallRecordModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  OUTLINED_FUNCTION_2_8();
  if (!v1)
  {
    OUTLINED_FUNCTION_2_8();
    OUTLINED_FUNCTION_2_8();
    OUTLINED_FUNCTION_2_8();
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    KeyedEncodingContainer.encode(_:forKey:)();
    type metadata accessor for SingleCallRecordModel();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
    lazy protocol witness table accessor for type CodableAceObject<SAIntentGroupRunSiriKitExecutor> and conformance CodableAceObject<A>(&lazy protocol witness table cache variable for type CodableAceObject<SAIntentGroupRunSiriKitExecutor> and conformance CodableAceObject<A>);
    OUTLINED_FUNCTION_8_9();
    OUTLINED_FUNCTION_8_9();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
}

unint64_t lazy protocol witness table accessor for type SingleCallRecordModel.CodingKeys and conformance SingleCallRecordModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SingleCallRecordModel.CodingKeys and conformance SingleCallRecordModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SingleCallRecordModel.CodingKeys and conformance SingleCallRecordModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SingleCallRecordModel.CodingKeys and conformance SingleCallRecordModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SingleCallRecordModel.CodingKeys and conformance SingleCallRecordModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SingleCallRecordModel.CodingKeys and conformance SingleCallRecordModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SingleCallRecordModel.CodingKeys and conformance SingleCallRecordModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SingleCallRecordModel.CodingKeys and conformance SingleCallRecordModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SingleCallRecordModel.CodingKeys and conformance SingleCallRecordModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SingleCallRecordModel.CodingKeys and conformance SingleCallRecordModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SingleCallRecordModel.CodingKeys and conformance SingleCallRecordModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SingleCallRecordModel.CodingKeys and conformance SingleCallRecordModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SingleCallRecordModel.CodingKeys and conformance SingleCallRecordModel.CodingKeys);
  }
  return result;
}

uint64_t SingleCallRecordModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v34 = a2;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v37 = v3;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v32 - v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SingleCallRecordModel.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v35 = v11;
  uint64_t v36 = v10;
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_4();
  int v14 = v13 - v12;
  uint64_t v38 = type metadata accessor for SingleCallRecordModel();
  __chkstk_darwin(v38);
  OUTLINED_FUNCTION_4();
  uint64_t v17 = v16 - v15;
  *(void *)uint64_t v17 = 0xD000000000000010;
  *(void *)(v17 + 8) = 0x8000000000491190;
  *(void *)(v17 + 64) = 0;
  *(void *)(v17 + 72) = 0;
  uint64_t v18 = a1[4];
  uint64_t v19 = (uint64_t)a1;
  unsigned int v20 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SingleCallRecordModel.CodingKeys and conformance SingleCallRecordModel.CodingKeys();
  unsigned int v21 = v40;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v21)
  {
    uint64_t v40 = (void (*)(void, void, void))v9;
    uint64_t v33 = v7;
    LOBYTE(v42) = 0;
    *(void *)uint64_t v17 = KeyedDecodingContainer.decode(_:forKey:)();
    *(void *)(v17 + 8) = v22;
    *(void *)(v17 + 16) = OUTLINED_FUNCTION_4_11(1);
    *(void *)(v17 + 24) = v23;
    *(void *)(v17 + 32) = OUTLINED_FUNCTION_4_11(2);
    *(void *)(v17 + 40) = v24;
    *(void *)(v17 + 48) = OUTLINED_FUNCTION_4_11(3);
    *(void *)(v17 + 56) = v25;
    OUTLINED_FUNCTION_10_4(4);
    *(void *)(v17 + 64) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *(void *)(v17 + 72) = v26;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    char v41 = 5;
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(void *)(v17 + 80) = v42;
    OUTLINED_FUNCTION_10_4(6);
    *(unsigned char *)(v17 + 88) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    LOBYTE(v42) = 7;
    lazy protocol witness table accessor for type CodableAceObject<SAIntentGroupRunSiriKitExecutor> and conformance CodableAceObject<A>(&lazy protocol witness table cache variable for type CodableAceObject<SAIntentGroupRunSiriKitExecutor> and conformance CodableAceObject<A>);
    uint64_t v27 = v40;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v28 = v17 + *(int *)(v38 + 44);
    uint64_t v40 = *(void (**)(void, void, void))(v37 + 32);
    v40(v28, v27, v39);
    LOBYTE(v42) = 8;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v29 = OUTLINED_FUNCTION_3_12();
    v30(v29);
    v40(v17 + *(int *)(v38 + 48), v33, v39);
    outlined init with copy of SingleCallRecordModel(v17, v34);
    __swift_destroy_boxed_opaque_existential_1(v19);
    return outlined destroy of SingleCallRecordModel(v17);
  }
  OUTLINED_FUNCTION_4_1();
  __swift_destroy_boxed_opaque_existential_1(v19);
  swift_bridgeObjectRelease();
  if (v18)
  {
    swift_bridgeObjectRelease();
    if (!v14) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14) {
LABEL_6:
  }
    swift_bridgeObjectRelease();
LABEL_7:
  uint64_t result = swift_bridgeObjectRelease();
  if (v20) {
    uint64_t result = swift_bridgeObjectRelease();
  }
  if (v14) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 8))(v17 + *(int *)(v38 + 44), v39);
  }
  return result;
}

uint64_t outlined init with copy of SingleCallRecordModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SingleCallRecordModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of SingleCallRecordModel(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SingleCallRecordModel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t instantiation function for generic protocol witness table for SingleCallRecordModel(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type SingleCallRecordModel and conformance SingleCallRecordModel(&lazy protocol witness table cache variable for type SingleCallRecordModel and conformance SingleCallRecordModel);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for Decodable in SingleCallRecordModel()
{
  return lazy protocol witness table accessor for type SingleCallRecordModel and conformance SingleCallRecordModel(&lazy protocol witness table cache variable for type SingleCallRecordModel and conformance SingleCallRecordModel);
}

uint64_t base witness table accessor for Encodable in SingleCallRecordModel()
{
  return lazy protocol witness table accessor for type SingleCallRecordModel and conformance SingleCallRecordModel(&lazy protocol witness table cache variable for type SingleCallRecordModel and conformance SingleCallRecordModel);
}

uint64_t lazy protocol witness table accessor for type SingleCallRecordModel and conformance SingleCallRecordModel(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for SingleCallRecordModel();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance SingleCallRecordModel@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SingleCallRecordModel.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SingleCallRecordModel(void *a1)
{
  return SingleCallRecordModel.encode(to:)(a1);
}

uint64_t sub_6DA18@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SingleCallRecordModel.directInvocation.getter();
  *a1 = result;
  return result;
}

uint64_t sub_6DA48@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SingleCallRecordModel.openContactDirectInvocation.getter();
  *a1 = result;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SingleCallRecordModel(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *(void *)a1 = *a2;
    a1 = v18 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v9;
    uint64_t v10 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v10;
    uint64_t v11 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v11;
    uint64_t v12 = a2[10];
    *(unsigned char *)(a1 + 88) = *((unsigned char *)a2 + 88);
    uint64_t v13 = *(int *)(a3 + 44);
    uint64_t v14 = a1 + v13;
    uint64_t v15 = (uint64_t)a2 + v13;
    *(void *)(a1 + 80) = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16);
    v17(v14, v15, v16);
    v17(a1 + *(int *)(a3 + 48), (uint64_t)a2 + *(int *)(a3 + 48), v16);
  }
  return a1;
}

uint64_t destroy for SingleCallRecordModel(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 44);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v8)((void *)(v5 - 8), v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 48);

  return v8(v6, v5);
}

uint64_t initializeWithCopy for SingleCallRecordModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  uint64_t v11 = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  uint64_t v12 = *(int *)(a3 + 44);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(void *)(a1 + 80) = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16);
  v16(v13, v14, v15);
  v16(a1 + *(int *)(a3 + 48), a2 + *(int *)(a3 + 48), v15);
  return a1;
}

uint64_t assignWithCopy for SingleCallRecordModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  uint64_t v6 = *(int *)(a3 + 44);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  v10(a1 + *(int *)(a3 + 48), a2 + *(int *)(a3 + 48), v9);
  return a1;
}

uint64_t initializeWithTake for SingleCallRecordModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  long long v8 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  uint64_t v9 = *(int *)(a3 + 44);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  *(_OWORD *)(a1 + 64) = v8;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32);
  v13(v10, v11, v12);
  v13(a1 + *(int *)(a3 + 48), a2 + *(int *)(a3 + 48), v12);
  return a1;
}

uint64_t assignWithTake for SingleCallRecordModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  uint64_t v11 = *(int *)(a3 + 44);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40);
  v15(v12, v13, v14);
  v15(a1 + *(int *)(a3 + 48), a2 + *(int *)(a3 + 48), v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for SingleCallRecordModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_6E150);
}

uint64_t sub_6E150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
    uint64_t v9 = a1 + *(int *)(a3 + 44);
    return __swift_getEnumTagSinglePayload(v9, a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for SingleCallRecordModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_6E1F0);
}

uint64_t sub_6E1F0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupRunSiriKitExecutor>);
    uint64_t v8 = v5 + *(int *)(a4 + 44);
    return __swift_storeEnumTagSinglePayload(v8, a2, a2, v7);
  }
  return result;
}

void type metadata completion function for SingleCallRecordModel()
{
  type metadata accessor for CodableAceObject<SAIntentGroupRunSiriKitExecutor>();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unsigned char *storeEnumTagSinglePayload for SingleCallRecordModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x6E400);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

void *type metadata accessor for SingleCallRecordModel.CodingKeys()
{
  return &unk_550D80;
}

uint64_t OUTLINED_FUNCTION_1_9()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_2_8()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_3_12()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_4_11@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 72) = a1;
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_10_4@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 72) = a1;
  return v1 - 72;
}

unint64_t specialized OneTimeHintGenerator<>.chooseHintIdentifier(history:)(uint64_t a1)
{
  uint64_t v2 = (unsigned char *)v1;
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 24), *(void *)(v1 + 48));
  uint64_t v4 = OUTLINED_FUNCTION_5_5();
  v5(v4);
  __swift_project_boxed_opaque_existential_1(v15, v16[0]);
  char v6 = dispatch thunk of DeviceState.isHomePod.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  outlined init with copy of HangUpTipGenerator((uint64_t)v2, (uint64_t)v15);
  if ((v6 & 1) == 0)
  {
    outlined destroy of HangUpTipGenerator((uint64_t)v15);
    return 0;
  }
  __swift_project_boxed_opaque_existential_1(v16, v16[3]);
  uint64_t v7 = OUTLINED_FUNCTION_5_5();
  v8(v7);
  int v9 = OUTLINED_FUNCTION_1_10(v14);
  uint64_t v10 = specialized Dictionary.subscript.getter(v9, a1);
  char v12 = v11;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  outlined destroy of HangUpTipGenerator((uint64_t)v15);
  if ((v12 & 1) == 0 && v10) {
    return 0;
  }
  unint64_t result = 0xD000000000000011;
  switch(*v2)
  {
    case 1:
      unint64_t result = OUTLINED_FUNCTION_7_1();
      break;
    case 2:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 3:
      unint64_t result = 0xD00000000000002DLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t OneTimeHintGenerator<>.chooseHintIdentifier(history:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a2 - 8);
  __chkstk_darwin(a1);
  uint64_t v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v9 + 8);
  char v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 48))(v11, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3, a2);
  if ((v12 & 1) == 0)
  {
    uint64_t v23 = OUTLINED_FUNCTION_9_9();
    v24(v23);
    return 0;
  }
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v10 + 40))(v26, a2, v10);
  uint64_t v13 = v27;
  uint64_t v14 = v28;
  __swift_project_boxed_opaque_existential_1(v26, v27);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v14 + 8))(v25, v13, v14);
  __swift_project_boxed_opaque_existential_1(v25, v25[3]);
  int v15 = DeviceState.idiom.getter();
  uint64_t v16 = specialized Dictionary.subscript.getter(v15, a1);
  char v18 = v17;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  uint64_t v19 = OUTLINED_FUNCTION_9_9();
  v20(v19);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  if ((v18 & 1) == 0 && v16) {
    return 0;
  }
  char v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 24))(a2, v10);
  unint64_t result = 0xD000000000000011;
  switch(v21)
  {
    case 1:
      unint64_t result = OUTLINED_FUNCTION_7_1();
      break;
    case 2:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 3:
      unint64_t result = 0xD00000000000002DLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t specialized OneTimeHintGenerator<>.makeUpdatedHintHistory(dialogIdentifier:previousHistory:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v7)(void *__return_ptr, uint64_t, uint64_t);
  int v8;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  void v15[4];

  uint64_t v5 = v3[6];
  uint64_t v6 = v3[7];
  __swift_project_boxed_opaque_existential_1(v3 + 3, v5);
  uint64_t v7 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 8);
  swift_bridgeObjectRetain();
  v7(v15, v5, v6);
  __swift_project_boxed_opaque_existential_1(v15, v15[3]);
  uint64_t v8 = OUTLINED_FUNCTION_8_10();
  unint64_t result = specialized Dictionary.subscript.getter(v8, a3);
  if (v10) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = result;
  }
  char v12 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v13 = (int)OUTLINED_FUNCTION_1_10(v15);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v12, v13, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    return a3;
  }
  return result;
}

uint64_t OneTimeHintGenerator<>.makeUpdatedHintHistory(dialogIdentifier:previousHistory:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v8)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t result;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  void v18[4];
  void v19[3];
  uint64_t v20;
  uint64_t v21;

  uint64_t v7 = *(void *)(a5 + 8);
  uint64_t v8 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v7 + 40);
  swift_bridgeObjectRetain();
  v8(v19, a4, v7);
  uint64_t v9 = v20;
  uint64_t v10 = v21;
  __swift_project_boxed_opaque_existential_1(v19, v20);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v10 + 8))(v18, v9, v10);
  __swift_project_boxed_opaque_existential_1(v18, v18[3]);
  uint64_t v11 = OUTLINED_FUNCTION_8_10();
  unint64_t result = specialized Dictionary.subscript.getter(v11, a3);
  if (v13) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = result;
  }
  int v15 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v16 = (int)OUTLINED_FUNCTION_1_10(v18);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v15, v16, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    return a3;
  }
  return result;
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v4 & 1) != 0)) {
    return *(void *)(*(void *)(a2 + 56) + 8 * v3);
  }
  else {
    return 0;
  }
}

{
  char v2;

  if (*(void *)(a2 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a1), (v2 & 1) != 0)) {
    return swift_bridgeObjectRetain();
  }
  else {
    return 0;
  }
}

double specialized Dictionary.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v7 & 1) != 0))
  {
    uint64_t v8 = *(void *)(a3 + 56) + 32 * v6;
    outlined init with copy of Any(v8, (uint64_t)a4);
  }
  else
  {
    double result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

uint64_t specialized Dictionary.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  if (*(void *)(a3 + 16) && (double result = specialized __RawDictionaryStorage.find<A>(_:)(result, a2), (v6 & 1) != 0))
  {
    uint64_t v7 = *(void *)(a3 + 56) + 48 * result;
    uint64_t v8 = *(void *)v7;
    uint64_t v9 = *(void *)(v7 + 8);
    uint64_t v11 = *(void *)(v7 + 16);
    uint64_t v10 = *(void *)(v7 + 24);
    uint64_t v12 = *(unsigned __int8 *)(v7 + 32);
    uint64_t v13 = *(void *)(v7 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    double result = swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v11 = 0;
    uint64_t v10 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
  }
  *a4 = v8;
  a4[1] = v9;
  a4[2] = v11;
  a4[3] = v10;
  a4[4] = v12;
  a4[5] = v13;
  return result;
}

uint64_t specialized Dictionary.subscript.getter(char a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a1), (v2 & 1) != 0)) {
    return swift_bridgeObjectRetain();
  }
  else {
    return 0;
  }
}

void *specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v5 & 1) == 0) {
    return 0;
  }
  char v6 = *(void **)(*(void *)(a3 + 56) + 8 * v4);
  id v7 = v6;
  return v6;
}

uint64_t specialized Dictionary.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v7 & 1) != 0))
  {
    unint64_t v8 = v6;
    uint64_t v9 = *(void *)(a3 + 56);
    uint64_t v10 = type metadata accessor for SignalValue();
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(a4, v9 + *(void *)(*(void *)(v10 - 8) + 72) * v8, v10);
    uint64_t v11 = a4;
    uint64_t v12 = 0;
    uint64_t v13 = v10;
  }
  else
  {
    uint64_t v13 = type metadata accessor for SignalValue();
    uint64_t v11 = a4;
    uint64_t v12 = 1;
  }

  return __swift_storeEnumTagSinglePayload(v11, v12, 1, v13);
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1)
{
  if (*(void *)(a1 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(), (v1 & 1) != 0)) {
    return swift_retain();
  }
  else {
    return 0;
  }
}

unint64_t protocol witness for SiriPhoneHintGenerator.chooseHintIdentifier(history:) in conformance HangUpTipGenerator(uint64_t *a1)
{
  return specialized OneTimeHintGenerator<>.chooseHintIdentifier(history:)(*a1);
}

uint64_t protocol witness for SiriPhoneHintGenerator.makeUpdatedHintHistory(dialogIdentifier:previousHistory:) in conformance HangUpTipGenerator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = specialized OneTimeHintGenerator<>.makeUpdatedHintHistory(dialogIdentifier:previousHistory:)(a1, a2, *a3);
  *a4 = result;
  return result;
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)()
{
  return specialized Dictionary._Variant.setValue(_:forKey:)();
}

{
  _OWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t vars8;

  OUTLINED_FUNCTION_2_9();
  uint64_t v0 = (_OWORD *)OUTLINED_FUNCTION_0_6();
  unint64_t v4 = specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v0, v1, v2, v3);
  OUTLINED_FUNCTION_4_12((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);

  return swift_bridgeObjectRelease();
}

{
  return specialized Dictionary._Variant.setValue(_:forKey:)();
}

{
  void (*v0)(uint64_t);
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t vars8;

  OUTLINED_FUNCTION_6_8();
  char v2 = OUTLINED_FUNCTION_3_13();
  v0(v2);
  void *v1 = v4;

  return swift_bridgeObjectRelease();
}

{
  return specialized Dictionary._Variant.setValue(_:forKey:)();
}

{
  _OWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t vars8;

  OUTLINED_FUNCTION_2_9();
  uint64_t v0 = (_OWORD *)OUTLINED_FUNCTION_0_6();
  unint64_t v4 = specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v0, v1, v2, v3);
  OUTLINED_FUNCTION_4_12(v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);

  return swift_bridgeObjectRelease();
}

{
  return specialized Dictionary._Variant.setValue(_:forKey:)();
}

{
  void (*v0)(uint64_t);
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t vars8;

  OUTLINED_FUNCTION_6_8();
  char v2 = OUTLINED_FUNCTION_3_13();
  v0(v2);
  void *v1 = v4;

  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t vars8;

  OUTLINED_FUNCTION_2_9();
  uint64_t v0 = OUTLINED_FUNCTION_0_6();
  unint64_t v4 = specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v0, v1, v2, v3);
  OUTLINED_FUNCTION_4_12(v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);

  return swift_bridgeObjectRelease();
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v14 = *v1;
  uint64_t *v1 = 0x8000000000000000;
  unint64_t v4 = specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, isUniquelyReferenced_nonNull_native);
  OUTLINED_FUNCTION_4_12(v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);

  return swift_bridgeObjectRelease();
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v10 & 1) == 0;
  Swift::Int v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v14 = v9;
  char v15 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<Int, OneTimeHintHistory>);
  unint64_t result = _NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13);
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_11:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = result;
LABEL_5:
  uint64_t v18 = *v4;
  if (v15)
  {
    *(void *)(*(void *)(v18 + 56) + 8 * v14) = a1;
  }
  else
  {
    return specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a1, v18);
  }
  return result;
}

uint64_t outlined init with copy of HangUpTipGenerator(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of HangUpTipGenerator(uint64_t a1)
{
  return a1;
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v16 = v11;
  char v17 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_13:
    unint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v18;
LABEL_5:
  uint64_t v20 = *v5;
  if (v17)
  {
    char v21 = (_OWORD *)(*(void *)(v20 + 56) + 32 * v16);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    return outlined init with take of Any(a1, v21);
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v16, a2, a3, (uint64_t)a1, v20);
    return (_OWORD *)swift_bridgeObjectRetain();
  }
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v10 & 1) == 0;
  Swift::Int v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v14 = v9;
  char v15 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<[ContactQuery], [ResolvedSiriKitContact]>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13)) {
    goto LABEL_5;
  }
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_11:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ContactQuery]);
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v16;
LABEL_5:
  uint64_t v18 = *v4;
  if (v15)
  {
    uint64_t v19 = *(void *)(v18 + 56);
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v19 + 8 * v14) = a1;
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a1, v18);
    return swift_bridgeObjectRetain();
  }
  return result;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for ContactResolverConfigHashable();
  __chkstk_darwin(v8);
  char v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v3;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v13 & 1) == 0;
  Swift::Int v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v17 = v12;
  char v18 = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<ContactResolverConfigHashable, [ContactQuery]>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v16)) {
    goto LABEL_5;
  }
  unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v18 & 1) != (v20 & 1))
  {
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v17 = v19;
LABEL_5:
  uint64_t v21 = *v4;
  if (v18)
  {
    uint64_t v22 = *(void *)(v21 + 56);
    swift_bridgeObjectRelease();
    *(void *)(v22 + 8 * v17) = a1;
  }
  else
  {
    outlined init with copy of ContactResolverConfigHashable(a2, (uint64_t)v10);
    specialized _NativeDictionary._insert(at:key:value:)(v17, (uint64_t)v10, a1, v21);
  }
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  BOOL v16;
  Swift::Int v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  unint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = *v3;
  char v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  BOOL v15 = *(void *)(v12 + 16);
  Swift::Int v16 = (v14 & 1) == 0;
  unint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_10;
  }
  char v18 = v13;
  unint64_t v19 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<UUID, CallStateOneTimeTask>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v17)) {
    goto LABEL_5;
  }
  char v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  char v18 = v20;
LABEL_5:
  uint64_t v22 = *v4;
  if (v19)
  {
    uint64_t v23 = *(void *)(v22 + 56);
    swift_release();
    *(void *)(v23 + 8 * v18) = a1;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
    specialized _NativeDictionary._insert(at:key:value:)(v18, (uint64_t)v11, a1, v22);
  }
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v16 = v11;
  char v17 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, AnnotatedApp>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_11:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v18;
LABEL_5:
  uint64_t v20 = *v5;
  if (v17)
  {
    uint64_t v21 = (_OWORD *)(*(void *)(v20 + 56) + 48 * v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
    long long v23 = a1[1];
    *uint64_t v21 = *a1;
    v21[1] = v23;
    v21[2] = a1[2];
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v16, a2, a3, (uint64_t)a1, v20);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v16 = v11;
  char v17 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Task<[App], Never>>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_11:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v18;
LABEL_5:
  uint64_t v20 = *v5;
  if (v17)
  {
    uint64_t v21 = *(void *)(v20 + 56);
    uint64_t result = swift_release();
    *(void *)(v21 + 8 * v16) = a1;
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)();
  uint64_t v9 = *(void *)(v6 + 16);
  BOOL v10 = (v8 & 1) == 0;
  Swift::Int v11 = v9 + v10;
  if (__OFADD__(v9, v10))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v12 = v7;
  char v13 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<TemplatingOperationType, TemplatingOperation>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a2 & 1, v11)) {
    goto LABEL_5;
  }
  uint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)();
  if ((v13 & 1) != (v15 & 1))
  {
LABEL_11:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v14;
LABEL_5:
  uint64_t v16 = *v3;
  if (v13)
  {
    uint64_t v17 = *(void *)(v16 + 56);
    unint64_t result = swift_release();
    *(void *)(v17 + 8 * v12) = a1;
  }
  else
  {
    return specialized _NativeDictionary._insert(at:key:value:)(v12, a1, v16);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_6()
{
  *uint64_t v0 = 0x8000000000000000;
  return v1;
}

uint64_t OUTLINED_FUNCTION_1_10(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return DeviceState.idiom.getter();
}

uint64_t OUTLINED_FUNCTION_2_9()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_3_13()
{
  *uint64_t v0 = 0x8000000000000000;
  return v1;
}

uint64_t OUTLINED_FUNCTION_4_12(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = *v10;
  *BOOL v10 = a10;
  return result;
}

uint64_t OUTLINED_FUNCTION_6_8()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_8_10()
{
  return DeviceState.idiom.getter();
}

uint64_t OUTLINED_FUNCTION_9_9()
{
  return v0;
}

uint64_t AppQuery.appId.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
    if (*(void *)(a3 + 16))
    {
      a1 = *(void *)(a3 + 32);
      swift_bridgeObjectRetain();
    }
    else
    {
      a1 = 0;
    }
  }
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t AppQuery.source.getter(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return 2;
  }
  else {
    return 1;
  }
}

uint64_t AppQuery.defaultAppId.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  uint64_t v3 = *(void *)(a3 + 32);
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t AppQuery.isFirstParty.getter(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 1;
  }
  type metadata accessor for App();
  swift_bridgeObjectRetain();
  App.__allocating_init(appIdentifier:)();
  Swift::Bool v2 = App.isFirstParty()();
  swift_release();
  return v2;
}

BOOL AppQuery.isThirdParty.getter(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    type metadata accessor for App();
    swift_bridgeObjectRetain();
    App.__allocating_init(appIdentifier:)();
    Swift::Bool v2 = App.isFirstParty()();
    swift_release();
    return !v2;
  }
  else
  {
    return 0;
  }
}

unint64_t AppQuery.description.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  v7._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  uint64_t v8 = AppQuery.defaultAppId.getter(a1, a2, a3);
  uint64_t v10 = v9;
  if (v9)
  {
    uint64_t v11 = v8;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    v12._uint64_t countAndFlagsBits = v11;
    v12._object = (void *)v10;
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    uint64_t v10 = 0x6C7561666564202CLL;
    uint64_t v6 = (void *)0xEF3D644970704174;
  }
  swift_bridgeObjectRetain();
  v13._uint64_t countAndFlagsBits = v10;
  v13._object = v6;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a2) {
    char v14 = 2;
  }
  else {
    char v14 = 1;
  }
  v15._uint64_t countAndFlagsBits = AppResolutionSource.description.getter(v14);
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._uint64_t countAndFlagsBits = 41;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  swift_bridgeObjectRetain();
  v17._uint64_t countAndFlagsBits = 0x656372756F73202CLL;
  v17._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD000000000000018;
}

uint64_t static AppQuery.Override.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AppQuery.Override(uint64_t *a1, uint64_t *a2)
{
  return static AppQuery.Override.__derived_enum_equals(_:_:)(*a1, a1[1], *a2, a2[1]);
}

uint64_t static AppQuery.defaultFirstParty()()
{
  return 0;
}

uint64_t static AppQuery.userRequested(applicationId:)(uint64_t a1)
{
  return a1;
}

uint64_t AppQuery.Builder.__allocating_init(requestedAppId:overrides:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  AppQuery.Builder.init(requestedAppId:overrides:)(a1, a2, a3);
  return v6;
}

void *AppQuery.Builder.init(requestedAppId:overrides:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = _swiftEmptyArrayStorage;
  v3[2] = a1;
  v3[3] = a2;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v3[4] = a3;
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t AppQuery.Builder.__allocating_init(intent:)(void *a1)
{
  uint64_t v2 = v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  OUTLINED_FUNCTION_29_4();
  uint64_t v4 = PhoneCallNLIntent.applicationId.getter();
  uint64_t v6 = v5;
  outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v10);
  if (!v6)
  {
    __swift_project_boxed_opaque_existential_1(v10, v10[3]);
    OUTLINED_FUNCTION_29_4();
    uint64_t v4 = PhoneCallNLIntent.appName.getter();
    uint64_t v6 = v7;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void *))(v2 + 144))(v4, v6, _swiftEmptyArrayStorage);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v8;
}

uint64_t AppQuery.Builder.__allocating_init(app:)()
{
  uint64_t v1 = App.appIdentifier.getter();
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(v0 + 144))(v1);
  swift_release();
  return v2;
}

uint64_t AppQuery.Builder.withOverrides(_:)()
{
  swift_beginAccess();
  uint64_t v0 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v0);
  swift_endAccess();
  return swift_retain();
}

void specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v4 + v2 > *(void *)(v3 + 24) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v3 = v6;
  }
  if (!*(void *)(a1 + 16))
  {
    if (!v2) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  specialized UnsafeMutablePointer.initialize(from:count:)();
  if (!v2)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t *v1 = v3;
    return;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  BOOL v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

{
  specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(unint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.initialize(from:count:), (uint64_t (*)(void))&type metadata accessor for DisplayHint);
}

{
  specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(unint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.initialize(from:count:), (uint64_t (*)(void))&type metadata accessor for SemanticValue);
}

{
  specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(unint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.initialize(from:count:), (uint64_t (*)(void))&type metadata accessor for UsoIdentifier);
}

{
  specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(unint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.initialize(from:count:), (uint64_t (*)(void))&type metadata accessor for ContactQuery);
}

{
  specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(unint64_t, uint64_t, unint64_t))specialized UnsafeMutablePointer.initialize(from:count:), (uint64_t (*)(void))&type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier);
}

void specialized Array.append<A>(contentsOf:)()
{
  OUTLINED_FUNCTION_28();
  OUTLINED_FUNCTION_11_10();
  if (v5)
  {
    OUTLINED_FUNCTION_5_6();
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_12_4();
  }
  else
  {
    OUTLINED_FUNCTION_20_5();
  }
  OUTLINED_FUNCTION_19_6();
  if (v6)
  {
    OUTLINED_FUNCTION_3_14();
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_10_5();
  }
  else
  {
    OUTLINED_FUNCTION_17_2();
  }
  if (__OFADD__(v3, v1))
  {
    __break(1u);
    goto LABEL_25;
  }
  OUTLINED_FUNCTION_18_5();
  OUTLINED_FUNCTION_14_7();
  if (v7)
  {
    if ((v2 & 0x8000000000000000) == 0 && (v2 & 0x4000000000000000) == 0)
    {
      OUTLINED_FUNCTION_6_9();
      if (v10 ^ v11 | v9) {
        goto LABEL_15;
      }
    }
  }
  if (v2 >> 62) {
    goto LABEL_26;
  }
  OUTLINED_FUNCTION_16_7();
  while (1)
  {
    if (v4 <= v3 + v1) {
      uint64_t v4 = v3 + v1;
    }
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_2_10();
    OUTLINED_FUNCTION_21_2();
    OUTLINED_FUNCTION_13_3();
LABEL_15:
    uint64_t v12 = OUTLINED_FUNCTION_0_7(v8);
    specialized Array._copyContents(initializing:)(v12, v13, v0);
    if (v14 >= v1) {
      break;
    }
LABEL_25:
    __break(1u);
LABEL_26:
    OUTLINED_FUNCTION_4_13();
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_22_2();
  }
  if (v14 >= 1)
  {
    OUTLINED_FUNCTION_1_11();
    if (v11)
    {
      __break(1u);
      return;
    }
    *(void *)(v15 + 16) = v16;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_24();
  specialized Array._endMutation()();
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_28();
  OUTLINED_FUNCTION_11_10();
  if (v4)
  {
    OUTLINED_FUNCTION_5_6();
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_12_4();
  }
  else
  {
    OUTLINED_FUNCTION_20_5();
  }
  OUTLINED_FUNCTION_19_6();
  if (v5)
  {
    OUTLINED_FUNCTION_3_14();
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_10_5();
  }
  else
  {
    OUTLINED_FUNCTION_17_2();
  }
  if (__OFADD__(v2, v0))
  {
    __break(1u);
    goto LABEL_25;
  }
  OUTLINED_FUNCTION_18_5();
  OUTLINED_FUNCTION_14_7();
  if (v6)
  {
    if ((v1 & 0x8000000000000000) == 0 && (v1 & 0x4000000000000000) == 0)
    {
      OUTLINED_FUNCTION_6_9();
      if (v9 ^ v10 | v8) {
        goto LABEL_15;
      }
    }
  }
  if (v1 >> 62) {
    goto LABEL_26;
  }
  OUTLINED_FUNCTION_16_7();
  while (1)
  {
    if (v3 <= v2 + v0) {
      uint64_t v3 = v2 + v0;
    }
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_2_10();
    OUTLINED_FUNCTION_21_2();
    OUTLINED_FUNCTION_13_3();
LABEL_15:
    OUTLINED_FUNCTION_0_7(v7);
    specialized Array._copyContents(initializing:)();
    if (v11 >= v0) {
      break;
    }
LABEL_25:
    __break(1u);
LABEL_26:
    OUTLINED_FUNCTION_4_13();
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_22_2();
  }
  if (v11 >= 1)
  {
    OUTLINED_FUNCTION_1_11();
    if (v10)
    {
      __break(1u);
      return;
    }
    *(void *)(v12 + 16) = v13;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_24();
  specialized Array._endMutation()();
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_28();
  OUTLINED_FUNCTION_11_10();
  if (v4)
  {
    OUTLINED_FUNCTION_5_6();
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_12_4();
  }
  else
  {
    OUTLINED_FUNCTION_20_5();
  }
  OUTLINED_FUNCTION_19_6();
  if (v5)
  {
    OUTLINED_FUNCTION_3_14();
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_10_5();
  }
  else
  {
    OUTLINED_FUNCTION_17_2();
  }
  if (__OFADD__(v2, v0))
  {
    __break(1u);
    goto LABEL_25;
  }
  OUTLINED_FUNCTION_18_5();
  OUTLINED_FUNCTION_14_7();
  if (v6)
  {
    if ((v1 & 0x8000000000000000) == 0 && (v1 & 0x4000000000000000) == 0)
    {
      OUTLINED_FUNCTION_6_9();
      if (v9 ^ v10 | v8) {
        goto LABEL_15;
      }
    }
  }
  if (v1 >> 62) {
    goto LABEL_26;
  }
  OUTLINED_FUNCTION_16_7();
  while (1)
  {
    if (v3 <= v2 + v0) {
      uint64_t v3 = v2 + v0;
    }
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_2_10();
    OUTLINED_FUNCTION_21_2();
    OUTLINED_FUNCTION_13_3();
LABEL_15:
    OUTLINED_FUNCTION_0_7(v7);
    specialized Array._copyContents(initializing:)();
    if (v11 >= v0) {
      break;
    }
LABEL_25:
    __break(1u);
LABEL_26:
    OUTLINED_FUNCTION_4_13();
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_22_2();
  }
  if (v11 >= 1)
  {
    OUTLINED_FUNCTION_1_11();
    if (v10)
    {
      __break(1u);
      return;
    }
    *(void *)(v12 + 16) = v13;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_24();
  specialized Array._endMutation()();
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_28();
  OUTLINED_FUNCTION_11_10();
  if (v4)
  {
    OUTLINED_FUNCTION_5_6();
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_12_4();
  }
  else
  {
    OUTLINED_FUNCTION_20_5();
  }
  OUTLINED_FUNCTION_19_6();
  if (v5)
  {
    OUTLINED_FUNCTION_3_14();
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_10_5();
  }
  else
  {
    OUTLINED_FUNCTION_17_2();
  }
  if (__OFADD__(v2, v0))
  {
    __break(1u);
    goto LABEL_25;
  }
  OUTLINED_FUNCTION_18_5();
  OUTLINED_FUNCTION_14_7();
  if (v6)
  {
    if ((v1 & 0x8000000000000000) == 0 && (v1 & 0x4000000000000000) == 0)
    {
      OUTLINED_FUNCTION_6_9();
      if (v9 ^ v10 | v8) {
        goto LABEL_15;
      }
    }
  }
  if (v1 >> 62) {
    goto LABEL_26;
  }
  OUTLINED_FUNCTION_16_7();
  while (1)
  {
    if (v3 <= v2 + v0) {
      uint64_t v3 = v2 + v0;
    }
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_2_10();
    OUTLINED_FUNCTION_21_2();
    OUTLINED_FUNCTION_13_3();
LABEL_15:
    OUTLINED_FUNCTION_0_7(v7);
    specialized Array._copyContents(initializing:)();
    if (v11 >= v0) {
      break;
    }
LABEL_25:
    __break(1u);
LABEL_26:
    OUTLINED_FUNCTION_4_13();
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_22_2();
  }
  if (v11 >= 1)
  {
    OUTLINED_FUNCTION_1_11();
    if (v10)
    {
      __break(1u);
      return;
    }
    *(void *)(v12 + 16) = v13;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_24();
  specialized Array._endMutation()();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_8_11();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!OUTLINED_FUNCTION_23_2() || (OUTLINED_FUNCTION_31_4(), !(v6 ^ v4 | v5)))
  {
    OUTLINED_FUNCTION_25_6();
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    unint64_t v2 = v7;
  }
  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_7_11();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  OUTLINED_FUNCTION_15_2();
  specialized UnsafeMutablePointer.initialize(from:count:)();
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t *v1 = v2;
    return;
  }
  OUTLINED_FUNCTION_26_3();
  if (!v4)
  {
    *(void *)(v2 + 16) = v8;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_8_11();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!OUTLINED_FUNCTION_23_2() || (OUTLINED_FUNCTION_31_4(), !(v6 ^ v4 | v5)))
  {
    OUTLINED_FUNCTION_25_6();
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    unint64_t v2 = v7;
  }
  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_7_11();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  OUTLINED_FUNCTION_15_2();
  specialized UnsafeMutablePointer.initialize(from:count:)();
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t *v1 = v2;
    return;
  }
  OUTLINED_FUNCTION_26_3();
  if (!v4)
  {
    *(void *)(v2 + 16) = v8;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_28();
  OUTLINED_FUNCTION_11_10();
  if (v4)
  {
    OUTLINED_FUNCTION_5_6();
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_12_4();
  }
  else
  {
    OUTLINED_FUNCTION_20_5();
  }
  OUTLINED_FUNCTION_19_6();
  if (v5)
  {
    OUTLINED_FUNCTION_3_14();
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_10_5();
  }
  else
  {
    OUTLINED_FUNCTION_17_2();
  }
  if (__OFADD__(v2, v0))
  {
    __break(1u);
    goto LABEL_25;
  }
  OUTLINED_FUNCTION_18_5();
  OUTLINED_FUNCTION_14_7();
  if (v6)
  {
    if ((v1 & 0x8000000000000000) == 0 && (v1 & 0x4000000000000000) == 0)
    {
      OUTLINED_FUNCTION_6_9();
      if (v9 ^ v10 | v8) {
        goto LABEL_15;
      }
    }
  }
  if (v1 >> 62) {
    goto LABEL_26;
  }
  OUTLINED_FUNCTION_16_7();
  while (1)
  {
    if (v3 <= v2 + v0) {
      uint64_t v3 = v2 + v0;
    }
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_2_10();
    OUTLINED_FUNCTION_21_2();
    OUTLINED_FUNCTION_13_3();
LABEL_15:
    OUTLINED_FUNCTION_0_7(v7);
    specialized Array._copyContents(initializing:)();
    if (v11 >= v0) {
      break;
    }
LABEL_25:
    __break(1u);
LABEL_26:
    OUTLINED_FUNCTION_4_13();
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_22_2();
  }
  if (v11 >= 1)
  {
    OUTLINED_FUNCTION_1_11();
    if (v10)
    {
      __break(1u);
      return;
    }
    *(void *)(v12 + 16) = v13;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_24();
  specialized Array._endMutation()();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_8_11();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!OUTLINED_FUNCTION_23_2() || (OUTLINED_FUNCTION_31_4(), !(v6 ^ v4 | v5)))
  {
    OUTLINED_FUNCTION_25_6();
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    unint64_t v2 = v7;
  }
  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_7_11();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v8 = OUTLINED_FUNCTION_15_2();
  specialized UnsafeMutablePointer.initialize(from:count:)(v8, v9);
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t *v1 = v2;
    return;
  }
  OUTLINED_FUNCTION_26_3();
  if (!v4)
  {
    *(void *)(v2 + 16) = v10;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_28();
  OUTLINED_FUNCTION_11_10();
  if (v4)
  {
    OUTLINED_FUNCTION_5_6();
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_12_4();
  }
  else
  {
    OUTLINED_FUNCTION_20_5();
  }
  OUTLINED_FUNCTION_19_6();
  if (v5)
  {
    OUTLINED_FUNCTION_3_14();
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_10_5();
  }
  else
  {
    OUTLINED_FUNCTION_17_2();
  }
  if (__OFADD__(v2, v0))
  {
    __break(1u);
    goto LABEL_25;
  }
  OUTLINED_FUNCTION_18_5();
  OUTLINED_FUNCTION_14_7();
  if (v6)
  {
    if ((v1 & 0x8000000000000000) == 0 && (v1 & 0x4000000000000000) == 0)
    {
      OUTLINED_FUNCTION_6_9();
      if (v9 ^ v10 | v8) {
        goto LABEL_15;
      }
    }
  }
  if (v1 >> 62) {
    goto LABEL_26;
  }
  OUTLINED_FUNCTION_16_7();
  while (1)
  {
    if (v3 <= v2 + v0) {
      uint64_t v3 = v2 + v0;
    }
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_2_10();
    OUTLINED_FUNCTION_21_2();
    OUTLINED_FUNCTION_13_3();
LABEL_15:
    OUTLINED_FUNCTION_0_7(v7);
    specialized Array._copyContents(initializing:)();
    if (v11 >= v0) {
      break;
    }
LABEL_25:
    __break(1u);
LABEL_26:
    OUTLINED_FUNCTION_4_13();
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_22_2();
  }
  if (v11 >= 1)
  {
    OUTLINED_FUNCTION_1_11();
    if (v10)
    {
      __break(1u);
      return;
    }
    *(void *)(v12 + 16) = v13;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_24();
  specialized Array._endMutation()();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_8_11();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!OUTLINED_FUNCTION_23_2() || (OUTLINED_FUNCTION_31_4(), !(v6 ^ v4 | v5)))
  {
    OUTLINED_FUNCTION_25_6();
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7, v8, v9, v10);
    unint64_t v2 = v11;
  }
  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_7_11();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v12 = OUTLINED_FUNCTION_15_2();
  specialized UnsafeMutablePointer.initialize(from:count:)(v12, v13);
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t *v1 = v2;
    return;
  }
  OUTLINED_FUNCTION_26_3();
  if (!v4)
  {
    *(void *)(v2 + 16) = v14;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_28();
  OUTLINED_FUNCTION_11_10();
  if (v4)
  {
    OUTLINED_FUNCTION_5_6();
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_12_4();
  }
  else
  {
    OUTLINED_FUNCTION_20_5();
  }
  OUTLINED_FUNCTION_19_6();
  if (v5)
  {
    OUTLINED_FUNCTION_3_14();
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_10_5();
  }
  else
  {
    OUTLINED_FUNCTION_17_2();
  }
  if (__OFADD__(v2, v0))
  {
    __break(1u);
    goto LABEL_25;
  }
  OUTLINED_FUNCTION_18_5();
  OUTLINED_FUNCTION_14_7();
  if (v6)
  {
    if ((v1 & 0x8000000000000000) == 0 && (v1 & 0x4000000000000000) == 0)
    {
      OUTLINED_FUNCTION_6_9();
      if (v9 ^ v10 | v8) {
        goto LABEL_15;
      }
    }
  }
  if (v1 >> 62) {
    goto LABEL_26;
  }
  OUTLINED_FUNCTION_16_7();
  while (1)
  {
    if (v3 <= v2 + v0) {
      uint64_t v3 = v2 + v0;
    }
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_2_10();
    OUTLINED_FUNCTION_21_2();
    OUTLINED_FUNCTION_13_3();
LABEL_15:
    OUTLINED_FUNCTION_0_7(v7);
    specialized Array._copyContents(initializing:)();
    if (v11 >= v0) {
      break;
    }
LABEL_25:
    __break(1u);
LABEL_26:
    OUTLINED_FUNCTION_4_13();
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_22_2();
  }
  if (v11 >= 1)
  {
    OUTLINED_FUNCTION_1_11();
    if (v10)
    {
      __break(1u);
      return;
    }
    *(void *)(v12 + 16) = v13;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_24();
  specialized Array._endMutation()();
}

void specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
}

{
  specialized Array.append<A>(contentsOf:)(a1);
}

{
  specialized Array.append<A>(contentsOf:)(a1);
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t vars8;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  }
  if ((unint64_t)*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((char *)&dword_10 + (*v1 & 0xFFFFFFFFFFFFFF8));
  }
  if (__OFADD__(v3, v2))
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  uint64_t *v1 = v4;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
    {
      uint64_t v6 = v4 & 0xFFFFFFFFFFFFFF8;
      if (v3 + v2 <= *(void *)((char *)&dword_18 + (v4 & 0xFFFFFFFFFFFFFF8)) >> 1) {
        goto LABEL_12;
      }
    }
  }
  uint64_t v12 = v2;
  if (v4 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    int v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    uint64_t *v1 = v7;
    uint64_t v6 = v7 & 0xFFFFFFFFFFFFFF8;
    unint64_t v2 = v12;
LABEL_12:
    OUTLINED_FUNCTION_0_7(v6);
    specialized Array._copyContents(initializing:)();
    if (v8 >= v2) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v8 >= 1)
  {
    OUTLINED_FUNCTION_1_11();
    if (v11)
    {
      __break(1u);
      return;
    }
    *(void *)(v9 + 16) = v10;
  }
  swift_bridgeObjectRelease();

  specialized Array._endMutation()();
}

void specialized Array.append<A>(contentsOf:)(uint64_t a1, uint64_t (*a2)(void), void (*a3)(unint64_t, uint64_t, unint64_t), uint64_t (*a4)(void))
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *v5;
  uint64_t v8 = *(void *)(*v5 + 16);
  if (__OFADD__(v8, v6))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!OUTLINED_FUNCTION_23_2() || v8 + v6 > *(void *)(v7 + 24) >> 1)
  {
    OUTLINED_FUNCTION_25_6();
    uint64_t v7 = a2();
  }
  if (!*(void *)(v4 + 16))
  {
    if (!v6) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  uint64_t v12 = *(void *)(v7 + 16);
  uint64_t v13 = (*(void *)(v7 + 24) >> 1) - v12;
  uint64_t v14 = *(void *)(a4(0) - 8);
  if (v13 < v6)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v15 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  a3(v4 + v15, v6, v7 + v15 + *(void *)(v14 + 72) * v12);
  if (!v6)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    *uint64_t v5 = v7;
    return;
  }
  OUTLINED_FUNCTION_26_3();
  if (!v17)
  {
    *(void *)(v7 + 16) = v16;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

PhoneCallFlowDelegatePlugin::AppQuery __swiftcall AppQuery.Builder.build()()
{
  uint64_t v1 = v0[2];
  unint64_t v2 = (void *)v0[3];
  swift_beginAccess();
  uint64_t v3 = (void *)v0[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v4 = v1;
  uint64_t v5 = v2;
  uint64_t v6 = v3;
  result.overrides._Swift::UInt rawValue = v6;
  result.requestedAppId.value._object = v5;
  result.requestedAppId.value._uint64_t countAndFlagsBits = v4;
  return result;
}

uint64_t AppQuery.Builder.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AppQuery.Builder.__deallocating_deinit()
{
  AppQuery.Builder.deinit();

  return swift_deallocClassInstance();
}

uint64_t static AppQuery.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  if (a2)
  {
    if (a5)
    {
      BOOL v8 = a1 == a4 && a2 == a5;
      if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_8;
      }
    }
    return 0;
  }
  if (a5) {
    return 0;
  }
LABEL_8:

  return specialized static Array<A>.== infix(_:_:)(a3, a6);
}

uint64_t specialized static Array<A>.== infix(_:_:)(void *a1, void *a2)
{
  unint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t result = a1[4];
  if (result != a2[4] || a1[5] != a2[5])
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = 0;
    if ((v7 & 1) == 0) {
      return result;
    }
  }
  if (v2 == 1) {
    return 1;
  }
  BOOL v8 = a2 + 7;
  char v9 = a1 + 7;
  unint64_t v10 = 1;
  while (v10 < v2)
  {
    uint64_t result = *(v9 - 1);
    if (result != *(v8 - 1) || *v9 != *v8)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0) {
        return 0;
      }
    }
    ++v10;
    v8 += 2;
    v9 += 2;
    if (v2 == v10) {
      return 1;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ContactQuery();
  uint64_t v5 = __chkstk_darwin(v4);
  __chkstk_darwin(v5);
  char v9 = (char *)&v27 - v8;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10 == *(void *)(a2 + 16))
  {
    if (!v10 || a1 == a2)
    {
      char v22 = 1;
    }
    else
    {
      unint64_t v11 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
      uint64_t v12 = v6 + 16;
      uint64_t v30 = v7;
      uint64_t v31 = v13;
      uint64_t v14 = *(void *)(v12 + 56);
      uint64_t v32 = v12;
      uint64_t v28 = v14;
      uint64_t v29 = (void (**)(char *, uint64_t))(v12 - 8);
      uint64_t v15 = v10 - 1;
      uint64_t v16 = v7;
      do
      {
        uint64_t v17 = a1;
        unint64_t v18 = v9;
        char v19 = v9;
        uint64_t v20 = v31;
        v31(v18, a1 + v11, v4);
        uint64_t v21 = a2;
        v20(v16, a2 + v11, v4);
        char v9 = v19;
        lazy protocol witness table accessor for type ContactQuery and conformance ContactQuery();
        char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
        long long v23 = *v29;
        (*v29)(v16, v4);
        v23(v19, v4);
        BOOL v25 = v15-- != 0;
        if ((v22 & 1) == 0) {
          break;
        }
        v11 += v28;
        a2 = v21;
        a1 = v17;
      }
      while (v25);
    }
  }
  else
  {
    char v22 = 0;
  }
  return v22 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AppQuery(uint64_t a1, uint64_t a2)
{
  return static AppQuery.__derived_struct_equals(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(void **)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(void **)(a2 + 16));
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance AppQuery()
{
  return AppQuery.description.getter(*v0, v0[1], v0[2]);
}

uint64_t destroy for AppQuery()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for AppQuery(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AppQuery(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AppQuery(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AppQuery()
{
  return &type metadata for AppQuery;
}

void *initializeBufferWithCopyOfBuffer for AppQuery.Override(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for AppQuery.Override()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for AppQuery.Override(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for AppQuery.Override(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AppQuery.Override(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppQuery.Override(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppQuery.Override()
{
  return &type metadata for AppQuery.Override;
}

uint64_t type metadata accessor for AppQuery.Builder()
{
  return self;
}

uint64_t specialized Array._copyContents(initializing:)(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    __n128 result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8));
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      __n128 result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          lazy protocol witness table accessor for type [SiriKitDisambiguationItem] and conformance [A](&lazy protocol witness table cache variable for type [SASTTemplateItem] and conformance [A], &demangling cache variable for type metadata for [SASTTemplateItem]);
          swift_bridgeObjectRetain();
          for (uint64_t i = 0; i != v7; ++i)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SASTTemplateItem]);
            uint64_t v10 = specialized protocol witness for Collection.subscript.read in conformance [A]();
            uint64_t v12 = *v11;
            swift_unknownObjectRetain();
            ((void (*)(uint64_t *, void))v10)(&v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8)) <= a2)
      {
        specialized UnsafeMutablePointer.initialize(from:count:)((a3 & 0xFFFFFFFFFFFFFF8) + 32, *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8)));
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

void specialized Array._copyContents(initializing:)()
{
  OUTLINED_FUNCTION_9_10();
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v9) {
      return;
    }
  }
  else
  {
    uint64_t v9 = *(void *)(v8 + 16);
    if (!v9) {
      return;
    }
  }
  if (!v1)
  {
LABEL_18:
    __break(1u);
    return;
  }
  if (!v4)
  {
    if (*(void *)((char *)&dword_10 + (v0 & 0xFFFFFFFFFFFFFF8)) <= v6)
    {
      v7((v0 & 0xFFFFFFFFFFFFFF8) + 32, *(void *)((char *)&dword_10 + (v0 & 0xFFFFFFFFFFFFFF8)), v1);
      return;
    }
    __break(1u);
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v10 > v6)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v9 < 1)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v33 = v10;
  lazy protocol witness table accessor for type [SiriKitDisambiguationItem] and conformance [A](v5, v3);
  swift_bridgeObjectRetain();
  do
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(v3);
    char v19 = OUTLINED_FUNCTION_27_2(v11, v12, v13, v14, v15, v16, v17, v18, v31, v33, v35);
    uint64_t v20 = (void (*)(char *))v2(v19);
    uint64_t v21 = swift_retain();
    uint64_t v29 = OUTLINED_FUNCTION_32_4(v21, v22, v23, v24, v25, v26, v27, v28, v32, v34, v36);
    v20(v29);
    OUTLINED_FUNCTION_30_3();
  }
  while (!v30);
  swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(char *);
  uint64_t *v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  void (*v7)(uint64_t, void, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *);
  id *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;

  OUTLINED_FUNCTION_9_10();
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v9) {
      return;
    }
  }
  else
  {
    uint64_t v9 = *(void *)(v8 + 16);
    if (!v9) {
      return;
    }
  }
  if (!v1)
  {
LABEL_18:
    __break(1u);
    return;
  }
  if (!v4)
  {
    if (*(void *)((char *)&dword_10 + (v0 & 0xFFFFFFFFFFFFFF8)) <= v6)
    {
      v7((v0 & 0xFFFFFFFFFFFFFF8) + 32, *(void *)((char *)&dword_10 + (v0 & 0xFFFFFFFFFFFFFF8)), v1);
      return;
    }
    __break(1u);
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v10 > v6)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v9 < 1)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v34 = v10;
  lazy protocol witness table accessor for type [SiriKitDisambiguationItem] and conformance [A](v5, v3);
  swift_bridgeObjectRetain();
  do
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(v3);
    char v19 = OUTLINED_FUNCTION_27_2(v11, v12, v13, v14, v15, v16, v17, v18, v32, v34, v36);
    uint64_t v20 = (void (*)(char *))v2(v19);
    uint64_t v22 = *v21;
    char v30 = OUTLINED_FUNCTION_32_4((uint64_t)v22, v23, v24, v25, v26, v27, v28, v29, v33, v35, v37);
    v20(v30);
    OUTLINED_FUNCTION_30_3();
  }
  while (!v31);
  swift_bridgeObjectRelease();
}

{
  specialized Array._copyContents(initializing:)();
}

{
  specialized Array._copyContents(initializing:)();
}

{
  specialized Array._copyContents(initializing:)();
}

{
  specialized Array._copyContents(initializing:)();
}

unint64_t lazy protocol witness table accessor for type ContactQuery and conformance ContactQuery()
{
  unint64_t result = lazy protocol witness table cache variable for type ContactQuery and conformance ContactQuery;
  if (!lazy protocol witness table cache variable for type ContactQuery and conformance ContactQuery)
  {
    type metadata accessor for ContactQuery();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactQuery and conformance ContactQuery);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [SiriKitDisambiguationItem] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_7@<X0>(uint64_t a1@<X8>)
{
  return a1 + 8 * *(void *)(a1 + 16) + 32;
}

uint64_t OUTLINED_FUNCTION_2_10()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_3_14()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_4_13()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_10_5()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_12_4()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_13_3()
{
  *uint64_t v0 = v1;
}

void OUTLINED_FUNCTION_14_7()
{
  *uint64_t v0 = v1;
}

uint64_t OUTLINED_FUNCTION_15_2()
{
  return v0 + 32;
}

uint64_t OUTLINED_FUNCTION_18_5()
{
  return swift_isUniquelyReferenced_nonNull_bridgeObject();
}

uint64_t OUTLINED_FUNCTION_22_2()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_23_2()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_29_4()
{
  return v0;
}

void OUTLINED_FUNCTION_30_3()
{
  *(void *)(v0 + 8 * v1) = v2;
}

char *OUTLINED_FUNCTION_32_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  return &a11;
}

id SPHTUBackedCallCapabilities.supportsTelephonyCalls.getter()
{
  return [self supportsTelephonyCalls];
}

id SPHTUBackedCallCapabilities.supportsFaceTimeVideoCalls.getter()
{
  return [self supportsFaceTimeVideoCalls];
}

id SPHTUBackedCallCapabilities.isAddPersonEnabled.getter()
{
  uint64_t v0 = self;
  id result = [v0 supportsConversations];
  if (result) {
    return [v0 isAddPersonEnabled];
  }
  return result;
}

id SPHTUBackedCallCapabilities.isGreenTea.getter()
{
  id result = [self sharedInstance];
  if (result)
  {
    uint64_t v1 = result;
    id v2 = [result isGreenTea];

    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

ValueMetadata *type metadata accessor for SPHTUBackedCallCapabilities()
{
  return &type metadata for SPHTUBackedCallCapabilities;
}

PhoneCallFlowDelegatePlugin::UnsupportedFlowCATs::Properties_optional __swiftcall UnsupportedFlowCATs.Properties.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of UnsupportedFlowCATs.Properties.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 7) {
    return (PhoneCallFlowDelegatePlugin::UnsupportedFlowCATs::Properties_optional)7;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::UnsupportedFlowCATs::Properties_optional)v3;
  }
}

unint64_t UnsupportedFlowCATs.Properties.rawValue.getter(char a1)
{
  unint64_t result = 0xD000000000000021;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 3:
      unint64_t result = 0xD000000000000022;
      break;
    case 4:
      unint64_t result = 0xD00000000000002FLL;
      break;
    case 5:
      unint64_t result = 0xD00000000000002FLL;
      break;
    case 6:
      unint64_t result = 0xD000000000000027;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance UnsupportedFlowCATs.Properties(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance UnsupportedFlowCATs.Properties()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance UnsupportedFlowCATs.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UnsupportedFlowCATs.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::UnsupportedFlowCATs::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance UnsupportedFlowCATs.Properties@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::UnsupportedFlowCATs::Properties_optional *a2@<X8>)
{
  result.value = UnsupportedFlowCATs.Properties.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance UnsupportedFlowCATs.Properties@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = UnsupportedFlowCATs.Properties.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t UnsupportedFlowCATs.deleteCallHistory(completion:)()
{
  return OUTLINED_FUNCTION_6_10();
}

uint64_t UnsupportedFlowCATs.deleteCallHistory()()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v0 = OUTLINED_FUNCTION_3_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  void *v1 = v2;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  OUTLINED_FUNCTION_43_2();
  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_46();
  return v3();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t (*v4)(unint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  void *v1 = v2;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  unint64_t v3 = OUTLINED_FUNCTION_44_0(33);
  return v4(v3);
}

{
  return OUTLINED_FUNCTION_7_12();
}

uint64_t UnsupportedFlowCATs.deleteVoicemail(completion:)()
{
  return OUTLINED_FUNCTION_6_10();
}

uint64_t UnsupportedFlowCATs.deleteVoicemail()()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v0 = OUTLINED_FUNCTION_3_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  void *v1 = v2;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  OUTLINED_FUNCTION_43_2();
  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_46();
  return v3();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t (*v4)(unint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  void *v1 = v2;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  unint64_t v3 = OUTLINED_FUNCTION_44_0(31);
  return v4(v3);
}

{
  return OUTLINED_FUNCTION_7_12();
}

void UnsupportedFlowCATs.searchCallHistory(supportsAppLaunch:nonDefaultAppName:isVoicemail:device:completion:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  char v5 = v4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = OUTLINED_FUNCTION_11_0(v6);
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_4();
  uint64_t v10 = v9 - v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v11 = OUTLINED_FUNCTION_33_1();
  *(_OWORD *)(v11 + 16) = xmmword_469650;
  OUTLINED_FUNCTION_41_0();
  *(void *)(v12 + 32) = 0xD000000000000011;
  *(void *)(v12 + 40) = v13;
  *(unsigned char *)(v12 + 48) = v5;
  uint64_t v14 = v12 + 96;
  *(void *)(v12 + 72) = &type metadata for Bool;
  *(void *)(v12 + 80) = 0xD000000000000011;
  OUTLINED_FUNCTION_20_6(v12, (uint64_t)"nonDefaultAppName");
  outlined init with copy of SpeakableString?(v3, v10, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v15 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload(v10, 1, v15) == 1)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v10, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v14 = 0u;
    *(_OWORD *)(v14 + 16) = 0u;
  }
  else
  {
    *(void *)(v11 + 120) = v15;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)v14);
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v16 + 32))();
  }
  OUTLINED_FUNCTION_18_6();
  *(void *)(v11 + 128) = v17;
  *(void *)(v11 + 136) = v18;
  *(unsigned char *)(v11 + 144) = v19 & 1;
  *(void *)(v11 + 168) = &type metadata for Bool;
  *(void *)(v11 + 176) = 0x656369766564;
  *(void *)(v11 + 184) = 0xE600000000000000;
  if (v1)
  {
    uint64_t v20 = type metadata accessor for SirikitDeviceState();
    uint64_t v21 = v1;
  }
  else
  {
    uint64_t v20 = OUTLINED_FUNCTION_34();
    *(void *)(v11 + 200) = 0;
    *(void *)(v11 + 208) = 0;
  }
  *(void *)(v11 + 192) = v21;
  *(void *)(v11 + 216) = v20;
  swift_retain();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_26_1();
}

uint64_t UnsupportedFlowCATs.searchCallHistory(supportsAppLaunch:nonDefaultAppName:isVoicemail:device:)()
{
  OUTLINED_FUNCTION_1_0();
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v0;
  *(unsigned char *)(v1 + 81) = v3;
  *(unsigned char *)(v1 + 80) = v4;
  *(void *)(v1 + 16) = v5;
  *(void *)(v1 + 24) = v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v7);
  *(void *)(v1 + 48) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t (*v14)(void);
  uint64_t v16;

  OUTLINED_FUNCTION_29_0();
  uint64_t v16 = v1;
  OUTLINED_FUNCTION_40_0();
  uint64_t v2 = *(void *)(v0 + 24);
  char v3 = *(unsigned char *)(v0 + 80);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  char v4 = OUTLINED_FUNCTION_33_1();
  *(void *)(v0 + 56) = v4;
  *(_OWORD *)(v4 + 16) = xmmword_469650;
  uint64_t v5 = OUTLINED_FUNCTION_19_7(v4, (uint64_t)"supportsAppLaunch");
  *(unsigned char *)(v5 + 48) = v3;
  uint64_t v6 = (uint64_t *)(v5 + 96);
  *(void *)(v5 + 72) = &type metadata for Bool;
  *(void *)(v5 + 80) = 0xD000000000000011;
  uint64_t v7 = OUTLINED_FUNCTION_20_6(v5, (uint64_t)"nonDefaultAppName");
  OUTLINED_FUNCTION_39_0(v7, v8, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = type metadata accessor for SpeakableString();
  if (OUTLINED_FUNCTION_37_2(v9) == 1)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(*(void *)(v0 + 48), &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_42_1();
  }
  else
  {
    *(void *)(v4 + 120) = v2;
    __swift_allocate_boxed_opaque_existential_1(v6);
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_17();
    v10();
  }
  uint64_t v11 = *(void *)(v0 + 32);
  uint64_t v12 = OUTLINED_FUNCTION_2_11(*(unsigned char *)(v0 + 81));
  if (v11)
  {
    uint64_t v12 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v4 + 200) = 0;
    *(void *)(v4 + 208) = 0;
  }
  *(void *)(v4 + 192) = v11;
  *(void *)(v4 + 216) = v12;
  OUTLINED_FUNCTION_8_1();
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v13;
  *uint64_t v13 = v0;
  v13[1] = UnsupportedFlowCATs.searchCallHistory(supportsAppLaunch:nonDefaultAppName:isVoicemail:device:);
  OUTLINED_FUNCTION_30_4();
  return v14();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  char v3 = v2;
  OUTLINED_FUNCTION_5_7();
  uint64_t *v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v5 + 8);
    return v10();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_1_0();
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v0;
  *(unsigned char *)(v1 + 73) = v3;
  *(void *)(v1 + 16) = v4;
  *(unsigned char *)(v1 + 72) = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v6);
  *(void *)(v1 + 40) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void (*v12)(void);
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v19;

  OUTLINED_FUNCTION_29_0();
  char v19 = v1;
  OUTLINED_FUNCTION_40_0();
  uint64_t v2 = *(void *)(v0 + 40);
  char v3 = *(void *)(v0 + 16);
  char v4 = *(unsigned char *)(v0 + 72);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = OUTLINED_FUNCTION_33_1();
  *(void *)(v0 + 48) = v5;
  *(_OWORD *)(v5 + 16) = xmmword_469650;
  uint64_t v6 = OUTLINED_FUNCTION_19_7(v5, (uint64_t)"supportsAppLaunch");
  *(unsigned char *)(v6 + 48) = v4;
  uint64_t v7 = (uint64_t *)(v6 + 96);
  *(void *)(v6 + 72) = &type metadata for Bool;
  *(void *)(v6 + 80) = 0xD000000000000011;
  uint64_t v8 = OUTLINED_FUNCTION_20_6(v6, (uint64_t)"nonDefaultAppName");
  OUTLINED_FUNCTION_39_0(v8, v9, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v10 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_38_3(v10);
  if (v11)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v2, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_42_1();
  }
  else
  {
    *(void *)(v5 + 120) = v3;
    __swift_allocate_boxed_opaque_existential_1(v7);
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_17();
    v12();
  }
  uint64_t v13 = *(void *)(v0 + 24);
  uint64_t v14 = OUTLINED_FUNCTION_2_11(*(unsigned char *)(v0 + 73));
  if (v13)
  {
    uint64_t v14 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v5 + 200) = 0;
    *(void *)(v5 + 208) = 0;
  }
  *(void *)(v5 + 192) = v13;
  *(void *)(v5 + 216) = v14;
  OUTLINED_FUNCTION_8_1();
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v15;
  *uint64_t v15 = v0;
  v15[1] = UnsupportedFlowCATs.searchCallHistory(supportsAppLaunch:nonDefaultAppName:isVoicemail:device:);
  uint64_t v16 = OUTLINED_FUNCTION_26_2(0xD000000000000021);
  return v17(v16);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_0_1();
  char v3 = v2;
  OUTLINED_FUNCTION_5_7();
  uint64_t *v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_32_1();
    return v11(v10);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void UnsupportedFlowCATs.searchCallHistory(supportsAppLaunch:nonDefaultAppName:isVoicemail:device:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  char v6 = v5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = OUTLINED_FUNCTION_11_0(v7);
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_53();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v9 = OUTLINED_FUNCTION_33_1();
  *(_OWORD *)(v9 + 16) = xmmword_469650;
  OUTLINED_FUNCTION_41_0();
  *(void *)(v10 + 32) = 0xD000000000000011;
  *(void *)(v10 + 40) = v11;
  *(unsigned char *)(v10 + 48) = v6;
  uint64_t v12 = v10 + 96;
  *(void *)(v10 + 72) = &type metadata for Bool;
  *(void *)(v10 + 80) = 0xD000000000000011;
  OUTLINED_FUNCTION_20_6(v10, (uint64_t)"nonDefaultAppName");
  outlined init with copy of SpeakableString?(v4, v0, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v13 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload(v0, 1, v13) == 1)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v0, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v12 = 0u;
    *(_OWORD *)(v12 + 16) = 0u;
  }
  else
  {
    *(void *)(v9 + 120) = v13;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)v12);
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v14 + 32))();
  }
  OUTLINED_FUNCTION_18_6();
  *(void *)(v9 + 128) = v15;
  *(void *)(v9 + 136) = v16;
  *(unsigned char *)(v9 + 144) = v17 & 1;
  *(void *)(v9 + 168) = &type metadata for Bool;
  *(void *)(v9 + 176) = 0x656369766564;
  *(void *)(v9 + 184) = 0xE600000000000000;
  if (v2)
  {
    uint64_t v18 = type metadata accessor for SirikitDeviceState();
    uint64_t v19 = v2;
  }
  else
  {
    uint64_t v18 = OUTLINED_FUNCTION_34();
    *(void *)(v9 + 200) = 0;
    *(void *)(v9 + 208) = 0;
  }
  *(void *)(v9 + 192) = v19;
  *(void *)(v9 + 216) = v18;
  swift_retain();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_26_1();
}

uint64_t UnsupportedFlowCATs.startCallEmergency(completion:)()
{
  return OUTLINED_FUNCTION_6_10();
}

uint64_t UnsupportedFlowCATs.startCallEmergency()()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v0 = OUTLINED_FUNCTION_3_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  void *v1 = v2;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  OUTLINED_FUNCTION_43_2();
  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_46();
  return v3();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t (*v4)(unint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  void *v1 = v2;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  uint64_t v3 = OUTLINED_FUNCTION_44_0(34);
  return v4(v3);
}

{
  return OUTLINED_FUNCTION_7_12();
}

uint64_t UnsupportedFlowCATs.startCallEmergencyInRetailStore(completion:)()
{
  return OUTLINED_FUNCTION_6_10();
}

void UnsupportedFlowCATs.unsupportedEmergencyContactCall(thirdPartyAppName:isFaceTime:completion:)()
{
  OUTLINED_FUNCTION_24_0();
  char v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = OUTLINED_FUNCTION_11_0(v5);
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_53();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v7 = OUTLINED_FUNCTION_36_2();
  *(_OWORD *)(v7 + 16) = xmmword_467720;
  uint64_t v8 = (uint64_t *)(v7 + 48);
  OUTLINED_FUNCTION_41_0();
  *(void *)(v9 + 32) = 0xD000000000000011;
  *(void *)(v9 + 40) = v10;
  outlined init with copy of SpeakableString?(v4, v0, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v11 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload(v0, 1, v11) == 1)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v0, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v8 = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
  }
  else
  {
    *(void *)(v7 + 72) = v11;
    __swift_allocate_boxed_opaque_existential_1(v8);
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v12 + 32))();
  }
  OUTLINED_FUNCTION_25_3();
  *(void *)(v7 + 80) = v13;
  *(void *)(v7 + 88) = v14;
  *(void *)(v7 + 120) = &type metadata for Bool;
  *(unsigned char *)(v7 + 96) = v2 & 1;
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_26_1();
}

uint64_t UnsupportedFlowCATs.unsupportedEmergencyContactCall(thirdPartyAppName:isFaceTime:)()
{
  OUTLINED_FUNCTION_1_0();
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v0;
  *(unsigned char *)(v1 + 72) = v3;
  *(void *)(v1 + 16) = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v5);
  *(void *)(v1 + 40) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v6, v7, v8);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void (*v9)(void);
  char v10;
  void *v11;
  uint64_t (*v12)(void);
  uint64_t v14;

  OUTLINED_FUNCTION_29_0();
  uint64_t v14 = v1;
  OUTLINED_FUNCTION_40_0();
  uint64_t v2 = v0[5];
  char v3 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_36_2();
  v0[6] = v4;
  *(_OWORD *)(v4 + 16) = xmmword_467720;
  uint64_t v5 = OUTLINED_FUNCTION_19_7(v4, (uint64_t)"thirdPartyAppName");
  OUTLINED_FUNCTION_39_0(v5, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_38_3(v7);
  if (v8)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v2, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_42_1();
  }
  else
  {
    *(void *)(v4 + 72) = v3;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v4 + 48));
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_17();
    v9();
  }
  OUTLINED_FUNCTION_15_3();
  *(void *)(v4 + 120) = &type metadata for Bool;
  *(unsigned char *)(v4 + 96) = v10;
  uint64_t v11 = (void *)OUTLINED_FUNCTION_3_0();
  v0[7] = v11;
  *uint64_t v11 = v0;
  v11[1] = UnsupportedFlowCATs.unsupportedEmergencyContactCall(thirdPartyAppName:isFaceTime:);
  OUTLINED_FUNCTION_30_4();
  return v12();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  char v3 = v2;
  OUTLINED_FUNCTION_5_7();
  uint64_t *v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v5 + 8);
    return v10();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_1_0();
  *(unsigned char *)(v1 + 64) = v2;
  *(void *)(v1 + 16) = v3;
  *(void *)(v1 + 24) = v0;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v4);
  *(void *)(v1 + 32) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v5, v6, v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  char v8;
  void *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_29_0();
  uint64_t v13 = v1;
  OUTLINED_FUNCTION_40_0();
  uint64_t v2 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  char v3 = OUTLINED_FUNCTION_36_2();
  v0[5] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_467720;
  uint64_t v4 = OUTLINED_FUNCTION_19_7(v3, (uint64_t)"thirdPartyAppName");
  OUTLINED_FUNCTION_39_0(v4, v5, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = type metadata accessor for SpeakableString();
  if (OUTLINED_FUNCTION_37_2(v6) == 1)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v0[4], &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_42_1();
  }
  else
  {
    *(void *)(v3 + 72) = v2;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v3 + 48));
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_17();
    v7();
  }
  OUTLINED_FUNCTION_15_3();
  *(void *)(v3 + 120) = &type metadata for Bool;
  *(unsigned char *)(v3 + 96) = v8;
  uint64_t v9 = (void *)OUTLINED_FUNCTION_3_0();
  v0[6] = v9;
  *uint64_t v9 = v0;
  v9[1] = UnsupportedFlowCATs.unsupportedEmergencyContactCall(thirdPartyAppName:isFaceTime:);
  uint64_t v10 = OUTLINED_FUNCTION_26_2(0xD00000000000002FLL);
  return v11(v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_0_1();
  char v3 = v2;
  OUTLINED_FUNCTION_5_7();
  uint64_t *v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_32_1();
    return v11(v10);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void UnsupportedFlowCATs.unsupportedEmergencyContactCall(thirdPartyAppName:isFaceTime:)()
{
  OUTLINED_FUNCTION_24_0();
  char v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = OUTLINED_FUNCTION_11_0(v4);
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_4();
  uint64_t v8 = v7 - v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v9 = OUTLINED_FUNCTION_36_2();
  *(_OWORD *)(v9 + 16) = xmmword_467720;
  uint64_t v10 = (uint64_t *)(v9 + 48);
  OUTLINED_FUNCTION_41_0();
  *(void *)(v11 + 32) = 0xD000000000000011;
  *(void *)(v11 + 40) = v12;
  outlined init with copy of SpeakableString?(v3, v8, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v13 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload(v8, 1, v13) == 1)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v8, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v10 = 0u;
    *(_OWORD *)(v9 + 64) = 0u;
  }
  else
  {
    *(void *)(v9 + 72) = v13;
    __swift_allocate_boxed_opaque_existential_1(v10);
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v14 + 32))();
  }
  OUTLINED_FUNCTION_25_3();
  *(void *)(v9 + 80) = v15;
  *(void *)(v9 + 88) = v16;
  *(void *)(v9 + 120) = &type metadata for Bool;
  *(unsigned char *)(v9 + 96) = v1 & 1;
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_26_1();
}

uint64_t UnsupportedFlowCATs.unsupportedOnDeviceType(device:completion:)(unint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_31_0();
  OUTLINED_FUNCTION_27_0(v2, (__n128)xmmword_467710);
  if (a1)
  {
    uint64_t v3 = type metadata accessor for SirikitDeviceState();
    unint64_t v4 = a1;
  }
  else
  {
    uint64_t v3 = OUTLINED_FUNCTION_34();
    v2[3].n128_u64[1] = 0;
    v2[4].n128_u64[0] = 0;
  }
  v2[3].n128_u64[0] = v4;
  v2[4].n128_u64[1] = v3;
  swift_retain();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();

  return swift_bridgeObjectRelease();
}

uint64_t UnsupportedFlowCATs.unsupportedOnDeviceType(device:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_21_1((uint64_t)UnsupportedFlowCATs.unsupportedOnDeviceType(device:));
}

uint64_t UnsupportedFlowCATs.unsupportedOnDeviceType(device:)()
{
  unint64_t v1 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_31_0();
  v0[5] = v2;
  uint64_t v3 = OUTLINED_FUNCTION_24_7(v2, (__n128)xmmword_467710);
  if (v1)
  {
    uint64_t v3 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v2[3].n128_u64[1] = 0;
    v2[4].n128_u64[0] = 0;
  }
  v2[3].n128_u64[0] = v1;
  v2[4].n128_u64[1] = v3;
  OUTLINED_FUNCTION_8_1();
  unint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  void *v4 = v0;
  v4[1] = UnsupportedFlowCATs.unsupportedOnDeviceType(device:);
  uint64_t v5 = v0[2];
  return v7(v5, 0xD000000000000027, 0x800000000048C120, v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  void *v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_47_0();
    return v10();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  swift_bridgeObjectRelease();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  unint64_t v1;
  __n128 *v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v6)(unint64_t, unint64_t, __n128 *);
  uint64_t v7;

  unint64_t v1 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_31_0();
  v0[4] = v2;
  uint64_t v3 = OUTLINED_FUNCTION_24_7(v2, (__n128)xmmword_467710);
  if (v1)
  {
    uint64_t v3 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v2[3].n128_u64[1] = 0;
    v2[4].n128_u64[0] = 0;
  }
  v2[3].n128_u64[0] = v1;
  v2[4].n128_u64[1] = v3;
  OUTLINED_FUNCTION_8_1();
  unint64_t v4 = (void *)swift_task_alloc();
  v0[5] = v4;
  void *v4 = v0;
  v4[1] = UnsupportedFlowCATs.unsupportedOnDeviceType(device:);
  return v6(0xD000000000000027, 0x800000000048C120, v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v14;

  OUTLINED_FUNCTION_16_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v8 = v7;
  *(void *)(v5 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v9, v10, v11);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v12 = *(uint64_t (**)(uint64_t))(v7 + 8);
    return v12(v3);
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_47_0();
  return v0();
}

uint64_t UnsupportedFlowCATs.unsupportedOnDeviceType(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_21_1((uint64_t)UnsupportedFlowCATs.unsupportedOnDeviceType(device:));
}

uint64_t UnsupportedFlowCATs.unsupportedOnDeviceType(device:)(unint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_31_0();
  OUTLINED_FUNCTION_27_0(v2, (__n128)xmmword_467710);
  if (a1)
  {
    uint64_t v3 = type metadata accessor for SirikitDeviceState();
    unint64_t v4 = a1;
  }
  else
  {
    uint64_t v3 = OUTLINED_FUNCTION_34();
    v2[3].n128_u64[1] = 0;
    v2[4].n128_u64[0] = 0;
  }
  v2[3].n128_u64[0] = v4;
  v2[4].n128_u64[1] = v3;
  swift_retain();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();

  return swift_bridgeObjectRelease();
}

void UnsupportedFlowCATs.__allocating_init(templateDir:options:globals:)()
{
}

void UnsupportedFlowCATs.init(templateDir:options:globals:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for CATOption();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_53();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  uint64_t v8 = OUTLINED_FUNCTION_11_0(v7);
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_4();
  outlined init with copy of SpeakableString?(v4, v10 - v9, (uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v0, v2, v5);
  CATWrapper.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v2, v5);
  _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v4, (uint64_t *)&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_26_1();
}

uint64_t outlined init with copy of SpeakableString?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_10();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_10();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

unint64_t lazy protocol witness table accessor for type UnsupportedFlowCATs.Properties and conformance UnsupportedFlowCATs.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type UnsupportedFlowCATs.Properties and conformance UnsupportedFlowCATs.Properties;
  if (!lazy protocol witness table cache variable for type UnsupportedFlowCATs.Properties and conformance UnsupportedFlowCATs.Properties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsupportedFlowCATs.Properties and conformance UnsupportedFlowCATs.Properties);
  }
  return result;
}

uint64_t type metadata accessor for UnsupportedFlowCATs()
{
  uint64_t result = type metadata singleton initialization cache for UnsupportedFlowCATs;
  if (!type metadata singleton initialization cache for UnsupportedFlowCATs) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for UnsupportedFlowCATs()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for UnsupportedFlowCATs()
{
  return type metadata accessor for UnsupportedFlowCATs();
}

uint64_t getEnumTagSinglePayload for UnsupportedFlowCATs.Properties(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFA)
  {
    if (a2 + 6 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 6) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 7;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v5 = v6 - 7;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for UnsupportedFlowCATs.Properties(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x74D30);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UnsupportedFlowCATs.Properties()
{
  return &type metadata for UnsupportedFlowCATs.Properties;
}

uint64_t OUTLINED_FUNCTION_2_11@<X0>(char a1@<W8>)
{
  *(void *)(v2 + 128) = 0x6D6563696F567369;
  *(void *)(v2 + 136) = 0xEB000000006C6961;
  *(unsigned char *)(v2 + 144) = a1;
  *(void *)(v2 + 168) = v1;
  *(void *)(v2 + 176) = 0x656369766564;
  *(void *)(v2 + 184) = 0xE600000000000000;
  return 0;
}

uint64_t OUTLINED_FUNCTION_6_10()
{
  return dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
}

uint64_t OUTLINED_FUNCTION_7_12()
{
  return dispatch thunk of CATWrapper.execute(catId:parameters:)();
}

void OUTLINED_FUNCTION_15_3()
{
  *(void *)(v0 + 80) = 0x6954656361467369;
  *(void *)(v0 + 88) = 0xEA0000000000656DLL;
}

uint64_t OUTLINED_FUNCTION_19_7@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(result + 32) = v2;
  *(void *)(result + 40) = (a2 - 32) | 0x8000000000000000;
  return result;
}

uint64_t OUTLINED_FUNCTION_20_6@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(result + 88) = (a2 - 32) | 0x8000000000000000;
  return result;
}

uint64_t OUTLINED_FUNCTION_24_7(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[2].n128_u64[0] = 0x656369766564;
  a1[2].n128_u64[1] = 0xE600000000000000;
  return 0;
}

uint64_t OUTLINED_FUNCTION_33_1()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_37_2(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_38_3(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_39_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return outlined init with copy of SpeakableString?(v3, v4, a3);
}

double OUTLINED_FUNCTION_42_1()
{
  double result = 0.0;
  *uint64_t v0 = 0u;
  v0[1] = 0u;
  return result;
}

uint64_t PhoneContactHeader.description.getter()
{
  _StringGuts.grow(_:)(95);
  v1._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  v1._object = (void *)0x8000000000491730;
  String.append(_:)(v1);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_2_12();
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 0x6361746E6F63202CLL;
  v2._object = (void *)0xEC0000003D644974;
  String.append(_:)(v2);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_2_12();
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 0x616C70736964202CLL;
  v3._object = (void *)0xEE003D656D614E79;
  String.append(_:)(v3);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_2_12();
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 0x656C646E6168202CLL;
  v4._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v4);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_2_12();
  swift_bridgeObjectRelease();
  v5._object = (void *)0x8000000000491750;
  v5._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v5);
  if (*(unsigned char *)(v0 + 64)) {
    uint64_t v6 = 1702195828;
  }
  else {
    uint64_t v6 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 64)) {
    unint64_t v7 = 0xE400000000000000;
  }
  else {
    unint64_t v7 = 0xE500000000000000;
  }
  unint64_t v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 41;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  return 0;
}

uint64_t PhoneContactHeader.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6C646E7542707061 && a2 == 0xEB00000000644965;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x49746361746E6F63 && a2 == 0xE900000000000064;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x4E79616C70736964 && a2 == 0xEB00000000656D61;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x656C646E6168 && a2 == 0xE600000000000000;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else if (a1 == 0x5074737269467369 && a2 == 0xEF70704179747261)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else
        {
          char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v10) {
            return 4;
          }
          else {
            return 5;
          }
        }
      }
    }
  }
}

uint64_t PhoneContactHeader.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0x6C646E7542707061;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x49746361746E6F63;
      break;
    case 2:
      uint64_t result = 0x4E79616C70736964;
      break;
    case 3:
      uint64_t result = 0x656C646E6168;
      break;
    case 4:
      uint64_t result = 0x5074737269467369;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PhoneContactHeader.CodingKeys()
{
  return PhoneContactHeader.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PhoneContactHeader.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = PhoneContactHeader.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PhoneContactHeader.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneContactHeader.CodingKeys and conformance PhoneContactHeader.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PhoneContactHeader.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneContactHeader.CodingKeys and conformance PhoneContactHeader.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PhoneContactHeader.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PhoneContactHeader.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  BOOL v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PhoneContactHeader.CodingKeys and conformance PhoneContactHeader.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[15] = 0;
  OUTLINED_FUNCTION_3_15();
  if (!v1)
  {
    v10[14] = 1;
    OUTLINED_FUNCTION_3_15();
    v10[13] = 2;
    OUTLINED_FUNCTION_3_15();
    v10[12] = 3;
    OUTLINED_FUNCTION_3_15();
    v10[11] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v8, v3);
}

unint64_t lazy protocol witness table accessor for type PhoneContactHeader.CodingKeys and conformance PhoneContactHeader.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneContactHeader.CodingKeys and conformance PhoneContactHeader.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneContactHeader.CodingKeys and conformance PhoneContactHeader.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneContactHeader.CodingKeys and conformance PhoneContactHeader.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneContactHeader.CodingKeys and conformance PhoneContactHeader.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneContactHeader.CodingKeys and conformance PhoneContactHeader.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneContactHeader.CodingKeys and conformance PhoneContactHeader.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneContactHeader.CodingKeys and conformance PhoneContactHeader.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneContactHeader.CodingKeys and conformance PhoneContactHeader.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneContactHeader.CodingKeys and conformance PhoneContactHeader.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneContactHeader.CodingKeys and conformance PhoneContactHeader.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneContactHeader.CodingKeys and conformance PhoneContactHeader.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneContactHeader.CodingKeys and conformance PhoneContactHeader.CodingKeys);
  }
  return result;
}

void __swiftcall PhoneContactHeader.init(appBundleId:contactId:displayName:handle:isFirstPartyApp:)(PhoneCallFlowDelegatePlugin::PhoneContactHeader *__return_ptr retstr, Swift::String appBundleId, Swift::String contactId, Swift::String displayName, Swift::String handle, Swift::Bool isFirstPartyApp)
{
  retstr->appBundleId = appBundleId;
  retstr->contactId = contactId;
  retstr->displayName = displayName;
  retstr->handle = handle;
  retstr->isFirstPartyApp = isFirstPartyApp;
}

uint64_t PhoneContactHeader.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PhoneContactHeader.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  __chkstk_darwin(v5);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PhoneContactHeader.CodingKeys and conformance PhoneContactHeader.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v6 = OUTLINED_FUNCTION_4_14();
  uint64_t v8 = v7;
  uint64_t v22 = v6;
  swift_bridgeObjectRetain();
  uint64_t v9 = OUTLINED_FUNCTION_4_14();
  uint64_t v23 = v10;
  uint64_t v21 = v9;
  swift_bridgeObjectRetain();
  uint64_t v20 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v12 = v11;
  swift_bridgeObjectRetain();
  uint64_t v18 = OUTLINED_FUNCTION_4_14();
  uint64_t v19 = v13;
  swift_bridgeObjectRetain();
  char v14 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v15 = OUTLINED_FUNCTION_0_8();
  v16(v15);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v22;
  *(void *)(a2 + 8) = v8;
  *(void *)(a2 + 16) = v21;
  *(void *)(a2 + 24) = v23;
  *(void *)(a2 + 32) = v20;
  *(void *)(a2 + 40) = v12;
  *(void *)(a2 + 48) = v18;
  *(void *)(a2 + 56) = v19;
  *(unsigned char *)(a2 + 64) = v14 & 1;
  return result;
}

void *protocol witness for Decodable.init(from:) in conformance PhoneContactHeader@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (void *)PhoneContactHeader.init(from:)(a1, (uint64_t)__src);
  if (!v2) {
    return memcpy(a2, __src, 0x41uLL);
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PhoneContactHeader(void *a1)
{
  return PhoneContactHeader.encode(to:)(a1);
}

uint64_t destroy for PhoneContactHeader()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PhoneContactHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PhoneContactHeader(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

void *__swift_memcpy65_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x41uLL);
}

uint64_t assignWithTake for PhoneContactHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for PhoneContactHeader(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 65))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PhoneContactHeader(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 65) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PhoneContactHeader()
{
  return &type metadata for PhoneContactHeader;
}

unsigned char *storeEnumTagSinglePayload for PhoneContactHeader.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x75D70);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

void *type metadata accessor for PhoneContactHeader.CodingKeys()
{
  return &unk_5510D0;
}

uint64_t OUTLINED_FUNCTION_0_8()
{
  return v0;
}

void OUTLINED_FUNCTION_2_12()
{
  uint64_t v3 = v0;
  uint64_t v4 = v1;
  String.append(_:)(*(Swift::String *)&v3);
}

uint64_t OUTLINED_FUNCTION_3_15()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_4_14()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t static ContactNeedsValueGuardFlow.FlowState.== infix(_:_:)(uint64_t a1)
{
  uint64_t v78 = a1;
  uint64_t v74 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_0();
  uint64_t v66 = v1;
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_3_1();
  uint64_t v65 = v3;
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_3_1();
  uint64_t v69 = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  __chkstk_darwin(v6 - 8);
  OUTLINED_FUNCTION_5_8();
  uint64_t v67 = v7;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v8);
  uint64_t v70 = (uint64_t)&v65 - v9;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v10);
  uint64_t v71 = (uint64_t)&v65 - v11;
  type metadata accessor for PluginAction();
  OUTLINED_FUNCTION_0_0();
  uint64_t v75 = v12;
  uint64_t v76 = v13;
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_5_8();
  uint64_t v73 = v14;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v15);
  uint64_t v72 = (char *)&v65 - v16;
  uint64_t v17 = type metadata accessor for ContactNeedsValueGuardFlow.FlowState();
  OUTLINED_FUNCTION_0_0();
  uint64_t v19 = v18;
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v23 = (unsigned __int8 *)&v65 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v65 - v24;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  OUTLINED_FUNCTION_0_0();
  uint64_t v28 = v27;
  uint64_t v30 = __chkstk_darwin(v29);
  uint64_t v32 = (char *)&v65 - v31;
  uint64_t v33 = (unsigned __int8 *)&v65 + *(int *)(v30 + 48) - v31;
  uint64_t v77 = v19;
  uint64_t v34 = *(void (**)(void))(v19 + 16);
  OUTLINED_FUNCTION_8_12();
  v34();
  OUTLINED_FUNCTION_8_12();
  v34();
  char v35 = v32;
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v45 = v75;
    OUTLINED_FUNCTION_8_12();
    v34();
    if (OUTLINED_FUNCTION_26_4())
    {
      (*(void (**)(char *, uint64_t))(v76 + 8))(v25, v45);
      goto LABEL_11;
    }
    uint64_t v49 = v76;
    char v50 = *(void (**)(void))(v76 + 32);
    uint64_t v51 = v45;
    ((void (*)(char *, char *, uint64_t))v50)(v72, v25, v45);
    v50();
    uint64_t v52 = v71;
    PluginAction.loggingId.getter();
    uint64_t v53 = v70;
    PluginAction.loggingId.getter();
    uint64_t v54 = v69;
    uint64_t v55 = v69 + *(int *)(v68 + 48);
    outlined init with copy of UUID?(v52, v69);
    outlined init with copy of UUID?(v53, v55);
    OUTLINED_FUNCTION_23_3(v54);
    if (v60)
    {
      outlined destroy of UUID?(v53, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      outlined destroy of UUID?(v52, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      uint64_t v56 = *(void (**)(void))(v49 + 8);
      OUTLINED_FUNCTION_10_6();
      v56();
      OUTLINED_FUNCTION_10_6();
      v56();
      OUTLINED_FUNCTION_23_3(v55);
      uint64_t v57 = v77;
      uint64_t v58 = v54;
      if (v60)
      {
        outlined destroy of UUID?(v54, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        char v41 = 1;
LABEL_22:
        uint64_t v28 = v57;
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v59 = v67;
      outlined init with copy of UUID?(v54, v67);
      OUTLINED_FUNCTION_23_3(v55);
      uint64_t v57 = v77;
      uint64_t v61 = v66;
      uint64_t v58 = v54;
      if (!v60)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 32))(v65, v55, v74);
        lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
        char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v63 = *(void (**)(void))(v61 + 8);
        OUTLINED_FUNCTION_15_4();
        v63();
        outlined destroy of UUID?(v70, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        outlined destroy of UUID?(v71, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        uint64_t v64 = *(void (**)(void))(v76 + 8);
        OUTLINED_FUNCTION_10_6();
        v64();
        OUTLINED_FUNCTION_10_6();
        v64();
        OUTLINED_FUNCTION_15_4();
        v63();
        outlined destroy of UUID?(v54, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        goto LABEL_9;
      }
      outlined destroy of UUID?(v70, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      outlined destroy of UUID?(v71, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      char v62 = *(void (**)(uint64_t, uint64_t))(v76 + 8);
      v62(v73, v51);
      v62((uint64_t)v72, v51);
      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v59, v74);
    }
    outlined destroy of UUID?(v58, &demangling cache variable for type metadata for (UUID?, UUID?));
    char v41 = 0;
    goto LABEL_22;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (OUTLINED_FUNCTION_26_4() == 2)
    {
      char v41 = 1;
      goto LABEL_9;
    }
LABEL_11:
    char v41 = 0;
    uint64_t v17 = TupleTypeMetadata2;
    goto LABEL_12;
  }
  OUTLINED_FUNCTION_8_12();
  v34();
  uint64_t v37 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ExecutionPath.FallbackLocation, Parse))
               + 48);
  uint64_t v38 = &v23[v37];
  if (OUTLINED_FUNCTION_26_4() != 1)
  {
    type metadata accessor for Parse();
    OUTLINED_FUNCTION_15();
    (*(void (**)(unsigned __int8 *, uint64_t))(v46 + 8))(&v23[v37], v47);
    goto LABEL_11;
  }
  int v39 = *v33;
  uint64_t v40 = &v33[v37];
  char v41 = *v23 == v39;
  uint64_t v42 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_15();
  uint64_t v44 = *(void (**)(unsigned __int8 *, uint64_t))(v43 + 8);
  v44(v40, v42);
  v44(v38, v42);
LABEL_9:
  uint64_t v28 = v77;
LABEL_12:
  (*(void (**)(char *, uint64_t))(v28 + 8))(v35, v17);
  return v41 & 1;
}

uint64_t outlined init with copy of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ContactNeedsValueGuardFlow<A>.FlowState(uint64_t a1)
{
  return static ContactNeedsValueGuardFlow.FlowState.== infix(_:_:)(a1);
}

uint64_t key path setter for ContactNeedsValueGuardFlow.flowState : <A>ContactNeedsValueGuardFlow<A>(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ContactNeedsValueGuardFlow.FlowState();
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v7 - v3;
  (*(void (**)(char *, uint64_t))(v5 + 16))((char *)&v7 - v3, a1);
  return ContactNeedsValueGuardFlow.flowState.setter((uint64_t)v4);
}

uint64_t ContactNeedsValueGuardFlow.flow.getter()
{
  return swift_retain();
}

uint64_t ContactNeedsValueGuardFlow.sharedGlobals.getter()
{
  OUTLINED_FUNCTION_22();
  return outlined init with copy of SignalProviding(v0 + *(void *)(v1 + 112), v2);
}

uint64_t ContactNeedsValueGuardFlow.__allocating_init(_:_:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ContactNeedsValueGuardFlow.FlowState();
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v5);
  uint64_t v7 = &v11[-v6 - 8];
  swift_storeEnumTagMultiPayload();
  outlined init with copy of SignalProviding(a2, (uint64_t)v11);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, unsigned char *, unsigned char *))(v2 + 152))(a1, v7, v11);
  __swift_destroy_boxed_opaque_existential_1(a2);
  return v8;
}

uint64_t ContactNeedsValueGuardFlow.execute(completion:)()
{
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t protocol witness for Flow.execute(completion:) in conformance ContactNeedsValueGuardFlow<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 176))();
}

uint64_t type metadata accessor for ContactNeedsValueGuardFlow()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for Flow in ContactNeedsValueGuardFlow<A>()
{
  return swift_getWitnessTable();
}

uint64_t sub_76948()
{
  OUTLINED_FUNCTION_22();
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t sub_7698C()
{
  return 16;
}

__n128 sub_76998(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata instantiation function for ContactNeedsValueGuardFlow()
{
  return _swift_allocateGenericClassMetadata();
}

uint64_t type metadata completion function for ContactNeedsValueGuardFlow()
{
  uint64_t result = type metadata accessor for ContactNeedsValueGuardFlow.FlowState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata instantiation function for ContactNeedsValueGuardFlow.FlowState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t type metadata completion function for ContactNeedsValueGuardFlow.FlowState()
{
  uint64_t result = type metadata accessor for PluginAction();
  if (v1 <= 0x3F)
  {
    v3[4] = *(void *)(result - 8) + 64;
    uint64_t result = type metadata accessor for Parse();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      v3[5] = v3;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ContactNeedsValueGuardFlow.FlowState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ExecutionPath.FallbackLocation, Parse))
                   + 48);
      uint64_t v11 = (char *)a1 + v10;
      uint64_t v12 = (char *)a2 + v10;
      uint64_t v13 = type metadata accessor for Parse();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(v6 + 64));
        return a1;
      }
      uint64_t v8 = type metadata accessor for PluginAction();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

unsigned char *initializeWithTake for ContactNeedsValueGuardFlow.FlowState(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ExecutionPath.FallbackLocation, Parse))
                + 48);
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    uint64_t v11 = type metadata accessor for Parse();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      return a1;
    }
    uint64_t v7 = type metadata accessor for PluginAction();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

unsigned char *assignWithTake for ContactNeedsValueGuardFlow.FlowState(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 - 8);
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(a1, a3);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ExecutionPath.FallbackLocation, Parse))
                  + 48);
      uint64_t v9 = &a1[v8];
      uint64_t v10 = &a2[v8];
      uint64_t v11 = type metadata accessor for Parse();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(v5 + 64));
        return a1;
      }
      uint64_t v7 = type metadata accessor for PluginAction();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destructiveInjectEnumTag for ContactNeedsValueGuardFlow.FlowState()
{
  return swift_storeEnumTagMultiPayload();
}

void *specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

{
  uint64_t v3;

  if ((__len & 0x8000000000000000) != 0)
  {
    OUTLINED_FUNCTION_1_18();
    __src = (char *)OUTLINED_FUNCTION_4_16();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

uint64_t OUTLINED_FUNCTION_16_8()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_20_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_23_3(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1, *(void *)(v1 - 120));
}

uint64_t OUTLINED_FUNCTION_26_4()
{
  return swift_getEnumCaseMultiPayload();
}

Swift::Void __swiftcall INPersonContainingIntent.clearContactsSlotMatches()()
{
  OUTLINED_FUNCTION_5_9();
  unint64_t v1 = v0();
  if (!v1)
  {
    OUTLINED_FUNCTION_10_7();
    return;
  }
  unint64_t v2 = v1;
  if (v1 >> 62)
  {
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    if (!v3) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8));
    if (!v3) {
      goto LABEL_13;
    }
  }
  specialized ContiguousArray.reserveCapacity(_:)();
  if (v3 < 0)
  {
    __break(1u);
    return;
  }
  uint64_t v4 = 0;
  do
  {
    if ((v2 & 0xC000000000000001) != 0) {
      id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v5 = *(id *)(v2 + 8 * v4 + 32);
    }
    ++v4;
    outlined bridged method (mbgnn) of @objc INPerson.alternatives.setter((uint64_t)_swiftEmptyArrayStorage, v5);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
  }
  while (v3 != v4);
LABEL_13:
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_9_12();
  v6();
  OUTLINED_FUNCTION_10_7();
  swift_bridgeObjectRelease();
}

unint64_t INPersonContainingIntent.hasSiriMatches.getter()
{
  OUTLINED_FUNCTION_5_9();
  unint64_t result = v0();
  if (result)
  {
    unint64_t v2 = result;
    uint64_t v3 = (void *)(result & 0xFFFFFFFFFFFFFF8);
    if (result >> 62)
    {
      if (_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_4;
      }
    }
    else if (*(void *)((char *)&dword_10 + (result & 0xFFFFFFFFFFFFFF8)))
    {
LABEL_4:
      if ((v2 & 0xC000000000000001) != 0)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!v3[2])
        {
          __break(1u);
          goto LABEL_17;
        }
        id v4 = *(id *)(v2 + 32);
      }
      OUTLINED_FUNCTION_15_0();
      id v5 = [v3 siriMatches];

      if (v5)
      {
        type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INPerson);
        unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (!(v6 >> 62))
        {
          uint64_t v3 = *(void **)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFFF8));
LABEL_10:
          swift_bridgeObjectRelease();
          return v3 != 0;
        }
LABEL_17:
        OUTLINED_FUNCTION_32_3();
        _CocoaArrayWrapper.endIndex.getter();
        OUTLINED_FUNCTION_15_0();
        goto LABEL_10;
      }
      return 0;
    }
    swift_bridgeObjectRelease();
    return 0;
  }
  return result;
}

uint64_t INPersonContainingIntent.isFirstContactRelatedOrMyself.getter()
{
  OUTLINED_FUNCTION_5_9();
  unint64_t v1 = v0();
  if (!v1) {
    goto LABEL_10;
  }
  unint64_t v2 = v1;
  uint64_t v3 = (void *)(v1 & 0xFFFFFFFFFFFFFF8);
  if (v1 >> 62)
  {
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    if (result) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  uint64_t result = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8));
  if (!result)
  {
LABEL_9:
    swift_bridgeObjectRelease();
LABEL_10:
    uint64_t v3 = 0;
    goto LABEL_11;
  }
LABEL_4:
  if ((v2 & 0xC000000000000001) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!v3[2])
    {
      __break(1u);
      return result;
    }
    id v5 = *(id *)(v2 + 32);
  }
  OUTLINED_FUNCTION_15_0();
LABEL_11:
  id v6 = [v3 relationship];

  if (!v3) {
    return v6 != 0;
  }
  unsigned int v7 = [v3 isMe];

  if (v6) {
    return 1;
  }
  else {
    return v7;
  }
}

INPerson_optional __swiftcall INPersonContainingIntent.removeContact(at:)(Swift::Int at)
{
  uint64_t v3 = OUTLINED_FUNCTION_7_13(at, v1);
  uint64_t v5 = v4(v3);
  if (v5) {
    unint64_t v6 = v5;
  }
  else {
    unint64_t v6 = (unint64_t)_swiftEmptyArrayStorage;
  }
  v15[1] = v6;
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    Swift::Int v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    Swift::Int v7 = *(void *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFFF8));
  }
  if (v7 <= at)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.siriPhone);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      v15[0] = OUTLINED_FUNCTION_14_0();
      *(_DWORD *)uint64_t v12 = 136315394;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000012, 0x8000000000491AF0, v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v12 + 12) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_0, v10, v11, "#INPersonContainingIntent.%s: Index %ld is greater than number of contacts. Leaving slot as-is.", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
  }
  else
  {
    specialized Array.remove(at:)(at);
    OUTLINED_FUNCTION_8_13();
    v8();
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_11_11();
  result.value.super.Class isa = v13;
  result.is_nil = v14;
  return result;
}

Swift::Void __swiftcall INPersonContainingIntent.replaceContact(at:person:)(Swift::Int at, INPerson person)
{
  uint64_t v5 = (*(uint64_t (**)())(v2 + 8))();
  if (v5) {
    unint64_t v6 = v5;
  }
  else {
    unint64_t v6 = (unint64_t)_swiftEmptyArrayStorage;
  }
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    Swift::Int v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    Swift::Int v7 = *(void *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFFF8));
  }
  if (v7 <= at)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for siriPhone == -1) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v8 = person.super.isa;
    unint64_t v18 = v6;
    if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
      || (v6 & 0x8000000000000000) != 0
      || (v6 & 0x4000000000000000) != 0)
    {
      unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew()(v6);
      unint64_t v18 = v6;
    }
    if (at < 0)
    {
      __break(1u);
    }
    else if (*(void *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFFF8)) > (unint64_t)at)
    {
      uint64_t v9 = *(void **)((char *)&stru_20.cmd + 8 * at + (v6 & 0xFFFFFFFFFFFFFF8));
      *(void *)((char *)&stru_20.cmd + 8 * at + (v6 & 0xFFFFFFFFFFFFFF8)) = v8;

      specialized Array._endMutation()();
      OUTLINED_FUNCTION_8_13();
      v10();
      OUTLINED_FUNCTION_11_11();
      swift_bridgeObjectRelease();
      return;
    }
    __break(1u);
  }
  swift_once();
LABEL_17:
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.siriPhone);
  osos_log_t log = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    unint64_t v18 = OUTLINED_FUNCTION_14_0();
    *(_DWORD *)uint64_t v14 = 136315394;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x8000000000491B10, (uint64_t *)&v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, oslog, v13, "#INPersonContainingIntent.%s: Index %ld is greater than number of contacts. Leaving slot as-is.", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();

    OUTLINED_FUNCTION_11_11();
  }
  else
  {
    OUTLINED_FUNCTION_11_11();
  }
}

Swift::Void __swiftcall INPersonContainingIntent.appendContact(person:)(INPerson person)
{
  uint64_t v3 = OUTLINED_FUNCTION_7_13((uint64_t)person.super.isa, v1);
  uint64_t v5 = v4(v3);
  unint64_t v6 = _swiftEmptyArrayStorage;
  if (v5) {
    unint64_t v6 = (void *)v5;
  }
  unint64_t v9 = (unint64_t)v6;
  Swift::Int v7 = person.super.isa;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                + (v9 & 0xFFFFFFFFFFFFFF8)) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  OUTLINED_FUNCTION_9_12();
  v8();

  swift_bridgeObjectRelease();
}

void key path setter for CallingIntent.callGroups : <A>A()
{
}

void CallingIntent.callGroups.setter()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.siriPhone);
  swift_bridgeObjectRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = OUTLINED_FUNCTION_14_0();
    *(_DWORD *)uint64_t v3 = 136315138;
    uint64_t v8 = v4;
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INCallGroup);
    swift_bridgeObjectRetain();
    uint64_t v5 = Array.description.getter();
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v1, v2, "#CallingIntent Intent does not support callGroups, not setting %s", v3, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  OUTLINED_FUNCTION_10_7();
}

void CallingIntent.callGroups.modify(void *a1, uint64_t a2, uint64_t a3)
{
  a1[2] = a3;
  a1[3] = v3;
  *a1 = 0;
  a1[1] = a2;
  OUTLINED_FUNCTION_16_9();
}

void CallingIntent.callGroups.modify(uint64_t a1, char a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    CallingIntent.callGroups.setter();
    swift_bridgeObjectRelease();
  }
  else
  {
    CallingIntent.callGroups.setter();
  }
}

void CallingIntent.populateCallIntentMetadata(resolvedApp:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _s27PhoneCallFlowDelegatePlugin12AnnotatedAppVSgWObTm_0(a1, (uint64_t)&v24, &demangling cache variable for type metadata for AnnotatedApp?);
  _s27PhoneCallFlowDelegatePlugin12AnnotatedAppVSgWObTm_0(a1, (uint64_t)v25, &demangling cache variable for type metadata for AnnotatedApp?);
  if (*(void *)&v25[0])
  {
    long long v28 = v25[1];
    long long v29 = v26;
    long long v27 = v25[0];
    char v7 = v26;
    BOOL v8 = v26 == 3;
    id v9 = objc_allocWithZone((Class)INStartCallRequestMetadata);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v20 = a2;
    (*(void (**)(id, uint64_t, uint64_t))(a3 + 80))([v9 initWithAppInferred:v8], a2, a3);
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.siriPhone);
    uint64_t v21 = *((void *)&v27 + 1);
    _s27PhoneCallFlowDelegatePlugin12AnnotatedAppVSgWObTm_0((uint64_t)&v28, (uint64_t)v30, &demangling cache variable for type metadata for String?);
    uint64_t v22 = *((void *)&v29 + 1);
    swift_retain();
    outlined retain of Set<String>((uint64_t)&v21);
    outlined retain of String?((uint64_t)v30);
    outlined retain of Set<String>((uint64_t)&v22);
    id v11 = v3;
    swift_retain();
    outlined retain of Set<String>((uint64_t)&v21);
    outlined retain of String?((uint64_t)v30);
    outlined retain of Set<String>((uint64_t)&v22);
    id v12 = v11;
    os_log_type_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v16 = (void *)swift_slowAlloc();
      uint64_t v23 = OUTLINED_FUNCTION_14_0();
      *(_DWORD *)uint64_t v15 = 136315394;
      unint64_t v17 = AppResolutionSource.description.getter(v7);
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      outlined release of Set<String>((uint64_t)&v21);
      outlined release of String?((uint64_t)v30);
      outlined release of Set<String>((uint64_t)&v22);
      swift_release();
      outlined release of Set<String>((uint64_t)&v21);
      outlined release of String?((uint64_t)v30);
      outlined release of Set<String>((uint64_t)&v22);
      *(_WORD *)(v15 + 12) = 2112;
      uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 72))(v20, a3);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v16 = v19;

      _os_log_impl(&dword_0, v13, v14, "#CallingIntent did set callRequestMetadata: source=%s, callRequestMetadata=%@", (uint8_t *)v15, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
      swift_release();

      outlined release of Set<String>((uint64_t)&v21);
      outlined release of String?((uint64_t)v30);
      outlined release of Set<String>((uint64_t)&v22);
    }
    else
    {
      swift_release();
      outlined release of Set<String>((uint64_t)&v21);
      outlined release of String?((uint64_t)v30);
      outlined release of Set<String>((uint64_t)&v22);
      swift_release();
      outlined release of Set<String>((uint64_t)&v21);
      outlined release of String?((uint64_t)v30);
      outlined release of Set<String>((uint64_t)&v22);
      swift_release();
      outlined release of Set<String>((uint64_t)&v21);
      outlined release of String?((uint64_t)v30);
      outlined release of Set<String>((uint64_t)&v22);
    }
  }
}

void protocol witness for CallingIntent.callGroups.setter in conformance INStartAudioCallIntent()
{
}

void protocol witness for CallingIntent.callGroups.modify in conformance INStartAudioCallIntent(void *a1, uint64_t a2, uint64_t a3)
{
  a1[2] = a2;
  a1[3] = a3;
  *a1 = 0;
  a1[1] = v3;
  OUTLINED_FUNCTION_16_9();
}

unint64_t specialized Array._checkSubscript(_:wasNativeTypeChecked:)(unint64_t result, char a2, uint64_t a3)
{
  if (a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8)) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

void outlined bridged method (mbgnn) of @objc INPerson.alternatives.setter(uint64_t a1, void *a2)
{
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INPerson);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [a2 setAlternatives:isa];
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A]())()
{
  uint64_t v1 = OUTLINED_FUNCTION_1_12();
  uint64_t v2 = OUTLINED_FUNCTION_2_13((uint64_t)v1);
  *(void *)(v0 + 32) = specialized Array.subscript.read(v2, v3, v4);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  uint64_t v1 = OUTLINED_FUNCTION_1_12();
  uint64_t v2 = OUTLINED_FUNCTION_2_13((uint64_t)v1);
  *(void *)(v0 + 32) = specialized Array.subscript.read(v2, v3, v4);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t v0;
  void *v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;

  uint64_t v1 = OUTLINED_FUNCTION_1_12();
  uint64_t v2 = (uint64_t *)OUTLINED_FUNCTION_2_13((uint64_t)v1);
  *(void *)(v0 + 32) = specialized Array.subscript.read(v2, v3, v4);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  uint64_t v1 = OUTLINED_FUNCTION_1_12();
  uint64_t v2 = OUTLINED_FUNCTION_2_13((uint64_t)v1);
  *(void *)(v0 + 32) = specialized Array.subscript.read(v2, v3, v4);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  uint64_t v1 = OUTLINED_FUNCTION_1_12();
  uint64_t v2 = OUTLINED_FUNCTION_2_13((uint64_t)v1);
  *(void *)(v0 + 32) = specialized Array.subscript.read(v2, v3, v4);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;

  uint64_t v1 = OUTLINED_FUNCTION_1_12();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_2_13((uint64_t)v1);
  *(void *)(v0 + 32) = specialized Array.subscript.read(v2, v3, v4);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

void protocol witness for Collection.subscript.read in conformance [A]specialized (void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t (*specialized Array.subscript.read(uint64_t a1, unint64_t a2, uint64_t a3))()
{
  OUTLINED_FUNCTION_0_9(a1, a2, a3);
  if (v4) {
    uint64_t v5 = OUTLINED_FUNCTION_3_16();
  }
  else {
    uint64_t v5 = (uint64_t)OUTLINED_FUNCTION_6_11();
  }
  *unint64_t v3 = v5;
  return Array.subscript.readspecialized ;
}

{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_0_9(a1, a2, a3);
  if (v4) {
    uint64_t v5 = OUTLINED_FUNCTION_3_16();
  }
  else {
    uint64_t v5 = OUTLINED_FUNCTION_17_3();
  }
  *unint64_t v3 = v5;
  return Array.subscript.readspecialized ;
}

{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_0_9(a1, a2, a3);
  if (v4) {
    uint64_t v5 = OUTLINED_FUNCTION_3_16();
  }
  else {
    uint64_t v5 = OUTLINED_FUNCTION_17_3();
  }
  *unint64_t v3 = v5;
  return Array.subscript.readspecialized ;
}

uint64_t Array.subscript.readspecialized ()
{
  return swift_release();
}

{
  return swift_unknownObjectRelease();
}

uint64_t _s27PhoneCallFlowDelegatePlugin12AnnotatedAppVSgWObTm_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined retain of Set<String>(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of String?(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of String?(uint64_t a1)
{
  return a1;
}

void sub_786F8(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_78704()
{
  return 16;
}

__n128 sub_78710(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t (*specialized Array.subscript.read(uint64_t *a1, unint64_t a2, uint64_t a3))()
{
  unint64_t v4 = a3 & 0xC000000000000001;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(a2, (a3 & 0xC000000000000001) == 0, a3);
  if (v4) {
    uint64_t v5 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    uint64_t v5 = swift_unknownObjectRetain();
  }
  *a1 = v5;
  return Array.subscript.readspecialized ;
}

void (*specialized Array.subscript.read(uint64_t a1, unint64_t a2, uint64_t a3))(id *a1)
{
  OUTLINED_FUNCTION_0_9(a1, a2, a3);
  if (v4) {
    uint64_t v5 = OUTLINED_FUNCTION_3_16();
  }
  else {
    uint64_t v5 = (uint64_t)OUTLINED_FUNCTION_6_11();
  }
  *unint64_t v3 = v5;
  return Array.subscript.readspecialized ;
}

uint64_t (*specialized Array.subscript.read(void *a1, unint64_t a2, uint64_t a3))()
{
  unint64_t v6 = a3 & 0xC000000000000001;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(a2, (a3 & 0xC000000000000001) == 0, a3);
  if (v6) {
    id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v7 = *(id *)(a3 + 8 * a2 + 32);
  }
  *a1 = v7;
  return Array.subscript.readspecialized ;
}

unint64_t OUTLINED_FUNCTION_0_9(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return specialized Array._checkSubscript(_:wasNativeTypeChecked:)(a2, (a3 & 0xC000000000000001) == 0, a3);
}

void *OUTLINED_FUNCTION_1_12()
{
  return malloc(0x28uLL);
}

uint64_t OUTLINED_FUNCTION_2_13(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_3_16()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

id OUTLINED_FUNCTION_6_11()
{
  uint64_t v3 = *(void **)(v0 + 8 * v1 + 32);
  return v3;
}

uint64_t OUTLINED_FUNCTION_7_13(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t OUTLINED_FUNCTION_17_3()
{
  return swift_retain();
}

id VoicemailRowCardSectionComponents.callRecord.getter()
{
  return *v0;
}

uint64_t VoicemailRowCardSectionComponents.textComponents.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of CallRecordDisplayTextComponents(v1 + 8, a1);
}

uint64_t outlined init with copy of CallRecordDisplayTextComponents(uint64_t a1, uint64_t a2)
{
  return a2;
}

id VoicemailRowCardSectionComponents.init(callRecord:deviceState:phoneCallDisplayTextCats:)@<X0>(void *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a1;
  a4[1] = a1;
  outlined init with take of AppSelectionSignalComponent(a2, (uint64_t)(a4 + 2));
  a4[7] = a3;

  return a1;
}

uint64_t CallHistoryRowCardSectionComponents.callerName.getter()
{
  [*v0 callRecordType];
  CallRecordDisplayTextComponents.callerNameText.getter();
  uint64_t v1 = static CasinoFactory.makeRichText(text:bold:maxLines:textColor:)();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t CallHistoryRowCardSectionComponents.callerHandleLabel.getter()
{
  uint64_t v1 = type metadata accessor for Locale();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = [*(id *)(v0 + 8) caller];
  if (v5)
  {
    unint64_t v6 = v5;
    id v7 = [v5 personHandle];

    if (v7)
    {
      id v8 = [v7 label];

      if (v8)
      {
        __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
        dispatch thunk of DeviceState.siriLocale.getter();
        v12[4] = Locale.identifier.getter();
        v12[5] = v9;
        v12[2] = 45;
        void v12[3] = 0xE100000000000000;
        v12[0] = 95;
        v12[1] = 0xE100000000000000;
        lazy protocol witness table accessor for type String and conformance String();
        StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
        static LabelMappingUtil.translateINPersonHandleLabel(_:languageCode:)();
        swift_bridgeObjectRelease();
      }
    }
  }
  uint64_t v10 = static CasinoFactory.makeRichText(text:bold:maxLines:textColor:)();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t CallHistoryRowCardSectionComponents.callDate.getter()
{
  CallRecordDisplayTextComponents.callDateText.getter();
  uint64_t v0 = static CasinoFactory.makeRichText(text:bold:maxLines:textColor:)();
  swift_bridgeObjectRelease();
  return v0;
}

id CallHistoryRowCardSectionComponents.image.getter()
{
  id v1 = *v0;
  if ([*v0 callRecordType] == (char *)&dword_0 + 1)
  {
    if ([v1 callCapability] == (char *)&dword_0 + 2)
    {
      if (one-time initialization token for videoCallImage != -1) {
        swift_once();
      }
      uint64_t v2 = &static CallHistoryImage.videoCallImage;
    }
    else
    {
      if (one-time initialization token for outgoingCallImage != -1) {
        swift_once();
      }
      uint64_t v2 = &static CallHistoryImage.outgoingCallImage;
    }
  }
  else
  {
    if (one-time initialization token for emptyImage != -1) {
      swift_once();
    }
    uint64_t v2 = &static CallHistoryImage.emptyImage;
  }
  uint64_t v3 = (void *)*v2;

  return v3;
}

uint64_t destroy for CallHistoryRowCardSectionComponents(id *a1)
{
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 2));

  return swift_release();
}

uint64_t initializeWithCopy for CallHistoryRowCardSectionComponents(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = a1 + 16;
  uint64_t v7 = a2 + 16;
  long long v8 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v8;
  uint64_t v9 = v8;
  uint64_t v10 = **(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8);
  id v11 = v4;
  id v12 = v5;
  v10(v6, v7, v9);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CallHistoryRowCardSectionComponents(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void **)(a2 + 8);
  long long v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for CallHistoryRowCardSectionComponents(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  id v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CallHistoryRowCardSectionComponents(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 64))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CallHistoryRowCardSectionComponents(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CallHistoryRowCardSectionComponents()
{
  return &type metadata for CallHistoryRowCardSectionComponents;
}

void MicrophoneControlFlow.executeAction(currentCall:)(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  char v5 = *(unsigned char *)(v2 + 56);
  if (PhoneCallControlAction.isMicrophoneAction.getter(v5))
  {
    uint64_t v37 = a2;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v7 = *(uint64_t (**)(void))(a1 + 96);
    OUTLINED_FUNCTION_2_14();
    char v38 = v7();
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.siriPhone);
    id v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      char v11 = v5;
      id v12 = v7;
      uint64_t v13 = ObjectType;
      os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v14 = 67109120;
      char v15 = v38;
      OUTLINED_FUNCTION_1_13();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_0, v9, v10, "#MicrophoneControlFlow isMicMuted = %{BOOL}d", v14, 8u);
      uint64_t ObjectType = v13;
      uint64_t v7 = v12;
      char v5 = v11;
      OUTLINED_FUNCTION_6();
    }
    else
    {

      char v15 = v38;
    }
    unint64_t v21 = PhoneCallControlAction.rawValue.getter(v5);
    if (v15)
    {
      if (v21 != 0xD000000000000010 || v22 != 0x800000000048C400) {
        goto LABEL_20;
      }
    }
    else if (v21 != 0x7263694D6574756DLL || v22 != 0xEE00656E6F68706FLL)
    {
LABEL_20:
      char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v24 & 1) == 0)
      {
        swift_retain_n();
        uint64_t v25 = Logger.logObject.getter();
        os_log_type_t v26 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v25, v26))
        {
          uint64_t v27 = swift_slowAlloc();
          v39[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v27 = 136315394;
          if (v38) {
            uint64_t v28 = 0x646574756DLL;
          }
          else {
            uint64_t v28 = 0x646574756D6E75;
          }
          if (v38) {
            unint64_t v29 = 0xE500000000000000;
          }
          else {
            unint64_t v29 = 0xE700000000000000;
          }
          uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, v39);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v27 + 12) = 2080;
          unint64_t v30 = PhoneCallControlAction.description.getter(v5);
          uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, v39);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_0, v25, v26, "#MicrophoneControlFlow not changing mic state because mic is %s and action is %s", (uint8_t *)v27, 0x16u);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_6();
          OUTLINED_FUNCTION_6();
        }
        else
        {

          swift_release_n();
        }
        goto LABEL_34;
      }
LABEL_30:
      uint64_t v32 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a1 + 112))(v39, ObjectType, a1);
      *uint64_t v33 = !*v33;
      v32(v39, 0);
      swift_unknownObjectRetain();
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v34, v35))
      {
        char v36 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)char v36 = 67109120;
        OUTLINED_FUNCTION_2_14();
        v7();
        OUTLINED_FUNCTION_1_13();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_unknownObjectRelease();
        _os_log_impl(&dword_0, v34, v35, "#MicrophoneControlFlow microphone is muted: %{BOOL}d", v36, 8u);
        OUTLINED_FUNCTION_6();
      }
      else
      {

        swift_unknownObjectRelease();
      }
LABEL_34:
      *(void *)uint64_t v37 = 0;
      *(void *)(v37 + 8) = 0;
      *(void *)(v37 + 16) = 0;
      *(_OWORD *)(v37 + 24) = xmmword_469B30;
      return;
    }
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.siriPhone);
  unint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl(&dword_0, v17, v18, "#MicrophoneControlFlow used to handle a call control not related to the microphone.", v19, 2u);
    OUTLINED_FUNCTION_6();
  }

  lazy protocol witness table accessor for type ActionableCallControlFlow.ActionableCallControlFlowError and conformance ActionableCallControlFlow.ActionableCallControlFlowError();
  swift_allocError();
  *uint64_t v20 = v5;
  v20[40] = 0;
  swift_willThrow();
}

uint64_t SwitchToFaceTimeControlFlow.__allocating_init(state:sharedGlobals:action:phoneCallControlCATsSimple:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  return ActionableCallControlFlow.init(state:sharedGlobals:action:phoneCallControlCATsSimple:)(a1, a2, a3, a4);
}

uint64_t SwitchToFaceTimeControlFlow.__deallocating_deinit()
{
  ActionableCallControlFlow.deinit();

  return swift_deallocClassInstance();
}

unint64_t lazy protocol witness table accessor for type ActionableCallControlFlow.ActionableCallControlFlowError and conformance ActionableCallControlFlow.ActionableCallControlFlowError()
{
  unint64_t result = lazy protocol witness table cache variable for type ActionableCallControlFlow.ActionableCallControlFlowError and conformance ActionableCallControlFlow.ActionableCallControlFlowError;
  if (!lazy protocol witness table cache variable for type ActionableCallControlFlow.ActionableCallControlFlowError and conformance ActionableCallControlFlow.ActionableCallControlFlowError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionableCallControlFlow.ActionableCallControlFlowError and conformance ActionableCallControlFlow.ActionableCallControlFlowError);
  }
  return result;
}

uint64_t type metadata accessor for MicrophoneControlFlow()
{
  return self;
}

uint64_t specialized Collection.first.getter@<X0>(_OWORD *a1@<X8>)
{
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  char v2 = static AnyIndex.== infix(_:_:)();
  swift_unknownObjectRelease();
  if (v2)
  {
    uint64_t result = swift_unknownObjectRelease();
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  else
  {
    dispatch thunk of _AnyCollectionBox.subscript.getter();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t SKTransformer.sharedGlobals.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SharedGlobalsProviding(v1, a1);
}

uint64_t PhoneContactDisplayHintFactory.deviceState.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SharedGlobalsProviding(v1 + 40, a1);
}

uint64_t ContactUnsetRelationshipFlowStrategy.labelTemplates.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SharedGlobalsProviding(v1 + 80, a1);
}

uint64_t ContactUnsetRelationshipFlowStrategy.unsetRelationshipTemplates.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SharedGlobalsProviding(v1 + 120, a1);
}

uint64_t ContactUnsetRelationshipFlowStrategy.displayTextCatFamily.getter()
{
  return swift_retain();
}

uint64_t SearchCallHistorySharedGlobals.callHistoryPromptDialogProvider.getter()
{
  return swift_retain();
}

uint64_t SearchCallHistorySharedGlobals.searchCallHistoryCATs.getter()
{
  return swift_retain();
}

uint64_t ContactUnsetRelationshipFlowStrategy.init(sharedGlobals:contactStore:labelTemplates:unsetRelationshipTemplates:displayTextCatFamily:phoneCallCommonCats:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  outlined init with copy of SharedGlobalsProviding(a1, (uint64_t)a7);
  outlined init with copy of SharedGlobalsProviding(a2, (uint64_t)(a7 + 5));
  outlined init with copy of SharedGlobalsProviding(a3, (uint64_t)(a7 + 10));
  outlined init with copy of SharedGlobalsProviding(a4, (uint64_t)(a7 + 15));
  a7[20] = a5;
  a7[21] = a6;
  type metadata accessor for CNContactStore(255, (unint64_t *)&lazy cache variable for type metadata for INIntentResponse);
  type metadata accessor for PhoneCallBaseCatTemplatingService();
  outlined init with copy of SharedGlobalsProviding(a1, (uint64_t)v25);
  outlined init with copy of SharedGlobalsProviding(a3, (uint64_t)v24);
  OUTLINED_FUNCTION_34_0();
  default argument 0 of PhoneCallBaseCatTemplatingService.init(ducFamily:sharedGlobals:displayTextCats:phoneCallCommonCats:appInfoBuilder:labelTemplating:startCallCats:)();
  uint64_t v14 = OUTLINED_FUNCTION_34_0();
  default argument 4 of PhoneCallBaseCatTemplatingService.init(ducFamily:sharedGlobals:displayTextCats:phoneCallCommonCats:appInfoBuilder:labelTemplating:startCallCats:)(v16, v14, v15);
  swift_retain();
  swift_retain();
  uint64_t v17 = OUTLINED_FUNCTION_34_0();
  default argument 6 of PhoneCallBaseCatTemplatingService.init(ducFamily:sharedGlobals:displayTextCats:phoneCallCommonCats:appInfoBuilder:labelTemplating:startCallCats:)(v17, v18);
  PhoneCallBaseCatTemplatingService.__allocating_init(ducFamily:sharedGlobals:displayTextCats:phoneCallCommonCats:appInfoBuilder:labelTemplating:startCallCats:)();
  uint64_t v20 = v19;
  __swift_destroy_boxed_opaque_existential_1(a4);
  __swift_destroy_boxed_opaque_existential_1(a3);
  __swift_destroy_boxed_opaque_existential_1(a2);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1(a1);
  a7[22] = v20;
  return result;
}

uint64_t ContactUnsetRelationshipFlowStrategy.parseRequestedRelationship(resolveRecord:)()
{
  OUTLINED_FUNCTION_1_0();
  v0[4] = v1;
  v0[5] = v2;
  v0[3] = v3;
  uint64_t v4 = type metadata accessor for PhoneError();
  v0[6] = v4;
  OUTLINED_FUNCTION_11_0(v4);
  uint64_t v5 = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_41_1(v5);
  uint64_t v6 = type metadata accessor for ParameterIdentifier();
  v0[8] = v6;
  OUTLINED_FUNCTION_19_0(v6);
  v0[9] = v7;
  v0[10] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t ContactUnsetRelationshipFlowStrategy.parseRequestedRelationship(resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  OUTLINED_FUNCTION_29();
  a21 = v23;
  a22 = v24;
  a20 = v22;
  uint64_t v25 = *(void *)(v22 + 40);
  uint64_t v26 = *(void *)(v25 + 16);
  type metadata accessor for ParameterResolutionRecord();
  ParameterResolutionRecord.parameter.getter();
  uint64_t v27 = ParameterIdentifier.multicardinalIndex.getter();
  char v29 = v28;
  uint64_t v30 = OUTLINED_FUNCTION_38();
  v31(v30);
  if (v29) {
    uint64_t v32 = 0;
  }
  else {
    uint64_t v32 = v27;
  }
  uint64_t v33 = (void *)ParameterResolutionRecord.intent.getter();
  unint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v25 + 24) + 8) + 8))(v26);

  if (!v34) {
    goto LABEL_17;
  }
  if (v32 < 0) {
    goto LABEL_16;
  }
  if (v34 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v35 = *(void *)((char *)&dword_10 + (v34 & 0xFFFFFFFFFFFFFF8));
  }
  if (v32 >= v35)
  {
LABEL_16:
    swift_bridgeObjectRelease();
LABEL_17:
    uint64_t v46 = *(_OWORD **)(v22 + 56);
    *uint64_t v46 = xmmword_467750;
    swift_storeEnumTagMultiPayload();
    lazy protocol witness table accessor for type PhoneError and conformance PhoneError((unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError, (void (*)(uint64_t))type metadata accessor for PhoneError);
    OUTLINED_FUNCTION_20_0();
    PhoneError.logged()(v47);
    outlined destroy of PhoneError((uint64_t)v46);
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_35_3();
    goto LABEL_18;
  }
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v32, (v34 & 0xC000000000000001) == 0, v34);
  if ((v34 & 0xC000000000000001) != 0)
  {
    OUTLINED_FUNCTION_7_0();
    id v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    id v36 = *(id *)(v34 + 8 * v32 + 32);
  }
  uint64_t v37 = v36;
  swift_bridgeObjectRelease();
  id v38 = [v37 relationship];

  if (!v38) {
    goto LABEL_17;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v39 = type metadata accessor for Logger();
  __swift_project_value_buffer(v39, (uint64_t)static Logger.siriPhone);
  id v40 = v38;
  char v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v41, v42))
  {
    uint64_t v43 = (uint8_t *)OUTLINED_FUNCTION_47();
    a10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v43 = 136315138;
    uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v22 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, &a10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_0, v41, v42, "#ContactUnsetRelationshipFlowStrategy Detected unset relationship %s", v43, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
  }
  static RelationshipLabel.from(intentsRelationship:)(*(uint64_t **)(v22 + 24));

  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
LABEL_18:
  OUTLINED_FUNCTION_28_1();
  return v49(v48, v49, v50, v51, v52, v53, v54, v55, a9, a10, a11, a12, a13, a14);
}

uint64_t outlined destroy of PhoneError(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PhoneError();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t ContactUnsetRelationshipFlowStrategy.applyPersonToIntent(person:requestedRelationship:resolveRecord:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[33] = v2;
  v1[34] = v0;
  v1[31] = v3;
  v1[32] = v4;
  v1[30] = v5;
  uint64_t v6 = type metadata accessor for PhoneError();
  v1[35] = v6;
  OUTLINED_FUNCTION_11_0(v6);
  v1[36] = OUTLINED_FUNCTION_35();
  uint64_t v7 = type metadata accessor for ParameterIdentifier();
  v1[37] = v7;
  OUTLINED_FUNCTION_19_0(v7);
  v1[38] = v8;
  v1[39] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  void (*v6)(void);
  uint64_t v7;
  INPerson v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  id v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  _OWORD *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;

  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 320) = v2;
  type metadata accessor for ParameterResolutionRecord();
  ParameterResolutionRecord.parameter.getter();
  uint64_t v3 = ParameterIdentifier.multicardinalIndex.getter();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_39_1();
  OUTLINED_FUNCTION_36_5();
  v6();
  if (v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v3;
  }
  v8.super.Class isa = SAPerson.toINPerson()().super.isa;
  *(INPerson *)(v0 + 328) = v8;
  uint64_t v9 = (void *)ParameterResolutionRecord.intent.getter();
  uint64_t v10 = *(void *)(*(void *)(v1 + 24) + 8);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v2, v10);

  uint64_t v12 = OUTLINED_FUNCTION_39_1();
  uint64_t v14 = static DisambiguationItemUtils.getUpdatedPersonList(selectedIndex:selectedPerson:persons:)(v12, v13, v11);
  swift_bridgeObjectRelease();
  if (!(v14 >> 62))
  {
    if (*(void *)((char *)&dword_10 + (v14 & 0xFFFFFFFFFFFFFF8))) {
      goto LABEL_6;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)static Logger.siriPhone);
    id v36 = Logger.logObject.getter();
    uint64_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      id v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v38 = 0;
      _os_log_impl(&dword_0, v36, v37, "#ContactUnsetRelationshipFlowStrategy List is empty after updating contacts list", v38, 2u);
      OUTLINED_FUNCTION_6();
    }
    uint64_t v39 = *(_OWORD **)(v0 + 288);

    *uint64_t v39 = xmmword_467750;
    OUTLINED_FUNCTION_38();
    swift_storeEnumTagMultiPayload();
    lazy protocol witness table accessor for type PhoneError and conformance PhoneError((unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError, (void (*)(uint64_t))type metadata accessor for PhoneError);
    OUTLINED_FUNCTION_20_0();
    PhoneError.logged()(v40);
    outlined destroy of PhoneError((uint64_t)v39);
    swift_willThrow();

    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_35_3();
    goto LABEL_24;
  }
  swift_bridgeObjectRetain();
  unint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v34) {
    goto LABEL_19;
  }
LABEL_6:
  uint64_t v15 = (void *)ParameterResolutionRecord.intent.getter();
  *(void *)(v0 + 336) = v15;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v10 + 16))(v14, v2, v10);
  swift_bridgeObjectRelease();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  *(void *)(v0 + 344) = __swift_project_value_buffer(v16, (uint64_t)static Logger.siriPhone);
  uint64_t v17 = v15;
  uint64_t v18 = Logger.logObject.getter();
  uint64_t v19 = static os_log_type_t.debug.getter();
  os_log_type_t v42 = v7;
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)OUTLINED_FUNCTION_47();
    char v41 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 138412290;
    *(void *)(v0 + 232) = v17;
    unint64_t v21 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *char v41 = v17;

    _os_log_impl(&dword_0, v18, v19, "#ContactUnsetRelationshipFlowStrategy updatedIntent: %@", v20, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
  }
  if (INPerson.hasHandleValue.getter())
  {
    OUTLINED_FUNCTION_44_2();
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INPerson);
    IntentPromptAnswer.init(answeredValue:updatedIntent:)();
    uint64_t v22 = type metadata accessor for IntentPromptAnswer();
    OUTLINED_FUNCTION_43_3(v22);
    swift_task_dealloc();
    OUTLINED_FUNCTION_6_0();
LABEL_24:
    return v23();
  }
  uint64_t v24 = Logger.logObject.getter();
  uint64_t v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl(&dword_0, v24, v25, "#ContactUnsetRelationshipFlowStrategy Person has no handle value, so run ContactResolution", v26, 2u);
    OUTLINED_FUNCTION_6();
  }
  uint64_t v27 = *(void *)(v0 + 272);

  *(void *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ContactQuery>);
  char v28 = type metadata accessor for ContactQuery();
  OUTLINED_FUNCTION_19_0(v28);
  char v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_467710;
  INPerson.toContactQuery()();
  *(void *)(v0 + 56) = _swiftEmptyArrayStorage;
  *(unsigned char *)(v0 + 64) = 2;
  *(void *)(v0 + 72) = 0;
  *(void *)(v0 + 80) = 0x1123030905050204;
  *(_WORD *)(v0 + 88) = 518;
  *(void *)(v0 + 96) = _swiftEmptyArrayStorage;
  *(void *)(v0 + 104) = v29;
  *(void *)(v0 + 112) = _swiftEmptyArrayStorage;
  uint64_t v30 = ContactUnsetRelationshipFlowStrategy.app.getter();
  static ContactSlotResolver.makeMulticardinalResolver<A>(multicardinalIndex:rchFlowContext:sharedGlobals:)(v42, 0, v30, 0, 0, v27, v0 + 120);
  swift_release();
  *(void *)(v0 + 208) = &type metadata for PhoneCallDirectInvocationNLIntent;
  *(void *)(v0 + 216) = &protocol witness table for PhoneCallDirectInvocationNLIntent;
  unint64_t v31 = swift_allocObject();
  *(void *)(v0 + 184) = v31;
  outlined init with copy of PhoneCallDirectInvocationNLIntent(v0 + 16, v31 + 16);
  uint64_t v32 = (void *)swift_task_alloc();
  *(void *)(v0 + 352) = v32;
  *(void *)(v0 + 360) = type metadata accessor for AnyIntentResolver();
  *uint64_t v32 = v0;
  v32[1] = ContactUnsetRelationshipFlowStrategy.applyPersonToIntent(person:requestedRelationship:resolveRecord:);
  return AnyIntentResolver.resolve(skIntent:nlIntent:)((uint64_t)v17, v0 + 184);
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v8 = v7;
  *(void *)(v5 + 368) = v0;
  swift_task_dealloc();
  if (!v0)
  {

    __swift_destroy_boxed_opaque_existential_1(v5 + 184);
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  void *v1;
  void (*v2)(void);
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = *(void **)(v0 + 336);

  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_39_1();
  OUTLINED_FUNCTION_11();
  v2();
  outlined destroy of PhoneCallDirectInvocationNLIntent(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 184);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v3();
}

uint64_t ContactUnsetRelationshipFlowStrategy.applyPersonToIntent(person:requestedRelationship:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  OUTLINED_FUNCTION_30();
  id v18 = *(id *)(v16 + 336);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    unint64_t v21 = *(void **)(v16 + 336);
    uint64_t v22 = (uint8_t *)OUTLINED_FUNCTION_47();
    a9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 138412290;
    uint64_t v17 = v22 + 4;
    *(void *)(v16 + 224) = v21;
    id v23 = v21;
    OUTLINED_FUNCTION_34_0();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *a9 = v21;

    _os_log_impl(&dword_0, v19, v20, "#ContactUnsetRelationshipFlowStrategy CRR-updatedIntent %@", v22, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
    uint64_t v24 = *(void **)(v16 + 336);
  }
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_11();
  v25();
  outlined destroy of PhoneCallDirectInvocationNLIntent(v16 + 16);
  OUTLINED_FUNCTION_44_2();
  uint64_t v36 = type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INPerson);
  IntentPromptAnswer.init(answeredValue:updatedIntent:)();
  uint64_t v26 = type metadata accessor for IntentPromptAnswer();
  OUTLINED_FUNCTION_43_3(v26);
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_27_3();
  return v28(v27, v28, v29, v30, v31, v32, v33, v34, a9, v17, a11, a12, v36, a14, a15, a16);
}

uint64_t ContactUnsetRelationshipFlowStrategy.app.getter()
{
  void (*v4)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v5;
  void v7[5];
  long long v8;
  void v9[4];
  uint64_t v10;
  uint64_t v11;
  unsigned char __dst[176];

  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  memcpy(__dst, &static PhoneCallFeatureFlags.instance, sizeof(__dst));
  type metadata accessor for PhoneCallFeatureManager();
  uint64_t inited = swift_initStackObject();
  v9[1] = &type metadata for PhoneCallFeatureFlags;
  v9[2] = &protocol witness table for PhoneCallFeatureFlags;
  *(void *)&uint64_t v8 = swift_allocObject();
  memcpy((void *)(v8 + 16), __dst, 0xB0uLL);
  outlined init with take of AppSelectionSignalComponent(&v8, inited + 16);
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v2);
  uint64_t v4 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 8);
  outlined retain of PhoneCallFeatureFlags((uint64_t)__dst);
  v4(v7, v2, v3);
  FirstPartyAnnotatedAppStore.getDefaultApp(for:)(v7, (uint64_t)&v8);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  uint64_t v11 = *((void *)&v8 + 1);
  uint64_t v5 = v8;
  outlined release of Set<String>((uint64_t)&v11);
  outlined init with take of String?((uint64_t)v9, (uint64_t)v7);
  outlined release of String?((uint64_t)v7);
  uint64_t v10 = v9[3];
  outlined release of Set<String>((uint64_t)&v10);
  return v5;
}

uint64_t ContactUnsetRelationshipFlowStrategy.makeMeCardNotFoundResponse(requestedRelationship:resolveRecord:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[20] = v2;
  v1[21] = v0;
  v1[18] = v3;
  v1[19] = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_11_0(v5);
  v1[22] = OUTLINED_FUNCTION_35();
  uint64_t v6 = type metadata accessor for TemplatingResult();
  v1[23] = v6;
  OUTLINED_FUNCTION_19_0(v6);
  v1[24] = v7;
  v1[25] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_16_10(*(void **)(v0 + 168));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 208) = v1;
  void *v1 = v0;
  v1[1] = ContactUnsetRelationshipFlowStrategy.makeMeCardNotFoundResponse(requestedRelationship:resolveRecord:);
  OUTLINED_FUNCTION_37_3();
  return v2();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v5 = v4;
  *(void *)(v6 + 216) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v5 = v4;
  *(void *)(v6 + 240) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v0();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  (*(void (**)(void, void))(v0[24] + 8))(v0[25], v0[23]);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v1();
}

uint64_t ContactUnsetRelationshipFlowStrategy.makeMeCardNotFoundResponse(requestedRelationship:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v14 = v12[20];
  uint64_t v13 = v12[21];
  uint64_t v15 = (void *)swift_task_alloc();
  v12[28] = v15;
  uint64_t v15[2] = *(void *)(v14 + 16);
  void v15[3] = *(void *)(v14 + 24);
  void v15[4] = v13;
  uint64_t v16 = (void *)swift_task_alloc();
  v12[29] = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SAAceView]);
  *uint64_t v16 = v12;
  v16[1] = ContactUnsetRelationshipFlowStrategy.makeMeCardNotFoundResponse(requestedRelationship:resolveRecord:);
  OUTLINED_FUNCTION_11_1();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v17, v18, v19, 0xD000000000000040, v20, v21, v15, v22, a9, a10, a11, a12);
}

uint64_t ContactUnsetRelationshipFlowStrategy.makeMeCardNotFoundResponse(requestedRelationship:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  OUTLINED_FUNCTION_30();
  uint64_t v17 = *(void *)(v16 + 176);
  uint64_t v36 = *(void *)(v16 + 200);
  uint64_t v37 = *(void *)(v16 + 184);
  uint64_t v18 = *(void **)(v16 + 168);
  uint64_t v19 = *(uint64_t **)(v16 + 144);
  uint64_t v35 = *(void *)(v16 + 136);
  __swift_project_boxed_opaque_existential_1(v18, v18[3]);
  OUTLINED_FUNCTION_32_5();
  OUTLINED_FUNCTION_24_2();
  v20();
  __swift_project_boxed_opaque_existential_1(v18, v18[3]);
  OUTLINED_FUNCTION_24_2();
  v21();
  __swift_project_boxed_opaque_existential_1((void *)(v16 + 56), *(void *)(v16 + 80));
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  OUTLINED_FUNCTION_22_3();
  uint64_t v22 = type metadata accessor for NLContextUpdate();
  OUTLINED_FUNCTION_15_5(v22);
  *(double *)&long long v23 = OUTLINED_FUNCTION_33_2();
  *(_OWORD *)(v16 + 96) = v23;
  uint64_t v19[3] = v24;
  v19[4] = (uint64_t)&protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v19);
  static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?(v16 + 96, &demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of FlowActivity?(v17, &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_destroy_boxed_opaque_existential_1(v16 + 16);
  OUTLINED_FUNCTION_36_5();
  v25();
  __swift_destroy_boxed_opaque_existential_1(v16 + 56);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_27_3();
  return v27(v26, v27, v28, v29, v30, v31, v32, v33, v16 + 96, a10, v35, v36, v37, a14, a15, a16);
}

uint64_t closure #1 in ContactUnsetRelationshipFlowStrategy.makeMeCardNotFoundResponse(requestedRelationship:resolveRecord:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[SAAceView], Error>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = *(void *)(a2 + 176);
  type metadata accessor for CNContactStore(255, (unint64_t *)&lazy cache variable for type metadata for INIntentResponse);
  v13[3] = type metadata accessor for PhoneCallBaseCatTemplatingService();
  v13[4] = &protocol witness table for PhoneCallBaseCatTemplatingService<A, B>;
  v13[0] = v7;
  swift_retain();
  static StartCallViewBuilders.makeSiriSettingsButton(templatingService:sharedGlobals:)((uint64_t)v13, a2, v14);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  uint64_t v8 = v15;
  uint64_t v9 = v16;
  __swift_project_boxed_opaque_existential_1(v14, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v10 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v11 + v10, (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  IdiomSensitiveViewBuilding.makeViews(_:)((uint64_t)partial apply for closure #1 in closure #1 in ContactUnsetRelationshipFlowStrategy.makeMeCardNotFoundResponse(requestedRelationship:resolveRecord:), v11, v8, v9);
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
}

uint64_t closure #1 in closure #1 in ContactUnsetRelationshipFlowStrategy.makeMeCardNotFoundResponse(requestedRelationship:resolveRecord:)(uint64_t a1, char a2)
{
  if (a2)
  {
    swift_errorRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[SAAceView], Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[SAAceView], Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t ContactUnsetRelationshipFlowStrategy.makeUnsupportedPlatformResponse(requestedRelationship:resolveRecord:)()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v5;
  *uint64_t v5 = v0;
  v5[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return static UnsetRelationshipOutputFactory.makeUnsupportedPlatformResponse(requestedRelationship:)(v4, v2);
}

uint64_t ContactUnsetRelationshipFlowStrategy.makeErrorResponse(error:app:intent:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[9] = v2;
  v1[10] = v0;
  uint64_t v3 = type metadata accessor for CATOption();
  OUTLINED_FUNCTION_11_0(v3);
  v1[11] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v4, v5, v6);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v6)(void *);
  uint64_t v7;

  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = v0[10];
  type metadata accessor for StartCallCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v2 = CATWrapperSimple.__allocating_init(options:globals:)();
  uint64_t v3 = static CommonOutputs.genericError(sharedGlobals:startCallCATsSimple:)(v1, v2);
  v0[12] = v3;
  swift_release();
  uint64_t v6 = (uint64_t (*)(void *))(*(void *)(*(void *)v3 + 128) + **(int **)(*(void *)v3 + 128));
  uint64_t v4 = (void *)swift_task_alloc();
  v0[13] = v4;
  void *v4 = v0;
  v4[1] = ContactUnsetRelationshipFlowStrategy.makeErrorResponse(error:app:intent:);
  return v6(v0 + 2);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_16_1();
  if (*(unsigned char *)(v0 + 56))
  {
    *(void *)(v0 + 64) = *(void *)(v0 + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    swift_willThrowTypedImpl();
    swift_task_dealloc();
    OUTLINED_FUNCTION_47_0();
  }
  else
  {
    outlined init with take of AppSelectionSignalComponent((long long *)(v0 + 16), *(void *)(v0 + 72));
    swift_task_dealloc();
    OUTLINED_FUNCTION_6_0();
  }
  return v1();
}

uint64_t ContactUnsetRelationshipFlowStrategy.actionForPromptForNameInput(_:resolveRecord:)()
{
  return ContactUnsetRelationshipFlowStrategy.actionForInput(_:)();
}

uint64_t ContactUnsetRelationshipFlowStrategy.actionForInput(_:)()
{
  uint64_t v1 = type metadata accessor for Parse();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = &v8[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of SharedGlobalsProviding(v0, (uint64_t)v8);
  Input.parse.getter();
  unsigned __int8 v5 = ContactPromptResponseParser.parseResponse(from:)((uint64_t)v4);
  (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
  outlined destroy of ContactPromptResponseParser((uint64_t)v8);
  if (v5 - 5 < 2) {
    return static ActionForInput.ignore()();
  }
  if (v5 - 1 > 1) {
    return static ActionForInput.handle()();
  }
  return static ActionForInput.cancel()();
}

uint64_t ContactUnsetRelationshipFlowStrategy.parseUnsetRelationshipPersonFromResponse(input:resolveRecord:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[54] = v2;
  v1[55] = v0;
  v1[53] = v3;
  uint64_t v4 = type metadata accessor for UnsetRelationshipPerson();
  v1[56] = v4;
  OUTLINED_FUNCTION_19_0(v4);
  v1[57] = v5;
  v1[58] = swift_task_alloc();
  v1[59] = swift_task_alloc();
  v1[60] = swift_task_alloc();
  v1[61] = swift_task_alloc();
  v1[62] = swift_task_alloc();
  v1[63] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Parse();
  v1[64] = v6;
  OUTLINED_FUNCTION_19_0(v6);
  v1[65] = v7;
  v1[66] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  unint64_t v71;
  void (*v72)(uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t (*v106)(void);
  NSObject *log;
  os_log_type_t type;
  _OWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;

  id v112 = v0;
  uint64_t v1 = *(void *)(v0 + 528);
  uint64_t v2 = *(void **)(v0 + 440);
  uint64_t v3 = v2[3];
  uint64_t v4 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 72))(v3, v4);
  Input.parse.getter();
  (*(void (**)(uint64_t))(*(void *)v5 + 192))(v1);
  swift_release();
  uint64_t v6 = OUTLINED_FUNCTION_39_1();
  v7(v6);
  if (*(void *)(v0 + 80))
  {
    outlined init with take of AppSelectionSignalComponent((long long *)(v0 + 56), v0 + 16);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v8 = OUTLINED_FUNCTION_19_8();
    uint64_t v10 = *(void *)(v9(v8) + 16);
    swift_bridgeObjectRelease();
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v11 = OUTLINED_FUNCTION_19_8();
    uint64_t v13 = v12(v11);
    uint64_t v110 = (_OWORD *)(v0 + 96);
    if (v10 == 1)
    {
      specialized Collection.first.getter(v13, v0 + 96);
      swift_bridgeObjectRelease();
      uint64_t v14 = v0 + 96;
    }
    else
    {
      uint64_t v21 = *(void *)(v13 + 16);
      if (v21)
      {
        uint64_t v22 = v13 + 32;
        swift_bridgeObjectRetain();
        while (1)
        {
          outlined init with copy of SharedGlobalsProviding(v22, v0 + 136);
          __swift_project_boxed_opaque_existential_1((void *)(v0 + 136), *(void *)(v0 + 160));
          long long v23 = OUTLINED_FUNCTION_34_0();
          uint64_t v25 = v24(v23);
          if (v26)
          {
            uint64_t v27 = v25;
            uint64_t v28 = v26;
            swift_bridgeObjectRelease();
            uint64_t v29 = HIBYTE(v28) & 0xF;
            if ((v28 & 0x2000000000000000) == 0) {
              uint64_t v29 = v27 & 0xFFFFFFFFFFFFLL;
            }
            if (v29) {
              break;
            }
          }
          __swift_destroy_boxed_opaque_existential_1(v0 + 136);
          v22 += 40;
          if (!--v21)
          {
            swift_bridgeObjectRelease();
            goto LABEL_17;
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v14 = v0 + 96;
        outlined init with take of AppSelectionSignalComponent((long long *)(v0 + 136), (uint64_t)v110);
      }
      else
      {
LABEL_17:
        uint64_t v14 = v0 + 96;
        *(void *)(v0 + 128) = 0;
        char *v110 = 0u;
        *(_OWORD *)(v0 + 112) = 0u;
      }
      swift_bridgeObjectRelease();
    }
    outlined init with copy of SiriPhoneContact?(v14, v0 + 176, &demangling cache variable for type metadata for SiriPhoneContact?);
    uint64_t v30 = *(void *)(v0 + 200);
    if (v30)
    {
      uint64_t v31 = *(void *)(v0 + 208);
      uint64_t v32 = (void *)OUTLINED_FUNCTION_7_0();
      __swift_project_boxed_opaque_existential_1(v32, v33);
      uint64_t v34 = default argument 3 of SAUISayIt.init(message:dialogIdentifier:canUseServerTTS:listenAfterSpeaking:)(v30, v31);
      uint64_t v35 = OUTLINED_FUNCTION_42_2(v34);
      SiriPhoneContact.getFirstName(filteredAlternatives:)(v35);
      __swift_destroy_boxed_opaque_existential_1(v0 + 176);
    }
    else
    {
      outlined destroy of FlowActivity?(v0 + 176, &demangling cache variable for type metadata for SiriPhoneContact?);
    }
    outlined init with copy of SiriPhoneContact?(v14, v0 + 216, &demangling cache variable for type metadata for SiriPhoneContact?);
    uint64_t v36 = *(void *)(v0 + 240);
    if (v36)
    {
      uint64_t v37 = *(void *)(v0 + 248);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 216), *(void *)(v0 + 240));
      id v38 = default argument 3 of SAUISayIt.init(message:dialogIdentifier:canUseServerTTS:listenAfterSpeaking:)(v36, v37);
      SiriPhoneContact.getLastName(filteredAlternatives:)(v38 & 1);
      __swift_destroy_boxed_opaque_existential_1(v0 + 216);
    }
    else
    {
      outlined destroy of FlowActivity?(v0 + 216, &demangling cache variable for type metadata for SiriPhoneContact?);
    }
    outlined init with copy of SiriPhoneContact?(v14, v0 + 256, &demangling cache variable for type metadata for SiriPhoneContact?);
    uint64_t v39 = *(void *)(v0 + 280);
    if (v39)
    {
      id v40 = *(void *)(v0 + 288);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 256), *(void *)(v0 + 280));
      char v41 = default argument 3 of SAUISayIt.init(message:dialogIdentifier:canUseServerTTS:listenAfterSpeaking:)(v39, v40);
      os_log_type_t v42 = OUTLINED_FUNCTION_42_2(v41);
      SiriPhoneContact.getMiddleName(filteredAlternatives:)(v42);
      __swift_destroy_boxed_opaque_existential_1(v0 + 256);
    }
    else
    {
      outlined destroy of FlowActivity?(v0 + 256, &demangling cache variable for type metadata for SiriPhoneContact?);
    }
    outlined init with copy of SiriPhoneContact?((uint64_t)v110, v0 + 296, &demangling cache variable for type metadata for SiriPhoneContact?);
    uint64_t v43 = *(void *)(v0 + 320);
    if (v43)
    {
      uint64_t v44 = *(void *)(v0 + 328);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 296), *(void *)(v0 + 320));
      unint64_t v45 = default argument 3 of SAUISayIt.init(message:dialogIdentifier:canUseServerTTS:listenAfterSpeaking:)(v43, v44);
      SiriPhoneContact.getFullName(filteredAlternatives:)(v45 & 1);
      __swift_destroy_boxed_opaque_existential_1(v0 + 296);
    }
    else
    {
      outlined destroy of FlowActivity?(v0 + 296, &demangling cache variable for type metadata for SiriPhoneContact?);
    }
    outlined init with copy of SiriPhoneContact?((uint64_t)v110, v0 + 336, &demangling cache variable for type metadata for SiriPhoneContact?);
    if (*(void *)(v0 + 360))
    {
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 336), *(void *)(v0 + 360));
      SiriPhoneContact.getNickName()();
      __swift_destroy_boxed_opaque_existential_1(v0 + 336);
    }
    else
    {
      outlined destroy of FlowActivity?(v0 + 336, &demangling cache variable for type metadata for SiriPhoneContact?);
    }
    UnsetRelationshipPerson.init(firstName:lastName:middleName:fullName:nickname:)();
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v46 = *(void *)(v0 + 456);
    uint64_t v47 = type metadata accessor for Logger();
    __swift_project_value_buffer(v47, (uint64_t)static Logger.siriPhone);
    uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v46 + 16);
    OUTLINED_FUNCTION_9_13();
    v48(v49, v50);
    OUTLINED_FUNCTION_9_13();
    v48(v51, v52);
    OUTLINED_FUNCTION_9_13();
    v48(v53, v54);
    OUTLINED_FUNCTION_9_13();
    v48(v55, v56);
    OUTLINED_FUNCTION_9_13();
    v48(v57, v58);
    uint64_t v59 = Logger.logObject.getter();
    char v60 = static os_log_type_t.debug.getter();
    uint64_t v61 = os_log_type_enabled(v59, v60);
    char v62 = *(void *)(v0 + 496);
    uint64_t v63 = *(void *)(v0 + 456);
    uint64_t v64 = *(void *)(v0 + 448);
    if (v61)
    {
      os_log_t log = v59;
      os_log_type_t type = v60;
      uint64_t v65 = swift_slowAlloc();
      uint64_t v111 = swift_slowAlloc();
      *(_DWORD *)uint64_t v65 = 136316418;
      *(void *)(v0 + 376) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000003ELL, 0x8000000000491BC0, &v111);
      OUTLINED_FUNCTION_38();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v65 + 12) = 2080;
      uint64_t v66 = UnsetRelationshipPerson.firstName.getter();
      uint64_t v68 = OUTLINED_FUNCTION_31_5(v66, v67);
      if (v70) {
        uint64_t v71 = 0xE000000000000000;
      }
      else {
        uint64_t v71 = v69;
      }
      *(void *)(v0 + 384) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v71, &v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v72 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
      OUTLINED_FUNCTION_8_14();
      v72(v73, v74);
      *(_WORD *)(v65 + 22) = 2080;
      uint64_t v75 = UnsetRelationshipPerson.lastName.getter();
      uint64_t v77 = OUTLINED_FUNCTION_31_5(v75, v76);
      *(void *)(v0 + 392) = OUTLINED_FUNCTION_46_3(v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_8_14();
      v72(v78, v79);
      *(_WORD *)(v65 + 32) = 2080;
      uint64_t v80 = UnsetRelationshipPerson.middleName.getter();
      uint64_t v82 = OUTLINED_FUNCTION_31_5(v80, v81);
      *(void *)(v0 + 400) = OUTLINED_FUNCTION_46_3(v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_8_14();
      v72(v83, v84);
      *(_WORD *)(v65 + 42) = 2080;
      uint64_t v85 = UnsetRelationshipPerson.fullName.getter();
      uint64_t v87 = OUTLINED_FUNCTION_31_5(v85, v86);
      *(void *)(v0 + 408) = OUTLINED_FUNCTION_46_3(v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_8_14();
      v72(v88, v89);
      *(_WORD *)(v65 + 52) = 2080;
      uint64_t v90 = UnsetRelationshipPerson.nickname.getter();
      uint64_t v92 = OUTLINED_FUNCTION_31_5(v90, v91);
      *(void *)(v0 + 416) = OUTLINED_FUNCTION_46_3(v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_8_14();
      v72(v93, v94);
      _os_log_impl(&dword_0, log, type, "#ContactUnsetRelationshipFlowStrategy %s {\n    firstName = %s\n    lastName = %s\n    middleName = %s\n    fullName = %s\n    nickname = %s\n}", (uint8_t *)v65, 0x3Eu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {

      uint64_t v95 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
      OUTLINED_FUNCTION_8_14();
      v95(v96, v97);
      OUTLINED_FUNCTION_8_14();
      v95(v98, v99);
      OUTLINED_FUNCTION_8_14();
      v95(v100, v101);
      OUTLINED_FUNCTION_8_14();
      v95(v102, v103);
      v95(v62, v64);
    }
    outlined destroy of FlowActivity?((uint64_t)v110, &demangling cache variable for type metadata for SiriPhoneContact?);
    uint64_t v104 = *(void *)(v0 + 448);
    uint64_t v105 = *(void *)(v0 + 424);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v0 + 456) + 32))(v105, *(void *)(v0 + 504), v104);
    __swift_storeEnumTagSinglePayload(v105, 0, 1, v104);
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }
  else
  {
    outlined destroy of FlowActivity?(v0 + 56, &demangling cache variable for type metadata for PhoneCallNLIntent?);
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.siriPhone);
    uint64_t v16 = Logger.logObject.getter();
    uint64_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl(&dword_0, v16, v17, "#ContactUnsetRelationshipFlowStrategy expected only 1 SiriPhone contact", v18, 2u);
      OUTLINED_FUNCTION_6();
    }
    uint64_t v19 = *(void *)(v0 + 448);
    uint64_t v20 = *(void *)(v0 + 424);

    __swift_storeEnumTagSinglePayload(v20, 1, 1, v19);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  return v106();
}

uint64_t ContactUnsetRelationshipFlowStrategy.makePromptForPersonName(requestedRelationship:resolveRecord:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[19] = v2;
  v1[20] = v0;
  v1[17] = v3;
  v1[18] = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_11_0(v5);
  v1[21] = OUTLINED_FUNCTION_35();
  uint64_t v6 = type metadata accessor for TemplatingResult();
  v1[22] = v6;
  OUTLINED_FUNCTION_19_0(v6);
  v1[23] = v7;
  v1[24] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_16_10(*(void **)(v0 + 160));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 200) = v1;
  void *v1 = v0;
  v1[1] = ContactUnsetRelationshipFlowStrategy.makePromptForPersonName(requestedRelationship:resolveRecord:);
  OUTLINED_FUNCTION_37_3();
  return v2();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v5 = v4;
  *(void *)(v6 + 208) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v0();
}

uint64_t ContactUnsetRelationshipFlowStrategy.makePromptForPersonName(requestedRelationship:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_29();
  uint64_t v15 = *(void *)(v14 + 168);
  uint64_t v33 = *(void *)(v14 + 192);
  uint64_t v34 = *(void *)(v14 + 176);
  uint64_t v16 = *(void **)(v14 + 160);
  uint64_t v17 = *(uint64_t **)(v14 + 136);
  __swift_project_boxed_opaque_existential_1(v16, v16[3]);
  OUTLINED_FUNCTION_32_5();
  OUTLINED_FUNCTION_24_2();
  v18();
  __swift_project_boxed_opaque_existential_1(v16, v16[3]);
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_24_2();
  v19();
  __swift_project_boxed_opaque_existential_1((void *)(v14 + 56), *(void *)(v14 + 80));
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  OUTLINED_FUNCTION_22_3();
  uint64_t v20 = type metadata accessor for NLContextUpdate();
  OUTLINED_FUNCTION_15_5(v20);
  *(double *)&long long v21 = OUTLINED_FUNCTION_33_2();
  *(_OWORD *)(v14 + 96) = v21;
  v17[3] = v22;
  void v17[4] = (uint64_t)&protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v17);
  static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of FlowActivity?(v14 + 96, &demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of FlowActivity?(v15, &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_destroy_boxed_opaque_existential_1(v14 + 16);
  __swift_destroy_boxed_opaque_existential_1(v14 + 56);
  OUTLINED_FUNCTION_36_5();
  v23();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_28_1();
  return v25(v24, v25, v26, v27, v28, v29, v30, v31, v14 + 96, v33, v34, a12, a13, a14);
}

uint64_t ContactUnsetRelationshipFlowStrategy.actionForPromptForContactDisambiguationInput(_:resolveRecord:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v44 = a2;
  uint64_t v42 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v45 = v5;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v38 - v10;
  uint64_t v12 = type metadata accessor for ActionForInput();
  OUTLINED_FUNCTION_0_0();
  uint64_t v14 = v13;
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v38 - v19;
  uint64_t v43 = a1;
  ContactUnsetRelationshipFlowStrategy.actionForInput(_:)();
  static ActionForInput.handle()();
  lazy protocol witness table accessor for type PhoneError and conformance PhoneError(&lazy protocol witness table cache variable for type ActionForInput and conformance ActionForInput, (void (*)(uint64_t))&type metadata accessor for ActionForInput);
  char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v22 = *(void (**)(char *, uint64_t))(v14 + 8);
  v22(v18, v12);
  if ((v21 & 1) == 0) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(v44, v20, v12);
  }
  uint64_t v39 = v3;
  id v40 = v9;
  char v41 = v22;
  Input.parse.getter();
  uint64_t v23 = v45;
  uint64_t v24 = v42;
  int v25 = (*(uint64_t (**)(char *, uint64_t))(v45 + 88))(v11, v42);
  int v26 = enum case for Parse.directInvocation(_:);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v23 + 8);
  uint64_t v45 = v23 + 8;
  v27(v11, v24);
  if (v25 == v26) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(v44, v20, v12);
  }
  __swift_project_boxed_opaque_existential_1(v39, v39[3]);
  uint64_t v29 = OUTLINED_FUNCTION_21_4();
  uint64_t v31 = v30(v29);
  uint64_t v32 = v40;
  Input.parse.getter();
  (*(void (**)(void *__return_ptr, char *))(*(void *)v31 + 192))(v49, v32);
  swift_release();
  v27(v32, v42);
  outlined init with copy of SiriPhoneContact?((uint64_t)v49, (uint64_t)v46, &demangling cache variable for type metadata for PhoneCallNLIntent?);
  uint64_t v33 = v47;
  if (!v47)
  {
    outlined destroy of FlowActivity?((uint64_t)v46, &demangling cache variable for type metadata for PhoneCallNLIntent?);
    uint64_t v37 = (uint64_t (*)(char *, uint64_t))v41;
    goto LABEL_8;
  }
  uint64_t v34 = v48;
  __swift_project_boxed_opaque_existential_1(v46, v47);
  uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 24))(v33, v34);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  uint64_t v36 = *(void *)(v35 + 16);
  swift_bridgeObjectRelease();
  uint64_t v37 = (uint64_t (*)(char *, uint64_t))v41;
  if (!v36)
  {
LABEL_8:
    static ActionForInput.ignore()();
    goto LABEL_9;
  }
  static ActionForInput.handle()();
LABEL_9:
  outlined destroy of FlowActivity?((uint64_t)v49, &demangling cache variable for type metadata for PhoneCallNLIntent?);
  return v37(v20, v12);
}

uint64_t ContactUnsetRelationshipFlowStrategy.makeDisambiguationItemContainer(contacts:resolveRecord:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v2, v3, v4);
}

uint64_t ContactUnsetRelationshipFlowStrategy.makeDisambiguationItemContainer(contacts:resolveRecord:)()
{
  unint64_t v1 = *(void *)(v0 + 16);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8));
  }
  if (v2)
  {
    uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
    if (v2 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(v0 + 16) + 32;
    do
    {
      if ((v1 & 0xC000000000000001) != 0) {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v6 = *(id *)(v5 + 8 * v4);
      }
      uint64_t v7 = v6;
      ++v4;
      SAPerson.toINPerson()();

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v2 != v4);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BasicDisambiguationItemContainer<INPerson>);
  swift_allocObject();
  uint64_t v8 = BasicDisambiguationItemContainer.init(_:_:)();
  uint64_t v9 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v9(v8);
}

uint64_t ContactUnsetRelationshipFlowStrategy.parseContactDisambiguationResult(input:paginatedItems:resolveRecord:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[18] = v2;
  v1[19] = v0;
  v1[16] = v3;
  v1[17] = v4;
  uint64_t v5 = type metadata accessor for PaginationRequest();
  v1[20] = v5;
  OUTLINED_FUNCTION_19_0(v5);
  v1[21] = v6;
  v1[22] = OUTLINED_FUNCTION_35();
  uint64_t v7 = type metadata accessor for Parse();
  v1[23] = v7;
  OUTLINED_FUNCTION_19_0(v7);
  v1[24] = v8;
  v1[25] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t ContactUnsetRelationshipFlowStrategy.parseContactDisambiguationResult(input:paginatedItems:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_29();
  uint64_t v15 = v14[25];
  uint64_t v16 = (void *)v14[19];
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<INPerson>);
  uint64_t v17 = PaginatedItemContainer.items.getter();
  __swift_project_boxed_opaque_existential_1(v16, v16[3]);
  uint64_t v18 = OUTLINED_FUNCTION_21_4();
  uint64_t v20 = v19(v18);
  outlined init with copy of SharedGlobalsProviding(v20 + 120, (uint64_t)(v14 + 3));
  swift_release();
  outlined init with copy of SharedGlobalsProviding((uint64_t)v16, (uint64_t)(v14 + 8));
  id v14[2] = v17;
  Input.parse.getter();
  char v21 = ContactDisambiguationPromptResponseParser.parseDisambiguationResponse(from:)(v15);
  unsigned __int8 v23 = v22;
  OUTLINED_FUNCTION_36_5();
  v24();
  outlined destroy of ContactDisambiguationPromptResponseParser((uint64_t)(v14 + 2));
  if (v23 == 255) {
    goto LABEL_9;
  }
  if (v23 != 2)
  {
    if (v23 == 1)
    {
      outlined copy of ContactDisambiguationPromptResponse(v21, 1u);
      if (INPerson.hasNameComponents.getter()) {
        goto LABEL_14;
      }
      id v25 = [v21 _displayName];
      if (v25)
      {
        int v26 = v25;
        uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v29 = v28;
      }
      else
      {
        uint64_t v27 = 0;
        unint64_t v29 = 0;
      }
      char v33 = specialized Optional<A>.isNilOrEmpty.getter(v27, v29);
      swift_bridgeObjectRelease();
      if ((v33 & 1) != 0 && (id v34 = [v21 contactIdentifier]) != 0)
      {
        uint64_t v35 = v34;
        uint64_t v36 = (void *)v14[19];
        uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v39 = v38;

        id v40 = v36 + 5;
        uint64_t v41 = v36[8];
        uint64_t v42 = v36[9];
        __swift_project_boxed_opaque_existential_1(v40, v41);
        uint64_t v61 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 8))(v37, v39, v41, v42);
        swift_bridgeObjectRelease();
        outlined consume of ContactDisambiguationPromptResponse?(v21, 1u);
        if (v61)
        {
          outlined consume of ContactDisambiguationPromptResponse?(v21, 1u);
          char v21 = (void *)v61;
        }
      }
      else
      {
LABEL_14:
        outlined consume of ContactDisambiguationPromptResponse?(v21, 1u);
      }
      goto LABEL_15;
    }
    outlined consume of ContactDisambiguationPromptResponse?(v21, v23);
LABEL_9:
    uint64_t v31 = v14[21];
    uint64_t v30 = v14[22];
    uint64_t v32 = v14[20];
    static PaginationRequest.firstPage()();
    type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for SAPerson);
    static DisambiguationResult.paginate(_:)();
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    goto LABEL_21;
  }
  PaginatedItemContainer.items.getter();
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INPerson);
  Array.subscript.getter();
  swift_bridgeObjectRelease();
  outlined consume of ContactDisambiguationPromptResponse?(v21, 2u);
  char v21 = (void *)v14[15];
LABEL_15:
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v43 = type metadata accessor for Logger();
  __swift_project_value_buffer(v43, (uint64_t)static Logger.siriPhone);
  uint64_t v44 = v21;
  uint64_t v45 = Logger.logObject.getter();
  os_log_type_t v46 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v45, v46))
  {
    a9 = v14 + 14;
    uint64_t v47 = (uint8_t *)OUTLINED_FUNCTION_47();
    uint64_t v48 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v47 = 138412290;
    v14[14] = v44;
    uint64_t v62 = (uint64_t)(v14 + 13);
    uint64_t v49 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v48 = v44;

    _os_log_impl(&dword_0, v45, v46, "#ContactUnsetRelationshipStrategy Chosen person: %@", v47, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {

    uint64_t v45 = v44;
  }

  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for SAPerson);
  uint64_t v50 = v44;
  id v51 = SAPerson.init(person:)(v50);
  v14[13] = v51;
  static DisambiguationResult.chosenItem(_:)();

LABEL_21:
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_28_1();
  return v53(v52, v53, v54, v55, v56, v57, v58, v59, a9, v62, a11, a12, a13, a14);
}

uint64_t ContactUnsetRelationshipFlowStrategy.makePromptForContactDisambiguation(paginatedItems:resolveRecord:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[10] = v2;
  v1[11] = v0;
  v1[8] = v3;
  v1[9] = v4;
  OUTLINED_FUNCTION_41_1(v5);
  uint64_t v6 = type metadata accessor for DialogPhase();
  OUTLINED_FUNCTION_11_0(v6);
  v1[12] = OUTLINED_FUNCTION_35();
  uint64_t v7 = type metadata accessor for OutputGenerationManifest();
  v1[13] = v7;
  OUTLINED_FUNCTION_19_0(v7);
  v1[14] = v8;
  v1[15] = OUTLINED_FUNCTION_35();
  uint64_t v9 = type metadata accessor for NLContextUpdate();
  v1[16] = v9;
  OUTLINED_FUNCTION_19_0(v9);
  v1[17] = v10;
  v1[18] = OUTLINED_FUNCTION_35();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WindowedPaginationParameters?);
  OUTLINED_FUNCTION_11_0(v11);
  v1[19] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v12, v13, v14);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_18_3();
  unint64_t v1 = v0[19];
  uint64_t v2 = v0[10];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<INPerson>);
  uint64_t v3 = PaginatedItemContainer.items.getter();
  v0[20] = v3;
  type metadata accessor for ParameterResolutionRecord();
  uint64_t v4 = (void *)ParameterResolutionRecord.intent.getter();
  ContactUnsetRelationshipFlowStrategy.getAppForDisplay(intent:)((uint64_t)v4, v2);

  App.appIdentifier.getter();
  swift_release();
  type metadata accessor for CATGlobals();
  CATGlobals.__allocating_init()();
  type metadata accessor for ContactResolutionPatternGenerator();
  swift_allocObject();
  v0[21] = ContactResolutionPatternGenerator.init(appBundleId:globals:)();
  uint64_t v5 = type metadata accessor for WindowedPaginationParameters();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v5);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[22] = v6;
  *uint64_t v6 = v0;
  v6[1] = ContactUnsetRelationshipFlowStrategy.makePromptForContactDisambiguation(paginatedItems:resolveRecord:);
  uint64_t v7 = v0[19];
  return ContactResolutionPatternGenerator.generateDetailedDisambiguationContactNames(contacts:contactPickerDirectInvocationID:contactSelectionDirectInvocationID:windowedPaginationParameters:)(v3, 0xD000000000000033, 0x8000000000491C00, 0xD000000000000042, 0x8000000000491C40, v7);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  OUTLINED_FUNCTION_16_1();
  uint64_t v2 = (void *)*v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v3 = v2;
  uint64_t v4 = (void *)*v1;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v5 = v4;
  v2[23] = v6;
  v2[24] = v0;
  swift_task_dealloc();
  if (v0)
  {
    outlined destroy of FlowActivity?(v2[19], &demangling cache variable for type metadata for WindowedPaginationParameters?);
    swift_release();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    outlined destroy of FlowActivity?(v2[19], &demangling cache variable for type metadata for WindowedPaginationParameters?);
    swift_release();
    uint64_t v10 = (void *)swift_task_alloc();
    v2[25] = v10;
    *uint64_t v10 = v4;
    v10[1] = ContactUnsetRelationshipFlowStrategy.makePromptForContactDisambiguation(paginatedItems:resolveRecord:);
    uint64_t v11 = v2[20];
    uint64_t v12 = v2[18];
    uint64_t v13 = v2[10];
    return ContactUnsetRelationshipFlowStrategy.contactNeedsDisambiguationContext(persons:)(v12, v11, v13);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  unint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v3, v4, v5);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  OUTLINED_FUNCTION_18_3();
  unint64_t v1 = v0[18];
  uint64_t v2 = (void *)v0[11];
  static DialogPhase.clarification.getter();
  *(void *)(swift_task_alloc() + 16) = v1;
  OutputGenerationManifest.init(dialogPhase:_:)();
  swift_task_dealloc();
  uint64_t v3 = v2[3];
  uint64_t v4 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 136))(v3, v4);
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = (void *)OUTLINED_FUNCTION_38();
  __swift_project_boxed_opaque_existential_1(v7, v8);
  uint64_t v9 = *(void *)(v6 + 8);
  uint64_t v10 = (void *)swift_task_alloc();
  v0[26] = v10;
  *uint64_t v10 = v0;
  v10[1] = ContactUnsetRelationshipFlowStrategy.makePromptForContactDisambiguation(paginatedItems:resolveRecord:);
  uint64_t v11 = v0[23];
  uint64_t v12 = v0[15];
  uint64_t v13 = v0[7];
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)(v13, v11, v12, v5, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v5 = v4;
  *(void *)(v6 + 216) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  unint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v5 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 104);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  return v7();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(void);
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v2 = *(void *)(v0 + 136);
  unint64_t v1 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 128);

  OUTLINED_FUNCTION_8_14();
  v4();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v5();
}

uint64_t ContactUnsetRelationshipFlowStrategy.getAppForDisplay(intent:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = ContactUnsetRelationshipFlowStrategy.app.getter();
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 24) + 16) + 8))(*(void *)(a2 + 16));
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v6);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v10, v6, v7);
  uint64_t v8 = static UserFacingCallingAppUtils.getCommAppForLaunch(originalApp:preferredCallProvider:deviceState:)(v4, v5, v10);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  return v8;
}

uint64_t ContactUnsetRelationshipFlowStrategy.contactNeedsDisambiguationContext(persons:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  void v4[3] = a2;
  return _swift_task_switch(ContactUnsetRelationshipFlowStrategy.contactNeedsDisambiguationContext(persons:), 0, 0);
}

uint64_t ContactUnsetRelationshipFlowStrategy.contactNeedsDisambiguationContext(persons:)()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  v4[2] = *(void *)(v2 + 16);
  void v4[3] = *(void *)(v2 + 24);
  v4[4] = v1;
  v4[5] = v3;
  uint64_t v5 = (void *)swift_task_alloc();
  OUTLINED_FUNCTION_41_1((uint64_t)v5);
  type metadata accessor for NLContextUpdate();
  *uint64_t v5 = v0;
  v5[1] = ContactUnsetRelationshipFlowStrategy.contactNeedsDisambiguationContext(persons:);
  OUTLINED_FUNCTION_11_1();
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v3();
}

uint64_t closure #1 in ContactUnsetRelationshipFlowStrategy.makePromptForContactDisambiguation(paginatedItems:resolveRecord:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for NLContextUpdate();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(v5, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v6);
  OutputGenerationManifest.nlContextUpdate.setter();
  OutputGenerationManifest.canUseServerTTS.setter();
  return OutputGenerationManifest.listenAfterSpeaking.setter();
}

uint64_t ContactUnsetRelationshipFlowStrategy.parsePromptToSaveRelationshipResponse(input:resolveRecord:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[8] = v2;
  v1[9] = v0;
  OUTLINED_FUNCTION_41_1(v3);
  uint64_t v4 = type metadata accessor for PhoneError();
  v1[10] = v4;
  OUTLINED_FUNCTION_11_0(v4);
  v1[11] = OUTLINED_FUNCTION_35();
  uint64_t v5 = type metadata accessor for Parse();
  v1[12] = v5;
  OUTLINED_FUNCTION_19_0(v5);
  v1[13] = v6;
  v1[14] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  void *v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[12];
  outlined init with copy of SharedGlobalsProviding(v0[9], (uint64_t)(v0 + 2));
  Input.parse.getter();
  uint64_t v4 = ContactPromptResponseParser.parseResponse(from:)(v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  outlined destroy of ContactPromptResponseParser((uint64_t)(v0 + 2));
  if (v4 >= 3u)
  {
    uint64_t v9 = (void *)v0[11];
    *uint64_t v9 = 0;
    v9[1] = 0;
    swift_storeEnumTagMultiPayload();
    lazy protocol witness table accessor for type PhoneError and conformance PhoneError((unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError, (void (*)(uint64_t))type metadata accessor for PhoneError);
    OUTLINED_FUNCTION_20_0();
    PhoneError.logged()(v10);
    outlined destroy of PhoneError((uint64_t)v9);
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_35_3();
  }
  else
  {
    uint64_t v5 = v0[7];
    uint64_t v6 = *(unsigned int *)*(&off_551420 + (char)v4);
    type metadata accessor for ConfirmationResponse();
    OUTLINED_FUNCTION_10();
    (*(void (**)(uint64_t, uint64_t))(v7 + 104))(v5, v6);
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_6_0();
  }
  return v8();
}

uint64_t ContactUnsetRelationshipFlowStrategy.makePromptToSaveRelationship(person:requestedRelationship:resolveRecord:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[20] = v2;
  v1[21] = v0;
  v1[18] = v3;
  v1[19] = v4;
  v1[17] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_11_0(v6);
  v1[22] = OUTLINED_FUNCTION_35();
  uint64_t v7 = type metadata accessor for TemplatingResult();
  v1[23] = v7;
  OUTLINED_FUNCTION_19_0(v7);
  v1[24] = v8;
  v1[25] = OUTLINED_FUNCTION_35();
  uint64_t v9 = (void *)swift_task_alloc();
  v1[26] = v9;
  *uint64_t v9 = v1;
  v9[1] = ContactUnsetRelationshipFlowStrategy.makePromptToSaveRelationship(person:requestedRelationship:resolveRecord:);
  uint64_t v10 = OUTLINED_FUNCTION_7_0();
  return static ConfirmationViewUtils.makeYesNoConfirmationView(labelTemplatesProvider:sharedGlobals:)(v10, v11);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  void *v4 = v3;
  void *v4 = *v1;
  *(void *)(v3 + 216) = v5;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_47_0();
    return v6();
  }
  else
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v8, v9, v10);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v9;
  uint64_t v10;

  OUTLINED_FUNCTION_18_3();
  uint64_t v9 = (void *)(OUTLINED_FUNCTION_16_10(*(void **)(v2 + 168)) + 48);
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v9 + *(int *)*v9);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 224) = v3;
  *uint64_t v3 = v2;
  v3[1] = ContactUnsetRelationshipFlowStrategy.makePromptToSaveRelationship(person:requestedRelationship:resolveRecord:);
  uint64_t v4 = *(void *)(v2 + 200);
  uint64_t v6 = *(void *)(v2 + 144);
  uint64_t v5 = *(void *)(v2 + 152);
  return v8(v4, v5, v6, v0, v1);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  void *v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  *(void *)(v3 + 232) = v0;
  swift_task_dealloc();
  if (v0) {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v0();
}

uint64_t ContactUnsetRelationshipFlowStrategy.makePromptToSaveRelationship(person:requestedRelationship:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  OUTLINED_FUNCTION_30();
  uint64_t v36 = *(void *)(v16 + 216);
  uint64_t v37 = *(void *)(v16 + 192);
  uint64_t v17 = *(void *)(v16 + 176);
  uint64_t v38 = *(void *)(v16 + 184);
  uint64_t v18 = *(void **)(v16 + 168);
  uint64_t v35 = *(void *)(v16 + 160);
  uint64_t v19 = *(uint64_t **)(v16 + 136);
  __swift_project_boxed_opaque_existential_1(v18, v18[3]);
  OUTLINED_FUNCTION_32_5();
  OUTLINED_FUNCTION_24_2();
  v20();
  __swift_project_boxed_opaque_existential_1(v18, v18[3]);
  OUTLINED_FUNCTION_45_1();
  OUTLINED_FUNCTION_24_2();
  v21();
  __swift_project_boxed_opaque_existential_1((void *)(v16 + 56), *(void *)(v16 + 80));
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(1);
  ContactUnsetRelationshipFlowStrategy.contactNeedsConfirmationContext.getter();
  uint64_t v22 = type metadata accessor for NLContextUpdate();
  OUTLINED_FUNCTION_15_5(v22);
  *(double *)&long long v23 = OUTLINED_FUNCTION_33_2();
  *(_OWORD *)(v16 + 96) = v23;
  uint64_t v19[3] = v24;
  v19[4] = (uint64_t)&protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v19);
  static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?(v16 + 96, &demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of FlowActivity?(v17, &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_destroy_boxed_opaque_existential_1(v16 + 16);
  OUTLINED_FUNCTION_11();
  v25();
  __swift_destroy_boxed_opaque_existential_1(v16 + 56);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_27_3();
  return v27(v26, v27, v28, v29, v30, v31, v32, v33, v16 + 96, v35, v36, v37, v38, a14, a15, a16);
}

PhoneCallFlowDelegatePlugin::PhoneCallSlotNames_optional ContactUnsetRelationshipFlowStrategy.contactNeedsConfirmationContext.getter()
{
  specialized static PhoneCallNLContextProvider.makeGenericConfirmationNLv3Context()();
  v0._uint64_t countAndFlagsBits = 0x73746361746E6F63;
  v0._object = (void *)0xE800000000000000;
  result.value = PhoneCallSlotNames.init(rawValue:)(v0).value;
  if ((result.value & 0xFE) == 4)
  {
    specialized static PhoneCallNLContextProvider.makeSDAForConfirmation()();
    return (PhoneCallFlowDelegatePlugin::PhoneCallSlotNames_optional)NLContextUpdate.nluSystemDialogActs.setter();
  }
  return result;
}

uint64_t closure #1 in ContactUnsetRelationshipFlowStrategy.contactNeedsDisambiguationContext(persons:)(uint64_t a1, void *a2, unint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NLContextUpdate, Never>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = a2[3];
  uint64_t v10 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v9);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v10 + 8))(v20, v9, v10);
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v11);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v12 + 184))(v19, v11, v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallNLContextProvider<INIntent, INIntentResponse>);
  swift_allocObject();
  uint64_t v13 = (void *)specialized PhoneCallNLContextProvider.init(deviceState:assistantProperties:)(v20, v19);
  specialized _arrayForceCast<A, B>(_:)(a3);
  uint64_t v15 = v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  unint64_t v16 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v17 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v17 + v16, (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t (*)(uint64_t), uint64_t))(class metadata base offset for PhoneCallNLContextProvider + *v13 + 40))(0x73746361746E6F63, 0xE800000000000000, v15, partial apply for closure #1 in closure #1 in ContactUnsetRelationshipFlowStrategy.contactNeedsDisambiguationContext(persons:), v17);
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in closure #1 in ContactUnsetRelationshipFlowStrategy.contactNeedsDisambiguationContext(persons:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NLContextUpdate();
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NLContextUpdate, Never>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parseRequestedRelationship(resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  return ContactUnsetRelationshipFlowStrategy.parseRequestedRelationship(resolveRecord:)();
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.applyPersonToIntent(person:requestedRelationship:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  return ContactUnsetRelationshipFlowStrategy.applyPersonToIntent(person:requestedRelationship:resolveRecord:)();
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeMeCardNotFoundResponse(requestedRelationship:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  return ContactUnsetRelationshipFlowStrategy.makeMeCardNotFoundResponse(requestedRelationship:resolveRecord:)();
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeUnsupportedPlatformResponse(requestedRelationship:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  return ContactUnsetRelationshipFlowStrategy.makeUnsupportedPlatformResponse(requestedRelationship:resolveRecord:)();
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeIntentCancelledResponse(resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = UnsupportedFlowCATs.deleteVoicemail();
  return UnsupportedUnsetRelationshipFlowStrategyAsync.makeIntentCancelledResponse(resolveRecord:)(a1, a2, a3, a4);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parseUnsetRelationshipPersonFromResponse(input:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  return ContactUnsetRelationshipFlowStrategy.parseUnsetRelationshipPersonFromResponse(input:resolveRecord:)();
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makePromptForPersonName(requestedRelationship:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  return ContactUnsetRelationshipFlowStrategy.makePromptForPersonName(requestedRelationship:resolveRecord:)();
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptForPersonNameOnEmptyParse(requestedRelationship:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = UnsupportedFlowCATs.deleteVoicemail();
  return UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptForPersonNameOnEmptyParse(requestedRelationship:resolveRecord:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptForPersonNameOnLowConfidence(requestedRelationship:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = UnsupportedFlowCATs.deleteVoicemail();
  return UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptForPersonNameOnLowConfidence(requestedRelationship:resolveRecord:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeContactNotFoundResponse(requestedPerson:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = UnsupportedFlowCATs.deleteVoicemail();
  return UnsupportedUnsetRelationshipFlowStrategyAsync.makeContactNotFoundResponse(requestedPerson:resolveRecord:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.paginationStyle(resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>()
{
  return UnsupportedUnsetRelationshipFlowStrategyAsync.paginationStyle(resolveRecord:)();
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeDisambiguationItemContainer(contacts:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v4;
  void *v4 = v2;
  v4[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeDisambiguationItemContainer(contacts:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>;
  return ContactUnsetRelationshipFlowStrategy.makeDisambiguationItemContainer(contacts:resolveRecord:)(a2);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeDisambiguationItemContainer(contacts:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (!v0) {
    **(void **)(v5 + 16) = v3;
  }
  uint64_t v9 = *(uint64_t (**)(void))(v7 + 8);
  return v9();
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parseContactDisambiguationResult(input:paginatedItems:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  return ContactUnsetRelationshipFlowStrategy.parseContactDisambiguationResult(input:paginatedItems:resolveRecord:)();
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makePromptForContactDisambiguation(paginatedItems:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  return ContactUnsetRelationshipFlowStrategy.makePromptForContactDisambiguation(paginatedItems:resolveRecord:)();
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptForContactDisambiguationOnEmptyParse(paginatedItems:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = UnsupportedFlowCATs.deleteVoicemail();
  return UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptForContactDisambiguationOnEmptyParse(paginatedItems:resolveRecord:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptForContactDisambiguationOnLowConfidence(paginatedItems:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = UnsupportedFlowCATs.deleteVoicemail();
  return UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptForContactDisambiguationOnLowConfidence(paginatedItems:resolveRecord:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parsePromptToSaveRelationshipResponse(input:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  return ContactUnsetRelationshipFlowStrategy.parsePromptToSaveRelationshipResponse(input:resolveRecord:)();
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makePromptToSaveRelationship(person:requestedRelationship:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  return ContactUnsetRelationshipFlowStrategy.makePromptToSaveRelationship(person:requestedRelationship:resolveRecord:)();
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptToSaveRelationshipOnEmptyParse(person:requestedRelationship:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = UnsupportedFlowCATs.deleteVoicemail();
  return UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptToSaveRelationshipOnEmptyParse(person:requestedRelationship:resolveRecord:)(a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptToSaveRelationshipOnLowConfidence(person:requestedRelationship:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = UnsupportedFlowCATs.deleteVoicemail();
  return UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptToSaveRelationshipOnLowConfidence(person:requestedRelationship:resolveRecord:)(a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeSaveRelationshipCompletedResponse(person:requestedRelationship:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = UnsupportedFlowCATs.deleteVoicemail();
  return UnsupportedUnsetRelationshipFlowStrategyAsync.makeSaveRelationshipCompletedResponse(person:requestedRelationship:resolveRecord:)(a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeSaveRelationshipRejectedResponse(person:requestedRelationship:resolveRecord:) in conformance ContactUnsetRelationshipFlowStrategy<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = UnsupportedFlowCATs.deleteVoicemail();
  return UnsupportedUnsetRelationshipFlowStrategyAsync.makeSaveRelationshipRejectedResponse(person:requestedRelationship:resolveRecord:)(a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeErrorResponse(error:app:intent:) in conformance ContactUnsetRelationshipFlowStrategy<A>()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  return ContactUnsetRelationshipFlowStrategy.makeErrorResponse(error:app:intent:)();
}

uint64_t sub_800A0()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 120, 7);
}

uint64_t outlined init with copy of PhoneCallDirectInvocationNLIntent(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of PhoneCallDirectInvocationNLIntent(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for closure #1 in ContactUnsetRelationshipFlowStrategy.makeMeCardNotFoundResponse(requestedRelationship:resolveRecord:)(uint64_t a1)
{
  return closure #1 in ContactUnsetRelationshipFlowStrategy.makeMeCardNotFoundResponse(requestedRelationship:resolveRecord:)(a1, *(void *)(v1 + 32));
}

uint64_t lazy protocol witness table accessor for type PhoneError and conformance PhoneError(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of SiriPhoneContact?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_10();
  uint64_t v4 = OUTLINED_FUNCTION_7_0();
  v5(v4);
  return a2;
}

uint64_t outlined destroy of ContactDisambiguationPromptResponseParser(uint64_t a1)
{
  return a1;
}

void outlined consume of ContactDisambiguationPromptResponse?(id a1, unsigned __int8 a2)
{
  if (a2 != 0xFF) {
    outlined consume of ContactDisambiguationPromptResponse(a1, a2);
  }
}

void outlined consume of ContactDisambiguationPromptResponse(id a1, unsigned __int8 a2)
{
  if ((a2 | 2) == 3) {
}
  }

id outlined copy of ContactDisambiguationPromptResponse(id result, unsigned __int8 a2)
{
  if ((a2 | 2) == 3) {
    return result;
  }
  return result;
}

uint64_t outlined destroy of FlowActivity?(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_11();
  v3();
  return a1;
}

uint64_t partial apply for closure #1 in ContactUnsetRelationshipFlowStrategy.makePromptForContactDisambiguation(paginatedItems:resolveRecord:)(uint64_t a1)
{
  return closure #1 in ContactUnsetRelationshipFlowStrategy.makePromptForContactDisambiguation(paginatedItems:resolveRecord:)(a1, *(void *)(v1 + 16));
}

uint64_t associated type witness table accessor for UnsupportedUnsetRelationshipFlowStrategyAsync.DisambiguationItemContainerType : DisambiguationItemContaining in ContactUnsetRelationshipFlowStrategy<A>()
{
  return swift_getWitnessTable();
}

uint64_t type metadata instantiation function for ContactUnsetRelationshipFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 48);
}

uint64_t destroy for ContactUnsetRelationshipFlowStrategy(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  __swift_destroy_boxed_opaque_existential_1(a1 + 120);
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for ContactUnsetRelationshipFlowStrategy(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  long long v6 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 80, a2 + 80);
  long long v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 144) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 120, a2 + 120);
  uint64_t v8 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v8;
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t *assignWithCopy for ContactUnsetRelationshipFlowStrategy(uint64_t *a1, uint64_t *a2)
{
  a1[20] = a2[20];
  swift_retain();
  swift_release();
  a1[21] = a2[21];
  swift_retain();
  swift_release();
  a1[22] = a2[22];
  swift_retain();
  swift_release();
  return a1;
}

void *__swift_memcpy184_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xB8uLL);
}

uint64_t assignWithTake for ContactUnsetRelationshipFlowStrategy(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  long long v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  __swift_destroy_boxed_opaque_existential_1(a1 + 120);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  uint64_t v6 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v6;
  swift_release();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_release();
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ContactUnsetRelationshipFlowStrategy(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 184))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContactUnsetRelationshipFlowStrategy(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 184) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 184) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for ContactUnsetRelationshipFlowStrategy()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined init with copy of DisambiguationItemWithDirectInvocationModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DisambiguationItemWithDirectInvocationModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t specialized Dictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  uint64_t v2 = 64;
  for (uint64_t i = 10; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

void *specialized Dictionary.subscript.getter(void *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    uint64_t v5 = *(void *)(*(void *)(a5 + 48) + 16 * a2);
    *uint64_t result = *(void *)(*(void *)(a5 + 56) + 8 * a2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return (void *)v5;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in ContactUnsetRelationshipFlowStrategy.contactNeedsDisambiguationContext(persons:)(uint64_t a1)
{
  return closure #1 in ContactUnsetRelationshipFlowStrategy.contactNeedsDisambiguationContext(persons:)(a1, *(void **)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_80904()
{
  return objectdestroy_67Tm(&demangling cache variable for type metadata for CheckedContinuation<NLContextUpdate, Never>);
}

uint64_t partial apply for closure #1 in closure #1 in ContactUnsetRelationshipFlowStrategy.contactNeedsDisambiguationContext(persons:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NLContextUpdate, Never>);
  OUTLINED_FUNCTION_13(v2);

  return closure #1 in closure #1 in ContactUnsetRelationshipFlowStrategy.contactNeedsDisambiguationContext(persons:)(a1);
}

uint64_t sub_80964()
{
  return objectdestroy_67Tm(&demangling cache variable for type metadata for CheckedContinuation<[SAAceView], Error>);
}

uint64_t objectdestroy_67Tm(uint64_t *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(a1);
  OUTLINED_FUNCTION_10();
  v2 += 8;
  uint64_t v3 = *(unsigned __int8 *)(v2 + 72);
  uint64_t v4 = ((v3 + 16) & ~v3) + *(void *)(v2 + 56);
  uint64_t v5 = v3 | 7;
  OUTLINED_FUNCTION_11();
  v6();

  return _swift_deallocObject(v1, v4, v5);
}

uint64_t partial apply for closure #1 in closure #1 in ContactUnsetRelationshipFlowStrategy.makeMeCardNotFoundResponse(requestedRelationship:resolveRecord:)(uint64_t a1, char a2)
{
  char v3 = a2 & 1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[SAAceView], Error>);
  OUTLINED_FUNCTION_13(v4);

  return closure #1 in closure #1 in ContactUnsetRelationshipFlowStrategy.makeMeCardNotFoundResponse(requestedRelationship:resolveRecord:)(a1, v3);
}

uint64_t sub_80A58()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 192, 7);
}

uint64_t outlined init with take of String?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_15_5(uint64_t a1)
{
  __swift_storeEnumTagSinglePayload(v1, 0, 1, a1);
  return type metadata accessor for AceOutput();
}

uint64_t OUTLINED_FUNCTION_16_10@<X0>(void *a1@<X8>)
{
  uint64_t v1 = a1[19];
  __swift_project_boxed_opaque_existential_1(a1 + 15, a1[18]);
  return v1;
}

uint64_t OUTLINED_FUNCTION_19_8()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_22_3()
{
  return specialized static PhoneCallNLContextProvider.makeNeedsValueContextFor(parameter:)(0x73746361746E6F63, (void *)0xE800000000000000);
}

uint64_t OUTLINED_FUNCTION_31_5(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  return result;
}

double OUTLINED_FUNCTION_33_2()
{
  double result = 0.0;
  *(_OWORD *)(v0 + 112) = 0u;
  *(void *)(v0 + 128) = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_34_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_35_3()
{
  return v0 + 8;
}

uint64_t OUTLINED_FUNCTION_39_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_41_1(uint64_t a1)
{
  *(void *)(v1 + 56) = a1;
  return 0;
}

uint64_t OUTLINED_FUNCTION_42_2(char a1)
{
  return a1 & 1;
}

uint64_t OUTLINED_FUNCTION_43_3(uint64_t a1)
{
  __swift_storeEnumTagSinglePayload(v1, 0, 1, a1);
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_45_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_46_3(uint64_t a1)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v1, (uint64_t *)(v2 - 80));
}

uint64_t key path setter for PhoneFlow.state : <A, B>PhoneFlow<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PhoneCallFlowState();
  __chkstk_darwin(v4);
  unsigned int v6 = (char *)&v9 - v5;
  (*(void (**)(char *, uint64_t))(v7 + 16))((char *)&v9 - v5, a1);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 136))(v6);
}

uint64_t PhoneFlow.state.getter@<X0>(uint64_t a1@<X8>)
{
  OUTLINED_FUNCTION_13_4();
  uint64_t v4 = v1 + *(void *)(v3 + 112);
  swift_beginAccess();
  OUTLINED_FUNCTION_13_4();
  type metadata accessor for PhoneCallFlowState();
  OUTLINED_FUNCTION_15();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(a1, v4);
}

uint64_t PhoneFlow.state.setter(uint64_t a1)
{
  OUTLINED_FUNCTION_13_4();
  uint64_t v4 = v1 + *(void *)(v3 + 112);
  swift_beginAccess();
  OUTLINED_FUNCTION_13_4();
  type metadata accessor for PhoneCallFlowState();
  OUTLINED_FUNCTION_15();
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(v4, a1);
  return swift_endAccess();
}

uint64_t (*PhoneFlow.state.modify())()
{
  return PhoneFlow.state.modify;
}

uint64_t key path setter for PhoneFlow.sharedGlobals : <A, B>PhoneFlow<A, B>(uint64_t a1, uint64_t a2)
{
  outlined init with copy of SignalProviding(a1, (uint64_t)v4);
  return (*(uint64_t (**)(unsigned char *))(**(void **)a2 + 160))(v4);
}

uint64_t PhoneFlow.sharedGlobals.getter@<X0>(uint64_t a1@<X8>)
{
  OUTLINED_FUNCTION_22();
  uint64_t v4 = v1 + *(void *)(v3 + 120);
  swift_beginAccess();
  return outlined init with copy of SignalProviding(v4, a1);
}

uint64_t PhoneFlow.sharedGlobals.setter(long long *a1)
{
  OUTLINED_FUNCTION_22();
  uint64_t v4 = v1 + *(void *)(v3 + 120);
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_1(v4);
  outlined init with take of AppSelectionSignalComponent(a1, v4);
  return swift_endAccess();
}

uint64_t (*PhoneFlow.sharedGlobals.modify())()
{
  return static SingleResultVoicemailModel.resultViewID.modify;
}

uint64_t PhoneFlow.__allocating_init(sharedGlobals:)(long long *a1)
{
  uint64_t v2 = swift_allocObject();
  PhoneFlow.init(sharedGlobals:)(a1);
  return v2;
}

uint64_t PhoneFlow.init(sharedGlobals:)(long long *a1)
{
  *(void *)(v1 + 16) = 0x6F6C46656E6F6850;
  *(void *)(v1 + 24) = 0xE900000000000077;
  OUTLINED_FUNCTION_9_11();
  OUTLINED_FUNCTION_9_11();
  OUTLINED_FUNCTION_9_11();
  type metadata accessor for PhoneCallFlowState();
  swift_storeEnumTagMultiPayload();
  OUTLINED_FUNCTION_22();
  outlined init with take of AppSelectionSignalComponent(a1, v1 + *(void *)(v3 + 120));
  return v1;
}

uint64_t PhoneFlow.__allocating_init(state:sharedGlobals:)()
{
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = OUTLINED_FUNCTION_7_14();
  PhoneFlow.init(state:sharedGlobals:)(v1, v2);
  return v0;
}

void *PhoneFlow.init(state:sharedGlobals:)(uint64_t a1, long long *a2)
{
  v2[2] = 0x6F6C46656E6F6850;
  v2[3] = 0xE900000000000077;
  OUTLINED_FUNCTION_9_11();
  OUTLINED_FUNCTION_9_11();
  unsigned int v6 = (char *)v2 + v5;
  type metadata accessor for PhoneCallFlowState();
  OUTLINED_FUNCTION_15();
  (*(void (**)(char *, uint64_t))(v7 + 32))(v6, a1);
  outlined init with take of AppSelectionSignalComponent(a2, (uint64_t)v2 + *(void *)(*v2 + 120));
  return v2;
}

uint64_t PhoneFlow.on(input:)()
{
  uint64_t v1 = v0;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.siriPhone);
  swift_retain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v6 = *(void *)(v1 + 16);
    unint64_t v7 = *(void *)(v1 + 24);
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v3, v4, "%s: on(input:) called. This should never happen.", v5, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {

    swift_release();
  }
  return 0;
}

uint64_t PhoneFlow.execute(completion:)()
{
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t PhoneFlow.execute()(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return _swift_task_switch(PhoneFlow.execute(), 0, 0);
}

uint64_t PhoneFlow.execute()()
{
  uint64_t v12 = v0;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.siriPhone);
  swift_retain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[4];
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v8 = *(void *)(v5 + 16);
    unint64_t v7 = *(void *)(v5 + 24);
    swift_bridgeObjectRetain();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl(&dword_0, v2, v3, "%s: execute() called. This should never happen.", v6, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
    swift_release();
  }

  static ExecuteResponse.complete()();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

void PhoneFlow.onRCHFlowComplete(exitValue:)(uint64_t a1)
{
  OUTLINED_FUNCTION_9_11();
  OUTLINED_FUNCTION_9_11();
  uint64_t v3 = type metadata accessor for RCHFlowResult();
  OUTLINED_FUNCTION_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_9_1();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_6_12();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, a1, v3);
  uint64_t v7 = OUTLINED_FUNCTION_7_14();
  if (v8(v7) == enum case for RCHFlowResult.complete<A, B>(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 96))(v1, v3);
    uint64_t v9 = *(void **)(v1 + 8);
    uint64_t v10 = *(void **)(v1 + 16);
    swift_release();

    id v11 = v10;
    PhoneFlow.onRCHFlowCompletedWithIntentResponse(_:)(v10);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v3);
    PhoneFlow.onRCHFlowCompletedWithIntentResponse(_:)(0);
  }
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t);
  void *v11;
  void *v12;
  id v13;

  OUTLINED_FUNCTION_9_11();
  OUTLINED_FUNCTION_9_11();
  uint64_t v3 = type metadata accessor for RCHFlowResult();
  uint64_t v4 = type metadata accessor for ConditionalFlowResult();
  OUTLINED_FUNCTION_1();
  uint64_t v6 = v5;
  OUTLINED_FUNCTION_9_1();
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_6_12();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v1, a1, v4);
  if (__swift_getEnumTagSinglePayload(v1, 1, v3) == 1)
  {
    uint64_t v3 = v4;
  }
  else
  {
    OUTLINED_FUNCTION_1();
    uint64_t v6 = v8;
    uint64_t v9 = OUTLINED_FUNCTION_7_14();
    if (v10(v9) == enum case for RCHFlowResult.complete<A, B>(_:))
    {
      (*(void (**)(uint64_t, uint64_t))(v6 + 96))(v1, v3);
      id v11 = *(void **)(v1 + 8);
      uint64_t v12 = *(void **)(v1 + 16);
      swift_release();

      uint64_t v13 = v12;
      PhoneFlow.onRCHFlowCompletedWithIntentResponse(_:)(v12);

      return;
    }
  }
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v3);
  PhoneFlow.onRCHFlowCompletedWithIntentResponse(_:)(0);
}

uint64_t PhoneFlow.dismissSiri()()
{
  OUTLINED_FUNCTION_22();
  (*(void (**)(long long *__return_ptr))(v1 + 152))(v5);
  type metadata accessor for DismissSiriFlow();
  uint64_t v2 = swift_allocObject();
  outlined init with take of AppSelectionSignalComponent(v5, v2 + 16);
  *(void *)&v5[0] = v2;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for closure #1 in PhoneFlow.dismissSiri();
  *(void *)(v3 + 24) = v0;
  lazy protocol witness table accessor for type DismissSiriFlow and conformance DismissSiriFlow();
  swift_retain();
  static ExecuteResponse.ongoing<A>(next:childCompletion:)();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in PhoneFlow.dismissSiri()(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PhoneCallFlowState();
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v6 - v3;
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(char *))(*(void *)a1 + 136))(v4);
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t PhoneFlow.checkShouldDismissSiri(intentResponse:)()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 88);
  type metadata accessor for PhoneCallFlowState();
  OUTLINED_FUNCTION_15();
  OUTLINED_FUNCTION_9_1();
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v8 - v4;
  char v6 = (*(uint64_t (**)(uint64_t))(*(void *)(v1 + 96) + 8))(v2);
  if (v6)
  {
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *))(*v0 + 136))(v5);
  }
  return v6 & 1;
}

void PhoneFlow.onRCHFlowCompletedWithIntentResponse(_:)(void *a1)
{
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_9_11();
  type metadata accessor for PhoneCallFlowState();
  OUTLINED_FUNCTION_15();
  OUTLINED_FUNCTION_9_1();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_6_12();
  if (!a1 || (v6 = *(uint64_t (**)(void))(v4 + 240), id v7 = a1, v8 = v6(), v7, (v8 & 1) == 0))
  {
    OUTLINED_FUNCTION_7_14();
    swift_storeEnumTagMultiPayload();
    OUTLINED_FUNCTION_22();
    (*(void (**)(uint64_t))(v9 + 136))(v2);
  }
}

uint64_t PhoneFlow.deinit()
{
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_22();
  uint64_t v2 = v0 + *(void *)(v1 + 112);
  type metadata accessor for PhoneCallFlowState();
  OUTLINED_FUNCTION_15();
  (*(void (**)(uint64_t))(v3 + 8))(v2);
  __swift_destroy_boxed_opaque_existential_1(v0 + *(void *)(*(void *)v0 + 120));
  return v0;
}

uint64_t PhoneFlow.__deallocating_deinit()
{
  PhoneFlow.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Flow.on(input:) in conformance PhoneFlow<A, B>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 192))() & 1;
}

uint64_t protocol witness for Flow.onAsync(input:) in conformance PhoneFlow<A1, B1>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *id v7 = v3;
  v7[1] = protocol witness for Flow.onAsync(input:) in conformance PhoneFlow<A1, B1>;
  return Flow.onAsync(input:)(a1, a2, a3);
}

uint64_t protocol witness for Flow.onAsync(input:) in conformance PhoneFlow<A1, B1>(uint64_t a1)
{
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance PhoneFlow<A, B>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200))();
}

uint64_t protocol witness for Flow.execute() in conformance PhoneFlow<A, B>(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 208) + **(int **)(**(void **)v1 + 208));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = protocol witness for Flow.execute() in conformance PhoneFlow<A, B>;
  return v6(a1);
}

uint64_t protocol witness for Flow.execute() in conformance PhoneFlow<A, B>()
{
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t protocol witness for Flow.exitValue.getter in conformance PhoneFlow<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for PhoneFlow();

  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t type metadata accessor for PhoneFlow()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in PhoneFlow.dismissSiri()()
{
  return closure #1 in PhoneFlow.dismissSiri()(v0);
}

uint64_t sub_82444()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

unint64_t lazy protocol witness table accessor for type DismissSiriFlow and conformance DismissSiriFlow()
{
  unint64_t result = lazy protocol witness table cache variable for type DismissSiriFlow and conformance DismissSiriFlow;
  if (!lazy protocol witness table cache variable for type DismissSiriFlow and conformance DismissSiriFlow)
  {
    type metadata accessor for DismissSiriFlow();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DismissSiriFlow and conformance DismissSiriFlow);
  }
  return result;
}

uint64_t sub_824F4()
{
  OUTLINED_FUNCTION_22();
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t sub_82540()
{
  OUTLINED_FUNCTION_22();
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t type metadata completion function for PhoneFlow()
{
  uint64_t result = type metadata accessor for PhoneCallFlowState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_7_14()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_8_15()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_11_12()
{
  return 24;
}

uint64_t key path setter for PlayVoiceMailAction.nextAction : PlayVoiceMailAction(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 136);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t ReadVoiceMailAction.nextAction.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ReadVoiceMailAction.nextAction.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_unknownObjectRelease();
}

uint64_t (*ReadVoiceMailAction.nextAction.modify())()
{
  return static SingleResultVoicemailModel.resultViewID.modify;
}

uint64_t AnnounceVoicemailReadingState.lastNotificationId.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PlayVoiceMailAction.voicemailIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PlayVoiceMailAction.aceServiceInvoker.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + 72, a1);
}

uint64_t EmergencyCountdownOutputBuilder.displayTextCATsSimple.getter()
{
  return swift_retain();
}

uint64_t PlayVoiceMailAction.__allocating_init(voicemailIdentifier:isLeadingSavedVoiceMailPostPrompt:aceServiceInvoker:searchCallHistoryCatFamily:)(uint64_t a1, uint64_t a2, char a3, long long *a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject();
  PlayVoiceMailAction.init(voicemailIdentifier:isLeadingSavedVoiceMailPostPrompt:aceServiceInvoker:searchCallHistoryCatFamily:)(a1, a2, a3, a4, a5);
  return v10;
}

uint64_t PlayVoiceMailAction.init(voicemailIdentifier:isLeadingSavedVoiceMailPostPrompt:aceServiceInvoker:searchCallHistoryCatFamily:)(uint64_t a1, uint64_t a2, char a3, long long *a4, uint64_t a5)
{
  *(void *)(v5 + 16) = 0;
  *(void *)(v5 + 24) = 0;
  *(void *)(v5 + 32) = 0xD000000000000013;
  *(void *)(v5 + 40) = 0x8000000000469D90;
  *(void *)(v5 + 48) = a1;
  *(void *)(v5 + 56) = a2;
  *(unsigned char *)(v5 + 64) = a3;
  outlined init with take of AppSelectionSignalComponent(a4, v5 + 72);
  *(void *)(v5 + 112) = a5;
  return v5;
}

void PlayVoiceMailAction.run(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for INPlayVoicemailIntent);
  id v14 = static INPlayVoicemailIntent.makeFirstPartyHandleIntent(identifier:)();
  if (v2[64] == 1)
  {
    uint64_t v6 = (void *)swift_allocObject();
    v6[2] = a1;
    void v6[3] = a2;
    void v6[4] = v14;
    v6[5] = v2;
    uint64_t v7 = *(void (**)(void, void *))(*(void *)v2 + 168);
    swift_retain();
    id v8 = v14;
    swift_retain();
    v7(partial apply for closure #1 in PlayVoiceMailAction.run(_:), v6);
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.siriPhone);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl(&dword_0, v10, v11, "#PlayVoiceMailAction Submitting play voicemail action", v12, 2u);
      swift_slowDealloc();
    }

    __swift_project_boxed_opaque_existential_1((void *)v3 + 9, *((void *)v3 + 12));
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = a1;
    *(void *)(v13 + 24) = a2;
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for SABaseCommand);
    swift_retain();
    dispatch thunk of AceServiceInvoker.submit<A>(_:completion:)();
  }
  swift_release();
}

void closure #1 in PlayVoiceMailAction.run(_:)(void *a1, char a2, void (*a3)(void), uint64_t a4, void *a5, uint64_t a6)
{
  if (a2)
  {
    a3(0);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_469DA0;
    *(void *)(v11 + 32) = a1;
    *(void *)(v11 + 40) = a5;
    specialized Array._endMutation()();
    __swift_project_boxed_opaque_existential_1((void *)(a6 + 72), *(void *)(a6 + 96));
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = a3;
    *(void *)(v12 + 24) = a4;
    outlined copy of Result<SABaseCommand, Error>(a1, 0);
    outlined copy of Result<SABaseCommand, Error>(a1, 0);
    id v13 = a5;
    swift_retain();
    dispatch thunk of AceServiceInvoker.submitAllSerial(_:_:)();
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of Result<SABaseCommand, Error>(a1, 0);
  }
}

uint64_t closure #1 in closure #1 in PlayVoiceMailAction.run(_:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SubmitCommandError?);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SubmitCommandError();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Result<TemplatingResult, Error>(a1, (uint64_t)v6, &demangling cache variable for type metadata for SubmitCommandError?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7) == 1)
  {
    outlined destroy of SubmitCommandError?((uint64_t)v6, &demangling cache variable for type metadata for SubmitCommandError?);
    return a2(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    lazy protocol witness table accessor for type PlayVoiceMailAction and conformance PlayVoiceMailAction(&lazy protocol witness table cache variable for type SubmitCommandError and conformance SubmitCommandError, 255, (void (*)(uint64_t))&type metadata accessor for SubmitCommandError);
    uint64_t v12 = swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(v13, v10, v7);
    a2(v12);
    swift_errorRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
}

uint64_t closure #2 in PlayVoiceMailAction.run(_:)(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<SABaseCommand, SubmitCommandError>);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SubmitCommandError();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v26 - v14;
  outlined init with copy of Result<TemplatingResult, Error>(a1, (uint64_t)v8, &demangling cache variable for type metadata for Result<SABaseCommand, SubmitCommandError>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v30 = a3;
    uint64_t v31 = a2;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v8, v9);
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.siriPhone);
    uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    v29(v13, v15, v9);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      uint64_t v33 = v28;
      uint64_t v27 = v19;
      *(_DWORD *)uint64_t v19 = 136315138;
      lazy protocol witness table accessor for type PlayVoiceMailAction and conformance PlayVoiceMailAction(&lazy protocol witness table cache variable for type SubmitCommandError and conformance SubmitCommandError, 255, (void (*)(uint64_t))&type metadata accessor for SubmitCommandError);
      uint64_t v20 = Error.localizedDescription.getter();
      uint64_t v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v22 = *(void (**)(char *, uint64_t))(v10 + 8);
      v22(v13, v9);
      _os_log_impl(&dword_0, v17, v18, "#PlayVoiceMailAction Error submitting play voicemail command %s", v27, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v22 = *(void (**)(char *, uint64_t))(v10 + 8);
      v22(v13, v9);
    }

    lazy protocol witness table accessor for type PlayVoiceMailAction and conformance PlayVoiceMailAction(&lazy protocol witness table cache variable for type SubmitCommandError and conformance SubmitCommandError, 255, (void (*)(uint64_t))&type metadata accessor for SubmitCommandError);
    uint64_t v24 = swift_allocError();
    v29(v25, v15, v9);
    v31(v24);
    swift_errorRelease();
    return ((uint64_t (*)(char *, uint64_t))v22)(v15, v9);
  }
  else
  {
    outlined destroy of SubmitCommandError?((uint64_t)v8, &demangling cache variable for type metadata for Result<SABaseCommand, SubmitCommandError>);
    return ((uint64_t (*)(void))a2)(0);
  }
}

uint64_t PlayVoiceMailAction.makeSummaryView(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void **)(v2 + 112);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  uint64_t v7 = *(void (**)(uint64_t (*)(uint64_t), uint64_t))(class metadata base offset for SearchCallHistoryCATs
                                                                       + *v5
                                                                       + 704);
  swift_retain();
  v7(partial apply for closure #1 in PlayVoiceMailAction.makeSummaryView(_:), v6);

  return swift_release();
}

uint64_t closure #1 in PlayVoiceMailAction.makeSummaryView(_:)(uint64_t a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = type metadata accessor for TemplatingResult();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin(v8);
  uint64_t v10 = (uint64_t *)((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of Result<TemplatingResult, Error>(a1, (uint64_t)v10, &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = *v10;
    swift_errorRetain();
    a2(v11, 1);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v5 + 32))(v7, v10, v4);
    type metadata accessor for ViewFactory();
    swift_allocObject();
    ViewFactory.init(ttsEnabled:)();
    uint64_t v13 = (void *)dispatch thunk of ViewFactory.makeSummaryView(templateResult:snippets:listenAfterSpeaking:canUseServerTTS:)();
    swift_release();
    a2((uint64_t)v13, 0);

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t PlayVoiceMailAction.deinit()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 72);
  swift_release();
  return v0;
}

uint64_t PlayVoiceMailAction.__deallocating_deinit()
{
  PlayVoiceMailAction.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for StaticAction.nextAction.setter in conformance PlayVoiceMailAction()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

void (*protocol witness for StaticAction.nextAction.modify in conformance PlayVoiceMailAction(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(void *)v1 + 144))();
  return protocol witness for StaticAction.nextAction.modify in conformance PlayVoiceMailAction;
}

void protocol witness for StaticAction.nextAction.modify in conformance PlayVoiceMailAction(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t protocol witness for Action.nextAction.getter in conformance PlayVoiceMailAction()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t protocol witness for Action.run(_:) in conformance PlayVoiceMailAction()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t protocol witness for Action.run() in conformance PlayVoiceMailAction(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for Action.run() in conformance PlayVoiceMailAction;
  return Action.run()(a1, a2);
}

uint64_t protocol witness for Action.run() in conformance PlayVoiceMailAction()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PlayVoiceMailAction()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_8393C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for closure #2 in PlayVoiceMailAction.run(_:)(uint64_t a1)
{
  return closure #2 in PlayVoiceMailAction.run(_:)(a1, *(void (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_8397C()
{
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void partial apply for closure #1 in PlayVoiceMailAction.run(_:)(void *a1, char a2)
{
  closure #1 in PlayVoiceMailAction.run(_:)(a1, a2 & 1, *(void (**)(void))(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t partial apply for closure #1 in PlayVoiceMailAction.makeSummaryView(_:)(uint64_t a1)
{
  return closure #1 in PlayVoiceMailAction.makeSummaryView(_:)(a1, *(void (**)(uint64_t, uint64_t))(v1 + 16));
}

uint64_t base witness table accessor for Action in PlayVoiceMailAction(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PlayVoiceMailAction and conformance PlayVoiceMailAction(&lazy protocol witness table cache variable for type PlayVoiceMailAction and conformance PlayVoiceMailAction, a2, (void (*)(uint64_t))type metadata accessor for PlayVoiceMailAction);
}

uint64_t type metadata accessor for PlayVoiceMailAction()
{
  return self;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PlayVoiceMailAction(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PlayVoiceMailAction and conformance PlayVoiceMailAction(&lazy protocol witness table cache variable for type PlayVoiceMailAction and conformance PlayVoiceMailAction, a2, (void (*)(uint64_t))type metadata accessor for PlayVoiceMailAction);
}

uint64_t sub_83A90@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 128))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in PlayVoiceMailAction.run(_:)(uint64_t a1)
{
  return closure #1 in closure #1 in PlayVoiceMailAction.run(_:)(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

id outlined copy of Result<SABaseCommand, Error>(void *a1, char a2)
{
  if (a2) {
    return (id)swift_errorRetain();
  }
  else {
    return a1;
  }
}

void outlined consume of Result<SABaseCommand, Error>(void *a1, char a2)
{
  if (a2) {
    swift_errorRelease();
  }
  else {
}
  }

uint64_t lazy protocol witness table accessor for type PlayVoiceMailAction and conformance PlayVoiceMailAction(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t Collection.emptyToNil.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (dispatch thunk of Collection.isEmpty.getter())
  {
    uint64_t v5 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
    uint64_t v5 = 0;
  }

  return __swift_storeEnumTagSinglePayload(a2, v5, 1, a1);
}

uint64_t Collection.unique<A>(by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *(void *)(a2 - 8);
  __chkstk_darwin(a1);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(class metadata base offset for KeyPath + v13 + 8);
  uint64_t v15 = static Array._allocateUninitialized(_:)();
  if (Array._getCount()())
  {
    uint64_t v16 = (void *)Set.init(_nonEmptyArrayLiteral:)(v15, v14, a4);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = &_swiftEmptySetSingleton;
  }
  unint64_t v21 = v16;
  uint64_t v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v5, a2);
  __chkstk_darwin(v17);
  *(&v20 - 6) = a2;
  *(&v20 - 5) = a3;
  *(&v20 - 4) = a4;
  *(&v20 - 3) = (uint64_t)&v21;
  *(&v20 - 2) = a1;
  uint64_t v18 = Sequence.filter(_:)();
  swift_bridgeObjectRelease();
  return v18;
}

uint64_t closure #1 in Collection.unique<A>(by:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(class metadata base offset for KeyPath + *a3 + 8);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(a1);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v10 - v6;
  swift_getAtKeyPath();
  type metadata accessor for Set();
  char v8 = Set.insert(_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  return v8 & 1;
}

uint64_t Sequence<>.unique()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_1();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = static Array._allocateUninitialized(_:)();
  if (Array._getCount()())
  {
    uint64_t v15 = (void *)Set.init(_nonEmptyArrayLiteral:)(v14, AssociatedTypeWitness, a3);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v15 = &_swiftEmptySetSingleton;
  }
  uint64_t v20 = v15;
  uint64_t v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v4, a1);
  __chkstk_darwin(v16);
  *(&v19 - 4) = a1;
  *(&v19 - 3) = a2;
  *(&v19 - 2) = a3;
  *(&v19 - 1) = (uint64_t)&v20;
  uint64_t v17 = Sequence.filter(_:)();
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t closure #1 in Sequence<>.unique()(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v11 - v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, a1, AssociatedTypeWitness);
  type metadata accessor for Set();
  char v9 = Set.insert(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, AssociatedTypeWitness);
  return v9 & 1;
}

uint64_t Sequence.asyncCompactMapSerial<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[7] = a5;
  v6[8] = v5;
  v6[5] = a3;
  _DWORD v6[6] = a4;
  void v6[3] = a1;
  void v6[4] = a2;
  uint64_t v8 = type metadata accessor for Optional();
  v6[9] = v8;
  OUTLINED_FUNCTION_19_0(v8);
  v6[10] = v9;
  v6[11] = OUTLINED_FUNCTION_35();
  v6[12] = *(void *)(a4 - 8);
  v6[13] = swift_task_alloc();
  v6[14] = swift_task_alloc();
  v6[15] = OUTLINED_FUNCTION_9_14();
  OUTLINED_FUNCTION_1();
  v6[16] = v10;
  v6[17] = OUTLINED_FUNCTION_35();
  type metadata accessor for Optional();
  v6[18] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_1();
  v6[19] = v11;
  v6[20] = OUTLINED_FUNCTION_35();
  uint64_t v12 = OUTLINED_FUNCTION_9_14();
  v6[21] = v12;
  OUTLINED_FUNCTION_19_0(v12);
  v6[22] = v13;
  v6[23] = OUTLINED_FUNCTION_35();
  return _swift_task_switch(Sequence.asyncCompactMapSerial<A>(_:), 0, 0);
}

uint64_t Sequence.asyncCompactMapSerial<A>(_:)()
{
  uint64_t v2 = v0[19];
  uint64_t v1 = v0[20];
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[5];
  v0[2] = static Array._allocateUninitialized(_:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v3, v4);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v5 = (int *)v0[23];
  uint64_t v6 = v0[18];
  uint64_t v7 = v0[15];
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  if (__swift_getEnumTagSinglePayload(v6, 1, v7) == 1)
  {
    uint64_t v8 = OUTLINED_FUNCTION_2_15();
    v9(v8);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_6_13();
  }
  else
  {
    uint64_t v12 = OUTLINED_FUNCTION_3_17();
    v13(v12);
    uint64_t v16 = (uint64_t (*)(uint64_t))((char *)v5 + *v5);
    uint64_t v14 = (void *)swift_task_alloc();
    v0[24] = v14;
    *uint64_t v14 = v0;
    v14[1] = Sequence.asyncCompactMapSerial<A>(_:);
    uint64_t v10 = OUTLINED_FUNCTION_7_15();
    uint64_t v11 = v16;
  }
  return v11(v10);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 200) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = Sequence.asyncCompactMapSerial<A>(_:);
  }
  else
  {
    uint64_t v2 = Sequence.asyncCompactMapSerial<A>(_:);
  }
  return _swift_task_switch(v2, 0, 0);
}

void Sequence.asyncCompactMapSerial<A>(_:)()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[6];
  if (__swift_getEnumTagSinglePayload(v1, 1, v2) == 1)
  {
    uint64_t v4 = v0[9];
    uint64_t v3 = v0[10];
    uint64_t v5 = OUTLINED_FUNCTION_8_16();
    v6(v5);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v4);
  }
  else
  {
    uint64_t v8 = v0[13];
    uint64_t v7 = v0[14];
    uint64_t v9 = v0[12];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v7, v1, v2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v8, v7, v2);
    type metadata accessor for Array();
    Array.append(_:)();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v2);
    uint64_t v10 = OUTLINED_FUNCTION_8_16();
    v11(v10);
  }
  uint64_t v12 = v0[18];
  uint64_t v13 = v0[15];
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  if (__swift_getEnumTagSinglePayload(v12, 1, v13) == 1)
  {
    uint64_t v14 = OUTLINED_FUNCTION_2_15();
    v15(v14);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_6_13();
    OUTLINED_FUNCTION_4_3();
    __asm { BRAA            X2, X16 }
  }
  uint64_t v18 = OUTLINED_FUNCTION_3_17();
  v19(v18);
  uint64_t v20 = (void *)swift_task_alloc();
  v0[24] = v20;
  *uint64_t v20 = v0;
  v20[1] = Sequence.asyncCompactMapSerial<A>(_:);
  OUTLINED_FUNCTION_7_15();
  OUTLINED_FUNCTION_4_3();
  __asm { BRAA            X2, X16 }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v2 = v0[22];
  uint64_t v1 = v0[23];
  uint64_t v3 = v0[21];
  (*(void (**)(void, void))(v0[16] + 8))(v0[17], v0[15]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_4_3();
  __asm { BRAA            X1, X16 }
}

uint64_t Set.init(_nonEmptyArrayLiteral:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = *(void *)(a2 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = __chkstk_darwin(a1);
  uint64_t v9 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v49 = (char *)&v37 - v11;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v37 - v12;
  if (Array.count.getter())
  {
    type metadata accessor for _SetStorage();
    uint64_t v14 = (unsigned char *)static _SetStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v14 = &_swiftEmptySetSingleton;
  }
  Swift::Int v42 = Array._getCount()();
  if (v42)
  {
    uint64_t v38 = v7;
    uint64_t v39 = v6;
    uint64_t v15 = 0;
    uint64_t v47 = (uint64_t (**)(char *, uint64_t *, uint64_t))(v6 + 16);
    uint64_t v48 = v14 + 56;
    uint64_t v44 = v6 + 32;
    os_log_type_t v46 = (void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v40 = v5;
    uint64_t v41 = v13;
    while (1)
    {
      Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        uint64_t v17 = *(uint64_t (**)(char *, uint64_t *, uint64_t))(v6 + 16);
        uint64_t result = v17(v13, (uint64_t *)(v5+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v15), a2);
      }
      else
      {
        uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
        if (v38 != 8) {
          goto LABEL_24;
        }
        uint64_t v50 = result;
        uint64_t v17 = *v47;
        (*v47)(v13, &v50, a2);
        uint64_t result = swift_unknownObjectRelease();
      }
      BOOL v19 = __OFADD__(v15, 1);
      uint64_t v20 = v15 + 1;
      if (v19) {
        break;
      }
      uint64_t v45 = v20;
      uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
      v43(v49, v13, a2);
      uint64_t v21 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v22 = v14;
      uint64_t v23 = -1 << v14[32];
      unint64_t v24 = v21 & ~v23;
      unint64_t v25 = v24 >> 6;
      uint64_t v26 = *(void *)&v48[8 * (v24 >> 6)];
      uint64_t v27 = 1 << v24;
      uint64_t v28 = *(void *)(v6 + 72);
      if (((1 << v24) & v26) != 0)
      {
        uint64_t v29 = ~v23;
        while (1)
        {
          v17(v9, (uint64_t *)(v22[6] + v28 * v24), a2);
          uint64_t v30 = a3;
          char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v32 = *v46;
          (*v46)(v9, a2);
          if (v31) {
            break;
          }
          unint64_t v24 = (v24 + 1) & v29;
          unint64_t v25 = v24 >> 6;
          uint64_t v26 = *(void *)&v48[8 * (v24 >> 6)];
          uint64_t v27 = 1 << v24;
          a3 = v30;
          if ((v26 & (1 << v24)) == 0)
          {
            uint64_t v6 = v39;
            uint64_t v5 = v40;
            goto LABEL_14;
          }
        }
        v32(v49, a2);
        a3 = v30;
        uint64_t v6 = v39;
        uint64_t v5 = v40;
        uint64_t v14 = v22;
      }
      else
      {
LABEL_14:
        uint64_t v33 = v49;
        *(void *)&v48[8 * v25] = v27 | v26;
        unint64_t v34 = v22[6] + v28 * v24;
        uint64_t v14 = v22;
        uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v43)(v34, v33, a2);
        uint64_t v35 = v22[2];
        BOOL v19 = __OFADD__(v35, 1);
        uint64_t v36 = v35 + 1;
        if (v19) {
          goto LABEL_23;
        }
        long long v22[2] = v36;
      }
      uint64_t v13 = v41;
      uint64_t v15 = v45;
      if (v45 == v42) {
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
  else
  {
LABEL_21:
    swift_bridgeObjectRelease();
    return (uint64_t)v14;
  }
  return result;
}

uint64_t partial apply for closure #1 in Collection.unique<A>(by:)(uint64_t a1)
{
  return closure #1 in Collection.unique<A>(by:)(a1, *(void *)(v1 + 40), *(void **)(v1 + 48)) & 1;
}

uint64_t partial apply for closure #1 in Sequence<>.unique()(uint64_t a1)
{
  return closure #1 in Sequence<>.unique()(a1) & 1;
}

uint64_t OUTLINED_FUNCTION_2_15()
{
  return *(void *)(v0 + 184);
}

uint64_t OUTLINED_FUNCTION_3_17()
{
  return *(void *)(v0 + 136);
}

uint64_t OUTLINED_FUNCTION_6_13()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_7_15()
{
  return *(void *)(v0 + 88);
}

uint64_t OUTLINED_FUNCTION_8_16()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_9_14()
{
  return swift_getAssociatedTypeWitness();
}

id SCHRowCardSectionComponents.toCardSection()()
{
  id v0 = [objc_allocWithZone((Class)SFRowCardSection) init];
  [v0 setSeparatorStyle:4];
  uint64_t v1 = OUTLINED_FUNCTION_0_10();
  uint64_t v3 = (void *)v2(v1);
  OUTLINED_FUNCTION_1_14((uint64_t)v3, "setLeadingText:");

  uint64_t v4 = OUTLINED_FUNCTION_0_10();
  uint64_t v6 = (void *)v5(v4);
  OUTLINED_FUNCTION_1_14((uint64_t)v6, "setLeadingSubtitle:");

  uint64_t v7 = OUTLINED_FUNCTION_0_10();
  uint64_t v9 = (void *)v8(v7);
  OUTLINED_FUNCTION_1_14((uint64_t)v9, "setTrailingText:");

  uint64_t v10 = OUTLINED_FUNCTION_0_10();
  uint64_t v12 = (void *)v11(v10);
  OUTLINED_FUNCTION_1_14((uint64_t)v12, "setTrailingSubtitle:");

  uint64_t v13 = OUTLINED_FUNCTION_0_10();
  uint64_t v15 = (void *)v14(v13);
  [v0 setImage:v15];

  return v0;
}

uint64_t Array<A>.toCardSnippet()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    v6[5] = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v3 = a1 + 32;
    do
    {
      outlined init with copy of SignalProviding(v3, (uint64_t)v6);
      __swift_project_boxed_opaque_existential_1(v6, v6[3]);
      SCHRowCardSectionComponents.toCardSection()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v3 += 40;
      --v1;
    }
    while (v1);
  }
  type metadata accessor for SACardSnippet();
  uint64_t v4 = static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:)();
  swift_bridgeObjectRelease();
  return v4;
}

unint64_t type metadata accessor for SACardSnippet()
{
  unint64_t result = lazy cache variable for type metadata for SACardSnippet;
  if (!lazy cache variable for type metadata for SACardSnippet)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SACardSnippet);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_10()
{
  return v0;
}

id OUTLINED_FUNCTION_1_14(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

Swift::String __swiftcall PhoneCallIntentClassNames.getClassName()()
{
  id v1 = PhoneCallIntentClassNames.intentInstance.getter(v0);
  id v2 = [v1 _className];

  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  uint64_t v6 = v3;
  uint64_t v7 = v5;
  result._object = v7;
  result._uint64_t countAndFlagsBits = v6;
  return result;
}

Swift::String __swiftcall PhoneCallIntentClassNames.getTypeName()()
{
  id v1 = PhoneCallIntentClassNames.intentInstance.getter(v0);
  swift_getObjectType();

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INIntent.Type);
  uint64_t v2 = String.init<A>(describing:)();
  result._object = v3;
  result._uint64_t countAndFlagsBits = v2;
  return result;
}

id one-time initialization function for emptyAnswerCallIntent()
{
  id result = [objc_allocWithZone((Class)INAnswerCallIntent) init];
  static PhoneCallIntentClassNames.emptyAnswerCallIntent = (uint64_t)result;
  return result;
}

id one-time initialization function for emptyAddCallParticipantIntent()
{
  id result = [objc_allocWithZone((Class)INAddCallParticipantIntent) init];
  static PhoneCallIntentClassNames.emptyAddCallParticipantIntent = (uint64_t)result;
  return result;
}

id one-time initialization function for emptyHangUpCallIntent()
{
  id result = [objc_allocWithZone((Class)INHangUpCallIntent) init];
  static PhoneCallIntentClassNames.emptyHangUpCallIntent = (uint64_t)result;
  return result;
}

id one-time initialization function for emptyIncomingCallSearchIntent()
{
  id result = [objc_allocWithZone((Class)INIdentifyIncomingCallerIntent) init];
  static PhoneCallIntentClassNames.emptyIncomingCallSearchIntent = (uint64_t)result;
  return result;
}

id one-time initialization function for emptySearchCallHistoryIntent()
{
  id result = [objc_allocWithZone((Class)INSearchCallHistoryIntent) init];
  static PhoneCallIntentClassNames.emptySearchCallHistoryIntent = (uint64_t)result;
  return result;
}

id one-time initialization function for emptyStartCallIntent()
{
  id result = [objc_allocWithZone((Class)INStartCallIntent) init];
  static PhoneCallIntentClassNames.emptyStartCallIntent = (uint64_t)result;
  return result;
}

id one-time initialization function for emptyStartAudioCallIntent()
{
  id result = [objc_allocWithZone((Class)INStartAudioCallIntent) init];
  static PhoneCallIntentClassNames.emptyStartAudioCallIntent = (uint64_t)result;
  return result;
}

id one-time initialization function for emptyStartVideoCallIntent()
{
  id result = [objc_allocWithZone((Class)INStartVideoCallIntent) init];
  static PhoneCallIntentClassNames.emptyStartVideoCallIntent = (uint64_t)result;
  return result;
}

_UNKNOWN **static PhoneCallIntentClassNames.allCases.getter()
{
  return &outlined read-only object #0 of static PhoneCallIntentClassNames.allCases.getter;
}

unint64_t lazy protocol witness table accessor for type PhoneCallIntentClassNames and conformance PhoneCallIntentClassNames()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallIntentClassNames and conformance PhoneCallIntentClassNames;
  if (!lazy protocol witness table cache variable for type PhoneCallIntentClassNames and conformance PhoneCallIntentClassNames)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallIntentClassNames and conformance PhoneCallIntentClassNames);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [PhoneCallIntentClassNames] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [PhoneCallIntentClassNames] and conformance [A];
  if (!lazy protocol witness table cache variable for type [PhoneCallIntentClassNames] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [PhoneCallIntentClassNames]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [PhoneCallIntentClassNames] and conformance [A]);
  }
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance PhoneCallIntentClassNames(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static PhoneCallIntentClassNames.allCases.getter;
}

unsigned char *storeEnumTagSinglePayload for PhoneCallIntentClassNames(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x855C8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PhoneCallIntentClassNames()
{
  return &type metadata for PhoneCallIntentClassNames;
}

uint64_t OUTLINED_FUNCTION_0_11()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

void OUTLINED_FUNCTION_1_15()
{
}

uint64_t OUTLINED_FUNCTION_2_16()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_3_18()
{
  return swift_bridgeObjectRelease();
}

void *PhoneComponentInfo.name.unsafeMutableAddressor()
{
  return &static PhoneComponentInfo.name;
}

unint64_t static PhoneComponentInfo.name.getter()
{
  return 0xD000000000000011;
}

const char *PhoneComponentInfo.version.unsafeMutableAddressor()
{
  return "Phone";
}

uint64_t static PhoneComponentInfo.version.getter()
{
  return 0x656E6F6850;
}

void *PhoneComponentInfo.id.unsafeMutableAddressor()
{
  return &static PhoneComponentInfo.id;
}

uint64_t static PhoneComponentInfo.id.getter()
{
  return 1071806;
}

void static FileRadarUtils.tapToRadar(title:desc:reason:logger:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, NSObject *a7)
{
  unint64_t v51 = a2;
  uint64_t v52 = a7;
  void v45[2] = a5;
  uint64_t v49 = a4;
  uint64_t v50 = a1;
  uint64_t v8 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_0_0();
  uint64_t v46 = v9;
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v12);
  uint64_t v13 = (char *)v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RadarFilingExtras?);
  __chkstk_darwin(v14 - 8);
  OUTLINED_FUNCTION_4();
  uint64_t v17 = v16 - v15;
  uint64_t v18 = type metadata accessor for RadarFilingExtras();
  OUTLINED_FUNCTION_0_0();
  uint64_t v20 = v19;
  __chkstk_darwin(v21);
  OUTLINED_FUNCTION_4();
  uint64_t v24 = v23 - v22;
  type metadata accessor for TTRComponentInfo();
  OUTLINED_FUNCTION_0_0();
  uint64_t v47 = v26;
  uint64_t v48 = v25;
  __chkstk_darwin(v25);
  OUTLINED_FUNCTION_4();
  uint64_t v29 = v28 - v27;
  if (AFIsInternalInstall() && AFProcessIsAssistantService())
  {
    type metadata accessor for TapToRadarManager();
    swift_allocObject();
    v45[1] = a3;
    v45[0] = TapToRadarManager.init()();
    TTRComponentInfo.init(componentName:componentVersion:componentID:)();
    swift_bridgeObjectRetain();
    RadarFilingExtras.init(attachmentURLs:extensionIDs:deviceIDs:displayReason:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v17, v24, v18);
    __swift_storeEnumTagSinglePayload(v17, 0, 1, v18);
    uint64_t v30 = v46;
    (*(void (**)(char *, NSObject *, uint64_t))(v46 + 16))((char *)v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v52, v8);
    unint64_t v31 = (*(unsigned __int8 *)(v30 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
    uint64_t v32 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v30 + 32))(v32 + v31, v13, v8);
    dispatch thunk of TapToRadarManager.createProblem(errStatus:userDefaultSuiteName:radarComponentInfo:title:description:radarFilingExtras:completion:)();
    swift_release();
    swift_release();
    outlined destroy of RadarFilingExtras?(v17);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v24, v18);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v29, v48);
LABEL_6:
    OUTLINED_FUNCTION_26_1();
    return;
  }
  unint64_t v33 = v51;
  swift_bridgeObjectRetain_n();
  uint64_t v52 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v52, v34))
  {
    uint64_t v35 = swift_slowAlloc();
    uint64_t v53 = swift_slowAlloc();
    *(_DWORD *)uint64_t v35 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v33, &v53);
    OUTLINED_FUNCTION_1_16(v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v35 + 12) = 2080;
    id v37 = [self processInfo];
    id v38 = [v37 processName];

    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v41 = v40;

    uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, &v53);
    OUTLINED_FUNCTION_5_11(v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v52, v34, "#FileRadarUtils tapToRadar: not an internal build. Skipping filing radar for \"%s\", process=%s", (uint8_t *)v35, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();

    goto LABEL_6;
  }
  swift_bridgeObjectRelease_n();
  OUTLINED_FUNCTION_26_1();
}

void static FileRadarUtils.autoBugCapture(errorType:errorSubType:subTypeContext:logger:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v30 = a1;
  uint64_t v31 = a3;
  uint64_t v10 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_0_0();
  uint64_t v12 = v11;
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v15);
  if (AFIsInternalInstall() && AFProcessIsAssistantService())
  {
    type metadata accessor for AutoBugCaptureManager();
    swift_allocObject();
    AutoBugCaptureManager.init(domain:sessionDuration:)();
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a7, v10);
    unint64_t v16 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    uint64_t v17 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v17 + v16, (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
    dispatch thunk of AutoBugCaptureManager.generateSnapshot(errorType:errorSubType:subTypeContext:completion:)();
    swift_release();
    swift_release();
LABEL_6:
    OUTLINED_FUNCTION_26_1();
    return;
  }
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v32, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 136315650;
    swift_bridgeObjectRetain();
    uint64_t v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, a2, &v34);
    OUTLINED_FUNCTION_1_16(v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v19 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, a4, &v34);
    OUTLINED_FUNCTION_5_11(v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v19 + 22) = 2080;
    id v22 = [self processInfo];
    id v23 = [v22 processName];

    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v26 = v25;

    uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v32, v18, "#FileRadarUtils autoBugCapture: not an internal build. Skipping filing radar for \"%s\"/\"%s\", process=%s", (uint8_t *)v19, 0x20u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();

    goto LABEL_6;
  }
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  OUTLINED_FUNCTION_26_1();
}

void closure #1 in static FileRadarUtils.tapToRadar(title:desc:reason:logger:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), const char *a4)
{
  osos_log_t log = Logger.logObject.getter();
  os_log_type_t v6 = a3();
  if (os_log_type_enabled(oslog, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, oslog, v6, a4, v7, 8u);
    OUTLINED_FUNCTION_6();
  }
  else
  {
  }
}

void partial apply for closure #1 in static FileRadarUtils.tapToRadar(title:desc:reason:logger:)(uint64_t a1)
{
}

uint64_t outlined destroy of RadarFilingExtras?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RadarFilingExtras?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t objectdestroyTm()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void partial apply for closure #1 in static FileRadarUtils.autoBugCapture(errorType:errorSubType:subTypeContext:logger:)(uint64_t a1)
{
}

void partial apply for closure #1 in static FileRadarUtils.tapToRadar(title:desc:reason:logger:)(uint64_t a1, uint64_t (*a2)(void), const char *a3)
{
  uint64_t v7 = *(void *)(type metadata accessor for Logger() - 8);
  closure #1 in static FileRadarUtils.tapToRadar(title:desc:reason:logger:)(a1, v3 + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), a2, a3);
}

ValueMetadata *type metadata accessor for PhoneComponentInfo()
{
  return &type metadata for PhoneComponentInfo;
}

ValueMetadata *type metadata accessor for FileRadarUtils()
{
  return &type metadata for FileRadarUtils;
}

uint64_t OUTLINED_FUNCTION_1_16(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return v1 - 96;
}

uint64_t static HangUpCallIntentConversion.convertToIntent(phoneCallNLIntent:app:sharedGlobals:previousIntent:previousIntentResponse:groupResolver:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v6 = OUTLINED_FUNCTION_0_12(a1, a2, a3, a4, a5, a6);

  return specialized static HangUpCallIntentConversion.convertToIntent(phoneCallNLIntent:app:sharedGlobals:previousIntent:previousIntentResponse:groupResolver:)(v6, v7, v8, v9, v10);
}

uint64_t specialized static HangUpCallIntentConversion.convertToIntent(phoneCallNLIntent:app:sharedGlobals:previousIntent:previousIntentResponse:groupResolver:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  void (*v17)(long long *__return_ptr, uint64_t);
  uint64_t v19;
  long long v20[2];

  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INHangUpCallIntent>);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SignalProviding(a3, (uint64_t)v20);
  uint64_t v14 = (void *)swift_allocObject();
  id v14[2] = a2;
  void v14[3] = a4;
  outlined init with take of AppSelectionSignalComponent(v20, (uint64_t)(v14 + 4));
  v14[9] = a5;
  id v15 = a5;
  swift_retain();
  id v16 = a4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
  type metadata accessor for INHangUpCallIntent();
  Transformer.init(transform:)();
  uint64_t v17 = (void (*)(long long *__return_ptr, uint64_t))Transformer.transform.getter();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v17(v20, a1);
  swift_release();
  return *(void *)&v20[0];
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  id v16;
  id v17;
  void (*v18)(void);
  uint64_t v20;
  long long v21[2];

  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INHangUpCallIntent>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SignalProviding(a3, (uint64_t)v21);
  id v15 = (void *)swift_allocObject();
  uint64_t v15[2] = a2;
  void v15[3] = a4;
  outlined init with take of AppSelectionSignalComponent(v21, (uint64_t)(v15 + 4));
  v15[9] = a5;
  id v16 = a5;
  swift_retain();
  uint64_t v17 = a4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INHangUpCallIntent);
  Transformer.init(transform:)();
  os_log_type_t v18 = (void (*)(void))Transformer.transform.getter();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v9);
  OUTLINED_FUNCTION_109_2();
  v18();
  if (v9)
  {
    swift_errorRelease();
    swift_release();
    return 0;
  }
  else
  {
    swift_release();
    return *(void *)&v21[0];
  }
}

ValueMetadata *type metadata accessor for HangUpCallIntentConversion()
{
  return &type metadata for HangUpCallIntentConversion;
}

uint64_t sub_86450()
{
  swift_release();

  __swift_destroy_boxed_opaque_existential_1(v0 + 32);

  return _swift_deallocObject(v0, 80, 7);
}

void partial apply for closure #1 in static Transformer<>.transformer(sharedGlobals:app:previousIntent:previousIntentResponse:)()
{
}

{
  OUTLINED_FUNCTION_5_31();
  closure #1 in static Transformer<>.transformer(sharedGlobals:app:previousIntent:previousIntentResponse:)();
}

{
  closure #1 in static Transformer<>.transformer(sharedGlobals:app:previousIntent:previousIntentResponse:)();
}

unint64_t type metadata accessor for INHangUpCallIntent()
{
  unint64_t result = lazy cache variable for type metadata for INHangUpCallIntent;
  if (!lazy cache variable for type metadata for INHangUpCallIntent)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for INHangUpCallIntent);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_12(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  return a1;
}

uint64_t IncomingCallActionConfirmation.confirmationResponse.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for IncomingCallActionConfirmation();
  uint64_t v3 = OUTLINED_FUNCTION_11_0(v2);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of IncomingCallActionConfirmation(v1, (uint64_t)v5);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (newInput: Input));
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v5, 1, v6);
  type metadata accessor for ConfirmationResponse();
  OUTLINED_FUNCTION_15();
  uint64_t v8 = OUTLINED_FUNCTION_29_5();
  v9(v8);
  if (EnumTagSinglePayload == 1) {
    return OUTLINED_FUNCTION_30_5();
  }
  OUTLINED_FUNCTION_30_5();
  type metadata accessor for Input();
  OUTLINED_FUNCTION_15();
  return (*(uint64_t (**)(char *))(v11 + 8))(v5);
}

uint64_t type metadata accessor for IncomingCallActionConfirmation()
{
  uint64_t result = type metadata singleton initialization cache for IncomingCallActionConfirmation;
  if (!type metadata singleton initialization cache for IncomingCallActionConfirmation) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined init with copy of IncomingCallActionConfirmation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IncomingCallActionConfirmation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id IncomingCallActionConfirmationStrategy.incomingCallIntentResponse.getter()
{
  return *(id *)(v0 + 24);
}

uint64_t IncomingCallActionConfirmationStrategy.sharedGlobals.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + 32, a1);
}

uint64_t IncomingCallActionConfirmationStrategy.__allocating_init(incomingCallIntentResponse:incomingCallCats:sharedGlobals:announceCallsContext:phoneCommonCats:phoneCallCommonCatPatterns:)(uint64_t a1, long long *a2, long long *a3, uint64_t a4, char a5, uint64_t a6, long long *a7)
{
  uint64_t v14 = swift_allocObject();
  IncomingCallActionConfirmationStrategy.init(incomingCallIntentResponse:incomingCallCats:sharedGlobals:announceCallsContext:phoneCommonCats:phoneCallCommonCatPatterns:)(a1, a2, a3, a4, a5, a6, a7);
  return v14;
}

uint64_t IncomingCallActionConfirmationStrategy.init(incomingCallIntentResponse:incomingCallCats:sharedGlobals:announceCallsContext:phoneCommonCats:phoneCallCommonCatPatterns:)(uint64_t a1, long long *a2, long long *a3, uint64_t a4, char a5, uint64_t a6, long long *a7)
{
  uint64_t v8 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(FollowUpOfferType, Set<PhoneCallVerb>)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_467710;
  *(unsigned char *)(inited + 32) = 2;
  *(void *)(inited + 40) = specialized Set.init(_nonEmptyArrayLiteral:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<PhoneCallVerb>);
  lazy protocol witness table accessor for type FollowUpOfferType and conformance FollowUpOfferType();
  *(void *)(v8 + 16) = Dictionary.init(dictionaryLiteral:)();
  *(void *)(v8 + 24) = a1;
  outlined init with take of AppSelectionSignalComponent(a2, v8 + 72);
  type metadata accessor for IncomingCallNLContextProvider();
  *(void *)(v8 + 112) = UnsetRelationshipTemplatesWrapper.__allocating_init()();
  *(void *)(v8 + 120) = a4;
  *(unsigned char *)(v8 + 128) = a5;
  outlined init with take of AppSelectionSignalComponent(a3, v8 + 32);
  *(void *)(v8 + 136) = a6;
  outlined init with take of AppSelectionSignalComponent(a7, v8 + 144);
  return v8;
}

uint64_t IncomingCallActionConfirmationStrategy.actionForInput(_:)()
{
  uint64_t v1 = type metadata accessor for Parse();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 32), *(void *)(v0 + 56));
  uint64_t v5 = OUTLINED_FUNCTION_16_11();
  uint64_t v7 = v6(v5);
  Input.parse.getter();
  (*(void (**)(long long *__return_ptr, char *))(*(void *)v7 + 192))(&v13, v4);
  swift_release();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if (!v14)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)&v13, &demangling cache variable for type metadata for PhoneCallNLIntent?);
    return static ActionForInput.ignore()();
  }
  outlined init with take of AppSelectionSignalComponent(&v13, (uint64_t)v15);
  if (IncomingCallActionConfirmationStrategy.parsePhoneCallConfirmationFromIntent(intent:)(v15) == 5)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    return static ActionForInput.ignore()();
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = OUTLINED_FUNCTION_25_0(v9, (uint64_t)static Logger.siriPhone);
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)OUTLINED_FUNCTION_7_2();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl(&dword_0, v10, v11, "#IncomingCallActionConfirmationStrategy received a value for phoneCallConfirmation.", v12, 2u);
    OUTLINED_FUNCTION_6();
  }

  static ActionForInput.handle()();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
}

uint64_t IncomingCallActionConfirmationStrategy.parseConfirmationResponse(input:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[13] = v2;
  v1[14] = v0;
  v1[12] = v3;
  uint64_t v4 = type metadata accessor for Parse();
  v1[15] = v4;
  OUTLINED_FUNCTION_19_0(v4);
  v1[16] = v5;
  v1[17] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  void *v8;
  os_log_type_t v9;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void);
  uint64_t v26;

  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 120);
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v0 + 112) + 32), *(void *)(*(void *)(v0 + 112) + 56));
  uint64_t v4 = OUTLINED_FUNCTION_16_11();
  uint64_t v6 = v5(v4);
  Input.parse.getter();
  (*(void (**)(uint64_t))(*(void *)v6 + 192))(v1);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (!*(void *)(v0 + 80))
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v0 + 56, &demangling cache variable for type metadata for PhoneCallNLIntent?);
    goto LABEL_5;
  }
  outlined init with take of AppSelectionSignalComponent((long long *)(v0 + 56), v0 + 16);
  if (IncomingCallActionConfirmationStrategy.parsePhoneCallConfirmationFromIntent(intent:)((void *)(v0 + 16)))
  {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
LABEL_5:
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    uint64_t v8 = (void *)OUTLINED_FUNCTION_25_0(v7, (uint64_t)static Logger.siriPhone);
    uint64_t v9 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_18(v9))
    {
      uint64_t v10 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_32_2(v10);
      OUTLINED_FUNCTION_25_4(&dword_0, v11, v12, "#IncomingCallActionConfirmationStrategy confirmation prompt rejected.");
      OUTLINED_FUNCTION_6();
    }
    long long v13 = *(void *)(v0 + 96);

    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (newInput: Input));
    id v15 = v13;
    id v16 = 1;
    goto LABEL_15;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  os_log_type_t v18 = OUTLINED_FUNCTION_25_0(v17, (uint64_t)static Logger.siriPhone);
  uint64_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)OUTLINED_FUNCTION_7_2();
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl(&dword_0, v18, v19, "#IncomingCallActionConfirmationStrategy phoneCallConfirmation = .yes", v20, 2u);
    OUTLINED_FUNCTION_6();
  }
  id v22 = *(void *)(v0 + 96);
  uint64_t v21 = *(void *)(v0 + 104);

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  type metadata accessor for Input();
  OUTLINED_FUNCTION_15();
  (*(void (**)(uint64_t, uint64_t))(v23 + 16))(v22, v21);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (newInput: Input));
  id v15 = v22;
  id v16 = 0;
LABEL_15:
  __swift_storeEnumTagSinglePayload(v15, v16, 1, v14);
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  return v24();
}

uint64_t IncomingCallActionConfirmationStrategy.parsePhoneCallConfirmationFromIntent(intent:)(void *a1)
{
  OUTLINED_FUNCTION_2();
  uint64_t v4 = v3[3];
  uint64_t v5 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 64))(v4, v5);
  if (result == 5)
  {
    uint64_t v7 = *(void *)(v1 + 16);
    OUTLINED_FUNCTION_14_8();
    char v9 = v8();
    uint64_t v10 = specialized Dictionary.subscript.getter(v9, v7);
    if (!v10) {
      return 5;
    }
    uint64_t v11 = v10;
    uint64_t v12 = a1[3];
    uint64_t v13 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v12);
    unsigned __int8 v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 104))(v12, v13);
    if (v14 == 17)
    {
      swift_bridgeObjectRelease();
      return 5;
    }
    char v15 = v14;
    char v16 = specialized Set.contains(_:)(v14, v11);
    swift_bridgeObjectRelease();
    if ((v16 & 1) == 0) {
      return 5;
    }
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    os_log_type_t v18 = OUTLINED_FUNCTION_25_0(v17, (uint64_t)static Logger.siriPhone);
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136315138;
      uint64_t v21 = PhoneCallVerb.rawValue.getter(v15);
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v18, v19, "Received verb: %s, treating this as .yes confirmation", v20, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }

    return 0;
  }
  return result;
}

uint64_t IncomingCallActionConfirmationStrategy.makePromptForConfirmation(itemToConfirm:)(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  OUTLINED_FUNCTION_2();
  void v3[6] = v4;
  return OUTLINED_FUNCTION_21_1((uint64_t)IncomingCallActionConfirmationStrategy.makePromptForConfirmation(itemToConfirm:));
}

uint64_t IncomingCallActionConfirmationStrategy.makePromptForConfirmation(itemToConfirm:)()
{
  uint64_t v15 = v0;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.siriPhone);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    OUTLINED_FUNCTION_14_8();
    *(unsigned char *)(v0 + 64) = v5();
    uint64_t v6 = String.init<A>(describing:)();
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_0, v2, v3, "#IncomingCallActionConfirmationStrategy prompting user for confirmation on followUpOffer: %s", v4, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)(v0 + 40) + 224)
                                                 + **(int **)(**(void **)(v0 + 40) + 224));
  swift_task_alloc();
  OUTLINED_FUNCTION_31_2();
  *(void *)(v0 + 56) = v8;
  *uint64_t v8 = v9;
  v8[1] = IncomingCallActionConfirmationStrategy.makePromptForConfirmation(itemToConfirm:);
  uint64_t v10 = *(void *)(v0 + 32);
  uint64_t v11 = *(void *)(v0 + 24);
  return v13(v11, v10);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v3();
}

uint64_t IncomingCallActionConfirmationStrategy.makeConfirmationRejectedResponse()()
{
  OUTLINED_FUNCTION_1_0();
  v1[9] = v2;
  v1[10] = v0;
  OUTLINED_FUNCTION_2();
  v1[11] = v3;
  uint64_t v4 = type metadata accessor for DialogPhase();
  OUTLINED_FUNCTION_11_0(v4);
  v1[12] = OUTLINED_FUNCTION_35();
  uint64_t v5 = type metadata accessor for CATOption();
  OUTLINED_FUNCTION_11_0(v5);
  v1[13] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v6, v7, v8);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  void *v18;
  os_log_type_t v19;
  _WORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  uint64_t v31;
  void *v32;
  uint64_t v33;

  uint64_t v32 = v0;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.siriPhone);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)OUTLINED_FUNCTION_7_2();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "#IncomingCallActionConfirmationStrategy Submitting SiriKitFlow.Output to acknowledge rejection", v4, 2u);
    OUTLINED_FUNCTION_6();
  }

  if (one-time initialization token for announceTelephony != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v1, (uint64_t)static Logger.announceTelephony);
  swift_retain_n();
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.debug.getter();
  uint64_t v7 = os_log_type_enabled(v5, v6);
  uint64_t v9 = v0[10];
  uint64_t v8 = v0[11];
  if (v7)
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315138;
    v0[7] = v9;
    uint64_t v12 = *(void *)(v8 + 80);
    uint64_t v11 = *(void *)(v8 + 88);
    type metadata accessor for IncomingCallActionConfirmationStrategy();
    swift_retain();
    uint64_t v13 = String.init<A>(describing:)();
    v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v5, v6, "#%s: User declined", v10, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {

    swift_release_n();
    uint64_t v12 = *(void *)(v8 + 80);
    uint64_t v11 = *(void *)(v8 + 88);
  }
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 24))(v12, v11);
  if (FollowUpOfferType.rawValue.getter(v15) == 0xD000000000000013 && v16 == 0x800000000048DCB0)
  {
    swift_bridgeObjectRelease();
LABEL_14:
    os_log_type_t v18 = (void *)Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_18(v19))
    {
      uint64_t v20 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_32_2(v20);
      OUTLINED_FUNCTION_25_4(&dword_0, v21, v22, "#IncomingCallActionConfirmationStrategy Offered to answer and user rejected -- allow HangUp flow to execute and provide dialog");
      OUTLINED_FUNCTION_6();
    }

    type metadata accessor for EmptyOutput();
    static EmptyOutput.instance.getter();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_6_0();
    return v23();
  }
  uint64_t v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v17) {
    goto LABEL_14;
  }
  unint64_t v25 = v0[10] + 32;
  type metadata accessor for PhoneCallCommonCATsSimple();
  static CATOption.defaultMode.getter();
  CATWrapperSimple.__allocating_init(options:globals:)();
  swift_retain();
  static DialogPhase.canceled.getter();
  outlined init with copy of SignalProviding(v25, (uint64_t)(v0 + 2));
  type metadata accessor for DialogOutputFactory();
  swift_allocObject();
  unint64_t v26 = DialogOutputFactory.init(dialog:dialogPhase:sharedGlobals:)();
  v0[14] = v26;
  swift_release();
  uint64_t v30 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v26 + 136) + **(int **)(*(void *)v26 + 136));
  swift_task_alloc();
  OUTLINED_FUNCTION_31_2();
  v0[15] = v27;
  *uint64_t v27 = v28;
  v27[1] = IncomingCallActionConfirmationStrategy.makeConfirmationRejectedResponse();
  uint64_t v29 = v0[9];
  return v30(v29);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v5 = v4;
  *(void *)(v3 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v6, v7, v8);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_6_0();
    return v9();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v0();
}

uint64_t IncomingCallActionConfirmationStrategy.makeFlowCancelledResponse()(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_21_1((uint64_t)IncomingCallActionConfirmationStrategy.makeFlowCancelledResponse());
}

uint64_t IncomingCallActionConfirmationStrategy.makeFlowCancelledResponse()()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_25_0(v1, (uint64_t)static Logger.siriPhone);
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_18(v3))
  {
    uint64_t v4 = (_WORD *)OUTLINED_FUNCTION_7_2();
    OUTLINED_FUNCTION_32_2(v4);
    OUTLINED_FUNCTION_25_4(&dword_0, v5, v6, "#IncomingCallActionConfirmationStrategy makeFlowCancelledResponse: cancellation = rejection");
    OUTLINED_FUNCTION_6();
  }
  uint64_t v7 = v0[3];

  uint64_t v12 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v7 + 200) + **(int **)(*(void *)v7 + 200));
  swift_task_alloc();
  OUTLINED_FUNCTION_31_2();
  v0[4] = v8;
  *uint64_t v8 = v9;
  v8[1] = IncomingCallActionConfirmationStrategy.makeFlowCancelledResponse();
  uint64_t v10 = v0[2];
  return v12(v10);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v3();
}

uint64_t IncomingCallActionConfirmationStrategy.makeErrorResponse(_:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  return OUTLINED_FUNCTION_21_1((uint64_t)IncomingCallActionConfirmationStrategy.makeErrorResponse(_:));
}

uint64_t IncomingCallActionConfirmationStrategy.makeErrorResponse(_:)()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_25_0(v0, (uint64_t)static Logger.siriPhone);
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_18(v2))
  {
    os_log_type_t v3 = (_WORD *)OUTLINED_FUNCTION_7_2();
    OUTLINED_FUNCTION_32_2(v3);
    OUTLINED_FUNCTION_25_4(&dword_0, v4, v5, "#IncomingCallActionConfirmationStrategy makeErrorResponse");
    OUTLINED_FUNCTION_6();
  }

  swift_willThrow();
  swift_errorRetain();
  OUTLINED_FUNCTION_47_0();
  return v6();
}

uint64_t IncomingCallActionConfirmationStrategy.makePromptForConfirmationOutput(itemToConfirm:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[10] = v2;
  v1[11] = v0;
  v1[9] = v3;
  OUTLINED_FUNCTION_2();
  v1[12] = v4;
  uint64_t v5 = type metadata accessor for Logger();
  v1[13] = v5;
  OUTLINED_FUNCTION_19_0(v5);
  v1[14] = v6;
  v1[15] = OUTLINED_FUNCTION_35();
  uint64_t v7 = type metadata accessor for DialogPhase();
  OUTLINED_FUNCTION_11_0(v7);
  v1[16] = OUTLINED_FUNCTION_35();
  uint64_t v8 = type metadata accessor for OutputGenerationManifest();
  v1[17] = v8;
  OUTLINED_FUNCTION_19_0(v8);
  v1[18] = v9;
  v1[19] = OUTLINED_FUNCTION_35();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v10);
  v1[20] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v11, v12, v13);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  char v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  uint64_t v1 = v0[20];
  uint64_t v2 = (void *)v0[11];
  uint64_t v3 = v2[12];
  uint64_t v4 = v2[13];
  __swift_project_boxed_opaque_existential_1(v2 + 9, v3);
  OUTLINED_FUNCTION_14_8();
  uint64_t v6 = v5();
  FollowUpOfferType.rawValue.getter(v6);
  SpeakableString.init(print:speak:)();
  uint64_t v7 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v1, 0, 1, v7);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 + 16) + **(int **)(v4 + 16));
  uint64_t v8 = (void *)swift_task_alloc();
  v0[21] = v8;
  *uint64_t v8 = v0;
  v8[1] = IncomingCallActionConfirmationStrategy.makePromptForConfirmationOutput(itemToConfirm:);
  uint64_t v9 = v0[20];
  return v11(v9, v3, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = *(void *)(v2 + 160);
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v5 = v4;
  *(void *)(v7 + 176) = v6;
  *(void *)(v7 + 184) = v0;
  swift_task_dealloc();
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v3, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v5 = *(void *)(v0 + 104);
  uint64_t v6 = *(void *)(v0 + 112);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  return v7();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v0();
}

uint64_t IncomingCallActionConfirmationStrategy.makePromptForConfirmationOutput(itemToConfirm:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v71 = v10;
  uint64_t v11 = v10[11];
  static DialogPhase.confirmation.getter();
  OutputGenerationManifest.init(dialogPhase:_:)();
  if (*(void *)(v11 + 120))
  {
    if (one-time initialization token for announceTelephony != -1) {
      swift_once();
    }
    uint64_t v12 = static Logger.announceTelephony;
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v12 = static Logger.siriPhone;
  }
  uint64_t v13 = (void *)v10[22];
  uint64_t v15 = v10[14];
  uint64_t v14 = v10[15];
  uint64_t v16 = v10[13];
  uint64_t v17 = __swift_project_value_buffer(v16, (uint64_t)v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v14, v17, v16);
  id v18 = v13;
  os_log_type_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  BOOL v21 = os_log_type_enabled(v19, v20);
  unint64_t v22 = (void *)v10[22];
  if (!v21)
  {

    goto LABEL_24;
  }
  os_log_type_t v65 = v20;
  uint64_t v66 = v10;
  uint64_t v23 = swift_slowAlloc();
  uint64_t v67 = swift_slowAlloc();
  *(_DWORD *)uint64_t v23 = 136315394;
  id v24 = [v22 catId];
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v27 = v26;

  v10[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, &v67);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();

  *(_WORD *)(v23 + 12) = 2080;
  id v28 = [v22 dialog];
  type metadata accessor for DialogElement();
  unint64_t v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v29 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v30) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v30 = *(void *)((char *)&dword_10 + (v29 & 0xFFFFFFFFFFFFFF8));
    if (v30)
    {
LABEL_11:
      uint64_t v68 = _swiftEmptyArrayStorage;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      if (v30 < 0)
      {
        __break(1u);
        return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v31, v32, v33, v34, v35, v36, v37, v38, a9, a10);
      }
      uint64_t v64 = v19;
      uint64_t v39 = 0;
      unint64_t v40 = v68;
      do
      {
        if ((v29 & 0xC000000000000001) != 0) {
          id v41 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v41 = *(id *)(v29 + 8 * v39 + 32);
        }
        uint64_t v42 = v41;
        uint64_t v70 = v41;
        closure #2 in implicit closure #2 in IncomingCallActionConfirmationStrategy.makePromptForConfirmationOutput(itemToConfirm:)(&v70, v69);

        uint64_t v43 = v69[0];
        uint64_t v44 = v69[1];
        uint64_t v68 = v40;
        unint64_t v45 = v40[2];
        if (v45 >= v40[3] >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          unint64_t v40 = v68;
        }
        ++v39;
        v40[2] = v45 + 1;
        uint64_t v46 = &v40[2 * v45];
        v46[4] = v43;
        v46[5] = v44;
      }
      while (v30 != v39);
      swift_bridgeObjectRelease();
      os_log_type_t v19 = v64;
      goto LABEL_23;
    }
  }
  swift_bridgeObjectRelease();
LABEL_23:
  uint64_t v10 = v66;
  uint64_t v47 = (void *)v66[22];
  uint64_t v48 = Array.description.getter();
  unint64_t v50 = v49;
  swift_bridgeObjectRelease();
  v66[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v50, &v67);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();

  _os_log_impl(&dword_0, v19, v65, "#IncomingCallActionConfirmationStrategy Follow-up offer: {\n    catId=%s,\n    dialog={\n        %s\n    }\n}", (uint8_t *)v23, 0x16u);
  swift_arrayDestroy();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_6();

LABEL_24:
  unint64_t v51 = (void *)v10[22];
  uint64_t v52 = (void *)v10[11];
  uint64_t v53 = v52[7];
  uint64_t v54 = v52[8];
  __swift_project_boxed_opaque_existential_1(v52 + 4, v53);
  (*(void (**)(uint64_t, uint64_t))(v54 + 136))(v53, v54);
  uint64_t v55 = v10[5];
  uint64_t v56 = v10[6];
  __swift_project_boxed_opaque_existential_1(v10 + 2, v55);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v57 = swift_allocObject();
  *(_OWORD *)(v57 + 16) = xmmword_46A030;
  *(void *)(v57 + 32) = v51;
  v69[0] = v57;
  specialized Array._endMutation()();
  uint64_t v58 = v69[0];
  v10[24] = v69[0];
  uint64_t v59 = *(void *)(v56 + 8);
  id v60 = v51;
  swift_task_alloc();
  OUTLINED_FUNCTION_31_2();
  v10[25] = v61;
  void *v61 = v62;
  v61[1] = IncomingCallActionConfirmationStrategy.makePromptForConfirmationOutput(itemToConfirm:);
  uint64_t v33 = v10[19];
  uint64_t v31 = v10[9];
  uint64_t v32 = v58;
  uint64_t v34 = v55;
  uint64_t v35 = v59;
  return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v31, v32, v33, v34, v35, v36, v37, v38, a9, a10);
}

uint64_t closure #1 in IncomingCallActionConfirmationStrategy.makePromptForConfirmationOutput(itemToConfirm:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin(v0 - 8);
  OutputGenerationManifest.canUseServerTTS.setter();
  IncomingCallActionConfirmationStrategy.shouldListenAfterSpeaking()();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  IncomingCallActionConfirmationStrategy.makeNLContextUpdate()();
  return OutputGenerationManifest.nlContextUpdate.setter();
}

uint64_t closure #2 in implicit closure #2 in IncomingCallActionConfirmationStrategy.makePromptForConfirmationOutput(itemToConfirm:)@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  _StringGuts.grow(_:)(30);
  id v4 = objc_msgSend(v3, "id", 0, 0xE000000000000000);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();

  uint64_t v21 = v5;
  uint64_t v22 = v7;
  v8._uint64_t countAndFlagsBits = 0x72506C6C7566203ALL;
  v8._object = (void *)0xEC0000003D746E69;
  String.append(_:)(v8);
  id v9 = [v3 fullPrint];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v10 = String.debugDescription.getter();
  uint64_t v12 = v11;
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 0x70536C6C7566202CLL;
  v14._object = (void *)0xEC0000003D6B6165;
  String.append(_:)(v14);
  id v15 = [v3 fullSpeak];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v16 = String.debugDescription.getter();
  id v18 = v17;
  swift_bridgeObjectRelease();
  v19._uint64_t countAndFlagsBits = v16;
  v19._object = v18;
  String.append(_:)(v19);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v21;
  a2[1] = v22;
  return result;
}

uint64_t IncomingCallActionConfirmationStrategy.makeNLContextUpdate()()
{
  return (*(uint64_t (**)(void, BOOL))(**(void **)(v0 + 112) + 96))(*(void *)(v0 + 24), *(void *)(v0 + 120) != 0);
}

BOOL IncomingCallActionConfirmationStrategy.shouldListenAfterSpeaking()()
{
  uint64_t v1 = *(void *)(v0 + 120);
  if (one-time initialization token for announceTelephony != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = OUTLINED_FUNCTION_25_0(v2, (uint64_t)static Logger.announceTelephony);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v3, v4, "#IncomingCallActionConfirmationStrategy listenAfterSpeaking = %{BOOL}d", v5, 8u);
    OUTLINED_FUNCTION_6();
  }

  return v1 == 0;
}

uint64_t IncomingCallActionConfirmationStrategy.deinit()
{
  swift_bridgeObjectRelease();

  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  __swift_destroy_boxed_opaque_existential_1(v0 + 72);
  swift_release();

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 144);
  return v0;
}

uint64_t IncomingCallActionConfirmationStrategy.__deallocating_deinit()
{
  IncomingCallActionConfirmationStrategy.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.actionForInput(_:) in conformance IncomingCallActionConfirmationStrategy<A>()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.parseConfirmationResponse(input:) in conformance IncomingCallActionConfirmationStrategy<A>(uint64_t a1, uint64_t a2)
{
  Swift::String v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 176) + **(int **)(*(void *)v2 + 176));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = UnsupportedFlowCATs.deleteVoicemail();
  return v8(a1, a2);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makePromptForConfirmation(itemToConfirm:) in conformance IncomingCallActionConfirmationStrategy<A>(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  Swift::String v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 192) + **(int **)(*(void *)v2 + 192));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = UnsupportedFlowCATs.deleteVoicemail();
  return v8(a1, v5);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:) in conformance IncomingCallActionConfirmationStrategy<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::String v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for IncomingCallActionConfirmationStrategy();
  *Swift::String v8 = v4;
  v8[1] = UnsupportedFlowCATs.deleteVoicemail();
  return PromptForConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:)(a1, a2, v9, a4);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:) in conformance IncomingCallActionConfirmationStrategy<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::String v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for IncomingCallActionConfirmationStrategy();
  *Swift::String v8 = v4;
  v8[1] = UnsupportedFlowCATs.deleteVoicemail();
  return PromptForConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:)(a1, a2, v9, a4);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeConfirmationRejectedResponse() in conformance IncomingCallActionConfirmationStrategy<A>(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 200) + **(int **)(*(void *)v1 + 200));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = UnsupportedFlowCATs.deleteVoicemail();
  return v6(a1);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeFlowCancelledResponse() in conformance IncomingCallActionConfirmationStrategy<A>(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 208) + **(int **)(*(void *)v1 + 208));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return v6(a1);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeErrorResponse(_:) in conformance IncomingCallActionConfirmationStrategy<A>(uint64_t a1, uint64_t a2)
{
  Swift::String v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 216) + **(int **)(*(void *)v2 + 216));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = UnsupportedFlowCATs.deleteVoicemail();
  return v8(a1, a2);
}

uint64_t partial apply for closure #1 in static CommonOutputs.promptCancelled(sharedGlobals:phoneCallCommonCATsSimple:)()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #1 in static CommonOutputs.promptCancelled(sharedGlobals:phoneCallCommonCATsSimple:);
  return closure #1 in static CommonOutputs.promptCancelled(sharedGlobals:phoneCallCommonCATsSimple:)(v0);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;

  OUTLINED_FUNCTION_1_0();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_4_2();
  void *v4 = v3;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v3 + 8);
  return v5(v2);
}

uint64_t type metadata accessor for IncomingCallActionConfirmationStrategy()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in IncomingCallActionConfirmationStrategy.makePromptForConfirmationOutput(itemToConfirm:)()
{
  return closure #1 in IncomingCallActionConfirmationStrategy.makePromptForConfirmationOutput(itemToConfirm:)();
}

unint64_t lazy protocol witness table accessor for type IncomingCallActionConfirmation and conformance IncomingCallActionConfirmation()
{
  unint64_t result = lazy protocol witness table cache variable for type IncomingCallActionConfirmation and conformance IncomingCallActionConfirmation;
  if (!lazy protocol witness table cache variable for type IncomingCallActionConfirmation and conformance IncomingCallActionConfirmation)
  {
    type metadata accessor for IncomingCallActionConfirmation();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncomingCallActionConfirmation and conformance IncomingCallActionConfirmation);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for IncomingCallActionConfirmation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (newInput: Input));
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v9 = type metadata accessor for Input();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for IncomingCallActionConfirmation(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (newInput: Input));
  uint64_t result = __swift_getEnumTagSinglePayload(a1, 1, v2);
  if (!result)
  {
    uint64_t v4 = type metadata accessor for Input();
    int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    return v5(a1, v4);
  }
  return result;
}

void *initializeWithCopy for IncomingCallActionConfirmation(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (newInput: Input));
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v7 = type metadata accessor for Input();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  return a1;
}

void *assignWithCopy for IncomingCallActionConfirmation(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (newInput: Input));
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (!EnumTagSinglePayload)
  {
    if (!v8)
    {
      uint64_t v11 = type metadata accessor for Input();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 24))(a1, a2, v11);
      return a1;
    }
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)a1, &demangling cache variable for type metadata for (newInput: Input));
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  uint64_t v9 = type metadata accessor for Input();
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  return a1;
}

void *initializeWithTake for IncomingCallActionConfirmation(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (newInput: Input));
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v7 = type metadata accessor for Input();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  return a1;
}

void *assignWithTake for IncomingCallActionConfirmation(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (newInput: Input));
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (!EnumTagSinglePayload)
  {
    if (!v8)
    {
      uint64_t v11 = type metadata accessor for Input();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 40))(a1, a2, v11);
      return a1;
    }
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)a1, &demangling cache variable for type metadata for (newInput: Input));
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  uint64_t v9 = type metadata accessor for Input();
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for IncomingCallActionConfirmation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_8A1BC);
}

uint64_t sub_8A1BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (newInput: Input));
  unsigned int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(a1, a2, v4);
  if (EnumTagSinglePayload >= 2) {
    return EnumTagSinglePayload - 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for IncomingCallActionConfirmation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_8A21C);
}

uint64_t sub_8A21C(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (newInput: Input));

  return __swift_storeEnumTagSinglePayload(a1, v5, a3, v6);
}

uint64_t getEnumTag for IncomingCallActionConfirmation(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (newInput: Input));

  return __swift_getEnumTagSinglePayload(a1, 1, v2);
}

uint64_t destructiveInjectEnumTag for IncomingCallActionConfirmation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (newInput: Input));

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v4);
}

uint64_t type metadata completion function for IncomingCallActionConfirmation()
{
  uint64_t result = type metadata accessor for Input();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for IncomingCallActionConfirmationStrategy()
{
  return swift_initClassMetadata2();
}

uint64_t OUTLINED_FUNCTION_13_5()
{
  return v0 + 32;
}

uint64_t OUTLINED_FUNCTION_16_11()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_24_8@<X0>(uint64_t a1@<X8>)
{
  return v1 + ((a1 + 32) & ~a1);
}

uint64_t OUTLINED_FUNCTION_29_5()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_30_5()
{
  return __swift_storeEnumTagSinglePayload(v0, 0, 1, v1);
}

size_t OUTLINED_FUNCTION_33_3(const void *a1)
{
  return _swift_stdlib_malloc_size(a1);
}

uint64_t SCHRowCardSectionComponentsFactory.device.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1, a1);
}

uint64_t SCHRowCardSectionComponentsFactory.displayTextCats.getter()
{
  return swift_retain();
}

uint64_t CallRecordToCallBackSlotTemplating.makeParameterPromptDialog(app:parameterName:intent:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v8 = type metadata accessor for PhoneError();
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_5_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_2_17();
  OUTLINED_FUNCTION_0_13(4);
  lazy protocol witness table accessor for type PhoneError and conformance PhoneError();
  OUTLINED_FUNCTION_4_15();
  OUTLINED_FUNCTION_7_17();
  PhoneError.logged()(v8);
  outlined destroy of PhoneError(v5);
  OUTLINED_FUNCTION_5_12();
  uint64_t v11 = OUTLINED_FUNCTION_6_14();
  a5(v11);
  return outlined destroy of Result<TemplatingResult, Error>(v6);
}

unint64_t lazy protocol witness table accessor for type PhoneError and conformance PhoneError()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneError and conformance PhoneError;
  if (!lazy protocol witness table cache variable for type PhoneError and conformance PhoneError)
  {
    type metadata accessor for PhoneError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError);
  }
  return result;
}

uint64_t outlined destroy of Result<TemplatingResult, Error>(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t CallRecordToCallBackSlotTemplating.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:inferenceSource:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t))
{
  uint64_t v10 = type metadata accessor for PhoneError();
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_5_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_2_17();
  OUTLINED_FUNCTION_0_13(3);
  lazy protocol witness table accessor for type PhoneError and conformance PhoneError();
  OUTLINED_FUNCTION_4_15();
  OUTLINED_FUNCTION_7_17();
  PhoneError.logged()(v10);
  outlined destroy of PhoneError(v7);
  OUTLINED_FUNCTION_5_12();
  uint64_t v13 = OUTLINED_FUNCTION_6_14();
  a7(v13);
  return outlined destroy of Result<TemplatingResult, Error>(v8);
}

uint64_t CallRecordToCallBackSlotTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t))
{
  uint64_t v11 = type metadata accessor for PhoneError();
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_5_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_2_17();
  OUTLINED_FUNCTION_0_13(2);
  lazy protocol witness table accessor for type PhoneError and conformance PhoneError();
  OUTLINED_FUNCTION_4_15();
  OUTLINED_FUNCTION_7_17();
  PhoneError.logged()(v11);
  outlined destroy of PhoneError(v8);
  OUTLINED_FUNCTION_5_12();
  uint64_t v14 = OUTLINED_FUNCTION_6_14();
  a8(v14);
  return outlined destroy of Result<TemplatingResult, Error>(v9);
}

uint64_t CallRecordToCallBackSlotTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void **)(v9 + 40);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a8;
  *(void *)(v12 + 24) = a9;
  uint64_t v13 = *(void (**)(uint64_t (*)(uint64_t), uint64_t))(class metadata base offset for StartCallCATs
                                                                        + *v11
                                                                        + 1696);
  swift_retain();
  v13(partial apply for closure #1 in CallRecordToCallBackSlotTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:), v12);

  return swift_release();
}

uint64_t closure #1 in CallRecordToCallBackSlotTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:)(uint64_t a1, void (*a2)(void *))
{
  uint64_t v4 = type metadata accessor for BehaviorAfterSpeaking();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for TemplatingResult();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  OUTLINED_FUNCTION_15();
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (uint64_t *)((char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  uint64_t v14 = (uint64_t *)((char *)&v16 - v13);
  outlined init with copy of Result<TemplatingResult, Error>(a1, (uint64_t)v12);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *uint64_t v14 = *v12;
  }
  else
  {
    (*(void (**)(char *, void *, uint64_t))(v6 + 32))(v8, v12, v5);
    TemplatingResult.speak.getter();
    TemplatingResult.print.getter();
    TemplatingResult.behaviorAfterSpeaking.getter();
    TemplatingResult.dialogIdentifier.getter();
    TemplatingResult.init(templateIdentifier:speak:print:behaviorAfterSpeaking:dialogIdentifier:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  swift_storeEnumTagMultiPayload();
  a2(v14);
  return outlined destroy of Result<TemplatingResult, Error>((uint64_t)v14);
}

uint64_t sub_8ABC8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for closure #1 in CallRecordToCallBackSlotTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:)(uint64_t a1)
{
  return closure #1 in CallRecordToCallBackSlotTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:)(a1, *(void (**)(void *))(v1 + 16));
}

uint64_t SCHRowCardSectionComponentsFactory.init(device:displayTextCats:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = outlined init with take of AppSelectionSignalComponent(a1, a3);
  *(void *)(a3 + 40) = a2;
  return result;
}

uint64_t protocol witness for SlotTemplating.makeParameterPromptDialog(app:parameterName:intent:_:) in conformance CallRecordToCallBackSlotTemplating(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  return CallRecordToCallBackSlotTemplating.makeParameterPromptDialog(app:parameterName:intent:_:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for SlotTemplating.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:inferenceSource:_:) in conformance CallRecordToCallBackSlotTemplating(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t))
{
  return CallRecordToCallBackSlotTemplating.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:inferenceSource:_:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t protocol witness for SlotTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:_:) in conformance CallRecordToCallBackSlotTemplating(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t))
{
  return CallRecordToCallBackSlotTemplating.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:_:)(a1, a2, a3, a4, a5, 0, a7, a8);
}

uint64_t protocol witness for SlotTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:) in conformance CallRecordToCallBackSlotTemplating(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return CallRecordToCallBackSlotTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t destroy for CallRecordToCallBackSlotTemplating(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);

  return swift_release();
}

uint64_t initializeWithCopy for CallRecordToCallBackSlotTemplating(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  return a1;
}

uint64_t *assignWithCopy for CallRecordToCallBackSlotTemplating(uint64_t *a1, uint64_t *a2)
{
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CallRecordToCallBackSlotTemplating(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CallRecordToCallBackSlotTemplating(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CallRecordToCallBackSlotTemplating(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CallRecordToCallBackSlotTemplating()
{
  return &type metadata for CallRecordToCallBackSlotTemplating;
}

uint64_t outlined init with copy of Result<TemplatingResult, Error>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_0_13@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 16) = a1;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(unsigned char *)(v1 + 56) = 1;
  return swift_storeEnumTagMultiPayload();
}

void OUTLINED_FUNCTION_2_17()
{
  void *v1 = v2;
  v1[1] = v0;
}

uint64_t OUTLINED_FUNCTION_4_15()
{
  return swift_allocError();
}

uint64_t OUTLINED_FUNCTION_6_14()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_7_17()
{
  return swift_bridgeObjectRetain();
}

uint64_t one-time initialization function for encoder(uint64_t a1)
{
  return one-time initialization function for encoder(a1, (void (*)(void))&type metadata accessor for JSONEncoder, (uint64_t (*)(void))&JSONEncoder.init(), &static DictionaryEncoderDecoder.encoder);
}

uint64_t one-time initialization function for decoder(uint64_t a1)
{
  return one-time initialization function for encoder(a1, (void (*)(void))&type metadata accessor for JSONDecoder, (uint64_t (*)(void))&JSONDecoder.init(), &static DictionaryEncoderDecoder.decoder);
}

uint64_t one-time initialization function for encoder(uint64_t a1, void (*a2)(void), uint64_t (*a3)(void), uint64_t *a4)
{
  a2(0);
  swift_allocObject();
  uint64_t result = a3();
  *a4 = result;
  return result;
}

id static DictionaryEncoderDecoder.encode<A>(_:)(id a1)
{
  if (one-time initialization token for encoder != -1) {
    swift_once();
  }
  uint64_t v3 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (!v1)
  {
    uint64_t v5 = v3;
    unint64_t v6 = v4;
    uint64_t v7 = self;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    v15[0] = 0;
    id v9 = [v7 JSONObjectWithData:isa options:0 error:v15];

    if (v9)
    {
      id v10 = v15[0];
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      if (swift_dynamicCast()) {
        uint64_t v11 = v14;
      }
      else {
        uint64_t v11 = Dictionary.init(dictionaryLiteral:)();
      }
      specialized _dictionaryUpCast<A, B, C, D>(_:)(v11);
      a1 = v12;
      outlined consume of Data._Representation(v5, v6);
      swift_bridgeObjectRelease();
    }
    else
    {
      a1 = v15[0];
      _convertNSErrorToError(_:)();

      swift_willThrow();
      outlined consume of Data._Representation(v5, v6);
    }
  }
  return a1;
}

void specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v32 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v31 = (unint64_t)(63 - v3) >> 6;
  unint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  swift_retain();
  int64_t v7 = 0;
  if (!v5) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v8 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  unint64_t v9 = v8 | (v7 << 6);
  while (1)
  {
    id v18 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v9);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v9, (uint64_t)v44);
    *(void *)&long long v43 = v20;
    *((void *)&v43 + 1) = v19;
    _OWORD v41[2] = v43;
    v42[0] = v44[0];
    v42[1] = v44[1];
    *(void *)&v41[0] = v20;
    *((void *)&v41[0] + 1) = v19;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v42, v36);
    long long v37 = v33;
    long long v38 = v34;
    uint64_t v39 = v35;
    outlined init with take of Any(v36, v40);
    long long v33 = v37;
    long long v34 = v38;
    uint64_t v35 = v39;
    outlined init with take of Any(v40, v41);
    outlined init with take of Any(v41, &v37);
    Swift::Int v21 = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v22 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v23 = v21 & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)&v6[8 * (v23 >> 6)]) == 0)
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v22) >> 6;
      while (++v24 != v27 || (v26 & 1) == 0)
      {
        BOOL v28 = v24 == v27;
        if (v24 == v27) {
          unint64_t v24 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)&v6[8 * v24];
        if (v29 != -1)
        {
          unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          goto LABEL_38;
        }
      }
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    unint64_t v25 = __clz(__rbit64((-1 << v23) & ~*(void *)&v6[8 * (v23 >> 6)])) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_38:
    *(void *)&v6[(v25 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v25;
    uint64_t v30 = v2[6] + 40 * v25;
    *(_OWORD *)uint64_t v30 = v33;
    *(_OWORD *)(v30 + 16) = v34;
    *(void *)(v30 + 32) = v35;
    outlined init with take of Any(&v37, (_OWORD *)(v2[7] + 32 * v25));
    ++v2[2];
    if (v5) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1)) {
      goto LABEL_42;
    }
    if (v10 >= v31) {
      goto LABEL_40;
    }
    unint64_t v11 = *(void *)(v32 + 8 * v10);
    int64_t v12 = v7 + 1;
    if (!v11)
    {
      OUTLINED_FUNCTION_2_18();
      if (v13 == v14) {
        goto LABEL_40;
      }
      OUTLINED_FUNCTION_1_17();
      if (!v11)
      {
        OUTLINED_FUNCTION_2_18();
        if (v13 == v14) {
          goto LABEL_40;
        }
        OUTLINED_FUNCTION_1_17();
        if (!v11)
        {
          OUTLINED_FUNCTION_2_18();
          if (v13 == v14) {
            goto LABEL_40;
          }
          OUTLINED_FUNCTION_1_17();
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_28:
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
    int64_t v7 = v12;
  }
  int64_t v16 = v15 + 4;
  if (v16 >= v31)
  {
LABEL_40:
    swift_release();
    outlined consume of [String : Any].Iterator._Variant();
    return;
  }
  unint64_t v11 = *(void *)(v32 + 8 * v16);
  if (v11)
  {
    int64_t v12 = v16;
    goto LABEL_28;
  }
  while (!__OFADD__(v16, 1))
  {
    OUTLINED_FUNCTION_2_18();
    if (v13 == v14) {
      goto LABEL_40;
    }
    OUTLINED_FUNCTION_1_17();
    int64_t v16 = v17 + 1;
    if (v11) {
      goto LABEL_28;
    }
  }
LABEL_43:
  __break(1u);
}

uint64_t static DictionaryEncoderDecoder.decode<A>(type:_:)()
{
  uint64_t v0 = self;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  id v9 = 0;
  id v2 = [v0 dataWithJSONObject:isa options:0 error:&v9];

  id v3 = v9;
  if (v2)
  {
    uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v6 = v5;

    if (one-time initialization token for decoder != -1) {
      swift_once();
    }
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    return outlined consume of Data._Representation(v4, v6);
  }
  else
  {
    unint64_t v8 = v3;
    _convertNSErrorToError(_:)();

    return swift_willThrow();
  }
}

uint64_t specialized DictionaryCodable.toDictionary()()
{
  if (one-time initialization token for encoder != -1) {
    swift_once();
  }
  lazy protocol witness table accessor for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory();
  uint64_t v1 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v3 = v2;
  uint64_t v4 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v13[0] = 0;
  id v6 = [v4 JSONObjectWithData:isa options:0 error:v13];

  if (v6)
  {
    id v7 = v13[0];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    if (swift_dynamicCast()) {
      uint64_t v8 = v12;
    }
    else {
      uint64_t v8 = Dictionary.init(dictionaryLiteral:)();
    }
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v8);
    uint64_t v0 = v10;
    outlined consume of Data._Representation(v1, v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v9 = v13[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    outlined consume of Data._Representation(v1, v3);
    swift_errorRelease();
    return Dictionary.init(dictionaryLiteral:)();
  }
  return v0;
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  void *v4;
  Class isa;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v12;
  id v13[4];

  if (one-time initialization token for encoder != -1) {
    swift_once();
  }
  lazy protocol witness table accessor for type OneTimeHintHistory and conformance OneTimeHintHistory();
  uint64_t v1 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v3 = v2;
  uint64_t v4 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v13[0] = 0;
  id v6 = [v4 JSONObjectWithData:isa options:0 error:v13];

  if (v6)
  {
    id v7 = v13[0];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    if (swift_dynamicCast()) {
      uint64_t v8 = v12;
    }
    else {
      uint64_t v8 = Dictionary.init(dictionaryLiteral:)();
    }
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v8);
    uint64_t v0 = v10;
    outlined consume of Data._Representation(v1, v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v9 = v13[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    outlined consume of Data._Representation(v1, v3);
    swift_errorRelease();
    return Dictionary.init(dictionaryLiteral:)();
  }
  return v0;
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  void *v4;
  Class isa;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v12;
  id v13[4];

  if (one-time initialization token for encoder != -1) {
    swift_once();
  }
  lazy protocol witness table accessor for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory();
  uint64_t v1 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v3 = v2;
  uint64_t v4 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v13[0] = 0;
  id v6 = [v4 JSONObjectWithData:isa options:0 error:v13];

  if (v6)
  {
    id v7 = v13[0];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    if (swift_dynamicCast()) {
      uint64_t v8 = v12;
    }
    else {
      uint64_t v8 = Dictionary.init(dictionaryLiteral:)();
    }
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v8);
    uint64_t v0 = v10;
    outlined consume of Data._Representation(v1, v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v9 = v13[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    outlined consume of Data._Representation(v1, v3);
    swift_errorRelease();
    return Dictionary.init(dictionaryLiteral:)();
  }
  return v0;
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  void *v4;
  Class isa;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v12;
  id v13[4];

  if (one-time initialization token for encoder != -1) {
    swift_once();
  }
  lazy protocol witness table accessor for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory();
  uint64_t v1 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v3 = v2;
  uint64_t v4 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v13[0] = 0;
  id v6 = [v4 JSONObjectWithData:isa options:0 error:v13];

  if (v6)
  {
    id v7 = v13[0];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    if (swift_dynamicCast()) {
      uint64_t v8 = v12;
    }
    else {
      uint64_t v8 = Dictionary.init(dictionaryLiteral:)();
    }
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v8);
    uint64_t v0 = v10;
    outlined consume of Data._Representation(v1, v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v9 = v13[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    outlined consume of Data._Representation(v1, v3);
    swift_errorRelease();
    return Dictionary.init(dictionaryLiteral:)();
  }
  return v0;
}

id DictionaryCodable.toDictionary()()
{
  return static DictionaryEncoderDecoder.encode<A>(_:)(v0);
}

id specialized static DictionaryCodable.fromDictionary(dictionary:)()
{
  uint64_t v0 = self;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  id v9 = 0;
  id v2 = [v0 dataWithJSONObject:isa options:0 error:&v9];

  id v3 = v9;
  if (v2)
  {
    uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v6 = v5;

    if (one-time initialization token for decoder != -1) {
      swift_once();
    }
    lazy protocol witness table accessor for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    outlined consume of Data._Representation(v4, v6);
    return v9;
  }
  else
  {
    id v7 = v3;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    return 0;
  }
}

{
  void *v0;
  Class isa;
  id v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *v7;
  id v9;

  uint64_t v0 = self;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  id v9 = 0;
  id v2 = [v0 dataWithJSONObject:isa options:0 error:&v9];

  id v3 = v9;
  if (v2)
  {
    uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v6 = v5;

    if (one-time initialization token for decoder != -1) {
      swift_once();
    }
    lazy protocol witness table accessor for type OneTimeHintHistory and conformance OneTimeHintHistory();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    outlined consume of Data._Representation(v4, v6);
    return v9;
  }
  else
  {
    id v7 = v3;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    return 0;
  }
}

{
  void *v0;
  Class isa;
  id v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *v7;
  id v9;

  uint64_t v0 = self;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  id v9 = 0;
  id v2 = [v0 dataWithJSONObject:isa options:0 error:&v9];

  id v3 = v9;
  if (v2)
  {
    uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v6 = v5;

    if (one-time initialization token for decoder != -1) {
      swift_once();
    }
    lazy protocol witness table accessor for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    outlined consume of Data._Representation(v4, v6);
    return v9;
  }
  else
  {
    id v7 = v3;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    return 0;
  }
}

uint64_t specialized static DictionaryCodable.fromDictionary(dictionary:)()
{
  uint64_t v0 = self;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  id v9 = 0;
  id v2 = [v0 dataWithJSONObject:isa options:0 error:&v9];

  id v3 = v9;
  if (v2)
  {
    uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v6 = v5;

    if (one-time initialization token for decoder != -1) {
      swift_once();
    }
    lazy protocol witness table accessor for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    outlined consume of Data._Representation(v4, v6);
    return v9;
  }
  else
  {
    id v7 = v3;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    return 0;
  }
}

uint64_t static DictionaryCodable.fromDictionary(dictionary:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  static DictionaryEncoderDecoder.decode<A>(type:_:)();

  return __swift_storeEnumTagSinglePayload(a2, 0, 1, a1);
}

uint64_t protocol witness for DictionaryCodable.toDictionary() in conformance AnnounceVoicemailHintHistory()
{
  return specialized DictionaryCodable.toDictionary()();
}

id protocol witness for static DictionaryCodable.fromDictionary(dictionary:) in conformance AnnounceVoicemailHintHistory@<X0>(uint64_t a1@<X8>)
{
  id result = specialized static DictionaryCodable.fromDictionary(dictionary:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v5 & 1;
  return result;
}

uint64_t protocol witness for DictionaryCodable.toDictionary() in conformance OneTimeHintHistory()
{
  return specialized DictionaryCodable.toDictionary()();
}

id protocol witness for static DictionaryCodable.fromDictionary(dictionary:) in conformance OneTimeHintHistory@<X0>(uint64_t a1@<X8>)
{
  id result = specialized static DictionaryCodable.fromDictionary(dictionary:)();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t protocol witness for DictionaryCodable.toDictionary() in conformance ForcedAppDisambiguationHistory()
{
  return specialized DictionaryCodable.toDictionary()();
}

uint64_t protocol witness for static DictionaryCodable.fromDictionary(dictionary:) in conformance ForcedAppDisambiguationHistory@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized static DictionaryCodable.fromDictionary(dictionary:)();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

uint64_t protocol witness for DictionaryCodable.toDictionary() in conformance AppNameSpecifiedByUserSignalCollectionHistory()
{
  return specialized DictionaryCodable.toDictionary()();
}

id protocol witness for static DictionaryCodable.fromDictionary(dictionary:) in conformance AppNameSpecifiedByUserSignalCollectionHistory@<X0>(void *a1@<X8>)
{
  id result = specialized static DictionaryCodable.fromDictionary(dictionary:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

ValueMetadata *type metadata accessor for DictionaryEncoderDecoder()
{
  return &type metadata for DictionaryEncoderDecoder;
}

unint64_t lazy protocol witness table accessor for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory()
{
  unint64_t result = lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory;
  if (!lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory;
  if (!lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory;
  if (!lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory;
  if (!lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory;
  if (!lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory;
  if (!lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory()
{
  unint64_t result = lazy protocol witness table cache variable for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory;
  if (!lazy protocol witness table cache variable for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory;
  if (!lazy protocol witness table cache variable for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory;
  if (!lazy protocol witness table cache variable for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory;
  if (!lazy protocol witness table cache variable for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory;
  if (!lazy protocol witness table cache variable for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory;
  if (!lazy protocol witness table cache variable for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type OneTimeHintHistory and conformance OneTimeHintHistory()
{
  unint64_t result = lazy protocol witness table cache variable for type OneTimeHintHistory and conformance OneTimeHintHistory;
  if (!lazy protocol witness table cache variable for type OneTimeHintHistory and conformance OneTimeHintHistory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneTimeHintHistory and conformance OneTimeHintHistory);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OneTimeHintHistory and conformance OneTimeHintHistory;
  if (!lazy protocol witness table cache variable for type OneTimeHintHistory and conformance OneTimeHintHistory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneTimeHintHistory and conformance OneTimeHintHistory);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OneTimeHintHistory and conformance OneTimeHintHistory;
  if (!lazy protocol witness table cache variable for type OneTimeHintHistory and conformance OneTimeHintHistory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneTimeHintHistory and conformance OneTimeHintHistory);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OneTimeHintHistory and conformance OneTimeHintHistory;
  if (!lazy protocol witness table cache variable for type OneTimeHintHistory and conformance OneTimeHintHistory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneTimeHintHistory and conformance OneTimeHintHistory);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OneTimeHintHistory and conformance OneTimeHintHistory;
  if (!lazy protocol witness table cache variable for type OneTimeHintHistory and conformance OneTimeHintHistory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneTimeHintHistory and conformance OneTimeHintHistory);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory()
{
  unint64_t result = lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory;
  if (!lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory;
  if (!lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory;
  if (!lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory;
  if (!lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory;
  if (!lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory;
  if (!lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory);
  }
  return result;
}

unsigned __int8 static PhoneCallNLContextProvider.makeNeedsValueContextFor(parameter:)(uint64_t a1, void *a2)
{
  NLContextUpdate.init()();
  PhoneCallNLConstants.canonicalName.getter(1);
  NLContextUpdate.weightedPromptTargetDomain.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v4 = OUTLINED_FUNCTION_65();
  *(_OWORD *)(v4 + 16) = xmmword_467710;
  OUTLINED_FUNCTION_54_0();
  lazy protocol witness table accessor for type String and conformance String();
  OUTLINED_FUNCTION_30_6();
  swift_bridgeObjectRelease();
  unint64_t v14 = PhoneCallNLConstants.canonicalName.getter(6);
  uint64_t v15 = v5;
  OUTLINED_FUNCTION_5_13();
  Swift::String v6 = String.uppercased()();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v4 + 32) = v14;
  *(void *)(v4 + 40) = v15;
  unsigned __int8 result = NLContextUpdate.weightedPromptResponseOptions.setter();
  if (a2)
  {
    swift_bridgeObjectRetain();
    v8._uint64_t countAndFlagsBits = a1;
    v8._object = a2;
    unsigned __int8 result = PhoneCallSlotNames.init(rawValue:)(v8).value;
    if (result - 4 < 2)
    {
LABEL_5:
      uint64_t v9 = OUTLINED_FUNCTION_60_1();
      *(_OWORD *)(v9 + 16) = xmmword_467720;
      *(void *)(v9 + 32) = PhoneCallNLConstants.canonicalName.getter(3);
      *(void *)(v9 + 40) = v10;
      *(void *)(v9 + 48) = PhoneCallNLConstants.canonicalName.getter(5);
      *(void *)(v9 + 56) = v11;
      OUTLINED_FUNCTION_75_0();
      NLContextUpdate.weightedPromptStrict.setter();
      static PhoneCallNLContextProvider.makeSDAForNeedsValueForContact()();
      return NLContextUpdate.nluSystemDialogActs.setter();
    }
    if (result != 10)
    {
      if (result != 19) {
        return result;
      }
      goto LABEL_5;
    }
    uint64_t v12 = OUTLINED_FUNCTION_65();
    *(_OWORD *)(v12 + 16) = xmmword_467710;
    *(void *)(v12 + 32) = PhoneCallNLConstants.canonicalName.getter(7);
    *(void *)(v12 + 40) = v13;
    OUTLINED_FUNCTION_75_0();
    return NLContextUpdate.weightedPromptStrict.setter();
  }
  return result;
}

char static PhoneCallNLContextProvider.makeGenericConfirmationContextFor(parameter:)(uint64_t a1, void *a2)
{
  char result = static PhoneCallNLContextProvider.makeGenericConfirmationNLv3Context()();
  if (a2)
  {
    swift_bridgeObjectRetain();
    v5._uint64_t countAndFlagsBits = a1;
    v5._object = a2;
    char result = PhoneCallSlotNames.init(rawValue:)(v5).value;
    if ((result & 0xFE) == 4)
    {
      static PhoneCallNLContextProvider.makeSDAForConfirmation()();
      return NLContextUpdate.nluSystemDialogActs.setter();
    }
  }
  return result;
}

uint64_t PhoneCallNLContextProvider.__allocating_init(deviceState:assistantProperties:)(uint64_t a1, uint64_t a2)
{
  return PhoneCallNLContextProvider.init(deviceState:assistantProperties:)(a1, a2);
}

uint64_t PhoneCallNLContextProvider.assistantProperties.getter()
{
  OUTLINED_FUNCTION_2();
  return outlined init with copy of SignalProviding(v0 + *(void *)(class metadata base offset for PhoneCallNLContextProvider + v1 + 16), v2);
}

uint64_t PhoneCallNLContextProvider.deviceState.getter()
{
  OUTLINED_FUNCTION_2();
  return outlined init with copy of SignalProviding(v0 + *(void *)(class metadata base offset for PhoneCallNLContextProvider + v1 + 24), v2);
}

uint64_t PhoneCallNLContextProvider.init(deviceState:assistantProperties:)(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_2();
  outlined init with copy of SignalProviding(a2, v2 + *(void *)(class metadata base offset for PhoneCallNLContextProvider + v5 + 16));
  OUTLINED_FUNCTION_2();
  outlined init with copy of SignalProviding(a1, v2 + *(void *)(class metadata base offset for PhoneCallNLContextProvider + v6 + 24));
  uint64_t v7 = DefaultNLContextProvider.init()();
  __swift_destroy_boxed_opaque_existential_1(a2);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v7;
}

uint64_t PhoneCallNLContextProvider.makeContextForHandleIntent(intent:handleIntentResponse:_:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v6 = OUTLINED_FUNCTION_11_0(v5);
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_52();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  Swift::String v8 = OUTLINED_FUNCTION_25_0(v7, (uint64_t)static Logger.siriPhone);
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
    OUTLINED_FUNCTION_84(&dword_0, v10, v11, "#PhoneCallNLContextProvider makeContextForHandleIntent");
    OUTLINED_FUNCTION_6();
  }

  static PhoneCallNLContextProvider.makeContextForHandleIntent(intent:handleIntentResponse:)();
  a3(v3);
  return outlined destroy of UUID?(v3, &demangling cache variable for type metadata for NLContextUpdate?);
}

void static PhoneCallNLContextProvider.makeContextForHandleIntent(intent:handleIntentResponse:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v2 = v1;
  uint64_t v70 = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
  uint64_t v5 = OUTLINED_FUNCTION_11_0(v4);
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_4();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = type metadata accessor for RREntity();
  OUTLINED_FUNCTION_0_0();
  uint64_t v80 = v10;
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_46_0();
  uint64_t v14 = v12 - v13;
  __chkstk_darwin(v15);
  uint64_t v81 = (void (*)(uint64_t))((char *)&v66 - v16);
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v66 - v18;
  uint64_t v69 = type metadata accessor for NLContextUpdate();
  OUTLINED_FUNCTION_0_0();
  uint64_t v68 = v20;
  __chkstk_darwin(v21);
  OUTLINED_FUNCTION_3_1();
  uint64_t v74 = v22;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  uint64_t v79 = __swift_project_value_buffer(v23, (uint64_t)static Logger.siriPhone);
  unint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  BOOL v26 = OUTLINED_FUNCTION_14_2(v25);
  uint64_t v75 = v14;
  if (v26)
  {
    unint64_t v27 = (uint8_t *)OUTLINED_FUNCTION_7_2();
    *(_WORD *)unint64_t v27 = 0;
    _os_log_impl(&dword_0, v24, v0, "#PhoneCallNLContextProvider makeContextForHandleIntent", v27, 2u);
    OUTLINED_FUNCTION_6();
  }

  NLContextUpdate.init()();
  swift_getObjectType();
  if (!dynamic_cast_existential_1_conditional((uint64_t)v2)) {
    goto LABEL_34;
  }
  uint64_t v29 = v28;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v31 = *(void *)(*(void *)(v29 + 8) + 8);
  uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t))(v31 + 8);
  id v33 = v2;
  unint64_t v34 = v32(ObjectType, v31);
  if (!v34)
  {
    uint64_t v59 = _swiftEmptyArrayStorage;
LABEL_31:
    if (v59[2])
    {
      NLContextUpdate.rrEntities.setter();

      OUTLINED_FUNCTION_70();
      v60();
LABEL_35:
      OUTLINED_FUNCTION_72_0();
      __swift_storeEnumTagSinglePayload(v62, v63, v64, v65);
      OUTLINED_FUNCTION_26_1();
      return;
    }
    swift_bridgeObjectRelease();

LABEL_34:
    OUTLINED_FUNCTION_11();
    v61();
    goto LABEL_35;
  }
  unint64_t v36 = v34;
  if (v34 >> 62) {
    uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v37 = *(void *)((char *)&dword_10 + (v34 & 0xFFFFFFFFFFFFFF8));
  }
  uint64_t v38 = v75;
  uint64_t v39 = v81;
  id v67 = v33;
  if (!v37)
  {
    uint64_t v87 = _swiftEmptyArrayStorage;
LABEL_30:
    swift_bridgeObjectRelease();
    id v33 = v67;
    uint64_t v59 = v87;
    goto LABEL_31;
  }
  if (v37 >= 1)
  {
    uint64_t v40 = 0;
    uint64_t v85 = (void (**)(char *, uint64_t, uint64_t))(v80 + 32);
    unint64_t v86 = v36 & 0xC000000000000001;
    uint64_t v83 = v80 + 8;
    uint64_t v84 = (void (**)(void))(v80 + 16);
    uint64_t v87 = _swiftEmptyArrayStorage;
    *(void *)&long long v35 = 136315138;
    long long v72 = v35;
    uint64_t v71 = (char *)&type metadata for Any + 8;
    uint64_t v73 = v8;
    uint64_t v77 = v37;
    uint64_t v78 = v19;
    unint64_t v76 = v36;
    do
    {
      if (v86) {
        id v41 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v41 = *(id *)(v36 + 8 * v40 + 32);
      }
      uint64_t v42 = v41;
      INPerson.toRREntity()();
      if (__swift_getEnumTagSinglePayload(v8, 1, v9) == 1)
      {

        outlined destroy of UUID?(v8, &demangling cache variable for type metadata for RREntity?);
      }
      else
      {
        uint64_t v82 = *v85;
        v82(v19, v8, v9);
        long long v43 = *v84;
        OUTLINED_FUNCTION_12();
        v43();
        uint64_t v44 = Logger.logObject.getter();
        os_log_type_t v45 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v44, v45))
        {
          uint64_t v46 = OUTLINED_FUNCTION_47();
          uint64_t v88 = OUTLINED_FUNCTION_14_0();
          *(_DWORD *)uint64_t v46 = v72;
          lazy protocol witness table accessor for type RREntity and conformance RREntity(&lazy protocol witness table cache variable for type RREntity and conformance RREntity, (void (*)(uint64_t))&type metadata accessor for RREntity);
          uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v46 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, &v88);
          swift_bridgeObjectRelease();
          uint64_t v49 = OUTLINED_FUNCTION_61_1();
          v39(v49);
          _os_log_impl(&dword_0, v44, v45, "#PhoneCallNLv4ContextProvider makeContextForHandleIntent appending RREntity %s", (uint8_t *)v46, 0xCu);
          swift_arrayDestroy();
          uint64_t v8 = v73;
          OUTLINED_FUNCTION_6();
          uint64_t v38 = v75;
          OUTLINED_FUNCTION_6();
        }
        else
        {
          uint64_t v50 = OUTLINED_FUNCTION_61_1();
          v39(v50);
        }

        uint64_t v19 = v78;
        OUTLINED_FUNCTION_12();
        v43();
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          unint64_t v36 = v76;
          unint64_t v51 = v87;
        }
        else
        {
          unint64_t v51 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v87[2] + 1, 1, (uint64_t)v87, &demangling cache variable for type metadata for _ContiguousArrayStorage<RREntity>, (uint64_t (*)(void))&type metadata accessor for RREntity, (void (*)(void))&type metadata accessor for RREntity);
          unint64_t v36 = v76;
        }
        unint64_t v53 = v51[2];
        unint64_t v52 = v51[3];
        if (v53 >= v52 >> 1)
        {
          char v57 = OUTLINED_FUNCTION_71(v52);
          unint64_t v51 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v57, v53 + 1, 1, v58, &demangling cache variable for type metadata for _ContiguousArrayStorage<RREntity>, (uint64_t (*)(void))&type metadata accessor for RREntity, (void (*)(void))&type metadata accessor for RREntity);
        }
        v51[2] = v53 + 1;
        OUTLINED_FUNCTION_55_1();
        uint64_t v87 = v54;
        v82((char *)v54 + v55 + *(void *)(v56 + 72) * v53, v38, v9);

        ((void (*)(char *, uint64_t))v39)(v19, v9);
        uint64_t v39 = v81;
        uint64_t v37 = v77;
      }
      ++v40;
    }
    while (v37 != v40);
    goto LABEL_30;
  }
  __break(1u);
}

uint64_t PhoneCallNLContextProvider.makeContextForConfirmIntent(intent:confirmIntentResponse:_:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  OUTLINED_FUNCTION_2();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v6 = OUTLINED_FUNCTION_11_0(v5);
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_5_1();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = OUTLINED_FUNCTION_25_0(v7, (uint64_t)static Logger.siriPhone);
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
    OUTLINED_FUNCTION_84(&dword_0, v10, v11, "#PhoneCallNLContextProvider makeContextForConfirmIntent");
    OUTLINED_FUNCTION_6();
  }

  static PhoneCallNLContextProvider.makeContextForConfirmIntent()();
  uint64_t v12 = type metadata accessor for NLContextUpdate();
  uint64_t v13 = OUTLINED_FUNCTION_56_1(v12);
  a3(v13);
  return outlined destroy of UUID?(v3, &demangling cache variable for type metadata for NLContextUpdate?);
}

uint64_t static PhoneCallNLContextProvider.makeContextForConfirmIntent()()
{
  return static PhoneCallNLContextProvider.makeContextForConfirmIntent()();
}

{
  OUTLINED_FUNCTION_67();
  static PhoneCallNLContextProvider.makeGenericConfirmationNLv3Context()();
  static PhoneCallNLContextProvider.makeSDAForConfirmation()();
  return NLContextUpdate.nluSystemDialogActs.setter();
}

void PhoneCallNLContextProvider.makeNeedsConfirmationContextFor(intent:parameter:resolutionResult:_:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_2();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v4 = OUTLINED_FUNCTION_11_0(v3);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_65_0();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = (void *)OUTLINED_FUNCTION_25_0(v5, (uint64_t)static Logger.siriPhone);
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_48_2(v7))
  {
    uint64_t v8 = (_WORD *)OUTLINED_FUNCTION_7_2();
    OUTLINED_FUNCTION_81(v8);
    OUTLINED_FUNCTION_22_4(&dword_0, v9, v10, "#PhoneCallNLContextProvider makeNeedsConfirmationContextFor");
    OUTLINED_FUNCTION_6();
  }

  static PhoneCallNLContextProvider.needsConfirmationContext(parameter:resolutionResult:)();
  v2(v0);
  outlined destroy of UUID?(v0, &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_26_1();
}

void static PhoneCallNLContextProvider.needsConfirmationContext(parameter:resolutionResult:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for NLContextUpdate();
  OUTLINED_FUNCTION_0_0();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_5_1();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = (void *)OUTLINED_FUNCTION_25_0(v11, (uint64_t)static Logger.siriPhone);
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_48_2(v13))
  {
    uint64_t v14 = (_WORD *)OUTLINED_FUNCTION_7_2();
    OUTLINED_FUNCTION_81(v14);
    OUTLINED_FUNCTION_22_4(&dword_0, v15, v16, "#PhoneCallNLContextProvider needsConfirmationContext");
    OUTLINED_FUNCTION_6();
  }

  uint64_t v17 = OUTLINED_FUNCTION_91_0();
  static PhoneCallNLContextProvider.makeGenericConfirmationContextFor(parameter:)(v17, v18);
  swift_bridgeObjectRetain();
  v19._uint64_t countAndFlagsBits = v4;
  v19._object = v2;
  if ((PhoneCallSlotNames.init(rawValue:)(v19).value & 0xFE) == 4)
  {
    uint64_t v39 = v6;
    uint64_t v20 = NLContextUpdate.weightedPromptResponseTargets.getter();
    if (v20) {
      uint64_t v21 = (void *)v20;
    }
    else {
      uint64_t v21 = _swiftEmptyArrayStorage;
    }
    unint64_t v22 = PhoneCallNLConstants.canonicalName.getter(3);
    uint64_t v24 = v23;
    unint64_t v25 = PhoneCallNLConstants.canonicalName.getter(13);
    uint64_t v38 = v26;
    unint64_t v27 = v21[2];
    unint64_t v28 = v27 + 2;
    if (__OFADD__(v27, 2))
    {
      __break(1u);
    }
    else
    {
      unint64_t v37 = v25;
      swift_bridgeObjectRetain();
      if (!swift_isUniquelyReferenced_nonNull_native() || (uint64_t v29 = v21, (int64_t)v28 > v21[3] >> 1))
      {
        OUTLINED_FUNCTION_72_0();
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v29 = v30;
      }
      unint64_t v27 = v29[2];
      unint64_t v31 = v29[3];
      unint64_t v28 = v27 + 1;
      swift_bridgeObjectRetain();
      if (v27 < v31 >> 1) {
        goto LABEL_14;
      }
    }
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v29 = v35;
LABEL_14:
    void v29[2] = v28;
    uint64_t v32 = &v29[2 * v27];
    v32[4] = v22;
    v32[5] = v24;
    unint64_t v33 = v29[3];
    swift_bridgeObjectRetain();
    if (v28 >= v33 >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v29 = v36;
    }
    void v29[2] = v27 + 2;
    unint64_t v34 = &v29[2 * v28];
    v34[4] = v37;
    void v34[5] = v38;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    NLContextUpdate.weightedPromptResponseTargets.setter();
    uint64_t v6 = v39;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v6, v0, v7);
  __swift_storeEnumTagSinglePayload(v6, 0, 1, v7);
  OUTLINED_FUNCTION_26_1();
}

void PhoneCallNLContextProvider.makeNeedsValueContextFor(intent:parameter:resolutionResult:_:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_2();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v4 = OUTLINED_FUNCTION_11_0(v3);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_5_1();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = (void *)OUTLINED_FUNCTION_25_0(v5, (uint64_t)static Logger.siriPhone);
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_48_2(v7))
  {
    uint64_t v8 = (_WORD *)OUTLINED_FUNCTION_7_2();
    OUTLINED_FUNCTION_81(v8);
    OUTLINED_FUNCTION_22_4(&dword_0, v9, v10, "#PhoneCallNLContextProvider makeNeedsValueContextFor");
    OUTLINED_FUNCTION_6();
  }

  uint64_t v11 = OUTLINED_FUNCTION_91_0();
  static PhoneCallNLContextProvider.makeNeedsValueContextFor(parameter:)(v11, v12);
  uint64_t v13 = type metadata accessor for NLContextUpdate();
  uint64_t v14 = OUTLINED_FUNCTION_56_1(v13);
  v2(v14);
  outlined destroy of UUID?(v0, &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_26_1();
}

uint64_t PhoneCallNLContextProvider.makeNeedsDisambiguationContextFor(intent:parameter:resolutionResult:_:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = (void *)OUTLINED_FUNCTION_25_0(v10, (uint64_t)static Logger.siriPhone);
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_48_2(v12))
  {
    uint64_t v13 = (_WORD *)OUTLINED_FUNCTION_7_2();
    OUTLINED_FUNCTION_81(v13);
    OUTLINED_FUNCTION_22_4(&dword_0, v14, v15, "#PhoneCallNLContextProvider makeNeedsDisambiguationContextFor");
    OUTLINED_FUNCTION_6();
  }

  id v16 = [v5 disambiguationItems];
  uint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v18 = *(void *)(v17 + 16);
  swift_bridgeObjectRelease();
  Swift::String v19 = &selRef_alternatives;
  if (v18) {
    Swift::String v19 = &selRef_disambiguationItems;
  }
  id v20 = [v5 *v19];
  uint64_t v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v3;
  *(void *)(v22 + 24) = v1;
  OUTLINED_FUNCTION_26_6();
  uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t), uint64_t))(class metadata base offset for PhoneCallNLContextProvider + v23 + 40);
  swift_retain();
  v24(v9, v7, v21, partial apply for closure #1 in PhoneCallNLContextProvider.makeNeedsDisambiguationContextFor(intent:parameter:resolutionResult:_:), v22);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_26_1();
  return swift_release();
}

uint64_t closure #1 in PhoneCallNLContextProvider.makeNeedsDisambiguationContextFor(intent:parameter:resolutionResult:_:)(uint64_t a1, void (*a2)(char *))
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for NLContextUpdate();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v6, a1, v7);
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v7);
  a2(v6);
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for NLContextUpdate?);
}

uint64_t PhoneCallNLContextProvider.makeEnableAppForSiriContextFor(app:_:)()
{
  OUTLINED_FUNCTION_67();
  OUTLINED_FUNCTION_2();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v3 = OUTLINED_FUNCTION_11_0(v2);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_53();
  static PhoneCallNLContextProvider.makeTCCConfirmationContext(app:)();
  uint64_t v4 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v1, 0, 1, v4);
  v0(v1);
  return outlined destroy of UUID?(v1, &demangling cache variable for type metadata for NLContextUpdate?);
}

void static PhoneCallNLContextProvider.makeTCCConfirmationContext(app:)()
{
  static PhoneCallNLContextProvider.makeGenericConfirmationNLv3Context()();
  id v0 = [objc_allocWithZone((Class)SAAceConfirmationContext) init];
  [v0 setReason:SAAceConfirmationReasonAUTHORIZE_SIRIKIT_APPValue];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v1 = OUTLINED_FUNCTION_93();
  *(_OWORD *)(v1 + 16) = xmmword_46A030;
  *(void *)(v1 + 32) = v0;
  specialized Array._endMutation()();
  id v2 = v0;
  NLContextUpdate.conversationStateAttachments.setter();
  type metadata accessor for MachineUtteranceBuilder();
  OUTLINED_FUNCTION_21_0();
  MachineUtteranceBuilder.init()();
  App.appIdentifier.getter();
  dispatch thunk of MachineUtteranceBuilder.addMappingIfPresent(node:value:)();
  swift_release();
  swift_bridgeObjectRelease();
  dispatch thunk of MachineUtteranceBuilder.build()();
  swift_release();
  NLContextUpdate.nlInput.setter();
  static PhoneCallNLContextProvider.makeSDAForConfirmation()();
  NLContextUpdate.nluSystemDialogActs.setter();
}

uint64_t static PhoneCallNLContextProvider.makeGenericConfirmationNLv3Context()()
{
  NLContextUpdate.init()();
  PhoneCallNLConstants.canonicalName.getter(1);
  NLContextUpdate.weightedPromptTargetDomain.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v0 = OUTLINED_FUNCTION_60_1();
  *(_OWORD *)(v0 + 16) = xmmword_467720;
  OUTLINED_FUNCTION_54_0();
  OUTLINED_FUNCTION_85_0();
  lazy protocol witness table accessor for type String and conformance String();
  OUTLINED_FUNCTION_8_6();
  OUTLINED_FUNCTION_44_3();
  unint64_t v8 = PhoneCallNLConstants.canonicalName.getter(6);
  uint64_t v10 = v1;
  OUTLINED_FUNCTION_5_13();
  Swift::String v2 = String.uppercased()();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 32) = v8;
  *(void *)(v0 + 40) = v10;
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_8_6();
  swift_bridgeObjectRelease();
  unint64_t v9 = PhoneCallNLConstants.canonicalName.getter(6);
  uint64_t v11 = v3;
  OUTLINED_FUNCTION_5_13();
  Swift::String v4 = String.uppercased()();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 48) = v9;
  *(void *)(v0 + 56) = v11;
  NLContextUpdate.weightedPromptResponseOptions.setter();
  uint64_t v5 = OUTLINED_FUNCTION_65();
  *(_OWORD *)(v5 + 16) = xmmword_467710;
  *(void *)(v5 + 32) = PhoneCallNLConstants.canonicalName.getter(6);
  *(void *)(v5 + 40) = v6;
  OUTLINED_FUNCTION_75_0();
  return NLContextUpdate.weightedPromptStrict.setter();
}

void PhoneCallNLContextProvider.makeNeedsDisambiguationContextFor(parameter:items:completion:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v34 = v1;
  unint64_t v33 = v2;
  uint64_t v29 = v3;
  unint64_t v31 = v4;
  uint64_t v32 = v5;
  unint64_t v27 = v0;
  uint64_t v26 = *v0;
  type metadata accessor for NLContextUpdate();
  OUTLINED_FUNCTION_0_0();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_3_1();
  uint64_t v28 = v7;
  OUTLINED_FUNCTION_36();
  uint64_t v8 = type metadata accessor for CATOption();
  uint64_t v9 = OUTLINED_FUNCTION_11_0(v8);
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_3_1();
  uint64_t v30 = swift_allocBox();
  NLContextUpdate.init()();
  PhoneCallNLConstants.canonicalName.getter(1);
  NLContextUpdate.weightedPromptTargetDomain.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v10 = OUTLINED_FUNCTION_60_1();
  *(_OWORD *)(v10 + 16) = xmmword_467720;
  OUTLINED_FUNCTION_64();
  lazy protocol witness table accessor for type String and conformance String();
  OUTLINED_FUNCTION_52_0();
  swift_bridgeObjectRelease();
  unint64_t v38 = PhoneCallNLConstants.canonicalName.getter(6);
  uint64_t v39 = v11;
  OUTLINED_FUNCTION_5_13();
  Swift::String v12 = String.uppercased()();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v13 = v39;
  *(void *)(v10 + 32) = v38;
  *(void *)(v10 + 40) = v13;
  OUTLINED_FUNCTION_54_0();
  v37[0] = 32;
  v37[1] = 0xE100000000000000;
  *(void *)&v36[0] = 95;
  *((void *)&v36[0] + 1) = 0xE100000000000000;
  OUTLINED_FUNCTION_52_0();
  swift_bridgeObjectRelease();
  unint64_t v38 = PhoneCallNLConstants.canonicalName.getter(6);
  uint64_t v39 = v14;
  OUTLINED_FUNCTION_5_13();
  Swift::String v15 = String.uppercased()();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v16 = v39;
  *(void *)(v10 + 48) = v38;
  *(void *)(v10 + 56) = v16;
  NLContextUpdate.weightedPromptResponseOptions.setter();
  swift_bridgeObjectRetain();
  v17._uint64_t countAndFlagsBits = v32;
  v17._object = v31;
  if ((PhoneCallSlotNames.init(rawValue:)(v17).value & 0xFE) == 4)
  {
    uint64_t v18 = specialized _arrayConditionalCast<A, B>(_:)(v29);
    if (v18)
    {
      unint64_t v19 = (unint64_t)v18;
      OUTLINED_FUNCTION_35_4();
      outlined init with copy of SignalProviding((uint64_t)v0 + *(void *)(class metadata base offset for PhoneCallNLContextProvider + v20 + 16), (uint64_t)v37);
      OUTLINED_FUNCTION_35_4();
      outlined init with copy of SignalProviding((uint64_t)v0 + *(void *)(class metadata base offset for PhoneCallNLContextProvider + v21 + 24), (uint64_t)v36);
      outlined init with copy of SignalProviding((uint64_t)v37, (uint64_t)&v38);
      type metadata accessor for PhoneCallDisplayTextCATs();
      static CATOption.defaultMode.getter();
      type metadata accessor for CATGlobals();
      outlined init with copy of SignalProviding((uint64_t)v36, (uint64_t)&v35);
      CATGlobals.__allocating_init(device:)();
      uint64_t v22 = CATWrapper.__allocating_init(options:globals:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
      v40[5] = v22;
      outlined init with take of AppSelectionSignalComponent(v36, (uint64_t)v40);
      uint64_t v23 = (void *)OUTLINED_FUNCTION_60_1();
      void v23[2] = v30;
      uint64_t v23[3] = v19;
      void v23[4] = v27;
      void v23[5] = v33;
      v23[6] = v34;
      v23[7] = v26;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      PhoneContactDisplayHintFactory.build(for:_:)(v19, (void (*)(uint64_t))partial apply for closure #1 in PhoneCallNLContextProvider.makeNeedsDisambiguationContextFor(parameter:items:completion:), (uint64_t)v23);
      swift_bridgeObjectRelease();
      swift_release();
      outlined destroy of PhoneContactDisplayHintFactory((uint64_t)&v38);
    }
  }
  else
  {
    OUTLINED_FUNCTION_12();
    v24();
    v33(v28);
    OUTLINED_FUNCTION_36_5();
    v25();
  }
  swift_release();
  OUTLINED_FUNCTION_26_1();
}

void *specialized _arrayConditionalCast<A, B>(_:)(uint64_t a1)
{
  uint64_t v6 = _swiftEmptyArrayStorage;
  uint64_t v2 = *(void *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)();
  if (!v2) {
    return v6;
  }
  for (uint64_t i = a1 + 32; ; i += 32)
  {
    outlined init with copy of Any(i, (uint64_t)v5);
    type metadata accessor for INPerson();
    if (!swift_dynamicCast()) {
      break;
    }
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    if (!--v2) {
      return v6;
    }
  }
  swift_release();

  return 0;
}

uint64_t closure #1 in PhoneCallNLContextProvider.makeNeedsDisambiguationContextFor(parameter:items:completion:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void (*a5)(char *))
{
  uint64_t v7 = type metadata accessor for NLContextUpdate();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = swift_projectBox();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  NLContextUpdate.displayHints.setter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_46A250;
  *(void *)(v12 + 32) = PhoneCallNLConstants.canonicalName.getter(3);
  *(void *)(v12 + 40) = v13;
  *(void *)(v12 + 48) = PhoneCallNLConstants.canonicalName.getter(5);
  *(void *)(v12 + 56) = v14;
  *(void *)(v12 + 64) = PhoneCallNLConstants.canonicalName.getter(13);
  *(void *)(v12 + 72) = v15;
  swift_beginAccess();
  NLContextUpdate.weightedPromptResponseTargets.setter();
  NLContextUpdate.weightedPromptStrict.setter();
  swift_endAccess();
  static PhoneCallNLContextProvider.getRREntities(persons:deviceState:)();
  swift_beginAccess();
  NLContextUpdate.rrEntities.setter();
  swift_endAccess();
  static PhoneCallNLContextProvider.makeSDAForDisambiguateContact(contacts:)(a3);
  swift_beginAccess();
  NLContextUpdate.nluSystemDialogActs.setter();
  swift_endAccess();
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
  a5(v10);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

void static PhoneCallNLContextProvider.getRREntities(persons:deviceState:)()
{
  OUTLINED_FUNCTION_24_0();
  unint64_t v3 = v2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupIdentifier?);
  uint64_t v5 = OUTLINED_FUNCTION_11_0(v4);
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_3_1();
  uint64_t v31 = v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
  uint64_t v8 = OUTLINED_FUNCTION_11_0(v7);
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_8_7();
  uint64_t v9 = type metadata accessor for RREntity();
  OUTLINED_FUNCTION_0_0();
  uint64_t v32 = v10;
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_5_8();
  uint64_t v34 = v12;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_74_0();
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_0();
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_4();
  UUID.init()();
  UUID.uuidString.getter();
  OUTLINED_FUNCTION_36_5();
  v15();
  if (!(v3 >> 62))
  {
    uint64_t v16 = *(void *)((char *)&dword_10 + (v3 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (v16) {
      goto LABEL_3;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_26_1();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
  if (!v16) {
    goto LABEL_18;
  }
LABEL_3:
  if (v16 >= 1)
  {
    uint64_t v17 = 0;
    unint64_t v33 = v3 & 0xC000000000000001;
    uint64_t v18 = (void (**)(uint64_t, uint64_t, uint64_t))(v32 + 32);
    unint64_t v19 = (char *)_swiftEmptyArrayStorage;
    uint64_t v29 = v16;
    unint64_t v30 = v3;
    do
    {
      if (v33) {
        id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v20 = *(id *)(v3 + 8 * v17 + 32);
      }
      uint64_t v21 = v20;
      INPerson.toRREntity()();
      if (__swift_getEnumTagSinglePayload(v0, 1, v9) == 1)
      {

        outlined destroy of UUID?(v0, &demangling cache variable for type metadata for RREntity?);
      }
      else
      {
        uint64_t v22 = *v18;
        (*v18)(v1, v0, v9);
        swift_bridgeObjectRetain();
        GroupIdentifier.init(id:seq:)();
        uint64_t v23 = type metadata accessor for GroupIdentifier();
        __swift_storeEnumTagSinglePayload(v31, 0, 1, v23);
        RREntity.group.setter();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v34, v1, v9);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v19 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v19 + 2) + 1, 1, (uint64_t)v19, &demangling cache variable for type metadata for _ContiguousArrayStorage<RREntity>, (uint64_t (*)(void))&type metadata accessor for RREntity, (void (*)(void))&type metadata accessor for RREntity);
        }
        unint64_t v25 = *((void *)v19 + 2);
        unint64_t v24 = *((void *)v19 + 3);
        if (v25 >= v24 >> 1)
        {
          char v28 = OUTLINED_FUNCTION_71(v24);
          unint64_t v19 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v28, v25 + 1, 1, (uint64_t)v19, &demangling cache variable for type metadata for _ContiguousArrayStorage<RREntity>, (uint64_t (*)(void))&type metadata accessor for RREntity, (void (*)(void))&type metadata accessor for RREntity);
        }
        *((void *)v19 + 2) = v25 + 1;
        OUTLINED_FUNCTION_55_1();
        v22((uint64_t)&v19[v26 + *(void *)(v32 + 72) * v25], v34, v9);

        OUTLINED_FUNCTION_11();
        v27();
        uint64_t v16 = v29;
        unint64_t v3 = v30;
      }
      ++v17;
    }
    while (v16 != v17);
    goto LABEL_18;
  }
  __break(1u);
}

uint64_t static PhoneCallNLContextProvider.makeSDAForDisambiguateContact(contacts:)(unint64_t a1)
{
  uint64_t v68 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  uint64_t v67 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  uint64_t v65 = (char *)&v62 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = type metadata accessor for Siri_Nlu_External_SystemGaveOptions();
  uint64_t v64 = *(void *)(v66 - 8);
  uint64_t v3 = __chkstk_darwin(v66);
  uint64_t v62 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v63 = (char *)&v62 - v5;
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v79 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v85 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v73 = (char *)&v62 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v62 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v62 - v14;
  uint64_t v91 = _swiftEmptyArrayStorage;
  unint64_t v80 = a1;
  uint64_t v78 = v13;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = v78;
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v16 = result;
  }
  else
  {
    uint64_t v16 = *(void *)((char *)&dword_10 + (v80 & 0xFFFFFFFFFFFFFF8));
    uint64_t result = swift_bridgeObjectRetain();
  }
  if (v16)
  {
    if (v16 < 1)
    {
      __break(1u);
      return result;
    }
    uint64_t v19 = 0;
    unint64_t v77 = v80 & 0xC000000000000001;
    id v20 = (void (**)(char *, char *, uint64_t))(v79 + 16);
    uint64_t v84 = (void (**)(char *, uint64_t))(v79 + 8);
    uint64_t v71 = v90;
    uint64_t v76 = v79 + 32;
    *(void *)&long long v18 = 136315138;
    long long v70 = v18;
    uint64_t v69 = (char *)&type metadata for Any + 8;
    long long v72 = v15;
    uint64_t v75 = v16;
    do
    {
      if (v77) {
        id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v21 = *(id *)(v80 + 8 * v19 + 32);
      }
      uint64_t v22 = v21;
      uint64_t v83 = v19;
      type metadata accessor for UsoTaskBuilder_call_common_PhoneCall();
      swift_allocObject();
      uint64_t v23 = UsoTaskBuilder_call_common_PhoneCall.init()();
      type metadata accessor for UsoEntityBuilder_common_PhoneCall();
      swift_allocObject();
      uint64_t v88 = UsoEntityBuilder_common_PhoneCall.init()();
      type metadata accessor for UsoEntityBuilder_common_Person();
      swift_allocObject();
      uint64_t v87 = UsoEntityBuilder_common_Person.init()();
      type metadata accessor for UsoEntityBuilder_common_PhoneNumber();
      swift_allocObject();
      uint64_t v86 = UsoEntityBuilder_common_PhoneNumber.init()();
      id v24 = [v22 personHandle];
      unint64_t v25 = v24;
      if (v24)
      {
        id v26 = [v24 label];

        if (v26)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();
        }
      }
      dispatch thunk of UsoEntityBuilder_common_PhoneNumber.setLabel(value:)();
      swift_bridgeObjectRelease();
      uint64_t v81 = v22;
      id v27 = [v22 displayName];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      dispatch thunk of UsoEntityBuilder_common_Person.setName(value:)();
      swift_bridgeObjectRelease();
      swift_retain();
      dispatch thunk of UsoEntityBuilder_common_Person.setSpecifyingContactAddress(value:)();
      swift_release();
      swift_retain();
      dispatch thunk of UsoEntityBuilder_common_PhoneCall.addRecipients(value:)();
      swift_release();
      dispatch thunk of Uso_VerbTemplateBuilder_Target.setTarget(value:)();
      UsoTaskBuilder.toUserStatedTaskDialogAct()();
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v28 = type metadata accessor for Logger();
      __swift_project_value_buffer(v28, (uint64_t)static Logger.siriPhone);
      uint64_t v29 = *v20;
      (*v20)(v13, v15, v6);
      unint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.debug.getter();
      BOOL v32 = os_log_type_enabled(v30, v31);
      unint64_t v33 = v20;
      uint64_t v82 = v23;
      if (v32)
      {
        uint64_t v34 = v13;
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        v90[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v35 = v70;
        uint64_t v74 = v35 + 4;
        uint64_t v36 = (uint64_t)v73;
        v29(v73, v34, v6);
        uint64_t v37 = specialized String.init(describing:)(v36, (uint64_t (*)(void))&type metadata accessor for Siri_Nlu_External_UserDialogAct, (unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_UserDialogAct and conformance Siri_Nlu_External_UserDialogAct, (void (*)(uint64_t))&type metadata accessor for Siri_Nlu_External_UserDialogAct);
        uint64_t v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, v90);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v39 = *v84;
        uint64_t v40 = v34;
        uint64_t v15 = v72;
        (*v84)(v40, v6);
        _os_log_impl(&dword_0, v30, v31, "#PhoneCallNLContextProvider Building UserStatedTask for start call disambiguation: %s", v35, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v39 = *v84;
        (*v84)(v13, v6);
      }

      uint64_t v41 = v83;
      uint64_t v42 = v33;
      v29(v85, v15, v6);
      uint64_t v43 = (uint64_t)v91;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v43 + 16) + 1, 1, v43, &demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_UserDialogAct>, (uint64_t (*)(void))&type metadata accessor for Siri_Nlu_External_UserDialogAct, (void (*)(void))&type metadata accessor for Siri_Nlu_External_UserDialogAct);
      }
      uint64_t v44 = v75;
      os_log_type_t v45 = v81;
      unint64_t v47 = *(void *)(v43 + 16);
      unint64_t v46 = *(void *)(v43 + 24);
      if (v47 >= v46 >> 1) {
        uint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1, v47 + 1, 1, v43, &demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_UserDialogAct>, (uint64_t (*)(void))&type metadata accessor for Siri_Nlu_External_UserDialogAct, (void (*)(void))&type metadata accessor for Siri_Nlu_External_UserDialogAct);
      }
      uint64_t v19 = v41 + 1;
      *(void *)(v43 + 16) = v47 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v79 + 32))(v43+ ((*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80))+ *(void *)(v79 + 72) * v47, v85, v6);
      swift_release();
      swift_release();
      swift_release();

      swift_release();
      uint64_t v91 = (void *)v43;
      v39(v15, v6);
      uint64_t v13 = v78;
      id v20 = v42;
    }
    while (v44 != v19);
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v48 = type metadata accessor for Logger();
  __swift_project_value_buffer(v48, (uint64_t)static Logger.siriPhone);
  swift_bridgeObjectRetain_n();
  uint64_t v49 = Logger.logObject.getter();
  os_log_type_t v50 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v49, v50))
  {
    unint64_t v51 = (uint8_t *)swift_slowAlloc();
    v90[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v51 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v52 = Array.description.getter();
    unint64_t v54 = v53;
    swift_bridgeObjectRelease();
    uint64_t v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v54, v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v49, v50, "#PhoneCallNLContextProvider Returning SystemGaveOptions for start call disambiguation: %s", v51, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v55 = v63;
  Siri_Nlu_External_SystemGaveOptions.init()();
  swift_beginAccess();
  Siri_Nlu_External_SystemGaveOptions.choices.setter();
  uint64_t v56 = v65;
  Siri_Nlu_External_SystemDialogAct.init()();
  uint64_t v57 = v64;
  uint64_t v58 = v66;
  (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v62, v55, v66);
  Siri_Nlu_External_SystemDialogAct.gaveOptions.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  uint64_t v59 = v67;
  unint64_t v60 = (*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80);
  uint64_t v61 = swift_allocObject();
  *(_OWORD *)(v61 + 16) = xmmword_467710;
  (*(void (**)(unint64_t, char *, uint64_t))(v59 + 32))(v61 + v60, v56, v68);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v55, v58);
  return v61;
}

uint64_t static PhoneCallNLContextProvider.makeGenericConfirmationContextForSearchingCallHistory()()
{
  return static PhoneCallNLContextProvider.makeContextForConfirmIntent()();
}

uint64_t static PhoneCallNLContextProvider.buildVoiceMailListFollowUpOfferContext()()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_25_0(v0, (uint64_t)static Logger.siriPhone);
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_14_2(v2))
  {
    *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
    OUTLINED_FUNCTION_24_1(&dword_0, v3, v4, "#PhoneCallNLContextProvider buildVoiceMailListFollowUpOfferContext");
    OUTLINED_FUNCTION_6();
  }

  static PhoneCallNLContextProvider.buildSingleVoiceMailFollowUpOfferContext()();
  uint64_t v6 = (void (*)(uint64_t *, void))NLContextUpdate.weightedPromptResponseOptions.modify();
  if (*v5)
  {
    uint64_t v7 = v5;
    String.uppercased()();
    unint64_t v8 = lazy protocol witness table accessor for type String and conformance String();
    OUTLINED_FUNCTION_17_4(v8, v9, v10, v11, v12, v13, (uint64_t)&type metadata for String, v14, (uint64_t)&type metadata for String, v8, v8, v8, 95, 0xE100000000000000, 32);
    StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    swift_bridgeObjectRelease();
    unint64_t v23 = PhoneCallNLConstants.canonicalName.getter(14);
    uint64_t v24 = v15;
    OUTLINED_FUNCTION_5_13();
    Swift::String v16 = String.uppercased()();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    uint64_t v17 = *(void *)(*v7 + 16);
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    uint64_t v18 = *v7;
    *(void *)(v18 + 16) = v17 + 1;
    uint64_t v19 = v18 + 16 * v17;
    *(void *)(v19 + 32) = v23;
    *(void *)(v19 + 40) = v24;
  }
  v6(v25, 0);
  id v20 = [objc_allocWithZone((Class)SAAceConfirmationContext) init];
  [v20 setReason:SAAceConfirmationReasonCONTINUE_READINGValue];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v21 = OUTLINED_FUNCTION_93();
  *(_OWORD *)(v21 + 16) = xmmword_46A030;
  *(void *)(v21 + 32) = v20;
  v25[0] = v21;
  specialized Array._endMutation()();
  return NLContextUpdate.conversationStateAttachments.setter();
}