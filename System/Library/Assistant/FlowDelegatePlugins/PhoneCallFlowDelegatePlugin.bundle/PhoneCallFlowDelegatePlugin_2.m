uint64_t specialized PhonePersonListProperties.hasHandleLabels.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  __chkstk_darwin(v1 - 8);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(void *)(v0 + 24);
  if (v4 >> 62) {
    goto LABEL_21;
  }
  v5 = *(void *)((char *)&dword_10 + (v4 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain_n();
  for (; v5; v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    v6 = 4;
    while (1)
    {
      if ((v4 & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      v7 = v6 - 3;
      if (__OFADD__(v6 - 4, 1)) {
        break;
      }
      if (!DialogPerson.personHandle.getter()) {
        goto LABEL_17;
      }
      DialogPersonHandle.label.getter();
      swift_release();
      v8 = type metadata accessor for SpeakableString();
      if (__swift_getEnumTagSinglePayload((uint64_t)v3, 1, v8) == 1)
      {
        outlined destroy of SubmitCommandError?((uint64_t)v3, &demangling cache variable for type metadata for SpeakableString?);
LABEL_17:
        swift_bridgeObjectRelease_n();
        swift_release();
        return 0;
      }
      v9 = SpeakableString.print.getter();
      v11 = v10;
      (*(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8))(v3, v8);
      if (!v11) {
        goto LABEL_17;
      }
      swift_release();
      swift_bridgeObjectRelease();
      v12 = HIBYTE(v11) & 0xF;
      if ((v11 & 0x2000000000000000) == 0) {
        v12 = v9 & 0xFFFFFFFFFFFFLL;
      }
      if (!v12)
      {
        swift_bridgeObjectRelease_n();
        return 0;
      }
      ++v6;
      if (v7 == v5) {
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_21:
    swift_bridgeObjectRetain_n();
  }
LABEL_15:
  swift_bridgeObjectRelease_n();
  return 1;
}

uint64_t specialized PhonePersonListProperties.hasDifferentNameAndLabel.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  v21 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v5 = (char *)&v21 - v4;
  unint64_t v6 = *(void *)(v0 + 24);
  if (v6 >> 62)
  {
LABEL_32:
    swift_bridgeObjectRetain_n();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    if (v7) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain_n();
    if (v7)
    {
LABEL_3:
      unint64_t v23 = v6;
      unint64_t v24 = v6 & 0xC000000000000001;
      uint64_t v8 = 4;
      uint64_t v22 = v7;
      do
      {
        if (v24) {
          specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          swift_retain();
        }
        uint64_t v9 = v8 - 3;
        if (__OFADD__(v8 - 4, 1))
        {
          __break(1u);
          goto LABEL_32;
        }
        dispatch thunk of DialogPerson.toString.getter();
        uint64_t v10 = type metadata accessor for SpeakableString();
        if (__swift_getEnumTagSinglePayload((uint64_t)v5, 1, v10) == 1)
        {
          outlined destroy of SubmitCommandError?((uint64_t)v5, &demangling cache variable for type metadata for SpeakableString?);
          uint64_t countAndFlagsBits = 0;
          object = 0;
        }
        else
        {
          SpeakableString.print.getter();
          (*(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8))(v5, v10);
          Swift::String v13 = String.lowercased()();
          uint64_t countAndFlagsBits = v13._countAndFlagsBits;
          object = v13._object;
          swift_bridgeObjectRelease();
        }
        uint64_t v14 = DialogPerson.personHandle.getter();
        if (v14)
        {
          uint64_t v15 = (uint64_t)v21;
          DialogPersonHandle.label.getter();
          swift_release();
          if (__swift_getEnumTagSinglePayload(v15, 1, v10) == 1)
          {
            outlined destroy of SubmitCommandError?(v15, &demangling cache variable for type metadata for SpeakableString?);
            uint64_t v16 = 0;
            uint64_t v14 = 0;
            if (!object) {
              goto LABEL_24;
            }
          }
          else
          {
            SpeakableString.print.getter();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v15, v10);
            Swift::String v19 = String.lowercased()();
            uint64_t v16 = v19._countAndFlagsBits;
            uint64_t v14 = (uint64_t)v19._object;
            swift_bridgeObjectRelease();
            if (!object)
            {
LABEL_24:
              if (!v14)
              {
                swift_bridgeObjectRelease_n();
                swift_release();
                return 0;
              }
LABEL_25:
              swift_release();
              unint64_t v6 = v23;
              swift_bridgeObjectRelease();
              goto LABEL_26;
            }
          }
        }
        else
        {
          uint64_t v16 = 0;
          if (!object) {
            goto LABEL_24;
          }
        }
        if (!v14) {
          goto LABEL_25;
        }
        if (countAndFlagsBits == v16 && object == (void *)v14)
        {
          swift_bridgeObjectRelease_n();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 0;
        }
        char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v6 = v23;
        if (v18)
        {
          swift_bridgeObjectRelease_n();
          return 0;
        }
LABEL_26:
        ++v8;
      }
      while (v9 != v22);
    }
  }
  swift_bridgeObjectRelease_n();
  return 1;
}

BOOL PhonePersonList.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PhonePersonList.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  return v3 != 0;
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance PhonePersonList.CodingKeys@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = PhonePersonList.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PhonePersonList.CodingKeys(void *a1@<X8>)
{
  *a1 = 1953720684;
  a1[1] = 0xE400000000000000;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PhonePersonList.CodingKeys()
{
  return 1953720684;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PhonePersonList.CodingKeys@<X0>(BOOL *a1@<X8>)
{
  uint64_t result = PhonePersonList.CodingKeys.init(stringValue:)();
  *a1 = result != 0;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance PhonePersonList.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PhonePersonList.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhonePersonList.CodingKeys and conformance PhonePersonList.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PhonePersonList.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhonePersonList.CodingKeys and conformance PhonePersonList.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t EligibleAppFinder.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t EligibleAppFinder.__deallocating_deinit()
{
  EligibleAppFinder.deinit();
  OUTLINED_FUNCTION_17_7();

  return swift_deallocClassInstance();
}

uint64_t PhonePersonList.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PhonePersonList.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PhonePersonList.CodingKeys and conformance PhonePersonList.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[1] = *(void *)(v2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PhonePerson]);
  lazy protocol witness table accessor for type [PhonePerson] and conformance <A> [A](&lazy protocol witness table cache variable for type [PhonePerson] and conformance <A> [A], &lazy protocol witness table cache variable for type PhonePerson and conformance DialogPerson);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v4);
}

unint64_t lazy protocol witness table accessor for type PhonePersonList.CodingKeys and conformance PhonePersonList.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PhonePersonList.CodingKeys and conformance PhonePersonList.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhonePersonList.CodingKeys and conformance PhonePersonList.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhonePersonList.CodingKeys and conformance PhonePersonList.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhonePersonList.CodingKeys and conformance PhonePersonList.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhonePersonList.CodingKeys and conformance PhonePersonList.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhonePersonList.CodingKeys and conformance PhonePersonList.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhonePersonList.CodingKeys and conformance PhonePersonList.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhonePersonList.CodingKeys and conformance PhonePersonList.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhonePersonList.CodingKeys and conformance PhonePersonList.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhonePersonList.CodingKeys and conformance PhonePersonList.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhonePersonList.CodingKeys and conformance PhonePersonList.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhonePersonList.CodingKeys and conformance PhonePersonList.CodingKeys);
  }
  return result;
}

uint64_t PhonePersonList.__allocating_init(from:)(void *a1)
{
  OUTLINED_FUNCTION_17_7();
  uint64_t v2 = swift_allocObject();
  PhonePersonList.init(from:)(a1);
  return v2;
}

uint64_t PhonePersonList.init(from:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PhonePersonList.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  __chkstk_darwin(v4);
  *(void *)(v1 + 16) = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PhonePersonList.CodingKeys and conformance PhonePersonList.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {

    type metadata accessor for PhonePersonList();
    swift_deallocPartialClassInstance();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PhonePerson]);
    lazy protocol witness table accessor for type [PhonePerson] and conformance <A> [A](&lazy protocol witness table cache variable for type [PhonePerson] and conformance <A> [A], &lazy protocol witness table cache variable for type PhonePerson and conformance DialogPerson);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v6 = OUTLINED_FUNCTION_8_3();
    v7(v6);
    *(void *)(v1 + 24) = v8;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v1;
}

uint64_t lazy protocol witness table accessor for type [PhonePerson] and conformance <A> [A](unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [PhonePerson]);
    lazy protocol witness table accessor for type PhonePerson and conformance DialogPerson(a2, 255, (void (*)(uint64_t))type metadata accessor for PhonePerson);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Decodable in PhonePersonList(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PhonePerson and conformance DialogPerson(&lazy protocol witness table cache variable for type PhonePersonList and conformance PhonePersonList, a2, (void (*)(uint64_t))type metadata accessor for PhonePersonList);
}

uint64_t base witness table accessor for Encodable in PhonePersonList(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PhonePerson and conformance DialogPerson(&lazy protocol witness table cache variable for type PhonePersonList and conformance PhonePersonList, a2, (void (*)(uint64_t))type metadata accessor for PhonePersonList);
}

uint64_t protocol witness for static CATType.catTypeName.getter in conformance PhonePersonList()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t protocol witness for static CATType.isDialogType.getter in conformance PhonePersonList()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t protocol witness for CATType.mockGlobals.getter in conformance PhonePersonList()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t protocol witness for CATType.mockGlobals.setter in conformance PhonePersonList()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

void (*protocol witness for CATType.mockGlobals.modify in conformance PhonePersonList(void *a1))(void *a1)
{
  Swift::Int v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 128))();
  return protocol witness for StaticAction.nextAction.modify in conformance PlayVoiceMailAction;
}

uint64_t protocol witness for CATType.getProperty(_:) in conformance PhonePersonList()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

uint64_t protocol witness for PhonePersonListProperties.list.getter in conformance PhonePersonList()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Decodable.init(from:) in conformance PhonePersonList@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 168))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PhonePersonList()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 160))();
}

uint64_t sub_11B77C()
{
  OUTLINED_FUNCTION_2_27();
  uint64_t result = (*(uint64_t (**)(void))(v1 + 88))();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_11B7C0()
{
  OUTLINED_FUNCTION_2_27();
  uint64_t result = (*(uint64_t (**)(void))(v1 + 112))();
  *uint64_t v0 = result;
  return result;
}

unsigned char *storeEnumTagSinglePayload for PhonePersonList.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x11B8A0);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for PhonePersonList.CodingKeys()
{
  return &type metadata for PhonePersonList.CodingKeys;
}

uint64_t specialized closure #1 in PhonePersonListProperties.allSameGivenName.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for SpeakableString();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  v28 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SpeakableString?, SpeakableString?));
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v27 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v27 - v16;
  DialogPerson.givenName.getter();
  unint64_t v18 = *(void *)(a2 + 24);
  if (v18 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v19 = *(void *)((char *)&dword_10 + (v18 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
  }
  if (v19 <= 0)
  {
    swift_bridgeObjectRelease();
    __swift_storeEnumTagSinglePayload((uint64_t)v15, 1, 1, v3);
  }
  else
  {
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v18 & 0xC000000000000001) == 0);
    if ((v18 & 0xC000000000000001) != 0) {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      swift_retain();
    }
    swift_bridgeObjectRelease();
    DialogPerson.givenName.getter();
    swift_release();
  }
  uint64_t v20 = (uint64_t)&v8[*(int *)(v6 + 48)];
  outlined init with copy of SpeakableString?((uint64_t)v17, (uint64_t)v8);
  outlined init with copy of SpeakableString?((uint64_t)v15, v20);
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v3) == 1)
  {
    v21 = &demangling cache variable for type metadata for SpeakableString?;
    outlined destroy of SubmitCommandError?((uint64_t)v15, &demangling cache variable for type metadata for SpeakableString?);
    outlined destroy of SubmitCommandError?((uint64_t)v17, &demangling cache variable for type metadata for SpeakableString?);
    if (__swift_getEnumTagSinglePayload(v20, 1, v3) == 1)
    {
      char v22 = -1;
    }
    else
    {
      v21 = &demangling cache variable for type metadata for (SpeakableString?, SpeakableString?);
      char v22 = 0;
    }
  }
  else
  {
    unint64_t v23 = v12;
    outlined init with copy of SpeakableString?((uint64_t)v8, (uint64_t)v12);
    if (__swift_getEnumTagSinglePayload(v20, 1, v3) == 1)
    {
      outlined destroy of SubmitCommandError?((uint64_t)v15, &demangling cache variable for type metadata for SpeakableString?);
      outlined destroy of SubmitCommandError?((uint64_t)v17, &demangling cache variable for type metadata for SpeakableString?);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v12, v3);
      char v22 = 0;
      v21 = &demangling cache variable for type metadata for (SpeakableString?, SpeakableString?);
    }
    else
    {
      unint64_t v24 = v28;
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v28, v20, v3);
      lazy protocol witness table accessor for type PhonePerson and conformance DialogPerson((unint64_t *)&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, 255, (void (*)(uint64_t))&type metadata accessor for SpeakableString);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      v27 = v23;
      v25 = *(void (**)(char *, uint64_t))(v4 + 8);
      v25(v24, v3);
      v21 = &demangling cache variable for type metadata for SpeakableString?;
      outlined destroy of SubmitCommandError?((uint64_t)v15, &demangling cache variable for type metadata for SpeakableString?);
      outlined destroy of SubmitCommandError?((uint64_t)v17, &demangling cache variable for type metadata for SpeakableString?);
      v25(v27, v3);
    }
  }
  outlined destroy of SubmitCommandError?((uint64_t)v8, v21);
  return v22 & 1;
}

uint64_t specialized closure #1 in PhonePersonListProperties.allSameGivenName.getter(uint64_t *a1, uint64_t *a2)
{
  return specialized closure #1 in PhonePersonListProperties.allSameGivenName.getter(*a1, *a2) & 1;
}

uint64_t partial apply for specialized closure #1 in PhonePersonListProperties.allSameGivenName.getter(uint64_t *a1)
{
  return specialized closure #1 in PhonePersonListProperties.allSameGivenName.getter(a1, *(uint64_t **)(v1 + 16)) & 1;
}

uint64_t lazy protocol witness table accessor for type PhonePerson and conformance DialogPerson(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_2_43()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_6_30()
{
  return swift_beginAccess();
}

PhoneCallFlowDelegatePlugin::AnswerCallCATs::Properties_optional __swiftcall AnswerCallCATs.Properties.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AnswerCallCATs.Properties.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.value = PhoneCallFlowDelegatePlugin_AnswerCallCATs_Properties_offerFollowUpIntent;
  }
  else {
    v4.value = PhoneCallFlowDelegatePlugin_AnswerCallCATs_Properties_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

unint64_t AnswerCallCATs.Properties.rawValue.getter(char a1)
{
  if (a1) {
    return 0xD00000000000001ELL;
  }
  else {
    return 0xD000000000000020;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnswerCallCATs.Properties(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnswerCallCATs.Properties()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnswerCallCATs.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnswerCallCATs.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::AnswerCallCATs::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AnswerCallCATs.Properties@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::AnswerCallCATs::Properties_optional *a2@<X8>)
{
  result.value = AnswerCallCATs.Properties.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AnswerCallCATs.Properties@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = AnswerCallCATs.Properties.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t AnswerCallCATs.intentHandledResponse(incomingCallConcept:completion:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_31_0();
  *(_OWORD *)(v2 + 16) = xmmword_467710;
  *(void *)(v2 + 32) = 0xD000000000000013;
  *(void *)(v2 + 40) = 0x8000000000493CB0;
  if (a1)
  {
    uint64_t v3 = type metadata accessor for PhoneIncomingCall();
    uint64_t v4 = a1;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
    *(void *)(v2 + 56) = 0;
    *(void *)(v2 + 64) = 0;
  }
  *(void *)(v2 + 48) = v4;
  *(void *)(v2 + 72) = v3;
  swift_retain();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();

  return swift_bridgeObjectRelease();
}

uint64_t AnswerCallCATs.intentHandledResponse(incomingCallConcept:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_21_1((uint64_t)AnswerCallCATs.intentHandledResponse(incomingCallConcept:));
}

uint64_t AnswerCallCATs.intentHandledResponse(incomingCallConcept:)()
{
  uint64_t v1 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_31_0();
  v0[5] = v2;
  *(_OWORD *)(v2 + 16) = xmmword_467710;
  uint64_t v3 = OUTLINED_FUNCTION_10_1(v2, (uint64_t)"incomingCallConcept");
  if (v1)
  {
    uint64_t v3 = type metadata accessor for PhoneIncomingCall();
  }
  else
  {
    *(void *)(v2 + 56) = 0;
    *(void *)(v2 + 64) = 0;
  }
  *(void *)(v2 + 48) = v1;
  *(void *)(v2 + 72) = v3;
  OUTLINED_FUNCTION_19_2();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *uint64_t v4 = v0;
  v4[1] = AnswerCallCATs.intentHandledResponse(incomingCallConcept:);
  uint64_t v5 = v0[2];
  return v7(v5, 0xD000000000000020, 0x800000000048D0E0, v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_47_0();
    return v10();
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;

  uint64_t v1 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_31_0();
  v0[4] = v2;
  *(_OWORD *)(v2 + 16) = xmmword_467710;
  uint64_t v3 = OUTLINED_FUNCTION_10_1(v2, (uint64_t)"incomingCallConcept");
  if (v1)
  {
    uint64_t v3 = type metadata accessor for PhoneIncomingCall();
  }
  else
  {
    *(void *)(v2 + 56) = 0;
    *(void *)(v2 + 64) = 0;
  }
  *(void *)(v2 + 48) = v1;
  *(void *)(v2 + 72) = v3;
  OUTLINED_FUNCTION_19_2();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[5] = v4;
  *uint64_t v4 = v0;
  v4[1] = AnswerCallCATs.intentHandledResponse(incomingCallConcept:);
  uint64_t v5 = OUTLINED_FUNCTION_11_6(0xD000000000000020);
  return v7(v5);
}

uint64_t AnswerCallCATs.intentHandledResponse(incomingCallConcept:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_21_1((uint64_t)AnswerCallCATs.intentHandledResponse(incomingCallConcept:));
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v14;

  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v8 = v7;
  *(void *)(v5 + 48) = v1;
  swift_task_dealloc();
  if (v1)
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v9, v10, v11);
  }
  else
  {
    swift_bridgeObjectRelease();
    v12 = *(uint64_t (**)(uint64_t))(v7 + 8);
    return v12(a1);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_31_0();
  *(_OWORD *)(v2 + 16) = xmmword_467710;
  *(void *)(v2 + 32) = 0xD000000000000013;
  *(void *)(v2 + 40) = 0x8000000000493CB0;
  if (a1)
  {
    uint64_t v3 = type metadata accessor for PhoneIncomingCall();
    uint64_t v4 = a1;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
    *(void *)(v2 + 56) = 0;
    *(void *)(v2 + 64) = 0;
  }
  *(void *)(v2 + 48) = v4;
  *(void *)(v2 + 72) = v3;
  swift_retain();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();

  return swift_bridgeObjectRelease();
}

uint64_t AnswerCallCATs.offerFollowUpIntent(followUpOfferType:completion:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v3 = OUTLINED_FUNCTION_11_0(v2);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_4();
  uint64_t v6 = v5 - v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v7 = OUTLINED_FUNCTION_31_0();
  *(_OWORD *)(v7 + 16) = xmmword_467710;
  uint64_t v8 = (uint64_t *)(v7 + 48);
  *(void *)(v7 + 32) = 0xD000000000000011;
  *(void *)(v7 + 40) = 0x8000000000493CD0;
  outlined init with copy of SpeakableString?(a1, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload(v6, 1, v9) == 1)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v6, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v8 = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
  }
  else
  {
    *(void *)(v7 + 72) = v9;
    __swift_allocate_boxed_opaque_existential_1(v8);
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v10 + 32))();
  }
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  return swift_bridgeObjectRelease();
}

uint64_t AnswerCallCATs.offerFollowUpIntent(followUpOfferType:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v4);
  v1[5] = swift_task_alloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v5, v6, v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t (*v10)(uint64_t, unint64_t, unint64_t, uint64_t);
  uint64_t v11;

  uint64_t v1 = v0[5];
  uint64_t v2 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_31_0();
  v0[6] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_467710;
  uint64_t v4 = (uint64_t *)(v3 + 48);
  *(void *)(v3 + 32) = 0xD000000000000011;
  *(void *)(v3 + 40) = 0x8000000000493CD0;
  outlined init with copy of SpeakableString?(v2, v1, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  if (OUTLINED_FUNCTION_37_2(v5) == 1)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v0[5], &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v4 = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
  }
  else
  {
    *(void *)(v3 + 72) = v2;
    __swift_allocate_boxed_opaque_existential_1(v4);
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v6 + 32))();
  }
  uint64_t v7 = (void *)OUTLINED_FUNCTION_3_0();
  v0[7] = v7;
  *uint64_t v7 = v0;
  v7[1] = AnswerCallCATs.offerFollowUpIntent(followUpOfferType:);
  uint64_t v8 = v0[2];
  return v10(v8, 0xD00000000000001ELL, 0x800000000048D110, v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    OUTLINED_FUNCTION_47_0();
    return v10();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v0();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_1_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v3);
  v1[4] = swift_task_alloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v4, v5, v6);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;

  uint64_t v1 = v0[4];
  uint64_t v2 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_31_0();
  v0[5] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_467710;
  uint64_t v4 = (uint64_t *)(v3 + 48);
  *(void *)(v3 + 32) = 0xD000000000000011;
  *(void *)(v3 + 40) = 0x8000000000493CD0;
  outlined init with copy of SpeakableString?(v2, v1, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  if (OUTLINED_FUNCTION_37_2(v5) == 1)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v0[4], &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v4 = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
  }
  else
  {
    *(void *)(v3 + 72) = v2;
    __swift_allocate_boxed_opaque_existential_1(v4);
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v6 + 32))();
  }
  uint64_t v7 = (void *)OUTLINED_FUNCTION_3_0();
  v0[6] = v7;
  *uint64_t v7 = v0;
  v7[1] = AnswerCallCATs.offerFollowUpIntent(followUpOfferType:);
  uint64_t v8 = OUTLINED_FUNCTION_11_6(0xD00000000000001ELL);
  return v10(v8);
}

uint64_t AnswerCallCATs.offerFollowUpIntent(followUpOfferType:)(uint64_t a1)
{
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v8 = v7;
  *(void *)(v5 + 56) = v1;
  swift_task_dealloc();
  if (v1)
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v9, v10, v11);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    v12 = *(uint64_t (**)(uint64_t))(v7 + 8);
    return v12(a1);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v3 = OUTLINED_FUNCTION_11_0(v2);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_4();
  uint64_t v6 = v5 - v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v7 = OUTLINED_FUNCTION_31_0();
  *(_OWORD *)(v7 + 16) = xmmword_467710;
  uint64_t v8 = (uint64_t *)(v7 + 48);
  *(void *)(v7 + 32) = 0xD000000000000011;
  *(void *)(v7 + 40) = 0x8000000000493CD0;
  outlined init with copy of SpeakableString?(a1, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload(v6, 1, v9) == 1)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v6, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v8 = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
  }
  else
  {
    *(void *)(v7 + 72) = v9;
    __swift_allocate_boxed_opaque_existential_1(v8);
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v10 + 32))();
  }
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  return swift_bridgeObjectRelease();
}

uint64_t AnswerCallCATs.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return AnswerCallCATs.init(templateDir:options:globals:)(a1, a2);
}

uint64_t AnswerCallCATs.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CATOption();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_4();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  uint64_t v10 = OUTLINED_FUNCTION_11_0(v9);
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_4();
  outlined init with copy of SpeakableString?(a1, v12 - v11, (uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
  uint64_t v13 = CATWrapper.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(a1, (uint64_t *)&demangling cache variable for type metadata for URL?);
  return v13;
}

unint64_t lazy protocol witness table accessor for type AnswerCallCATs.Properties and conformance AnswerCallCATs.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type AnswerCallCATs.Properties and conformance AnswerCallCATs.Properties;
  if (!lazy protocol witness table cache variable for type AnswerCallCATs.Properties and conformance AnswerCallCATs.Properties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnswerCallCATs.Properties and conformance AnswerCallCATs.Properties);
  }
  return result;
}

uint64_t type metadata accessor for AnswerCallCATs()
{
  uint64_t result = type metadata singleton initialization cache for AnswerCallCATs;
  if (!type metadata singleton initialization cache for AnswerCallCATs) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for AnswerCallCATs()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for AnswerCallCATs()
{
  return type metadata accessor for AnswerCallCATs();
}

unsigned char *storeEnumTagSinglePayload for AnswerCallCATs.Properties(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x11D258);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnswerCallCATs.Properties()
{
  return &type metadata for AnswerCallCATs.Properties;
}

PhoneCallFlowDelegatePlugin::AnnounceIncomingCallCATsSimple::Properties_optional __swiftcall AnnounceIncomingCallCATsSimple.Properties.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AnnounceIncomingCallCATsSimple.Properties.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.value = PhoneCallFlowDelegatePlugin_AnnounceIncomingCallCATsSimple_Properties_offerFollowUpIntent;
  }
  else {
    v4.value = PhoneCallFlowDelegatePlugin_AnnounceIncomingCallCATsSimple_Properties_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

unint64_t AnnounceIncomingCallCATs.Properties.rawValue.getter(char a1)
{
  if (a1) {
    return 0xD000000000000028;
  }
  else {
    return 0xD00000000000002ALL;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnnounceIncomingCallCATsSimple.Properties(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnnounceIncomingCallCATsSimple.Properties()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnnounceIncomingCallCATsSimple.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnnounceIncomingCallCATsSimple.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::AnnounceIncomingCallCATsSimple::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AnnounceIncomingCallCATsSimple.Properties@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::AnnounceIncomingCallCATsSimple::Properties_optional *a2@<X8>)
{
  result.value = AnnounceIncomingCallCATsSimple.Properties.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AnnounceIncomingCallCATsSimple.Properties@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = AnnounceIncomingCallCATs.Properties.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t AnnounceIncomingCallCATsSimple.intentHandledResponse(incomingCallConcept:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_21_1((uint64_t)AnnounceIncomingCallCATsSimple.intentHandledResponse(incomingCallConcept:));
}

uint64_t AnnounceIncomingCallCATsSimple.intentHandledResponse(incomingCallConcept:)()
{
  uint64_t v1 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_31_0();
  v0[4] = v2;
  *(_OWORD *)(v2 + 16) = xmmword_467710;
  uint64_t v3 = OUTLINED_FUNCTION_10_1(v2, (uint64_t)"incomingCallConcept");
  if (v1)
  {
    uint64_t v3 = type metadata accessor for PhoneIncomingCall();
  }
  else
  {
    *(void *)(v2 + 56) = 0;
    *(void *)(v2 + 64) = 0;
  }
  *(void *)(v2 + 48) = v1;
  *(void *)(v2 + 72) = v3;
  OUTLINED_FUNCTION_19_2();
  unint64_t v4 = (void *)swift_task_alloc();
  v0[5] = v4;
  *unint64_t v4 = v0;
  v4[1] = AnnounceIncomingCallCATsSimple.intentHandledResponse(incomingCallConcept:);
  uint64_t v5 = OUTLINED_FUNCTION_11_6(0xD00000000000002ALL);
  return v7(v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  *unint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_2();
  *unsigned int v6 = v5;
  *(void *)(v3 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = OUTLINED_FUNCTION_18_2();
    return v11(v10);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

PhoneCallFlowDelegatePlugin::AnnounceIncomingCallCATsSimple::IntentHandledResponseDialogIds_optional __swiftcall AnnounceIncomingCallCATsSimple.IntentHandledResponseDialogIds.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AnnounceIncomingCallCATsSimple.IntentHandledResponseDialogIds.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 7) {
    return (PhoneCallFlowDelegatePlugin::AnnounceIncomingCallCATsSimple::IntentHandledResponseDialogIds_optional)7;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::AnnounceIncomingCallCATsSimple::IntentHandledResponseDialogIds_optional)v3;
  }
}

uint64_t AnnounceIncomingCallCATsSimple.IntentHandledResponseDialogIds.rawValue.getter(char a1)
{
  uint64_t result = 0x656D695465636146;
  switch(a1)
  {
    case 2:
      uint64_t result = 0x636972656E6547;
      break;
    case 3:
      uint64_t result = 0x656E6F6850;
      break;
    case 4:
    case 5:
    case 6:
      uint64_t result = 0x7261506472696854;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnnounceIncomingCallCATsSimple.IntentHandledResponseDialogIds()
{
  return specialized == infix<A>(_:_:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnnounceIncomingCallCATsSimple.IntentHandledResponseDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnnounceIncomingCallCATsSimple.IntentHandledResponseDialogIds()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnnounceIncomingCallCATsSimple.IntentHandledResponseDialogIds(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::AnnounceIncomingCallCATsSimple::IntentHandledResponseDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AnnounceIncomingCallCATsSimple.IntentHandledResponseDialogIds@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::AnnounceIncomingCallCATsSimple::IntentHandledResponseDialogIds_optional *a2@<X8>)
{
  result.value = AnnounceIncomingCallCATsSimple.IntentHandledResponseDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AnnounceIncomingCallCATsSimple.IntentHandledResponseDialogIds@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AnnounceIncomingCallCATsSimple.IntentHandledResponseDialogIds.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t AnnounceIncomingCallCATsSimple.intentHandledResponseAsLabels(incomingCallConcept:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_21_1((uint64_t)AnnounceIncomingCallCATsSimple.intentHandledResponseAsLabels(incomingCallConcept:));
}

uint64_t AnnounceIncomingCallCATsSimple.intentHandledResponseAsLabels(incomingCallConcept:)()
{
  uint64_t v1 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_31_0();
  v0[4] = v2;
  *(_OWORD *)(v2 + 16) = xmmword_467710;
  uint64_t v3 = OUTLINED_FUNCTION_10_1(v2, (uint64_t)"incomingCallConcept");
  if (v1)
  {
    uint64_t v3 = type metadata accessor for PhoneIncomingCall();
  }
  else
  {
    *(void *)(v2 + 56) = 0;
    *(void *)(v2 + 64) = 0;
  }
  *(void *)(v2 + 48) = v1;
  *(void *)(v2 + 72) = v3;
  OUTLINED_FUNCTION_19_2();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[5] = v4;
  unint64_t v5 = lazy protocol witness table accessor for type AnnounceIncomingCallCATsSimple.IntentHandledResponseDialogIds and conformance AnnounceIncomingCallCATsSimple.IntentHandledResponseDialogIds();
  *uint64_t v4 = v0;
  v4[1] = AnnounceIncomingCallCATsSimple.intentHandledResponseAsLabels(incomingCallConcept:);
  return v7(0xD00000000000002ALL, 0x800000000048D130, v2, &type metadata for AnnounceIncomingCallCATsSimple.IntentHandledResponseDialogIds, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  unint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_2();
  *unsigned int v6 = v5;
  *(void *)(v3 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = OUTLINED_FUNCTION_18_2();
    return v11(v10);
  }
}

unint64_t lazy protocol witness table accessor for type AnnounceIncomingCallCATsSimple.IntentHandledResponseDialogIds and conformance AnnounceIncomingCallCATsSimple.IntentHandledResponseDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type AnnounceIncomingCallCATsSimple.IntentHandledResponseDialogIds and conformance AnnounceIncomingCallCATsSimple.IntentHandledResponseDialogIds;
  if (!lazy protocol witness table cache variable for type AnnounceIncomingCallCATsSimple.IntentHandledResponseDialogIds and conformance AnnounceIncomingCallCATsSimple.IntentHandledResponseDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnounceIncomingCallCATsSimple.IntentHandledResponseDialogIds and conformance AnnounceIncomingCallCATsSimple.IntentHandledResponseDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnnounceIncomingCallCATsSimple.IntentHandledResponseDialogIds and conformance AnnounceIncomingCallCATsSimple.IntentHandledResponseDialogIds;
  if (!lazy protocol witness table cache variable for type AnnounceIncomingCallCATsSimple.IntentHandledResponseDialogIds and conformance AnnounceIncomingCallCATsSimple.IntentHandledResponseDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnounceIncomingCallCATsSimple.IntentHandledResponseDialogIds and conformance AnnounceIncomingCallCATsSimple.IntentHandledResponseDialogIds);
  }
  return result;
}

uint64_t AnnounceIncomingCallCATsSimple.offerFollowUpIntent(followUpOfferType:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[2] = v2;
  v1[3] = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v1[4] = swift_task_alloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_4_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_31_0();
  *(void *)(v1 + 40) = v4;
  *(_OWORD *)(v4 + 16) = xmmword_467710;
  uint64_t v5 = (uint64_t *)(v4 + 48);
  *(void *)(v4 + 32) = v3;
  *(void *)(v4 + 40) = 0x8000000000493CD0;
  outlined init with copy of SpeakableString?(v0, v2, &demangling cache variable for type metadata for SpeakableString?);
  unsigned int v6 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_1_4(v6);
  if (v7)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v2, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v5 = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
  }
  else
  {
    *(void *)(v4 + 72) = v0;
    __swift_allocate_boxed_opaque_existential_1(v5);
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v8 + 32))();
  }
  uint64_t v9 = (void *)OUTLINED_FUNCTION_3_0();
  *(void *)(v1 + 48) = v9;
  *uint64_t v9 = v1;
  v9[1] = UnsupportedFlowCATs.unsupportedEmergencyContactCall(thirdPartyAppName:isFaceTime:);
  uint64_t v10 = OUTLINED_FUNCTION_11_6(v3 + 23);
  return v12(v10);
}

PhoneCallFlowDelegatePlugin::AnnounceIncomingCallCATsSimple::OfferFollowUpIntentDialogIds_optional __swiftcall AnnounceIncomingCallCATsSimple.OfferFollowUpIntentDialogIds.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AnnounceIncomingCallCATsSimple.OfferFollowUpIntentDialogIds.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return (PhoneCallFlowDelegatePlugin::AnnounceIncomingCallCATsSimple::OfferFollowUpIntentDialogIds_optional)3;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::AnnounceIncomingCallCATsSimple::OfferFollowUpIntentDialogIds_optional)v3;
  }
}

unint64_t SearchCallHistoryCATsSimple.ReadSingleVoiceMailRecordDialogIds.rawValue.getter(unsigned __int8 a1)
{
  return ((unint64_t)a1 << 48) + 0x31676F6C616964;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnnounceIncomingCallCATsSimple.OfferFollowUpIntentDialogIds(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance AnnounceIncomingCallCATsSimple.OfferFollowUpIntentDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnnounceIncomingCallCATsSimple.OfferFollowUpIntentDialogIds(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance AnnounceIncomingCallCATsSimple.OfferFollowUpIntentDialogIds(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::AnnounceIncomingCallCATsSimple::OfferFollowUpIntentDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AnnounceIncomingCallCATsSimple.OfferFollowUpIntentDialogIds@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::AnnounceIncomingCallCATsSimple::OfferFollowUpIntentDialogIds_optional *a2@<X8>)
{
  result.value = AnnounceIncomingCallCATsSimple.OfferFollowUpIntentDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AnnounceIncomingCallCATsSimple.OfferFollowUpIntentDialogIds@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = SearchCallHistoryCATsSimple.ReadSingleVoiceMailRecordDialogIds.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = 0xE700000000000000;
  return result;
}

uint64_t AnnounceIncomingCallCATsSimple.offerFollowUpIntentAsLabels(followUpOfferType:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[2] = v2;
  v1[3] = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v1[4] = swift_task_alloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  uint64_t (*v12)(uint64_t, unint64_t, uint64_t, ValueMetadata *, unint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_4_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = OUTLINED_FUNCTION_31_0();
  *(void *)(v1 + 40) = v4;
  *(_OWORD *)(v4 + 16) = xmmword_467710;
  uint64_t v5 = (uint64_t *)(v4 + 48);
  *(void *)(v4 + 32) = v3;
  *(void *)(v4 + 40) = 0x8000000000493CD0;
  outlined init with copy of SpeakableString?(v0, v2, &demangling cache variable for type metadata for SpeakableString?);
  unsigned int v6 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_1_4(v6);
  if (v7)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v2, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v5 = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
  }
  else
  {
    *(void *)(v4 + 72) = v0;
    __swift_allocate_boxed_opaque_existential_1(v5);
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v8 + 32))();
  }
  uint64_t v9 = (void *)OUTLINED_FUNCTION_3_0();
  *(void *)(v1 + 48) = v9;
  uint64_t v10 = lazy protocol witness table accessor for type AnnounceIncomingCallCATsSimple.OfferFollowUpIntentDialogIds and conformance AnnounceIncomingCallCATsSimple.OfferFollowUpIntentDialogIds();
  *uint64_t v9 = v1;
  v9[1] = SuggestionsCATsSimple.phoneCall_StartFTCallAsLabels(name:hasReference:);
  return v12(v3 + 23, 0x800000000048D160, v4, &type metadata for AnnounceIncomingCallCATsSimple.OfferFollowUpIntentDialogIds, v10);
}

unint64_t lazy protocol witness table accessor for type AnnounceIncomingCallCATsSimple.OfferFollowUpIntentDialogIds and conformance AnnounceIncomingCallCATsSimple.OfferFollowUpIntentDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type AnnounceIncomingCallCATsSimple.OfferFollowUpIntentDialogIds and conformance AnnounceIncomingCallCATsSimple.OfferFollowUpIntentDialogIds;
  if (!lazy protocol witness table cache variable for type AnnounceIncomingCallCATsSimple.OfferFollowUpIntentDialogIds and conformance AnnounceIncomingCallCATsSimple.OfferFollowUpIntentDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnounceIncomingCallCATsSimple.OfferFollowUpIntentDialogIds and conformance AnnounceIncomingCallCATsSimple.OfferFollowUpIntentDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnnounceIncomingCallCATsSimple.OfferFollowUpIntentDialogIds and conformance AnnounceIncomingCallCATsSimple.OfferFollowUpIntentDialogIds;
  if (!lazy protocol witness table cache variable for type AnnounceIncomingCallCATsSimple.OfferFollowUpIntentDialogIds and conformance AnnounceIncomingCallCATsSimple.OfferFollowUpIntentDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnounceIncomingCallCATsSimple.OfferFollowUpIntentDialogIds and conformance AnnounceIncomingCallCATsSimple.OfferFollowUpIntentDialogIds);
  }
  return result;
}

uint64_t AnnounceIncomingCallCATsSimple.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return AnnounceIncomingCallCATsSimple.init(templateDir:options:globals:)(a1, a2);
}

uint64_t AnnounceIncomingCallCATsSimple.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_8_18();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v10 - 8);
  outlined init with copy of SpeakableString?(a1, (uint64_t)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a2, v2);
  uint64_t v12 = CATWrapperSimple.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a2, v2);
  _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(a1, (uint64_t *)&demangling cache variable for type metadata for URL?);
  return v12;
}

uint64_t AnnounceIncomingCallCATsSimple.__allocating_init(useResponseMode:options:)()
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_8_18();
  __chkstk_darwin(v0);
  OUTLINED_FUNCTION_52();
  uint64_t v1 = swift_allocObject();
  uint64_t v2 = OUTLINED_FUNCTION_28_0();
  v3(v2);
  CATWrapperSimple.init(useResponseMode:options:)();
  uint64_t v4 = OUTLINED_FUNCTION_30_1();
  v5(v4);
  return v1;
}

uint64_t AnnounceIncomingCallCATsSimple.init(useResponseMode:options:)()
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_8_18();
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_52();
  uint64_t v2 = OUTLINED_FUNCTION_28_0();
  v3(v2);
  CATWrapperSimple.init(useResponseMode:options:)();
  uint64_t v4 = OUTLINED_FUNCTION_30_1();
  v5(v4);
  return v0;
}

unint64_t lazy protocol witness table accessor for type AnnounceIncomingCallCATsSimple.Properties and conformance AnnounceIncomingCallCATsSimple.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type AnnounceIncomingCallCATsSimple.Properties and conformance AnnounceIncomingCallCATsSimple.Properties;
  if (!lazy protocol witness table cache variable for type AnnounceIncomingCallCATsSimple.Properties and conformance AnnounceIncomingCallCATsSimple.Properties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnounceIncomingCallCATsSimple.Properties and conformance AnnounceIncomingCallCATsSimple.Properties);
  }
  return result;
}

uint64_t type metadata accessor for AnnounceIncomingCallCATsSimple()
{
  uint64_t result = type metadata singleton initialization cache for AnnounceIncomingCallCATsSimple;
  if (!type metadata singleton initialization cache for AnnounceIncomingCallCATsSimple) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for AnnounceIncomingCallCATsSimple()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for AnnounceIncomingCallCATsSimple()
{
  return type metadata accessor for AnnounceIncomingCallCATsSimple();
}

unsigned char *storeEnumTagSinglePayload for AnnounceIncomingCallCATsSimple.Properties(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x11E50CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for AnnounceIncomingCallCATsSimple.Properties()
{
}

unsigned char *storeEnumTagSinglePayload for AnnounceIncomingCallCATsSimple.IntentHandledResponseDialogIds(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x11E60CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

void type metadata accessor for AnnounceIncomingCallCATsSimple.IntentHandledResponseDialogIds()
{
}

unsigned char *storeEnumTagSinglePayload for AnnounceIncomingCallCATsSimple.OfferFollowUpIntentDialogIds(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x11E70CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for AnnounceIncomingCallCATsSimple.OfferFollowUpIntentDialogIds()
{
}

uint64_t protocol witness for IncomingCallCATsSimple.intentHandledResponse(incomingCallConcept:) in conformance AnnounceIncomingCallCATsSimple()
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_2_44();
  uint64_t v5 = (uint64_t (*)(uint64_t))(*(void *)(v2 + class metadata base offset for AnnounceIncomingCallCATsSimple)
                                       + **(int **)(v2 + class metadata base offset for AnnounceIncomingCallCATsSimple));
  int v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *int v3 = v1;
  v3[1] = UnsupportedFlowCATs.deleteVoicemail();
  return v5(v0);
}

uint64_t protocol witness for IncomingCallCATsSimple.offerFollowUpIntent(followUpOfferType:) in conformance AnnounceIncomingCallCATsSimple()
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_2_44();
  uint64_t v5 = (uint64_t (*)(uint64_t))(*(void *)(class metadata base offset for AnnounceIncomingCallCATsSimple
                                                   + v2
                                                   + 16)
                                       + **(int **)(class metadata base offset for AnnounceIncomingCallCATsSimple
                                                  + v2
                                                  + 16));
  int v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *int v3 = v1;
  v3[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return v5(v0);
}

uint64_t static Transformer<>.transformer(sharedGlobals:previousIntent:)()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
  type metadata accessor for INCallRecordType(0);

  return Transformer.init(transform:)();
}

{
  uint64_t vars8;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
  type metadata accessor for INCallDestinationType(0);

  return Transformer.init(transform:)();
}

{
  uint64_t vars8;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SiriPhoneContact]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]?);
  OUTLINED_FUNCTION_41_23();

  return Transformer.init(transform:)();
}

{
  uint64_t vars8;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
  type metadata accessor for INAudioCallTTYType(0);
  OUTLINED_FUNCTION_41_23();

  return Transformer.init(transform:)();
}

uint64_t closure #1 in static Transformer<>.transformer(sharedGlobals:previousIntent:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  uint64_t result = PhoneCallNLIntent.getCallRecordType()(v3, v4);
  *a2 = result;
  return result;
}

uint64_t specialized ContactNeedsValueGuardFlow.init(flow:state:sharedGlobals:)(uint64_t a1, uint64_t a2, long long *a3, uint64_t *a4)
{
  *(void *)(v4 + *(void *)(*(void *)v4 + 104)) = a1;
  outlined init with take of ContactNeedsValueGuardFlow<INStartCallIntent>.FlowState(a2, v4 + *(void *)(*(void *)v4 + 96), a4);
  outlined init with take of AppSelectionSignalComponent(a3, v4 + *(void *)(*(void *)v4 + 112));
  return v4;
}

void specialized ContactUnsetRelationshipFlowStrategy.init(sharedGlobals:contactStore:labelTemplates:unsetRelationshipTemplates:displayTextCatFamily:phoneCallCommonCats:)()
{
  OUTLINED_FUNCTION_24_0();
  v26 = v0;
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v15 = type metadata accessor for CATOption();
  uint64_t v16 = OUTLINED_FUNCTION_11_0(v15);
  __chkstk_darwin(v16);
  OUTLINED_FUNCTION_11_25();
  uint64_t v17 = OUTLINED_FUNCTION_7_14();
  outlined init with copy of SignalProviding(v17, v18);
  outlined init with copy of SignalProviding(v10, (uint64_t)(v14 + 5));
  outlined init with copy of SignalProviding(v8, (uint64_t)(v14 + 10));
  outlined init with copy of SignalProviding(v6, (uint64_t)(v14 + 15));
  v14[20] = v4;
  v14[21] = v2;
  outlined init with copy of SignalProviding(v12, (uint64_t)v28);
  outlined init with copy of SignalProviding(v8, (uint64_t)v27);
  type metadata accessor for AppInfoBuilder();
  uint64_t v19 = OUTLINED_FUNCTION_18_17();
  type metadata accessor for StartCallCATs();
  swift_retain();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v20 = CATWrapper.__allocating_init(options:globals:)();
  __swift_instantiateConcreteTypeFromMangledName(v26);
  uint64_t v21 = OUTLINED_FUNCTION_21_0();
  specialized PhoneCallBaseCatTemplatingService.init(ducFamily:sharedGlobals:displayTextCats:phoneCallCommonCats:appInfoBuilder:labelTemplating:startCallCats:)(0xD000000000000010, 0x800000000048C8D0, (uint64_t)v28, v4, v2, v19, (uint64_t)v27, v20, v21, v24, v25, (uint64_t)v26, v27[0], v27[1], v27[2], v27[3], v27[4], v28[0], v28[1],
    v28[2],
    (void *)v28[3]);
  uint64_t v23 = v22;
  __swift_destroy_boxed_opaque_existential_1(v6);
  __swift_destroy_boxed_opaque_existential_1(v8);
  __swift_destroy_boxed_opaque_existential_1(v10);
  __swift_destroy_boxed_opaque_existential_1(v12);
  v14[22] = v23;
  OUTLINED_FUNCTION_26_1();
}

void static PhoneCallFlowFactory.makeAddCallParticipantRCHFlow(intent:app:sharedGlobals:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v36 = v4;
  uint64_t v5 = type metadata accessor for CATOption();
  uint64_t v6 = OUTLINED_FUNCTION_11_0(v5);
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_37();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INAddCallParticipantIntent, INAddCallParticipantIntentResponse>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v32 = v8;
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_5_8();
  uint64_t v35 = v10;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v30 - v12;
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INAddCallParticipantIntent);
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for INAddCallParticipantIntentResponse);
  OUTLINED_FUNCTION_7_0();
  RCHChildFlowProducersAsync.init()();
  static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B>(app:)();
  RCHChildFlowProducersAsync.appResolutionFlowProducer.setter();
  OUTLINED_FUNCTION_45_5();
  type metadata accessor for AddCallParticipantCATsSimple();
  OUTLINED_FUNCTION_63_2();
  OUTLINED_FUNCTION_60_3();
  OUTLINED_FUNCTION_62_0();
  type metadata accessor for AddCallParticipantHandleIntentFlowStrategy();
  uint64_t v14 = OUTLINED_FUNCTION_60_1();
  OUTLINED_FUNCTION_83(v14);
  *(void *)(v14 + 56) = v13;
  *(void *)&v37[0] = v14;
  OUTLINED_FUNCTION_45_5();
  uint64_t v15 = OUTLINED_FUNCTION_60_1();
  *(void *)(v15 + 16) = v3;
  outlined init with take of AppSelectionSignalComponent(&v38, v15 + 24);
  lazy protocol witness table accessor for type AddCallParticipantHandleIntentFlowStrategy and conformance AddCallParticipantHandleIntentFlowStrategy(&lazy protocol witness table cache variable for type AddCallParticipantHandleIntentFlowStrategy and conformance AddCallParticipantHandleIntentFlowStrategy, (void (*)(uint64_t))type metadata accessor for AddCallParticipantHandleIntentFlowStrategy);
  swift_retain();
  static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:responseFlowProducer:)();
  OUTLINED_FUNCTION_34_4();
  swift_release();
  OUTLINED_FUNCTION_54_1();
  RCHChildFlowProducersAsync.handleIntentFlowProducer.setter();
  type metadata accessor for ParticipantOutputProvider();
  OUTLINED_FUNCTION_45_5();
  type metadata accessor for AddCallParticipantCATs();
  OUTLINED_FUNCTION_95_0();
  swift_retain();
  static CATOption.defaultMode.getter();
  CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for StartCallCATs();
  OUTLINED_FUNCTION_63_2();
  CATWrapper.__allocating_init(options:globals:)();
  ParticipantOutputProvider.__allocating_init(sharedGlobals:app:cats:startCallCats:)();
  uint64_t v17 = v16;
  outlined init with copy of SignalProviding((uint64_t)v1, (uint64_t)&v38 + 8);
  *(void *)&long long v38 = v17;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactNeedsValueFlowStrategy<ParticipantOutputProvider>);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type ContactNeedsValueFlowStrategy<ParticipantOutputProvider> and conformance ContactNeedsValueFlowStrategy<A>, &demangling cache variable for type metadata for ContactNeedsValueFlowStrategy<ParticipantOutputProvider>);
  static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)();
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)&v38, &demangling cache variable for type metadata for ContactNeedsValueFlowStrategy<ParticipantOutputProvider>);
  OUTLINED_FUNCTION_52_3();
  RCHChildFlowProducersAsync.needsValueFlowProducer.setter();
  outlined init with copy of SignalProviding((uint64_t)v1, (uint64_t)&v38 + 8);
  *(void *)&long long v38 = v17;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactNeedsConfirmationFlowStrategy<ParticipantOutputProvider>);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type ContactNeedsConfirmationFlowStrategy<ParticipantOutputProvider> and conformance ContactNeedsConfirmationFlowStrategy<A>, &demangling cache variable for type metadata for ContactNeedsConfirmationFlowStrategy<ParticipantOutputProvider>);
  static RCHChildFlowFactoryHelper.makeNeedsConfirmationFlowProducer<A>(strategy:)();
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)&v38, &demangling cache variable for type metadata for ContactNeedsConfirmationFlowStrategy<ParticipantOutputProvider>);
  OUTLINED_FUNCTION_54_1();
  RCHChildFlowProducersAsync.needsConfirmationFlowProducer.setter();
  OUTLINED_FUNCTION_45_5();
  uint64_t v18 = OUTLINED_FUNCTION_60_1();
  OUTLINED_FUNCTION_83(v18);
  *(void *)(v18 + 56) = v17;
  swift_retain();
  RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter();
  OUTLINED_FUNCTION_45_5();
  uint64_t v19 = swift_retain();
  uint64_t v20 = specialized ContactNeedsDisambiguationFlowStrategy.__allocating_init(promptProvider:sharedGlobals:)(v19, (uint64_t)&v38);
  OUTLINED_FUNCTION_27_9(v20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactNeedsDisambiguationFlowStrategy<ParticipantOutputProvider>);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type ContactNeedsDisambiguationFlowStrategy<ParticipantOutputProvider> and conformance ContactNeedsDisambiguationFlowStrategy<A>, &demangling cache variable for type metadata for ContactNeedsDisambiguationFlowStrategy<ParticipantOutputProvider>);
  static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A>(strategy:)();
  swift_release();
  OUTLINED_FUNCTION_54_1();
  v31 = v13;
  RCHChildFlowProducersAsync.needsDisambiguationFlowProducer.setter();
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  OUTLINED_FUNCTION_24_17();
  v21();
  uint64_t v34 = v39;
  uint64_t v30 = v40;
  v33 = __swift_project_boxed_opaque_existential_1(&v38, v39);
  outlined init with copy of SignalProviding((uint64_t)v1, (uint64_t)v37);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneIntentRCHFlowStrategy<INAddCallParticipantIntent, INAddCallParticipantIntentResponse>);
  uint64_t v23 = OUTLINED_FUNCTION_60_1();
  outlined init with take of AppSelectionSignalComponent(v37, v23 + 16);
  *(void *)(v23 + 56) = v3;
  *(void *)&v37[0] = v23;
  OUTLINED_FUNCTION_52_3();
  uint64_t v24 = v7;
  v25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowFactory<INAddCallParticipantIntent, INAddCallParticipantIntentResponse>);
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_95_0();
  swift_retain();
  uint64_t v26 = RCHChildFlowFactory.init(producers:)();
  uint64_t v27 = v30;
  v28 = *(void (**)(long long *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 8);
  uint64_t v29 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type PhoneIntentRCHFlowStrategy<INAddCallParticipantIntent, INAddCallParticipantIntentResponse> and conformance PhoneIntentRCHFlowStrategy<A, B>, &demangling cache variable for type metadata for PhoneIntentRCHFlowStrategy<INAddCallParticipantIntent, INAddCallParticipantIntentResponse>);
  v28(v37, v26, v3, v36, v22, v29, v34, v27);
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v31, v24);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
  OUTLINED_FUNCTION_26_1();
}

void static PhoneCallFlowFactory.makeRCHFlow(app:intent:sharedGlobals:)()
{
  OUTLINED_FUNCTION_24_0();
  v145 = v3;
  uint64_t v146 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducers<INSearchCallHistoryIntent, INSearchCallHistoryIntentResponse>?);
  uint64_t v7 = OUTLINED_FUNCTION_11_0(v6);
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_3_1();
  uint64_t v122 = v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallFlowFactory.PhoneRCHFlowProducers<INSearchCallHistoryIntent, INSearchCallHistoryIntentResponse>);
  uint64_t v10 = OUTLINED_FUNCTION_11_0(v9);
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_3_1();
  uint64_t v123 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducers<INStartCallIntent, INStartCallIntentResponse>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v125 = v13;
  uint64_t v126 = v12;
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_3_1();
  uint64_t v127 = v14;
  uint64_t v133 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INStartCallIntent, INStartCallIntentResponse>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v124 = v15;
  __chkstk_darwin(v16);
  OUTLINED_FUNCTION_3_1();
  uint64_t v131 = v17;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallFlowFactory.PhoneRCHFlowProducers<INStartCallIntent, INStartCallIntentResponse>);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v19);
  OUTLINED_FUNCTION_5_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducers<INStartVideoCallIntent, INStartVideoCallIntentResponse>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v129 = v20;
  __chkstk_darwin(v21);
  OUTLINED_FUNCTION_11_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INStartVideoCallIntent, INStartVideoCallIntentResponse>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v128 = v22;
  __chkstk_darwin(v23);
  OUTLINED_FUNCTION_65_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallFlowFactory.PhoneRCHFlowProducers<INStartVideoCallIntent, INStartVideoCallIntentResponse>);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v24);
  OUTLINED_FUNCTION_37();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducers<INStartAudioCallIntent, INStartAudioCallIntentResponse>);
  OUTLINED_FUNCTION_0_0();
  __chkstk_darwin(v25);
  OUTLINED_FUNCTION_3_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INStartAudioCallIntent, INStartAudioCallIntentResponse>);
  OUTLINED_FUNCTION_0_0();
  __chkstk_darwin(v26);
  OUTLINED_FUNCTION_3_1();
  uint64_t v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallFlowFactory.PhoneRCHFlowProducers<INStartAudioCallIntent, INStartAudioCallIntentResponse>);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v27);
  OUTLINED_FUNCTION_3_1();
  uint64_t v142 = v28;
  uint64_t v29 = type metadata accessor for CATOption();
  uint64_t v30 = OUTLINED_FUNCTION_11_0(v29);
  __chkstk_darwin(v30);
  OUTLINED_FUNCTION_3_1();
  self;
  uint64_t v31 = swift_dynamicCastObjCClass();
  if (v31)
  {
    uint64_t v132 = v31;
    outlined init with copy of SignalProviding((uint64_t)v145, (uint64_t)&v148);
    uint64_t v32 = one-time initialization token for instance;
    id v134 = v5;
    if (v32 != -1) {
      swift_once();
    }
    v33 = (void *)static BiomeEventSender.instance;
    type metadata accessor for StartAudioCallRCHFlowDelegate();
    uint64_t v34 = OUTLINED_FUNCTION_21_0();
    id v35 = v33;
    swift_retain();
    uint64_t v130 = specialized StartAudioCallRCHFlowDelegate.init(sharedGlobals:appResolved:biomeEventSender:)((uint64_t)&v148, v146, (uint64_t)v35, v34, &direct field offset for StartAudioCallRCHFlowDelegate.sharedGlobals, &direct field offset for StartAudioCallRCHFlowDelegate.appResolved, &direct field offset for StartAudioCallRCHFlowDelegate.biomeEventSender);
    outlined init with copy of SignalProviding((uint64_t)v145, (uint64_t)&v148);
    type metadata accessor for PhoneCallDisplayTextCATsSimple();
    static CATOption.defaultMode.getter();
    uint64_t v36 = OUTLINED_FUNCTION_29_10();
    type metadata accessor for StartCallCATsSimple();
    static CATOption.defaultMode.getter();
    uint64_t v37 = OUTLINED_FUNCTION_29_10();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CallingIntentRCHFlowStrategy<INStartAudioCallIntent, INStartAudioCallIntentResponse>);
    long long v38 = (void *)OUTLINED_FUNCTION_31_0();
    outlined init with take of AppSelectionSignalComponent(&v148, (uint64_t)(v38 + 2));
    v38[7] = v146;
    v38[8] = v36;
    v38[9] = v37;
    swift_retain();
    specialized static PhoneCallFlowFactory.getGenericStartCallProducers<A>(delegate:app:)(v130, v146, v39, v40, v41, v42, v43, v44, v121, v122, v123, v124, v125, v126, v127, v128, v130, v132, (uint64_t)v134,
      v136);
    __swift_project_boxed_opaque_existential_1(v145, v145[3]);
    OUTLINED_FUNCTION_79_1();
    OUTLINED_FUNCTION_24_17();
    v45();
    v46 = v150;
    __swift_project_boxed_opaque_existential_1(&v148, v149);
    v147[0] = v38;
    OUTLINED_FUNCTION_41_5();
    v47();
    OUTLINED_FUNCTION_41_5();
    v48();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowFactory<INStartAudioCallIntent, INStartAudioCallIntentResponse>);
    OUTLINED_FUNCTION_21_0();
    OUTLINED_FUNCTION_95_0();
    RCHChildFlowFactory.init(producers:withFallbacks:)();
    v49 = (uint64_t (*)(uint64_t))v46[1];
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type CallingIntentRCHFlowStrategy<INStartAudioCallIntent, INStartAudioCallIntentResponse> and conformance CallingIntentRCHFlowStrategy<A, B>, &demangling cache variable for type metadata for CallingIntentRCHFlowStrategy<INStartAudioCallIntent, INStartAudioCallIntentResponse>);
    uint64_t v50 = OUTLINED_FUNCTION_49_5();
    uint64_t v51 = v49(v50);
    swift_release();
    v147[0] = v51;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyValueFlow<RCHFlowResult<INStartAudioCallIntent, INStartAudioCallIntentResponse>>);
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type AnyValueFlow<RCHFlowResult<INStartAudioCallIntent, INStartAudioCallIntentResponse>> and conformance AnyValueFlow<A>, &demangling cache variable for type metadata for AnyValueFlow<RCHFlowResult<INStartAudioCallIntent, INStartAudioCallIntentResponse>>);
    Flow.eraseToAnyFlow()();
    OUTLINED_FUNCTION_91_2();

    swift_release();
    swift_release();
    v52 = &demangling cache variable for type metadata for PhoneCallFlowFactory.PhoneRCHFlowProducers<INStartAudioCallIntent, INStartAudioCallIntentResponse>;
    uint64_t v53 = v142;
    goto LABEL_10;
  }
  uint64_t v138 = v0;
  self;
  v54 = v5;
  if (swift_dynamicCastObjCClass())
  {
    OUTLINED_FUNCTION_70_1();
    uint64_t v55 = one-time initialization token for instance;
    id v139 = v5;
    if (v55 != -1) {
      swift_once();
    }
    v56 = (void *)static BiomeEventSender.instance;
    type metadata accessor for StartVideoCallRCHFlowDelegate();
    uint64_t v57 = OUTLINED_FUNCTION_21_0();
    swift_retain();
    uint64_t v137 = specialized StartAudioCallRCHFlowDelegate.init(sharedGlobals:appResolved:biomeEventSender:)((uint64_t)&v148, v146, (uint64_t)v56, v57, &direct field offset for StartVideoCallRCHFlowDelegate.sharedGlobals, &direct field offset for StartVideoCallRCHFlowDelegate.appResolved, &direct field offset for StartVideoCallRCHFlowDelegate.biomeEventSender);
    OUTLINED_FUNCTION_70_1();
    type metadata accessor for PhoneCallDisplayTextCATsSimple();
    static CATOption.defaultMode.getter();
    uint64_t v58 = CATWrapperSimple.__allocating_init(options:globals:)();
    type metadata accessor for StartCallCATsSimple();
    static CATOption.defaultMode.getter();
    uint64_t v59 = CATWrapperSimple.__allocating_init(options:globals:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CallingIntentRCHFlowStrategy<INStartVideoCallIntent, INStartVideoCallIntentResponse>);
    v60 = (void *)OUTLINED_FUNCTION_31_0();
    outlined init with take of AppSelectionSignalComponent(&v148, (uint64_t)(v60 + 2));
    v60[7] = v146;
    v60[8] = v58;
    v60[9] = v59;
    swift_retain();
    uint64_t v61 = v1;
    specialized static PhoneCallFlowFactory.getGenericStartCallProducers<A>(delegate:app:)(v137, v146, v62, v63, v64, v65, v66, v67, v121, v122, v123, v124, v125, v126, v127, v128, v129, v131, v133,
      v137);
    __swift_project_boxed_opaque_existential_1(v145, v145[3]);
    OUTLINED_FUNCTION_79_1();
    OUTLINED_FUNCTION_24_17();
    v68();
    v69 = v150;
    __swift_project_boxed_opaque_existential_1(&v148, v149);
    v147[0] = v60;
    OUTLINED_FUNCTION_41_5();
    v70();
    OUTLINED_FUNCTION_41_5();
    v71();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowFactory<INStartVideoCallIntent, INStartVideoCallIntentResponse>);
    OUTLINED_FUNCTION_21_0();
    OUTLINED_FUNCTION_93_1();
    RCHChildFlowFactory.init(producers:withFallbacks:)();
    v72 = (uint64_t (*)(uint64_t))v69[1];
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type CallingIntentRCHFlowStrategy<INStartVideoCallIntent, INStartVideoCallIntentResponse> and conformance CallingIntentRCHFlowStrategy<A, B>, &demangling cache variable for type metadata for CallingIntentRCHFlowStrategy<INStartVideoCallIntent, INStartVideoCallIntentResponse>);
    uint64_t v73 = OUTLINED_FUNCTION_49_5();
    uint64_t v74 = v72(v73);
    swift_release();
    v147[0] = v74;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyValueFlow<RCHFlowResult<INStartVideoCallIntent, INStartVideoCallIntentResponse>>);
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type AnyValueFlow<RCHFlowResult<INStartVideoCallIntent, INStartVideoCallIntentResponse>> and conformance AnyValueFlow<A>, &demangling cache variable for type metadata for AnyValueFlow<RCHFlowResult<INStartVideoCallIntent, INStartVideoCallIntentResponse>>);
    Flow.eraseToAnyFlow()();
    OUTLINED_FUNCTION_91_2();

    swift_release();
    swift_release();
    v52 = &demangling cache variable for type metadata for PhoneCallFlowFactory.PhoneRCHFlowProducers<INStartVideoCallIntent, INStartVideoCallIntentResponse>;
    goto LABEL_9;
  }
  self;
  if (OUTLINED_FUNCTION_72_2())
  {
    uint64_t v75 = v145[3];
    uint64_t v76 = v145[4];
    __swift_project_boxed_opaque_existential_1(v145, v75);
    v77 = *(void (**)(uint64_t, uint64_t))(v76 + 8);
    id v143 = v54;
    v77(v75, v76);
    uint64_t v78 = type metadata accessor for AnswerCallCATsSimple();
    static CATOption.defaultMode.getter();
    uint64_t v79 = CATWrapperSimple.__allocating_init(options:globals:)();
    v151 = &type metadata for AudioSessionManager;
    v152 = &protocol witness table for AudioSessionManager;
    v153 = &type metadata for EntitlementChecker;
    v154 = &protocol witness table for EntitlementChecker;
    uint64_t v149 = v78;
    v150 = &protocol witness table for AnswerCallCATsSimple;
    OUTLINED_FUNCTION_85_1(v79);
    specialized static PhoneCallFlowFactory.makeIncomingCallRCHFlow<A, B>(strategy:intent:app:sharedGlobals:)();
    OUTLINED_FUNCTION_90_0();
    outlined init with copy of SignalProviding((uint64_t)v145, v80);
    outlined init with copy of AnswerCallOutputStrategy((uint64_t)&v148, (uint64_t)v147);
    swift_retain();
    specialized IncomingCallFlow.__allocating_init(rchFlow:app:strategy:sharedGlobals:)();
    v147[0] = v81;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IncomingCallFlow<INAnswerCallIntent, INAnswerCallIntentResponse>);
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type IncomingCallFlow<INAnswerCallIntent, INAnswerCallIntentResponse> and conformance PhoneFlow<A, B>, &demangling cache variable for type metadata for IncomingCallFlow<INAnswerCallIntent, INAnswerCallIntentResponse>);
    Flow.eraseToAnyFlow()();

    outlined destroy of AnswerCallOutputStrategy((uint64_t)&v148);
LABEL_16:
    swift_release();
    goto LABEL_11;
  }
  self;
  if (OUTLINED_FUNCTION_72_2())
  {
    outlined init with copy of SignalProviding((uint64_t)v145, (uint64_t)&v148);
    type metadata accessor for HangUpCallRCHFlowDelegate();
    uint64_t v82 = OUTLINED_FUNCTION_21_0();
    outlined init with copy of SignalProviding((uint64_t)&v148, v82 + direct field offset for HangUpCallRCHFlowDelegate.sharedGlobals);
    id v83 = v5;
    BaseRCHFlowDelegate.init()();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v148);
    static PhoneCallFlowFactory.makeHangUpCallRCHFlow(delegate:intent:app:sharedGlobals:)();
    *(void *)&long long v148 = v84;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyValueFlow<RCHFlowResult<INHangUpCallIntent, INHangUpCallIntentResponse>>);
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AnyValueFlow<RCHFlowResult<INHangUpCallIntent, INHangUpCallIntentResponse>> and conformance AnyValueFlow<A>, &demangling cache variable for type metadata for AnyValueFlow<RCHFlowResult<INHangUpCallIntent, INHangUpCallIntentResponse>>);
    Flow.eraseToAnyFlow()();
    OUTLINED_FUNCTION_91_2();

    goto LABEL_16;
  }
  self;
  uint64_t v85 = OUTLINED_FUNCTION_72_2();
  if (v85)
  {
    uint64_t v86 = v85;
    uint64_t v87 = type metadata accessor for IdentifyIncomingCallerCATsSimple();
    id v88 = v5;
    static CATOption.defaultMode.getter();
    uint64_t v89 = CATWrapperSimple.__allocating_init(options:globals:)();
    uint64_t v149 = v87;
    v150 = &protocol witness table for IdentifyIncomingCallerCATsSimple;
    uint64_t v90 = OUTLINED_FUNCTION_85_1(v89);
    specialized static PhoneCallFlowFactory.makeIncomingCallRCHFlow<A, B>(strategy:intent:app:sharedGlobals:)(v90, v86, v146, v145);
    OUTLINED_FUNCTION_90_0();
    outlined init with copy of SignalProviding((uint64_t)v145, v91);
    outlined init with copy of IdentifyIncomingCallerOutputStrategy((uint64_t)&v148, (uint64_t)v147);
    swift_retain();
    uint64_t v92 = specialized IncomingCallFlow.__allocating_init(rchFlow:app:strategy:sharedGlobals:)(v87, v146, (uint64_t)v147, (uint64_t)&v155);
    outlined destroy of IdentifyIncomingCallerOutputStrategy((uint64_t)&v148);
    *(void *)&long long v148 = v92;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IncomingCallFlow<INIdentifyIncomingCallerIntent, INIdentifyIncomingCallerIntentResponse>);
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type IncomingCallFlow<INIdentifyIncomingCallerIntent, INIdentifyIncomingCallerIntentResponse> and conformance PhoneFlow<A, B>, &demangling cache variable for type metadata for IncomingCallFlow<INIdentifyIncomingCallerIntent, INIdentifyIncomingCallerIntentResponse>);
    Flow.eraseToAnyFlow()();
    swift_release();

    goto LABEL_11;
  }
  self;
  if (OUTLINED_FUNCTION_72_2())
  {
    type metadata accessor for StartCallRCHFlowDelegate();
    OUTLINED_FUNCTION_70_1();
    id v140 = v5;
    swift_retain();
    StartCallRCHFlowDelegate.__allocating_init(sharedGlobals:appResolved:)((uint64_t)&v148, v146);
    OUTLINED_FUNCTION_70_1();
    type metadata accessor for PhoneCallDisplayTextCATsSimple();
    static CATOption.defaultMode.getter();
    uint64_t v93 = CATWrapperSimple.__allocating_init(options:globals:)();
    type metadata accessor for StartCallCATsSimple();
    static CATOption.defaultMode.getter();
    uint64_t v94 = CATWrapperSimple.__allocating_init(options:globals:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CallingIntentRCHFlowStrategy<INStartCallIntent, INStartCallIntentResponse>);
    v95 = (void *)OUTLINED_FUNCTION_31_0();
    outlined init with take of AppSelectionSignalComponent(&v148, (uint64_t)(v95 + 2));
    v95[7] = v146;
    v95[8] = v93;
    v95[9] = v94;
    swift_retain();
    static PhoneCallFlowFactory.getStartCallProducers(skIntent:delegate:app:sharedGlobals:)();
    __swift_project_boxed_opaque_existential_1(v145, v145[3]);
    OUTLINED_FUNCTION_24_17();
    v96();
    v97 = v150;
    __swift_project_boxed_opaque_existential_1(&v148, v149);
    v147[0] = v95;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v124 + 16))(v131, v138 + *(int *)(v18 + 36), v133);
    uint64_t v61 = v138;
    OUTLINED_FUNCTION_41_5();
    v98();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowFactory<INStartCallIntent, INStartCallIntentResponse>);
    OUTLINED_FUNCTION_21_0();
    OUTLINED_FUNCTION_93_1();
    RCHChildFlowFactory.init(producers:withFallbacks:)();
    v99 = (uint64_t (*)(uint64_t))v97[1];
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type CallingIntentRCHFlowStrategy<INStartCallIntent, INStartCallIntentResponse> and conformance CallingIntentRCHFlowStrategy<A, B>, &demangling cache variable for type metadata for CallingIntentRCHFlowStrategy<INStartCallIntent, INStartCallIntentResponse>);
    uint64_t v100 = OUTLINED_FUNCTION_49_5();
    uint64_t v101 = v99(v100);
    swift_release();
    v147[0] = v101;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyValueFlow<RCHFlowResult<INStartCallIntent, INStartCallIntentResponse>>);
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type AnyValueFlow<RCHFlowResult<INStartCallIntent, INStartCallIntentResponse>> and conformance AnyValueFlow<A>, &demangling cache variable for type metadata for AnyValueFlow<RCHFlowResult<INStartCallIntent, INStartCallIntentResponse>>);
    Flow.eraseToAnyFlow()();
    OUTLINED_FUNCTION_91_2();

    swift_release();
    swift_release();
    v52 = &demangling cache variable for type metadata for PhoneCallFlowFactory.PhoneRCHFlowProducers<INStartCallIntent, INStartCallIntentResponse>;
LABEL_9:
    uint64_t v53 = v61;
LABEL_10:
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v53, v52);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v148);
    goto LABEL_11;
  }
  self;
  uint64_t v102 = OUTLINED_FUNCTION_72_2();
  if (v102)
  {
    uint64_t v141 = v102;
    OUTLINED_FUNCTION_70_1();
    uint64_t v103 = type metadata accessor for SearchCallHistoryRCHFlowDelegate();
    OUTLINED_FUNCTION_21_0();
    id v144 = v5;
    uint64_t v104 = SearchCallHistoryRCHFlowDelegate.init(sharedGlobals:)((uint64_t)&v148);
    specialized static PhoneCallFlowFactory.getProducers<A>(delegate:app:)(v104, v146, v123);
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v105 = type metadata accessor for Logger();
    __swift_project_value_buffer(v105, (uint64_t)static Logger.siriPhone);
    v106 = Logger.logObject.getter();
    os_log_type_t v107 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v106, v107))
    {
      v108 = (uint8_t *)OUTLINED_FUNCTION_7_2();
      *(_WORD *)v108 = 0;
      _os_log_impl(&dword_0, v106, v107, "#PhoneCallFlowFactory using Response Framework for INSearchCallHistoryIntent", v108, 2u);
      OUTLINED_FUNCTION_6();
    }

    outlined init with copy of SignalProviding((uint64_t)v145, (uint64_t)&v148);
    type metadata accessor for SearchCallHistoryCATsSimple();
    static CATOption.defaultMode.getter();
    CATWrapperSimple.__allocating_init(options:globals:)();
    OUTLINED_FUNCTION_62_0();
    type metadata accessor for SearchCallHistoryHandleFlowStrategy();
    swift_allocObject();
    *(void *)&long long v148 = SearchCallHistoryHandleFlowStrategy.init(sharedGlobals:searchCallHistoryCATsSimple:)();
    lazy protocol witness table accessor for type AddCallParticipantHandleIntentFlowStrategy and conformance AddCallParticipantHandleIntentFlowStrategy(&lazy protocol witness table cache variable for type SearchCallHistoryHandleFlowStrategy and conformance SearchCallHistoryHandleFlowStrategy, (void (*)(uint64_t))type metadata accessor for SearchCallHistoryHandleFlowStrategy);
    static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)();
    uint64_t v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducers<INSearchCallHistoryIntent, INSearchCallHistoryIntentResponse>);
    RCHChildFlowProducers.handleIntentFlowCompletion.setter();
    __swift_project_boxed_opaque_existential_1(v145, v145[3]);
    OUTLINED_FUNCTION_94_0();
    OUTLINED_FUNCTION_24_17();
    v110();
    uint64_t v111 = v149;
    v112 = v150;
    __swift_project_boxed_opaque_existential_1(&v148, v149);
    OUTLINED_FUNCTION_41_5();
    v113();
    __swift_storeEnumTagSinglePayload(v122, 0, 1, v109);
    v114 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _UNKNOWN **))v112[5];
    uint64_t v115 = lazy protocol witness table accessor for type AddCallParticipantHandleIntentFlowStrategy and conformance AddCallParticipantHandleIntentFlowStrategy(&lazy protocol witness table cache variable for type SearchCallHistoryRCHFlowDelegate and conformance BaseRCHFlowDelegate<A, B>, (void (*)(uint64_t))type metadata accessor for SearchCallHistoryRCHFlowDelegate);
    v114(v104, v146, v141, v122, v103, v115, v111, v112);
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v122, &demangling cache variable for type metadata for RCHChildFlowProducers<INSearchCallHistoryIntent, INSearchCallHistoryIntentResponse>?);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v148);
    type metadata accessor for SearchCallHistoryFlow(0);
    swift_retain();
    swift_retain();
    *(void *)&long long v148 = SearchCallHistoryFlow.__allocating_init(delegate:rchFlow:)();
    lazy protocol witness table accessor for type AddCallParticipantHandleIntentFlowStrategy and conformance AddCallParticipantHandleIntentFlowStrategy(&lazy protocol witness table cache variable for type SearchCallHistoryFlow and conformance SearchCallHistoryFlow, (void (*)(uint64_t))type metadata accessor for SearchCallHistoryFlow);
    Flow.eraseToAnyFlow()();
    OUTLINED_FUNCTION_94_0();
    swift_release();
    swift_release();
    swift_release();

    swift_release();
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v123, &demangling cache variable for type metadata for PhoneCallFlowFactory.PhoneRCHFlowProducers<INSearchCallHistoryIntent, INSearchCallHistoryIntentResponse>);
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v116 = type metadata accessor for Logger();
    __swift_project_value_buffer(v116, (uint64_t)static Logger.siriPhone);
    v117 = (void *)Logger.logObject.getter();
    os_log_type_t v118 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_14_2(v118))
    {
      *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
      OUTLINED_FUNCTION_24_1(&dword_0, v119, v120, "#PhoneCallFlowFactory Failed to retrieve a recognized phone domain SiriKitIntent");
      OUTLINED_FUNCTION_6();
    }
  }
LABEL_11:
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_26_1();
}

void *specialized CallingIntentContinueInAppFlow.init(factory:rchRecord:sharedGlobals:deviceStateConnection:)(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  v4[2] = a1;
  uint64_t v8 = (char *)v4 + *(void *)(*v4 + 112);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INStartCallIntent, INStartCallIntentResponse>);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8, a2, v9);
  outlined init with take of AppSelectionSignalComponent(a3, (uint64_t)v4 + *(void *)(*v4 + 120));
  *(void *)((char *)v4 + *(void *)(*v4 + 128)) = a4;
  return v4;
}

uint64_t specialized closure #1 in static CallingIntentContinueInAppFlow.makeProducer(sharedGlobals:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INStartCallIntent, INStartCallIntentResponse>);
  OUTLINED_FUNCTION_0_0();
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_5_1();
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v3, a2);
  outlined init with copy of SignalProviding(a3, (uint64_t)v13);
  id v9 = objc_allocWithZone((Class)AFDeviceStateConnection);
  swift_retain();
  id v10 = [v9 init];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CallingIntentContinueInAppFlow<INStartCallIntent, INStartCallIntentResponse>);
  OUTLINED_FUNCTION_21_0();
  *(void *)&v13[0] = specialized CallingIntentContinueInAppFlow.init(factory:rchRecord:sharedGlobals:deviceStateConnection:)(a1, v3, v13, (uint64_t)v10);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type CallingIntentContinueInAppFlow<INStartCallIntent, INStartCallIntentResponse> and conformance CallingIntentContinueInAppFlow<A, B>, &demangling cache variable for type metadata for CallingIntentContinueInAppFlow<INStartCallIntent, INStartCallIntentResponse>);
  uint64_t v11 = Flow.eraseToAnyFlow()();
  swift_release();
  return v11;
}

void static PhoneCallFlowFactoryProtocol.makeIncomingCallFlow<A, B>(strategy:intent:app:sharedGlobals:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  (*(void (**)(uint64_t))(a8 + 40))(a1);
  v15[0] = a6;
  v15[1] = a7;
  v15[2] = a9;
  v15[3] = a10;
  type metadata accessor for IncomingCallFlow();
  outlined init with copy of SignalProviding(a1, (uint64_t)v15);
  outlined init with copy of SignalProviding(a4, (uint64_t)v14);
  swift_retain();
  IncomingCallFlow.__allocating_init(rchFlow:app:strategy:sharedGlobals:)();
}

void static PhoneCallFlowFactory.makeMainFlow(parse:sharedGlobals:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v27 = v3;
  uint64_t v5 = type metadata accessor for MainFlow();
  uint64_t v6 = v5 - 8;
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_5_8();
  uint64_t v28 = v7;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v8);
  id v10 = (char *)&v27 - v9;
  uint64_t v11 = type metadata accessor for CATOption();
  uint64_t v12 = OUTLINED_FUNCTION_11_0(v11);
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_65_2();
  uint64_t v13 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v15 = v14;
  __chkstk_darwin(v16);
  OUTLINED_FUNCTION_11_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_469DA0;
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
  v18(v0, v4, v13);
  outlined init with copy of SignalProviding((uint64_t)v2, (uint64_t)&v30);
  uint64_t v19 = type metadata accessor for PhoneCallCommonCATsSimple();
  static CATOption.defaultMode.getter();
  CATWrapperSimple.__allocating_init(options:globals:)();
  OUTLINED_FUNCTION_62_0();
  type metadata accessor for RestrictionCheckGuardFlow();
  OUTLINED_FUNCTION_21_0();
  *(void *)&long long v30 = RestrictionCheckGuardFlow.init(parse:sharedGlobals:phoneCallCommonCATsSimple:)(v0, &v30, v19);
  lazy protocol witness table accessor for type AddCallParticipantHandleIntentFlowStrategy and conformance AddCallParticipantHandleIntentFlowStrategy(&lazy protocol witness table cache variable for type RestrictionCheckGuardFlow and conformance RestrictionCheckGuardFlow, (void (*)(uint64_t))type metadata accessor for RestrictionCheckGuardFlow);
  uint64_t v20 = Flow.eraseToAnyValueFlow()();
  swift_release();
  *(void *)(v17 + 32) = v20;
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  OUTLINED_FUNCTION_24_17();
  v21();
  uint64_t v22 = v31;
  uint64_t v23 = v32;
  __swift_project_boxed_opaque_existential_1(&v30, v31);
  *(void *)(v17 + 40) = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 88))(v22, v23);
  uint64_t v29 = v17;
  specialized Array._endMutation()();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v30);
  type metadata accessor for GuardFlow();
  OUTLINED_FUNCTION_21_0();
  GuardFlow.init(preconditionFlows:)();
  v18((uint64_t)v10, v27, v13);
  outlined init with copy of SignalProviding((uint64_t)v2, (uint64_t)&v10[*(int *)(v6 + 28)]);
  uint64_t v24 = v28;
  outlined init with copy of MainFlow((uint64_t)v10, v28);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SentinelConditionalFlow<()>);
  swift_allocObject();
  uint64_t v25 = swift_retain();
  uint64_t v26 = specialized SentinelConditionalFlow.init<A, B>(preconditionFlow:executableFlow:)(v25, v24);
  outlined destroy of MainFlow((uint64_t)v10);
  *(void *)&long long v30 = v26;
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type SentinelConditionalFlow<()> and conformance SentinelConditionalFlow<A>, &demangling cache variable for type metadata for SentinelConditionalFlow<()>);
  Flow.eraseToAnyFlow()();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_26_1();
}

uint64_t static PhoneCallFlowFactory.makeRCHFlow(input:app:intent:sharedGlobals:)()
{
  static PhoneCallFlowFactory.makeRCHFlow(app:intent:sharedGlobals:)();
  uint64_t v1 = v0;
  if (v0)
  {
    swift_retain();
    dispatch thunk of AnyFlow.on(input:)();
    swift_release();
  }
  return v1;
}

uint64_t specialized static PhoneCallFlowFactory.getGenericStartCallProducers<A>(delegate:app:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for CATOption();
  __chkstk_darwin(v6 - 8);
  specialized static PhoneCallFlowFactory.getProducers<A>(delegate:app:)(a1, a2, a3);
  outlined init with copy of SignalProviding(a1 + direct field offset for StartCallRCHFlowDelegate.sharedGlobals, (uint64_t)v40);
  outlined init with copy of SignalProviding((uint64_t)v40, (uint64_t)v39);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  outlined init with take of AppSelectionSignalComponent(v39, v7 + 24);
  swift_retain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallFlowFactory.PhoneRCHFlowProducers<INStartCallIntent, INStartCallIntentResponse>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INStartCallIntent, INStartCallIntentResponse>);
  RCHChildFlowProducersAsync.appResolutionBeforeNextResolveFlowProducer.setter();
  type metadata accessor for StartCallCATs();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v35 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for StartCallCATPatternsExecutor(0);
  static CATOption.defaultMode.getter();
  uint64_t v33 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for StartCallCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v31 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for PhoneCallCommonCATs();
  static CATOption.defaultMode.getter();
  uint64_t v29 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for PhoneCallCommonCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v8 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for PhoneCallCommonCATPatternsExecutor();
  static CATOption.defaultMode.getter();
  uint64_t v9 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for PhoneCallDisplayTextCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v10 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  uint64_t v11 = ResponseFactory.init()();
  static SiriKitEventSender.current.getter();
  type metadata accessor for AppInfoBuilder();
  uint64_t v12 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CallingIntentContactNeedsDisambiguationFlowStrategy<StartCallRCHFlowDelegate>);
  uint64_t v13 = swift_allocObject();
  v40[0] = specialized CallingIntentContactNeedsDisambiguationFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:startCallCATsSimple:phoneCallCommonCATs:phoneCallCommonCATsSimple:phoneCallCommonCatPatterns:phoneCallDisplayTextCATsSimple:responseGenerator:siriKitEventSender:appInfoBuilder:)(a1, v35, v33, v31, v29, v8, v9, v10, v11, v40, v12, v13, &direct field offset for StartCallRCHFlowDelegate.sharedGlobals);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type CallingIntentContactNeedsDisambiguationFlowStrategy<StartCallRCHFlowDelegate> and conformance CallingIntentContactNeedsDisambiguationFlowStrategy<A>, &demangling cache variable for type metadata for CallingIntentContactNeedsDisambiguationFlowStrategy<StartCallRCHFlowDelegate>);
  static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A>(strategy:)();
  swift_release();
  RCHChildFlowProducersAsync.needsDisambiguationFlowProducer.setter();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v36 = CATWrapper.__allocating_init(options:globals:)();
  static CATOption.defaultMode.getter();
  uint64_t v34 = CATWrapper.__allocating_init(options:globals:)();
  static CATOption.defaultMode.getter();
  uint64_t v32 = CATWrapperSimple.__allocating_init(options:globals:)();
  static CATOption.defaultMode.getter();
  uint64_t v30 = CATWrapper.__allocating_init(options:globals:)();
  static CATOption.defaultMode.getter();
  uint64_t v14 = CATWrapperSimple.__allocating_init(options:globals:)();
  static CATOption.defaultMode.getter();
  uint64_t v15 = CATWrapper.__allocating_init(options:globals:)();
  static CATOption.defaultMode.getter();
  uint64_t v16 = CATWrapperSimple.__allocating_init(options:globals:)();
  swift_allocObject();
  uint64_t v17 = ResponseFactory.init()();
  static SiriKitEventSender.current.getter();
  uint64_t v18 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CallingIntentConfirmationFlowStrategy<StartCallRCHFlowDelegate>);
  uint64_t v19 = swift_allocObject();
  v40[0] = specialized CallingIntentConfirmationFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:startCallCATsSimple:phoneCallCommonCATs:phoneCallCommonCATsSimple:phoneCallCommonCatPatterns:phoneCallDisplayTextCATsSimple:responseGenerator:siriKitEventSender:appInfoBuilder:)(a1, v36, v34, v32, v30, v14, v15, v16, v17, v40, v18, v19, &direct field offset for StartCallRCHFlowDelegate.sharedGlobals);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type CallingIntentConfirmationFlowStrategy<StartCallRCHFlowDelegate> and conformance CallingIntentConfirmationFlowStrategy<A>, &demangling cache variable for type metadata for CallingIntentConfirmationFlowStrategy<StartCallRCHFlowDelegate>);
  static RCHChildFlowFactoryHelper.makeNeedsConfirmationFlowProducer<A>(strategy:)();
  swift_release();
  RCHChildFlowProducersAsync.needsConfirmationFlowProducer.setter();
  swift_retain();
  RCHChildFlowProducersAsync.needsValueFlowProducer.setter();
  swift_retain();
  RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v38 = CATWrapper.__allocating_init(options:globals:)();
  static CATOption.defaultMode.getter();
  uint64_t v37 = CATWrapper.__allocating_init(options:globals:)();
  static CATOption.defaultMode.getter();
  uint64_t v20 = CATWrapperSimple.__allocating_init(options:globals:)();
  static CATOption.defaultMode.getter();
  uint64_t v21 = CATWrapper.__allocating_init(options:globals:)();
  static CATOption.defaultMode.getter();
  uint64_t v22 = CATWrapperSimple.__allocating_init(options:globals:)();
  static CATOption.defaultMode.getter();
  uint64_t v23 = CATWrapper.__allocating_init(options:globals:)();
  static CATOption.defaultMode.getter();
  uint64_t v24 = CATWrapperSimple.__allocating_init(options:globals:)();
  swift_allocObject();
  uint64_t v25 = ResponseFactory.init()();
  static SiriKitEventSender.current.getter();
  uint64_t v26 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CallingIntentHandleIntentFlowStrategy<StartCallRCHFlowDelegate>);
  uint64_t v27 = swift_allocObject();
  v40[0] = specialized CallingIntentHandleIntentFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:startCallCATsSimple:phoneCallCommonCATs:phoneCallCommonCATsSimple:phoneCallCommonCatPatterns:phoneCallDisplayTextCATsSimple:responseGenerator:siriKitEventSender:appInfoBuilder:)(a1, v38, v37, v20, v21, v22, v23, v24, v25, v40, v26, v27, &direct field offset for StartCallRCHFlowDelegate.sharedGlobals);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type CallingIntentHandleIntentFlowStrategy<StartCallRCHFlowDelegate> and conformance CallingIntentHandleIntentFlowStrategy<A>, &demangling cache variable for type metadata for CallingIntentHandleIntentFlowStrategy<StartCallRCHFlowDelegate>);
  static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducers<INStartCallIntent, INStartCallIntentResponse>);
  return RCHChildFlowProducers.handleIntentFlowCompletion.setter();
}

void specialized static PhoneCallFlowFactory.getGenericStartCallProducers<A>(delegate:app:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  OUTLINED_FUNCTION_24_0();
  a19 = v21;
  a20 = v22;
  uint64_t v23 = OUTLINED_FUNCTION_84_1();
  uint64_t v24 = OUTLINED_FUNCTION_11_0(v23);
  __chkstk_darwin(v24);
  uint64_t v25 = OUTLINED_FUNCTION_21_16();
  specialized static PhoneCallFlowFactory.getProducers<A>(delegate:app:)(v25, v26, v27);
  outlined init with copy of SignalProviding(v20 + direct field offset for StartAudioCallRCHFlowDelegate.sharedGlobals, (uint64_t)v41);
  outlined init with copy of SignalProviding((uint64_t)v41, (uint64_t)&v40);
  uint64_t v28 = OUTLINED_FUNCTION_60_1();
  OUTLINED_FUNCTION_88_1(v28);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallFlowFactory.PhoneRCHFlowProducers<INStartAudioCallIntent, INStartAudioCallIntentResponse>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INStartAudioCallIntent, INStartAudioCallIntentResponse>);
  RCHChildFlowProducersAsync.appResolutionBeforeNextResolveFlowProducer.setter();
  type metadata accessor for StartCallCATs();
  swift_retain();
  static CATOption.defaultMode.getter();
  OUTLINED_FUNCTION_28_10();
  uint64_t v29 = type metadata accessor for StartCallCATPatternsExecutor(0);
  OUTLINED_FUNCTION_82_1(v29);
  OUTLINED_FUNCTION_28_10();
  type metadata accessor for StartCallCATsSimple();
  static CATOption.defaultMode.getter();
  OUTLINED_FUNCTION_29_10();
  type metadata accessor for PhoneCallCommonCATs();
  static CATOption.defaultMode.getter();
  OUTLINED_FUNCTION_28_10();
  type metadata accessor for PhoneCallCommonCATsSimple();
  static CATOption.defaultMode.getter();
  OUTLINED_FUNCTION_29_10();
  type metadata accessor for PhoneCallCommonCATPatternsExecutor();
  static CATOption.defaultMode.getter();
  OUTLINED_FUNCTION_28_10();
  type metadata accessor for PhoneCallDisplayTextCATsSimple();
  static CATOption.defaultMode.getter();
  OUTLINED_FUNCTION_29_10();
  type metadata accessor for ResponseFactory();
  OUTLINED_FUNCTION_21_0();
  ResponseFactory.init()();
  OUTLINED_FUNCTION_46_6();
  type metadata accessor for AppInfoBuilder();
  OUTLINED_FUNCTION_18_17();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CallingIntentContactNeedsDisambiguationFlowStrategy<StartAudioCallRCHFlowDelegate>);
  uint64_t v30 = OUTLINED_FUNCTION_21_0();
  uint64_t v31 = OUTLINED_FUNCTION_7_36(v30, (uint64_t)&direct field offset for StartAudioCallRCHFlowDelegate.sharedGlobals);
  OUTLINED_FUNCTION_27_9(v31);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type CallingIntentContactNeedsDisambiguationFlowStrategy<StartAudioCallRCHFlowDelegate> and conformance CallingIntentContactNeedsDisambiguationFlowStrategy<A>, &demangling cache variable for type metadata for CallingIntentContactNeedsDisambiguationFlowStrategy<StartAudioCallRCHFlowDelegate>);
  static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A>(strategy:)();
  OUTLINED_FUNCTION_37_7();
  RCHChildFlowProducersAsync.needsDisambiguationFlowProducer.setter();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v32 = OUTLINED_FUNCTION_42_5();
  OUTLINED_FUNCTION_25_12(v32, (uint64_t)&a18);
  uint64_t v33 = OUTLINED_FUNCTION_38_9();
  OUTLINED_FUNCTION_25_12(v33, (uint64_t)&a17);
  uint64_t v34 = OUTLINED_FUNCTION_41_6();
  OUTLINED_FUNCTION_25_12(v34, (uint64_t)&a16);
  uint64_t v35 = OUTLINED_FUNCTION_44_7();
  OUTLINED_FUNCTION_25_12(v35, (uint64_t)&a15);
  OUTLINED_FUNCTION_40_6();
  static CATOption.defaultMode.getter();
  OUTLINED_FUNCTION_43_9();
  OUTLINED_FUNCTION_78_1();
  OUTLINED_FUNCTION_39_7();
  OUTLINED_FUNCTION_32_8();
  ResponseFactory.init()();
  OUTLINED_FUNCTION_46_6();
  OUTLINED_FUNCTION_18_17();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CallingIntentConfirmationFlowStrategy<StartAudioCallRCHFlowDelegate>);
  uint64_t v36 = OUTLINED_FUNCTION_21_0();
  uint64_t v37 = OUTLINED_FUNCTION_8_40(v36, (uint64_t)&direct field offset for StartAudioCallRCHFlowDelegate.sharedGlobals);
  OUTLINED_FUNCTION_27_9(v37);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type CallingIntentConfirmationFlowStrategy<StartAudioCallRCHFlowDelegate> and conformance CallingIntentConfirmationFlowStrategy<A>, &demangling cache variable for type metadata for CallingIntentConfirmationFlowStrategy<StartAudioCallRCHFlowDelegate>);
  static RCHChildFlowFactoryHelper.makeNeedsConfirmationFlowProducer<A>(strategy:)();
  OUTLINED_FUNCTION_37_7();
  OUTLINED_FUNCTION_99_0();
  swift_retain();
  RCHChildFlowProducersAsync.needsValueFlowProducer.setter();
  swift_retain();
  RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter();
  swift_retain();
  static CATOption.defaultMode.getter();
  OUTLINED_FUNCTION_42_5();
  static CATOption.defaultMode.getter();
  uint64_t v38 = OUTLINED_FUNCTION_38_9();
  OUTLINED_FUNCTION_82_1(v38);
  OUTLINED_FUNCTION_41_6();
  static CATOption.defaultMode.getter();
  OUTLINED_FUNCTION_44_7();
  OUTLINED_FUNCTION_78_1();
  OUTLINED_FUNCTION_40_6();
  static CATOption.defaultMode.getter();
  OUTLINED_FUNCTION_43_9();
  static CATOption.defaultMode.getter();
  OUTLINED_FUNCTION_39_7();
  OUTLINED_FUNCTION_32_8();
  ResponseFactory.init()();
  OUTLINED_FUNCTION_46_6();
  OUTLINED_FUNCTION_18_17();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CallingIntentHandleIntentFlowStrategy<StartAudioCallRCHFlowDelegate>);
  uint64_t v39 = OUTLINED_FUNCTION_21_0();
  v41[0] = OUTLINED_FUNCTION_14_17(v39, (uint64_t)&direct field offset for StartAudioCallRCHFlowDelegate.sharedGlobals);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type CallingIntentHandleIntentFlowStrategy<StartAudioCallRCHFlowDelegate> and conformance CallingIntentHandleIntentFlowStrategy<A>, &demangling cache variable for type metadata for CallingIntentHandleIntentFlowStrategy<StartAudioCallRCHFlowDelegate>);
  static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)();
  OUTLINED_FUNCTION_34_4();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducers<INStartAudioCallIntent, INStartAudioCallIntentResponse>);
  OUTLINED_FUNCTION_80_1();
  OUTLINED_FUNCTION_26_1();
}

{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void v41[6];

  OUTLINED_FUNCTION_24_0();
  a19 = v21;
  a20 = v22;
  uint64_t v23 = OUTLINED_FUNCTION_84_1();
  uint64_t v24 = OUTLINED_FUNCTION_11_0(v23);
  __chkstk_darwin(v24);
  uint64_t v25 = OUTLINED_FUNCTION_21_16();
  specialized static PhoneCallFlowFactory.getProducers<A>(delegate:app:)(v25, v26, v27);
  outlined init with copy of SignalProviding(v20 + direct field offset for StartVideoCallRCHFlowDelegate.sharedGlobals, (uint64_t)v41);
  outlined init with copy of SignalProviding((uint64_t)v41, (uint64_t)&v40);
  uint64_t v28 = OUTLINED_FUNCTION_60_1();
  OUTLINED_FUNCTION_88_1(v28);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallFlowFactory.PhoneRCHFlowProducers<INStartVideoCallIntent, INStartVideoCallIntentResponse>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INStartVideoCallIntent, INStartVideoCallIntentResponse>);
  RCHChildFlowProducersAsync.appResolutionBeforeNextResolveFlowProducer.setter();
  type metadata accessor for StartCallCATs();
  swift_retain();
  static CATOption.defaultMode.getter();
  OUTLINED_FUNCTION_28_10();
  uint64_t v29 = type metadata accessor for StartCallCATPatternsExecutor(0);
  OUTLINED_FUNCTION_82_1(v29);
  OUTLINED_FUNCTION_28_10();
  type metadata accessor for StartCallCATsSimple();
  static CATOption.defaultMode.getter();
  OUTLINED_FUNCTION_29_10();
  type metadata accessor for PhoneCallCommonCATs();
  static CATOption.defaultMode.getter();
  OUTLINED_FUNCTION_28_10();
  type metadata accessor for PhoneCallCommonCATsSimple();
  static CATOption.defaultMode.getter();
  OUTLINED_FUNCTION_29_10();
  type metadata accessor for PhoneCallCommonCATPatternsExecutor();
  static CATOption.defaultMode.getter();
  OUTLINED_FUNCTION_28_10();
  type metadata accessor for PhoneCallDisplayTextCATsSimple();
  static CATOption.defaultMode.getter();
  OUTLINED_FUNCTION_29_10();
  type metadata accessor for ResponseFactory();
  OUTLINED_FUNCTION_21_0();
  ResponseFactory.init()();
  OUTLINED_FUNCTION_46_6();
  type metadata accessor for AppInfoBuilder();
  OUTLINED_FUNCTION_18_17();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CallingIntentContactNeedsDisambiguationFlowStrategy<StartVideoCallRCHFlowDelegate>);
  uint64_t v30 = OUTLINED_FUNCTION_21_0();
  uint64_t v31 = OUTLINED_FUNCTION_7_36(v30, (uint64_t)&direct field offset for StartVideoCallRCHFlowDelegate.sharedGlobals);
  OUTLINED_FUNCTION_27_9(v31);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type CallingIntentContactNeedsDisambiguationFlowStrategy<StartVideoCallRCHFlowDelegate> and conformance CallingIntentContactNeedsDisambiguationFlowStrategy<A>, &demangling cache variable for type metadata for CallingIntentContactNeedsDisambiguationFlowStrategy<StartVideoCallRCHFlowDelegate>);
  static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A>(strategy:)();
  OUTLINED_FUNCTION_37_7();
  RCHChildFlowProducersAsync.needsDisambiguationFlowProducer.setter();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v32 = OUTLINED_FUNCTION_42_5();
  OUTLINED_FUNCTION_25_12(v32, (uint64_t)&a18);
  uint64_t v33 = OUTLINED_FUNCTION_38_9();
  OUTLINED_FUNCTION_25_12(v33, (uint64_t)&a17);
  uint64_t v34 = OUTLINED_FUNCTION_41_6();
  OUTLINED_FUNCTION_25_12(v34, (uint64_t)&a16);
  uint64_t v35 = OUTLINED_FUNCTION_44_7();
  OUTLINED_FUNCTION_25_12(v35, (uint64_t)&a15);
  OUTLINED_FUNCTION_40_6();
  static CATOption.defaultMode.getter();
  OUTLINED_FUNCTION_43_9();
  OUTLINED_FUNCTION_78_1();
  OUTLINED_FUNCTION_39_7();
  OUTLINED_FUNCTION_32_8();
  ResponseFactory.init()();
  OUTLINED_FUNCTION_46_6();
  OUTLINED_FUNCTION_18_17();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CallingIntentConfirmationFlowStrategy<StartVideoCallRCHFlowDelegate>);
  uint64_t v36 = OUTLINED_FUNCTION_21_0();
  uint64_t v37 = OUTLINED_FUNCTION_8_40(v36, (uint64_t)&direct field offset for StartVideoCallRCHFlowDelegate.sharedGlobals);
  OUTLINED_FUNCTION_27_9(v37);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type CallingIntentConfirmationFlowStrategy<StartVideoCallRCHFlowDelegate> and conformance CallingIntentConfirmationFlowStrategy<A>, &demangling cache variable for type metadata for CallingIntentConfirmationFlowStrategy<StartVideoCallRCHFlowDelegate>);
  static RCHChildFlowFactoryHelper.makeNeedsConfirmationFlowProducer<A>(strategy:)();
  OUTLINED_FUNCTION_37_7();
  OUTLINED_FUNCTION_99_0();
  swift_retain();
  RCHChildFlowProducersAsync.needsValueFlowProducer.setter();
  swift_retain();
  RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter();
  swift_retain();
  static CATOption.defaultMode.getter();
  OUTLINED_FUNCTION_42_5();
  static CATOption.defaultMode.getter();
  uint64_t v38 = OUTLINED_FUNCTION_38_9();
  OUTLINED_FUNCTION_82_1(v38);
  OUTLINED_FUNCTION_41_6();
  static CATOption.defaultMode.getter();
  OUTLINED_FUNCTION_44_7();
  OUTLINED_FUNCTION_78_1();
  OUTLINED_FUNCTION_40_6();
  static CATOption.defaultMode.getter();
  OUTLINED_FUNCTION_43_9();
  static CATOption.defaultMode.getter();
  OUTLINED_FUNCTION_39_7();
  OUTLINED_FUNCTION_32_8();
  ResponseFactory.init()();
  OUTLINED_FUNCTION_46_6();
  OUTLINED_FUNCTION_18_17();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CallingIntentHandleIntentFlowStrategy<StartVideoCallRCHFlowDelegate>);
  uint64_t v39 = OUTLINED_FUNCTION_21_0();
  v41[0] = OUTLINED_FUNCTION_14_17(v39, (uint64_t)&direct field offset for StartVideoCallRCHFlowDelegate.sharedGlobals);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type CallingIntentHandleIntentFlowStrategy<StartVideoCallRCHFlowDelegate> and conformance CallingIntentHandleIntentFlowStrategy<A>, &demangling cache variable for type metadata for CallingIntentHandleIntentFlowStrategy<StartVideoCallRCHFlowDelegate>);
  static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)();
  OUTLINED_FUNCTION_34_4();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducers<INStartVideoCallIntent, INStartVideoCallIntentResponse>);
  OUTLINED_FUNCTION_80_1();
  OUTLINED_FUNCTION_26_1();
}

uint64_t static PhoneCallFlowFactory.getGenericStartCallProducers<A>(delegate:app:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8 = *(void *)(a4 + 8);
  static PhoneCallFlowFactory.getProducers<A>(delegate:app:)(a1, a2, a3, v8, a5);
  uint64_t v75 = a1;
  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)(v8 + 8) + 8))(v76, a3);
  uint64_t v9 = OUTLINED_FUNCTION_7_14();
  uint64_t v12 = static PhoneCallFlowFactory.makeAppResolutionFlowBeforeNextResolveFlowProducer<A>(delegate:app:sharedGlobal:)(v9, v10, v11, a3, v8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v76);
  uint64_t v70 = OUTLINED_FUNCTION_77_0();
  OUTLINED_FUNCTION_77_0();
  type metadata accessor for PhoneCallFlowFactory.PhoneRCHFlowProducers();
  uint64_t v71 = type metadata accessor for RCHChildFlowProducersAsync();
  RCHChildFlowProducersAsync.appResolutionBeforeNextResolveFlowProducer.setter();
  OUTLINED_FUNCTION_67_1();
  type metadata accessor for CallingIntentContactNeedsDisambiguationFlowStrategy();
  swift_unknownObjectRetain();
  default argument 1 of CallingIntentUnsupportedValueFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:phoneCallCommonCATs:phoneCallCommonCatPatterns:startCallCatsSimple:phoneCallDisplayTextCATsSimple:siriKitEventSender:appInfoBuilder:)(a3, a4);
  OUTLINED_FUNCTION_51_3();
  default argument 5 of CallingIntentUnsupportedValueFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:phoneCallCommonCATs:phoneCallCommonCatPatterns:startCallCatsSimple:phoneCallDisplayTextCATsSimple:siriKitEventSender:appInfoBuilder:)(a3, a4);
  OUTLINED_FUNCTION_56_3();
  OUTLINED_FUNCTION_58_3();
  OUTLINED_FUNCTION_31_11();
  default argument 6 of CallingIntentUnsupportedValueFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:phoneCallCommonCATs:phoneCallCommonCatPatterns:startCallCatsSimple:phoneCallDisplayTextCATsSimple:siriKitEventSender:appInfoBuilder:)(a3, a4);
  OUTLINED_FUNCTION_76_0();
  uint64_t v13 = OUTLINED_FUNCTION_75_1();
  OUTLINED_FUNCTION_73_1(v13, v14, v15, v16, v17, v18, v19, v20);
  OUTLINED_FUNCTION_53_2();
  uint64_t v29 = CallingIntentContactNeedsDisambiguationFlowStrategy.__allocating_init(delegate:startCallCATs:startCallCatPatterns:startCallCATsSimple:phoneCallCommonCATs:phoneCallCommonCATsSimple:phoneCallCommonCatPatterns:phoneCallDisplayTextCATsSimple:responseGenerator:siriKitEventSender:appInfoBuilder:)(v21, v22, v23, v24, v25, v26, v27, v28, (uint64_t)v74, (uint64_t)v73, (uint64_t)v72);
  OUTLINED_FUNCTION_27_9((uint64_t)v29);
  swift_getWitnessTable();
  OUTLINED_FUNCTION_33_7();
  static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A>(strategy:)();
  OUTLINED_FUNCTION_61_3();
  RCHChildFlowProducersAsync.needsDisambiguationFlowProducer.setter();
  OUTLINED_FUNCTION_67_1();
  type metadata accessor for CallingIntentConfirmationFlowStrategy();
  swift_unknownObjectRetain();
  default argument 1 of CallingIntentUnsupportedValueFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:phoneCallCommonCATs:phoneCallCommonCatPatterns:startCallCatsSimple:phoneCallDisplayTextCATsSimple:siriKitEventSender:appInfoBuilder:)(a3, a4);
  OUTLINED_FUNCTION_51_3();
  default argument 5 of CallingIntentUnsupportedValueFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:phoneCallCommonCATs:phoneCallCommonCatPatterns:startCallCatsSimple:phoneCallDisplayTextCATsSimple:siriKitEventSender:appInfoBuilder:)(a3, a4);
  OUTLINED_FUNCTION_56_3();
  OUTLINED_FUNCTION_58_3();
  OUTLINED_FUNCTION_31_11();
  default argument 6 of CallingIntentUnsupportedValueFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:phoneCallCommonCATs:phoneCallCommonCatPatterns:startCallCatsSimple:phoneCallDisplayTextCATsSimple:siriKitEventSender:appInfoBuilder:)(a3, a4);
  OUTLINED_FUNCTION_76_0();
  uint64_t v30 = OUTLINED_FUNCTION_75_1();
  OUTLINED_FUNCTION_73_1(v30, v31, v32, v33, v34, v35, v36, v37);
  OUTLINED_FUNCTION_22_14();
  OUTLINED_FUNCTION_53_2();
  v46 = CallingIntentConfirmationFlowStrategy.__allocating_init(delegate:startCallCATs:startCallCatPatterns:startCallCATsSimple:phoneCallCommonCATs:phoneCallCommonCATsSimple:phoneCallCommonCatPatterns:phoneCallDisplayTextCATsSimple:responseGenerator:siriKitEventSender:appInfoBuilder:)(v38, v39, v40, v41, v42, v43, v44, v45, v64, v66, v68);
  OUTLINED_FUNCTION_27_9((uint64_t)v46);
  swift_getWitnessTable();
  static RCHChildFlowFactoryHelper.makeNeedsConfirmationFlowProducer<A>(strategy:)();
  OUTLINED_FUNCTION_61_3();
  RCHChildFlowProducersAsync.needsConfirmationFlowProducer.setter();
  v47 = (void *)swift_allocObject();
  OUTLINED_FUNCTION_87_0(v47);
  RCHChildFlowProducersAsync.needsValueFlowProducer.setter();
  v48 = (void *)swift_allocObject();
  OUTLINED_FUNCTION_87_0(v48);
  RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter();
  OUTLINED_FUNCTION_67_1();
  type metadata accessor for CallingIntentHandleIntentFlowStrategy();
  swift_unknownObjectRetain();
  uint64_t v49 = default argument 1 of CallingIntentUnsupportedValueFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:phoneCallCommonCATs:phoneCallCommonCatPatterns:startCallCatsSimple:phoneCallDisplayTextCATsSimple:siriKitEventSender:appInfoBuilder:)(a3, a4);
  OUTLINED_FUNCTION_51_3();
  default argument 5 of CallingIntentUnsupportedValueFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:phoneCallCommonCATs:phoneCallCommonCatPatterns:startCallCatsSimple:phoneCallDisplayTextCATsSimple:siriKitEventSender:appInfoBuilder:)(a3, a4);
  OUTLINED_FUNCTION_56_3();
  OUTLINED_FUNCTION_58_3();
  OUTLINED_FUNCTION_31_11();
  uint64_t v50 = default argument 6 of CallingIntentUnsupportedValueFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:phoneCallCommonCATs:phoneCallCommonCatPatterns:startCallCatsSimple:phoneCallDisplayTextCATsSimple:siriKitEventSender:appInfoBuilder:)(a3, a4);
  OUTLINED_FUNCTION_76_0();
  uint64_t v51 = OUTLINED_FUNCTION_75_1();
  OUTLINED_FUNCTION_73_1(v51, v52, v53, v54, v55, v56, v57, v58);
  uint64_t v59 = OUTLINED_FUNCTION_22_14();
  uint64_t v62 = CallingIntentHandleIntentFlowStrategy.__allocating_init(delegate:startCallCATs:startCallCatPatterns:startCallCATsSimple:phoneCallCommonCATs:phoneCallCommonCATsSimple:phoneCallCommonCatPatterns:phoneCallDisplayTextCATsSimple:responseGenerator:siriKitEventSender:appInfoBuilder:)(v59, v49, v60, (uint64_t)v12, v70, v71, v61, v50, v65, v67, v69);
  OUTLINED_FUNCTION_27_9((uint64_t)v62);
  swift_getWitnessTable();
  OUTLINED_FUNCTION_33_7();
  static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)();
  swift_release();
  type metadata accessor for RCHChildFlowProducers();
  return RCHChildFlowProducers.handleIntentFlowCompletion.setter();
}

void static PhoneCallFlowFactory.makeHangUpCallRCHFlow(delegate:intent:app:sharedGlobals:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v2 = (uint64_t)v1;
  uint64_t v31 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducers<INHangUpCallIntent, INHangUpCallIntentResponse>);
  OUTLINED_FUNCTION_0_0();
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_3_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INHangUpCallIntent, INHangUpCallIntentResponse>);
  OUTLINED_FUNCTION_0_0();
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_3_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallFlowFactory.PhoneRCHFlowProducers<INHangUpCallIntent, INHangUpCallIntentResponse>);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_48_0();
  uint64_t v12 = type metadata accessor for CATOption();
  uint64_t v13 = OUTLINED_FUNCTION_11_0(v12);
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_65_0();
  uint64_t v34 = v6;
  char v32 = dispatch thunk of BaseRCHFlowDelegate.canUseServerTTS(intent:)();
  uint64_t v14 = dispatch thunk of BaseRCHFlowDelegate.makeDialogTemplating()();
  uint64_t v36 = dispatch thunk of BaseRCHFlowDelegate.makeNLContextProvider()();
  uint64_t v35 = dispatch thunk of BaseRCHFlowDelegate.makeAceViewProvider()();
  outlined init with copy of SignalProviding(v2, (uint64_t)&v38);
  type metadata accessor for HangUpCallCATsSimple();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v15 = CATWrapperSimple.__allocating_init(options:globals:)();
  uint64_t v16 = type metadata accessor for ResponseFactory();
  uint64_t v17 = OUTLINED_FUNCTION_21_0();
  ResponseFactory.init()();
  OUTLINED_FUNCTION_62_0();
  uint64_t v33 = type metadata accessor for HangUpCallIntentRCHFlowStrategy();
  uint64_t v18 = (void *)swift_allocObject();
  v18[12] = v16;
  v18[13] = &protocol witness table for ResponseFactory;
  v18[9] = v17;
  v18[2] = v4;
  outlined init with take of AppSelectionSignalComponent(&v38, (uint64_t)(v18 + 3));
  v18[8] = v15;
  specialized static PhoneCallFlowFactory.getProducers<A>(delegate:app:)(v8, v4, v0);
  outlined init with copy of SignalProviding((uint64_t)v31, (uint64_t)&v38);
  swift_retain();
  swift_retain();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v19 = CATWrapperSimple.__allocating_init(options:globals:)();
  swift_allocObject();
  uint64_t v20 = ResponseFactory.init()();
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  uint64_t v21 = (void *)static BiomeEventSender.instance;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InCallActionHandleIntentFlowStrategy<INHangUpCallIntent, INHangUpCallIntentResponse>);
  uint64_t v22 = OUTLINED_FUNCTION_21_0();
  *(void *)&long long v38 = specialized InCallActionHandleIntentFlowStrategy.init(sharedGlobals:phoneCallBaseCatTemplatingService:aceViewProvider:nlContextProvider:canUseServerTTS:shouldShowDialogAfterIntentHandled:hangUpCallCATsSimple:responseGenerator:biomeEventSender:)(&v38, v14, v35, v36, v32 & 1, 0, v19, v20, (uint64_t)v21, v22);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type InCallActionHandleIntentFlowStrategy<INHangUpCallIntent, INHangUpCallIntentResponse> and conformance InCallActionHandleIntentFlowStrategy<A, B>, &demangling cache variable for type metadata for InCallActionHandleIntentFlowStrategy<INHangUpCallIntent, INHangUpCallIntentResponse>);
  static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)();
  OUTLINED_FUNCTION_34_4();
  RCHChildFlowProducers.handleIntentFlowCompletion.setter();
  __swift_project_boxed_opaque_existential_1(v31, v31[3]);
  OUTLINED_FUNCTION_24_17();
  v23();
  uint64_t v24 = v39;
  uint64_t v25 = v40;
  __swift_project_boxed_opaque_existential_1(&v38, v39);
  uint64_t v37 = v18;
  OUTLINED_FUNCTION_41_5();
  v26();
  OUTLINED_FUNCTION_41_5();
  v27();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowFactory<INHangUpCallIntent, INHangUpCallIntentResponse>);
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_94_0();
  uint64_t v28 = RCHChildFlowFactory.init(producers:withFallbacks:)();
  uint64_t v29 = *(void (**)(void **, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 8);
  uint64_t v30 = lazy protocol witness table accessor for type AddCallParticipantHandleIntentFlowStrategy and conformance AddCallParticipantHandleIntentFlowStrategy(&lazy protocol witness table cache variable for type HangUpCallIntentRCHFlowStrategy and conformance HangUpCallIntentRCHFlowStrategy, (void (*)(uint64_t))type metadata accessor for HangUpCallIntentRCHFlowStrategy);
  v29(&v37, v28, v4, v34, v33, v30, v24, v25);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v0, &demangling cache variable for type metadata for PhoneCallFlowFactory.PhoneRCHFlowProducers<INHangUpCallIntent, INHangUpCallIntentResponse>);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_26_1();
}

void static PhoneCallFlowFactory.getStartCallProducers(skIntent:delegate:app:sharedGlobals:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  v95 = v7;
  uint64_t v9 = v8;
  uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducers<INStartCallIntent, INStartCallIntentResponse>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v87 = v10;
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_3_1();
  uint64_t v90 = v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INStartCallIntent, INStartCallIntentResponse>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v85 = v14;
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_3_1();
  uint64_t v86 = v16;
  uint64_t v17 = type metadata accessor for ResponseMode();
  OUTLINED_FUNCTION_0_0();
  uint64_t v84 = v18;
  __chkstk_darwin(v19);
  OUTLINED_FUNCTION_3_1();
  uint64_t v83 = v20;
  uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ResponseMode?, ResponseMode?));
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v21);
  OUTLINED_FUNCTION_53();
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseMode?);
  uint64_t v23 = OUTLINED_FUNCTION_11_0(v22);
  __chkstk_darwin(v23);
  OUTLINED_FUNCTION_5_8();
  uint64_t v94 = v24;
  OUTLINED_FUNCTION_18_0();
  uint64_t v26 = __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v82 - v27;
  __chkstk_darwin(v26);
  uint64_t v30 = (char *)&v82 - v29;
  specialized static PhoneCallFlowFactory.getGenericStartCallProducers<A>(delegate:app:)(v6, v4, v9);
  outlined init with copy of SignalProviding((uint64_t)v2, (uint64_t)v100);
  uint64_t v31 = swift_allocObject();
  OUTLINED_FUNCTION_83(v31);
  uint64_t v32 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallFlowFactory.PhoneRCHFlowProducers<INStartCallIntent, INStartCallIntentResponse>)
               + 36);
  uint64_t v89 = v9;
  uint64_t v33 = v9 + v32;
  RCHChildFlowProducersAsync.continueInAppFlowProducer.setter();
  outlined init with copy of SignalProviding((uint64_t)v2, (uint64_t)v100);
  uint64_t v34 = OUTLINED_FUNCTION_60_1();
  OUTLINED_FUNCTION_83(v34);
  *(void *)(v34 + 56) = v6;
  swift_retain();
  uint64_t v91 = v13;
  uint64_t v92 = v33;
  RCHChildFlowProducersAsync.confirmIntentFlowProducer.setter();
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  uint64_t v35 = OUTLINED_FUNCTION_36_9();
  uint64_t v37 = v36(v35);
  LOBYTE(v13) = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 136))(v37);
  swift_release();
  outlined init with copy of SignalProviding((uint64_t)v2, (uint64_t)v100);
  if (v13)
  {
    __swift_project_boxed_opaque_existential_1(v100, v100[3]);
    uint64_t v38 = OUTLINED_FUNCTION_92_1();
    v39(v38);
    __swift_project_boxed_opaque_existential_1(&v98, v99);
    uint64_t v40 = OUTLINED_FUNCTION_92_1();
    v41(v40);
    os_log_type_t v42 = v97;
    __swift_project_boxed_opaque_existential_1(v96, v97);
    uint64_t v43 = OUTLINED_FUNCTION_36_9();
    char v45 = v44(v43);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v96);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v98);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v100);
    if (v45)
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v46 = type metadata accessor for Logger();
      __swift_project_value_buffer(v46, (uint64_t)static Logger.siriPhone);
      v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_14_2(v48))
      {
        uint64_t v49 = (uint8_t *)OUTLINED_FUNCTION_7_2();
        *(_WORD *)uint64_t v49 = 0;
        _os_log_impl(&dword_0, v47, v42, "#PhoneCallFlowFactory: detected ongoing call, adding RCHChildFlowProducers for ongoing call", v49, 2u);
        OUTLINED_FUNCTION_6();
      }

      static OngoingCallFlowProducers.overrideStartCallProducers(producers:delegate:sharedGlobals:)(v92, v6, (uint64_t)v2);
    }
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v100);
  }
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  uint64_t v50 = OUTLINED_FUNCTION_36_9();
  if (v51(v50))
  {
    CurrentRequest.responseMode.getter();
    swift_release();
    uint64_t v52 = 0;
  }
  else
  {
    uint64_t v52 = 1;
  }
  uint64_t v53 = v94;
  __swift_storeEnumTagSinglePayload((uint64_t)v30, v52, 1, v17);
  static ResponseMode.voiceOnly.getter();
  __swift_storeEnumTagSinglePayload((uint64_t)v28, 0, 1, v17);
  uint64_t v54 = v0 + *(int *)(v93 + 48);
  outlined init with copy of ResponseMode?((uint64_t)v30, v0);
  outlined init with copy of ResponseMode?((uint64_t)v28, v54);
  OUTLINED_FUNCTION_81_1(v0);
  if (!v56)
  {
    outlined init with copy of ResponseMode?(v0, v53);
    OUTLINED_FUNCTION_81_1(v54);
    if (!v56)
    {
      uint64_t v57 = v84;
      uint64_t v58 = v83;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v84 + 32))(v83, v54, v17);
      lazy protocol witness table accessor for type AddCallParticipantHandleIntentFlowStrategy and conformance AddCallParticipantHandleIntentFlowStrategy((unint64_t *)&lazy protocol witness table cache variable for type ResponseMode and conformance ResponseMode, (void (*)(uint64_t))&type metadata accessor for ResponseMode);
      char v59 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v60 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
      v60(v58, v17);
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v28, &demangling cache variable for type metadata for ResponseMode?);
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v30, &demangling cache variable for type metadata for ResponseMode?);
      v60(v53, v17);
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v0, &demangling cache variable for type metadata for ResponseMode?);
      uint64_t v55 = v95;
      if ((v59 & 1) == 0) {
        goto LABEL_28;
      }
      goto LABEL_22;
    }
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v28, &demangling cache variable for type metadata for ResponseMode?);
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v30, &demangling cache variable for type metadata for ResponseMode?);
    (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v53, v17);
LABEL_20:
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v0, &demangling cache variable for type metadata for (ResponseMode?, ResponseMode?));
    uint64_t v55 = v95;
    goto LABEL_28;
  }
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v28, &demangling cache variable for type metadata for ResponseMode?);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v30, &demangling cache variable for type metadata for ResponseMode?);
  OUTLINED_FUNCTION_81_1(v54);
  if (!v56) {
    goto LABEL_20;
  }
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v0, &demangling cache variable for type metadata for ResponseMode?);
  uint64_t v55 = v95;
LABEL_22:
  if (static EmergencyUtils.requiresEmergencyConfirmation(intent:intentResponse:)(v55, 0))
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v61 = type metadata accessor for Logger();
    __swift_project_value_buffer(v61, (uint64_t)static Logger.siriPhone);
    uint64_t v62 = (void *)Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_14_2(v63))
    {
      *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
      OUTLINED_FUNCTION_24_1(&dword_0, v64, v65, "#PhoneCallFlowFactory making confirmation producer for voice only emergency call request");
      OUTLINED_FUNCTION_6();
    }

    outlined init with copy of SignalProviding((uint64_t)v2, (uint64_t)&v98);
    uint64_t v66 = OUTLINED_FUNCTION_60_1();
    outlined init with take of AppSelectionSignalComponent(&v98, v66 + 16);
    *(void *)(v66 + 56) = v55;
    id v67 = v55;
    RCHChildFlowProducersAsync.confirmIntentFlowProducer.setter();
  }
LABEL_28:
  if ([v55 preferredCallProvider] == (char *)&dword_0 + 2)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v68 = type metadata accessor for Logger();
    __swift_project_value_buffer(v68, (uint64_t)static Logger.siriPhone);
    uint64_t v69 = v55;
    uint64_t v70 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v70, v71))
    {
      v72 = (uint8_t *)swift_slowAlloc();
      uint64_t v73 = (void *)swift_slowAlloc();
      *(_DWORD *)v72 = 138412290;
      *(void *)&long long v98 = v69;
      uint64_t v74 = v69;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v73 = v69;

      _os_log_impl(&dword_0, v70, v71, "#PhoneCallFlowFactory Received FaceTime request for intent: %@", v72, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {

      uint64_t v70 = v69;
    }

    uint64_t v76 = RCHChildFlowProducersAsync.confirmIntentFlowProducer.getter();
    if (v76) {
      uint64_t v77 = v75;
    }
    else {
      uint64_t v77 = 0;
    }
    OUTLINED_FUNCTION_41_5();
    v78();
    OUTLINED_FUNCTION_41_5();
    v79();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowFactory<INStartCallIntent, INStartCallIntentResponse>);
    OUTLINED_FUNCTION_21_0();
    OUTLINED_FUNCTION_35_11();
    uint64_t v80 = RCHChildFlowFactory.init(producers:withFallbacks:)();
    outlined init with copy of SignalProviding((uint64_t)v2, (uint64_t)&v98);
    uint64_t v81 = (void *)OUTLINED_FUNCTION_31_0();
    outlined init with take of AppSelectionSignalComponent(&v98, (uint64_t)(v81 + 2));
    v81[7] = v76;
    v81[8] = v77;
    v81[9] = v80;
    RCHChildFlowProducersAsync.confirmIntentFlowProducer.setter();
  }
  OUTLINED_FUNCTION_26_1();
}

uint64_t specialized static PhoneCallFlowFactory.getProducers<A>(delegate:app:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v24 = a3;
  uint64_t v25 = a2;
  uint64_t v4 = type metadata accessor for CATOption();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducers<INHangUpCallIntent, INHangUpCallIntentResponse>);
  uint64_t v26 = *(void *)(v5 - 8);
  uint64_t v27 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1 + direct field offset for HangUpCallRCHFlowDelegate.sharedGlobals;
  uint64_t v9 = *(void *)(a1 + direct field offset for HangUpCallRCHFlowDelegate.sharedGlobals + 24);
  uint64_t v10 = *(void *)(a1 + direct field offset for HangUpCallRCHFlowDelegate.sharedGlobals + 32);
  __swift_project_boxed_opaque_existential_1((void *)(a1 + direct field offset for HangUpCallRCHFlowDelegate.sharedGlobals), v9);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v10 + 104))(v28, v9, v10);
  uint64_t v12 = v29;
  uint64_t v11 = v30;
  __swift_project_boxed_opaque_existential_1(v28, v29);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
  uint64_t v14 = type metadata accessor for HangUpCallRCHFlowDelegate();
  uint64_t v15 = lazy protocol witness table accessor for type AddCallParticipantHandleIntentFlowStrategy and conformance AddCallParticipantHandleIntentFlowStrategy(&lazy protocol witness table cache variable for type HangUpCallRCHFlowDelegate and conformance BaseRCHFlowDelegate<A, B>, (void (*)(uint64_t))type metadata accessor for HangUpCallRCHFlowDelegate);
  v13(a1, v14, v15, v12, v11);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallFlowFactory.PhoneRCHFlowProducers<INHangUpCallIntent, INHangUpCallIntentResponse>);
  uint64_t v16 = v24;
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INHangUpCallIntent);
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for INHangUpCallIntentResponse);
  RCHChildFlowProducersAsync.init()();
  static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B>(app:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INHangUpCallIntent, INHangUpCallIntentResponse>);
  RCHChildFlowProducersAsync.appResolutionFlowProducer.setter();
  outlined init with copy of SignalProviding(v8, (uint64_t)v28);
  type metadata accessor for PhoneCallCommonCATs();
  static CATOption.defaultMode.getter();
  uint64_t v17 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for PhoneCallCommonCATPatternsExecutor();
  static CATOption.defaultMode.getter();
  uint64_t v18 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for AppInfoBuilder();
  uint64_t v19 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneTCCFlowStrategy<INHangUpCallIntent, INHangUpCallIntentResponse>);
  uint64_t v20 = swift_allocObject();
  specialized PhoneTCCFlowStrategy.init(sharedGlobals:phoneCallCommonCats:phoneCallCommonCatPatterns:labelTemplatesProvider:tccTemplatesProvider:appInfoBuilder:)((uint64_t)v28, v17, v18, 0, 0, 0, 0, v19, v20, (uint64_t)specialized PhoneCallStrategy.init(catFamily:catPatternFamily:responseGenerator:appInfoBuilder:deviceState:), v23, v24, v25, v26, v27, v28[0], v28[1], v28[2], v29,
    v30,
    v31,
    v32);
  v28[0] = v21;
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type PhoneTCCFlowStrategy<INHangUpCallIntent, INHangUpCallIntentResponse> and conformance PhoneTCCFlowStrategy<A, B>, &demangling cache variable for type metadata for PhoneTCCFlowStrategy<INHangUpCallIntent, INHangUpCallIntentResponse>);
  static RCHChildFlowFactoryHelper.makeRequestTCCAcceptanceFlow<A, B>(strategy:)();
  swift_release();
  RCHChildFlowProducersAsync.requestTCCAcceptanceFlowProducer.setter();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(v16, v7, v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[3];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t *, uint64_t *, uint64_t *, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _UNKNOWN **, _UNKNOWN **);

  uint64_t v24 = a3;
  uint64_t v25 = a2;
  uint64_t v4 = type metadata accessor for CATOption();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducers<INStartCallIntent, INStartCallIntentResponse>);
  uint64_t v26 = *(void *)(v5 - 8);
  uint64_t v27 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1 + direct field offset for StartCallRCHFlowDelegate.sharedGlobals;
  uint64_t v9 = *(void *)(a1 + direct field offset for StartCallRCHFlowDelegate.sharedGlobals + 24);
  uint64_t v10 = *(void *)(a1 + direct field offset for StartCallRCHFlowDelegate.sharedGlobals + 32);
  __swift_project_boxed_opaque_existential_1((void *)(a1 + direct field offset for StartCallRCHFlowDelegate.sharedGlobals), v9);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v10 + 104))(v28, v9, v10);
  uint64_t v12 = v29;
  uint64_t v11 = v30;
  __swift_project_boxed_opaque_existential_1(v28, v29);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
  uint64_t v14 = type metadata accessor for StartCallRCHFlowDelegate();
  uint64_t v15 = lazy protocol witness table accessor for type AddCallParticipantHandleIntentFlowStrategy and conformance AddCallParticipantHandleIntentFlowStrategy(&lazy protocol witness table cache variable for type StartCallRCHFlowDelegate and conformance BaseRCHFlowDelegate<A, B>, (void (*)(uint64_t))type metadata accessor for StartCallRCHFlowDelegate);
  v13(a1, v14, v15, v12, v11);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallFlowFactory.PhoneRCHFlowProducers<INStartCallIntent, INStartCallIntentResponse>);
  uint64_t v16 = v24;
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INStartCallIntent);
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for INStartCallIntentResponse);
  RCHChildFlowProducersAsync.init()();
  static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B>(app:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INStartCallIntent, INStartCallIntentResponse>);
  RCHChildFlowProducersAsync.appResolutionFlowProducer.setter();
  outlined init with copy of SignalProviding(v8, (uint64_t)v28);
  type metadata accessor for PhoneCallCommonCATs();
  static CATOption.defaultMode.getter();
  uint64_t v17 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for PhoneCallCommonCATPatternsExecutor();
  static CATOption.defaultMode.getter();
  uint64_t v18 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for AppInfoBuilder();
  uint64_t v19 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneTCCFlowStrategy<INStartCallIntent, INStartCallIntentResponse>);
  uint64_t v20 = swift_allocObject();
  specialized PhoneTCCFlowStrategy.init(sharedGlobals:phoneCallCommonCats:phoneCallCommonCatPatterns:labelTemplatesProvider:tccTemplatesProvider:appInfoBuilder:)((uint64_t)v28, v17, v18, 0, 0, 0, 0, v19, v20, (uint64_t)specialized PhoneCallStrategy.init(catFamily:catPatternFamily:responseGenerator:appInfoBuilder:deviceState:), v23, v24, v25, v26, v27, v28[0], v28[1], v28[2], v29,
    v30,
    v31,
    v32);
  v28[0] = v21;
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type PhoneTCCFlowStrategy<INStartCallIntent, INStartCallIntentResponse> and conformance PhoneTCCFlowStrategy<A, B>, &demangling cache variable for type metadata for PhoneTCCFlowStrategy<INStartCallIntent, INStartCallIntentResponse>);
  static RCHChildFlowFactoryHelper.makeRequestTCCAcceptanceFlow<A, B>(strategy:)();
  swift_release();
  RCHChildFlowProducersAsync.requestTCCAcceptanceFlowProducer.setter();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(v16, v7, v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[3];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t *, uint64_t *, uint64_t *, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _UNKNOWN **, _UNKNOWN **);

  uint64_t v24 = a3;
  uint64_t v25 = a2;
  uint64_t v4 = type metadata accessor for CATOption();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducers<INSearchCallHistoryIntent, INSearchCallHistoryIntentResponse>);
  uint64_t v26 = *(void *)(v5 - 8);
  uint64_t v27 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1 + direct field offset for SearchCallHistoryRCHFlowDelegate.sharedGlobals;
  uint64_t v9 = *(void *)(a1 + direct field offset for SearchCallHistoryRCHFlowDelegate.sharedGlobals + 24);
  uint64_t v10 = *(void *)(a1 + direct field offset for SearchCallHistoryRCHFlowDelegate.sharedGlobals + 32);
  __swift_project_boxed_opaque_existential_1((void *)(a1 + direct field offset for SearchCallHistoryRCHFlowDelegate.sharedGlobals), v9);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v10 + 104))(v28, v9, v10);
  uint64_t v12 = v29;
  uint64_t v11 = v30;
  __swift_project_boxed_opaque_existential_1(v28, v29);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
  uint64_t v14 = type metadata accessor for SearchCallHistoryRCHFlowDelegate();
  uint64_t v15 = lazy protocol witness table accessor for type AddCallParticipantHandleIntentFlowStrategy and conformance AddCallParticipantHandleIntentFlowStrategy(&lazy protocol witness table cache variable for type SearchCallHistoryRCHFlowDelegate and conformance BaseRCHFlowDelegate<A, B>, (void (*)(uint64_t))type metadata accessor for SearchCallHistoryRCHFlowDelegate);
  v13(a1, v14, v15, v12, v11);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallFlowFactory.PhoneRCHFlowProducers<INSearchCallHistoryIntent, INSearchCallHistoryIntentResponse>);
  uint64_t v16 = v24;
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for INSearchCallHistoryIntent);
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for INSearchCallHistoryIntentResponse);
  RCHChildFlowProducersAsync.init()();
  static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B>(app:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INSearchCallHistoryIntent, INSearchCallHistoryIntentResponse>);
  RCHChildFlowProducersAsync.appResolutionFlowProducer.setter();
  outlined init with copy of SignalProviding(v8, (uint64_t)v28);
  type metadata accessor for PhoneCallCommonCATs();
  static CATOption.defaultMode.getter();
  uint64_t v17 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for PhoneCallCommonCATPatternsExecutor();
  static CATOption.defaultMode.getter();
  uint64_t v18 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for AppInfoBuilder();
  uint64_t v19 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneTCCFlowStrategy<INSearchCallHistoryIntent, INSearchCallHistoryIntentResponse>);
  uint64_t v20 = swift_allocObject();
  specialized PhoneTCCFlowStrategy.init(sharedGlobals:phoneCallCommonCats:phoneCallCommonCatPatterns:labelTemplatesProvider:tccTemplatesProvider:appInfoBuilder:)((uint64_t)v28, v17, v18, 0, 0, 0, 0, v19, v20, (uint64_t)specialized PhoneCallStrategy.init(catFamily:catPatternFamily:responseGenerator:appInfoBuilder:deviceState:), v23, v24, v25, v26, v27, v28[0], v28[1], v28[2], v29,
    v30,
    v31,
    v32);
  v28[0] = v21;
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type PhoneTCCFlowStrategy<INSearchCallHistoryIntent, INSearchCallHistoryIntentResponse> and conformance PhoneTCCFlowStrategy<A, B>, &demangling cache variable for type metadata for PhoneTCCFlowStrategy<INSearchCallHistoryIntent, INSearchCallHistoryIntentResponse>);
  static RCHChildFlowFactoryHelper.makeRequestTCCAcceptanceFlow<A, B>(strategy:)();
  swift_release();
  RCHChildFlowProducersAsync.requestTCCAcceptanceFlowProducer.setter();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(v16, v7, v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[3];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t *, uint64_t *, uint64_t *, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _UNKNOWN **, _UNKNOWN **);

  uint64_t v24 = a3;
  uint64_t v25 = a2;
  uint64_t v4 = type metadata accessor for CATOption();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducers<INStartVideoCallIntent, INStartVideoCallIntentResponse>);
  uint64_t v26 = *(void *)(v5 - 8);
  uint64_t v27 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1 + direct field offset for StartVideoCallRCHFlowDelegate.sharedGlobals;
  uint64_t v9 = *(void *)(a1 + direct field offset for StartVideoCallRCHFlowDelegate.sharedGlobals + 24);
  uint64_t v10 = *(void *)(a1 + direct field offset for StartVideoCallRCHFlowDelegate.sharedGlobals + 32);
  __swift_project_boxed_opaque_existential_1((void *)(a1 + direct field offset for StartVideoCallRCHFlowDelegate.sharedGlobals), v9);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v10 + 104))(v28, v9, v10);
  uint64_t v12 = v29;
  uint64_t v11 = v30;
  __swift_project_boxed_opaque_existential_1(v28, v29);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
  uint64_t v14 = type metadata accessor for StartVideoCallRCHFlowDelegate();
  uint64_t v15 = lazy protocol witness table accessor for type AddCallParticipantHandleIntentFlowStrategy and conformance AddCallParticipantHandleIntentFlowStrategy(&lazy protocol witness table cache variable for type StartVideoCallRCHFlowDelegate and conformance BaseRCHFlowDelegate<A, B>, (void (*)(uint64_t))type metadata accessor for StartVideoCallRCHFlowDelegate);
  v13(a1, v14, v15, v12, v11);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallFlowFactory.PhoneRCHFlowProducers<INStartVideoCallIntent, INStartVideoCallIntentResponse>);
  uint64_t v16 = v24;
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INStartVideoCallIntent);
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for INStartVideoCallIntentResponse);
  RCHChildFlowProducersAsync.init()();
  static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B>(app:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INStartVideoCallIntent, INStartVideoCallIntentResponse>);
  RCHChildFlowProducersAsync.appResolutionFlowProducer.setter();
  outlined init with copy of SignalProviding(v8, (uint64_t)v28);
  type metadata accessor for PhoneCallCommonCATs();
  static CATOption.defaultMode.getter();
  uint64_t v17 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for PhoneCallCommonCATPatternsExecutor();
  static CATOption.defaultMode.getter();
  uint64_t v18 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for AppInfoBuilder();
  uint64_t v19 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneTCCFlowStrategy<INStartVideoCallIntent, INStartVideoCallIntentResponse>);
  uint64_t v20 = swift_allocObject();
  specialized PhoneTCCFlowStrategy.init(sharedGlobals:phoneCallCommonCats:phoneCallCommonCatPatterns:labelTemplatesProvider:tccTemplatesProvider:appInfoBuilder:)((uint64_t)v28, v17, v18, 0, 0, 0, 0, v19, v20, (uint64_t)specialized PhoneCallStrategy.init(catFamily:catPatternFamily:responseGenerator:appInfoBuilder:deviceState:), v23, v24, v25, v26, v27, v28[0], v28[1], v28[2], v29,
    v30,
    v31,
    v32);
  v28[0] = v21;
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type PhoneTCCFlowStrategy<INStartVideoCallIntent, INStartVideoCallIntentResponse> and conformance PhoneTCCFlowStrategy<A, B>, &demangling cache variable for type metadata for PhoneTCCFlowStrategy<INStartVideoCallIntent, INStartVideoCallIntentResponse>);
  static RCHChildFlowFactoryHelper.makeRequestTCCAcceptanceFlow<A, B>(strategy:)();
  swift_release();
  RCHChildFlowProducersAsync.requestTCCAcceptanceFlowProducer.setter();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(v16, v7, v27);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[3];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t *, uint64_t *, uint64_t *, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _UNKNOWN **, _UNKNOWN **);

  uint64_t v24 = a3;
  uint64_t v25 = a2;
  uint64_t v4 = type metadata accessor for CATOption();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducers<INStartAudioCallIntent, INStartAudioCallIntentResponse>);
  uint64_t v26 = *(void *)(v5 - 8);
  uint64_t v27 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1 + direct field offset for StartAudioCallRCHFlowDelegate.sharedGlobals;
  uint64_t v9 = *(void *)(a1 + direct field offset for StartAudioCallRCHFlowDelegate.sharedGlobals + 24);
  uint64_t v10 = *(void *)(a1 + direct field offset for StartAudioCallRCHFlowDelegate.sharedGlobals + 32);
  __swift_project_boxed_opaque_existential_1((void *)(a1 + direct field offset for StartAudioCallRCHFlowDelegate.sharedGlobals), v9);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v10 + 104))(v28, v9, v10);
  uint64_t v12 = v29;
  uint64_t v11 = v30;
  __swift_project_boxed_opaque_existential_1(v28, v29);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
  uint64_t v14 = type metadata accessor for StartAudioCallRCHFlowDelegate();
  uint64_t v15 = lazy protocol witness table accessor for type AddCallParticipantHandleIntentFlowStrategy and conformance AddCallParticipantHandleIntentFlowStrategy(&lazy protocol witness table cache variable for type StartAudioCallRCHFlowDelegate and conformance BaseRCHFlowDelegate<A, B>, (void (*)(uint64_t))type metadata accessor for StartAudioCallRCHFlowDelegate);
  v13(a1, v14, v15, v12, v11);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallFlowFactory.PhoneRCHFlowProducers<INStartAudioCallIntent, INStartAudioCallIntentResponse>);
  uint64_t v16 = v24;
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for INStartAudioCallIntent);
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for INStartAudioCallIntentResponse);
  RCHChildFlowProducersAsync.init()();
  static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B>(app:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INStartAudioCallIntent, INStartAudioCallIntentResponse>);
  RCHChildFlowProducersAsync.appResolutionFlowProducer.setter();
  outlined init with copy of SignalProviding(v8, (uint64_t)v28);
  type metadata accessor for PhoneCallCommonCATs();
  static CATOption.defaultMode.getter();
  uint64_t v17 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for PhoneCallCommonCATPatternsExecutor();
  static CATOption.defaultMode.getter();
  uint64_t v18 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for AppInfoBuilder();
  uint64_t v19 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneTCCFlowStrategy<INStartAudioCallIntent, INStartAudioCallIntentResponse>);
  uint64_t v20 = swift_allocObject();
  specialized PhoneTCCFlowStrategy.init(sharedGlobals:phoneCallCommonCats:phoneCallCommonCatPatterns:labelTemplatesProvider:tccTemplatesProvider:appInfoBuilder:)((uint64_t)v28, v17, v18, 0, 0, 0, 0, v19, v20, (uint64_t)specialized PhoneCallStrategy.init(catFamily:catPatternFamily:responseGenerator:appInfoBuilder:deviceState:), v23, v24, v25, v26, v27, v28[0], v28[1], v28[2], v29,
    v30,
    v31,
    v32);
  v28[0] = v21;
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type PhoneTCCFlowStrategy<INStartAudioCallIntent, INStartAudioCallIntentResponse> and conformance PhoneTCCFlowStrategy<A, B>, &demangling cache variable for type metadata for PhoneTCCFlowStrategy<INStartAudioCallIntent, INStartAudioCallIntentResponse>);
  static RCHChildFlowFactoryHelper.makeRequestTCCAcceptanceFlow<A, B>(strategy:)();
  swift_release();
  RCHChildFlowProducersAsync.requestTCCAcceptanceFlowProducer.setter();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(v16, v7, v27);
}

uint64_t static PhoneCallFlowFactory.getProducers<A>(delegate:app:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  void (*v23)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void v30[5];
  unsigned char v31[40];
  void v32[5];
  void v33[3];
  uint64_t v34;
  uint64_t v35;
  void v36[3];
  uint64_t v37;
  uint64_t v38;

  uint64_t v27 = a2;
  uint64_t v28 = a5;
  uint64_t v24 = *(void *)(a4 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v25 = type metadata accessor for RCHChildFlowProducersAsync();
  __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v22 - v10;
  uint64_t v11 = type metadata accessor for RCHChildFlowProducers();
  __chkstk_darwin(v11 - 8);
  uint64_t v26 = (uint64_t)&v22 - v12;
  v33[0] = a1;
  uint64_t v13 = a1;
  uint64_t v14 = *(void *)(a4 + 8);
  uint64_t v23 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v14 + 8);
  v23(v36, a3, v14);
  uint64_t v15 = v37;
  uint64_t v16 = v38;
  __swift_project_boxed_opaque_existential_1(v36, v37);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v16 + 104))(v33, v15, v16);
  uint64_t v17 = v34;
  uint64_t v18 = v35;
  __swift_project_boxed_opaque_existential_1(v33, v34);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(v13, a3, v24, v17, v18);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  RCHChildFlowProducersAsync.init()();
  static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B>(app:)();
  RCHChildFlowProducersAsync.appResolutionFlowProducer.setter();
  type metadata accessor for PhoneTCCFlowStrategy();
  v33[0] = v13;
  v23(v36, a3, v14);
  uint64_t v19 = default argument 3 of PhoneCallBaseCatTemplatingService.init(ducFamily:sharedGlobals:displayTextCats:phoneCallCommonCats:appInfoBuilder:labelTemplating:startCallCats:)(AssociatedTypeWitness, v9);
  default argument 2 of PhoneTCCFlowStrategy.init(sharedGlobals:phoneCallCommonCats:phoneCallCommonCatPatterns:labelTemplatesProvider:tccTemplatesProvider:appInfoBuilder:)();
  default argument 6 of UnsupportedFaceTimeOutputProvider.init(unsupportedPhoneCall:sharedGlobals:startCallCats:startCallCATsSimple:phoneCallDisplayTextCATsSimple:unsupportedFlowCats:labelTemplates:)(v32, AssociatedTypeWitness, v9);
  default argument 4 of PhoneTCCFlowStrategy.init(sharedGlobals:phoneCallCommonCats:phoneCallCommonCatPatterns:labelTemplatesProvider:tccTemplatesProvider:appInfoBuilder:)((uint64_t)v31);
  default argument 4 of PhoneCallBaseCatTemplatingService.init(ducFamily:sharedGlobals:displayTextCats:phoneCallCommonCats:appInfoBuilder:labelTemplating:startCallCats:)(v30, AssociatedTypeWitness, v9);
  v36[0] = PhoneTCCFlowStrategy.__allocating_init(sharedGlobals:phoneCallCommonCats:phoneCallCommonCatPatterns:labelTemplatesProvider:tccTemplatesProvider:appInfoBuilder:)(v36, v19, (uint64_t)v33, (uint64_t)v32, (uint64_t)v31, (uint64_t)v30);
  swift_getWitnessTable();
  static RCHChildFlowFactoryHelper.makeRequestTCCAcceptanceFlow<A, B>(strategy:)();
  swift_release();
  uint64_t v20 = (uint64_t)v29;
  RCHChildFlowProducersAsync.requestTCCAcceptanceFlowProducer.setter();
  return PhoneCallFlowFactory.PhoneRCHFlowProducers.init(completionProducers:asyncProducers:)(v26, v20, v28);
}

void static PhoneCallFlowFactory.makeVoiceCommandsParityFlow(app:intent:sharedGlobals:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducers<INStartCallIntent, INStartCallIntentResponse>);
  OUTLINED_FUNCTION_0_0();
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_3_1();
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INStartCallIntent, INStartCallIntentResponse>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_3_1();
  uint64_t v27 = v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallFlowFactory.PhoneRCHFlowProducers<INStartCallIntent, INStartCallIntentResponse>);
  uint64_t v13 = v12 - 8;
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_53();
  uint64_t v14 = type metadata accessor for CATOption();
  uint64_t v15 = OUTLINED_FUNCTION_11_0(v14);
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_48_0();
  type metadata accessor for StartCallRCHFlowDelegate();
  outlined init with copy of SignalProviding((uint64_t)v2, (uint64_t)&v30);
  swift_retain();
  StartCallRCHFlowDelegate.__allocating_init(sharedGlobals:appResolved:)((uint64_t)&v30, v6);
  outlined init with copy of SignalProviding((uint64_t)v2, (uint64_t)&v30);
  type metadata accessor for PhoneCallDisplayTextCATsSimple();
  OUTLINED_FUNCTION_63_2();
  uint64_t v16 = OUTLINED_FUNCTION_60_3();
  type metadata accessor for StartCallCATsSimple();
  OUTLINED_FUNCTION_63_2();
  uint64_t v17 = OUTLINED_FUNCTION_60_3();
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CallingIntentRCHFlowStrategy<INStartCallIntent, INStartCallIntentResponse>);
  uint64_t v18 = (void *)OUTLINED_FUNCTION_31_0();
  outlined init with take of AppSelectionSignalComponent(&v30, (uint64_t)(v18 + 2));
  v18[7] = v6;
  v18[8] = v16;
  v18[9] = v17;
  swift_retain();
  static PhoneCallFlowFactory.getStartCallProducers(skIntent:delegate:app:sharedGlobals:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v27, v0 + *(int *)(v13 + 44), v28);
  OUTLINED_FUNCTION_41_5();
  v19();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowFactory<INStartCallIntent, INStartCallIntentResponse>);
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_89_2();
  uint64_t v20 = RCHChildFlowFactory.init(producers:withFallbacks:)();
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  OUTLINED_FUNCTION_89_2();
  OUTLINED_FUNCTION_24_17();
  v21();
  uint64_t v22 = v31;
  uint64_t v23 = v32;
  __swift_project_boxed_opaque_existential_1(&v30, v31);
  uint64_t v29 = v18;
  uint64_t v24 = *(void (**)(void **, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 64);
  uint64_t v25 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type CallingIntentRCHFlowStrategy<INStartCallIntent, INStartCallIntentResponse> and conformance CallingIntentRCHFlowStrategy<A, B>, &demangling cache variable for type metadata for CallingIntentRCHFlowStrategy<INStartCallIntent, INStartCallIntentResponse>);
  v24(&v29, v20, v6, v4, v26, v25, v22, v23);
  swift_release();
  swift_release();
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v0, &demangling cache variable for type metadata for PhoneCallFlowFactory.PhoneRCHFlowProducers<INStartCallIntent, INStartCallIntentResponse>);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v30);
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_26_1();
}

uint64_t PhoneCallFlowFactory.PhoneRCHFlowProducers.completionProducers.getter()
{
  type metadata accessor for RCHChildFlowProducers();
  OUTLINED_FUNCTION_15();
  uint64_t v0 = OUTLINED_FUNCTION_7_0();

  return v1(v0);
}

uint64_t PhoneCallFlowFactory.PhoneRCHFlowProducers.completionProducers.setter(uint64_t a1)
{
  type metadata accessor for RCHChildFlowProducers();
  OUTLINED_FUNCTION_15();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 40);

  return v5(v1, a1, v3);
}

uint64_t PhoneCallFlowFactory.PhoneRCHFlowProducers.asyncProducers.getter()
{
  type metadata accessor for RCHChildFlowProducersAsync();
  OUTLINED_FUNCTION_15();
  uint64_t v0 = OUTLINED_FUNCTION_7_0();

  return v1(v0);
}

uint64_t PhoneCallFlowFactory.PhoneRCHFlowProducers.asyncProducers.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 36);
  type metadata accessor for RCHChildFlowProducersAsync();
  OUTLINED_FUNCTION_15();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);

  return v7(v4, a1, v5);
}

Swift::Void (__swiftcall *PhoneCallFlowFactory.PhoneRCHFlowProducers.asyncProducers.modify())(Swift::OpaquePointer newCallGroups)
{
  return INStartAudioCallIntent.overwriteCallGroups(newCallGroups:);
}

uint64_t PhoneCallFlowFactory.PhoneRCHFlowProducers.init(completionProducers:asyncProducers:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  type metadata accessor for RCHChildFlowProducers();
  OUTLINED_FUNCTION_15();
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(a3, a1);
  uint64_t v7 = a3 + *(int *)(type metadata accessor for PhoneCallFlowFactory.PhoneRCHFlowProducers() + 36);
  type metadata accessor for RCHChildFlowProducersAsync();
  OUTLINED_FUNCTION_15();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 32);

  return v10(v7, a2, v8);
}

uint64_t (*static PhoneCallFlowFactory.makeAppResolutionFlowBeforeNextResolveFlowProducer<A>(delegate:app:sharedGlobal:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  outlined init with copy of SignalProviding(a3, (uint64_t)v10);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = a4;
  v8[3] = a5;
  v8[4] = a2;
  outlined init with take of AppSelectionSignalComponent(v10, (uint64_t)(v8 + 5));
  swift_retain();
  return partial apply for closure #1 in static PhoneCallFlowFactory.makeAppResolutionFlowBeforeNextResolveFlowProducer<A>(delegate:app:sharedGlobal:);
}

uint64_t closure #1 in static PhoneCallFlowFactory.getGenericStartCallProducers<A>(delegate:app:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v30)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t (*v36)(void *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46[5];
  unsigned char v47[40];
  unsigned char v48[40];
  uint64_t v49[5];
  uint64_t v50[5];

  os_log_type_t v42 = a2;
  uint64_t v8 = *a1;
  char v45 = a1;
  uint64_t v43 = v8;
  uint64_t v44 = type metadata accessor for ParameterIdentifier();
  uint64_t v9 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for CallingIntentNeedsValueFlowStrategy();
  swift_unknownObjectRetain();
  uint64_t v40 = default argument 1 of CallingIntentUnsupportedValueFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:phoneCallCommonCATs:phoneCallCommonCatPatterns:startCallCatsSimple:phoneCallDisplayTextCATsSimple:siriKitEventSender:appInfoBuilder:)(a4, a5);
  default argument 2 of CallingIntentUnsupportedValueFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:phoneCallCommonCATs:phoneCallCommonCatPatterns:startCallCatsSimple:phoneCallDisplayTextCATsSimple:siriKitEventSender:appInfoBuilder:)(v50);
  uint64_t v12 = default argument 5 of CallingIntentUnsupportedValueFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:phoneCallCommonCATs:phoneCallCommonCatPatterns:startCallCatsSimple:phoneCallDisplayTextCATsSimple:siriKitEventSender:appInfoBuilder:)(a4, a5);
  uint64_t v13 = default argument 4 of IncomingCallActionConfirmationStrategy.init(incomingCallIntentResponse:incomingCallCats:sharedGlobals:announceCallsContext:phoneCommonCats:phoneCallCommonCatPatterns:)(a4, a5);
  uint64_t v14 = default argument 5 of CallingIntentBaseFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:startCallCATsSimple:phoneCallCommonCATs:phoneCallCommonCATsSimple:phoneCallCommonCatPatterns:phoneCallDisplayTextCATsSimple:responseGenerator:siriKitEventSender:appInfoBuilder:)(a4, a5);
  default argument 5 of IncomingCallActionConfirmationStrategy.init(incomingCallIntentResponse:incomingCallCats:sharedGlobals:announceCallsContext:phoneCommonCats:phoneCallCommonCatPatterns:)(v49);
  uint64_t v15 = default argument 6 of CallingIntentUnsupportedValueFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:phoneCallCommonCATs:phoneCallCommonCatPatterns:startCallCatsSimple:phoneCallDisplayTextCATsSimple:siriKitEventSender:appInfoBuilder:)(a4, a5);
  default argument 7 of InCallActionHandleIntentFlowStrategy.init(sharedGlobals:phoneCallBaseCatTemplatingService:aceViewProvider:nlContextProvider:canUseServerTTS:shouldShowDialogAfterIntentHandled:hangUpCallCATsSimple:responseGenerator:biomeEventSender:)();
  default argument 7 of static ReferenceContactResolutionWrapper.resolveUpdateSKIntent(siriKitIntent:contactQueries:hasEmergencyContact:app:nlIntent:sharedGlobals:multicardinalIndex:siriKitEventSender:emergencyContactResolution:contactGroupResolver:)(a4, a5);
  default argument 8 of CallingIntentUnsupportedValueFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:phoneCallCommonCATs:phoneCallCommonCatPatterns:startCallCatsSimple:phoneCallDisplayTextCATsSimple:siriKitEventSender:appInfoBuilder:)(v46);
  uint64_t v39 = a3;
  uint64_t v16 = v14;
  uint64_t v17 = v42;
  uint64_t v18 = CallingIntentNeedsValueFlowStrategy.__allocating_init(delegate:startCallCATs:startCallCatPatterns:startCallCATsSimple:phoneCallCommonCATs:phoneCallCommonCATsSimple:phoneCallCommonCatPatterns:phoneCallDisplayTextCATsSimple:responseGenerator:siriKitEventSender:appInfoBuilder:)(a3, v40, v50, v12, v13, v16, v49, v15, v48, v47, v46);
  type metadata accessor for ParameterResolutionRecord();
  ParameterResolutionRecord.parameter.getter();
  uint64_t v19 = ParameterIdentifier.name.getter();
  uint64_t v21 = v20;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v44);
  v22._uint64_t countAndFlagsBits = v19;
  v22._object = v21;
  if ((PhoneCallSlotNames.init(rawValue:)(v22).value & 0xFE) == 4)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.siriPhone);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl(&dword_0, v24, v25, "#PhoneCallFlowFactory Contact slot needs value. Wrapping needsValueStrategy in NeedsValueGuardFlow.", v26, 2u);
      swift_slowDealloc();
    }

    v50[0] = v18;
    swift_getWitnessTable();
    uint64_t v27 = (uint64_t (*)(void *, uint64_t))static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)();
    uint64_t v28 = v27(v45, v17);
    swift_release();
    swift_getAssociatedConformanceWitness();
    type metadata accessor for ContactNeedsValueGuardFlow();
    v49[0] = v39;
    uint64_t v29 = *(void *)(*(void *)(a5 + 8) + 8);
    long long v30 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v29 + 8);
    swift_retain();
    v30(v50, a4, v29);
    v50[0] = ContactNeedsValueGuardFlow.__allocating_init(_:_:)(v28, (uint64_t)v50);
    swift_getWitnessTable();
    uint64_t v31 = Flow.eraseToAnyValueFlow()();
    swift_release();
    swift_release();
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.siriPhone);
    uint64_t v33 = Logger.logObject.getter();
    uint64_t v34 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl(&dword_0, v33, v34, "#PhoneCallFlowFactory Needs value for non contact slot. Appending needsValueStrategy only.", v35, 2u);
      swift_slowDealloc();
    }

    v50[0] = v18;
    swift_getWitnessTable();
    uint64_t v36 = (uint64_t (*)(void *, uint64_t))static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)();
    uint64_t v31 = v36(v45, v17);
    swift_release();
  }
  swift_release();
  return v31;
}

uint64_t closure #2 in static PhoneCallFlowFactory.getGenericStartCallProducers<A>(delegate:app:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *a1;
  uint64_t v44 = a1;
  uint64_t v45 = v8;
  uint64_t v46 = a2;
  uint64_t v9 = type metadata accessor for ParameterIdentifier();
  uint64_t v42 = *(void *)(v9 - 8);
  uint64_t v43 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CallingIntentUnsupportedValueFlowStrategy();
  swift_unknownObjectRetain();
  uint64_t v41 = default argument 1 of CallingIntentUnsupportedValueFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:phoneCallCommonCATs:phoneCallCommonCatPatterns:startCallCatsSimple:phoneCallDisplayTextCATsSimple:siriKitEventSender:appInfoBuilder:)(a4, a5);
  default argument 2 of CallingIntentUnsupportedValueFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:phoneCallCommonCATs:phoneCallCommonCatPatterns:startCallCatsSimple:phoneCallDisplayTextCATsSimple:siriKitEventSender:appInfoBuilder:)(v48);
  uint64_t v13 = default argument 4 of IncomingCallActionConfirmationStrategy.init(incomingCallIntentResponse:incomingCallCats:sharedGlobals:announceCallsContext:phoneCommonCats:phoneCallCommonCatPatterns:)(a4, a5);
  default argument 5 of IncomingCallActionConfirmationStrategy.init(incomingCallIntentResponse:incomingCallCats:sharedGlobals:announceCallsContext:phoneCommonCats:phoneCallCommonCatPatterns:)(v51);
  uint64_t v14 = default argument 5 of CallingIntentUnsupportedValueFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:phoneCallCommonCATs:phoneCallCommonCatPatterns:startCallCatsSimple:phoneCallDisplayTextCATsSimple:siriKitEventSender:appInfoBuilder:)(a4, a5);
  uint64_t v15 = default argument 6 of CallingIntentUnsupportedValueFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:phoneCallCommonCATs:phoneCallCommonCatPatterns:startCallCatsSimple:phoneCallDisplayTextCATsSimple:siriKitEventSender:appInfoBuilder:)(a4, a5);
  default argument 2 of static PhoneSelfPerformanceLogger.signpost<A>(domainExecutionType:taskType:siriKitEventSender:_:)(v50, a4, a5);
  default argument 8 of CallingIntentUnsupportedValueFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:phoneCallCommonCATs:phoneCallCommonCatPatterns:startCallCatsSimple:phoneCallDisplayTextCATsSimple:siriKitEventSender:appInfoBuilder:)(v49);
  uint64_t v16 = v45;
  uint64_t v17 = v41;
  uint64_t v40 = a3;
  uint64_t v41 = v12;
  uint64_t v18 = CallingIntentUnsupportedValueFlowStrategy.__allocating_init(delegate:startCallCATs:startCallCatPatterns:phoneCallCommonCATs:phoneCallCommonCatPatterns:startCallCatsSimple:phoneCallDisplayTextCATsSimple:siriKitEventSender:appInfoBuilder:)(a3, v17, (uint64_t)v48, v13, (uint64_t)v51, v14, v15, (uint64_t)v50, (uint64_t)v49);
  uint64_t v19 = *(void *)(v16 + class metadata base offset for RCHChildFlowFactory);
  uint64_t v20 = type metadata accessor for ParameterResolutionRecord();
  ParameterResolutionRecord.parameter.getter();
  uint64_t v21 = ParameterIdentifier.name.getter();
  uint64_t v23 = v22;
  (*(void (**)(char *, uint64_t))(v42 + 8))(v11, v43);
  v24._uint64_t countAndFlagsBits = v21;
  v24._object = v23;
  if ((PhoneCallSlotNames.init(rawValue:)(v24).value & 0xFE) == 4)
  {
    uint64_t v25 = v40;
    uint64_t v26 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
    uint64_t v27 = v20;
    uint64_t v28 = v46;
    if (ParameterResolutionRecord<>.isUnsetRelationship.getter(v27, v26))
    {
      v48[0] = v25;
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)(*(void *)(a5 + 8) + 8) + 8))(v51, a4);
      default argument 1 of ContactUnsetRelationshipFlowStrategy.init(sharedGlobals:contactStore:labelTemplates:unsetRelationshipTemplates:displayTextCatFamily:phoneCallCommonCats:)(v50);
      default argument 2 of ContactUnsetRelationshipFlowStrategy.init(sharedGlobals:contactStore:labelTemplates:unsetRelationshipTemplates:displayTextCatFamily:phoneCallCommonCats:)((uint64_t)v49);
      default argument 3 of ContactUnsetRelationshipFlowStrategy.init(sharedGlobals:contactStore:labelTemplates:unsetRelationshipTemplates:displayTextCatFamily:phoneCallCommonCats:)(v47);
      uint64_t v29 = default argument 6 of static StartCallViewBuilders.makeDefaultDisambiguationBuilder<A>(app:intent:parameterName:disambiguationList:deviceIsLocked:sharedGlobals:displayTextCats:)(v19, v26);
      uint64_t v30 = default argument 4 of IncomingCallActionConfirmationStrategy.init(incomingCallIntentResponse:incomingCallCats:sharedGlobals:announceCallsContext:phoneCommonCats:phoneCallCommonCatPatterns:)(v19, v26);
      ContactUnsetRelationshipFlowStrategy.init(sharedGlobals:contactStore:labelTemplates:unsetRelationshipTemplates:displayTextCatFamily:phoneCallCommonCats:)((uint64_t)v51, (uint64_t)v50, (uint64_t)v49, (uint64_t)v47, v29, v30, v48);
      uint64_t v31 = v28;
      uint64_t v32 = type metadata accessor for ContactUnsetRelationshipFlowStrategy();
      swift_getWitnessTable();
      uint64_t v33 = (uint64_t (*)(void *, uint64_t))static RCHChildFlowFactoryHelper.makeUnsupportedUnsetRelationshipFlowProducer<A, B>(strategy:)();
      (*(void (**)(uint64_t *, uint64_t))(*(void *)(v32 - 8) + 8))(v48, v32);
      uint64_t v34 = v33(v44, v31);
    }
    else
    {
      v48[0] = (uint64_t)v18;
      swift_getWitnessTable();
      uint64_t v36 = (uint64_t (*)(void *, uint64_t))static RCHChildFlowFactoryHelper.makeUnsupportedValueAndPromptFlowProducer<A>(strategy:)();
      uint64_t v34 = v36(v44, v28);
    }
  }
  else
  {
    v48[0] = (uint64_t)v18;
    swift_getWitnessTable();
    uint64_t v35 = (uint64_t (*)(void *, uint64_t))static RCHChildFlowFactoryHelper.makeUnsupportedValueAndCancelFlowProducer<A>(strategy:)();
    uint64_t v34 = v35(v44, v46);
  }
  uint64_t v37 = v34;
  swift_release();
  swift_release();
  return v37;
}

uint64_t closure #1 in static PhoneCallFlowFactory.getStartCallProducers(skIntent:delegate:app:sharedGlobals:)(uint64_t a1, uint64_t a2, char **a3, uint64_t a4)
{
  uint64_t v93 = a4;
  uint64_t v94 = a1;
  uint64_t v6 = type metadata accessor for CATOption();
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = type metadata accessor for ResponseMode();
  uint64_t v92 = *(void *)(v99 - 8);
  __chkstk_darwin(v99);
  uint64_t v90 = (char *)v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ResponseMode?, ResponseMode?));
  __chkstk_darwin(v95);
  long long v98 = (char *)v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseMode?);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v97 = (char *)v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)v86 - v15;
  __chkstk_darwin(v14);
  v96 = (char *)v86 - v17;
  uint64_t v18 = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INStartCallIntent, INStartCallIntentResponse>);
  uint64_t v19 = *(v18 - 1);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)v86 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v22 = (void *)IntentResolutionRecord.intentResponse.getter();
  uint64_t v23 = (int *)[v22 _intentResponseCode];

  if (v23 != &dword_8)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)static Logger.siriPhone);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl(&dword_0, v35, v36, "#PhoneCallFlowFactory skipping confirmation", v37, 2u);
      swift_slowDealloc();
    }
LABEL_11:

    return 0;
  }
  v86[1] = v8;
  if (one-time initialization token for siriPhone != -1) {
LABEL_47:
  }
    swift_once();
  uint64_t v24 = type metadata accessor for Logger();
  uint64_t v25 = __swift_project_value_buffer(v24, (uint64_t)static Logger.siriPhone);
  (*(void (**)(char *, uint64_t, void *))(v19 + 16))(v21, a2, v18);
  v86[0] = v25;
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  BOOL v28 = os_log_type_enabled(v26, v27);
  uint64_t v91 = a2;
  uint64_t v88 = a3;
  uint64_t v89 = v18;
  uint64_t v87 = v16;
  if (v28)
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v29 = 138412290;
    uint64_t v31 = (void *)IntentResolutionRecord.intent.getter();
    id v32 = [v31 backingStore];

    if (!outlined bridged method (ob) of @objc PBCodable.dictionaryRepresentation()(v32)) {
      Dictionary.init(dictionaryLiteral:)();
    }
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v101[0] = isa;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v30 = isa;
    uint64_t v18 = v89;
    (*(void (**)(char *, void *))(v19 + 8))(v21, v89);
    _os_log_impl(&dword_0, v26, v27, "#PhoneCallFlowFactory Extension explicitly asked to confirm, intent = %@", v29, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, void *))(v19 + 8))(v21, v18);
  }

  uint64_t v39 = (void *)IntentResolutionRecord.intent.getter();
  uint64_t v40 = outlined bridged method (ob) of @objc INStartCallIntent.contacts.getter(v39);
  if (v40) {
    unint64_t v41 = v40;
  }
  else {
    unint64_t v41 = (unint64_t)_swiftEmptyArrayStorage;
  }
  if (v41 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
    if (v42)
    {
LABEL_19:
      uint64_t v21 = (char *)(v41 & 0xC000000000000001);
      uint64_t v19 = 4;
      a3 = &selRef_setBundleId_;
      while (1)
      {
        a2 = v19 - 4;
        if (v21) {
          id v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v43 = *(id *)(v41 + 8 * v19);
        }
        uint64_t v44 = v43;
        uint64_t v16 = (char *)(v19 - 3);
        if (__OFADD__(a2, 1))
        {
          __break(1u);
          goto LABEL_47;
        }
        id v45 = [v43 personHandle];
        if (v45)
        {
          uint64_t v46 = v45;
          uint64_t v18 = [v45 emergencyType];

          if (v18 == (void *)((char *)&dword_0 + 1)) {
            break;
          }
        }

        ++v19;
        if (v16 == (char *)v42) {
          goto LABEL_27;
        }
      }
      swift_bridgeObjectRelease_n();
      id v58 = v44;
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v35, v59))
      {
        uint64_t v60 = (uint8_t *)swift_slowAlloc();
        uint64_t v61 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v60 = 138412290;
        v101[0] = v58;
        id v62 = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v61 = v58;

        _os_log_impl(&dword_0, v35, v59, "#PhoneCallFlowFactory skipping confirmation because contacts contains local emergency handle: %@", v60, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        goto LABEL_11;
      }

      return 0;
    }
  }
  else
  {
    uint64_t v42 = *(void *)((char *)&dword_10 + (v41 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (v42) {
      goto LABEL_19;
    }
  }
LABEL_27:
  swift_bridgeObjectRelease_n();
  v47 = v88;
  uint64_t v48 = (uint64_t)v88[3];
  uint64_t v49 = v88[4];
  __swift_project_boxed_opaque_existential_1(v88, v48);
  if ((*((uint64_t (**)(uint64_t, char *))v49 + 14))(v48, v49))
  {
    uint64_t v50 = (uint64_t)v96;
    CurrentRequest.responseMode.getter();
    swift_release();
    uint64_t v51 = 0;
    uint64_t v53 = (uint64_t)v98;
    uint64_t v52 = v99;
  }
  else
  {
    uint64_t v51 = 1;
    uint64_t v53 = (uint64_t)v98;
    uint64_t v52 = v99;
    uint64_t v50 = (uint64_t)v96;
  }
  uint64_t v54 = (uint64_t)v97;
  uint64_t v55 = (uint64_t)v87;
  __swift_storeEnumTagSinglePayload(v50, v51, 1, v52);
  static ResponseMode.voiceOnly.getter();
  __swift_storeEnumTagSinglePayload(v55, 0, 1, v52);
  uint64_t v56 = v53 + *(int *)(v95 + 48);
  outlined init with copy of ResponseMode?(v50, v53);
  outlined init with copy of ResponseMode?(v55, v56);
  if (__swift_getEnumTagSinglePayload(v53, 1, v52) == 1)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v55, &demangling cache variable for type metadata for ResponseMode?);
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v50, &demangling cache variable for type metadata for ResponseMode?);
    if (__swift_getEnumTagSinglePayload(v56, 1, v52) == 1)
    {
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v53, &demangling cache variable for type metadata for ResponseMode?);
      uint64_t v57 = v91;
      goto LABEL_39;
    }
    goto LABEL_35;
  }
  outlined init with copy of ResponseMode?(v53, v54);
  if (__swift_getEnumTagSinglePayload(v56, 1, v52) == 1)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v55, &demangling cache variable for type metadata for ResponseMode?);
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v50, &demangling cache variable for type metadata for ResponseMode?);
    (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v54, v52);
LABEL_35:
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v53, &demangling cache variable for type metadata for (ResponseMode?, ResponseMode?));
    uint64_t v57 = v91;
LABEL_43:
    uint64_t v74 = (uint64_t)v47[3];
    uint64_t v75 = v47[4];
    __swift_project_boxed_opaque_existential_1(v47, v74);
    (*((void (**)(void *__return_ptr, uint64_t, char *))v75 + 13))(v101, v74, v75);
    uint64_t v76 = v102;
    uint64_t v77 = v103;
    __swift_project_boxed_opaque_existential_1(v101, v102);
    type metadata accessor for StartCallCATsSimple();
    uint64_t v78 = v93;
    swift_retain();
    static CATOption.defaultMode.getter();
    uint64_t v79 = CATWrapperSimple.__allocating_init(options:globals:)();
    type metadata accessor for PhoneCallDisplayTextCATsSimple();
    static CATOption.defaultMode.getter();
    uint64_t v80 = CATWrapperSimple.__allocating_init(options:globals:)();
    uint64_t v81 = type metadata accessor for StartCallConfirmIntentFlowStrategy();
    swift_allocObject();
    uint64_t v100 = StartCallConfirmIntentFlowStrategy.init(delegate:startCallCATsSimple:displayTextCATsSimple:)(v78, v79, v80);
    uint64_t v82 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v77 + 16);
    uint64_t v83 = lazy protocol witness table accessor for type AddCallParticipantHandleIntentFlowStrategy and conformance AddCallParticipantHandleIntentFlowStrategy(&lazy protocol witness table cache variable for type StartCallConfirmIntentFlowStrategy and conformance StartCallConfirmIntentFlowStrategy, (void (*)(uint64_t))type metadata accessor for StartCallConfirmIntentFlowStrategy);
    uint64_t v84 = (uint64_t (*)(uint64_t, uint64_t))v82(&v100, v81, v83, v76, v77);
    swift_release();
    uint64_t v38 = v84(v94, v57);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v101);
    return v38;
  }
  uint64_t v63 = v92;
  uint64_t v64 = v90;
  (*(void (**)(char *, uint64_t, uint64_t))(v92 + 32))(v90, v56, v52);
  lazy protocol witness table accessor for type AddCallParticipantHandleIntentFlowStrategy and conformance AddCallParticipantHandleIntentFlowStrategy((unint64_t *)&lazy protocol witness table cache variable for type ResponseMode and conformance ResponseMode, (void (*)(uint64_t))&type metadata accessor for ResponseMode);
  LODWORD(v99) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v65 = *(void (**)(char *, uint64_t))(v63 + 8);
  v65(v64, v52);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v55, &demangling cache variable for type metadata for ResponseMode?);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v50, &demangling cache variable for type metadata for ResponseMode?);
  v65((char *)v54, v52);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v53, &demangling cache variable for type metadata for ResponseMode?);
  uint64_t v57 = v91;
  if ((v99 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v66 = (void *)IntentResolutionRecord.intent.getter();
  char v67 = static EmergencyUtils.requiresEmergencyConfirmation(intent:intentResponse:)(v66, 0);

  if ((v67 & 1) == 0) {
    goto LABEL_43;
  }
  uint64_t v68 = Logger.logObject.getter();
  os_log_type_t v69 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v68, v69))
  {
    uint64_t v70 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v70 = 0;
    _os_log_impl(&dword_0, v68, v69, "#PhoneCallFlowFactory making confirmation producer for voice only emergency call request", v70, 2u);
    swift_slowDealloc();
  }

  outlined init with copy of SignalProviding((uint64_t)v47, (uint64_t)v101);
  os_log_type_t v71 = (void *)IntentResolutionRecord.intent.getter();
  type metadata accessor for StartCallCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v72 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for PhoneCallCommonCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v73 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for VoiceOnlyEmergencyConfirmationFlow();
  swift_allocObject();
  v101[0] = VoiceOnlyEmergencyConfirmationFlow.init(sharedGlobals:skIntent:startCallCATsSimple:phoneCallCommonCATsSimple:)((uint64_t)v101, v71, v72, v73);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyConfirmIntentFlow<INStartCallIntent>);
  swift_allocObject();
  lazy protocol witness table accessor for type AddCallParticipantHandleIntentFlowStrategy and conformance AddCallParticipantHandleIntentFlowStrategy(&lazy protocol witness table cache variable for type VoiceOnlyEmergencyConfirmationFlow and conformance VoiceOnlyEmergencyConfirmationFlow, (void (*)(uint64_t))type metadata accessor for VoiceOnlyEmergencyConfirmationFlow);
  v101[0] = AnyConfirmIntentFlow.init<A>(_:)();
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type AnyConfirmIntentFlow<INStartCallIntent> and conformance AnyConfirmIntentFlow<A>, &demangling cache variable for type metadata for AnyConfirmIntentFlow<INStartCallIntent>);
  uint64_t v38 = Flow.eraseToAnyValueFlow()();
  swift_release();
  return v38;
}

uint64_t closure #2 in static PhoneCallFlowFactory.getStartCallProducers(skIntent:delegate:app:sharedGlobals:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = type metadata accessor for CATOption();
  __chkstk_darwin(v6 - 8);
  outlined init with copy of SignalProviding(a3, (uint64_t)v12);
  type metadata accessor for StartCallCATsSimple();
  id v7 = a4;
  static CATOption.defaultMode.getter();
  uint64_t v8 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for PhoneCallCommonCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v9 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for VoiceOnlyEmergencyConfirmationFlow();
  swift_allocObject();
  v12[0] = VoiceOnlyEmergencyConfirmationFlow.init(sharedGlobals:skIntent:startCallCATsSimple:phoneCallCommonCATsSimple:)((uint64_t)v12, v7, v8, v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyConfirmIntentFlow<INStartCallIntent>);
  swift_allocObject();
  lazy protocol witness table accessor for type AddCallParticipantHandleIntentFlowStrategy and conformance AddCallParticipantHandleIntentFlowStrategy(&lazy protocol witness table cache variable for type VoiceOnlyEmergencyConfirmationFlow and conformance VoiceOnlyEmergencyConfirmationFlow, (void (*)(uint64_t))type metadata accessor for VoiceOnlyEmergencyConfirmationFlow);
  v12[0] = AnyConfirmIntentFlow.init<A>(_:)();
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type AnyConfirmIntentFlow<INStartCallIntent> and conformance AnyConfirmIntentFlow<A>, &demangling cache variable for type metadata for AnyConfirmIntentFlow<INStartCallIntent>);
  uint64_t v10 = Flow.eraseToAnyValueFlow()();
  swift_release();
  return v10;
}

uint64_t closure #3 in static PhoneCallFlowFactory.getStartCallProducers(skIntent:delegate:app:sharedGlobals:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v37 = a6;
  uint64_t v38 = a3;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CATOption();
  __chkstk_darwin(v12 - 8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INStartCallIntent, INStartCallIntentResponse>);
  uint64_t v13 = (void *)IntentResolutionRecord.intent.getter();
  uint64_t v14 = outlined bridged method (ob) of @objc INStartCallIntent.faceTimeLink.getter(v13);
  char v16 = specialized Optional<A>.isNilOrEmpty.getter(v14, v15);
  swift_bridgeObjectRelease();
  if ((v16 & 1) == 0)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v8, (uint64_t)static Logger.siriPhone);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl(&dword_0, v23, v24, "#PhoneCallFlowFactory Received FaceTime request and has FaceTimeLink set", v25, 2u);
      swift_slowDealloc();
    }

    uint64_t v26 = IntentResolutionRecord.app.getter();
    uint64_t v27 = IntentResolutionRecord.intent.getter();
    uint64_t v28 = IntentResolutionRecord.intentResponse.getter();
    outlined init with copy of SignalProviding(v38, (uint64_t)v40);
    type metadata accessor for StartCallCATs();
    static CATOption.defaultMode.getter();
    uint64_t v29 = CATWrapper.__allocating_init(options:globals:)();
    type metadata accessor for FlowFinder();
    uint64_t v30 = swift_allocObject();
    static SiriKitEventSender.current.getter();
    type metadata accessor for FaceTimeMessageControllerFlow();
    uint64_t v31 = swift_allocObject();
    *(void *)&v40[0] = specialized FaceTimeMessageControllerFlow.init(app:skIntent:intentResponse:sharedGlobals:state:startCallCATs:flowFinder:siriKitEventSender:)(v26, v27, v28, v40, 0, v29, v30, &v39, v31);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyConfirmIntentFlow<INStartCallIntent>);
    swift_allocObject();
    lazy protocol witness table accessor for type AddCallParticipantHandleIntentFlowStrategy and conformance AddCallParticipantHandleIntentFlowStrategy(&lazy protocol witness table cache variable for type FaceTimeMessageControllerFlow and conformance FaceTimeMessageControllerFlow, (void (*)(uint64_t))type metadata accessor for FaceTimeMessageControllerFlow);
    *(void *)&v40[0] = AnyConfirmIntentFlow.init<A>(_:)();
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type AnyConfirmIntentFlow<INStartCallIntent> and conformance AnyConfirmIntentFlow<A>, &demangling cache variable for type metadata for AnyConfirmIntentFlow<INStartCallIntent>);
    uint64_t v22 = Flow.eraseToAnyValueFlow()();
    goto LABEL_14;
  }
  if (a4)
  {
    uint64_t v17 = one-time initialization token for siriPhone;
    swift_retain();
    if (v17 != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v8, (uint64_t)static Logger.siriPhone);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl(&dword_0, v18, v19, "#PhoneCallFlowFactory using default confirmIntentFlowCompletion", v20, 2u);
      swift_slowDealloc();
    }

    uint64_t v21 = a4(v37, a2);
    if (!v21)
    {
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)a4);
      return 0;
    }
    *(void *)&v40[0] = v21;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyValueFlow<PromptResult<ConfirmIntentAnswer<INStartCallIntent>>>);
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type AnyValueFlow<PromptResult<ConfirmIntentAnswer<INStartCallIntent>>> and conformance AnyValueFlow<A>, &demangling cache variable for type metadata for AnyValueFlow<PromptResult<ConfirmIntentAnswer<INStartCallIntent>>>);
    uint64_t v22 = Flow.eraseToAnyValueFlow()();
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)a4);
LABEL_14:
    swift_release();
    return v22;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v33 = __swift_project_value_buffer(v8, (uint64_t)static Logger.siriPhone);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v33, v8);
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v34, v35))
  {
    os_log_type_t v36 = (uint8_t *)swift_slowAlloc();
    *(void *)&v40[0] = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v36 = 136315138;
    *(void *)&long long v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000048, 0x8000000000493D80, (uint64_t *)v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v34, v35, "%s", v36, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  static SiriKitLifecycle._logCrashToEventBus(_:)();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void static PhoneCallFlowFactory.makeIncomingCallRCHFlow<A, B>(strategy:intent:app:sharedGlobals:)()
{
  void (*v31)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t WitnessTable;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void v50[5];
  long long v51;
  uint64_t v52;
  uint64_t v53;

  OUTLINED_FUNCTION_24_0();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  id v45 = v4;
  uint64_t v42 = v5;
  uint64_t v6 = type metadata accessor for RCHChildFlowProducersAsync();
  OUTLINED_FUNCTION_0_0();
  uint64_t v44 = v7;
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_5_8();
  id v43 = v9;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v39 - v11;
  OUTLINED_FUNCTION_35_11();
  RCHChildFlowProducersAsync.init()();
  OUTLINED_FUNCTION_55_3();
  static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B>(app:)();
  RCHChildFlowProducersAsync.appResolutionFlowProducer.setter();
  OUTLINED_FUNCTION_55_3();
  type metadata accessor for PhoneTCCFlowStrategy();
  OUTLINED_FUNCTION_90_0();
  outlined init with copy of SignalProviding((uint64_t)v1, v13);
  uint64_t v14 = OUTLINED_FUNCTION_35_11();
  uint64_t v16 = default argument 3 of PhoneCallBaseCatTemplatingService.init(ducFamily:sharedGlobals:displayTextCats:phoneCallCommonCats:appInfoBuilder:labelTemplating:startCallCats:)(v14, v15);
  OUTLINED_FUNCTION_35_11();
  default argument 2 of PhoneTCCFlowStrategy.init(sharedGlobals:phoneCallCommonCats:phoneCallCommonCatPatterns:labelTemplatesProvider:tccTemplatesProvider:appInfoBuilder:)();
  uint64_t v17 = OUTLINED_FUNCTION_35_11();
  default argument 6 of UnsupportedFaceTimeOutputProvider.init(unsupportedPhoneCall:sharedGlobals:startCallCats:startCallCATsSimple:phoneCallDisplayTextCATsSimple:unsupportedFlowCats:labelTemplates:)(v19, v17, v18);
  OUTLINED_FUNCTION_35_11();
  default argument 4 of PhoneTCCFlowStrategy.init(sharedGlobals:phoneCallCommonCats:phoneCallCommonCatPatterns:labelTemplatesProvider:tccTemplatesProvider:appInfoBuilder:)(v20);
  uint64_t v21 = OUTLINED_FUNCTION_35_11();
  default argument 4 of PhoneCallBaseCatTemplatingService.init(ducFamily:sharedGlobals:displayTextCats:phoneCallCommonCats:appInfoBuilder:labelTemplating:startCallCats:)(v23, v21, v22);
  *(void *)&uint64_t v51 = PhoneTCCFlowStrategy.__allocating_init(sharedGlobals:phoneCallCommonCats:phoneCallCommonCatPatterns:labelTemplatesProvider:tccTemplatesProvider:appInfoBuilder:)(&v51, v16, (uint64_t)v50, (uint64_t)&v49, (uint64_t)&v48, (uint64_t)&v47);
  swift_getWitnessTable();
  static RCHChildFlowFactoryHelper.makeRequestTCCAcceptanceFlow<A, B>(strategy:)();
  OUTLINED_FUNCTION_64_1();
  OUTLINED_FUNCTION_98_0();
  RCHChildFlowProducersAsync.requestTCCAcceptanceFlowProducer.setter();
  OUTLINED_FUNCTION_96_1();
  type metadata accessor for IncomingCallActionHandleIntentFlowStrategy();
  OUTLINED_FUNCTION_90_0();
  outlined init with copy of SignalProviding((uint64_t)v42, v24);
  outlined init with copy of SignalProviding((uint64_t)v1, (uint64_t)v50);
  OUTLINED_FUNCTION_59_2();
  default argument 2 of IncomingCallActionHandleIntentFlowStrategy.init(strategy:sharedGlobals:callStateNotificationManager:audioSessionManager:sbsManager:)();
  OUTLINED_FUNCTION_59_2();
  default argument 3 of IncomingCallActionHandleIntentFlowStrategy.init(strategy:sharedGlobals:callStateNotificationManager:audioSessionManager:sbsManager:)(v25);
  OUTLINED_FUNCTION_59_2();
  default argument 4 of IncomingCallActionHandleIntentFlowStrategy.init(strategy:sharedGlobals:callStateNotificationManager:audioSessionManager:sbsManager:)(v26);
  *(void *)&uint64_t v51 = IncomingCallActionHandleIntentFlowStrategy.__allocating_init(strategy:sharedGlobals:callStateNotificationManager:audioSessionManager:sbsManager:)();
  swift_getWitnessTable();
  OUTLINED_FUNCTION_33_7();
  static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)();
  OUTLINED_FUNCTION_64_1();
  unint64_t v41 = v6;
  uint64_t v46 = v12;
  RCHChildFlowProducersAsync.handleIntentFlowProducer.setter();
  OUTLINED_FUNCTION_96_1();
  type metadata accessor for IncomingCallActionContinueInAppStrategy();
  *(void *)&uint64_t v51 = UnsetRelationshipTemplatesWrapper.__allocating_init()();
  swift_getWitnessTable();
  OUTLINED_FUNCTION_33_7();
  static RCHChildFlowFactoryHelper.makeContinueInAppFlowWithAutomaticPunchOutProducer<A>(strategy:)();
  OUTLINED_FUNCTION_64_1();
  OUTLINED_FUNCTION_98_0();
  RCHChildFlowProducersAsync.continueInAppFlowProducer.setter();
  OUTLINED_FUNCTION_55_3();
  uint64_t v27 = type metadata accessor for PhoneIntentRCHFlowStrategy();
  outlined init with copy of SignalProviding((uint64_t)v1, (uint64_t)&v51);
  uint64_t v40 = v3;
  uint64_t v28 = PhoneIntentRCHFlowStrategy.__allocating_init(sharedGlobals:app:)(&v51, v3);
  uint64_t v30 = v1[3];
  uint64_t v29 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v30);
  uint64_t v31 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v29 + 104);
  swift_retain();
  v31(&v51, v30, v29);
  id v32 = v52;
  uint64_t v33 = v53;
  uint64_t v42 = __swift_project_boxed_opaque_existential_1(&v51, v52);
  v50[0] = v28;
  OUTLINED_FUNCTION_55_3();
  type metadata accessor for RCHChildFlowFactory();
  uint64_t v34 = v44;
  os_log_type_t v35 = v41;
  (*(void (**)(uint64_t, char *, uint64_t))(v44 + 16))(v43, v46, v41);
  os_log_type_t v36 = RCHChildFlowFactory.__allocating_init(producers:)();
  uint64_t v37 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 8);
  WitnessTable = swift_getWitnessTable();
  v37(v50, v36, v40, v45, v27, WitnessTable, v32, v33);
  swift_release();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v46, v35);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v51);
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_26_1();
}

uint64_t closure #1 in static PhoneCallFlowFactory.makeAddCallParticipantRCHFlow(intent:app:sharedGlobals:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[10] = a3;
  v4[11] = a4;
  v4[8] = a1;
  v4[9] = a2;
  type metadata accessor for CATOption();
  v4[12] = swift_task_alloc();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INAddCallParticipantIntent, INAddCallParticipantIntentResponse>);
  v4[13] = v5;
  v4[14] = *(void *)(v5 - 8);
  v4[15] = swift_task_alloc();
  return _swift_task_switch(closure #1 in static PhoneCallFlowFactory.makeAddCallParticipantRCHFlow(intent:app:sharedGlobals:), 0, 0);
}

uint64_t closure #1 in static PhoneCallFlowFactory.makeAddCallParticipantRCHFlow(intent:app:sharedGlobals:)()
{
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v15 = *(void *)(v0 + 104);
  uint64_t v4 = *(void **)(v0 + 72);
  uint64_t v5 = *(void **)(v0 + 64);
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INAddCallParticipantIntent);
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for INAddCallParticipantIntentResponse);
  swift_retain();
  id v6 = v5;
  id v7 = v4;
  IntentResolutionRecord.init(app:intent:intentResponse:)();
  outlined init with copy of SignalProviding(v3, v0 + 16);
  uint64_t v8 = type metadata accessor for AddCallParticipantCATPatternsExecutor();
  static CATOption.defaultMode.getter();
  uint64_t v9 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for AddCallParticipantHandleIntentFollowUpFlow();
  uint64_t v10 = OUTLINED_FUNCTION_21_0();
  uint64_t v11 = (uint64_t *)(v10
                  + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin42AddCallParticipantHandleIntentFollowUpFlow_patterns);
  v11[3] = v8;
  v11[4] = (uint64_t)&protocol witness table for AddCallParticipantCATPatternsExecutor;
  *uint64_t v11 = v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v10 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin42AddCallParticipantHandleIntentFollowUpFlow_rchRecord, v1, v15);
  outlined init with take of AppSelectionSignalComponent((long long *)(v0 + 16), v10 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin42AddCallParticipantHandleIntentFollowUpFlow_sharedGlobals);
  *(void *)(v0 + 56) = v10;
  lazy protocol witness table accessor for type AddCallParticipantHandleIntentFlowStrategy and conformance AddCallParticipantHandleIntentFlowStrategy(&lazy protocol witness table cache variable for type AddCallParticipantHandleIntentFollowUpFlow and conformance AddCallParticipantHandleIntentFollowUpFlow, (void (*)(uint64_t))type metadata accessor for AddCallParticipantHandleIntentFollowUpFlow);
  uint64_t v12 = Flow.eraseToAnyFlow()();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v13(v12);
}

uint64_t closure #2 in static PhoneCallFlowFactory.makeAddCallParticipantRCHFlow(intent:app:sharedGlobals:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for CATOption();
  __chkstk_darwin(v8 - 8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INAddCallParticipantIntent>);
  uint64_t v9 = (void *)ParameterResolutionRecord.result.getter();
  uint64_t v10 = (char *)[v9 unsupportedReason];

  if ((unint64_t)(v10 - 5) > 1)
  {
    if (specialized ParameterResolutionRecord<>.isUnsetRelationship.getter())
    {
      outlined init with copy of SignalProviding(a3, (uint64_t)&v19);
      [objc_allocWithZone((Class)CNContactStore) init];
      type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for CNContactStore);
      uint64_t v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = 0u;
      *(_OWORD *)(v18 + 32) = 0u;
      type metadata accessor for UnsetRelationshipTemplatesWrapper();
      swift_allocObject();
      type metadata accessor for PhoneCallDisplayTextCATs();
      static CATOption.defaultMode.getter();
      CATWrapper.__allocating_init(options:globals:)();
      type metadata accessor for PhoneCallCommonCATs();
      static CATOption.defaultMode.getter();
      CATWrapper.__allocating_init(options:globals:)();
      specialized ContactUnsetRelationshipFlowStrategy.init(sharedGlobals:contactStore:labelTemplates:unsetRelationshipTemplates:displayTextCatFamily:phoneCallCommonCats:)();
      uint64_t v13 = &demangling cache variable for type metadata for ContactUnsetRelationshipFlowStrategy<INAddCallParticipantIntent>;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactUnsetRelationshipFlowStrategy<INAddCallParticipantIntent>);
      type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for INAddCallParticipantIntentResponse);
      lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type ContactUnsetRelationshipFlowStrategy<INAddCallParticipantIntent> and conformance ContactUnsetRelationshipFlowStrategy<A>, &demangling cache variable for type metadata for ContactUnsetRelationshipFlowStrategy<INAddCallParticipantIntent>);
      uint64_t v14 = static RCHChildFlowFactoryHelper.makeUnsupportedUnsetRelationshipFlowProducer<A, B>(strategy:)();
    }
    else
    {
      outlined init with copy of SignalProviding(a3, (uint64_t)v20 + 8);
      *(void *)&v20[0] = a4;
      swift_retain();
      uint64_t v13 = &demangling cache variable for type metadata for ContactUnsupportedFlowStrategy<ParticipantOutputProvider>;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactUnsupportedFlowStrategy<ParticipantOutputProvider>);
      lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type ContactUnsupportedFlowStrategy<ParticipantOutputProvider> and conformance ContactUnsupportedFlowStrategy<A>, &demangling cache variable for type metadata for ContactUnsupportedFlowStrategy<ParticipantOutputProvider>);
      uint64_t v14 = static RCHChildFlowFactoryHelper.makeUnsupportedValueAndPromptFlowProducer<A>(strategy:)();
    }
    uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t))v14;
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v20, v13);
    uint64_t v12 = v15(a1, a2);
  }
  else
  {
    outlined init with copy of SignalProviding(a3, (uint64_t)v20);
    uint64_t v11 = swift_allocObject();
    outlined init with take of AppSelectionSignalComponent(v20, v11 + 16);
    uint64_t v12 = partial apply for specialized closure #1 in static OngoingCallFlowProducers.makeUnsupportedValueOfferFlowProducer<A, B>(sharedGlobals:)(a1, a2);
  }
  uint64_t v16 = v12;
  swift_release();
  return v16;
}

uint64_t specialized ContactNeedsDisambiguationFlowStrategy.__allocating_init(promptProvider:sharedGlobals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for CATOption();
  __chkstk_darwin(v3 - 8);
  outlined init with copy of SignalProviding(a2, (uint64_t)v15);
  type metadata accessor for PhoneCallDisplayTextCATs();
  static CATOption.defaultMode.getter();
  uint64_t v4 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for PhoneCallCommonCATs();
  static CATOption.defaultMode.getter();
  uint64_t v5 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for AppInfoBuilder();
  uint64_t v6 = swift_allocObject();
  type metadata accessor for StartCallCATs();
  static CATOption.defaultMode.getter();
  uint64_t v7 = CATWrapper.__allocating_init(options:globals:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallBaseCatTemplatingService<INAddCallParticipantIntent, INAddCallParticipantIntentResponse>);
  uint64_t v8 = swift_allocObject();
  specialized PhoneCallBaseCatTemplatingService.init(ducFamily:sharedGlobals:displayTextCats:phoneCallCommonCats:appInfoBuilder:labelTemplating:startCallCats:)(0xD000000000000010, 0x800000000048C8D0, (uint64_t)v15, v4, v5, v6, 0, 0, 0, 0, v7, v8, v14, v15[0], v15[1], v15[2], v15[3], v15[4], v15[5],
    v15[6],
    v15[7],
    v15[8],
    v15[9],
    (void *)v15[10]);
  uint64_t v10 = v9;
  outlined init with copy of SignalProviding(a2, (uint64_t)v15);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactNeedsDisambiguationFlowStrategy<ParticipantOutputProvider>);
  swift_allocObject();
  uint64_t v11 = swift_retain();
  uint64_t v12 = specialized ContactNeedsDisambiguationFlowStrategy.init(promptProvider:sharedGlobals:templatingService:cachedPromptResponse:)(v11, v15, v10, 0, 255);
  __swift_destroy_boxed_opaque_existential_1(a2);
  swift_release();
  return v12;
}

uint64_t closure #1 in static PhoneCallFlowFactory.makeAppResolutionFlowBeforeNextResolveFlowProducer<A>(delegate:app:sharedGlobal:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (specialized Sequence<>.contains(_:)(a6, (uint64_t)&outlined read-only object #0 of closure #1 in static PhoneCallFlowFactory.makeAppResolutionFlowBeforeNextResolveFlowProducer<A>(delegate:app:sharedGlobal:)))
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.siriPhone);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_0, v14, v15, "#PhoneCallFlowFactory makeAppResolutionFlowBeforeNextResolveFlowProducer: resolutionResultCode is needsDisambiguation or needsConfirmation, don't start app resolution again", v16, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  else
  {
    uint64_t v42 = a4;
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.siriPhone);
    swift_retain_n();
    id v19 = a3;
    swift_bridgeObjectRetain_n();
    id v20 = v19;
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v41 = a7;
      uint64_t v23 = swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      *(void *)&v46[0] = v39;
      *(_DWORD *)uint64_t v23 = 136315906;
      type metadata accessor for App();
      uint64_t v40 = a8;
      lazy protocol witness table accessor for type AddCallParticipantHandleIntentFlowStrategy and conformance AddCallParticipantHandleIntentFlowStrategy((unint64_t *)&lazy protocol witness table cache variable for type App and conformance App, (void (*)(uint64_t))&type metadata accessor for App);
      uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, (uint64_t *)v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 22) = 2080;
      uint64_t v26 = INIntent.debugDescriptionLite.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, (uint64_t *)v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 32) = 2080;
      swift_bridgeObjectRetain();
      v43[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, a5, (uint64_t *)v46);
      a8 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_0, v21, v22, "#PhoneCallFlowFactory makeAppResolutionFlowBeforeNextResolveFlowProducer: app:%s resolutionResultCode:%ld intent:%s parameterName: %s ", (uint8_t *)v23, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      a7 = v41;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_release_n();
    }
    outlined init with copy of SignalProviding(a8, (uint64_t)v46);
    uint64_t v28 = swift_retain();
    default argument 2 of PhoneCallFlow.init(state:sharedGlobals:appFinder:eligibleAppsFinder:)(v43, v28);
    type metadata accessor for AppResolutionBeforeResolveFlow(0);
    uint64_t v29 = (void *)swift_allocObject();
    uint64_t v30 = v44;
    uint64_t v31 = v45;
    uint64_t v32 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v43, v44);
    __chkstk_darwin(v32);
    uint64_t v34 = (char *)&v39 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v35 + 16))(v34);
    os_log_type_t v36 = specialized AppResolutionBeforeResolveFlow.init(previousTurnIntent:previouslyResolvedApp:sharedGlobals:appFinder:)(v20, a7, v46, (uint64_t)v34, v29, v30, v31);
    id v37 = v20;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
    *(void *)&v46[0] = v36;
    lazy protocol witness table accessor for type AddCallParticipantHandleIntentFlowStrategy and conformance AddCallParticipantHandleIntentFlowStrategy(&lazy protocol witness table cache variable for type AppResolutionBeforeResolveFlow and conformance AppResolutionBeforeResolveFlow, (void (*)(uint64_t))type metadata accessor for AppResolutionBeforeResolveFlow);
    uint64_t v17 = Flow.eraseToAnyValueFlow()();
    swift_release();
  }
  return v17;
}

uint64_t specialized SentinelConditionalFlow.init<A, B>(preconditionFlow:executableFlow:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  type metadata accessor for MainFlow();
  type metadata accessor for GuardFlow();
  lazy protocol witness table accessor for type AddCallParticipantHandleIntentFlowStrategy and conformance AddCallParticipantHandleIntentFlowStrategy(&lazy protocol witness table cache variable for type MainFlow and conformance MainFlow, (void (*)(uint64_t))type metadata accessor for MainFlow);
  uint64_t v5 = Flow.guarded<A>(by:)();
  outlined destroy of MainFlow(a2);
  swift_release();
  *(void *)(v3 + 16) = v5;
  return v3;
}

void *CallingIntentRCHFlowStrategy.init(sharedGlobals:appResolved:phoneCallDisplayTextCATsSimple:startCallCATsSimple:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  outlined init with take of AppSelectionSignalComponent(a1, (uint64_t)(v4 + 2));
  v4[7] = a2;
  v4[8] = a3;
  v4[9] = a4;
  return v4;
}

uint64_t specialized ContactNeedsDisambiguationFlowStrategy.init(promptProvider:sharedGlobals:templatingService:cachedPromptResponse:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  static UnlockDevicePolicy.default.getter();
  *(void *)(v6 + direct field offset for ContactNeedsDisambiguationFlowStrategy.personsToDisambiguate) = _swiftEmptyArrayStorage;
  uint64_t v12 = v6 + *(void *)(*(void *)v6 + 144);
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = -1;
  *(void *)(v6 + *(void *)(*(void *)v6 + 112)) = a1;
  outlined init with copy of SignalProviding((uint64_t)a2, v6 + *(void *)(*(void *)v6 + 120));
  *(void *)(v6 + *(void *)(*(void *)v6 + 128)) = a3;
  uint64_t v13 = a2[3];
  uint64_t v14 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v13);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 72))(v13, v14);
  outlined init with copy of SignalProviding(v15 + 120, (uint64_t)v20);
  swift_release();
  outlined init with take of AppSelectionSignalComponent(v20, v6 + *(void *)(*(void *)v6 + 136));
  uint64_t v16 = v6 + *(void *)(*(void *)v6 + 144);
  swift_beginAccess();
  uint64_t v17 = *(void **)v16;
  *(void *)uint64_t v16 = a4;
  unsigned __int8 v18 = *(unsigned char *)(v16 + 8);
  *(unsigned char *)(v16 + 8) = a5;
  outlined consume of ContactDisambiguationPromptResponse?(v17, v18);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a2);
  return v6;
}

uint64_t partial apply for closure #1 in static PhoneCallFlowFactory.makeAddCallParticipantRCHFlow(intent:app:sharedGlobals:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = partial apply for closure #1 in static PhoneCallFlowFactory.makeAddCallParticipantRCHFlow(intent:app:sharedGlobals:);
  uint64_t v4 = OUTLINED_FUNCTION_7_14();
  return closure #1 in static PhoneCallFlowFactory.makeAddCallParticipantRCHFlow(intent:app:sharedGlobals:)(v4, v5, v2, v0 + 24);
}

uint64_t partial apply for closure #1 in static PhoneCallFlowFactory.makeAddCallParticipantRCHFlow(intent:app:sharedGlobals:)(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t partial apply for closure #2 in static PhoneCallFlowFactory.makeAddCallParticipantRCHFlow(intent:app:sharedGlobals:)(uint64_t a1, uint64_t a2)
{
  return closure #2 in static PhoneCallFlowFactory.makeAddCallParticipantRCHFlow(intent:app:sharedGlobals:)(a1, a2, v2 + 16, *(void *)(v2 + 56));
}

uint64_t outlined bridged method (ob) of @objc PBCodable.dictionaryRepresentation()(void *a1)
{
  id v2 = [a1 dictionaryRepresentation];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined bridged method (ob) of @objc INStartCallIntent.faceTimeLink.getter(void *a1)
{
  id v2 = [a1 faceTimeLink];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t specialized InCallActionHandleIntentFlowStrategy.init(sharedGlobals:phoneCallBaseCatTemplatingService:aceViewProvider:nlContextProvider:canUseServerTTS:shouldShowDialogAfterIntentHandled:hangUpCallCATsSimple:responseGenerator:biomeEventSender:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17 = type metadata accessor for DialogPhase();
  __chkstk_darwin(v17 - 8);
  uint64_t v24 = type metadata accessor for ResponseFactory();
  unint64_t v25 = &protocol witness table for ResponseFactory;
  *(void *)&long long v23 = a8;
  uint64_t v21 = &type metadata for BiomeEventSender;
  os_log_type_t v22 = &protocol witness table for BiomeEventSender;
  *(void *)&long long v20 = a9;
  static DialogPhase.completion.getter();
  OutputGenerationManifest.init(dialogPhase:_:)();
  *(void *)(a10 + direct field offset for InCallActionHandleIntentFlowStrategy.cancellable) = 0;
  outlined init with take of AppSelectionSignalComponent(a1, a10 + 16);
  *(void *)(a10 + direct field offset for InCallActionHandleIntentFlowStrategy.phoneCallBaseCatTemplatingService) = a2;
  *(void *)(a10 + direct field offset for InCallActionHandleIntentFlowStrategy.nlContextProvider) = a4;
  *(unsigned char *)(a10 + direct field offset for InCallActionHandleIntentFlowStrategy.canUseServerTTS) = a5;
  *(unsigned char *)(a10 + direct field offset for InCallActionHandleIntentFlowStrategy.shouldShowDialogAfterIntentHandled) = a6;
  *(void *)(a10 + direct field offset for InCallActionHandleIntentFlowStrategy.aceViewProvider) = a3;
  *(void *)(a10 + 56) = a7;
  outlined init with take of AppSelectionSignalComponent(&v23, a10 + 64);
  outlined init with take of AppSelectionSignalComponent(&v20, a10 + 104);
  return a10;
}

void *specialized AppResolutionBeforeResolveFlow.init(previousTurnIntent:previouslyResolvedApp:sharedGlobals:appFinder:)(void *a1, uint64_t a2, long long *a3, _OWORD *a4, void *a5)
{
  a5[7] = &type metadata for AnnotatedAppFinder;
  a5[8] = &protocol witness table for AnnotatedAppFinder;
  uint64_t v10 = (_OWORD *)swift_allocObject();
  a5[3] = a2;
  a5[4] = v10;
  long long v11 = a4[1];
  v10[1] = *a4;
  long long v10[2] = v11;
  long long v12 = a4[3];
  v10[3] = a4[2];
  v10[4] = v12;
  a5[2] = a1;
  outlined init with take of AppSelectionSignalComponent(a3, (uint64_t)(a5 + 9));
  uint64_t v13 = (void *)((char *)a5 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin30AppResolutionBeforeResolveFlow_state);
  *uint64_t v13 = a1;
  v13[1] = a2;
  type metadata accessor for AppResolutionBeforeResolveFlow.State(0);
  swift_storeEnumTagMultiPayload();
  id v14 = a1;
  swift_retain();
  return a5;
}

void specialized PhoneTCCFlowStrategy.init(sharedGlobals:phoneCallCommonCats:phoneCallCommonCatPatterns:labelTemplatesProvider:tccTemplatesProvider:appInfoBuilder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void (*a22)(uint64_t, uint64_t *, uint64_t *, uint64_t *, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _UNKNOWN **, _UNKNOWN **))
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v51 = v22;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v50 = v31;
  uint64_t v52 = v32;
  uint64_t v34 = v33;
  v61[3] = &type metadata for LabelTemplatesProvider;
  v61[4] = &protocol witness table for LabelTemplatesProvider;
  uint64_t v35 = (void *)swift_allocObject();
  v61[0] = v35;
  v35[2] = v30;
  v35[3] = v28;
  v35[4] = v26;
  v35[5] = v24;
  v60[3] = &type metadata for TCCTemplatesProvider;
  v60[4] = &protocol witness table for TCCTemplatesProvider;
  outlined init with copy of SignalProviding((uint64_t)v34, a21 + 272);
  outlined init with copy of SignalProviding((uint64_t)v61, a21 + 192);
  outlined init with copy of SignalProviding((uint64_t)v60, a21 + 232);
  uint64_t v36 = v34[3];
  uint64_t v37 = v34[4];
  __swift_project_boxed_opaque_existential_1(v34, v36);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v37 + 136))(v57, v36, v37);
  uint64_t v39 = v58;
  uint64_t v38 = v59;
  uint64_t v40 = __swift_project_boxed_opaque_existential_1(v57, v58);
  v56[3] = v39;
  uint64_t v41 = *(void *)(v38 + 8);
  v56[4] = v41;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v56);
  id v43 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v39 - 8) + 16);
  v43(boxed_opaque_existential_1, v40, v39);
  uint64_t v44 = v34[3];
  uint64_t v45 = v34[4];
  uint64_t v46 = __swift_project_boxed_opaque_existential_1(v34, v44);
  v47 = (*(void *(**)(void *__return_ptr, uint64_t, uint64_t))(v45 + 8))(v55, v44, v45);
  uint64_t v54 = v50;
  __chkstk_darwin(v47);
  OUTLINED_FUNCTION_65_2();
  v43(v46, boxed_opaque_existential_1, v39);
  uint64_t v53 = v51;
  uint64_t v48 = type metadata accessor for PhoneCallCommonCATPatternsExecutor();
  uint64_t v49 = type metadata accessor for AppInfoBuilder();
  swift_retain();
  swift_retain();
  a22(v52, &v54, v46, &v53, v55, a21, v39, v48, v49, v41, &protocol witness table for PhoneCallCommonCATPatternsExecutor, &protocol witness table for AppInfoBuilder);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v61);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_26_1();
}

void specialized PhoneCallBaseCatTemplatingService.init(ducFamily:sharedGlobals:displayTextCats:phoneCallCommonCats:appInfoBuilder:labelTemplating:startCallCats:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  void (*v42)(long long *__return_ptr, uint64_t, uint64_t);
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void v60[7];
  long long v61[2];
  void v62[6];

  OUTLINED_FUNCTION_24_0();
  uint64_t v58 = v23;
  uint64_t v59 = v22;
  uint64_t v25 = v24;
  uint64_t v56 = v26;
  uint64_t v57 = v27;
  uint64_t v29 = v28;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DucTemplatingLocalContext?);
  uint64_t v31 = OUTLINED_FUNCTION_11_0(v30);
  __chkstk_darwin(v31);
  OUTLINED_FUNCTION_3_1();
  uint64_t v55 = v32;
  uint64_t v54 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_0_0();
  uint64_t v34 = v33;
  __chkstk_darwin(v35);
  OUTLINED_FUNCTION_11_25();
  v62[3] = type metadata accessor for AppInfoBuilder();
  v62[4] = &protocol witness table for AppInfoBuilder;
  v62[0] = v25;
  uint64_t v36 = (void *)((char *)a21
                 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a21 + 16));
  *uint64_t v36 = 0x3D65737561705C1BLL;
  v36[1] = 0xEC0000005C303532;
  OUTLINED_FUNCTION_1_45();
  uint64_t v38 = (char *)a21 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + v37 + 56);
  *(_OWORD *)uint64_t v38 = 0u;
  *((_OWORD *)v38 + 1) = 0u;
  *((void *)v38 + 4) = 0;
  OUTLINED_FUNCTION_1_45();
  outlined init with copy of SignalProviding((uint64_t)v29, (uint64_t)a21 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + v39 + 72));
  uint64_t v40 = v29[3];
  uint64_t v41 = v29[4];
  __swift_project_boxed_opaque_existential_1(v29, v40);
  uint64_t v42 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v41 + 8);
  swift_retain();
  v42(v61, v40, v41);
  id v43 = (void *)((char *)a21
                 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a21 + 40));
  outlined init with take of AppSelectionSignalComponent(v61, (uint64_t)v43);
  OUTLINED_FUNCTION_1_45();
  *(void *)((char *)a21 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + v44 + 24)) = v56;
  OUTLINED_FUNCTION_1_45();
  *(void *)((char *)a21 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + v45 + 32)) = v57;
  OUTLINED_FUNCTION_1_45();
  outlined init with copy of SignalProviding((uint64_t)v62, (uint64_t)a21 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + v46 + 48));
  OUTLINED_FUNCTION_1_45();
  outlined init with copy of SignalProviding(v59, (uint64_t)a21 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + v47 + 64));
  OUTLINED_FUNCTION_1_45();
  *(void *)((char *)a21 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + v48 + 80)) = v58;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  __swift_project_boxed_opaque_existential_1(v43, v43[3]);
  OUTLINED_FUNCTION_89_2();
  dispatch thunk of DeviceState.siriLocale.getter();
  *(void *)&v61[0] = Locale.identifier.getter();
  *((void *)&v61[0] + 1) = v49;
  v60[0] = 45;
  v60[1] = 0xE100000000000000;
  void v60[5] = 95;
  v60[6] = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v21, v54);
  type metadata accessor for INIntentSlotValueType(0);
  lazy protocol witness table accessor for type AddCallParticipantHandleIntentFlowStrategy and conformance AddCallParticipantHandleIntentFlowStrategy(&lazy protocol witness table cache variable for type INIntentSlotValueType and conformance INIntentSlotValueType, type metadata accessor for INIntentSlotValueType);
  Dictionary.init(dictionaryLiteral:)();
  uint64_t v50 = v29[4];
  __swift_project_boxed_opaque_existential_1(v29, v29[3]);
  uint64_t v51 = OUTLINED_FUNCTION_94_0();
  v52(v51, v50);
  outlined init with copy of SignalProviding((uint64_t)v43, (uint64_t)v60);
  uint64_t v53 = type metadata accessor for DucTemplatingLocalContext();
  __swift_storeEnumTagSinglePayload(v55, 1, 1, v53);
  DucTemplatingService.init(ducFamily:locale:extensionValueTypeNamesByValueType:aceServiceInvoker:deviceState:localContext:)();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v59);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_26_1();
}

void specialized CallingIntentBaseFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:startCallCATsSimple:phoneCallCommonCATs:phoneCallCommonCATsSimple:phoneCallCommonCatPatterns:phoneCallDisplayTextCATsSimple:responseGenerator:siriKitEventSender:appInfoBuilder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25)
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v46 = v25;
  uint64_t v27 = v26;
  uint64_t v45 = v28;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  uint64_t v39 = type metadata accessor for DialogPhase();
  uint64_t v40 = OUTLINED_FUNCTION_11_0(v39);
  __chkstk_darwin(v40);
  OUTLINED_FUNCTION_5_1();
  v53[3] = type metadata accessor for StartCallCATPatternsExecutor(0);
  v53[4] = &protocol witness table for StartCallCATPatternsExecutor;
  v53[0] = v34;
  v52[3] = type metadata accessor for PhoneCallCommonCATPatternsExecutor();
  v52[4] = &protocol witness table for PhoneCallCommonCATPatternsExecutor;
  v52[0] = v27;
  uint64_t v50 = type metadata accessor for AppInfoBuilder();
  uint64_t v51 = &protocol witness table for AppInfoBuilder;
  *(void *)&long long v49 = a23;
  v48[3] = type metadata accessor for ResponseFactory();
  v48[4] = &protocol witness table for ResponseFactory;
  v48[0] = a21;
  static DialogPhase.completion.getter();
  OutputGenerationManifest.init(dialogPhase:_:)();
  a24[2] = v38;
  outlined init with copy of SignalProviding(v38 + *a25, (uint64_t)(a24 + 3));
  a24[8] = v36;
  outlined init with copy of SignalProviding((uint64_t)v53, (uint64_t)(a24 + 9));
  a24[14] = v32;
  a24[15] = v30;
  a24[16] = v45;
  outlined init with copy of SignalProviding((uint64_t)v52, (uint64_t)(a24 + 17));
  a24[22] = v46;
  outlined init with copy of SignalProviding((uint64_t)v48, (uint64_t)(a24 + 23));
  outlined init with copy of SignalProviding(a22, (uint64_t)(a24 + 28));
  uint64_t v41 = a24[6];
  uint64_t v42 = a24[7];
  id v43 = __swift_project_boxed_opaque_existential_1(a24 + 3, v41);
  uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v42 + 72);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v44(v41, v42);
  OUTLINED_FUNCTION_93_1();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
  outlined init with copy of SignalProviding((uint64_t)(v43 + 15), (uint64_t)v47);
  swift_release();
  outlined init with take of AppSelectionSignalComponent(v47, (uint64_t)(a24 + 33));
  outlined init with take of AppSelectionSignalComponent(&v49, (uint64_t)(a24 + 38));
  OUTLINED_FUNCTION_26_1();
}

#error "128F38: call analysis failed (funcsize=86)"

#error "129028: call analysis failed (funcsize=55)"

#error "129120: call analysis failed (funcsize=60)"

#error "129220: call analysis failed (funcsize=63)"

#error "1292EC: call analysis failed (funcsize=50)"

uint64_t specialized StartAudioCallRCHFlowDelegate.init(sharedGlobals:appResolved:biomeEventSender:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized StartAudioCallRCHFlowDelegate.init(sharedGlobals:appResolved:biomeEventSender:)(a1, a2, a3, a4, &direct field offset for StartAudioCallRCHFlowDelegate.sharedGlobals, &direct field offset for StartAudioCallRCHFlowDelegate.appResolved, &direct field offset for StartAudioCallRCHFlowDelegate.biomeEventSender);
}

uint64_t specialized StartVideoCallRCHFlowDelegate.init(sharedGlobals:appResolved:biomeEventSender:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized StartAudioCallRCHFlowDelegate.init(sharedGlobals:appResolved:biomeEventSender:)(a1, a2, a3, a4, &direct field offset for StartVideoCallRCHFlowDelegate.sharedGlobals, &direct field offset for StartVideoCallRCHFlowDelegate.appResolved, &direct field offset for StartVideoCallRCHFlowDelegate.biomeEventSender);
}

uint64_t specialized StartAudioCallRCHFlowDelegate.init(sharedGlobals:appResolved:biomeEventSender:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7)
{
  v14[3] = &type metadata for BiomeEventSender;
  v14[4] = &protocol witness table for BiomeEventSender;
  v14[0] = a3;
  outlined init with copy of SignalProviding(a1, a4 + *a5);
  *(void *)(a4 + *a6) = a2;
  outlined init with copy of SignalProviding((uint64_t)v14, a4 + *a7);
  uint64_t v12 = BaseRCHFlowDelegate.init()();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v12;
}

void specialized static PhoneCallFlowFactory.makeIncomingCallRCHFlow<A, B>(strategy:intent:app:sharedGlobals:)()
{
  void (*v27)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(long long *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  void *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  long long v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t *, uint64_t *, uint64_t *, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _UNKNOWN **, _UNKNOWN **);
  long long v46[3];

  OUTLINED_FUNCTION_24_0();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v40 = v4;
  uint64_t v37 = v5;
  uint64_t v6 = type metadata accessor for CATOption();
  uint64_t v7 = OUTLINED_FUNCTION_11_0(v6);
  __chkstk_darwin(v7);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INAnswerCallIntent, INAnswerCallIntentResponse>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v39 = v9;
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_5_8();
  uint64_t v38 = v11;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v12);
  id v14 = (char *)&v35 - v13;
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for INAnswerCallIntent);
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for INAnswerCallIntentResponse);
  RCHChildFlowProducersAsync.init()();
  OUTLINED_FUNCTION_7_14();
  static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B>(app:)();
  RCHChildFlowProducersAsync.appResolutionFlowProducer.setter();
  outlined init with copy of SignalProviding((uint64_t)v1, (uint64_t)&v41);
  type metadata accessor for PhoneCallCommonCATs();
  static CATOption.defaultMode.getter();
  uint64_t v15 = CATWrapper.__allocating_init(options:globals:)();
  uint64_t v16 = type metadata accessor for PhoneCallCommonCATPatternsExecutor();
  static CATOption.defaultMode.getter();
  CATWrapper.__allocating_init(options:globals:)();
  OUTLINED_FUNCTION_62_0();
  type metadata accessor for AppInfoBuilder();
  uint64_t v17 = OUTLINED_FUNCTION_18_17();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneTCCFlowStrategy<INAnswerCallIntent, INAnswerCallIntentResponse>);
  uint64_t v18 = swift_allocObject();
  specialized PhoneTCCFlowStrategy.init(sharedGlobals:phoneCallCommonCats:phoneCallCommonCatPatterns:labelTemplatesProvider:tccTemplatesProvider:appInfoBuilder:)((uint64_t)&v41, v15, v16, 0, 0, 0, 0, v17, v18, (uint64_t)specialized PhoneCallStrategy.init(catFamily:catPatternFamily:responseGenerator:appInfoBuilder:deviceState:), (uint64_t)v35, (uint64_t)v36, v37, v38, v39, v40, v41, *((uint64_t *)&v41 + 1), v42,
    v43,
    v44,
    v45);
  *(void *)&uint64_t v41 = v19;
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type PhoneTCCFlowStrategy<INAnswerCallIntent, INAnswerCallIntentResponse> and conformance PhoneTCCFlowStrategy<A, B>, &demangling cache variable for type metadata for PhoneTCCFlowStrategy<INAnswerCallIntent, INAnswerCallIntentResponse>);
  static RCHChildFlowFactoryHelper.makeRequestTCCAcceptanceFlow<A, B>(strategy:)();
  OUTLINED_FUNCTION_61_3();
  OUTLINED_FUNCTION_52_3();
  RCHChildFlowProducersAsync.requestTCCAcceptanceFlowProducer.setter();
  OUTLINED_FUNCTION_45_5();
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  uint64_t v20 = static CallStateNotificationManager.instance;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IncomingCallActionHandleIntentFlowStrategy<INAnswerCallIntent, INAnswerCallIntentResponse>);
  uint64_t v21 = (void *)swift_allocObject();
  outlined init with copy of AnswerCallOutputStrategy(v37, (uint64_t)&v41);
  *(void *)&uint64_t v41 = specialized IncomingCallActionHandleIntentFlowStrategy.init(strategy:sharedGlobals:callStateNotificationManager:audioSessionManager:sbsManager:)(&v41, v46, v20, v21);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type IncomingCallActionHandleIntentFlowStrategy<INAnswerCallIntent, INAnswerCallIntentResponse> and conformance IncomingCallActionHandleIntentFlowStrategy<A, B>, &demangling cache variable for type metadata for IncomingCallActionHandleIntentFlowStrategy<INAnswerCallIntent, INAnswerCallIntentResponse>);
  swift_retain();
  static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)();
  swift_release();
  OUTLINED_FUNCTION_101();
  RCHChildFlowProducersAsync.handleIntentFlowProducer.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IncomingCallActionContinueInAppStrategy<INAnswerCallIntent, INAnswerCallIntentResponse>);
  *(void *)&uint64_t v41 = OUTLINED_FUNCTION_18_17();
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type IncomingCallActionContinueInAppStrategy<INAnswerCallIntent, INAnswerCallIntentResponse> and conformance IncomingCallActionContinueInAppStrategy<A, B>, &demangling cache variable for type metadata for IncomingCallActionContinueInAppStrategy<INAnswerCallIntent, INAnswerCallIntentResponse>);
  static RCHChildFlowFactoryHelper.makeContinueInAppFlowWithAutomaticPunchOutProducer<A>(strategy:)();
  swift_release();
  OUTLINED_FUNCTION_101();
  RCHChildFlowProducersAsync.continueInAppFlowProducer.setter();
  outlined init with copy of SignalProviding((uint64_t)v1, (uint64_t)&v41);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneIntentRCHFlowStrategy<INAnswerCallIntent, INAnswerCallIntentResponse>);
  uint64_t v22 = OUTLINED_FUNCTION_60_1();
  outlined init with take of AppSelectionSignalComponent(&v41, v22 + 16);
  *(void *)(v22 + 56) = v3;
  uint64_t v23 = v1[3];
  uint64_t v24 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v23);
  uint64_t v25 = v14;
  uint64_t v36 = v14;
  uint64_t v26 = v3;
  uint64_t v27 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v24 + 104);
  swift_retain();
  v27(&v41, v23, v24);
  uint64_t v28 = v43;
  uint64_t v29 = v44;
  uint64_t v35 = __swift_project_boxed_opaque_existential_1(&v41, v43);
  *(void *)&v46[0] = v22;
  uint64_t v30 = v39;
  (*(void (**)(uint64_t, char *, uint64_t))(v39 + 16))(v38, v25, v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowFactory<INAnswerCallIntent, INAnswerCallIntentResponse>);
  OUTLINED_FUNCTION_21_0();
  uint64_t v31 = RCHChildFlowFactory.init(producers:)();
  uint64_t v32 = v8;
  uint64_t v33 = *(void (**)(long long *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 8);
  uint64_t v34 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type PhoneIntentRCHFlowStrategy<INAnswerCallIntent, INAnswerCallIntentResponse> and conformance PhoneIntentRCHFlowStrategy<A, B>, &demangling cache variable for type metadata for PhoneIntentRCHFlowStrategy<INAnswerCallIntent, INAnswerCallIntentResponse>);
  v33(v46, v31, v26, v40, v37, v34, v28, v29);
  swift_release();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v36, v32);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v41);
  OUTLINED_FUNCTION_26_1();
}

void specialized IncomingCallFlow.__allocating_init(rchFlow:app:strategy:sharedGlobals:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallFlowState<INAnswerCallIntent, INAnswerCallIntentResponse>);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_53();
  memcpy(v10, v4, sizeof(v10));
  v8[0] = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyValueFlow<RCHFlowResult<INAnswerCallIntent, INAnswerCallIntentResponse>>);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type AnyValueFlow<RCHFlowResult<INAnswerCallIntent, INAnswerCallIntentResponse>> and conformance AnyValueFlow<A>, &demangling cache variable for type metadata for AnyValueFlow<RCHFlowResult<INAnswerCallIntent, INAnswerCallIntentResponse>>);
  *uint64_t v0 = Flow.eraseToAnyValueFlow()();
  swift_storeEnumTagMultiPayload();
  outlined init with copy of SignalProviding(v2, (uint64_t)&v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IncomingCallFlow<INAnswerCallIntent, INAnswerCallIntentResponse>);
  OUTLINED_FUNCTION_21_0();
  outlined init with copy of AnswerCallOutputStrategy((uint64_t)v10, (uint64_t)v8);
  specialized IncomingCallFlow.init(state:app:strategy:sharedGlobals:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v2);
  outlined destroy of AnswerCallOutputStrategy((uint64_t)v10);
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_26_1();
}

uint64_t specialized static PhoneCallFlowFactory.makeIncomingCallRCHFlow<A, B>(strategy:intent:app:sharedGlobals:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void (*v24)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(long long *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  void *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  long long v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t *, uint64_t *, uint64_t *, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _UNKNOWN **, _UNKNOWN **);
  long long v45[2];

  uint64_t v39 = a2;
  uint64_t v36 = a1;
  uint64_t v6 = type metadata accessor for CATOption();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INIdentifyIncomingCallerIntent, INIdentifyIncomingCallerIntentResponse>);
  uint64_t v38 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v37 = (uint64_t)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v34 - v10;
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for INIdentifyIncomingCallerIntent);
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for INIdentifyIncomingCallerIntentResponse);
  RCHChildFlowProducersAsync.init()();
  static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B>(app:)();
  RCHChildFlowProducersAsync.appResolutionFlowProducer.setter();
  outlined init with copy of SignalProviding((uint64_t)a4, (uint64_t)&v40);
  type metadata accessor for PhoneCallCommonCATs();
  static CATOption.defaultMode.getter();
  uint64_t v12 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for PhoneCallCommonCATPatternsExecutor();
  static CATOption.defaultMode.getter();
  uint64_t v13 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for AppInfoBuilder();
  uint64_t v14 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneTCCFlowStrategy<INIdentifyIncomingCallerIntent, INIdentifyIncomingCallerIntentResponse>);
  uint64_t v15 = swift_allocObject();
  specialized PhoneTCCFlowStrategy.init(sharedGlobals:phoneCallCommonCats:phoneCallCommonCatPatterns:labelTemplatesProvider:tccTemplatesProvider:appInfoBuilder:)((uint64_t)&v40, v12, v13, 0, 0, 0, 0, v14, v15, (uint64_t)specialized PhoneCallStrategy.init(catFamily:catPatternFamily:responseGenerator:appInfoBuilder:deviceState:), (uint64_t)v34, (uint64_t)v35, v36, v37, v38, v39, v40, *((uint64_t *)&v40 + 1), v41,
    v42,
    v43,
    v44);
  *(void *)&uint64_t v40 = v16;
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type PhoneTCCFlowStrategy<INIdentifyIncomingCallerIntent, INIdentifyIncomingCallerIntentResponse> and conformance PhoneTCCFlowStrategy<A, B>, &demangling cache variable for type metadata for PhoneTCCFlowStrategy<INIdentifyIncomingCallerIntent, INIdentifyIncomingCallerIntentResponse>);
  static RCHChildFlowFactoryHelper.makeRequestTCCAcceptanceFlow<A, B>(strategy:)();
  swift_release();
  RCHChildFlowProducersAsync.requestTCCAcceptanceFlowProducer.setter();
  outlined init with copy of SignalProviding((uint64_t)a4, (uint64_t)v45);
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  uint64_t v17 = static CallStateNotificationManager.instance;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IncomingCallActionHandleIntentFlowStrategy<INIdentifyIncomingCallerIntent, INIdentifyIncomingCallerIntentResponse>);
  uint64_t v18 = (void *)swift_allocObject();
  outlined init with copy of IdentifyIncomingCallerOutputStrategy(v36, (uint64_t)&v40);
  *(void *)&uint64_t v40 = specialized IncomingCallActionHandleIntentFlowStrategy.init(strategy:sharedGlobals:callStateNotificationManager:audioSessionManager:sbsManager:)((uint64_t)&v40, v45, v17, v18);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type IncomingCallActionHandleIntentFlowStrategy<INIdentifyIncomingCallerIntent, INIdentifyIncomingCallerIntentResponse> and conformance IncomingCallActionHandleIntentFlowStrategy<A, B>, &demangling cache variable for type metadata for IncomingCallActionHandleIntentFlowStrategy<INIdentifyIncomingCallerIntent, INIdentifyIncomingCallerIntentResponse>);
  swift_retain();
  static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)();
  swift_release();
  RCHChildFlowProducersAsync.handleIntentFlowProducer.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IncomingCallActionContinueInAppStrategy<INIdentifyIncomingCallerIntent, INIdentifyIncomingCallerIntentResponse>);
  *(void *)&uint64_t v40 = swift_allocObject();
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type IncomingCallActionContinueInAppStrategy<INIdentifyIncomingCallerIntent, INIdentifyIncomingCallerIntentResponse> and conformance IncomingCallActionContinueInAppStrategy<A, B>, &demangling cache variable for type metadata for IncomingCallActionContinueInAppStrategy<INIdentifyIncomingCallerIntent, INIdentifyIncomingCallerIntentResponse>);
  static RCHChildFlowFactoryHelper.makeContinueInAppFlowWithAutomaticPunchOutProducer<A>(strategy:)();
  swift_release();
  RCHChildFlowProducersAsync.continueInAppFlowProducer.setter();
  outlined init with copy of SignalProviding((uint64_t)a4, (uint64_t)&v40);
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneIntentRCHFlowStrategy<INIdentifyIncomingCallerIntent, INIdentifyIncomingCallerIntentResponse>);
  uint64_t v19 = swift_allocObject();
  outlined init with take of AppSelectionSignalComponent(&v40, v19 + 16);
  *(void *)(v19 + 56) = a3;
  uint64_t v20 = a4[3];
  uint64_t v21 = a4[4];
  __swift_project_boxed_opaque_existential_1(a4, v20);
  uint64_t v22 = v11;
  uint64_t v35 = v11;
  uint64_t v23 = a3;
  uint64_t v24 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v21 + 104);
  swift_retain();
  v24(&v40, v20, v21);
  uint64_t v25 = v42;
  uint64_t v26 = v43;
  uint64_t v34 = __swift_project_boxed_opaque_existential_1(&v40, v42);
  *(void *)&v45[0] = v19;
  uint64_t v27 = v38;
  (*(void (**)(uint64_t, char *, uint64_t))(v38 + 16))(v37, v22, v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowFactory<INIdentifyIncomingCallerIntent, INIdentifyIncomingCallerIntentResponse>);
  swift_allocObject();
  uint64_t v28 = RCHChildFlowFactory.init(producers:)();
  uint64_t v29 = v7;
  uint64_t v30 = *(uint64_t (**)(long long *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 8);
  uint64_t v31 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type PhoneIntentRCHFlowStrategy<INIdentifyIncomingCallerIntent, INIdentifyIncomingCallerIntentResponse> and conformance PhoneIntentRCHFlowStrategy<A, B>, &demangling cache variable for type metadata for PhoneIntentRCHFlowStrategy<INIdentifyIncomingCallerIntent, INIdentifyIncomingCallerIntentResponse>);
  uint64_t v32 = v30(v45, v28, v23, v39, v36, v31, v25, v26);
  swift_release();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v35, v29);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v40);
  return v32;
}

uint64_t outlined init with copy of IdentifyIncomingCallerOutputStrategy(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t specialized IncomingCallFlow.__allocating_init(rchFlow:app:strategy:sharedGlobals:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallFlowState<INIdentifyIncomingCallerIntent, INIdentifyIncomingCallerIntentResponse>);
  __chkstk_darwin(v7);
  uint64_t v9 = (void *)((char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  long long v10 = *(_OWORD *)(a3 + 16);
  v15[0] = *(_OWORD *)a3;
  v15[1] = v10;
  v15[2] = *(_OWORD *)(a3 + 32);
  char v16 = *(unsigned char *)(a3 + 48);
  v13[0] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyValueFlow<RCHFlowResult<INIdentifyIncomingCallerIntent, INIdentifyIncomingCallerIntentResponse>>);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type AnyValueFlow<RCHFlowResult<INIdentifyIncomingCallerIntent, INIdentifyIncomingCallerIntentResponse>> and conformance AnyValueFlow<A>, &demangling cache variable for type metadata for AnyValueFlow<RCHFlowResult<INIdentifyIncomingCallerIntent, INIdentifyIncomingCallerIntentResponse>>);
  *uint64_t v9 = Flow.eraseToAnyValueFlow()();
  swift_storeEnumTagMultiPayload();
  outlined init with copy of SignalProviding(a4, (uint64_t)v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IncomingCallFlow<INIdentifyIncomingCallerIntent, INIdentifyIncomingCallerIntentResponse>);
  swift_allocObject();
  outlined init with copy of IdentifyIncomingCallerOutputStrategy((uint64_t)v15, (uint64_t)v13);
  uint64_t v11 = specialized IncomingCallFlow.init(state:app:strategy:sharedGlobals:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a4);
  outlined destroy of IdentifyIncomingCallerOutputStrategy((uint64_t)v15);
  return v11;
}

uint64_t outlined destroy of IdentifyIncomingCallerOutputStrategy(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of AnswerCallOutputStrategy(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of AnswerCallOutputStrategy(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of MainFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MainFlow();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of MainFlow(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MainFlow();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for PhoneCallFlowFactory.PhoneRCHFlowProducers()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_12A444()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t partial apply for closure #1 in static PhoneCallFlowFactory.getGenericStartCallProducers<A>(delegate:app:)(void *a1, uint64_t a2)
{
  return closure #1 in static PhoneCallFlowFactory.getGenericStartCallProducers<A>(delegate:app:)(a1, a2, v2[4], v2[2], v2[3]);
}

uint64_t partial apply for closure #2 in static PhoneCallFlowFactory.getGenericStartCallProducers<A>(delegate:app:)(void *a1, uint64_t a2)
{
  return closure #2 in static PhoneCallFlowFactory.getGenericStartCallProducers<A>(delegate:app:)(a1, a2, v2[4], v2[2], v2[3]);
}

uint64_t sub_12A494()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t partial apply for specialized closure #1 in static CallingIntentContinueInAppFlow.makeProducer(sharedGlobals:)(uint64_t a1, uint64_t a2)
{
  return specialized closure #1 in static CallingIntentContinueInAppFlow.makeProducer(sharedGlobals:)(a1, a2, v2 + 16);
}

uint64_t partial apply for closure #1 in static PhoneCallFlowFactory.getStartCallProducers(skIntent:delegate:app:sharedGlobals:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static PhoneCallFlowFactory.getStartCallProducers(skIntent:delegate:app:sharedGlobals:)(a1, a2, (char **)(v2 + 16), *(void *)(v2 + 56));
}

uint64_t outlined init with copy of ResponseMode?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseMode?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_12A54C()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  if (*(void *)(v0 + 56)) {
    swift_release();
  }
  swift_release();
  uint64_t v1 = OUTLINED_FUNCTION_74_2();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t partial apply for closure #3 in static PhoneCallFlowFactory.getStartCallProducers(skIntent:delegate:app:sharedGlobals:)(uint64_t a1, uint64_t a2)
{
  return closure #3 in static PhoneCallFlowFactory.getStartCallProducers(skIntent:delegate:app:sharedGlobals:)(a1, a2, v2 + 16, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 56), *(void *)(v2 + 64), *(void *)(v2 + 72));
}

uint64_t sub_12A5A4()
{
  return objectdestroy_21Tm(64);
}

uint64_t partial apply for closure #2 in static PhoneCallFlowFactory.getStartCallProducers(skIntent:delegate:app:sharedGlobals:)(uint64_t a1, uint64_t a2)
{
  return closure #2 in static PhoneCallFlowFactory.getStartCallProducers(skIntent:delegate:app:sharedGlobals:)(a1, a2, v2 + 16, *(void **)(v2 + 56));
}

ValueMetadata *type metadata accessor for PhoneCallFlowFactory()
{
  return &type metadata for PhoneCallFlowFactory;
}

uint64_t type metadata completion function for PhoneCallFlowFactory.PhoneRCHFlowProducers()
{
  uint64_t result = type metadata accessor for RCHChildFlowProducers();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for RCHChildFlowProducersAsync();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PhoneCallFlowFactory.PhoneRCHFlowProducers(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for RCHChildFlowProducers();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 36);
    uint64_t v9 = (char *)a1 + v8;
    long long v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for RCHChildFlowProducersAsync();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t destroy for PhoneCallFlowFactory.PhoneRCHFlowProducers(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RCHChildFlowProducers();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 36);
  uint64_t v6 = type metadata accessor for RCHChildFlowProducersAsync();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

uint64_t initializeWithCopy for PhoneCallFlowFactory.PhoneRCHFlowProducers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for RCHChildFlowProducers();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for RCHChildFlowProducersAsync();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t assignWithCopy for PhoneCallFlowFactory.PhoneRCHFlowProducers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for RCHChildFlowProducers();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for RCHChildFlowProducersAsync();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for PhoneCallFlowFactory.PhoneRCHFlowProducers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for RCHChildFlowProducers();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for RCHChildFlowProducersAsync();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for PhoneCallFlowFactory.PhoneRCHFlowProducers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for RCHChildFlowProducers();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for RCHChildFlowProducersAsync();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PhoneCallFlowFactory.PhoneRCHFlowProducers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_12ABF8);
}

uint64_t sub_12ABF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for RCHChildFlowProducers();
  OUTLINED_FUNCTION_1_6();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v8 = type metadata accessor for RCHChildFlowProducersAsync();
    uint64_t v9 = a1 + *(int *)(a3 + 36);
  }

  return __swift_getEnumTagSinglePayload(v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for PhoneCallFlowFactory.PhoneRCHFlowProducers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_12ACA4);
}

uint64_t sub_12ACA4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for RCHChildFlowProducers();
  OUTLINED_FUNCTION_1_6();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    uint64_t v10 = type metadata accessor for RCHChildFlowProducersAsync();
    uint64_t v11 = a1 + *(int *)(a4 + 36);
  }

  return __swift_storeEnumTagSinglePayload(v11, a2, a2, v10);
}

void *specialized IncomingCallActionHandleIntentFlowStrategy.init(strategy:sharedGlobals:callStateNotificationManager:audioSessionManager:sbsManager:)(uint64_t a1, long long *a2, uint64_t a3, void *a4)
{
  a4[5] = &type metadata for IdentifyIncomingCallerOutputStrategy;
  a4[6] = &protocol witness table for IdentifyIncomingCallerOutputStrategy;
  uint64_t v8 = swift_allocObject();
  a4[2] = v8;
  long long v9 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v8 + 32) = v9;
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(a1 + 32);
  *(unsigned char *)(v8 + 64) = *(unsigned char *)(a1 + 48);
  a4[10] = type metadata accessor for CallStateNotificationManager();
  a4[11] = &protocol witness table for CallStateNotificationManager;
  a4[7] = a3;
  a4[20] = &type metadata for AudioSessionManager;
  a4[21] = &protocol witness table for AudioSessionManager;
  a4[25] = &type metadata for SpringBoardServicesManager;
  a4[26] = &protocol witness table for SpringBoardServicesManager;
  outlined init with take of AppSelectionSignalComponent(a2, (uint64_t)(a4 + 12));
  return a4;
}

void *specialized IncomingCallActionHandleIntentFlowStrategy.init(strategy:sharedGlobals:callStateNotificationManager:audioSessionManager:sbsManager:)(const void *a1, long long *a2, uint64_t a3, void *a4)
{
  a4[5] = &type metadata for AnswerCallOutputStrategy;
  a4[6] = &protocol witness table for AnswerCallOutputStrategy;
  uint64_t v8 = swift_allocObject();
  a4[2] = v8;
  memcpy((void *)(v8 + 16), a1, 0xB0uLL);
  a4[10] = type metadata accessor for CallStateNotificationManager();
  a4[11] = &protocol witness table for CallStateNotificationManager;
  a4[7] = a3;
  a4[20] = &type metadata for AudioSessionManager;
  a4[21] = &protocol witness table for AudioSessionManager;
  a4[25] = &type metadata for SpringBoardServicesManager;
  a4[26] = &protocol witness table for SpringBoardServicesManager;
  outlined init with take of AppSelectionSignalComponent(a2, (uint64_t)(a4 + 12));
  return a4;
}

uint64_t specialized FaceTimeMessageControllerFlow.init(app:skIntent:intentResponse:sharedGlobals:state:startCallCATs:flowFinder:siriKitEventSender:)(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, char a5, uint64_t a6, uint64_t a7, long long *a8, uint64_t a9)
{
  *(void *)(a9 + 112) = type metadata accessor for FlowFinder();
  *(void *)(a9 + 120) = &protocol witness table for FlowFinder;
  *(void *)(a9 + 88) = a7;
  *(void *)(a9 + 16) = a1;
  *(void *)(a9 + 24) = a2;
  *(void *)(a9 + 32) = a3;
  outlined init with take of AppSelectionSignalComponent(a4, a9 + 40);
  *(unsigned char *)(a9 + 168) = a5;
  *(void *)(a9 + 80) = a6;
  outlined init with take of AppSelectionSignalComponent(a8, a9 + 128);
  return a9;
}

uint64_t sub_12AF78()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_12AFB8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 192, 7);
}

uint64_t sub_12B070()
{
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  uint64_t v1 = OUTLINED_FUNCTION_74_2();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_12B0B0()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  uint64_t v1 = OUTLINED_FUNCTION_74_2();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t partial apply for closure #1 in static PhoneCallFlowFactory.makeAppResolutionFlowBeforeNextResolveFlowProducer<A>(delegate:app:sharedGlobal:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  return closure #1 in static PhoneCallFlowFactory.makeAppResolutionFlowBeforeNextResolveFlowProducer<A>(delegate:app:sharedGlobal:)(a1, a2, a3, a4, a5, a6, *(void *)(v6 + 32), v6 + 40);
}

uint64_t objectdestroyTm_4()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t outlined init with take of ContactNeedsValueGuardFlow<INStartCallIntent>.FlowState(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_15();
  uint64_t v4 = OUTLINED_FUNCTION_7_0();
  v5(v4);
  return a2;
}

uint64_t sub_12B1B8()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  __swift_destroy_boxed_opaque_existential_1(v0 + 72);
  __swift_destroy_boxed_opaque_existential_1(v0 + 112);
  __swift_destroy_boxed_opaque_existential_1(v0 + 152);

  return _swift_deallocObject(v0, 192, 7);
}

uint64_t sub_12B210()
{
  return objectdestroy_21Tm(65);
}

uint64_t objectdestroy_21Tm(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(v1 + 16);

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t partial apply for specialized closure #1 in static OngoingCallFlowProducers.makeUnsupportedValueOfferFlowProducer<A, B>(sharedGlobals:)(uint64_t a1, uint64_t a2)
{
  return specialized closure #1 in static OngoingCallFlowProducers.makeUnsupportedValueOfferFlowProducer<A, B>(sharedGlobals:)(a1, a2, v2 + 16);
}

{
  uint64_t v2;

  return specialized closure #1 in static OngoingCallFlowProducers.makeUnsupportedValueOfferFlowProducer<A, B>(sharedGlobals:)(a1, a2, v2 + 16);
}

uint64_t OUTLINED_FUNCTION_7_36@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v10 = *(void *)(v8 - 264);
  uint64_t v11 = *(void *)(v8 - 272);
  uint64_t v12 = *(void *)(v8 - 280);
  uint64_t v13 = *(void *)(v8 - 288);
  return specialized CallingIntentContactNeedsDisambiguationFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:startCallCATsSimple:phoneCallCommonCATs:phoneCallCommonCATsSimple:phoneCallCommonCatPatterns:phoneCallDisplayTextCATsSimple:responseGenerator:siriKitEventSender:appInfoBuilder:)(v4, v10, v11, v12, v13, v2, v6, v5, v3, v8 - 128, v7, a1, a2);
}

uint64_t OUTLINED_FUNCTION_8_40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v10 = *(void *)(v8 - 264);
  uint64_t v11 = *(void *)(v8 - 272);
  uint64_t v12 = *(void *)(v8 - 280);
  uint64_t v13 = *(void *)(v8 - 288);
  return specialized CallingIntentConfirmationFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:startCallCATsSimple:phoneCallCommonCATs:phoneCallCommonCATsSimple:phoneCallCommonCatPatterns:phoneCallDisplayTextCATsSimple:responseGenerator:siriKitEventSender:appInfoBuilder:)(v4, v10, v11, v12, v13, v5, v7, v2, v3, v8 - 128, v6, a1, a2);
}

uint64_t OUTLINED_FUNCTION_14_17@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = *(void *)(v10 - 184);
  uint64_t v12 = *(void *)(v10 - 176);
  return specialized CallingIntentHandleIntentFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:startCallCATsSimple:phoneCallCommonCATs:phoneCallCommonCATsSimple:phoneCallCommonCatPatterns:phoneCallDisplayTextCATsSimple:responseGenerator:siriKitEventSender:appInfoBuilder:)(v3, v12, v13, v5, v6, v7, v9, v4, v2, v10 - 128, v8, a1, a2);
}

uint64_t OUTLINED_FUNCTION_18_17()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_22_14()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_28_10()
{
  return CATWrapper.__allocating_init(options:globals:)();
}

uint64_t OUTLINED_FUNCTION_29_10()
{
  return CATWrapperSimple.__allocating_init(options:globals:)();
}

uint64_t OUTLINED_FUNCTION_31_11()
{
  return default argument 5 of IncomingCallActionConfirmationStrategy.init(incomingCallIntentResponse:incomingCallCats:sharedGlobals:announceCallsContext:phoneCommonCats:phoneCallCommonCatPatterns:)((uint64_t *)(v0 - 168));
}

uint64_t OUTLINED_FUNCTION_32_8()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_33_7()
{
  return v0 - 128;
}

uint64_t OUTLINED_FUNCTION_34_4()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_35_11()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_36_9()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_37_7()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_38_9()
{
  return CATWrapper.__allocating_init(options:globals:)();
}

uint64_t OUTLINED_FUNCTION_39_7()
{
  return CATWrapperSimple.__allocating_init(options:globals:)();
}

uint64_t OUTLINED_FUNCTION_41_6()
{
  return CATWrapperSimple.__allocating_init(options:globals:)();
}

uint64_t OUTLINED_FUNCTION_42_5()
{
  return CATWrapper.__allocating_init(options:globals:)();
}

uint64_t OUTLINED_FUNCTION_43_9()
{
  return CATWrapper.__allocating_init(options:globals:)();
}

uint64_t OUTLINED_FUNCTION_44_7()
{
  return CATWrapper.__allocating_init(options:globals:)();
}

uint64_t OUTLINED_FUNCTION_45_5()
{
  return outlined init with copy of SignalProviding(v0, v1 - 128);
}

uint64_t OUTLINED_FUNCTION_46_6()
{
  return static SiriKitEventSender.current.getter();
}

uint64_t OUTLINED_FUNCTION_49_5()
{
  return v0 + 176;
}

uint64_t OUTLINED_FUNCTION_51_3()
{
  return default argument 2 of CallingIntentUnsupportedValueFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:phoneCallCommonCATs:phoneCallCommonCatPatterns:startCallCatsSimple:phoneCallDisplayTextCATsSimple:siriKitEventSender:appInfoBuilder:)((uint64_t *)(v0 - 128));
}

uint64_t OUTLINED_FUNCTION_56_3()
{
  return default argument 4 of IncomingCallActionConfirmationStrategy.init(incomingCallIntentResponse:incomingCallCats:sharedGlobals:announceCallsContext:phoneCommonCats:phoneCallCommonCatPatterns:)(v1, v0);
}

uint64_t OUTLINED_FUNCTION_58_3()
{
  return default argument 5 of CallingIntentBaseFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:startCallCATsSimple:phoneCallCommonCATs:phoneCallCommonCATsSimple:phoneCallCommonCatPatterns:phoneCallDisplayTextCATsSimple:responseGenerator:siriKitEventSender:appInfoBuilder:)(v1, v0);
}

uint64_t OUTLINED_FUNCTION_59_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_60_3()
{
  return CATWrapperSimple.__allocating_init(options:globals:)();
}

uint64_t OUTLINED_FUNCTION_61_3()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_63_2()
{
  return static CATOption.defaultMode.getter();
}

uint64_t OUTLINED_FUNCTION_67_1()
{
  return 0;
}

void OUTLINED_FUNCTION_69_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25)
{
  specialized CallingIntentBaseFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:startCallCATsSimple:phoneCallCommonCATs:phoneCallCommonCATsSimple:phoneCallCommonCatPatterns:phoneCallDisplayTextCATsSimple:responseGenerator:siriKitEventSender:appInfoBuilder:)(a1, a2, a3, a4, a15, a16, v25, a17, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25);
}

uint64_t OUTLINED_FUNCTION_70_1()
{
  return outlined init with copy of SignalProviding(v1, v0 + 352);
}

uint64_t OUTLINED_FUNCTION_72_2()
{
  return swift_dynamicCastObjCClass();
}

uint64_t OUTLINED_FUNCTION_73_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  return default argument 8 of CallingIntentUnsupportedValueFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:phoneCallCommonCATs:phoneCallCommonCatPatterns:startCallCatsSimple:phoneCallDisplayTextCATsSimple:siriKitEventSender:appInfoBuilder:)((uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_74_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_75_1()
{
  return default argument 7 of static ReferenceContactResolutionWrapper.resolveUpdateSKIntent(siriKitIntent:contactQueries:hasEmergencyContact:app:nlIntent:sharedGlobals:multicardinalIndex:siriKitEventSender:emergencyContactResolution:contactGroupResolver:)(v1, v0);
}

uint64_t OUTLINED_FUNCTION_76_0()
{
  return default argument 7 of InCallActionHandleIntentFlowStrategy.init(sharedGlobals:phoneCallBaseCatTemplatingService:aceViewProvider:nlContextProvider:canUseServerTTS:shouldShowDialogAfterIntentHandled:hangUpCallCATsSimple:responseGenerator:biomeEventSender:)();
}

uint64_t OUTLINED_FUNCTION_77_0()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t OUTLINED_FUNCTION_78_1()
{
  return static CATOption.defaultMode.getter();
}

uint64_t OUTLINED_FUNCTION_80_1()
{
  return RCHChildFlowProducers.handleIntentFlowCompletion.setter();
}

uint64_t OUTLINED_FUNCTION_81_1(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_82_1(uint64_t a1)
{
  *(void *)(v1 - 184) = a1;
  return static CATOption.defaultMode.getter();
}

uint64_t OUTLINED_FUNCTION_83(uint64_t a1)
{
  return outlined init with take of AppSelectionSignalComponent((long long *)(v1 - 128), a1 + 16);
}

uint64_t OUTLINED_FUNCTION_84_1()
{
  return type metadata accessor for CATOption();
}

uint64_t OUTLINED_FUNCTION_85_1(uint64_t a1)
{
  *(void *)(v1 + 352) = a1;
  *(void *)(v1 + 392) = 0;
  *(unsigned char *)(v1 + 400) = 0;
  return v1 + 352;
}

uint64_t OUTLINED_FUNCTION_87_0(void *a1)
{
  a1[2] = v3;
  a1[3] = v2;
  a1[4] = v1;
  return swift_unknownObjectRetain();
}

uint64_t OUTLINED_FUNCTION_88_1(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  outlined init with take of AppSelectionSignalComponent((long long *)(v2 - 168), a1 + 24);
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_89_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_91_2()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_92_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_93_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_94_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_98_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_99_0()
{
  return RCHChildFlowProducersAsync.needsConfirmationFlowProducer.setter();
}

uint64_t OUTLINED_FUNCTION_101()
{
  return v0;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySsG_SSs5NeverOTg5012_sSsSSIeggo_f4SSs5D133OIegnrzr_TR109_s27PhoneCallFlowDelegatePlugin18FirstPartyChatGUID33_1DF85DF06AE2240D0AAD0827B3513709LLVyADSgSScfcSSSshcfu0_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v3 = a1 + 56;
    do
    {
      swift_bridgeObjectRetain();
      uint64_t v4 = static String._fromSubstring(_:)();
      uint64_t v6 = v5;
      swift_bridgeObjectRelease();
      unint64_t v7 = _swiftEmptyArrayStorage[2];
      if (v7 >= _swiftEmptyArrayStorage[3] >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      _swiftEmptyArrayStorage[2] = v7 + 1;
      uint64_t v8 = &_swiftEmptyArrayStorage[2 * v7];
      v8[4] = v4;
      v8[5] = v6;
      v3 += 32;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

void *specialized Sequence.compactMap<A>(_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v28 = a2;
  if (a1 >> 62)
  {
LABEL_25:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (v3)
    {
LABEL_3:
      uint64_t v4 = 4;
      while (1)
      {
        if ((a1 & 0xC000000000000001) != 0) {
          id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v5 = *(id *)(a1 + 8 * v4);
        }
        uint64_t v6 = v5;
        uint64_t v7 = v4 - 3;
        if (__OFADD__(v4 - 4, 1))
        {
          __break(1u);
          goto LABEL_25;
        }
        uint64_t v8 = outlined bridged method (pb) of @objc INCallGroup.groupId.getter(v5);
        if (!v9) {
          goto LABEL_18;
        }
        FirstPartyChatGUID.init(_:)(v8, v9, v17);
        outlined init with take of FirstPartyChatGUID?((uint64_t)v17, (uint64_t)v18);
        if (!*((void *)&v18[0] + 1)) {
          goto LABEL_18;
        }
        long long v21 = v18[0];
        long long v22 = v18[1];
        uint64_t v11 = v19;
        uint64_t v10 = v20;
        swift_bridgeObjectRetain();
        specialized Set.contains(_:)(v11, v10, v28);
        char v13 = v12;
        swift_bridgeObjectRelease();
        if ((v13 & 1) == 0) {
          break;
        }
        long long v23 = v21;
        if ((void)v21 == 5459283 && *((void *)&v21 + 1) == 0xE300000000000000)
        {
          outlined release of String?((uint64_t)&v23);
          long long v24 = v22;
          outlined release of String?((uint64_t)&v24);

          swift_bridgeObjectRelease();
        }
        else
        {
          char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
          outlined release of String?((uint64_t)&v23);
          long long v25 = v22;
          outlined release of String?((uint64_t)&v25);
          swift_bridgeObjectRelease();
          if ((v15 & 1) == 0) {
            goto LABEL_18;
          }
        }
LABEL_21:
        ++v4;
        if (v7 == v3) {
          goto LABEL_26;
        }
      }
      long long v26 = v21;
      outlined release of String?((uint64_t)&v26);
      long long v27 = v22;
      outlined release of String?((uint64_t)&v27);
      swift_bridgeObjectRelease();
LABEL_18:
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((char *)&dword_10 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      goto LABEL_21;
    }
  }
LABEL_26:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t (*v18)(uint64_t, unint64_t);

  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v3 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v18 = *(uint64_t (**)(uint64_t, unint64_t))(*(void *)a2 + 256);
    uint64_t v4 = _swiftEmptyArrayStorage;
    id v5 = 4;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      uint64_t v6 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      uint64_t v7 = App.appIdentifier.getter();
      if (v8)
      {
        unint64_t v9 = v8;
      }
      else
      {
        uint64_t v7 = 0;
        unint64_t v9 = 0xE000000000000000;
      }
      uint64_t v10 = v18(v7, v9);
      char v12 = v11;
      swift_release();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v4 = v15;
      }
      char v13 = v4[2];
      if (v13 >= v4[3] >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v4 = v16;
      }
      v4[2] = v13 + 1;
      uint64_t v14 = &v4[2 * v13];
      v14[4] = v10;
      void v14[5] = v12;
      ++v5;
      if (v6 == v3)
      {
        swift_release();
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
  }
  swift_release();
  uint64_t v4 = _swiftEmptyArrayStorage;
LABEL_20:
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t static Transformer<>.transformer(device:groupResolver:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of SignalProviding(a1, (uint64_t)v6);
  outlined init with copy of SignalProviding(a2, (uint64_t)v5);
  uint64_t v3 = swift_allocObject();
  outlined init with take of AppSelectionSignalComponent(v6, v3 + 16);
  outlined init with take of AppSelectionSignalComponent(v5, v3 + 56);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SmsGroup]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INCallGroup]?);
  return Transformer.init(transform:)();
}

uint64_t sub_12BDC0()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);

  return _swift_deallocObject(v0, 96, 7);
}

void partial apply for closure #1 in static Transformer<>.transformer(device:groupResolver:)(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  closure #1 in static Transformer<>.transformer(device:groupResolver:)(a1, (void *)(v2 + 16), (void *)(v2 + 56), a2);
}

void *static Transformer<>.resolveGroupNameIdentifier(groupName:device:groupResolver:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v32 = a1;
  uint64_t v7 = type metadata accessor for Locale();
  __chkstk_darwin(v7 - 8);
  uint64_t v35 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ContactGroupResolverConfig();
  uint64_t v36 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ContactGroupQuery();
  uint64_t v33 = *(void *)(v12 - 8);
  uint64_t v34 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.siriPhone);
  char v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v30 = a3;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v29 = a2;
    uint64_t v19 = (uint8_t *)v18;
    v37[0] = swift_slowAlloc();
    uint64_t v31 = v9;
    *(_DWORD *)uint64_t v19 = 136315138;
    uint64_t v39 = (void *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Transformer<[SmsGroup], [INCallGroup]?>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<[SmsGroup], [INCallGroup]?>.Type);
    uint64_t v20 = String.init<A>(describing:)();
    uint64_t v39 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v37);
    a3 = v30;
    uint64_t v9 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v16, v17, "#%s Calling ContactGroupResolver.", v19, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v22 = a4[3];
  uint64_t v23 = a4[4];
  __swift_project_boxed_opaque_existential_1(a4, v22);
  swift_bridgeObjectRetain();
  ContactGroupQuery.init(name:)();
  __swift_project_boxed_opaque_existential_1(a3, a3[3]);
  dispatch thunk of DeviceState.siriLocale.getter();
  ContactGroupResolverConfig.init(locale:bundleIds:)();
  uint64_t v24 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v23 + 8))(v14, v11, v22, v23);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v14, v34);
  uint64_t v25 = *(void *)(v24 + 16);
  if (v25)
  {
    uint64_t v39 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v26 = v24 + 32;
    do
    {
      outlined init with copy of SignalProviding(v26, (uint64_t)v37);
      closure #1 in static Transformer<>.resolveGroupNameIdentifier(groupName:device:groupResolver:)(v37, &v38);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v26 += 40;
      --v25;
    }
    while (v25);
    long long v27 = v39;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  return v27;
}

id closure #1 in static Transformer<>.resolveGroupNameIdentifier(groupName:device:groupResolver:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.siriPhone);
  outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v40);
  outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v37);
  outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v34);
  id v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315906;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Transformer<[SmsGroup], [INCallGroup]?>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<[SmsGroup], [INCallGroup]?>.Type);
    uint64_t v8 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    uint64_t v10 = v41;
    uint64_t v11 = v42;
    __swift_project_boxed_opaque_existential_1(v40, v41);
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 16))(v10, v11);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
    *(_WORD *)(v7 + 22) = 2080;
    uint64_t v14 = v38;
    uint64_t v15 = v39;
    __swift_project_boxed_opaque_existential_1(v37, v38);
    uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v14, v15);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
    *(_WORD *)(v7 + 32) = 2080;
    uint64_t v18 = v35;
    uint64_t v19 = v36;
    __swift_project_boxed_opaque_existential_1(v34, v35);
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 24))(v18, v19);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
    _os_log_impl(&dword_0, v5, v6, "#%s Found group: [name=%s, id=%s, bundleId=%s]", (uint8_t *)v7, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
  }

  uint64_t v22 = a1[3];
  uint64_t v23 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v22);
  uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 16))(v22, v23);
  uint64_t v26 = v25;
  uint64_t v27 = a1[3];
  uint64_t v28 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v27);
  uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 8))(v27, v28);
  uint64_t v31 = v30;
  id v32 = objc_allocWithZone((Class)INCallGroup);
  id result = @nonobjc INCallGroup.init(groupName:groupId:)(v24, v26, v29, v31);
  *a2 = result;
  return result;
}

void FirstPartyChatGUID.init(_:)(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v27 = a1;
  unint64_t v28 = a2;
  uint64_t v25 = 5459283;
  unint64_t v26 = 0xE300000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v6 = BidirectionalCollection<>.starts<A>(with:)();
  if ((v6 & 1) == 0)
  {
    uint64_t v27 = a1;
    unint64_t v28 = a2;
    uint64_t v25 = 0x6567617373654D69;
    unint64_t v26 = 0xE800000000000000;
    uint64_t v6 = BidirectionalCollection<>.starts<A>(with:)();
    if ((v6 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      __swift_project_value_buffer(v23, (uint64_t)static Logger.siriPhone);
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v19, v20)) {
        goto LABEL_19;
      }
      unint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v21 = 0;
      uint64_t v22 = "#FirstPartyChatGUID Unrecognized 1P chat group prefix.";
      goto LABEL_18;
    }
  }
  uint64_t v27 = 59;
  unint64_t v28 = 0xE100000000000000;
  __chkstk_darwin(v6);
  v24[2] = &v27;
  swift_bridgeObjectRetain();
  uint64_t v7 = specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 1u, partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:), (uint64_t)v24, a1, a2);
  swift_bridgeObjectRelease();
  uint64_t v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySsG_SSs5NeverOTg5012_sSsSSIeggo_f4SSs5D133OIegnrzr_TR109_s27PhoneCallFlowDelegatePlugin18FirstPartyChatGUID33_1DF85DF06AE2240D0AAD0827B3513709LLVyADSgSScfcSSSshcfu0_Tf3nnnpf_nTf1cn_n(v7);
  swift_bridgeObjectRelease();
  if (v8[2] == 3)
  {
    uint64_t v9 = 0;
    while (1)
    {
      unint64_t v10 = v8[v9 + 5];
      uint64_t v11 = v8[v9 + 4] & 0xFFFFFFFFFFFFLL;
      if ((v10 & 0x2000000000000000) != 0) {
        uint64_t v11 = HIBYTE(v10) & 0xF;
      }
      if (!v11) {
        break;
      }
      v9 += 2;
      if (v9 == 6)
      {
        uint64_t v13 = v8[4];
        uint64_t v12 = v8[5];
        uint64_t v15 = v8[6];
        uint64_t v14 = v8[7];
        uint64_t v17 = v8[8];
        uint64_t v16 = v8[9];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
    }
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.siriPhone);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    unint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v21 = 0;
    uint64_t v22 = "#FirstPartyChatGUID Invalid parse for 1P chat group.";
LABEL_18:
    _os_log_impl(&dword_0, v19, v20, v22, v21, 2u);
    swift_slowDealloc();
  }
LABEL_19:

  uint64_t v13 = 0;
  uint64_t v12 = 0;
  uint64_t v15 = 0;
  uint64_t v14 = 0;
  uint64_t v17 = 0;
  uint64_t v16 = 0;
LABEL_20:
  *a3 = v13;
  a3[1] = v12;
  a3[2] = v15;
  a3[3] = v14;
  a3[4] = v17;
  a3[5] = v16;
}

void key path getter for INCallGroup.groupId : INCallGroup(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = [*a1 groupId];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

uint64_t closure #1 in static Transformer<>.findSmsChatIdsToRemove(_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 62) {
    goto LABEL_29;
  }
  if (*(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8)) != 2) {
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = 2;
  do
  {
    unint64_t v5 = a3 & 0xC000000000000001;
    for (uint64_t i = 4; ; ++i)
    {
      if (v5) {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v7 = *(id *)(a3 + 8 * i);
      }
      uint64_t v8 = v7;
      if (__OFADD__(i - 4, 1))
      {
        __break(1u);
        goto LABEL_28;
      }
      outlined bridged method (pb) of @objc INCallGroup.groupId.getter(v7);
      if (v9) {
        break;
      }

LABEL_13:
      if (i - 3 == v4)
      {
LABEL_25:
        uint64_t v4 = 0;
        goto LABEL_26;
      }
    }
    v10._uint64_t countAndFlagsBits = 5459283;
    v10._object = (void *)0xE300000000000000;
    Swift::Bool v11 = String.hasPrefix(_:)(v10);

    swift_bridgeObjectRelease();
    if (!v11) {
      goto LABEL_13;
    }
    for (uint64_t j = 4; ; ++j)
    {
      id v13 = v5 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(a3 + 8 * j);
      uint64_t v14 = v13;
      if (__OFADD__(j - 4, 1)) {
        break;
      }
      outlined bridged method (pb) of @objc INCallGroup.groupId.getter(v13);
      if (v15)
      {
        v16._uint64_t countAndFlagsBits = 0x6567617373654D69;
        v16._object = (void *)0xE800000000000000;
        Swift::Bool v17 = String.hasPrefix(_:)(v16);

        swift_bridgeObjectRelease();
        if (v17)
        {
          uint64_t v4 = 1;
          goto LABEL_26;
        }
      }
      else
      {
      }
      if (j - 3 == v4) {
        goto LABEL_25;
      }
    }
LABEL_28:
    __break(1u);
LABEL_29:
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18 != 2) {
      return 0;
    }
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  }
  while (v4);
LABEL_26:
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

uint64_t specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(uint64_t a1, unsigned __int8 a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  v50[3] = a4;
  if (a1 < 0) {
    goto LABEL_38;
  }
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = _swiftEmptyArrayStorage;
  uint64_t v42 = v10 + 16;
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = 15;
  uint64_t v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (uint64_t v12 = HIBYTE(a6) & 0xF) : (uint64_t v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0) {
      uint64_t v11 = a5 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v30 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0) {
      uint64_t v30 = 11;
    }
    specialized appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(v30 | (v11 << 16), v47, a2 & 1, v10);
    swift_bridgeObjectRelease();
    id v13 = *(void **)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_36;
  }
  uint64_t v41 = a1;
  unint64_t v48 = 4 * v12;
  id v13 = _swiftEmptyArrayStorage;
  unint64_t v14 = 15;
  unint64_t v15 = 15;
  unint64_t v16 = 15;
  while (1)
  {
    v50[0] = String.subscript.getter();
    v50[1] = v17;
    char v18 = a3(v50);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v13;
    }
    char v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
    {
      unint64_t v14 = String.index(after:)();
      goto LABEL_21;
    }
    int v20 = (v15 >> 14 == v14 >> 14) & a2;
    if (v20 != 1)
    {
      if (v14 >> 14 < v15 >> 14) {
        goto LABEL_38;
      }
      uint64_t v21 = String.subscript.getter();
      uint64_t v43 = v23;
      uint64_t v44 = v22;
      uint64_t v45 = v24;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        id v13 = v28;
      }
      unint64_t v25 = v13[2];
      if (v25 >= v13[3] >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        id v13 = v29;
      }
      long long v13[2] = v25 + 1;
      unint64_t v26 = &v13[4 * v25];
      v26[4] = v21;
      v26[5] = v45;
      v26[6] = v44;
      v26[7] = v43;
      *(void *)uint64_t v42 = v13;
    }
    uint64_t v27 = String.index(after:)();
    unint64_t v14 = v27;
    *(void *)(v47 + 16) = v27;
    if ((v20 & 1) == 0 && v13[2] == v41) {
      break;
    }
    unint64_t v15 = v27;
    unint64_t v16 = v27;
LABEL_21:
    if (v48 == v14 >> 14) {
      goto LABEL_30;
    }
  }
  unint64_t v16 = v27;
  unint64_t v15 = v27;
LABEL_30:
  if (v48 == v15 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }
  if (v48 < v16 >> 14)
  {
LABEL_38:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v31 = String.subscript.getter();
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  swift_bridgeObjectRelease();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  uint64_t v38 = *(void *)(*(void *)v42 + 16);
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v38);
  id v13 = *(void **)v42;
  long long v13[2] = v38 + 1;
  uint64_t v39 = &v13[4 * v38];
  v39[4] = v31;
  v39[5] = v33;
  v39[6] = v35;
  v39[7] = v37;
  *(void *)uint64_t v42 = v13;
LABEL_35:
  swift_bridgeObjectRetain();
  swift_release();
LABEL_36:
  swift_release();
  return (uint64_t)v13;
}

uint64_t specialized appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a2 + 16) >> 14;
  int v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1) {
    return v5 ^ 1u;
  }
  if (a1 >> 14 >= v4)
  {
    uint64_t v7 = String.subscript.getter();
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    uint64_t v14 = *(void *)(*(void *)(a4 + 16) + 16);
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
    uint64_t v15 = *(void *)(a4 + 16);
    *(void *)(v15 + 16) = v14 + 1;
    unint64_t v16 = (void *)(v15 + 32 * v14);
    v16[4] = v7;
    v16[5] = v9;
    v16[6] = v11;
    v16[7] = v13;
    return v5 ^ 1u;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

const char *keypath_get_selector_groupId()
{
  return "groupId";
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  id v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [INCallGroup]>);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_39;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  if (!v10) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v13 << 6))
  {
    int v20 = (uint64_t *)(*(void *)(v5 + 48) + 16 * i);
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    uint64_t v23 = *(void *)(*(void *)(v5 + 56) + 8 * i);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v24 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1 << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) == 0)
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v24) >> 6;
      while (++v26 != v29 || (v28 & 1) == 0)
      {
        BOOL v30 = v26 == v29;
        if (v26 == v29) {
          unint64_t v26 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v11 + 8 * v26);
        if (v31 != -1)
        {
          unint64_t v27 = __clz(__rbit64(~v31)) + (v26 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    unint64_t v27 = __clz(__rbit64((-1 << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v11 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    uint64_t v32 = (void *)(*(void *)(v7 + 48) + 16 * v27);
    *uint64_t v32 = v22;
    v32[1] = v21;
    *(void *)(*(void *)(v7 + 56) + 8 * v27) = v23;
    ++*(void *)(v7 + 16);
    if (v10) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      goto LABEL_41;
    }
    if (v16 >= v34)
    {
      swift_release();
      uint64_t v17 = (void *)(v5 + 64);
      goto LABEL_34;
    }
    uint64_t v17 = (void *)(v5 + 64);
    unint64_t v18 = *(void *)(v35 + 8 * v16);
    ++v13;
    if (!v18)
    {
      int64_t v13 = v16 + 1;
      if (v16 + 1 >= v34) {
        goto LABEL_32;
      }
      unint64_t v18 = *(void *)(v35 + 8 * v13);
      if (!v18) {
        break;
      }
    }
LABEL_18:
    unint64_t v10 = (v18 - 1) & v18;
  }
  int64_t v19 = v16 + 2;
  if (v19 < v34)
  {
    unint64_t v18 = *(void *)(v35 + 8 * v19);
    if (!v18)
    {
      while (1)
      {
        int64_t v13 = v19 + 1;
        if (__OFADD__(v19, 1)) {
          goto LABEL_42;
        }
        if (v13 >= v34) {
          goto LABEL_32;
        }
        unint64_t v18 = *(void *)(v35 + 8 * v13);
        ++v19;
        if (v18) {
          goto LABEL_18;
        }
      }
    }
    int64_t v13 = v19;
    goto LABEL_18;
  }
LABEL_32:
  swift_release();
LABEL_34:
  if (v36)
  {
    uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
    if (v33 >= 64) {
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v33 + 63) >> 6, v17);
    }
    else {
      void *v17 = -1 << v33;
    }
    *(void *)(v5 + 16) = 0;
  }
LABEL_39:
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    uint64_t v5 = (uint64_t *)((char *)&v10 - ((8 * v4 + 15) & 0x3FFFFFFFFFFFFFF0));
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v4, v5);
    specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v5, v4, v2);
    if (v1) {
      swift_willThrow();
    }
    else {
      return v6;
    }
  }
  else
  {
    uint64_t v7 = (void *)swift_slowAlloc();
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v4, v7);
    specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v7, v4, v2);
    uint64_t v2 = v8;
    swift_slowDealloc();
  }
  return v2;
}

void specialized closure #1 in _NativeDictionary.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = 0;
  int64_t v4 = 0;
  uint64_t v5 = a3 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a3 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_20;
    }
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v12 >= v9) {
      goto LABEL_24;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        goto LABEL_24;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          goto LABEL_24;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }
LABEL_19:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_20:
    uint64_t v15 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v11);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    unint64_t v18 = *(void *)(*(void *)(a3 + 56) + 8 * v11);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v19 = closure #1 in static Transformer<>.findSmsChatIdsToRemove(_:)(v16, v17, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v19)
    {
      *(void *)(a1 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      if (__OFADD__(v23++, 1))
      {
        __break(1u);
LABEL_24:
        specialized _NativeDictionary.extractDictionary(using:count:)(a1, a2, v23);
        return;
      }
    }
  }
  int64_t v14 = v12 + 3;
  if (v14 >= v9) {
    goto LABEL_24;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      goto LABEL_24;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
}

uint64_t outlined init with take of FirstPartyChatGUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FirstPartyChatGUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)(uint64_t *a1, uint64_t *a2)
{
  return specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)(*a1, a1[1], *a2, a2[1]) & 1;
}

uint64_t partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)(uint64_t *a1)
{
  return specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)(a1, *(uint64_t **)(v1 + 16)) & 1;
}

uint64_t sub_12D8AC()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_12D8E4()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t destroy for FirstPartyChatGUID()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for FirstPartyChatGUID(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for FirstPartyChatGUID(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for FirstPartyChatGUID(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FirstPartyChatGUID(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FirstPartyChatGUID(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for FirstPartyChatGUID()
{
  return &unk_5563F0;
}

uint64_t OUTLINED_FUNCTION_0_33()
{
  return v0;
}

uint64_t static Transformer<>.callIdentifierTransformer(previousIntentResponse:)(void *a1)
{
  *(void *)(swift_allocObject() + 16) = a1;
  id v2 = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);

  return Transformer.init(transform:)();
}

void closure #1 in static Transformer<>.callIdentifierTransformer(previousIntentResponse:)(void *a1@<X1>, uint64_t *a2@<X8>)
{
  if (!a1) {
    goto LABEL_16;
  }
  swift_getObjectType();
  if (!dynamic_cast_existential_1_conditional((uint64_t)a1)) {
    goto LABEL_16;
  }
  uint64_t v5 = v4;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 24);
  id v8 = a1;
  char v9 = v7(ObjectType, v5);
  if (FollowUpOfferType.rawValue.getter(v9) == 0xD000000000000013 && v10 == 0x800000000048DCB0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
LABEL_13:

      uint64_t v17 = 0;
      unint64_t v19 = 0;
      goto LABEL_17;
    }
  }
  unint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(ObjectType, v5);
  if (!v12) {
    goto LABEL_13;
  }
  unint64_t v13 = v12;
  if (v12 >> 62)
  {
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }
  if (!*(void *)((char *)&dword_10 + (v12 & 0xFFFFFFFFFFFFFF8)))
  {
LABEL_15:

    swift_bridgeObjectRelease();
LABEL_16:
    uint64_t v17 = 0;
    unint64_t v19 = 0;
    goto LABEL_17;
  }
LABEL_10:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v13 & 0xC000000000000001) == 0, v13);
  if ((v13 & 0xC000000000000001) != 0) {
    id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v14 = *(id *)(v13 + 32);
  }
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  id v16 = [v15 identifier];

  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v19 = v18;

LABEL_17:
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.siriPhone);
  swift_bridgeObjectRetain_n();
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 136315394;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, String?>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, String?>.Type);
    uint64_t v24 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2080;
    if (v19) {
      uint64_t v26 = v17;
    }
    else {
      uint64_t v26 = 7104878;
    }
    if (v19) {
      unint64_t v27 = v19;
    }
    else {
      unint64_t v27 = 0xE300000000000000;
    }
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v21, v22, "#%s --> %s", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  *a2 = v17;
  a2[1] = v19;
}

uint64_t sub_12DFC8()
{
  return _swift_deallocObject(v0, 24, 7);
}

void partial apply for closure #1 in static Transformer<>.callIdentifierTransformer(previousIntentResponse:)(uint64_t *a1@<X8>)
{
  closure #1 in static Transformer<>.callIdentifierTransformer(previousIntentResponse:)(*(void **)(v1 + 16), a1);
}

unint64_t PhoneCallConfirmationSemantics.canonicalName.getter()
{
  String.uppercased()();
  OUTLINED_FUNCTION_6_31();
  OUTLINED_FUNCTION_2_45();
  OUTLINED_FUNCTION_0_34();
  OUTLINED_FUNCTION_8_41();
  unint64_t v2 = PhoneCallNLConstants.canonicalName.getter(6);
  OUTLINED_FUNCTION_5_13();
  Swift::String v0 = String.uppercased()();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

unint64_t VoicemailVerbSemantics.canonicalName.getter(char a1)
{
  VoicemailVerbSemantics.rawValue.getter(a1);
  String.uppercased()();
  OUTLINED_FUNCTION_6_31();
  OUTLINED_FUNCTION_2_45();
  OUTLINED_FUNCTION_0_34();
  OUTLINED_FUNCTION_8_41();
  unint64_t v3 = PhoneCallNLConstants.canonicalName.getter(14);
  OUTLINED_FUNCTION_5_13();
  Swift::String v1 = String.uppercased()();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3;
}

unint64_t PhoneCallVerbSemantics.canonicalName.getter(char a1)
{
  PhoneCallVerbSemantics.rawValue.getter(a1);
  String.uppercased()();
  OUTLINED_FUNCTION_6_31();
  OUTLINED_FUNCTION_2_45();
  OUTLINED_FUNCTION_0_34();
  OUTLINED_FUNCTION_8_41();
  unint64_t v3 = PhoneCallNLConstants.canonicalName.getter(15);
  OUTLINED_FUNCTION_5_13();
  Swift::String v1 = String.uppercased()();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t PhoneCallHandleType.rawValue.getter(char a1)
{
  if (a1) {
    return 0x6C69616D65;
  }
  else {
    return 0x656E6F6870;
  }
}

Swift::String __swiftcall PhoneCallNLConstants.boundValue(_:)(Swift::String a1)
{
  unint64_t v7 = PhoneCallNLConstants.canonicalName.getter(v1);
  id v8 = v2;
  OUTLINED_FUNCTION_5_13();
  Swift::String v3 = String.uppercased()();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  uint64_t v4 = v7;
  uint64_t v5 = v8;
  result._object = v5;
  result._uint64_t countAndFlagsBits = v4;
  return result;
}

PhoneCallFlowDelegatePlugin::PhoneCallNLConstants_optional __swiftcall PhoneCallNLConstants.init(rawValue:)(Swift::String rawValue)
{
  OUTLINED_FUNCTION_4_5();
  v3._object = v1;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PhoneCallNLConstants.init(rawValue:), v3);
  OUTLINED_FUNCTION_15_0();
  if (v2 >= 0x10) {
    return (PhoneCallFlowDelegatePlugin::PhoneCallNLConstants_optional)16;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::PhoneCallNLConstants_optional)v2;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallNLConstants(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PhoneCallNLConstants()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneCallNLConstants(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallNLConstants(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::PhoneCallNLConstants_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallNLConstants@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallNLConstants_optional *a2@<X8>)
{
  result.value = PhoneCallNLConstants.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallNLConstants()
{
  char v1 = OUTLINED_FUNCTION_32();
  unint64_t result = PhoneCallNLConstants.rawValue.getter(v1);
  *Swift::String v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t PhoneCallConfirmationSemantics.rawValue.getter(char a1)
{
  uint64_t result = 7562617;
  switch(a1)
  {
    case 1:
      uint64_t result = 28526;
      break;
    case 2:
      uint64_t result = 0x206D7269666E6F63;
      break;
    case 3:
      uint64_t result = 0x63207463656A6572;
      break;
    default:
      return result;
  }
  return result;
}

PhoneCallFlowDelegatePlugin::PhoneCallConfirmationSemantics_optional __swiftcall PhoneCallConfirmationSemantics.init(rawValue:)(Swift::String rawValue)
{
  OUTLINED_FUNCTION_4_5();
  v3._object = v1;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PhoneCallConfirmationSemantics.init(rawValue:), v3);
  OUTLINED_FUNCTION_15_0();
  if (v2 >= 4) {
    return (PhoneCallFlowDelegatePlugin::PhoneCallConfirmationSemantics_optional)4;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::PhoneCallConfirmationSemantics_optional)v2;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallConfirmationSemantics()
{
  return specialized == infix<A>(_:_:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PhoneCallConfirmationSemantics()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneCallConfirmationSemantics()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallConfirmationSemantics()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

PhoneCallFlowDelegatePlugin::PhoneCallConfirmationSemantics_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallConfirmationSemantics@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallConfirmationSemantics_optional *a2@<X8>)
{
  result.value = PhoneCallConfirmationSemantics.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallConfirmationSemantics()
{
  char v1 = OUTLINED_FUNCTION_32();
  uint64_t result = PhoneCallConfirmationSemantics.rawValue.getter(v1);
  *Swift::String v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t VoicemailVerbSemantics.associatedSemantic.getter()
{
  return 14;
}

uint64_t VoicemailVerbSemantics.rawValue.getter(char a1)
{
  uint64_t result = 2036427888;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x746165706572;
      break;
    case 2:
      uint64_t result = 1885956979;
      break;
    case 3:
      uint64_t result = 0x6573756170;
      break;
    case 4:
      uint64_t result = 0x656D75736572;
      break;
    default:
      return result;
  }
  return result;
}

PhoneCallFlowDelegatePlugin::VoicemailVerbSemantics_optional __swiftcall VoicemailVerbSemantics.init(rawValue:)(Swift::String rawValue)
{
  OUTLINED_FUNCTION_4_5();
  v3._object = v1;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of VoicemailVerbSemantics.init(rawValue:), v3);
  OUTLINED_FUNCTION_15_0();
  if (v2 >= 5) {
    return (PhoneCallFlowDelegatePlugin::VoicemailVerbSemantics_optional)5;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::VoicemailVerbSemantics_optional)v2;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance VoicemailVerbSemantics()
{
  return specialized == infix<A>(_:_:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance VoicemailVerbSemantics()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance VoicemailVerbSemantics()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance VoicemailVerbSemantics(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::VoicemailVerbSemantics_optional protocol witness for RawRepresentable.init(rawValue:) in conformance VoicemailVerbSemantics@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::VoicemailVerbSemantics_optional *a2@<X8>)
{
  result.value = VoicemailVerbSemantics.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance VoicemailVerbSemantics()
{
  char v1 = OUTLINED_FUNCTION_32();
  uint64_t result = VoicemailVerbSemantics.rawValue.getter(v1);
  *Swift::String v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t PhoneCallVerbSemantics.associatedSemantic.getter()
{
  return 15;
}

uint64_t PhoneCallVerbSemantics.rawValue.getter(char a1)
{
  uint64_t result = 1819042147;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x636162206C6C6163;
      break;
    case 2:
    case 3:
      uint64_t result = 0x656D697465636166;
      break;
    case 4:
      uint64_t result = 0x7072656B61657073;
      break;
    case 5:
      uint64_t result = 1684957542;
      break;
    case 6:
      uint64_t result = 0x6C6169646572;
      break;
    case 7:
      uint64_t result = 0x79666972616C63;
      break;
    case 8:
      uint64_t result = 1684104562;
      break;
    case 9:
      uint64_t result = 0x6D7269666E6F63;
      break;
    case 10:
      uint64_t result = 0x726577736E61;
      break;
    case 11:
      uint64_t result = 0x70755F676E6168;
      break;
    case 12:
      uint64_t result = 0x6574656C6564;
      break;
    case 13:
      uint64_t result = 1852403562;
      break;
    default:
      return result;
  }
  return result;
}

PhoneCallFlowDelegatePlugin::PhoneCallVerbSemantics_optional __swiftcall PhoneCallVerbSemantics.init(rawValue:)(Swift::String rawValue)
{
  OUTLINED_FUNCTION_4_5();
  v3._object = v1;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PhoneCallVerbSemantics.init(rawValue:), v3);
  OUTLINED_FUNCTION_15_0();
  if (v2 >= 0xE) {
    return (PhoneCallFlowDelegatePlugin::PhoneCallVerbSemantics_optional)14;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::PhoneCallVerbSemantics_optional)v2;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallVerbSemantics()
{
  return specialized == infix<A>(_:_:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PhoneCallVerbSemantics()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneCallVerbSemantics()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallVerbSemantics(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::PhoneCallVerbSemantics_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallVerbSemantics@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallVerbSemantics_optional *a2@<X8>)
{
  result.value = PhoneCallVerbSemantics.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallVerbSemantics()
{
  char v1 = OUTLINED_FUNCTION_32();
  uint64_t result = PhoneCallVerbSemantics.rawValue.getter(v1);
  *Swift::String v0 = result;
  v0[1] = v3;
  return result;
}

PhoneCallFlowDelegatePlugin::PhoneCallHandleType_optional __swiftcall PhoneCallHandleType.init(rawValue:)(Swift::String rawValue)
{
  OUTLINED_FUNCTION_4_5();
  v3._object = v1;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PhoneCallHandleType.init(rawValue:), v3);
  OUTLINED_FUNCTION_15_0();
  if (v2 == 1) {
    v4.value = PhoneCallFlowDelegatePlugin_PhoneCallHandleType_email;
  }
  else {
    v4.value = PhoneCallFlowDelegatePlugin_PhoneCallHandleType_unknownDefault;
  }
  if (v2) {
    return v4;
  }
  else {
    return 0;
  }
}

unint64_t lazy protocol witness table accessor for type PhoneCallNLConstants and conformance PhoneCallNLConstants()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallNLConstants and conformance PhoneCallNLConstants;
  if (!lazy protocol witness table cache variable for type PhoneCallNLConstants and conformance PhoneCallNLConstants)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallNLConstants and conformance PhoneCallNLConstants);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PhoneCallConfirmationSemantics and conformance PhoneCallConfirmationSemantics()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallConfirmationSemantics and conformance PhoneCallConfirmationSemantics;
  if (!lazy protocol witness table cache variable for type PhoneCallConfirmationSemantics and conformance PhoneCallConfirmationSemantics)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallConfirmationSemantics and conformance PhoneCallConfirmationSemantics);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type VoicemailVerbSemantics and conformance VoicemailVerbSemantics()
{
  unint64_t result = lazy protocol witness table cache variable for type VoicemailVerbSemantics and conformance VoicemailVerbSemantics;
  if (!lazy protocol witness table cache variable for type VoicemailVerbSemantics and conformance VoicemailVerbSemantics)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoicemailVerbSemantics and conformance VoicemailVerbSemantics);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PhoneCallVerbSemantics and conformance PhoneCallVerbSemantics()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallVerbSemantics and conformance PhoneCallVerbSemantics;
  if (!lazy protocol witness table cache variable for type PhoneCallVerbSemantics and conformance PhoneCallVerbSemantics)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallVerbSemantics and conformance PhoneCallVerbSemantics);
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallHandleType()
{
  return specialized == infix<A>(_:_:)();
}

unint64_t lazy protocol witness table accessor for type PhoneCallHandleType and conformance PhoneCallHandleType()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallHandleType and conformance PhoneCallHandleType;
  if (!lazy protocol witness table cache variable for type PhoneCallHandleType and conformance PhoneCallHandleType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallHandleType and conformance PhoneCallHandleType);
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PhoneCallHandleType()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneCallHandleType()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallHandleType()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

PhoneCallFlowDelegatePlugin::PhoneCallHandleType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallHandleType@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallHandleType_optional *a2@<X8>)
{
  result.value = PhoneCallHandleType.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallHandleType()
{
  char v1 = OUTLINED_FUNCTION_32();
  uint64_t result = PhoneCallHandleType.rawValue.getter(v1);
  *Swift::String v0 = result;
  v0[1] = 0xE500000000000000;
  return result;
}

uint64_t getEnumTagSinglePayload for PhoneCallNLConstants(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF1)
  {
    if (a2 + 15 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 15) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 16;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x10;
  int v5 = v6 - 16;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for PhoneCallNLConstants(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 15 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 15) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF1) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF0)
  {
    unsigned int v6 = ((a2 - 241) >> 8) + 1;
    *uint64_t result = a2 + 15;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x12EC68);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 15;
        break;
    }
  }
  return result;
}

void type metadata accessor for PhoneCallNLConstants()
{
}

unsigned char *storeEnumTagSinglePayload for PhoneCallConfirmationSemantics(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x12ED68);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void type metadata accessor for PhoneCallConfirmationSemantics()
{
}

unsigned char *storeEnumTagSinglePayload for VoicemailVerbSemantics(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x12EE68);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

void type metadata accessor for VoicemailVerbSemantics()
{
}

uint64_t getEnumTagSinglePayload for PhoneCallVerbSemantics(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF3)
  {
    if (a2 + 13 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 13) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 14;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xE;
  int v5 = v6 - 14;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for PhoneCallVerbSemantics(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF2)
  {
    unsigned int v6 = ((a2 - 243) >> 8) + 1;
    *uint64_t result = a2 + 13;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x12EFF0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 13;
        break;
    }
  }
  return result;
}

void type metadata accessor for PhoneCallVerbSemantics()
{
}

unsigned char *storeEnumTagSinglePayload for PhoneCallHandleType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x12F0F0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for PhoneCallHandleType()
{
}

uint64_t OUTLINED_FUNCTION_0_34()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

unint64_t OUTLINED_FUNCTION_2_45()
{
  *(void *)(v2 - 48) = v0;
  *(void *)(v2 - 40) = v1;
  return lazy protocol witness table accessor for type String and conformance String();
}

uint64_t OUTLINED_FUNCTION_6_31()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_8_41()
{
  return swift_bridgeObjectRelease();
}

uint64_t static OutputGenerationManifest.yesNoCallConfirmationManifest(model:_:)@<X0>(uint64_t (*a1)(uint64_t)@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for DialogPhase();
  __chkstk_darwin(v4 - 8);
  OUTLINED_FUNCTION_0_4();
  static DialogPhase.confirmation.getter();
  OutputGenerationManifest.init(dialogPhase:_:)();
  return a1(a2);
}

uint64_t closure #1 in static OutputGenerationManifest.yesNoCallConfirmationManifest(model:_:)(uint64_t a1, void *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  OutputGenerationManifest.canUseServerTTS.setter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v6, v7);
  uint64_t v8 = OutputGenerationManifest.responseViewId.setter();
  specialized static PhoneCallNLContextProvider.makeGenericConfirmationNLv3Context()(v8);
  specialized static PhoneCallNLContextProvider.makeSDAForConfirmation()();
  NLContextUpdate.nluSystemDialogActs.setter();
  uint64_t v9 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v9);
  return OutputGenerationManifest.nlContextUpdate.setter();
}

uint64_t partial apply for closure #1 in static OutputGenerationManifest.yesNoCallConfirmationManifest(model:_:)(uint64_t a1)
{
  return closure #1 in static OutputGenerationManifest.yesNoCallConfirmationManifest(model:_:)(a1, *(void **)(v1 + 16));
}

uint64_t static OutputGenerationManifest.simpleDialogWithButtonOutputManifest(responseViewId:)()
{
  return static OutputGenerationManifest.simpleDialogWithButtonOutputManifest(responseViewId:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for DialogPhase();
  __chkstk_darwin(v0 - 8);
  OUTLINED_FUNCTION_0_4();
  static DialogPhase.completion.getter();
  return OutputGenerationManifest.init(dialogPhase:_:)();
}

uint64_t closure #1 in static OutputGenerationManifest.simpleDialogWithButtonOutputManifest(responseViewId:)()
{
  return OutputGenerationManifest.printSupportingDialogInDisplayModes.setter();
}

uint64_t partial apply for closure #1 in static OutputGenerationManifest.simpleDialogWithButtonOutputManifest(responseViewId:)()
{
  return closure #1 in static OutputGenerationManifest.simpleDialogWithButtonOutputManifest(responseViewId:)();
}

uint64_t static OutputGenerationManifest.simpleCompletionOutputManifest(responseViewId:)()
{
  return static OutputGenerationManifest.simpleDialogWithButtonOutputManifest(responseViewId:)();
}

uint64_t closure #1 in static OutputGenerationManifest.simpleCompletionOutputManifest(responseViewId:)()
{
  return OutputGenerationManifest.responseViewId.setter();
}

uint64_t partial apply for closure #1 in static OutputGenerationManifest.simpleCompletionOutputManifest(responseViewId:)()
{
  return closure #1 in static OutputGenerationManifest.simpleCompletionOutputManifest(responseViewId:)();
}

uint64_t OUTLINED_FUNCTION_1_46()
{
  return OutputGenerationManifest.canUseServerTTS.setter();
}

uint64_t RestrictionCheckGuardFlow.__allocating_init(parse:sharedGlobals:phoneCallCommonCATsSimple:)(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  RestrictionCheckGuardFlow.init(parse:sharedGlobals:phoneCallCommonCATsSimple:)(a1, a2, a3);
  return v6;
}

uint64_t one-time initialization function for phoneCallCommand()
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v0;
  v1._uint64_t countAndFlagsBits = 35;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  v2._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.append(_:)(v2);
  uint64_t result = swift_bridgeObjectRelease();
  static RestrictionCheckGuardFlow.phoneCallCommand = v4;
  unk_5D4870 = v5;
  return result;
}

uint64_t *RestrictionCheckGuardFlow.phoneCallCommand.unsafeMutableAddressor()
{
  if (one-time initialization token for phoneCallCommand != -1) {
    swift_once();
  }
  return &static RestrictionCheckGuardFlow.phoneCallCommand;
}

uint64_t static RestrictionCheckGuardFlow.phoneCallCommand.getter()
{
  if (one-time initialization token for phoneCallCommand != -1) {
    swift_once();
  }
  uint64_t v0 = static RestrictionCheckGuardFlow.phoneCallCommand;
  swift_bridgeObjectRetain();
  return v0;
}

void one-time initialization function for voiceDialRestrictedInvocations()
{
  specialized Set.init(_nonEmptyArrayLiteral:)();
  static RestrictionCheckGuardFlow.voiceDialRestrictedInvocations = v0;
}

uint64_t key path setter for RestrictionCheckGuardFlow.exitValue : RestrictionCheckGuardFlow(char *a1, void *a2)
{
  char v2 = *a1;
  uint64_t v3 = (unsigned char *)(*a2 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin25RestrictionCheckGuardFlow_exitValue);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = v2;
  return result;
}

uint64_t RestrictionCheckGuardFlow.exitValue.getter()
{
  Swift::String v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin25RestrictionCheckGuardFlow_exitValue);
  swift_beginAccess();
  return *v1;
}

uint64_t RestrictionCheckGuardFlow.init(parse:sharedGlobals:phoneCallCommonCATsSimple:)(uint64_t a1, long long *a2, uint64_t a3)
{
  *(unsigned char *)(v3 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin25RestrictionCheckGuardFlow_exitValue) = 1;
  uint64_t v7 = v3 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin25RestrictionCheckGuardFlow_parse;
  type metadata accessor for Parse();
  OUTLINED_FUNCTION_15();
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v7, a1);
  outlined init with take of AppSelectionSignalComponent(a2, v3 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin25RestrictionCheckGuardFlow_sharedGlobals);
  *(void *)(v3 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin25RestrictionCheckGuardFlow_phoneCallCommonCATsSimple) = a3;
  return v3;
}

uint64_t RestrictionCheckGuardFlow.execute(completion:)()
{
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t type metadata accessor for RestrictionCheckGuardFlow()
{
  uint64_t result = type metadata singleton initialization cache for RestrictionCheckGuardFlow;
  if (!type metadata singleton initialization cache for RestrictionCheckGuardFlow) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t RestrictionCheckGuardFlow.execute()()
{
  OUTLINED_FUNCTION_1_0();
  v1[32] = v2;
  v1[33] = v0;
  type metadata accessor for DialogPhase();
  v1[34] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DeviceRestrictions();
  v1[35] = v3;
  OUTLINED_FUNCTION_19_0(v3);
  v1[36] = v4;
  v1[37] = swift_task_alloc();
  v1[38] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Restrictions();
  v1[39] = v5;
  OUTLINED_FUNCTION_19_0(v5);
  v1[40] = v6;
  v1[41] = swift_task_alloc();
  v1[42] = swift_task_alloc();
  return _swift_task_switch(RestrictionCheckGuardFlow.execute(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  void (*v27)(uint64_t, uint64_t);
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned char *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned char *v55;
  uint64_t (*v56)(void);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  Swift::String v1 = v0[37];
  uint64_t v58 = v0[38];
  uint64_t v3 = v0[35];
  uint64_t v2 = v0[36];
  uint64_t v4 = (void *)(v0[33] + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin25RestrictionCheckGuardFlow_sharedGlobals);
  uint64_t v5 = v4[3];
  uint64_t v6 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
  __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
  dispatch thunk of DeviceState.restrictedCommands.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  Restrictions.deviceRestrictions.getter();
  static DeviceRestrictions.phoneFeaturesUnavailable.getter();
  lazy protocol witness table accessor for type RestrictionCheckGuardFlow and conformance RestrictionCheckGuardFlow(&lazy protocol witness table cache variable for type DeviceRestrictions and conformance DeviceRestrictions, (void (*)(uint64_t))&type metadata accessor for DeviceRestrictions);
  uint64_t v7 = dispatch thunk of SetAlgebra.isSuperset(of:)();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v8(v1, v3);
  v8(v58, v3);
  if (v7)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.siriPhone);
    uint64_t v10 = Logger.logObject.getter();
    uint64_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      unint64_t v12 = (uint8_t *)OUTLINED_FUNCTION_7_2();
      *(_WORD *)unint64_t v12 = 0;
      _os_log_impl(&dword_0, v10, v11, "#RestrictionCheckFlow Encountered phoneFeaturesUnavailable restriction, serving unsupported dialog.", v12, 2u);
      OUTLINED_FUNCTION_6();
    }
    unint64_t v13 = v0[42];
    uint64_t v15 = v0[39];
    id v14 = v0[40];
    id v16 = v0[33];

    uint64_t v17 = (unsigned char *)(v16 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin25RestrictionCheckGuardFlow_exitValue);
    swift_beginAccess();
    void *v17 = 1;
    swift_retain_n();
    static DialogPhase.error.getter();
    outlined init with copy of SignalProviding((uint64_t)v4, (uint64_t)(v0 + 12));
    type metadata accessor for DialogOutputFactory();
    swift_allocObject();
    unint64_t v18 = DialogOutputFactory.init(dialog:dialogPhase:sharedGlobals:)();
    unint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 112))(v18);
    swift_release();
    v0[31] = v19;
    type metadata accessor for SimpleOutputFlowAsync();
    static ExecuteResponse.complete<A>(next:)();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    swift_release();
    goto LABEL_23;
  }
  uint64_t v21 = v0[41];
  uint64_t v20 = v0[42];
  uint64_t v23 = v0[39];
  os_log_type_t v22 = v0[40];
  uint64_t v24 = v4[3];
  unint64_t v25 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v24);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v25);
  __swift_project_boxed_opaque_existential_1(v0 + 7, v0[10]);
  uint64_t v26 = DeviceState.isAuthenticatedForPhone.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v21, v20, v23);
  if (v26)
  {
    unint64_t v27 = *(void (**)(uint64_t, uint64_t))(v0[40] + 8);
    v27(v0[41], v0[39]);
LABEL_18:
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    unint64_t v48 = type metadata accessor for Logger();
    __swift_project_value_buffer(v48, (uint64_t)static Logger.siriPhone);
    long long v49 = Logger.logObject.getter();
    uint64_t v50 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = (uint8_t *)OUTLINED_FUNCTION_7_2();
      *(_WORD *)uint64_t v51 = 0;
      _os_log_impl(&dword_0, v49, v50, "#RestrictionCheckFlow All restrictions passed!", v51, 2u);
      OUTLINED_FUNCTION_6();
    }
    uint64_t v52 = v0[42];
    uint64_t v53 = v0[39];
    uint64_t v54 = v0[33];

    uint64_t v55 = (unsigned char *)(v54 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin25RestrictionCheckGuardFlow_exitValue);
    swift_beginAccess();
    *uint64_t v55 = 0;
    static ExecuteResponse.complete()();
    v27(v52, v53);
    goto LABEL_23;
  }
  uint64_t v28 = v4;
  unint64_t v29 = Restrictions.restrictedCommands.getter();
  if (one-time initialization token for phoneCallCommand != -1) {
    swift_once();
  }
  uint64_t v31 = v0[40];
  BOOL v30 = v0[41];
  uint64_t v32 = v0[39];
  uint64_t v33 = static RestrictionCheckGuardFlow.phoneCallCommand;
  int64_t v34 = unk_5D4870;
  swift_bridgeObjectRetain();
  specialized Set.contains(_:)(v33, v34, v29);
  LOBYTE(v33) = v35;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v27 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
  v27(v30, v32);
  if ((v33 & 1) == 0 || (RestrictionCheckGuardFlow.isVoiceDialRestrictedRequest()() & 1) == 0) {
    goto LABEL_18;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  char v36 = type metadata accessor for Logger();
  __swift_project_value_buffer(v36, (uint64_t)static Logger.siriPhone);
  uint64_t v37 = Logger.logObject.getter();
  uint64_t v38 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v39 = (uint8_t *)OUTLINED_FUNCTION_7_2();
    *(_WORD *)uint64_t v39 = 0;
    _os_log_impl(&dword_0, v37, v38, "#RestrictionCheckFlow Encountered phoneCall command restriction, prompting user to unlock before continuing.", v39, 2u);
    OUTLINED_FUNCTION_6();
  }
  uint64_t v59 = v0[42];
  uint64_t v40 = v0[39];
  uint64_t v41 = v0[33];

  uint64_t v42 = (unsigned char *)(v41 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin25RestrictionCheckGuardFlow_exitValue);
  swift_beginAccess();
  *uint64_t v42 = 0;
  uint64_t v43 = v28;
  uint64_t v44 = v28[3];
  uint64_t v45 = v28[4];
  __swift_project_boxed_opaque_existential_1(v43, v44);
  (*(void (**)(uint64_t, uint64_t))(v45 + 104))(v44, v45);
  uint64_t v47 = v0[20];
  uint64_t v46 = v0[21];
  __swift_project_boxed_opaque_existential_1(v0 + 17, v47);
  SiriKitFlowFactoryProtocol.makeAuthenticationGuardFlow()(v47, v46);
  static ExecuteResponse.ongoing<A>(next:)();
  swift_release();
  v27(v59, v40);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 17));
LABEL_23:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v56 = (uint64_t (*)(void))v0[1];
  return v56();
}

uint64_t lazy protocol witness table accessor for type RestrictionCheckGuardFlow and conformance RestrictionCheckGuardFlow(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t closure #1 in RestrictionCheckGuardFlow.execute()(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(closure #1 in RestrictionCheckGuardFlow.execute(), 0, 0);
}

uint64_t closure #1 in RestrictionCheckGuardFlow.execute()()
{
  uint64_t v1 = *(int **)(class metadata base offset for PhoneCallCommonCATsSimple
               + **(void **)(*(void *)(v0 + 16)
                             + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin25RestrictionCheckGuardFlow_phoneCallCommonCATsSimple)
               + 32);
  uint64_t v4 = (uint64_t (*)(void))((char *)v1 + *v1);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #1 in RestrictionCheckGuardFlow.execute();
  return v4();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v9;

  OUTLINED_FUNCTION_1_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_2();
  char *v5 = v4;
  uint64_t v6 = swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(uint64_t))(v4 + 8);
  if (!v0) {
    uint64_t v6 = v3;
  }
  return v7(v6);
}

uint64_t RestrictionCheckGuardFlow.isVoiceDialRestrictedRequest()()
{
  uint64_t v1 = type metadata accessor for Parse.DirectInvocation();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  unint64_t v12 = (char *)v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin25RestrictionCheckGuardFlow_parse;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin25RestrictionCheckGuardFlow_parse, v7);
  int v14 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v12, v7);
  if (v14 == enum case for Parse.NLv3IntentOnly(_:)) {
    goto LABEL_2;
  }
  if (v14 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    uint64_t v17 = OUTLINED_FUNCTION_3_42();
    v18(v17);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    swift_release();
    type metadata accessor for NLIntent();
    OUTLINED_FUNCTION_15();
    (*(void (**)(char *))(v19 + 8))(v12);
    goto LABEL_11;
  }
  if (v14 == enum case for Parse.directInvocation(_:))
  {
    uint64_t v20 = OUTLINED_FUNCTION_3_42();
    v21(v20);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v12, v1);
    if (one-time initialization token for voiceDialRestrictedInvocations != -1) {
      swift_once();
    }
    uint64_t v22 = static RestrictionCheckGuardFlow.voiceDialRestrictedInvocations;
    uint64_t v23 = Parse.DirectInvocation.identifier.getter();
    specialized Set.contains(_:)(v23, v24, v22);
    char v26 = v25;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v1);
  }
  else
  {
    if (v14 == enum case for Parse.NLv4IntentOnly(_:))
    {
      uint64_t v27 = OUTLINED_FUNCTION_3_42();
      v28(v27);
      swift_unknownObjectRelease();
LABEL_11:
      uint64_t v29 = *(void *)(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin25RestrictionCheckGuardFlow_sharedGlobals + 24);
      uint64_t v30 = *(void *)(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin25RestrictionCheckGuardFlow_sharedGlobals + 32);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin25RestrictionCheckGuardFlow_sharedGlobals), v29);
      uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 72))(v29, v30);
      (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v31 + 192))(v45, v13);
      swift_release();
      outlined init with copy of PhoneCallNLIntent?((uint64_t)v45, (uint64_t)v43);
      char v26 = v44;
      if (v44)
      {
        __swift_project_boxed_opaque_existential_1(v43, v44);
        char v26 = PhoneCallNLIntent.isOutgoingCall()();
        outlined destroy of PhoneCallNLIntent?((uint64_t)v45);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
      }
      else
      {
        outlined destroy of PhoneCallNLIntent?((uint64_t)v45);
        outlined destroy of PhoneCallNLIntent?((uint64_t)v43);
      }
      goto LABEL_14;
    }
    if (v14 == enum case for Parse.uso(_:))
    {
LABEL_2:
      uint64_t v15 = OUTLINED_FUNCTION_8_42();
      v16(v15);
      goto LABEL_11;
    }
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)static Logger.siriPhone);
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)OUTLINED_FUNCTION_7_2();
      *(_WORD *)uint64_t v40 = 0;
      _os_log_impl(&dword_0, v38, v39, "#RestrictionCheckFlow Unknown parse type, not applying VoiceDial restriction", v40, 2u);
      OUTLINED_FUNCTION_6();
    }

    uint64_t v41 = OUTLINED_FUNCTION_8_42();
    v42(v41);
    char v26 = 0;
  }
LABEL_14:
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  __swift_project_value_buffer(v32, (uint64_t)static Logger.siriPhone);
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v35 = 67109120;
    LODWORD(v45[0]) = v26 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v33, v34, "#RestrictionCheckFlow isVoiceDialRestrictedRequest: %{BOOL}d", v35, 8u);
    OUTLINED_FUNCTION_6();
  }

  return v26 & 1;
}

uint64_t RestrictionCheckGuardFlow.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin25RestrictionCheckGuardFlow_parse;
  type metadata accessor for Parse();
  OUTLINED_FUNCTION_15();
  (*(void (**)(uint64_t))(v2 + 8))(v1);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin25RestrictionCheckGuardFlow_sharedGlobals);
  swift_release();
  return v0;
}

uint64_t RestrictionCheckGuardFlow.__deallocating_deinit()
{
  RestrictionCheckGuardFlow.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Flow.on(input:) in conformance RestrictionCheckGuardFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance RestrictionCheckGuardFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

uint64_t protocol witness for Flow.execute() in conformance RestrictionCheckGuardFlow(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 160) + **(int **)(**(void **)v1 + 160));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for Flow.execute() in conformance RedirectToCompanionFlow;
  return v6(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance RestrictionCheckGuardFlow@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 112))();
  *a1 = result & 1;
  return result;
}

uint64_t partial apply for closure #1 in RestrictionCheckGuardFlow.execute()()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #1 in static CommonOutputs.promptCancelled(sharedGlobals:phoneCallCommonCATsSimple:);
  return closure #1 in RestrictionCheckGuardFlow.execute()(v0);
}

uint64_t sub_130BC8@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 112))();
  *a2 = result & 1;
  return result;
}

uint64_t ObjC metadata update function for RestrictionCheckGuardFlow()
{
  return type metadata accessor for RestrictionCheckGuardFlow();
}

uint64_t type metadata completion function for RestrictionCheckGuardFlow()
{
  uint64_t result = type metadata accessor for Parse();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t outlined init with copy of PhoneCallNLIntent?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallNLIntent?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_3_42()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_8_42()
{
  return v0;
}

PhoneCallFlowDelegatePlugin::IdentifyIncomingCallerCATs::Properties_optional __swiftcall IdentifyIncomingCallerCATs.Properties.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of IdentifyIncomingCallerCATs.Properties.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.value = PhoneCallFlowDelegatePlugin_IdentifyIncomingCallerCATs_Properties_offerFollowUpIntent;
  }
  else {
    v4.value = PhoneCallFlowDelegatePlugin_IdentifyIncomingCallerCATs_Properties_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

unint64_t IdentifyIncomingCallerCATsSimple.Properties.rawValue.getter(char a1)
{
  if (a1) {
    return 0xD00000000000002ALL;
  }
  else {
    return 0xD00000000000002CLL;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance IdentifyIncomingCallerCATs.Properties(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance IdentifyIncomingCallerCATs.Properties()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance IdentifyIncomingCallerCATs.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IdentifyIncomingCallerCATs.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::IdentifyIncomingCallerCATs::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance IdentifyIncomingCallerCATs.Properties@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::IdentifyIncomingCallerCATs::Properties_optional *a2@<X8>)
{
  result.value = IdentifyIncomingCallerCATs.Properties.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance IdentifyIncomingCallerCATs.Properties@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = IdentifyIncomingCallerCATsSimple.Properties.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t IdentifyIncomingCallerCATs.intentHandledResponse(incomingCallConcept:completion:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_31_0();
  *(_OWORD *)(v2 + 16) = xmmword_467710;
  *(void *)(v2 + 32) = 0xD000000000000013;
  *(void *)(v2 + 40) = 0x8000000000493CB0;
  if (a1)
  {
    uint64_t v3 = type metadata accessor for PhoneIncomingCall();
    uint64_t v4 = a1;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
    *(void *)(v2 + 56) = 0;
    *(void *)(v2 + 64) = 0;
  }
  *(void *)(v2 + 48) = v4;
  *(void *)(v2 + 72) = v3;
  swift_retain();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();

  return swift_bridgeObjectRelease();
}

uint64_t IdentifyIncomingCallerCATs.intentHandledResponse(incomingCallConcept:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_21_1((uint64_t)IdentifyIncomingCallerCATs.intentHandledResponse(incomingCallConcept:));
}

uint64_t IdentifyIncomingCallerCATs.intentHandledResponse(incomingCallConcept:)()
{
  uint64_t v1 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_31_0();
  v0[5] = v2;
  *(_OWORD *)(v2 + 16) = xmmword_467710;
  uint64_t v3 = OUTLINED_FUNCTION_10_1(v2, (uint64_t)"incomingCallConcept");
  if (v1)
  {
    uint64_t v3 = type metadata accessor for PhoneIncomingCall();
  }
  else
  {
    *(void *)(v2 + 56) = 0;
    *(void *)(v2 + 64) = 0;
  }
  *(void *)(v2 + 48) = v1;
  *(void *)(v2 + 72) = v3;
  OUTLINED_FUNCTION_19_2();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *uint64_t v4 = v0;
  v4[1] = AnswerCallCATs.intentHandledResponse(incomingCallConcept:);
  uint64_t v5 = v0[2];
  return v7(v5, 0xD00000000000002CLL, 0x800000000048D3F0, v2);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;

  uint64_t v1 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_31_0();
  v0[4] = v2;
  *(_OWORD *)(v2 + 16) = xmmword_467710;
  uint64_t v3 = OUTLINED_FUNCTION_10_1(v2, (uint64_t)"incomingCallConcept");
  if (v1)
  {
    uint64_t v3 = type metadata accessor for PhoneIncomingCall();
  }
  else
  {
    *(void *)(v2 + 56) = 0;
    *(void *)(v2 + 64) = 0;
  }
  *(void *)(v2 + 48) = v1;
  *(void *)(v2 + 72) = v3;
  OUTLINED_FUNCTION_19_2();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[5] = v4;
  *uint64_t v4 = v0;
  v4[1] = AnswerCallCATs.intentHandledResponse(incomingCallConcept:);
  uint64_t v5 = OUTLINED_FUNCTION_11_6(0xD00000000000002CLL);
  return v7(v5);
}

uint64_t IdentifyIncomingCallerCATs.intentHandledResponse(incomingCallConcept:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_21_1((uint64_t)IdentifyIncomingCallerCATs.intentHandledResponse(incomingCallConcept:));
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_31_0();
  *(_OWORD *)(v2 + 16) = xmmword_467710;
  *(void *)(v2 + 32) = 0xD000000000000013;
  *(void *)(v2 + 40) = 0x8000000000493CB0;
  if (a1)
  {
    uint64_t v3 = type metadata accessor for PhoneIncomingCall();
    uint64_t v4 = a1;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
    *(void *)(v2 + 56) = 0;
    *(void *)(v2 + 64) = 0;
  }
  *(void *)(v2 + 48) = v4;
  *(void *)(v2 + 72) = v3;
  swift_retain();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();

  return swift_bridgeObjectRelease();
}

uint64_t IdentifyIncomingCallerCATs.offerFollowUpIntent(followUpOfferType:completion:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v3 = OUTLINED_FUNCTION_11_0(v2);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_4();
  uint64_t v6 = v5 - v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v7 = OUTLINED_FUNCTION_31_0();
  *(_OWORD *)(v7 + 16) = xmmword_467710;
  uint64_t v8 = (uint64_t *)(v7 + 48);
  *(void *)(v7 + 32) = 0xD000000000000011;
  *(void *)(v7 + 40) = 0x8000000000493CD0;
  outlined init with copy of SpeakableString?(a1, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload(v6, 1, v9) == 1)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v6, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v8 = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
  }
  else
  {
    *(void *)(v7 + 72) = v9;
    __swift_allocate_boxed_opaque_existential_1(v8);
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v10 + 32))();
  }
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  return swift_bridgeObjectRelease();
}

uint64_t IdentifyIncomingCallerCATs.offerFollowUpIntent(followUpOfferType:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v4);
  v1[5] = swift_task_alloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v5, v6, v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t (*v10)(uint64_t, unint64_t, unint64_t, uint64_t);
  uint64_t v11;

  uint64_t v1 = v0[5];
  uint64_t v2 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_31_0();
  v0[6] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_467710;
  uint64_t v4 = (uint64_t *)(v3 + 48);
  *(void *)(v3 + 32) = 0xD000000000000011;
  *(void *)(v3 + 40) = 0x8000000000493CD0;
  outlined init with copy of SpeakableString?(v2, v1, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  if (OUTLINED_FUNCTION_37_2(v5) == 1)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v0[5], &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v4 = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
  }
  else
  {
    *(void *)(v3 + 72) = v2;
    __swift_allocate_boxed_opaque_existential_1(v4);
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v6 + 32))();
  }
  uint64_t v7 = (void *)OUTLINED_FUNCTION_3_0();
  v0[7] = v7;
  *uint64_t v7 = v0;
  v7[1] = AnswerCallCATs.offerFollowUpIntent(followUpOfferType:);
  uint64_t v8 = v0[2];
  return v10(v8, 0xD00000000000002ALL, 0x800000000048D420, v3);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_1_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v3);
  v1[4] = swift_task_alloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v4, v5, v6);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;

  uint64_t v1 = v0[4];
  uint64_t v2 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_31_0();
  v0[5] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_467710;
  uint64_t v4 = (uint64_t *)(v3 + 48);
  *(void *)(v3 + 32) = 0xD000000000000011;
  *(void *)(v3 + 40) = 0x8000000000493CD0;
  outlined init with copy of SpeakableString?(v2, v1, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  if (OUTLINED_FUNCTION_37_2(v5) == 1)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v0[4], &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v4 = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
  }
  else
  {
    *(void *)(v3 + 72) = v2;
    __swift_allocate_boxed_opaque_existential_1(v4);
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v6 + 32))();
  }
  uint64_t v7 = (void *)OUTLINED_FUNCTION_3_0();
  v0[6] = v7;
  *uint64_t v7 = v0;
  v7[1] = AnswerCallCATs.offerFollowUpIntent(followUpOfferType:);
  uint64_t v8 = OUTLINED_FUNCTION_11_6(0xD00000000000002ALL);
  return v10(v8);
}

uint64_t IdentifyIncomingCallerCATs.offerFollowUpIntent(followUpOfferType:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v3 = OUTLINED_FUNCTION_11_0(v2);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_4();
  uint64_t v6 = v5 - v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v7 = OUTLINED_FUNCTION_31_0();
  *(_OWORD *)(v7 + 16) = xmmword_467710;
  uint64_t v8 = (uint64_t *)(v7 + 48);
  *(void *)(v7 + 32) = 0xD000000000000011;
  *(void *)(v7 + 40) = 0x8000000000493CD0;
  outlined init with copy of SpeakableString?(a1, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload(v6, 1, v9) == 1)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v6, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v8 = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
  }
  else
  {
    *(void *)(v7 + 72) = v9;
    __swift_allocate_boxed_opaque_existential_1(v8);
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v10 + 32))();
  }
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  return swift_bridgeObjectRelease();
}

uint64_t IdentifyIncomingCallerCATs.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return IdentifyIncomingCallerCATs.init(templateDir:options:globals:)(a1, a2);
}

uint64_t IdentifyIncomingCallerCATs.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CATOption();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_4();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  uint64_t v10 = OUTLINED_FUNCTION_11_0(v9);
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_4();
  outlined init with copy of SpeakableString?(a1, v12 - v11, (uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
  uint64_t v13 = CATWrapper.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(a1, (uint64_t *)&demangling cache variable for type metadata for URL?);
  return v13;
}

unint64_t lazy protocol witness table accessor for type IdentifyIncomingCallerCATs.Properties and conformance IdentifyIncomingCallerCATs.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type IdentifyIncomingCallerCATs.Properties and conformance IdentifyIncomingCallerCATs.Properties;
  if (!lazy protocol witness table cache variable for type IdentifyIncomingCallerCATs.Properties and conformance IdentifyIncomingCallerCATs.Properties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IdentifyIncomingCallerCATs.Properties and conformance IdentifyIncomingCallerCATs.Properties);
  }
  return result;
}

uint64_t type metadata accessor for IdentifyIncomingCallerCATs()
{
  uint64_t result = type metadata singleton initialization cache for IdentifyIncomingCallerCATs;
  if (!type metadata singleton initialization cache for IdentifyIncomingCallerCATs) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for IdentifyIncomingCallerCATs()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for IdentifyIncomingCallerCATs()
{
  return type metadata accessor for IdentifyIncomingCallerCATs();
}

unsigned char *storeEnumTagSinglePayload for IdentifyIncomingCallerCATs.Properties(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x131D14);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IdentifyIncomingCallerCATs.Properties()
{
  return &type metadata for IdentifyIncomingCallerCATs.Properties;
}

uint64_t static Transformer<>.transformer(sharedGlobals:previousIntent:app:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  outlined init with copy of SignalProviding(a1, (uint64_t)v6);
  uint64_t v4 = swift_allocObject();
  outlined init with take of AppSelectionSignalComponent(v6, v4 + 16);
  *(void *)(v4 + 56) = a3;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
  type metadata accessor for INCallCapability(0);
  return Transformer.init(transform:)();
}

uint64_t closure #1 in static Transformer<>.transformer(sharedGlobals:previousIntent:app:)@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v132 = a4;
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  uint64_t v8 = OUTLINED_FUNCTION_10_23();
  v9(v8);
  __swift_project_boxed_opaque_existential_1(&v165, v168);
  OUTLINED_FUNCTION_10_23();
  char v10 = dispatch thunk of DeviceState.isWatch.getter();
  outlined init with copy of SignalProviding((uint64_t)&v165, (uint64_t)&v160);
  if (v10)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v160);
    outlined init with copy of SignalProviding((uint64_t)&v165, (uint64_t)&v155);
LABEL_4:
    HIDWORD(v128) = 1;
    goto LABEL_6;
  }
  __swift_project_boxed_opaque_existential_1(&v160, v163);
  OUTLINED_FUNCTION_10_23();
  char v11 = dispatch thunk of DeviceState.isHomePod.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v160);
  outlined init with copy of SignalProviding((uint64_t)&v165, (uint64_t)&v155);
  if (v11) {
    goto LABEL_4;
  }
  OUTLINED_FUNCTION_1_47(&v155);
  DeviceState.isAnyCar.getter();
  HIDWORD(v128) = v12;
LABEL_6:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v155);
  OUTLINED_FUNCTION_1_47(a1);
  Swift::Bool v13 = PhoneCallNLIntent.hasVideoCallSemantic()();
  uint64_t v14 = a2[3];
  uint64_t v15 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v14);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v15 + 152))(&v183, v14, v15);
  uint64_t v16 = *((void *)&v184 + 1);
  uint64_t v17 = v185;
  __swift_project_boxed_opaque_existential_1(&v183, *((uint64_t *)&v184 + 1));
  uint64_t v136 = v4;
  if (a3)
  {
    uint64_t v18 = App.appIdentifier.getter();
    uint64_t v20 = v19;
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v20 = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 16))(&v170, v18, v20, v16, v17);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v183);
  _s27PhoneCallFlowDelegatePlugin12AnnotatedAppVSgWObTm_0((uint64_t)&v170, (uint64_t)v182, &demangling cache variable for type metadata for AnnotatedApp?);
  if (*(void *)&v182[0])
  {
    long long v183 = v182[0];
    long long v184 = v182[1];
    long long v185 = v182[2];
    uint64_t v186 = *((void *)&v182[0] + 1);
    id v140 = *(_DWORD **)&v182[0];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    outlined release of Set<String>((uint64_t)&v186);
    _s27PhoneCallFlowDelegatePlugin12AnnotatedAppVSgWObTm_0((uint64_t)&v184, (uint64_t)v187, &demangling cache variable for type metadata for String?);
    outlined release of String?((uint64_t)v187);
    uint64_t v188 = *((void *)&v185 + 1);
    outlined release of Set<String>((uint64_t)&v188);
  }
  else
  {
    id v140 = 0;
  }
  outlined init with copy of SignalProviding((uint64_t)&v165, (uint64_t)&v150);
  uint64_t v21 = &unk_583000;
  if (!v13)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v150);
    outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)&v145);
    goto LABEL_20;
  }
  __swift_project_boxed_opaque_existential_1(&v150, v153);
  uint64_t v21 = (void *)&unk_583000;
  char v22 = dispatch thunk of DeviceState.isMac.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v150);
  outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)&v145);
  if ((v22 & 1) == 0)
  {
LABEL_20:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v145);
    goto LABEL_21;
  }
  __swift_project_boxed_opaque_existential_1(&v145, v148);
  LOBYTE(v23) = OUTLINED_FUNCTION_11_26();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v145);
  if ((v23 & 1) == 0)
  {
    OUTLINED_FUNCTION_3_43();
    if (!v24) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    char v26 = OUTLINED_FUNCTION_25_0(v25, (uint64_t)static Logger.siriPhone);
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (!OUTLINED_FUNCTION_8_2(v27)) {
      goto LABEL_53;
    }
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v28 = 0;
    uint64_t v29 = "Not setting callCapability because it's a Mac which may not have a camera to make video calls.";
LABEL_52:
    _os_log_impl(&dword_0, v26, (os_log_type_t)v23, v29, v28, 2u);
    OUTLINED_FUNCTION_6();
LABEL_53:

    uint64_t v34 = 0;
    char v39 = 1;
    goto LABEL_56;
  }
LABEL_21:
  uint64_t v30 = (_DWORD *)a1[3];
  __swift_project_boxed_opaque_existential_1(a1, (uint64_t)v30);
  if (OUTLINED_FUNCTION_11_26())
  {
    OUTLINED_FUNCTION_3_43();
    if (!v24) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    uint64_t v32 = (void *)OUTLINED_FUNCTION_25_0(v31, (uint64_t)static Logger.siriPhone);
    os_log_type_t v33 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_10_15(v33))
    {
      swift_slowAlloc();
      *(void *)&long long v179 = OUTLINED_FUNCTION_9_35();
      *uint64_t v30 = 136315138;
      uint64_t v34 = (uint64_t)(v30 + 1);
      *(void *)&long long v176 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallCapability>);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallCapability>.Type);
      uint64_t v35 = String.init<A>(describing:)();
      *(void *)&long long v176 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, (uint64_t *)&v179);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_2_46(&dword_0, v37, v38, "#%s has audio call semantic");
      OUTLINED_FUNCTION_12_19();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();

LABEL_26:
      char v39 = 0;
      goto LABEL_56;
    }
LABEL_55:

    char v39 = 0;
    uint64_t v34 = 1;
    goto LABEL_56;
  }
  if (BYTE4(v128) & 1 | !v13)
  {
    uint64_t v23 = a1[3];
    OUTLINED_FUNCTION_1_47(a1);
    if (PhoneCallNLIntent.isRedialOrCallBack()())
    {
      OUTLINED_FUNCTION_3_43();
      if (!v24) {
        swift_once();
      }
      uint64_t v40 = type metadata accessor for Logger();
      char v26 = OUTLINED_FUNCTION_25_0(v40, (uint64_t)static Logger.siriPhone);
      os_log_type_t v41 = static os_log_type_t.debug.getter();
      if (!OUTLINED_FUNCTION_8_2(v41)) {
        goto LABEL_53;
      }
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      uint64_t v29 = "Not setting callCapability because this is a redial or call_back request that doesn't specify audio or video filter.";
      goto LABEL_52;
    }
    if (v140)
    {
      swift_retain();
      LOBYTE(v23) = (_BYTE)v140;
      if (App.isFaceTime()())
      {
        _s27PhoneCallFlowDelegatePlugin12AnnotatedAppVSgWObTm_0((uint64_t)&v170, (uint64_t)&v176, &demangling cache variable for type metadata for AnnotatedApp?);
        if ((void)v176)
        {
          long long v180 = v177;
          long long v181 = v178;
          long long v179 = v176;
          if (v178 == 3)
          {
            uint64_t v49 = v21[466];
            swift_retain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v49 != -1) {
              swift_once();
            }
            uint64_t v50 = type metadata accessor for Logger();
            uint64_t v32 = (void *)OUTLINED_FUNCTION_25_0(v50, (uint64_t)static Logger.siriPhone);
            os_log_type_t v51 = static os_log_type_t.debug.getter();
            if (OUTLINED_FUNCTION_10_15(v51))
            {
              swift_slowAlloc();
              uint64_t v144 = OUTLINED_FUNCTION_9_35();
              *id v140 = 136315138;
              uint64_t v34 = (uint64_t)(v140 + 1);
              v189[0] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallCapability>);
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallCapability>.Type);
              uint64_t v52 = String.init<A>(describing:)();
              v189[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v53, &v144);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              OUTLINED_FUNCTION_2_46(&dword_0, v54, v55, "#%s: FaceTime predicted by app selection. Setting the callCapability to audio");
              OUTLINED_FUNCTION_12_19();
              OUTLINED_FUNCTION_6();
              OUTLINED_FUNCTION_6();

              swift_release();
              uint64_t v56 = swift_release();
              OUTLINED_FUNCTION_8_43(v56, v57, v58, v59, v60, v61, v62, v63, v120, v124, v128, (uint64_t)v132, v136, (uint64_t)v140, v144, v145, v146, v147, v148,
                v149,
                v150,
                v151,
                v152,
                v153,
                v154,
                v155,
                v156,
                v157,
                v158,
                v159,
                v160,
                v161,
                v162,
                v163,
                v164,
                v165,
                v166,
                v167,
                v168,
                v169,
                v170,
                v171,
                v172,
                v173,
                v174,
                v175,
                v176,
                *((uint64_t *)&v176 + 1),
                v177,
                *((uint64_t *)&v177 + 1),
                v178,
                *((uint64_t *)&v178 + 1),
                v179,
                *((uint64_t *)&v179 + 1));
              _s27PhoneCallFlowDelegatePlugin12AnnotatedAppVSgWObTm_0((uint64_t)&v180, (uint64_t)v189, &demangling cache variable for type metadata for String?);
              uint64_t v64 = outlined release of String?((uint64_t)v189);
              OUTLINED_FUNCTION_6_32(v64, v65, v66, v67, v68, v69, v70, v71, v121, v125, v129, v133, v137, v141, v144, v145, v146, v147, v148,
                v149,
                v150,
                v151,
                v152,
                v153,
                v154,
                v155,
                v156,
                v157,
                v158,
                v159,
                v160,
                v161,
                v162,
                v163,
                v164,
                v165,
                v166,
                v167,
                v168,
                v169,
                v170,
                v171,
                v172,
                v173,
                v174,
                v175,
                v176,
                *((uint64_t *)&v176 + 1),
                v177,
                *((uint64_t *)&v177 + 1),
                v178,
                *((uint64_t *)&v178 + 1),
                v179,
                *((uint64_t *)&v179 + 1),
                v180,
                *((uint64_t *)&v180 + 1),
                v181,
                *((uint64_t *)&v181 + 1));
              goto LABEL_26;
            }
            swift_release();
            uint64_t v90 = swift_release();
            OUTLINED_FUNCTION_8_43(v90, v91, v92, v93, v94, v95, v96, v97, v120, v124, v128, (uint64_t)v132, v136, (uint64_t)v140, v144, v145, v146, v147, v148,
              v149,
              v150,
              v151,
              v152,
              v153,
              v154,
              v155,
              v156,
              v157,
              v158,
              v159,
              v160,
              v161,
              v162,
              v163,
              v164,
              v165,
              v166,
              v167,
              v168,
              v169,
              v170,
              v171,
              v172,
              v173,
              v174,
              v175,
              v176,
              *((uint64_t *)&v176 + 1),
              v177,
              *((uint64_t *)&v177 + 1),
              v178,
              *((uint64_t *)&v178 + 1),
              v179,
              *((uint64_t *)&v179 + 1));
            _s27PhoneCallFlowDelegatePlugin12AnnotatedAppVSgWObTm_0((uint64_t)&v180, (uint64_t)v189, &demangling cache variable for type metadata for String?);
            uint64_t v98 = outlined release of String?((uint64_t)v189);
            OUTLINED_FUNCTION_6_32(v98, v99, v100, v101, v102, v103, v104, v105, v123, v127, v131, v135, v139, v143, v144, v145, v146, v147, v148,
              v149,
              v150,
              v151,
              v152,
              v153,
              v154,
              v155,
              v156,
              v157,
              v158,
              v159,
              v160,
              v161,
              v162,
              v163,
              v164,
              v165,
              v166,
              v167,
              v168,
              v169,
              v170,
              v171,
              v172,
              v173,
              v174,
              v175,
              v176,
              *((uint64_t *)&v176 + 1),
              v177,
              *((uint64_t *)&v177 + 1),
              v178,
              *((uint64_t *)&v178 + 1),
              v179,
              *((uint64_t *)&v179 + 1),
              v180,
              *((uint64_t *)&v180 + 1),
              v181,
              *((uint64_t *)&v181 + 1));
            goto LABEL_55;
          }
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRetain();
          uint64_t v72 = swift_release();
          OUTLINED_FUNCTION_8_43(v72, v73, v74, v75, v76, v77, v78, v79, v120, v124, v128, (uint64_t)v132, v4, (uint64_t)v140, v144, v145, v146, v147, v148,
            v149,
            v150,
            v151,
            v152,
            v153,
            v154,
            v155,
            v156,
            v157,
            v158,
            v159,
            v160,
            v161,
            v162,
            v163,
            v164,
            v165,
            v166,
            v167,
            v168,
            v169,
            v170,
            v171,
            v172,
            v173,
            v174,
            v175,
            v176,
            *((uint64_t *)&v176 + 1),
            v177,
            *((uint64_t *)&v177 + 1),
            v178,
            *((uint64_t *)&v178 + 1),
            v179,
            *((uint64_t *)&v179 + 1));
          _s27PhoneCallFlowDelegatePlugin12AnnotatedAppVSgWObTm_0((uint64_t)&v180, (uint64_t)v189, &demangling cache variable for type metadata for String?);
          uint64_t v80 = outlined release of String?((uint64_t)v189);
          OUTLINED_FUNCTION_6_32(v80, v81, v82, v83, v84, v85, v86, v87, v122, v126, v130, v134, v138, v142, v144, v145, v146, v147, v148,
            v149,
            v150,
            v151,
            v152,
            v153,
            v154,
            v155,
            v156,
            v157,
            v158,
            v159,
            v160,
            v161,
            v162,
            v163,
            v164,
            v165,
            v166,
            v167,
            v168,
            v169,
            v170,
            v171,
            v172,
            v173,
            v174,
            v175,
            v176,
            *((uint64_t *)&v176 + 1),
            v177,
            *((uint64_t *)&v177 + 1),
            v178,
            *((uint64_t *)&v178 + 1),
            v179,
            *((uint64_t *)&v179 + 1),
            v180,
            *((uint64_t *)&v180 + 1),
            v181,
            *((uint64_t *)&v181 + 1));
        }
      }
      swift_release();
    }
    OUTLINED_FUNCTION_3_43();
    if (!v24) {
      swift_once();
    }
    uint64_t v88 = type metadata accessor for Logger();
    char v26 = OUTLINED_FUNCTION_25_0(v88, (uint64_t)static Logger.siriPhone);
    os_log_type_t v89 = static os_log_type_t.debug.getter();
    if (!OUTLINED_FUNCTION_8_2(v89)) {
      goto LABEL_53;
    }
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v28 = 0;
    uint64_t v29 = "Not setting callCapability because the user has not specified one or specified video on a audio only device.";
    goto LABEL_52;
  }
  OUTLINED_FUNCTION_3_43();
  if (!v24) {
    swift_once();
  }
  uint64_t v42 = type metadata accessor for Logger();
  uint64_t v43 = (void *)OUTLINED_FUNCTION_25_0(v42, (uint64_t)static Logger.siriPhone);
  os_log_type_t v44 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_10_15(v44))
  {
    swift_slowAlloc();
    *(void *)&long long v179 = OUTLINED_FUNCTION_9_35();
    *uint64_t v30 = 136315138;
    *(void *)&long long v176 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallCapability>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallCapability>.Type);
    uint64_t v45 = String.init<A>(describing:)();
    *(void *)&long long v176 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, (uint64_t *)&v179);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_2_46(&dword_0, v47, v48, "#%s has video call semantic");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }

  char v39 = 0;
  uint64_t v34 = 2;
LABEL_56:
  OUTLINED_FUNCTION_3_43();
  if (!v24) {
    swift_once();
  }
  uint64_t v106 = type metadata accessor for Logger();
  os_log_type_t v107 = OUTLINED_FUNCTION_25_0(v106, (uint64_t)static Logger.siriPhone);
  os_log_type_t v108 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v107, v108))
  {
    uint64_t v109 = swift_slowAlloc();
    uint64_t v150 = swift_slowAlloc();
    *(_DWORD *)uint64_t v109 = 136315394;
    uint64_t v145 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallCapability>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallCapability>.Type);
    uint64_t v110 = String.init<A>(describing:)();
    uint64_t v145 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v110, v111, &v150);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v109 + 12) = 2080;
    if (v39)
    {
      unint64_t v112 = 0xE700000000000000;
      uint64_t v113 = 0x4E574F4E4B4E55;
LABEL_69:
      uint64_t v145 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v113, v112, &v150);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v107, v108, "#%s --> %s", (uint8_t *)v109, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();

      swift_release();
      outlined release of AnnotatedApp?(&v170);
      goto LABEL_70;
    }
    uint64_t BackingType = INCallCapabilityGetBackingType();
    if (BackingType == 2)
    {
      uint64_t v115 = @"VIDEO_CALL";
    }
    else
    {
      if (BackingType != 1)
      {
        uint64_t v115 = +[NSString stringWithFormat:@"(unknown: %i)", BackingType];
        goto LABEL_68;
      }
      uint64_t v115 = @"AUDIO_CALL";
    }
    uint64_t v116 = v115;
LABEL_68:
    v117 = v115;
    uint64_t v113 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v112 = v118;

    goto LABEL_69;
  }
  outlined release of AnnotatedApp?(&v170);

  swift_release();
LABEL_70:
  *uint64_t v132 = v34;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v165);
}

uint64_t sub_1329BC()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t partial apply for closure #1 in static Transformer<>.transformer(sharedGlobals:previousIntent:app:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in static Transformer<>.transformer(sharedGlobals:previousIntent:app:)(a1, (void *)(v2 + 16), *(void *)(v2 + 56), a2);
}

uint64_t *outlined release of AnnotatedApp?(uint64_t *a1)
{
  return a1;
}

uint64_t outlined consume of AnnotatedApp?(uint64_t result)
{
  if (result)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_47(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return v1;
}

void OUTLINED_FUNCTION_2_46(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_6_32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  *(void *)(v58 - 72) = a58;
  return outlined release of Set<String>(v58 - 72);
}

uint64_t OUTLINED_FUNCTION_8_43(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  *(void *)(v54 - 112) = a54;
  return outlined release of Set<String>(v54 - 112);
}

uint64_t OUTLINED_FUNCTION_9_35()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_10_23()
{
  return v0;
}

BOOL OUTLINED_FUNCTION_11_26()
{
  return PhoneCallNLIntent.hasAudioCallSemantic()();
}

uint64_t OUTLINED_FUNCTION_12_19()
{
  return swift_arrayDestroy();
}

PhoneCallFlowDelegatePlugin::AnnounceCallBellCATsSimple::Properties_optional __swiftcall AnnounceCallBellCATsSimple.Properties.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AnnounceCallBellCATsSimple.Properties.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return (PhoneCallFlowDelegatePlugin::AnnounceCallBellCATsSimple::Properties_optional)3;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::AnnounceCallBellCATsSimple::Properties_optional)v3;
  }
}

void AnnounceCallBellCATsSimple.Properties.rawValue.getter(char a1)
{
  if (!a1) {
    OUTLINED_FUNCTION_24_10();
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnnounceCallBellCATsSimple.Properties(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnnounceCallBellCATsSimple.Properties()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnnounceCallBellCATsSimple.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnnounceCallBellCATsSimple.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::AnnounceCallBellCATsSimple::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AnnounceCallBellCATsSimple.Properties@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::AnnounceCallBellCATsSimple::Properties_optional *a2@<X8>)
{
  result.value = AnnounceCallBellCATsSimple.Properties.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AnnounceCallBellCATsSimple.Properties(void *a1@<X8>)
{
  AnnounceCallBellCATsSimple.Properties.rawValue.getter(*v1);
  *a1 = v3;
  a1[1] = v4;
}

uint64_t AnnounceCallBellCATsSimple.announceCallBellEnded()()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_9_0();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = AnnounceCallBellCATsSimple.announceCallBellEnded();
  OUTLINED_FUNCTION_24_10();
  return v3(0xD000000000000026);
}

BOOL AnnounceCallBellCATsSimple.AnnounceCallBellEndedDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of AnnounceCallBellCATsSimple.AnnounceCallBellEndedDialogIds.init(rawValue:);
  return SuggestionsCATsSimple.PhoneCall_StartCallDialogIds.init(rawValue:)(a1, v1);
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance AnnounceCallBellCATsSimple.AnnounceCallBellEndedDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = AnnounceCallBellCATsSimple.AnnounceCallBellEndedDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AnnounceCallBellCATsSimple.AnnounceCallBellEndedDialogIds(void *a1@<X8>)
{
  *a1 = 0x31676F6C616964;
  a1[1] = 0xE700000000000000;
}

uint64_t AnnounceCallBellCATsSimple.announceCallBellEndedAsLabels()()
{
  Swift::OpaquePointer v1 = (void *)OUTLINED_FUNCTION_3_0();
  *(void *)(v0 + 16) = v1;
  lazy protocol witness table accessor for type AnnounceCallBellCATsSimple.AnnounceCallBellEndedDialogIds and conformance AnnounceCallBellCATsSimple.AnnounceCallBellEndedDialogIds();
  OUTLINED_FUNCTION_25_1();
  *Swift::OpaquePointer v1 = v2;
  v1[1] = AnnounceCallBellCATsSimple.announceCallBellEndedAsLabels();
  OUTLINED_FUNCTION_24_10();
  return v4(0xD000000000000026);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_1_0();
  uint64_t v3 = v2;
  uint64_t v7 = *v1;
  uint64_t v4 = swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v0) {
    uint64_t v4 = v3;
  }
  return v5(v4);
}

unint64_t lazy protocol witness table accessor for type AnnounceCallBellCATsSimple.AnnounceCallBellEndedDialogIds and conformance AnnounceCallBellCATsSimple.AnnounceCallBellEndedDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type AnnounceCallBellCATsSimple.AnnounceCallBellEndedDialogIds and conformance AnnounceCallBellCATsSimple.AnnounceCallBellEndedDialogIds;
  if (!lazy protocol witness table cache variable for type AnnounceCallBellCATsSimple.AnnounceCallBellEndedDialogIds and conformance AnnounceCallBellCATsSimple.AnnounceCallBellEndedDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnounceCallBellCATsSimple.AnnounceCallBellEndedDialogIds and conformance AnnounceCallBellCATsSimple.AnnounceCallBellEndedDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnnounceCallBellCATsSimple.AnnounceCallBellEndedDialogIds and conformance AnnounceCallBellCATsSimple.AnnounceCallBellEndedDialogIds;
  if (!lazy protocol witness table cache variable for type AnnounceCallBellCATsSimple.AnnounceCallBellEndedDialogIds and conformance AnnounceCallBellCATsSimple.AnnounceCallBellEndedDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnounceCallBellCATsSimple.AnnounceCallBellEndedDialogIds and conformance AnnounceCallBellCATsSimple.AnnounceCallBellEndedDialogIds);
  }
  return result;
}

uint64_t AnnounceCallBellCATsSimple.announceCallBellStarted()()
{
  OUTLINED_FUNCTION_1_0();
  Swift::OpaquePointer v1 = (void *)OUTLINED_FUNCTION_9_0();
  *(void *)(v0 + 16) = v1;
  *Swift::OpaquePointer v1 = v0;
  v1[1] = AnnounceCallBellCATsSimple.announceCallBellEnded();
  OUTLINED_FUNCTION_24_10();
  return v3(0xD000000000000028);
}

BOOL AnnounceCallBellCATsSimple.AnnounceCallBellStartedDialogIds.init(rawValue:)(Swift::String a1)
{
  v1._rawValue = &outlined read-only object #0 of AnnounceCallBellCATsSimple.AnnounceCallBellStartedDialogIds.init(rawValue:);
  return SuggestionsCATsSimple.PhoneCall_StartCallDialogIds.init(rawValue:)(a1, v1);
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance AnnounceCallBellCATsSimple.AnnounceCallBellStartedDialogIds@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = AnnounceCallBellCATsSimple.AnnounceCallBellStartedDialogIds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t AnnounceCallBellCATsSimple.announceCallBellStartedAsLabels()()
{
  Swift::OpaquePointer v1 = (void *)OUTLINED_FUNCTION_3_0();
  *(void *)(v0 + 16) = v1;
  lazy protocol witness table accessor for type AnnounceCallBellCATsSimple.AnnounceCallBellStartedDialogIds and conformance AnnounceCallBellCATsSimple.AnnounceCallBellStartedDialogIds();
  OUTLINED_FUNCTION_25_1();
  *Swift::OpaquePointer v1 = v2;
  v1[1] = AnnounceCallBellCATsSimple.announceCallBellEnded();
  OUTLINED_FUNCTION_24_10();
  return v4(0xD000000000000028);
}

unint64_t lazy protocol witness table accessor for type AnnounceCallBellCATsSimple.AnnounceCallBellStartedDialogIds and conformance AnnounceCallBellCATsSimple.AnnounceCallBellStartedDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type AnnounceCallBellCATsSimple.AnnounceCallBellStartedDialogIds and conformance AnnounceCallBellCATsSimple.AnnounceCallBellStartedDialogIds;
  if (!lazy protocol witness table cache variable for type AnnounceCallBellCATsSimple.AnnounceCallBellStartedDialogIds and conformance AnnounceCallBellCATsSimple.AnnounceCallBellStartedDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnounceCallBellCATsSimple.AnnounceCallBellStartedDialogIds and conformance AnnounceCallBellCATsSimple.AnnounceCallBellStartedDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnnounceCallBellCATsSimple.AnnounceCallBellStartedDialogIds and conformance AnnounceCallBellCATsSimple.AnnounceCallBellStartedDialogIds;
  if (!lazy protocol witness table cache variable for type AnnounceCallBellCATsSimple.AnnounceCallBellStartedDialogIds and conformance AnnounceCallBellCATsSimple.AnnounceCallBellStartedDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnounceCallBellCATsSimple.AnnounceCallBellStartedDialogIds and conformance AnnounceCallBellCATsSimple.AnnounceCallBellStartedDialogIds);
  }
  return result;
}

uint64_t AnnounceCallBellCATsSimple.informDoubleTapToEnd()()
{
  OUTLINED_FUNCTION_1_0();
  Swift::OpaquePointer v1 = (void *)OUTLINED_FUNCTION_9_0();
  *(void *)(v0 + 16) = v1;
  *Swift::OpaquePointer v1 = v0;
  v1[1] = AnnounceCallBellCATsSimple.announceCallBellEnded();
  OUTLINED_FUNCTION_24_10();
  return v3(0xD000000000000025);
}

PhoneCallFlowDelegatePlugin::AnnounceCallBellCATsSimple::InformDoubleTapToEndDialogIds_optional __swiftcall AnnounceCallBellCATsSimple.InformDoubleTapToEndDialogIds.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AnnounceCallBellCATsSimple.InformDoubleTapToEndDialogIds.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.value = PhoneCallFlowDelegatePlugin_AnnounceCallBellCATsSimple_InformDoubleTapToEndDialogIds_dialog2;
  }
  else {
    v4.value = PhoneCallFlowDelegatePlugin_AnnounceCallBellCATsSimple_InformDoubleTapToEndDialogIds_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t AnnounceCallBellCATsSimple.InformDoubleTapToEndDialogIds.rawValue.getter(char a1)
{
  if (a1) {
    return 0x32676F6C616964;
  }
  else {
    return 0x6573557473726946;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnnounceCallBellCATsSimple.InformDoubleTapToEndDialogIds(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnnounceCallBellCATsSimple.InformDoubleTapToEndDialogIds()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnnounceCallBellCATsSimple.InformDoubleTapToEndDialogIds()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnnounceCallBellCATsSimple.InformDoubleTapToEndDialogIds()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

PhoneCallFlowDelegatePlugin::AnnounceCallBellCATsSimple::InformDoubleTapToEndDialogIds_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AnnounceCallBellCATsSimple.InformDoubleTapToEndDialogIds@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::AnnounceCallBellCATsSimple::InformDoubleTapToEndDialogIds_optional *a2@<X8>)
{
  result.value = AnnounceCallBellCATsSimple.InformDoubleTapToEndDialogIds.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AnnounceCallBellCATsSimple.InformDoubleTapToEndDialogIds@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AnnounceCallBellCATsSimple.InformDoubleTapToEndDialogIds.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t AnnounceCallBellCATsSimple.informDoubleTapToEndAsLabels()()
{
  Swift::OpaquePointer v1 = (void *)OUTLINED_FUNCTION_3_0();
  *(void *)(v0 + 16) = v1;
  lazy protocol witness table accessor for type AnnounceCallBellCATsSimple.InformDoubleTapToEndDialogIds and conformance AnnounceCallBellCATsSimple.InformDoubleTapToEndDialogIds();
  OUTLINED_FUNCTION_25_1();
  *Swift::OpaquePointer v1 = v2;
  v1[1] = AnnounceCallBellCATsSimple.announceCallBellEnded();
  OUTLINED_FUNCTION_24_10();
  return v4(0xD000000000000025);
}

unint64_t lazy protocol witness table accessor for type AnnounceCallBellCATsSimple.InformDoubleTapToEndDialogIds and conformance AnnounceCallBellCATsSimple.InformDoubleTapToEndDialogIds()
{
  unint64_t result = lazy protocol witness table cache variable for type AnnounceCallBellCATsSimple.InformDoubleTapToEndDialogIds and conformance AnnounceCallBellCATsSimple.InformDoubleTapToEndDialogIds;
  if (!lazy protocol witness table cache variable for type AnnounceCallBellCATsSimple.InformDoubleTapToEndDialogIds and conformance AnnounceCallBellCATsSimple.InformDoubleTapToEndDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnounceCallBellCATsSimple.InformDoubleTapToEndDialogIds and conformance AnnounceCallBellCATsSimple.InformDoubleTapToEndDialogIds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnnounceCallBellCATsSimple.InformDoubleTapToEndDialogIds and conformance AnnounceCallBellCATsSimple.InformDoubleTapToEndDialogIds;
  if (!lazy protocol witness table cache variable for type AnnounceCallBellCATsSimple.InformDoubleTapToEndDialogIds and conformance AnnounceCallBellCATsSimple.InformDoubleTapToEndDialogIds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnounceCallBellCATsSimple.InformDoubleTapToEndDialogIds and conformance AnnounceCallBellCATsSimple.InformDoubleTapToEndDialogIds);
  }
  return result;
}

uint64_t AnnounceCallBellCATsSimple.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return AnnounceCallBellCATsSimple.init(templateDir:options:globals:)(a1, a2);
}

uint64_t AnnounceCallBellCATsSimple.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_8_18();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v10 - 8);
  outlined init with copy of URL?(a1, (uint64_t)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a2, v2);
  uint64_t v12 = CATWrapperSimple.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a2, v2);
  outlined destroy of URL?(a1);
  return v12;
}

uint64_t AnnounceCallBellCATsSimple.__allocating_init(useResponseMode:options:)()
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_8_18();
  __chkstk_darwin(v0);
  OUTLINED_FUNCTION_52();
  uint64_t v1 = swift_allocObject();
  uint64_t v2 = OUTLINED_FUNCTION_28_0();
  v3(v2);
  CATWrapperSimple.init(useResponseMode:options:)();
  uint64_t v4 = OUTLINED_FUNCTION_30_1();
  v5(v4);
  return v1;
}

uint64_t AnnounceCallBellCATsSimple.init(useResponseMode:options:)()
{
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_8_18();
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_52();
  uint64_t v2 = OUTLINED_FUNCTION_28_0();
  v3(v2);
  CATWrapperSimple.init(useResponseMode:options:)();
  uint64_t v4 = OUTLINED_FUNCTION_30_1();
  v5(v4);
  return v0;
}

unint64_t lazy protocol witness table accessor for type AnnounceCallBellCATsSimple.Properties and conformance AnnounceCallBellCATsSimple.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type AnnounceCallBellCATsSimple.Properties and conformance AnnounceCallBellCATsSimple.Properties;
  if (!lazy protocol witness table cache variable for type AnnounceCallBellCATsSimple.Properties and conformance AnnounceCallBellCATsSimple.Properties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnounceCallBellCATsSimple.Properties and conformance AnnounceCallBellCATsSimple.Properties);
  }
  return result;
}

uint64_t type metadata accessor for AnnounceCallBellCATsSimple()
{
  uint64_t result = type metadata singleton initialization cache for AnnounceCallBellCATsSimple;
  if (!type metadata singleton initialization cache for AnnounceCallBellCATsSimple) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for AnnounceCallBellCATsSimple()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for AnnounceCallBellCATsSimple()
{
  return type metadata accessor for AnnounceCallBellCATsSimple();
}

unsigned char *storeEnumTagSinglePayload for AnnounceCallBellCATsSimple.Properties(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x133A0CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for AnnounceCallBellCATsSimple.Properties()
{
}

void type metadata accessor for AnnounceCallBellCATsSimple.AnnounceCallBellEndedDialogIds()
{
}

unsigned char *storeEnumTagSinglePayload for AnnounceCallBellCATsSimple.AnnounceCallBellEndedDialogIds(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x133AECLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for AnnounceCallBellCATsSimple.AnnounceCallBellStartedDialogIds()
{
}

unsigned char *storeEnumTagSinglePayload for AnnounceCallBellCATsSimple.InformDoubleTapToEndDialogIds(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x133BECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for AnnounceCallBellCATsSimple.InformDoubleTapToEndDialogIds()
{
}

PhoneCallFlowDelegatePlugin::PhoneCallDisplayTextCATs::Properties_optional __swiftcall PhoneCallDisplayTextCATs.Properties.init(rawValue:)(Swift::String rawValue)
{
  unint64_t v1 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v1 >= 0x15) {
    return (PhoneCallFlowDelegatePlugin::PhoneCallDisplayTextCATs::Properties_optional)21;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::PhoneCallDisplayTextCATs::Properties_optional)v1;
  }
}

unint64_t PhoneCallDisplayTextCATs.Properties.rawValue.getter(char a1)
{
  unint64_t result = 0xD000000000000028;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000020;
      break;
    case 2:
    case 11:
    case 13:
    case 19:
      unint64_t result = 0xD000000000000023;
      break;
    case 3:
      unint64_t result = 0xD000000000000025;
      break;
    case 4:
      unint64_t result = 0xD000000000000022;
      break;
    case 5:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 6:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 7:
      unint64_t result = 0xD000000000000027;
      break;
    case 8:
      unint64_t result = 0xD000000000000026;
      break;
    case 9:
      unint64_t result = 0xD00000000000002CLL;
      break;
    case 10:
      unint64_t result = 0xD000000000000027;
      break;
    case 12:
      unint64_t result = 0xD000000000000026;
      break;
    case 14:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 15:
      unint64_t result = 0xD00000000000002BLL;
      break;
    case 16:
      unint64_t result = 0xD000000000000022;
      break;
    case 17:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 18:
      unint64_t result = 0xD000000000000022;
      break;
    case 20:
      unint64_t result = 0xD00000000000001BLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallDisplayTextCATs.Properties(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PhoneCallDisplayTextCATs.Properties()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneCallDisplayTextCATs.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallDisplayTextCATs.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::PhoneCallDisplayTextCATs::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallDisplayTextCATs.Properties@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallDisplayTextCATs::Properties_optional *a2@<X8>)
{
  result.value = PhoneCallDisplayTextCATs.Properties.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallDisplayTextCATs.Properties@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = PhoneCallDisplayTextCATs.Properties.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t PhoneCallDisplayTextCATs.addToCallButtonText(completion:)()
{
  return OUTLINED_FUNCTION_6_10();
}

uint64_t PhoneCallDisplayTextCATs.addToCallButtonText()()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v0 = OUTLINED_FUNCTION_3_0();
  unint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *unint64_t v1 = v2;
  v1[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactUnsupportedFlowStrategy<A>;
  OUTLINED_FUNCTION_43_2();
  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_46();
  return v3();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t (*v4)(unint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  unint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *unint64_t v1 = v2;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  int v3 = OUTLINED_FUNCTION_44_0(40);
  return v4(v3);
}

{
  return OUTLINED_FUNCTION_7_12();
}

void PhoneCallDisplayTextCATs.appSettings(appName:completion:)()
{
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  OUTLINED_FUNCTION_24_0();
  unint64_t v1 = v0;
  int v3 = v2;
  uint64_t v5 = v4;
  unsigned int v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = OUTLINED_FUNCTION_11_0(v6);
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_4();
  uint64_t v10 = v9 - v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v11 = OUTLINED_FUNCTION_31_0();
  *(_OWORD *)(v11 + 16) = xmmword_467710;
  uint64_t v12 = (uint64_t *)(v11 + 48);
  *(void *)(v11 + 32) = v3;
  *(void *)(v11 + 40) = v1;
  outlined init with copy of SpeakableString?(v5, v10, &demangling cache variable for type metadata for SpeakableString?);
  Swift::Bool v13 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_28_6(v10, 1, v13);
  if (v14)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v10, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v12 = 0u;
    *(_OWORD *)(v11 + 64) = 0u;
  }
  else
  {
    *(void *)(v11 + 72) = v13;
    __swift_allocate_boxed_opaque_existential_1(v12);
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v15 + 32))();
  }
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_26_1();
}

uint64_t PhoneCallDisplayTextCATs.appSettings(appName:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v4);
  v1[5] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  __n128 *v2;
  __n128 *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void (*v7)(void);
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_58_4();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  unint64_t v1 = OUTLINED_FUNCTION_31_0();
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_57_0(v1);
  uint64_t v3 = OUTLINED_FUNCTION_4_41(v2, (__n128)xmmword_467710);
  OUTLINED_FUNCTION_39_0((uint64_t)v3, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_38_3(v5);
  if (v6)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v0, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_42_1();
  }
  else
  {
    OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_17();
    v7();
  }
  uint64_t v8 = OUTLINED_FUNCTION_9_0();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_35_0(v8);
  *uint64_t v9 = v10;
  v9[1] = PhoneCallDisplayTextCATs.appSettings(appName:);
  OUTLINED_FUNCTION_54_2();
  OUTLINED_FUNCTION_23_13();
  OUTLINED_FUNCTION_34_5();
  OUTLINED_FUNCTION_20_2();
  return v15(v11, v12, v13, v14, v15, v16, v17, v18);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    OUTLINED_FUNCTION_6_0();
    return v10();
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_1_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v3);
  v1[4] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  __n128 *v2;
  __n128 *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void (*v7)(void);
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_53_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  unint64_t v1 = OUTLINED_FUNCTION_31_0();
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_20_3(v1);
  uint64_t v3 = OUTLINED_FUNCTION_4_41(v2, (__n128)xmmword_467710);
  OUTLINED_FUNCTION_39_0((uint64_t)v3, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_1_4(v5);
  if (v6)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v0, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_42_1();
  }
  else
  {
    OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_17();
    v7();
  }
  uint64_t v8 = OUTLINED_FUNCTION_9_0();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_29_6(v8);
  *uint64_t v9 = v10;
  v9[1] = SuggestionsCATsSimple.phoneCall_StartFTCallAsLabels(name:hasReference:);
  OUTLINED_FUNCTION_10_16();
  OUTLINED_FUNCTION_36_1(32);
  OUTLINED_FUNCTION_20_2();
  return v14(v11, v12, v13, v14, v15, v16, v17, v18);
}

void PhoneCallDisplayTextCATs.appSettings(appName:)()
{
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  OUTLINED_FUNCTION_24_0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = OUTLINED_FUNCTION_11_0(v7);
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_53();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v9 = OUTLINED_FUNCTION_31_0();
  *(_OWORD *)(v9 + 16) = xmmword_467710;
  uint64_t v10 = (uint64_t *)(v9 + 48);
  *(void *)(v9 + 32) = v4;
  *(void *)(v9 + 40) = v2;
  outlined init with copy of SpeakableString?(v6, v0, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v11 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_28_6(v0, 1, v11);
  if (v12)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v0, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v10 = 0u;
    *(_OWORD *)(v9 + 64) = 0u;
  }
  else
  {
    *(void *)(v9 + 72) = v11;
    __swift_allocate_boxed_opaque_existential_1(v10);
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v13 + 32))();
  }
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_26_1();
}

void PhoneCallDisplayTextCATs.callButtonText(label:completion:)()
{
}

uint64_t PhoneCallDisplayTextCATs.callButtonText(label:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v4);
  v1[5] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  __n128 *v2;
  __n128 *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void (*v7)(void);
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_58_4();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  unint64_t v1 = OUTLINED_FUNCTION_31_0();
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_57_0(v1);
  uint64_t v3 = OUTLINED_FUNCTION_45_6(v2, (__n128)xmmword_467710);
  OUTLINED_FUNCTION_39_0((uint64_t)v3, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_38_3(v5);
  if (v6)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v0, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_42_1();
  }
  else
  {
    OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_17();
    v7();
  }
  uint64_t v8 = OUTLINED_FUNCTION_9_0();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_35_0(v8);
  *uint64_t v9 = v10;
  v9[1] = PhoneCallDisplayTextCATs.callButtonText(label:);
  OUTLINED_FUNCTION_54_2();
  OUTLINED_FUNCTION_23_13();
  OUTLINED_FUNCTION_34_5();
  OUTLINED_FUNCTION_20_2();
  return v15(v11, v12, v13, v14, v15, v16, v17, v18);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    OUTLINED_FUNCTION_6_0();
    return v10();
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_1_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v3);
  v1[4] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  __n128 *v2;
  __n128 *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void (*v7)(void);
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_53_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  unint64_t v1 = OUTLINED_FUNCTION_31_0();
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_20_3(v1);
  uint64_t v3 = OUTLINED_FUNCTION_45_6(v2, (__n128)xmmword_467710);
  OUTLINED_FUNCTION_39_0((uint64_t)v3, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_1_4(v5);
  if (v6)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v0, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_42_1();
  }
  else
  {
    OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_17();
    v7();
  }
  uint64_t v8 = OUTLINED_FUNCTION_9_0();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_29_6(v8);
  *uint64_t v9 = v10;
  v9[1] = UnsupportedFlowCATs.unsupportedEmergencyContactCall(thirdPartyAppName:isFaceTime:);
  OUTLINED_FUNCTION_10_16();
  OUTLINED_FUNCTION_36_1(35);
  OUTLINED_FUNCTION_20_2();
  return v14(v11, v12, v13, v14, v15, v16, v17, v18);
}

void PhoneCallDisplayTextCATs.callButtonText(label:)()
{
}

uint64_t PhoneCallDisplayTextCATs.cancelButtonText(completion:)()
{
  return OUTLINED_FUNCTION_6_10();
}

uint64_t PhoneCallDisplayTextCATs.cancelButtonText()()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v0 = OUTLINED_FUNCTION_3_0();
  unint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *unint64_t v1 = v2;
  v1[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactUnsupportedFlowStrategy<A>;
  OUTLINED_FUNCTION_43_2();
  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_46();
  return v3();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t (*v4)(unint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  unint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *unint64_t v1 = v2;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  uint64_t v3 = OUTLINED_FUNCTION_44_0(37);
  return v4(v3);
}

{
  return OUTLINED_FUNCTION_7_12();
}

uint64_t PhoneCallDisplayTextCATs.cancelledText(completion:)()
{
  return OUTLINED_FUNCTION_6_10();
}

uint64_t PhoneCallDisplayTextCATs.cancelledText()()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v0 = OUTLINED_FUNCTION_3_0();
  unint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *unint64_t v1 = v2;
  v1[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactUnsupportedFlowStrategy<A>;
  OUTLINED_FUNCTION_43_2();
  OUTLINED_FUNCTION_46();
  return v3();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t (*v4)(unint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  unint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *unint64_t v1 = v2;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  uint64_t v3 = OUTLINED_FUNCTION_44_0(34);
  return v4(v3);
}

{
  return OUTLINED_FUNCTION_7_12();
}

uint64_t PhoneCallDisplayTextCATs.changeApp(completion:)()
{
  return OUTLINED_FUNCTION_6_10();
}

uint64_t PhoneCallDisplayTextCATs.changeApp()()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v0 = OUTLINED_FUNCTION_3_0();
  unint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *unint64_t v1 = v2;
  v1[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactUnsupportedFlowStrategy<A>;
  OUTLINED_FUNCTION_43_2();
  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_46();
  return v3();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t (*v4)(unint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  unint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *unint64_t v1 = v2;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  uint64_t v3 = OUTLINED_FUNCTION_44_0(30);
  return v4(v3);
}

{
  return OUTLINED_FUNCTION_7_12();
}

uint64_t PhoneCallDisplayTextCATs.changeText(completion:)()
{
  return OUTLINED_FUNCTION_6_10();
}

uint64_t PhoneCallDisplayTextCATs.changeText()()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v0 = OUTLINED_FUNCTION_3_0();
  unint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *unint64_t v1 = v2;
  v1[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactUnsupportedFlowStrategy<A>;
  OUTLINED_FUNCTION_43_2();
  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_46();
  return v3();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t (*v4)(unint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  unint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *unint64_t v1 = v2;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  uint64_t v3 = OUTLINED_FUNCTION_44_0(31);
  return v4(v3);
}

{
  return OUTLINED_FUNCTION_7_12();
}

uint64_t PhoneCallDisplayTextCATs.emergencySashTitle(completion:)()
{
  return OUTLINED_FUNCTION_6_10();
}

uint64_t PhoneCallDisplayTextCATs.emergencySashTitle()()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v0 = OUTLINED_FUNCTION_3_0();
  unint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *unint64_t v1 = v2;
  v1[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactUnsupportedFlowStrategy<A>;
  OUTLINED_FUNCTION_43_2();
  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_46();
  return v3();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t (*v4)(unint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  unint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *unint64_t v1 = v2;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  uint64_t v3 = OUTLINED_FUNCTION_44_0(39);
  return v4(v3);
}

{
  return OUTLINED_FUNCTION_7_12();
}

uint64_t PhoneCallDisplayTextCATs.emergencyServices(completion:)()
{
  return OUTLINED_FUNCTION_6_10();
}

uint64_t PhoneCallDisplayTextCATs.emergencyServices()()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v0 = OUTLINED_FUNCTION_3_0();
  unint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *unint64_t v1 = v2;
  v1[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactUnsupportedFlowStrategy<A>;
  OUTLINED_FUNCTION_43_2();
  OUTLINED_FUNCTION_46();
  return v3();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t (*v4)(unint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  unint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *unint64_t v1 = v2;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  uint64_t v3 = OUTLINED_FUNCTION_44_0(38);
  return v4(v3);
}

{
  return OUTLINED_FUNCTION_7_12();
}

uint64_t PhoneCallDisplayTextCATs.emergencyServicesPrompt(completion:)()
{
  return OUTLINED_FUNCTION_6_10();
}

uint64_t PhoneCallDisplayTextCATs.emergencyServicesPrompt()()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v0 = OUTLINED_FUNCTION_3_0();
  unint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *unint64_t v1 = v2;
  v1[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactUnsupportedFlowStrategy<A>;
  OUTLINED_FUNCTION_43_2();
  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_46();
  return v3();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t (*v4)(unint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  unint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *unint64_t v1 = v2;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  uint64_t v3 = OUTLINED_FUNCTION_44_0(44);
  return v4(v3);
}

{
  return OUTLINED_FUNCTION_7_12();
}

void PhoneCallDisplayTextCATs.handleLabelAndType(personHandleLabel:label:type:completion:)()
{
  OUTLINED_FUNCTION_24_0();
  v27[2] = v0;
  v27[1] = v1;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = OUTLINED_FUNCTION_11_0(v8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)v27 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)v27 - v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v18 = OUTLINED_FUNCTION_24_3();
  *(_OWORD *)(v18 + 16) = xmmword_46A250;
  uint64_t v19 = (uint64_t *)(v18 + 48);
  *(void *)(v18 + 32) = 0xD000000000000011;
  *(void *)(v18 + 40) = 0x8000000000493F80;
  outlined init with copy of SpeakableString?(v7, (uint64_t)v17, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v20 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_28_6((uint64_t)v17, 1, v20);
  if (v21)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0((uint64_t)v17, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v19 = 0u;
    *(_OWORD *)(v18 + 64) = 0u;
  }
  else
  {
    *(void *)(v18 + 72) = v20;
    __swift_allocate_boxed_opaque_existential_1(v19);
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v22 + 32))();
  }
  OUTLINED_FUNCTION_61_4();
  *(void *)(v18 + 80) = v23;
  *(void *)(v18 + 88) = v24;
  outlined init with copy of SpeakableString?(v5, (uint64_t)v15, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_28_6((uint64_t)v15, 1, v20);
  if (v21)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0((uint64_t)v15, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_42_1();
  }
  else
  {
    *(void *)(v18 + 120) = v20;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v18 + 96));
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v25 + 32))();
  }
  *(void *)(v18 + 128) = 1701869940;
  *(void *)(v18 + 136) = 0xE400000000000000;
  outlined init with copy of SpeakableString?(v3, (uint64_t)v12, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_28_6((uint64_t)v12, 1, v20);
  if (v21)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0((uint64_t)v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_42_1();
  }
  else
  {
    *(void *)(v18 + 168) = v20;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v18 + 144));
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v26 + 32))();
  }
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_26_1();
}

uint64_t PhoneCallDisplayTextCATs.handleLabelAndType(personHandleLabel:label:type:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[5] = v2;
  v1[6] = v0;
  v1[3] = v3;
  v1[4] = v4;
  v1[2] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v6);
  v1[7] = swift_task_alloc();
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(void);
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  void *v13;
  uint64_t (*v15)(void);
  uint64_t v16;

  uint64_t v1 = v0[9];
  uint64_t v2 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_24_3();
  v0[10] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_46A250;
  uint64_t v4 = (uint64_t *)(v3 + 48);
  *(void *)(v3 + 32) = 0xD000000000000011;
  *(void *)(v3 + 40) = 0x8000000000493F80;
  outlined init with copy of SpeakableString?(v2, v1, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  if (OUTLINED_FUNCTION_60(v5) == 1)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v0[9], &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_48_4();
  }
  else
  {
    *(void *)(v3 + 72) = v2;
    __swift_allocate_boxed_opaque_existential_1(v4);
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_26_13();
    v6();
  }
  uint64_t v7 = v0[8];
  OUTLINED_FUNCTION_49_6();
  outlined init with copy of SpeakableString?(v8, v7, &demangling cache variable for type metadata for SpeakableString?);
  if (__swift_getEnumTagSinglePayload(v7, 1, v2) == 1)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v0[8], &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_48_4();
  }
  else
  {
    *(void *)(v3 + 120) = v2;
    __swift_allocate_boxed_opaque_existential_1(v4);
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_26_13();
    v9();
  }
  uint64_t v10 = v0[7];
  OUTLINED_FUNCTION_55_4();
  outlined init with copy of SpeakableString?(v11, v10, &demangling cache variable for type metadata for SpeakableString?);
  if (__swift_getEnumTagSinglePayload(v10, 1, v2) == 1)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v0[7], &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_48_4();
  }
  else
  {
    *(void *)(v3 + 168) = v2;
    __swift_allocate_boxed_opaque_existential_1(v4);
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_26_13();
    v12();
  }
  uint64_t v13 = (void *)OUTLINED_FUNCTION_3_0();
  v0[11] = v13;
  *uint64_t v13 = v0;
  v13[1] = PhoneCallDisplayTextCATs.handleLabelAndType(personHandleLabel:label:type:);
  OUTLINED_FUNCTION_23_13();
  return v15();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  *(void *)(v3 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_6_0();
    return v10();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_16_1();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_1_0();
  v1[4] = v2;
  v1[5] = v0;
  v1[2] = v3;
  v1[3] = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v5);
  v1[6] = swift_task_alloc();
  v1[7] = swift_task_alloc();
  v1[8] = swift_task_alloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v6, v7, v8);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(void);
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  void *v13;
  uint64_t (*v15)(unint64_t, unint64_t, uint64_t);
  uint64_t v16;

  uint64_t v1 = v0[8];
  uint64_t v2 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_24_3();
  v0[9] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_46A250;
  uint64_t v4 = (uint64_t *)(v3 + 48);
  *(void *)(v3 + 32) = 0xD000000000000011;
  *(void *)(v3 + 40) = 0x8000000000493F80;
  outlined init with copy of SpeakableString?(v2, v1, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  if (OUTLINED_FUNCTION_60(v5) == 1)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v0[8], &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_48_4();
  }
  else
  {
    *(void *)(v3 + 72) = v2;
    __swift_allocate_boxed_opaque_existential_1(v4);
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_26_13();
    v6();
  }
  uint64_t v7 = v0[7];
  OUTLINED_FUNCTION_49_6();
  outlined init with copy of SpeakableString?(v8, v7, &demangling cache variable for type metadata for SpeakableString?);
  if (__swift_getEnumTagSinglePayload(v7, 1, v2) == 1)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v0[7], &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_48_4();
  }
  else
  {
    *(void *)(v3 + 120) = v2;
    __swift_allocate_boxed_opaque_existential_1(v4);
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_26_13();
    v9();
  }
  uint64_t v10 = v0[6];
  OUTLINED_FUNCTION_55_4();
  outlined init with copy of SpeakableString?(v11, v10, &demangling cache variable for type metadata for SpeakableString?);
  if (__swift_getEnumTagSinglePayload(v10, 1, v2) == 1)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v0[6], &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_48_4();
  }
  else
  {
    *(void *)(v3 + 168) = v2;
    __swift_allocate_boxed_opaque_existential_1(v4);
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_26_13();
    v12();
  }
  uint64_t v13 = (void *)OUTLINED_FUNCTION_3_0();
  v0[10] = v13;
  *uint64_t v13 = v0;
  v13[1] = PhoneCallDisplayTextCATs.handleLabelAndType(personHandleLabel:label:type:);
  return v15(0xD000000000000027, 0x800000000048D6A0, v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  *(void *)(v3 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = OUTLINED_FUNCTION_32_1();
    return v11(v10);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_16_1();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void PhoneCallDisplayTextCATs.handleLabelAndType(personHandleLabel:label:type:)()
{
  OUTLINED_FUNCTION_24_0();
  v28[0] = v0;
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = OUTLINED_FUNCTION_11_0(v7);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)v28 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)v28 - v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v17 = OUTLINED_FUNCTION_24_3();
  *(_OWORD *)(v17 + 16) = xmmword_46A250;
  *(void *)(v17 + 32) = 0xD000000000000011;
  *(void *)(v17 + 40) = 0x8000000000493F80;
  outlined init with copy of SpeakableString?(v6, (uint64_t)v16, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v18 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_28_6((uint64_t)v16, 1, v18);
  if (v19)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0((uint64_t)v16, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_42_1();
  }
  else
  {
    *(void *)(v17 + 72) = v18;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v17 + 48));
    OUTLINED_FUNCTION_10();
    (*(void (**)(uint64_t))(v20 + 32))(v21);
  }
  OUTLINED_FUNCTION_61_4();
  *(void *)(v17 + 80) = v22;
  *(void *)(v17 + 88) = v23;
  outlined init with copy of SpeakableString?(v4, (uint64_t)v14, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_28_6((uint64_t)v14, 1, v18);
  if (v19)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0((uint64_t)v14, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_42_1();
  }
  else
  {
    *(void *)(v17 + 120) = v18;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v17 + 96));
    OUTLINED_FUNCTION_10();
    (*(void (**)(uint64_t))(v24 + 32))(v25);
  }
  *(void *)(v17 + 128) = 1701869940;
  *(void *)(v17 + 136) = 0xE400000000000000;
  outlined init with copy of SpeakableString?(v2, (uint64_t)v11, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_28_6((uint64_t)v11, 1, v18);
  if (v19)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0((uint64_t)v11, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_42_1();
  }
  else
  {
    *(void *)(v17 + 168) = v18;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v17 + 144));
    OUTLINED_FUNCTION_10();
    (*(void (**)(uint64_t))(v26 + 32))(v27);
  }
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_26_1();
}

uint64_t PhoneCallDisplayTextCATs.joinButtonText(completion:)()
{
  return OUTLINED_FUNCTION_6_10();
}

uint64_t PhoneCallDisplayTextCATs.joinButtonText()()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v0 = OUTLINED_FUNCTION_3_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *uint64_t v1 = v2;
  v1[1] = protocol witness for Flow.execute() in conformance RedirectToCompanionFlow;
  OUTLINED_FUNCTION_43_2();
  OUTLINED_FUNCTION_46();
  return v3();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t (*v4)(unint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *uint64_t v1 = v2;
  v1[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  uint64_t v3 = OUTLINED_FUNCTION_44_0(35);
  return v4(v3);
}

{
  return OUTLINED_FUNCTION_7_12();
}

uint64_t PhoneCallDisplayTextCATs.newCallButtonText(completion:)()
{
  return OUTLINED_FUNCTION_6_10();
}

uint64_t PhoneCallDisplayTextCATs.newCallButtonText()()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v0 = OUTLINED_FUNCTION_3_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *uint64_t v1 = v2;
  v1[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactUnsupportedFlowStrategy<A>;
  OUTLINED_FUNCTION_43_2();
  OUTLINED_FUNCTION_46();
  return v3();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t (*v4)(unint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *uint64_t v1 = v2;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  uint64_t v3 = OUTLINED_FUNCTION_44_0(38);
  return v4(v3);
}

{
  return OUTLINED_FUNCTION_7_12();
}

uint64_t PhoneCallDisplayTextCATs.nextButtonText(completion:)()
{
  return OUTLINED_FUNCTION_6_10();
}

uint64_t PhoneCallDisplayTextCATs.nextButtonText()()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v0 = OUTLINED_FUNCTION_3_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *uint64_t v1 = v2;
  v1[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactUnsupportedFlowStrategy<A>;
  OUTLINED_FUNCTION_43_2();
  OUTLINED_FUNCTION_46();
  return v3();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t (*v4)(unint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *uint64_t v1 = v2;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  uint64_t v3 = OUTLINED_FUNCTION_44_0(35);
  return v4(v3);
}

{
  return OUTLINED_FUNCTION_7_12();
}

void PhoneCallDisplayTextCATs.openApp(appName:completion:)()
{
}

uint64_t PhoneCallDisplayTextCATs.openApp(appName:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v4);
  v1[5] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  __n128 *v2;
  __n128 *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void (*v7)(void);
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_58_4();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v1 = OUTLINED_FUNCTION_31_0();
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_57_0(v1);
  uint64_t v3 = OUTLINED_FUNCTION_4_41(v2, (__n128)xmmword_467710);
  OUTLINED_FUNCTION_39_0((uint64_t)v3, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_38_3(v5);
  if (v6)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v0, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_42_1();
  }
  else
  {
    OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_17();
    v7();
  }
  uint64_t v8 = OUTLINED_FUNCTION_9_0();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_35_0(v8);
  *uint64_t v9 = v10;
  v9[1] = PhoneCallDisplayTextCATs.appSettings(appName:);
  OUTLINED_FUNCTION_54_2();
  OUTLINED_FUNCTION_23_13();
  OUTLINED_FUNCTION_34_5();
  OUTLINED_FUNCTION_20_2();
  return v15(v11, v12, v13, v14, v15, v16, v17, v18);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_1_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v3);
  v1[4] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  __n128 *v2;
  __n128 *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void (*v7)(void);
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_53_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v1 = OUTLINED_FUNCTION_31_0();
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_20_3(v1);
  uint64_t v3 = OUTLINED_FUNCTION_4_41(v2, (__n128)xmmword_467710);
  OUTLINED_FUNCTION_39_0((uint64_t)v3, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_1_4(v5);
  if (v6)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v0, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_42_1();
  }
  else
  {
    OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_17();
    v7();
  }
  uint64_t v8 = OUTLINED_FUNCTION_9_0();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_29_6(v8);
  *uint64_t v9 = v10;
  v9[1] = SuggestionsCATsSimple.phoneCall_StartFTCallAsLabels(name:hasReference:);
  OUTLINED_FUNCTION_10_16();
  OUTLINED_FUNCTION_36_1(28);
  OUTLINED_FUNCTION_20_2();
  return v14(v11, v12, v13, v14, v15, v16, v17, v18);
}

void PhoneCallDisplayTextCATs.openApp(appName:)()
{
}

uint64_t PhoneCallDisplayTextCATs.openContactsButtonText(completion:)()
{
  return OUTLINED_FUNCTION_6_10();
}

uint64_t PhoneCallDisplayTextCATs.openContactsButtonText()()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v0 = OUTLINED_FUNCTION_3_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *uint64_t v1 = v2;
  v1[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactUnsupportedFlowStrategy<A>;
  OUTLINED_FUNCTION_43_2();
  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_46();
  return v3();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t (*v4)(unint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *uint64_t v1 = v2;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  uint64_t v3 = OUTLINED_FUNCTION_44_0(43);
  return v4(v3);
}

{
  return OUTLINED_FUNCTION_7_12();
}

uint64_t PhoneCallDisplayTextCATs.transcription(completion:)()
{
  return OUTLINED_FUNCTION_6_10();
}

uint64_t PhoneCallDisplayTextCATs.transcription()()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v0 = OUTLINED_FUNCTION_3_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *uint64_t v1 = v2;
  v1[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactUnsupportedFlowStrategy<A>;
  OUTLINED_FUNCTION_43_2();
  OUTLINED_FUNCTION_46();
  return v3();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t (*v4)(unint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *uint64_t v1 = v2;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  uint64_t v3 = OUTLINED_FUNCTION_44_0(34);
  return v4(v3);
}

{
  return OUTLINED_FUNCTION_7_12();
}

void PhoneCallDisplayTextCATs.tryWithApp(appName:isThirdPartyApp:completion:)()
{
}

{
  uint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;

  OUTLINED_FUNCTION_24_0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v10 = OUTLINED_FUNCTION_11_0(v9);
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_4();
  uint64_t v13 = v12 - v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v14 = (__n128 *)OUTLINED_FUNCTION_36_2();
  OUTLINED_FUNCTION_4_41(v14, (__n128)xmmword_467720);
  outlined init with copy of SpeakableString?(v8, v13, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v15 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_28_6(v13, 1, v15);
  if (v16)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v13, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_42_1();
  }
  else
  {
    v14[4].n128_u64[1] = v15;
    __swift_allocate_boxed_opaque_existential_1(v0);
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v17 + 32))();
  }
  v14[5].n128_u64[0] = v4;
  v14[5].n128_u64[1] = v2;
  v14[7].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v14[6].n128_u8[0] = v6 & 1;
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_26_1();
}

uint64_t PhoneCallDisplayTextCATs.tryWithApp(appName:isThirdPartyApp:)()
{
  OUTLINED_FUNCTION_1_0();
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v0;
  *(unsigned char *)(v1 + 72) = v3;
  *(void *)(v1 + 16) = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v5);
  *(void *)(v1 + 40) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  __n128 *v2;
  __n128 *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void (*v7)(void);
  char v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_58_4();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v1 = OUTLINED_FUNCTION_36_2();
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_57_0(v1);
  char v3 = OUTLINED_FUNCTION_4_41(v2, (__n128)xmmword_467720);
  OUTLINED_FUNCTION_39_0((uint64_t)v3, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_38_3(v5);
  if (v6)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v0, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_42_1();
  }
  else
  {
    OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_17();
    v7();
  }
  OUTLINED_FUNCTION_33_8();
  OUTLINED_FUNCTION_62_4(v8);
  uint64_t v9 = OUTLINED_FUNCTION_9_0();
  uint64_t v10 = (void *)OUTLINED_FUNCTION_35_0(v9);
  *uint64_t v10 = v11;
  v10[1] = PhoneCallDisplayTextCATs.callButtonText(label:);
  OUTLINED_FUNCTION_54_2();
  OUTLINED_FUNCTION_23_13();
  OUTLINED_FUNCTION_34_5();
  OUTLINED_FUNCTION_20_2();
  return v16(v12, v13, v14, v15, v16, v17, v18, v19);
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_1_0();
  *(unsigned char *)(v1 + 64) = v2;
  *(void *)(v1 + 16) = v3;
  *(void *)(v1 + 24) = v0;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v4);
  *(void *)(v1 + 32) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  __n128 *v2;
  __n128 *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void (*v7)(void);
  char v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_53_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v1 = OUTLINED_FUNCTION_36_2();
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_20_3(v1);
  char v3 = OUTLINED_FUNCTION_4_41(v2, (__n128)xmmword_467720);
  OUTLINED_FUNCTION_39_0((uint64_t)v3, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_1_4(v5);
  if (v6)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v0, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_42_1();
  }
  else
  {
    OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_17();
    v7();
  }
  OUTLINED_FUNCTION_33_8();
  OUTLINED_FUNCTION_62_4(v8);
  uint64_t v9 = OUTLINED_FUNCTION_9_0();
  uint64_t v10 = (void *)OUTLINED_FUNCTION_29_6(v9);
  *uint64_t v10 = v11;
  v10[1] = UnsupportedFlowCATs.unsupportedEmergencyContactCall(thirdPartyAppName:isFaceTime:);
  OUTLINED_FUNCTION_10_16();
  OUTLINED_FUNCTION_36_1(31);
  OUTLINED_FUNCTION_20_2();
  return v15(v12, v13, v14, v15, v16, v17, v18, v19);
}

void PhoneCallDisplayTextCATs.tryWithApp(appName:isThirdPartyApp:)()
{
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;

  OUTLINED_FUNCTION_24_0();
  uint64_t v1 = v0;
  char v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = OUTLINED_FUNCTION_11_0(v8);
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_4();
  uint64_t v12 = v11 - v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v13 = OUTLINED_FUNCTION_36_2();
  *(_OWORD *)(v13 + 16) = xmmword_467720;
  uint64_t v14 = (uint64_t *)(v13 + 48);
  *(void *)(v13 + 32) = 0x656D614E707061;
  *(void *)(v13 + 40) = 0xE700000000000000;
  outlined init with copy of SpeakableString?(v7, v12, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v15 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_28_6(v12, 1, v15);
  if (v16)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v12, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v14 = 0u;
    *(_OWORD *)(v13 + 64) = 0u;
  }
  else
  {
    *(void *)(v13 + 72) = v15;
    __swift_allocate_boxed_opaque_existential_1(v14);
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v17 + 32))();
  }
  *(void *)(v13 + 80) = v3;
  *(void *)(v13 + 88) = v1;
  *(void *)(v13 + 120) = &type metadata for Bool;
  *(unsigned char *)(v13 + 96) = v5 & 1;
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_26_1();
}

uint64_t PhoneCallDisplayTextCATs.unknownCaller(completion:)()
{
  return OUTLINED_FUNCTION_6_10();
}

uint64_t PhoneCallDisplayTextCATs.unknownCaller()()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v0 = OUTLINED_FUNCTION_3_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *uint64_t v1 = v2;
  v1[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactUnsupportedFlowStrategy<A>;
  OUTLINED_FUNCTION_43_2();
  OUTLINED_FUNCTION_46();
  return v3();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t (*v4)(unint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *uint64_t v1 = v2;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  char v3 = OUTLINED_FUNCTION_44_0(34);
  return v4(v3);
}

{
  return OUTLINED_FUNCTION_7_12();
}

uint64_t PhoneCallDisplayTextCATs.updateSettings(completion:)()
{
  return OUTLINED_FUNCTION_6_10();
}

uint64_t PhoneCallDisplayTextCATs.updateSettings()()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v0 = OUTLINED_FUNCTION_3_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *uint64_t v1 = v2;
  v1[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactUnsupportedFlowStrategy<A>;
  OUTLINED_FUNCTION_43_2();
  OUTLINED_FUNCTION_46();
  return v3();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t (*v4)(unint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *uint64_t v1 = v2;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  char v3 = OUTLINED_FUNCTION_44_0(35);
  return v4(v3);
}

{
  return OUTLINED_FUNCTION_7_12();
}

void PhoneCallDisplayTextCATs.useApp(appName:isPhoneApp:completion:)()
{
}

uint64_t PhoneCallDisplayTextCATs.useApp(appName:isPhoneApp:)()
{
  OUTLINED_FUNCTION_1_0();
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v0;
  *(unsigned char *)(v1 + 72) = v3;
  *(void *)(v1 + 16) = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v5);
  *(void *)(v1 + 40) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  __n128 *v2;
  __n128 *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void (*v7)(void);
  char v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_58_4();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v1 = OUTLINED_FUNCTION_36_2();
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_57_0(v1);
  char v3 = OUTLINED_FUNCTION_4_41(v2, (__n128)xmmword_467720);
  OUTLINED_FUNCTION_39_0((uint64_t)v3, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_38_3(v5);
  if (v6)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v0, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_42_1();
  }
  else
  {
    OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_17();
    v7();
  }
  OUTLINED_FUNCTION_42_6();
  OUTLINED_FUNCTION_62_4(v8);
  uint64_t v9 = OUTLINED_FUNCTION_9_0();
  uint64_t v10 = (void *)OUTLINED_FUNCTION_35_0(v9);
  *uint64_t v10 = v11;
  v10[1] = PhoneCallDisplayTextCATs.appSettings(appName:);
  OUTLINED_FUNCTION_54_2();
  OUTLINED_FUNCTION_23_13();
  OUTLINED_FUNCTION_34_5();
  OUTLINED_FUNCTION_20_2();
  return v16(v12, v13, v14, v15, v16, v17, v18, v19);
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_1_0();
  *(unsigned char *)(v1 + 64) = v2;
  *(void *)(v1 + 16) = v3;
  *(void *)(v1 + 24) = v0;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v4);
  *(void *)(v1 + 32) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  __n128 *v2;
  __n128 *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void (*v7)(void);
  char v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_53_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v1 = OUTLINED_FUNCTION_36_2();
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_20_3(v1);
  char v3 = OUTLINED_FUNCTION_4_41(v2, (__n128)xmmword_467720);
  OUTLINED_FUNCTION_39_0((uint64_t)v3, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_1_4(v5);
  if (v6)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v0, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_42_1();
  }
  else
  {
    OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_17();
    v7();
  }
  OUTLINED_FUNCTION_42_6();
  OUTLINED_FUNCTION_62_4(v8);
  uint64_t v9 = OUTLINED_FUNCTION_9_0();
  uint64_t v10 = (void *)OUTLINED_FUNCTION_29_6(v9);
  *uint64_t v10 = v11;
  v10[1] = SuggestionsCATsSimple.phoneCall_StartFTCallAsLabels(name:hasReference:);
  OUTLINED_FUNCTION_10_16();
  OUTLINED_FUNCTION_36_1(27);
  OUTLINED_FUNCTION_20_2();
  return v15(v12, v13, v14, v15, v16, v17, v18, v19);
}

void PhoneCallDisplayTextCATs.useApp(appName:isPhoneApp:)()
{
}

unint64_t lazy protocol witness table accessor for type PhoneCallDisplayTextCATs.Properties and conformance PhoneCallDisplayTextCATs.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallDisplayTextCATs.Properties and conformance PhoneCallDisplayTextCATs.Properties;
  if (!lazy protocol witness table cache variable for type PhoneCallDisplayTextCATs.Properties and conformance PhoneCallDisplayTextCATs.Properties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallDisplayTextCATs.Properties and conformance PhoneCallDisplayTextCATs.Properties);
  }
  return result;
}

uint64_t type metadata completion function for PhoneCallDisplayTextCATs()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for PhoneCallDisplayTextCATs()
{
  return type metadata accessor for PhoneCallDisplayTextCATs();
}

uint64_t getEnumTagSinglePayload for PhoneCallDisplayTextCATs.Properties(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xEC)
  {
    if (a2 + 20 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 20) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 21;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x15;
  int v5 = v6 - 21;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for PhoneCallDisplayTextCATs.Properties(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 20 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 20) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEB)
  {
    unsigned int v6 = ((a2 - 236) >> 8) + 1;
    *unint64_t result = a2 + 20;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x13824CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 20;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PhoneCallDisplayTextCATs.Properties()
{
  return &type metadata for PhoneCallDisplayTextCATs.Properties;
}

__n128 *OUTLINED_FUNCTION_4_41(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x656D614E707061;
  result[2].n128_u64[1] = 0xE700000000000000;
  return result;
}

void OUTLINED_FUNCTION_29_11()
{
}

void OUTLINED_FUNCTION_30_11()
{
}

void OUTLINED_FUNCTION_33_8()
{
  *(void *)(v0 + 80) = 0x5064726968547369;
  *(void *)(v0 + 88) = 0xEF70704179747261;
}

void OUTLINED_FUNCTION_42_6()
{
  *(void *)(v0 + 80) = 0x41656E6F68507369;
  *(void *)(v0 + 88) = 0xEA00000000007070;
}

__n128 *OUTLINED_FUNCTION_45_6(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x6C6562616CLL;
  result[2].n128_u64[1] = 0xE500000000000000;
  return result;
}

void OUTLINED_FUNCTION_47_5()
{
}

double OUTLINED_FUNCTION_48_4()
{
  double result = 0.0;
  *uint64_t v0 = 0u;
  v0[1] = 0u;
  return result;
}

void OUTLINED_FUNCTION_49_6()
{
  *(void *)(v0 + 80) = 0x6C6562616CLL;
  *(void *)(v0 + 88) = 0xE500000000000000;
}

void OUTLINED_FUNCTION_50_3()
{
}

uint64_t OUTLINED_FUNCTION_54_2()
{
  return *(void *)(v0 + 16);
}

void OUTLINED_FUNCTION_55_4()
{
  *(void *)(v0 + 128) = 1701869940;
  *(void *)(v0 + 136) = 0xE400000000000000;
}

void OUTLINED_FUNCTION_62_4(char a1@<W8>)
{
  *(void *)(v2 + 120) = v1;
  *(unsigned char *)(v2 + 96) = a1;
}

uint64_t IncomingCallActionHandleIntentFlowStrategy.__allocating_init(strategy:sharedGlobals:callStateNotificationManager:audioSessionManager:sbsManager:)()
{
  OUTLINED_FUNCTION_15_19();
  uint64_t v0 = swift_allocObject();
  IncomingCallActionHandleIntentFlowStrategy.init(strategy:sharedGlobals:callStateNotificationManager:audioSessionManager:sbsManager:)();
  return v0;
}

uint64_t IncomingCallActionHandleIntentFlowStrategy.announceCallsContext.getter()
{
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
  uint64_t v1 = OUTLINED_FUNCTION_3_35();
  return v2(v1);
}

uint64_t IncomingCallActionHandleIntentFlowStrategy.incomingCallCatsSimple.getter()
{
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
  uint64_t v1 = OUTLINED_FUNCTION_4_42();
  return v2(v1);
}

uint64_t IncomingCallActionHandleIntentFlowStrategy.sbsManager.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + 176, a1);
}

uint64_t IncomingCallActionHandleIntentFlowStrategy.deviceState.getter()
{
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), *(void *)(v0 + 120));
  uint64_t v1 = OUTLINED_FUNCTION_4_42();
  return v2(v1);
}

uint64_t IncomingCallActionHandleIntentFlowStrategy.init(strategy:sharedGlobals:callStateNotificationManager:audioSessionManager:sbsManager:)()
{
  OUTLINED_FUNCTION_15_19();
  outlined init with take of AppSelectionSignalComponent(v5, v1 + 16);
  outlined init with take of AppSelectionSignalComponent(v4, v1 + 96);
  outlined init with take of AppSelectionSignalComponent(v3, v1 + 56);
  outlined init with take of AppSelectionSignalComponent(v2, v1 + 136);
  outlined init with take of AppSelectionSignalComponent(v0, v1 + 176);
  return v1;
}

uint64_t IncomingCallActionHandleIntentFlowStrategy.makeIntentExecutionBehavior(app:intent:)()
{
  return OUTLINED_FUNCTION_21_1((uint64_t)IncomingCallActionHandleIntentFlowStrategy.makeIntentExecutionBehavior(app:intent:));
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v8;

  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.siriPhone);
  uint64_t v2 = Logger.logObject.getter();
  int v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    unsigned int v4 = (_WORD *)OUTLINED_FUNCTION_7_2();
    OUTLINED_FUNCTION_32_2(v4);
    OUTLINED_FUNCTION_10_24(&dword_0, v2, v3, "#IncomingCallActionHandleIntentFlowStrategy makeIntentExecutionBehavior using standard PhoneIntentHandler");
    OUTLINED_FUNCTION_6();
  }

  type metadata accessor for SiriKitIntentExecutionBehavior();
  uint64_t v5 = static SiriKitIntentExecutionBehavior.standard()();
  unsigned int v6 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v6(v5);
}

uint64_t IncomingCallActionHandleIntentFlowStrategy.makePreHandleIntentOutput(rchRecord:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  OUTLINED_FUNCTION_2();
  v1[5] = v4;
  uint64_t v5 = type metadata accessor for DispatchTimeInterval();
  v1[6] = v5;
  OUTLINED_FUNCTION_19_0(v5);
  v1[7] = v6;
  v1[8] = swift_task_alloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void (*v9)(uint64_t, BOOL (*)(int), void *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t);
  uint64_t (*v26)(void);
  uint64_t v28;

  uint64_t v1 = (void *)v0[4];
  uint64_t v2 = v1[10];
  uint64_t v3 = v1[11];
  __swift_project_boxed_opaque_existential_1(v1 + 7, v2);
  if (one-time initialization token for defaultLoggingTaskTimeout != -1) {
    swift_once();
  }
  uint64_t v5 = v0[7];
  uint64_t v4 = v0[8];
  uint64_t v6 = v0[6];
  uint64_t v7 = (void *)v0[4];
  uint64_t v8 = __swift_project_value_buffer(v6, (uint64_t)static CallStateNotificationManager.defaultLoggingTaskTimeout);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v8, v6);
  uint64_t v9 = *(void (**)(uint64_t, BOOL (*)(int), void *, uint64_t, uint64_t))(v3 + 8);
  swift_retain();
  v9(v4, partial apply for closure #1 in IncomingCallActionHandleIntentFlowStrategy.makePreHandleIntentOutput(rchRecord:), v7, v2, v3);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v10 = v7[15];
  uint64_t v11 = v7[16];
  __swift_project_boxed_opaque_existential_1(v7 + 12, v10);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 56))(v10, v11);
  LOBYTE(v10) = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 192))(v12);
  swift_release();
  if (v10)
  {
    uint64_t v13 = (void *)v0[4];
    uint64_t v14 = v13[5];
    uint64_t v15 = v13[6];
    __swift_project_boxed_opaque_existential_1(v13 + 2, v14);
    type metadata accessor for IntentResolutionRecord();
    uint64_t v16 = IntentResolutionRecord.app.getter();
    uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(v15 + 48))(v7 + 12, v16, v14, v15);
    swift_release();
    if (v17)
    {
      IntentResolutionRecord.app.getter();
      uint64_t v18 = App.appIdentifier.getter();
      uint64_t v20 = v19;
      swift_release();
      if (v20)
      {
        uint64_t v21 = (void *)v0[4];
        uint64_t v22 = v21[20];
        uint64_t v23 = v21[21];
        __swift_project_boxed_opaque_existential_1(v21 + 17, v22);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 8))(v18, v20, v22, v23);
        swift_bridgeObjectRelease();
        __swift_project_boxed_opaque_existential_1(v21 + 22, v21[25]);
        uint64_t v24 = OUTLINED_FUNCTION_3_35();
        v25(v24);
      }
    }
  }
  type metadata accessor for EmptyOutput();
  static EmptyOutput.instance.getter();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  return v26();
}

BOOL closure #1 in IncomingCallActionHandleIntentFlowStrategy.makePreHandleIntentOutput(rchRecord:)(int a1, void *a2)
{
  if (a1 == 1)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.siriPhone);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl(&dword_0, v5, v6, "#SiriKitEventSender call state went active, logging .uufrReady", v7, 2u);
      swift_slowDealloc();
    }

    uint64_t v8 = a2 + 12;
    uint64_t v10 = a2[15];
    uint64_t v9 = a2[16];
    __swift_project_boxed_opaque_existential_1(v8, v10);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v9 + 40))(v12, v10, v9);
    __swift_project_boxed_opaque_existential_1(v12, v12[3]);
    type metadata accessor for SiriKitEvent();
    static SiriKitEvent.uufrReady()();
    dispatch thunk of SiriKitEventSending.send(_:)();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  return a1 == 1;
}

uint64_t IncomingCallActionHandleIntentFlowStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  OUTLINED_FUNCTION_2();
  v3[10] = v4;
  return OUTLINED_FUNCTION_21_1((uint64_t)IncomingCallActionHandleIntentFlowStrategy.makeIntentHandledResponse(rchRecord:));
}

uint64_t IncomingCallActionHandleIntentFlowStrategy.makeIntentHandledResponse(rchRecord:)()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.siriPhone);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)OUTLINED_FUNCTION_7_2();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "#IncomingCallActionHandleIntentFlowStrategy makeIntentHandledResponse", v4, 2u);
    OUTLINED_FUNCTION_6();
  }
  uint64_t v5 = (void *)v0[9];
  uint64_t v6 = v0[10];

  uint64_t v7 = v5 + 2;
  uint64_t v8 = v5[5];
  uint64_t v9 = v5[6];
  __swift_project_boxed_opaque_existential_1(v7, v8);
  type metadata accessor for IntentResolutionRecord();
  uint64_t v10 = (void *)IntentResolutionRecord.intentResponse.getter();
  char v11 = (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(v9 + 40))(v10, *(void *)(v6 + 96), v8, v9);

  if (v11)
  {
    uint64_t v12 = (void *)swift_task_alloc();
    v0[11] = v12;
    void *v12 = v0;
    v12[1] = IncomingCallActionHandleIntentFlowStrategy.makeIntentHandledResponse(rchRecord:);
    return IncomingCallActionHandleIntentFlowStrategy.makeIntentHandledRFOutput(rchRecord:)();
  }
  else
  {
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_32_2(v16);
      OUTLINED_FUNCTION_10_24(&dword_0, v14, v15, "#IncomingCallActionHandleIntentFlowStrategy makeIntentHandledOutput: no dialog, submitAndForget post-HandleIntent commands");
      OUTLINED_FUNCTION_6();
    }
    uint64_t v17 = (void *)v0[9];

    uint64_t v18 = v17[15];
    uint64_t v19 = v17[16];
    __swift_project_boxed_opaque_existential_1(v17 + 12, v18);
    (*(void (**)(uint64_t, uint64_t))(v19 + 24))(v18, v19);
    __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
    IncomingCallActionHandleIntentFlowStrategy.makePostIntentHandledCommands(rchRecord:)();
    dispatch thunk of AceServiceInvoker.submitAndForget(_:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
    type metadata accessor for EmptyOutput();
    static EmptyOutput.instance.getter();
    OUTLINED_FUNCTION_6_0();
    return v20();
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  os_log_type_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t IncomingCallActionHandleIntentFlowStrategy.makeIntentHandledRFOutput(rchRecord:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[14] = v2;
  v1[15] = v0;
  v1[13] = v3;
  uint64_t v4 = type metadata accessor for OutputGenerationManifest();
  v1[16] = v4;
  OUTLINED_FUNCTION_19_0(v4);
  v1[17] = v5;
  v1[18] = swift_task_alloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v12 = v0;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.siriPhone);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    char v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    *(void *)(v0 + 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000025, 0x8000000000494030, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v2, v3, "#IncomingCallActionHandleIntentFlowStrategy %s", v4, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }

  (*(void (**)(void))(**(void **)(v0 + 120) + 152))();
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v5);
  uint64_t v7 = IncomingCallActionHandleIntentFlowStrategy.getIncomingCallConcept(rchRecord:)();
  *(void *)(v0 + 152) = v7;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 + 8) + **(int **)(v6 + 8));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 160) = v8;
  *uint64_t v8 = v0;
  v8[1] = IncomingCallActionHandleIntentFlowStrategy.makeIntentHandledRFOutput(rchRecord:);
  return v10(v7, v5, v6);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 128);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  return v4();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t IncomingCallActionHandleIntentFlowStrategy.makeIntentHandledRFOutput(rchRecord:)(uint64_t a1)
{
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v7 = v6;
  *(void *)(v5 + 168) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    *(void *)(v5 + 176) = a1;
    swift_release();
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t IncomingCallActionHandleIntentFlowStrategy.makeIntentHandledRFOutput(rchRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  char v11 = (void *)v10[22];
  uint64_t v12 = (void *)v10[15];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v10 + 2));
  IncomingCallActionHandleIntentFlowStrategy.getCompletionOutputManifest(rchRecord:)();
  uint64_t v13 = v12[15];
  uint64_t v14 = v12[16];
  __swift_project_boxed_opaque_existential_1(v12 + 12, v13);
  (*(void (**)(uint64_t, uint64_t))(v14 + 136))(v13, v14);
  uint64_t v15 = v10[10];
  uint64_t v16 = v10[11];
  __swift_project_boxed_opaque_existential_1(v10 + 7, v15);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_46A030;
  *(void *)(v17 + 32) = v11;
  uint64_t v27 = v17;
  specialized Array._endMutation()();
  v10[23] = v27;
  uint64_t v18 = *(void *)(v16 + 8);
  id v19 = v11;
  uint64_t v23 = (void *)swift_task_alloc();
  v10[24] = v23;
  *uint64_t v23 = v10;
  v23[1] = IncomingCallActionHandleIntentFlowStrategy.makeIntentHandledRFOutput(rchRecord:);
  uint64_t v24 = v10[18];
  uint64_t v25 = v10[13];
  return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v25, v27, v24, v15, v18, v20, v21, v22, a9, a10);
}

uint64_t IncomingCallActionHandleIntentFlowStrategy.getIncomingCallConcept(rchRecord:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for Locale();
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v2 + 88);
  type metadata accessor for IntentResolutionRecord();
  uint64_t v7 = (void *)IntentResolutionRecord.intentResponse.getter();
  uint64_t v8 = *(void *)(v2 + 96);
  char v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 24))(v6, v8);

  if (FollowUpOfferType.rawValue.getter(v9) == 0xD000000000000011 && v10 == 0x800000000048DCD0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
LABEL_6:
      uint64_t v15 = type metadata accessor for PhoneIncomingCall();
      uint64_t v16 = (void *)IntentResolutionRecord.intentResponse.getter();
      (*(void (**)(void *__return_ptr))(*v1 + 160))(v26);
      __swift_project_boxed_opaque_existential_1(v26, v27);
      dispatch thunk of DeviceState.siriLocale.getter();
      uint64_t v17 = type metadata accessor for AppInfoBuilder();
      uint64_t v18 = swift_allocObject();
      v25[3] = v17;
      v25[4] = &protocol witness table for AppInfoBuilder;
      v25[0] = v18;
      uint64_t v19 = specialized PhoneIncomingCall.__allocating_init(intentResponse:siriLocale:options:appInfoBuilder:)(v16, (uint64_t)v5, 0, (uint64_t)v25, v15, v6, v8);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
      return v19;
    }
  }
  uint64_t v12 = v1[15];
  uint64_t v13 = v1[16];
  __swift_project_boxed_opaque_existential_1(v1 + 12, v12);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v13 + 8))(v26, v12, v13);
  __swift_project_boxed_opaque_existential_1(v26, v27);
  char v14 = DeviceState.isAuthenticatedForPhone.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  if (v14) {
    goto LABEL_6;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.siriPhone);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (_WORD *)OUTLINED_FUNCTION_7_2();
    OUTLINED_FUNCTION_32_2(v23);
    OUTLINED_FUNCTION_10_24(&dword_0, v21, v22, "#IncomingCallActionHandleIntentFlowStrategy not setting incoming call concept for followUpOfferType == .callBack because device is not authenticated.");
    OUTLINED_FUNCTION_6();
  }

  return 0;
}

uint64_t IncomingCallActionHandleIntentFlowStrategy.getCompletionOutputManifest(rchRecord:)()
{
  uint64_t v0 = type metadata accessor for DialogPhase();
  __chkstk_darwin(v0 - 8);
  static DialogPhase.completion.getter();
  return OutputGenerationManifest.init(dialogPhase:_:)();
}

uint64_t closure #1 in IncomingCallActionHandleIntentFlowStrategy.getCompletionOutputManifest(rchRecord:)()
{
  return OutputGenerationManifest.additionalCommands.setter();
}

void *IncomingCallActionHandleIntentFlowStrategy.makePostIntentHandledCommands(rchRecord:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for IntentResolutionRecord();
  IntentResolutionRecord.app.getter();
  Swift::Bool v3 = App.isFirstParty()();
  swift_release();
  double result = _swiftEmptyArrayStorage;
  if (v3)
  {
    uint64_t v5 = v0 + 2;
    uint64_t v6 = v0[6];
    __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
    uint64_t v7 = (void *)IntentResolutionRecord.intentResponse.getter();
    uint64_t v25 = *(void *)(v2 + 96);
    uint64_t v8 = (void *)(*(uint64_t (**)(void))(v6 + 24))();

    if (v8)
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      __swift_project_value_buffer(v9, (uint64_t)static Logger.siriPhone);
      id v10 = v8;
      char v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        char v14 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v13 = 138412290;
        id v15 = [v10 dictionary];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *char v14 = v15;

        _os_log_impl(&dword_0, v11, v12, "#IncomingCallActionHandleIntentFlowStrategy Sending PlayNotificationSound for call connected: %@", v13, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_6();
        OUTLINED_FUNCTION_6();
      }
      else
      {
      }
      id v16 = v10;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v5 = v1 + 2;
      if (*(void *)((char *)&dword_10 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >> 1) {
        OUTLINED_FUNCTION_14_18();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    uint64_t v18 = v1[5];
    uint64_t v17 = v1[6];
    __swift_project_boxed_opaque_existential_1(v5, v18);
    uint64_t v19 = (void *)IntentResolutionRecord.intentResponse.getter();
    char v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(v17 + 32))(v19, v25, v18, v17);

    if (v20)
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v21 = type metadata accessor for Logger();
      __swift_project_value_buffer(v21, (uint64_t)static Logger.siriPhone);
      os_log_type_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = (_WORD *)OUTLINED_FUNCTION_7_2();
        OUTLINED_FUNCTION_32_2(v24);
        OUTLINED_FUNCTION_10_24(&dword_0, v22, v23, "#IncomingCallActionHandleIntentFlowStrategy Sending CloseAssistant command after answering the call.");
        OUTLINED_FUNCTION_6();
      }

      [objc_allocWithZone((Class)SAUICloseAssistant) init];
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((char *)&dword_10 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >> 1) {
        OUTLINED_FUNCTION_14_18();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t IncomingCallActionHandleIntentFlowStrategy.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  __swift_destroy_boxed_opaque_existential_1(v0 + 136);
  __swift_destroy_boxed_opaque_existential_1(v0 + 176);
  return v0;
}

uint64_t IncomingCallActionHandleIntentFlowStrategy.__deallocating_deinit()
{
  IncomingCallActionHandleIntentFlowStrategy.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.authenticationPolicy.getter in conformance IncomingCallActionHandleIntentFlowStrategy<A1, B1>()
{
  return HandleIntentFlowStrategyAsync.authenticationPolicy.getter();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:) in conformance IncomingCallActionHandleIntentFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for IncomingCallActionHandleIntentFlowStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactUnsupportedFlowStrategy<A>;
  return HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance IncomingCallActionHandleIntentFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for IncomingCallActionHandleIntentFlowStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactUnsupportedFlowStrategy<A>;
  return HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:) in conformance IncomingCallActionHandleIntentFlowStrategy<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 184)
                                                + **(int **)(**(void **)v2 + 184));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactUnsupportedFlowStrategy<A>;
  return v8(a1, a2);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeIntentHandledResponse(rchRecord:) in conformance IncomingCallActionHandleIntentFlowStrategy<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 192)
                                                + **(int **)(**(void **)v2 + 192));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactUnsupportedFlowStrategy<A>;
  return v8(a1, a2);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:) in conformance IncomingCallActionHandleIntentFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for IncomingCallActionHandleIntentFlowStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactUnsupportedFlowStrategy<A>;
  return HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:) in conformance IncomingCallActionHandleIntentFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for IncomingCallActionHandleIntentFlowStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactUnsupportedFlowStrategy<A>;
  return HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:) in conformance IncomingCallActionHandleIntentFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for IncomingCallActionHandleIntentFlowStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for Flow.execute() in conformance RedirectToCompanionFlow;
  return HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance IncomingCallActionHandleIntentFlowStrategy<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 176)
                                                + **(int **)(**(void **)v2 + 176));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = protocol witness for Flow.onAsync(input:) in conformance RedirectToCompanionFlow;
  return v8(a1, a2);
}

BOOL partial apply for closure #1 in IncomingCallActionHandleIntentFlowStrategy.makePreHandleIntentOutput(rchRecord:)(int a1)
{
  return closure #1 in IncomingCallActionHandleIntentFlowStrategy.makePreHandleIntentOutput(rchRecord:)(a1, v1);
}

uint64_t base witness table accessor for IntentExtensionCommunicatingAsync in IncomingCallActionHandleIntentFlowStrategy<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t type metadata completion function for IncomingCallActionHandleIntentFlowStrategy()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for IncomingCallActionHandleIntentFlowStrategy()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in IncomingCallActionHandleIntentFlowStrategy.getCompletionOutputManifest(rchRecord:)()
{
  return closure #1 in IncomingCallActionHandleIntentFlowStrategy.getCompletionOutputManifest(rchRecord:)();
}

uint64_t OUTLINED_FUNCTION_4_42()
{
  return v0;
}

void OUTLINED_FUNCTION_10_24(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 2u);
}

uint64_t OUTLINED_FUNCTION_14_18()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t CarPlayDirectInvocationFlow.__allocating_init(app:intent:strategy:aceServiceInvoker:)(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  uint64_t v8 = swift_allocObject();
  CarPlayDirectInvocationFlow.init(app:intent:strategy:aceServiceInvoker:)(a1, a2, a3, a4);
  return v8;
}

void *CarPlayDirectInvocationFlow.init(app:intent:strategy:aceServiceInvoker:)(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  uint64_t v5 = v4;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.siriPhone);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_0, v11, v12, "#Gatekeeper Initialized GatekeeperLegacyCallingIntentFlow", v13, 2u);
    swift_slowDealloc();
  }

  long long v5[2] = a1;
  v5[3] = a2;
  v5[4] = a3;
  outlined init with take of AppSelectionSignalComponent(a4, (uint64_t)(v5 + 5));
  return v5;
}

uint64_t CarPlayDirectInvocationFlow.__allocating_init<A>(app:intent:strategy:aceServiceInvoker:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.siriPhone);
  id v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_0, v15, v16, "#Gatekeeper Initialized GatekeeperLegacyCallingIntentFlow", v17, 2u);
    swift_slowDealloc();
  }

  uint64_t v18 = CarPlayDirectInvocationFlowStrategy.toAnyIntentFlowStrategy()(a5, a6);
  outlined init with copy of SignalProviding(a4, (uint64_t)v21);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned char *))(v7 + 120))(a1, a2, v18, v21);
  __swift_destroy_boxed_opaque_existential_1(a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8))(a3, a5);
  return v19;
}

uint64_t CarPlayDirectInvocationFlow.execute(completion:)()
{
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t CarPlayDirectInvocationFlow.execute()(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v2[4] = swift_task_alloc();
  return _swift_task_switch(CarPlayDirectInvocationFlow.execute(), 0, 0);
}

uint64_t CarPlayDirectInvocationFlow.execute()()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 16);
  (*(void (**)(uint64_t))(*(void *)v3 + 136))(v4);
  uint64_t v5 = type metadata accessor for NLContextUpdate();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v2, 1, v5);
  uint64_t v7 = v0[4];
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of NLContextUpdate?(v0[4]);
  }
  else
  {
    uint64_t v8 = v0[3];
    uint64_t v9 = (void *)NLContextUpdate.toAceContextUpdate()();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v7, v5);
    __swift_project_boxed_opaque_existential_1((void *)(v8 + 40), *(void *)(v8 + 64));
    AceServiceInvokerAsync.submitAndForget(_:)();
  }
  (*(void (**)(uint64_t, void))(*(void *)v3 + 128))(v4, *(void *)(v0[3] + 24));
  static ExecuteResponse.complete(next:)();
  swift_release();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t CarPlayDirectInvocationFlow.deinit()
{
  swift_release();

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  return v0;
}

uint64_t CarPlayDirectInvocationFlow.__deallocating_deinit()
{
  CarPlayDirectInvocationFlow.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Flow.on(input:) in conformance CarPlayDirectInvocationFlow<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance CarPlayDirectInvocationFlow<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))();
}

uint64_t protocol witness for Flow.execute() in conformance CarPlayDirectInvocationFlow<A>(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 144) + **(int **)(**(void **)v1 + 144));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for Flow.execute() in conformance PhoneFlow<A, B>;
  return v6(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance CarPlayDirectInvocationFlow<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for CarPlayDirectInvocationFlow();

  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t type metadata accessor for CarPlayDirectInvocationFlow()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined destroy of NLContextUpdate?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata completion function for CarPlayDirectInvocationFlow()
{
  return swift_initClassMetadata2();
}

uint64_t Logger.siriPhone.unsafeMutableAddressor()
{
  return Logger.siriPhone.unsafeMutableAddressor(&one-time initialization token for siriPhone, (uint64_t)static Logger.siriPhone);
}

uint64_t Logger.announceTelephony.unsafeMutableAddressor()
{
  return Logger.siriPhone.unsafeMutableAddressor(&one-time initialization token for announceTelephony, (uint64_t)static Logger.announceTelephony);
}

void Logger.logAndCrash(_:)(uint64_t a1, unint64_t a2)
{
  swift_bridgeObjectRetain_n();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v4, v5, "%s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  static SiriKitLifecycle._logCrashToEventBus(_:)();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t prefix(type:tags:)(uint64_t a1)
{
  return a1;
}

uint64_t LogPrefix.withFunction(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t one-time initialization function for siriPhone(uint64_t a1)
{
  return one-time initialization function for siriPhone(a1, static Logger.siriPhone);
}

void *LogConst.subsystem.unsafeMutableAddressor()
{
  return &static LogConst.subsystem;
}

const char *LogConst.Category.siriPhone.unsafeMutableAddressor()
{
  return "SiriPhone";
}

uint64_t static Logger.siriPhone.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.siriPhone.getter(&one-time initialization token for siriPhone, (uint64_t)static Logger.siriPhone, a1);
}

uint64_t one-time initialization function for announceTelephony(uint64_t a1)
{
  return one-time initialization function for siriPhone(a1, static Logger.announceTelephony);
}

void *LogConst.Category.announceTelephony.unsafeMutableAddressor()
{
  return &static LogConst.Category.announceTelephony;
}

uint64_t static Logger.announceTelephony.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.siriPhone.getter(&one-time initialization token for announceTelephony, (uint64_t)static Logger.announceTelephony, a1);
}

uint64_t one-time initialization function for intentHandlers(uint64_t a1)
{
  return one-time initialization function for siriPhone(a1, static Logger.intentHandlers);
}

uint64_t one-time initialization function for siriPhone(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

const char *LogConst.Category.intentHandlers.unsafeMutableAddressor()
{
  return "IntentHandlers";
}

uint64_t Logger.intentHandlers.unsafeMutableAddressor()
{
  return Logger.siriPhone.unsafeMutableAddressor(&one-time initialization token for intentHandlers, (uint64_t)static Logger.intentHandlers);
}

uint64_t Logger.siriPhone.unsafeMutableAddressor(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();

  return __swift_project_value_buffer(v3, a2);
}

uint64_t static Logger.intentHandlers.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.siriPhone.getter(&one-time initialization token for intentHandlers, (uint64_t)static Logger.intentHandlers, a1);
}

uint64_t static Logger.siriPhone.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v7(a3, v6, v5);
}

unint64_t static LogConst.subsystem.getter()
{
  return 0xD000000000000014;
}

uint64_t static LogConst.Category.siriPhone.getter()
{
  return 0x6E6F685069726953;
}

unint64_t static LogConst.Category.announceTelephony.getter()
{
  return 0xD000000000000011;
}

uint64_t static LogConst.Category.intentHandlers.getter()
{
  return 0x6148746E65746E49;
}

PhoneCallFlowDelegatePlugin::LogTag_optional __swiftcall LogTag.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of LogTag.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 9) {
    return (PhoneCallFlowDelegatePlugin::LogTag_optional)9;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::LogTag_optional)v3;
  }
}

uint64_t LogTag.rawValue.getter(char a1)
{
  uint64_t result = 19534;
  switch(a1)
  {
    case 1:
      uint64_t result = 5916994;
      break;
    case 2:
      uint64_t result = 1464814662;
      break;
    case 3:
      uint64_t result = 1396786515;
      break;
    case 4:
      uint64_t result = 4735827;
      break;
    case 5:
      uint64_t result = 5395011;
      break;
    case 6:
      uint64_t result = 5395027;
      break;
    case 7:
      uint64_t result = 5263425;
      break;
    case 8:
      uint64_t result = 21574;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LogTag(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LogTag()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LogTag()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LogTag(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::LogTag_optional protocol witness for RawRepresentable.init(rawValue:) in conformance LogTag@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::LogTag_optional *a2@<X8>)
{
  result.value = LogTag.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance LogTag@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = LogTag.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t LogPrefix.description.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance LogPrefix()
{
  return LogPrefix.description.getter(*v0, v0[1], v0[2], v0[3]);
}

uint64_t prefix<A>(typeof:tags:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

void DefaultStringInterpolation.appendInterpolation(type:tags:function:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(unsigned __int8 *)(a2 + v8++ + 32);
      v10._uint64_t countAndFlagsBits = 91;
      v10._object = (void *)0xE100000000000000;
      String.append(_:)(v10);
      unint64_t v11 = 0xE200000000000000;
      uint64_t v12 = 19534;
      switch(v9)
      {
        case 1:
          unint64_t v11 = 0xE300000000000000;
          uint64_t v12 = 5916994;
          break;
        case 2:
          unint64_t v11 = 0xE400000000000000;
          uint64_t v12 = 1464814662;
          break;
        case 3:
          unint64_t v11 = 0xE400000000000000;
          uint64_t v12 = 1396786515;
          break;
        case 4:
          unint64_t v11 = 0xE300000000000000;
          uint64_t v12 = 4735827;
          break;
        case 5:
          unint64_t v11 = 0xE300000000000000;
          uint64_t v12 = 5395011;
          break;
        case 6:
          uint64_t v12 = 5395027;
          unint64_t v11 = 0xE300000000000000;
          break;
        case 7:
          unint64_t v11 = 0xE300000000000000;
          uint64_t v12 = 5263425;
          break;
        case 8:
          uint64_t v12 = 21574;
          break;
        default:
          break;
      }
      unint64_t v13 = v11;
      String.append(_:)(*(Swift::String *)&v12);
      swift_bridgeObjectRelease();
      v14._uint64_t countAndFlagsBits = 93;
      v14._object = (void *)0xE100000000000000;
      String.append(_:)(v14);
    }
    while (v6 != v8);
    swift_bridgeObjectRelease();
    v15._uint64_t countAndFlagsBits = 32;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
  }
  v16._uint64_t countAndFlagsBits = 35;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  v17._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  if (a4)
  {
    v18._uint64_t countAndFlagsBits = 32;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    uint64_t v19 = a3;
    uint64_t v20 = a4;
    String.append(_:)(*(Swift::String *)&v19);
  }
}

unint64_t lazy protocol witness table accessor for type LogTag and conformance LogTag()
{
  unint64_t result = lazy protocol witness table cache variable for type LogTag and conformance LogTag;
  if (!lazy protocol witness table cache variable for type LogTag and conformance LogTag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LogTag and conformance LogTag);
  }
  return result;
}

void type metadata accessor for LogConst()
{
}

void type metadata accessor for LogConst.Category()
{
}

unsigned char *storeEnumTagSinglePayload for LogTag(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x13BC04);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

void type metadata accessor for LogTag()
{
}

uint64_t assignWithTake for LogPrefix(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for LogPrefix(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LogPrefix(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for LogPrefix()
{
}

Swift::String __swiftcall String.firstLetterLowercased()()
{
  uint64_t v2 = String.firstLetterCapitalized()(v0, v1, (uint64_t (*)(uint64_t))&Substring.lowercased());
  result._object = v3;
  result._uint64_t countAndFlagsBits = v2;
  return result;
}

uint64_t String.remove(characters:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  long long v6[2] = a1;
  swift_bridgeObjectRetain();
  return specialized RangeReplaceableCollection.filter(_:)((uint64_t (*)(void *))partial apply for closure #1 in String.remove(characters:), (uint64_t)v6, a2, a3);
}

BOOL closure #1 in String.remove(characters:)()
{
  return (CharacterSet.contains(_:)() & 1) == 0;
}

BOOL partial apply for closure #1 in String.remove(characters:)()
{
  return (CharacterSet.contains(_:)() & 1) == 0;
}

uint64_t specialized RangeReplaceableCollection.filter(_:)(uint64_t (*a1)(void *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v19 = a2;
  uint64_t v17 = 0;
  unint64_t v18 = 0xE000000000000000;
  if ((a4 & 0x2000000000000000) != 0) {
    uint64_t v6 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v6 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v6)
  {
    uint64_t v9 = 0;
    uint64_t v15 = a4 & 0xFFFFFFFFFFFFFFLL;
    while (1)
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        int v10 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          v16[0] = a3;
          v16[1] = v15;
        }
        else if ((a3 & 0x1000000000000000) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }
        int v10 = _decodeScalar(_:startingAt:)();
      }
      uint64_t v12 = v11;
      LODWORD(v16[0]) = v10;
      char v13 = a1(v16);
      if (v4) {
        break;
      }
      if (v13) {
        String.UnicodeScalarView.append(_:)();
      }
      v9 += v12;
      if (v9 >= v6)
      {
        swift_bridgeObjectRelease();
        return v17;
      }
    }
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t String.lowercasedWithFirstUppercased.getter()
{
  String.lowercased()();
  uint64_t countAndFlagsBits = String.firstLetterCapitalized()()._countAndFlagsBits;
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

BOOL String.isPhoneNumber.getter()
{
  uint64_t v0 = type metadata accessor for CharacterSet();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  __chkstk_darwin(v2);
  static CharacterSet.decimalDigits.getter();
  v3._uint64_t countAndFlagsBits = 757671979;
  v3._object = (void *)0xE400000000000000;
  CharacterSet.insert(charactersIn:)(v3);
  uint64_t v4 = self;
  id v5 = [v4 controlCharacterSet];
  static CharacterSet._unconditionallyBridgeFromObjectiveC(_:)();

  CharacterSet.formUnion(_:)();
  uint64_t v6 = *(void (**)(void))(v1 + 8);
  OUTLINED_FUNCTION_0_35();
  v6();
  id v7 = [v4 whitespaceAndNewlineCharacterSet];
  static CharacterSet._unconditionallyBridgeFromObjectiveC(_:)();

  CharacterSet.formUnion(_:)();
  OUTLINED_FUNCTION_0_35();
  v6();
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.components(separatedBy:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v8 = BidirectionalCollection<>.joined(separator:)();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000) == 0) {
    uint64_t v11 = v8 & 0xFFFFFFFFFFFFLL;
  }
  BOOL v12 = v11 == 0;
  OUTLINED_FUNCTION_0_35();
  v6();
  return v12;
}

uint64_t Flow.guardedSentinelFlow<A>(by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  v21[1] = a5;
  OUTLINED_FUNCTION_1();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  Swift::String v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_1();
  uint64_t v16 = v15;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)v21 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  type metadata accessor for SentinelConditionalFlow();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, a1, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v6, a2);
  return SentinelConditionalFlow.__allocating_init<A, B>(preconditionFlow:executableFlow:)((uint64_t)v19, (uint64_t)v14, a3, a2);
}

uint64_t type metadata accessor for SentinelConditionalFlow()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t SentinelConditionalFlow.__allocating_init<A, B>(preconditionFlow:executableFlow:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  SentinelConditionalFlow.init<A, B>(preconditionFlow:executableFlow:)(a1, a2, a3, a4);
  return v8;
}

uint64_t SentinelConditionalFlow.exitValue.getter()
{
  return dispatch thunk of ConditionalFlow.exitValue.getter();
}

uint64_t SentinelConditionalFlow.init<A, B>(preconditionFlow:executableFlow:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = Flow.guarded<A>(by:)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a2, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
  *(void *)(v5 + 16) = v10;
  return v5;
}

uint64_t SentinelConditionalFlow.execute(completion:)()
{
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t SentinelConditionalFlow.execute()(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  v2[5] = *v1;
  return _swift_task_switch(SentinelConditionalFlow.execute(), 0, 0);
}

uint64_t SentinelConditionalFlow.execute()()
{
  v0[2] = *(void *)(v0[4] + 16);
  type metadata accessor for ConditionalFlow();
  swift_getWitnessTable();
  static ExecuteResponse.complete<A>(next:)();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t SentinelConditionalFlow.__deallocating_deinit()
{
  ThirdPartyAnnotatedAppStore.deinit();

  return swift_deallocClassInstance();
}

uint64_t base witness table accessor for Flow in SentinelConditionalFlow<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for SiriEnvironmentLocating in SentinelConditionalFlow<A>()
{
  return swift_getWitnessTable();
}

uint64_t protocol witness for Flow.on(input:) in conformance SentinelConditionalFlow<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance SentinelConditionalFlow<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t protocol witness for Flow.execute() in conformance SentinelConditionalFlow<A>(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 128) + **(int **)(**(void **)v1 + 128));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for Flow.execute() in conformance PhoneFlow<A, B>;
  return v6(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance SentinelConditionalFlow<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t type metadata completion function for SentinelConditionalFlow()
{
  return swift_initClassMetadata2();
}

uint64_t BargeInCapableSection.outputProducer.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

void HintInstance.updateHintHistory(_:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v34 = type metadata accessor for TemplatingSection();
  OUTLINED_FUNCTION_1();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_4();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_4();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = type metadata accessor for TemplatingResult();
  OUTLINED_FUNCTION_1();
  uint64_t v16 = v15;
  __chkstk_darwin(v17);
  OUTLINED_FUNCTION_4();
  uint64_t v20 = v19 - v18;
  outlined init with copy of Result<TemplatingResult, Error>(v3, v13);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    swift_willThrowTypedImpl();
    swift_errorRelease();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v20, v13, v14);
    uint64_t v21 = TemplatingResult.sections.getter();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v20, v14);
    uint64_t v22 = *(void *)(v21 + 16);
    if (v22)
    {
      uint64_t v31 = v1;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v24 = *(void (**)(uint64_t, unint64_t, uint64_t))(v5 + 16);
      uint64_t v23 = v5 + 16;
      unint64_t v25 = v21 + ((*(unsigned __int8 *)(v23 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 64));
      uint64_t v32 = *(void *)(v23 + 56);
      os_log_type_t v33 = v24;
      do
      {
        v33(v9, v25, v34);
        uint64_t v26 = TemplatingSection.id.getter();
        uint64_t v28 = v27;
        (*(void (**)(uint64_t, uint64_t))(v23 - 8))(v9, v34);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        unint64_t v29 = _swiftEmptyArrayStorage[2];
        if (v29 >= _swiftEmptyArrayStorage[3] >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        _swiftEmptyArrayStorage[2] = v29 + 1;
        uint64_t v30 = &_swiftEmptyArrayStorage[2 * v29];
        v30[4] = v26;
        v30[5] = v28;
        v25 += v32;
        --v22;
      }
      while (v22);
      swift_bridgeObjectRelease();
      uint64_t v1 = v31;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  v1(_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_26_1();
}

void HintInstance.updateHintHistory(_:)(void *a1, uint64_t a2, uint64_t a3, void (*a4)(void *))
{
  id v5 = [a1 dialog];
  type metadata accessor for DialogElement();
  unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFFF8));
    if (!v7) {
      goto LABEL_13;
    }
  }
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if (v7 < 0)
  {
    __break(1u);
    return;
  }
  uint64_t v8 = 0;
  do
  {
    if ((v6 & 0xC000000000000001) != 0) {
      id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v9 = *(id *)(v6 + 8 * v8 + 32);
    }
    uint64_t v10 = v9;
    id v11 = [v9 id];
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;

    unint64_t v15 = _swiftEmptyArrayStorage[2];
    if (v15 >= _swiftEmptyArrayStorage[3] >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    ++v8;
    _swiftEmptyArrayStorage[2] = v15 + 1;
    uint64_t v16 = &_swiftEmptyArrayStorage[2 * v15];
    v16[4] = v12;
    v16[5] = v14;
  }
  while (v7 != v8);
LABEL_13:
  swift_bridgeObjectRelease();
  a4(_swiftEmptyArrayStorage);

  swift_bridgeObjectRelease();
}

void SiriPhoneHintGenerator.generateHint()()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_1();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  uint64_t v33 = v8;
  uint64_t v34 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  OUTLINED_FUNCTION_1();
  uint64_t v35 = v10;
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v37 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v36 = (uint64_t)&v29 - v15;
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v2 + 48))(v4, v2))
  {
    uint64_t v29 = v6;
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t, void))(v2 + 40))(v41, v4, v2, 0);
    uint64_t v16 = v42;
    uint64_t v17 = v43;
    __swift_project_boxed_opaque_existential_1(v41, v42);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v17 + 64))(v38, v16, v17);
    uint64_t v18 = v39;
    uint64_t v32 = v40;
    uint64_t v31 = __swift_project_boxed_opaque_existential_1(v38, v39);
    unsigned int v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v4, v2);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v20 = (uint64_t)v37;
    (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
    uint64_t v21 = v36;
    SiriPhoneDefaultsProviding.getOrDefault<A>(key:defaultValue:)(v30, v20, v18, AssociatedTypeWitness, v32, AssociatedConformanceWitness, v36);
    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
    v22(v20, AssociatedTypeWitness);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 56))(v21, v4, v2);
    if (v23)
    {
      uint64_t v24 = v29;
      (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v34, v0, v4);
      uint64_t v25 = v35 + 32;
      uint64_t v35 = *(void *)(v35 + 32);
      ((void (*)(char *, uint64_t, uint64_t))v35)(v37, v36, AssociatedTypeWitness);
      unint64_t v26 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
      unint64_t v27 = (v33 + v26 + *(unsigned __int8 *)(v25 + 48)) & ~(unint64_t)*(unsigned __int8 *)(v25 + 48);
      uint64_t v28 = swift_allocObject();
      *(void *)(v28 + 16) = v4;
      *(void *)(v28 + 24) = v2;
      (*(void (**)(unint64_t, char *, uint64_t))(v24 + 32))(v28 + v26, v34, v4);
      ((void (*)(unint64_t, char *, uint64_t))v35)(v28 + v27, v37, AssociatedTypeWitness);
    }
    else
    {
      v22(v36, AssociatedTypeWitness);
    }
  }
  OUTLINED_FUNCTION_26_1();
}

void updateHintHistory #1 <A>(_:) in SiriPhoneHintGenerator.generateHint()()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  swift_getAssociatedTypeWitness();
  OUTLINED_FUNCTION_1();
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v28 - v13;
  uint64_t v15 = *(void *)(v9 + 16);
  if (v15)
  {
    uint64_t v28 = v5;
    uint64_t v29 = v12;
    uint64_t v30 = v11;
    swift_bridgeObjectRetain();
    uint64_t v16 = (uint64_t *)(v9 + 40);
    do
    {
      uint64_t v18 = *(v16 - 1);
      uint64_t v17 = *v16;
      v34[0] = v18;
      v34[1] = v17;
      swift_bridgeObjectRetain();
      if (closure #1 in updateHintHistory #1 <A>(_:) in SiriPhoneHintGenerator.generateHint()((uint64_t)v34, v7, v3, v1))
      {
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 64))(v18, v17, v28, v3, v1);
        swift_bridgeObjectRelease();
        (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v1 + 40))(v34, v3, v1);
        uint64_t v20 = v35;
        uint64_t v21 = v36;
        __swift_project_boxed_opaque_existential_1(v34, v35);
        (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v21 + 64))(v31, v20, v21);
        uint64_t v22 = v32;
        uint64_t v23 = v33;
        __swift_project_boxed_opaque_existential_1(v31, v32);
        uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 24))(v3, v1);
        uint64_t v25 = *(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 16);
        uint64_t v26 = v30;
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        v25(v24, v14, v26, AssociatedConformanceWitness, v22, v23);
        (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v26);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
        goto LABEL_9;
      }
      v16 += 2;
      swift_bridgeObjectRelease();
      --v15;
    }
    while (v15);
    OUTLINED_FUNCTION_26_1();
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_9:
    OUTLINED_FUNCTION_26_1();
  }
}

uint64_t closure #1 in updateHintHistory #1 <A>(_:) in SiriPhoneHintGenerator.generateHint()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  lazy protocol witness table accessor for type String and conformance String();
  lazy protocol witness table accessor for type String and conformance String();
  char v4 = BidirectionalCollection<>.starts<A>(with:)();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t sub_13D4B0()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v1 = *(void *)(v0 + 16);
  OUTLINED_FUNCTION_1();
  uint64_t v3 = v2;
  unint64_t v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  OUTLINED_FUNCTION_1();
  uint64_t v9 = v8;
  unint64_t v10 = (v4 + v6 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v0 + v4, v1);
  (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v0 + v10, AssociatedTypeWitness);
  OUTLINED_FUNCTION_26_1();
  return _swift_deallocObject(v11, v12, v13);
}

void partial apply for updateHintHistory #1 <A>(_:) in SiriPhoneHintGenerator.generateHint()()
{
  OUTLINED_FUNCTION_1();
  swift_getAssociatedTypeWitness();

  updateHintHistory #1 <A>(_:) in SiriPhoneHintGenerator.generateHint()();
}

uint64_t destroy for HintInstance()
{
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for HintInstance(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for HintInstance(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for HintInstance(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v4;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for HintInstance()
{
  return &type metadata for HintInstance;
}

void closure #1 in static Transformer<>.transformer(sharedGlobals:previousIntent:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  OUTLINED_FUNCTION_0_36(a1);
  if (PhoneCallNLIntent.isEmergencyServicesCall()())
  {
    uint64_t v4 = 2;
    goto LABEL_12;
  }
  OUTLINED_FUNCTION_0_36(a1);
  Swift::Bool v5 = PhoneCallNLIntent.hasVoiceMail()();
  outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v20);
  if (v5)
  {
    OUTLINED_FUNCTION_0_36(v20);
    Swift::Bool v6 = PhoneCallNLIntent.hasPhoneNumber()();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    if (!v6)
    {
      uint64_t v4 = 3;
      goto LABEL_12;
    }
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  OUTLINED_FUNCTION_0_36(a1);
  if (PhoneCallNLIntent.isRedial()())
  {
    uint64_t v4 = 4;
  }
  else
  {
    OUTLINED_FUNCTION_0_36(a1);
    if (PhoneCallNLIntent.isCallBack()()) {
      uint64_t v4 = 5;
    }
    else {
      uint64_t v4 = 1;
    }
  }
LABEL_12:
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.siriPhone);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    v20[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315394;
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallDestinationType>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallDestinationType>.Type);
    uint64_t v11 = String.init<A>(describing:)();
    uint64_t v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    uint64_t BackingType = INCallDestinationTypeGetBackingType();
    switch((int)BackingType)
    {
      case 1:
        uint64_t v14 = @"NORMAL_DESTINATION";
        goto LABEL_23;
      case 2:
        uint64_t v14 = @"EMERGENCY_DESTINATION";
        goto LABEL_23;
      case 3:
        uint64_t v14 = @"VOICEMAIL_DESTINATION";
        goto LABEL_23;
      case 4:
        uint64_t v14 = @"REDIAL_DESTINATION";
        goto LABEL_23;
      case 5:
        uint64_t v14 = @"CALL_BACK_DESTINATION";
LABEL_23:
        uint64_t v15 = v14;
        break;
      default:
        uint64_t v14 = +[NSString stringWithFormat:@"(unknown: %i)", BackingType];
        break;
    }
    uint64_t v16 = v14;
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v19 = v18;

    uint64_t v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v8, v9, "#%s --> %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  *a2 = v4;
}

uint64_t OUTLINED_FUNCTION_0_36(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return v1;
}

uint64_t IncomingCallActionContinueInAppStrategy.requireUnlock(intentResolutionRecord:)()
{
  uint64_t v1 = *v0;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.siriPhone);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    Swift::Bool v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Swift::Bool v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "#IncomingCallActionContinueInAppStrategy: requireUnlock", v5, 2u);
    OUTLINED_FUNCTION_6();
  }

  uint64_t v6 = *(void *)(v1 + 88);
  type metadata accessor for IntentResolutionRecord();
  uint64_t v7 = (void *)IntentResolutionRecord.intentResponse.getter();
  char v8 = IncomingCallIntentResponse.isIncomingCall.getter(v6, *(void *)(v1 + 96));

  return v8 & 1;
}

uint64_t IncomingCallActionContinueInAppStrategy.makeContinueInAppAutoPunchOutResponse(intentResolutionRecord:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[7] = v2;
  v1[8] = v0;
  v1[6] = v3;
  uint64_t v4 = *v0;
  v1[9] = *v0;
  v1[10] = *(void *)(v4 + 80);
  v1[11] = *(void *)(v4 + 88);
  uint64_t v5 = type metadata accessor for IntentResolutionRecord();
  v1[12] = v5;
  v1[13] = *(void *)(v5 - 8);
  v1[14] = swift_task_alloc();
  v1[15] = swift_task_alloc();
  return _swift_task_switch(IncomingCallActionContinueInAppStrategy.makeContinueInAppAutoPunchOutResponse(intentResolutionRecord:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(void);
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void (*v16)(void);
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(void);
  void *v28;
  uint64_t v29;
  uint64_t WitnessTable;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  _OWORD v34[2];
  uint64_t v35;
  void *v36;
  uint64_t v37;

  uint64_t v36 = v0;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v1 = v0[13];
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.siriPhone);
  uint64_t v3 = *(void (**)(void))(v1 + 16);
  OUTLINED_FUNCTION_4_43();
  v3();
  OUTLINED_FUNCTION_4_43();
  v3();
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.debug.getter();
  uint64_t v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[14];
  char v8 = v0[12];
  os_log_type_t v9 = v0[13];
  if (v6)
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v33 = (void *)swift_slowAlloc();
    *(void *)&v34[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315394;
    v0[3] = IntentResolutionRecord.app.getter();
    uint64_t v11 = *(void (**)(void))(v9 + 8);
    OUTLINED_FUNCTION_1_48();
    v11();
    type metadata accessor for App();
    lazy protocol witness table accessor for type App and conformance App();
    unint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v14 = v13;
    swift_release();
    v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, (uint64_t *)v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2112;
    uint64_t v15 = IntentResolutionRecord.intentResponse.getter();
    v0[5] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    NSObject *v33 = v15;
    OUTLINED_FUNCTION_1_48();
    v11();
    _os_log_impl(&dword_0, v4, v5, "#IncomingCallActionContinueInAppStrategy: makeContinueInAppAutoPunchOutResponse to app %s with intentResponse %@", (uint8_t *)v10, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
    uint64_t v16 = *(void (**)(void))(v9 + 8);
    OUTLINED_FUNCTION_1_48();
    v16();
    ((void (*)(uint64_t, uint64_t))v16)(v7, v8);
  }

  uint64_t v17 = v0[11];
  unint64_t v18 = v0[9];
  unint64_t v19 = (void *)IntentResolutionRecord.intentResponse.getter();
  LOBYTE(v17) = IncomingCallIntentResponse.isIncomingCall.getter(v17, *(void *)(v18 + 96));

  if (v17)
  {
    uint64_t v20 = (uint64_t *)v0[6];
    type metadata accessor for SAIntentGroupLaunchAppWithIntent();
    IntentResolutionRecord.app.getter();
    uint64_t v21 = (void *)IntentResolutionRecord.intent.getter();
    uint64_t v22 = (void *)IntentResolutionRecord.intentResponse.getter();
    uint64_t v23 = static SAIntentGroupLaunchAppWithIntent.launchAppWithIntent(app:intent:intentResponse:)();
    swift_release();

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_46A030;
    *(void *)(v24 + 32) = v23;
    *(void *)&v34[0] = v24;
    specialized Array._endMutation()();
    uint64_t v25 = type metadata accessor for AceOutput();
    memset(v34, 0, sizeof(v34));
    uint64_t v35 = 0;
    uint64_t v20[3] = v25;
    v20[4] = (uint64_t)&protocol witness table for AceOutput;
    __swift_allocate_boxed_opaque_existential_1(v20);
    AceOutput.init(commands:flowActivity:)();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = (uint64_t (*)(void))v0[1];
    return v26();
  }
  else
  {
    v0[2] = v0[8];
    uint64_t v28 = (void *)swift_task_alloc();
    v0[16] = v28;
    uint64_t v29 = type metadata accessor for IncomingCallActionContinueInAppStrategy();
    WitnessTable = swift_getWitnessTable();
    uint8_t *v28 = v0;
    v28[1] = IncomingCallActionContinueInAppStrategy.makeContinueInAppAutoPunchOutResponse(intentResolutionRecord:);
    uint64_t v31 = v0[6];
    uint64_t v32 = v0[7];
    return ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:)(v31, v32, v29, WitnessTable);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v2 = *v1;
  *(void *)(v3 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(IncomingCallActionContinueInAppStrategy.makeContinueInAppAutoPunchOutResponse(intentResolutionRecord:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v2 + 8);
    return v4();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t protocol witness for ContinueInAppAutoPunchOutFlowStrategyAsync.requireUnlock(intentResolutionRecord:) in conformance IncomingCallActionContinueInAppStrategy<A, B>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))() & 1;
}

uint64_t protocol witness for ContinueInAppAutoPunchOutFlowStrategyAsync.makeContinueInAppAutoPunchOutResponse(intentResolutionRecord:) in conformance IncomingCallActionContinueInAppStrategy<A, B>(uint64_t a1, uint64_t a2)
{
  char v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 112)
                                                + **(int **)(**(void **)v2 + 112));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance IncomingCallActionContinueInAppStrategy<A, B>;
  return v8(a1, a2);
}

uint64_t protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance IncomingCallActionContinueInAppStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for IncomingCallActionContinueInAppStrategy();
  *char v8 = v4;
  v8[1] = protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance IncomingCallActionContinueInAppStrategy<A, B>;
  return ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for UnlockDeviceFlowStrategyAsync.authenticationPolicy.getter in conformance IncomingCallActionContinueInAppStrategy<A1, B1>()
{
  return UnlockDeviceFlowStrategyAsync.authenticationPolicy.getter();
}

uint64_t protocol witness for UnlockDeviceFlowStrategyAsync.makePromptForDeviceUnlock() in conformance IncomingCallActionContinueInAppStrategy<A1, B1>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for CallNotificationContextProviding.update(aceServiceInvoker:refId:applicationId:) in conformance CallNotificationContextProvider;
  return UnlockDeviceFlowStrategyAsync.makePromptForDeviceUnlock()(a1, a2, a3);
}

uint64_t type metadata accessor for IncomingCallActionContinueInAppStrategy()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t type metadata accessor for SAIntentGroupLaunchAppWithIntent()
{
  unint64_t result = lazy cache variable for type metadata for SAIntentGroupLaunchAppWithIntent;
  if (!lazy cache variable for type metadata for SAIntentGroupLaunchAppWithIntent)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupLaunchAppWithIntent);
  }
  return result;
}

uint64_t base witness table accessor for ContinueInAppDialogFlowStrategyAsync in IncomingCallActionContinueInAppStrategy<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for UnlockDeviceFlowStrategyAsync in IncomingCallActionContinueInAppStrategy<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for ContinueInAppFlowStrategy in IncomingCallActionContinueInAppStrategy<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t type metadata completion function for IncomingCallActionContinueInAppStrategy()
{
  return swift_initClassMetadata2();
}

void UnsupportedCallFlowOutputFactory.__allocating_init(unsupportedPhoneCall:app:sharedGlobals:intent:unsupportedFlowCats:searchCallHistoryCats:unsupportedFlowCatsSimple:responseGenerator:labelTemplating:appInfoBuilder:phoneCallDisplayTextCATsSimple:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v26 = v25;
  uint64_t v58 = v27;
  uint64_t v59 = v28;
  uint64_t v56 = v29;
  uint64_t v57 = v30;
  uint64_t v54 = v31;
  uint64_t v55 = v32;
  HIDWORD(v53) = v33;
  uint64_t v52 = a23;
  uint64_t v34 = swift_allocObject();
  uint64_t v35 = *(void *)(v26 + 24);
  v50[2] = *(void *)(v26 + 32);
  uint64_t v51 = v34;
  __swift_mutable_project_boxed_opaque_existential_1(v26, v35);
  OUTLINED_FUNCTION_1();
  __chkstk_darwin(v36);
  uint64_t v38 = OUTLINED_FUNCTION_28_11(v37, v50[0]);
  v39(v38);
  uint64_t v40 = *(void *)(a21 + 24);
  v50[1] = *(void *)(a21 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a21, v40);
  OUTLINED_FUNCTION_1();
  __chkstk_darwin(v41);
  uint64_t v43 = OUTLINED_FUNCTION_29_12(v42, v50[0]);
  v44(v43);
  uint64_t v45 = *(void *)(a22 + 24);
  __swift_mutable_project_boxed_opaque_existential_1(a22, v45);
  OUTLINED_FUNCTION_1();
  __chkstk_darwin(v46);
  uint64_t v48 = (char *)v50 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v49 + 16))(v48);
  OUTLINED_FUNCTION_47_6();
  specialized UnsupportedCallFlowOutputFactory.init(unsupportedPhoneCall:app:sharedGlobals:intent:unsupportedFlowCats:searchCallHistoryCats:unsupportedFlowCatsSimple:responseGenerator:labelTemplating:appInfoBuilder:phoneCallDisplayTextCATsSimple:)(HIDWORD(v45), v54, v55, v56, v57, v58, v59, v23, v24, (uint64_t)v48, v35, v51, v35, v45, v54, v55, v56, v57);
  __swift_destroy_boxed_opaque_existential_1(a22);
  __swift_destroy_boxed_opaque_existential_1(a21);
  __swift_destroy_boxed_opaque_existential_1(v26);
  OUTLINED_FUNCTION_26_1();
}

void UnsupportedCallFlowOutputFactory.init(unsupportedPhoneCall:app:sharedGlobals:intent:unsupportedFlowCats:searchCallHistoryCats:unsupportedFlowCatsSimple:responseGenerator:labelTemplating:appInfoBuilder:phoneCallDisplayTextCATsSimple:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v53 = v23;
  uint64_t v54 = v26;
  uint64_t v28 = v27;
  uint64_t v57 = v29;
  uint64_t v58 = v30;
  uint64_t v55 = v31;
  uint64_t v56 = v32;
  uint64_t v52 = v33;
  HIDWORD(v51) = v34;
  uint64_t v35 = *(void *)(v27 + 24);
  v50[2] = *(void *)(v27 + 32);
  uint64_t v50[3] = a23;
  __swift_mutable_project_boxed_opaque_existential_1(v27, v35);
  OUTLINED_FUNCTION_1();
  __chkstk_darwin(v36);
  uint64_t v38 = OUTLINED_FUNCTION_28_11(v37, v50[0]);
  v39(v38);
  uint64_t v40 = *(void *)(a21 + 24);
  v50[1] = *(void *)(a21 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a21, v40);
  OUTLINED_FUNCTION_1();
  __chkstk_darwin(v41);
  uint64_t v43 = OUTLINED_FUNCTION_29_12(v42, v50[0]);
  v44(v43);
  uint64_t v45 = *(void *)(a22 + 24);
  __swift_mutable_project_boxed_opaque_existential_1(a22, v45);
  OUTLINED_FUNCTION_1();
  __chkstk_darwin(v46);
  uint64_t v48 = (char *)v50 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v49 + 16))(v48);
  OUTLINED_FUNCTION_47_6();
  specialized UnsupportedCallFlowOutputFactory.init(unsupportedPhoneCall:app:sharedGlobals:intent:unsupportedFlowCats:searchCallHistoryCats:unsupportedFlowCatsSimple:responseGenerator:labelTemplating:appInfoBuilder:phoneCallDisplayTextCATsSimple:)(HIDWORD(v35), v45, v54, v55, v56, v57, v58, v24, v25, (uint64_t)v48, v53, v53, v35, v45, v53, v54, v55, v56);
  __swift_destroy_boxed_opaque_existential_1(a22);
  __swift_destroy_boxed_opaque_existential_1(a21);
  __swift_destroy_boxed_opaque_existential_1(v28);
  OUTLINED_FUNCTION_26_1();
}

uint64_t UnsupportedCallFlowOutputFactory.makeUnsupportedOutput(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v8 = OUTLINED_FUNCTION_11_0(v7);
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_52();
  if (UnsupportedPhoneCall.rawValue.getter(*(unsigned char *)(v2 + 24)) == 0xD00000000000001CLL && v9 == 0x8000000000490460)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0) {
      goto LABEL_6;
    }
  }
  __swift_project_boxed_opaque_existential_1((void *)(v2 + 88), *(void *)(v2 + 112));
  OUTLINED_FUNCTION_54_3();
  OUTLINED_FUNCTION_24_2();
  v11();
  __swift_project_boxed_opaque_existential_1(v18, v18[3]);
  char v12 = dispatch thunk of DeviceState.isAppleTV.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  if ((v12 & 1) == 0)
  {
    uint64_t v15 = (void *)OUTLINED_FUNCTION_93();
    v15[2] = a1;
    _OWORD v15[3] = a2;
    v15[4] = v4;
    uint64_t v16 = *(void (**)(uint64_t (*)(uint64_t), void *))(*(void *)v4 + 192);
    swift_retain();
    swift_retain();
    v16(partial apply for closure #2 in UnsupportedCallFlowOutputFactory.makeUnsupportedOutput(completion:), v15);
    return swift_release();
  }
LABEL_6:
  uint64_t v13 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload(v3, 1, 1, v13);
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = v4;
  void v14[5] = a1;
  v14[6] = a2;
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v3, (uint64_t)&async function pointer to partial apply for closure #1 in UnsupportedCallFlowOutputFactory.makeUnsupportedOutput(completion:), (uint64_t)v14);
  return swift_release();
}

uint64_t closure #1 in UnsupportedCallFlowOutputFactory.makeUnsupportedOutput(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[19] = a5;
  v6[20] = a6;
  uint64_t v9 = (uint64_t (*)(void *))(*(void *)(*(void *)a4 + 224) + **(int **)(*(void *)a4 + 224));
  uint64_t v7 = (void *)swift_task_alloc();
  v6[21] = v7;
  *uint64_t v7 = v6;
  v7[1] = closure #1 in UnsupportedCallFlowOutputFactory.makeUnsupportedOutput(completion:);
  return v9(v6 + 14);
}

uint64_t closure #1 in UnsupportedCallFlowOutputFactory.makeUnsupportedOutput(completion:)()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_2();
  void *v5 = v4;
  *(void *)(v6 + 176) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_16_1();
  uint64_t v1 = *(void (**)(uint64_t))(v0 + 152);
  outlined init with copy of SignalProviding(v0 + 112, v0 + 64);
  *(unsigned char *)(v0 + 104) = 0;
  v1(v0 + 64);
  _s16SiriDialogEngine15SpeakableStringVSgWOhTm_1(v0 + 64, &demangling cache variable for type metadata for Result<Output, Error>);
  __swift_destroy_boxed_opaque_existential_1(v0 + 112);
  OUTLINED_FUNCTION_47_0();
  return v2();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_16_1();
  uint64_t v1 = *(void (**)(uint64_t))(v0 + 152);
  *(void *)(v0 + 16) = *(void *)(v0 + 176);
  *(unsigned char *)(v0 + 56) = 1;
  swift_errorRetain();
  v1(v0 + 16);
  swift_errorRelease();
  _s16SiriDialogEngine15SpeakableStringVSgWOhTm_1(v0 + 16, &demangling cache variable for type metadata for Result<Output, Error>);
  OUTLINED_FUNCTION_47_0();
  return v2();
}

uint64_t closure #2 in UnsupportedCallFlowOutputFactory.makeUnsupportedOutput(completion:)(uint64_t a1, void (*a2)(void *), uint64_t a3, uint64_t a4)
{
  uint64_t v28 = a2;
  uint64_t v7 = type metadata accessor for TemplatingResult();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v25 - v12;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Result<TemplatingResult, Error>(a1, (uint64_t)v16);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v29[0] = *(void *)v16;
    char v30 = 1;
    swift_errorRetain();
    v28(v29);
    swift_errorRelease();
    return _s16SiriDialogEngine15SpeakableStringVSgWOhTm_1((uint64_t)v29, &demangling cache variable for type metadata for Result<Output, Error>);
  }
  else
  {
    uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v27(v13, v16, v7);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
    unint64_t v18 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v19 = a3;
    unint64_t v20 = (v9 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v26 = v7;
    uint64_t v21 = swift_allocObject();
    uint64_t v22 = v11;
    uint64_t v23 = v26;
    v27((char *)(v21 + v18), v22, v26);
    *(void *)(v21 + v20) = a4;
    uint64_t v24 = (void *)(v21 + ((v20 + 15) & 0xFFFFFFFFFFFFFFF8));
    *uint64_t v24 = v28;
    v24[1] = v19;
    swift_retain();
    swift_retain();
    UnsupportedCallFlowOutputFactory.makeUnsupportedViews(_:)((uint64_t (*)(void *, void))partial apply for closure #1 in closure #2 in UnsupportedCallFlowOutputFactory.makeUnsupportedOutput(completion:), v21);
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v23);
  }
}

uint64_t closure #1 in closure #2 in UnsupportedCallFlowOutputFactory.makeUnsupportedOutput(completion:)(uint64_t a1, char a2, uint64_t a3, void *a4, void (*a5)(uint64_t *))
{
  if (a2)
  {
    v10[0] = a1;
    swift_errorRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    closure #1 in closure #1 in closure #2 in UnsupportedCallFlowOutputFactory.makeUnsupportedOutput(completion:)(a4, v10);
    outlined consume of Result<[SAAceView], Error>(a1, 0);
  }
  char v11 = a2 & 1;
  a5(v10);
  return _s16SiriDialogEngine15SpeakableStringVSgWOhTm_1((uint64_t)v10, &demangling cache variable for type metadata for Result<Output, Error>);
}

uint64_t closure #1 in closure #1 in closure #2 in UnsupportedCallFlowOutputFactory.makeUnsupportedOutput(completion:)@<X0>(void *a1@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.siriPhone);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl(&dword_0, v8, v9, "#UnsupportedCallFlowOutputFactory: finished constructing Output", v10, 2u);
    swift_slowDealloc();
  }

  char v11 = a1 + 11;
  uint64_t v12 = a1[14];
  uint64_t v13 = a1[15];
  __swift_project_boxed_opaque_existential_1(a1 + 11, v12);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v13 + 8))(v22, v12, v13);
  uint64_t v15 = a1[14];
  uint64_t v14 = a1[15];
  __swift_project_boxed_opaque_existential_1(v11, v15);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v14 + 8))(v21, v15, v14);
  __swift_project_boxed_opaque_existential_1(v21, v21[3]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  uint64_t v16 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 1, 1, v16);
  uint64_t v17 = type metadata accessor for AceOutput();
  memset(v19, 0, sizeof(v19));
  uint64_t v20 = 0;
  a2[3] = v17;
  a2[4] = (uint64_t)&protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(a2);
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  _s16SiriDialogEngine15SpeakableStringVSgWOhTm_1((uint64_t)v19, &demangling cache variable for type metadata for FlowActivity?);
  _s16SiriDialogEngine15SpeakableStringVSgWOhTm_1((uint64_t)v6, &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
}

void UnsupportedCallFlowOutputFactory.makeUnsupportedTemplatingResult(completion:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v1 = (void *)v0;
  uint64_t v87 = v3;
  uint64_t v88 = v2;
  type metadata accessor for Locale();
  OUTLINED_FUNCTION_1();
  v86[1] = v4;
  __chkstk_darwin(v5);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = OUTLINED_FUNCTION_11_0(v6);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)v86 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v86 - v14;
  uint64_t v16 = (void *)(v0 + 88);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 88), *(void *)(v0 + 112));
  OUTLINED_FUNCTION_52_4();
  OUTLINED_FUNCTION_24_2();
  v17();
  switch(*(unsigned char *)(v0 + 24))
  {
    case 4:
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v18 = type metadata accessor for Logger();
      uint64_t v19 = (void *)OUTLINED_FUNCTION_25_0(v18, (uint64_t)static Logger.siriPhone);
      os_log_type_t v20 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_18(v20))
      {
        uint64_t v21 = (_WORD *)OUTLINED_FUNCTION_7_2();
        OUTLINED_FUNCTION_32_2(v21);
        OUTLINED_FUNCTION_25_4(&dword_0, v22, v23, "#UnsupportedCallFlowOutputFactory makeUnsupportedTemplatingResult: returning unsupported searchCallHistory");
        OUTLINED_FUNCTION_5_16();
      }

      uint64_t v24 = v1[16];
      __swift_project_boxed_opaque_existential_1(v16, v1[14]);
      OUTLINED_FUNCTION_24_2();
      v25();
      static UserFacingCallingAppUtils.getCommAppForLaunch(originalApp:preferredCallProvider:deviceState:)(v24, 0, v89);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v89);
      LOBYTE(v24) = App.isFirstParty()();
      outlined init with copy of SignalProviding((uint64_t)v90, (uint64_t)v89);
      if (v24)
      {
        __swift_project_boxed_opaque_existential_1(v89, v89[3]);
        OUTLINED_FUNCTION_52_4();
        char v26 = dispatch thunk of DeviceState.isPhone.getter();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v89);
        if (v26) {
          goto LABEL_41;
        }
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v89);
      }
      uint64_t v67 = v91;
      __swift_project_boxed_opaque_existential_1(v90, v91);
      OUTLINED_FUNCTION_52_4();
      dispatch thunk of DeviceState.siriLocale.getter();
      type metadata accessor for AppInfoBuilder();
      swift_initStackObject();
      AppInfoBuilder.getAppName(_:requestedLocale:)();
      uint64_t v68 = OUTLINED_FUNCTION_36_10();
      v69(v68);
      if (v67)
      {
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_11_2();
        uint64_t v70 = type metadata accessor for SpeakableString();
        __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v70);
        swift_bridgeObjectRelease();
LABEL_42:
        uint64_t v72 = v87;
        uint64_t v73 = (void *)v1[4];
        char v74 = UnsupportedCallFlowOutputFactory.shouldShowOpenAppButtonForSCH()();
        char v75 = UnsupportedCallFlowOutputFactory.isPlayVoicemailIntent()();
        type metadata accessor for SirikitDeviceState();
        outlined init with copy of SignalProviding((uint64_t)v90, (uint64_t)v89);
        uint64_t v76 = SirikitDeviceState.__allocating_init(from:)();
        (*(void (**)(void, char *, void, uint64_t, uint64_t, uint64_t))(class metadata base offset for UnsupportedFlowCATs
                                                                                  + *v73
                                                                                  + 64))(v74 & 1, v15, v75 & 1, v76, v88, v72);
        swift_release();
        swift_release();
        uint64_t v77 = (uint64_t)v15;
        goto LABEL_51;
      }
LABEL_41:
      uint64_t v71 = type metadata accessor for SpeakableString();
      __swift_storeEnumTagSinglePayload((uint64_t)v15, 1, 1, v71);
      goto LABEL_42;
    case 5:
    case 6:
    case 8:
    case 9:
    case 0xB:
    case 0xC:
      goto LABEL_16;
    case 7:
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v43 = type metadata accessor for Logger();
      os_log_type_t v44 = (void *)OUTLINED_FUNCTION_25_0(v43, (uint64_t)static Logger.siriPhone);
      os_log_type_t v45 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_18(v45))
      {
        uint64_t v46 = (_WORD *)OUTLINED_FUNCTION_7_2();
        OUTLINED_FUNCTION_32_2(v46);
        OUTLINED_FUNCTION_25_4(&dword_0, v47, v48, "#UnsupportedCallFlowOutputFactory makeUnsupportedTemplatingResult: returning unsupported deleteCallHistory");
        OUTLINED_FUNCTION_5_16();
      }

      OUTLINED_FUNCTION_2();
      uint64_t v49 = OUTLINED_FUNCTION_37_8();
      v50(v49);
      goto LABEL_52;
    case 0xA:
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v51 = type metadata accessor for Logger();
      uint64_t v52 = (void *)OUTLINED_FUNCTION_25_0(v51, (uint64_t)static Logger.siriPhone);
      os_log_type_t v53 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_18(v53))
      {
        uint64_t v54 = (_WORD *)OUTLINED_FUNCTION_7_2();
        OUTLINED_FUNCTION_32_2(v54);
        OUTLINED_FUNCTION_25_4(&dword_0, v55, v56, "#UnsupportedCallFlowOutputFactory makeUnsupportedTemplatingResult: returning unsupported emergencyContactCall");
        OUTLINED_FUNCTION_5_16();
      }

      uint64_t v57 = type metadata accessor for SpeakableString();
      OUTLINED_FUNCTION_14_1((uint64_t)v13);
      uint64_t v58 = v1[16];
      Swift::Bool v59 = App.isFirstParty()();
      if (!v59)
      {
        v86[0] = v57;
        __swift_project_boxed_opaque_existential_1(v90, v91);
        dispatch thunk of DeviceState.siriLocale.getter();
        type metadata accessor for AppInfoBuilder();
        swift_initStackObject();
        AppInfoBuilder.getAppName(_:requestedLocale:)();
        uint64_t v60 = OUTLINED_FUNCTION_36_10();
        v61(v60);
        if (v58)
        {
          swift_bridgeObjectRetain();
          OUTLINED_FUNCTION_11_2();
          __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v86[0]);
          swift_bridgeObjectRelease();
        }
        else
        {
          __swift_storeEnumTagSinglePayload((uint64_t)v10, 1, 1, v86[0]);
        }
        _s16SiriDialogEngine15SpeakableStringVSgWOhTm_1((uint64_t)v13, &demangling cache variable for type metadata for SpeakableString?);
        outlined init with take of SpeakableString?((uint64_t)v10, (uint64_t)v13);
      }
      OUTLINED_FUNCTION_48_5();
      (*(void (**)(char *, Swift::Bool, uint64_t, uint64_t))(class metadata base offset for UnsupportedFlowCATs
                                                                    + v85
                                                                    + 160))(v13, v59, v88, v87);
      uint64_t v77 = (uint64_t)v13;
LABEL_51:
      _s16SiriDialogEngine15SpeakableStringVSgWOhTm_1(v77, &demangling cache variable for type metadata for SpeakableString?);
      goto LABEL_52;
    case 0xD:
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v62 = type metadata accessor for Logger();
      uint64_t v28 = (void *)OUTLINED_FUNCTION_25_0(v62, (uint64_t)static Logger.siriPhone);
      os_log_type_t v63 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_18(v63))
      {
        uint64_t v64 = (_WORD *)OUTLINED_FUNCTION_7_2();
        OUTLINED_FUNCTION_32_2(v64);
        OUTLINED_FUNCTION_25_4(&dword_0, v65, v66, "#UnsupportedCallFlowOutputFactory makeUnsupportedTemplatingResult: returning unsupported deleteVoicemail");
        OUTLINED_FUNCTION_5_16();
      }
      goto LABEL_47;
    default:
      if (*(unsigned char *)(v0 + 24))
      {
LABEL_16:
        if (one-time initialization token for siriPhone != -1) {
          swift_once();
        }
        uint64_t v33 = type metadata accessor for Logger();
        int v34 = (void *)OUTLINED_FUNCTION_25_0(v33, (uint64_t)static Logger.siriPhone);
        os_log_type_t v35 = static os_log_type_t.debug.getter();
        BOOL v36 = OUTLINED_FUNCTION_18(v35);
        uint64_t v37 = v87;
        if (v36)
        {
          uint64_t v38 = (_WORD *)OUTLINED_FUNCTION_7_2();
          OUTLINED_FUNCTION_32_2(v38);
          OUTLINED_FUNCTION_25_4(&dword_0, v39, v40, "#UnsupportedCallFlowOutputFactory makeUnsupportedTemplatingResult: returning unsupported on deviceType");
          OUTLINED_FUNCTION_5_16();
        }

        uint64_t v41 = (void *)v1[4];
        type metadata accessor for SirikitDeviceState();
        outlined init with copy of SignalProviding((uint64_t)v90, (uint64_t)v89);
        uint64_t v42 = SirikitDeviceState.__allocating_init(from:)();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(class metadata base offset for UnsupportedFlowCATs
                                                          + *v41
                                                          + 192))(v42, v88, v37);
        swift_release();
      }
      else
      {
        if (static UnsupportedPhoneCall.isInRetailStoreDemoMode()())
        {
          if (one-time initialization token for siriPhone != -1) {
            swift_once();
          }
          uint64_t v27 = type metadata accessor for Logger();
          uint64_t v28 = (void *)OUTLINED_FUNCTION_25_0(v27, (uint64_t)static Logger.siriPhone);
          os_log_type_t v29 = static os_log_type_t.debug.getter();
          if (OUTLINED_FUNCTION_18(v29))
          {
            char v30 = (_WORD *)OUTLINED_FUNCTION_7_2();
            OUTLINED_FUNCTION_32_2(v30);
            OUTLINED_FUNCTION_25_4(&dword_0, v31, v32, "#UnsupportedCallFlowOutputFactory makeUnsupportedTemplatingResult: returning unsupported startCallEmergencyInRetailStore");
            OUTLINED_FUNCTION_5_16();
          }
        }
        else
        {
          if (one-time initialization token for siriPhone != -1) {
            swift_once();
          }
          uint64_t v78 = type metadata accessor for Logger();
          uint64_t v28 = (void *)OUTLINED_FUNCTION_25_0(v78, (uint64_t)static Logger.siriPhone);
          os_log_type_t v79 = static os_log_type_t.debug.getter();
          if (OUTLINED_FUNCTION_18(v79))
          {
            uint64_t v80 = (_WORD *)OUTLINED_FUNCTION_7_2();
            OUTLINED_FUNCTION_32_2(v80);
            OUTLINED_FUNCTION_25_4(&dword_0, v81, v82, "#UnsupportedCallFlowOutputFactory makeUnsupportedTemplatingResult: returning unsupported startCallEmergency");
            OUTLINED_FUNCTION_5_16();
          }
        }
LABEL_47:

        OUTLINED_FUNCTION_48_5();
        uint64_t v83 = OUTLINED_FUNCTION_37_8();
        v84(v83);
      }
LABEL_52:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v90);
      OUTLINED_FUNCTION_26_1();
      return;
  }
}

uint64_t UnsupportedCallFlowOutputFactory.makeUnsupportedViews(_:)(uint64_t (*a1)(void *, void), uint64_t a2)
{
  if ((UnsupportedCallFlowOutputFactory.shouldShowOpenAppButtonForSCH()() & 1) == 0) {
    return a1(_swiftEmptyArrayStorage, 0);
  }
  static SCHViewBuilders.makeErrorButtonBuilder(templatingService:app:preferredCallProvider:sharedGlobals:)(v2 + 136, *(void *)(v2 + 128), 0, (void *)(v2 + 88), v8);
  uint64_t v5 = v9;
  uint64_t v6 = v10;
  __swift_project_boxed_opaque_existential_1(v8, v9);
  IdiomSensitiveViewBuilding.makeViews(_:)((uint64_t)a1, a2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
}

uint64_t UnsupportedCallFlowOutputFactory.shouldShowOpenAppButtonForSCH()()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)(v0 + 88);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 88), *(void *)(v0 + 112));
  OUTLINED_FUNCTION_24_2();
  v3();
  __swift_project_boxed_opaque_existential_1(v15, v16);
  DeviceState.isStandaloneIOS.getter();
  if (v4)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v2, *(void *)(v0 + 112));
    OUTLINED_FUNCTION_24_2();
    v5();
    __swift_project_boxed_opaque_existential_1(v14, v14[3]);
    char v6 = dispatch thunk of DeviceState.isWatch.getter();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    if ((v6 & 1) == 0)
    {
      LOBYTE(v10) = 0;
      goto LABEL_6;
    }
  }
  __swift_project_boxed_opaque_existential_1(v2, *(void *)(v1 + 112));
  OUTLINED_FUNCTION_24_2();
  v7();
  uint64_t v8 = v16;
  uint64_t v9 = v17;
  __swift_project_boxed_opaque_existential_1(v15, v16);
  int v10 = DeviceState.supportsOnlyFaceTimeCalls.getter(v8, v9) ^ 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
LABEL_6:
  if (UnsupportedPhoneCall.rawValue.getter(*(unsigned char *)(v1 + 24)) == 0xD00000000000001CLL && v11 == 0x8000000000490460)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    LOBYTE(v10) = v12 & v10;
  }
  return v10 & 1;
}

unint64_t UnsupportedCallFlowOutputFactory.isPlayVoicemailIntent()()
{
  if (*(void *)(v0 + 176))
  {
    self;
    uint64_t v2 = (void *)swift_dynamicCastObjCClass();
    if (v2) {
      return ((unint64_t)[v2 callTypes] >> 4) & 1;
    }
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = OUTLINED_FUNCTION_25_0(v4, (uint64_t)static Logger.siriPhone);
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (_WORD *)OUTLINED_FUNCTION_7_2();
    OUTLINED_FUNCTION_32_2(v7);
    _os_log_impl(&dword_0, v5, v6, "#UnsupportedCallFlowOutputFactory Unexpected input, intent is not equal to INSearchCallHistoryIntent", v1, 2u);
    OUTLINED_FUNCTION_5_16();
  }

  return 0;
}

uint64_t UnsupportedCallFlowOutputFactory.makeUnsupportedOutput()()
{
  OUTLINED_FUNCTION_1_0();
  v1[52] = v2;
  v1[53] = v0;
  uint64_t v3 = type metadata accessor for CATOption();
  OUTLINED_FUNCTION_11_0(v3);
  v1[54] = OUTLINED_FUNCTION_35();
  uint64_t v4 = type metadata accessor for DialogPhase();
  OUTLINED_FUNCTION_11_0(v4);
  v1[55] = OUTLINED_FUNCTION_35();
  uint64_t v5 = type metadata accessor for OutputGenerationManifest();
  v1[56] = v5;
  OUTLINED_FUNCTION_19_0(v5);
  v1[57] = v6;
  v1[58] = OUTLINED_FUNCTION_35();
  uint64_t v7 = type metadata accessor for ButtonConfigurationModel();
  OUTLINED_FUNCTION_19_0(v7);
  v1[59] = v8;
  v1[60] = swift_task_alloc();
  v1[61] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Locale();
  v1[62] = v9;
  OUTLINED_FUNCTION_19_0(v9);
  v1[63] = v10;
  v1[64] = OUTLINED_FUNCTION_35();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v11);
  v1[65] = swift_task_alloc();
  v1[66] = swift_task_alloc();
  v1[67] = swift_task_alloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v12, v13, v14);
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  v2[42] = v1;
  v2[43] = v4;
  v2[44] = v0;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  *(void *)(v7 + 552) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  v2[45] = v1;
  v2[46] = v4;
  v2[47] = v0;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  *(void *)(v7 + 568) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v8 = v7;
  *(void *)(v5 + 608) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 616) = v3;
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v8 = v7;
  *(void *)(v5 + 648) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 656) = v3;
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_2();
  NSObject *v5 = v4;
  *(void *)(v7 + 704) = v6;
  *(void *)(v7 + 712) = v0;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_2();
  NSObject *v5 = v4;
  *(void *)(v6 + 736) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 176;
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_4_2();
  NSObject *v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v3);
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v8 = v7;
  *(void *)(v5 + 784) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 792) = v3;
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_2();
  NSObject *v5 = v4;
  *(void *)(v6 + 832) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v3, v4, v5);
}

void UnsupportedCallFlowOutputFactory.makeUnsupportedOutput()()
{
  uint64_t v1 = *(void *)(v0 + 536);
  uint64_t v2 = *(void *)(v0 + 424);
  __swift_project_boxed_opaque_existential_1((void *)(v2 + 88), *(void *)(v2 + 112));
  OUTLINED_FUNCTION_24_2();
  v3();
  uint64_t v4 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_14_1(v1);
  switch(*(unsigned char *)(v2 + 24))
  {
    case 4:
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v5 = type metadata accessor for Logger();
      uint64_t v6 = OUTLINED_FUNCTION_25_0(v5, (uint64_t)static Logger.siriPhone);
      os_log_type_t v7 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = (uint8_t *)OUTLINED_FUNCTION_7_2();
        *(_WORD *)uint64_t v8 = 0;
        _os_log_impl(&dword_0, v6, v7, "#UnsupportedCallFlowOutputFactory makeUnsupportedOutput: returning unsupportedSearchCallHistory", v8, 2u);
        swift_slowDealloc();
      }
      uint64_t v9 = *(void *)(v0 + 424);

      uint64_t v10 = *(void *)(v9 + 128);
      __swift_project_boxed_opaque_existential_1((void *)(v2 + 88), *(void *)(v2 + 112));
      OUTLINED_FUNCTION_58_5();
      OUTLINED_FUNCTION_24_2();
      v11();
      *(void *)(v0 + 680) = static UserFacingCallingAppUtils.getCommAppForLaunch(originalApp:preferredCallProvider:deviceState:)(v10, 0, (void *)(v0 + 216));
      __swift_destroy_boxed_opaque_existential_1(v0 + 216);
      Swift::Bool v12 = App.isFirstParty()();
      outlined init with copy of SignalProviding(v0 + 16, v0 + 256);
      if (v12)
      {
        uint64_t v13 = (void *)OUTLINED_FUNCTION_54_3();
        __swift_project_boxed_opaque_existential_1(v13, v14);
        char v15 = dispatch thunk of DeviceState.isPhone.getter();
        __swift_destroy_boxed_opaque_existential_1(v0 + 256);
        if (v15)
        {
          uint64_t v16 = *(void *)(v0 + 528);
          goto LABEL_69;
        }
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1(v0 + 256);
      }
      uint64_t v108 = *(void *)(v0 + 504);
      uint64_t v107 = *(void *)(v0 + 512);
      uint64_t v149 = *(void *)(v0 + 496);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
      OUTLINED_FUNCTION_58_5();
      dispatch thunk of DeviceState.siriLocale.getter();
      type metadata accessor for AppInfoBuilder();
      swift_initStackObject();
      AppInfoBuilder.getAppName(_:requestedLocale:)();
      uint64_t v110 = v109;
      (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v107, v149);
      uint64_t v111 = *(void *)(v0 + 528);
      if (v110)
      {
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_11_2();
        __swift_storeEnumTagSinglePayload(v111, 0, 1, v4);
        swift_bridgeObjectRelease();
        goto LABEL_70;
      }
      uint64_t v16 = *(void *)(v0 + 528);
LABEL_69:
      OUTLINED_FUNCTION_14_1(v16);
LABEL_70:
      *(unsigned char *)(v0 + 888) = UnsupportedCallFlowOutputFactory.shouldShowOpenAppButtonForSCH()() & 1;
      UnsupportedCallFlowOutputFactory.isPlayVoicemailIntent()();
      type metadata accessor for SirikitDeviceState();
      outlined init with copy of SignalProviding(v0 + 16, v0 + 296);
      *(void *)(v0 + 688) = SirikitDeviceState.__allocating_init(from:)();
      uint64_t v130 = (void *)swift_task_alloc();
      *(void *)(v0 + 696) = v130;
      *uint64_t v130 = v0;
      v130[1] = UnsupportedCallFlowOutputFactory.makeUnsupportedOutput();
      OUTLINED_FUNCTION_27_3();
      __asm { BRAA            X5, X16 }
      return;
    case 5:
    case 6:
    case 8:
    case 9:
    case 0xB:
    case 0xC:
      goto LABEL_18;
    case 7:
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v56 = type metadata accessor for Logger();
      uint64_t v57 = (void *)OUTLINED_FUNCTION_25_0(v56, (uint64_t)static Logger.siriPhone);
      os_log_type_t v58 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_18(v58))
      {
        Swift::Bool v59 = (_WORD *)OUTLINED_FUNCTION_7_2();
        OUTLINED_FUNCTION_32_2(v59);
        OUTLINED_FUNCTION_25_4(&dword_0, v60, v61, "#UnsupportedCallFlowOutputFactory makeUnsupportedOutput: returning unsupportedDeleteCallHistory");
        OUTLINED_FUNCTION_5_16();
      }

      OUTLINED_FUNCTION_2();
      uint64_t v142 = *(void *)(v62 + class metadata base offset for UnsupportedFlowCATsSimple)
           + **(int **)(v62 + class metadata base offset for UnsupportedFlowCATsSimple);
      uint64_t v147 = v62 + class metadata base offset for UnsupportedFlowCATsSimple;
      os_log_type_t v63 = (void *)swift_task_alloc();
      *(void *)(v0 + 600) = v63;
      *os_log_type_t v63 = v0;
      v63[1] = UnsupportedCallFlowOutputFactory.makeUnsupportedOutput();
      OUTLINED_FUNCTION_56_4((uint64_t)v63, v64, v65, v66, v67, v68, v69, v70, v138, v139, v140, v142, v147);
      OUTLINED_FUNCTION_27_3();
      __asm { BRAA            X1, X16 }
      return;
    case 0xA:
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v73 = type metadata accessor for Logger();
      char v74 = OUTLINED_FUNCTION_25_0(v73, (uint64_t)static Logger.siriPhone);
      os_log_type_t v75 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v74, v75))
      {
        uint64_t v76 = (uint8_t *)OUTLINED_FUNCTION_7_2();
        *(_WORD *)uint64_t v76 = 0;
        _os_log_impl(&dword_0, v74, v75, "#UnsupportedCallFlowOutputFactory makeUnsupportedOutput: returning unsupported emergencyContactCall", v76, 2u);
        swift_slowDealloc();
      }

      if (!App.isFirstParty()())
      {
        uint64_t v77 = *(void *)(v0 + 504);
        uint64_t v78 = *(void *)(v0 + 512);
        uint64_t v143 = *(void *)(v0 + 496);
        __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
        dispatch thunk of DeviceState.siriLocale.getter();
        type metadata accessor for AppInfoBuilder();
        swift_initStackObject();
        AppInfoBuilder.getAppName(_:requestedLocale:)();
        uint64_t v80 = v79;
        (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v78, v143);
        uint64_t v81 = *(void *)(v0 + 520);
        if (v80)
        {
          swift_bridgeObjectRetain();
          OUTLINED_FUNCTION_11_2();
          __swift_storeEnumTagSinglePayload(v81, 0, 1, v4);
          swift_bridgeObjectRelease();
        }
        else
        {
          OUTLINED_FUNCTION_14_1(*(void *)(v0 + 520));
        }
        uint64_t v133 = *(void *)(v0 + 536);
        uint64_t v134 = *(void *)(v0 + 520);
        _s16SiriDialogEngine15SpeakableStringVSgWOhTm_1(v133, &demangling cache variable for type metadata for SpeakableString?);
        outlined init with take of SpeakableString?(v134, v133);
      }
      uint64_t v135 = (void *)swift_task_alloc();
      *(void *)(v0 + 776) = v135;
      *uint64_t v135 = v0;
      v135[1] = UnsupportedCallFlowOutputFactory.makeUnsupportedOutput();
      OUTLINED_FUNCTION_27_3();
      __asm { BRAA            X3, X16 }
      return;
    case 0xD:
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v82 = type metadata accessor for Logger();
      uint64_t v83 = (void *)OUTLINED_FUNCTION_25_0(v82, (uint64_t)static Logger.siriPhone);
      os_log_type_t v84 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_18(v84))
      {
        uint64_t v85 = (_WORD *)OUTLINED_FUNCTION_7_2();
        OUTLINED_FUNCTION_32_2(v85);
        OUTLINED_FUNCTION_25_4(&dword_0, v86, v87, "#UnsupportedCallFlowOutputFactory makeUnsupportedOutput: returning unsupportedDeleteVoicemail");
        OUTLINED_FUNCTION_5_16();
      }
      uint64_t v88 = *(void *)(v0 + 424);

      os_log_type_t v89 = *(int **)(class metadata base offset for UnsupportedFlowCATsSimple + **(void **)(v88 + 40) + 16);
      uint64_t v144 = (uint64_t)v89 + *v89;
      uint64_t v148 = class metadata base offset for UnsupportedFlowCATsSimple + **(void **)(v88 + 40) + 16;
      uint64_t v90 = (void *)swift_task_alloc();
      *(void *)(v0 + 640) = v90;
      *uint64_t v90 = v0;
      v90[1] = UnsupportedCallFlowOutputFactory.makeUnsupportedOutput();
      OUTLINED_FUNCTION_56_4((uint64_t)v90, v91, v92, v93, v94, v95, v96, v97, v138, v139, v140, v144, v148);
      OUTLINED_FUNCTION_27_3();
      __asm { BRAA            X1, X16 }
      return;
    default:
      if (!*(unsigned char *)(v2 + 24))
      {
        if (static UnsupportedPhoneCall.isInRetailStoreDemoMode()())
        {
          if (one-time initialization token for siriPhone != -1) {
            swift_once();
          }
          uint64_t v17 = type metadata accessor for Logger();
          uint64_t v18 = (void *)OUTLINED_FUNCTION_25_0(v17, (uint64_t)static Logger.siriPhone);
          os_log_type_t v19 = static os_log_type_t.debug.getter();
          if (OUTLINED_FUNCTION_18(v19))
          {
            os_log_type_t v20 = (_WORD *)OUTLINED_FUNCTION_7_2();
            OUTLINED_FUNCTION_32_2(v20);
            OUTLINED_FUNCTION_25_4(&dword_0, v21, v22, "#UnsupportedCallFlowOutputFactory makeUnsupportedOutput: returning unsupported startCallEmergencyInRetailStore");
            OUTLINED_FUNCTION_5_16();
          }
          uint64_t v23 = *(void *)(v0 + 424);

          uint64_t v24 = *(int **)(class metadata base offset for UnsupportedFlowCATsSimple + **(void **)(v23 + 40) + 64);
          uint64_t v141 = (uint64_t)v24 + *v24;
          uint64_t v146 = class metadata base offset for UnsupportedFlowCATsSimple + **(void **)(v23 + 40) + 64;
          uint64_t v25 = (void *)swift_task_alloc();
          *(void *)(v0 + 544) = v25;
          *uint64_t v25 = v0;
          v25[1] = UnsupportedCallFlowOutputFactory.makeUnsupportedOutput();
          OUTLINED_FUNCTION_56_4((uint64_t)v25, v26, v27, v28, v29, v30, v31, v32, v138, v139, v140, v141, v146);
          OUTLINED_FUNCTION_27_3();
          __asm { BRAA            X1, X16 }
        }
        if (one-time initialization token for siriPhone != -1) {
          swift_once();
        }
        uint64_t v112 = type metadata accessor for Logger();
        uint64_t v113 = (void *)OUTLINED_FUNCTION_25_0(v112, (uint64_t)static Logger.siriPhone);
        os_log_type_t v114 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_18(v114))
        {
          uint64_t v115 = (_WORD *)OUTLINED_FUNCTION_7_2();
          OUTLINED_FUNCTION_32_2(v115);
          OUTLINED_FUNCTION_25_4(&dword_0, v116, v117, "#UnsupportedCallFlowOutputFactory makeUnsupportedOutput: returning unsupported startCallEmergency");
          OUTLINED_FUNCTION_5_16();
        }
        uint64_t v118 = *(void *)(v0 + 424);

        uint64_t v119 = *(int **)(class metadata base offset for UnsupportedFlowCATsSimple + **(void **)(v118 + 40) + 48);
        uint64_t v145 = (uint64_t)v119 + *v119;
        uint64_t v150 = class metadata base offset for UnsupportedFlowCATsSimple + **(void **)(v118 + 40) + 48;
        uint64_t v120 = (void *)swift_task_alloc();
        *(void *)(v0 + 560) = v120;
        *uint64_t v120 = v0;
        v120[1] = UnsupportedCallFlowOutputFactory.makeUnsupportedOutput();
        OUTLINED_FUNCTION_56_4((uint64_t)v120, v121, v122, v123, v124, v125, v126, v127, v138, v139, v140, v145, v150);
        OUTLINED_FUNCTION_27_3();
        __asm { BRAA            X1, X16 }
      }
LABEL_18:
      __swift_project_boxed_opaque_existential_1((void *)(v2 + 88), *(void *)(v2 + 112));
      uint64_t v35 = OUTLINED_FUNCTION_54_3();
      uint64_t v37 = v36(v35);
      char v38 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 144))(v37);
      swift_release();
      outlined init with copy of SignalProviding(v0 + 16, v0 + 56);
      if (v38)
      {
        __swift_project_boxed_opaque_existential_1((void *)(v0 + 56), *(void *)(v0 + 80));
        char v39 = dispatch thunk of DeviceState.isAppleTV.getter();
        __swift_destroy_boxed_opaque_existential_1(v0 + 56);
        if (v39)
        {
          uint64_t v40 = *(void *)(*(void *)(v0 + 424) + 176);
          if (v40)
          {
            swift_getObjectType();
            if (dynamic_cast_existential_1_conditional(v40))
            {
              if (one-time initialization token for siriPhone != -1) {
                swift_once();
              }
              uint64_t v41 = type metadata accessor for Logger();
              uint64_t v42 = (void *)OUTLINED_FUNCTION_25_0(v41, (uint64_t)static Logger.siriPhone);
              os_log_type_t v43 = static os_log_type_t.debug.getter();
              if (OUTLINED_FUNCTION_18(v43))
              {
                os_log_type_t v44 = (_WORD *)OUTLINED_FUNCTION_7_2();
                OUTLINED_FUNCTION_32_2(v44);
                OUTLINED_FUNCTION_25_4(&dword_0, v45, v46, "#UnsupportedCallFlowOutputFactory makeUnsupportedOutput: returning unsupported on deviceType on AppleTV with FaceTime punchout");
                OUTLINED_FUNCTION_5_16();
              }

              outlined init with copy of SignalProviding(v2 + 88, v0 + 136);
              type metadata accessor for StartCallCATs();
              OUTLINED_FUNCTION_57_3();
              uint64_t v47 = CATWrapper.__allocating_init(options:globals:)();
              type metadata accessor for StartCallCATsSimple();
              OUTLINED_FUNCTION_57_3();
              uint64_t v48 = CATWrapperSimple.__allocating_init(options:globals:)();
              type metadata accessor for PhoneCallDisplayTextCATsSimple();
              OUTLINED_FUNCTION_57_3();
              uint64_t v49 = CATWrapperSimple.__allocating_init(options:globals:)();
              type metadata accessor for UnsupportedFlowCATs();
              OUTLINED_FUNCTION_57_3();
              uint64_t v50 = CATWrapper.__allocating_init(options:globals:)();
              type metadata accessor for UnsupportedFaceTimeOutputProvider();
              uint64_t v51 = swift_allocObject();
              *(void *)(v0 + 816) = specialized UnsupportedFaceTimeOutputProvider.init(unsupportedPhoneCall:sharedGlobals:startCallCats:startCallCATsSimple:phoneCallDisplayTextCATsSimple:unsupportedFlowCats:labelTemplates:)(12, (long long *)(v0 + 136), v47, v48, v49, v50, 0, 0, 0, 0, v51);
              swift_task_alloc();
              OUTLINED_FUNCTION_31_2();
              *(void *)(v0 + 824) = v52;
              void *v52 = v53;
              v52[1] = UnsupportedCallFlowOutputFactory.makeUnsupportedOutput();
              OUTLINED_FUNCTION_27_3();
              __asm { BRAA            X2, X16 }
            }
          }
        }
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1(v0 + 56);
      }
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v100 = type metadata accessor for Logger();
      uint64_t v101 = OUTLINED_FUNCTION_25_0(v100, (uint64_t)static Logger.siriPhone);
      os_log_type_t v102 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v101, v102))
      {
        uint64_t v103 = (uint8_t *)OUTLINED_FUNCTION_7_2();
        *(_WORD *)uint64_t v103 = 0;
        _os_log_impl(&dword_0, v101, v102, "#UnsupportedCallFlowOutputFactory makeUnsupportedOutput: returning unsupported on deviceType", v103, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for SirikitDeviceState();
      outlined init with copy of SignalProviding(v0 + 16, v0 + 96);
      *(void *)(v0 + 840) = SirikitDeviceState.__allocating_init(from:)();
      uint64_t v104 = (void *)swift_task_alloc();
      *(void *)(v0 + 848) = v104;
      *uint64_t v104 = v0;
      v104[1] = UnsupportedCallFlowOutputFactory.makeUnsupportedOutput();
      OUTLINED_FUNCTION_27_3();
      __asm { BRAA            X2, X16 }
      return;
  }
}

uint64_t UnsupportedCallFlowOutputFactory.makeUnsupportedOutput()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_40_0();
  uint64_t v11 = (void *)v10[43];
  v10[72] = v11;
  OUTLINED_FUNCTION_14_19();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  Swift::Bool v12 = (__n128 *)OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_13_16(v12, (__n128)xmmword_46A030);
  v10[73] = a9;
  id v13 = v11;
  uint64_t v14 = (void *)swift_task_alloc();
  v10[74] = v14;
  *uint64_t v14 = v10;
  v14[1] = UnsupportedCallFlowOutputFactory.makeUnsupportedOutput();
  OUTLINED_FUNCTION_5_35();
  OUTLINED_FUNCTION_31_1();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10);
}

{
  void *v10;
  void *v11;
  __n128 *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_40_0();
  uint64_t v11 = (void *)v10[46];
  v10[72] = v11;
  OUTLINED_FUNCTION_14_19();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  Swift::Bool v12 = (__n128 *)OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_13_16(v12, (__n128)xmmword_46A030);
  v10[73] = a9;
  id v13 = v11;
  uint64_t v14 = (void *)swift_task_alloc();
  v10[74] = v14;
  *uint64_t v14 = v10;
  v14[1] = UnsupportedCallFlowOutputFactory.makeUnsupportedOutput();
  OUTLINED_FUNCTION_5_35();
  OUTLINED_FUNCTION_31_1();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10);
}

{
  void *v10;
  void *v11;
  __n128 *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_40_0();
  uint64_t v11 = (void *)v10[77];
  OUTLINED_FUNCTION_14_19();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  Swift::Bool v12 = (__n128 *)OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_13_16(v12, (__n128)xmmword_46A030);
  v10[78] = a9;
  id v13 = v11;
  swift_task_alloc();
  OUTLINED_FUNCTION_31_2();
  v10[79] = v14;
  *uint64_t v14 = v15;
  v14[1] = UnsupportedCallFlowOutputFactory.makeUnsupportedOutput();
  OUTLINED_FUNCTION_5_35();
  OUTLINED_FUNCTION_31_1();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10);
}

{
  void *v10;
  void *v11;
  __n128 *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_40_0();
  uint64_t v11 = (void *)v10[82];
  OUTLINED_FUNCTION_14_19();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  Swift::Bool v12 = (__n128 *)OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_13_16(v12, (__n128)xmmword_46A030);
  v10[83] = a9;
  id v13 = v11;
  swift_task_alloc();
  OUTLINED_FUNCTION_31_2();
  v10[84] = v14;
  *uint64_t v14 = v15;
  v14[1] = UnsupportedCallFlowOutputFactory.makeUnsupportedOutput();
  OUTLINED_FUNCTION_5_35();
  OUTLINED_FUNCTION_31_1();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10);
}

{
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v16;
  __n128 *v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_40_0();
  uint64_t v11 = *(void **)(*(void *)(v10 + 424) + 176);
  *(void *)(v10 + 720) = v11;
  if (v11 && *(unsigned char *)(v10 + 888) == 1)
  {
    v11;
    swift_task_alloc();
    OUTLINED_FUNCTION_31_2();
    *(void *)(v10 + 728) = v12;
    __n128 *v12 = v13;
    v12[1] = UnsupportedCallFlowOutputFactory.makeUnsupportedOutput();
    OUTLINED_FUNCTION_31_1();
    return UnsupportedCallFlowOutputFactory.getButtonConfigurationModel(app:intent:)();
  }
  else
  {
    uint64_t v16 = *(void **)(v10 + 704);
    OUTLINED_FUNCTION_14_19();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v17 = (__n128 *)OUTLINED_FUNCTION_93();
    OUTLINED_FUNCTION_13_16(v17, (__n128)xmmword_46A030);
    *(void *)(v10 + 760) = a9;
    uint64_t v18 = v16;
    swift_task_alloc();
    OUTLINED_FUNCTION_31_2();
    *(void *)(v10 + 768) = v19;
    *uint64_t v19 = v20;
    v19[1] = UnsupportedCallFlowOutputFactory.makeUnsupportedOutput();
    OUTLINED_FUNCTION_5_35();
    OUTLINED_FUNCTION_31_1();
    return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v21, v22, v23, v24, v25, v26, v27, v28, a9, a10);
  }
}

{
  uint64_t *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *boxed_opaque_existential_1;
  __n128 *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  OUTLINED_FUNCTION_48();
  uint64_t v11 = (void *)v10[88];
  Swift::Bool v12 = v10[60];
  id v13 = v10[59];
  uint64_t v14 = (void *)v10[53];
  outlined init with copy of ButtonConfigurationModel(v10[61], v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ButtonConfigurationModel>);
  uint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_467710;
  outlined init with take of ButtonConfigurationModel(v12, v16 + v15);
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  static DialogPhase.completion.getter();
  uint64_t v17 = swift_task_alloc();
  *(void *)(v17 + 16) = 0xD000000000000025;
  *(void *)(v17 + 24) = 0x80000000004940B0;
  OutputGenerationManifest.init(dialogPhase:_:)();
  swift_task_dealloc();
  uint64_t v18 = v14[9];
  uint64_t v19 = v14[10];
  __swift_project_boxed_opaque_existential_1(v14 + 6, v18);
  v10[25] = type metadata accessor for PhoneSnippetDataModels();
  v10[26] = lazy protocol witness table accessor for type PhoneSnippetDataModels and conformance PhoneSnippetDataModels();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v10 + 22);
  uint64_t *boxed_opaque_existential_1 = v16;
  *((unsigned char *)boxed_opaque_existential_1 + 8) = 2;
  swift_storeEnumTagMultiPayload();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v21 = (__n128 *)OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_13_16(v21, (__n128)xmmword_46A030);
  v10[93] = 0;
  uint64_t v22 = v11;
  swift_task_alloc();
  OUTLINED_FUNCTION_31_2();
  v10[94] = (uint64_t)v25;
  *uint64_t v25 = v26;
  v25[1] = UnsupportedCallFlowOutputFactory.makeUnsupportedOutput();
  uint64_t v27 = v10[58];
  uint64_t v28 = v10[52];
  return dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)(v28, v10 + 22, 0, v27, v18, v19, v23, v24, a9, a10);
}

{
  void *v10;
  void *v11;
  __n128 *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_40_0();
  uint64_t v11 = (void *)v10[99];
  OUTLINED_FUNCTION_14_19();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  Swift::Bool v12 = (__n128 *)OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_13_16(v12, (__n128)xmmword_46A030);
  v10[100] = a9;
  id v13 = v11;
  swift_task_alloc();
  OUTLINED_FUNCTION_31_2();
  v10[101] = v14;
  *uint64_t v14 = v15;
  v14[1] = UnsupportedCallFlowOutputFactory.makeUnsupportedOutput();
  OUTLINED_FUNCTION_5_35();
  OUTLINED_FUNCTION_31_1();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10);
}

{
  void *v10;
  void *v11;
  __n128 *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_40_0();
  uint64_t v11 = (void *)v10[108];
  OUTLINED_FUNCTION_14_19();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  Swift::Bool v12 = (__n128 *)OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_13_16(v12, (__n128)xmmword_46A030);
  v10[109] = a9;
  id v13 = v11;
  swift_task_alloc();
  OUTLINED_FUNCTION_31_2();
  v10[110] = v14;
  *uint64_t v14 = v15;
  v14[1] = UnsupportedCallFlowOutputFactory.makeUnsupportedOutput();
  OUTLINED_FUNCTION_5_35();
  OUTLINED_FUNCTION_31_1();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10);
}

uint64_t UnsupportedCallFlowOutputFactory.makeUnsupportedOutput()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_19_13();
  OUTLINED_FUNCTION_48();
  uint64_t v13 = *(void *)(v12 + 536);

  _s16SiriDialogEngine15SpeakableStringVSgWOhTm_1(v13, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_2_47();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_4_3();
  return v15(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10, a11, a12);
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_19_13();
  OUTLINED_FUNCTION_48();
  uint64_t v13 = *(void *)(v12 + 536);

  _s16SiriDialogEngine15SpeakableStringVSgWOhTm_1(v13, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_2_47();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_4_3();
  return v15(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10, a11, a12);
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_19_13();
  OUTLINED_FUNCTION_48();
  uint64_t v13 = *(void *)(v12 + 536);

  _s16SiriDialogEngine15SpeakableStringVSgWOhTm_1(v13, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_2_47();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_4_3();
  return v15(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10, a11, a12);
}

{
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  uint64_t v18;
  uint64_t (*v19)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  OUTLINED_FUNCTION_19_13();
  OUTLINED_FUNCTION_48();
  uint64_t v13 = (void *)v12[90];
  uint64_t v14 = (void *)v12[88];
  uint64_t v15 = v12[61];
  swift_release();

  uint64_t v16 = OUTLINED_FUNCTION_54_3();
  v17(v16);
  outlined destroy of ButtonConfigurationModel(v15);
  OUTLINED_FUNCTION_53_3();
  OUTLINED_FUNCTION_55_5();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v12 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_4_3();
  return v19(v18, v19, v20, v21, v22, v23, v24, v25, v12 + 2, a10, a11, a12);
}

{
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_19_13();
  OUTLINED_FUNCTION_48();
  uint64_t v13 = *(void **)(v12 + 704);
  OUTLINED_FUNCTION_49_7();

  OUTLINED_FUNCTION_53_3();
  OUTLINED_FUNCTION_55_5();
  OUTLINED_FUNCTION_2_47();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_4_3();
  return v15(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10, a11, a12);
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_19_13();
  OUTLINED_FUNCTION_48();
  uint64_t v13 = *(void *)(v12 + 536);

  _s16SiriDialogEngine15SpeakableStringVSgWOhTm_1(v13, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_2_47();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_4_3();
  return v15(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10, a11, a12);
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_19_13();
  OUTLINED_FUNCTION_48();
  uint64_t v13 = *(void *)(v12 + 536);
  swift_release();
  _s16SiriDialogEngine15SpeakableStringVSgWOhTm_1(v13, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_2_47();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_4_3();
  return v15(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10, a11, a12);
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_19_13();
  OUTLINED_FUNCTION_48();
  uint64_t v13 = *(void *)(v12 + 536);

  _s16SiriDialogEngine15SpeakableStringVSgWOhTm_1(v13, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_2_47();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_4_3();
  return v15(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10, a11, a12);
}

uint64_t UnsupportedCallFlowOutputFactory.makeUnsupportedOutput()(uint64_t a1)
{
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v2;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v8 = v7;
  *(void *)(v5 + 856) = v1;
  swift_task_dealloc();
  swift_release();
  if (!v1) {
    *(void *)(v5 + 864) = a1;
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t UnsupportedCallFlowOutputFactory.makeUnsupportedOutput()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_30_12();
  uint64_t v14 = OUTLINED_FUNCTION_44_8();
  _s16SiriDialogEngine15SpeakableStringVSgWOhTm_1(v14, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_3_44();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_22_15();
  OUTLINED_FUNCTION_28_1();
  return v16(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10, a11, a12, a13, a14);
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_30_12();
  uint64_t v14 = OUTLINED_FUNCTION_44_8();
  _s16SiriDialogEngine15SpeakableStringVSgWOhTm_1(v14, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_3_44();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_22_15();
  OUTLINED_FUNCTION_28_1();
  return v16(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10, a11, a12, a13, a14);
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_30_12();
  uint64_t v14 = OUTLINED_FUNCTION_44_8();
  _s16SiriDialogEngine15SpeakableStringVSgWOhTm_1(v14, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_3_44();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_22_15();
  OUTLINED_FUNCTION_28_1();
  return v16(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10, a11, a12, a13, a14);
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_30_12();
  uint64_t v14 = OUTLINED_FUNCTION_44_8();
  _s16SiriDialogEngine15SpeakableStringVSgWOhTm_1(v14, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_3_44();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_22_15();
  OUTLINED_FUNCTION_28_1();
  return v16(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10, a11, a12, a13, a14);
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_30_12();
  OUTLINED_FUNCTION_49_7();
  OUTLINED_FUNCTION_53_3();
  OUTLINED_FUNCTION_55_5();
  OUTLINED_FUNCTION_42_7();
  uint64_t v25 = *(void *)(v14 + 432);
  uint64_t v26 = v15;
  __swift_destroy_boxed_opaque_existential_1(v14 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_22_15();
  OUTLINED_FUNCTION_28_1();
  return v17(v16, v17, v18, v19, v20, v21, v22, v23, a9, v25, v26, a12, a13, a14);
}

{
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_30_12();
  uint64_t v15 = (void *)v14[90];
  uint64_t v16 = (void *)v14[88];
  OUTLINED_FUNCTION_49_7();

  OUTLINED_FUNCTION_53_3();
  OUTLINED_FUNCTION_55_5();
  uint64_t v26 = v14[92];
  OUTLINED_FUNCTION_42_7();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v14 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_22_15();
  OUTLINED_FUNCTION_28_1();
  return v18(v17, v18, v19, v20, v21, v22, v23, v24, a9, v14 + 2, v26, a12, a13, a14);
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_30_12();
  uint64_t v14 = OUTLINED_FUNCTION_44_8();
  _s16SiriDialogEngine15SpeakableStringVSgWOhTm_1(v14, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_3_44();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_22_15();
  OUTLINED_FUNCTION_28_1();
  return v16(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10, a11, a12, a13, a14);
}

{
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_30_12();
  uint64_t v15 = v14[67];
  swift_release();
  _s16SiriDialogEngine15SpeakableStringVSgWOhTm_1(v15, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v25 = v14[54];
  uint64_t v26 = v14[104];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v14 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_22_15();
  OUTLINED_FUNCTION_28_1();
  return v17(v16, v17, v18, v19, v20, v21, v22, v23, a9, v25, v26, a12, a13, a14);
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_30_12();
  uint64_t v14 = OUTLINED_FUNCTION_44_8();
  _s16SiriDialogEngine15SpeakableStringVSgWOhTm_1(v14, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_3_44();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_22_15();
  OUTLINED_FUNCTION_28_1();
  return v16(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10, a11, a12, a13, a14);
}

uint64_t UnsupportedCallFlowOutputFactory.getButtonConfigurationModel(app:intent:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[4] = v2;
  v1[5] = v0;
  v1[2] = v3;
  v1[3] = v4;
  uint64_t v5 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_11_0(v5);
  v1[6] = OUTLINED_FUNCTION_35();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v6);
  v1[7] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_16_1();
  uint64_t v1 = *(void **)(v0[5] + 184);
  UnsupportedCallFlowOutputFactory.getSpeakableAppName(app:intent:)();
  uint64_t v5 = (uint64_t (*)(uint64_t))(*(void *)(class metadata base offset for PhoneCallDisplayTextCATsSimple
                                                   + *v1
                                                   + 248)
                                       + **(int **)(class metadata base offset for PhoneCallDisplayTextCATsSimple
                                                  + *v1
                                                  + 248));
  uint64_t v2 = (void *)swift_task_alloc();
  v0[8] = v2;
  *uint64_t v2 = v0;
  v2[1] = UnsupportedCallFlowOutputFactory.getButtonConfigurationModel(app:intent:);
  uint64_t v3 = v0[7];
  return v5(v3);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  OUTLINED_FUNCTION_40_0();
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = dispatch thunk of LabelExecutionResult.subscript.getter();
  uint64_t v4 = v3;
  type metadata accessor for SAAppsLaunchApp();
  uint64_t v5 = swift_retain();
  SAAppsLaunchApp.init(app:)(v5);
  UUID.init()();
  ButtonConfigurationModel.init(label:action:id:)(v2, v4, v1);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  return v6();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v0();
}

uint64_t UnsupportedCallFlowOutputFactory.getButtonConfigurationModel(app:intent:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v2;
  *(void *)(v5 + 72) = v1;
  swift_task_dealloc();
  uint64_t v7 = *(void *)(v4 + 56);
  if (!v1) {
    *(void *)(v5 + 80) = a1;
  }
  _s16SiriDialogEngine15SpeakableStringVSgWOhTm_1(v7, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v8, v9, v10);
}

void UnsupportedCallFlowOutputFactory.getSpeakableAppName(app:intent:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v3 = v2;
  uint64_t v16 = v4;
  uint64_t v5 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_1();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_52();
  uint64_t v9 = v0[27];
  uint64_t v10 = v0[28];
  __swift_project_boxed_opaque_existential_1(v0 + 24, v9);
  __swift_project_boxed_opaque_existential_1(v0 + 11, v0[14]);
  OUTLINED_FUNCTION_24_2();
  v11();
  __swift_project_boxed_opaque_existential_1(v17, v17[3]);
  dispatch thunk of DeviceState.siriLocale.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 16))(v3, v1, v9, v10);
  uint64_t v13 = v12;
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  if (v13)
  {
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_11_2();
    uint64_t v14 = type metadata accessor for SpeakableString();
    __swift_storeEnumTagSinglePayload(v16, 0, 1, v14);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v15 = type metadata accessor for SpeakableString();
    __swift_storeEnumTagSinglePayload(v16, 1, 1, v15);
  }
  OUTLINED_FUNCTION_26_1();
}

uint64_t UnsupportedCallFlowOutputFactory.deinit()
{
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 48);
  __swift_destroy_boxed_opaque_existential_1(v0 + 88);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 136);

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 192);
  uint64_t v1 = v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin32UnsupportedCallFlowOutputFactory_completionOutputManifest;
  type metadata accessor for OutputGenerationManifest();
  OUTLINED_FUNCTION_39_8();
  (*(void (**)(uint64_t))(v2 + 8))(v1);
  return v0;
}

uint64_t UnsupportedCallFlowOutputFactory.__deallocating_deinit()
{
  UnsupportedCallFlowOutputFactory.deinit();
  OUTLINED_FUNCTION_2();

  return swift_deallocClassInstance();
}

uint64_t specialized UnsupportedFaceTimeOutputProvider.init(unsupportedPhoneCall:sharedGlobals:startCallCats:startCallCATsSimple:phoneCallDisplayTextCATsSimple:unsupportedFlowCats:labelTemplates:)(char a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(a11 + 80) = &type metadata for LabelTemplatesProvider;
  *(void *)(a11 + 88) = &protocol witness table for LabelTemplatesProvider;
  uint64_t v18 = (void *)swift_allocObject();
  *(void *)(a11 + 56) = v18;
  _OWORD v18[2] = a7;
  v18[3] = a8;
  void v18[4] = a9;
  v18[5] = a10;
  *(unsigned char *)(a11 + 96) = a1;
  outlined init with take of AppSelectionSignalComponent(a2, a11 + 16);
  *(void *)(a11 + 120) = a4;
  *(void *)(a11 + 128) = a5;
  *(void *)(a11 + 104) = a3;
  *(void *)(a11 + 112) = a6;
  return a11;
}

uint64_t specialized UnsupportedCallFlowOutputFactory.init(unsupportedPhoneCall:app:sharedGlobals:intent:unsupportedFlowCats:searchCallHistoryCats:unsupportedFlowCatsSimple:responseGenerator:labelTemplating:appInfoBuilder:phoneCallDisplayTextCATsSimple:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v50 = a6;
  uint64_t v51 = a7;
  uint64_t v49 = a5;
  uint64_t v47 = a4;
  uint64_t v52 = a2;
  uint64_t v53 = a3;
  LODWORD(v42) = a1;
  uint64_t v48 = a11;
  uint64_t v45 = a9;
  uint64_t v46 = a18;
  uint64_t v44 = a15;
  uint64_t v19 = *(void *)(a15 - 8);
  __chkstk_darwin(a1);
  uint64_t v43 = (uint64_t)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for CATOption();
  __chkstk_darwin(v21 - 8);
  uint64_t v22 = type metadata accessor for DialogPhase();
  __chkstk_darwin(v22 - 8);
  v60[3] = a13;
  v60[4] = a16;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v60);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a13 - 8) + 32))(boxed_opaque_existential_1, a8, a13);
  uint64_t v58 = a14;
  uint64_t v59 = a17;
  uint64_t v24 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v57);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a14 - 8) + 32))(v24, a10, a14);
  static DialogPhase.completion.getter();
  OutputGenerationManifest.init(dialogPhase:_:)();
  *(unsigned char *)(a12 + 24) = v42;
  uint64_t v25 = v50;
  uint64_t v26 = v51;
  *(void *)(a12 + 32) = v49;
  *(void *)(a12 + 40) = v26;
  *(void *)(a12 + 16) = v25;
  outlined init with copy of SignalProviding((uint64_t)v60, a12 + 48);
  uint64_t v27 = v53;
  outlined init with copy of SignalProviding(v53, a12 + 88);
  *(void *)(a12 + 128) = v52;
  outlined init with copy of SignalProviding(v27, (uint64_t)&v54);
  type metadata accessor for PhoneCallDisplayTextCATs();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v42 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for PhoneCallCommonCATs();
  static CATOption.defaultMode.getter();
  uint64_t v28 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for AppInfoBuilder();
  uint64_t v29 = swift_allocObject();
  type metadata accessor for StartCallCATs();
  static CATOption.defaultMode.getter();
  uint64_t v30 = CATWrapper.__allocating_init(options:globals:)();
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallBaseCatTemplatingService<INIntent, INIntentResponse>);
  uint64_t v32 = swift_allocObject();
  uint64_t v33 = v19;
  uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
  uint64_t v35 = v43;
  uint64_t v36 = v45;
  uint64_t v37 = v44;
  v34(v43, v45, v44);
  specialized PhoneCallBaseCatTemplatingService.init(ducFamily:sharedGlobals:displayTextCats:phoneCallCommonCats:appInfoBuilder:labelTemplating:startCallCats:)(0xD000000000000010, 0x800000000048C8D0, (uint64_t)&v54, v42, v28, v29, v35, v30, v32, v37, v46, v41, v42, v43, v44, v45, v46, v47, v48,
    v49,
    v50,
    v51,
    v52);
  uint64_t v39 = v38;
  uint64_t v55 = v31;
  uint64_t v56 = &protocol witness table for PhoneCallBaseCatTemplatingService<A, B>;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  *(void *)&long long v54 = v39;
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v36, v37);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
  __swift_destroy_boxed_opaque_existential_1(v53);
  outlined init with take of AppSelectionSignalComponent(&v54, a12 + 136);
  *(void *)(a12 + 176) = v47;
  outlined init with take of AppSelectionSignalComponent(&v57, a12 + 192);
  *(void *)(a12 + 184) = v48;
  return a12;
}

uint64_t sub_144768()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t partial apply for closure #1 in UnsupportedCallFlowOutputFactory.makeUnsupportedOutput(completion:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  swift_task_alloc();
  OUTLINED_FUNCTION_31_2();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v10;
  v9[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return closure #1 in UnsupportedCallFlowOutputFactory.makeUnsupportedOutput(completion:)(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_144874()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t partial apply for closure #2 in UnsupportedCallFlowOutputFactory.makeUnsupportedOutput(completion:)(uint64_t a1)
{
  return closure #2 in UnsupportedCallFlowOutputFactory.makeUnsupportedOutput(completion:)(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t outlined init with copy of ButtonConfigurationModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ButtonConfigurationModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of ButtonConfigurationModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ButtonConfigurationModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ButtonConfigurationModel(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ButtonConfigurationModel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t ObjC metadata update function for UnsupportedCallFlowOutputFactory()
{
  return type metadata accessor for UnsupportedCallFlowOutputFactory();
}

uint64_t type metadata accessor for UnsupportedCallFlowOutputFactory()
{
  uint64_t result = type metadata singleton initialization cache for UnsupportedCallFlowOutputFactory;
  if (!type metadata singleton initialization cache for UnsupportedCallFlowOutputFactory) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for UnsupportedCallFlowOutputFactory()
{
  uint64_t result = type metadata accessor for OutputGenerationManifest();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unint64_t type metadata accessor for SAAppsLaunchApp()
{
  unint64_t result = lazy cache variable for type metadata for SAAppsLaunchApp;
  if (!lazy cache variable for type metadata for SAAppsLaunchApp)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SAAppsLaunchApp);
  }
  return result;
}

uint64_t sub_144B40()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_144B80()
{
  type metadata accessor for TemplatingResult();
  OUTLINED_FUNCTION_39_8();
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v5 + 16, v4);
}

uint64_t partial apply for closure #1 in closure #2 in UnsupportedCallFlowOutputFactory.makeUnsupportedOutput(completion:)(uint64_t a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = type metadata accessor for TemplatingResult();
  OUTLINED_FUNCTION_19_0(v5);
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v11 = (*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = *(void **)(v2 + v11);
  uint64_t v13 = *(void (**)(uint64_t *))(v2 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8));

  return closure #1 in closure #2 in UnsupportedCallFlowOutputFactory.makeUnsupportedOutput(completion:)(a1, v4, v2 + v10, v12, v13);
}

uint64_t _s16SiriDialogEngine15SpeakableStringVSgWOhTm_1(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_39_8();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t OUTLINED_FUNCTION_2_47()
{
  __swift_destroy_boxed_opaque_existential_1(v0);
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_3_44()
{
  __swift_destroy_boxed_opaque_existential_1(v0);
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_13_16(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[2].n128_u64[0] = v2;
  return specialized Array._endMutation()();
}

void *OUTLINED_FUNCTION_14_19()
{
  return __swift_project_boxed_opaque_existential_1((void *)(v0 + 48), *(void *)(v0 + 72));
}

uint64_t OUTLINED_FUNCTION_22_15()
{
  return v0 + 8;
}

char *OUTLINED_FUNCTION_28_11@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

char *OUTLINED_FUNCTION_29_12@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_36_10()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_37_8()
{
  return *(void *)(v0 - 200);
}

uint64_t OUTLINED_FUNCTION_44_8()
{
  return *(void *)(v0 + 536);
}

uint64_t OUTLINED_FUNCTION_49_7()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_52_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_53_3()
{
  return _s16SiriDialogEngine15SpeakableStringVSgWOhTm_1(v0, v1);
}

uint64_t OUTLINED_FUNCTION_54_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_55_5()
{
  return _s16SiriDialogEngine15SpeakableStringVSgWOhTm_1(v0, v1);
}

uint64_t OUTLINED_FUNCTION_56_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return a13;
}

uint64_t OUTLINED_FUNCTION_58_5()
{
  return v0;
}

uint64_t base witness table accessor for Flow in AnyValueFlow<A>()
{
  return swift_getWitnessTable();
}

void *NewCallConfirmationFlowProducer.__allocating_init(currentCall:newCallIntent:sharedGlobals:labelTemplatesProvider:ongoingCallCats:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  OUTLINED_FUNCTION_14_20();
  uint64_t v8 = (void *)swift_allocObject();
  uint64_t v9 = *(void *)(a5 + 24);
  __swift_mutable_project_boxed_opaque_existential_1(a5, v9);
  OUTLINED_FUNCTION_2_48();
  __chkstk_darwin(v10);
  uint64_t v12 = OUTLINED_FUNCTION_6_33(v11, v21);
  v13(v12);
  uint64_t v14 = OUTLINED_FUNCTION_9_36();
  uint64_t v19 = specialized NewCallConfirmationFlowProducer.init(currentCall:newCallIntent:sharedGlobals:labelTemplatesProvider:ongoingCallCats:)(v14, v15, v16, v17, v18, a6, v8, v9, v22);
  __swift_destroy_boxed_opaque_existential_1(a5);
  return v19;
}

void *NewCallConfirmationFlowProducer.init(currentCall:newCallIntent:sharedGlobals:labelTemplatesProvider:ongoingCallCats:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  OUTLINED_FUNCTION_14_20();
  uint64_t v10 = *(void *)(v9 + 24);
  __swift_mutable_project_boxed_opaque_existential_1(v9, v10);
  OUTLINED_FUNCTION_2_48();
  __chkstk_darwin(v11);
  uint64_t v13 = OUTLINED_FUNCTION_6_33(v12, v22);
  v14(v13);
  uint64_t v15 = OUTLINED_FUNCTION_9_36();
  uint64_t v20 = specialized NewCallConfirmationFlowProducer.init(currentCall:newCallIntent:sharedGlobals:labelTemplatesProvider:ongoingCallCats:)(v15, v16, v17, v18, v19, a6, v6, v10, v23);
  __swift_destroy_boxed_opaque_existential_1(a5);
  return v20;
}

uint64_t NewCallConfirmationFlowProducer.makeConfirmationFlow()()
{
  void (*v3)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v8;
  uint64_t v10[5];
  long long v11;
  uint64_t v12;
  uint64_t v13;

  outlined init with copy of SignalProviding((uint64_t)(v0 + 5), (uint64_t)&v11);
  type metadata accessor for PhoneCallYesNoConfirmationFlowStrategy();
  swift_allocObject();
  PhoneCallYesNoConfirmationFlowStrategy.init(outputProducer:sharedGlobals:)((uint64_t)&async function pointer to partial apply for implicit closure #2 in implicit closure #1 in NewCallConfirmationFlowProducer.makeConfirmationFlow(), (uint64_t)v0, &v11);
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[9];
  __swift_project_boxed_opaque_existential_1(v0 + 5, v1);
  uint64_t v3 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v2 + 16);
  swift_retain();
  v3(&v11, v1, v2);
  char v4 = v12;
  uint64_t v5 = v13;
  uint64_t v6 = __swift_project_boxed_opaque_existential_1(&v11, v12);
  v10[3] = v4;
  v10[4] = v5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v10);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(boxed_opaque_existential_1, v6, v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptForConfirmationFlowAsync<(), SimpleConfirmationResponseProvider>);
  swift_allocObject();
  lazy protocol witness table accessor for type PhoneCallYesNoConfirmationFlowStrategy and conformance PhoneCallYesNoConfirmationFlowStrategy(&lazy protocol witness table cache variable for type PhoneCallYesNoConfirmationFlowStrategy and conformance PhoneCallYesNoConfirmationFlowStrategy, (void (*)(uint64_t))type metadata accessor for PhoneCallYesNoConfirmationFlowStrategy);
  uint64_t v8 = PromptForConfirmationFlowAsync.init<A>(itemToConfirm:strategy:outputPublisher:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
  return v8;
}

uint64_t implicit closure #2 in implicit closure #1 in NewCallConfirmationFlowProducer.makeConfirmationFlow()()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return NewCallConfirmationFlowProducer.makePromptOutput()();
}

uint64_t NewCallConfirmationFlowProducer.makePromptOutput()()
{
  OUTLINED_FUNCTION_1_0();
  v1[317] = v0;
  v1[311] = v2;
  type metadata accessor for DialogPhase();
  v1[323] = OUTLINED_FUNCTION_35();
  uint64_t v3 = type metadata accessor for OutputGenerationManifest();
  v1[329] = v3;
  v1[335] = *(void *)(v3 - 8);
  v1[341] = OUTLINED_FUNCTION_35();
  v1[347] = type metadata accessor for CommonDirectAction();
  v1[353] = OUTLINED_FUNCTION_35();
  v1[359] = type metadata accessor for YesNoConfirmationModel();
  v1[360] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v4, v5, v6);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  __CFString *v6;
  unint64_t v7;
  uint64_t v8;
  __CFString *v9;
  __CFString *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t BackingType;
  __CFString *v17;
  unint64_t v18;
  uint64_t v19;
  __CFString *v20;
  __CFString *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  uint64_t v1 = v0[317];
  type metadata accessor for PhoneCallRecord.Builder(0);
  swift_allocObject();
  uint64_t v2 = PhoneCallRecord.Builder.init()();
  type metadata accessor for PhoneCallProvider.Builder(0);
  swift_allocObject();
  uint64_t v3 = PhoneCallProvider.Builder.init()();
  uint64_t v4 = *(void **)(v1 + 32);
  if (![v4 preferredCallProvider])
  {
    uint64_t v7 = 0xE700000000000000;
    uint64_t v8 = 0x4E574F4E4B4E55;
    goto LABEL_12;
  }
  uint64_t v5 = INPreferredCallProviderGetBackingType();
  switch(v5)
  {
    case 4:
      uint64_t v6 = @"THIRD_PARTY_PROVIDER";
      break;
    case 3:
      uint64_t v6 = @"FACETIME_PROVIDER";
      break;
    case 2:
      uint64_t v6 = @"TELEPHONY_PROVIDER";
      break;
    default:
      uint64_t v6 = +[NSString stringWithFormat:@"(unknown: %i)", v5];
      goto LABEL_11;
  }
  uint64_t v9 = v6;
LABEL_11:
  uint64_t v10 = v6;
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v11;

LABEL_12:
  uint64_t v12 = (*(uint64_t (**)(uint64_t, unint64_t, void, void))(*(void *)v3 + 200))(v8, v7, 0, 0);
  swift_release();
  uint64_t v13 = swift_bridgeObjectRelease();
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 240))(v13);
  swift_release();
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 976))(v14);
  swift_release();
  swift_release();
  if (![v4 callCapability])
  {
    uint64_t v18 = 0xE700000000000000;
    uint64_t v19 = 0x4E574F4E4B4E55;
    goto LABEL_21;
  }
  uint64_t BackingType = INCallCapabilityGetBackingType();
  if (BackingType == 2)
  {
    uint64_t v17 = @"VIDEO_CALL";
  }
  else
  {
    if (BackingType != 1)
    {
      uint64_t v17 = +[NSString stringWithFormat:@"(unknown: %i)", BackingType];
      goto LABEL_20;
    }
    uint64_t v17 = @"AUDIO_CALL";
  }
  uint64_t v20 = v17;
LABEL_20:
  uint64_t v21 = v17;
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v22;

LABEL_21:
  uint64_t v23 = v0[317];
  uint64_t v24 = (*(uint64_t (**)(uint64_t, unint64_t, void, void))(*(void *)v15 + 960))(v19, v18, 0, 0);
  swift_release();
  uint64_t v25 = swift_bridgeObjectRelease();
  uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 1176))(v25);
  v0[361] = v26;
  swift_release();
  uint64_t v27 = swift_allocObject();
  v0[362] = v27;
  *(void *)(v27 + 16) = v23;
  *(void *)(v27 + 24) = v26;
  swift_retain();
  swift_retain();
  swift_retain();
  type metadata accessor for CNContactStore(255, (unint64_t *)&lazy cache variable for type metadata for DialogExecutionResult);
  swift_asyncLet_begin();
  swift_asyncLet_begin();
  swift_asyncLet_begin();
  return _swift_asyncLet_get_throwing(v0 + 162, v0 + 301, NewCallConfirmationFlowProducer.makePromptOutput(), v0 + 272);
}

{
  uint64_t v0;
  uint64_t v1;

  *(void *)(v1 + 2904) = v0;
  if (v0) {
    return OUTLINED_FUNCTION_21_1((uint64_t)NewCallConfirmationFlowProducer.makePromptOutput());
  }
  else {
    return OUTLINED_FUNCTION_21_1((uint64_t)NewCallConfirmationFlowProducer.makePromptOutput());
  }
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v7;

  uint64_t v1 = v0[353];
  uint64_t v2 = (void *)v0[317];
  v0[364] = v0[301];
  v0[365] = v0[302];
  swift_storeEnumTagMultiPayload();
  uint64_t v4 = v2[8];
  uint64_t v3 = v2[9];
  __swift_project_boxed_opaque_existential_1(v2 + 5, v4);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  swift_bridgeObjectRetain();
  v5(v4, v3);
  v0[366] = CommonDirectAction.toSAIntentGroupRunSiriKitExecutor(deviceState:)(v0 + 247);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 247));
  _s27PhoneCallFlowDelegatePlugin18CommonDirectActionOWOhTm_1(v1, (uint64_t (*)(void))type metadata accessor for CommonDirectAction);
  return _swift_asyncLet_get_throwing(v0 + 2, v0 + 303, NewCallConfirmationFlowProducer.makePromptOutput(), v0 + 312);
}

{
  uint64_t v0;
  uint64_t v1;

  *(void *)(v1 + 2936) = v0;
  if (v0) {
    return OUTLINED_FUNCTION_21_1((uint64_t)NewCallConfirmationFlowProducer.makePromptOutput());
  }
  else {
    return OUTLINED_FUNCTION_21_1((uint64_t)NewCallConfirmationFlowProducer.makePromptOutput());
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  void *v8;
  id v9;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v11;
  uint64_t v12;
  long long v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;

  uint64_t v21 = *(void **)(v0 + 2928);
  uint64_t v19 = *(void *)(v0 + 2920);
  uint64_t v17 = *(void *)(v0 + 2880);
  uint64_t v18 = *(void *)(v0 + 2912);
  uint64_t v1 = *(void *)(v0 + 2872);
  uint64_t v2 = *(void *)(v0 + 2824);
  uint64_t v3 = *(void **)(v0 + 2536);
  uint64_t v23 = v3 + 5;
  uint64_t v20 = *(void *)(v0 + 2424);
  uint64_t v4 = *(void *)(v0 + 2432);
  swift_storeEnumTagMultiPayload();
  uint64_t v22 = v3;
  uint64_t v5 = v3[8];
  uint64_t v6 = v3[9];
  __swift_project_boxed_opaque_existential_1(v3 + 5, v5);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  swift_bridgeObjectRetain();
  v7(v5, v6);
  CommonDirectAction.toSAIntentGroupRunSiriKitExecutor(deviceState:)((void *)(v0 + 2056));
  __swift_destroy_boxed_opaque_existential_1(v0 + 2056);
  _s27PhoneCallFlowDelegatePlugin18CommonDirectActionOWOhTm_1(v2, (uint64_t (*)(void))type metadata accessor for CommonDirectAction);
  uint64_t v8 = (void *)(v17 + *(int *)(v1 + 32));
  *uint64_t v8 = 0xD000000000000011;
  v8[1] = 0x8000000000491230;
  *(void *)(v0 + 2392) = v18;
  *(void *)(v0 + 2400) = v19;
  Loggable.init(wrappedValue:)();
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupRunSiriKitExecutor);
  uint64_t v9 = v21;
  CodableAceObject.init(wrappedValue:)();
  *(void *)(v0 + 2376) = v20;
  *(void *)(v0 + 2384) = v4;
  Loggable.init(wrappedValue:)();
  CodableAceObject.init(wrappedValue:)();

  *(void *)(v0 + 2160) = v1;
  *(void *)(v0 + 2168) = lazy protocol witness table accessor for type PhoneCallYesNoConfirmationFlowStrategy and conformance PhoneCallYesNoConfirmationFlowStrategy(&lazy protocol witness table cache variable for type YesNoConfirmationModel and conformance YesNoConfirmationModel, (void (*)(uint64_t))type metadata accessor for YesNoConfirmationModel);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 2136));
  outlined init with copy of YesNoConfirmationModel(v17, (uint64_t)boxed_opaque_existential_1);
  static DialogPhase.confirmation.getter();
  *(void *)(swift_task_alloc() + 16) = v0 + 2136;
  OutputGenerationManifest.init(dialogPhase:_:)();
  swift_task_dealloc();
  OutputGenerationManifest.printSupportingDialogInDisplayModes.setter();
  __swift_destroy_boxed_opaque_existential_1(v0 + 2136);
  uint64_t v11 = v3[8];
  uint64_t v12 = v3[9];
  __swift_project_boxed_opaque_existential_1(v23, v22[8]);
  (*(void (**)(uint64_t, uint64_t))(v12 + 136))(v11, v12);
  uint64_t v13 = *(_OWORD *)(v0 + 2240);
  *(_OWORD *)(v0 + 2944) = v13;
  *(void *)(v0 + 2960) = __swift_project_boxed_opaque_existential_1((void *)(v0 + 2216), v13);
  *(void *)(v0 + 2320) = type metadata accessor for PhoneSnippetDataModels();
  *(void *)(v0 + 2328) = lazy protocol witness table accessor for type PhoneCallYesNoConfirmationFlowStrategy and conformance PhoneCallYesNoConfirmationFlowStrategy((unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels and conformance PhoneSnippetDataModels, (void (*)(uint64_t))type metadata accessor for PhoneSnippetDataModels);
  uint64_t v14 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 2296));
  outlined init with copy of YesNoConfirmationModel(v17, (uint64_t)v14);
  swift_storeEnumTagMultiPayload();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v15 = swift_allocObject();
  *(void *)(v0 + 2968) = v15;
  *(_OWORD *)(v15 + 16) = xmmword_46A030;
  return _swift_asyncLet_get_throwing(v0 + 656, v0 + 2440, NewCallConfirmationFlowProducer.makePromptOutput(), v0 + 2784);
}

{
  uint64_t v0;
  uint64_t v1;

  *(void *)(v1 + 2976) = v0;
  if (v0) {
    return OUTLINED_FUNCTION_21_1((uint64_t)NewCallConfirmationFlowProducer.makePromptOutput());
  }
  else {
    return OUTLINED_FUNCTION_21_1((uint64_t)NewCallConfirmationFlowProducer.makePromptOutput());
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 2296;
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_4_2();
  NSObject *v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v3);
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v6, v7, v8);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = v0[360];
  (*(void (**)(void, void))(v0[335] + 8))(v0[341], v0[329]);
  _s27PhoneCallFlowDelegatePlugin18CommonDirectActionOWOhTm_1(v1, (uint64_t (*)(void))type metadata accessor for YesNoConfirmationModel);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 277));
  OUTLINED_FUNCTION_20_2();
  return _swift_asyncLet_finish(v2);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)NewCallConfirmationFlowProducer.makePromptOutput());
}

{
  uint64_t v0;

  return _swift_asyncLet_finish(v0 + 1296);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)NewCallConfirmationFlowProducer.makePromptOutput());
}

{
  uint64_t v0;

  return _swift_asyncLet_finish(v0 + 656);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)NewCallConfirmationFlowProducer.makePromptOutput());
}

{
  uint64_t v0;

  return _swift_asyncLet_finish(v0 + 16);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)NewCallConfirmationFlowProducer.makePromptOutput());
}

{
  uint64_t v0;

  return _swift_asyncLet_finish(v0 + 1296);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)NewCallConfirmationFlowProducer.makePromptOutput());
}

{
  uint64_t v0;

  return _swift_asyncLet_finish(v0 + 656);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)NewCallConfirmationFlowProducer.makePromptOutput());
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_3_45();
  swift_release_n();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v0();
}

{
  uint64_t v0;
  uint64_t v2;

  swift_bridgeObjectRelease();
  return _swift_asyncLet_finish(v0 + 16);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)NewCallConfirmationFlowProducer.makePromptOutput());
}

{
  uint64_t v0;

  return _swift_asyncLet_finish(v0 + 1296);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)NewCallConfirmationFlowProducer.makePromptOutput());
}

{
  uint64_t v0;

  return _swift_asyncLet_finish(v0 + 656);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)NewCallConfirmationFlowProducer.makePromptOutput());
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_3_45();
  swift_release_n();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v0();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = v0[360];
  uint64_t v2 = v0[341];
  uint64_t v3 = v0[335];
  uint64_t v4 = v0[329];
  *(void *)(v0[371] + 16) = 0;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  _s27PhoneCallFlowDelegatePlugin18CommonDirectActionOWOhTm_1(v1, (uint64_t (*)(void))type metadata accessor for YesNoConfirmationModel);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 287));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 277));
  return _swift_asyncLet_finish(v0 + 2);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)NewCallConfirmationFlowProducer.makePromptOutput());
}

{
  uint64_t v0;

  return _swift_asyncLet_finish(v0 + 1296);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)NewCallConfirmationFlowProducer.makePromptOutput());
}

{
  uint64_t v0;

  return _swift_asyncLet_finish(v0 + 656);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)NewCallConfirmationFlowProducer.makePromptOutput());
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_3_45();
  swift_release_n();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v0();
}

uint64_t NewCallConfirmationFlowProducer.makePromptOutput()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = v10[371];
  uint64_t v12 = v10[369];
  uint64_t v13 = (void *)v10[305];
  *(void *)(v11 + 32) = v13;
  uint64_t v23 = v11;
  specialized Array._endMutation()();
  v10[373] = v23;
  uint64_t v14 = *(void *)(v12 + 8);
  id v15 = v13;
  uint64_t v18 = (void *)swift_task_alloc();
  v10[374] = v18;
  *uint64_t v18 = v10;
  v18[1] = NewCallConfirmationFlowProducer.makePromptOutput();
  uint64_t v19 = v10[368];
  uint64_t v20 = v10[341];
  uint64_t v21 = v10[311];
  return dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)(v21, v10 + 287, v23, v20, v19, v14, v16, v17, a9, a10);
}

void NewCallConfirmationFlowProducer.makePromptOutput()()
{
  OUTLINED_FUNCTION_18_3();
  swift_release();
  swift_release_n();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_2();
  __asm { BRAA            X1, X16 }
}

uint64_t implicit closure #1 in NewCallConfirmationFlowProducer.makePromptOutput()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(implicit closure #1 in NewCallConfirmationFlowProducer.makePromptOutput(), 0, 0);
}

uint64_t implicit closure #1 in NewCallConfirmationFlowProducer.makePromptOutput()()
{
  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = v0[4];
  uint64_t v2 = *(void **)(v0[3] + 120);
  swift_getObjectType();
  uint64_t v3 = SPHCall.toPhoneCallRecord()();
  v0[5] = v3;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(class metadata base offset for OngoingCallCATsSimple
                                                            + *v2
                                                            + 64)
                                                + **(int **)(class metadata base offset for OngoingCallCATsSimple
                                                           + *v2
                                                           + 64));
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *uint64_t v4 = v0;
  v4[1] = implicit closure #1 in NewCallConfirmationFlowProducer.makePromptOutput();
  return v6(v3, v1);
}

{
  uint64_t v0;

  **(void **)(v0 + 16) = *(void *)(v0 + 64);
  return OUTLINED_FUNCTION_5_36();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  swift_release();
  OUTLINED_FUNCTION_47_0();
  return v0();
}

uint64_t implicit closure #1 in NewCallConfirmationFlowProducer.makePromptOutput()(uint64_t a1)
{
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v2;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v8 = v7;
  *(void *)(v5 + 56) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_release();
    *(void *)(v5 + 64) = a1;
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t implicit closure #2 in NewCallConfirmationFlowProducer.makePromptOutput()(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = implicit closure #2 in NewCallConfirmationFlowProducer.makePromptOutput();
  return static LabelTemplates.yes()();
}

uint64_t implicit closure #2 in NewCallConfirmationFlowProducer.makePromptOutput()()
{
  OUTLINED_FUNCTION_18_3();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_0_1();
  uint64_t v7 = v6;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v10 = v9;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_20_2();
    __asm { BRAA            X1, X16 }
  }
  *(void *)(v7 + 32) = v3;
  *(void *)(v7 + 40) = v5;
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_20_2();
  return _swift_task_switch(v13, v14, v15);
}

{
  void *v0;
  uint64_t v1;
  void *v2;

  uint64_t v1 = v0[4];
  uint64_t v2 = (void *)v0[2];
  *uint64_t v2 = v0[5];
  v2[1] = v1;
  return OUTLINED_FUNCTION_5_36();
}

uint64_t implicit closure #3 in NewCallConfirmationFlowProducer.makePromptOutput()(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = implicit closure #3 in NewCallConfirmationFlowProducer.makePromptOutput();
  return static LabelTemplates.no()();
}

uint64_t implicit closure #3 in NewCallConfirmationFlowProducer.makePromptOutput()()
{
  OUTLINED_FUNCTION_18_3();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_0_1();
  uint64_t v7 = v6;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v10 = v9;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_20_2();
    __asm { BRAA            X1, X16 }
  }
  *(void *)(v7 + 32) = v3;
  *(void *)(v7 + 40) = v5;
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_20_2();
  return _swift_task_switch(v13, v14, v15);
}

uint64_t NewCallConfirmationFlowProducer.deinit()
{
  swift_unknownObjectRelease();

  __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  __swift_destroy_boxed_opaque_existential_1(v0 + 80);
  swift_release();
  return v0;
}

uint64_t NewCallConfirmationFlowProducer.__deallocating_deinit()
{
  NewCallConfirmationFlowProducer.deinit();

  return swift_deallocClassInstance();
}

void *specialized NewCallConfirmationFlowProducer.init(currentCall:newCallIntent:sharedGlobals:labelTemplatesProvider:ongoingCallCats:)(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9)
{
  a7[13] = a8;
  a7[14] = a9;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a7 + 10);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a8 - 8) + 32))(boxed_opaque_existential_1, a5, a8);
  a7[2] = a1;
  a7[3] = a2;
  a7[4] = a3;
  outlined init with take of AppSelectionSignalComponent(a4, (uint64_t)(a7 + 5));
  a7[15] = a6;
  return a7;
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in NewCallConfirmationFlowProducer.makeConfirmationFlow()()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return implicit closure #2 in implicit closure #1 in NewCallConfirmationFlowProducer.makeConfirmationFlow()();
}

uint64_t type metadata accessor for NewCallConfirmationFlowProducer()
{
  return self;
}

uint64_t sub_146F7C()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for implicit closure #1 in NewCallConfirmationFlowProducer.makePromptOutput()(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = UnsupportedFlowCATs.deleteVoicemail();
  return implicit closure #1 in NewCallConfirmationFlowProducer.makePromptOutput()(a1, v5, v4);
}

uint64_t lazy protocol witness table accessor for type PhoneCallYesNoConfirmationFlowStrategy and conformance PhoneCallYesNoConfirmationFlowStrategy(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s27PhoneCallFlowDelegatePlugin18CommonDirectActionOWOhTm_1(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t OUTLINED_FUNCTION_3_45()
{
  return swift_release();
}

char *OUTLINED_FUNCTION_6_33@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_9_36()
{
  return v0;
}

uint64_t SiriKitFlowFactoryProtocol.makeAuthenticationGuardFlow()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnlockDevicePolicy();
  OUTLINED_FUNCTION_1();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_4();
  uint64_t v10 = v9 - v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CommonFlowGuard>);
  type metadata accessor for CommonFlowGuard();
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_467710;
  static UnlockDevicePolicy.default.getter();
  static CommonFlowGuard.ensuringDeviceIsAuthenticated(using:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, v4);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 104))(v11, a1, a2);
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t SiriKitFlowFactoryProtocol.makeDelegateBasedRCHFlow<A>(delegate:app:intent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v22 = a4;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for RCHChildFlowProducers();
  uint64_t v14 = type metadata accessor for Optional();
  OUTLINED_FUNCTION_1();
  uint64_t v16 = v15;
  OUTLINED_FUNCTION_9_1();
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v22 - v18;
  __swift_storeEnumTagSinglePayload((uint64_t)&v22 - v18, 1, 1, v13);
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 40))(a1, a2, a3, v19, a5, a7, v22, a6);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v14);
  return v20;
}

uint64_t SiriKitFlowFactory.makeRCHFlow<A>(strategy:childFlowFactory:app:intent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v21[1] = a4;
  OUTLINED_FUNCTION_1();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_4();
  uint64_t v12 = v11 - v10;
  uint64_t v13 = type metadata accessor for RCHFlowFactory();
  OUTLINED_FUNCTION_1();
  uint64_t v15 = v14;
  OUTLINED_FUNCTION_9_1();
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)v21 - v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v12, a1, a5);
  swift_retain();
  RCHFlowFactory.init(strategy:childFlowFactory:)();
  uint64_t v19 = RCHFlowFactory.makeRCHFlowWithResolvedApp(_:intent:hasUserBeenAuthorizedForApp:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v13);
  return v19;
}

uint64_t SiriKitFlowFactory.makeConfirmIntentFlowProducer<A>(strategy:)()
{
  return static RCHChildFlowFactoryHelper.makeConfirmIntentFlowProducer<A>(strategy:)();
}

uint64_t *SiriKitFlowFactory.makeContinueInAppAutoPunchOutFlow<A>(strategy:factory:rchRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void (*)(uint64_t, uint64_t))static RCHChildFlowFactoryHelper.makeContinueInAppFlowWithAutomaticPunchOutProducer<A>(strategy:)();
  v5(a2, a3);
  OUTLINED_FUNCTION_4_44();
  uint64_t v7 = a3;
  type metadata accessor for AnyFlow();
  Flow.eraseToAnyFlow()();
  OUTLINED_FUNCTION_7_37();
  return &v7;
}

uint64_t SiriKitFlowFactory.makeDelegateBasedRCHFlow<A>(delegate:app:intent:producers:)()
{
  RCHFlowDelegate.makeRCHFlow(app:intent:producers:)();
  type metadata accessor for RCHDelegateToRCHFlowStrategyAdapter();
  swift_getWitnessTable();
  type metadata accessor for RCHFlow();
  swift_getWitnessTable();
  uint64_t v0 = Flow.eraseToAnyValueFlow()();
  swift_release();
  return v0;
}

uint64_t SiriKitFlowFactory.makeDelegateBasedRCHFlow<A>(delegate:input:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v0 = type metadata accessor for RCHChildFlowProducers();
  uint64_t v1 = type metadata accessor for Optional();
  OUTLINED_FUNCTION_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_9_1();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v10 - v5;
  __swift_storeEnumTagSinglePayload((uint64_t)v10 - v5, 1, 1, v0);
  uint64_t v7 = RCHFlowDelegate.makeRCHFlow(producers:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v1);
  v10[1] = v7;
  type metadata accessor for RCHDelegateToRCHFlowStrategyAdapter();
  swift_getWitnessTable();
  type metadata accessor for RCHFlow();
  swift_getWitnessTable();
  uint64_t v8 = Flow.eraseToAnyValueFlow()();
  swift_release();
  dispatch thunk of AnyValueFlow.on(input:)();
  return v8;
}

uint64_t SiriKitFlowFactory.makeDelegateBasedRCHFlowProducers<A>(delegate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INIntent);
  uint64_t v7 = type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INIntentResponse);

  return static RCHChildFlowProducers.withRCHFlowDelegate<A>(delegate:)(a1, v6, v7, a2, a3);
}

uint64_t SiriKitFlowFactory.makeVoiceCommandRCHFlow<A>(strategy:childFlowFactory:app:intent:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *a2;
  v23[1] = a4;
  v23[2] = v7;
  OUTLINED_FUNCTION_1();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_4();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = type metadata accessor for RCHFlowFactory();
  OUTLINED_FUNCTION_1();
  uint64_t v16 = v15;
  OUTLINED_FUNCTION_9_1();
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)v23 - v18;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v13, a1, a5);
  swift_retain();
  RCHFlowFactory.init(strategy:childFlowFactory:)();
  uint64_t v20 = RCHFlowFactory.makeRCHFlowWithResolvedApp(_:intent:)();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v14);
  v23[3] = v20;
  type metadata accessor for RCHFlowResult();
  uint64_t v21 = type metadata accessor for AnyValueFlow();
  swift_getWitnessTable();
  VoiceCommandsParityFlow.eraseToAnyVoiceCommandsParityFlow()();
  OUTLINED_FUNCTION_4_44();
  return v21;
}

uint64_t SiriKitFlowFactory.makeAppResolutionFlow<A, B>(resolving:strategy:protectedAppStrategy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v14[3] = a4;
  void v14[4] = a6;
  __swift_allocate_boxed_opaque_existential_1(v14);
  OUTLINED_FUNCTION_10();
  (*(void (**)(void))(v7 + 16))();
  uint64_t v8 = type metadata accessor for DefaultUnlockDeviceFlowStrategyAsync();
  uint64_t v9 = swift_allocObject();
  v13[3] = v8;
  v13[4] = lazy protocol witness table accessor for type DefaultUnlockDeviceFlowStrategyAsync and conformance DefaultUnlockDeviceFlowStrategyAsync();
  v13[0] = v9;
  outlined init with copy of SignalProviding(a3, (uint64_t)v12);
  uint64_t v10 = static AppFlowFactory.makeOnDeviceAppResolutionFlow<A>(resolving:appResolutionStrategy:unlockDeviceStrategy:protectedAppCheckStrategy:)();
  _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0((uint64_t)v12, &demangling cache variable for type metadata for ProtectedAppCheckStrategy?);
  _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0((uint64_t)v13, &demangling cache variable for type metadata for UnlockDeviceFlowStrategyAsync?);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  return v10;
}

unint64_t lazy protocol witness table accessor for type DefaultUnlockDeviceFlowStrategyAsync and conformance DefaultUnlockDeviceFlowStrategyAsync()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultUnlockDeviceFlowStrategyAsync and conformance DefaultUnlockDeviceFlowStrategyAsync;
  if (!lazy protocol witness table cache variable for type DefaultUnlockDeviceFlowStrategyAsync and conformance DefaultUnlockDeviceFlowStrategyAsync)
  {
    type metadata accessor for DefaultUnlockDeviceFlowStrategyAsync();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultUnlockDeviceFlowStrategyAsync and conformance DefaultUnlockDeviceFlowStrategyAsync);
  }
  return result;
}

uint64_t SiriKitFlowFactory.makePersonalDomainActivityNotificationFlow<A>(strategy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[3] = a2;
  void v6[4] = a3;
  __swift_allocate_boxed_opaque_existential_1(v6);
  OUTLINED_FUNCTION_10();
  (*(void (**)(void))(v3 + 16))();
  uint64_t v4 = type metadata accessor for PostPersonalDomainActivityNotificationFlow();
  swift_allocObject();
  v6[0] = PostPersonalDomainActivityNotificationFlow.init(strategy:)();
  Flow.eraseToAnyFlow()();
  OUTLINED_FUNCTION_4_44();
  return v4;
}

uint64_t SiriKitFlowFactory.makeSharingPolicyFlow()()
{
  uint64_t v0 = type metadata accessor for SharingPolicyCheckFlow();
  SharingPolicyCheckFlow.__allocating_init()();
  Flow.eraseToAnyValueFlow()();
  OUTLINED_FUNCTION_4_44();
  return v0;
}

void *SiriKitFlowFactory.makeExecuteOnRemoteFlow(inputToExecute:device:sharedGlobals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ExecuteOnRemoteDeviceSpecification();
  OUTLINED_FUNCTION_1();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_4();
  uint64_t v10 = v9 - v8;
  type metadata accessor for Input();
  OUTLINED_FUNCTION_1();
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_4();
  (*(void (**)(uint64_t, uint64_t))(v14 + 16))(v13 - v12, a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v10, a2, v4);
  OUTLINED_FUNCTION_3_46();
  uint64_t v15 = OUTLINED_FUNCTION_2_2();
  v16(v15);
  uint64_t v17 = v28;
  uint64_t v18 = v29;
  __swift_project_boxed_opaque_existential_1(v27, v28);
  void v26[3] = v17;
  v26[4] = v18;
  __swift_allocate_boxed_opaque_existential_1(v26);
  OUTLINED_FUNCTION_10();
  (*(void (**)(void))(v19 + 16))();
  OUTLINED_FUNCTION_3_46();
  uint64_t v20 = OUTLINED_FUNCTION_2_2();
  v21(v20);
  OUTLINED_FUNCTION_3_46();
  uint64_t v22 = OUTLINED_FUNCTION_2_2();
  v23(v22);
  type metadata accessor for ExecuteOnRemoteFlow();
  swift_allocObject();
  uint64_t v24 = ExecuteOnRemoteFlow.init(inputToExecute:device:outputPublisher:aceService:deviceState:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  v27[0] = v24;
  Flow.eraseToAnyValueFlow()();
  OUTLINED_FUNCTION_7_37();
  return v27;
}

uint64_t *SiriKitFlowFactory.makeGuardFlow(withGuards:)()
{
  uint64_t v1 = static CommonGuardFlowUtils.makeGuardFlow(withGuards:)();
  type metadata accessor for GuardFlow();
  Flow.eraseToAnyValueFlow()();
  OUTLINED_FUNCTION_7_37();
  return &v1;
}

uint64_t SiriKitFlowFactory.makeLocationAccessGuardFlow()()
{
  uint64_t v0 = type metadata accessor for SiriLocationAccessGuardFlow();
  SiriLocationAccessGuardFlow.__allocating_init(needsPreciseLocation:)();
  Flow.eraseToAnyValueFlow()();
  OUTLINED_FUNCTION_4_44();
  return v0;
}

uint64_t *SiriKitFlowFactory.makeCompositionResolutionFlow(from:to:expectMultipleResolutionResults:nlContextUpdate:targetedRequest:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin(v5 - 8);
  OUTLINED_FUNCTION_4();
  outlined init with copy of NLContextUpdate?(a4, v7 - v6);
  type metadata accessor for CompositionResolutionFlow();
  swift_allocObject();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v9 = CompositionResolutionFlow.init(from:to:expectMultipleResolutionResults:nlContextUpdate:targetedRequest:)();
  Flow.eraseToAnyValueFlow()();
  OUTLINED_FUNCTION_7_37();
  return &v9;
}

uint64_t outlined init with copy of NLContextUpdate?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t protocol witness for SiriKitFlowFactoryProtocol.makeRCHFlow<A>(strategy:childFlowFactory:app:intent:) in conformance SiriKitFlowFactory()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))();
}

uint64_t protocol witness for SiriKitFlowFactoryProtocol.makeConfirmIntentFlowProducer<A>(strategy:) in conformance SiriKitFlowFactory()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))();
}

uint64_t protocol witness for SiriKitFlowFactoryProtocol.makeHandleIntentFlowProducer<A>(strategy:) in conformance SiriKitFlowFactory()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t protocol witness for SiriKitFlowFactoryProtocol.makeContinueInAppAutoPunchOutFlow<A>(strategy:factory:rchRecord:) in conformance SiriKitFlowFactory()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))();
}

uint64_t protocol witness for SiriKitFlowFactoryProtocol.makeDelegateBasedRCHFlow<A>(delegate:app:intent:producers:) in conformance SiriKitFlowFactory()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t protocol witness for SiriKitFlowFactoryProtocol.makeDelegateBasedRCHFlow<A>(delegate:input:) in conformance SiriKitFlowFactory()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t protocol witness for SiriKitFlowFactoryProtocol.makeDelegateBasedRCHFlowProducers<A>(delegate:) in conformance SiriKitFlowFactory()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))();
}

uint64_t protocol witness for SiriKitFlowFactoryProtocol.makeVoiceCommandRCHFlow<A>(strategy:childFlowFactory:app:intent:) in conformance SiriKitFlowFactory()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))();
}

uint64_t protocol witness for SiriKitFlowFactoryProtocol.makeAppResolutionFlow<A, B>(resolving:strategy:protectedAppStrategy:) in conformance SiriKitFlowFactory()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))();
}

uint64_t protocol witness for SiriKitFlowFactoryProtocol.makePersonalDomainActivityNotificationFlow<A>(strategy:) in conformance SiriKitFlowFactory()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

uint64_t protocol witness for SiriKitFlowFactoryProtocol.makeSharingPolicyFlow() in conformance SiriKitFlowFactory()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 160))();
}

uint64_t protocol witness for SiriKitFlowFactoryProtocol.makeExecuteOnRemoteFlow(inputToExecute:device:sharedGlobals:) in conformance SiriKitFlowFactory()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 168))();
}

uint64_t protocol witness for SiriKitFlowFactoryProtocol.makeGuardFlow(withGuards:) in conformance SiriKitFlowFactory()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 176))();
}

uint64_t protocol witness for SiriKitFlowFactoryProtocol.makeLocationAccessGuardFlow() in conformance SiriKitFlowFactory()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 184))();
}

uint64_t protocol witness for SiriKitFlowFactoryProtocol.makeCompositionResolutionFlow(from:to:expectMultipleResolutionResults:nlContextUpdate:targetedRequest:) in conformance SiriKitFlowFactory()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 192))();
}

void *OUTLINED_FUNCTION_3_46()
{
  return __swift_project_boxed_opaque_existential_1(v0, v0[3]);
}

uint64_t OUTLINED_FUNCTION_4_44()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_7_37()
{
  return swift_release();
}

uint64_t specialized PhoneCallNLContextProvider.init(deviceState:assistantProperties:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of SignalProviding(a2, (uint64_t)v2 + *(void *)(class metadata base offset for PhoneCallNLContextProvider + *v2 + 16));
  outlined init with copy of SignalProviding(a1, (uint64_t)v2 + *(void *)(class metadata base offset for PhoneCallNLContextProvider + *v2 + 24));
  uint64_t v5 = DefaultNLContextProvider.init()();
  __swift_destroy_boxed_opaque_existential_1(a2);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v5;
}

uint64_t specialized PhoneCallNLIntent.hasCallConfirmation(_:)(char a1)
{
  if (one-time initialization token for confirmation != -1) {
    swift_once();
  }
  type metadata accessor for PhoneCallNLv3Intent(0);
  lazy protocol witness table accessor for type StartVideoCallRCHFlowDelegate and conformance StartVideoCallRCHFlowDelegate(&lazy protocol witness table cache variable for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent, (void (*)(uint64_t))type metadata accessor for PhoneCallNLv3Intent);
  IntentNodeTraversable.value<A>(forNode:)();
  if (v9 == 5)
  {
    char v2 = 0;
  }
  else
  {
    uint64_t v3 = PhoneCallConfirmation.rawValue.getter(v9);
    uint64_t v5 = v4;
    if (v3 == PhoneCallConfirmation.rawValue.getter(a1) && v5 == v6) {
      char v2 = 1;
    }
    else {
      char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v2 & 1;
}

uint64_t StartVideoCallRCHFlowDelegate.__allocating_init(sharedGlobals:appResolved:biomeEventSender:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_allocObject();
  __swift_mutable_project_boxed_opaque_existential_1(a3, *(void *)(a3 + 24));
  OUTLINED_FUNCTION_1();
  __chkstk_darwin(v4);
  uint64_t v6 = OUTLINED_FUNCTION_7_38(v5, v10);
  v7(v6);
  uint64_t v8 = OUTLINED_FUNCTION_18_18();
  __swift_destroy_boxed_opaque_existential_1(a3);
  return v8;
}

uint64_t StartVideoCallRCHFlowDelegate.sharedGlobals.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + direct field offset for StartVideoCallRCHFlowDelegate.sharedGlobals, a1);
}

uint64_t StartVideoCallRCHFlowDelegate.init(sharedGlobals:appResolved:biomeEventSender:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_mutable_project_boxed_opaque_existential_1(a3, *(void *)(a3 + 24));
  OUTLINED_FUNCTION_1();
  __chkstk_darwin(v4);
  uint64_t v6 = OUTLINED_FUNCTION_7_38(v5, v10);
  v7(v6);
  uint64_t v8 = OUTLINED_FUNCTION_18_18();
  __swift_destroy_boxed_opaque_existential_1(a3);
  return v8;
}

uint64_t StartVideoCallRCHFlowDelegate.makeDialogTemplating()()
{
  uint64_t v1 = type metadata accessor for CATOption();
  uint64_t v2 = OUTLINED_FUNCTION_11_0(v1);
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_4();
  outlined init with copy of SignalProviding(v0 + direct field offset for StartVideoCallRCHFlowDelegate.sharedGlobals, (uint64_t)v9);
  type metadata accessor for StartCallCATs();
  static CATOption.defaultMode.getter();
  uint64_t v3 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for PhoneCallDisplayTextCATs();
  static CATOption.defaultMode.getter();
  uint64_t v4 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for PhoneCallCommonCATs();
  static CATOption.defaultMode.getter();
  uint64_t v5 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for AppInfoBuilder();
  uint64_t v6 = swift_allocObject();
  type metadata accessor for StartVideoCallTemplatingService();
  uint64_t v7 = (void *)OUTLINED_FUNCTION_21_0();
  return specialized StartVideoCallTemplatingService.init(sharedGlobals:catFamily:displayTextCats:phoneCallCommonCats:appInfoBuilder:)((uint64_t)v9, v3, v4, v5, v6, v7);
}

uint64_t StartVideoCallRCHFlowDelegate.makeIntentFromParse(parse:previousIntent:)()
{
  uint64_t v1 = v0;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.siriPhone);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)OUTLINED_FUNCTION_7_2();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "#StartVideoCallRCHFlowDelegate makeIntentFromParse", v5, 2u);
    OUTLINED_FUNCTION_6();
  }

  outlined init with copy of SignalProviding(v1 + direct field offset for StartVideoCallRCHFlowDelegate.sharedGlobals, (uint64_t)v11);
  uint64_t v6 = *(void *)(v1 + direct field offset for StartVideoCallRCHFlowDelegate.appResolved);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentFromParseFlowStrategyHelper<INStartVideoCallIntent>);
  uint64_t inited = swift_initStackObject();
  outlined init with take of AppSelectionSignalComponent(v11, inited + 24);
  *(void *)(inited + 16) = v6;
  swift_retain();
  specialized IntentFromParseFlowStrategyHelper.makeIntentFromParse(parse:previousIntent:)();
  uint64_t v9 = v8;
  swift_setDeallocating();
  specialized IntentFromParseFlowStrategyHelper.__deallocating_deinit();
  return v9;
}

void StartVideoCallRCHFlowDelegate.makeConfirmationStateFromParse(parse:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v3 = v2;
  uint64_t v53 = v4;
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_1();
  uint64_t v51 = v5;
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_3_1();
  uint64_t v6 = type metadata accessor for PhoneCallNLv3Intent(0);
  uint64_t v7 = OUTLINED_FUNCTION_11_0(v6);
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_4();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = type metadata accessor for NLIntent();
  OUTLINED_FUNCTION_1();
  uint64_t v13 = v12;
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_46_0();
  uint64_t v17 = v15 - v16;
  __chkstk_darwin(v18);
  OUTLINED_FUNCTION_29_13();
  uint64_t v19 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_1();
  uint64_t v21 = v20;
  __chkstk_darwin(v22);
  OUTLINED_FUNCTION_4();
  uint64_t v25 = v24 - v23;
  uint64_t v52 = v3;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v24 - v23, v3, v19);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v21 + 88))(v25, v19) != enum case for Parse.NLv3IntentOnly(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v25, v19);
    goto LABEL_8;
  }
  (*(void (**)(uint64_t, uint64_t))(v21 + 96))(v25, v19);
  OUTLINED_FUNCTION_15_10();
  v26();
  uint64_t v27 = *(void *)(v0 + direct field offset for StartVideoCallRCHFlowDelegate.appResolved);
  if (v27)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v17, v1, v11);
    swift_retain();
    PhoneCallNLv3Intent.init(intent:)(v17, v10);
    uint64_t v28 = *(void *)(v0 + direct field offset for StartVideoCallRCHFlowDelegate.sharedGlobals + 24);
    uint64_t v29 = *(void *)(v0 + direct field offset for StartVideoCallRCHFlowDelegate.sharedGlobals + 32);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + direct field offset for StartVideoCallRCHFlowDelegate.sharedGlobals), v28);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v29 + 80))(v54, v28, v29);
    swift_retain();
    uint64_t v30 = (void *)specialized SKTransformer.convertToSKIntent<A>(phoneCallNLIntent:rchFlowContext:)(v10, v27, 0, 0, (uint64_t)v54);
    swift_release();
    outlined destroy of SKTransformer((uint64_t)v54);
    if (v30)
    {
      if (specialized PhoneCallNLIntent.hasCallConfirmation(_:)(1))
      {
        swift_release();

        outlined destroy of PhoneCallNLv3Intent(v10, (void (*)(void))type metadata accessor for PhoneCallNLv3Intent);
        uint64_t v31 = OUTLINED_FUNCTION_11_27();
        v32(v31);
        uint64_t v33 = (unsigned int *)&enum case for SiriKitConfirmationState.rejected(_:);
      }
      else
      {
        if ((specialized PhoneCallNLIntent.hasCallConfirmation(_:)(0) & 1) == 0)
        {
          char v39 = specialized PhoneCallNLIntent.hasCallConfirmation(_:)(2);
          swift_release();

          outlined destroy of PhoneCallNLv3Intent(v10, (void (*)(void))type metadata accessor for PhoneCallNLv3Intent);
          uint64_t v40 = OUTLINED_FUNCTION_11_27();
          v41(v40);
          type metadata accessor for SiriKitConfirmationState();
          OUTLINED_FUNCTION_15();
          if (v39) {
            uint64_t v43 = (unsigned int *)&enum case for SiriKitConfirmationState.cancelled(_:);
          }
          else {
            uint64_t v43 = (unsigned int *)&enum case for SiriKitConfirmationState.unset(_:);
          }
          (*(void (**)(uint64_t, void))(v42 + 104))(v53, *v43);
          goto LABEL_16;
        }
        swift_release();

        outlined destroy of PhoneCallNLv3Intent(v10, (void (*)(void))type metadata accessor for PhoneCallNLv3Intent);
        uint64_t v35 = OUTLINED_FUNCTION_11_27();
        v36(v35);
        uint64_t v33 = (unsigned int *)&enum case for SiriKitConfirmationState.confirmed(_:);
      }
      uint64_t v37 = *v33;
      type metadata accessor for SiriKitConfirmationState();
      OUTLINED_FUNCTION_15();
      (*(void (**)(uint64_t, uint64_t))(v38 + 104))(v53, v37);
LABEL_16:
      OUTLINED_FUNCTION_26_1();
      return;
    }
    swift_release();
    outlined destroy of PhoneCallNLv3Intent(v10, (void (*)(void))type metadata accessor for PhoneCallNLv3Intent);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v1, v11);
LABEL_8:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BaseRCHFlowDelegate<INStartVideoCallIntent, INStartVideoCallIntentResponse>);
    uint64_t v34 = (void (*)(uint64_t))method lookup function for BaseRCHFlowDelegate();
    v34(v52);
    goto LABEL_16;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v51, (uint64_t)static Logger.siriPhone);
  OUTLINED_FUNCTION_23_14();
  v44();
  uint64_t v45 = (void *)Logger.logObject.getter();
  os_log_type_t v46 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_1_34(v46))
  {
    OUTLINED_FUNCTION_47();
    v54[0] = OUTLINED_FUNCTION_14_0();
    OUTLINED_FUNCTION_19_18(4.8149e-34);
    v54[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000044, v47, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_9_27(&dword_0, v49, v50, "%s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }

  static SiriKitLifecycle._logCrashToEventBus(_:)();
  OUTLINED_FUNCTION_77();
  OUTLINED_FUNCTION_13_17();
  __break(1u);
}

uint64_t StartVideoCallRCHFlowDelegate.makeNLContextProvider()()
{
  uint64_t v1 = (void *)(v0 + direct field offset for StartVideoCallRCHFlowDelegate.sharedGlobals);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + direct field offset for StartVideoCallRCHFlowDelegate.sharedGlobals), *(void *)(v0 + direct field offset for StartVideoCallRCHFlowDelegate.sharedGlobals + 24));
  uint64_t v2 = OUTLINED_FUNCTION_27_10();
  v3(v2);
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  uint64_t v4 = OUTLINED_FUNCTION_26_14();
  v5(v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallNLContextProvider<INStartVideoCallIntent, INStartVideoCallIntentResponse>);
  OUTLINED_FUNCTION_21_0();
  return specialized PhoneCallNLContextProvider.init(deviceState:assistantProperties:)((uint64_t)v8, (uint64_t)&v7);
}

void StartVideoCallRCHFlowDelegate.makeLaunchAppCommandViewBehavior(app:intent:intentResolutionResult:intentResponse:executionStep:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for RCHExecutionStep();
  OUTLINED_FUNCTION_1();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_4();
  uint64_t v11 = v10 - v9;
  (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v10 - v9, enum case for RCHExecutionStep.handle(_:), v5);
  char v12 = static RCHExecutionStep.== infix(_:_:)();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v11, v5);
  if ((v12 & 1) != 0 && v2 && [v2 code] == (char *)&dword_0 + 2)
  {
    uint64_t v13 = *(void *)(v0 + direct field offset for StartVideoCallRCHFlowDelegate.biomeEventSender + 24);
    uint64_t v14 = *(void *)(v0 + direct field offset for StartVideoCallRCHFlowDelegate.biomeEventSender + 32);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + direct field offset for StartVideoCallRCHFlowDelegate.biomeEventSender), v13);
    uint64_t v15 = *(void *)(v0 + direct field offset for StartVideoCallRCHFlowDelegate.sharedGlobals + 24);
    uint64_t v16 = *(void *)(v0 + direct field offset for StartVideoCallRCHFlowDelegate.sharedGlobals + 32);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + direct field offset for StartVideoCallRCHFlowDelegate.sharedGlobals), v15);
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 112))(v15, v16);
    BiomeEventSending.logEventForVoiceTriggerOnHeadset(currentRequest:)(v17, v13, v14);
    swift_release();
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupLaunchAppWithIntent);
    *(void *)uint64_t v4 = static SAIntentGroupLaunchAppWithIntent.launchAppWithIntent(app:intent:intentResponse:)();
    *(_WORD *)(v4 + 8) = 256;
  }
  type metadata accessor for LaunchAppBehavior();
  OUTLINED_FUNCTION_15();
  uint64_t v18 = OUTLINED_FUNCTION_7_0();
  v19(v18);
  OUTLINED_FUNCTION_26_1();
}

uint64_t StartVideoCallRCHFlowDelegate.makeUnsupportedValueBehavior(app:intent:parameterName:intentResolutionResult:)()
{
  type metadata accessor for UnsupportedValueBehavior();
  OUTLINED_FUNCTION_15();
  uint64_t v0 = OUTLINED_FUNCTION_7_0();

  return v1(v0);
}

uint64_t StartVideoCallRCHFlowDelegate.makeAceViewProvider()()
{
  uint64_t v1 = dispatch thunk of BaseRCHFlowDelegate.makeDialogTemplating()();
  outlined init with copy of SignalProviding(v0 + direct field offset for StartVideoCallRCHFlowDelegate.sharedGlobals, (uint64_t)v3);
  type metadata accessor for StartVideoCallAceViewProvider();
  OUTLINED_FUNCTION_21_0();
  return StartVideoCallAceViewProvider.init(templatingService:sharedGlobals:)(v1, (uint64_t)v3);
}

uint64_t StartVideoCallRCHFlowDelegate.makeDisambiguationList(app:intent:parameterName:intentResolutionResult:_:)(int a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void (*a6)(void), uint64_t a7)
{
  uint64_t v14 = dispatch thunk of BaseRCHFlowDelegate.makeDialogTemplating()();
  specialized CallingIntentRCHFlowDelegate.buildDisambiguationList(app:intent:parameterName:intentResolutionResult:templatingService:_:)(a1, a2, a3, a4, a5, v14, a6, a7, (uint64_t (*)(uint64_t))outlined bridged method (pb) of @objc INStartVideoCallIntent.contacts.getter, &demangling cache variable for type metadata for PhoneCallBaseCatTemplatingService<INStartVideoCallIntent, INStartVideoCallIntentResponse>, &direct field offset for StartVideoCallRCHFlowDelegate.sharedGlobals);

  return swift_release();
}

uint64_t specialized CallingIntentRCHFlowDelegate.buildDisambiguationList(app:intent:parameterName:intentResolutionResult:templatingService:_:)(int a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, void (*a7)(void), uint64_t a8)
{
  return specialized CallingIntentRCHFlowDelegate.buildDisambiguationList(app:intent:parameterName:intentResolutionResult:templatingService:_:)(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(uint64_t))outlined bridged method (pb) of @objc INStartVideoCallIntent.contacts.getter, &demangling cache variable for type metadata for PhoneCallBaseCatTemplatingService<INStartAudioCallIntent, INStartAudioCallIntentResponse>, &direct field offset for StartAudioCallRCHFlowDelegate.sharedGlobals);
}

{
  return specialized CallingIntentRCHFlowDelegate.buildDisambiguationList(app:intent:parameterName:intentResolutionResult:templatingService:_:)(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(uint64_t))outlined bridged method (pb) of @objc INStartCallIntent.contacts.getter, &demangling cache variable for type metadata for PhoneCallBaseCatTemplatingService<INStartCallIntent, INStartCallIntentResponse>, &direct field offset for StartCallRCHFlowDelegate.sharedGlobals);
}

uint64_t specialized CallingIntentRCHFlowDelegate.buildDisambiguationList(app:intent:parameterName:intentResolutionResult:templatingService:_:)(int a1, uint64_t a2, uint64_t a3, void *a4, id a5, uint64_t a6, void (*a7)(void), uint64_t a8, uint64_t (*a9)(uint64_t), uint64_t *a10, void *a11)
{
  id v16 = [a5 disambiguationItems];
  uint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v18 = *(void *)(v17 + 16);
  swift_bridgeObjectRelease();
  uint64_t v19 = &selRef_alternatives;
  if (v18) {
    uint64_t v19 = &selRef_disambiguationItems;
  }
  id v20 = [a5 *v19];
  uint64_t v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_bridgeObjectRetain();
  v22._uint64_t countAndFlagsBits = a3;
  v22._object = a4;
  if ((PhoneCallSlotNames.init(rawValue:)(v22).value & 0xFE) == 4)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.siriPhone);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)OUTLINED_FUNCTION_7_2();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl(&dword_0, v24, v25, "#CallingIntentRCHFlowDelegate Building contacts disambiguation list", v26, 2u);
      OUTLINED_FUNCTION_6();
    }

    uint64_t v27 = specialized _arrayConditionalCast<A, B>(_:)(v21);
    swift_bridgeObjectRelease();
    if (v27) {
      uint64_t v28 = v27;
    }
    else {
      uint64_t v28 = _swiftEmptyArrayStorage;
    }
    unint64_t v29 = a9(a2);
    if (!v29) {
      goto LABEL_26;
    }
    unint64_t v30 = v29;
    if (v29 >> 62)
    {
      if (_CocoaArrayWrapper.endIndex.getter())
      {
LABEL_14:
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v30 & 0xC000000000000001) == 0, v30);
        if ((v30 & 0xC000000000000001) != 0) {
          id v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v31 = *(id *)(v30 + 32);
        }
        uint64_t v32 = v31;
        swift_bridgeObjectRelease();
        id v33 = [v32 relationship];

        if (v33)
        {
          id v34 = v33;
          specialized Sequence.forEach(_:)((unint64_t)v28, v34);
        }
        goto LABEL_26;
      }
    }
    else if (*(void *)((char *)&dword_10 + (v29 & 0xFFFFFFFFFFFFFF8)))
    {
      goto LABEL_14;
    }
    swift_bridgeObjectRelease();
LABEL_26:
    uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(a10);
    long long v57 = &protocol witness table for PhoneCallBaseCatTemplatingService<A, B>;
    *(void *)&long long v55 = a6;
    swift_retain();
    uint64_t v42 = App.appIdentifier.getter();
    if (v43) {
      uint64_t v44 = v42;
    }
    else {
      uint64_t v44 = 0;
    }
    if (v43) {
      unint64_t v45 = v43;
    }
    else {
      unint64_t v45 = 0xE000000000000000;
    }
    os_log_type_t v46 = (void *)(v51 + *a11);
    __swift_project_boxed_opaque_existential_1(v46, v46[3]);
    uint64_t v47 = OUTLINED_FUNCTION_26_14();
    v48(v47);
    __swift_project_boxed_opaque_existential_1(v46, v46[3]);
    uint64_t v49 = OUTLINED_FUNCTION_27_10();
    v50(v49);
    v58[0] = (uint64_t)v28;
    v58[1] = (uint64_t)v28;
    outlined init with take of AppSelectionSignalComponent(&v55, (uint64_t)&v63);
    outlined init with take of AppSelectionSignalComponent(&v54, (uint64_t)&v62);
    char v59 = 1;
    uint64_t v60 = v44;
    unint64_t v61 = v45;
    swift_bridgeObjectRetain();
    specialized DisambiguationItemFactory.buildDisambiguationItemList(_:)((uint64_t)a7, a8);
    return outlined destroy of PhoneContactDisambiguationItemFactory((uint64_t)v58);
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v35 = type metadata accessor for Logger();
  __swift_project_value_buffer(v35, (uint64_t)static Logger.siriPhone);
  swift_bridgeObjectRetain_n();
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = (_DWORD *)OUTLINED_FUNCTION_47();
    v58[0] = OUTLINED_FUNCTION_14_0();
    *uint64_t v38 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)&long long v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, (unint64_t)a4, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_33_9(&dword_0, v39, v40, "#CallingIntentRCHFlowDelegate Disambiguating %s, no disambiguation snippet");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  type metadata accessor for SiriKitDisambiguationList();
  OUTLINED_FUNCTION_21_0();
  SiriKitDisambiguationList.init(rawItems:disambiguationItems:shouldReadItemsInVox:requestUnlockForEmptyOrDuplicateItems:)();
  a7();
  return swift_release();
}

uint64_t StartVideoCallRCHFlowDelegate.makeErrorDialogBehavior(app:intent:intentResponse:)()
{
  type metadata accessor for ErrorDialogBehavior();
  OUTLINED_FUNCTION_15();
  uint64_t v0 = OUTLINED_FUNCTION_7_0();

  return v1(v0);
}

void StartVideoCallRCHFlowDelegate.init()()
{
}

uint64_t StartVideoCallRCHFlowDelegate.__ivar_destroyer()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + direct field offset for StartVideoCallRCHFlowDelegate.sharedGlobals);
  __swift_destroy_boxed_opaque_existential_1(v0 + direct field offset for StartVideoCallRCHFlowDelegate.biomeEventSender);

  return swift_release();
}

uint64_t StartVideoCallRCHFlowDelegate.deinit()
{
  uint64_t v0 = BaseRCHFlowDelegate.deinit();
  __swift_destroy_boxed_opaque_existential_1(v0 + direct field offset for StartVideoCallRCHFlowDelegate.sharedGlobals);
  __swift_destroy_boxed_opaque_existential_1(v0 + direct field offset for StartVideoCallRCHFlowDelegate.biomeEventSender);
  swift_release();
  return v0;
}

uint64_t StartVideoCallRCHFlowDelegate.__deallocating_deinit()
{
  StartVideoCallRCHFlowDelegate.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for SharedGlobalsHolding.sharedGlobals.getter in conformance StartVideoCallRCHFlowDelegate@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(*v1 + direct field offset for StartVideoCallRCHFlowDelegate.sharedGlobals, a1);
}

uint64_t specialized PhoneCallNLIntent.isDisplayNameEmergencyContact()()
{
  type metadata accessor for PhoneCallNLv3Intent(0);
  lazy protocol witness table accessor for type StartVideoCallRCHFlowDelegate and conformance StartVideoCallRCHFlowDelegate(&lazy protocol witness table cache variable for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent, (void (*)(uint64_t))type metadata accessor for PhoneCallNLv3Intent);
  uint64_t v1 = IntentNodeTraversable.intentNodes(forOntologyNode:)();
  uint64_t v12 = v0;
  uint64_t v2 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology21NonTerminalIntentNodeVG_27PhoneCallFlowDelegatePlugin0dJ7Contact_ps5NeverOTg5((uint64_t)closure #1 in PhoneCallNLv3Intent.contacts.getterpartial apply, (uint64_t)&v11, v1, (uint64_t)v16);
  swift_bridgeObjectRelease();
  uint64_t v3 = v2[2];
  if (!v3)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v4 = (uint64_t)(v2 + 4);
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of SignalProviding(v4, (uint64_t)v13);
    uint64_t v5 = v14;
    uint64_t v6 = v15;
    __swift_project_boxed_opaque_existential_1(v13, v14);
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 408))(v5, v6);
    if (!v8)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
      goto LABEL_9;
    }
    if (v7 == 0xD000000000000011 && v8 == 0x80000000004936D0) {
      break;
    }
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    if (v9) {
      goto LABEL_14;
    }
LABEL_9:
    v4 += 40;
    if (!--v3)
    {
      swift_bridgeObjectRelease_n();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
LABEL_14:
  swift_bridgeObjectRelease_n();
  return 1;
}

void specialized IntentFromParseFlowStrategyHelper.makeIntentFromParse(parse:previousIntent:)()
{
}

{
  specialized IntentFromParseFlowStrategyHelper.makeIntentFromParse(parse:previousIntent:)();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t (*v6)(void);
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  int v37;
  _DWORD *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void (*v48)(void);
  NSObject *v49;
  os_log_type_t v50;
  BOOL v51;
  _DWORD *v52;
  void *v53;
  id v54;
  id v55;
  uint64_t v56;
  unint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  _DWORD *v60;
  void *v61;
  id v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  void (*v69)(void);
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  _DWORD *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  void (*v79)(void);
  uint64_t v80;
  uint64_t (*v81)(void);
  void *v82;
  void *v83;
  id v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(void);
  id v91;
  void *v92;
  os_log_type_t v93;
  _DWORD *v94;
  id v95;
  id v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(void);
  uint64_t v104;
  NSObject *v105;
  os_log_type_t v106;
  uint64_t v107;
  _DWORD *v108;
  Swift::String v109;
  uint64_t v110;
  void (*v111)(void);
  void (*v112)(void);
  void *v113;
  os_log_type_t v114;
  unint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD *v119;
  _DWORD *v120;
  uint64_t v121;
  void (*v122)(uint64_t, char *, uint64_t);
  void (*v123)(char *, _DWORD *, uint64_t);
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int, void *, uint64_t);
  uint64_t v131;
  uint64_t (*v132)(void);
  void (*v133)(uint64_t, uint64_t);
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  _DWORD *v141;
  long long v142;
  uint64_t v143;
  uint64_t v144[6];

  OUTLINED_FUNCTION_24_0();
  uint64_t v126 = v2;
  uint64_t v127 = v3;
  uint64_t v129 = v4;
  uint64_t v132 = v6;
  uint64_t v133 = v5;
  uint64_t v134 = v7;
  uint64_t v138 = v0;
  uint64_t v141 = v8;
  uint64_t v130 = (void (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int, void *, uint64_t))type metadata accessor for Locale();
  OUTLINED_FUNCTION_1();
  uint64_t v128 = v9;
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_3_1();
  uint64_t v125 = v11;
  uint64_t v12 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_1();
  uint64_t v122 = v13;
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_4();
  uint64_t v15 = type metadata accessor for PhoneCallNLv3Intent(0);
  id v16 = OUTLINED_FUNCTION_11_0(v15);
  __chkstk_darwin(v16);
  OUTLINED_FUNCTION_4();
  uint64_t v19 = v18 - v17;
  type metadata accessor for NLIntent();
  OUTLINED_FUNCTION_1();
  uint64_t v136 = v21;
  uint64_t v137 = v20;
  __chkstk_darwin(v20);
  OUTLINED_FUNCTION_5_8();
  uint64_t v131 = v22;
  __chkstk_darwin(v23);
  OUTLINED_FUNCTION_31_12();
  __chkstk_darwin(v24);
  uint64_t v135 = (char *)&v119 - v25;
  uint64_t v140 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_1();
  uint64_t v27 = v26;
  __chkstk_darwin(v28);
  OUTLINED_FUNCTION_5_8();
  uint64_t v124 = (char *)v29;
  __chkstk_darwin(v30);
  uint64_t v32 = (char *)&v119 - v31;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v139 = __swift_project_value_buffer(v12, (uint64_t)static Logger.siriPhone);
  id v33 = Logger.logObject.getter();
  id v34 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = (uint8_t *)OUTLINED_FUNCTION_7_2();
    *(_WORD *)uint64_t v35 = 0;
    _os_log_impl(&dword_0, v33, v34, "#IntentFromParseFlowStrategyHelper makeIntentFromParse", v35, 2u);
    OUTLINED_FUNCTION_6();
  }

  uint64_t v36 = v140;
  uint64_t v123 = *(void (**)(char *, _DWORD *, uint64_t))(v27 + 16);
  v123(v32, v141, v140);
  os_log_type_t v37 = (*(uint64_t (**)(char *, uint64_t))(v27 + 88))(v32, v36);
  if (v37 == enum case for Parse.NLv3IntentOnly(_:))
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v32, v36);
    uint64_t v38 = v141;
    uint64_t v39 = v138;
    goto LABEL_7;
  }
  unint64_t v43 = v37;
  if (v37 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    (*(void (**)(char *, uint64_t))(v27 + 96))(v32, v140);
    uint64_t v44 = *(void *)&v32[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion))
                                 + 48)];
    os_log_type_t v46 = v135;
    unint64_t v45 = v136;
    uint64_t v47 = v137;
    OUTLINED_FUNCTION_15_10();
    v48();
    uint64_t v122 = *(void (**)(uint64_t, char *, uint64_t))(v45 + 16);
    v122(v1, v46, v47);
    PhoneCallNLv3Intent.init(intent:)(v1, v19);
    swift_retain_n();
    uint64_t v49 = Logger.logObject.getter();
    uint64_t v50 = static os_log_type_t.debug.getter();
    uint64_t v51 = os_log_type_enabled(v49, v50);
    uint64_t v121 = v19;
    uint64_t v133 = (void (*)(uint64_t, uint64_t))(v45 + 16);
    uint64_t v134 = v44;
    if (v51)
    {
      uint64_t v52 = (_DWORD *)OUTLINED_FUNCTION_47();
      v144[0] = OUTLINED_FUNCTION_14_0();
      void *v52 = 136315138;
      uint64_t v120 = v52 + 1;
      uint64_t v53 = (void *)Parse.ServerConversion.siriKitIntent.getter();
      long long v54 = [v53 _metadata];

      long long v55 = [v54 userUtterance];
      *(void *)&uint64_t v142 = v55;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _INPBString?);
      uint64_t v56 = String.init<A>(describing:)();
      *(void *)&uint64_t v142 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, v144);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_43_0();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_22_16(&dword_0, v49, v50, "User utterance: %s");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {

      OUTLINED_FUNCTION_43_0();
    }
    swift_retain_n();
    uint64_t v58 = Logger.logObject.getter();
    char v59 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v60 = (_DWORD *)OUTLINED_FUNCTION_47();
      uint64_t v120 = (_DWORD *)OUTLINED_FUNCTION_14_0();
      v144[0] = (uint64_t)v120;
      uint8_t *v60 = 136315138;
      uint64_t v119 = v60 + 1;
      unint64_t v61 = (void *)Parse.ServerConversion.siriKitIntent.getter();
      uint64_t v62 = [v61 description];
      uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v65 = v64;

      uint64_t v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v65, v144);
      OUTLINED_FUNCTION_39_5(v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_43_0();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_22_16(&dword_0, v58, v59, "SKIntent from server: %s");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {

      OUTLINED_FUNCTION_43_0();
    }
    uint64_t v71 = v137;
    uint64_t v72 = v131;
    v122(v131, v135, v137);
    uint64_t v73 = Logger.logObject.getter();
    char v74 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v73, v74))
    {
      os_log_type_t v75 = (_DWORD *)OUTLINED_FUNCTION_47();
      v144[0] = OUTLINED_FUNCTION_14_0();
      *os_log_type_t v75 = 136315138;
      lazy protocol witness table accessor for type StartVideoCallRCHFlowDelegate and conformance StartVideoCallRCHFlowDelegate(&lazy protocol witness table cache variable for type NLIntent and conformance NLIntent, (void (*)(uint64_t))&type metadata accessor for NLIntent);
      uint64_t v76 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v78 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v77, v144);
      OUTLINED_FUNCTION_39_5(v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v133 = *(void (**)(uint64_t, uint64_t))(v136 + 8);
      OUTLINED_FUNCTION_12_20();
      v79();
      OUTLINED_FUNCTION_22_16(&dword_0, v73, v74, "NLIntent from server: %s");
      OUTLINED_FUNCTION_20_1();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {
      uint64_t v133 = *(void (**)(uint64_t, uint64_t))(v136 + 8);
      v133(v72, v71);
    }

    uint64_t v80 = v121;
    uint64_t v81 = v132;
    uint64_t v82 = (void *)Parse.ServerConversion.siriKitIntent.getter();
    uint64_t v83 = (void *)v81();

    if (v83)
    {
      os_log_type_t v84 = v83;
      uint64_t v85 = v138;
      uint64_t v86 = specialized IntentFromParseFlowStrategyHelper.inferApp(from:)();
      uint64_t v87 = v85[6];
      uint64_t v88 = v85[7];
      __swift_project_boxed_opaque_existential_1(v85 + 3, v87);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v88 + 8))(v144, v87, v88);
      __swift_project_boxed_opaque_existential_1(v144, v144[3]);
      os_log_type_t v89 = v125;
      dispatch thunk of DeviceState.siriLocale.getter();
      specialized static ContactResolution.updateSiriKitIntentNLv3(siriKitIntent:nlIntent:app:locale:sharedGlobals:multicardinalIndex:)((uint64_t)v84, v80, v86, v89, (uint64_t)(v85 + 3), 0, 1, v129, v127, v126, (uint64_t)v119, (uint64_t)v120, v121, (uint64_t)v122, (uint64_t)v123, (uint64_t)v124, v125, v126, v127,
        v128,
        v129,
        v130);

      swift_release();
      OUTLINED_FUNCTION_11();
      v90();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v144);
      uint64_t v91 = v84;
      uint64_t v92 = (void *)Logger.logObject.getter();
      uint64_t v93 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_1_34(v93))
      {
        uint64_t v94 = (_DWORD *)OUTLINED_FUNCTION_47();
        v144[0] = OUTLINED_FUNCTION_14_0();
        *uint64_t v94 = 136315138;
        uint64_t v141 = v94 + 1;
        uint64_t v95 = v91;
        uint64_t v96 = [v95 description];
        uint64_t v97 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v99 = v98;

        uint64_t v100 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v97, v99, v144);
        OUTLINED_FUNCTION_39_5(v100);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_9_27(&dword_0, v101, v102, "SKIntent after NCR replacement: %s");
        swift_arrayDestroy();
        OUTLINED_FUNCTION_6();
        OUTLINED_FUNCTION_6();
        swift_release();

        outlined destroy of PhoneCallNLv3Intent(v121, (void (*)(void))type metadata accessor for PhoneCallNLv3Intent);
      }
      else
      {
        swift_release();

        outlined destroy of PhoneCallNLv3Intent(v80, (void (*)(void))type metadata accessor for PhoneCallNLv3Intent);
      }
      OUTLINED_FUNCTION_12_20();
      v111();
      goto LABEL_9;
    }
    swift_release();
    outlined destroy of PhoneCallNLv3Intent(v80, (void (*)(void))type metadata accessor for PhoneCallNLv3Intent);
    OUTLINED_FUNCTION_12_20();
    v103();
    uint64_t v68 = v140;
    uint64_t v38 = v141;
LABEL_28:
    uint64_t v104 = (uint64_t)v124;
    v123(v124, v38, v68);
    uint64_t v105 = Logger.logObject.getter();
    uint64_t v106 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v105, v106))
    {
      uint64_t v107 = v68;
      uint64_t v108 = (_DWORD *)OUTLINED_FUNCTION_47();
      v144[0] = OUTLINED_FUNCTION_14_0();
      uint8_t *v108 = 136315138;
      uint64_t v109 = Parse.typeForLogging()();
      uint64_t v110 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v109._countAndFlagsBits, (unint64_t)v109._object, v144);
      OUTLINED_FUNCTION_39_5(v110);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v104, v107);
      OUTLINED_FUNCTION_22_16(&dword_0, v105, v106, "#IntentFromParseFlowStrategyHelper makeIntentFromParse get unexpected parse: %s");
      OUTLINED_FUNCTION_20_1();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v104, v68);
    }

    goto LABEL_9;
  }
  uint64_t v39 = v138;
  if (v37 == enum case for Parse.NLv4IntentOnly(_:))
  {
    (*(void (**)(char *, uint64_t))(v27 + 96))(v32, v140);
    swift_unknownObjectRelease();
    uint64_t v38 = v141;
  }
  else
  {
    uint64_t v67 = enum case for Parse.uso(_:);
    uint64_t v68 = v140;
    OUTLINED_FUNCTION_12_20();
    v69();
    uint64_t v70 = v43 == v67;
    uint64_t v38 = v141;
    if (!v70) {
      goto LABEL_28;
    }
  }
LABEL_7:
  uint64_t v40 = v39[6];
  uint64_t v41 = v39[7];
  __swift_project_boxed_opaque_existential_1(v39 + 3, v40);
  uint64_t v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 72))(v40, v41);
  (*(void (**)(long long *__return_ptr, _DWORD *))(*(void *)v42 + 192))(&v142, v38);
  swift_release();
  if (v143)
  {
    outlined init with take of AppSelectionSignalComponent(&v142, (uint64_t)v144);
    specialized IntentFromParseFlowStrategyHelper.makeIntentFromParseSiriX(parse:nlIntent:previousIntent:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v144);
LABEL_9:
    OUTLINED_FUNCTION_26_1();
    return;
  }
  outlined destroy of PhoneCallNLIntent?((uint64_t)&v142);
  OUTLINED_FUNCTION_23_14();
  v112();
  uint64_t v113 = (void *)Logger.logObject.getter();
  os_log_type_t v114 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_1_34(v114))
  {
    OUTLINED_FUNCTION_47();
    v144[0] = OUTLINED_FUNCTION_14_0();
    OUTLINED_FUNCTION_19_18(4.8149e-34);
    *(void *)&uint64_t v142 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000050, v115, v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_9_27(&dword_0, v117, v118, "%s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }

  static SiriKitLifecycle._logCrashToEventBus(_:)();
  OUTLINED_FUNCTION_77();
  OUTLINED_FUNCTION_13_17();
  __break(1u);
}

void specialized IntentFromParseFlowStrategyHelper.makeIntentFromParseSiriX(parse:nlIntent:previousIntent:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v104 = v2;
  id v105 = v1;
  uint64_t v106 = v4;
  uint64_t v107 = v3;
  uint64_t v5 = v0;
  id v112 = v6;
  type metadata accessor for Locale();
  OUTLINED_FUNCTION_1();
  uint64_t v102 = v8;
  uint64_t v103 = v7;
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_3_1();
  uint64_t v101 = v9;
  uint64_t v10 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_1();
  uint64_t v98 = v11;
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_3_1();
  uint64_t v99 = v13;
  uint64_t v14 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_1();
  uint64_t v16 = v15;
  __chkstk_darwin(v17);
  OUTLINED_FUNCTION_46_0();
  uint64_t v20 = v18 - v19;
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v98 - v23;
  uint64_t v25 = v5[2];
  uint64_t v110 = (char *)&v98 - v23;
  uint64_t v111 = v22;
  uint64_t v108 = (_DWORD *)v10;
  uint64_t v100 = v20;
  if (v25)
  {
    uint64_t v26 = one-time initialization token for siriPhone;
    swift_retain();
    if (v26 != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v10, (uint64_t)static Logger.siriPhone);
    swift_retain_n();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      unint64_t v29 = (uint8_t *)OUTLINED_FUNCTION_47();
      v113[0] = OUTLINED_FUNCTION_14_0();
      uint64_t v109 = v16;
      *(_DWORD *)unint64_t v29 = 136315138;
      v113[5] = v25;
      type metadata accessor for App();
      lazy protocol witness table accessor for type StartVideoCallRCHFlowDelegate and conformance StartVideoCallRCHFlowDelegate((unint64_t *)&lazy protocol witness table cache variable for type App and conformance App, (void (*)(uint64_t))&type metadata accessor for App);
      uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, v113);
      OUTLINED_FUNCTION_8_44(v32);
      uint64_t v16 = v109;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v27, v28, "#IntentFromParseFlowStrategyHelper makeIntentFromParse: appResolved: %s", v29, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
      swift_release();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v24 = v110;
    uint64_t v14 = v111;
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v10, (uint64_t)static Logger.siriPhone);
    id v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)OUTLINED_FUNCTION_7_2();
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl(&dword_0, v33, v34, "#IntentFromParseFlowStrategyHelper makeIntentFromParse: no appResolved", v35, 2u);
      OUTLINED_FUNCTION_6();
    }
  }
  uint64_t v36 = *(void (**)(char *, id, uint64_t))(v16 + 16);
  v36(v24, v112, v14);
  int v37 = (*(uint64_t (**)(char *, uint64_t))(v16 + 88))(v24, v14);
  if (v37 == enum case for Parse.NLv3IntentOnly(_:))
  {
    uint64_t v98 = (void (*)(uint64_t, id, uint64_t))v36;
    uint64_t v109 = v16;
    uint64_t v38 = v5[6];
    uint64_t v39 = v5[7];
    uint64_t v99 = v5 + 3;
    __swift_project_boxed_opaque_existential_1(v5 + 3, v38);
    uint64_t v40 = *(void (**)(uint64_t))(v39 + 80);
    swift_retain();
    id v41 = v105;
    uint64_t v42 = OUTLINED_FUNCTION_36_0();
    v40(v42);
    unint64_t v43 = v107;
    __swift_project_boxed_opaque_existential_1(v107, v107[3]);
    uint64_t v44 = v25;
    OUTLINED_FUNCTION_25_13();
    os_log_type_t v46 = (void *)v45();
    outlined destroy of SKTransformer((uint64_t)v113);
    if (v46)
    {
      id v112 = v41;
      uint64_t v47 = v5[7];
      uint64_t v48 = v99;
      __swift_project_boxed_opaque_existential_1(v99, v5[6]);
      uint64_t v49 = *(void (**)(uint64_t))(v47 + 8);
      uint64_t v106 = v46;
      id v50 = v46;
      uint64_t v51 = OUTLINED_FUNCTION_36_0();
      v49(v51);
      __swift_project_boxed_opaque_existential_1(v113, v113[3]);
      uint64_t v52 = v101;
      OUTLINED_FUNCTION_36_0();
      dispatch thunk of DeviceState.siriLocale.getter();
      uint64_t v53 = v43[3];
      uint64_t v54 = v43[4];
      long long v55 = __swift_project_boxed_opaque_existential_1(v43, v53);
      v104(v50, v55, v44, v52, v48, 0, 1, v53, v54);
      OUTLINED_FUNCTION_11();
      v56();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v113);
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      __swift_project_value_buffer((uint64_t)v108, (uint64_t)static Logger.siriPhone);
      id v57 = v50;
      uint64_t v58 = Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v58, v59))
      {
        uint64_t v60 = (_DWORD *)OUTLINED_FUNCTION_47();
        v113[0] = OUTLINED_FUNCTION_14_0();
        _DWORD *v60 = 136315138;
        uint64_t v108 = v60 + 1;
        id v61 = v57;
        id v62 = [v61 description];
        uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v65 = v64;

        uint64_t v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v65, v113);
        OUTLINED_FUNCTION_8_44(v66);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_33_9(&dword_0, v67, v68, "#IntentFromParseFlowStrategyHelper SKIntent after NCR replacement: %s");
        swift_arrayDestroy();
        OUTLINED_FUNCTION_6();
        OUTLINED_FUNCTION_6();

        swift_release();
      }
      else
      {

        swift_release();
      }
      OUTLINED_FUNCTION_11();
      v89();
    }
    else
    {

      swift_release();
      uint64_t v81 = *(void (**)(void))(v109 + 8);
      uint64_t v82 = v111;
      v109 += 8;
      OUTLINED_FUNCTION_12_20();
      v81();
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      __swift_project_value_buffer((uint64_t)v108, (uint64_t)static Logger.siriPhone);
      uint64_t v83 = v100;
      v98(v100, v112, v82);
      os_log_type_t v84 = Logger.logObject.getter();
      os_log_type_t v85 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v84, v85))
      {
        uint64_t v86 = (_DWORD *)OUTLINED_FUNCTION_47();
        v113[0] = OUTLINED_FUNCTION_14_0();
        *uint64_t v86 = 136315138;
        Swift::String v87 = Parse.typeForLogging()();
        uint64_t v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v87._countAndFlagsBits, (unint64_t)v87._object, v113);
        OUTLINED_FUNCTION_8_44(v88);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_12_20();
        v81();
        OUTLINED_FUNCTION_22_16(&dword_0, v84, v85, "#IntentFromParseFlowStrategyHelper makeIntentFromParseSiriX get unexpected parse: %s");
        OUTLINED_FUNCTION_20_1();
        OUTLINED_FUNCTION_6();
        OUTLINED_FUNCTION_6();
      }
      else
      {
        ((void (*)(uint64_t, uint64_t))v81)(v83, v82);
      }
    }
LABEL_36:
    OUTLINED_FUNCTION_26_1();
    return;
  }
  uint64_t v69 = (uint64_t)v108;
  if (v37 == enum case for Parse.NLv4IntentOnly(_:))
  {
    (*(void (**)(char *, uint64_t))(v16 + 96))(v24, v14);
    swift_unknownObjectRelease();
LABEL_23:
    uint64_t v70 = v107;
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v69, (uint64_t)static Logger.siriPhone);
    uint64_t v71 = Logger.logObject.getter();
    os_log_type_t v72 = static os_log_type_t.debug.getter();
    uint64_t v73 = OUTLINED_FUNCTION_7_0();
    if (os_log_type_enabled(v73, v74))
    {
      os_log_type_t v75 = (uint8_t *)OUTLINED_FUNCTION_7_2();
      *(_WORD *)os_log_type_t v75 = 0;
      _os_log_impl(&dword_0, v71, v72, "IntentFromParseFlowStrategyHelper NLv4/USO parse. running convertToIntent.", v75, 2u);
      OUTLINED_FUNCTION_6();
    }

    __swift_project_boxed_opaque_existential_1(v5 + 3, v5[6]);
    uint64_t v76 = OUTLINED_FUNCTION_36_0();
    v77(v76);
    __swift_project_boxed_opaque_existential_1(v70, v70[3]);
    swift_retain();
    id v78 = v105;
    OUTLINED_FUNCTION_25_13();
    v80(v79);

    swift_release();
    outlined destroy of SKTransformer((uint64_t)v113);
    goto LABEL_36;
  }
  if (v37 == enum case for Parse.uso(_:))
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v24, v14);
    goto LABEL_23;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v69, (uint64_t)static Logger.siriPhone);
  OUTLINED_FUNCTION_23_14();
  v91(v90);
  v113[0] = 0;
  v113[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  uint64_t v92 = (void *)Logger.logObject.getter();
  os_log_type_t v93 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_1_34(v93))
  {
    uint64_t v94 = (_DWORD *)OUTLINED_FUNCTION_47();
    v113[0] = OUTLINED_FUNCTION_14_0();
    *uint64_t v94 = 136315138;
    uint64_t v95 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000057, 0x8000000000494420, v113);
    OUTLINED_FUNCTION_8_44(v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_9_27(&dword_0, v96, v97, "%s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }

  static SiriKitLifecycle._logCrashToEventBus(_:)();
  OUTLINED_FUNCTION_77();
  OUTLINED_FUNCTION_13_17();
  __break(1u);
}

uint64_t specialized IntentFromParseFlowStrategyHelper.inferApp(from:)()
{
  Parse.ServerConversion.appResolutionStateProviding.getter();
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  uint64_t v0 = dispatch thunk of AppResolutionStateProviding.getRequestedApp()();
  outlined init with copy of SignalProviding((uint64_t)v3, (uint64_t)v2);
  if (!v0)
  {
    __swift_project_boxed_opaque_existential_1(v2, v2[3]);
    uint64_t v0 = dispatch thunk of AppResolutionStateProviding.getSuggestedApp()();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  return v0;
}

uint64_t specialized IntentFromParseFlowStrategyHelper.__deallocating_deinit()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);

  return swift_deallocClassInstance();
}

uint64_t specialized StartVideoCallRCHFlowDelegate.init(sharedGlobals:appResolved:biomeEventSender:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v14[3] = a5;
  void v14[4] = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v14);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(boxed_opaque_existential_1, a3, a5);
  outlined init with copy of SignalProviding(a1, a4 + direct field offset for StartVideoCallRCHFlowDelegate.sharedGlobals);
  *(void *)(a4 + direct field offset for StartVideoCallRCHFlowDelegate.appResolved) = a2;
  outlined init with copy of SignalProviding((uint64_t)v14, a4 + direct field offset for StartVideoCallRCHFlowDelegate.biomeEventSender);
  uint64_t v12 = BaseRCHFlowDelegate.init()();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v12;
}

uint64_t specialized StartVideoCallTemplatingService.init(sharedGlobals:catFamily:displayTextCats:phoneCallCommonCats:appInfoBuilder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v12 = type metadata accessor for CATOption();
  uint64_t v13 = OUTLINED_FUNCTION_11_0(v12);
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_4();
  *(void *)((char *)a6 + direct field offset for StartVideoCallTemplatingService.catFamily) = a2;
  outlined init with copy of SignalProviding(a1, (uint64_t)v17);
  type metadata accessor for StartCallCATs();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v14 = CATWrapper.__allocating_init(options:globals:)();
  swift_retain();
  uint64_t v15 = specialized PhoneCallBaseCatTemplatingService.init(ducFamily:sharedGlobals:displayTextCats:phoneCallCommonCats:appInfoBuilder:labelTemplating:startCallCats:)(0xD000000000000014, 0x800000000048C900, v17, a3, a4, a5, 0, 0, 0, 0, v14, a6);
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v15;
}

uint64_t specialized PhoneCallBaseCatTemplatingService.init(ducFamily:sharedGlobals:displayTextCats:phoneCallCommonCats:appInfoBuilder:labelTemplating:startCallCats:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void (*v26)(long long *__return_ptr, uint64_t, uint64_t);
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void v41[7];
  long long v42[2];
  void v43[5];
  void v44[6];

  uint64_t v39 = a5;
  uint64_t v38 = a4;
  int v37 = a2;
  uint64_t v36 = a1;
  uint64_t v40 = a11;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DucTemplatingLocalContext?);
  __chkstk_darwin(v16 - 8);
  uint64_t v35 = (uint64_t)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v34 = type metadata accessor for Locale();
  uint64_t v18 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v20 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44[3] = type metadata accessor for AppInfoBuilder();
  v44[4] = &protocol witness table for AppInfoBuilder;
  v44[0] = a6;
  void v43[3] = &type metadata for LabelTemplatesProvider;
  v43[4] = &protocol witness table for LabelTemplatesProvider;
  uint64_t v21 = (void *)swift_allocObject();
  v43[0] = v21;
  void v21[2] = a7;
  v21[3] = a8;
  void v21[4] = a9;
  v21[5] = a10;
  uint64_t v22 = (void *)((char *)a12
                 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 16));
  *uint64_t v22 = 0x3D65737561705C1BLL;
  v22[1] = 0xEC0000005C303532;
  uint64_t v23 = (char *)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 56);
  *(_OWORD *)uint64_t v23 = 0u;
  *((_OWORD *)v23 + 1) = 0u;
  *((void *)v23 + 4) = 0;
  outlined init with copy of SignalProviding((uint64_t)a3, (uint64_t)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 72));
  uint64_t v24 = a3[3];
  uint64_t v25 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v24);
  uint64_t v26 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v25 + 8);
  swift_retain();
  v26(v42, v24, v25);
  uint64_t v27 = (void *)((char *)a12
                 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 40));
  outlined init with take of AppSelectionSignalComponent(v42, (uint64_t)v27);
  *(void *)((char *)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 24)) = v38;
  *(void *)((char *)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 32)) = v39;
  outlined init with copy of SignalProviding((uint64_t)v44, (uint64_t)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 48));
  outlined init with copy of SignalProviding((uint64_t)v43, (uint64_t)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 64));
  *(void *)((char *)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 80)) = v40;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  __swift_project_boxed_opaque_existential_1(v27, v27[3]);
  dispatch thunk of DeviceState.siriLocale.getter();
  *(void *)&v42[0] = Locale.identifier.getter();
  *((void *)&v42[0] + 1) = v28;
  v41[0] = 45;
  v41[1] = 0xE100000000000000;
  v41[5] = 95;
  void v41[6] = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v34);
  type metadata accessor for INIntentSlotValueType(0);
  lazy protocol witness table accessor for type StartVideoCallRCHFlowDelegate and conformance StartVideoCallRCHFlowDelegate(&lazy protocol witness table cache variable for type INIntentSlotValueType and conformance INIntentSlotValueType, type metadata accessor for INIntentSlotValueType);
  Dictionary.init(dictionaryLiteral:)();
  unint64_t v29 = a3[3];
  uint64_t v30 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v29);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v30 + 24))(v42, v29, v30);
  outlined init with copy of SignalProviding((uint64_t)v27, (uint64_t)v41);
  unint64_t v31 = type metadata accessor for DucTemplatingLocalContext();
  __swift_storeEnumTagSinglePayload(v35, 1, 1, v31);
  uint64_t v32 = DucTemplatingService.init(ducFamily:locale:extensionValueTypeNamesByValueType:aceServiceInvoker:deviceState:localContext:)();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a3);
  return v32;
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void *v21;
  void *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(long long *__return_ptr, uint64_t, uint64_t);
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void v41[7];
  long long v42[2];
  void v43[5];
  void v44[6];

  uint64_t v39 = a5;
  uint64_t v38 = a4;
  int v37 = a2;
  uint64_t v36 = a1;
  uint64_t v40 = a11;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DucTemplatingLocalContext?);
  __chkstk_darwin(v16 - 8);
  uint64_t v35 = (uint64_t)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v34 = type metadata accessor for Locale();
  uint64_t v18 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v20 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44[3] = type metadata accessor for AppInfoBuilder();
  v44[4] = &protocol witness table for AppInfoBuilder;
  v44[0] = a6;
  void v43[3] = &type metadata for LabelTemplatesProvider;
  v43[4] = &protocol witness table for LabelTemplatesProvider;
  uint64_t v21 = (void *)swift_allocObject();
  v43[0] = v21;
  void v21[2] = a7;
  v21[3] = a8;
  void v21[4] = a9;
  v21[5] = a10;
  uint64_t v22 = (void *)((char *)a12
                 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 16));
  *uint64_t v22 = 0x3D65737561705C1BLL;
  v22[1] = 0xEC0000005C303532;
  uint64_t v23 = (char *)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 56);
  *(_OWORD *)uint64_t v23 = 0u;
  *((_OWORD *)v23 + 1) = 0u;
  *((void *)v23 + 4) = 0;
  outlined init with copy of SignalProviding((uint64_t)a3, (uint64_t)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 72));
  uint64_t v24 = a3[3];
  uint64_t v25 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v24);
  uint64_t v26 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v25 + 8);
  swift_retain();
  v26(v42, v24, v25);
  uint64_t v27 = (void *)((char *)a12
                 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 40));
  outlined init with take of AppSelectionSignalComponent(v42, (uint64_t)v27);
  *(void *)((char *)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 24)) = v38;
  *(void *)((char *)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 32)) = v39;
  outlined init with copy of SignalProviding((uint64_t)v44, (uint64_t)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 48));
  outlined init with copy of SignalProviding((uint64_t)v43, (uint64_t)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 64));
  *(void *)((char *)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 80)) = v40;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  __swift_project_boxed_opaque_existential_1(v27, v27[3]);
  dispatch thunk of DeviceState.siriLocale.getter();
  *(void *)&v42[0] = Locale.identifier.getter();
  *((void *)&v42[0] + 1) = v28;
  v41[0] = 45;
  v41[1] = 0xE100000000000000;
  v41[5] = 95;
  void v41[6] = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v34);
  type metadata accessor for INIntentSlotValueType(0);
  lazy protocol witness table accessor for type HangUpCallRCHFlowDelegate and conformance BaseRCHFlowDelegate<A, B>(&lazy protocol witness table cache variable for type INIntentSlotValueType and conformance INIntentSlotValueType, type metadata accessor for INIntentSlotValueType);
  Dictionary.init(dictionaryLiteral:)();
  unint64_t v29 = a3[3];
  uint64_t v30 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v29);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v30 + 24))(v42, v29, v30);
  outlined init with copy of SignalProviding((uint64_t)v27, (uint64_t)v41);
  unint64_t v31 = type metadata accessor for DucTemplatingLocalContext();
  __swift_storeEnumTagSinglePayload(v35, 1, 1, v31);
  uint64_t v32 = DucTemplatingService.init(ducFamily:locale:extensionValueTypeNamesByValueType:aceServiceInvoker:deviceState:localContext:)();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a3);
  return v32;
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void *v21;
  void *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(long long *__return_ptr, uint64_t, uint64_t);
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void v41[7];
  long long v42[2];
  void v43[5];
  void v44[6];

  uint64_t v39 = a5;
  uint64_t v38 = a4;
  int v37 = a2;
  uint64_t v36 = a1;
  uint64_t v40 = a11;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DucTemplatingLocalContext?);
  __chkstk_darwin(v16 - 8);
  uint64_t v35 = (uint64_t)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v34 = type metadata accessor for Locale();
  uint64_t v18 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v20 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44[3] = type metadata accessor for AppInfoBuilder();
  v44[4] = &protocol witness table for AppInfoBuilder;
  v44[0] = a6;
  void v43[3] = &type metadata for LabelTemplatesProvider;
  v43[4] = &protocol witness table for LabelTemplatesProvider;
  uint64_t v21 = (void *)swift_allocObject();
  v43[0] = v21;
  void v21[2] = a7;
  v21[3] = a8;
  void v21[4] = a9;
  v21[5] = a10;
  uint64_t v22 = (void *)((char *)a12
                 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 16));
  *uint64_t v22 = 0x3D65737561705C1BLL;
  v22[1] = 0xEC0000005C303532;
  uint64_t v23 = (char *)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 56);
  *(_OWORD *)uint64_t v23 = 0u;
  *((_OWORD *)v23 + 1) = 0u;
  *((void *)v23 + 4) = 0;
  outlined init with copy of SignalProviding((uint64_t)a3, (uint64_t)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 72));
  uint64_t v24 = a3[3];
  uint64_t v25 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v24);
  uint64_t v26 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v25 + 8);
  swift_retain();
  v26(v42, v24, v25);
  uint64_t v27 = (void *)((char *)a12
                 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 40));
  outlined init with take of AppSelectionSignalComponent(v42, (uint64_t)v27);
  *(void *)((char *)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 24)) = v38;
  *(void *)((char *)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 32)) = v39;
  outlined init with copy of SignalProviding((uint64_t)v44, (uint64_t)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 48));
  outlined init with copy of SignalProviding((uint64_t)v43, (uint64_t)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 64));
  *(void *)((char *)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 80)) = v40;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  __swift_project_boxed_opaque_existential_1(v27, v27[3]);
  dispatch thunk of DeviceState.siriLocale.getter();
  *(void *)&v42[0] = Locale.identifier.getter();
  *((void *)&v42[0] + 1) = v28;
  v41[0] = 45;
  v41[1] = 0xE100000000000000;
  v41[5] = 95;
  void v41[6] = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v34);
  type metadata accessor for INIntentSlotValueType(0);
  lazy protocol witness table accessor for type StartAudioCallRCHFlowDelegate and conformance StartAudioCallRCHFlowDelegate(&lazy protocol witness table cache variable for type INIntentSlotValueType and conformance INIntentSlotValueType, type metadata accessor for INIntentSlotValueType);
  Dictionary.init(dictionaryLiteral:)();
  unint64_t v29 = a3[3];
  uint64_t v30 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v29);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v30 + 24))(v42, v29, v30);
  outlined init with copy of SignalProviding((uint64_t)v27, (uint64_t)v41);
  unint64_t v31 = type metadata accessor for DucTemplatingLocalContext();
  __swift_storeEnumTagSinglePayload(v35, 1, 1, v31);
  uint64_t v32 = DucTemplatingService.init(ducFamily:locale:extensionValueTypeNamesByValueType:aceServiceInvoker:deviceState:localContext:)();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a3);
  return v32;
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void *v21;
  void *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(long long *__return_ptr, uint64_t, uint64_t);
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void v41[7];
  long long v42[2];
  void v43[5];
  void v44[6];

  uint64_t v39 = a5;
  uint64_t v38 = a4;
  int v37 = a2;
  uint64_t v36 = a1;
  uint64_t v40 = a11;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DucTemplatingLocalContext?);
  __chkstk_darwin(v16 - 8);
  uint64_t v35 = (uint64_t)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v34 = type metadata accessor for Locale();
  uint64_t v18 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v20 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44[3] = type metadata accessor for AppInfoBuilder();
  v44[4] = &protocol witness table for AppInfoBuilder;
  v44[0] = a6;
  void v43[3] = &type metadata for LabelTemplatesProvider;
  v43[4] = &protocol witness table for LabelTemplatesProvider;
  uint64_t v21 = (void *)swift_allocObject();
  v43[0] = v21;
  void v21[2] = a7;
  v21[3] = a8;
  void v21[4] = a9;
  v21[5] = a10;
  uint64_t v22 = (void *)((char *)a12
                 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 16));
  *uint64_t v22 = 0x3D65737561705C1BLL;
  v22[1] = 0xEC0000005C303532;
  uint64_t v23 = (char *)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 56);
  *(_OWORD *)uint64_t v23 = 0u;
  *((_OWORD *)v23 + 1) = 0u;
  *((void *)v23 + 4) = 0;
  outlined init with copy of SignalProviding((uint64_t)a3, (uint64_t)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 72));
  uint64_t v24 = a3[3];
  uint64_t v25 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v24);
  uint64_t v26 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v25 + 8);
  swift_retain();
  v26(v42, v24, v25);
  uint64_t v27 = (void *)((char *)a12
                 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 40));
  outlined init with take of AppSelectionSignalComponent(v42, (uint64_t)v27);
  *(void *)((char *)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 24)) = v38;
  *(void *)((char *)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 32)) = v39;
  outlined init with copy of SignalProviding((uint64_t)v44, (uint64_t)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 48));
  outlined init with copy of SignalProviding((uint64_t)v43, (uint64_t)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 64));
  *(void *)((char *)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 80)) = v40;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  __swift_project_boxed_opaque_existential_1(v27, v27[3]);
  dispatch thunk of DeviceState.siriLocale.getter();
  *(void *)&v42[0] = Locale.identifier.getter();
  *((void *)&v42[0] + 1) = v28;
  v41[0] = 45;
  v41[1] = 0xE100000000000000;
  v41[5] = 95;
  void v41[6] = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v34);
  type metadata accessor for INIntentSlotValueType(0);
  lazy protocol witness table accessor for type SearchCallHistoryRCHFlowDelegate and conformance BaseRCHFlowDelegate<A, B>(&lazy protocol witness table cache variable for type INIntentSlotValueType and conformance INIntentSlotValueType, type metadata accessor for INIntentSlotValueType);
  Dictionary.init(dictionaryLiteral:)();
  unint64_t v29 = a3[3];
  uint64_t v30 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v29);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v30 + 24))(v42, v29, v30);
  outlined init with copy of SignalProviding((uint64_t)v27, (uint64_t)v41);
  unint64_t v31 = type metadata accessor for DucTemplatingLocalContext();
  __swift_storeEnumTagSinglePayload(v35, 1, 1, v31);
  uint64_t v32 = DucTemplatingService.init(ducFamily:locale:extensionValueTypeNamesByValueType:aceServiceInvoker:deviceState:localContext:)();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a3);
  return v32;
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void *v21;
  void *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(long long *__return_ptr, uint64_t, uint64_t);
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void v41[7];
  long long v42[2];
  void v43[5];
  void v44[6];

  uint64_t v39 = a5;
  uint64_t v38 = a4;
  int v37 = a2;
  uint64_t v36 = a1;
  uint64_t v40 = a11;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DucTemplatingLocalContext?);
  __chkstk_darwin(v16 - 8);
  uint64_t v35 = (uint64_t)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v34 = type metadata accessor for Locale();
  uint64_t v18 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v20 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44[3] = &type metadata for LabelTemplatesProvider;
  v44[4] = &protocol witness table for LabelTemplatesProvider;
  uint64_t v21 = (void *)swift_allocObject();
  v44[0] = v21;
  void v21[2] = a7;
  v21[3] = a8;
  void v21[4] = a9;
  v21[5] = a10;
  void v43[3] = type metadata accessor for AppInfoBuilder();
  v43[4] = &protocol witness table for AppInfoBuilder;
  v43[0] = a6;
  uint64_t v22 = (void *)((char *)a12
                 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 16));
  *uint64_t v22 = 0x3D65737561705C1BLL;
  v22[1] = 0xEC0000005C303532;
  uint64_t v23 = (char *)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 56);
  *(_OWORD *)uint64_t v23 = 0u;
  *((_OWORD *)v23 + 1) = 0u;
  *((void *)v23 + 4) = 0;
  outlined init with copy of SignalProviding((uint64_t)a3, (uint64_t)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 72));
  uint64_t v24 = a3[3];
  uint64_t v25 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v24);
  uint64_t v26 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v25 + 8);
  swift_retain();
  v26(v42, v24, v25);
  uint64_t v27 = (void *)((char *)a12
                 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 40));
  outlined init with take of AppSelectionSignalComponent(v42, (uint64_t)v27);
  *(void *)((char *)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 24)) = v38;
  *(void *)((char *)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 32)) = v39;
  outlined init with copy of SignalProviding((uint64_t)v43, (uint64_t)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 48));
  outlined init with copy of SignalProviding((uint64_t)v44, (uint64_t)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 64));
  *(void *)((char *)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 80)) = v40;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  __swift_project_boxed_opaque_existential_1(v27, v27[3]);
  dispatch thunk of DeviceState.siriLocale.getter();
  *(void *)&v42[0] = Locale.identifier.getter();
  *((void *)&v42[0] + 1) = v28;
  v41[0] = 45;
  v41[1] = 0xE100000000000000;
  v41[5] = 95;
  void v41[6] = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v34);
  type metadata accessor for INIntentSlotValueType(0);
  _s11SiriKitFlow5InputVACs23CustomStringConvertibleAAWlTm_1(&lazy protocol witness table cache variable for type INIntentSlotValueType and conformance INIntentSlotValueType, type metadata accessor for INIntentSlotValueType);
  Dictionary.init(dictionaryLiteral:)();
  unint64_t v29 = a3[3];
  uint64_t v30 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v29);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v30 + 24))(v42, v29, v30);
  outlined init with copy of SignalProviding((uint64_t)v27, (uint64_t)v41);
  unint64_t v31 = type metadata accessor for DucTemplatingLocalContext();
  __swift_storeEnumTagSinglePayload(v35, 1, 1, v31);
  uint64_t v32 = DucTemplatingService.init(ducFamily:locale:extensionValueTypeNamesByValueType:aceServiceInvoker:deviceState:localContext:)();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a3);
  return v32;
}

{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void *v21;
  void *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(long long *__return_ptr, uint64_t, uint64_t);
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void v41[7];
  long long v42[2];
  void v43[5];
  void v44[6];

  uint64_t v39 = a5;
  uint64_t v38 = a4;
  int v37 = a2;
  uint64_t v36 = a1;
  uint64_t v40 = a11;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DucTemplatingLocalContext?);
  __chkstk_darwin(v16 - 8);
  uint64_t v35 = (uint64_t)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v34 = type metadata accessor for Locale();
  uint64_t v18 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v20 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44[3] = type metadata accessor for AppInfoBuilder();
  v44[4] = &protocol witness table for AppInfoBuilder;
  v44[0] = a6;
  void v43[3] = &type metadata for LabelTemplatesProvider;
  v43[4] = &protocol witness table for LabelTemplatesProvider;
  uint64_t v21 = (void *)swift_allocObject();
  v43[0] = v21;
  void v21[2] = a7;
  v21[3] = a8;
  void v21[4] = a9;
  v21[5] = a10;
  uint64_t v22 = (void *)((char *)a12
                 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 16));
  *uint64_t v22 = 0x3D65737561705C1BLL;
  v22[1] = 0xEC0000005C303532;
  uint64_t v23 = (char *)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 56);
  *(_OWORD *)uint64_t v23 = 0u;
  *((_OWORD *)v23 + 1) = 0u;
  *((void *)v23 + 4) = 0;
  outlined init with copy of SignalProviding((uint64_t)a3, (uint64_t)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 72));
  uint64_t v24 = a3[3];
  uint64_t v25 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v24);
  uint64_t v26 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v25 + 8);
  swift_retain();
  v26(v42, v24, v25);
  uint64_t v27 = (void *)((char *)a12
                 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 40));
  outlined init with take of AppSelectionSignalComponent(v42, (uint64_t)v27);
  *(void *)((char *)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 24)) = v38;
  *(void *)((char *)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 32)) = v39;
  outlined init with copy of SignalProviding((uint64_t)v44, (uint64_t)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 48));
  outlined init with copy of SignalProviding((uint64_t)v43, (uint64_t)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 64));
  *(void *)((char *)a12 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *a12 + 80)) = v40;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  __swift_project_boxed_opaque_existential_1(v27, v27[3]);
  dispatch thunk of DeviceState.siriLocale.getter();
  *(void *)&v42[0] = Locale.identifier.getter();
  *((void *)&v42[0] + 1) = v28;
  v41[0] = 45;
  v41[1] = 0xE100000000000000;
  v41[5] = 95;
  void v41[6] = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v34);
  type metadata accessor for INIntentSlotValueType(0);
  _s27PhoneCallFlowDelegatePlugin0A5ErrorOACs0F0AAWlTm_11(&lazy protocol witness table cache variable for type INIntentSlotValueType and conformance INIntentSlotValueType, type metadata accessor for INIntentSlotValueType);
  Dictionary.init(dictionaryLiteral:)();
  unint64_t v29 = a3[3];
  uint64_t v30 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v29);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v30 + 24))(v42, v29, v30);
  outlined init with copy of SignalProviding((uint64_t)v27, (uint64_t)v41);
  unint64_t v31 = type metadata accessor for DucTemplatingLocalContext();
  __swift_storeEnumTagSinglePayload(v35, 1, 1, v31);
  uint64_t v32 = DucTemplatingService.init(ducFamily:locale:extensionValueTypeNamesByValueType:aceServiceInvoker:deviceState:localContext:)();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a3);
  return v32;
}

id specialized static ContactResolution.shouldSkipContactResolution(nlIntent:skIntent:contactQueries:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t p_name = type metadata accessor for PhoneCallNLv3Intent(0);
  v76[3] = p_name;
  v76[4] = (uint64_t)&protocol witness table for PhoneCallNLv3Intent;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v76);
  outlined init with copy of PhoneCallNLv3Intent(a1, (uint64_t)boxed_opaque_existential_1);
  swift_getObjectType();
  if (dynamic_cast_existential_1_conditional((uint64_t)a2))
  {
    uint64_t v9 = v8;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 16);
    id v12 = a2;
    if (v11(ObjectType, v9) == 2)
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      __swift_project_value_buffer(v13, (uint64_t)static Logger.siriPhone);
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v14, v15))
      {

LABEL_83:
        uint64_t v17 = 1;
        goto LABEL_84;
      }
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_0, v14, v15, "#ContactResolution intent is emergency call. bypassing contact resolution", v16, 2u);
      swift_slowDealloc();

LABEL_82:
      goto LABEL_83;
    }
  }
  if (a3)
  {
    if (*(void *)(a3 + 16))
    {
LABEL_10:
      uint64_t v17 = 0;
LABEL_84:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v76);
      return (id)v17;
    }
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.siriPhone);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v14, v27)) {
      goto LABEL_82;
    }
    os_log_type_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v28 = 0;
    unint64_t v29 = "#ContactResolution ContactQueries is empty, bypassing contact resolution";
LABEL_81:
    _os_log_impl(&dword_0, v14, v27, v29, v28, 2u);
    swift_slowDealloc();
    goto LABEL_82;
  }
  unint64_t v18 = outlined bridged method (pb) of @objc INStartVideoCallIntent.contacts.getter(a2);
  if (!v18)
  {
LABEL_77:
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v67 = type metadata accessor for Logger();
    __swift_project_value_buffer(v67, (uint64_t)static Logger.siriPhone);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v14, v27)) {
      goto LABEL_82;
    }
    os_log_type_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v28 = 0;
    unint64_t v29 = "#ContactResolution no contacts to resolve. bypassing contact resolution";
    goto LABEL_81;
  }
  unint64_t v19 = v18;
  if (v18 >> 62)
  {
LABEL_75:
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v20) {
      goto LABEL_14;
    }
    goto LABEL_76;
  }
  uint64_t v20 = *(void *)((char *)&dword_10 + (v18 & 0xFFFFFFFFFFFFFF8));
  if (!v20)
  {
LABEL_76:
    swift_bridgeObjectRelease();
    goto LABEL_77;
  }
LABEL_14:
  unint64_t v71 = v19 & 0xC000000000000001;
  if ((v19 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    uint64_t v21 = *(void **)(v19 + 32);
    swift_bridgeObjectRetain();
    id v22 = v21;
  }
  uint64_t v23 = v22;
  BOOL v24 = INPerson.hasHandleValue.getter();

  if (!v24) {
    goto LABEL_54;
  }
  if (v20 == 1)
  {
LABEL_50:
    swift_bridgeObjectRelease_n();
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    __swift_project_value_buffer(v46, (uint64_t)static Logger.siriPhone);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v14, v27)) {
      goto LABEL_82;
    }
    os_log_type_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v28 = 0;
    unint64_t v29 = "#ContactResolution contacts have been fully resolved. bypassing contact resolution";
    goto LABEL_81;
  }
  id v25 = v71 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v19 + 40);
  uint64_t v30 = v25;
  BOOL v31 = INPerson.hasHandleValue.getter();

  if (!v31)
  {
LABEL_54:
    uint64_t v70 = p_name;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v47 = 4;
    uint64_t p_name = (uint64_t)&TemplatingOperationManager.name;
    do
    {
      if (v71) {
        id v48 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v48 = *(id *)(v19 + 8 * v47);
      }
      uint64_t v49 = v48;
      uint64_t v50 = v47 - 3;
      if (__OFADD__(v47 - 4, 1))
      {
        __break(1u);
        goto LABEL_75;
      }
      id v51 = objc_msgSend(v48, "personHandle", v70);
      if (v51)
      {
        uint64_t v52 = v51;
        id v53 = [v51 emergencyType];

        if (v53)
        {
          swift_bridgeObjectRelease_n();
          if (one-time initialization token for siriPhone != -1) {
            swift_once();
          }
          uint64_t v61 = type metadata accessor for Logger();
          __swift_project_value_buffer(v61, (uint64_t)static Logger.siriPhone);
          id v62 = Logger.logObject.getter();
          os_log_type_t v63 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v62, v63))
          {
            unint64_t v64 = (uint8_t *)swift_slowAlloc();
            v73[0] = swift_slowAlloc();
            *(_DWORD *)unint64_t v64 = 136315138;
            uint64_t v75 = (uint64_t)v53;
            type metadata accessor for INPersonHandleEmergencyType(0);
            uint64_t v65 = String.init<A>(describing:)();
            uint64_t v75 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v66, v73);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_0, v62, v63, "#ContactResolution contact has a handle with an emergency type %s. bypassing contact resolution", v64, 0xCu);
            uint64_t v17 = 1;
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            goto LABEL_84;
          }

          goto LABEL_83;
        }
      }

      ++v47;
    }
    while (v50 != v20);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type StartVideoCallRCHFlowDelegate and conformance StartVideoCallRCHFlowDelegate(&lazy protocol witness table cache variable for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent, (void (*)(uint64_t))type metadata accessor for PhoneCallNLv3Intent);
    uint64_t v54 = IntentNodeTraversable.intentNodes(forOntologyNode:)();
    __chkstk_darwin(v54);
    uint64_t v69 = boxed_opaque_existential_1;
    long long v55 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology21NonTerminalIntentNodeVG_27PhoneCallFlowDelegatePlugin0dJ7Contact_ps5NeverOTg5((uint64_t)closure #1 in PhoneCallNLv3Intent.contacts.getterpartial apply, (uint64_t)v68, v54, (uint64_t)v74);
    swift_bridgeObjectRelease();
    uint64_t v56 = v55[2];
    swift_bridgeObjectRelease();
    outlined init with copy of SignalProviding((uint64_t)v76, (uint64_t)v73);
    if (!v56)
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
      goto LABEL_10;
    }
    id v57 = __swift_project_boxed_opaque_existential_1(v73, v73[3]);
    uint64_t v58 = IntentNodeTraversable.intentNodes(forOntologyNode:)();
    __chkstk_darwin(v58);
    uint64_t v69 = v57;
    os_log_type_t v59 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology21NonTerminalIntentNodeVG_27PhoneCallFlowDelegatePlugin0dJ7Contact_ps5NeverOTg5((uint64_t)closure #1 in PhoneCallNLv3Intent.contacts.getterpartial apply, (uint64_t)v68, v58, (uint64_t)v72);
    swift_bridgeObjectRelease();
    LOBYTE(v58) = specialized Sequence.allSatisfy(_:)((uint64_t)v59, v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
    if ((v58 & 1) == 0) {
      goto LABEL_10;
    }
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v60 = type metadata accessor for Logger();
    __swift_project_value_buffer(v60, (uint64_t)static Logger.siriPhone);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v27))
    {
      os_log_type_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v28 = 0;
      unint64_t v29 = "#ContactResolution server has already expanded contacts into the SK intent. bypassing contact resolution";
      goto LABEL_81;
    }
    goto LABEL_82;
  }
  if (v20 == 2) {
    goto LABEL_50;
  }
  if (v71) {
    id v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v32 = *(id *)(v19 + 48);
  }
  id v33 = v32;
  BOOL v34 = INPerson.hasHandleValue.getter();

  if (!v34) {
    goto LABEL_54;
  }
  if (v20 == 3) {
    goto LABEL_50;
  }
  if (v71) {
    id v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v35 = *(id *)(v19 + 56);
  }
  uint64_t v36 = v35;
  BOOL v37 = INPerson.hasHandleValue.getter();

  if (!v37) {
    goto LABEL_54;
  }
  if (v20 == 4) {
    goto LABEL_50;
  }
  if (v71) {
    id v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v38 = *(id *)(v19 + 64);
  }
  uint64_t v39 = v38;
  BOOL v40 = INPerson.hasHandleValue.getter();

  if (!v40) {
    goto LABEL_54;
  }
  if (v20 == 5) {
    goto LABEL_50;
  }
  uint64_t v41 = 9;
  while (1)
  {
    id result = v71 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v19 + 8 * v41);
    unint64_t v43 = result;
    uint64_t v44 = v41 - 3;
    if (__OFADD__(v41 - 4, 1)) {
      break;
    }
    BOOL v45 = INPerson.hasHandleValue.getter();

    if (!v45) {
      goto LABEL_54;
    }
    ++v41;
    if (v44 == v20) {
      goto LABEL_50;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t p_name;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t (*v11)(uint64_t, uint64_t);
  id v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  BOOL v24;
  id v25;
  uint64_t v26;
  os_log_type_t v27;
  uint8_t *v28;
  const char *v29;
  void *v30;
  BOOL v31;
  id v32;
  void *v33;
  BOOL v34;
  id v35;
  void *v36;
  BOOL v37;
  id v38;
  void *v39;
  BOOL v40;
  uint64_t v41;
  id result;
  void *v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  uint64_t v50;
  id v51;
  void *v52;
  id v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unsigned char v68[16];
  uint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  char v72[8];
  uint64_t v73[5];
  char v74[16];
  uint64_t v75;
  uint64_t v76[5];

  uint64_t p_name = type metadata accessor for PhoneCallNLv3Intent(0);
  v76[3] = p_name;
  v76[4] = (uint64_t)&protocol witness table for PhoneCallNLv3Intent;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v76);
  outlined init with copy of PhoneCallNLv3Intent(a1, (uint64_t)boxed_opaque_existential_1);
  swift_getObjectType();
  if (dynamic_cast_existential_1_conditional((uint64_t)a2))
  {
    uint64_t v9 = v8;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 16);
    id v12 = a2;
    if (v11(ObjectType, v9) == 2)
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      __swift_project_value_buffer(v13, (uint64_t)static Logger.siriPhone);
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v14, v15))
      {

LABEL_83:
        uint64_t v17 = 1;
        goto LABEL_84;
      }
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_0, v14, v15, "#ContactResolution intent is emergency call. bypassing contact resolution", v16, 2u);
      swift_slowDealloc();

LABEL_82:
      goto LABEL_83;
    }
  }
  if (a3)
  {
    if (*(void *)(a3 + 16))
    {
LABEL_10:
      uint64_t v17 = 0;
LABEL_84:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v76);
      return (id)v17;
    }
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.siriPhone);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v14, v27)) {
      goto LABEL_82;
    }
    os_log_type_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v28 = 0;
    unint64_t v29 = "#ContactResolution ContactQueries is empty, bypassing contact resolution";
LABEL_81:
    _os_log_impl(&dword_0, v14, v27, v29, v28, 2u);
    swift_slowDealloc();
    goto LABEL_82;
  }
  unint64_t v18 = outlined bridged method (pb) of @objc INStartCallIntent.contacts.getter(a2);
  if (!v18)
  {
LABEL_77:
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v67 = type metadata accessor for Logger();
    __swift_project_value_buffer(v67, (uint64_t)static Logger.siriPhone);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v14, v27)) {
      goto LABEL_82;
    }
    os_log_type_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v28 = 0;
    unint64_t v29 = "#ContactResolution no contacts to resolve. bypassing contact resolution";
    goto LABEL_81;
  }
  unint64_t v19 = v18;
  if (v18 >> 62)
  {
LABEL_75:
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v20) {
      goto LABEL_14;
    }
    goto LABEL_76;
  }
  uint64_t v20 = *(void *)((char *)&dword_10 + (v18 & 0xFFFFFFFFFFFFFF8));
  if (!v20)
  {
LABEL_76:
    swift_bridgeObjectRelease();
    goto LABEL_77;
  }
LABEL_14:
  unint64_t v71 = v19 & 0xC000000000000001;
  if ((v19 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    uint64_t v21 = *(void **)(v19 + 32);
    swift_bridgeObjectRetain();
    id v22 = v21;
  }
  uint64_t v23 = v22;
  BOOL v24 = INPerson.hasHandleValue.getter();

  if (!v24) {
    goto LABEL_54;
  }
  if (v20 == 1)
  {
LABEL_50:
    swift_bridgeObjectRelease_n();
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    __swift_project_value_buffer(v46, (uint64_t)static Logger.siriPhone);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v14, v27)) {
      goto LABEL_82;
    }
    os_log_type_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v28 = 0;
    unint64_t v29 = "#ContactResolution contacts have been fully resolved. bypassing contact resolution";
    goto LABEL_81;
  }
  id v25 = v71 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v19 + 40);
  uint64_t v30 = v25;
  BOOL v31 = INPerson.hasHandleValue.getter();

  if (!v31)
  {
LABEL_54:
    uint64_t v70 = p_name;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v47 = 4;
    uint64_t p_name = (uint64_t)&TemplatingOperationManager.name;
    do
    {
      if (v71) {
        id v48 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v48 = *(id *)(v19 + 8 * v47);
      }
      uint64_t v49 = v48;
      uint64_t v50 = v47 - 3;
      if (__OFADD__(v47 - 4, 1))
      {
        __break(1u);
        goto LABEL_75;
      }
      id v51 = objc_msgSend(v48, "personHandle", v70);
      if (v51)
      {
        uint64_t v52 = v51;
        id v53 = [v51 emergencyType];

        if (v53)
        {
          swift_bridgeObjectRelease_n();
          if (one-time initialization token for siriPhone != -1) {
            swift_once();
          }
          uint64_t v61 = type metadata accessor for Logger();
          __swift_project_value_buffer(v61, (uint64_t)static Logger.siriPhone);
          id v62 = Logger.logObject.getter();
          os_log_type_t v63 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v62, v63))
          {
            unint64_t v64 = (uint8_t *)swift_slowAlloc();
            v73[0] = swift_slowAlloc();
            *(_DWORD *)unint64_t v64 = 136315138;
            uint64_t v75 = (uint64_t)v53;
            type metadata accessor for INPersonHandleEmergencyType(0);
            uint64_t v65 = String.init<A>(describing:)();
            uint64_t v75 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v66, v73);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_0, v62, v63, "#ContactResolution contact has a handle with an emergency type %s. bypassing contact resolution", v64, 0xCu);
            uint64_t v17 = 1;
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            goto LABEL_84;
          }

          goto LABEL_83;
        }
      }

      ++v47;
    }
    while (v50 != v20);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type StartVideoCallRCHFlowDelegate and conformance StartVideoCallRCHFlowDelegate(&lazy protocol witness table cache variable for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent, (void (*)(uint64_t))type metadata accessor for PhoneCallNLv3Intent);
    uint64_t v54 = IntentNodeTraversable.intentNodes(forOntologyNode:)();
    __chkstk_darwin(v54);
    uint64_t v69 = boxed_opaque_existential_1;
    long long v55 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology21NonTerminalIntentNodeVG_27PhoneCallFlowDelegatePlugin0dJ7Contact_ps5NeverOTg5((uint64_t)closure #1 in PhoneCallNLv3Intent.contacts.getterpartial apply, (uint64_t)v68, v54, (uint64_t)v74);
    swift_bridgeObjectRelease();
    uint64_t v56 = v55[2];
    swift_bridgeObjectRelease();
    outlined init with copy of SignalProviding((uint64_t)v76, (uint64_t)v73);
    if (!v56)
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
      goto LABEL_10;
    }
    id v57 = __swift_project_boxed_opaque_existential_1(v73, v73[3]);
    uint64_t v58 = IntentNodeTraversable.intentNodes(forOntologyNode:)();
    __chkstk_darwin(v58);
    uint64_t v69 = v57;
    os_log_type_t v59 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology21NonTerminalIntentNodeVG_27PhoneCallFlowDelegatePlugin0dJ7Contact_ps5NeverOTg5((uint64_t)closure #1 in PhoneCallNLv3Intent.contacts.getterpartial apply, (uint64_t)v68, v58, (uint64_t)v72);
    swift_bridgeObjectRelease();
    LOBYTE(v58) = specialized Sequence.allSatisfy(_:)((uint64_t)v59, v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
    if ((v58 & 1) == 0) {
      goto LABEL_10;
    }
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v60 = type metadata accessor for Logger();
    __swift_project_value_buffer(v60, (uint64_t)static Logger.siriPhone);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v27))
    {
      os_log_type_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v28 = 0;
      unint64_t v29 = "#ContactResolution server has already expanded contacts into the SK intent. bypassing contact resolution";
      goto LABEL_81;
    }
    goto LABEL_82;
  }
  if (v20 == 2) {
    goto LABEL_50;
  }
  if (v71) {
    id v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v32 = *(id *)(v19 + 48);
  }
  id v33 = v32;
  BOOL v34 = INPerson.hasHandleValue.getter();

  if (!v34) {
    goto LABEL_54;
  }
  if (v20 == 3) {
    goto LABEL_50;
  }
  if (v71) {
    id v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v35 = *(id *)(v19 + 56);
  }
  uint64_t v36 = v35;
  BOOL v37 = INPerson.hasHandleValue.getter();

  if (!v37) {
    goto LABEL_54;
  }
  if (v20 == 4) {
    goto LABEL_50;
  }
  if (v71) {
    id v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v38 = *(id *)(v19 + 64);
  }
  uint64_t v39 = v38;
  BOOL v40 = INPerson.hasHandleValue.getter();

  if (!v40) {
    goto LABEL_54;
  }
  if (v20 == 5) {
    goto LABEL_50;
  }
  uint64_t v41 = 9;
  while (1)
  {
    id result = v71 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v19 + 8 * v41);
    unint64_t v43 = result;
    uint64_t v44 = v41 - 3;
    if (__OFADD__(v41 - 4, 1)) {
      break;
    }
    BOOL v45 = INPerson.hasHandleValue.getter();

    if (!v45) {
      goto LABEL_54;
    }
    ++v41;
    if (v44 == v20) {
      goto LABEL_50;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized static ContactResolution.updateSiriKitIntent(siriKitIntent:contactQueries:hasEmergencyContact:app:locale:nlIntent:sharedGlobals:multicardinalIndex:siriKitEventSender:emergencyContactResolution:)(void *a1, uint64_t a2, char a3, void (*a4)(char *, unint64_t, uint64_t), uint64_t a5, uint64_t a6, void *a7, uint64_t a8, char a9, void *a10, uint64_t a11)
{
  uint64_t v109 = a8;
  id v112 = a4;
  uint64_t v17 = type metadata accessor for ResolvedSiriKitContact();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v110 = v17;
  uint64_t v111 = v18;
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v104 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for Locale();
  __chkstk_darwin(v21 - 8);
  uint64_t v23 = (char *)&v104 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for ContactResolverConfigHashable();
  __chkstk_darwin(v24 - 8);
  uint64_t v26 = (uint64_t *)((char *)&v104 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v117[3] = type metadata accessor for PhoneCallNLv3Intent(0);
  v117[4] = (uint64_t)&protocol witness table for PhoneCallNLv3Intent;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v117);
  outlined init with copy of PhoneCallNLv3Intent(a6, (uint64_t)boxed_opaque_existential_1);
  if (a3)
  {
    swift_getObjectType();
    uint64_t v28 = dynamic_cast_existential_1_conditional((uint64_t)a1);
    uint64_t v30 = one-time initialization token for siriPhone;
    if (v28)
    {
      uint64_t v31 = v28;
      uint64_t v32 = v29;
      id v33 = a1;
      if (v30 != -1) {
        swift_once();
      }
      uint64_t v34 = type metadata accessor for Logger();
      __swift_project_value_buffer(v34, (uint64_t)static Logger.siriPhone);
      id v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v35, v36))
      {
        BOOL v37 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)BOOL v37 = 0;
        _os_log_impl(&dword_0, v35, v36, "#ContactResolution NL intent has an emergency contact. Bypassing contact resolution.", v37, 2u);
        swift_slowDealloc();
      }

      id v38 = [objc_allocWithZone((Class)HKHealthStore) init];
      id v39 = [objc_allocWithZone((Class)HKMedicalIDStore) initWithHealthStore:v38];

      uint64_t v115 = type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for HKMedicalIDStore);
      uint64_t v116 = &protocol witness table for HKMedicalIDStore;
      *(void *)&long long v114 = v39;
      (*(void (**)(uint64_t, uint64_t, uint64_t, long long *))(*(void *)a11 + 80))(v31, v32, a5, &v114);

      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v114);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v117);
    }
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    __swift_project_value_buffer(v40, (uint64_t)static Logger.siriPhone);
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      unint64_t v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v43 = 0;
      _os_log_impl(&dword_0, v41, v42, "#ContactResolution NL intent has an emergency contact but is not a CallingIntent!", v43, 2u);
      swift_slowDealloc();
    }
  }
  if (specialized static ContactResolution.shouldSkipContactResolution(nlIntent:skIntent:contactQueries:)((uint64_t)boxed_opaque_existential_1, a1, a2))return __swift_destroy_boxed_opaque_existential_1((uint64_t)v117); {
  uint64_t v106 = a2;
  }
  uint64_t v44 = _swiftEmptyArrayStorage;
  uint64_t v108 = v26;
  if (v112)
  {
    uint64_t v45 = App.appIdentifier.getter();
    if (v46)
    {
      uint64_t v47 = v45;
      uint64_t v48 = v46;
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v44 = v49;
      unint64_t v50 = v49[2];
      if (v50 >= v49[3] >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v44 = v102;
      }
      v44[2] = v50 + 1;
      id v51 = &v44[2 * v50];
      v51[4] = v47;
      v51[5] = v48;
    }
    else
    {
      uint64_t v44 = _swiftEmptyArrayStorage;
    }
  }
  uint64_t v107 = v44;
  if (one-time initialization token for emptyStartCallIntent != -1) {
    swift_once();
  }
  id v52 = [(id)static PhoneCallIntentClassNames.emptyStartCallIntent _className];
  uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v55 = v54;

  uint64_t v57 = a7[3];
  uint64_t v56 = a7[4];
  __swift_project_boxed_opaque_existential_1(a7, v57);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v56 + 8))(&v114, v57, v56);
  __swift_project_boxed_opaque_existential_1(&v114, v115);
  DeviceState.siriInputLocale.getter();
  outlined init with copy of SignalProviding((uint64_t)a7, (uint64_t)v113);
  id v58 = a1;
  uint64_t v59 = (uint64_t)v107;
  swift_bridgeObjectRetain();
  uint64_t v60 = v108;
  ContactResolverConfigHashable.init(intentTypeName:locale:bundleIds:siriKitIntent:sharedGlobals:)(v53, v55, (uint64_t)v23, v59, v58, (uint64_t)&protocol witness table for INStartVideoCallIntent, (uint64_t)v113, v108);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v114);
  uint64_t v61 = a7[3];
  uint64_t v62 = a7[4];
  __swift_project_boxed_opaque_existential_1(a7, v61);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v62 + 96))(&v114, v61, v62);
  uint64_t v63 = v115;
  unint64_t v64 = v116;
  __swift_project_boxed_opaque_existential_1(&v114, v115);
  uint64_t v65 = ((uint64_t (*)(uint64_t, uint64_t *, uint64_t, _UNKNOWN **))v64[2])(v106, v60, v63, v64);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v114);
  __swift_project_boxed_opaque_existential_1(a10, a10[3]);
  type metadata accessor for SiriKitEvent();
  id v105 = v58;
  id v66 = [v58 typeName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v106 = v65;

  outlined init with copy of SignalProviding((uint64_t)v117, (uint64_t)&v114);
  uint64_t v67 = swift_allocObject();
  *(void *)(v67 + 16) = v112;
  outlined init with take of AppSelectionSignalComponent(&v114, v67 + 24);
  *(void *)(v67 + 64) = v106;
  swift_retain();
  swift_bridgeObjectRetain();
  LOBYTE(v113[0]) = 0;
  SiriKitEvent.__allocating_init(stateType:taskType:statusReason:_:)();
  dispatch thunk of SiriKitEventSending.send(_:)();
  uint64_t v68 = v106;
  swift_release();
  uint64_t v69 = *(void *)(v68 + 16);
  if (v69)
  {
    *(void *)&long long v114 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v70 = v20;
    uint64_t v71 = v110;
    id v112 = *(void (**)(char *, unint64_t, uint64_t))(v111 + 16);
    unint64_t v72 = v68 + ((*(unsigned __int8 *)(v111 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v111 + 80));
    uint64_t v73 = *(void *)(v111 + 72);
    os_log_type_t v74 = (void (**)(char *, uint64_t))(v111 + 8);
    do
    {
      v112(v70, v72, v71);
      ResolvedSiriKitContact.person.getter();
      (*v74)(v70, v71);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v72 += v73;
      --v69;
    }
    while (v69);
    v75._rawValue = (void *)v114;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v75._rawValue = _swiftEmptyArrayStorage;
  }
  uint64_t v76 = v105;
  if ((unint64_t)v75._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v77 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v77 = *(void *)((char *)&dword_10 + ((unint64_t)v75._rawValue & 0xFFFFFFFFFFFFFF8));
  }
  if (v77)
  {
    id v78 = static ContactResolution.dedupeContacts(contacts:)();
    swift_bridgeObjectRelease();
    v75._rawValue = v78;
  }
  if (a9)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v87 = type metadata accessor for Logger();
    __swift_project_value_buffer(v87, (uint64_t)static Logger.siriPhone);
    uint64_t v88 = Logger.logObject.getter();
    os_log_type_t v89 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v88, v89)) {
      goto LABEL_74;
    }
    uint64_t v90 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v90 = 0;
    uint64_t v91 = "#ContactResolution multicardinalIndex is nil, overwriting contacts slot";
    goto LABEL_73;
  }
  uint64_t v79 = outlined bridged method (pb) of @objc INStartVideoCallIntent.contacts.getter(v76);
  if (!v79)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v92 = type metadata accessor for Logger();
    __swift_project_value_buffer(v92, (uint64_t)static Logger.siriPhone);
    uint64_t v88 = Logger.logObject.getter();
    os_log_type_t v89 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v88, v89)) {
      goto LABEL_74;
    }
    uint64_t v90 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v90 = 0;
    uint64_t v91 = "#ContactResolution siriKitIntent contacts slot is nil, overwriting contacts slot";
    goto LABEL_73;
  }
  *(void *)&long long v114 = v79;
  uint64_t v80 = &unk_583000;
  if (!((unint64_t)v75._rawValue >> 62))
  {
    uint64_t v81 = *(void *)((char *)&dword_10 + ((unint64_t)v75._rawValue & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (v81) {
      goto LABEL_35;
    }
LABEL_68:
    swift_bridgeObjectRelease();
    goto LABEL_69;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_68;
  }
LABEL_35:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, ((unint64_t)v75._rawValue & 0xC000000000000001) == 0, v75._rawValue);
  if (((unint64_t)v75._rawValue & 0xC000000000000001) != 0) {
    id v82 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v82 = *((id *)v75._rawValue + 4);
  }
  uint64_t v83 = v82;
  swift_bridgeObjectRelease();
  unint64_t v84 = v114;
  if ((unint64_t)v114 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v85 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v85 = *(void *)((char *)&dword_10 + (v114 & 0xFFFFFFFFFFFFFF8));
  }
  if (v85 <= v109) {
    goto LABEL_54;
  }
  if ((unint64_t)v75._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v86 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    unint64_t v84 = v114;
  }
  else
  {
    uint64_t v86 = *(void *)((char *)&dword_10 + ((unint64_t)v75._rawValue & 0xFFFFFFFFFFFFFF8));
  }
  if (v84 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v93 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v93 = *(void *)((char *)&dword_10 + (v84 & 0xFFFFFFFFFFFFFF8));
  }
  if (v93 < v86)
  {
LABEL_54:

    uint64_t v80 = (void *)&unk_583000;
LABEL_69:
    swift_bridgeObjectRelease();
    if (v80[466] != -1) {
      swift_once();
    }
    uint64_t v103 = type metadata accessor for Logger();
    __swift_project_value_buffer(v103, (uint64_t)static Logger.siriPhone);
    uint64_t v88 = Logger.logObject.getter();
    os_log_type_t v89 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v88, v89)) {
      goto LABEL_74;
    }
    uint64_t v90 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v90 = 0;
    uint64_t v91 = "#ContactResolution: overwriting contacts slot";
LABEL_73:
    _os_log_impl(&dword_0, v88, v89, v91, v90, 2u);
    swift_slowDealloc();
LABEL_74:

    INStartVideoCallIntent.overwriteContacts(newContacts:)(v75);
    goto LABEL_75;
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v94 = type metadata accessor for Logger();
  __swift_project_value_buffer(v94, (uint64_t)static Logger.siriPhone);
  uint64_t v95 = Logger.logObject.getter();
  os_log_type_t v96 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v95, v96))
  {
    uint64_t v97 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v97 = 134217984;
    v113[0] = v109;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v95, v96, "#ContactResolution updating person at index %ld", v97, 0xCu);
    swift_slowDealloc();
  }

  uint64_t v98 = v114;
  id v99 = v83;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  if (!result || v98 < 0 || (v98 & 0x4000000000000000) != 0)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew()(v98);
    uint64_t v98 = result;
    *(void *)&long long v114 = result;
  }
  if (v109 < 0)
  {
    __break(1u);
  }
  else if (*(void *)((char *)&dword_10 + (v98 & 0xFFFFFFFFFFFFFF8)) > (unint64_t)v109)
  {
    uint64_t v101 = *(void **)((char *)&stru_20.cmd + 8 * v109 + (v98 & 0xFFFFFFFFFFFFFF8));
    *(void *)((char *)&stru_20.cmd + 8 * v109 + (v98 & 0xFFFFFFFFFFFFFF8)) = v99;

    specialized Array._endMutation()();
    INStartVideoCallIntent.overwriteContacts(newContacts:)((Swift::OpaquePointer)v114);

LABEL_75:
    swift_bridgeObjectRelease();
    outlined destroy of PhoneCallNLv3Intent((uint64_t)v108, (void (*)(void))type metadata accessor for ContactResolverConfigHashable);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v117);
  }
  __break(1u);
  return result;
}

{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  id v38;
  id v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  unint64_t v50;
  void *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _UNKNOWN **v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  void (**v74)(char *, uint64_t);
  Swift::OpaquePointer v75;
  void *v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  id v82;
  void *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  uint8_t *v97;
  uint64_t v98;
  id v99;
  uint64_t result;
  void *v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  uint64_t v106;
  void *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(char *, unint64_t, uint64_t);
  void v113[5];
  long long v114;
  uint64_t v115;
  _UNKNOWN **v116;
  uint64_t v117[6];

  uint64_t v109 = a8;
  id v112 = a4;
  uint64_t v17 = type metadata accessor for ResolvedSiriKitContact();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v110 = v17;
  uint64_t v111 = v18;
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v104 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for Locale();
  __chkstk_darwin(v21 - 8);
  uint64_t v23 = (char *)&v104 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for ContactResolverConfigHashable();
  __chkstk_darwin(v24 - 8);
  uint64_t v26 = (uint64_t *)((char *)&v104 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v117[3] = type metadata accessor for PhoneCallNLv3Intent(0);
  v117[4] = (uint64_t)&protocol witness table for PhoneCallNLv3Intent;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v117);
  outlined init with copy of PhoneCallNLv3Intent(a6, (uint64_t)boxed_opaque_existential_1);
  if (a3)
  {
    swift_getObjectType();
    uint64_t v28 = dynamic_cast_existential_1_conditional((uint64_t)a1);
    uint64_t v30 = one-time initialization token for siriPhone;
    if (v28)
    {
      uint64_t v31 = v28;
      uint64_t v32 = v29;
      id v33 = a1;
      if (v30 != -1) {
        swift_once();
      }
      uint64_t v34 = type metadata accessor for Logger();
      __swift_project_value_buffer(v34, (uint64_t)static Logger.siriPhone);
      id v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v35, v36))
      {
        BOOL v37 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)BOOL v37 = 0;
        _os_log_impl(&dword_0, v35, v36, "#ContactResolution NL intent has an emergency contact. Bypassing contact resolution.", v37, 2u);
        swift_slowDealloc();
      }

      id v38 = [objc_allocWithZone((Class)HKHealthStore) init];
      id v39 = [objc_allocWithZone((Class)HKMedicalIDStore) initWithHealthStore:v38];

      uint64_t v115 = type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for HKMedicalIDStore);
      uint64_t v116 = &protocol witness table for HKMedicalIDStore;
      *(void *)&long long v114 = v39;
      (*(void (**)(uint64_t, uint64_t, uint64_t, long long *))(*(void *)a11 + 80))(v31, v32, a5, &v114);

      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v114);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v117);
    }
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    __swift_project_value_buffer(v40, (uint64_t)static Logger.siriPhone);
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      unint64_t v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v43 = 0;
      _os_log_impl(&dword_0, v41, v42, "#ContactResolution NL intent has an emergency contact but is not a CallingIntent!", v43, 2u);
      swift_slowDealloc();
    }
  }
  if (specialized static ContactResolution.shouldSkipContactResolution(nlIntent:skIntent:contactQueries:)((uint64_t)boxed_opaque_existential_1, a1, a2))return __swift_destroy_boxed_opaque_existential_1((uint64_t)v117); {
  uint64_t v106 = a2;
  }
  uint64_t v44 = _swiftEmptyArrayStorage;
  uint64_t v108 = v26;
  if (v112)
  {
    uint64_t v45 = App.appIdentifier.getter();
    if (v46)
    {
      uint64_t v47 = v45;
      uint64_t v48 = v46;
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v44 = v49;
      unint64_t v50 = v49[2];
      if (v50 >= v49[3] >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v44 = v102;
      }
      v44[2] = v50 + 1;
      id v51 = &v44[2 * v50];
      v51[4] = v47;
      v51[5] = v48;
    }
    else
    {
      uint64_t v44 = _swiftEmptyArrayStorage;
    }
  }
  uint64_t v107 = v44;
  if (one-time initialization token for emptyStartCallIntent != -1) {
    swift_once();
  }
  id v52 = [(id)static PhoneCallIntentClassNames.emptyStartCallIntent _className];
  uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v55 = v54;

  uint64_t v57 = a7[3];
  uint64_t v56 = a7[4];
  __swift_project_boxed_opaque_existential_1(a7, v57);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v56 + 8))(&v114, v57, v56);
  __swift_project_boxed_opaque_existential_1(&v114, v115);
  DeviceState.siriInputLocale.getter();
  outlined init with copy of SignalProviding((uint64_t)a7, (uint64_t)v113);
  id v58 = a1;
  uint64_t v59 = (uint64_t)v107;
  swift_bridgeObjectRetain();
  uint64_t v60 = v108;
  ContactResolverConfigHashable.init(intentTypeName:locale:bundleIds:siriKitIntent:sharedGlobals:)(v53, v55, (uint64_t)v23, v59, v58, (uint64_t)&protocol witness table for INStartAudioCallIntent, (uint64_t)v113, v108);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v114);
  uint64_t v61 = a7[3];
  uint64_t v62 = a7[4];
  __swift_project_boxed_opaque_existential_1(a7, v61);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v62 + 96))(&v114, v61, v62);
  uint64_t v63 = v115;
  unint64_t v64 = v116;
  __swift_project_boxed_opaque_existential_1(&v114, v115);
  uint64_t v65 = ((uint64_t (*)(uint64_t, uint64_t *, uint64_t, _UNKNOWN **))v64[2])(v106, v60, v63, v64);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v114);
  __swift_project_boxed_opaque_existential_1(a10, a10[3]);
  type metadata accessor for SiriKitEvent();
  id v105 = v58;
  id v66 = [v58 typeName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v106 = v65;

  outlined init with copy of SignalProviding((uint64_t)v117, (uint64_t)&v114);
  uint64_t v67 = swift_allocObject();
  *(void *)(v67 + 16) = v112;
  outlined init with take of AppSelectionSignalComponent(&v114, v67 + 24);
  *(void *)(v67 + 64) = v106;
  swift_retain();
  swift_bridgeObjectRetain();
  LOBYTE(v113[0]) = 0;
  SiriKitEvent.__allocating_init(stateType:taskType:statusReason:_:)();
  dispatch thunk of SiriKitEventSending.send(_:)();
  uint64_t v68 = v106;
  swift_release();
  uint64_t v69 = *(void *)(v68 + 16);
  if (v69)
  {
    *(void *)&long long v114 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v70 = v20;
    uint64_t v71 = v110;
    id v112 = *(void (**)(char *, unint64_t, uint64_t))(v111 + 16);
    unint64_t v72 = v68 + ((*(unsigned __int8 *)(v111 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v111 + 80));
    uint64_t v73 = *(void *)(v111 + 72);
    os_log_type_t v74 = (void (**)(char *, uint64_t))(v111 + 8);
    do
    {
      v112(v70, v72, v71);
      ResolvedSiriKitContact.person.getter();
      (*v74)(v70, v71);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v72 += v73;
      --v69;
    }
    while (v69);
    v75._rawValue = (void *)v114;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v75._rawValue = _swiftEmptyArrayStorage;
  }
  uint64_t v76 = v105;
  if ((unint64_t)v75._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v77 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v77 = *(void *)((char *)&dword_10 + ((unint64_t)v75._rawValue & 0xFFFFFFFFFFFFFF8));
  }
  if (v77)
  {
    id v78 = static ContactResolution.dedupeContacts(contacts:)();
    swift_bridgeObjectRelease();
    v75._rawValue = v78;
  }
  if (a9)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v87 = type metadata accessor for Logger();
    __swift_project_value_buffer(v87, (uint64_t)static Logger.siriPhone);
    uint64_t v88 = Logger.logObject.getter();
    os_log_type_t v89 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v88, v89)) {
      goto LABEL_74;
    }
    uint64_t v90 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v90 = 0;
    uint64_t v91 = "#ContactResolution multicardinalIndex is nil, overwriting contacts slot";
    goto LABEL_73;
  }
  uint64_t v79 = outlined bridged method (pb) of @objc INStartVideoCallIntent.contacts.getter(v76);
  if (!v79)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v92 = type metadata accessor for Logger();
    __swift_project_value_buffer(v92, (uint64_t)static Logger.siriPhone);
    uint64_t v88 = Logger.logObject.getter();
    os_log_type_t v89 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v88, v89)) {
      goto LABEL_74;
    }
    uint64_t v90 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v90 = 0;
    uint64_t v91 = "#ContactResolution siriKitIntent contacts slot is nil, overwriting contacts slot";
    goto LABEL_73;
  }
  *(void *)&long long v114 = v79;
  uint64_t v80 = &unk_583000;
  if (!((unint64_t)v75._rawValue >> 62))
  {
    uint64_t v81 = *(void *)((char *)&dword_10 + ((unint64_t)v75._rawValue & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (v81) {
      goto LABEL_35;
    }
LABEL_68:
    swift_bridgeObjectRelease();
    goto LABEL_69;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_68;
  }
LABEL_35:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, ((unint64_t)v75._rawValue & 0xC000000000000001) == 0);
  if (((unint64_t)v75._rawValue & 0xC000000000000001) != 0) {
    id v82 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v82 = *((id *)v75._rawValue + 4);
  }
  uint64_t v83 = v82;
  swift_bridgeObjectRelease();
  unint64_t v84 = v114;
  if ((unint64_t)v114 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v85 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v85 = *(void *)((char *)&dword_10 + (v114 & 0xFFFFFFFFFFFFFF8));
  }
  if (v85 <= v109) {
    goto LABEL_54;
  }
  if ((unint64_t)v75._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v86 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    unint64_t v84 = v114;
  }
  else
  {
    uint64_t v86 = *(void *)((char *)&dword_10 + ((unint64_t)v75._rawValue & 0xFFFFFFFFFFFFFF8));
  }
  if (v84 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v93 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v93 = *(void *)((char *)&dword_10 + (v84 & 0xFFFFFFFFFFFFFF8));
  }
  if (v93 < v86)
  {
LABEL_54:

    uint64_t v80 = (void *)&unk_583000;
LABEL_69:
    swift_bridgeObjectRelease();
    if (v80[466] != -1) {
      swift_once();
    }
    uint64_t v103 = type metadata accessor for Logger();
    __swift_project_value_buffer(v103, (uint64_t)static Logger.siriPhone);
    uint64_t v88 = Logger.logObject.getter();
    os_log_type_t v89 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v88, v89)) {
      goto LABEL_74;
    }
    uint64_t v90 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v90 = 0;
    uint64_t v91 = "#ContactResolution: overwriting contacts slot";
LABEL_73:
    _os_log_impl(&dword_0, v88, v89, v91, v90, 2u);
    swift_slowDealloc();
LABEL_74:

    INStartVideoCallIntent.overwriteContacts(newContacts:)(v75);
    goto LABEL_75;
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v94 = type metadata accessor for Logger();
  __swift_project_value_buffer(v94, (uint64_t)static Logger.siriPhone);
  uint64_t v95 = Logger.logObject.getter();
  os_log_type_t v96 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v95, v96))
  {
    uint64_t v97 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v97 = 134217984;
    v113[0] = v109;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v95, v96, "#ContactResolution updating person at index %ld", v97, 0xCu);
    swift_slowDealloc();
  }

  uint64_t v98 = v114;
  id v99 = v83;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  if (!result || v98 < 0 || (v98 & 0x4000000000000000) != 0)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew()(v98);
    uint64_t v98 = result;
    *(void *)&long long v114 = result;
  }
  if (v109 < 0)
  {
    __break(1u);
  }
  else if (*(void *)((char *)&dword_10 + (v98 & 0xFFFFFFFFFFFFFF8)) > (unint64_t)v109)
  {
    uint64_t v101 = *(void **)((char *)&stru_20.cmd + 8 * v109 + (v98 & 0xFFFFFFFFFFFFFF8));
    *(void *)((char *)&stru_20.cmd + 8 * v109 + (v98 & 0xFFFFFFFFFFFFFF8)) = v99;

    specialized Array._endMutation()();
    INStartVideoCallIntent.overwriteContacts(newContacts:)((Swift::OpaquePointer)v114);

LABEL_75:
    swift_bridgeObjectRelease();
    outlined destroy of PhoneCallNLv3Intent((uint64_t)v108, (void (*)(void))type metadata accessor for ContactResolverConfigHashable);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v117);
  }
  __break(1u);
  return result;
}

{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  id v38;
  id v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  unint64_t v50;
  void *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _UNKNOWN **v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  void (**v74)(char *, uint64_t);
  Swift::OpaquePointer v75;
  void *v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  id v82;
  void *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  uint8_t *v97;
  uint64_t v98;
  id v99;
  uint64_t result;
  void *v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  uint64_t v106;
  void *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(char *, unint64_t, uint64_t);
  void v113[5];
  long long v114;
  uint64_t v115;
  _UNKNOWN **v116;
  uint64_t v117[6];

  uint64_t v109 = a8;
  id v112 = a4;
  uint64_t v17 = type metadata accessor for ResolvedSiriKitContact();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v110 = v17;
  uint64_t v111 = v18;
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v104 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for Locale();
  __chkstk_darwin(v21 - 8);
  uint64_t v23 = (char *)&v104 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for ContactResolverConfigHashable();
  __chkstk_darwin(v24 - 8);
  uint64_t v26 = (uint64_t *)((char *)&v104 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v117[3] = type metadata accessor for PhoneCallNLv3Intent(0);
  v117[4] = (uint64_t)&protocol witness table for PhoneCallNLv3Intent;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v117);
  outlined init with copy of PhoneCallNLv3Intent(a6, (uint64_t)boxed_opaque_existential_1);
  if (a3)
  {
    swift_getObjectType();
    uint64_t v28 = dynamic_cast_existential_1_conditional((uint64_t)a1);
    uint64_t v30 = one-time initialization token for siriPhone;
    if (v28)
    {
      uint64_t v31 = v28;
      uint64_t v32 = v29;
      id v33 = a1;
      if (v30 != -1) {
        swift_once();
      }
      uint64_t v34 = type metadata accessor for Logger();
      __swift_project_value_buffer(v34, (uint64_t)static Logger.siriPhone);
      id v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v35, v36))
      {
        BOOL v37 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)BOOL v37 = 0;
        _os_log_impl(&dword_0, v35, v36, "#ContactResolution NL intent has an emergency contact. Bypassing contact resolution.", v37, 2u);
        swift_slowDealloc();
      }

      id v38 = [objc_allocWithZone((Class)HKHealthStore) init];
      id v39 = [objc_allocWithZone((Class)HKMedicalIDStore) initWithHealthStore:v38];

      uint64_t v115 = type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for HKMedicalIDStore);
      uint64_t v116 = &protocol witness table for HKMedicalIDStore;
      *(void *)&long long v114 = v39;
      (*(void (**)(uint64_t, uint64_t, uint64_t, long long *))(*(void *)a11 + 80))(v31, v32, a5, &v114);

      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v114);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v117);
    }
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    __swift_project_value_buffer(v40, (uint64_t)static Logger.siriPhone);
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      unint64_t v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v43 = 0;
      _os_log_impl(&dword_0, v41, v42, "#ContactResolution NL intent has an emergency contact but is not a CallingIntent!", v43, 2u);
      swift_slowDealloc();
    }
  }
  if (specialized static ContactResolution.shouldSkipContactResolution(nlIntent:skIntent:contactQueries:)((uint64_t)boxed_opaque_existential_1, a1, a2))return __swift_destroy_boxed_opaque_existential_1((uint64_t)v117); {
  uint64_t v106 = a2;
  }
  uint64_t v44 = _swiftEmptyArrayStorage;
  uint64_t v108 = v26;
  if (v112)
  {
    uint64_t v45 = App.appIdentifier.getter();
    if (v46)
    {
      uint64_t v47 = v45;
      uint64_t v48 = v46;
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v44 = v49;
      unint64_t v50 = v49[2];
      if (v50 >= v49[3] >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v44 = v102;
      }
      v44[2] = v50 + 1;
      id v51 = &v44[2 * v50];
      v51[4] = v47;
      v51[5] = v48;
    }
    else
    {
      uint64_t v44 = _swiftEmptyArrayStorage;
    }
  }
  uint64_t v107 = v44;
  if (one-time initialization token for emptyStartCallIntent != -1) {
    swift_once();
  }
  id v52 = [(id)static PhoneCallIntentClassNames.emptyStartCallIntent _className];
  uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v55 = v54;

  uint64_t v57 = a7[3];
  uint64_t v56 = a7[4];
  __swift_project_boxed_opaque_existential_1(a7, v57);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v56 + 8))(&v114, v57, v56);
  __swift_project_boxed_opaque_existential_1(&v114, v115);
  DeviceState.siriInputLocale.getter();
  outlined init with copy of SignalProviding((uint64_t)a7, (uint64_t)v113);
  id v58 = a1;
  uint64_t v59 = (uint64_t)v107;
  swift_bridgeObjectRetain();
  uint64_t v60 = v108;
  ContactResolverConfigHashable.init(intentTypeName:locale:bundleIds:siriKitIntent:sharedGlobals:)(v53, v55, (uint64_t)v23, v59, v58, (uint64_t)&protocol witness table for INStartCallIntent, (uint64_t)v113, v108);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v114);
  uint64_t v61 = a7[3];
  uint64_t v62 = a7[4];
  __swift_project_boxed_opaque_existential_1(a7, v61);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v62 + 96))(&v114, v61, v62);
  uint64_t v63 = v115;
  unint64_t v64 = v116;
  __swift_project_boxed_opaque_existential_1(&v114, v115);
  uint64_t v65 = ((uint64_t (*)(uint64_t, uint64_t *, uint64_t, _UNKNOWN **))v64[2])(v106, v60, v63, v64);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v114);
  __swift_project_boxed_opaque_existential_1(a10, a10[3]);
  type metadata accessor for SiriKitEvent();
  id v105 = v58;
  id v66 = [v58 typeName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v106 = v65;

  outlined init with copy of SignalProviding((uint64_t)v117, (uint64_t)&v114);
  uint64_t v67 = swift_allocObject();
  *(void *)(v67 + 16) = v112;
  outlined init with take of AppSelectionSignalComponent(&v114, v67 + 24);
  *(void *)(v67 + 64) = v106;
  swift_retain();
  swift_bridgeObjectRetain();
  LOBYTE(v113[0]) = 0;
  SiriKitEvent.__allocating_init(stateType:taskType:statusReason:_:)();
  dispatch thunk of SiriKitEventSending.send(_:)();
  uint64_t v68 = v106;
  swift_release();
  uint64_t v69 = *(void *)(v68 + 16);
  if (v69)
  {
    *(void *)&long long v114 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v70 = v20;
    uint64_t v71 = v110;
    id v112 = *(void (**)(char *, unint64_t, uint64_t))(v111 + 16);
    unint64_t v72 = v68 + ((*(unsigned __int8 *)(v111 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v111 + 80));
    uint64_t v73 = *(void *)(v111 + 72);
    os_log_type_t v74 = (void (**)(char *, uint64_t))(v111 + 8);
    do
    {
      v112(v70, v72, v71);
      ResolvedSiriKitContact.person.getter();
      (*v74)(v70, v71);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v72 += v73;
      --v69;
    }
    while (v69);
    v75._rawValue = (void *)v114;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v75._rawValue = _swiftEmptyArrayStorage;
  }
  uint64_t v76 = v105;
  if ((unint64_t)v75._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v77 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v77 = *(void *)((char *)&dword_10 + ((unint64_t)v75._rawValue & 0xFFFFFFFFFFFFFF8));
  }
  if (v77)
  {
    id v78 = static ContactResolution.dedupeContacts(contacts:)();
    swift_bridgeObjectRelease();
    v75._rawValue = v78;
  }
  if (a9)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v87 = type metadata accessor for Logger();
    __swift_project_value_buffer(v87, (uint64_t)static Logger.siriPhone);
    uint64_t v88 = Logger.logObject.getter();
    os_log_type_t v89 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v88, v89)) {
      goto LABEL_74;
    }
    uint64_t v90 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v90 = 0;
    uint64_t v91 = "#ContactResolution multicardinalIndex is nil, overwriting contacts slot";
    goto LABEL_73;
  }
  uint64_t v79 = outlined bridged method (pb) of @objc INStartCallIntent.contacts.getter(v76);
  if (!v79)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v92 = type metadata accessor for Logger();
    __swift_project_value_buffer(v92, (uint64_t)static Logger.siriPhone);
    uint64_t v88 = Logger.logObject.getter();
    os_log_type_t v89 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v88, v89)) {
      goto LABEL_74;
    }
    uint64_t v90 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v90 = 0;
    uint64_t v91 = "#ContactResolution siriKitIntent contacts slot is nil, overwriting contacts slot";
    goto LABEL_73;
  }
  *(void *)&long long v114 = v79;
  uint64_t v80 = &unk_583000;
  if (!((unint64_t)v75._rawValue >> 62))
  {
    uint64_t v81 = *(void *)((char *)&dword_10 + ((unint64_t)v75._rawValue & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (v81) {
      goto LABEL_35;
    }
LABEL_68:
    swift_bridgeObjectRelease();
    goto LABEL_69;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_68;
  }
LABEL_35:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, ((unint64_t)v75._rawValue & 0xC000000000000001) == 0);
  if (((unint64_t)v75._rawValue & 0xC000000000000001) != 0) {
    id v82 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v82 = *((id *)v75._rawValue + 4);
  }
  uint64_t v83 = v82;
  swift_bridgeObjectRelease();
  unint64_t v84 = v114;
  if ((unint64_t)v114 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v85 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v85 = *(void *)((char *)&dword_10 + (v114 & 0xFFFFFFFFFFFFFF8));
  }
  if (v85 <= v109) {
    goto LABEL_54;
  }
  if ((unint64_t)v75._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v86 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    unint64_t v84 = v114;
  }
  else
  {
    uint64_t v86 = *(void *)((char *)&dword_10 + ((unint64_t)v75._rawValue & 0xFFFFFFFFFFFFFF8));
  }
  if (v84 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v93 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v93 = *(void *)((char *)&dword_10 + (v84 & 0xFFFFFFFFFFFFFF8));
  }
  if (v93 < v86)
  {
LABEL_54:

    uint64_t v80 = (void *)&unk_583000;
LABEL_69:
    swift_bridgeObjectRelease();
    if (v80[466] != -1) {
      swift_once();
    }
    uint64_t v103 = type metadata accessor for Logger();
    __swift_project_value_buffer(v103, (uint64_t)static Logger.siriPhone);
    uint64_t v88 = Logger.logObject.getter();
    os_log_type_t v89 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v88, v89)) {
      goto LABEL_74;
    }
    uint64_t v90 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v90 = 0;
    uint64_t v91 = "#ContactResolution: overwriting contacts slot";
LABEL_73:
    _os_log_impl(&dword_0, v88, v89, v91, v90, 2u);
    swift_slowDealloc();
LABEL_74:

    INStartCallIntent.overwriteContacts(newContacts:)(v75);
    goto LABEL_75;
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v94 = type metadata accessor for Logger();
  __swift_project_value_buffer(v94, (uint64_t)static Logger.siriPhone);
  uint64_t v95 = Logger.logObject.getter();
  os_log_type_t v96 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v95, v96))
  {
    uint64_t v97 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v97 = 134217984;
    v113[0] = v109;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v95, v96, "#ContactResolution updating person at index %ld", v97, 0xCu);
    swift_slowDealloc();
  }

  uint64_t v98 = v114;
  id v99 = v83;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  if (!result || v98 < 0 || (v98 & 0x4000000000000000) != 0)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew()(v98);
    uint64_t v98 = result;
    *(void *)&long long v114 = result;
  }
  if (v109 < 0)
  {
    __break(1u);
  }
  else if (*(void *)((char *)&dword_10 + (v98 & 0xFFFFFFFFFFFFFF8)) > (unint64_t)v109)
  {
    uint64_t v101 = *(void **)((char *)&stru_20.cmd + 8 * v109 + (v98 & 0xFFFFFFFFFFFFFF8));
    *(void *)((char *)&stru_20.cmd + 8 * v109 + (v98 & 0xFFFFFFFFFFFFFF8)) = v99;

    specialized Array._endMutation()();
    INStartCallIntent.overwriteContacts(newContacts:)((Swift::OpaquePointer)v114);

LABEL_75:
    swift_bridgeObjectRelease();
    outlined destroy of PhoneCallNLv3Intent((uint64_t)v108, (void (*)(void))type metadata accessor for ContactResolverConfigHashable);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v117);
  }
  __break(1u);
  return result;
}

uint64_t specialized SKTransformer.convertToSKIntent<A>(phoneCallNLIntent:rchFlowContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v36 = a5;
  uint64_t v35 = a4;
  uint64_t v34 = a3;
  uint64_t v33 = a2;
  uint64_t v6 = type metadata accessor for PhoneCallNLv3Intent(0);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v40 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = v7;
  v44[3] = v7;
  v44[4] = (uint64_t)&protocol witness table for PhoneCallNLv3Intent;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v44);
  outlined init with copy of PhoneCallNLv3Intent(a1, (uint64_t)boxed_opaque_existential_1);
  static Signpost.begin(_:)();
  uint64_t v11 = v10;
  uint64_t v32 = type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INStartVideoCallIntent);
  id v12 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  id v13 = [v12 _className];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static Signpost.begin(_:string1:)();
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  int v41 = v18;
  swift_bridgeObjectRelease();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  v31[2] = __swift_project_value_buffer(v19, (uint64_t)static Logger.siriPhone);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v37 = v15;
  uint64_t v38 = v17;
  if (v22)
  {
    uint64_t v23 = swift_slowAlloc();
    v42[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 136315394;
    v31[1] = v11;
    v43[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000034, 0x8000000000493710, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v23 + 12) = 2080;
    v43[0] = v32;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INStartVideoCallIntent.Type);
    uint64_t v24 = String.init<A>(describing:)();
    v43[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v20, v21, "#SKTransformer %s to %s", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v26 = (uint64_t)v40;
  outlined init with copy of SignalProviding((uint64_t)v44, (uint64_t)v43);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
  if (swift_dynamicCast())
  {
    specialized SKTransformer.nlv3Conversion<A>(phoneCallNLIntent:rchFlowContext:)();
    uint64_t v28 = v27;
    outlined destroy of PhoneCallNLv3Intent(v26, (void (*)(void))type metadata accessor for PhoneCallNLv3Intent);
  }
  else if (swift_dynamicCast())
  {
    specialized SKTransformer.nlv4Conversion<A>(phoneCallNLIntent:rchFlowContext:)();
    uint64_t v28 = v29;
    outlined destroy of PhoneCallNLv4Intent((uint64_t)v42);
  }
  else
  {
    uint64_t v28 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
  Signpost.OpenSignpost.end()();
  Signpost.OpenSignpost.end()();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  return v28;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void v31[3];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  int v41;
  uint64_t v42[13];
  void v43[2];
  uint64_t v44[5];

  uint64_t v36 = a5;
  uint64_t v35 = a4;
  uint64_t v34 = a3;
  uint64_t v33 = a2;
  uint64_t v6 = type metadata accessor for PhoneCallNLv3Intent(0);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v40 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = v7;
  v44[3] = v7;
  v44[4] = (uint64_t)&protocol witness table for PhoneCallNLv3Intent;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v44);
  outlined init with copy of PhoneCallNLv3Intent(a1, (uint64_t)boxed_opaque_existential_1);
  static Signpost.begin(_:)();
  uint64_t v11 = v10;
  uint64_t v32 = type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for INStartAudioCallIntent);
  id v12 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  id v13 = [v12 _className];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static Signpost.begin(_:string1:)();
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  int v41 = v18;
  swift_bridgeObjectRelease();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  v31[2] = __swift_project_value_buffer(v19, (uint64_t)static Logger.siriPhone);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v37 = v15;
  uint64_t v38 = v17;
  if (v22)
  {
    uint64_t v23 = swift_slowAlloc();
    v42[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 136315394;
    v31[1] = v11;
    v43[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000034, 0x8000000000493710, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v23 + 12) = 2080;
    v43[0] = v32;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INStartAudioCallIntent.Type);
    uint64_t v24 = String.init<A>(describing:)();
    v43[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v20, v21, "#SKTransformer %s to %s", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v26 = (uint64_t)v40;
  outlined init with copy of SignalProviding((uint64_t)v44, (uint64_t)v43);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
  if (swift_dynamicCast())
  {
    specialized SKTransformer.nlv3Conversion<A>(phoneCallNLIntent:rchFlowContext:)();
    uint64_t v28 = v27;
    _s27PhoneCallFlowDelegatePlugin18CommonDirectActionOWOhTm_2(v26, (void (*)(void))type metadata accessor for PhoneCallNLv3Intent);
  }
  else if (swift_dynamicCast())
  {
    specialized SKTransformer.nlv4Conversion<A>(phoneCallNLIntent:rchFlowContext:)();
    uint64_t v28 = v29;
    outlined destroy of PhoneCallNLv4Intent((uint64_t)v42);
  }
  else
  {
    uint64_t v28 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
  Signpost.OpenSignpost.end()();
  Signpost.OpenSignpost.end()();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  return v28;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void v28[3];
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int v38;
  uint64_t v39[13];
  void v40[2];
  void v41[5];

  uint64_t v33 = a5;
  uint64_t v32 = a4;
  uint64_t v31 = a3;
  uint64_t v30 = a2;
  uint64_t v36 = type metadata accessor for PhoneCallNLv3Intent(0);
  __chkstk_darwin(v36);
  uint64_t v37 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  void v41[3] = &type metadata for PhoneCallNLv4Intent;
  v41[4] = &protocol witness table for PhoneCallNLv4Intent;
  v41[0] = swift_allocObject();
  outlined init with copy of PhoneCallNLv4Intent(a1, v41[0] + 16);
  static Signpost.begin(_:)();
  uint64_t v8 = v7;
  uint64_t v29 = type metadata accessor for INHangUpCallIntent();
  uint64_t v9 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  uint64_t v10 = [v9 _className];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static Signpost.begin(_:string1:)();
  id v12 = v11;
  uint64_t v14 = v13;
  uint64_t v38 = v15;
  swift_bridgeObjectRelease();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  void v28[2] = __swift_project_value_buffer(v16, (uint64_t)static Logger.siriPhone);
  uint64_t v17 = Logger.logObject.getter();
  int v18 = static os_log_type_t.debug.getter();
  uint64_t v19 = os_log_type_enabled(v17, v18);
  uint64_t v34 = v12;
  uint64_t v35 = v14;
  if (v19)
  {
    uint64_t v20 = swift_slowAlloc();
    v39[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136315394;
    v28[1] = v8;
    v40[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000034, 0x8000000000493710, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v20 + 12) = 2080;
    v40[0] = v29;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INHangUpCallIntent.Type);
    os_log_type_t v21 = String.init<A>(describing:)();
    v40[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v17, v18, "#SKTransformer %s to %s", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v23 = (uint64_t)v37;
  outlined init with copy of SignalProviding((uint64_t)v41, (uint64_t)v40);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
  if (swift_dynamicCast())
  {
    specialized SKTransformer.nlv3Conversion<A>(phoneCallNLIntent:rchFlowContext:)();
    unint64_t v25 = v24;
    _s27PhoneCallFlowDelegatePlugin0aB10NLv3IntentVWOhTm_0(v23, (void (*)(void))type metadata accessor for PhoneCallNLv3Intent);
  }
  else if (swift_dynamicCast())
  {
    specialized SKTransformer.nlv4Conversion<A>(phoneCallNLIntent:rchFlowContext:)();
    unint64_t v25 = v26;
    outlined destroy of PhoneCallNLv4Intent((uint64_t)v39);
  }
  else
  {
    unint64_t v25 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
  Signpost.OpenSignpost.end()();
  Signpost.OpenSignpost.end()();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
  return v25;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void v31[3];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  int v41;
  uint64_t v42[13];
  void v43[2];
  uint64_t v44[5];

  uint64_t v36 = a5;
  uint64_t v35 = a4;
  uint64_t v34 = a3;
  uint64_t v33 = a2;
  uint64_t v6 = type metadata accessor for PhoneCallNLv3Intent(0);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v40 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = v7;
  v44[3] = v7;
  v44[4] = (uint64_t)&protocol witness table for PhoneCallNLv3Intent;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v44);
  outlined init with copy of PhoneCallNLv3Intent(a1, (uint64_t)boxed_opaque_existential_1);
  static Signpost.begin(_:)();
  uint64_t v11 = v10;
  uint64_t v32 = type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INStartCallIntent);
  id v12 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  id v13 = [v12 _className];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static Signpost.begin(_:string1:)();
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  int v41 = v18;
  swift_bridgeObjectRelease();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  v31[2] = __swift_project_value_buffer(v19, (uint64_t)static Logger.siriPhone);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v37 = v15;
  uint64_t v38 = v17;
  if (v22)
  {
    uint64_t v23 = swift_slowAlloc();
    v42[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 136315394;
    v31[1] = v11;
    v43[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000034, 0x8000000000493710, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v23 + 12) = 2080;
    v43[0] = v32;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INStartCallIntent.Type);
    uint64_t v24 = String.init<A>(describing:)();
    v43[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v20, v21, "#SKTransformer %s to %s", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v26 = (uint64_t)v40;
  outlined init with copy of SignalProviding((uint64_t)v44, (uint64_t)v43);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
  if (swift_dynamicCast())
  {
    specialized SKTransformer.nlv3Conversion<A>(phoneCallNLIntent:rchFlowContext:)();
    uint64_t v28 = v27;
    _s27PhoneCallFlowDelegatePlugin18CommonDirectActionOWOhTm_4(v26, (void (*)(void))type metadata accessor for PhoneCallNLv3Intent);
  }
  else if (swift_dynamicCast())
  {
    specialized SKTransformer.nlv4Conversion<A>(phoneCallNLIntent:rchFlowContext:)((uint64_t)v44, v33, v34);
    uint64_t v28 = v29;
    outlined destroy of PhoneCallNLv4Intent((uint64_t)v42);
  }
  else
  {
    uint64_t v28 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
  Signpost.OpenSignpost.end()();
  Signpost.OpenSignpost.end()();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  return v28;
}

_UNKNOWN **associated type witness table accessor for RCHFlowDelegate.IntentResponseType : DismissSiriDeclaringIntentResponse in StartVideoCallRCHFlowDelegate()
{
  return &protocol witness table for INStartVideoCallIntentResponse;
}

_UNKNOWN **associated type witness table accessor for RCHFlowDelegate.IntentType : CallingIntent in StartVideoCallRCHFlowDelegate()
{
  return &protocol witness table for INStartVideoCallIntent;
}

uint64_t instantiation function for generic protocol witness table for StartVideoCallRCHFlowDelegate(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type StartVideoCallRCHFlowDelegate and conformance StartVideoCallRCHFlowDelegate(&lazy protocol witness table cache variable for type StartVideoCallRCHFlowDelegate and conformance StartVideoCallRCHFlowDelegate, (void (*)(uint64_t))type metadata accessor for StartVideoCallRCHFlowDelegate);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table accessor for type StartVideoCallRCHFlowDelegate and conformance StartVideoCallRCHFlowDelegate(&lazy protocol witness table cache variable for type StartVideoCallRCHFlowDelegate and conformance BaseRCHFlowDelegate<A, B>, (void (*)(uint64_t))type metadata accessor for StartVideoCallRCHFlowDelegate);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for StartVideoCallRCHFlowDelegate()
{
  uint64_t result = type metadata singleton initialization cache for StartVideoCallRCHFlowDelegate;
  if (!type metadata singleton initialization cache for StartVideoCallRCHFlowDelegate) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for StartVideoCallRCHFlowDelegate()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for StartVideoCallRCHFlowDelegate()
{
  return type metadata accessor for StartVideoCallRCHFlowDelegate();
}

uint64_t outlined destroy of PhoneContactDisambiguationItemFactory(uint64_t a1)
{
  return a1;
}

void specialized static ContactResolution.updateSiriKitIntentNLv3(siriKitIntent:nlIntent:app:locale:sharedGlobals:multicardinalIndex:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void (*a22)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int, void *, uint64_t))
{
  OUTLINED_FUNCTION_24_0();
  unint64_t v25 = v24;
  int v80 = v26;
  uint64_t v83 = v27;
  uint64_t v84 = v28;
  uint64_t v81 = v29;
  uint64_t v82 = v30;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v35 = type metadata accessor for ContactQuery();
  OUTLINED_FUNCTION_1();
  uint64_t v37 = v36;
  __chkstk_darwin(v38);
  OUTLINED_FUNCTION_46_0();
  uint64_t v41 = v39 - v40;
  uint64_t v43 = __chkstk_darwin(v42);
  uint64_t v45 = (char *)&v78 - v44;
  __chkstk_darwin(v43);
  OUTLINED_FUNCTION_31_12();
  __chkstk_darwin(v46);
  uint64_t v47 = OUTLINED_FUNCTION_29_13();
  type metadata accessor for PhoneCallNLv3Intent(v47);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v48);
  OUTLINED_FUNCTION_3_1();
  uint64_t v49 = v32;
  uint64_t v51 = v50;
  outlined init with copy of PhoneCallNLv3Intent(v49, v50);
  if (v25(v51, v34, 0)) {
    goto LABEL_29;
  }
  uint64_t v91 = v23;
  uint64_t v92 = v22;
  uint64_t v86 = v45;
  uint64_t v79 = v34;
  lazy protocol witness table accessor for type StartVideoCallRCHFlowDelegate and conformance StartVideoCallRCHFlowDelegate(&lazy protocol witness table cache variable for type PhoneCallNLv3Intent and conformance PhoneCallNLv3Intent, (void (*)(uint64_t))type metadata accessor for PhoneCallNLv3Intent);
  uint64_t v52 = IntentNodeTraversable.intentNodes(forOntologyNode:)();
  __chkstk_darwin(v52);
  uint64_t v78 = v51;
  uint64_t v77 = v51;
  uint64_t v53 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology21NonTerminalIntentNodeVG_27PhoneCallFlowDelegatePlugin0dJ7Contact_ps5NeverOTg5(a21, (uint64_t)&v76, v52, (uint64_t)&v95);
  swift_bridgeObjectRelease();
  uint64_t v54 = v53[2];
  if (v54)
  {
    uint64_t v94 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v55 = (uint64_t)(v53 + 4);
    uint64_t v90 = v37 + 32;
    uint64_t v56 = v94;
    do
    {
      outlined init with copy of SignalProviding(v55, (uint64_t)v93);
      __swift_project_boxed_opaque_existential_1(v93, v93[3]);
      SiriPhoneContact.asSiriInferenceContact.getter();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v93);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v56 = v94;
      }
      unint64_t v57 = v56[2];
      if (v57 >= v56[3] >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v56 = v94;
      }
      v56[2] = v57 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v37 + 32))((unint64_t)v56+ ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80))+ *(void *)(v37 + 72) * v57, v41, v35);
      uint64_t v94 = v56;
      v55 += 40;
      --v54;
    }
    while (v54);
    swift_bridgeObjectRelease();
    id v58 = v91;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v56 = _swiftEmptyArrayStorage;
    id v58 = v91;
  }
  v93[0] = _swiftEmptyArrayStorage;
  uint64_t v90 = v56[2];
  if (!v90)
  {
LABEL_28:
    char v71 = v80 & 1;
    swift_bridgeObjectRelease();
    uint64_t v72 = v93[0];
    uint64_t v73 = v78;
    char v74 = specialized PhoneCallNLIntent.isDisplayNameEmergencyContact()();
    static SiriKitEventSender.current.getter();
    type metadata accessor for EmergencyContactResolution();
    uint64_t v75 = swift_allocObject();
    LOBYTE(v76) = v71;
    a22(v79, v72, v74 & 1, v81, v82, v73, v83, v84, v76, v93, v75);
    swift_release();
    uint64_t v51 = v73;
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v93);
LABEL_29:
    outlined destroy of PhoneCallNLv3Intent(v51, (void (*)(void))type metadata accessor for PhoneCallNLv3Intent);
    OUTLINED_FUNCTION_26_1();
    return;
  }
  unint64_t v59 = 0;
  uint64_t v60 = v37 + 16;
  uint64_t v85 = (void (**)(void))(v37 + 32);
  uint64_t v88 = (void (**)(void))(v37 + 8);
  uint64_t v89 = v37;
  uint64_t v87 = (v37 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  while (v59 < v56[2])
  {
    uint64_t v61 = *(void (**)(uint64_t, char *, uint64_t))(v37 + 16);
    v61((uint64_t)v58, (char *)v56+ ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80))+ *(void *)(v37 + 72) * v59, v35);
    if (one-time initialization token for emptyQuery != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v35, (uint64_t)static ContactQuery.emptyQuery);
    char v62 = static ContactQuery.== infix(_:_:)();
    uint64_t v63 = v58;
    char v64 = v62;
    uint64_t v65 = v60;
    v61(v92, v63, v35);
    if (v64)
    {
      id v66 = *v88;
      OUTLINED_FUNCTION_12_20();
      v66();
    }
    else
    {
      if (one-time initialization token for emptyNLv4Query != -1) {
        swift_once();
      }
      __swift_project_value_buffer(v35, (uint64_t)static ContactQuery.emptyNLv4Query);
      char v67 = static ContactQuery.== infix(_:_:)();
      id v66 = *v88;
      OUTLINED_FUNCTION_12_20();
      v66();
      if ((v67 & 1) == 0)
      {
        uint64_t v68 = *v85;
        OUTLINED_FUNCTION_15_10();
        v68();
        uint64_t v69 = v93[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v69 = v93[0];
        }
        unint64_t v70 = *(void *)(v69 + 16);
        if (v70 >= *(void *)(v69 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v69 = v93[0];
        }
        *(void *)(v69 + 16) = v70 + 1;
        OUTLINED_FUNCTION_15_10();
        v68();
        v93[0] = v69;
        id v58 = v91;
        goto LABEL_27;
      }
    }
    id v58 = v91;
    ((void (*)(char *, uint64_t))v66)(v91, v35);
LABEL_27:
    ++v59;
    uint64_t v60 = v65;
    uint64_t v37 = v89;
    if (v90 == v59) {
      goto LABEL_28;
    }
  }
  __break(1u);
}

uint64_t partial apply for closure #1 in PhoneCallNLv3Intent.contacts.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in PhoneCallNLv3Intent.contacts.getter(a1, a2);
}

uint64_t partial apply for closure #1 in static ContactResolution.updateSiriKitIntent(siriKitIntent:contactQueries:hasEmergencyContact:app:locale:nlIntent:sharedGlobals:multicardinalIndex:siriKitEventSender:emergencyContactResolution:)(uint64_t a1)
{
  return closure #1 in static ContactResolution.updateSiriKitIntent(siriKitIntent:contactQueries:hasEmergencyContact:app:locale:nlIntent:sharedGlobals:multicardinalIndex:siriKitEventSender:emergencyContactResolution:)(a1, v1[2], v1 + 3, v1[8]);
}

uint64_t objectdestroyTm_5()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_151600()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t lazy protocol witness table accessor for type StartVideoCallRCHFlowDelegate and conformance StartVideoCallRCHFlowDelegate(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t closure #1 in PhoneCallNLv3Intent.contacts.getterpartial apply@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return partial apply for closure #1 in PhoneCallNLv3Intent.contacts.getter(a1, a2);
}

char *OUTLINED_FUNCTION_7_38@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_8_44(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return v1 - 96;
}

uint64_t OUTLINED_FUNCTION_11_27()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_13_17()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_18_18()
{
  return specialized StartVideoCallRCHFlowDelegate.init(sharedGlobals:appResolved:biomeEventSender:)(v2, v1, v5, v0, v3, v4);
}

void OUTLINED_FUNCTION_19_18(float a1)
{
  *uint64_t v1 = a1;
}

void OUTLINED_FUNCTION_22_16(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t OUTLINED_FUNCTION_26_14()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_29_13()
{
  return 0;
}

void OUTLINED_FUNCTION_33_9(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t specialized static ContactSlotResolver.make<A>(rchFlowContext:sharedGlobals:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnyIntentResolver<INStartCallIntent>>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_467720;
  outlined init with copy of SignalProviding(a4, (uint64_t)v18);
  id v11 = [objc_allocWithZone((Class)HKHealthStore) init];
  id v12 = [objc_allocWithZone((Class)HKMedicalIDStore) initWithHealthStore:v11];

  uint64_t v20 = type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for HKMedicalIDStore);
  os_log_type_t v21 = &protocol witness table for HKMedicalIDStore;
  id v19 = v12;
  outlined init with copy of Result<TemplatingResult, Error>((uint64_t)v18, (uint64_t)v17, &demangling cache variable for type metadata for EmergencyContactSlotResolver<INStartCallIntent>);
  specialized AnyIntentResolver.init<A>(_:)((uint64_t)v17, (uint64_t *)(v10 + 32));
  outlined destroy of SubmitCommandError?((uint64_t)v18, &demangling cache variable for type metadata for EmergencyContactSlotResolver<INStartCallIntent>);
  outlined init with copy of SignalProviding(a4, (uint64_t)v18);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriInferenceContactSlotResolver<INStartCallIntent>);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a1;
  *(void *)(v13 + 24) = a2;
  *(void *)(v13 + 32) = a3;
  outlined init with take of AppSelectionSignalComponent(v18, v13 + 40);
  *(void *)(v13 + 80) = 0;
  *(unsigned char *)(v13 + 88) = 1;
  id v14 = a3;
  swift_retain();
  id v15 = a2;
  specialized SKIntentResolver.toAnyIntentResolver()(&demangling cache variable for type metadata for SiriInferenceContactSlotResolver<INStartCallIntent>, (uint64_t)partial apply for specialized implicit closure #2 in implicit closure #1 in AnyIntentResolver.init<A>(_:), (uint64_t)&async function pointer to partial apply for specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:), (void *)(v10 + 96));
  swift_release();
  return specialized AnyIntentResolver.init<A>(_:)(v10, a5);
}

{
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  unsigned char v17[80];
  long long v18[2];
  id v19;
  uint64_t v20;
  _UNKNOWN **v21;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnyIntentResolver<INStartAudioCallIntent>>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_467720;
  outlined init with copy of SignalProviding(a4, (uint64_t)v18);
  id v11 = [objc_allocWithZone((Class)HKHealthStore) init];
  id v12 = [objc_allocWithZone((Class)HKMedicalIDStore) initWithHealthStore:v11];

  uint64_t v20 = type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for HKMedicalIDStore);
  os_log_type_t v21 = &protocol witness table for HKMedicalIDStore;
  id v19 = v12;
  outlined init with copy of Result<TemplatingResult, Error>((uint64_t)v18, (uint64_t)v17, &demangling cache variable for type metadata for EmergencyContactSlotResolver<INStartAudioCallIntent>);
  specialized AnyIntentResolver.init<A>(_:)((uint64_t)v17, (uint64_t *)(v10 + 32));
  outlined destroy of SubmitCommandError?((uint64_t)v18, &demangling cache variable for type metadata for EmergencyContactSlotResolver<INStartAudioCallIntent>);
  outlined init with copy of SignalProviding(a4, (uint64_t)v18);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriInferenceContactSlotResolver<INStartAudioCallIntent>);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a1;
  *(void *)(v13 + 24) = a2;
  *(void *)(v13 + 32) = a3;
  outlined init with take of AppSelectionSignalComponent(v18, v13 + 40);
  *(void *)(v13 + 80) = 0;
  *(unsigned char *)(v13 + 88) = 1;
  id v14 = a3;
  swift_retain();
  id v15 = a2;
  specialized SKIntentResolver.toAnyIntentResolver()(&demangling cache variable for type metadata for SiriInferenceContactSlotResolver<INStartAudioCallIntent>, (uint64_t)partial apply for specialized implicit closure #2 in implicit closure #1 in AnyIntentResolver.init<A>(_:), (uint64_t)&async function pointer to partial apply for specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:), (void *)(v10 + 96));
  swift_release();
  return specialized AnyIntentResolver.init<A>(_:)(v10, a5);
}

{
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  unsigned char v17[80];
  long long v18[2];
  id v19;
  uint64_t v20;
  _UNKNOWN **v21;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnyIntentResolver<INStartVideoCallIntent>>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_467720;
  outlined init with copy of SignalProviding(a4, (uint64_t)v18);
  id v11 = [objc_allocWithZone((Class)HKHealthStore) init];
  id v12 = [objc_allocWithZone((Class)HKMedicalIDStore) initWithHealthStore:v11];

  uint64_t v20 = type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for HKMedicalIDStore);
  os_log_type_t v21 = &protocol witness table for HKMedicalIDStore;
  id v19 = v12;
  outlined init with copy of Result<TemplatingResult, Error>((uint64_t)v18, (uint64_t)v17, &demangling cache variable for type metadata for EmergencyContactSlotResolver<INStartVideoCallIntent>);
  specialized AnyIntentResolver.init<A>(_:)((uint64_t)v17, (uint64_t *)(v10 + 32));
  outlined destroy of SubmitCommandError?((uint64_t)v18, &demangling cache variable for type metadata for EmergencyContactSlotResolver<INStartVideoCallIntent>);
  outlined init with copy of SignalProviding(a4, (uint64_t)v18);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriInferenceContactSlotResolver<INStartVideoCallIntent>);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a1;
  *(void *)(v13 + 24) = a2;
  *(void *)(v13 + 32) = a3;
  outlined init with take of AppSelectionSignalComponent(v18, v13 + 40);
  *(void *)(v13 + 80) = 0;
  *(unsigned char *)(v13 + 88) = 1;
  id v14 = a3;
  swift_retain();
  id v15 = a2;
  specialized SKIntentResolver.toAnyIntentResolver()(&demangling cache variable for type metadata for SiriInferenceContactSlotResolver<INStartVideoCallIntent>, (uint64_t)partial apply for specialized implicit closure #2 in implicit closure #1 in AnyIntentResolver.init<A>(_:), (uint64_t)&async function pointer to partial apply for specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:), (void *)(v10 + 96));
  swift_release();
  return specialized AnyIntentResolver.init<A>(_:)(v10, a5);
}

uint64_t specialized SKIntentResolver.toAnyIntentResolver()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for AddCallParticipantContactSlotResolver();
  *a1 = v1;
  a1[3] = v3;
  a1[4] = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyIntentResolver.init<A>(_:);
  a1[5] = v1;
  a1[6] = &async function pointer to partial apply for specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:);
  a1[7] = v1;
  return swift_retain_n();
}

uint64_t specialized SKIntentResolver.toAnyIntentResolver()@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(a1);
  *a4 = v4;
  a4[3] = v8;
  a4[4] = a2;
  a4[5] = v4;
  a4[6] = a3;
  a4[7] = v4;
  return swift_retain_n();
}

uint64_t PhoneIntentResolver.resolve<A>(nlIntent:skIntent:rchFlowContext:sharedGlobals:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[45] = a6;
  v7[46] = a7;
  v7[43] = a4;
  v7[44] = a5;
  v7[41] = a2;
  v7[42] = a3;
  v7[40] = a1;
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v8, v9, v10);
}

void PhoneIntentResolver.resolve<A>(nlIntent:skIntent:rchFlowContext:sharedGlobals:)()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 328);
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.siriPhone);
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void **)(v0 + 328);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v49 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    id v9 = [v7 _className];
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v12 = v11;

    *(void *)(v0 + 312) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_0, v4, v5, "#PhoneIntentResolver Resolving %s", v8, 0xCu);
    OUTLINED_FUNCTION_20_1();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
  }
  self;
  if (OUTLINED_FUNCTION_72_2())
  {
    OUTLINED_FUNCTION_37_9();
    uint64_t v13 = OUTLINED_FUNCTION_20_16();
    specialized static ContactSlotResolver.make<A>(rchFlowContext:sharedGlobals:)(v13, v14, v15, v16, v17);
    int v18 = (void *)swift_task_alloc();
    *(void *)(v0 + 376) = v18;
    *int v18 = v0;
    id v19 = PhoneIntentResolver.resolve<A>(nlIntent:skIntent:rchFlowContext:sharedGlobals:);
  }
  else
  {
    self;
    if (OUTLINED_FUNCTION_72_2())
    {
      OUTLINED_FUNCTION_37_9();
      uint64_t v20 = OUTLINED_FUNCTION_20_16();
      specialized static ContactSlotResolver.make<A>(rchFlowContext:sharedGlobals:)(v20, v21, v22, v23, v24);
      OUTLINED_FUNCTION_1_49();
      int v18 = (void *)swift_task_alloc();
      *(void *)(v0 + 400) = v18;
      *int v18 = v0;
      id v19 = PhoneIntentResolver.resolve<A>(nlIntent:skIntent:rchFlowContext:sharedGlobals:);
    }
    else
    {
      self;
      if (!OUTLINED_FUNCTION_72_2())
      {
        self;
        uint64_t v32 = OUTLINED_FUNCTION_72_2();
        if (v32)
        {
          uint64_t v33 = (void *)v32;
          uint64_t v34 = *(void **)(v0 + 352);
          uint64_t v35 = *(void *)(v0 + 336);
          uint64_t v36 = *(void **)(v0 + 344);
          uint64_t v37 = *(void *)(v0 + 320);
          uint64_t v38 = *(void **)(v0 + 328);
          outlined init with copy of SignalProviding(*(void *)(v0 + 360), v0 + 272);
          type metadata accessor for AddCallParticipantContactSlotResolver();
          uint64_t v39 = (void *)swift_allocObject();
          long long v39[2] = v35;
          v39[3] = v36;
          v39[4] = v34;
          outlined init with take of AppSelectionSignalComponent((long long *)(v0 + 272), (uint64_t)(v39 + 5));
          id v40 = v34;
          id v41 = v38;
          swift_retain();
          id v42 = v36;
          specialized SKIntentResolver.toAnyIntentResolver()((void *)(v0 + 16));
          swift_release();
          if ((*(uint64_t (**)(void *, uint64_t))(v0 + 48))(v33, v37))
          {
            uint64_t v43 = (void *)swift_task_alloc();
            *(void *)(v0 + 448) = v43;
            *uint64_t v43 = v0;
            v43[1] = PhoneIntentResolver.resolve<A>(nlIntent:skIntent:rchFlowContext:sharedGlobals:);
LABEL_13:
            OUTLINED_FUNCTION_27_3();
            __asm { BRAA            X2, X16 }
          }
          id v45 = *(id *)(v0 + 328);
          INIntent.typedOrThrow<A>(as:)();
          uint64_t v46 = *(void **)(v0 + 328);
          outlined destroy of SubmitCommandError?(v0 + 16, &demangling cache variable for type metadata for AnyIntentResolver<INAddCallParticipantIntent>);
        }
        else
        {
          id v44 = *(id *)(v0 + 328);
        }
        OUTLINED_FUNCTION_12_2();
        OUTLINED_FUNCTION_27_3();
        __asm { BRAA            X2, X16 }
      }
      OUTLINED_FUNCTION_37_9();
      uint64_t v25 = OUTLINED_FUNCTION_20_16();
      specialized static ContactSlotResolver.make<A>(rchFlowContext:sharedGlobals:)(v25, v26, v27, v28, v29);
      int v18 = (void *)swift_task_alloc();
      *(void *)(v0 + 424) = v18;
      *int v18 = v0;
      id v19 = PhoneIntentResolver.resolve<A>(nlIntent:skIntent:rchFlowContext:sharedGlobals:);
    }
  }
  v18[1] = v19;
  goto LABEL_13;
}

uint64_t PhoneIntentResolver.resolve<A>(nlIntent:skIntent:rchFlowContext:sharedGlobals:)()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *id v3 = v2;
  *id v3 = *v1;
  *(void *)(v2 + 384) = v4;
  *(void *)(v2 + 392) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v5, v6, v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v8;

  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = v0[49];
  uint64_t v2 = OUTLINED_FUNCTION_59_3();
  id v3 = (void *)v0[48];
  uint64_t v4 = (void *)v0[41];
  outlined destroy of SubmitCommandError?((uint64_t)(v0 + 26), &demangling cache variable for type metadata for AnyIntentResolver<INStartCallIntent>);

  OUTLINED_FUNCTION_17_14();
  if (!v1) {
    uint64_t v5 = v2;
  }
  return v6(v5);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();

  outlined destroy of SubmitCommandError?(v0 + 208, &demangling cache variable for type metadata for AnyIntentResolver<INStartCallIntent>);
  OUTLINED_FUNCTION_47_0();
  return v1();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *id v3 = v2;
  *id v3 = *v1;
  *(void *)(v2 + 408) = v4;
  *(void *)(v2 + 416) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v5, v6, v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v8;

  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = v0[52];
  uint64_t v2 = OUTLINED_FUNCTION_59_3();
  id v3 = (void *)v0[51];
  uint64_t v4 = (void *)v0[41];
  outlined destroy of SubmitCommandError?((uint64_t)(v0 + 18), &demangling cache variable for type metadata for AnyIntentResolver<INStartAudioCallIntent>);

  OUTLINED_FUNCTION_17_14();
  if (!v1) {
    uint64_t v5 = v2;
  }
  return v6(v5);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();

  outlined destroy of SubmitCommandError?(v0 + 144, &demangling cache variable for type metadata for AnyIntentResolver<INStartAudioCallIntent>);
  OUTLINED_FUNCTION_47_0();
  return v1();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *id v3 = v2;
  *id v3 = *v1;
  *(void *)(v2 + 432) = v4;
  *(void *)(v2 + 440) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v5, v6, v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v8;

  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = v0[55];
  uint64_t v2 = OUTLINED_FUNCTION_59_3();
  id v3 = (void *)v0[54];
  uint64_t v4 = (void *)v0[41];
  outlined destroy of SubmitCommandError?((uint64_t)(v0 + 10), &demangling cache variable for type metadata for AnyIntentResolver<INStartVideoCallIntent>);

  OUTLINED_FUNCTION_17_14();
  if (!v1) {
    uint64_t v5 = v2;
  }
  return v6(v5);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();

  outlined destroy of SubmitCommandError?(v0 + 80, &demangling cache variable for type metadata for AnyIntentResolver<INStartVideoCallIntent>);
  OUTLINED_FUNCTION_47_0();
  return v1();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  id v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v8 = v7;
  *(void *)(v5 + 456) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 464) = v3;
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v8;

  OUTLINED_FUNCTION_18_3();
  uint64_t v2 = v0[57];
  uint64_t v1 = (void *)v0[58];
  id v3 = OUTLINED_FUNCTION_59_3();
  uint64_t v4 = (void *)v0[41];
  outlined destroy of SubmitCommandError?((uint64_t)(v0 + 2), &demangling cache variable for type metadata for AnyIntentResolver<INAddCallParticipantIntent>);

  OUTLINED_FUNCTION_17_14();
  if (!v2) {
    uint64_t v5 = v3;
  }
  return v6(v5);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();

  outlined destroy of SubmitCommandError?(v0 + 16, &demangling cache variable for type metadata for AnyIntentResolver<INAddCallParticipantIntent>);
  OUTLINED_FUNCTION_47_0();
  return v1();
}

uint64_t protocol witness for PhoneIntentResolving.resolve<A>(nlIntent:skIntent:rchFlowContext:sharedGlobals:) in conformance PhoneIntentResolver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v15 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v15;
  *id v15 = v7;
  v15[1] = protocol witness for PhoneIntentResolving.resolve<A>(nlIntent:skIntent:rchFlowContext:sharedGlobals:) in conformance PhoneIntentResolver;
  return PhoneIntentResolver.resolve<A>(nlIntent:skIntent:rchFlowContext:sharedGlobals:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t protocol witness for PhoneIntentResolving.resolve<A>(nlIntent:skIntent:rchFlowContext:sharedGlobals:) in conformance PhoneIntentResolver()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_7();
  void *v5 = v4;
  swift_task_dealloc();
  OUTLINED_FUNCTION_17_14();
  if (!v0) {
    uint64_t v6 = v3;
  }
  return v7(v6);
}

uint64_t specialized FirstHitIntentResolver.resolve(skIntent:nlIntent:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[61] = a2;
  v3[62] = a3;
  v3[60] = a1;
  return _swift_task_switch(specialized FirstHitIntentResolver.resolve(skIntent:nlIntent:), 0, 0);
}

{
  void *v3;

  v3[61] = a2;
  v3[62] = a3;
  v3[60] = a1;
  return _swift_task_switch(specialized FirstHitIntentResolver.resolve(skIntent:nlIntent:), 0, 0);
}

{
  void *v3;

  v3[61] = a2;
  v3[62] = a3;
  v3[60] = a1;
  return _swift_task_switch(specialized FirstHitIntentResolver.resolve(skIntent:nlIntent:), 0, 0);
}

#error "153034: call analysis failed (funcsize=244)"

uint64_t specialized FirstHitIntentResolver.resolve(skIntent:nlIntent:)()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v8 = v7;
  *(void *)(v5 + 512) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 520) = v3;
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;

  OUTLINED_FUNCTION_1_0();
  uint64_t v1 = OUTLINED_FUNCTION_47_7();
  outlined destroy of SubmitCommandError?(v1, &demangling cache variable for type metadata for AnyIntentResolver<INStartVideoCallIntent>);
  outlined destroy of SubmitCommandError?(v0, &demangling cache variable for type metadata for AnyIntentResolver<INStartVideoCallIntent>?);
  uint64_t v2 = OUTLINED_FUNCTION_30_13();
  return v3(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of SubmitCommandError?(v0 + 144, &demangling cache variable for type metadata for AnyIntentResolver<INStartVideoCallIntent>);
  outlined destroy of SubmitCommandError?(v0 + 16, &demangling cache variable for type metadata for AnyIntentResolver<INStartVideoCallIntent>?);
  OUTLINED_FUNCTION_52_5();
  return v1();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v8 = v7;
  *(void *)(v5 + 512) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 520) = v3;
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;

  OUTLINED_FUNCTION_1_0();
  uint64_t v1 = OUTLINED_FUNCTION_47_7();
  outlined destroy of SubmitCommandError?(v1, &demangling cache variable for type metadata for AnyIntentResolver<INStartAudioCallIntent>);
  outlined destroy of SubmitCommandError?(v0, &demangling cache variable for type metadata for AnyIntentResolver<INStartAudioCallIntent>?);
  uint64_t v2 = OUTLINED_FUNCTION_30_13();
  return v3(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of SubmitCommandError?(v0 + 144, &demangling cache variable for type metadata for AnyIntentResolver<INStartAudioCallIntent>);
  outlined destroy of SubmitCommandError?(v0 + 16, &demangling cache variable for type metadata for AnyIntentResolver<INStartAudioCallIntent>?);
  OUTLINED_FUNCTION_52_5();
  return v1();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v8 = v7;
  *(void *)(v5 + 512) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 520) = v3;
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;

  OUTLINED_FUNCTION_1_0();
  uint64_t v1 = OUTLINED_FUNCTION_47_7();
  outlined destroy of SubmitCommandError?(v1, &demangling cache variable for type metadata for AnyIntentResolver<INStartCallIntent>);
  outlined destroy of SubmitCommandError?(v0, &demangling cache variable for type metadata for AnyIntentResolver<INStartCallIntent>?);
  uint64_t v2 = OUTLINED_FUNCTION_30_13();
  return v3(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  outlined destroy of SubmitCommandError?(v0 + 144, &demangling cache variable for type metadata for AnyIntentResolver<INStartCallIntent>);
  outlined destroy of SubmitCommandError?(v0 + 16, &demangling cache variable for type metadata for AnyIntentResolver<INStartCallIntent>?);
  OUTLINED_FUNCTION_52_5();
  return v1();
}

#error "153670: call analysis failed (funcsize=244)"

#error "153CAC: call analysis failed (funcsize=244)"

uint64_t specialized closure #1 in FirstHitIntentResolver.resolve(skIntent:nlIntent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  char v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 32))(a2, a3);
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.siriPhone);
  outlined init with copy of Result<TemplatingResult, Error>(a1, (uint64_t)v17, a4);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315394;
    outlined init with copy of Result<TemplatingResult, Error>((uint64_t)v17, (uint64_t)v16, a4);
    outlined destroy of SubmitCommandError?((uint64_t)v17, a4);
    outlined init with copy of Any((uint64_t)v16, (uint64_t)v15);
    __swift_project_boxed_opaque_existential_1(v15, v15[3]);
    swift_getDynamicType();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
    uint64_t v11 = String.init<A>(describing:)();
    unint64_t v13 = v12;
    outlined destroy of SubmitCommandError?((uint64_t)v16, a4);
    v16[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 1024;
    LODWORD(v16[0]) = v6 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v8, v9, "#%s shouldRunResolver = %{BOOL}d", (uint8_t *)v10, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    outlined destroy of SubmitCommandError?((uint64_t)v17, a4);
  }

  return v6 & 1;
}

uint64_t specialized AnyIntentResolver.init<A>(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FirstHitIntentResolver<INStartVideoCallIntent>);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *a2 = a1;
  a2[3] = v4;
  a2[4] = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyIntentResolver.init<A>(_:);
  a2[5] = v5;
  a2[6] = &async function pointer to partial apply for specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:);
  a2[7] = v6;
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FirstHitIntentResolver<INStartAudioCallIntent>);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *a2 = a1;
  a2[3] = v4;
  a2[4] = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyIntentResolver.init<A>(_:);
  a2[5] = v5;
  a2[6] = &async function pointer to partial apply for specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:);
  a2[7] = v6;
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FirstHitIntentResolver<INStartCallIntent>);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *a2 = a1;
  a2[3] = v4;
  a2[4] = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyIntentResolver.init<A>(_:);
  a2[5] = v5;
  a2[6] = &async function pointer to partial apply for specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:);
  a2[7] = v6;
  return swift_bridgeObjectRetain_n();
}

uint64_t specialized AnyIntentResolver.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  a2[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EmergencyContactSlotResolver<INStartVideoCallIntent>);
  uint64_t v4 = swift_allocObject();
  *a2 = v4;
  outlined init with copy of Result<TemplatingResult, Error>(a1, v4 + 16, &demangling cache variable for type metadata for EmergencyContactSlotResolver<INStartVideoCallIntent>);
  outlined init with copy of Result<TemplatingResult, Error>(a1, (uint64_t)v8, &demangling cache variable for type metadata for EmergencyContactSlotResolver<INStartVideoCallIntent>);
  uint64_t v5 = swift_allocObject();
  memcpy((void *)(v5 + 16), v8, 0x50uLL);
  a2[4] = (uint64_t)partial apply for specialized implicit closure #2 in implicit closure #1 in AnyIntentResolver.init<A>(_:);
  a2[5] = v5;
  outlined init with copy of Result<TemplatingResult, Error>(a1, (uint64_t)v8, &demangling cache variable for type metadata for EmergencyContactSlotResolver<INStartVideoCallIntent>);
  uint64_t v6 = swift_allocObject();
  memcpy((void *)(v6 + 16), v8, 0x50uLL);
  uint64_t result = outlined destroy of SubmitCommandError?(a1, &demangling cache variable for type metadata for EmergencyContactSlotResolver<INStartVideoCallIntent>);
  a2[6] = (uint64_t)&async function pointer to partial apply for specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:);
  a2[7] = v6;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unsigned char v8[80];

  a2[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EmergencyContactSlotResolver<INStartAudioCallIntent>);
  uint64_t v4 = swift_allocObject();
  *a2 = v4;
  outlined init with copy of Result<TemplatingResult, Error>(a1, v4 + 16, &demangling cache variable for type metadata for EmergencyContactSlotResolver<INStartAudioCallIntent>);
  outlined init with copy of Result<TemplatingResult, Error>(a1, (uint64_t)v8, &demangling cache variable for type metadata for EmergencyContactSlotResolver<INStartAudioCallIntent>);
  uint64_t v5 = swift_allocObject();
  memcpy((void *)(v5 + 16), v8, 0x50uLL);
  a2[4] = (uint64_t)partial apply for specialized implicit closure #2 in implicit closure #1 in AnyIntentResolver.init<A>(_:);
  a2[5] = v5;
  outlined init with copy of Result<TemplatingResult, Error>(a1, (uint64_t)v8, &demangling cache variable for type metadata for EmergencyContactSlotResolver<INStartAudioCallIntent>);
  uint64_t v6 = swift_allocObject();
  memcpy((void *)(v6 + 16), v8, 0x50uLL);
  uint64_t result = outlined destroy of SubmitCommandError?(a1, &demangling cache variable for type metadata for EmergencyContactSlotResolver<INStartAudioCallIntent>);
  a2[6] = (uint64_t)&async function pointer to partial apply for specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:);
  a2[7] = v6;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unsigned char v8[80];

  a2[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EmergencyContactSlotResolver<INStartCallIntent>);
  uint64_t v4 = swift_allocObject();
  *a2 = v4;
  outlined init with copy of Result<TemplatingResult, Error>(a1, v4 + 16, &demangling cache variable for type metadata for EmergencyContactSlotResolver<INStartCallIntent>);
  outlined init with copy of Result<TemplatingResult, Error>(a1, (uint64_t)v8, &demangling cache variable for type metadata for EmergencyContactSlotResolver<INStartCallIntent>);
  uint64_t v5 = swift_allocObject();
  memcpy((void *)(v5 + 16), v8, 0x50uLL);
  a2[4] = (uint64_t)partial apply for specialized implicit closure #2 in implicit closure #1 in AnyIntentResolver.init<A>(_:);
  a2[5] = v5;
  outlined init with copy of Result<TemplatingResult, Error>(a1, (uint64_t)v8, &demangling cache variable for type metadata for EmergencyContactSlotResolver<INStartCallIntent>);
  uint64_t v6 = swift_allocObject();
  memcpy((void *)(v6 + 16), v8, 0x50uLL);
  uint64_t result = outlined destroy of SubmitCommandError?(a1, &demangling cache variable for type metadata for EmergencyContactSlotResolver<INStartCallIntent>);
  a2[6] = (uint64_t)&async function pointer to partial apply for specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:);
  a2[7] = v6;
  return result;
}

uint64_t specialized implicit closure #2 in implicit closure #1 in AnyIntentResolver.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)a3 + 128))() & 1;
}

{
  return (*(uint64_t (**)(void))(*(void *)a3 + 128))() & 1;
}

BOOL EmergencyContactSlotResolver.shouldRunResolver(skIntent:nlIntent:)(uint64_t a1, void *a2)
{
  return PhoneCallNLIntent.isEmergencyContactCall()();
}

uint64_t specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:)()
{
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized SlotResolver.resolve(skIntent:nlIntent:)
                             + async function pointer to specialized SlotResolver.resolve(skIntent:nlIntent:));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:);
  return v3();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (__cdecl *v3)();
  uint64_t v4;

  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized SlotResolver.resolve(skIntent:nlIntent:)
                             + async function pointer to specialized SlotResolver.resolve(skIntent:nlIntent:));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:);
  return v3();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_16_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_13_1();
    return v9();
  }
  else
  {
    *(void *)(v5 + 32) = v3;
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v11, v12, v13);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  OUTLINED_FUNCTION_16_1();
  uint64_t v0 = OUTLINED_FUNCTION_57_4();
  INStartVideoCallIntent.overwriteContacts(newContacts:)((Swift::OpaquePointer)v0);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_51_4();
  uint64_t v1 = OUTLINED_FUNCTION_54_4();
  return v2(v1);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (__cdecl *v3)();
  uint64_t v4;

  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized SlotResolver.resolve(skIntent:nlIntent:)
                             + async function pointer to specialized SlotResolver.resolve(skIntent:nlIntent:));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:);
  return v3();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (__cdecl *v3)();
  uint64_t v4;

  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized SlotResolver.resolve(skIntent:nlIntent:)
                             + async function pointer to specialized SlotResolver.resolve(skIntent:nlIntent:));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:);
  return v3();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_16_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_13_1();
    return v9();
  }
  else
  {
    *(void *)(v5 + 32) = v3;
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v11, v12, v13);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  OUTLINED_FUNCTION_16_1();
  uint64_t v0 = OUTLINED_FUNCTION_57_4();
  INStartCallIntent.overwriteContacts(newContacts:)((Swift::OpaquePointer)v0);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_51_4();
  uint64_t v1 = OUTLINED_FUNCTION_54_4();
  return v2(v1);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:);
  return specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:)();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:);
  return specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:)();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:);
  return specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:)();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:);
  return specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:)();
}

uint64_t specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:);
  return specialized FirstHitIntentResolver.resolve(skIntent:nlIntent:)(a1, a2, a3);
}

{
  uint64_t v3;
  void *v7;
  uint64_t v9;

  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:);
  return specialized FirstHitIntentResolver.resolve(skIntent:nlIntent:)(a1, a2, a3);
}

{
  uint64_t v3;
  void *v7;
  uint64_t v9;

  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:);
  return specialized FirstHitIntentResolver.resolve(skIntent:nlIntent:)(a1, a2, a3);
}

uint64_t specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized SlotResolver.resolveSlot(skIntent:nlIntent:)
                                                + async function pointer to specialized SlotResolver.resolveSlot(skIntent:nlIntent:));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v5;
  void *v5 = v2;
  v5[1] = specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:);
  return v7(a1, a2);
}

{
  uint64_t v2;
  void *v5;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;

  *(void *)(v2 + 16) = a1;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized SlotResolver.resolveSlot(skIntent:nlIntent:)
                                                + async function pointer to specialized SlotResolver.resolveSlot(skIntent:nlIntent:));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v5;
  void *v5 = v2;
  v5[1] = specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:);
  return v7(a1, a2);
}

{
  uint64_t v2;
  void *v5;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;

  *(void *)(v2 + 16) = a1;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized SlotResolver.resolveSlot(skIntent:nlIntent:)
                                                + async function pointer to specialized SlotResolver.resolveSlot(skIntent:nlIntent:));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v5;
  void *v5 = v2;
  v5[1] = specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:);
  return v7(a1, a2);
}

ValueMetadata *type metadata accessor for PhoneIntentResolver()
{
  return &type metadata for PhoneIntentResolver;
}

uint64_t specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *a3;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:);
  return specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:)(a1, a2, v6);
}

{
  uint64_t v3;
  uint64_t v6;
  void *v7;
  uint64_t v9;

  uint64_t v6 = *a3;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:);
  return specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:)(a1, a2, v6);
}

{
  uint64_t v3;
  uint64_t v6;
  void *v7;
  uint64_t v9;

  uint64_t v6 = *a3;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:);
  return specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:)(a1, a2, v6);
}

uint64_t specialized implicit closure #2 in implicit closure #1 in AnyIntentResolver.init<A>(_:)()
{
  return CallingIntentContinueInAppStrategy.shouldCheckResponseModeToOutputIntentHandledDialog.getter();
}

uint64_t sub_1556F8()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t partial apply for specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:)()
{
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_10_25();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:);
  uint64_t v3 = OUTLINED_FUNCTION_7_39();
  return v4(v3);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_13_18();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_62_5(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:);
  uint64_t v3 = OUTLINED_FUNCTION_6_34();
  return v4(v3);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_10_25();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:);
  uint64_t v3 = OUTLINED_FUNCTION_7_39();
  return specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:)(v3, v4);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_10_25();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:);
  uint64_t v3 = OUTLINED_FUNCTION_7_39();
  return v4(v3);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_13_18();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_62_5(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:);
  uint64_t v3 = OUTLINED_FUNCTION_6_34();
  return v4(v3);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;

  OUTLINED_FUNCTION_1_0();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v3 + 8);
  return v5(v2);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_10_25();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:);
  uint64_t v3 = OUTLINED_FUNCTION_7_39();
  return specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:)(v3, v4);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;

  OUTLINED_FUNCTION_1_0();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v3 + 8);
  return v5(v2);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_10_25();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:);
  uint64_t v3 = OUTLINED_FUNCTION_7_39();
  return v4(v3);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_13_18();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_62_5(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:);
  uint64_t v3 = OUTLINED_FUNCTION_6_34();
  return v4(v3);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_10_25();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:);
  uint64_t v3 = OUTLINED_FUNCTION_7_39();
  return specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:)(v3, v4);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_13_18();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_62_5(v0);
  *uint64_t v1 = v2;
  v1[1] = partial apply for specialized implicit closure #4 in implicit closure #3 in AnyIntentResolver.init<A>(_:);
  uint64_t v3 = OUTLINED_FUNCTION_6_34();
  return v4(v3);
}

uint64_t partial apply for specialized implicit closure #2 in implicit closure #1 in AnyIntentResolver.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  return specialized implicit closure #2 in implicit closure #1 in AnyIntentResolver.init<A>(_:)(a1, a2, v2) & 1;
}

{
  uint64_t v2;

  return specialized implicit closure #2 in implicit closure #1 in AnyIntentResolver.init<A>(_:)(a1, a2, v2);
}

uint64_t partial apply for specialized implicit closure #2 in implicit closure #1 in AnyIntentResolver.init<A>(_:)()
{
  return specialized implicit closure #2 in implicit closure #1 in AnyIntentResolver.init<A>(_:)();
}

BOOL partial apply for specialized implicit closure #2 in implicit closure #1 in AnyIntentResolver.init<A>(_:)(uint64_t a1, void *a2)
{
  return EmergencyContactSlotResolver.shouldRunResolver(skIntent:nlIntent:)(a1, a2);
}

uint64_t OUTLINED_FUNCTION_6_34()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_7_39()
{
  return v0;
}

__n128 OUTLINED_FUNCTION_11_28()
{
  long long v2 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v1 + 144) = *(_OWORD *)v0;
  *(_OWORD *)(v1 + 160) = v2;
  __n128 result = *(__n128 *)(v0 + 32);
  long long v4 = *(_OWORD *)(v0 + 48);
  *(__n128 *)(v1 + 176) = result;
  *(_OWORD *)(v1 + 192) = v4;
  return result;
}

void OUTLINED_FUNCTION_13_18()
{
  *(void *)(v1 + 16) = v0;
}

uint64_t OUTLINED_FUNCTION_14_21(uint64_t a1)
{
  *(void *)(v1 + 472) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_15_20()
{
  __swift_project_boxed_opaque_existential_1(v1, *(void *)(v0 + 424));
  return swift_getDynamicType();
}

__n128 OUTLINED_FUNCTION_16_26()
{
  long long v2 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)uint64_t v0 = *(_OWORD *)v1;
  *(_OWORD *)(v0 + 16) = v2;
  __n128 result = *(__n128 *)(v1 + 32);
  long long v4 = *(_OWORD *)(v1 + 48);
  *(__n128 *)(v0 + 32) = result;
  *(_OWORD *)(v0 + 48) = v4;
  return result;
}

uint64_t OUTLINED_FUNCTION_18_19()
{
  return specialized closure #1 in FirstHitIntentResolver.resolve(skIntent:nlIntent:)(v0, v3, v1, v2);
}

uint64_t OUTLINED_FUNCTION_19_19(uint64_t a1)
{
  *uint64_t v1 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_20_16()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_23_15()
{
  return swift_arrayDestroy();
}

void OUTLINED_FUNCTION_24_18(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 0x16u);
}

uint64_t OUTLINED_FUNCTION_26_15(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return outlined init with copy of Result<TemplatingResult, Error>(v13, a12, v12);
}

void OUTLINED_FUNCTION_28_12()
{
  *(_WORD *)(v0 + 12) = 2080;
}

uint64_t OUTLINED_FUNCTION_29_14(uint64_t a1)
{
  *(void *)(v1 + 440) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_30_13()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_31_13()
{
  return *(void *)(v0 + 480);
}

uint64_t OUTLINED_FUNCTION_32_9()
{
  return outlined destroy of SubmitCommandError?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_33_10()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_34_6()
{
  return String.init<A>(describing:)();
}

uint64_t OUTLINED_FUNCTION_35_12(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)va);
}

id OUTLINED_FUNCTION_37_9()
{
  uint64_t v2 = *(void **)(v0 + 328);
  return v2;
}

uint64_t OUTLINED_FUNCTION_39_9()
{
  return swift_slowAlloc();
}

double OUTLINED_FUNCTION_42_8()
{
  double result = 0.0;
  v0[2] = 0u;
  v0[3] = 0u;
  *uint64_t v0 = 0u;
  v0[1] = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_45_7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_47_7()
{
  return v0 + 144;
}

void OUTLINED_FUNCTION_48_6(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t OUTLINED_FUNCTION_49_8()
{
  return *(void *)(v0 + 496);
}

id OUTLINED_FUNCTION_51_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_52_5()
{
  return v0 + 8;
}

uint64_t OUTLINED_FUNCTION_53_4()
{
  return *(void *)(v0 + 480);
}

uint64_t OUTLINED_FUNCTION_54_4()
{
  return *(void *)(v0 + 16);
}

void OUTLINED_FUNCTION_56_5(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t OUTLINED_FUNCTION_59_3()
{
  return INIntent.typedOrThrow<A>(as:)();
}

uint64_t OUTLINED_FUNCTION_60_4(uint64_t a1)
{
  uint64_t result = __swift_destroy_boxed_opaque_existential_1(v2);
  *(void *)(v1 + 464) = a1;
  return result;
}

uint64_t OUTLINED_FUNCTION_62_5(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t specialized Set.contains(_:)(unsigned __int8 a1, uint64_t a2)
{
  if (*(void *)(a2 + 16)
    && (Hasher.init(_seed:)(),
        PhoneCallVerb.rawValue.getter(a1),
        String.hash(into:)(),
        swift_bridgeObjectRelease(),
        Hasher._finalize()(),
        OUTLINED_FUNCTION_15_9(),
        unint64_t v6 = v5 & ~v4,
        ((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0))
  {
    uint64_t v7 = ~v4;
    uint64_t v8 = a1;
    while (1)
    {
      unint64_t v9 = 0xE400000000000000;
      uint64_t v10 = 1819042147;
      switch(*(unsigned char *)(*(void *)(a2 + 48) + v6))
      {
        case 1:
          uint64_t v10 = 0x636162206C6C6163;
          unint64_t v9 = 0xE90000000000006BLL;
          break;
        case 2:
          unint64_t v9 = 0xE800000000000000;
          uint64_t v10 = OUTLINED_FUNCTION_59_0();
          break;
        case 3:
          uint64_t v10 = OUTLINED_FUNCTION_59_0();
          uint64_t v11 = 0x6F6964756120;
          goto LABEL_21;
        case 4:
          uint64_t v10 = 0x7072656B61657073;
          uint64_t v12 = 1701736296;
          goto LABEL_18;
        case 5:
          uint64_t v10 = 1684957542;
          break;
        case 6:
          unint64_t v9 = 0xE600000000000000;
          uint64_t v10 = 0x6C6169646572;
          break;
        case 7:
          unint64_t v9 = 0xE700000000000000;
          uint64_t v10 = 0x79666972616C63;
          break;
        case 8:
          uint64_t v10 = 1684104562;
          break;
        case 9:
          unint64_t v9 = 0xE700000000000000;
          uint64_t v10 = 0x6D7269666E6F63;
          break;
        case 0xA:
          unint64_t v9 = 0xE600000000000000;
          uint64_t v10 = 0x726577736E61;
          break;
        case 0xB:
          unint64_t v9 = 0xE700000000000000;
          uint64_t v10 = 0x70755F676E6168;
          break;
        case 0xC:
          unint64_t v9 = 0xE600000000000000;
          uint64_t v10 = 0x6574656C6564;
          break;
        case 0xD:
          uint64_t v10 = 0x65526F54746E6177;
          uint64_t v12 = 1952540016;
LABEL_18:
          unint64_t v9 = v12 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
          break;
        case 0xE:
          uint64_t v10 = 1852403562;
          break;
        case 0xF:
          uint64_t v10 = 0x6974726150646461;
          uint64_t v11 = 0x746E61706963;
LABEL_21:
          unint64_t v9 = v11 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
          break;
        case 0x10:
          unint64_t v9 = 0x800000000048DB80;
          uint64_t v10 = 0xD000000000000011;
          break;
        default:
          break;
      }
      unint64_t v13 = 0xE400000000000000;
      unint64_t v14 = 1819042147;
      switch(v8)
      {
        case 1:
          unint64_t v14 = 0x636162206C6C6163;
          unint64_t v13 = 0xE90000000000006BLL;
          break;
        case 2:
          unint64_t v13 = 0xE800000000000000;
          OUTLINED_FUNCTION_54();
          break;
        case 3:
          OUTLINED_FUNCTION_54();
          uint64_t v15 = 0x6F6964756120;
          goto LABEL_40;
        case 4:
          unint64_t v14 = 0x7072656B61657073;
          uint64_t v16 = 1701736296;
          goto LABEL_37;
        case 5:
          unint64_t v14 = 1684957542;
          break;
        case 6:
          unint64_t v13 = 0xE600000000000000;
          unint64_t v14 = 0x6C6169646572;
          break;
        case 7:
          unint64_t v13 = 0xE700000000000000;
          unint64_t v14 = 0x79666972616C63;
          break;
        case 8:
          unint64_t v14 = 1684104562;
          break;
        case 9:
          unint64_t v13 = 0xE700000000000000;
          unint64_t v14 = 0x6D7269666E6F63;
          break;
        case 10:
          unint64_t v13 = 0xE600000000000000;
          unint64_t v14 = 0x726577736E61;
          break;
        case 11:
          unint64_t v13 = 0xE700000000000000;
          unint64_t v14 = 0x70755F676E6168;
          break;
        case 12:
          unint64_t v13 = 0xE600000000000000;
          unint64_t v14 = 0x6574656C6564;
          break;
        case 13:
          unint64_t v14 = 0x65526F54746E6177;
          uint64_t v16 = 1952540016;
LABEL_37:
          unint64_t v13 = v16 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
          break;
        case 14:
          unint64_t v14 = 1852403562;
          break;
        case 15:
          unint64_t v14 = 0x6974726150646461;
          uint64_t v15 = 0x746E61706963;
LABEL_40:
          unint64_t v13 = v15 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
          break;
        case 16:
          unint64_t v13 = 0x800000000048DB80;
          unint64_t v14 = 0xD000000000000011;
          break;
        default:
          break;
      }
      if (v10 == v14 && v9 == v13) {
        break;
      }
      char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v18 & 1) == 0)
      {
        unint64_t v6 = (v6 + 1) & v7;
        if ((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6)) {
          continue;
        }
      }
      return v18 & 1;
    }
    swift_bridgeObjectRelease_n();
    char v18 = 1;
  }
  else
  {
    char v18 = 0;
  }
  return v18 & 1;
}

void specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    Swift::Int v8 = v6 & ~v7;
    OUTLINED_FUNCTION_16_14();
    if (v9)
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      if ((*v11 != a1 || v11[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        uint64_t v13 = ~v7;
        uint64_t v14 = (v8 + 1) & v13;
        OUTLINED_FUNCTION_16_14();
        if (v15)
        {
          do
          {
            uint64_t v16 = (void *)(v10 + 16 * v14);
            if (*v16 == a1 && v16[1] == a2) {
              break;
            }
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              break;
            }
            uint64_t v14 = (v14 + 1) & v13;
            OUTLINED_FUNCTION_16_14();
          }
          while ((v18 & 1) != 0);
        }
      }
    }
  }
}

uint64_t specialized Set.contains(_:)(char a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    goto LABEL_9;
  }
  Swift::UInt v3 = a1 & 1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    goto LABEL_9;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (((v3 == 0) ^ *(unsigned __int8 *)(v8 + v6)))
  {
    char v9 = 1;
    return v9 & 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
  {
LABEL_9:
    char v9 = 0;
    return v9 & 1;
  }
  do
  {
    char v9 = (v3 == 0) ^ *(unsigned char *)(v8 + v11);
    if (v9) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return v9 & 1;
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for SiriKitReliabilityCodes();
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_4();
  uint64_t v9 = v8 - v7;
  if (*(void *)(a2 + 16)
    && (lazy protocol witness table accessor for type App and conformance App(&lazy protocol witness table cache variable for type SiriKitReliabilityCodes and conformance SiriKitReliabilityCodes, (void (*)(uint64_t))&type metadata accessor for SiriKitReliabilityCodes), dispatch thunk of Hashable._rawHashValue(seed:)(), OUTLINED_FUNCTION_15_9(), v12 = v11 & ~v10, uint64_t v13 = a2 + 56, ((*(void *)(a2 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) != 0))
  {
    uint64_t v20 = ~v10;
    uint64_t v21 = a2;
    uint64_t v14 = v5 + 16;
    char v15 = *(void (**)(uint64_t, unint64_t, uint64_t))(v5 + 16);
    uint64_t v16 = *(void *)(v14 + 56);
    uint64_t v17 = (void (**)(uint64_t, uint64_t))(v14 - 8);
    do
    {
      v15(v9, *(void *)(v21 + 48) + v16 * v12, v3);
      lazy protocol witness table accessor for type App and conformance App(&lazy protocol witness table cache variable for type SiriKitReliabilityCodes and conformance SiriKitReliabilityCodes, (void (*)(uint64_t))&type metadata accessor for SiriKitReliabilityCodes);
      char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v17)(v9, v3);
      if (v18) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v20;
    }
    while (((*(void *)(v13 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
  }
  else
  {
    char v18 = 0;
  }
  return v18 & 1;
}

{
  uint64_t v4;
  void (**v5)(void, void);
  void (**v6)(void, void);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v31;
  void (**v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  int v35;
  void (**v36)(void, void);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  uint64_t v4 = type metadata accessor for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues();
  OUTLINED_FUNCTION_0_0();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_3_1();
  uint64_t v34 = v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?));
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_4();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
  char v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14 - 8);
  char v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v31 - v19;
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v36 = v6;
  Hasher.init(_seed:)();
  specialized Optional<A>.hash(into:)();
  Hasher._finalize()();
  OUTLINED_FUNCTION_15_9();
  uint64_t v23 = v22 & ~v21;
  uint64_t v39 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
    return 0;
  }
  uint64_t v37 = ~v21;
  uint64_t v38 = *(void *)(v15 + 72);
  uint64_t v32 = (void (**)(uint64_t, uint64_t, uint64_t))(v36 + 4);
  uint64_t v33 = v9;
  ++v36;
  uint64_t v31 = a1;
  while (1)
  {
    _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(*(void *)(a2 + 48) + v38 * v23, (uint64_t)v20, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
    uint64_t v24 = v13 + *(int *)(v9 + 48);
    _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0((uint64_t)v20, v13, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
    _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(a1, v24, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
    OUTLINED_FUNCTION_4_6(v13);
    if (v25) {
      break;
    }
    _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(v13, (uint64_t)v18, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
    OUTLINED_FUNCTION_4_6(v24);
    if (v25)
    {
      (*v36)(v18, v4);
LABEL_12:
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v13, &demangling cache variable for type metadata for (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?));
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v20, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
      goto LABEL_14;
    }
    int v26 = v34;
    (*v32)(v34, v24, v4);
    lazy protocol witness table accessor for type App and conformance App(&lazy protocol witness table cache variable for type UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues and conformance UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues, (void (*)(uint64_t))&type metadata accessor for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues);
    uint64_t v35 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v27 = a2;
    uint64_t v28 = (void (*)(char *, uint64_t))*v36;
    uint64_t v29 = v26;
    uint64_t v9 = v33;
    (*v36)(v29, v4);
    v28(v18, v4);
    a2 = v27;
    a1 = v31;
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v13, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v20, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
    if (v35) {
      return 1;
    }
LABEL_14:
    uint64_t v23 = (v23 + 1) & v37;
    if (((*(void *)(v39 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
      return 0;
    }
  }
  OUTLINED_FUNCTION_4_6(v24);
  if (!v25) {
    goto LABEL_12;
  }
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v13, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v20, &demangling cache variable for type metadata for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?);
  return 1;
}

uint64_t specialized Set.contains(_:)(uint64_t a1)
{
  if (!*(void *)(a1 + 16)) {
    return 0;
  }
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  Hasher._finalize()();
  OUTLINED_FUNCTION_15_9();
  return (*(void *)(a1 + (((v2 & (unint64_t)~v3) >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> (v2 & ~(_BYTE)v3)) & 1;
}

uint64_t static CarPlayDirectInvocationFlowFactory.makeStartAudioCallDirectInvocationFlow(directAction:sharedGlobals:appFinder:)(uint64_t *a1, void *a2, void *a3)
{
  void (*v10)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(void *, uint64_t, uint64_t);
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  void *v57;
  uint64_t v58[3];
  uint64_t v59;
  uint64_t v60;
  void v61[6];
  void v62[4];
  char v63;
  void *v64;
  void v65[4];
  char v66;
  void *v67;

  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a3[3];
  uint64_t v7 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v6);
  uint64_t v8 = a2[3];
  uint64_t v9 = a2[4];
  unint64_t v57 = a2;
  __swift_project_boxed_opaque_existential_1(a2, v8);
  uint64_t v10 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v9 + 8);
  swift_bridgeObjectRetain();
  v10(v65, v8, v9);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, void *, void *, uint64_t, uint64_t))(v7 + 8))(v61, v4, v5, _swiftEmptyArrayStorage, v65, v6, v7);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
  outlined init with take of AnnotatedApp?((uint64_t)v61, (uint64_t)v62, &demangling cache variable for type metadata for AnnotatedApp?);
  uint64_t v11 = v62[0];
  if (v62[0])
  {
    unint64_t v12 = (void *)v62[1];
    uint64_t v13 = v62[2];
    uint64_t v14 = v62[3];
    char v15 = v63;
    uint64_t v16 = v64;
  }
  else
  {
    type metadata accessor for App();
    swift_bridgeObjectRetain();
    uint64_t v11 = App.__allocating_init(appIdentifier:)();
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    char v15 = 2;
    uint64_t v16 = &_swiftEmptySetSingleton;
    unint64_t v12 = &_swiftEmptySetSingleton;
  }
  uint64_t v17 = a2[3];
  char v18 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v17);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v18 + 152))(v58, v17, v18);
  id v19 = v59;
  uint64_t v20 = v60;
  __swift_project_boxed_opaque_existential_1(v58, v59);
  v65[0] = v11;
  v65[1] = v12;
  v65[2] = v13;
  v65[3] = v14;
  id v66 = v15;
  char v67 = v16;
  uint64_t v21 = *(void (**)(void *, uint64_t, uint64_t))(v20 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  v21(v65, v19, v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
  uint64_t v22 = objc_allocWithZone((Class)INStartCallIntent);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v23 = [v22 init];
  uint64_t v24 = [v23 _className];

  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v27 = v26;

  specialized Set.contains(_:)(v25, v27, (uint64_t)v12);
  LOBYTE(v25) = v28;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (v25)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.siriPhone);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v30 = Logger.logObject.getter();
    uint64_t v31 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v30, v31))
    {
      OUTLINED_FUNCTION_5_22();
      uint64_t v55 = OUTLINED_FUNCTION_11_29();
      v58[0] = v55;
      OUTLINED_FUNCTION_12_21(4.8149e-34);
      lazy protocol witness table accessor for type App and conformance App((unint64_t *)&lazy protocol witness table cache variable for type App and conformance App, (void (*)(uint64_t))&type metadata accessor for App);
      uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, v58);
      OUTLINED_FUNCTION_10_26();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_22_17();
      OUTLINED_FUNCTION_20_17();
      OUTLINED_FUNCTION_6_2();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_28_13(&dword_0, v34, v35, "#CarPlayDirectActionFlowFactory Using INStartCallIntent, app: %s");
      OUTLINED_FUNCTION_34_7();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_22_17();
      OUTLINED_FUNCTION_20_17();
      OUTLINED_FUNCTION_6_2();
    }
    uint64_t v43 = (void *)StartAudioCallDirectAction.startCallIntent.getter();
    id v44 = &demangling cache variable for type metadata for CarPlayDirectInvocationFlow<INStartCallIntent>;
    v58[0] = (uint64_t)OUTLINED_FUNCTION_32_10((uint64_t)v43, v45, v46, v47, &demangling cache variable for type metadata for OnDeviceCarPlayWithInputFlowStrategy<CarPlayRCHFlowProvider<INStartCallIntent>>, &demangling cache variable for type metadata for CarPlayRCHFlowProvider<INStartCallIntent>, &demangling cache variable for type metadata for AnyIntentCarPlayDirectActionFlowStrategy<INStartCallIntent>, (uint64_t)specialized AnyIntentCarPlayDirectActionFlowStrategy.init<A>(_:), &demangling cache variable for type metadata for CarPlayDirectInvocationFlow<INStartCallIntent>, &demangling cache variable for type metadata for DefaultCarPlayDirectActionFlowStrategy<CarPlayRCHFlowProvider<INStartCallIntent>>, (uint64_t (*)(unsigned char *))specialized AnyIntentCarPlayDirectActionFlowStrategy.init<A>(_:), v54, v55, (uint64_t)a1, v57);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CarPlayDirectInvocationFlow<INStartCallIntent>);
    uint64_t v48 = (unint64_t *)&lazy protocol witness table cache variable for type CarPlayDirectInvocationFlow<INStartCallIntent> and conformance CarPlayDirectInvocationFlow<A>;
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)static Logger.siriPhone);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v37 = Logger.logObject.getter();
    uint64_t v38 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v37, v38))
    {
      OUTLINED_FUNCTION_5_22();
      uint64_t v55 = OUTLINED_FUNCTION_11_29();
      v58[0] = v55;
      OUTLINED_FUNCTION_12_21(4.8149e-34);
      lazy protocol witness table accessor for type App and conformance App((unint64_t *)&lazy protocol witness table cache variable for type App and conformance App, (void (*)(uint64_t))&type metadata accessor for App);
      uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, v58);
      OUTLINED_FUNCTION_10_26();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_22_17();
      OUTLINED_FUNCTION_20_17();
      OUTLINED_FUNCTION_6_2();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_28_13(&dword_0, v41, v42, "#CarPlayDirectActionFlowFactory Using INStartAudioCallIntent, app: %s");
      OUTLINED_FUNCTION_34_7();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_22_17();
      OUTLINED_FUNCTION_20_17();
      OUTLINED_FUNCTION_6_2();
    }
    uint64_t v43 = (void *)StartAudioCallDirectAction.startAudioCallIntent.getter();
    id v44 = &demangling cache variable for type metadata for CarPlayDirectInvocationFlow<INStartAudioCallIntent>;
    v58[0] = (uint64_t)OUTLINED_FUNCTION_32_10((uint64_t)v43, v49, v50, v51, &demangling cache variable for type metadata for OnDeviceCarPlayWithInputFlowStrategy<CarPlayRCHFlowProvider<INStartAudioCallIntent>>, &demangling cache variable for type metadata for CarPlayRCHFlowProvider<INStartAudioCallIntent>, &demangling cache variable for type metadata for AnyIntentCarPlayDirectActionFlowStrategy<INStartAudioCallIntent>, (uint64_t)specialized AnyIntentCarPlayDirectActionFlowStrategy.init<A>(_:), &demangling cache variable for type metadata for CarPlayDirectInvocationFlow<INStartAudioCallIntent>, &demangling cache variable for type metadata for DefaultCarPlayDirectActionFlowStrategy<CarPlayRCHFlowProvider<INStartAudioCallIntent>>, (uint64_t (*)(unsigned char *))specialized AnyIntentCarPlayDirectActionFlowStrategy.init<A>(_:), v54, v55, (uint64_t)a1, v57);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CarPlayDirectInvocationFlow<INStartAudioCallIntent>);
    uint64_t v48 = (unint64_t *)&lazy protocol witness table cache variable for type CarPlayDirectInvocationFlow<INStartAudioCallIntent> and conformance CarPlayDirectInvocationFlow<A>;
  }
  lazy protocol witness table accessor for type CarPlayDirectInvocationFlow<INStartAudioCallIntent> and conformance CarPlayDirectInvocationFlow<A>(v48, v44);
  uint64_t v52 = Flow.eraseToAnyFlow()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return v52;
}

uint64_t static CarPlayDirectInvocationFlowFactory.makeStartCallDirectInvocationFlow(directAction:sharedGlobals:appFinder:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  v8[0] = a1;
  v8[1] = a2;
  memset(&v8[2], 0, 24);
  long long v9 = xmmword_46A570;
  long long v10 = xmmword_46A570;
  swift_bridgeObjectRetain();
  uint64_t v6 = static CarPlayDirectInvocationFlowFactory.makeStartAudioCallDirectInvocationFlow(directAction:sharedGlobals:appFinder:)(v8, a3, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data?(0, 0xF000000000000000);
  outlined consume of Data?(0, 0xF000000000000000);
  return v6;
}

void *specialized CarPlayDirectInvocationFlow.init(app:intent:strategy:aceServiceInvoker:)(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  uint64_t v5 = v4;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.siriPhone);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)OUTLINED_FUNCTION_7_2();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_0, v11, v12, "#Gatekeeper Initialized GatekeeperLegacyCallingIntentFlow", v13, 2u);
    OUTLINED_FUNCTION_6();
  }

  long long v5[2] = a1;
  v5[3] = a2;
  v5[4] = a3;
  outlined init with take of AppSelectionSignalComponent(a4, (uint64_t)(v5 + 5));
  return v5;
}

void *specialized static CarPlayDirectInvocationFlowFactory.makeCarPlayDirectInvocationFlow<A>(app:intent:directAction:sharedGlobals:)(uint64_t a1, void *a2, void *a3, void *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t a8, uint64_t *a9, uint64_t *a10, uint64_t (*a11)(unsigned char *))
{
  void (*v112)(long long *__return_ptr, uint64_t, uint64_t);
  id v113;
  void *v114;
  void v116[2];
  uint64_t v117;
  uint8_t *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint8_t *v127;
  uint64_t v128;
  os_log_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  void (*v133)(void, void);
  uint64_t *v134;
  uint64_t *v135;
  uint64_t *v136;
  void *v137;
  void (*v138)(uint64_t, char *, uint64_t);
  void *v139;
  unsigned char v140[48];
  long long v141;
  uint64_t v142;
  char v143[8];

  uint64_t v132 = a8;
  uint64_t v136 = a7;
  uint64_t v134 = a6;
  uint64_t v139 = a4;
  uint64_t v137 = a3;
  uint64_t v124 = __swift_instantiateConcreteTypeFromMangledName(a5);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_5_8();
  OUTLINED_FUNCTION_15_1();
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_20_15((uint64_t)v116 - v16);
  uint64_t v128 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v127 = v17;
  __chkstk_darwin(v18);
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_20_15(v19);
  uint64_t v20 = type metadata accessor for Input();
  OUTLINED_FUNCTION_0_0();
  uint64_t v22 = v21;
  __chkstk_darwin(v23);
  OUTLINED_FUNCTION_5_8();
  OUTLINED_FUNCTION_15_1();
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v138 = (void (*)(uint64_t, char *, uint64_t))((char *)v116 - v26);
  __chkstk_darwin(v25);
  OUTLINED_FUNCTION_15_1();
  __chkstk_darwin(v27);
  uint64_t v120 = (char *)v116 - v28;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLIntent?);
  uint64_t v30 = OUTLINED_FUNCTION_11_0(v29);
  __chkstk_darwin(v30);
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_20_15(v31);
  uint64_t v123 = type metadata accessor for NLIntent();
  OUTLINED_FUNCTION_0_0();
  uint64_t v119 = v32;
  __chkstk_darwin(v33);
  OUTLINED_FUNCTION_3_1();
  uint64_t v118 = v34;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v35 = type metadata accessor for Logger();
  uint64_t v36 = __swift_project_value_buffer(v35, (uint64_t)static Logger.siriPhone);
  id v37 = a2;
  uint64_t v126 = v36;
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.debug.getter();
  BOOL v40 = os_log_type_enabled(v38, v39);
  uint64_t v125 = a5;
  uint64_t v135 = a9;
  uint64_t v130 = v22;
  if (v40)
  {
    id v41 = v37;
    id v42 = (uint8_t *)swift_slowAlloc();
    uint64_t v121 = swift_slowAlloc();
    uint64_t v142 = v121;
    *(_DWORD *)id v42 = 136315138;
    v116[1] = v42 + 4;
    id v43 = [v37 typeName];
    uint64_t v44 = v20;
    uint64_t v45 = a1;
    id v46 = v43;
    uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v49 = v48;

    a1 = v45;
    uint64_t v20 = v44;
    id v37 = v41;
    *(void *)&uint64_t v141 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v49, &v142);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v38, v39, "#CarPlayDirectActionFlowFactory Building CarPlayDirectInvocationFlow: intentType=%s)", v42, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
  }
  outlined init with copy of SignalProviding((uint64_t)v139, (uint64_t)v143);
  uint64_t v142 = a1;
  uint64_t v50 = swift_retain();
  INIntent.setMetaData(app:previousIntent:sharedGlobals:)(v50, 0);
  unint64_t v51 = v137[7];
  if (v51 >> 60 != 15)
  {
    uint64_t v52 = v137[6];
    outlined copy of Data._Representation(v52, v137[7]);
    outlined copy of Data._Representation(v52, v51);
    uint64_t v53 = v122;
    NLIntent.init(protobufData:)();
    OUTLINED_FUNCTION_35_13();
    OUTLINED_FUNCTION_36_11();
    uint64_t v82 = v123;
    __swift_storeEnumTagSinglePayload(v83, v84, v85, v123);
    uint64_t v86 = v53;
    uint64_t v87 = v119;
    uint64_t v88 = v118;
    (*(void (**)(uint8_t *, uint64_t, uint64_t))(v119 + 32))(v118, v86, v82);
    (*(void (**)(os_log_t, uint8_t *, uint64_t))(v87 + 16))(v129, v88, v82);
    uint64_t v89 = OUTLINED_FUNCTION_6_35();
    v90(v89);
    uint64_t v91 = v120;
    Input.init(parse:)();
    uint64_t v92 = v130;
    uint64_t v93 = v117;
    uint64_t v138 = (void (*)(uint64_t, char *, uint64_t))v130[2];
    v138(v117, v91, v20);
    os_log_t v94 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v95 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v94, v95))
    {
      uint64_t v129 = v94;
      OUTLINED_FUNCTION_5_22();
      uint64_t v128 = OUTLINED_FUNCTION_11_29();
      *(void *)&uint64_t v141 = v128;
      uint64_t v127 = v88;
      *(_DWORD *)uint64_t v88 = 136315138;
      lazy protocol witness table accessor for type App and conformance App((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, (void (*)(uint64_t))&type metadata accessor for Input);
      uint64_t v96 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v98 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v96, v97, (uint64_t *)&v141);
      OUTLINED_FUNCTION_25_15(v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      id v99 = (void *)v92[1];
      uint64_t v133 = (void (*)(void, void))((unint64_t)(v92 + 1) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
      uint64_t v100 = v20;
      uint64_t v130 = v99;
      ((void (*)(uint64_t, uint64_t))v99)(v93, v20);
      os_log_t v94 = v129;
      _os_log_impl(&dword_0, v129, v95, "#CarPlayDirectActionFlowFactory Received directInvocation with NLv3 input: %s", v127, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {
      uint64_t v101 = (void *)v92[1];
      uint64_t v133 = (void (*)(void, void))((unint64_t)(v92 + 1) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
      uint64_t v100 = v20;
      uint64_t v130 = v101;
      ((void (*)(uint64_t, uint64_t))v101)(v93, v20);
    }

    uint64_t v102 = v125;
    uint64_t v103 = OUTLINED_FUNCTION_23_16();
    uint64_t v105 = *(void *)(v104 - 256);
    uint64_t v106 = v134;
    _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(v103, v105, v134);
    uint64_t v107 = v120;
    v138(v105 + SLODWORD(v94[5].isa), v120, v100);
    a1 = (uint64_t)v137;
    *(void *)(v105 + 48) = v137;
    _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(v105, v131, v102);
    __swift_instantiateConcreteTypeFromMangledName(v136);
    swift_allocObject();
    swift_retain();
    uint64_t v108 = OUTLINED_FUNCTION_21_18();
    uint64_t v71 = v109(v108);
    outlined consume of Data?(v52, v51);
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v105, v102);
    ((void (*)(char *, uint64_t))v130)(v107, v100);
    unint64_t v70 = v106;
    (*(void (**)(uint8_t *, uint64_t))(v119 + 8))(v118, v123);
LABEL_18:
    uint64_t v72 = v135;
    id v37 = (id)v121;
    goto LABEL_19;
  }
  uint64_t v54 = (objc_class *)v137[8];
  uint64_t v55 = v133;
  if (v54)
  {
    OUTLINED_FUNCTION_35_13();
    v129->Class isa = v54;
    uint64_t v56 = OUTLINED_FUNCTION_6_35();
    v57(v56);
    swift_unknownObjectRetain_n();
    id v58 = v138;
    Input.init(parse:)();
    uint64_t v129 = (os_log_t)v130[2];
    ((void (*)(void (*)(void, void), void, uint64_t))v129)(v55, v58, v20);
    uint64_t v59 = v126;
    uint64_t v60 = (uint8_t *)Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled((os_log_t)v60, v61))
    {
      char v62 = (uint8_t *)OUTLINED_FUNCTION_5_22();
      uint64_t v128 = swift_slowAlloc();
      *(void *)&uint64_t v141 = v128;
      uint64_t v127 = v60;
      *(_DWORD *)char v62 = 136315138;
      lazy protocol witness table accessor for type App and conformance App((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, (void (*)(uint64_t))&type metadata accessor for Input);
      uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v64, (uint64_t *)&v141);
      OUTLINED_FUNCTION_25_15(v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_24_19();
      uint64_t v66 = v20;
      OUTLINED_FUNCTION_18_20(v67);
      v68();
      uint64_t v69 = v127;
      _os_log_impl(&dword_0, (os_log_t)v127, v61, "#CarPlayDirectActionFlowFactory Received directInvocation with NLv4 input: %s", v62, 0xCu);
      uint64_t v59 = v128;
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {
      OUTLINED_FUNCTION_24_19();
      OUTLINED_FUNCTION_18_20(v73);
      v74();

      uint64_t v66 = v20;
    }
    unint64_t v70 = v134;
    uint64_t v75 = OUTLINED_FUNCTION_23_16();
    uint64_t v77 = *(void *)(v76 - 256);
    _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(v75, v77, v70);
    uint64_t v78 = v138;
    ((void (*)(uint64_t, void, uint64_t))v129)(v77 + *(int *)(v59 + 40), v138, v66);
    a1 = (uint64_t)v137;
    *(void *)(v77 + 48) = v137;
    uint64_t v79 = v125;
    _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(v77, v131, v125);
    __swift_instantiateConcreteTypeFromMangledName(v136);
    swift_allocObject();
    swift_retain();
    uint64_t v80 = OUTLINED_FUNCTION_21_18();
    uint64_t v71 = v81(v80);
    swift_unknownObjectRelease();
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v77, v79);
    v133(v78, v66);
    goto LABEL_18;
  }
  unint64_t v70 = v134;
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0((uint64_t)&v142, (uint64_t)&v141, v134);
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0((uint64_t)&v141, (uint64_t)v140, a10);
  __swift_instantiateConcreteTypeFromMangledName(v136);
  swift_allocObject();
  uint64_t v71 = a11(v140);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)&v141, a10);
  uint64_t v72 = v135;
LABEL_19:
  uint64_t v110 = v139[3];
  uint64_t v111 = v139[4];
  __swift_project_boxed_opaque_existential_1(v139, v110);
  id v112 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v111 + 32);
  uint64_t v113 = v37;
  swift_retain();
  v112(&v141, v110, v111);
  __swift_instantiateConcreteTypeFromMangledName(v72);
  swift_allocObject();
  long long v114 = specialized CarPlayDirectInvocationFlow.init(app:intent:strategy:aceServiceInvoker:)(a1, (uint64_t)v113, v71, &v141);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)&v142, v70);
  return v114;
}

void *specialized AnyIntentCarPlayDirectActionFlowStrategy.init<A>(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(a1, (uint64_t)&v12, &demangling cache variable for type metadata for CarPlayRCHFlowProvider<INStartAudioCallIntent>);
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0((uint64_t)&v12, (uint64_t)v11, &demangling cache variable for type metadata for CarPlayRCHFlowProvider<INStartAudioCallIntent>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyIntentCarPlayRCHFlowProvider<INStartAudioCallIntent>);
  swift_allocObject();
  uint64_t v4 = specialized AnyIntentCarPlayRCHFlowProvider.init<A>(_:)((uint64_t)v11);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)&v12, &demangling cache variable for type metadata for CarPlayRCHFlowProvider<INStartAudioCallIntent>);
  v2[2] = v4;
  v2[6] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DefaultCarPlayDirectActionFlowStrategy<CarPlayRCHFlowProvider<INStartAudioCallIntent>>);
  uint64_t v5 = swift_allocObject();
  v2[3] = v5;
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(a1, v5 + 16, &demangling cache variable for type metadata for DefaultCarPlayDirectActionFlowStrategy<CarPlayRCHFlowProvider<INStartAudioCallIntent>>);
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(a1, (uint64_t)&v12, &demangling cache variable for type metadata for DefaultCarPlayDirectActionFlowStrategy<CarPlayRCHFlowProvider<INStartAudioCallIntent>>);
  uint64_t v6 = (_OWORD *)swift_allocObject();
  long long v7 = v13;
  v6[1] = v12;
  long long v6[2] = v7;
  v6[3] = v14;
  v2[7] = partial apply for specialized implicit closure #4 in implicit closure #3 in AnyIntentCarPlayRCHFlowProvider.init<A>(_:);
  v2[8] = v6;
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(a1, (uint64_t)&v12, &demangling cache variable for type metadata for DefaultCarPlayDirectActionFlowStrategy<CarPlayRCHFlowProvider<INStartAudioCallIntent>>);
  uint64_t v8 = (_OWORD *)swift_allocObject();
  long long v9 = v13;
  v8[1] = v12;
  v8[2] = v9;
  void v8[3] = v14;
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(a1, &demangling cache variable for type metadata for DefaultCarPlayDirectActionFlowStrategy<CarPlayRCHFlowProvider<INStartAudioCallIntent>>);
  v2[9] = partial apply for specialized implicit closure #4 in implicit closure #3 in AnyIntentCarPlayDirectActionFlowStrategy.init<A>(_:);
  v2[10] = v8;
  return v2;
}

{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned char *v7;
  void *v8;
  uint64_t *boxed_opaque_existential_1;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned char v14[48];
  unsigned char v15[48];

  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceCarPlayWithInputFlowStrategy<CarPlayRCHFlowProvider<INStartAudioCallIntent>>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  long long v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(a1, (uint64_t)v15, &demangling cache variable for type metadata for CarPlayRCHFlowProvider<INStartAudioCallIntent>);
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0((uint64_t)v15, (uint64_t)v14, &demangling cache variable for type metadata for CarPlayRCHFlowProvider<INStartAudioCallIntent>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyIntentCarPlayRCHFlowProvider<INStartAudioCallIntent>);
  swift_allocObject();
  uint64_t v8 = specialized AnyIntentCarPlayRCHFlowProvider.init<A>(_:)((uint64_t)v14);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v15, &demangling cache variable for type metadata for CarPlayRCHFlowProvider<INStartAudioCallIntent>);
  v2[2] = v8;
  v2[6] = v4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v2 + 3);
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(a1, (uint64_t)boxed_opaque_existential_1, &demangling cache variable for type metadata for OnDeviceCarPlayWithInputFlowStrategy<CarPlayRCHFlowProvider<INStartAudioCallIntent>>);
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(a1, (uint64_t)v7, &demangling cache variable for type metadata for OnDeviceCarPlayWithInputFlowStrategy<CarPlayRCHFlowProvider<INStartAudioCallIntent>>);
  uint64_t v10 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v11 = swift_allocObject();
  outlined init with take of AnnotatedApp?((uint64_t)v7, v11 + v10, &demangling cache variable for type metadata for OnDeviceCarPlayWithInputFlowStrategy<CarPlayRCHFlowProvider<INStartAudioCallIntent>>);
  v2[7] = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyIntentCarPlayDirectActionFlowStrategy.init<A>(_:);
  v2[8] = v11;
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(a1, (uint64_t)v7, &demangling cache variable for type metadata for OnDeviceCarPlayWithInputFlowStrategy<CarPlayRCHFlowProvider<INStartAudioCallIntent>>);
  long long v12 = swift_allocObject();
  outlined init with take of AnnotatedApp?((uint64_t)v7, v12 + v10, &demangling cache variable for type metadata for OnDeviceCarPlayWithInputFlowStrategy<CarPlayRCHFlowProvider<INStartAudioCallIntent>>);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(a1, &demangling cache variable for type metadata for OnDeviceCarPlayWithInputFlowStrategy<CarPlayRCHFlowProvider<INStartAudioCallIntent>>);
  v2[9] = partial apply for specialized implicit closure #4 in implicit closure #3 in AnyIntentCarPlayDirectActionFlowStrategy.init<A>(_:);
  v2[10] = v12;
  return v2;
}

{
  void *v1;
  void *v2;
  void *v4;
  uint64_t v5;
  _OWORD *v6;
  long long v7;
  _OWORD *v8;
  long long v9;
  unsigned char v11[48];
  long long v12;
  long long v13;
  long long v14;

  uint64_t v2 = v1;
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(a1, (uint64_t)&v12, &demangling cache variable for type metadata for CarPlayRCHFlowProvider<INStartCallIntent>);
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0((uint64_t)&v12, (uint64_t)v11, &demangling cache variable for type metadata for CarPlayRCHFlowProvider<INStartCallIntent>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyIntentCarPlayRCHFlowProvider<INStartCallIntent>);
  swift_allocObject();
  uint64_t v4 = specialized AnyIntentCarPlayRCHFlowProvider.init<A>(_:)((uint64_t)v11);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)&v12, &demangling cache variable for type metadata for CarPlayRCHFlowProvider<INStartCallIntent>);
  v2[2] = v4;
  v2[6] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DefaultCarPlayDirectActionFlowStrategy<CarPlayRCHFlowProvider<INStartCallIntent>>);
  uint64_t v5 = swift_allocObject();
  v2[3] = v5;
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(a1, v5 + 16, &demangling cache variable for type metadata for DefaultCarPlayDirectActionFlowStrategy<CarPlayRCHFlowProvider<INStartCallIntent>>);
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(a1, (uint64_t)&v12, &demangling cache variable for type metadata for DefaultCarPlayDirectActionFlowStrategy<CarPlayRCHFlowProvider<INStartCallIntent>>);
  uint64_t v6 = (_OWORD *)swift_allocObject();
  long long v7 = v13;
  v6[1] = v12;
  long long v6[2] = v7;
  v6[3] = v14;
  v2[7] = partial apply for specialized implicit closure #4 in implicit closure #3 in AnyIntentCarPlayRCHFlowProvider.init<A>(_:);
  v2[8] = v6;
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(a1, (uint64_t)&v12, &demangling cache variable for type metadata for DefaultCarPlayDirectActionFlowStrategy<CarPlayRCHFlowProvider<INStartCallIntent>>);
  uint64_t v8 = (_OWORD *)swift_allocObject();
  long long v9 = v13;
  v8[1] = v12;
  v8[2] = v9;
  void v8[3] = v14;
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(a1, &demangling cache variable for type metadata for DefaultCarPlayDirectActionFlowStrategy<CarPlayRCHFlowProvider<INStartCallIntent>>);
  v2[9] = partial apply for specialized implicit closure #4 in implicit closure #3 in AnyIntentCarPlayDirectActionFlowStrategy.init<A>(_:);
  v2[10] = v8;
  return v2;
}

{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned char *v7;
  void *v8;
  uint64_t *boxed_opaque_existential_1;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned char v14[48];
  unsigned char v15[48];

  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceCarPlayWithInputFlowStrategy<CarPlayRCHFlowProvider<INStartCallIntent>>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  long long v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(a1, (uint64_t)v15, &demangling cache variable for type metadata for CarPlayRCHFlowProvider<INStartCallIntent>);
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0((uint64_t)v15, (uint64_t)v14, &demangling cache variable for type metadata for CarPlayRCHFlowProvider<INStartCallIntent>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyIntentCarPlayRCHFlowProvider<INStartCallIntent>);
  swift_allocObject();
  uint64_t v8 = specialized AnyIntentCarPlayRCHFlowProvider.init<A>(_:)((uint64_t)v14);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v15, &demangling cache variable for type metadata for CarPlayRCHFlowProvider<INStartCallIntent>);
  v2[2] = v8;
  v2[6] = v4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v2 + 3);
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(a1, (uint64_t)boxed_opaque_existential_1, &demangling cache variable for type metadata for OnDeviceCarPlayWithInputFlowStrategy<CarPlayRCHFlowProvider<INStartCallIntent>>);
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(a1, (uint64_t)v7, &demangling cache variable for type metadata for OnDeviceCarPlayWithInputFlowStrategy<CarPlayRCHFlowProvider<INStartCallIntent>>);
  uint64_t v10 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v11 = swift_allocObject();
  outlined init with take of AnnotatedApp?((uint64_t)v7, v11 + v10, &demangling cache variable for type metadata for OnDeviceCarPlayWithInputFlowStrategy<CarPlayRCHFlowProvider<INStartCallIntent>>);
  v2[7] = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyIntentCarPlayDirectActionFlowStrategy.init<A>(_:);
  v2[8] = v11;
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(a1, (uint64_t)v7, &demangling cache variable for type metadata for OnDeviceCarPlayWithInputFlowStrategy<CarPlayRCHFlowProvider<INStartCallIntent>>);
  long long v12 = swift_allocObject();
  outlined init with take of AnnotatedApp?((uint64_t)v7, v12 + v10, &demangling cache variable for type metadata for OnDeviceCarPlayWithInputFlowStrategy<CarPlayRCHFlowProvider<INStartCallIntent>>);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(a1, &demangling cache variable for type metadata for OnDeviceCarPlayWithInputFlowStrategy<CarPlayRCHFlowProvider<INStartCallIntent>>);
  v2[9] = partial apply for specialized implicit closure #4 in implicit closure #3 in AnyIntentCarPlayDirectActionFlowStrategy.init<A>(_:);
  v2[10] = v12;
  return v2;
}

uint64_t specialized implicit closure #2 in implicit closure #1 in AnyIntentCarPlayDirectActionFlowStrategy.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return specialized CarPlayRCHFlowProvider.makeRCHFlow(input:)();
}

uint64_t specialized OnDeviceCarPlayWithInputFlowStrategy.makeNLContextUpdate(app:)()
{
  App.appIdentifier.getter();
  type metadata accessor for MachineUtteranceBuilder();
  swift_allocObject();
  MachineUtteranceBuilder.init()();
  dispatch thunk of MachineUtteranceBuilder.addMappingIfPresent(node:value:)();
  swift_release();
  type metadata accessor for AppOntologyNode();
  static AppOntologyNode.applicationIdNode.getter();
  TerminalOntologyNode.name.getter();
  swift_release();
  OUTLINED_FUNCTION_16_27();
  swift_release();
  swift_bridgeObjectRelease();
  NLContextUpdate.init()();
  dispatch thunk of MachineUtteranceBuilder.build()();
  NLContextUpdate.nlInput.setter();
  swift_release();
  swift_bridgeObjectRelease();
  type metadata accessor for NLContextUpdate();
  OUTLINED_FUNCTION_36_11();

  return __swift_storeEnumTagSinglePayload(v0, v1, v2, v3);
}

uint64_t specialized DefaultCarPlayDirectActionFlowStrategy.makeNLContextUpdate(app:)()
{
  if (App.isFirstParty()())
  {
    type metadata accessor for MachineUtteranceBuilder();
    swift_allocObject();
    MachineUtteranceBuilder.init()();
    OUTLINED_FUNCTION_2_50();
    swift_release();
    type metadata accessor for AppOntologyNode();
    static AppOntologyNode.applicationIdNode.getter();
    TerminalOntologyNode.name.getter();
    swift_release();
    dispatch thunk of MachineUtteranceBuilder.addMappingIfPresent(node:value:)();
    swift_release();
    swift_bridgeObjectRelease();
    NLContextUpdate.init()();
    dispatch thunk of MachineUtteranceBuilder.build()();
    NLContextUpdate.nlInput.setter();
    swift_release();
  }
  else
  {
    App.appIdentifier.getter();
    type metadata accessor for MachineUtteranceBuilder();
    swift_allocObject();
    MachineUtteranceBuilder.init()();
    OUTLINED_FUNCTION_2_50();
    swift_release();
    type metadata accessor for AppOntologyNode();
    static AppOntologyNode.applicationIdNode.getter();
    TerminalOntologyNode.name.getter();
    swift_release();
    OUTLINED_FUNCTION_16_27();
    swift_release();
    swift_bridgeObjectRelease();
    NLContextUpdate.init()();
    dispatch thunk of MachineUtteranceBuilder.build()();
    NLContextUpdate.nlInput.setter();
    swift_release();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for NLContextUpdate();
  OUTLINED_FUNCTION_36_11();

  return __swift_storeEnumTagSinglePayload(v0, v1, v2, v3);
}

void *specialized AnyIntentCarPlayRCHFlowProvider.init<A>(_:)(uint64_t a1)
{
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(a1, (uint64_t)&v8, &demangling cache variable for type metadata for CarPlayRCHFlowProvider<INStartAudioCallIntent>);
  uint64_t v3 = (_OWORD *)swift_allocObject();
  long long v4 = v9;
  v3[1] = v8;
  v3[2] = v4;
  v3[3] = v10;
  v1[2] = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyIntentCarPlayRCHFlowProvider.init<A>(_:);
  v1[3] = v3;
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(a1, (uint64_t)&v8, &demangling cache variable for type metadata for CarPlayRCHFlowProvider<INStartAudioCallIntent>);
  uint64_t v5 = (_OWORD *)swift_allocObject();
  long long v6 = v9;
  v5[1] = v8;
  long long v5[2] = v6;
  v5[3] = v10;
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(a1, &demangling cache variable for type metadata for CarPlayRCHFlowProvider<INStartAudioCallIntent>);
  v1[4] = partial apply for specialized implicit closure #4 in implicit closure #3 in AnyIntentCarPlayRCHFlowProvider.init<A>(_:);
  v1[5] = v5;
  return v1;
}

{
  void *v1;
  _OWORD *v3;
  long long v4;
  _OWORD *v5;
  long long v6;
  long long v8;
  long long v9;
  long long v10;

  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(a1, (uint64_t)&v8, &demangling cache variable for type metadata for CarPlayRCHFlowProvider<INStartCallIntent>);
  uint64_t v3 = (_OWORD *)swift_allocObject();
  long long v4 = v9;
  v3[1] = v8;
  v3[2] = v4;
  v3[3] = v10;
  v1[2] = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyIntentCarPlayRCHFlowProvider.init<A>(_:);
  v1[3] = v3;
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(a1, (uint64_t)&v8, &demangling cache variable for type metadata for CarPlayRCHFlowProvider<INStartCallIntent>);
  uint64_t v5 = (_OWORD *)swift_allocObject();
  long long v6 = v9;
  v5[1] = v8;
  long long v5[2] = v6;
  v5[3] = v10;
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(a1, &demangling cache variable for type metadata for CarPlayRCHFlowProvider<INStartCallIntent>);
  v1[4] = partial apply for specialized implicit closure #4 in implicit closure #3 in AnyIntentCarPlayRCHFlowProvider.init<A>(_:);
  v1[5] = v5;
  return v1;
}

uint64_t specialized CarPlayRCHFlowProvider.makeRCHFlow(input:)()
{
  uint64_t v1 = type metadata accessor for CATOption();
  uint64_t v2 = OUTLINED_FUNCTION_11_0(v1);
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_12_0();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse?);
  uint64_t v4 = OUTLINED_FUNCTION_11_0(v3);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_4();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = v0 + 8;
  static PhoneCallRequestSupportPolicy.getSiriKitIntent(input:sharedGlobals:app:intentTypeName:)();
  if (v9)
  {
    long long v10 = v9;
    static PhoneCallFlowFactory.makeRCHFlow(app:intent:sharedGlobals:)();
    if (v11)
    {
      uint64_t v12 = v11;
      swift_retain();
      dispatch thunk of AnyFlow.on(input:)();
      swift_release();
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      __swift_project_value_buffer(v13, (uint64_t)static Logger.siriPhone);
      long long v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v14, v15))
      {
        *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
        OUTLINED_FUNCTION_1_3(&dword_0, v16, v17, "#CarPlayRCHFlowProvider makeRCHFlow(input): RCHFlow found");
        OUTLINED_FUNCTION_6();
      }

      return v12;
    }
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.siriPhone);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)OUTLINED_FUNCTION_7_2();
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl(&dword_0, v19, v20, "#CarPlayRCHFlowProvider makeRCHFlow(input): no RCHFlow found", v21, 2u);
    OUTLINED_FUNCTION_6();
  }

  Input.parse.getter();
  type metadata accessor for Parse();
  OUTLINED_FUNCTION_36_11();
  __swift_storeEnumTagSinglePayload(v22, v23, v24, v25);
  type metadata accessor for StartCallCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v26 = CATWrapperSimple.__allocating_init(options:globals:)();
  uint64_t v27 = static CommonOutputs.conversionError(sharedGlobals:parse:startCallCATsSimple:)(v8, v7, v26);
  swift_release();
  uint64_t v28 = outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v7, &demangling cache variable for type metadata for Parse?);
  (*(void (**)(uint64_t))(*(void *)v27 + 112))(v28);
  swift_release();
  type metadata accessor for SimpleOutputFlowAsync();
  uint64_t v12 = Flow.eraseToAnyFlow()();
  swift_release();
  return v12;
}

uint64_t specialized CarPlayRCHFlowProvider.makeRCHFlow(app:intent:)()
{
  uint64_t v2 = type metadata accessor for CATOption();
  uint64_t v3 = OUTLINED_FUNCTION_11_0(v2);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_4();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse?);
  uint64_t v5 = OUTLINED_FUNCTION_11_0(v4);
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_12_0();
  uint64_t v6 = v0 + 8;
  static PhoneCallFlowFactory.makeRCHFlow(app:intent:sharedGlobals:)();
  if (v7)
  {
    uint64_t v8 = v7;
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.siriPhone);
    long long v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
      OUTLINED_FUNCTION_1_3(&dword_0, v12, v13, "#CarPlayRCHFlowProvider makeRCHFlow(app, intent): RCHFlow found");
      OUTLINED_FUNCTION_6();
    }
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.siriPhone);
    os_log_type_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)OUTLINED_FUNCTION_7_2();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_0, v15, v16, "#CarPlayRCHFlowProvider: makeRCHFlow(app, intent): no RCHFlow found", v17, 2u);
      OUTLINED_FUNCTION_6();
    }

    uint64_t v18 = type metadata accessor for Parse();
    __swift_storeEnumTagSinglePayload(v1, 1, 1, v18);
    type metadata accessor for StartCallCATsSimple();
    static CATOption.defaultMode.getter();
    uint64_t v19 = CATWrapperSimple.__allocating_init(options:globals:)();
    uint64_t v20 = static CommonOutputs.conversionError(sharedGlobals:parse:startCallCATsSimple:)(v6, v1, v19);
    swift_release();
    uint64_t v21 = outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v1, &demangling cache variable for type metadata for Parse?);
    (*(void (**)(uint64_t))(*(void *)v20 + 112))(v21);
    swift_release();
    type metadata accessor for SimpleOutputFlowAsync();
    uint64_t v8 = Flow.eraseToAnyFlow()();
    swift_release();
  }
  return v8;
}

uint64_t lazy protocol witness table accessor for type CarPlayDirectInvocationFlow<INStartAudioCallIntent> and conformance CarPlayDirectInvocationFlow<A>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for CarPlayDirectInvocationFlowFactory()
{
  return &type metadata for CarPlayDirectInvocationFlowFactory;
}

uint64_t lazy protocol witness table accessor for type App and conformance App(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1597C0()
{
  return objectdestroyTm_6(&demangling cache variable for type metadata for OnDeviceCarPlayWithInputFlowStrategy<CarPlayRCHFlowProvider<INStartCallIntent>>);
}

uint64_t partial apply for specialized implicit closure #2 in implicit closure #1 in AnyIntentCarPlayDirectActionFlowStrategy.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  return partial apply for specialized implicit closure #2 in implicit closure #1 in AnyIntentCarPlayDirectActionFlowStrategy.init<A>(_:)(a1, a2, &demangling cache variable for type metadata for OnDeviceCarPlayWithInputFlowStrategy<CarPlayRCHFlowProvider<INStartCallIntent>>);
}

{
  return partial apply for specialized implicit closure #2 in implicit closure #1 in AnyIntentCarPlayDirectActionFlowStrategy.init<A>(_:)(a1, a2, &demangling cache variable for type metadata for OnDeviceCarPlayWithInputFlowStrategy<CarPlayRCHFlowProvider<INStartAudioCallIntent>>);
}

uint64_t sub_1597D8()
{
  return objectdestroyTm_6(&demangling cache variable for type metadata for OnDeviceCarPlayWithInputFlowStrategy<CarPlayRCHFlowProvider<INStartCallIntent>>);
}

uint64_t partial apply for specialized implicit closure #4 in implicit closure #3 in AnyIntentCarPlayDirectActionFlowStrategy.init<A>(_:)(uint64_t a1)
{
  return partial apply for specialized implicit closure #4 in implicit closure #3 in AnyIntentCarPlayDirectActionFlowStrategy.init<A>(_:)(a1, &demangling cache variable for type metadata for OnDeviceCarPlayWithInputFlowStrategy<CarPlayRCHFlowProvider<INStartCallIntent>>);
}

{
  return partial apply for specialized implicit closure #4 in implicit closure #3 in AnyIntentCarPlayDirectActionFlowStrategy.init<A>(_:)(a1, &demangling cache variable for type metadata for OnDeviceCarPlayWithInputFlowStrategy<CarPlayRCHFlowProvider<INStartAudioCallIntent>>);
}

uint64_t sub_159804()
{
  return objectdestroyTm_6(&demangling cache variable for type metadata for OnDeviceCarPlayWithInputFlowStrategy<CarPlayRCHFlowProvider<INStartAudioCallIntent>>);
}

uint64_t partial apply for specialized implicit closure #2 in implicit closure #1 in AnyIntentCarPlayDirectActionFlowStrategy.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_13(v7);
  return specialized implicit closure #2 in implicit closure #1 in AnyIntentCarPlayDirectActionFlowStrategy.init<A>(_:)(a1, a2, v3 + ((*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)), a3);
}

uint64_t sub_159878()
{
  return objectdestroyTm_6(&demangling cache variable for type metadata for OnDeviceCarPlayWithInputFlowStrategy<CarPlayRCHFlowProvider<INStartAudioCallIntent>>);
}

uint64_t objectdestroyTm_6(uint64_t *a1)
{
  uint64_t v2 = (int *)(__swift_instantiateConcreteTypeFromMangledName(a1) - 8);
  uint64_t v3 = *(unsigned __int8 *)(*(void *)v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(*(void *)v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = v1 + v4;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v7 + 8);
  swift_release();
  uint64_t v8 = v7 + v2[12];
  type metadata accessor for Input();
  OUTLINED_FUNCTION_15();
  (*(void (**)(uint64_t))(v9 + 8))(v8);

  return _swift_deallocObject(v1, v5, v6);
}

uint64_t partial apply for specialized implicit closure #4 in implicit closure #3 in AnyIntentCarPlayDirectActionFlowStrategy.init<A>(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_13(v2);
  return specialized OnDeviceCarPlayWithInputFlowStrategy.makeNLContextUpdate(app:)();
}

uint64_t partial apply for specialized implicit closure #2 in implicit closure #1 in AnyIntentCarPlayRCHFlowProvider.init<A>(_:)()
{
  return specialized CarPlayRCHFlowProvider.makeRCHFlow(input:)();
}

uint64_t partial apply for specialized implicit closure #4 in implicit closure #3 in AnyIntentCarPlayRCHFlowProvider.init<A>(_:)()
{
  return specialized CarPlayRCHFlowProvider.makeRCHFlow(app:intent:)();
}

uint64_t partial apply for specialized implicit closure #4 in implicit closure #3 in AnyIntentCarPlayDirectActionFlowStrategy.init<A>(_:)()
{
  return specialized DefaultCarPlayDirectActionFlowStrategy.makeNLContextUpdate(app:)();
}

uint64_t OUTLINED_FUNCTION_2_50()
{
  return dispatch thunk of MachineUtteranceBuilder.addMappingIfPresent(node:value:)();
}

uint64_t OUTLINED_FUNCTION_6_35()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_10_26()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_11_29()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_12_21(float a1)
{
  *uint64_t v1 = a1;
  return type metadata accessor for App();
}

uint64_t OUTLINED_FUNCTION_16_27()
{
  return dispatch thunk of MachineUtteranceBuilder.addMappingIfPresent(node:value:)();
}

void OUTLINED_FUNCTION_18_20(uint64_t a1@<X8>)
{
  *(void *)(v1 - 296) = a1;
}

uint64_t OUTLINED_FUNCTION_20_17()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_22_17()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_23_16()
{
  return v0 - 136;
}

uint64_t OUTLINED_FUNCTION_24_19()
{
  return v0;
}

void OUTLINED_FUNCTION_28_13(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v6, a4, v4, 0xCu);
}

void *OUTLINED_FUNCTION_32_10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t a8, uint64_t *a9, uint64_t *a10, uint64_t (*a11)(unsigned char *), uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  return specialized static CarPlayDirectInvocationFlowFactory.makeCarPlayDirectInvocationFlow<A>(app:intent:directAction:sharedGlobals:)(v15, v17, v16, a15, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t OUTLINED_FUNCTION_34_7()
{
  return swift_arrayDestroy();
}

void OUTLINED_FUNCTION_35_13()
{
  *(void *)(v2 - 400) = v0;
  *(void *)(v2 - 264) = v1;
}

void static AnnounceVoicemailReadingState.makeInitialState(synchronousBurstIndex:voicemail:)(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_46A030;
  *(void *)(v6 + 32) = a2;
  uint64_t v12 = v6;
  specialized Array._endMutation()();
  uint64_t v7 = a1 + 1;
  if (__OFADD__(a1, 1))
  {
    __break(1u);
  }
  else if (v7 >= a1)
  {
    id v8 = [a2 identifier];
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    *(void *)a3 = 0;
    *(void *)(a3 + 8) = v12;
    *(void *)(a3 + 16) = a1;
    *(void *)(a3 + 24) = v7;
    *(void *)(a3 + 32) = v9;
    *(void *)(a3 + 40) = v11;
    *(unsigned char *)(a3 + 48) = 0;
    return;
  }
  __break(1u);
}

void AnnounceVoicemailReadingState.update(_:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  unint64_t v10 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v10);
  uint64_t v11 = v4[3];
  uint64_t v12 = v11 + a1;
  if (__OFADD__(v11, a1))
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v13 = v4[2];
  if (v12 < v13)
  {
LABEL_10:
    __break(1u);
    return;
  }
  v4[3] = v12;
  if (a3)
  {
    uint64_t v14 = a3;
  }
  else
  {
    a2 = v4[4];
    uint64_t v15 = v4[5];
    swift_bridgeObjectRetain();
    uint64_t v14 = v15;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5[4] = a2;
  v5[5] = v14;
  uint64_t v16 = v5[1];
  char v17 = *((unsigned char *)v5 + 48);
  *(void *)a4 = *v5;
  *(void *)(a4 + 8) = v16;
  *(void *)(a4 + 16) = v13;
  *(void *)(a4 + 24) = v12;
  *(void *)(a4 + 32) = a2;
  *(void *)(a4 + 40) = v14;
  *(unsigned char *)(a4 + 48) = v17;
  swift_bridgeObjectRetain();

  swift_bridgeObjectRetain();
}

BOOL AnnounceVoicemailReadingState.allVoicemailsRead.getter()
{
  unint64_t v1 = v0[1];
  unint64_t v4 = v1;
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    outlined release of Set<String>((uint64_t)&v4);
  }
  else
  {
    uint64_t v2 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8));
  }
  return v2 == *v0;
}

uint64_t AnnounceVoicemailReadingState.burstWindowIndex.getter()
{
  uint64_t v1 = v0[2];
  uint64_t result = v1 + *v0;
  if (__OFADD__(v1, *v0)) {
    __break(1u);
  }
  return result;
}

BOOL AnnounceVoicemailReadingState.isInitialNotificationInBurst.getter()
{
  uint64_t v1 = v0[2];
  BOOL v2 = __OFADD__(v1, *v0);
  uint64_t v3 = v1 + *v0;
  if (!v2) {
    return v3 == 0;
  }
  __break(1u);
  return result;
}

uint64_t AnnounceVoicemailReadingState.incrementVoicemailsRead(count:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)v2 + result;
  if (__OFADD__(*(void *)v2, result))
  {
    __break(1u);
  }
  else
  {
    *(void *)uint64_t v2 = v3;
    uint64_t v4 = *(void *)(v2 + 8);
    uint64_t v5 = *(void *)(v2 + 32);
    uint64_t v6 = *(void *)(v2 + 40);
    char v7 = *(unsigned char *)(v2 + 48);
    *(void *)a2 = v3;
    *(void *)(a2 + 8) = v4;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(v2 + 16);
    *(void *)(a2 + 32) = v5;
    *(void *)(a2 + 40) = v6;
    *(unsigned char *)(a2 + 48) = v7;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

BOOL AnnounceVoicemailReadingState.isLastNotificationInBurst.getter()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v2 - v1;
  if (__OFSUB__(v2, v1))
  {
    __break(1u);
    goto LABEL_6;
  }
  unint64_t v4 = v0[1];
  unint64_t v7 = v4;
  if (v4 >> 62)
  {
LABEL_6:
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    outlined release of Set<String>((uint64_t)&v7);
    return v3 == v5;
  }
  uint64_t v5 = *(void *)((char *)&dword_10 + (v4 & 0xFFFFFFFFFFFFFF8));
  return v3 == v5;
}

uint64_t AnnounceVoicemailReadingState.markHintAsRead()@<X0>(uint64_t a1@<X8>)
{
  *(unsigned char *)(v1 + 48) = 1;
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 40);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 16);
  *(void *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = v4;
  *(unsigned char *)(a1 + 48) = 1;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t AnnounceVoicemailReadingState.IncomingNotificationsUpdate.totalNotificationCount.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *static AnnounceVoicemailReadingState.IncomingNotificationsUpdate.emptyInstance.getter()
{
  return &_swiftEmptyArrayStorage;
}

void AnnounceVoicemailReadingState.IncomingNotificationsUpdate.description.getter(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  _StringGuts.grow(_:)(82);
  v7._object = (void *)0x8000000000494480;
  v7._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v7);
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v8 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
  }
  if (v8)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    if (v8 < 0)
    {
      __break(1u);
      return;
    }
    uint64_t v26 = a3;
    uint64_t v27 = a4;
    uint64_t v9 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v10 = *(id *)(a1 + 8 * v9 + 32);
      }
      uint64_t v11 = v10;
      id v12 = objc_msgSend(v10, "identifier", v26, v27);
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v15 = v14;

      unint64_t v16 = _swiftEmptyArrayStorage[2];
      if (v16 >= _swiftEmptyArrayStorage[3] >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      ++v9;
      _swiftEmptyArrayStorage[2] = v16 + 1;
      char v17 = &_swiftEmptyArrayStorage[2 * v16];
      v17[4] = v13;
      void v17[5] = v15;
    }
    while (v8 != v9);
    swift_bridgeObjectRelease();
    a3 = v26;
    a4 = v27;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v18._uint64_t countAndFlagsBits = Array.description.getter();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v19._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v19._object = (void *)0x80000000004944A0;
  String.append(_:)(v19);
  v20._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  v21._object = (void *)0x80000000004944C0;
  String.append(_:)(v21);
  if (a4) {
    uint64_t v22 = a3;
  }
  else {
    uint64_t v22 = 7104878;
  }
  if (a4) {
    uint64_t v23 = a4;
  }
  else {
    uint64_t v23 = (void *)0xE300000000000000;
  }
  swift_bridgeObjectRetain();
  v24._uint64_t countAndFlagsBits = v22;
  v24._object = v23;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._uint64_t countAndFlagsBits = 32010;
  v25._object = (void *)0xE200000000000000;
  String.append(_:)(v25);
}

void protocol witness for CustomStringConvertible.description.getter in conformance AnnounceVoicemailReadingState.IncomingNotificationsUpdate()
{
  AnnounceVoicemailReadingState.IncomingNotificationsUpdate.description.getter(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t AnnounceVoicemailReadingState.voicemails.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AnnounceVoicemailReadingState.burstWindow.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t AnnounceVoicemailReadingState.didReadHint.getter()
{
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t AnnounceVoicemailReadingState.init(voicemailsRead:voicemails:burstWindow:lastNotificationId:didReadHint:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  *(void *)a8 = result;
  *(void *)(a8 + 8) = a2;
  *(void *)(a8 + 16) = a3;
  *(void *)(a8 + 24) = a4;
  *(void *)(a8 + 32) = a5;
  *(void *)(a8 + 40) = a6;
  *(unsigned char *)(a8 + 48) = a7;
  return result;
}

void AnnounceVoicemailReadingState.description.getter()
{
  uint64_t v1 = v0;
  _StringGuts.grow(_:)(115);
  OUTLINED_FUNCTION_1_50(0xD000000000000016, (uint64_t)"{\n    voicemailsRead: ");
  uint64_t v24 = *v0;
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_50(0xD000000000000011, (uint64_t)"\n    voicemails: ");
  unint64_t v3 = v0[1];
  uint64_t v24 = v3;
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
LABEL_13:
    outlined release of Set<String>((uint64_t)&v24);
    goto LABEL_14;
  }
  uint64_t v4 = *(void *)((char *)&dword_10 + (v3 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  if (!v4) {
    goto LABEL_13;
  }
LABEL_3:
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if (v4 < 0)
  {
    __break(1u);
    return;
  }
  uint64_t v23 = v0;
  uint64_t v5 = 0;
  do
  {
    if ((v3 & 0xC000000000000001) != 0) {
      id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v6 = *(id *)(v3 + 8 * v5 + 32);
    }
    Swift::String v7 = v6;
    id v8 = [v6 identifier];
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    unint64_t v12 = _swiftEmptyArrayStorage[2];
    if (v12 >= _swiftEmptyArrayStorage[3] >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    ++v5;
    _swiftEmptyArrayStorage[2] = v12 + 1;
    uint64_t v13 = &_swiftEmptyArrayStorage[2 * v12];
    v13[4] = v9;
    void v13[5] = v11;
  }
  while (v4 != v5);
  outlined release of Set<String>((uint64_t)&v24);
  uint64_t v1 = v23;
LABEL_14:
  v14._uint64_t countAndFlagsBits = Array.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_37((uint64_t)",\n    burstWindow: ");
  v15._uint64_t countAndFlagsBits = specialized Range.description.getter();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_50(0xD00000000000001ALL, (uint64_t)",\n    lastNotificationId: ");
  uint64_t v16 = v1[4];
  char v17 = (void *)v1[5];
  swift_bridgeObjectRetain();
  v18._uint64_t countAndFlagsBits = v16;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_37((uint64_t)",\n    didReadHint: ");
  if (v1[6]) {
    uint64_t v19 = 1702195828;
  }
  else {
    uint64_t v19 = 0x65736C6166;
  }
  if (v1[6]) {
    unint64_t v20 = 0xE400000000000000;
  }
  else {
    unint64_t v20 = 0xE500000000000000;
  }
  unint64_t v21 = v20;
  String.append(_:)(*(Swift::String *)&v19);
  swift_bridgeObjectRelease();
  v22._uint64_t countAndFlagsBits = 32010;
  v22._object = (void *)0xE200000000000000;
  String.append(_:)(v22);
}

uint64_t specialized Range.description.getter()
{
  OUTLINED_FUNCTION_2_51();
  v0._uint64_t countAndFlagsBits = 3943982;
  v0._object = (void *)0xE300000000000000;
  String.append(_:)(v0);
  OUTLINED_FUNCTION_2_51();
  return 0;
}

uint64_t destroy for AnnounceVoicemailReadingState()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AnnounceVoicemailReadingState(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AnnounceVoicemailReadingState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for AnnounceVoicemailReadingState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnnounceVoicemailReadingState(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 49))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnnounceVoicemailReadingState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)BOOL result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 49) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnnounceVoicemailReadingState()
{
  return &type metadata for AnnounceVoicemailReadingState;
}

uint64_t destroy for AnnounceVoicemailReadingState.IncomingNotificationsUpdate()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AnnounceVoicemailReadingState.IncomingNotificationsUpdate(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AnnounceVoicemailReadingState.IncomingNotificationsUpdate(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AnnounceVoicemailReadingState.IncomingNotificationsUpdate(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AnnounceVoicemailReadingState.IncomingNotificationsUpdate()
{
  return &type metadata for AnnounceVoicemailReadingState.IncomingNotificationsUpdate;
}

void OUTLINED_FUNCTION_0_37(uint64_t a1@<X8>)
{
  unint64_t v3 = 0xD000000000000013;
  unint64_t v2 = (a1 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&v3);
}

void OUTLINED_FUNCTION_1_50(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_2_51()
{
  return _print_unlocked<A, B>(_:_:)();
}

uint64_t key path setter for CommunalDeviceExecutionFlow.state : CommunalDeviceExecutionFlow(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CommunalDeviceExecutionFlow.State(0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of CommunalDeviceExecutionFlow.State(a1, (uint64_t)v4, (void (*)(void))type metadata accessor for CommunalDeviceExecutionFlow.State);
  return CommunalDeviceExecutionFlow.state.setter((uint64_t)v4);
}

void CommunalDeviceExecutionFlow.state.didset()
{
  uint64_t v1 = type metadata accessor for CommunalDeviceExecutionFlow.State(0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.siriPhone);
  swift_retain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    Swift::String v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)Swift::String v7 = 136315138;
    uint64_t v14 = v8;
    v13[0] = v7 + 4;
    uint64_t v9 = v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceExecutionFlow_state;
    swift_beginAccess();
    outlined init with copy of CommunalDeviceExecutionFlow.State(v9, (uint64_t)v3, (void (*)(void))type metadata accessor for CommunalDeviceExecutionFlow.State);
    unint64_t v10 = CommunalDeviceExecutionFlow.State.description.getter();
    unint64_t v12 = v11;
    outlined destroy of CommunalDeviceExecutionFlow.State((uint64_t)v3, (void (*)(void))type metadata accessor for CommunalDeviceExecutionFlow.State);
    v13[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v5, v6, "#CommunalDeviceExecutionFlow state => %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
}

uint64_t CommunalDeviceExecutionFlow.state.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceExecutionFlow_state;
  swift_beginAccess();
  return outlined init with copy of CommunalDeviceExecutionFlow.State(v3, a1, (void (*)(void))type metadata accessor for CommunalDeviceExecutionFlow.State);
}

uint64_t type metadata accessor for CommunalDeviceExecutionFlow.State(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for CommunalDeviceExecutionFlow.State);
}

uint64_t CommunalDeviceExecutionFlow.state.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceExecutionFlow_state;
  swift_beginAccess();
  outlined assign with copy of CommunalDeviceExecutionFlow.State(a1, v3);
  swift_endAccess();
  CommunalDeviceExecutionFlow.state.didset();
  return outlined destroy of CommunalDeviceExecutionFlow.State(a1, (void (*)(void))type metadata accessor for CommunalDeviceExecutionFlow.State);
}

uint64_t CommunalDeviceExecutionFlow.sharedGlobals.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceExecutionFlow_sharedGlobals, a1);
}

uint64_t CommunalDeviceExecutionFlow.__allocating_init(parse:sharedGlobals:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CommunalDeviceExecutionFlow.State(0);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v5);
  Swift::String v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v8 = type metadata accessor for Parse();
  uint64_t v9 = *(void *)(v8 - 8);
  OUTLINED_FUNCTION_12();
  v10();
  swift_storeEnumTagMultiPayload();
  outlined init with copy of SignalProviding(a2, (uint64_t)v14);
  uint64_t v11 = (*(uint64_t (**)(unsigned char *, unsigned char *))(v2 + 120))(v7, v14);
  __swift_destroy_boxed_opaque_existential_1(a2);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
  return v11;
}

uint64_t CommunalDeviceExecutionFlow.__allocating_init(state:sharedGlobals:)(uint64_t a1, long long *a2)
{
  uint64_t v4 = swift_allocObject();
  outlined init with take of CommunalDeviceExecutionFlow.State(a1, v4 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceExecutionFlow_state);
  outlined init with take of AppSelectionSignalComponent(a2, v4 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceExecutionFlow_sharedGlobals);
  return v4;
}

uint64_t CommunalDeviceExecutionFlow.init(state:sharedGlobals:)(uint64_t a1, long long *a2)
{
  outlined init with take of CommunalDeviceExecutionFlow.State(a1, v2 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceExecutionFlow_state);
  outlined init with take of AppSelectionSignalComponent(a2, v2 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceExecutionFlow_sharedGlobals);
  return v2;
}

uint64_t outlined init with take of CommunalDeviceExecutionFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommunalDeviceExecutionFlow.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t CommunalDeviceExecutionFlow.execute(completion:)()
{
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t type metadata accessor for CommunalDeviceExecutionFlow(uint64_t a1)
{
  return type metadata accessor for RedirectToCompanionFlow.State(a1, (uint64_t *)&type metadata singleton initialization cache for CommunalDeviceExecutionFlow);
}

uint64_t CommunalDeviceExecutionFlow.execute()()
{
  OUTLINED_FUNCTION_1_0();
  v1[60] = v2;
  v1[61] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse?);
  OUTLINED_FUNCTION_11_0(v3);
  v1[62] = OUTLINED_FUNCTION_35();
  uint64_t v4 = type metadata accessor for CATOption();
  OUTLINED_FUNCTION_11_0(v4);
  v1[63] = OUTLINED_FUNCTION_35();
  uint64_t v5 = type metadata accessor for PhoneError();
  v1[64] = v5;
  OUTLINED_FUNCTION_11_0(v5);
  v1[65] = OUTLINED_FUNCTION_28_2();
  v1[66] = swift_task_alloc();
  v1[67] = swift_task_alloc();
  v1[68] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for IdentifiedUser();
  v1[69] = v6;
  OUTLINED_FUNCTION_19_0(v6);
  v1[70] = v7;
  v1[71] = OUTLINED_FUNCTION_35();
  uint64_t v8 = type metadata accessor for ExecuteResponse();
  v1[72] = v8;
  OUTLINED_FUNCTION_19_0(v8);
  v1[73] = v9;
  v1[74] = OUTLINED_FUNCTION_35();
  uint64_t v10 = type metadata accessor for CommunalDeviceExecutionFlow.State(0);
  v1[75] = v10;
  OUTLINED_FUNCTION_11_0(v10);
  v1[76] = OUTLINED_FUNCTION_28_2();
  v1[77] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Parse();
  v1[78] = v11;
  OUTLINED_FUNCTION_19_0(v11);
  v1[79] = v12;
  v1[80] = OUTLINED_FUNCTION_28_2();
  v1[81] = swift_task_alloc();
  return _swift_task_switch(CommunalDeviceExecutionFlow.execute(), 0, 0);
}

{
  uint64_t v0;
  void (*v1)(void);
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  BOOL v16;
  uint64_t v17;
  uint8_t *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Bool v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(void);
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(void);
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned char *v55;
  Swift::Bool v56;
  uint64_t v57;
  unsigned char *v58;
  void (*v59)(void);
  uint64_t v60;
  void (*v61)(uint64_t);
  uint64_t v62;
  uint64_t *v63;
  uint64_t DynamicType;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  uint64_t v70;
  uint64_t (*v71)(void);
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t);
  uint64_t v75;
  void (*v76)(uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;

  uint64_t v1 = *(void (**)(void))(**(void **)(v0 + 488) + 96);
  v1();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = *(void *)(v0 + 608);
    uint64_t v3 = *(uint64_t **)(v0 + 544);
    uint64_t v90 = *(void *)(v0 + 528);
    uint64_t v4 = *(void *)(v0 + 488);
    outlined destroy of CommunalDeviceExecutionFlow.State(*(void *)(v0 + 616), (void (*)(void))type metadata accessor for CommunalDeviceExecutionFlow.State);
    *(void *)(v0 + 416) = v4;
    type metadata accessor for CommunalDeviceExecutionFlow(0);
    swift_retain();
    uint64_t v5 = String.init<A>(describing:)();
    uint64_t v7 = v6;
    v1();
    uint64_t v8 = CommunalDeviceExecutionFlow.State.description.getter();
    uint64_t v10 = v9;
    outlined destroy of CommunalDeviceExecutionFlow.State(v2, (void (*)(void))type metadata accessor for CommunalDeviceExecutionFlow.State);
    *uint64_t v3 = v5;
    v3[1] = v7;
    v3[2] = v8;
    v3[3] = v10;
    swift_storeEnumTagMultiPayload();
    PhoneError.logged()(v90);
    outlined destroy of CommunalDeviceExecutionFlow.State((uint64_t)v3, (void (*)(void))type metadata accessor for PhoneError);
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v11 = *(void *)(v0 + 528);
    uint64_t v12 = *(void *)(v0 + 520);
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.siriPhone);
    outlined init with copy of CommunalDeviceExecutionFlow.State(v11, v12, (void (*)(void))type metadata accessor for PhoneError);
    uint64_t v14 = Logger.logObject.getter();
    Swift::String v15 = static os_log_type_t.fault.getter();
    uint64_t v16 = os_log_type_enabled(v14, v15);
    char v17 = *(void *)(v0 + 520);
    if (v16)
    {
      Swift::String v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = (void *)swift_slowAlloc();
      *(_DWORD *)Swift::String v18 = 138412290;
      lazy protocol witness table accessor for type CommunalDeviceExecutionFlow and conformance CommunalDeviceExecutionFlow((unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError, (void (*)(uint64_t))type metadata accessor for PhoneError);
      swift_allocError();
      outlined init with copy of CommunalDeviceExecutionFlow.State(v17, v20, (void (*)(void))type metadata accessor for PhoneError);
      unint64_t v21 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 448) = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v19 = v21;
      outlined destroy of CommunalDeviceExecutionFlow.State(v17, (void (*)(void))type metadata accessor for PhoneError);
      _os_log_impl(&dword_0, v14, v15, "#CommunalDeviceExecutionFlow %@", v18, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {
      outlined destroy of CommunalDeviceExecutionFlow.State(*(void *)(v0 + 520), (void (*)(void))type metadata accessor for PhoneError);
    }
    uint64_t v31 = *(void *)(v0 + 528);
    uint64_t v32 = *(void *)(v0 + 488);

    uint64_t v33 = v32 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceExecutionFlow_sharedGlobals;
    type metadata accessor for StartCallCATsSimple();
    static CATOption.defaultMode.getter();
    uint64_t v34 = CATWrapperSimple.__allocating_init(options:globals:)();
    static CommonOutputs.genericError(sharedGlobals:startCallCATsSimple:)(v33, v34);
    swift_release();
    OUTLINED_FUNCTION_9_37();
    uint64_t v36 = v35();
    swift_release();
    *(void *)(v0 + 464) = v36;
    type metadata accessor for SimpleOutputFlowAsync();
    static ExecuteResponse.complete<A>(next:)();
    swift_release();
    outlined destroy of CommunalDeviceExecutionFlow.State(v31, (void (*)(void))type metadata accessor for PhoneError);
    goto LABEL_33;
  }
  Swift::String v22 = *(void *)(v0 + 488);
  (*(void (**)(void, void, void))(*(void *)(v0 + 632) + 32))(*(void *)(v0 + 648), *(void *)(v0 + 616), *(void *)(v0 + 624));
  uint64_t v23 = OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceExecutionFlow_sharedGlobals;
  *(void *)(v0 + 656) = OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceExecutionFlow_sharedGlobals;
  uint64_t v24 = v22 + v23;
  __swift_project_boxed_opaque_existential_1((void *)(v22 + v23), *(void *)(v22 + v23 + 24));
  Swift::String v25 = OUTLINED_FUNCTION_54_3();
  uint64_t v27 = v26(v25);
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  uint64_t v28 = *(void *)(v0 + 648);
  *(void *)(v0 + 240) = &type metadata for CallStateProvider;
  *(void *)(v0 + 248) = &protocol witness table for CallStateProvider;
  uint64_t v29 = swift_allocObject();
  *(void *)(v0 + 216) = v29;
  outlined init with copy of CallStateProvider((uint64_t)static CallStateProvider.instance, v29 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 184))(v28, v0 + 216);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 216);
  if (!*(void *)(v0 + 200))
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v0 + 176, &demangling cache variable for type metadata for AnyPhoneNLIntent?);
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    id v37 = type metadata accessor for Logger();
    uint64_t v38 = OUTLINED_FUNCTION_25_0(v37, (uint64_t)static Logger.siriPhone);
    os_log_type_t v39 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v38, v39))
    {
      BOOL v40 = (uint8_t *)OUTLINED_FUNCTION_7_2();
      *(_WORD *)BOOL v40 = 0;
      _os_log_impl(&dword_0, v38, v39, "#CommunalDeviceExecutionFlow Could not transform to PhoneCallNLIntent", v40, 2u);
      OUTLINED_FUNCTION_6();
    }
    id v41 = *(void *)(v0 + 648);
    id v42 = *(void *)(v0 + 632);
    id v43 = *(void *)(v0 + 624);
    uint64_t v44 = *(void *)(v0 + 496);

    __swift_storeEnumTagSinglePayload(v44, 1, 1, v43);
    type metadata accessor for StartCallCATsSimple();
    static CATOption.defaultMode.getter();
    uint64_t v45 = CATWrapperSimple.__allocating_init(options:globals:)();
    static CommonOutputs.conversionError(sharedGlobals:parse:startCallCATsSimple:)(v24, v44, v45);
    swift_release();
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v44, &demangling cache variable for type metadata for Parse?);
    OUTLINED_FUNCTION_9_37();
    uint64_t v47 = v46();
    swift_release();
    *(void *)(v0 + 440) = v47;
    type metadata accessor for SimpleOutputFlowAsync();
    static ExecuteResponse.complete<A>(next:)();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v43);
LABEL_33:
    OUTLINED_FUNCTION_2_52();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_28_1();
    __asm { BRAA            X1, X16 }
  }
  outlined init with take of AppSelectionSignalComponent((long long *)(v0 + 176), v0 + 136);
  outlined init with copy of SignalProviding(v0 + 136, v0 + 336);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPhoneNLIntent);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
  if (!swift_dynamicCast())
  {
    *(void *)(v0 + 48) = 0;
    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v0 + 16, &demangling cache variable for type metadata for PhoneCallNLIntent?);
    outlined init with copy of SignalProviding(v0 + 136, v0 + 376);
    type metadata accessor for PhoneCallControlNLIntent();
    if (swift_dynamicCast())
    {
      swift_release();
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      unint64_t v48 = type metadata accessor for Logger();
      unint64_t v49 = OUTLINED_FUNCTION_25_0(v48, (uint64_t)static Logger.siriPhone);
      uint64_t v50 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v49, v50))
      {
        unint64_t v51 = (uint8_t *)OUTLINED_FUNCTION_7_2();
        *(_WORD *)unint64_t v51 = 0;
        _os_log_impl(&dword_0, v49, v50, "#CommunalDeviceExecutionFlow executing call control request locally", v51, 2u);
        OUTLINED_FUNCTION_6();
      }
      uint64_t v52 = *(void *)(v0 + 648);
      uint64_t v53 = *(void *)(v0 + 632);
      uint64_t v54 = *(void *)(v0 + 624);
      uint64_t v55 = *(unsigned char **)(v0 + 608);

      *uint64_t v55 = 0;
      OUTLINED_FUNCTION_54_3();
      swift_storeEnumTagMultiPayload();
      CommunalDeviceExecutionFlow.state.setter((uint64_t)v55);
      static PhoneCallFlowFactory.makeMainFlow(parse:sharedGlobals:)();
      static ExecuteResponse.complete(next:)();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1(v0 + 136);
      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v54);
    }
    else
    {
      char v62 = *(void *)(v0 + 544);
      uint64_t v63 = *(uint64_t **)(v0 + 536);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 136), *(void *)(v0 + 160));
      DynamicType = swift_getDynamicType();
      uint64_t v65 = *(void *)(v0 + 168);
      *uint64_t v63 = DynamicType;
      v63[1] = v65;
      swift_storeEnumTagMultiPayload();
      PhoneError.logged()(v62);
      outlined destroy of CommunalDeviceExecutionFlow.State((uint64_t)v63, (void (*)(void))type metadata accessor for PhoneError);
      outlined destroy of CommunalDeviceExecutionFlow.State(v62, (void (*)(void))type metadata accessor for PhoneError);
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v66 = type metadata accessor for Logger();
      uint64_t v67 = OUTLINED_FUNCTION_25_0(v66, (uint64_t)static Logger.siriPhone);
      uint64_t v68 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v67, v68))
      {
        uint64_t v69 = (uint8_t *)OUTLINED_FUNCTION_7_2();
        *(_WORD *)uint64_t v69 = 0;
        _os_log_impl(&dword_0, v67, v68, "#CommunalDeviceExecutionFlow Could not transform to PhoneCallNLIntent", v69, 2u);
        OUTLINED_FUNCTION_6();
      }

      type metadata accessor for StartCallCATsSimple();
      static CATOption.defaultMode.getter();
      unint64_t v70 = CATWrapperSimple.__allocating_init(options:globals:)();
      static CommonOutputs.genericError(sharedGlobals:startCallCATsSimple:)(v24, v70);
      swift_release();
      OUTLINED_FUNCTION_9_37();
      uint64_t v72 = v71();
      swift_release();
      *(void *)(v0 + 432) = v72;
      type metadata accessor for SimpleOutputFlowAsync();
      static ExecuteResponse.complete<A>(next:)();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1(v0 + 136);
      uint64_t v73 = OUTLINED_FUNCTION_54_3();
      v74(v73);
    }
    goto LABEL_32;
  }
  outlined init with take of AppSelectionSignalComponent((long long *)(v0 + 16), v0 + 296);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 296), *(void *)(v0 + 320));
  OUTLINED_FUNCTION_16_28();
  uint64_t v30 = PhoneCallNLIntent.isEmergencyNumberCall()();
  outlined init with copy of SignalProviding(v0 + 296, v0 + 256);
  if (v30)
  {
    __swift_destroy_boxed_opaque_existential_1(v0 + 256);
LABEL_26:
    unint64_t v57 = *(void *)(v0 + 640);
    id v58 = *(unsigned char **)(v0 + 608);
    *id v58 = 2;
    swift_storeEnumTagMultiPayload();
    CommunalDeviceExecutionFlow.state.setter((uint64_t)v58);
    type metadata accessor for CommunalDeviceEmergencyFlow();
    OUTLINED_FUNCTION_12();
    v59();
    outlined init with copy of SignalProviding(v24, v0 + 56);
    *(void *)(v0 + 472) = CommunalDeviceEmergencyFlow.__allocating_init(parse:sharedGlobals:)(v57, v0 + 56);
    lazy protocol witness table accessor for type CommunalDeviceExecutionFlow and conformance CommunalDeviceExecutionFlow(&lazy protocol witness table cache variable for type CommunalDeviceEmergencyFlow and conformance CommunalDeviceEmergencyFlow, (void (*)(uint64_t))type metadata accessor for CommunalDeviceEmergencyFlow);
    static ExecuteResponse.complete<A>(next:)();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1(v0 + 136);
    uint64_t v60 = OUTLINED_FUNCTION_54_3();
    v61(v60);
    __swift_destroy_boxed_opaque_existential_1(v0 + 296);
LABEL_32:
    uint64_t v75 = OUTLINED_FUNCTION_6_36();
    v76(v75);
    goto LABEL_33;
  }
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 256), *(void *)(v0 + 280));
  OUTLINED_FUNCTION_16_28();
  uint64_t v56 = PhoneCallNLIntent.isEmergencyServicesCall()();
  __swift_destroy_boxed_opaque_existential_1(v0 + 256);
  if (v56) {
    goto LABEL_26;
  }
  uint64_t v79 = *(void *)(v0 + 568);
  uint64_t v80 = *(void *)(v0 + 560);
  uint64_t v81 = *(void *)(v0 + 552);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 296), *(void *)(v0 + 320));
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  SiriEnvironment.userIdentity.getter();
  swift_release();
  dispatch thunk of UserIdentityProvider.identifiedUser.getter();
  swift_release();
  IdentifiedUser.personaId.getter();
  *(void *)(v0 + 664) = v82;
  (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v79, v81);
  uint64_t v83 = (void *)swift_task_alloc();
  *(void *)(v0 + 672) = v83;
  *uint64_t v83 = v0;
  v83[1] = CommunalDeviceExecutionFlow.execute();
  OUTLINED_FUNCTION_28_1();
  return PhoneCallNLIntent.shouldBeExecutedLocally(sharedGlobals:personaId:)(v84, v85, v86, v87, v88);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  char v3;
  uint64_t v4;
  uint64_t v6;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  *(unsigned char *)(v4 + 680) = v3;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(CommunalDeviceExecutionFlow.execute(), 0, 0);
}

void CommunalDeviceExecutionFlow.execute()()
{
  uint64_t v1 = *(void *)(v0 + 648);
  if (*(unsigned char *)(v0 + 680) == 1)
  {
    uint64_t v2 = *(void *)(v0 + 632);
    uint64_t v3 = *(void *)(v0 + 624);
    uint64_t v4 = *(unsigned char **)(v0 + 608);
    *uint64_t v4 = 0;
    swift_storeEnumTagMultiPayload();
    CommunalDeviceExecutionFlow.state.setter((uint64_t)v4);
    static PhoneCallFlowFactory.makeMainFlow(parse:sharedGlobals:)();
    static ExecuteResponse.complete(next:)();
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 640);
    uint64_t v2 = *(void *)(v0 + 632);
    uint64_t v3 = *(void *)(v0 + 624);
    uint64_t v6 = *(unsigned char **)(v0 + 608);
    *uint64_t v6 = 1;
    swift_storeEnumTagMultiPayload();
    CommunalDeviceExecutionFlow.state.setter((uint64_t)v6);
    type metadata accessor for RedirectToCompanionFlow(0);
    OUTLINED_FUNCTION_12();
    v7();
    uint64_t v8 = OUTLINED_FUNCTION_54_3();
    outlined init with copy of SignalProviding(v8, v9);
    *(void *)(v0 + 456) = RedirectToCompanionFlow.__allocating_init(parse:sharedGlobals:)(v5, v0 + 96);
    lazy protocol witness table accessor for type CommunalDeviceExecutionFlow and conformance CommunalDeviceExecutionFlow(&lazy protocol witness table cache variable for type RedirectToCompanionFlow and conformance RedirectToCompanionFlow, (void (*)(uint64_t))type metadata accessor for RedirectToCompanionFlow);
    static ExecuteResponse.complete<A>(next:)();
  }
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 136);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_1(v0 + 296);
  uint64_t v10 = OUTLINED_FUNCTION_6_36();
  v11(v10);
  OUTLINED_FUNCTION_2_52();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_28_1();
  __asm { BRAA            X1, X16 }
}

uint64_t PhoneCallNLIntent.shouldBeExecutedLocally(sharedGlobals:personaId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[14] = a5;
  v6[15] = v5;
  v6[12] = a1;
  v6[13] = a4;
  return _swift_task_switch(PhoneCallNLIntent.shouldBeExecutedLocally(sharedGlobals:personaId:), 0, 0);
}

uint64_t PhoneCallNLIntent.shouldBeExecutedLocally(sharedGlobals:personaId:)()
{
  if (!PhoneCallNLIntent.canBeExecutedLocally()(*(void *)(v0 + 104)))
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    uint64_t v9 = (void *)OUTLINED_FUNCTION_25_0(v14, (uint64_t)static Logger.siriPhone);
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_14_2(v15))
    {
      *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
      Swift::String v18 = "#CommunalDeviceExecutionFlow request is neither Answer or HangUp. Not executing locally";
LABEL_16:
      OUTLINED_FUNCTION_17_16(&dword_0, v16, v17, v18);
      uint64_t v13 = 0;
      goto LABEL_17;
    }
LABEL_18:
    uint64_t v13 = 0;
    goto LABEL_20;
  }
  __swift_project_boxed_opaque_existential_1(*(void **)(v0 + 96), *(void *)(*(void *)(v0 + 96) + 24));
  uint64_t v1 = OUTLINED_FUNCTION_14_22();
  v2(v1);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
  uint64_t v3 = OUTLINED_FUNCTION_14_22();
  v4(v3);
  uint64_t v5 = *(void *)(v0 + 80);
  uint64_t v6 = *(void *)(v0 + 88);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 56), v5);
  char v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  if (!PhoneCallNLIntent.isHangUpCall()() || (v7 & 1) == 0)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    uint64_t v9 = (void *)OUTLINED_FUNCTION_25_0(v19, (uint64_t)static Logger.siriPhone);
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_14_2(v20))
    {
      *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
      Swift::String v18 = "#CommunalDeviceExecutionFlow request should not be executed locally --> REMOTE";
      goto LABEL_16;
    }
    goto LABEL_18;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_25_0(v8, (uint64_t)static Logger.siriPhone);
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_14_2(v10))
  {
    *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
    OUTLINED_FUNCTION_17_16(&dword_0, v11, v12, "#CommunalDeviceExecutionFlow HangUp request on an active call --> LOCAL");
    uint64_t v13 = 1;
LABEL_17:
    OUTLINED_FUNCTION_6();
    goto LABEL_20;
  }
  uint64_t v13 = 1;
LABEL_20:

  unint64_t v21 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v21(v13);
}

unint64_t CommunalDeviceExecutionFlow.State.description.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Parse();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = &v20[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  uint64_t v8 = &v20[-v7];
  type metadata accessor for CommunalDeviceExecutionFlow.State(0);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v9);
  uint64_t v11 = &v20[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of CommunalDeviceExecutionFlow.State(v1, (uint64_t)v11, (void (*)(void))type metadata accessor for CommunalDeviceExecutionFlow.State);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    char v12 = *v11;
    OUTLINED_FUNCTION_15_21();
    swift_bridgeObjectRelease();
    unint64_t v21 = 0xD000000000000014;
    unint64_t v22 = 0x8000000000494560;
    v20[15] = v12;
    v13._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._uint64_t countAndFlagsBits = 41;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    return v21;
  }
  else
  {
    (*(void (**)(unsigned char *, char *, uint64_t))(v3 + 32))(v8, v11, v2);
    OUTLINED_FUNCTION_15_21();
    swift_bridgeObjectRelease();
    unint64_t v21 = 0xD000000000000014;
    unint64_t v22 = 0x8000000000494580;
    OUTLINED_FUNCTION_12();
    v16();
    v17._uint64_t countAndFlagsBits = String.init(describing:)((uint64_t)v6);
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._uint64_t countAndFlagsBits = 41;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    unint64_t v15 = v21;
    (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v8, v2);
  }
  return v15;
}

uint64_t outlined destroy of CommunalDeviceExecutionFlow.State(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_15();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t outlined init with copy of CommunalDeviceExecutionFlow.State(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_15();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t CommunalDeviceExecutionFlow.deinit()
{
  outlined destroy of CommunalDeviceExecutionFlow.State(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceExecutionFlow_state, (void (*)(void))type metadata accessor for CommunalDeviceExecutionFlow.State);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceExecutionFlow_sharedGlobals);
  return v0;
}

uint64_t CommunalDeviceExecutionFlow.__deallocating_deinit()
{
  outlined destroy of CommunalDeviceExecutionFlow.State(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceExecutionFlow_state, (void (*)(void))type metadata accessor for CommunalDeviceExecutionFlow.State);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin27CommunalDeviceExecutionFlow_sharedGlobals);

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Flow.on(input:) in conformance CommunalDeviceExecutionFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance CommunalDeviceExecutionFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))();
}

uint64_t protocol witness for Flow.execute() in conformance CommunalDeviceExecutionFlow(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 144) + **(int **)(**(void **)v1 + 144));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for Flow.execute() in conformance RedirectToCompanionFlow;
  return v6(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance CommunalDeviceExecutionFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for CommunalDeviceExecutionFlow(0);

  return Flow<>.exitValue.getter(v3, a2);
}

BOOL PhoneCallNLIntent.canBeExecutedLocally()(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 - 8);
  __chkstk_darwin(a1);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::Bool v6 = PhoneCallNLIntent.isAnswerCall()();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, a1);
  BOOL v7 = v6 || PhoneCallNLIntent.isHangUpCall()();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, a1);
  return v7;
}

uint64_t lazy protocol witness table accessor for type CommunalDeviceExecutionFlow and conformance CommunalDeviceExecutionFlow(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_15CDC0()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);

  return _swift_deallocObject(v0, 80, 7);
}

unint64_t lazy protocol witness table accessor for type CommunalDeviceExecutionFlow.CommunalDeviceExecutionLocation and conformance CommunalDeviceExecutionFlow.CommunalDeviceExecutionLocation()
{
  unint64_t result = lazy protocol witness table cache variable for type CommunalDeviceExecutionFlow.CommunalDeviceExecutionLocation and conformance CommunalDeviceExecutionFlow.CommunalDeviceExecutionLocation;
  if (!lazy protocol witness table cache variable for type CommunalDeviceExecutionFlow.CommunalDeviceExecutionLocation and conformance CommunalDeviceExecutionFlow.CommunalDeviceExecutionLocation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommunalDeviceExecutionFlow.CommunalDeviceExecutionLocation and conformance CommunalDeviceExecutionFlow.CommunalDeviceExecutionLocation);
  }
  return result;
}

uint64_t base witness table accessor for Flow in CommunalDeviceExecutionFlow()
{
  return lazy protocol witness table accessor for type CommunalDeviceExecutionFlow and conformance CommunalDeviceExecutionFlow(&lazy protocol witness table cache variable for type CommunalDeviceExecutionFlow and conformance CommunalDeviceExecutionFlow, (void (*)(uint64_t))type metadata accessor for CommunalDeviceExecutionFlow);
}

uint64_t base witness table accessor for SiriEnvironmentLocating in CommunalDeviceExecutionFlow()
{
  return lazy protocol witness table accessor for type CommunalDeviceExecutionFlow and conformance CommunalDeviceExecutionFlow(&lazy protocol witness table cache variable for type CommunalDeviceExecutionFlow and conformance CommunalDeviceExecutionFlow, (void (*)(uint64_t))type metadata accessor for CommunalDeviceExecutionFlow);
}

uint64_t sub_15CEE0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 96))();
}

uint64_t ObjC metadata update function for CommunalDeviceExecutionFlow()
{
  return type metadata accessor for CommunalDeviceExecutionFlow(0);
}

uint64_t type metadata completion function for CommunalDeviceExecutionFlow()
{
  uint64_t result = type metadata accessor for CommunalDeviceExecutionFlow.State(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CommunalDeviceExecutionFlow.State(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v8 = type metadata accessor for Parse();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t destroy for CommunalDeviceExecutionFlow.State(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (!result)
  {
    uint64_t v3 = type metadata accessor for Parse();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  return result;
}

void *initializeWithCopy for CommunalDeviceExecutionFlow.State(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for Parse();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithCopy for CommunalDeviceExecutionFlow.State(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of CommunalDeviceExecutionFlow.State((uint64_t)a1, (void (*)(void))type metadata accessor for CommunalDeviceExecutionFlow.State);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for Parse();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void *initializeWithTake for CommunalDeviceExecutionFlow.State(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for Parse();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for CommunalDeviceExecutionFlow.State(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of CommunalDeviceExecutionFlow.State((uint64_t)a1, (void (*)(void))type metadata accessor for CommunalDeviceExecutionFlow.State);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for Parse();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for CommunalDeviceExecutionFlow.State()
{
  uint64_t result = type metadata accessor for Parse();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CommunalDeviceExecutionFlow.CommunalDeviceExecutionLocation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x15D5ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CommunalDeviceExecutionFlow.CommunalDeviceExecutionLocation()
{
  return &type metadata for CommunalDeviceExecutionFlow.CommunalDeviceExecutionLocation;
}

uint64_t outlined assign with copy of CommunalDeviceExecutionFlow.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommunalDeviceExecutionFlow.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_2_52()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_6_36()
{
  return *(void *)(v0 + 480);
}

uint64_t OUTLINED_FUNCTION_14_22()
{
  return v0;
}

void OUTLINED_FUNCTION_15_21()
{
  *(void *)(v0 - 80) = 0;
  *(void *)(v0 - 72) = 0xE000000000000000;
  _StringGuts.grow(_:)(23);
}

uint64_t OUTLINED_FUNCTION_16_28()
{
  return v0;
}

void OUTLINED_FUNCTION_17_16(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v6, a4, v4, 2u);
}

uint64_t specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:_:)(uint64_t a1, void (*a2)(void, void), uint64_t a3)
{
  void (*v18)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  void *v21;
  os_log_type_t v22;
  _WORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  void (*v40)(uint64_t (*)(uint64_t), void *);
  void (*v42)(void);
  char v43;
  uint64_t v44;
  void *v45;
  os_log_type_t v46;
  _WORD *v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  void (*v51)(void);
  uint64_t v52;
  uint64_t v53;
  void *v54;
  os_log_type_t v55;
  _WORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  void (*v73)(uint64_t (*)(uint64_t), uint64_t);
  void (*v74)(void);
  char v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  os_log_type_t v84;
  _WORD *v85;
  uint64_t v86;
  void *v87;
  os_log_type_t v88;
  _WORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  void (*v106)(uint64_t (*)(uint64_t), uint64_t);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(void, void);
  uint64_t v112;
  void v113[3];
  uint64_t v114;

  uint64_t v4 = v3;
  OUTLINED_FUNCTION_20_18();
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  int v14 = v13;
  uint64_t v15 = OUTLINED_FUNCTION_60_1();
  *(void *)(v15 + 16) = v8;
  *(void *)(v15 + 24) = v10;
  uint64_t v108 = v10;
  uint64_t v109 = v12;
  *(void *)(v15 + 32) = v12;
  *(unsigned char *)(v15 + 40) = v14;
  HIDWORD(v107) = v14;
  *(unsigned char *)(v15 + 41) = BYTE1(v14) & 1;
  uint64_t v110 = a2;
  *(void *)(v15 + 48) = a2;
  *(void *)(v15 + 56) = a3;
  uint64_t v16 = v4[13];
  uint64_t v17 = v4[14];
  __swift_project_boxed_opaque_existential_1(v4 + 10, v16);
  Swift::String v18 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v17 + 8);
  swift_retain_n();
  swift_retain_n();
  v18(v113, v16, v17);
  OUTLINED_FUNCTION_33_11(v113);
  uint64_t v19 = dispatch thunk of DeviceState.isWatch.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v113);
  if (v19)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    os_log_type_t v20 = type metadata accessor for Logger();
    unint64_t v21 = (void *)OUTLINED_FUNCTION_25_0(v20, (uint64_t)static Logger.siriPhone);
    unint64_t v22 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_8_2(v22))
    {
      uint64_t v23 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_32_2(v23);
      OUTLINED_FUNCTION_1_3(&dword_0, v24, v25, "#IdiomSensitiveViewBuilder: Building views for Watch");
      OUTLINED_FUNCTION_6();
    }

    OUTLINED_FUNCTION_37_10(v26, v27, v28, v29, v30, v31);
    uint64_t v32 = (void *)swift_allocObject();
    v32[2] = partial apply for closure #1 in IdiomSensitiveViewBuilder.makeViews(utteranceViews:_:);
    v32[3] = v15;
    OUTLINED_FUNCTION_35_14((uint64_t)v32, v33, v34, v35, v36, v37, v38, v39, v107, v108, v109, (uint64_t)v110, a1, v8, v113[0]);
    v32[19] = v112;
    BOOL v40 = *(void (**)(uint64_t (*)(uint64_t), void *))(class metadata base offset for PhoneCallBaseCatTemplatingService
                                                                           + *(void *)v19
                                                                           + 144);
    swift_retain();
    swift_bridgeObjectRetain();
    v40(partial apply for closure #1 in CallCancelSlotConfirmationButtonsBuilder.makeViewsForWatch(utteranceViews:_:), v32);
LABEL_7:
    swift_release();
    swift_release();
    swift_release_n();
    return swift_release();
  }
  __swift_project_boxed_opaque_existential_1(v4 + 10, v4[13]);
  OUTLINED_FUNCTION_24_2();
  v42();
  OUTLINED_FUNCTION_33_11(v113);
  id v43 = dispatch thunk of DeviceState.isMac.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v113);
  if (v43)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v44 = type metadata accessor for Logger();
    uint64_t v45 = (void *)OUTLINED_FUNCTION_25_0(v44, (uint64_t)static Logger.siriPhone);
    id v46 = static os_log_type_t.info.getter();
    if (!OUTLINED_FUNCTION_8_2(v46)) {
      goto LABEL_25;
    }
    uint64_t v47 = (_WORD *)OUTLINED_FUNCTION_7_2();
    OUTLINED_FUNCTION_32_2(v47);
    uint64_t v50 = "#IdiomSensitiveViewBuilder: Building views for Mac";
    goto LABEL_24;
  }
  __swift_project_boxed_opaque_existential_1(v4 + 10, v4[13]);
  OUTLINED_FUNCTION_24_2();
  v51();
  OUTLINED_FUNCTION_33_11(v113);
  uint64_t v52 = dispatch thunk of DeviceState.isCarPlay.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v113);
  if (v52)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v53 = type metadata accessor for Logger();
    uint64_t v54 = (void *)OUTLINED_FUNCTION_25_0(v53, (uint64_t)static Logger.siriPhone);
    uint64_t v55 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_8_2(v55))
    {
      uint64_t v56 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_32_2(v56);
      OUTLINED_FUNCTION_1_3(&dword_0, v57, v58, "#IdiomSensitiveViewBuilder: Building views for CarPlay");
      OUTLINED_FUNCTION_6();
    }

    OUTLINED_FUNCTION_37_10(v59, v60, v61, v62, v63, v64);
    uint64_t v65 = swift_allocObject();
    *(void *)(v65 + 16) = partial apply for closure #1 in IdiomSensitiveViewBuilder.makeViews(utteranceViews:_:);
    *(void *)(v65 + 24) = v15;
    OUTLINED_FUNCTION_35_14(v65, v66, v67, v68, v69, v70, v71, v72, v107, v108, v109, (uint64_t)v110, a1, v8, v113[0]);
    uint64_t v73 = *(void (**)(uint64_t (*)(uint64_t), uint64_t))(class metadata base offset for PhoneCallBaseCatTemplatingService
                                                                          + *(void *)v52
                                                                          + 128);
    swift_retain();
    v73(partial apply for closure #1 in CallCancelSlotConfirmationButtonsBuilder.makeViewsForCar(utteranceViews:_:), v65);
    goto LABEL_7;
  }
  __swift_project_boxed_opaque_existential_1(v4 + 10, v4[13]);
  OUTLINED_FUNCTION_24_2();
  v74();
  uint64_t v75 = v114;
  uint64_t v76 = __swift_project_boxed_opaque_existential_1(v113, v114);
  uint64_t v77 = dispatch thunk of DeviceState.isAppleTV.getter();
  OUTLINED_FUNCTION_48_7(v77, v78, v79, v80, v81, v82);
  if ((v75 & 1) == 0)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v86 = type metadata accessor for Logger();
    uint64_t v87 = (void *)OUTLINED_FUNCTION_25_0(v86, (uint64_t)static Logger.siriPhone);
    uint64_t v88 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_8_2(v88))
    {
      uint64_t v89 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_32_2(v89);
      OUTLINED_FUNCTION_1_3(&dword_0, v90, v91, "#IdiomSensitiveViewBuilder: Building views for IOS");
      OUTLINED_FUNCTION_6();
    }

    OUTLINED_FUNCTION_37_10(v92, v93, v94, v95, v96, v97);
    uint64_t v98 = swift_allocObject();
    *(void *)(v98 + 16) = partial apply for closure #1 in IdiomSensitiveViewBuilder.makeViews(utteranceViews:_:);
    *(void *)(v98 + 24) = v15;
    OUTLINED_FUNCTION_35_14(v98, v99, v100, v101, v102, v103, v104, v105, v107, v108, v109, (uint64_t)v110, a1, v8, v113[0]);
    uint64_t v106 = *(void (**)(uint64_t (*)(uint64_t), uint64_t))(class metadata base offset for PhoneCallBaseCatTemplatingService
                                                                           + *v76
                                                                           + 144);
    swift_retain();
    v106(partial apply for closure #1 in CallCancelSlotConfirmationButtonsBuilder.makeViewsForIOS(utteranceViews:_:), v98);
    goto LABEL_7;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v83 = type metadata accessor for Logger();
  uint64_t v45 = (void *)OUTLINED_FUNCTION_25_0(v83, (uint64_t)static Logger.siriPhone);
  uint64_t v84 = static os_log_type_t.info.getter();
  if (OUTLINED_FUNCTION_8_2(v84))
  {
    uint64_t v85 = (_WORD *)OUTLINED_FUNCTION_7_2();
    OUTLINED_FUNCTION_32_2(v85);
    uint64_t v50 = "#IdiomSensitiveViewBuilder: Building views for AppleTV";
LABEL_24:
    OUTLINED_FUNCTION_1_3(&dword_0, v48, v49, v50);
    OUTLINED_FUNCTION_6();
  }
LABEL_25:

  closure #1 in IdiomSensitiveViewBuilder.makeViews(utteranceViews:_:)((unint64_t)_swiftEmptyArrayStorage, 0, v8, v108, v109, v14 & 0x1FF, v110);
  swift_release();
  swift_release();
  return OUTLINED_FUNCTION_6_2();
}

uint64_t specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v18)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  os_log_type_t v28;
  _WORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  os_log_type_t v71;
  _WORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void v90[3];

  uint64_t v4 = v3;
  OUTLINED_FUNCTION_20_18();
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  int v14 = v13;
  uint64_t v15 = OUTLINED_FUNCTION_60_1();
  *(void *)(v15 + 16) = v8;
  *(void *)(v15 + 24) = v10;
  uint64_t v87 = v12;
  *(void *)(v15 + 32) = v12;
  *(unsigned char *)(v15 + 40) = v14;
  HIDWORD(v86) = v14;
  *(unsigned char *)(v15 + 41) = BYTE1(v14) & 1;
  uint64_t v88 = a2;
  *(void *)(v15 + 48) = a2;
  *(void *)(v15 + 56) = a3;
  uint64_t v16 = v4[7];
  uint64_t v17 = v4[8];
  LOBYTE(v12) = __swift_project_boxed_opaque_existential_1(v4 + 4, v16);
  Swift::String v18 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v17 + 8);
  swift_retain_n();
  swift_retain_n();
  v18(v90, v16, v17);
  uint64_t v19 = OUTLINED_FUNCTION_24_20(v90);
  OUTLINED_FUNCTION_19_20(v19, v20, v21, v22, v23, v24, v25);
  if (v12)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    uint64_t v27 = (void *)OUTLINED_FUNCTION_25_0(v26, (uint64_t)static Logger.siriPhone);
    uint64_t v28 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_8_4(v28))
    {
      uint64_t v29 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_11_30(v29);
      OUTLINED_FUNCTION_84(&dword_0, v30, v31, "#IdiomSensitiveViewBuilder: Building views for Watch");
      OUTLINED_FUNCTION_6();
    }

    os_log_type_t v39 = OUTLINED_FUNCTION_42_9(v32, (uint64_t)partial apply for closure #1 in IdiomSensitiveViewBuilder.makeViews(utteranceViews:_:), v33, v34, v35, v36, v37, v38, v86, v10, v87, v88, a1);
    EmergencyCountdownBuilder.makeViewsForWatch(utteranceViews:_:)(v39, v40, v41);
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v4 + 4, v4[7]);
    id v42 = OUTLINED_FUNCTION_2_53();
    v43(v42);
    uint64_t v44 = OUTLINED_FUNCTION_25_16(v90);
    OUTLINED_FUNCTION_19_20(v44, v45, v46, v47, v48, v49, v50);
    __swift_project_boxed_opaque_existential_1(v4 + 4, v4[7]);
    unint64_t v51 = OUTLINED_FUNCTION_2_53();
    v52(v51);
    uint64_t v53 = OUTLINED_FUNCTION_26_16(v90);
    OUTLINED_FUNCTION_19_20(v53, v54, v55, v56, v57, v58, v59);
    __swift_project_boxed_opaque_existential_1(v4 + 4, v4[7]);
    uint64_t v60 = OUTLINED_FUNCTION_2_53();
    v61(v60);
    char v62 = OUTLINED_FUNCTION_23_17(v90);
    OUTLINED_FUNCTION_19_20(v62, v63, v64, v65, v66, v67, v68);
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v69 = type metadata accessor for Logger();
    unint64_t v70 = (void *)OUTLINED_FUNCTION_25_0(v69, (uint64_t)static Logger.siriPhone);
    uint64_t v71 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_8_4(v71))
    {
      uint64_t v72 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_11_30(v72);
      OUTLINED_FUNCTION_84(&dword_0, v73, v74, "#IdiomSensitiveViewBuilder: Building views for IOS");
      OUTLINED_FUNCTION_6();
    }

    uint64_t v82 = OUTLINED_FUNCTION_42_9(v75, (uint64_t)partial apply for closure #1 in IdiomSensitiveViewBuilder.makeViews(utteranceViews:_:), v76, v77, v78, v79, v80, v81, v86, v10, v87, v88, a1);
    EmergencyCountdownBuilder.makeViewsForIOS(utteranceViews:_:)(v82, v83, v84);
  }
  swift_release();
  swift_release();
  return swift_release_n();
}

{
  void *v3;
  void *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  void *v21;
  os_log_type_t v22;
  _WORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t);
  uint64_t v34;
  uint64_t v35;
  os_log_type_t v36;
  _WORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t);
  void v51[3];

  uint64_t v4 = v3;
  OUTLINED_FUNCTION_20_18();
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  int v14 = v13;
  uint64_t v15 = OUTLINED_FUNCTION_60_1();
  *(void *)(v15 + 16) = v8;
  *(void *)(v15 + 24) = v10;
  *(void *)(v15 + 32) = v12;
  *(unsigned char *)(v15 + 40) = v14;
  *(unsigned char *)(v15 + 41) = HIBYTE(v14) & 1;
  *(void *)(v15 + 48) = a2;
  *(void *)(v15 + 56) = a3;
  uint64_t v16 = v4[25];
  uint64_t v17 = v4[26];
  LOBYTE(v14) = __swift_project_boxed_opaque_existential_1(v4 + 22, v16);
  Swift::String v18 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v17 + 8);
  swift_retain();
  swift_retain();
  v18(v51, v16, v17);
  uint64_t v19 = OUTLINED_FUNCTION_24_20(v51);
  OUTLINED_FUNCTION_51_5(v19);
  if (v14)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    os_log_type_t v20 = type metadata accessor for Logger();
    unint64_t v21 = (void *)OUTLINED_FUNCTION_25_0(v20, (uint64_t)static Logger.siriPhone);
    unint64_t v22 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_8_4(v22))
    {
      uint64_t v23 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_11_30(v23);
      OUTLINED_FUNCTION_84(&dword_0, v24, v25, "#IdiomSensitiveViewBuilder: Building views for Watch");
      OUTLINED_FUNCTION_6();
    }
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v4 + 22, v4[25]);
    uint64_t v26 = OUTLINED_FUNCTION_4_45();
    v27(v26);
    uint64_t v28 = OUTLINED_FUNCTION_25_16(v51);
    OUTLINED_FUNCTION_51_5(v28);
    __swift_project_boxed_opaque_existential_1(v4 + 22, v4[25]);
    uint64_t v29 = OUTLINED_FUNCTION_4_45();
    v30(v29);
    uint64_t v31 = OUTLINED_FUNCTION_26_16(v51);
    OUTLINED_FUNCTION_51_5(v31);
    __swift_project_boxed_opaque_existential_1(v4 + 22, v4[25]);
    uint64_t v32 = OUTLINED_FUNCTION_4_45();
    v33(v32);
    uint64_t v34 = OUTLINED_FUNCTION_23_17(v51);
    OUTLINED_FUNCTION_51_5(v34);
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    unint64_t v21 = (void *)OUTLINED_FUNCTION_25_0(v35, (uint64_t)static Logger.siriPhone);
    uint64_t v36 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_8_4(v36))
    {
      id v37 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_11_30(v37);
      OUTLINED_FUNCTION_84(&dword_0, v38, v39, "#IdiomSensitiveViewBuilder: Building views for IOS");
      OUTLINED_FUNCTION_6();
    }
  }

  OUTLINED_FUNCTION_36_12();
  uint64_t v47 = OUTLINED_FUNCTION_12_22(v40, (uint64_t)partial apply for closure #1 in IdiomSensitiveViewBuilder.makeViews(utteranceViews:_:), v41, v42, v43, v44, v45, v46, a1);
  v48(v47);
  swift_release();
  return swift_release();
}

uint64_t specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:_:)(unint64_t a1)
{
  void (*v9)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v10;
  void *v11;
  os_log_type_t v12;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(void);
  void *v17;
  void (*v18)(void);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  void (*v25)(void);
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _WORD *v29;
  const char *v30;
  uint64_t v31;
  unsigned __int8 v32;
  void (*v33)(void);
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  _WORD *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  unsigned __int8 v41;
  void (*v42)(void);
  uint64_t v43;
  os_log_type_t v44;
  _WORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v54;
  void *v55;
  os_log_type_t v56;
  _WORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void (*v63)(void);
  id v64;
  __int16 v65;
  void v66[4];

  uint64_t v2 = v1;
  OUTLINED_FUNCTION_20_18();
  uint64_t v65 = v4;
  uint64_t v5 = v1[5];
  uint64_t v6 = v1[6];
  uint64_t v7 = v1 + 2;
  unsigned __int8 v8 = __swift_project_boxed_opaque_existential_1(v1 + 2, v5);
  uint64_t v9 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 8);
  swift_retain();
  swift_retain();
  v9(v66, v5, v6);
  OUTLINED_FUNCTION_9_38();
  dispatch thunk of DeviceState.isWatch.getter();
  OUTLINED_FUNCTION_53_5();
  if ((v8 & 1) == 0)
  {
    uint64_t v23 = v2[5];
    uint64_t v24 = __swift_project_boxed_opaque_existential_1(v7, v23);
    OUTLINED_FUNCTION_24_2();
    v25();
    OUTLINED_FUNCTION_9_38();
    dispatch thunk of DeviceState.isMac.getter();
    OUTLINED_FUNCTION_53_5();
    if (v24)
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v26 = type metadata accessor for Logger();
      uint64_t v27 = OUTLINED_FUNCTION_25_0(v26, (uint64_t)static Logger.siriPhone);
      uint64_t v28 = static os_log_type_t.info.getter();
      if (!OUTLINED_FUNCTION_14_2(v28)) {
        goto LABEL_27;
      }
      uint64_t v29 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_30_14(v29);
      uint64_t v30 = "#IdiomSensitiveViewBuilder: Building views for Mac";
    }
    else
    {
      uint64_t v31 = v2[5];
      uint64_t v32 = __swift_project_boxed_opaque_existential_1(v7, v31);
      OUTLINED_FUNCTION_24_2();
      v33();
      OUTLINED_FUNCTION_9_38();
      dispatch thunk of DeviceState.isCarPlay.getter();
      OUTLINED_FUNCTION_53_5();
      if (v32)
      {
        if (one-time initialization token for siriPhone != -1) {
          swift_once();
        }
        uint64_t v34 = type metadata accessor for Logger();
        uint64_t v35 = OUTLINED_FUNCTION_25_0(v34, (uint64_t)static Logger.siriPhone);
        uint64_t v36 = static os_log_type_t.info.getter();
        if (OUTLINED_FUNCTION_14_2(v36))
        {
          id v37 = (_WORD *)OUTLINED_FUNCTION_7_2();
          OUTLINED_FUNCTION_30_14(v37);
          OUTLINED_FUNCTION_49_9(&dword_0, v35, (os_log_type_t)v31, "#IdiomSensitiveViewBuilder: Building views for CarPlay");
          OUTLINED_FUNCTION_6();
        }

        SiriKitDisambiguationList.disambiguationItems.getter();
        uint64_t v17 = (void *)static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetForCarPlay(disambiguationItems:deviceIsLocked:)();
        swift_bridgeObjectRelease();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v38 = swift_allocObject();
        *(_OWORD *)(v38 + 16) = xmmword_46A030;
        *(void *)(v38 + 32) = v17;
        v66[0] = v38;
        specialized Array._endMutation()();
        os_log_type_t v39 = v66[0];
        if (a1 >> 62)
        {
          OUTLINED_FUNCTION_55_6();
          swift_bridgeObjectRetain();
          unint64_t v64 = v17;
          _bridgeCocoaArray<A>(_:)();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRetain();
          BOOL v40 = v17;
          dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
          type metadata accessor for SAAceView();
        }
        v66[0] = v39;
        specialized Array.append<A>(contentsOf:)();
        a1 = v66[0];
        goto LABEL_20;
      }
      uint64_t v23 = v2[5];
      id v41 = __swift_project_boxed_opaque_existential_1(v7, v23);
      OUTLINED_FUNCTION_24_2();
      v42();
      OUTLINED_FUNCTION_9_38();
      dispatch thunk of DeviceState.isAppleTV.getter();
      OUTLINED_FUNCTION_53_5();
      if ((v41 & 1) == 0)
      {
        if (one-time initialization token for siriPhone != -1) {
          swift_once();
        }
        uint64_t v54 = type metadata accessor for Logger();
        uint64_t v55 = (void *)OUTLINED_FUNCTION_25_0(v54, (uint64_t)static Logger.siriPhone);
        uint64_t v56 = static os_log_type_t.info.getter();
        if (OUTLINED_FUNCTION_14_2(v56))
        {
          unint64_t v57 = (_WORD *)OUTLINED_FUNCTION_7_2();
          OUTLINED_FUNCTION_11_30(v57);
          OUTLINED_FUNCTION_54_5(&dword_0, v58, v59, "#IdiomSensitiveViewBuilder: Building views for IOS");
          OUTLINED_FUNCTION_6();
        }

        uint64_t v60 = SiriKitDisambiguationList.rawItems.getter();
        specialized _arrayConditionalCast<A, B>(_:)(v60);
        swift_bridgeObjectRelease();
        os_log_type_t v61 = SiriKitDisambiguationList.disambiguationItems.getter();
        char v62 = __chkstk_darwin(v61);
        _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay11SiriKitFlow0fG18DisambiguationItemCGG_So10SAUIButtonCs5NeverOTg506_sSi11fg9Flow0aB18ij5CSo10k32CIgygo_Si6offset_AC7elementtAEs5L11OIegnrzr_TRSiAjNIgygo_Tf1cn_n(v62, (void (*)(unint64_t, uint64_t))partial apply for closure #1 in ForeignEmergencyButtonsBuilder.makeViewsForIOS(utteranceViews:_:));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        type metadata accessor for SiriKitAceViewBuilder();
        __swift_project_boxed_opaque_existential_1(v7, v2[5]);
        OUTLINED_FUNCTION_24_2();
        v63();
        dispatch thunk of static SiriKitAceViewBuilder.makeBuilder(deviceState:)();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v66);
        dispatch thunk of SiriKitAceViewBuilder.withUtteranceViews(utteranceViews:)();
        OUTLINED_FUNCTION_22_18();
        dispatch thunk of SiriKitAceViewBuilder.withButtons(buttons:)();
        swift_release();
        swift_bridgeObjectRelease();
        dispatch thunk of SiriKitAceViewBuilder.build()();
        OUTLINED_FUNCTION_22_18();
        unint64_t v51 = v65 & 0x1FF;
        uint64_t v52 = a1;
        goto LABEL_30;
      }
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      id v43 = type metadata accessor for Logger();
      uint64_t v27 = OUTLINED_FUNCTION_25_0(v43, (uint64_t)static Logger.siriPhone);
      uint64_t v44 = static os_log_type_t.info.getter();
      if (!OUTLINED_FUNCTION_14_2(v44))
      {
LABEL_27:

        if (a1 >> 62)
        {
          OUTLINED_FUNCTION_55_6();
          swift_bridgeObjectRetain();
          uint64_t v50 = _bridgeCocoaArray<A>(_:)();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRetain();
          dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
          type metadata accessor for SAAceView();
          uint64_t v50 = a1;
        }
        unint64_t v51 = v65 & 0x1FF;
        uint64_t v52 = v50;
LABEL_30:
        OUTLINED_FUNCTION_47_8(v52, v46, v47, v48, v49, v51);
        swift_release_n();
        goto LABEL_31;
      }
      uint64_t v45 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_30_14(v45);
      uint64_t v30 = "#IdiomSensitiveViewBuilder: Building views for AppleTV";
    }
    OUTLINED_FUNCTION_49_9(&dword_0, v27, (os_log_type_t)v23, v30);
    OUTLINED_FUNCTION_6();
    goto LABEL_27;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = (void *)OUTLINED_FUNCTION_25_0(v10, (uint64_t)static Logger.siriPhone);
  uint64_t v12 = static os_log_type_t.info.getter();
  if (OUTLINED_FUNCTION_14_2(v12))
  {
    int v13 = (_WORD *)OUTLINED_FUNCTION_7_2();
    OUTLINED_FUNCTION_11_30(v13);
    OUTLINED_FUNCTION_54_5(&dword_0, v14, v15, "#IdiomSensitiveViewBuilder: Building views for Watch");
    OUTLINED_FUNCTION_6();
  }

  SiriKitDisambiguationList.disambiguationItems.getter();
  __swift_project_boxed_opaque_existential_1(v7, v2[5]);
  OUTLINED_FUNCTION_24_2();
  v16();
  __swift_project_boxed_opaque_existential_1(v66, v66[3]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  uint64_t v17 = (void *)static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetForWatch(disambiguationItems:textToSpeechIsEnabled:)();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v66);
  type metadata accessor for SiriKitAceViewBuilder();
  __swift_project_boxed_opaque_existential_1(v7, v2[5]);
  OUTLINED_FUNCTION_24_2();
  v18();
  dispatch thunk of static SiriKitAceViewBuilder.makeBuilder(deviceState:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v66);
  dispatch thunk of SiriKitAceViewBuilder.withUtteranceViews(utteranceViews:)();
  OUTLINED_FUNCTION_22_18();
  dispatch thunk of SiriKitAceViewBuilder.addSnippet(snippet:)();
  swift_release();
  dispatch thunk of SiriKitAceViewBuilder.build()();
  OUTLINED_FUNCTION_22_18();
LABEL_20:
  OUTLINED_FUNCTION_47_8(a1, v19, v20, v21, v22, v65 & 0x1FF);
  swift_release_n();

LABEL_31:
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:_:)(unint64_t a1, void (*a2)(void, void), uint64_t a3)
{
  return specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:_:)(a1, a2, a3, (void (*)(unint64_t, void *, uint64_t, uint64_t, uint64_t, void, void (*)(void, void), uint64_t))specialized DefaultDisambiguationBuilder.makeViewsForIOS(utteranceViews:_:));
}

{
  void *v3;
  void *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_OWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  os_log_type_t v28;
  _WORD *v29;
  uint64_t v30;
  void (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v67;
  void *v68;
  os_log_type_t v69;
  _WORD *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  long long v75;
  void (*v76)(void *(*)(uint64_t), uint64_t);
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(void, void);
  _OWORD v83[3];
  uint64_t v84;

  __int16 v4 = v3;
  OUTLINED_FUNCTION_20_18();
  unsigned __int8 v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  int v14 = v13;
  uint64_t v15 = OUTLINED_FUNCTION_60_1();
  *(void *)(v15 + 16) = v8;
  *(void *)(v15 + 24) = v10;
  uint64_t v80 = v10;
  uint64_t v81 = v12;
  *(void *)(v15 + 32) = v12;
  *(unsigned char *)(v15 + 40) = v14;
  HIDWORD(v79) = v14;
  *(unsigned char *)(v15 + 41) = BYTE1(v14) & 1;
  uint64_t v82 = a2;
  *(void *)(v15 + 48) = a2;
  *(void *)(v15 + 56) = a3;
  uint64_t v17 = v4[4];
  uint64_t v16 = v4[5];
  LOBYTE(v12) = __swift_project_boxed_opaque_existential_1(v4 + 1, v17);
  Swift::String v18 = *(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v16 + 8);
  swift_retain_n();
  swift_retain_n();
  v18(v83, v17, v16);
  uint64_t v19 = OUTLINED_FUNCTION_24_20(v83);
  OUTLINED_FUNCTION_19_20(v19, v20, v21, v22, v23, v24, v25);
  if (v12)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    uint64_t v27 = (void *)OUTLINED_FUNCTION_25_0(v26, (uint64_t)static Logger.siriPhone);
    uint64_t v28 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_8_4(v28))
    {
      uint64_t v29 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_11_30(v29);
      OUTLINED_FUNCTION_84(&dword_0, v57, v58, "#IdiomSensitiveViewBuilder: Building views for Watch");
      OUTLINED_FUNCTION_6();
    }

    if (a1 >> 62)
    {
      type metadata accessor for SAAceView();
      swift_bridgeObjectRetain();
      uint64_t v65 = _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for SAAceView();
      uint64_t v65 = a1;
    }
    OUTLINED_FUNCTION_44_9(v65, v59, v60, v61, v62, v14 & 0x1FF, v63, v64, v77, a1, v79, v80, v81, v82, v8);
    swift_release();
    swift_release();
    OUTLINED_FUNCTION_6_2();
    return swift_bridgeObjectRelease();
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v4 + 1, v4[4]);
    uint64_t v30 = OUTLINED_FUNCTION_2_53();
    v31(v30);
    uint64_t v32 = OUTLINED_FUNCTION_25_16(v83);
    OUTLINED_FUNCTION_19_20(v32, v33, v34, v35, v36, v37, v38);
    __swift_project_boxed_opaque_existential_1(v4 + 1, v4[4]);
    os_log_type_t v39 = OUTLINED_FUNCTION_2_53();
    v40(v39);
    id v41 = OUTLINED_FUNCTION_26_16(v83);
    OUTLINED_FUNCTION_19_20(v41, v42, v43, v44, v45, v46, v47);
    __swift_project_boxed_opaque_existential_1(v4 + 1, v4[4]);
    unint64_t v48 = OUTLINED_FUNCTION_2_53();
    v49(v48);
    uint64_t v50 = OUTLINED_FUNCTION_23_17(v83);
    OUTLINED_FUNCTION_19_20(v50, v51, v52, v53, v54, v55, v56);
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v67 = type metadata accessor for Logger();
    uint64_t v68 = (void *)OUTLINED_FUNCTION_25_0(v67, (uint64_t)static Logger.siriPhone);
    uint64_t v69 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_8_4(v69))
    {
      unint64_t v70 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_11_30(v70);
      OUTLINED_FUNCTION_84(&dword_0, v71, v72, "#IdiomSensitiveViewBuilder: Building views for IOS");
      OUTLINED_FUNCTION_6();
    }

    uint64_t v73 = (void *)*v4;
    outlined init with copy of FaceTimeSettingsBuilder((uint64_t)v4, (uint64_t)v83);
    char v74 = swift_allocObject();
    uint64_t v75 = v83[1];
    *(_OWORD *)(v74 + 16) = v83[0];
    *(_OWORD *)(v74 + 32) = v75;
    *(_OWORD *)(v74 + 48) = v83[2];
    *(void *)(v74 + 64) = v84;
    *(void *)(v74 + 72) = a1;
    *(void *)(v74 + 80) = partial apply for closure #1 in IdiomSensitiveViewBuilder.makeViews(utteranceViews:_:);
    *(void *)(v74 + 88) = v15;
    uint64_t v76 = *(void (**)(void *(*)(uint64_t), uint64_t))(class metadata base offset for PhoneCallBaseCatTemplatingService
                                                                          + *v73
                                                                          + 120);
    swift_bridgeObjectRetain();
    swift_retain();
    v76(partial apply for closure #1 in FaceTimeSettingsBuilder.makeViewsForIOS(utteranceViews:_:), v74);
    swift_release();
    swift_release();
    swift_release_n();
    return swift_release();
  }
}

{
  return specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:_:)(a1, a2, a3, (void (*)(unint64_t, void *, uint64_t, uint64_t, uint64_t, void, void (*)(void, void), uint64_t))specialized DefaultDisambiguationBuilder.makeViewsForIOS(utteranceViews:_:));
}

{
  void *v3;
  void *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(long long *__return_ptr, uint64_t, uint64_t);
  void (*v19)(uint64_t (*)(uint64_t), uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  os_log_type_t v28;
  _WORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t);
  void (*v47)(void);
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  os_log_type_t v57;
  _WORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(void);
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  os_log_type_t v84;
  _WORD *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void (*v90)(void);
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  os_log_type_t v100;
  _WORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  os_log_type_t v119;
  _WORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void (*v139)(void, void);
  long long v141;
  long long v142;
  long long v143;
  long long v144;

  __int16 v4 = v3;
  OUTLINED_FUNCTION_20_18();
  unsigned __int8 v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  int v14 = v13;
  uint64_t v15 = OUTLINED_FUNCTION_60_1();
  *(void *)(v15 + 16) = v8;
  *(void *)(v15 + 24) = v10;
  uint64_t v137 = v12;
  uint64_t v138 = v10;
  *(void *)(v15 + 32) = v12;
  *(unsigned char *)(v15 + 40) = v14;
  HIDWORD(v136) = v14;
  *(unsigned char *)(v15 + 41) = BYTE1(v14) & 1;
  uint64_t v139 = a2;
  *(void *)(v15 + 48) = a2;
  *(void *)(v15 + 56) = a3;
  uint64_t v16 = v4[6];
  uint64_t v17 = v4[7];
  __swift_project_boxed_opaque_existential_1(v4 + 3, v16);
  Swift::String v18 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v17 + 8);
  swift_retain_n();
  swift_retain_n();
  v18(&v141, v16, v17);
  LOBYTE(v16) = BYTE8(v142);
  uint64_t v19 = (void (*)(uint64_t (*)(uint64_t), uint64_t))v143;
  OUTLINED_FUNCTION_29_15(&v141);
  os_log_type_t v20 = dispatch thunk of DeviceState.isWatch.getter();
  OUTLINED_FUNCTION_48_7(v20, v21, v22, v23, v24, v25);
  if (v16)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    uint64_t v27 = (void *)OUTLINED_FUNCTION_25_0(v26, (uint64_t)static Logger.siriPhone);
    uint64_t v28 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_63_0(v28))
    {
      uint64_t v29 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_40_7(v29);
      OUTLINED_FUNCTION_42_3(&dword_0, v30, v31, "#IdiomSensitiveViewBuilder: Building views for Watch");
      OUTLINED_FUNCTION_6();
    }

    OUTLINED_FUNCTION_27_12(v32, v33, v34, v35, v36, v37);
    uint64_t v38 = OUTLINED_FUNCTION_56_6();
    *(void *)(v38 + 16) = partial apply for closure #1 in IdiomSensitiveViewBuilder.makeViews(utteranceViews:_:);
    *(void *)(v38 + 24) = v15;
    OUTLINED_FUNCTION_7_40(v38, v39, v40, v41, v42, v43, v44, v45, v136, v137, v138, (uint64_t)v139, a1, v8, v141, v142, v143, v144);
    swift_bridgeObjectRetain();
    id v46 = partial apply for closure #1 in ButtonBuilder.makeViewsForWatch(utteranceViews:_:);
LABEL_32:
    v19(v46, v38);
    swift_release();
    swift_release();
    swift_release_n();
    return swift_release();
  }
  __swift_project_boxed_opaque_existential_1(v4 + 3, v4[6]);
  OUTLINED_FUNCTION_24_2();
  v47();
  unint64_t v48 = BYTE8(v142);
  uint64_t v19 = (void (*)(uint64_t (*)(uint64_t), uint64_t))v143;
  OUTLINED_FUNCTION_29_15(&v141);
  unint64_t v49 = dispatch thunk of DeviceState.isMac.getter();
  OUTLINED_FUNCTION_48_7(v49, v50, v51, v52, v53, v54);
  if (v48)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v55 = type metadata accessor for Logger();
    uint64_t v56 = (void *)OUTLINED_FUNCTION_25_0(v55, (uint64_t)static Logger.siriPhone);
    unint64_t v57 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_63_0(v57))
    {
      id v58 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_40_7(v58);
      OUTLINED_FUNCTION_42_3(&dword_0, v59, v60, "#IdiomSensitiveViewBuilder: Building views for Mac");
      OUTLINED_FUNCTION_6();
    }

    OUTLINED_FUNCTION_27_12(v61, v62, v63, v64, v65, v66);
    uint64_t v38 = OUTLINED_FUNCTION_56_6();
    *(void *)(v38 + 16) = partial apply for closure #1 in IdiomSensitiveViewBuilder.makeViews(utteranceViews:_:);
    *(void *)(v38 + 24) = v15;
    OUTLINED_FUNCTION_7_40(v38, v67, v68, v69, v70, v71, v72, v73, v136, v137, v138, (uint64_t)v139, a1, v8, v141, v142, v143, v144);
    swift_bridgeObjectRetain();
    id v46 = (uint64_t (*)(uint64_t))closure #1 in ButtonBuilder.makeViewsForIOS(utteranceViews:_:)partial apply;
    goto LABEL_32;
  }
  __swift_project_boxed_opaque_existential_1(v4 + 3, v4[6]);
  OUTLINED_FUNCTION_24_2();
  v74();
  uint64_t v75 = BYTE8(v142);
  OUTLINED_FUNCTION_29_15(&v141);
  uint64_t v76 = dispatch thunk of DeviceState.isCarPlay.getter();
  OUTLINED_FUNCTION_48_7(v76, v77, v78, v79, v80, v81);
  if ((v75 & 1) == 0)
  {
    __swift_project_boxed_opaque_existential_1(v4 + 3, v4[6]);
    OUTLINED_FUNCTION_24_2();
    v90();
    uint64_t v91 = BYTE8(v142);
    uint64_t v19 = (void (*)(uint64_t (*)(uint64_t), uint64_t))v143;
    __swift_project_boxed_opaque_existential_1(&v141, *((uint64_t *)&v142 + 1));
    uint64_t v92 = dispatch thunk of DeviceState.isAppleTV.getter();
    OUTLINED_FUNCTION_48_7(v92, v93, v94, v95, v96, v97);
    if (v91)
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v98 = type metadata accessor for Logger();
      id v99 = (void *)OUTLINED_FUNCTION_25_0(v98, (uint64_t)static Logger.siriPhone);
      uint64_t v100 = static os_log_type_t.info.getter();
      if (OUTLINED_FUNCTION_63_0(v100))
      {
        uint64_t v101 = (_WORD *)OUTLINED_FUNCTION_7_2();
        OUTLINED_FUNCTION_40_7(v101);
        OUTLINED_FUNCTION_42_3(&dword_0, v102, v103, "#IdiomSensitiveViewBuilder: Building views for AppleTV");
        OUTLINED_FUNCTION_6();
      }

      OUTLINED_FUNCTION_27_12(v104, v105, v106, v107, v108, v109);
      uint64_t v38 = OUTLINED_FUNCTION_56_6();
      *(void *)(v38 + 16) = partial apply for closure #1 in IdiomSensitiveViewBuilder.makeViews(utteranceViews:_:);
      *(void *)(v38 + 24) = v15;
      OUTLINED_FUNCTION_7_40(v38, v110, v111, v112, v113, v114, v115, v116, v136, v137, v138, (uint64_t)v139, a1, v8, v141, v142, v143, v144);
      swift_bridgeObjectRetain();
      id v46 = partial apply for closure #1 in ButtonBuilder.makeViewsForTV(utteranceViews:_:);
    }
    else
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v117 = type metadata accessor for Logger();
      uint64_t v118 = (void *)OUTLINED_FUNCTION_25_0(v117, (uint64_t)static Logger.siriPhone);
      uint64_t v119 = static os_log_type_t.info.getter();
      if (OUTLINED_FUNCTION_63_0(v119))
      {
        uint64_t v120 = (_WORD *)OUTLINED_FUNCTION_7_2();
        OUTLINED_FUNCTION_40_7(v120);
        OUTLINED_FUNCTION_42_3(&dword_0, v121, v122, "#IdiomSensitiveViewBuilder: Building views for IOS");
        OUTLINED_FUNCTION_6();
      }

      OUTLINED_FUNCTION_27_12(v123, v124, v125, v126, v127, v128);
      uint64_t v38 = OUTLINED_FUNCTION_56_6();
      *(void *)(v38 + 16) = partial apply for closure #1 in IdiomSensitiveViewBuilder.makeViews(utteranceViews:_:);
      *(void *)(v38 + 24) = v15;
      OUTLINED_FUNCTION_7_40(v38, v129, v130, v131, v132, v133, v134, v135, v136, v137, v138, (uint64_t)v139, a1, v8, v141, v142, v143, v144);
      swift_bridgeObjectRetain();
      id v46 = partial apply for closure #1 in ButtonBuilder.makeViewsForIOS(utteranceViews:_:);
    }
    goto LABEL_32;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v82 = type metadata accessor for Logger();
  uint64_t v83 = (void *)OUTLINED_FUNCTION_25_0(v82, (uint64_t)static Logger.siriPhone);
  uint64_t v84 = static os_log_type_t.info.getter();
  if (OUTLINED_FUNCTION_63_0(v84))
  {
    uint64_t v85 = (_WORD *)OUTLINED_FUNCTION_7_2();
    OUTLINED_FUNCTION_40_7(v85);
    OUTLINED_FUNCTION_42_3(&dword_0, v86, v87, "#IdiomSensitiveViewBuilder: Building views for CarPlay");
    OUTLINED_FUNCTION_6();
  }

  if (a1 >> 62)
  {
    OUTLINED_FUNCTION_58_6();
    swift_bridgeObjectRetain();
    uint64_t v88 = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for SAAceView();
    uint64_t v88 = a1;
  }
  closure #1 in IdiomSensitiveViewBuilder.makeViews(utteranceViews:_:)(v88, 0, v8, v138, v137, v14 & 0x1FF, v139);
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_6_2();
  return swift_bridgeObjectRelease();
}

uint64_t specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:_:)(uint64_t a1, void (*a2)(void, void))
{
  void (*v12)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _WORD *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  void (*v28)(void);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  _WORD *v35;
  const char *v36;
  unsigned __int8 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  os_log_type_t v46;
  _WORD *v47;
  void (*v48)(void);
  unsigned __int8 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  os_log_type_t v54;
  _WORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  _WORD *v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(void, void);
  void v70[4];

  int v3 = v2;
  uint64_t v69 = a2;
  OUTLINED_FUNCTION_20_18();
  uint64_t v67 = v4;
  uint64_t v68 = v5;
  __int16 v7 = v6;
  uint64_t v9 = v2[6];
  uint64_t v8 = v2[7];
  uint64_t v10 = v2 + 3;
  unsigned __int8 v11 = __swift_project_boxed_opaque_existential_1(v2 + 3, v9);
  uint64_t v12 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v8 + 8);
  swift_retain();
  swift_retain();
  v12(v70, v9, v8);
  OUTLINED_FUNCTION_31_14(v70);
  int v13 = dispatch thunk of DeviceState.isWatch.getter();
  OUTLINED_FUNCTION_52_6(v13, v14, v15);
  if ((v11 & 1) == 0)
  {
    uint64_t v27 = __swift_project_boxed_opaque_existential_1(v10, v3[6]);
    OUTLINED_FUNCTION_24_2();
    v28();
    OUTLINED_FUNCTION_31_14(v70);
    uint64_t v29 = dispatch thunk of DeviceState.isMac.getter();
    OUTLINED_FUNCTION_52_6(v29, v30, v31);
    if (v27)
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v32 = type metadata accessor for Logger();
      uint64_t v33 = OUTLINED_FUNCTION_25_0(v32, (uint64_t)static Logger.siriPhone);
      uint64_t v34 = static os_log_type_t.info.getter();
      if (!OUTLINED_FUNCTION_48_2(v34)) {
        goto LABEL_24;
      }
      uint64_t v35 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_28_14(v35);
      uint64_t v36 = "#IdiomSensitiveViewBuilder: Building views for Mac";
    }
    else
    {
      id v37 = __swift_project_boxed_opaque_existential_1(v10, v3[6]);
      OUTLINED_FUNCTION_24_2();
      v41(v38, v39, v40);
      OUTLINED_FUNCTION_31_14(v70);
      id v42 = dispatch thunk of DeviceState.isCarPlay.getter();
      OUTLINED_FUNCTION_52_6(v42, v43, v44, v67, v68, v69);
      if (v37)
      {
        if (one-time initialization token for siriPhone != -1) {
          swift_once();
        }
        uint64_t v45 = type metadata accessor for Logger();
        uint64_t v33 = OUTLINED_FUNCTION_25_0(v45, (uint64_t)static Logger.siriPhone);
        id v46 = static os_log_type_t.info.getter();
        if (!OUTLINED_FUNCTION_48_2(v46)) {
          goto LABEL_24;
        }
        uint64_t v47 = (_WORD *)OUTLINED_FUNCTION_7_2();
        OUTLINED_FUNCTION_28_14(v47);
        uint64_t v36 = "#IdiomSensitiveViewBuilder: Building views for CarPlay";
      }
      else
      {
        __swift_project_boxed_opaque_existential_1(v10, v3[6]);
        OUTLINED_FUNCTION_24_2();
        v48();
        unint64_t v49 = __swift_project_boxed_opaque_existential_1(v70, v70[3]);
        uint64_t v50 = dispatch thunk of DeviceState.isAppleTV.getter();
        OUTLINED_FUNCTION_52_6(v50, v51, v52);
        if ((v49 & 1) == 0)
        {
          if (one-time initialization token for siriPhone != -1) {
            swift_once();
          }
          uint64_t v63 = type metadata accessor for Logger();
          unint64_t v64 = OUTLINED_FUNCTION_25_0(v63, (uint64_t)static Logger.siriPhone);
          uint64_t v65 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v64, v65))
          {
            uint64_t v66 = (_WORD *)OUTLINED_FUNCTION_7_2();
            OUTLINED_FUNCTION_28_14(v66);
            OUTLINED_FUNCTION_41_8(&dword_0, v64, v65, "#IdiomSensitiveViewBuilder: Building views for IOS");
            OUTLINED_FUNCTION_6();
          }

          os_log_type_t v20 = CallRecordTableSnippetBuilder.makeCardSnippet()();
          goto LABEL_7;
        }
        if (one-time initialization token for siriPhone != -1) {
          swift_once();
        }
        uint64_t v53 = type metadata accessor for Logger();
        uint64_t v33 = OUTLINED_FUNCTION_25_0(v53, (uint64_t)static Logger.siriPhone);
        uint64_t v54 = static os_log_type_t.info.getter();
        if (!OUTLINED_FUNCTION_48_2(v54))
        {
LABEL_24:

          OUTLINED_FUNCTION_45_8((unint64_t)_swiftEmptyArrayStorage, v56, v57, v58, v59, v7 & 0x1FF, v60, v61, v67, v68, v69);
          OUTLINED_FUNCTION_2_30();
          return swift_release();
        }
        uint64_t v55 = (_WORD *)OUTLINED_FUNCTION_7_2();
        OUTLINED_FUNCTION_28_14(v55);
        uint64_t v36 = "#IdiomSensitiveViewBuilder: Building views for AppleTV";
      }
    }
    OUTLINED_FUNCTION_41_8(&dword_0, v33, (os_log_type_t)v3, v36);
    OUTLINED_FUNCTION_6();
    goto LABEL_24;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = OUTLINED_FUNCTION_25_0(v16, (uint64_t)static Logger.siriPhone);
  Swift::String v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (_WORD *)OUTLINED_FUNCTION_7_2();
    OUTLINED_FUNCTION_28_14(v19);
    OUTLINED_FUNCTION_41_8(&dword_0, v17, v18, "#IdiomSensitiveViewBuilder: Building views for Watch");
    OUTLINED_FUNCTION_6();
  }

  os_log_type_t v20 = CallRecordTableSnippetBuilder.makeItemGroup()();
LABEL_7:
  OUTLINED_FUNCTION_45_8((unint64_t)v20, v21, v22, v23, v24, v7 & 0x1FF, v25, v26, v67, v68, v69);
  OUTLINED_FUNCTION_2_30();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:_:)(unint64_t a1, void (*a2)(void, void), uint64_t a3, void (*a4)(unint64_t, void *, uint64_t, uint64_t, uint64_t, void, void (*)(void, void), uint64_t))
{
  void (*v17)(unint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  os_log_type_t v25;
  _WORD *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(void);
  void *v30;
  unint64_t v31;
  void (*v32)(void);
  unsigned __int8 v33;
  void (*v34)(void);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  os_log_type_t v42;
  _WORD *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(void);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 v54;
  void (*v55)(void);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  os_log_type_t v63;
  _WORD *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  unint64_t v69;
  id v70;
  unsigned __int8 v71;
  void (*v72)(void);
  uint8_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  os_log_type_t v81;
  _WORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  _WORD *v94;
  id v95;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v101[3];
  uint8_t *v102;

  __int16 v6 = v4;
  OUTLINED_FUNCTION_20_18();
  uint64_t v9 = v8;
  uint64_t v98 = v10;
  id v99 = v11;
  HIDWORD(v97) = v12;
  uint64_t v13 = v4[9];
  uint64_t v14 = v4[10];
  uint64_t v15 = v4 + 6;
  unsigned __int8 v16 = __swift_project_boxed_opaque_existential_1(v4 + 6, v13);
  uint64_t v17 = *(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(v14 + 8);
  swift_retain_n();
  swift_retain_n();
  v17(v101, v13, v14);
  OUTLINED_FUNCTION_17_17(v101);
  Swift::String v18 = dispatch thunk of DeviceState.isWatch.getter();
  OUTLINED_FUNCTION_50_4(v18, v19, v20, v21, v22);
  if (v16)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    uint64_t v24 = (void *)OUTLINED_FUNCTION_25_0(v23, (uint64_t)static Logger.siriPhone);
    Swift::String v25 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_21_19(v25))
    {
      uint64_t v26 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_34_8(v26);
      OUTLINED_FUNCTION_16_4(&dword_0, v27, v28, "#IdiomSensitiveViewBuilder: Building views for Watch");
      OUTLINED_FUNCTION_6();
    }

    SiriKitDisambiguationList.disambiguationItems.getter();
    __swift_project_boxed_opaque_existential_1(v15, v6[9]);
    OUTLINED_FUNCTION_24_2();
    v29();
    __swift_project_boxed_opaque_existential_1(v101, (uint64_t)v102);
    dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
    uint64_t v30 = (void *)static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetForWatch(disambiguationItems:textToSpeechIsEnabled:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v101);
    uint64_t v31 = type metadata accessor for SiriKitAceViewBuilder();
    __swift_project_boxed_opaque_existential_1(v15, v6[9]);
    OUTLINED_FUNCTION_24_2();
    v32();
    dispatch thunk of static SiriKitAceViewBuilder.makeBuilder(deviceState:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v101);
    dispatch thunk of SiriKitAceViewBuilder.withUtteranceViews(utteranceViews:)();
    OUTLINED_FUNCTION_22_18();
    dispatch thunk of SiriKitAceViewBuilder.addSnippet(snippet:)();
LABEL_13:
    swift_release();
    dispatch thunk of SiriKitAceViewBuilder.build()();
    OUTLINED_FUNCTION_22_18();
    OUTLINED_FUNCTION_46_7(v31, v47, v48, v49, v50, WORD2(v97) & 0x1FF, v51, v52, a1, v97, v98, v99, a2);
    OUTLINED_FUNCTION_2_30();

LABEL_14:
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  uint64_t v33 = __swift_project_boxed_opaque_existential_1(v15, v6[9]);
  OUTLINED_FUNCTION_24_2();
  v34();
  OUTLINED_FUNCTION_17_17(v101);
  uint64_t v35 = dispatch thunk of DeviceState.isMac.getter();
  OUTLINED_FUNCTION_50_4(v35, v36, v37, v38, v39);
  if (v33)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    BOOL v40 = type metadata accessor for Logger();
    id v41 = (void *)OUTLINED_FUNCTION_25_0(v40, (uint64_t)static Logger.siriPhone);
    id v42 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_21_19(v42))
    {
      id v43 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_34_8(v43);
      OUTLINED_FUNCTION_16_4(&dword_0, v44, v45, "#IdiomSensitiveViewBuilder: Building views for Mac");
      OUTLINED_FUNCTION_6();
    }

    SiriKitDisambiguationList.disambiguationItems.getter();
    uint64_t v30 = (void *)static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetForMac(disambiguationItems:deviceIsLocked:)();
    swift_bridgeObjectRelease();
    uint64_t v31 = type metadata accessor for SiriKitAceViewBuilder();
    __swift_project_boxed_opaque_existential_1(v15, v6[9]);
    OUTLINED_FUNCTION_24_2();
    v46();
    dispatch thunk of static SiriKitAceViewBuilder.makeBuilder(deviceState:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v101);
    dispatch thunk of SiriKitAceViewBuilder.withUtteranceViews(utteranceViews:)();
    OUTLINED_FUNCTION_22_18();
    dispatch thunk of SiriKitAceViewBuilder.withDisambiguationList(disambiguationList:)();
    goto LABEL_13;
  }
  uint64_t v54 = __swift_project_boxed_opaque_existential_1(v15, v6[9]);
  OUTLINED_FUNCTION_24_2();
  v55();
  OUTLINED_FUNCTION_17_17(v101);
  uint64_t v56 = dispatch thunk of DeviceState.isCarPlay.getter();
  OUTLINED_FUNCTION_50_4(v56, v57, v58, v59, v60);
  if (v54)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    os_log_type_t v61 = type metadata accessor for Logger();
    char v62 = (void *)OUTLINED_FUNCTION_25_0(v61, (uint64_t)static Logger.siriPhone);
    uint64_t v63 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_21_19(v63))
    {
      unint64_t v64 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_34_8(v64);
      OUTLINED_FUNCTION_16_4(&dword_0, v65, v66, "#IdiomSensitiveViewBuilder: Building views for CarPlay");
      OUTLINED_FUNCTION_6();
    }

    SiriKitDisambiguationList.disambiguationItems.getter();
    uint64_t v67 = (void *)static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetForCarPlay(disambiguationItems:deviceIsLocked:)();
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v68 = swift_allocObject();
    *(_OWORD *)(v68 + 16) = xmmword_46A030;
    *(void *)(v68 + 32) = v67;
    v101[0] = v68;
    specialized Array._endMutation()();
    uint64_t v69 = v101[0];
    if (a1 >> 62)
    {
      type metadata accessor for SAAceView();
      os_log_type_t v95 = v67;
      swift_bridgeObjectRetain();
      _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v70 = v67;
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for SAAceView();
    }
    v101[0] = v69;
    specialized Array.append<A>(contentsOf:)();
    closure #1 in IdiomSensitiveViewBuilder.makeViews(utteranceViews:_:)(v101[0], 0, v9, v98, v99, WORD2(v97) & 0x1FF, a2);
    OUTLINED_FUNCTION_2_30();

    goto LABEL_14;
  }
  uint64_t v71 = __swift_project_boxed_opaque_existential_1(v15, v6[9]);
  OUTLINED_FUNCTION_24_2();
  v72();
  uint64_t v73 = v102;
  OUTLINED_FUNCTION_17_17(v101);
  char v74 = dispatch thunk of DeviceState.isAppleTV.getter();
  OUTLINED_FUNCTION_50_4(v74, v75, v76, v77, v78);
  if (v71)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v79 = type metadata accessor for Logger();
    uint64_t v80 = (void *)OUTLINED_FUNCTION_25_0(v79, (uint64_t)static Logger.siriPhone);
    uint64_t v81 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_21_19(v81))
    {
      uint64_t v82 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_34_8(v82);
      OUTLINED_FUNCTION_16_4(&dword_0, v83, v84, "#IdiomSensitiveViewBuilder: Building views for AppleTV");
      OUTLINED_FUNCTION_6();
    }

    OUTLINED_FUNCTION_46_7((unint64_t)_swiftEmptyArrayStorage, v85, v86, v87, v88, WORD2(v97) & 0x1FF, v89, v90, a1, v97, v98, v99, a2);
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v91 = type metadata accessor for Logger();
    uint64_t v92 = OUTLINED_FUNCTION_25_0(v91, (uint64_t)static Logger.siriPhone);
    uint64_t v93 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v92, v93))
    {
      os_log_t v94 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_34_8(v94);
      _os_log_impl(&dword_0, v92, v93, "#IdiomSensitiveViewBuilder: Building views for IOS", v73, 2u);
      OUTLINED_FUNCTION_6();
    }

    swift_retain();
    swift_retain();
    a4(a1, v6, v9, v98, v99, WORD2(v97) & 0x1FF, a2, a3);
  }
  OUTLINED_FUNCTION_2_30();
LABEL_15:
  OUTLINED_FUNCTION_2_30();
  return swift_release_n();
}

uint64_t StartVideoCallAceViewProvider.__allocating_init(templatingService:sharedGlobals:)(uint64_t a1, uint64_t a2)
{
  return StartVideoCallAceViewProvider.init(templatingService:sharedGlobals:)(a1, a2);
}

uint64_t StartVideoCallAceViewProvider.init(templatingService:sharedGlobals:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + direct field offset for StartVideoCallAceViewProvider.templatingService) = a1;
  outlined init with copy of SignalProviding(a2, v2 + direct field offset for StartVideoCallAceViewProvider.sharedGlobals);
  uint64_t v4 = DefaultAceViewProvider.init()();
  __swift_destroy_boxed_opaque_existential_1(a2);
  return v4;
}

uint64_t StartVideoCallAceViewProvider.makeAceViewsForResolveNeedsDisambiguation(app:parameterName:intent:utteranceViews:disambiguationList:deviceIsLocked:_:)(uint64_t a1, uint64_t a2, void *a3, void *a4, unint64_t a5, uint64_t a6, char a7, void (*a8)(uint64_t, void), uint64_t a9)
{
  uint64_t v17 = type metadata accessor for CATOption();
  __chkstk_darwin(v17 - 8);
  swift_bridgeObjectRetain();
  v18._uint64_t countAndFlagsBits = a2;
  v18._object = a3;
  if (PhoneCallSlotNames.init(rawValue:)(v18).value == PhoneCallFlowDelegatePlugin_PhoneCallSlotNames_contact)
  {
    uint64_t v31 = v9 + direct field offset for StartVideoCallAceViewProvider.sharedGlobals;
    type metadata accessor for PhoneCallDisplayTextCATs();
    static CATOption.defaultMode.getter();
    uint64_t v19 = CATWrapper.__allocating_init(options:globals:)();
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    unint64_t v21 = OUTLINED_FUNCTION_25_0(v20, (uint64_t)static Logger.siriPhone);
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_28_14(v23);
      OUTLINED_FUNCTION_41_8(&dword_0, v21, v22, "#StartCallViewBuilders Providing DefaultDisambiguationBuilder");
      OUTLINED_FUNCTION_6();
    }

    outlined init with copy of SignalProviding(v31, (uint64_t)v35);
    v33[0] = a1;
    v33[1] = a4;
    v33[2] = a2;
    v33[3] = a3;
    v33[4] = a6;
    char v34 = a7 & 1;
    v35[5] = v19;
    swift_bridgeObjectRetain();
    swift_retain();
    id v24 = a4;
    swift_retain();
    specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:_:)(a5, a8, a9, (void (*)(unint64_t, void *, uint64_t, uint64_t, uint64_t, void, void (*)(void, void), uint64_t))specialized DefaultDisambiguationBuilder.makeViewsForIOS(utteranceViews:_:));
    return outlined destroy of DefaultDisambiguationBuilder<INStartVideoCallIntent>((uint64_t)v33);
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    uint64_t v27 = OUTLINED_FUNCTION_25_0(v26, (uint64_t)static Logger.siriPhone);
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_8_2(v28))
    {
      uint64_t v29 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_28_14(v29);
      OUTLINED_FUNCTION_41_8(&dword_0, v27, (os_log_type_t)v9, "Not disambiguating contacts - not building a disambiguation snippet");
      OUTLINED_FUNCTION_6();
    }

    if (a5 >> 62)
    {
      OUTLINED_FUNCTION_58_6();
      swift_bridgeObjectRetain();
      uint64_t v30 = _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for SAAceView();
      uint64_t v30 = a5;
    }
    a8(v30, 0);
    return swift_bridgeObjectRelease();
  }
}

unint64_t type metadata accessor for SAAceView()
{
  unint64_t result = lazy cache variable for type metadata for SAAceView;
  if (!lazy cache variable for type metadata for SAAceView)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SAAceView);
  }
  return result;
}

void StartVideoCallAceViewProvider.init()()
{
}

uint64_t StartVideoCallAceViewProvider.__ivar_destroyer()
{
  swift_release();
  uint64_t v1 = v0 + direct field offset for StartVideoCallAceViewProvider.sharedGlobals;

  return __swift_destroy_boxed_opaque_existential_1(v1);
}

uint64_t StartVideoCallAceViewProvider.deinit()
{
  uint64_t v0 = DefaultAceViewProvider.deinit();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + direct field offset for StartVideoCallAceViewProvider.sharedGlobals);
  return v0;
}

uint64_t StartVideoCallAceViewProvider.__deallocating_deinit()
{
  StartVideoCallAceViewProvider.deinit();

  return swift_deallocClassInstance();
}

uint64_t outlined destroy of DefaultDisambiguationBuilder<INStartVideoCallIntent>(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DefaultDisambiguationBuilder<INStartVideoCallIntent>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for StartVideoCallAceViewProvider()
{
  uint64_t result = type metadata singleton initialization cache for StartVideoCallAceViewProvider;
  if (!type metadata singleton initialization cache for StartVideoCallAceViewProvider) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for StartVideoCallAceViewProvider()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for StartVideoCallAceViewProvider()
{
  return type metadata accessor for StartVideoCallAceViewProvider();
}

uint64_t outlined init with copy of ButtonBuilder(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t partial apply for closure #1 in ButtonBuilder.makeViewsForIOS(utteranceViews:_:)(uint64_t a1)
{
  return closure #1 in ButtonBuilder.makeViewsForIOS(utteranceViews:_:)(a1, *(void (**)(uint64_t, void))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), v1 + 40);
}

uint64_t partial apply for closure #1 in ButtonBuilder.makeViewsForTV(utteranceViews:_:)(uint64_t a1)
{
  return closure #1 in ButtonBuilder.makeViewsForTV(utteranceViews:_:)(a1, *(void (**)(uint64_t, void))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), v1 + 40);
}

uint64_t objectdestroy_2Tm_0()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);

  return _swift_deallocObject(v0, 104, 7);
}

uint64_t partial apply for closure #1 in ButtonBuilder.makeViewsForWatch(utteranceViews:_:)(uint64_t a1)
{
  return closure #1 in ButtonBuilder.makeViewsForWatch(utteranceViews:_:)(a1, *(void (**)(uint64_t, void))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), v1 + 40);
}

uint64_t outlined init with copy of FaceTimeSettingsBuilder(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_160E40()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 96, 7);
}

void *partial apply for closure #1 in FaceTimeSettingsBuilder.makeViewsForIOS(utteranceViews:_:)(uint64_t a1)
{
  return closure #1 in FaceTimeSettingsBuilder.makeViewsForIOS(utteranceViews:_:)(a1, (void *)(v1 + 16), *(void *)(v1 + 72), *(void (**)(uint64_t, uint64_t))(v1 + 80));
}

id partial apply for closure #1 in ForeignEmergencyButtonsBuilder.makeViewsForIOS(utteranceViews:_:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in ForeignEmergencyButtonsBuilder.makeViewsForIOS(utteranceViews:_:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_160EC0()
{
  swift_release();

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 48);
  swift_release();

  __swift_destroy_boxed_opaque_existential_1(v0 + 112);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 160, 7);
}

uint64_t objectdestroyTm_7()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

void partial apply for closure #1 in IdiomSensitiveViewBuilder.makeViews(utteranceViews:_:)(unint64_t a1, char a2)
{
  char v3 = a2 & 1;
  if (*(unsigned char *)(v2 + 41)) {
    int v4 = 256;
  }
  else {
    int v4 = 0;
  }
  closure #1 in IdiomSensitiveViewBuilder.makeViews(utteranceViews:_:)(a1, v3, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), v4 | *(unsigned __int8 *)(v2 + 40), *(void (**)(void, void))(v2 + 48));
}

uint64_t OUTLINED_FUNCTION_2_53()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_4_45()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_7_40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long a15, long long a16, long long a17, long long a18)
{
  *(void *)(a1 + 32) = a13;
  *(_OWORD *)(a1 + 40) = a15;
  *(_OWORD *)(a1 + 56) = a16;
  *(_OWORD *)(a1 + 72) = a17;
  *(_OWORD *)(a1 + 88) = a18;
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_9_38()
{
  uint64_t v1 = *(void *)(v0 - 96);
  __swift_project_boxed_opaque_existential_1((void *)(v0 - 120), v1);
  return v1;
}

_WORD *OUTLINED_FUNCTION_11_30(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_12_22(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return a9;
}

uint64_t OUTLINED_FUNCTION_17_17(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return v1;
}

uint64_t OUTLINED_FUNCTION_19_20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)va);
}

void OUTLINED_FUNCTION_20_18()
{
  static Signpost.begin(_:)();
}

uint64_t OUTLINED_FUNCTION_22_18()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_23_17(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return dispatch thunk of DeviceState.isAppleTV.getter();
}

uint64_t OUTLINED_FUNCTION_24_20(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return dispatch thunk of DeviceState.isWatch.getter();
}

uint64_t OUTLINED_FUNCTION_26_16(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return dispatch thunk of DeviceState.isCarPlay.getter();
}

_WORD *OUTLINED_FUNCTION_28_14(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_29_15(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return v1;
}

_WORD *OUTLINED_FUNCTION_30_14(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_31_14(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return v1;
}

uint64_t OUTLINED_FUNCTION_33_11(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return v1;
}

_WORD *OUTLINED_FUNCTION_34_8(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

void *OUTLINED_FUNCTION_35_14(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char __src)
{
  unsigned __int8 v16 = (void *)(a1 + 32);
  return memcpy(v16, &__src, 0x78uLL);
}

uint64_t OUTLINED_FUNCTION_37_10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  return outlined init with copy of CallCancelSlotConfirmationButtonsBuilder(v6, (uint64_t)va);
}

void OUTLINED_FUNCTION_41_8(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 2u);
}

uint64_t OUTLINED_FUNCTION_42_9(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return a13;
}

void OUTLINED_FUNCTION_44_9(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(void, void), uint64_t a15)
{
  closure #1 in IdiomSensitiveViewBuilder.makeViews(utteranceViews:_:)(a1, 0, a15, a12, a13, a6, a14);
}

void OUTLINED_FUNCTION_45_8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(void, void))
{
  closure #1 in IdiomSensitiveViewBuilder.makeViews(utteranceViews:_:)(a1, 0, v11, a9, a10, a6, a11);
}

void OUTLINED_FUNCTION_46_7(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(void, void))
{
  closure #1 in IdiomSensitiveViewBuilder.makeViews(utteranceViews:_:)(a1, 0, v13, a11, a12, a6, a13);
}

void OUTLINED_FUNCTION_47_8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *(void *)(v7 - 160);
  uint64_t v10 = *(void *)(v7 - 152);
  uint64_t v11 = *(void (**)(void, void))(v7 - 144);
  closure #1 in IdiomSensitiveViewBuilder.makeViews(utteranceViews:_:)(a1, 0, v6, v9, v10, a6, v11);
}

uint64_t OUTLINED_FUNCTION_48_7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)va);
}

void OUTLINED_FUNCTION_49_9(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 2u);
}

uint64_t OUTLINED_FUNCTION_50_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)va);
}

uint64_t OUTLINED_FUNCTION_51_5(uint64_t a1, ...)
{
  va_start(va, a1);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)va);
}

uint64_t OUTLINED_FUNCTION_52_6(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)va);
}

uint64_t OUTLINED_FUNCTION_53_5()
{
  return __swift_destroy_boxed_opaque_existential_1(v0 - 120);
}

void OUTLINED_FUNCTION_54_5(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

unint64_t OUTLINED_FUNCTION_55_6()
{
  return type metadata accessor for SAAceView();
}

uint64_t OUTLINED_FUNCTION_56_6()
{
  return swift_allocObject();
}

unint64_t OUTLINED_FUNCTION_58_6()
{
  return type metadata accessor for SAAceView();
}

uint64_t StartCallFlow.__allocating_init(app:sharedGlobals:appFinder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return StartCallFlow.init(app:sharedGlobals:appFinder:)(a1, a2, a3);
}

uint64_t StartCallFlow.init(app:sharedGlobals:appFinder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = v3 + direct field offset for StartCallFlow.flowName;
  strcpy((char *)(v3 + direct field offset for StartCallFlow.flowName), "StartCallFlow");
  *(_WORD *)(v7 + 14) = -4864;
  outlined init with copy of SignalProviding(a2, (uint64_t)v10);
  uint64_t v8 = specialized CallingFlowAbstraction.init(app:flowName:sharedGlobals:)(a1, 0x6C61437472617453, 0xED0000776F6C466CLL, (uint64_t)v10, (uint64_t (*)(void))specialized PhoneFlow.init(sharedGlobals:));
  __swift_destroy_boxed_opaque_existential_1(a3);
  __swift_destroy_boxed_opaque_existential_1(a2);
  return v8;
}

uint64_t specialized CallingFlowAbstraction.init(app:flowName:sharedGlobals:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized CallingFlowAbstraction.init(app:flowName:sharedGlobals:)(a1, a2, a3, a4, (uint64_t (*)(void))specialized PhoneFlow.init(sharedGlobals:));
}

{
  return specialized CallingFlowAbstraction.init(app:flowName:sharedGlobals:)(a1, a2, a3, a4, (uint64_t (*)(void))specialized PhoneFlow.init(sharedGlobals:));
}

uint64_t specialized CallingFlowAbstraction.init(app:flowName:sharedGlobals:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  *(void *)(v5 + *(void *)(*(void *)v5 + 288)) = a1;
  uint64_t v8 = (uint64_t *)(v5 + *(void *)(*(void *)v5 + 296));
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = one-time initialization token for siriPhone;
  swift_retain();
  swift_retain();
  if (v9 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.siriPhone);
  swift_retain();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v20 = a4;
    uint64_t v19 = a5;
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    v21[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315138;
    uint64_t v15 = *v8;
    unint64_t v14 = v8[1];
    swift_bridgeObjectRetain();
    uint64_t v16 = v15;
    a4 = v20;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v14, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v11, v12, "%s.initialize", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a5 = v19;
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  outlined init with copy of SignalProviding(a4, (uint64_t)v21);
  uint64_t v17 = a5(v21);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a4);
  return v17;
}

uint64_t StartCallFlow.makeRCHFlow(input:intent:app:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducers<INStartCallIntent, INStartCallIntentResponse>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v37 = v6;
  uint64_t v38 = v5;
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_3_1();
  uint64_t v36 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<INStartCallIntent, INStartCallIntentResponse>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v34 = v9;
  uint64_t v35 = v8;
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_3_1();
  uint64_t v33 = v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallFlowFactory.PhoneRCHFlowProducers<INStartCallIntent, INStartCallIntentResponse>);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_3_1();
  uint64_t v31 = v13;
  uint64_t v14 = type metadata accessor for CATOption();
  __chkstk_darwin(v14 - 8);
  type metadata accessor for StartCallRCHFlowDelegate();
  uint64_t v15 = *(void (**)(void))(*(void *)v3 + 152);
  ((void (*)(void *__return_ptr))v15)(v43);
  swift_retain();
  StartCallRCHFlowDelegate.__allocating_init(sharedGlobals:appResolved:)((uint64_t)v43, a3);
  OUTLINED_FUNCTION_2_54();
  v15();
  type metadata accessor for PhoneCallDisplayTextCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v16 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for StartCallCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v17 = CATWrapperSimple.__allocating_init(options:globals:)();
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CallingIntentRCHFlowStrategy<INStartCallIntent, INStartCallIntentResponse>);
  swift_allocObject();
  uint64_t v18 = a3;
  uint64_t v19 = specialized CallingIntentRCHFlowStrategy.init(sharedGlobals:appResolved:phoneCallDisplayTextCATsSimple:startCallCATsSimple:)(v43, a3, v16, v17);
  uint64_t v29 = v18;
  swift_retain();
  OUTLINED_FUNCTION_2_54();
  v15();
  static PhoneCallFlowFactory.getStartCallProducers(skIntent:delegate:app:sharedGlobals:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
  OUTLINED_FUNCTION_2_54();
  v15();
  uint64_t v20 = v44;
  uint64_t v21 = v45;
  __swift_project_boxed_opaque_existential_1(v43, v44);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v21 + 104))(v40, v20, v21);
  uint64_t v22 = v41;
  uint64_t v23 = v42;
  __swift_project_boxed_opaque_existential_1(v40, v41);
  uint64_t v39 = v19;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v33, v31 + *(int *)(v12 + 44), v35);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))(v36, v31, v38);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowFactory<INStartCallIntent, INStartCallIntentResponse>);
  swift_allocObject();
  uint64_t v24 = RCHChildFlowFactory.init(producers:withFallbacks:)();
  Swift::String v25 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v23 + 8);
  unint64_t v26 = lazy protocol witness table accessor for type CallingIntentRCHFlowStrategy<INStartCallIntent, INStartCallIntentResponse> and conformance CallingIntentRCHFlowStrategy<A, B>();
  uint64_t v27 = v25(&v39, v24, v29, a2, v30, v26, v22, v23);
  swift_release();
  swift_release();
  outlined destroy of PhoneCallFlowFactory.PhoneRCHFlowProducers<INStartCallIntent, INStartCallIntentResponse>(v31);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
  return v27;
}

void StartCallFlow.init(app:flowName:sharedGlobals:)()
{
}

void StartCallFlow.init(state:app:flowName:sharedGlobals:)()
{
}

uint64_t StartCallFlow.__ivar_destroyer()
{
  return swift_bridgeObjectRelease();
}

uint64_t StartCallFlow.deinit()
{
  uint64_t v0 = specialized CallingFlowAbstraction.deinit(specialized PhoneFlow.deinit);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t specialized CallingFlowAbstraction.deinit()
{
  return specialized CallingFlowAbstraction.deinit(specialized PhoneFlow.deinit);
}

{
  return specialized CallingFlowAbstraction.deinit(specialized PhoneFlow.deinit);
}

uint64_t specialized CallingFlowAbstraction.deinit(uint64_t (*a1)(void))
{
  uint64_t v1 = a1();
  swift_release();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t StartCallFlow.__deallocating_deinit()
{
  specialized CallingFlowAbstraction.deinit(specialized PhoneFlow.deinit);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

unint64_t lazy protocol witness table accessor for type CallingIntentRCHFlowStrategy<INStartCallIntent, INStartCallIntentResponse> and conformance CallingIntentRCHFlowStrategy<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type CallingIntentRCHFlowStrategy<INStartCallIntent, INStartCallIntentResponse> and conformance CallingIntentRCHFlowStrategy<A, B>;
  if (!lazy protocol witness table cache variable for type CallingIntentRCHFlowStrategy<INStartCallIntent, INStartCallIntentResponse> and conformance CallingIntentRCHFlowStrategy<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CallingIntentRCHFlowStrategy<INStartCallIntent, INStartCallIntentResponse>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallingIntentRCHFlowStrategy<INStartCallIntent, INStartCallIntentResponse> and conformance CallingIntentRCHFlowStrategy<A, B>);
  }
  return result;
}

uint64_t outlined destroy of PhoneCallFlowFactory.PhoneRCHFlowProducers<INStartCallIntent, INStartCallIntentResponse>(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallFlowFactory.PhoneRCHFlowProducers<INStartCallIntent, INStartCallIntentResponse>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for StartCallFlow()
{
  uint64_t result = type metadata singleton initialization cache for StartCallFlow;
  if (!type metadata singleton initialization cache for StartCallFlow) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for StartCallFlow()
{
  return swift_initClassMetadata2();
}

uint64_t PhoneCallControlFlow.__allocating_init(input:sharedGlobals:appFinder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  PhoneCallControlFlow.init(input:sharedGlobals:appFinder:)(a1, a2, a3);
  return v6;
}

unint64_t PhoneCallControlFlow.PhoneCallControlFlowError.errorDescription.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t PhoneCallControlFlow.init(input:sharedGlobals:appFinder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  outlined init with copy of SignalProviding(a2, v3 + 16);
  uint64_t v8 = v3 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneCallControlFlow_input;
  uint64_t v9 = type metadata accessor for Input();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v8, a1, v9);
  outlined init with copy of SignalProviding(a3, v4 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneCallControlFlow_appFinder);
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.siriPhone);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl(&dword_0, v12, v13, "#PhoneCallControlFlow state is initialized.", v14, 2u);
    OUTLINED_FUNCTION_6();
  }

  __swift_destroy_boxed_opaque_existential_1(a3);
  __swift_destroy_boxed_opaque_existential_1(a2);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, v9);
  return v4;
}

uint64_t PhoneCallControlFlow.execute(completion:)()
{
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t PhoneCallControlFlow.execute()(uint64_t a1)
{
  v2[58] = a1;
  v2[59] = v1;
  type metadata accessor for CATOption();
  v2[60] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Parse();
  v2[61] = v3;
  v2[62] = *(void *)(v3 - 8);
  v2[63] = swift_task_alloc();
  return _swift_task_switch(PhoneCallControlFlow.execute(), 0, 0);
}

uint64_t PhoneCallControlFlow.execute()()
{
  uint64_t v52 = v0;
  uint64_t v2 = *(void *)(v0 + 496);
  uint64_t v1 = *(void *)(v0 + 504);
  uint64_t v3 = *(void *)(v0 + 488);
  uint64_t v4 = *(void **)(v0 + 472);
  uint64_t v5 = v4[5];
  uint64_t v6 = v4[6];
  __swift_project_boxed_opaque_existential_1(v4 + 2, v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 72))(v5, v6);
  Input.parse.getter();
  uint64_t v8 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 280))(v1);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (v8)
  {
    uint64_t v9 = v4[5];
    uint64_t v10 = v4[6];
    __swift_project_boxed_opaque_existential_1(v4 + 2, v9);
    (*(void (**)(uint64_t, uint64_t))(v10 + 120))(v9, v10);
    uint64_t v11 = *(void *)(v0 + 160);
    uint64_t v12 = *(void *)(v0 + 168);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 136), v11);
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 24))(v11, v12);
    if (!v13)
    {
      __swift_destroy_boxed_opaque_existential_1(v0 + 136);
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v26 = type metadata accessor for Logger();
      __swift_project_value_buffer(v26, (uint64_t)static Logger.siriPhone);
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v29 = 0;
        _os_log_impl(&dword_0, v27, v28, "#PhoneCallControlFlow did not find supported call. Pushing UnsupportedCallControlIntentOutputProvider output flow", v29, 2u);
        OUTLINED_FUNCTION_6();
      }

      static SiriKitEventSender.current.getter();
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 176), *(void *)(v0 + 200));
      OUTLINED_FUNCTION_5_38(11, v8[17], 0);
      __swift_destroy_boxed_opaque_existential_1(v0 + 176);
      outlined init with copy of SignalProviding((uint64_t)(v4 + 2), v0 + 216);
      type metadata accessor for PhoneCallControlCATsSimple();
      swift_retain();
      static CATOption.defaultMode.getter();
      uint64_t v30 = CATWrapperSimple.__allocating_init(options:globals:)();
      type metadata accessor for UnsupportedFlowCATsSimple();
      static CATOption.defaultMode.getter();
      uint64_t v31 = CATWrapperSimple.__allocating_init(options:globals:)();
      type metadata accessor for UnsupportedCallControlIntentOutputProvider();
      swift_allocObject();
      uint64_t v32 = UnsupportedCallControlIntentOutputProvider.init(intent:sharedGlobals:callControlCats:unsupportedCats:)((uint64_t)v8, (long long *)(v0 + 216), v30, v31);
      uint64_t v33 = (*(uint64_t (**)(void))(*v32 + 120))();
      swift_release();
      *(void *)(v0 + 424) = v33;
      type metadata accessor for SimpleOutputFlowAsync();
      static ExecuteResponse.complete<A>(next:)();
      goto LABEL_22;
    }
    uint64_t v15 = v13;
    uint64_t v16 = v14;
    __swift_destroy_boxed_opaque_existential_1(v0 + 136);
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 136))(v15, v16);
    if (PhoneCallControlAction.rawValue.getter(v17) == 0xD000000000000011 && v18 == 0x8000000000490ED0)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v34 & 1) == 0)
      {
        uint64_t v49 = PhoneCallControlFlow.getActionnableCallControlFlow(action:)(v17);
        static SiriKitEventSender.current.getter();
        __swift_project_boxed_opaque_existential_1((void *)(v0 + 336), *(void *)(v0 + 360));
        SiriKitEventSending.sendCallControlEvent(action:target:state:)(v17, v8[17], 256);
        __swift_destroy_boxed_opaque_existential_1(v0 + 336);
        outlined init with copy of SignalProviding((uint64_t)(v4 + 2), v0 + 256);
        type metadata accessor for PhoneCallControlCATsSimple();
        static CATOption.defaultMode.getter();
        uint64_t v50 = OUTLINED_FUNCTION_7_41();
        *(void *)(v0 + 432) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 136))(v0 + 256, v17, v50);
        type metadata accessor for ActionableCallControlFlow();
        lazy protocol witness table accessor for type PhoneCallControlFlow and conformance PhoneCallControlFlow(&lazy protocol witness table cache variable for type ActionableCallControlFlow and conformance ActionableCallControlFlow, (void (*)(uint64_t))type metadata accessor for ActionableCallControlFlow);
LABEL_21:
        static ExecuteResponse.complete<A>(next:)();
        swift_unknownObjectRelease();
LABEL_22:
        swift_release();
        goto LABEL_25;
      }
    }
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)static Logger.siriPhone);
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (_WORD *)swift_slowAlloc();
      OUTLINED_FUNCTION_34_8(v38);
      _os_log_impl(&dword_0, v36, v37, "#PhoneCallControlFlow recognized unsupported action. Pushing UnsupportedFeatureGuardFlow output flow", (uint8_t *)(v0 + 136), 2u);
      OUTLINED_FUNCTION_6();
    }

    static SiriKitEventSender.current.getter();
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), *(void *)(v0 + 120));
    OUTLINED_FUNCTION_5_38(v17, v8[17], 1);
    __swift_destroy_boxed_opaque_existential_1(v0 + 96);
    outlined init with copy of SignalProviding((uint64_t)(v4 + 2), v0 + 56);
    type metadata accessor for PhoneCallControlCATsSimple();
    swift_retain();
    static CATOption.defaultMode.getter();
    uint64_t v39 = OUTLINED_FUNCTION_7_41();
    type metadata accessor for UnsupportedFlowCATsSimple();
    static CATOption.defaultMode.getter();
    uint64_t v40 = OUTLINED_FUNCTION_7_41();
    type metadata accessor for UnsupportedCallControlIntentOutputProvider();
    swift_allocObject();
    uint64_t v41 = UnsupportedCallControlIntentOutputProvider.init(intent:sharedGlobals:callControlCats:unsupportedCats:)((uint64_t)v8, (long long *)(v0 + 56), v39, v40);
    uint64_t v42 = (*(uint64_t (**)(void))(*v41 + 120))();
    swift_release();
    *(void *)(v0 + 456) = v42;
    type metadata accessor for SimpleOutputFlowAsync();
    goto LABEL_21;
  }
  uint64_t v19 = (void *)(v0 + 16);
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.siriPhone);
  swift_retain_n();
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    v51[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 136315138;
    type metadata accessor for Input();
    lazy protocol witness table accessor for type PhoneCallControlFlow and conformance PhoneCallControlFlow((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, (void (*)(uint64_t))&type metadata accessor for Input);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 440) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v51);
    uint64_t v19 = (void *)(v0 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_0, v21, v22, "#PhoneCallControlFlow failed to get action from input %s", v23, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
    swift_release_n();
  }

  static SiriKitEventSender.current.getter();
  __swift_project_boxed_opaque_existential_1(v19, *(void *)(v0 + 40));
  OUTLINED_FUNCTION_5_38(11, 5, 1);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  type metadata accessor for StartCallCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v43 = OUTLINED_FUNCTION_7_41();
  uint64_t v44 = static CommonOutputs.genericError(sharedGlobals:startCallCATsSimple:)((uint64_t)(v4 + 2), v43);
  uint64_t v45 = swift_release();
  uint64_t v46 = (*(uint64_t (**)(uint64_t))(*(void *)v44 + 112))(v45);
  swift_release();
  *(void *)(v0 + 448) = v46;
  type metadata accessor for SimpleOutputFlowAsync();
  static ExecuteResponse.complete<A>(next:)();
LABEL_25:
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v47 = *(uint64_t (**)(void))(v0 + 8);
  return v47();
}

uint64_t PhoneCallControlFlow.getActionnableCallControlFlow(action:)(char a1)
{
  if (PhoneCallControlAction.isMicrophoneAction.getter(a1))
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.siriPhone);
    uint64_t v3 = (void *)Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_21_19(v4))
    {
      uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_34_8(v5);
      OUTLINED_FUNCTION_16_4(&dword_0, v6, v7, "#PhoneCallControlFlow recognized microphone action. Pushing MicrophoneControlFlow");
      OUTLINED_FUNCTION_4_46();
    }

    return type metadata accessor for MicrophoneControlFlow();
  }
  else if (PhoneCallControlAction.isCameraAction.getter(a1))
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.siriPhone);
    uint64_t v10 = (void *)Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_21_19(v11))
    {
      uint64_t v12 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_34_8(v12);
      OUTLINED_FUNCTION_16_4(&dword_0, v13, v14, "#PhoneCallControlFlow recognized camera action. Pushing CameraControlFlow");
      OUTLINED_FUNCTION_4_46();
    }

    return type metadata accessor for CameraControlFlow();
  }
  else if (PhoneCallControlAction.isSpeakerphoneAction.getter(a1))
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.siriPhone);
    uint64_t v16 = (void *)Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_21_19(v17))
    {
      uint64_t v18 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_34_8(v18);
      OUTLINED_FUNCTION_16_4(&dword_0, v19, v20, "#PhoneCallControlFlow recognized microphone action. Pushing SpeakerphoneControlFlow");
      OUTLINED_FUNCTION_4_46();
    }

    return type metadata accessor for SpeakerphoneControlFlow();
  }
  else if (PhoneCallControlAction.isHoldAction.getter(a1))
  {
    return type metadata accessor for HoldControlFlow();
  }
  else if (PhoneCallControlAction.isSwitchToFaceTimeAction.getter(a1))
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.siriPhone);
    os_log_type_t v22 = (void *)Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_21_19(v23))
    {
      uint64_t v24 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_34_8(v24);
      OUTLINED_FUNCTION_16_4(&dword_0, v25, v26, "#PhoneCallControlFlow recognized switchToFacetime action. Pushing SwitchToFaceTimeControlFlow");
      OUTLINED_FUNCTION_4_46();
    }

    return type metadata accessor for SwitchToFaceTimeControlFlow();
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.siriPhone);
    os_log_type_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136315138;
      unint64_t v31 = PhoneCallControlAction.description.getter(a1);
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v28, v29, "#PhoneCallControlFlow action %s did not match microphone/camera/speakerphone/switchToFaceTime action and will not be handled. Throwing error.", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    lazy protocol witness table accessor for type PhoneCallControlFlow.PhoneCallControlFlowError and conformance PhoneCallControlFlow.PhoneCallControlFlowError();
    swift_allocError();
    return swift_willThrow();
  }
}

uint64_t PhoneCallControlFlow.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v1 = v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneCallControlFlow_input;
  uint64_t v2 = type metadata accessor for Input();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin20PhoneCallControlFlow_appFinder);
  return v0;
}

uint64_t PhoneCallControlFlow.__deallocating_deinit()
{
  PhoneCallControlFlow.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Flow.on(input:) in conformance PhoneCallControlFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance PhoneCallControlFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t protocol witness for Flow.execute() in conformance PhoneCallControlFlow(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 128) + **(int **)(**(void **)v1 + 128));
  os_log_type_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *os_log_type_t v4 = v2;
  v4[1] = protocol witness for Flow.execute() in conformance PhoneFlow<A, B>;
  return v6(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance PhoneCallControlFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for PhoneCallControlFlow();

  return Flow<>.exitValue.getter(v3, a2);
}

uint64_t type metadata accessor for PhoneCallControlFlow()
{
  uint64_t result = type metadata singleton initialization cache for PhoneCallControlFlow;
  if (!type metadata singleton initialization cache for PhoneCallControlFlow) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type PhoneCallControlFlow and conformance PhoneCallControlFlow(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PhoneCallControlFlow.PhoneCallControlFlowError and conformance PhoneCallControlFlow.PhoneCallControlFlowError()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallControlFlow.PhoneCallControlFlowError and conformance PhoneCallControlFlow.PhoneCallControlFlowError;
  if (!lazy protocol witness table cache variable for type PhoneCallControlFlow.PhoneCallControlFlowError and conformance PhoneCallControlFlow.PhoneCallControlFlowError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallControlFlow.PhoneCallControlFlowError and conformance PhoneCallControlFlow.PhoneCallControlFlowError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallControlFlow.PhoneCallControlFlowError and conformance PhoneCallControlFlow.PhoneCallControlFlowError;
  if (!lazy protocol witness table cache variable for type PhoneCallControlFlow.PhoneCallControlFlowError and conformance PhoneCallControlFlow.PhoneCallControlFlowError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallControlFlow.PhoneCallControlFlowError and conformance PhoneCallControlFlow.PhoneCallControlFlowError);
  }
  return result;
}

uint64_t ObjC metadata update function for PhoneCallControlFlow()
{
  return type metadata accessor for PhoneCallControlFlow();
}

uint64_t type metadata completion function for PhoneCallControlFlow()
{
  uint64_t result = type metadata accessor for Input();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PhoneCallControlFlow.PhoneCallControlFlowError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x16378CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for PhoneCallControlFlow.PhoneCallControlFlowError()
{
  return &type metadata for PhoneCallControlFlow.PhoneCallControlFlowError;
}

uint64_t OUTLINED_FUNCTION_4_46()
{
  return swift_slowDealloc();
}

uint64_t OUTLINED_FUNCTION_7_41()
{
  return CATWrapperSimple.__allocating_init(options:globals:)();
}

uint64_t static Transformer<>.transformer.getter()
{
  type metadata accessor for UsoTask();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallControlNLIntent?);

  return Transformer.init(transform:)();
}

{
  uint64_t vars8;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_PhoneCall?);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SiriPhoneContact]);

  return Transformer.init(transform:)();
}

{
  return static Transformer<>.transformer.getter();
}

uint64_t *Transformer<>.logPrefix.unsafeMutableAddressor()
{
  if (one-time initialization token for logPrefix != -1) {
    swift_once();
  }
  return &static Transformer<>.logPrefix;
}

uint64_t static Transformer<>.logPrefix.getter()
{
  if (one-time initialization token for logPrefix != -1) {
    swift_once();
  }
  uint64_t v0 = static Transformer<>.logPrefix;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t specialized static PhoneCallNLContextProvider.buildVoiceMailListFollowUpOfferContext()()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.siriPhone);
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    int v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v3 = 0;
    _os_log_impl(&dword_0, v1, v2, "#PhoneCallNLContextProvider buildVoiceMailListFollowUpOfferContext", v3, 2u);
    swift_slowDealloc();
  }

  specialized static PhoneCallNLContextProvider.buildSingleVoiceMailFollowUpOfferContext()();
  uint64_t v5 = (void (*)(uint64_t *, void))NLContextUpdate.weightedPromptResponseOptions.modify();
  if (*v4)
  {
    uint64_t v6 = v4;
    String.uppercased()();
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    swift_bridgeObjectRelease();
    unint64_t v16 = PhoneCallNLConstants.canonicalName.getter(14);
    uint64_t v17 = v7;
    v8._uint64_t countAndFlagsBits = 0x2E65756C61562ELL;
    v8._object = (void *)0xE700000000000000;
    String.append(_:)(v8);
    Swift::String v9 = String.uppercased()();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    uint64_t v10 = *(void *)(*v6 + 16);
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    uint64_t v11 = *v6;
    *(void *)(v11 + 16) = v10 + 1;
    uint64_t v12 = v11 + 16 * v10;
    *(void *)(v12 + 32) = v16;
    *(void *)(v12 + 40) = v17;
  }
  v5(v18, 0);
  id v13 = [objc_allocWithZone((Class)SAAceConfirmationContext) init];
  [v13 setReason:SAAceConfirmationReasonCONTINUE_READINGValue];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_46A030;
  *(void *)(v14 + 32) = v13;
  v18[0] = v14;
  specialized Array._endMutation()();
  return NLContextUpdate.conversationStateAttachments.setter();
}

uint64_t specialized static PhoneCallNLContextProvider.makeSDAForOfferReadingVoicemail()()
{
  uint64_t v62 = type metadata accessor for PhoneError();
  uint64_t v0 = __chkstk_darwin(v62);
  os_log_type_t v61 = (char *)&v53 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v0);
  uint64_t v60 = (char *)&v53 - v2;
  uint64_t v58 = type metadata accessor for Logger();
  uint64_t v59 = *(char **)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v56 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  uint64_t v63 = *(void *)(v66 - 8);
  uint64_t v4 = __chkstk_darwin(v66);
  uint64_t v53 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v55 = (char *)&v53 - v6;
  uint64_t v7 = type metadata accessor for Siri_Nlu_External_SystemOffered();
  uint64_t v64 = *(void *)(v7 - 8);
  uint64_t v65 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v54 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v53 - v10;
  uint64_t v12 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v68 = *(void *)(v12 - 8);
  uint64_t v69 = v12;
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v53 - v16;
  uint64_t v18 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  __chkstk_darwin(v18 - 8);
  uint64_t v19 = type metadata accessor for Siri_Nlu_External_UserWantedToProceed();
  uint64_t v67 = *(void *)(v19 - 8);
  uint64_t v20 = __chkstk_darwin(v19);
  os_log_type_t v22 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v53 - v23;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoBuilderOptions?);
  __chkstk_darwin(v25 - 8);
  uint64_t v27 = (char *)&v53 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UsoTaskBuilder_summarise_common_PhoneCall();
  swift_allocObject();
  uint64_t v28 = UsoTaskBuilder_summarise_common_PhoneCall.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_46A030;
  *(void *)(v29 + 32) = v28;
  v71[0] = v29;
  specialized Array._endMutation()();
  uint64_t v30 = type metadata accessor for UsoBuilderOptions();
  __swift_storeEnumTagSinglePayload((uint64_t)v27, 1, 1, v30);
  uint64_t v57 = v28;
  swift_retain();
  uint64_t v31 = static UsoGraphBuilder.buildGraphWithOptions(taskBuilders:options:)();
  swift_bridgeObjectRelease();
  outlined destroy of UsoBuilderOptions?((uint64_t)v27, &demangling cache variable for type metadata for UsoBuilderOptions?);
  Siri_Nlu_External_UserWantedToProceed.init()();
  static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)();
  uint64_t v56 = (char *)v31;
  Siri_Nlu_External_UserWantedToProceed.reference.setter();
  Siri_Nlu_External_UserDialogAct.init()();
  unint64_t v32 = *(void (**)(char *, char *, uint64_t))(v67 + 16);
  uint64_t v59 = v24;
  uint64_t v60 = (char *)v19;
  v32(v22, v24, v19);
  Siri_Nlu_External_UserDialogAct.wantedToProceed.setter();
  Siri_Nlu_External_SystemOffered.init()();
  uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v68 + 16);
  os_log_type_t v61 = v17;
  v33(v15, v17, v69);
  Siri_Nlu_External_SystemOffered.offeredAct.setter();
  char v34 = v55;
  Siri_Nlu_External_SystemDialogAct.init()();
  uint64_t v36 = v64;
  uint64_t v35 = v65;
  os_log_type_t v37 = *(void (**)(char *, char *, uint64_t))(v64 + 16);
  uint64_t v62 = (uint64_t)v11;
  v37(v54, v11, v65);
  Siri_Nlu_External_SystemDialogAct.offered.setter();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v58, (uint64_t)static Logger.siriPhone);
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.debug.getter();
  BOOL v40 = os_log_type_enabled(v38, v39);
  uint64_t v41 = v66;
  uint64_t v42 = v63;
  if (v40)
  {
    uint64_t v43 = (uint8_t *)swift_slowAlloc();
    v71[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v43 = 136315138;
    swift_beginAccess();
    uint64_t v44 = (uint64_t)v53;
    (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v53, v34, v41);
    uint64_t v45 = specialized String.init(describing:)(v44);
    uint64_t v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, v71);
    uint64_t v36 = v64;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v41 = v66;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v38, v39, "#PhoneCallNLContextProvider Returning SystemOffered for offer continue to read or repeat: %s", v43, 0xCu);
    swift_arrayDestroy();
    uint64_t v35 = v65;
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v48 = v68;
  uint64_t v47 = v69;
  uint64_t v49 = v62;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  unint64_t v50 = (*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
  uint64_t v51 = swift_allocObject();
  *(_OWORD *)(v51 + 16) = xmmword_467710;
  swift_beginAccess();
  (*(void (**)(unint64_t, char *, uint64_t))(v42 + 16))(v51 + v50, v34, v41);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v49, v35);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v61, v47);
  (*(void (**)(char *, char *))(v67 + 8))(v59, v60);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v34, v41);
  return v51;
}

uint64_t specialized static PhoneCallNLContextProvider.buildSingleVoiceMailFollowUpOfferContext()()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.siriPhone);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_0, v1, v2, "#PhoneCallNLContextProvider buildSingleVoiceMailFollowUpOfferContext", v3, 2u);
    swift_slowDealloc();
  }

  NLContextUpdate.init()();
  PhoneCallNLConstants.canonicalName.getter(1);
  NLContextUpdate.weightedPromptTargetDomain.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_46A250;
  String.uppercased()();
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  unint64_t v15 = PhoneCallNLConstants.canonicalName.getter(14);
  uint64_t v18 = v5;
  v6._uint64_t countAndFlagsBits = 0x2E65756C61562ELL;
  v6._object = (void *)0xE700000000000000;
  String.append(_:)(v6);
  Swift::String v7 = String.uppercased()();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v4 + 32) = v15;
  *(void *)(v4 + 40) = v18;
  String.uppercased()();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  unint64_t v16 = PhoneCallNLConstants.canonicalName.getter(15);
  uint64_t v19 = v8;
  v9._uint64_t countAndFlagsBits = 0x2E65756C61562ELL;
  v9._object = (void *)0xE700000000000000;
  String.append(_:)(v9);
  Swift::String v10 = String.uppercased()();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v4 + 48) = v16;
  *(void *)(v4 + 56) = v19;
  String.uppercased()();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  unint64_t v17 = PhoneCallNLConstants.canonicalName.getter(6);
  uint64_t v20 = v11;
  v12._uint64_t countAndFlagsBits = 0x2E65756C61562ELL;
  v12._object = (void *)0xE700000000000000;
  String.append(_:)(v12);
  Swift::String v13 = String.uppercased()();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v4 + 64) = v17;
  *(void *)(v4 + 72) = v20;
  NLContextUpdate.weightedPromptResponseOptions.setter();
  return NLContextUpdate.weightedPromptStrict.setter();
}

uint64_t PromptForValueAfterReadingVoicemailFlowStrategy.__allocating_init(app:intent:intentResponse:phoneSearchCallHistoryIntent:isSingleVoicemailRequest:sharedGlobals:windowItems:windowParam:totalItemCount:playVoicemailCommands:isLeadingSavedVoiceMailPostPrompt:voiceMailPositionString:searchCallHistorySharedGlobals:isRepeatRequest:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, long long *a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, char a13, const void *a14, char a15)
{
  uint64_t v17 = swift_allocObject();
  PromptForValueAfterReadingVoicemailFlowStrategy.init(app:intent:intentResponse:phoneSearchCallHistoryIntent:isSingleVoicemailRequest:sharedGlobals:windowItems:windowParam:totalItemCount:playVoicemailCommands:isLeadingSavedVoiceMailPostPrompt:voiceMailPositionString:searchCallHistorySharedGlobals:isRepeatRequest:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10 & 1, a11, a12, a13, a14, a15);
  return v17;
}

uint64_t PromptForValueAfterReadingVoicemailFlowStrategy.init(app:intent:intentResponse:phoneSearchCallHistoryIntent:isSingleVoicemailRequest:sharedGlobals:windowItems:windowParam:totalItemCount:playVoicemailCommands:isLeadingSavedVoiceMailPostPrompt:voiceMailPositionString:searchCallHistorySharedGlobals:isRepeatRequest:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, long long *a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, char a13, const void *a14, char a15)
{
  os_log_type_t v22 = (uint64_t *)(v15
                  + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin47PromptForValueAfterReadingVoicemailFlowStrategy_logPrefix);
  *os_log_type_t v22 = type metadata accessor for PromptForValueAfterReadingVoicemailFlowStrategy();
  v22[1] = (uint64_t)&outlined read-only object #0 of PromptForValueAfterReadingVoicemailFlowStrategy.init(app:intent:intentResponse:phoneSearchCallHistoryIntent:isSingleVoicemailRequest:sharedGlobals:windowItems:windowParam:totalItemCount:playVoicemailCommands:isLeadingSavedVoiceMailPostPrompt:voiceMailPositionString:searchCallHistorySharedGlobals:isRepeatRequest:);
  v22[2] = 0;
  v22[3] = 0;
  *(void *)(v15 + 24) = a2;
  *(void *)(v15 + 32) = a3;
  *(void *)(v15 + 96) = a1;
  *(void *)(v15 + 104) = a4;
  *(unsigned char *)(v15 + 48) = a5;
  outlined init with copy of SignalProviding((uint64_t)a6, v15 + 56);
  uint64_t v23 = v15 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin47PromptForValueAfterReadingVoicemailFlowStrategy_windowParam;
  type metadata accessor for WindowedPaginationParameters();
  OUTLINED_FUNCTION_15();
  (*(void (**)(uint64_t, uint64_t))(v24 + 32))(v23, a8);
  *(void *)(v15 + 16) = a7;
  uint64_t v25 = v15
      + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin47PromptForValueAfterReadingVoicemailFlowStrategy_totalItemCount;
  *(void *)uint64_t v25 = a9;
  *(unsigned char *)(v25 + 8) = a10 & 1;
  type metadata accessor for YesNoConfirmationParser();
  uint64_t v26 = swift_allocObject();
  *(unsigned char *)(v26 + 16) = 5;
  outlined init with take of AppSelectionSignalComponent(a6, v26 + 24);
  *(void *)(v15 + 40) = v26;
  *(void *)(v15 + 312) = a11;
  *(unsigned char *)(v15 + 320) = a12;
  *(unsigned char *)(v15 + 321) = a13;
  memcpy((void *)(v15 + 112), a14, 0xC8uLL);
  *(unsigned char *)(v15
           + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin47PromptForValueAfterReadingVoicemailFlowStrategy_isRepeatRequest) = a15;
  return v15;
}

uint64_t type metadata accessor for PromptForValueAfterReadingVoicemailFlowStrategy()
{
  uint64_t result = type metadata singleton initialization cache for PromptForValueAfterReadingVoicemailFlowStrategy;
  if (!type metadata singleton initialization cache for PromptForValueAfterReadingVoicemailFlowStrategy) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t PromptForValueAfterReadingVoicemailFlowStrategy.actionForInput(_:)()
{
  uint64_t v2 = v0;
  type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_0();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_0_4();
  Input.parse.getter();
  unsigned int v4 = PromptForValueAfterReadingVoicemailFlowStrategy.parsePromptResponse(from:)(v1);
  OUTLINED_FUNCTION_14_4();
  v5();
  if (v4 > 3)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.siriPhone);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_0, v15, v16, "PromptForValueAfterReadingVoicemailFlowStrategy ignore the request", v17, 2u);
      OUTLINED_FUNCTION_6();
    }

    return static ActionForInput.ignore()();
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.siriPhone);
    swift_retain_n();
    Swift::String v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      Swift::String v9 = (uint8_t *)OUTLINED_FUNCTION_47();
      uint64_t v19 = OUTLINED_FUNCTION_14_0();
      *(_DWORD *)Swift::String v9 = 136315138;
      uint64_t v11 = *(void *)(v2
                      + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin47PromptForValueAfterReadingVoicemailFlowStrategy_logPrefix);
      uint64_t v10 = *(void *)(v2
                      + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin47PromptForValueAfterReadingVoicemailFlowStrategy_logPrefix
                      + 8);
      uint64_t v13 = *(void *)(v2
                      + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin47PromptForValueAfterReadingVoicemailFlowStrategy_logPrefix
                      + 16);
      uint64_t v12 = *(void *)(v2
                      + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin47PromptForValueAfterReadingVoicemailFlowStrategy_logPrefix
                      + 24);
      uint64_t v20 = v19;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v11, v10, v13, v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v7, v8, "%s handle the request", v9, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {

      swift_release_n();
    }
    return static ActionForInput.handle()();
  }
}

uint64_t PromptForValueAfterReadingVoicemailFlowStrategy.parseValueResponse(input:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[4] = v2;
  v1[5] = v0;
  uint64_t v3 = type metadata accessor for Parse();
  v1[6] = v3;
  OUTLINED_FUNCTION_19_0(v3);
  v1[7] = v4;
  v1[8] = OUTLINED_FUNCTION_35();
  uint64_t v5 = type metadata accessor for Input();
  v1[9] = v5;
  OUTLINED_FUNCTION_19_0(v5);
  v1[10] = v6;
  v1[11] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t PromptForValueAfterReadingVoicemailFlowStrategy.parseValueResponse(input:)(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, os_log_t log, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30)
{
  OUTLINED_FUNCTION_81_2();
  a29 = v31;
  a30 = v32;
  a28 = v30;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v33 = v30[4];
  uint64_t v35 = v30[10];
  uint64_t v34 = v30[11];
  uint64_t v36 = v30[9];
  uint64_t v37 = type metadata accessor for Logger();
  __swift_project_value_buffer(v37, (uint64_t)static Logger.siriPhone);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v34, v33, v36);
  swift_retain_n();
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.debug.getter();
  BOOL v40 = OUTLINED_FUNCTION_18(v39);
  uint64_t v41 = v30[11];
  uint64_t v42 = v30[5];
  if (v40)
  {
    a10 = v30 + 2;
    a11 = v30 + 3;
    a14 = v30[9];
    uint64_t v43 = swift_slowAlloc();
    a16 = swift_slowAlloc();
    a17 = a16;
    *(_DWORD *)uint64_t v43 = 136315394;
    a9 = v43 + 4;
    a12 = v41;
    uint64_t v45 = *(void *)(v42
                    + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin47PromptForValueAfterReadingVoicemailFlowStrategy_logPrefix);
    uint64_t v44 = *(void *)(v42
                    + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin47PromptForValueAfterReadingVoicemailFlowStrategy_logPrefix
                    + 8);
    HIDWORD(a15) = v34;
    uint64_t v47 = *(void *)(v42
                    + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin47PromptForValueAfterReadingVoicemailFlowStrategy_logPrefix
                    + 16);
    uint64_t v46 = *(void *)(v42
                    + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin47PromptForValueAfterReadingVoicemailFlowStrategy_logPrefix
                    + 24);
    a18 = 0;
    a19 = 0xE000000000000000;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    log = v38;
    DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v45, v44, v47, v46);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v30[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a18, a19, &a17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_14_3();
    *(_WORD *)(v43 + 12) = 2080;
    _s11SiriKitFlow5InputVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, (void (*)(uint64_t))&type metadata accessor for Input);
    uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter();
    v30[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, &a17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_3_23();
    v50();
    _os_log_impl(&dword_0, v38, BYTE4(a15), "%s parseValueResponse: %s", (uint8_t *)v43, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
    OUTLINED_FUNCTION_14_3();
    OUTLINED_FUNCTION_54_3();
    OUTLINED_FUNCTION_3_23();
    v51();
  }

  uint64_t v52 = v30[8];
  Input.parse.getter();
  PromptForValueAfterReadingVoicemailFlowStrategy.parsePromptResponse(from:)(v52);
  uint64_t v53 = OUTLINED_FUNCTION_76_1();
  v54(v53);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_28_3();
  return v57(v55, v56, v57, v58, v59, v60, v61, v62, a9, a10, a11, a12, log, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22);
}

uint64_t PromptForValueAfterReadingVoicemailFlowStrategy.makeRepromptOnEmptyParse()(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return OUTLINED_FUNCTION_21_1((uint64_t)PromptForValueAfterReadingVoicemailFlowStrategy.makeRepromptOnEmptyParse());
}

uint64_t PromptForValueAfterReadingVoicemailFlowStrategy.makeRepromptOnEmptyParse()()
{
  OUTLINED_FUNCTION_1_0();
  type metadata accessor for EmptyOutput();
  static EmptyOutput.instance.getter();
  OUTLINED_FUNCTION_6_0();
  return v0();
}

uint64_t PromptForValueAfterReadingVoicemailFlowStrategy.parsePromptResponse(from:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_4();
  uint64_t v10 = v9 - v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v9 - v8, a1, v4);
  int v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 88))(v10, v4);
  if (v11 == enum case for Parse.NLv3IntentOnly(_:))
  {
    OUTLINED_FUNCTION_14_4();
    v12();
  }
  else
  {
    int v13 = v11;
    if (v11 == enum case for Parse.NLv4IntentOnly(_:))
    {
      (*(void (**)(uint64_t, uint64_t))(v6 + 96))(v10, v4);
      swift_unknownObjectRelease();
    }
    else
    {
      int v14 = enum case for Parse.uso(_:);
      OUTLINED_FUNCTION_14_4();
      v15();
      if (v13 != v14)
      {
LABEL_10:
        if (one-time initialization token for siriPhone != -1) {
          swift_once();
        }
        uint64_t v20 = type metadata accessor for Logger();
        OUTLINED_FUNCTION_73_2(v20, (uint64_t)static Logger.siriPhone);
        uint64_t v21 = (void *)Logger.logObject.getter();
        os_log_type_t v22 = static os_log_type_t.error.getter();
        if (OUTLINED_FUNCTION_4_27(v22))
        {
          uint64_t v23 = (_DWORD *)OUTLINED_FUNCTION_47();
          uint64_t v24 = OUTLINED_FUNCTION_14_0();
          *uint64_t v23 = 136315138;
          *(void *)&long long v49 = v24;
          uint64_t v25 = (char *)v2
              + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin47PromptForValueAfterReadingVoicemailFlowStrategy_logPrefix;
          uint64_t v26 = *(void *)((char *)v2
                          + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin47PromptForValueAfterReadingVoicemailFlowStrategy_logPrefix);
          uint64_t v27 = *(void *)((char *)v2
                          + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin47PromptForValueAfterReadingVoicemailFlowStrategy_logPrefix
                          + 8);
          uint64_t v29 = *(void *)((char *)v2
                          + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin47PromptForValueAfterReadingVoicemailFlowStrategy_logPrefix
                          + 16);
          uint64_t v28 = *((void *)v25 + 3);
          uint64_t v51 = 0;
          unint64_t v52 = 0xE000000000000000;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v26, v27, v29, v28);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, (uint64_t *)&v49);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_19_10(&dword_0, v30, v31, "%s parsePromptResponse gets an error, return .unknown");
          swift_arrayDestroy();
          OUTLINED_FUNCTION_6();
          OUTLINED_FUNCTION_6();
        }
        else
        {

          OUTLINED_FUNCTION_39_10();
        }
        return 4;
      }
    }
  }
  uint64_t v16 = v2[10];
  uint64_t v17 = v2[11];
  __swift_project_boxed_opaque_existential_1(v2 + 7, v16);
  (*(void (**)(uint64_t, uint64_t))(v17 + 72))(v16, v17);
  OUTLINED_FUNCTION_23();
  (*(void (**)(long long *__return_ptr, uint64_t))(v18 + 192))(&v49, a1);
  swift_release();
  if (!v50)
  {
    outlined destroy of UsoBuilderOptions?((uint64_t)&v49, &demangling cache variable for type metadata for PhoneCallNLIntent?);
    goto LABEL_10;
  }
  outlined init with take of AppSelectionSignalComponent(&v49, (uint64_t)&v51);
  OUTLINED_FUNCTION_25_17();
  if (PhoneCallNLIntent.isNextAfterPlayingVoiceMail()())
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v51);
    return 0;
  }
  OUTLINED_FUNCTION_25_17();
  if (PhoneCallNLIntent.isRepeatAfterPlayingVoiceMail()())
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v51);
    return 3;
  }
  OUTLINED_FUNCTION_25_17();
  if (PhoneCallNLIntent.isVoiceMailCallOrCallBack()())
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v51);
    return 2;
  }
  uint64_t v32 = v53;
  uint64_t v33 = v54;
  __swift_project_boxed_opaque_existential_1(&v51, v53);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v33 + 64))(v32, v33) - 1) > 1u)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_73_2(v41, (uint64_t)static Logger.siriPhone);
    uint64_t v42 = (void *)Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_4_27(v43))
    {
      OUTLINED_FUNCTION_47();
      uint64_t v44 = OUTLINED_FUNCTION_14_0();
      OUTLINED_FUNCTION_63_3(v44, 4.8149e-34);
      OUTLINED_FUNCTION_61_5();
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_84_2();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, *((unint64_t *)&v49 + 1), &v48);
      OUTLINED_FUNCTION_62_6(v45);
      swift_release_n();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_19_10(&dword_0, v46, v47, "%s user followed a unknown follow up");
      OUTLINED_FUNCTION_27_7();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {

      OUTLINED_FUNCTION_39_10();
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v51);
    return 4;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v34 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_73_2(v34, (uint64_t)static Logger.siriPhone);
  uint64_t v35 = (void *)Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_4_27(v36))
  {
    OUTLINED_FUNCTION_47();
    uint64_t v37 = OUTLINED_FUNCTION_14_0();
    OUTLINED_FUNCTION_63_3(v37, 4.8149e-34);
    OUTLINED_FUNCTION_61_5();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_84_2();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, *((unint64_t *)&v49 + 1), &v48);
    OUTLINED_FUNCTION_62_6(v38);
    swift_release_n();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_19_10(&dword_0, v39, v40, "%s user followed with no/cancel");
    OUTLINED_FUNCTION_27_7();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {

    OUTLINED_FUNCTION_39_10();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v51);
  return 1;
}

uint64_t PromptForValueAfterReadingVoicemailFlowStrategy.makePromptForValue()(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return OUTLINED_FUNCTION_21_1((uint64_t)PromptForValueAfterReadingVoicemailFlowStrategy.makePromptForValue());
}

#error "165C68: call analysis failed (funcsize=130)"

uint64_t PromptForValueAfterReadingVoicemailFlowStrategy.makePromptForValue()()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v3();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v3();
}

uint64_t PromptForValueAfterReadingVoicemailFlowStrategy.generateMultipleItemsOutput()()
{
  OUTLINED_FUNCTION_1_0();
  v1[132] = v0;
  v1[131] = v2;
  uint64_t v3 = type metadata accessor for DialogPhase();
  OUTLINED_FUNCTION_11_0(v3);
  v1[133] = OUTLINED_FUNCTION_35();
  uint64_t v4 = type metadata accessor for OutputGenerationManifest();
  v1[134] = v4;
  OUTLINED_FUNCTION_19_0(v4);
  v1[135] = v5;
  v1[136] = swift_task_alloc();
  v1[137] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for SingleResultVoicemailModel();
  OUTLINED_FUNCTION_11_0(v6);
  v1[138] = OUTLINED_FUNCTION_35();
  uint64_t v7 = type metadata accessor for SpeakableString();
  v1[139] = v7;
  OUTLINED_FUNCTION_19_0(v7);
  v1[140] = v8;
  v1[141] = *(void *)(v9 + 64);
  v1[142] = swift_task_alloc();
  v1[143] = swift_task_alloc();
  v1[144] = swift_task_alloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v10, v11, v12);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  BOOL v16;
  uint64_t v17;
  _DWORD *v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  BOOL v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  double *v47;
  void *v48;
  uint64_t v49;
  char v51;
  void *v52;
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, void);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;

  uint64_t v64 = v0;
  uint64_t v1 = *(void *)(*(void *)(v0 + 1056) + 16);
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v1 & 0xC000000000000001) == 0, v1);
  if ((v1 & 0xC000000000000001) != 0)
  {
    uint64_t v2 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    uint64_t v2 = *(void *)(v1 + 32);
    swift_retain();
  }
  *(void *)(v0 + 1160) = v2;
  uint64_t v3 = *(void *)(v0 + 1056);
  uint64_t v56 = *(unsigned char *)(v2 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin15PhoneCallRecord_unseen);
  *(unsigned char *)(v0 + 1392) = v56;
  uint64_t v4 = v3 + 112;
  outlined init with copy of SignalProviding(v3 + 152, v0 + 856);
  outlined init with copy of SignalProviding(v3 + 192, v0 + 696);
  uint64_t v55 = *(void *)(v3 + 280);
  uint64_t v5 = *(void **)(v0 + 1056);
  SpeakableString.init(print:speak:)();
  uint64_t v6 = v5[10];
  uint64_t v7 = v5[11];
  __swift_project_boxed_opaque_existential_1(v5 + 7, v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
  static UserFacingCallingAppUtils.getAppBundleId(preferredCallProvider:deviceState:)(1, (void *)(v0 + 776));
  __swift_destroy_boxed_opaque_existential_1(v0 + 776);
  String.toSpeakableString.getter();
  swift_bridgeObjectRelease();
  uint64_t v8 = INSearchCallHistoryIntentResponse.savedRecordsCount.getter();
  *(void *)(v0 + 1168) = v8;
  uint64_t v9 = INSearchCallHistoryIntentResponse.newRecordsCount.getter();
  *(void *)(v0 + 1176) = v9;
  uint64_t v10 = v5[10];
  uint64_t v11 = v5[11];
  __swift_project_boxed_opaque_existential_1(v5 + 7, v10);
  (*(void (**)(uint64_t, uint64_t))(v11 + 56))(v10, v11);
  OUTLINED_FUNCTION_23();
  LOBYTE(v10) = (*(uint64_t (**)(void))(v12 + 248))();
  swift_release();
  if (v10)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    int v13 = type metadata accessor for Logger();
    *(void *)(v0 + 1184) = __swift_project_value_buffer(v13, (uint64_t)static Logger.siriPhone);
    OUTLINED_FUNCTION_44_4();
    uint64_t v14 = Logger.logObject.getter();
    uint64_t v15 = static os_log_type_t.debug.getter();
    uint64_t v16 = os_log_type_enabled(v14, v15);
    uint64_t v17 = *(void *)(v0 + 1056);
    uint64_t v57 = v2;
    if (v16)
    {
      uint64_t v18 = (_DWORD *)OUTLINED_FUNCTION_5_22();
      uint64_t v53 = OUTLINED_FUNCTION_14_0();
      *uint64_t v18 = 136315138;
      uint64_t v61 = v53;
      uint64_t v62 = 0;
      uint64_t v19 = v8;
      uint64_t v54 = v9;
      uint64_t v20 = *(void *)(v17
                      + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin47PromptForValueAfterReadingVoicemailFlowStrategy_logPrefix);
      uint64_t v21 = *(void *)(v17
                      + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin47PromptForValueAfterReadingVoicemailFlowStrategy_logPrefix
                      + 8);
      os_log_type_t v22 = *(void *)(v17
                      + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin47PromptForValueAfterReadingVoicemailFlowStrategy_logPrefix
                      + 16);
      uint64_t v23 = *(void *)(v17
                      + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin47PromptForValueAfterReadingVoicemailFlowStrategy_logPrefix
                      + 24);
      uint64_t v63 = 0xE000000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v24 = v20;
      uint64_t v8 = v19;
      DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v24, v21, v22, v23);
      swift_bridgeObjectRelease();
      uint64_t v9 = v54;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 1040) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_55_7(&dword_0, v14, v15, "%s rendering read of multiple voicemails with SMART UI on.");
      OUTLINED_FUNCTION_27_7();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v35 = (double)v9;
    os_log_type_t v36 = (double)v8;
    uint64_t v37 = *(void *)(v0 + 1152);
    uint64_t v38 = *(void *)(v0 + 1136);
    uint64_t v39 = *(void *)(v0 + 1128);
    uint64_t v40 = *(void *)(v0 + 1120);
    uint64_t v41 = *(void *)(v0 + 1112);
    uint64_t v42 = *(void *)(v0 + 1056);
    os_log_type_t v43 = *(void *)(v42 + 296);
    *(void *)(v0 + 1192) = v43;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v38, v37, v41);
    uint64_t v44 = (*(unsigned __int8 *)(v40 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
    uint64_t v45 = (v39 + v44 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v46 = (char *)swift_allocObject();
    *(void *)(v0 + 1200) = v46;
    *((void *)v46 + 2) = v43;
    *((void *)v46 + 3) = v57;
    *((void *)v46 + 4) = v42;
    (*(void (**)(char *, uint64_t, uint64_t))(v40 + 32))(&v46[v44], v38, v41);
    *(double *)&v46[v45] = v35;
    uint64_t v47 = (double *)&v46[(v45 + 15) & 0xFFFFFFFFFFFFFFF8];
    void *v47 = v36;
    *((unsigned char *)v47 + 8) = v56;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    type metadata accessor for CNContactStore(255, (unint64_t *)&lazy cache variable for type metadata for DialogExecutionResult);
    swift_asyncLet_begin();
    *(void *)(v0 + 1208) = OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin47PromptForValueAfterReadingVoicemailFlowStrategy_windowParam;
    WindowedPaginationParameters.isLastWindow.getter();
    swift_task_alloc();
    OUTLINED_FUNCTION_31_2();
    *(void *)(v0 + 1216) = v48;
    void *v48 = v49;
    v48[1] = PromptForValueAfterReadingVoicemailFlowStrategy.generateMultipleItemsOutput();
    return static SearchCallHistoryHelper.generateSingleResultVoicemailModel(item:searchCallHistorySharedGlobals:sharedGlobals:isLastPage:isReadMultipleVoicemails:)();
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.siriPhone);
    OUTLINED_FUNCTION_44_4();
    uint64_t v26 = Logger.logObject.getter();
    uint64_t v27 = static os_log_type_t.debug.getter();
    uint64_t v28 = os_log_type_enabled(v26, v27);
    uint64_t v29 = *(void *)(v0 + 1056);
    if (v28)
    {
      uint64_t v30 = (_DWORD *)OUTLINED_FUNCTION_5_22();
      uint64_t v58 = OUTLINED_FUNCTION_14_0();
      *uint64_t v30 = 136315138;
      uint64_t v60 = v4;
      uint64_t v61 = v58;
      uint64_t v31 = *(void *)(v29
                      + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin47PromptForValueAfterReadingVoicemailFlowStrategy_logPrefix);
      uint64_t v32 = *(void *)(v29
                      + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin47PromptForValueAfterReadingVoicemailFlowStrategy_logPrefix
                      + 8);
      uint64_t v33 = *(void *)(v29
                      + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin47PromptForValueAfterReadingVoicemailFlowStrategy_logPrefix
                      + 16);
      uint64_t v34 = *(void *)(v29
                      + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin47PromptForValueAfterReadingVoicemailFlowStrategy_logPrefix
                      + 24);
      uint64_t v62 = 0;
      uint64_t v63 = 0xE000000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v31, v32, v33, v34);
      swift_bridgeObjectRelease();
      uint64_t v4 = v60;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 984) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_14_3();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_55_7(&dword_0, v26, v27, "%s rendering read of multiple voicemails with pattern result");
      OUTLINED_FUNCTION_27_7();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {

      OUTLINED_FUNCTION_14_3();
    }
    uint64_t v51 = WindowedPaginationParameters.isLastWindow.getter();
    uint64_t v59 = (uint64_t (*)(uint64_t, void))(*(void *)(*(void *)v55 + 88)
                                                  + **(int **)(*(void *)v55 + 88));
    unint64_t v52 = (void *)swift_task_alloc();
    *(void *)(v0 + 1320) = v52;
    void *v52 = v0;
    v52[1] = PromptForValueAfterReadingVoicemailFlowStrategy.generateMultipleItemsOutput();
    return v59(v4, v51 & 1);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_2();
  _WORD *v5 = v4;
  *(void *)(v6 + 1224) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_16_1();
  *(void *)(v0 + 1232) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v1 = OUTLINED_FUNCTION_93();
  *(void *)(v0 + 1240) = v1;
  *(_OWORD *)(v1 + 16) = xmmword_46A030;
  uint64_t v2 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_get_throwing(v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;

  *(void *)(v1 + 1248) = v0;
  if (v0) {
    return OUTLINED_FUNCTION_21_1((uint64_t)PromptForValueAfterReadingVoicemailFlowStrategy.generateMultipleItemsOutput());
  }
  else {
    return OUTLINED_FUNCTION_21_1((uint64_t)PromptForValueAfterReadingVoicemailFlowStrategy.generateMultipleItemsOutput());
  }
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = v0[155];
  uint64_t v2 = (void *)v0[117];
  *(void *)(v1 + 32) = v2;
  uint64_t v7 = v1;
  specialized Array._endMutation()();
  v0[157] = v7;
  uint64_t v3 = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[158] = v4;
  *uint64_t v4 = v0;
  v4[1] = PromptForValueAfterReadingVoicemailFlowStrategy.generateMultipleItemsOutput();
  OUTLINED_FUNCTION_20_2();
  return PromptForValueAfterReadingVoicemailFlowStrategy.readVoicemail(responseGenerator:singleResultVoicemailModel:readVoicemailOutputResult:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_2();
  _WORD *v5 = v4;
  *(void *)(v6 + 1272) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  char v2;
  void *v3;
  uint64_t (*v5)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = *(void **)(v0 + 1192);
  uint64_t v2 = WindowedPaginationParameters.isLastWindow.getter();
  uint64_t v5 = (uint64_t (*)(void))(*(void *)(class metadata base offset for SearchCallHistoryCATsSimple
                                                  + *v1
                                                  + 592)
                                      + **(int **)(class metadata base offset for SearchCallHistoryCATsSimple + *v1 + 592));
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 1280) = v3;
  *uint64_t v3 = v0;
  v3[1] = PromptForValueAfterReadingVoicemailFlowStrategy.generateMultipleItemsOutput();
  return v5(v2 & 1);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 1288) = v4;
  *(void *)(v2 + 1296) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v3 = OUTLINED_FUNCTION_24_21();
  v4(v3);
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_16_1();
  uint64_t v1 = *(void *)(v0 + 1104);

  _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_0(v1, (void (*)(void))type metadata accessor for SingleResultVoicemailModel);
  uint64_t v2 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v2);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)PromptForValueAfterReadingVoicemailFlowStrategy.generateMultipleItemsOutput());
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v8 = v7;
  *(void *)(v5 + 1328) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 1336) = v3;
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t (*v13)(uint64_t, uint64_t, void, void, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t);
  long long v14;
  uint64_t v15;
  uint64_t v16;

  uint64_t v1 = *(void *)(v0 + 1144);
  uint64_t v2 = *(void *)(v0 + 1056);
  uint64_t v3 = (double)*(uint64_t *)(v0 + 1176);
  uint64_t v4 = (double)*(uint64_t *)(v0 + 1168);
  uint64_t v15 = *(void *)(v2 + 312);
  swift_bridgeObjectRetain();
  uint64_t v14 = *(_OWORD *)(v0 + 1152);
  specialized Array.append<A>(contentsOf:)();
  static DialogPhase.confirmation.getter();
  uint64_t v5 = swift_task_alloc();
  *(void *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = v15;
  OutputGenerationManifest.init(dialogPhase:_:)();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v6 = *(void *)(v0 + 880);
  uint64_t v7 = *(void *)(v0 + 888);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 856), v6);
  uint64_t v8 = *(unsigned __int8 *)(v2 + 320);
  uint64_t v9 = swift_task_alloc();
  *(void *)(v0 + 1344) = v9;
  *(double *)(v9 + 16) = v4;
  *(double *)(v9 + 24) = v3;
  *(_OWORD *)(v9 + 32) = v14;
  *(void *)(v9 + 48) = v1;
  int v13 = (uint64_t (*)(uint64_t, uint64_t, void, void, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(*(void *)(v7 + 40) + **(int **)(v7 + 40));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 1352) = v10;
  *uint64_t v10 = v0;
  v10[1] = PromptForValueAfterReadingVoicemailFlowStrategy.generateMultipleItemsOutput();
  uint64_t v11 = *(unsigned __int8 *)(v0 + 1392);
  return v13(v8, v11, 0, 0, partial apply for closure #2 in PromptForValueAfterReadingVoicemailFlowStrategy.generateMultipleItemsOutput(), v9, v6, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_2();
  _WORD *v5 = v4;
  *(void *)(v7 + 1360) = v6;
  *(void *)(v7 + 1368) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v8, v9, v10);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_16_1();
  uint64_t v1 = v0[90];
  uint64_t v2 = v0[91];
  __swift_project_boxed_opaque_existential_1(v0 + 87, v1);
  swift_task_alloc();
  OUTLINED_FUNCTION_31_2();
  v0[172] = v3;
  *uint64_t v3 = v4;
  v3[1] = PromptForValueAfterReadingVoicemailFlowStrategy.generateMultipleItemsOutput();
  uint64_t v5 = v0[170];
  uint64_t v6 = v0[136];
  uint64_t v7 = v0[131];
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)(v7, v5, v6, v1, v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_2();
  _WORD *v5 = v4;
  *(void *)(v6 + 1384) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;

  return _swift_asyncLet_finish(v0 + 16);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)PromptForValueAfterReadingVoicemailFlowStrategy.generateMultipleItemsOutput());
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_16_1();
  uint64_t v1 = *(void *)(v0 + 1104);
  *(void *)(*(void *)(v0 + 1240) + 16) = 0;
  swift_release();
  _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_0(v1, (void (*)(void))type metadata accessor for SingleResultVoicemailModel);
  uint64_t v2 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v2);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)PromptForValueAfterReadingVoicemailFlowStrategy.generateMultipleItemsOutput());
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  OUTLINED_FUNCTION_16_1();
  _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_0(*(void *)(v0 + 1104), (void (*)(void))type metadata accessor for SingleResultVoicemailModel);
  uint64_t v1 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v1);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)PromptForValueAfterReadingVoicemailFlowStrategy.generateMultipleItemsOutput());
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  OUTLINED_FUNCTION_16_1();
  _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_0(*(void *)(v0 + 1104), (void (*)(void))type metadata accessor for SingleResultVoicemailModel);
  uint64_t v1 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v1);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)PromptForValueAfterReadingVoicemailFlowStrategy.generateMultipleItemsOutput());
}

#error "166F2C: call analysis failed (funcsize=135)"

uint64_t PromptForValueAfterReadingVoicemailFlowStrategy.generateMultipleItemsOutput()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_19_13();
  OUTLINED_FUNCTION_48();
  uint64_t v13 = v12[144];
  uint64_t v14 = v12[140];
  uint64_t v15 = v12[139];
  swift_release();
  uint64_t v16 = *(void (**)(uint64_t))(v14 + 8);
  uint64_t v17 = OUTLINED_FUNCTION_54_3();
  v16(v17);
  ((void (*)(uint64_t, uint64_t))v16)(v13, v15);
  swift_release();
  uint64_t v27 = v12[133];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v12 + 87));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v12 + 107));
  OUTLINED_FUNCTION_52_7((uint64_t)&async function pointer to partial apply for implicit closure #2 in PromptForValueAfterReadingVoicemailFlowStrategy.generateMultipleItemsOutput());
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_4_3();
  return v19(v18, v19, v20, v21, v22, v23, v24, v25, v27, a10, a11, a12);
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void (*v17)(void);
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  OUTLINED_FUNCTION_19_13();
  OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_85_2();
  uint64_t v14 = *(void *)(v12 + 1120);
  uint64_t v15 = *(void *)(v12 + 1112);

  swift_release();
  OUTLINED_FUNCTION_14_4();
  v17();
  uint64_t v18 = *(void (**)(uint64_t))(v14 + 8);
  uint64_t v19 = OUTLINED_FUNCTION_54_3();
  v18(v19);
  ((void (*)(uint64_t, uint64_t))v18)(v13, v15);
  OUTLINED_FUNCTION_68();
  __swift_destroy_boxed_opaque_existential_1(v12 + 696);
  OUTLINED_FUNCTION_27_13(a9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_4_3();
  return v21(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10, a11, a12);
}

{
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t (*v19)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  OUTLINED_FUNCTION_19_13();
  OUTLINED_FUNCTION_48();
  uint64_t v13 = v12[144];
  uint64_t v14 = v12[143];
  uint64_t v15 = v12[140];
  uint64_t v16 = v12[139];
  swift_release();
  uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v17(v14, v16);
  v17(v13, v16);
  OUTLINED_FUNCTION_93_2();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v12 + 87));
  OUTLINED_FUNCTION_27_13((uint64_t)(v12 + 107));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_4_3();
  return v19(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10, a11, a12);
}

{
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(void);
  uint64_t v18;
  uint64_t (*v19)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  OUTLINED_FUNCTION_19_13();
  OUTLINED_FUNCTION_48();
  uint64_t v13 = v12[140];
  uint64_t v14 = v12[136];
  uint64_t v15 = v12[135];
  uint64_t v16 = v12[134];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  uint64_t v17 = *(void (**)(void))(v13 + 8);
  OUTLINED_FUNCTION_14_4();
  v17();
  OUTLINED_FUNCTION_14_4();
  v17();
  OUTLINED_FUNCTION_93_2();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v12 + 87));
  OUTLINED_FUNCTION_27_13((uint64_t)(v12 + 107));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_4_3();
  return v19(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10, a11, a12);
}

{
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void (*v18)(void);
  uint64_t v19;
  uint64_t (*v20)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  OUTLINED_FUNCTION_19_13();
  OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_85_2();
  uint64_t v13 = v12[140];
  uint64_t v14 = v12[136];
  uint64_t v15 = v12[135];
  uint64_t v16 = v12[134];

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  uint64_t v18 = *(void (**)(void))(v13 + 8);
  OUTLINED_FUNCTION_13_19();
  v18();
  OUTLINED_FUNCTION_13_19();
  v18();
  OUTLINED_FUNCTION_68();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v12 + 87));
  OUTLINED_FUNCTION_27_13(a9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_4_3();
  return v20(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10, a11, a12);
}

uint64_t PromptForValueAfterReadingVoicemailFlowStrategy.generateMultipleItemsOutput()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_30_12();
  OUTLINED_FUNCTION_11_31();
  uint64_t v15 = *(void (**)(void))(v14 + 8);
  OUTLINED_FUNCTION_13_19();
  v15();
  OUTLINED_FUNCTION_13_19();
  v15();
  swift_release();
  OUTLINED_FUNCTION_6_37();
  OUTLINED_FUNCTION_52_7((uint64_t)&async function pointer to partial apply for implicit closure #2 in PromptForValueAfterReadingVoicemailFlowStrategy.generateMultipleItemsOutput());
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_22_15();
  OUTLINED_FUNCTION_28_1();
  return v17(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10, a11, a12, a13, a14);
}

{
  uint64_t v14;
  void (*v15)(void);
  uint64_t v16;
  uint64_t (*v17)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_30_12();
  OUTLINED_FUNCTION_11_31();
  uint64_t v15 = *(void (**)(void))(v14 + 8);
  OUTLINED_FUNCTION_13_19();
  v15();
  OUTLINED_FUNCTION_13_19();
  v15();
  swift_release();
  OUTLINED_FUNCTION_6_37();
  OUTLINED_FUNCTION_52_7((uint64_t)&async function pointer to partial apply for implicit closure #2 in PromptForValueAfterReadingVoicemailFlowStrategy.generateMultipleItemsOutput());
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_22_15();
  OUTLINED_FUNCTION_28_1();
  return v17(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10, a11, a12, a13, a14);
}

{
  uint64_t v14;
  void (*v15)(void);
  uint64_t v16;
  uint64_t (*v17)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_30_12();
  OUTLINED_FUNCTION_11_31();
  uint64_t v15 = *(void (**)(void))(v14 + 8);
  OUTLINED_FUNCTION_13_19();
  v15();
  OUTLINED_FUNCTION_13_19();
  v15();
  swift_release();
  OUTLINED_FUNCTION_6_37();
  OUTLINED_FUNCTION_52_7((uint64_t)&async function pointer to partial apply for implicit closure #2 in PromptForValueAfterReadingVoicemailFlowStrategy.generateMultipleItemsOutput());
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_22_15();
  OUTLINED_FUNCTION_28_1();
  return v17(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10, a11, a12, a13, a14);
}

{
  uint64_t v14;
  void (*v15)(void);
  uint64_t v16;
  uint64_t (*v17)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_30_12();
  OUTLINED_FUNCTION_11_31();
  uint64_t v15 = *(void (**)(void))(v14 + 8);
  OUTLINED_FUNCTION_13_19();
  v15();
  OUTLINED_FUNCTION_13_19();
  v15();
  swift_release();
  OUTLINED_FUNCTION_6_37();
  OUTLINED_FUNCTION_52_7((uint64_t)&async function pointer to partial apply for implicit closure #2 in PromptForValueAfterReadingVoicemailFlowStrategy.generateMultipleItemsOutput());
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_22_15();
  OUTLINED_FUNCTION_28_1();
  return v17(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10, a11, a12, a13, a14);
}

uint64_t implicit closure #2 in PromptForValueAfterReadingVoicemailFlowStrategy.generateMultipleItemsOutput()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, double a7, double a8)
{
  *(unsigned char *)(v8 + 104) = a6;
  *(double *)(v8 + 56) = a7;
  *(double *)(v8 + 64) = a8;
  *(void *)(v8 + 40) = a4;
  *(void *)(v8 + 48) = a5;
  *(void *)(v8 + 24) = a2;
  *(void *)(v8 + 32) = a3;
  *(void *)(v8 + 16) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(void *)(v8 + 72) = swift_task_alloc();
  return _swift_task_switch(implicit closure #2 in PromptForValueAfterReadingVoicemailFlowStrategy.generateMultipleItemsOutput(), 0, 0);
}

void implicit closure #2 in PromptForValueAfterReadingVoicemailFlowStrategy.generateMultipleItemsOutput()()
{
  OUTLINED_FUNCTION_48();
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_15();
  uint64_t v3 = OUTLINED_FUNCTION_54_3();
  v4(v3);
  __swift_storeEnumTagSinglePayload(v1, 0, 1, v2);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v5;
  void *v5 = v0;
  v5[1] = implicit closure #2 in PromptForValueAfterReadingVoicemailFlowStrategy.generateMultipleItemsOutput();
  OUTLINED_FUNCTION_20_7();
  OUTLINED_FUNCTION_4_3();
  __asm { BRAA            X9, X16 }
}

uint64_t implicit closure #2 in PromptForValueAfterReadingVoicemailFlowStrategy.generateMultipleItemsOutput()()
{
  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v1;
  *(void *)(v5 + 88) = v0;
  swift_task_dealloc();
  uint64_t v7 = *(void *)(v4 + 72);
  if (!v0) {
    *(void *)(v5 + 96) = v3;
  }
  outlined destroy of UsoBuilderOptions?(v7, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_20_2();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  **(void **)(v0 + 16) = *(void *)(v0 + 96);
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  return v1();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v0();
}

uint64_t closure #1 in PromptForValueAfterReadingVoicemailFlowStrategy.generateMultipleItemsOutput()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  OutputGenerationManifest.canUseServerTTS.setter();
  specialized static PhoneCallNLContextProvider.buildVoiceMailListFollowUpOfferContext()();
  specialized static PhoneCallNLContextProvider.makeSDAForOfferReadingVoicemail()();
  NLContextUpdate.nluSystemDialogActs.setter();
  uint64_t v3 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload((uint64_t)v2, 0, 1, v3);
  OutputGenerationManifest.nlContextUpdate.setter();
  swift_bridgeObjectRetain();
  OutputGenerationManifest.additionalCommands.setter();
  return OutputGenerationManifest.listenAfterSpeaking.setter();
}

uint64_t closure #2 in PromptForValueAfterReadingVoicemailFlowStrategy.generateMultipleItemsOutput()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  uint64_t v12 = (int *)type metadata accessor for SearchCallHistoryReadMultipleVoiceMailRecordsParameters(0);
  uint64_t v13 = a1 + v12[12];
  *(double *)uint64_t v13 = a5;
  *(unsigned char *)(v13 + 8) = 0;
  uint64_t v14 = a1 + v12[11];
  *(double *)uint64_t v14 = a6;
  *(unsigned char *)(v14 + 8) = 0;
  uint64_t v15 = a1 + v12[13];
  outlined destroy of UsoBuilderOptions?(v15, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v16 = type metadata accessor for SpeakableString();
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16);
  v17(v15, a2, v16);
  __swift_storeEnumTagSinglePayload(v15, 0, 1, v16);
  uint64_t v18 = v12[5];
  swift_retain();
  swift_release();
  *(void *)(a1 + v18) = a3;
  outlined destroy of UsoBuilderOptions?(a1, &demangling cache variable for type metadata for SpeakableString?);
  v17(a1, a4, v16);

  return __swift_storeEnumTagSinglePayload(a1, 0, 1, v16);
}

uint64_t PromptForValueAfterReadingVoicemailFlowStrategy.generateSingleItemOutput()()
{
  OUTLINED_FUNCTION_1_0();
  v1[9] = v2;
  v1[10] = v0;
  uint64_t v3 = type metadata accessor for DialogPhase();
  OUTLINED_FUNCTION_11_0(v3);
  v1[11] = OUTLINED_FUNCTION_35();
  uint64_t v4 = type metadata accessor for OutputGenerationManifest();
  v1[12] = v4;
  OUTLINED_FUNCTION_19_0(v4);
  v1[13] = v5;
  v1[14] = OUTLINED_FUNCTION_35();
  uint64_t v6 = type metadata accessor for SingleResultVoicemailModel();
  OUTLINED_FUNCTION_11_0(v6);
  v1[15] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t (*v7)(void);
  uint64_t v8;

  OUTLINED_FUNCTION_16_1();
  uint64_t v1 = *(void *)(v0[10] + 16);
  v0[16] = v1;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v1 & 0xC000000000000001) == 0, v1);
  if ((v1 & 0xC000000000000001) != 0) {
    uint64_t v2 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    uint64_t v2 = swift_retain();
  }
  v0[17] = v2;
  uint64_t v3 = v0[10];
  outlined init with copy of SignalProviding(v3 + 192, (uint64_t)(v0 + 2));
  uint64_t v4 = *(void **)(v3 + 296);
  v0[18] = v4;
  v0[19] = *(void *)(v3 + 280);
  uint64_t v7 = (uint64_t (*)(void))(*(void *)(class metadata base offset for SearchCallHistoryCATsSimple + *v4 + 352)
                         + **(int **)(class metadata base offset for SearchCallHistoryCATsSimple + *v4 + 352));
  uint64_t v5 = (void *)swift_task_alloc();
  v0[20] = v5;
  void *v5 = v0;
  v5[1] = PromptForValueAfterReadingVoicemailFlowStrategy.generateSingleItemOutput();
  return v7();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 168) = v4;
  *(void *)(v2 + 176) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 200) = v5;
  *(void *)(v3 + 208) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_release();
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v6, v7, v8);
}

{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_1_0();
  uint64_t v1 = v0[16];
  uint64_t v2 = v1 & 0xC000000000000001;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v1 & 0xC000000000000001) == 0, v1);
  if (v2)
  {
    uint64_t v3 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    uint64_t v3 = *(void *)(v0[16] + 32);
    swift_retain();
  }
  v0[27] = v3;
  swift_task_alloc();
  OUTLINED_FUNCTION_31_2();
  v0[28] = v4;
  *uint64_t v4 = v5;
  v4[1] = PromptForValueAfterReadingVoicemailFlowStrategy.generateSingleItemOutput();
  OUTLINED_FUNCTION_94_1();
  return static SearchCallHistoryHelper.generateSingleResultVoicemailModel(item:searchCallHistorySharedGlobals:sharedGlobals:isLastPage:isReadMultipleVoicemails:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  *(void *)(v3 + 232) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_release();
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = (void *)v0[25];
  uint64_t v2 = (void *)v0[21];
  v0[30] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v3 = OUTLINED_FUNCTION_93();
  *(_OWORD *)(v3 + 16) = xmmword_46A030;
  *(void *)(v3 + 32) = v1;
  uint64_t v8 = v3;
  specialized Array._endMutation()();
  uint64_t v4 = v2;
  uint64_t v5 = v1;
  swift_bridgeObjectRetain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((char *)&dword_10 + (v8 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                + (v8 & 0xFFFFFFFFFFFFFF8)) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  v0[31] = v8;
  swift_bridgeObjectRelease();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[32] = v6;
  *uint64_t v6 = v0;
  v6[1] = PromptForValueAfterReadingVoicemailFlowStrategy.generateSingleItemOutput();
  return PromptForValueAfterReadingVoicemailFlowStrategy.readVoicemail(responseGenerator:singleResultVoicemailModel:readVoicemailOutputResult:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_2();
  void *v5 = v4;
  *(void *)(v6 + 264) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v8 = v7;
  *(void *)(v5 + 280) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 288) = v3;
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v3 = OUTLINED_FUNCTION_24_21();
  v4(v3);
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = *(void **)(v0 + 200);
  uint64_t v2 = *(void **)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 120);

  swift_release();
  _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_0(v3, (void (*)(void))type metadata accessor for SingleResultVoicemailModel);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_20_2();
  return v5(v4, v5, v6, v7, v8, v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v8 = v7;
  *(void *)(v5 + 320) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 328) = v3;
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v3, v4, v5);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = (void *)v0[21];
  uint64_t v3 = v0[13];
  uint64_t v2 = v0[14];
  uint64_t v4 = v0[12];
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_20_2();
  return v6(v5, v6, v7, v8, v9, v10, v11, v12);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  swift_release();
  OUTLINED_FUNCTION_56_7();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_20_2();
  return v1(v0, v1, v2, v3, v4, v5, v6, v7);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = *(void **)(v0 + 168);
  swift_release_n();

  OUTLINED_FUNCTION_56_7();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_20_2();
  return v3(v2, v3, v4, v5, v6, v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = *(void **)(v0 + 200);
  uint64_t v2 = *(void **)(v0 + 168);
  swift_release();

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_20_2();
  return v4(v3, v4, v5, v6, v7, v8, v9, v10);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_72_3();
  swift_release();

  _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_0(v1, (void (*)(void))type metadata accessor for SingleResultVoicemailModel);
  __swift_destroy_boxed_opaque_existential_1(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_20_2();
  return v4(v3, v4, v5, v6, v7, v8, v9, v10);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_72_3();
  swift_release();

  _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_0(v1, (void (*)(void))type metadata accessor for SingleResultVoicemailModel);
  __swift_destroy_boxed_opaque_existential_1(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_20_2();
  return v4(v3, v4, v5, v6, v7, v8, v9, v10);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = *(void **)(v0 + 168);
  swift_release();

  OUTLINED_FUNCTION_56_7();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_20_2();
  return v3(v2, v3, v4, v5, v6, v7, v8, v9);
}

#error "168D70: call analysis failed (funcsize=224)"

#error "1695AC: call analysis failed (funcsize=136)"

uint64_t PromptForValueAfterReadingVoicemailFlowStrategy.generateSingleItemOutput()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_19_13();
  OUTLINED_FUNCTION_48();
  uint64_t v11 = (void *)v10[36];
  __swift_project_boxed_opaque_existential_1(v10 + 2, v10[5]);
  uint64_t v12 = OUTLINED_FUNCTION_93();
  *(_OWORD *)(v12 + 16) = xmmword_46A030;
  *(void *)(v12 + 32) = v11;
  uint64_t v25 = v12;
  specialized Array._endMutation()();
  v10[37] = v25;
  id v13 = v11;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_88_2();
  swift_bridgeObjectRelease();
  swift_task_alloc();
  OUTLINED_FUNCTION_31_2();
  v10[38] = v14;
  *uint64_t v14 = v15;
  v14[1] = PromptForValueAfterReadingVoicemailFlowStrategy.generateSingleItemOutput();
  OUTLINED_FUNCTION_51_6();
  OUTLINED_FUNCTION_4_3();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v16, v17, v18, v19, v20, v21, v22, v23, v25, a10);
}

{
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  uint64_t v11 = (void *)v10[21];
  uint64_t v25 = *(void *)(v10[10] + 312);
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  static DialogPhase.completion.getter();
  *(void *)(swift_task_alloc() + 16) = v25;
  OutputGenerationManifest.init(dialogPhase:_:)();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  __swift_project_boxed_opaque_existential_1(v10 + 2, v10[5]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v12 = OUTLINED_FUNCTION_93();
  *(_OWORD *)(v12 + 16) = xmmword_46A030;
  *(void *)(v12 + 32) = v11;
  uint64_t v26 = v12;
  specialized Array._endMutation()();
  v10[42] = v26;
  id v13 = v11;
  swift_task_alloc();
  OUTLINED_FUNCTION_31_2();
  v10[43] = v14;
  *uint64_t v14 = v15;
  v14[1] = PromptForValueAfterReadingVoicemailFlowStrategy.generateSingleItemOutput();
  OUTLINED_FUNCTION_94_1();
  OUTLINED_FUNCTION_51_6();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10);
}

uint64_t closure #1 in PromptForValueAfterReadingVoicemailFlowStrategy.generateSingleItemOutput()()
{
  return OutputGenerationManifest.listenAfterSpeaking.setter();
}

uint64_t PromptForValueAfterReadingVoicemailFlowStrategy.readVoicemail(responseGenerator:singleResultVoicemailModel:readVoicemailOutputResult:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[70] = v0;
  v1[69] = v2;
  v1[68] = v3;
  v1[67] = v4;
  uint64_t v5 = type metadata accessor for PhoneSnippetDataModels();
  v1[71] = v5;
  OUTLINED_FUNCTION_11_0(v5);
  v1[72] = OUTLINED_FUNCTION_35();
  uint64_t v6 = type metadata accessor for OutputGenerationManifest();
  v1[73] = v6;
  OUTLINED_FUNCTION_19_0(v6);
  v1[74] = v7;
  v1[75] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 624) = v4;
  *(void *)(v2 + 632) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v3, v4, v5);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = (void *)v0[70];
  uint64_t v2 = v1[10];
  uint64_t v3 = v1[11];
  __swift_project_boxed_opaque_existential_1(v1 + 7, v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 16))(v2, v3);
  __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[82] = v4;
  *uint64_t v4 = v0;
  v4[1] = PromptForValueAfterReadingVoicemailFlowStrategy.readVoicemail(responseGenerator:singleResultVoicemailModel:readVoicemailOutputResult:);
  OUTLINED_FUNCTION_20_7();
  OUTLINED_FUNCTION_20_2();
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_2();
  void *v5 = v4;
  *(void *)(v6 + 664) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v17;
  uint64_t v18[3];
  uint64_t v19;
  uint64_t v20;

  uint64_t v19 = v0;
  outlined init with take of AppSelectionSignalComponent((long long *)(v0 + 432), v0 + 232);
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v1 = OUTLINED_FUNCTION_77_1();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.siriPhone);
  OUTLINED_FUNCTION_44_4();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  uint64_t v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = *(void *)(v0 + 560);
  if (v4)
  {
    uint64_t v6 = (_DWORD *)OUTLINED_FUNCTION_5_22();
    uint64_t v17 = OUTLINED_FUNCTION_14_0();
    *uint64_t v6 = 136315138;
    v18[0] = v17;
    v18[1] = 0;
    uint64_t v7 = *(void *)(v5
                   + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin47PromptForValueAfterReadingVoicemailFlowStrategy_logPrefix);
    uint64_t v8 = *(void *)(v5
                   + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin47PromptForValueAfterReadingVoicemailFlowStrategy_logPrefix
                   + 8);
    uint64_t v10 = *(void *)(v5
                    + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin47PromptForValueAfterReadingVoicemailFlowStrategy_logPrefix
                    + 16);
    uint64_t v9 = *(void *)(v5
                   + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin47PromptForValueAfterReadingVoicemailFlowStrategy_logPrefix
                   + 24);
    long long v18[2] = 0xE000000000000000;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v7, v8, v10, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v0 + 496) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    OUTLINED_FUNCTION_55_7(&dword_0, v2, v3, "%s skip to display summary view for CarPlay");
    OUTLINED_FUNCTION_27_7();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v11 = OUTLINED_FUNCTION_26_17();
  v12(v11);
  id v13 = *(void *)(v0 + 88);
  uint64_t v14 = *(void *)(v0 + 104);
  OUTLINED_FUNCTION_87_1();
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v0 + 688) = v15;
  *uint64_t v15 = v0;
  v15[1] = PromptForValueAfterReadingVoicemailFlowStrategy.readVoicemail(responseGenerator:singleResultVoicemailModel:readVoicemailOutputResult:);
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 232, v13, v14);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 192;
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_4_2();
  void *v5 = v4;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1(v3);
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  void *v16;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20[3];
  uint64_t v21;
  uint64_t v22;

  uint64_t v21 = v0;
  outlined init with take of AppSelectionSignalComponent((long long *)(v0 + 152), v0 + 232);
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v1 = OUTLINED_FUNCTION_77_1();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.siriPhone);
  OUTLINED_FUNCTION_44_4();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  uint64_t v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = *(void *)(v0 + 576);
  uint64_t v6 = *(void *)(v0 + 560);
  if (v4)
  {
    uint64_t v7 = (_DWORD *)OUTLINED_FUNCTION_5_22();
    uint64_t v19 = OUTLINED_FUNCTION_14_0();
    *uint64_t v7 = 136315138;
    v20[0] = v19;
    v20[1] = 0;
    uint64_t v18 = v3;
    uint64_t v9 = *(void *)(v6
                   + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin47PromptForValueAfterReadingVoicemailFlowStrategy_logPrefix);
    uint64_t v8 = *(void *)(v6
                   + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin47PromptForValueAfterReadingVoicemailFlowStrategy_logPrefix
                   + 8);
    uint64_t v11 = *(void *)(v6
                    + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin47PromptForValueAfterReadingVoicemailFlowStrategy_logPrefix
                    + 16);
    uint64_t v10 = *(void *)(v6
                    + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin47PromptForValueAfterReadingVoicemailFlowStrategy_logPrefix
                    + 24);
    long long v20[2] = 0xE000000000000000;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v9, v8, v11, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v0 + 504) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_39_10();
    OUTLINED_FUNCTION_55_7(&dword_0, v2, v18, "%s start to display summary view");
    OUTLINED_FUNCTION_27_7();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {

    OUTLINED_FUNCTION_39_10();
  }
  _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_0(v5, (void (*)(void))type metadata accessor for PhoneSnippetDataModels);
  uint64_t v12 = OUTLINED_FUNCTION_26_17();
  v13(v12);
  uint64_t v14 = *(void *)(v0 + 88);
  uint64_t v15 = *(void *)(v0 + 104);
  OUTLINED_FUNCTION_87_1();
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v0 + 688) = v16;
  *uint64_t v16 = v0;
  v16[1] = PromptForValueAfterReadingVoicemailFlowStrategy.readVoicemail(responseGenerator:singleResultVoicemailModel:readVoicemailOutputResult:);
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 232, v14, v15);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_2();
  void *v5 = v4;
  *(void *)(v6 + 696) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_1_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  void *v5 = v4;
  uint64_t v6 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v7 = v6;
  *(void *)(v8 + 712) = v0;
  swift_task_dealloc();
  if (!v0) {

  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_82_2();
  uint64_t v1 = OUTLINED_FUNCTION_24_21();
  v2(v1);
  __swift_destroy_boxed_opaque_existential_1(v0);
  OUTLINED_FUNCTION_89_3();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  return v3();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_16_1();

  uint64_t v1 = OUTLINED_FUNCTION_96();
  v2(v1);
  OUTLINED_FUNCTION_90_1();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v3();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = *(void **)(v0 + 624);

  __swift_destroy_boxed_opaque_existential_1(v0 + 272);
  uint64_t v2 = OUTLINED_FUNCTION_76_1();
  v3(v2);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  OUTLINED_FUNCTION_90_1();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v4();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t (*v4)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();

  __swift_destroy_boxed_opaque_existential_1(v0 + 232);
  uint64_t v1 = OUTLINED_FUNCTION_20_7();
  v2(v1);
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  OUTLINED_FUNCTION_90_1();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_20_2();
  return v4(v3, v4, v5, v6, v7, v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_82_2();
  uint64_t v1 = OUTLINED_FUNCTION_24_21();
  v2(v1);
  __swift_destroy_boxed_opaque_existential_1(v0);
  OUTLINED_FUNCTION_90_1();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v3();
}

#error "16A868: call analysis failed (funcsize=343)"

uint64_t PromptForValueAfterReadingVoicemailFlowStrategy.readVoicemail(responseGenerator:singleResultVoicemailModel:readVoicemailOutputResult:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = (void *)v10[78];
  uint64_t v12 = (void *)v10[67];
  uint64_t v13 = v12[3];
  uint64_t v14 = v12[4];
  __swift_project_boxed_opaque_existential_1(v12, v13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v15 = OUTLINED_FUNCTION_93();
  *(_OWORD *)(v15 + 16) = xmmword_46A030;
  *(void *)(v15 + 32) = v11;
  uint64_t v25 = v15;
  specialized Array._endMutation()();
  v10[80] = v25;
  id v16 = v11;
  uint64_t v17 = (void *)swift_task_alloc();
  v10[81] = v17;
  void *v17 = v10;
  v17[1] = PromptForValueAfterReadingVoicemailFlowStrategy.readVoicemail(responseGenerator:singleResultVoicemailModel:readVoicemailOutputResult:);
  OUTLINED_FUNCTION_94_1();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v18, v19, v20, v13, v14, v21, v22, v23, a9, a10);
}

#error "16AEFC: call analysis failed (funcsize=175)"

#error "16B958: call analysis failed (funcsize=170)"

void specialized UpdateResponseCommand<>.submitUpdate(to:aceServiceInvoker:)(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v21 = a3;
  char v7 = a4 & 1;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v22 = v7;
  id v12 = [objc_allocWithZone((Class)SAUIUpdateVisualResponseSnippet) init];
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v12 setAceId:v13];

  (*(void (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v12 setViewId:v14];

  lazy protocol witness table accessor for type VoicemailUpdateAction and conformance VoicemailUpdateAction();
  uint64_t updated = dispatch thunk of UpdateResponseCommand.serializeData()();
  if (!v4)
  {
    uint64_t v17 = updated;
    unint64_t v18 = v16;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v17, v18);
    [v12 setStateData:isa];

    __swift_project_boxed_opaque_existential_1(v21, v21[3]);
    AceServiceInvokerAsync.submitAndForget(_:)();
  }
}

void specialized UpdateResponseCommand<>.submitUpdate(to:aceServiceInvoker:)(uint64_t a1, uint64_t a2, void *a3)
{
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_0();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_4();
  id v7 = [objc_allocWithZone((Class)SAUIUpdateVisualResponseSnippet) init];
  UUID.init()();
  UUID.uuidString.getter();
  OUTLINED_FUNCTION_14_4();
  v8();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v7 setAceId:v9];

  (*(void (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v7 setViewId:v10];

  lazy protocol witness table accessor for type EmergencyCountdownUpdateAction and conformance EmergencyCountdownUpdateAction();
  uint64_t updated = dispatch thunk of UpdateResponseCommand.serializeData()();
  if (!v3)
  {
    uint64_t v13 = updated;
    unint64_t v14 = v12;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v13, v14);
    [v7 setStateData:isa];

    __swift_project_boxed_opaque_existential_1(a3, a3[3]);
    AceServiceInvokerAsync.submitAndForget(_:)();
  }
}

uint64_t PromptForValueAfterReadingVoicemailFlowStrategy.getDisplayViewManifest(resultId:responseViewId:)()
{
  uint64_t v0 = type metadata accessor for DialogPhase();
  uint64_t v1 = OUTLINED_FUNCTION_11_0(v0);
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_4();
  static DialogPhase.summary.getter();
  return OutputGenerationManifest.init(dialogPhase:_:)();
}

uint64_t closure #1 in PromptForValueAfterReadingVoicemailFlowStrategy.getDisplayViewManifest(resultId:responseViewId:)()
{
  return OutputGenerationManifest.preserveResultSpaceIfPossible.setter();
}

uint64_t PromptForValueAfterReadingVoicemailFlowStrategy.getPromptDialogManifest(responseViewId:)()
{
  uint64_t v0 = type metadata accessor for DialogPhase();
  uint64_t v1 = OUTLINED_FUNCTION_11_0(v0);
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_0_4();
  static DialogPhase.clarification.getter();
  return OutputGenerationManifest.init(dialogPhase:_:)();
}

uint64_t closure #1 in PromptForValueAfterReadingVoicemailFlowStrategy.getPromptDialogManifest(responseViewId:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  OutputGenerationManifest.canUseServerTTS.setter();
  specialized static PhoneCallNLContextProvider.buildVoiceMailListFollowUpOfferContext()();
  specialized static PhoneCallNLContextProvider.makeSDAForOfferReadingVoicemail()();
  NLContextUpdate.nluSystemDialogActs.setter();
  uint64_t v3 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload((uint64_t)v2, 0, 1, v3);
  OutputGenerationManifest.nlContextUpdate.setter();
  swift_bridgeObjectRetain();
  OutputGenerationManifest.responseViewId.setter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  return OutputGenerationManifest.preserveResultSpaceIfPossible.setter();
}

uint64_t PromptForValueAfterReadingVoicemailFlowStrategy.deinit()
{
  swift_bridgeObjectRelease();

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_release();
  swift_release();
  outlined destroy of SearchCallHistorySharedGlobals(v0 + 112);
  swift_bridgeObjectRelease();
  type metadata accessor for WindowedPaginationParameters();
  OUTLINED_FUNCTION_15();
  uint64_t v1 = OUTLINED_FUNCTION_69_2();
  v2(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PromptForValueAfterReadingVoicemailFlowStrategy.__deallocating_deinit()
{
  PromptForValueAfterReadingVoicemailFlowStrategy.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.actionForInput(_:) in conformance PromptForValueAfterReadingVoicemailFlowStrategy()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.parseValueResponse(input:) in conformance PromptForValueAfterReadingVoicemailFlowStrategy(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 16) = a1;
  id v7 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v2 + 224) + **(int **)(*(void *)v2 + 224));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 24) = v5;
  void *v5 = v3;
  v5[1] = protocol witness for PromptForValueFlowStrategyAsync.parseValueResponse(input:) in conformance PromptForValueAfterReadingVoicemailFlowStrategy;
  return v7(a2);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.parseValueResponse(input:) in conformance PromptForValueAfterReadingVoicemailFlowStrategy()
{
  OUTLINED_FUNCTION_16_1();
  char v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (!v0) {
    **(unsigned char **)(v5 + 16) = v3;
  }
  NSString v9 = *(uint64_t (**)(void))(v7 + 8);
  return v9();
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makePromptForValue() in conformance PromptForValueAfterReadingVoicemailFlowStrategy(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 248) + **(int **)(*(void *)v1 + 248));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = UnsupportedFlowCATs.deleteVoicemail();
  return v6(a1);
}

uint64_t protocol witness for PromptForValueFlowStrategyAsync.makeRepromptOnEmptyParse() in conformance PromptForValueAfterReadingVoicemailFlowStrategy(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 232) + **(int **)(*(void *)v1 + 232));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = UnsupportedFlowCATs.deleteVoicemail();
  return v6(a1);
}

unint64_t lazy protocol witness table accessor for type CallHistoryPromptResponse and conformance CallHistoryPromptResponse()
{
  unint64_t result = lazy protocol witness table cache variable for type CallHistoryPromptResponse and conformance CallHistoryPromptResponse;
  if (!lazy protocol witness table cache variable for type CallHistoryPromptResponse and conformance CallHistoryPromptResponse)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallHistoryPromptResponse and conformance CallHistoryPromptResponse);
  }
  return result;
}

uint64_t ObjC metadata update function for PromptForValueAfterReadingVoicemailFlowStrategy()
{
  return type metadata accessor for PromptForValueAfterReadingVoicemailFlowStrategy();
}

uint64_t type metadata completion function for PromptForValueAfterReadingVoicemailFlowStrategy()
{
  uint64_t result = type metadata accessor for WindowedPaginationParameters();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CallHistoryPromptResponse(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x16CCD8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CallHistoryPromptResponse()
{
  return &type metadata for CallHistoryPromptResponse;
}

uint64_t partial apply for closure #1 in PromptForValueAfterReadingVoicemailFlowStrategy.getPromptDialogManifest(responseViewId:)()
{
  return closure #1 in PromptForValueAfterReadingVoicemailFlowStrategy.getPromptDialogManifest(responseViewId:)();
}

uint64_t partial apply for closure #1 in PromptForValueAfterReadingVoicemailFlowStrategy.getDisplayViewManifest(resultId:responseViewId:)()
{
  return closure #1 in PromptForValueAfterReadingVoicemailFlowStrategy.getDisplayViewManifest(resultId:responseViewId:)();
}

uint64_t _s11SiriKitFlow5InputVACs23CustomStringConvertibleAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of SingleResultVoicemailModel(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_15();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

unint64_t lazy protocol witness table accessor for type EmergencyCountdownUpdateAction and conformance EmergencyCountdownUpdateAction()
{
  unint64_t result = lazy protocol witness table cache variable for type EmergencyCountdownUpdateAction and conformance EmergencyCountdownUpdateAction;
  if (!lazy protocol witness table cache variable for type EmergencyCountdownUpdateAction and conformance EmergencyCountdownUpdateAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmergencyCountdownUpdateAction and conformance EmergencyCountdownUpdateAction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EmergencyCountdownUpdateAction and conformance EmergencyCountdownUpdateAction;
  if (!lazy protocol witness table cache variable for type EmergencyCountdownUpdateAction and conformance EmergencyCountdownUpdateAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmergencyCountdownUpdateAction and conformance EmergencyCountdownUpdateAction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EmergencyCountdownUpdateAction and conformance EmergencyCountdownUpdateAction;
  if (!lazy protocol witness table cache variable for type EmergencyCountdownUpdateAction and conformance EmergencyCountdownUpdateAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmergencyCountdownUpdateAction and conformance EmergencyCountdownUpdateAction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EmergencyCountdownUpdateAction and conformance EmergencyCountdownUpdateAction;
  if (!lazy protocol witness table cache variable for type EmergencyCountdownUpdateAction and conformance EmergencyCountdownUpdateAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmergencyCountdownUpdateAction and conformance EmergencyCountdownUpdateAction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EmergencyCountdownUpdateAction and conformance EmergencyCountdownUpdateAction;
  if (!lazy protocol witness table cache variable for type EmergencyCountdownUpdateAction and conformance EmergencyCountdownUpdateAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmergencyCountdownUpdateAction and conformance EmergencyCountdownUpdateAction);
  }
  return result;
}

uint64_t partial apply for closure #1 in PromptForValueAfterReadingVoicemailFlowStrategy.generateSingleItemOutput()()
{
  return closure #1 in PromptForValueAfterReadingVoicemailFlowStrategy.generateSingleItemOutput()();
}

uint64_t _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_0(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_15();
  uint64_t v3 = OUTLINED_FUNCTION_69_2();
  v4(v3);
  return a1;
}

uint64_t partial apply for closure #1 in PromptForValueAfterReadingVoicemailFlowStrategy.generateMultipleItemsOutput()()
{
  return closure #1 in PromptForValueAfterReadingVoicemailFlowStrategy.generateMultipleItemsOutput()();
}

uint64_t partial apply for closure #2 in PromptForValueAfterReadingVoicemailFlowStrategy.generateMultipleItemsOutput()(uint64_t a1)
{
  return closure #2 in PromptForValueAfterReadingVoicemailFlowStrategy.generateMultipleItemsOutput()(a1, *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(double *)(v1 + 16), *(double *)(v1 + 24));
}

uint64_t sub_16CED8()
{
  type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_0_0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v6 = v5 | 7;
  unint64_t v7 = ((((*(void *)(v4 + 64) + ((v5 + 40) & ~v5) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 9;
  swift_release();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_3_23();
  v8();

  return _swift_deallocObject(v0, v7, v6);
}

uint64_t partial apply for implicit closure #2 in PromptForValueAfterReadingVoicemailFlowStrategy.generateMultipleItemsOutput()(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_19_0(v4);
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  unint64_t v9 = (*(unsigned __int8 *)(v6 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v10 = (*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = v1[2];
  uint64_t v13 = v1[3];
  uint64_t v14 = v1[4];
  double v15 = *(double *)((char *)v1 + v10);
  uint64_t v16 = (uint64_t)v1 + v9;
  double v17 = *(double *)((char *)v1 + v11);
  char v18 = *((unsigned char *)v1 + v11 + 8);
  swift_task_alloc();
  OUTLINED_FUNCTION_31_2();
  *(void *)(v2 + 16) = v19;
  *uint64_t v19 = v20;
  v19[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return implicit closure #2 in PromptForValueAfterReadingVoicemailFlowStrategy.generateMultipleItemsOutput()(a1, v12, v13, v14, v16, v18, v15, v17);
}

uint64_t outlined destroy of UsoBuilderOptions?(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_15();
  uint64_t v3 = OUTLINED_FUNCTION_69_2();
  v4(v3);
  return a1;
}

uint64_t OUTLINED_FUNCTION_6_37()
{
  __swift_destroy_boxed_opaque_existential_1(v1);
  return __swift_destroy_boxed_opaque_existential_1(v0);
}

uint64_t OUTLINED_FUNCTION_11_31()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_22_19()
{
  __swift_destroy_boxed_opaque_existential_1(v2);
  __swift_destroy_boxed_opaque_existential_1(v1);
  uint64_t v3 = *(void *)(v0 + 560);
  uint64_t v4 = *(void *)(v3 + 80);
  __swift_project_boxed_opaque_existential_1((void *)(v3 + 56), v4);
  return v4;
}

uint64_t OUTLINED_FUNCTION_24_21()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_26_17()
{
  uint64_t v1 = *(void *)(v0 + 560);
  uint64_t v2 = *(void *)(v1 + 80);
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 56), v2);
  return v2;
}

uint64_t OUTLINED_FUNCTION_32_11()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_35_15()
{
  uint64_t v2 = *(void *)(v1 + 80);
  __swift_project_boxed_opaque_existential_1(v0, v2);
  return v2;
}

void OUTLINED_FUNCTION_36_13(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint8_t *buf)
{
  _os_log_impl(a1, v10, v11, a4, buf, 0xCu);
}

uint64_t OUTLINED_FUNCTION_39_10()
{
  return swift_release_n();
}

void OUTLINED_FUNCTION_43_10()
{
  DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v2, v3, v1, v0);
}

uint64_t OUTLINED_FUNCTION_44_10()
{
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_49_10()
{
  DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v3, v0, v2, v1);
}

uint64_t OUTLINED_FUNCTION_52_7(uint64_t a1)
{
  outlined consume of (@escaping @callee_guaranteed () -> ())?(a1);
  return swift_task_dealloc();
}

void OUTLINED_FUNCTION_55_7(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t OUTLINED_FUNCTION_56_7()
{
  __swift_destroy_boxed_opaque_existential_1(v0);
  return swift_task_dealloc();
}

void OUTLINED_FUNCTION_58_7(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t OUTLINED_FUNCTION_59_4()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_61_5()
{
  *(void *)(v0 - 160) = 0;
  *(void *)(v0 - 152) = 0xE000000000000000;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_62_6(uint64_t a1)
{
  *(void *)(v1 - 160) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_63_3(uint64_t result, float a2)
{
  *uint64_t v2 = a2;
  *(void *)(v4 - 176) = v3;
  *(void *)(v4 - 168) = result;
  *(void *)(v4 - 184) = v2 + 1;
  return result;
}

void OUTLINED_FUNCTION_67_2(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint8_t *buf, uint64_t a12, uint64_t a13, int a14, os_log_type_t type, os_log_t log)
{
  _os_log_impl(a1, log, type, a4, buf, 0xCu);
}

uint64_t OUTLINED_FUNCTION_69_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_71_1()
{
  return *(void *)(v0 + 608);
}

void OUTLINED_FUNCTION_72_3()
{
  uint64_t v2 = *(void **)(v0 + 200);
}

uint64_t OUTLINED_FUNCTION_73_2(uint64_t a1, uint64_t a2)
{
  __swift_project_value_buffer(a1, a2);
  return swift_retain_n();
}

void OUTLINED_FUNCTION_75_2(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t OUTLINED_FUNCTION_76_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_77_1()
{
  return type metadata accessor for Logger();
}

void OUTLINED_FUNCTION_82_2()
{
  uint64_t v2 = *(void **)(v0 + 608);
}

void OUTLINED_FUNCTION_84_2()
{
  DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v2, v3, v1, v0);
}

void *OUTLINED_FUNCTION_87_1()
{
  return __swift_project_boxed_opaque_existential_1(v0, v1);
}

uint64_t OUTLINED_FUNCTION_88_2()
{
  return PromptForValueAfterReadingVoicemailFlowStrategy.getPromptDialogManifest(responseViewId:)();
}

uint64_t OUTLINED_FUNCTION_89_3()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_90_1()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_91_3()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_98_1()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_99_1()
{
  return swift_arrayDestroy();
}

uint64_t specialized static PhoneCallNLContextProvider.makeSDAForOfferReadCallHistoryConfirmation()()
{
  uint64_t v69 = type metadata accessor for PhoneError();
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v0);
  OUTLINED_FUNCTION_5_8();
  uint64_t v68 = v1;
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_20_15((uint64_t)v64 - v3);
  uint64_t v65 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_0_0();
  uint64_t v66 = v4;
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_20_15(v7 - v6);
  uint64_t v73 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  OUTLINED_FUNCTION_0_0();
  uint64_t v70 = v8;
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_5_8();
  v64[0] = v10;
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_20_15((uint64_t)v64 - v12);
  type metadata accessor for Siri_Nlu_External_SystemOffered();
  OUTLINED_FUNCTION_0_0();
  uint64_t v71 = v14;
  uint64_t v72 = v13;
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_5_8();
  v64[1] = v15;
  __chkstk_darwin(v16);
  char v18 = (char *)v64 - v17;
  type metadata accessor for Siri_Nlu_External_UserDialogAct();
  OUTLINED_FUNCTION_0_0();
  uint64_t v75 = v20;
  uint64_t v76 = v19;
  uint64_t v21 = __chkstk_darwin(v19);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)v64 - v22;
  uint64_t v24 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v25 = OUTLINED_FUNCTION_11_0(v24);
  __chkstk_darwin(v25);
  OUTLINED_FUNCTION_4();
  uint64_t v26 = type metadata accessor for Siri_Nlu_External_UserWantedToProceed();
  OUTLINED_FUNCTION_0_0();
  uint64_t v74 = v27;
  uint64_t v29 = __chkstk_darwin(v28);
  __chkstk_darwin(v29);
  uint64_t v31 = (char *)v64 - v30;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoBuilderOptions?);
  uint64_t v33 = OUTLINED_FUNCTION_11_0(v32);
  __chkstk_darwin(v33);
  OUTLINED_FUNCTION_4();
  uint64_t v36 = v35 - v34;
  type metadata accessor for UsoTaskBuilder_summarise_common_PhoneCall();
  swift_allocObject();
  uint64_t v37 = UsoTaskBuilder_summarise_common_PhoneCall.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v38 = OUTLINED_FUNCTION_93();
  *(_OWORD *)(v38 + 16) = xmmword_46A030;
  *(void *)(v38 + 32) = v37;
  v78[0] = v38;
  specialized Array._endMutation()();
  uint64_t v39 = type metadata accessor for UsoBuilderOptions();
  __swift_storeEnumTagSinglePayload(v36, 1, 1, v39);
  v64[4] = v37;
  swift_retain();
  uint64_t v40 = static UsoGraphBuilder.buildGraphWithOptions(taskBuilders:options:)();
  swift_bridgeObjectRelease();
  outlined destroy of UUID?(v36, &demangling cache variable for type metadata for UsoBuilderOptions?);
  Siri_Nlu_External_UserWantedToProceed.init()();
  static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)();
  v64[3] = v40;
  Siri_Nlu_External_UserWantedToProceed.reference.setter();
  Siri_Nlu_External_UserDialogAct.init()();
  uint64_t v66 = v31;
  uint64_t v67 = v26;
  OUTLINED_FUNCTION_12();
  v41();
  Siri_Nlu_External_UserDialogAct.wantedToProceed.setter();
  Siri_Nlu_External_SystemOffered.init()();
  uint64_t v68 = v23;
  OUTLINED_FUNCTION_12();
  v42();
  Siri_Nlu_External_SystemOffered.offeredAct.setter();
  uint64_t v43 = v64[2];
  Siri_Nlu_External_SystemDialogAct.init()();
  uint64_t v45 = v71;
  uint64_t v44 = v72;
  uint64_t v69 = (uint64_t)v18;
  OUTLINED_FUNCTION_12();
  v46();
  Siri_Nlu_External_SystemDialogAct.offered.setter();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v65, (uint64_t)static Logger.siriPhone);
  uint64_t v47 = Logger.logObject.getter();
  os_log_type_t v48 = static os_log_type_t.debug.getter();
  BOOL v49 = os_log_type_enabled(v47, v48);
  uint64_t v50 = v73;
  uint64_t v51 = v70;
  if (v49)
  {
    unint64_t v52 = (uint8_t *)swift_slowAlloc();
    v78[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v52 = 136315138;
    swift_beginAccess();
    uint64_t v53 = v64[0];
    OUTLINED_FUNCTION_12();
    v54();
    uint64_t v55 = specialized String.init(describing:)(v53);
    uint64_t v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, v78);
    uint64_t v45 = v71;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v50 = v73;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v47, v48, "#PhoneCallNLContextProvider Returning SystemOffered for offer read record confirmation: %s", v52, 0xCu);
    swift_arrayDestroy();
    uint64_t v44 = v72;
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }

  uint64_t v58 = v75;
  uint64_t v57 = v76;
  uint64_t v59 = v69;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  uint64_t v60 = swift_allocObject();
  *(_OWORD *)(v60 + 16) = xmmword_467710;
  swift_beginAccess();
  OUTLINED_FUNCTION_12();
  v61();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v59, v44);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v68, v57);
  OUTLINED_FUNCTION_11();
  v62();
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v43, v50);
  return v60;
}

uint64_t ReadCallRecordsYesNoPromptFlowStrategy.__allocating_init(app:intent:intentResponse:phoneSearchCallHistoryIntent:sharedGlobals:windowItems:windowParam:isMissedCall:searchCallHistorySharedGlobals:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9)
{
  uint64_t v17 = swift_allocObject();
  ReadCallRecordsYesNoPromptFlowStrategy.init(app:intent:intentResponse:phoneSearchCallHistoryIntent:sharedGlobals:windowItems:windowParam:isMissedCall:searchCallHistorySharedGlobals:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return v17;
}

uint64_t ReadCallRecordsYesNoPromptFlowStrategy.init(app:intent:intentResponse:phoneSearchCallHistoryIntent:sharedGlobals:windowItems:windowParam:isMissedCall:searchCallHistorySharedGlobals:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9)
{
  uint64_t v17 = (uint64_t *)(v9 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin38ReadCallRecordsYesNoPromptFlowStrategy_logPrefix);
  uint64_t *v17 = type metadata accessor for ReadCallRecordsYesNoPromptFlowStrategy();
  v17[1] = (uint64_t)&outlined read-only object #0 of ReadCallRecordsYesNoPromptFlowStrategy.init(app:intent:intentResponse:phoneSearchCallHistoryIntent:sharedGlobals:windowItems:windowParam:isMissedCall:searchCallHistorySharedGlobals:);
  v17[2] = 0;
  v17[3] = 0;
  *(void *)(v9 + 144) = a1;
  *(unsigned char *)(v9 + 152) = a8;
  *(void *)(v9 + 24) = a2;
  *(void *)(v9 + 32) = a3;
  *(void *)(v9 + 160) = a4;
  outlined init with copy of SignalProviding((uint64_t)a5, v9 + 104);
  *(void *)(v9 + 16) = a6;
  type metadata accessor for YesNoConfirmationParser();
  uint64_t v18 = swift_allocObject();
  *(unsigned char *)(v18 + 16) = 5;
  outlined init with take of AppSelectionSignalComponent(a5, v18 + 24);
  *(void *)(v9 + 96) = v18;
  outlined init with copy of SearchCallHistorySharedGlobals(a9, v9 + 168);
  uint64_t v19 = v9 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin38ReadCallRecordsYesNoPromptFlowStrategy_windowParam;
  type metadata accessor for WindowedPaginationParameters();
  OUTLINED_FUNCTION_15();
  (*(void (**)(uint64_t, uint64_t))(v20 + 32))(v19, a7);
  outlined init with copy of SignalProviding(a9, v9 + 40);
  uint64_t v21 = *(void *)(a9 + 192);
  *(void *)(v9 + 80) = *(void *)(a9 + 184);
  swift_retain();
  swift_retain();
  outlined destroy of SearchCallHistorySharedGlobals(a9);
  *(void *)(v9 + 88) = v21;
  return v9;
}

uint64_t type metadata accessor for ReadCallRecordsYesNoPromptFlowStrategy()
{
  uint64_t result = type metadata singleton initialization cache for ReadCallRecordsYesNoPromptFlowStrategy;
  if (!type metadata singleton initialization cache for ReadCallRecordsYesNoPromptFlowStrategy) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t ReadCallRecordsYesNoPromptFlowStrategy.actionForInput(_:)(uint64_t a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  uint64_t v5 = OUTLINED_FUNCTION_11_0(v4);
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_52();
  (*(void (**)(uint64_t))(**(void **)(v1 + 96) + 128))(a1);
  uint64_t v6 = type metadata accessor for ConfirmationResponse();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v2, 1, v6);
  outlined destroy of UUID?(v2, &demangling cache variable for type metadata for ConfirmationResponse?);
  if (EnumTagSinglePayload == 1) {
    return static ActionForInput.ignore()();
  }
  else {
    return static ActionForInput.handle()();
  }
}

uint64_t ReadCallRecordsYesNoPromptFlowStrategy.makePromptForConfirmation(itemToConfirm:)(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return OUTLINED_FUNCTION_21_1((uint64_t)ReadCallRecordsYesNoPromptFlowStrategy.makePromptForConfirmation(itemToConfirm:));
}

#error "16E528: call analysis failed (funcsize=100)"

uint64_t ReadCallRecordsYesNoPromptFlowStrategy.makeConfirmationRejectedResponse()()
{
  OUTLINED_FUNCTION_1_0();
  v1[8] = v2;
  v1[9] = v0;
  uint64_t v3 = type metadata accessor for DialogPhase();
  OUTLINED_FUNCTION_11_0(v3);
  v1[10] = OUTLINED_FUNCTION_35();
  uint64_t v4 = type metadata accessor for CATOption();
  OUTLINED_FUNCTION_11_0(v4);
  v1[11] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  *(void *)(v3 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_6_0();
    return v10();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v0();
}

#error "16E76C: call analysis failed (funcsize=162)"

uint64_t ReadCallRecordsYesNoPromptFlowStrategy.makePromptForYesNoResponse()(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return OUTLINED_FUNCTION_21_1((uint64_t)ReadCallRecordsYesNoPromptFlowStrategy.makePromptForYesNoResponse());
}

#error "16EBAC: call analysis failed (funcsize=100)"

uint64_t ReadCallRecordsYesNoPromptFlowStrategy.parseConfirmationResponse(input:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  uint64_t v4 = type metadata accessor for PhoneError();
  v1[5] = v4;
  OUTLINED_FUNCTION_11_0(v4);
  v1[6] = OUTLINED_FUNCTION_35();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  OUTLINED_FUNCTION_11_0(v5);
  v1[7] = OUTLINED_FUNCTION_28_2();
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  v1[10] = swift_task_alloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v6, v7, v8);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v19;

  uint64_t v1 = v0[9];
  (*(void (**)(void))(**(void **)(v0[4] + 96) + 128))(v0[3]);
  uint64_t v2 = OUTLINED_FUNCTION_38();
  outlined init with copy of ConfirmationResponse?(v2, v3, v4);
  uint64_t v5 = type metadata accessor for ConfirmationResponse();
  if (__swift_getEnumTagSinglePayload(v1, 1, v5) != 1)
  {
    uint64_t v6 = v0[8];
    outlined init with copy of ConfirmationResponse?(v0[9], v6, &demangling cache variable for type metadata for ConfirmationResponse?);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 88))(v6, v5);
    if (v8 == enum case for ConfirmationResponse.confirmed(_:)
      || v8 == enum case for ConfirmationResponse.rejected(_:))
    {
      uint64_t v11 = v0[9];
      uint64_t v10 = v0[10];
      uint64_t v12 = v0[7];
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 104))(v12, v8, v5);
      __swift_storeEnumTagSinglePayload(v12, 0, 1, v5);
      SimpleConfirmationResponseProvider.init(_:)();
      outlined destroy of UUID?(v10, &demangling cache variable for type metadata for ConfirmationResponse?);
      outlined destroy of UUID?(v11, &demangling cache variable for type metadata for ConfirmationResponse?);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      OUTLINED_FUNCTION_6_0();
      goto LABEL_9;
    }
    (*(void (**)(void, uint64_t))(v7 + 8))(v0[8], v5);
  }
  uint64_t v14 = v0[9];
  uint64_t v15 = v0[10];
  uint64_t v16 = (void *)v0[6];
  *uint64_t v16 = 0;
  v16[1] = 0;
  swift_storeEnumTagMultiPayload();
  _s27PhoneCallFlowDelegatePlugin0A5ErrorOACs0F0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError, (void (*)(uint64_t))type metadata accessor for PhoneError);
  swift_allocError();
  PhoneError.logged()(v17);
  _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_1((uint64_t)v16, (void (*)(void))type metadata accessor for PhoneError);
  swift_willThrow();
  outlined destroy of UUID?(v15, &demangling cache variable for type metadata for ConfirmationResponse?);
  outlined destroy of UUID?(v14, &demangling cache variable for type metadata for ConfirmationResponse?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
LABEL_9:
  return v13();
}

uint64_t ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest()()
{
  OUTLINED_FUNCTION_1_0();
  v1[493] = v0;
  v1[487] = v2;
  uint64_t v3 = type metadata accessor for PhoneSnippetDataModels();
  v1[499] = v3;
  OUTLINED_FUNCTION_11_0(v3);
  v1[505] = OUTLINED_FUNCTION_35();
  uint64_t v4 = type metadata accessor for SearchCallHistoryModel();
  v1[511] = v4;
  OUTLINED_FUNCTION_11_0(v4);
  v1[517] = OUTLINED_FUNCTION_35();
  uint64_t v5 = type metadata accessor for Locale();
  v1[523] = v5;
  OUTLINED_FUNCTION_19_0(v5);
  v1[529] = v6;
  v1[535] = OUTLINED_FUNCTION_35();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_19_0(v7);
  v1[541] = v8;
  v1[547] = *(void *)(v9 + 64);
  v1[553] = OUTLINED_FUNCTION_28_2();
  v1[559] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for OutputGenerationManifest();
  v1[565] = v10;
  OUTLINED_FUNCTION_19_0(v10);
  v1[571] = v11;
  v1[572] = OUTLINED_FUNCTION_28_2();
  v1[573] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for SpeakableString();
  v1[574] = v12;
  OUTLINED_FUNCTION_19_0(v12);
  v1[575] = v13;
  v1[576] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v14, v15, v16);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void (*v3)(void);
  __n128 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  BOOL v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  NSObject *v37;
  os_log_type_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void (*v47)(void);
  long long v48;
  uint64_t v49;
  uint64_t (*v50)();
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  void *v61;
  void (*v62)(void);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(void);
  uint64_t v67;
  uint64_t v68;
  void (*v69)(void);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint8_t *buf;
  uint64_t v81;
  uint8_t *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  void *v87;
  void *v88;
  uint64_t v89;
  void *v90;
  void *v91;
  void *v92;
  uint64_t v93;
  os_log_type_t v94;
  uint64_t v95;

  uint64_t v1 = *(void **)(v0 + 3944);
  uint64_t v87 = (void *)(v0 + 3096);
  outlined init with copy of SignalProviding((uint64_t)(v1 + 21), v0 + 3096);
  outlined init with copy of SignalProviding((uint64_t)(v1 + 26), v0 + 3016);
  outlined init with copy of SignalProviding((uint64_t)(v1 + 31), v0 + 2696);
  uint64_t v2 = v1 + 13;
  __swift_project_boxed_opaque_existential_1(v1 + 13, v1[16]);
  OUTLINED_FUNCTION_24_2();
  v3();
  uint64_t v4 = (__n128 *)static UserFacingCallingAppUtils.getAppBundleId(preferredCallProvider:deviceState:)(1, (void *)(v0 + 2616));
  uint64_t v6 = v5;
  __swift_destroy_boxed_opaque_existential_1(v0 + 2616);
  String.toSpeakableString.getter();
  swift_bridgeObjectRelease();
  uint64_t v7 = v1[2];
  uint64_t v8 = v7 >> 62;
  if (v7 >> 62)
  {
    OUTLINED_FUNCTION_36_14();
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_15_0();
  }
  else
  {
    uint64_t v4 = *(__n128 **)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFFF8));
  }
  if (v4)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v4 = (__n128 *)OUTLINED_FUNCTION_93();
    OUTLINED_FUNCTION_53_6(v4, (__n128)xmmword_46A030);
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, v9, v7);
    if (v6) {
      uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      uint64_t v10 = swift_retain();
    }
    OUTLINED_FUNCTION_38_10(v10);
    uint64_t v11 = v92;
  }
  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }
  *(void *)(v0 + 4616) = v11;
  if (v8)
  {
    OUTLINED_FUNCTION_36_14();
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_15_0();
  }
  else
  {
    uint64_t v4 = *(__n128 **)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFFF8));
  }
  if ((uint64_t)v4 < 2)
  {
    uint64_t v14 = _swiftEmptyArrayStorage;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v4 = (__n128 *)OUTLINED_FUNCTION_93();
    OUTLINED_FUNCTION_53_6(v4, (__n128)xmmword_46A030);
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(1, v12, v7);
    if (v6) {
      uint64_t v13 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      uint64_t v13 = swift_retain();
    }
    OUTLINED_FUNCTION_38_10(v13);
    uint64_t v14 = v92;
  }
  *(void *)(v0 + 4624) = v14;
  uint64_t v91 = v14;
  if (v8)
  {
    OUTLINED_FUNCTION_36_14();
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_15_0();
  }
  else
  {
    uint64_t v4 = *(__n128 **)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFFF8));
  }
  if ((uint64_t)v4 < 3)
  {
    uint64_t v17 = _swiftEmptyArrayStorage;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v4 = (__n128 *)OUTLINED_FUNCTION_93();
    OUTLINED_FUNCTION_53_6(v4, (__n128)xmmword_46A030);
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(2, v15, v7);
    if (v6) {
      uint64_t v16 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      uint64_t v16 = swift_retain();
    }
    OUTLINED_FUNCTION_38_10(v16);
    uint64_t v17 = v92;
  }
  *(void *)(v0 + 4632) = v17;
  uint64_t v90 = v17;
  if (v8)
  {
    OUTLINED_FUNCTION_36_14();
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_15_0();
  }
  else
  {
    uint64_t v4 = *(__n128 **)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFFF8));
  }
  if ((uint64_t)v4 < 4)
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    *(_OWORD *)(OUTLINED_FUNCTION_93() + 16) = xmmword_46A030;
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(3, (v7 & 0xC000000000000001) == 0, v7);
    if ((v7 & 0xC000000000000001) != 0) {
      uint64_t v18 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      uint64_t v18 = swift_retain();
    }
    OUTLINED_FUNCTION_38_10(v18);
    uint64_t v19 = v92;
  }
  uint64_t v88 = v19;
  *(void *)(v0 + 4640) = v19;
  uint64_t v20 = v1[16];
  uint64_t v21 = v1[17];
  __swift_project_boxed_opaque_existential_1(v1 + 13, v20);
  uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 56))(v20, v21);
  LOBYTE(v20) = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 248))(v22);
  swift_release();
  if ((v20 & 1) == 0)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    uint64_t v36 = (uint8_t *)__swift_project_value_buffer(v35, (uint64_t)static Logger.siriPhone);
    OUTLINED_FUNCTION_44_4();
    uint64_t v37 = Logger.logObject.getter();
    uint64_t v38 = static os_log_type_t.debug.getter();
    uint64_t v39 = os_log_type_enabled(v37, v38);
    uint64_t v40 = *(void *)(v0 + 3944);
    if (v39)
    {
      OUTLINED_FUNCTION_5_22();
      uint64_t v84 = OUTLINED_FUNCTION_11_29();
      *(_DWORD *)uint64_t v36 = 136315138;
      os_log_type_t v95 = v84;
      uint64_t v42 = *(void *)(v40
                      + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin38ReadCallRecordsYesNoPromptFlowStrategy_logPrefix);
      uint64_t v41 = *(void *)(v40
                      + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin38ReadCallRecordsYesNoPromptFlowStrategy_logPrefix
                      + 8);
      uint64_t v43 = *(void *)(v40
                      + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin38ReadCallRecordsYesNoPromptFlowStrategy_logPrefix
                      + 16);
      uint64_t v44 = *(void *)(v40
                      + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin38ReadCallRecordsYesNoPromptFlowStrategy_logPrefix
                      + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v42, v41, v43, v44);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)(v0 + 3848) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, &v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v37, v38, "%s execute readMultipleCallRecords with patternExecutionResult", v36, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v54 = *(void *)(v0 + 4608);
    uint64_t v55 = *(void *)(v0 + 3944);
    unint64_t v56 = *(void *)(v0 + 3048);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 3016), *(void *)(v0 + 3040));
    App.isFirstParty()();
    WindowedPaginationParameters.isFirstWindow.getter();
    WindowedPaginationParameters.isLastWindow.getter();
    uint64_t v57 = (void *)swift_task_alloc();
    *(void *)(v0 + 4904) = v57;
    v57[2] = v55;
    void v57[3] = v87;
    v57[4] = v54;
    uint64_t v85 = *(void *)(v56 + 32) + **(int **)(v56 + 32);
    uint64_t v58 = (void *)swift_task_alloc();
    *(void *)(v0 + 4912) = v58;
    *uint64_t v58 = v0;
    v58[1] = ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest();
    __asm { BRAA            X9, X16 }
  }
  uint64_t v82 = (uint8_t *)(v0 + 2776);
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.siriPhone);
  OUTLINED_FUNCTION_44_4();
  uint64_t v24 = Logger.logObject.getter();
  uint64_t v25 = static os_log_type_t.debug.getter();
  uint64_t v26 = (uint8_t *)v25;
  uint64_t v27 = os_log_type_enabled(v24, v25);
  uint64_t v28 = *(void *)(v0 + 3944);
  uint64_t v83 = v1 + 13;
  if (v27)
  {
    OUTLINED_FUNCTION_5_22();
    os_log_t v94 = v26;
    uint64_t v81 = OUTLINED_FUNCTION_11_29();
    *(_DWORD *)uint64_t v26 = 136315138;
    os_log_type_t v95 = v81;
    buf = v26;
    uint64_t v29 = v1;
    uint64_t v30 = *(void *)(v28
                    + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin38ReadCallRecordsYesNoPromptFlowStrategy_logPrefix);
    uint64_t v31 = *(void *)(v28
                    + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin38ReadCallRecordsYesNoPromptFlowStrategy_logPrefix
                    + 8);
    uint64_t v86 = v11;
    uint64_t v32 = *(void *)(v28
                    + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin38ReadCallRecordsYesNoPromptFlowStrategy_logPrefix
                    + 16);
    uint64_t v33 = *(void *)(v28
                    + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin38ReadCallRecordsYesNoPromptFlowStrategy_logPrefix
                    + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v34 = v30;
    uint64_t v1 = v29;
    DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v34, v31, v32, v33);
    uint64_t v11 = v86;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v0 + 3704) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, &v95);
    uint64_t v2 = v83;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v24, v94, "%s execute readMultipleCallRecords with SMART UI on", buf, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v45 = *(void *)(v0 + 3944);
  uint64_t v46 = (void *)swift_allocObject();
  *(void *)(v0 + 4648) = v46;
  long long v46[2] = v45;
  v46[3] = v11;
  v46[4] = v91;
  v46[5] = v90;
  v46[6] = v88;
  swift_retain();
  swift_retain();
  type metadata accessor for CNContactStore(255, (unint64_t *)&lazy cache variable for type metadata for DialogExecutionResult);
  swift_asyncLet_begin();
  OUTLINED_FUNCTION_44_4();
  swift_asyncLet_begin();
  __swift_project_boxed_opaque_existential_1(v2, v1[16]);
  OUTLINED_FUNCTION_54_6();
  OUTLINED_FUNCTION_24_2();
  v47();
  __swift_project_boxed_opaque_existential_1(v82, *(void *)(v0 + 2800));
  OUTLINED_FUNCTION_54_6();
  LOBYTE(v45) = dispatch thunk of DeviceState.isCarPlay.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v82);
  if (v45)
  {
    os_log_type_t v48 = *(_OWORD *)(v0 + 2720);
    *(_OWORD *)(v0 + 4656) = v48;
    *(void *)(v0 + 4672) = __swift_project_boxed_opaque_existential_1((void *)(v0 + 2696), v48);
    *(void *)(v0 + 4680) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    BOOL v49 = OUTLINED_FUNCTION_93();
    *(void *)(v0 + 4688) = v49;
    *(_OWORD *)(v49 + 16) = xmmword_46A030;
    uint64_t v50 = ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest();
    uint64_t v51 = v0 + 1936;
    unint64_t v52 = v0 + 3800;
    uint64_t v53 = v0 + 3856;
  }
  else
  {
    uint64_t v59 = v2;
    uint64_t v89 = *(void *)(v0 + 4280);
    uint64_t v60 = *(void *)(*(void *)(v0 + 3944) + 144);
    uint64_t v61 = v1;
    __swift_project_boxed_opaque_existential_1(v2, v1[16]);
    OUTLINED_FUNCTION_24_2();
    v62();
    uint64_t v63 = static UserFacingCallingAppUtils.getCommAppForLaunch(originalApp:preferredCallProvider:deviceState:)(v60, 0, (void *)(v0 + 2856));
    *(void *)(v0 + 4744) = v63;
    __swift_destroy_boxed_opaque_existential_1(v0 + 2856);
    uint64_t v64 = *(void *)(v0 + 3120);
    uint64_t v65 = *(void *)(v0 + 3128);
    __swift_project_boxed_opaque_existential_1(v87, v64);
    __swift_project_boxed_opaque_existential_1(v59, v61[16]);
    OUTLINED_FUNCTION_24_2();
    v66();
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 2936), *(void *)(v0 + 2960));
    dispatch thunk of DeviceState.siriLocale.getter();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 16))(v63, v89, v64, v65);
    uint64_t v68 = v67;
    OUTLINED_FUNCTION_11();
    v69();
    __swift_destroy_boxed_opaque_existential_1(v0 + 2936);
    uint64_t v70 = *(void *)(v0 + 4592);
    uint64_t v71 = *(void *)(v0 + 4472);
    if (v68)
    {
      swift_bridgeObjectRetain();
      SpeakableString.init(print:speak:)();
      __swift_storeEnumTagSinglePayload(v71, 0, 1, v70);
      swift_bridgeObjectRelease();
    }
    else
    {
      __swift_storeEnumTagSinglePayload(*(void *)(v0 + 4472), 1, 1, *(void *)(v0 + 4592));
    }
    uint64_t v72 = *(void *)(v0 + 4424);
    uint64_t v73 = *(void *)(v0 + 4328);
    uint64_t v74 = *(void *)(v0 + 3944);
    outlined init with copy of ConfirmationResponse?(*(void *)(v0 + 4472), v72, &demangling cache variable for type metadata for SpeakableString?);
    uint64_t v75 = (*(unsigned __int8 *)(v73 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80);
    uint64_t v76 = swift_allocObject();
    *(void *)(v0 + 4752) = v76;
    *(void *)(v76 + 16) = v74;
    outlined init with take of SpeakableString?(v72, v76 + v75);
    swift_retain();
    swift_retain();
    swift_asyncLet_begin();
    swift_retain_n();
    swift_asyncLet_begin();
    *(void *)(v0 + 4760) = SpeakableString.print.getter();
    *(void *)(v0 + 4768) = v77;
    static SearchCallHistoryHelper.generateSearchCallHistoryModel(items:sharedGlobals:)(v7);
    *(void *)(v0 + 4776) = v78;
    uint64_t v50 = ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest();
    uint64_t v51 = v0 + 16;
    unint64_t v52 = v0 + 3592;
    uint64_t v53 = v0 + 2976;
  }
  return _swift_asyncLet_get_throwing(v51, v52, v50, v53);
}

{
  uint64_t v0;
  uint64_t v1;

  *(void *)(v1 + 4696) = v0;
  if (v0) {
    return OUTLINED_FUNCTION_21_1((uint64_t)ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
  }
  else {
    return OUTLINED_FUNCTION_21_1((uint64_t)ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
  }
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t inited;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_40_0();
  uint64_t v1 = v0[586];
  uint64_t v2 = (void *)v0[475];
  *(void *)(v1 + 32) = v2;
  uint64_t v11 = v1;
  specialized Array._endMutation()();
  v0[588] = v11;
  uint64_t inited = swift_initStackObject();
  v0[589] = inited;
  *(_OWORD *)(inited + 16) = xmmword_46A030;
  uint64_t v4 = v2;
  OUTLINED_FUNCTION_31_1();
  return _swift_asyncLet_get_throwing(v5, v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  OUTLINED_FUNCTION_1_0();
  *(void *)(v1 + 4720) = v0;
  if (v0) {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v2, v3, v4);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v2 = v1;
  uint64_t v4 = v3[573];
  uint64_t v5 = v3[571];
  uint64_t v6 = v3[565];
  uint64_t v7 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  OUTLINED_FUNCTION_3_2();
  OUTLINED_FUNCTION_31_1();
  return _swift_asyncLet_finish(v9);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_31_16();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  OUTLINED_FUNCTION_16_1();
  v1[598] = v0;
  if (v0)
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v2, v3, v4);
  }
  else
  {
    v1[599] = v1[449];
    v1[600] = v1[450];
    swift_bridgeObjectRetain();
    return _swift_asyncLet_get_throwing(v1 + 82, v1 + 453, ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest(), v1 + 422);
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(void *)(v1 + 4808) = v0;
  if (v0) {
    return OUTLINED_FUNCTION_21_1((uint64_t)ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
  }
  else {
    return OUTLINED_FUNCTION_21_1((uint64_t)ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
  }
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  void (*v6)(void);
  void *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  long long v11;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  uint64_t v20 = *(void *)(v0 + 4792);
  uint64_t v21 = *(void *)(v0 + 4800);
  uint64_t v17 = *(void *)(v0 + 4776);
  uint64_t v15 = *(void *)(v0 + 4760);
  uint64_t v16 = *(void *)(v0 + 4768);
  uint64_t v1 = *(void **)(v0 + 4136);
  uint64_t v22 = *(void *)(v0 + 4040);
  uint64_t v23 = *(void *)(v0 + 3992);
  uint64_t v2 = *(void **)(v0 + 3944);
  uint64_t v19 = *(void *)(v0 + 3624);
  uint64_t v18 = *(void *)(v0 + 3632);
  uint64_t v3 = v2[16];
  uint64_t v4 = v2[17];
  __swift_project_boxed_opaque_existential_1(v2 + 13, v3);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  swift_bridgeObjectRetain();
  v5(v3, v4);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 3176), *(void *)(v0 + 3200));
  LOBYTE(v4) = dispatch thunk of DeviceState.isXRDevice.getter();
  __swift_destroy_boxed_opaque_existential_1(v0 + 3176);
  __swift_project_boxed_opaque_existential_1(v2 + 13, v2[16]);
  OUTLINED_FUNCTION_24_2();
  v6();
  uint64_t v7 = (void *)OUTLINED_FUNCTION_38();
  __swift_project_boxed_opaque_existential_1(v7, v8);
  OUTLINED_FUNCTION_54_6();
  uint64_t v9 = dispatch thunk of DeviceState.isXRDevice.getter();
  __swift_destroy_boxed_opaque_existential_1(v0 + 3256);
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for SAAppsLaunchApp);
  uint64_t v10 = swift_retain();
  SAAppsLaunchApp.init(app:)(v10);
  *uint64_t v1 = 0xD000000000000011;
  v1[1] = 0x80000000004913A0;
  *(void *)(v0 + 3640) = v15;
  *(void *)(v0 + 3648) = v16;
  Loggable.init(wrappedValue:)();
  *(void *)(v0 + 3656) = v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SingleCallRecordModel]);
  Loggable.init(wrappedValue:)();
  *(void *)(v0 + 3576) = v20;
  *(void *)(v0 + 3584) = v21;
  Loggable.init(wrappedValue:)();
  *(void *)(v0 + 3608) = v19;
  *(void *)(v0 + 3616) = v18;
  Loggable.init(wrappedValue:)();
  *(unsigned char *)(v0 + 4953) = (v4 & 1) == 0;
  Loggable.init(wrappedValue:)();
  *(unsigned char *)(v0 + 4952) = (v9 & 1) == 0;
  Loggable.init(wrappedValue:)();
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for SABaseCommand);
  CodableAceObject.init(wrappedValue:)();
  outlined init with copy of SearchCallHistoryModel((uint64_t)v1, v22, (void (*)(void))type metadata accessor for SearchCallHistoryModel);
  swift_storeEnumTagMultiPayload();
  uint64_t v11 = *(_OWORD *)(v0 + 2720);
  *(_OWORD *)(v0 + 4816) = v11;
  *(void *)(v0 + 4832) = __swift_project_boxed_opaque_existential_1((void *)(v0 + 2696), v11);
  *(void *)(v0 + 3440) = v23;
  *(void *)(v0 + 3448) = _s27PhoneCallFlowDelegatePlugin0A5ErrorOACs0F0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels and conformance PhoneSnippetDataModels, (void (*)(uint64_t))type metadata accessor for PhoneSnippetDataModels);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 3416));
  outlined init with copy of SearchCallHistoryModel(v22, (uint64_t)boxed_opaque_existential_1, (void (*)(void))type metadata accessor for PhoneSnippetDataModels);
  *(void *)(v0 + 4840) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v13 = OUTLINED_FUNCTION_93();
  *(void *)(v0 + 4848) = v13;
  *(_OWORD *)(v13 + 16) = xmmword_46A030;
  return _swift_asyncLet_get_throwing(v0 + 1936, v0 + 3800, ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest(), v0 + 4000);
}

{
  uint64_t v0;
  uint64_t v1;

  *(void *)(v1 + 4856) = v0;
  if (v0) {
    return OUTLINED_FUNCTION_21_1((uint64_t)ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
  }
  else {
    return OUTLINED_FUNCTION_21_1((uint64_t)ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
  }
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t inited;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_40_0();
  uint64_t v1 = v0[606];
  uint64_t v2 = (void *)v0[475];
  *(void *)(v1 + 32) = v2;
  uint64_t v11 = v1;
  specialized Array._endMutation()();
  v0[608] = v11;
  uint64_t inited = swift_initStackObject();
  v0[609] = inited;
  *(_OWORD *)(inited + 16) = xmmword_46A030;
  uint64_t v4 = v2;
  OUTLINED_FUNCTION_31_1();
  return _swift_asyncLet_get_throwing(v5, v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  OUTLINED_FUNCTION_1_0();
  *(void *)(v1 + 4880) = v0;
  if (v0) {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v2, v3, v4);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  uint64_t v1 = v0[608];
  uint64_t v2 = (void *)v0[469];
  *(void *)(v0[609] + 32) = v2;
  specialized Array._endMutation()();
  uint64_t v3 = v2;
  specialized Array.append<A>(contentsOf:)();
  v0[611] = v1;
  swift_bridgeObjectRetain();
  ReadCallRecordsYesNoPromptFlowStrategy.getOutputGenerationManifest(responseViewId:)();
  swift_bridgeObjectRelease();
  swift_task_alloc();
  OUTLINED_FUNCTION_31_2();
  v0[612] = v4;
  *uint64_t v4 = v5;
  v4[1] = ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest();
  uint64_t v6 = v0[603];
  uint64_t v7 = v0[602];
  uint64_t v8 = v0[573];
  uint64_t v9 = v0[487];
  return dispatch thunk of ResponseGenerating.makeResponseOutput(resultModel:dialog:outputGenerationManifest:)(v9, v0 + 427, v1, v8, v7, v6);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 3416;
  uint64_t v5 = v4[573];
  uint64_t v6 = v4[571];
  uint64_t v7 = v4[565];
  uint64_t v8 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v9 = v8;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  __swift_destroy_boxed_opaque_existential_1(v3);
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_20_2();
  return _swift_task_switch(v10, v11, v12);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_16_1();
  uint64_t v1 = *(void *)(v0 + 4136);
  _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_1(*(void *)(v0 + 4040), (void (*)(void))type metadata accessor for PhoneSnippetDataModels);
  _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_1(v1, (void (*)(void))type metadata accessor for SearchCallHistoryModel);
  uint64_t v2 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v2);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_69_3();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_19_21();
  outlined destroy of UUID?(v0, &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  OUTLINED_FUNCTION_3_2();
  OUTLINED_FUNCTION_20_2();
  return _swift_asyncLet_finish(v1);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_31_16();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_2();
  void *v5 = v4;
  *(void *)(v7 + 4920) = v6;
  *(void *)(v7 + 4928) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v8, v9, v10);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  __swift_project_boxed_opaque_existential_1(v0 + 337, v0[340]);
  ReadCallRecordsYesNoPromptFlowStrategy.getOutputGenerationManifest(responseViewId:)();
  swift_task_alloc();
  OUTLINED_FUNCTION_31_2();
  v0[617] = v1;
  *uint64_t v1 = v2;
  v1[1] = ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest();
  OUTLINED_FUNCTION_20_2();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)(v3, v4, v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_2();
  void *v5 = v4;
  *(void *)(v6 + 4944) = v0;
  swift_task_dealloc();
  uint64_t v7 = OUTLINED_FUNCTION_38();
  v8(v7);
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  OUTLINED_FUNCTION_16_1();
  *(void *)(*(void *)(v0 + 4688) + 16) = 0;
  swift_release();
  uint64_t v1 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v1);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_31_16();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  *(void *)(*(void *)(v0 + 4712) + 16) = 0;
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  return _swift_asyncLet_finish(v0 + 1296);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_31_16();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_69_3();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_19_21();
  outlined destroy of UUID?(v0, &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  OUTLINED_FUNCTION_3_2();
  OUTLINED_FUNCTION_20_2();
  return _swift_asyncLet_finish(v1);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_31_16();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_3_2();
  OUTLINED_FUNCTION_20_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_69_3();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_19_21();
  outlined destroy of UUID?(v0, &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  OUTLINED_FUNCTION_3_2();
  OUTLINED_FUNCTION_20_2();
  return _swift_asyncLet_finish(v1);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_31_16();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = v0[517];
  uint64_t v2 = v0[505];
  *(void *)(v0[606] + 16) = 0;
  swift_release();
  _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_1(v2, (void (*)(void))type metadata accessor for PhoneSnippetDataModels);
  _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_1(v1, (void (*)(void))type metadata accessor for SearchCallHistoryModel);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 427));
  return _swift_asyncLet_finish(v0 + 2);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_69_3();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_19_21();
  outlined destroy of UUID?(v0, &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  OUTLINED_FUNCTION_3_2();
  OUTLINED_FUNCTION_20_2();
  return _swift_asyncLet_finish(v1);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_31_16();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_40_0();
  uint64_t v1 = v0[517];
  uint64_t v2 = v0[505];
  *(void *)(v0[609] + 16) = 0;
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_1(v2, (void (*)(void))type metadata accessor for PhoneSnippetDataModels);
  _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_1(v1, (void (*)(void))type metadata accessor for SearchCallHistoryModel);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 427));
  OUTLINED_FUNCTION_31_1();
  return _swift_asyncLet_finish(v3);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_69_3();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_19_21();
  outlined destroy of UUID?(v0, &demangling cache variable for type metadata for SpeakableString?);
  swift_release();
  OUTLINED_FUNCTION_3_2();
  OUTLINED_FUNCTION_20_2();
  return _swift_asyncLet_finish(v1);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
}

{
  uint64_t v0;
  uint64_t v2;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_31_16();
  uint64_t v0 = OUTLINED_FUNCTION_3_2();
  return _swift_asyncLet_finish(v0);
}

{
  return OUTLINED_FUNCTION_21_1((uint64_t)ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
}

uint64_t ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_40_0();
  uint64_t v11 = v10[588];
  uint64_t v12 = (void *)v10[469];
  *(void *)(v10[589] + 32) = v12;
  specialized Array._endMutation()();
  id v13 = v12;
  specialized Array.append<A>(contentsOf:)();
  v10[591] = v11;
  ReadCallRecordsYesNoPromptFlowStrategy.getOutputGenerationManifest(responseViewId:)();
  swift_task_alloc();
  OUTLINED_FUNCTION_31_2();
  v10[592] = v17;
  void *v17 = v18;
  v17[1] = ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest();
  uint64_t v19 = v10[583];
  uint64_t v20 = v10[582];
  uint64_t v21 = v10[573];
  uint64_t v22 = v10[487];
  return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v22, v11, v21, v20, v19, v14, v15, v16, a9, a10);
}

uint64_t ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_72_4();
  OUTLINED_FUNCTION_63_4();
  uint64_t v20 = OUTLINED_FUNCTION_4_47();
  v21(v20);
  swift_release();
  uint64_t v31 = v16[553];
  uint64_t v32 = v16[535];
  uint64_t v33 = v16[517];
  uint64_t v34 = v16[505];
  __swift_destroy_boxed_opaque_existential_1(v17);
  __swift_destroy_boxed_opaque_existential_1(v18);
  __swift_destroy_boxed_opaque_existential_1(v19);
  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)&async function pointer to partial apply for implicit closure #2 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
  OUTLINED_FUNCTION_71_2((uint64_t)&async function pointer to partial apply for implicit closure #3 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_27_3();
  return v23(v22, v23, v24, v25, v26, v27, v28, v29, a9, v31, v32, v33, v34, a14, a15, a16);
}

{
  void *v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t (*v20)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_72_4();
  uint64_t v17 = OUTLINED_FUNCTION_4_47();
  v18(v17);
  swift_release();
  uint64_t v28 = v16[559];
  uint64_t v29 = v16[553];
  uint64_t v30 = v16[535];
  uint64_t v31 = v16[517];
  uint64_t v32 = v16[505];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v16 + 337));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v16 + 377));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v16 + 387));
  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)&async function pointer to partial apply for implicit closure #2 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)&async function pointer to partial apply for implicit closure #3 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)&async function pointer to partial apply for implicit closure #4 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)&async function pointer to partial apply for implicit closure #5 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_27_3();
  return v20(v19, v20, v21, v22, v23, v24, v25, v26, v28, v29, v30, v31, v32, a14, a15, a16);
}

{
  uint64_t v16;
  void (*v17)(uint64_t);
  uint64_t v18;
  uint64_t (*v19)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_72_4();
  uint64_t v16 = OUTLINED_FUNCTION_4_47();
  v17(v16);
  swift_release();
  OUTLINED_FUNCTION_13_20();
  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)&async function pointer to partial apply for implicit closure #2 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
  OUTLINED_FUNCTION_40_9((uint64_t)&async function pointer to partial apply for implicit closure #3 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_27_3();
  return v19(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10, a11, a12, a13, a14, a15, a16);
}

{
  uint64_t v16;
  void (*v17)(uint64_t);
  uint64_t v18;
  uint64_t (*v19)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_72_4();
  uint64_t v16 = OUTLINED_FUNCTION_4_47();
  v17(v16);
  swift_release();
  OUTLINED_FUNCTION_13_20();
  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)&async function pointer to partial apply for implicit closure #2 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
  OUTLINED_FUNCTION_40_9((uint64_t)&async function pointer to partial apply for implicit closure #3 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_27_3();
  return v19(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_29();
  uint64_t v15 = *(void *)(v14 + 4608);
  uint64_t v16 = *(void *)(v14 + 4600);
  uint64_t v17 = *(void *)(v14 + 4592);

  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  uint64_t v27 = *(void *)(v14 + 4136);
  uint64_t v28 = *(void *)(v14 + 4040);
  __swift_destroy_boxed_opaque_existential_1(v14 + 2696);
  __swift_destroy_boxed_opaque_existential_1(v14 + 3016);
  __swift_destroy_boxed_opaque_existential_1(v14 + 3096);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(0);
  OUTLINED_FUNCTION_71_2(0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_28_1();
  return v19(v18, v19, v20, v21, v22, v23, v24, v25, a9, v27, v28, a12, a13, a14);
}

{
  void *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_63_4();
  (*(void (**)(void, void))(v14[575] + 8))(v14[576], v14[574]);
  OUTLINED_FUNCTION_8_45();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_28_1();
  return v16(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10, a11, a12, a13, a14);
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_63_4();
  uint64_t v15 = *(void *)(v14 + 4608);
  uint64_t v16 = *(void *)(v14 + 4600);
  uint64_t v17 = *(void *)(v14 + 4592);

  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  OUTLINED_FUNCTION_8_45();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_28_1();
  return v19(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10, a11, a12, a13, a14);
}

uint64_t ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  OUTLINED_FUNCTION_31_15();
  OUTLINED_FUNCTION_83_0();
  uint64_t v18 = OUTLINED_FUNCTION_4_47();
  v19(v18);
  swift_release();
  OUTLINED_FUNCTION_2_55();
  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)&async function pointer to partial apply for implicit closure #2 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)&async function pointer to partial apply for implicit closure #3 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)&async function pointer to partial apply for implicit closure #4 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
  OUTLINED_FUNCTION_67_3((uint64_t)&async function pointer to partial apply for implicit closure #5 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_37_11();
  OUTLINED_FUNCTION_39();
  return v21(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

{
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  uint64_t (*v21)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  OUTLINED_FUNCTION_31_15();
  OUTLINED_FUNCTION_83_0();
  uint64_t v18 = OUTLINED_FUNCTION_4_47();
  v19(v18);
  swift_release();
  OUTLINED_FUNCTION_2_55();
  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)&async function pointer to partial apply for implicit closure #2 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)&async function pointer to partial apply for implicit closure #3 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)&async function pointer to partial apply for implicit closure #4 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
  OUTLINED_FUNCTION_67_3((uint64_t)&async function pointer to partial apply for implicit closure #5 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_37_11();
  OUTLINED_FUNCTION_39();
  return v21(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

{
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  uint64_t (*v21)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  OUTLINED_FUNCTION_31_15();
  OUTLINED_FUNCTION_83_0();
  uint64_t v18 = OUTLINED_FUNCTION_4_47();
  v19(v18);
  swift_release();
  OUTLINED_FUNCTION_2_55();
  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)&async function pointer to partial apply for implicit closure #2 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)&async function pointer to partial apply for implicit closure #3 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)&async function pointer to partial apply for implicit closure #4 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
  OUTLINED_FUNCTION_67_3((uint64_t)&async function pointer to partial apply for implicit closure #5 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_37_11();
  OUTLINED_FUNCTION_39();
  return v21(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

{
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  uint64_t (*v21)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  OUTLINED_FUNCTION_31_15();
  OUTLINED_FUNCTION_83_0();
  uint64_t v18 = OUTLINED_FUNCTION_4_47();
  v19(v18);
  swift_release();
  OUTLINED_FUNCTION_2_55();
  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)&async function pointer to partial apply for implicit closure #2 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)&async function pointer to partial apply for implicit closure #3 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)&async function pointer to partial apply for implicit closure #4 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
  OUTLINED_FUNCTION_67_3((uint64_t)&async function pointer to partial apply for implicit closure #5 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest());
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_37_11();
  OUTLINED_FUNCTION_39();
  return v21(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

uint64_t implicit closure #2 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  void v6[4] = a3;
  uint64_t v6[5] = a4;
  long long v6[2] = a1;
  v6[3] = a2;
  return _swift_task_switch(implicit closure #2 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest(), 0, 0);
}

void implicit closure #2 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest()()
{
  OUTLINED_FUNCTION_16_1();
  if (*(void *)(*(void *)(v0 + 24) + 16) >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_2();
  uint64_t v3 = *(void *)(class metadata base offset for SearchCallHistoryCATsSimple + v1 + 304)
     + **(int **)(class metadata base offset for SearchCallHistoryCATsSimple + v1 + 304);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v2;
  *uint64_t v2 = v0;
  v2[1] = implicit closure #2 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest();
  __asm { BRAA            X9, X16 }
}

uint64_t implicit closure #2 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest()()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_13_1();
    return v9();
  }
  else
  {
    *(void *)(v5 + 72) = v3;
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v11, v12, v13);
  }
}

{
  uint64_t v0;

  return OUTLINED_FUNCTION_20_19(*(void *)(v0 + 72));
}

uint64_t implicit closure #3 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(implicit closure #3 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest(), 0, 0);
}

uint64_t implicit closure #3 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest()()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v1 = *(void **)(*(void *)(v0 + 24) + 80);
  char v2 = WindowedPaginationParameters.isLastWindow.getter();
  uint64_t v5 = (uint64_t (*)(void))(*(void *)(class metadata base offset for SearchCallHistoryCATsSimple
                                                  + *v1
                                                  + 192)
                                      + **(int **)(class metadata base offset for SearchCallHistoryCATsSimple + *v1 + 192));
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v3;
  *uint64_t v3 = v0;
  v3[1] = implicit closure #3 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest();
  return v5(v2 & 1);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_16_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_13_1();
    return v9();
  }
  else
  {
    *(void *)(v5 + 40) = v3;
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v11, v12, v13);
  }
}

{
  uint64_t v0;

  return OUTLINED_FUNCTION_20_19(*(void *)(v0 + 40));
}

uint64_t implicit closure #4 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  void v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(implicit closure #4 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest(), 0, 0);
}

uint64_t implicit closure #4 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest()()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v1 = *(int **)(class metadata base offset for PhoneCallDisplayTextCATsSimple + **(void **)(v0[3] + 88) + 248);
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)v1 + *v1);
  char v2 = (void *)swift_task_alloc();
  v0[5] = v2;
  *char v2 = v0;
  v2[1] = implicit closure #4 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest();
  uint64_t v3 = v0[4];
  return v5(v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_16_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_13_1();
    return v9();
  }
  else
  {
    *(void *)(v5 + 48) = v3;
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v11, v12, v13);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  OUTLINED_FUNCTION_16_1();
  uint64_t v1 = *(uint64_t **)(v0 + 16);
  char v2 = dispatch thunk of LabelExecutionResult.subscript.getter();
  uint64_t v4 = v3;
  swift_release();
  *uint64_t v1 = v2;
  v1[1] = v4;
  OUTLINED_FUNCTION_6_0();
  return v5();
}

uint64_t implicit closure #5 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(implicit closure #5 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest(), 0, 0);
}

uint64_t implicit closure #5 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest()()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v1 = (void *)(class metadata base offset for SearchCallHistoryCATsSimple
                + **(void **)(*(void *)(v0 + 24) + 80)
                + 568);
  uint64_t v4 = (uint64_t (*)(void))(*v1 + *(int *)*v1);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v2;
  *uint64_t v2 = v0;
  v2[1] = implicit closure #5 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest();
  return v4();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_16_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_13_1();
    return v9();
  }
  else
  {
    *(void *)(v5 + 40) = v3;
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v11, v12, v13);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  OUTLINED_FUNCTION_16_1();
  uint64_t v1 = *(uint64_t **)(v0 + 16);
  *(unsigned char *)(v0 + 48) = 1;
  uint64_t v2 = dispatch thunk of LabelExecutionResult.subscript.getter();
  uint64_t v4 = v3;
  swift_release();
  *uint64_t v1 = v2;
  v1[1] = v4;
  OUTLINED_FUNCTION_6_0();
  return v5();
}

double closure #2 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest()(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v43 = a4;
  uint64_t v7 = type metadata accessor for Locale();
  uint64_t v39 = *(void *)(v7 - 8);
  uint64_t v40 = v7;
  __chkstk_darwin(v7);
  uint64_t v38 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  __chkstk_darwin(v9 - 8);
  uint64_t v41 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SirikitDeviceState();
  uint64_t v11 = a2[16];
  uint64_t v12 = a2[17];
  __swift_project_boxed_opaque_existential_1(a2 + 13, v11);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v12 + 8))(v44, v11, v12);
  uint64_t v13 = SirikitDeviceState.__allocating_init(from:)();
  uint64_t v14 = (int *)type metadata accessor for SearchCallHistoryReadMultipleCallRecordsParameters(0);
  uint64_t v15 = v14[12];
  swift_release();
  *(void *)(a1 + v15) = v13;
  uint64_t v16 = a2[20];
  uint64_t v17 = v14[13];
  swift_retain();
  swift_release();
  *(void *)(a1 + v17) = v16;
  uint64_t v18 = INSearchCallHistoryIntentResponse.callRecordsCount.getter();
  uint64_t v19 = a1 + v14[6];
  *(double *)uint64_t v19 = (double)v18;
  *(unsigned char *)(v19 + 8) = 0;
  INSearchCallHistoryIntentResponse.totalCallRecordsCount.getter();
  uint64_t v42 = v14;
  uint64_t v21 = a1 + v14[20];
  *(double *)uint64_t v21 = (double)v20;
  *(unsigned char *)(v21 + 8) = 0;
  uint64_t v22 = a3[3];
  uint64_t v23 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v22);
  uint64_t v25 = a2[17];
  uint64_t v24 = a2[18];
  uint64_t v26 = a2[16];
  __swift_project_boxed_opaque_existential_1(a2 + 13, v26);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v25 + 8))(v44, v26, v25);
  __swift_project_boxed_opaque_existential_1(v44, v44[3]);
  uint64_t v27 = v38;
  dispatch thunk of DeviceState.siriLocale.getter();
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v23 + 16))(v24, v27, v22, v23);
  uint64_t v29 = v28;
  (*(void (**)(char *, uint64_t))(v39 + 8))(v27, v40);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  if (v29)
  {
    swift_bridgeObjectRetain();
    uint64_t v30 = v41;
    SpeakableString.init(print:speak:)();
    uint64_t v31 = type metadata accessor for SpeakableString();
    __swift_storeEnumTagSinglePayload(v30, 0, 1, v31);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v31 = type metadata accessor for SpeakableString();
    uint64_t v30 = v41;
    __swift_storeEnumTagSinglePayload(v41, 1, 1, v31);
  }
  uint64_t v32 = v42;
  outlined assign with take of SpeakableString?(v30, a1 + v42[5]);
  outlined destroy of UUID?(a1, &demangling cache variable for type metadata for SpeakableString?);
  type metadata accessor for SpeakableString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 16))(a1, v43, v31);
  __swift_storeEnumTagSinglePayload(a1, 0, 1, v31);
  unint64_t v33 = a2[2];
  if (v33 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v34 = *(void *)((char *)&dword_10 + (v33 & 0xFFFFFFFFFFFFFF8));
  }
  double result = (double)v34;
  uint64_t v36 = a1 + v32[21];
  *(double *)uint64_t v36 = (double)v34;
  *(unsigned char *)(v36 + 8) = 0;
  return result;
}

uint64_t ReadCallRecordsYesNoPromptFlowStrategy.getOutputGenerationManifest(responseViewId:)()
{
  uint64_t v0 = type metadata accessor for DialogPhase();
  uint64_t v1 = OUTLINED_FUNCTION_11_0(v0);
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_52();
  static DialogPhase.confirmation.getter();
  return OutputGenerationManifest.init(dialogPhase:_:)();
}

uint64_t closure #1 in ReadCallRecordsYesNoPromptFlowStrategy.getOutputGenerationManifest(responseViewId:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = OutputGenerationManifest.canUseServerTTS.setter();
  specialized static PhoneCallNLContextProvider.makeGenericConfirmationNLv3Context()(v3);
  specialized static PhoneCallNLContextProvider.makeSDAForOfferReadCallHistoryConfirmation()();
  NLContextUpdate.nluSystemDialogActs.setter();
  uint64_t v4 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload((uint64_t)v2, 0, 1, v4);
  OutputGenerationManifest.nlContextUpdate.setter();
  WindowedPaginationParameters.isLastWindow.getter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  swift_bridgeObjectRetain();
  return OutputGenerationManifest.responseViewId.setter();
}

uint64_t ReadCallRecordsYesNoPromptFlowStrategy.deinit()
{
  swift_bridgeObjectRelease();

  __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 104);
  swift_release();
  swift_release();
  outlined destroy of SearchCallHistorySharedGlobals(v0 + 168);
  type metadata accessor for WindowedPaginationParameters();
  OUTLINED_FUNCTION_15();
  OUTLINED_FUNCTION_11();
  v1();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ReadCallRecordsYesNoPromptFlowStrategy.__deallocating_deinit()
{
  ReadCallRecordsYesNoPromptFlowStrategy.deinit();
  OUTLINED_FUNCTION_2();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for YesNoPromptFlowStrategy.makePromptForYesNoResponse() in conformance ReadCallRecordsYesNoPromptFlowStrategy(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 224) + **(int **)(*(void *)v1 + 224));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return v6(a1);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.actionForInput(_:) in conformance ReadCallRecordsYesNoPromptFlowStrategy()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.parseConfirmationResponse(input:) in conformance ReadCallRecordsYesNoPromptFlowStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 232) + **(int **)(*(void *)v2 + 232));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = UnsupportedFlowCATs.deleteVoicemail();
  return v8(a1, a2);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makePromptForConfirmation(itemToConfirm:) in conformance ReadCallRecordsYesNoPromptFlowStrategy(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 208) + **(int **)(*(void *)v1 + 208));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = UnsupportedFlowCATs.deleteVoicemail();
  return v6(a1);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:) in conformance ReadCallRecordsYesNoPromptFlowStrategy(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  uint64_t v4 = type metadata accessor for ReadCallRecordsYesNoPromptFlowStrategy();
  uint64_t v5 = _s27PhoneCallFlowDelegatePlugin0A5ErrorOACs0F0AAWlTm_0(&lazy protocol witness table cache variable for type ReadCallRecordsYesNoPromptFlowStrategy and conformance ReadCallRecordsYesNoPromptFlowStrategy, (void (*)(uint64_t))type metadata accessor for ReadCallRecordsYesNoPromptFlowStrategy);
  *uint64_t v3 = v1;
  v3[1] = UnsupportedFlowCATs.deleteVoicemail();
  return YesNoPromptFlowStrategy.makeRepromptOnEmptyParse(itemToConfirm:)(a1, v4, v5);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:) in conformance ReadCallRecordsYesNoPromptFlowStrategy(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  uint64_t v4 = type metadata accessor for ReadCallRecordsYesNoPromptFlowStrategy();
  uint64_t v5 = _s27PhoneCallFlowDelegatePlugin0A5ErrorOACs0F0AAWlTm_0(&lazy protocol witness table cache variable for type ReadCallRecordsYesNoPromptFlowStrategy and conformance ReadCallRecordsYesNoPromptFlowStrategy, (void (*)(uint64_t))type metadata accessor for ReadCallRecordsYesNoPromptFlowStrategy);
  *uint64_t v3 = v1;
  v3[1] = UnsupportedFlowCATs.deleteVoicemail();
  return YesNoPromptFlowStrategy.makeRepromptOnLowConfidence(itemToConfirm:)(a1, v4, v5);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeConfirmationRejectedResponse() in conformance ReadCallRecordsYesNoPromptFlowStrategy(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 216) + **(int **)(*(void *)v1 + 216));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = UnsupportedFlowCATs.deleteVoicemail();
  return v6(a1);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeFlowCancelledResponse() in conformance ReadCallRecordsYesNoPromptFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = UnsupportedFlowCATs.deleteVoicemail();
  return PromptForConfirmationFlowStrategyAsync.makeFlowCancelledResponse()(a1, a2, a3);
}

uint64_t protocol witness for PromptForConfirmationFlowStrategyAsync.makeErrorResponse(_:) in conformance ReadCallRecordsYesNoPromptFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = UnsupportedFlowCATs.deleteVoicemail();
  return PromptForConfirmationFlowStrategyAsync.makeErrorResponse(_:)(a1, a2, a3, a4);
}

uint64_t base witness table accessor for PromptForConfirmationFlowStrategyAsync in ReadCallRecordsYesNoPromptFlowStrategy()
{
  return _s27PhoneCallFlowDelegatePlugin0A5ErrorOACs0F0AAWlTm_0(&lazy protocol witness table cache variable for type ReadCallRecordsYesNoPromptFlowStrategy and conformance ReadCallRecordsYesNoPromptFlowStrategy, (void (*)(uint64_t))type metadata accessor for ReadCallRecordsYesNoPromptFlowStrategy);
}

void *associated type witness table accessor for PromptForConfirmationFlowStrategyAsync.AnswerType : ConfirmationResponseProviding in ReadCallRecordsYesNoPromptFlowStrategy()
{
  return &protocol witness table for SimpleConfirmationResponseProvider;
}

uint64_t ObjC metadata update function for ReadCallRecordsYesNoPromptFlowStrategy()
{
  return type metadata accessor for ReadCallRecordsYesNoPromptFlowStrategy();
}

uint64_t type metadata completion function for ReadCallRecordsYesNoPromptFlowStrategy()
{
  uint64_t result = type metadata accessor for WindowedPaginationParameters();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t partial apply for closure #1 in ReadCallRecordsYesNoPromptFlowStrategy.getOutputGenerationManifest(responseViewId:)()
{
  return closure #1 in ReadCallRecordsYesNoPromptFlowStrategy.getOutputGenerationManifest(responseViewId:)();
}

double partial apply for closure #2 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest()(uint64_t a1)
{
  return closure #2 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest()(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1743C4()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t partial apply for implicit closure #2 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest()()
{
  OUTLINED_FUNCTION_18_3();
  uint64_t v2 = v1;
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[6];
  uint64_t v8 = swift_task_alloc();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_17_0(v8);
  *uint64_t v9 = v10;
  v9[1] = UnsupportedFlowCATs.deleteVoicemail();
  return implicit closure #2 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest()(v2, v3, v4, v5, v6, v7);
}

uint64_t partial apply for implicit closure #3 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest()()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v2 = v1;
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)OUTLINED_FUNCTION_17_0(v3);
  *uint64_t v4 = v5;
  v4[1] = UnsupportedFlowCATs.deleteVoicemail();
  return implicit closure #3 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest()(v2, v0);
}

uint64_t sub_174568()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_19_0(v1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v6 = *(void *)(v5 + 64);
  swift_release();
  uint64_t v7 = type metadata accessor for SpeakableString();
  if (!__swift_getEnumTagSinglePayload(v0 + v4, 1, v7))
  {
    uint64_t v8 = OUTLINED_FUNCTION_38();
    v9(v8);
  }

  return _swift_deallocObject(v0, v4 + v6, v3 | 7);
}

uint64_t partial apply for implicit closure #4 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest()()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?)
                 - 8);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = v0 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  uint64_t v6 = swift_task_alloc();
  uint64_t v7 = (void *)OUTLINED_FUNCTION_17_0(v6);
  *uint64_t v7 = v8;
  v7[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return implicit closure #4 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest()(v2, v4, v5);
}

uint64_t partial apply for implicit closure #5 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest()()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v2 = v1;
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)OUTLINED_FUNCTION_17_0(v3);
  *uint64_t v4 = v5;
  v4[1] = UnsupportedFlowCATs.deleteVoicemail();
  return implicit closure #5 in ReadCallRecordsYesNoPromptFlowStrategy.executePatternAndManifest()(v2, v0);
}

uint64_t _s27PhoneCallFlowDelegatePlugin0A5ErrorOACs0F0AAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of SearchCallHistoryModel(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_15();
  uint64_t v4 = OUTLINED_FUNCTION_74();
  v5(v4);
  return a2;
}

uint64_t _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_1(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_15();
  OUTLINED_FUNCTION_11();
  v3();
  return a1;
}

uint64_t OUTLINED_FUNCTION_2_55()
{
  __swift_destroy_boxed_opaque_existential_1(v0);
  __swift_destroy_boxed_opaque_existential_1(v1);
  return __swift_destroy_boxed_opaque_existential_1(v2);
}

uint64_t OUTLINED_FUNCTION_4_47()
{
  return *(void *)(v0 + 4608);
}

uint64_t OUTLINED_FUNCTION_8_45()
{
  __swift_destroy_boxed_opaque_existential_1(v0);
  __swift_destroy_boxed_opaque_existential_1(v1);
  __swift_destroy_boxed_opaque_existential_1(v2);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(0);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(0);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(0);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(0);
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_13_20()
{
  __swift_destroy_boxed_opaque_existential_1(v0);
  __swift_destroy_boxed_opaque_existential_1(v1);
  return __swift_destroy_boxed_opaque_existential_1(v2);
}

uint64_t OUTLINED_FUNCTION_19_21()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_20_19@<X0>(uint64_t a1@<X8>)
{
  **(void **)(v1 + 16) = a1;
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t OUTLINED_FUNCTION_31_16()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_36_14()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_37_11()
{
  return v0 + 8;
}

uint64_t OUTLINED_FUNCTION_38_10(uint64_t a1)
{
  *(void *)(v1 + 32) = a1;
  *(void *)(v2 - 96) = v1;
  return specialized Array._endMutation()();
}

__n128 *OUTLINED_FUNCTION_53_6(__n128 *result, __n128 a2)
{
  result[1] = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_54_6()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_67_3(uint64_t a1)
{
  outlined consume of (@escaping @callee_guaranteed () -> ())?(a1);
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_69_3()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_71_2(uint64_t a1)
{
  outlined consume of (@escaping @callee_guaranteed () -> ())?(a1);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(0);
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(0);
}

uint64_t specialized Sequence.allSatisfy(_:)(uint64_t (*a1)(void *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  v17[3] = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) != 0) {
    uint64_t v5 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v5)
  {
    uint64_t v16 = a4 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    uint64_t v9 = 0;
    while (1)
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        int v10 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          v17[0] = a3;
          v17[1] = v16;
        }
        else if ((a3 & 0x1000000000000000) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }
        int v10 = _decodeScalar(_:startingAt:)();
      }
      uint64_t v12 = v11;
      LODWORD(v17[0]) = v10;
      char v13 = a1(v17);
      if (v4)
      {
        swift_bridgeObjectRelease();
        return v14 & 1;
      }
      if ((v13 & 1) == 0) {
        break;
      }
      v9 += v12;
      if (v9 >= v5)
      {
        swift_bridgeObjectRelease();
        goto LABEL_17;
      }
    }
    swift_bridgeObjectRelease();
    char v14 = 0;
  }
  else
  {
LABEL_17:
    char v14 = 1;
  }
  return v14 & 1;
}

uint64_t specialized Sequence.allSatisfy(_:)(uint64_t (*a1)(uint64_t *), uint64_t a2, unint64_t a3)
{
  return specialized Sequence.allSatisfy(_:)(a1, a2, a3) & 1;
}

{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  uint64_t v14;

  if (a3 >> 62) {
    goto LABEL_16;
  }
  uint64_t v5 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v6 = 4;
    while (1)
    {
      if ((a3 & 0xC000000000000001) != 0)
      {
        uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v7 = *(void *)(a3 + 8 * v6);
        swift_retain();
      }
      uint64_t v8 = v6 - 3;
      if (__OFADD__(v6 - 4, 1)) {
        break;
      }
      char v14 = v7;
      uint64_t v9 = a1(&v14);
      if (v3)
      {
        swift_bridgeObjectRelease();
        swift_release();
        return v11 & 1;
      }
      int v10 = v9;
      swift_release();
      if ((v10 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v11 = 0;
        return v11 & 1;
      }
      ++v6;
      if (v8 == v5) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_11:
  swift_bridgeObjectRelease();
  uint64_t v11 = 1;
  return v11 & 1;
}

uint64_t specialized Sequence.allSatisfy(_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62) {
    goto LABEL_13;
  }
  uint64_t v9 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  for (; v9; uint64_t v9 = _CocoaArrayWrapper.endIndex.getter())
  {
    v14[1] = v3;
    uint64_t v3 = 4;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      uint64_t v10 = v3 - 3;
      if (__OFADD__(v3 - 4, 1)) {
        break;
      }
      v14[3] = a2;
      swift_retain();
      swift_getAtKeyPath();
      swift_release();
      uint64_t v11 = type metadata accessor for SpeakableString();
      int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v11);
      outlined destroy of FlowActivity?((uint64_t)v8, &demangling cache variable for type metadata for SpeakableString?);
      swift_release();
      if (EnumTagSinglePayload != 1)
      {
        swift_release();
        swift_bridgeObjectRelease();
        return 0;
      }
      ++v3;
      if (v10 == v9) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
LABEL_14:
  swift_release();
  swift_bridgeObjectRelease();
  return 1;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;

  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v5 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v6 = 4;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v7 = *(void *)(a1 + 8 * v6);
        swift_retain();
      }
      uint64_t v8 = v6 - 3;
      if (__OFADD__(v6 - 4, 1)) {
        break;
      }
      uint64_t v9 = specialized closure #1 in PhonePersonWithAliasesListProperties<>.allSameFamilyName.getter(v7, a2);
      if (v2)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        return v11 & 1;
      }
      uint64_t v10 = v9;
      swift_release();
      if ((v10 & 1) == 0)
      {
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v11 = 0;
        return v11 & 1;
      }
      ++v6;
      if (v8 == v5) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_11:
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v11 = 1;
  return v11 & 1;
}

uint64_t PhonePersonListProperties.allSameGivenName.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  unint64_t v5 = (*(uint64_t (**)(void))(a2 + 8))();
  v7[2] = a1;
  v7[3] = v3;
  uint64_t v8 = v2;
  LOBYTE(v3) = specialized Sequence.allSatisfy(_:)((uint64_t (*)(uint64_t *))partial apply for closure #1 in PhonePersonListProperties.allSameGivenName.getter, (uint64_t)v7, v5);
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t PhonePersonListProperties.isUnnamedPhoneNumber.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = *(void *)(a1 - 8);
  __chkstk_darwin(a1);
  OUTLINED_FUNCTION_12_0();
  uint64_t v8 = *(uint64_t (**)(void))(v7 + 8);
  unint64_t v9 = v8();
  if (v9 >> 62) {
    goto LABEL_24;
  }
  for (uint64_t i = *(void *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFFF8)); ; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 16))(v3, v2, a1);
    if (!i)
    {
      char v14 = 0;
      goto LABEL_14;
    }
    unint64_t v11 = ((uint64_t (*)(uint64_t, unint64_t))v8)(a1, a2);
    a2 = v11;
    if (v11 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
      if (!v12)
      {
LABEL_10:
        char v14 = 1;
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v12 = *(void *)((char *)&dword_10 + (v11 & 0xFFFFFFFFFFFFFF8));
      swift_bridgeObjectRetain();
      if (!v12) {
        goto LABEL_10;
      }
    }
    if ((a2 & 0xC000000000000001) != 0) {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      swift_retain();
    }
    char v13 = specialized PhonePersonProperties<>.isUnnamedPhoneNumber.getter();
    swift_release();
    if ((v13 & 1) == 0) {
      break;
    }
    if (v12 == 1) {
      goto LABEL_10;
    }
    uint64_t v8 = (uint64_t (*)(void))(&dword_4 + 1);
    while (1)
    {
      uint64_t v2 = (char *)v8 - 4;
      if ((a2 & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      uint64_t v16 = (char *)v8 - 3;
      if (__OFADD__(v2, 1)) {
        break;
      }
      char v14 = specialized PhonePersonProperties<>.isUnnamedPhoneNumber.getter();
      swift_release();
      if (v14)
      {
        uint64_t v8 = (uint64_t (*)(void))((char *)v8 + 1);
        if (v16 != (char *)v12) {
          continue;
        }
      }
      goto LABEL_13;
    }
    __break(1u);
LABEL_24:
    ;
  }
  char v14 = 0;
LABEL_13:
  swift_bridgeObjectRelease_n();
LABEL_14:
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v3, a1);
  return v14 & 1;
}

uint64_t PhonePersonListProperties.hasHandleLabels.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  __chkstk_darwin(v5 - 8);
  OUTLINED_FUNCTION_12_0();
  unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
  unint64_t v7 = v6;
  if (v6 >> 62) {
    goto LABEL_21;
  }
  uint64_t v8 = *(void *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  for (; v8; uint64_t v8 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v9 = 4;
    while (1)
    {
      if ((v7 & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      uint64_t v10 = v9 - 3;
      if (__OFADD__(v9 - 4, 1)) {
        break;
      }
      if (!DialogPerson.personHandle.getter()) {
        goto LABEL_17;
      }
      DialogPersonHandle.label.getter();
      swift_release();
      uint64_t v11 = type metadata accessor for SpeakableString();
      if (__swift_getEnumTagSinglePayload(v2, 1, v11) == 1)
      {
        outlined destroy of FlowActivity?(v2, &demangling cache variable for type metadata for SpeakableString?);
LABEL_17:
        OUTLINED_FUNCTION_2_16();
        swift_release();
        return 0;
      }
      uint64_t v12 = SpeakableString.print.getter();
      unint64_t v14 = v13;
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_11();
      v15();
      if (!v14) {
        goto LABEL_17;
      }
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v16 = HIBYTE(v14) & 0xF;
      if ((v14 & 0x2000000000000000) == 0) {
        uint64_t v16 = v12 & 0xFFFFFFFFFFFFLL;
      }
      if (!v16)
      {
        OUTLINED_FUNCTION_2_16();
        return 0;
      }
      ++v9;
      if (v10 == v8) {
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_21:
    OUTLINED_FUNCTION_32_3();
  }
LABEL_15:
  OUTLINED_FUNCTION_2_16();
  return 1;
}

uint64_t PhonePersonListProperties.hasDifferentNameAndLabel.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v27 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v27 - v7;
  unint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
  unint64_t v10 = v9;
  if (v9 >> 62)
  {
LABEL_32:
    OUTLINED_FUNCTION_32_3();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    if (v11) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v11 = *(void *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (v11)
    {
LABEL_3:
      unint64_t v29 = v10;
      unint64_t v30 = v10 & 0xC000000000000001;
      uint64_t v12 = 4;
      uint64_t v28 = v11;
      do
      {
        if (v30) {
          specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          swift_retain();
        }
        uint64_t v13 = v12 - 3;
        if (__OFADD__(v12 - 4, 1))
        {
          __break(1u);
          goto LABEL_32;
        }
        dispatch thunk of DialogPerson.toString.getter();
        uint64_t v14 = type metadata accessor for SpeakableString();
        if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v14) == 1)
        {
          outlined destroy of FlowActivity?((uint64_t)v8, &demangling cache variable for type metadata for SpeakableString?);
          uint64_t countAndFlagsBits = 0;
          object = 0;
        }
        else
        {
          SpeakableString.print.getter();
          OUTLINED_FUNCTION_10();
          OUTLINED_FUNCTION_11();
          v17();
          Swift::String v18 = String.lowercased()();
          uint64_t countAndFlagsBits = v18._countAndFlagsBits;
          object = v18._object;
          swift_bridgeObjectRelease();
        }
        uint64_t v19 = DialogPerson.personHandle.getter();
        if (v19)
        {
          uint64_t v20 = (uint64_t)v27;
          DialogPersonHandle.label.getter();
          swift_release();
          if (__swift_getEnumTagSinglePayload(v20, 1, v14) == 1)
          {
            outlined destroy of FlowActivity?(v20, &demangling cache variable for type metadata for SpeakableString?);
            uint64_t v21 = 0;
            uint64_t v19 = 0;
            if (!object) {
              goto LABEL_24;
            }
          }
          else
          {
            SpeakableString.print.getter();
            OUTLINED_FUNCTION_10();
            OUTLINED_FUNCTION_11();
            v24();
            Swift::String v25 = String.lowercased()();
            uint64_t v21 = v25._countAndFlagsBits;
            uint64_t v19 = (uint64_t)v25._object;
            swift_bridgeObjectRelease();
            if (!object)
            {
LABEL_24:
              if (!v19)
              {
                swift_bridgeObjectRelease_n();
                swift_release();
                return 0;
              }
LABEL_25:
              swift_release();
              unint64_t v10 = v29;
              swift_bridgeObjectRelease();
              goto LABEL_26;
            }
          }
        }
        else
        {
          uint64_t v21 = 0;
          if (!object) {
            goto LABEL_24;
          }
        }
        if (!v19) {
          goto LABEL_25;
        }
        if (countAndFlagsBits == v21 && object == (void *)v19)
        {
          swift_bridgeObjectRelease_n();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 0;
        }
        char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v10 = v29;
        if (v23)
        {
          OUTLINED_FUNCTION_2_16();
          return 0;
        }
LABEL_26:
        ++v12;
      }
      while (v13 != v28);
    }
  }
  OUTLINED_FUNCTION_2_16();
  return 1;
}

uint64_t closure #1 in PhonePersonListProperties.allSameGivenName.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  uint64_t v32 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v31 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SpeakableString?, SpeakableString?));
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  unint64_t v33 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v30 - v15;
  __chkstk_darwin(v14);
  Swift::String v18 = (char *)&v30 - v17;
  DialogPerson.givenName.getter();
  unint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  unint64_t v20 = v19;
  if (v19 >> 62) {
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v21 = *(void *)((char *)&dword_10 + (v19 & 0xFFFFFFFFFFFFFF8));
  }
  if (v21 <= 0)
  {
    swift_bridgeObjectRelease();
    __swift_storeEnumTagSinglePayload((uint64_t)v16, 1, 1, v6);
  }
  else
  {
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v20 & 0xC000000000000001) == 0, v20);
    if ((v20 & 0xC000000000000001) != 0) {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      swift_retain();
    }
    swift_bridgeObjectRelease();
    DialogPerson.givenName.getter();
    swift_release();
  }
  uint64_t v22 = (uint64_t)&v10[*(int *)(v8 + 48)];
  outlined init with copy of SpeakableString?((uint64_t)v18, (uint64_t)v10);
  outlined init with copy of SpeakableString?((uint64_t)v16, v22);
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v6) == 1)
  {
    char v23 = &demangling cache variable for type metadata for SpeakableString?;
    outlined destroy of FlowActivity?((uint64_t)v16, &demangling cache variable for type metadata for SpeakableString?);
    outlined destroy of FlowActivity?((uint64_t)v18, &demangling cache variable for type metadata for SpeakableString?);
    if (__swift_getEnumTagSinglePayload(v22, 1, v6) == 1)
    {
      char v24 = -1;
    }
    else
    {
      char v23 = &demangling cache variable for type metadata for (SpeakableString?, SpeakableString?);
      char v24 = 0;
    }
  }
  else
  {
    uint64_t v25 = (uint64_t)v33;
    outlined init with copy of SpeakableString?((uint64_t)v10, (uint64_t)v33);
    if (__swift_getEnumTagSinglePayload(v22, 1, v6) == 1)
    {
      outlined destroy of FlowActivity?((uint64_t)v16, &demangling cache variable for type metadata for SpeakableString?);
      outlined destroy of FlowActivity?((uint64_t)v18, &demangling cache variable for type metadata for SpeakableString?);
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v25, v6);
      char v24 = 0;
      char v23 = &demangling cache variable for type metadata for (SpeakableString?, SpeakableString?);
    }
    else
    {
      uint64_t v27 = v31;
      uint64_t v26 = v32;
      (*(void (**)(char *, uint64_t, uint64_t))(v32 + 32))(v31, v22, v6);
      lazy protocol witness table accessor for type SpeakableString and conformance SpeakableString();
      char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v28 = *(void (**)(char *, uint64_t))(v26 + 8);
      v28(v27, v6);
      char v23 = &demangling cache variable for type metadata for SpeakableString?;
      outlined destroy of FlowActivity?((uint64_t)v16, &demangling cache variable for type metadata for SpeakableString?);
      outlined destroy of FlowActivity?((uint64_t)v18, &demangling cache variable for type metadata for SpeakableString?);
      v28(v33, v6);
    }
  }
  outlined destroy of FlowActivity?((uint64_t)v10, v23);
  return v24 & 1;
}

uint64_t partial apply for closure #1 in PhonePersonListProperties.allSameGivenName.getter(uint64_t a1)
{
  return closure #1 in PhonePersonListProperties.allSameGivenName.getter(a1, v1[4], v1[2], v1[3]) & 1;
}

uint64_t specialized PhonePersonProperties<>.isUnnamedPhoneNumber.getter()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  unint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_4705E0;
  *(void *)(inited + 32) = swift_getKeyPath();
  *(void *)(inited + 40) = swift_getKeyPath();
  *(void *)(inited + 48) = swift_getKeyPath();
  *(void *)(inited + 56) = swift_getKeyPath();
  *(void *)(inited + 64) = swift_getKeyPath();
  specialized Array._endMutation()();
  swift_retain();
  LOBYTE(v1) = specialized Sequence.allSatisfy(_:)(inited, v1);
  swift_bridgeObjectRelease();
  return v1 & 1;
}

unint64_t lazy protocol witness table accessor for type SpeakableString and conformance SpeakableString()
{
  unint64_t result = lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString;
  if (!lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString)
  {
    type metadata accessor for SpeakableString();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString);
  }
  return result;
}

uint64_t Publisher.sink(receiveResultCompletion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = a3;
  void v8[3] = a4;
  v8[4] = a1;
  uint64_t v8[5] = a2;
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = a3;
  v9[3] = a4;
  v9[4] = a1;
  v9[5] = a2;
  swift_retain_n();
  uint64_t v10 = Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  return v10;
}

uint64_t closure #1 in Publisher.sink(receiveResultCompletion:)(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  uint64_t v18 = a3;
  unint64_t v19 = a2;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for Result();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t v9 = type metadata accessor for Subscribers.Completion();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v18 - v12;
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v18 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, v9);
  if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, AssociatedTypeWitness) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v13, AssociatedTypeWitness);
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v8, v16, AssociatedTypeWitness);
  swift_storeEnumTagMultiPayload();
  v19(v8);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
}

uint64_t sub_1761B4()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t partial apply for closure #1 in Publisher.sink(receiveResultCompletion:)(uint64_t a1)
{
  return closure #1 in Publisher.sink(receiveResultCompletion:)(a1, *(void (**)(char *))(v1 + 32), *(void *)(v1 + 40));
}

uint64_t closure #2 in Publisher.sink(receiveResultCompletion:)(uint64_t a1, void (*a2)(char *))
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for Result();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - v7;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))((char *)&v10 - v7, a1, AssociatedTypeWitness);
  swift_storeEnumTagMultiPayload();
  a2(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t partial apply for closure #2 in Publisher.sink(receiveResultCompletion:)(uint64_t a1)
{
  return closure #2 in Publisher.sink(receiveResultCompletion:)(a1, *(void (**)(char *))(v1 + 32));
}

uint64_t key path setter for AppSelectionState.forcedDisambiguationShadowPrediction : AppSelectionState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppResolverResult?);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AppResolverResult?(a1, (uint64_t)v6);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 96))(v6);
}

uint64_t AppSelectionState.forcedDisambiguationShadowPrediction.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17AppSelectionState_forcedDisambiguationShadowPrediction;
  swift_beginAccess();
  return outlined init with copy of AppResolverResult?(v3, a1);
}

uint64_t outlined init with copy of AppResolverResult?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppResolverResult?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t AppSelectionState.forcedDisambiguationShadowPrediction.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17AppSelectionState_forcedDisambiguationShadowPrediction;
  OUTLINED_FUNCTION_0_38();
  outlined assign with take of AppResolverResult?(a1, v3);
  return swift_endAccess();
}

uint64_t outlined assign with take of AppResolverResult?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppResolverResult?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*AppSelectionState.forcedDisambiguationShadowPrediction.modify())()
{
  return static SingleResultVoicemailModel.resultViewID.modify;
}

uint64_t AppSelectionState.__allocating_init(forcedDisambiguationPrediction:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = v2 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17AppSelectionState_forcedDisambiguationShadowPrediction;
  uint64_t v4 = type metadata accessor for AppResolverResult();
  __swift_storeEnumTagSinglePayload(v3, 1, 1, v4);
  OUTLINED_FUNCTION_0_38();
  outlined assign with take of AppResolverResult?(a1, v3);
  swift_endAccess();
  return v2;
}

uint64_t AppSelectionState.init(forcedDisambiguationPrediction:)(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17AppSelectionState_forcedDisambiguationShadowPrediction;
  uint64_t v4 = type metadata accessor for AppResolverResult();
  __swift_storeEnumTagSinglePayload(v3, 1, 1, v4);
  OUTLINED_FUNCTION_0_38();
  outlined assign with take of AppResolverResult?(a1, v3);
  swift_endAccess();
  return v1;
}

uint64_t AppSelectionState.deinit()
{
  outlined destroy of AppResolverResult?(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17AppSelectionState_forcedDisambiguationShadowPrediction);
  return v0;
}

uint64_t outlined destroy of AppResolverResult?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppResolverResult?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t AppSelectionState.__deallocating_deinit()
{
  outlined destroy of AppResolverResult?(v0 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin17AppSelectionState_forcedDisambiguationShadowPrediction);

  return swift_deallocClassInstance();
}

uint64_t sub_176814(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 88))();
}

uint64_t ObjC metadata update function for AppSelectionState()
{
  return type metadata accessor for AppSelectionState();
}

uint64_t type metadata accessor for AppSelectionState()
{
  uint64_t result = type metadata singleton initialization cache for AppSelectionState;
  if (!type metadata singleton initialization cache for AppSelectionState) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for AppSelectionState()
{
  type metadata accessor for AppResolverResult?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void type metadata accessor for AppResolverResult?()
{
  if (!lazy cache variable for type metadata for AppResolverResult?)
  {
    type metadata accessor for AppResolverResult();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AppResolverResult?);
    }
  }
}

uint64_t OUTLINED_FUNCTION_0_38()
{
  return swift_beginAccess();
}

uint64_t UnsetRelationshipTemplatesWrapper.promptForPerson(relationship:_:)()
{
  return static UnsetRelationshipTemplates.promptForPerson(relationship:_:)();
}

uint64_t UnsetRelationshipTemplatesWrapper.confirmToSave(relationship:contact:_:)()
{
  return static UnsetRelationshipTemplates.processConfirmToSave(relationship:contact:_:)();
}

uint64_t UnsetRelationshipTemplatesWrapper.promptToDisambiguationContacts(_:)()
{
  return static UnsetRelationshipTemplates.promptToDisambiguationContacts(_:)();
}

uint64_t UnsetRelationshipTemplatesWrapper.noMeCard(relationship:_:)()
{
  return static UnsetRelationshipTemplates.noMeCard(relationship:_:)();
}

uint64_t UnsetRelationshipTemplatesWrapper.promptForPerson(relationship:)()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)OUTLINED_FUNCTION_17_0(v4);
  void *v5 = v6;
  v5[1] = UnsetRelationshipTemplatesWrapper.promptForPerson(relationship:);
  return static UnsetRelationshipTemplates.promptForPerson(relationship:)(v3, v1);
}

uint64_t UnsetRelationshipTemplatesWrapper.confirmToSave(relationship:contact:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_task_alloc();
  uint64_t v7 = (void *)OUTLINED_FUNCTION_17_0(v6);
  *uint64_t v7 = v8;
  v7[1] = UnsetRelationshipTemplatesWrapper.confirmToSave(relationship:contact:);
  return static UnsetRelationshipTemplates.processConfirmToSave(relationship:contact:)(a1, a2, a3);
}

uint64_t UnsetRelationshipTemplatesWrapper.confirmToSave(relationship:contact:)()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t UnsetRelationshipTemplatesWrapper.promptToDisambiguationContacts()()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v1 = v0;
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)OUTLINED_FUNCTION_17_0(v2);
  *uint64_t v3 = v4;
  v3[1] = UnsetRelationshipTemplatesWrapper.promptForPerson(relationship:);
  return static UnsetRelationshipTemplates.promptToDisambiguationContacts()(v1);
}

uint64_t UnsetRelationshipTemplatesWrapper.noMeCard(relationship:)()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)OUTLINED_FUNCTION_17_0(v4);
  void *v5 = v6;
  v5[1] = UnsetRelationshipTemplatesWrapper.promptForPerson(relationship:);
  return static UnsetRelationshipTemplates.noMeCard(relationship:)(v3, v1);
}

uint64_t protocol witness for UnsetRelationshipTemplateProviding.promptForPerson(relationship:_:) in conformance UnsetRelationshipTemplatesWrapper()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))();
}

uint64_t protocol witness for UnsetRelationshipTemplateProviding.confirmToSave(relationship:contact:_:) in conformance UnsetRelationshipTemplatesWrapper()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))();
}

uint64_t protocol witness for UnsetRelationshipTemplateProviding.promptToDisambiguationContacts(_:) in conformance UnsetRelationshipTemplatesWrapper()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t protocol witness for UnsetRelationshipTemplateProviding.noMeCard(relationship:_:) in conformance UnsetRelationshipTemplatesWrapper()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))();
}

uint64_t protocol witness for UnsetRelationshipTemplateProviding.promptForPerson(relationship:) in conformance UnsetRelationshipTemplatesWrapper(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 112)
                                                + **(int **)(**(void **)v2 + 112));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = UnsetRelationshipTemplatesWrapper.promptForPerson(relationship:);
  return v8(a1, a2);
}

uint64_t protocol witness for UnsetRelationshipTemplateProviding.confirmToSave(relationship:contact:) in conformance UnsetRelationshipTemplatesWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(**(void **)v3 + 120)
                                                          + **(int **)(**(void **)v3 + 120));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = UnsetRelationshipTemplatesWrapper.promptForPerson(relationship:);
  return v10(a1, a2, a3);
}

uint64_t protocol witness for UnsetRelationshipTemplateProviding.promptToDisambiguationContacts() in conformance UnsetRelationshipTemplatesWrapper(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 128) + **(int **)(**(void **)v1 + 128));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = UnsetRelationshipTemplatesWrapper.promptForPerson(relationship:);
  return v6(a1);
}

uint64_t protocol witness for UnsetRelationshipTemplateProviding.noMeCard(relationship:) in conformance UnsetRelationshipTemplatesWrapper(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 136)
                                                + **(int **)(**(void **)v2 + 136));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = UnsetRelationshipTemplatesWrapper.promptForPerson(relationship:);
  return v8(a1, a2);
}

uint64_t type metadata accessor for UnsetRelationshipTemplatesWrapper()
{
  return self;
}

uint64_t SPHCall.isFTAudio.getter()
{
  OUTLINED_FUNCTION_0_39();
  if (v0())
  {
    uint64_t v1 = OUTLINED_FUNCTION_2_56();
    char v3 = v2(v1) ^ 1;
  }
  else
  {
    char v3 = 0;
  }
  return v3 & 1;
}

uint64_t SPHCall.isFTVideo.getter()
{
  OUTLINED_FUNCTION_0_39();
  if ((v2() & 1) == 0) {
    return 0;
  }
  char v3 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 24);

  return v3(v1, v0);
}

void specialized Sequence.contains(where:)(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for TUConversationParticipant);
    lazy protocol witness table accessor for type TUConversationParticipant and conformance NSObject(&lazy protocol witness table cache variable for type TUConversationParticipant and conformance NSObject, &lazy cache variable for type metadata for TUConversationParticipant);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v18;
    uint64_t v17 = v19;
    uint64_t v2 = v20;
    int64_t v3 = v21;
    unint64_t v4 = v22;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v17 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    int64_t v3 = 0;
  }
  int64_t v16 = (unint64_t)(v2 + 64) >> 6;
  while (1)
  {
    int64_t v8 = v3;
    if ((v1 & 0x8000000000000000) == 0) {
      break;
    }
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_32;
    }
    type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for TUConversationParticipant);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v11 = v23;
    swift_unknownObjectRelease();
    if (!v23) {
      goto LABEL_32;
    }
LABEL_31:
    unsigned int v15 = [v11 isAudioPaused];

    if (v15) {
      goto LABEL_32;
    }
  }
  if (v4)
  {
    unint64_t v9 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    unint64_t v10 = v9 | (v3 << 6);
LABEL_30:
    id v11 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v11) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  int64_t v12 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v12 >= v16) {
      goto LABEL_32;
    }
    unint64_t v13 = *(void *)(v17 + 8 * v12);
    ++v3;
    if (!v13)
    {
      int64_t v3 = v8 + 2;
      if (v8 + 2 >= v16) {
        goto LABEL_32;
      }
      unint64_t v13 = *(void *)(v17 + 8 * v3);
      if (!v13)
      {
        int64_t v3 = v8 + 3;
        if (v8 + 3 >= v16) {
          goto LABEL_32;
        }
        unint64_t v13 = *(void *)(v17 + 8 * v3);
        if (!v13)
        {
          int64_t v3 = v8 + 4;
          if (v8 + 4 >= v16) {
            goto LABEL_32;
          }
          unint64_t v13 = *(void *)(v17 + 8 * v3);
          if (!v13)
          {
            int64_t v3 = v8 + 5;
            if (v8 + 5 >= v16) {
              goto LABEL_32;
            }
            unint64_t v13 = *(void *)(v17 + 8 * v3);
            if (!v13)
            {
              int64_t v14 = v8 + 6;
              while (v14 < v16)
              {
                unint64_t v13 = *(void *)(v17 + 8 * v14++);
                if (v13)
                {
                  int64_t v3 = v14 - 1;
                  goto LABEL_29;
                }
              }
LABEL_32:
              outlined consume of [String : Any].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_29:
    unint64_t v4 = (v13 - 1) & v13;
    unint64_t v10 = __clz(__rbit64(v13)) + (v3 << 6);
    goto LABEL_30;
  }
  __break(1u);
}

uint64_t SPHCall.toPhoneCallRecord()()
{
  uint64_t v0 = type metadata accessor for Locale();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  int64_t v3 = (void *)((char *)&v9[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  Class isa = (__CFString *)SPHCall.toINCallRecord()().super.isa;
  type metadata accessor for AppInfoBuilder();
  uint64_t v5 = swift_allocObject();
  static Device.current.getter();
  __swift_project_boxed_opaque_existential_1(v9, v9[3]);
  dispatch thunk of DeviceState.siriLocale.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  swift_retain();
  specialized static PhoneCallRecord.getBuilder(callRecord:options:appInfoBuilder:locale:)(isa, 0, v5, v3);
  type metadata accessor for PhoneCallRecord(0);
  swift_allocObject();
  uint64_t v6 = PhoneCallRecord.init(builder:)();

  (*(void (**)(void *, uint64_t))(v1 + 8))(v3, v0);
  swift_release_n();
  return v6;
}

uint64_t SPHCall.isFTAudioCallOnHold.getter()
{
  if ((SPHCall.isFTAudio.getter() & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v0 = OUTLINED_FUNCTION_2_56();
  if ((v1(v0) & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v2 = OUTLINED_FUNCTION_11_32();
  v3(v2);
  if (!v16)
  {
    outlined destroy of SPHConversation?((uint64_t)&v15);
LABEL_7:
    char v6 = 0;
    return v6 & 1;
  }
  outlined init with take of AppSelectionSignalComponent(&v15, (uint64_t)v17);
  uint64_t v4 = OUTLINED_FUNCTION_2_56();
  if (v5(v4) == 2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    char v6 = 1;
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v17, v17[3]);
    uint64_t v8 = OUTLINED_FUNCTION_3_35();
    char v10 = v9(v8);
    outlined init with copy of SignalProviding((uint64_t)v17, (uint64_t)&v15);
    if (v10)
    {
      __swift_project_boxed_opaque_existential_1(&v15, v16);
      uint64_t v11 = OUTLINED_FUNCTION_3_35();
      uint64_t v13 = v12(v11);
      specialized Sequence.contains(where:)(v13);
      char v6 = v14;
      swift_bridgeObjectRelease();
    }
    else
    {
      char v6 = 0;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v15);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  }
  return v6 & 1;
}

id SPHCall.localHandle.getter()
{
  OUTLINED_FUNCTION_0_39();
  if ((v0() & 1) == 0)
  {
    uint64_t v8 = OUTLINED_FUNCTION_2_56();
    char v10 = (void *)v9(v8);
    id v7 = [v10 handle];

    return v7;
  }
  uint64_t v1 = OUTLINED_FUNCTION_11_32();
  v2(v1);
  if (!v13)
  {
    outlined destroy of SPHConversation?((uint64_t)v12);
    return 0;
  }
  __swift_project_boxed_opaque_existential_1(v12, v13);
  uint64_t v3 = OUTLINED_FUNCTION_3_35();
  uint64_t v5 = (void *)v4(v3);
  if (!v5)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    return 0;
  }
  char v6 = v5;
  id v7 = [v5 handle];

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

id TUCall.isFaceTime.getter()
{
  return TUCall.isFaceTime.getter((SEL *)&selRef_provider, (SEL *)&selRef_isFaceTimeProvider);
}

id TUCall.isTelephony.getter()
{
  return TUCall.isFaceTime.getter((SEL *)&selRef_provider, (SEL *)&selRef_isTelephonyProvider);
}

BOOL TUCall.isFaceTimeStatusValid.getter()
{
  return [v0 faceTimeIDStatus] != 1;
}

void TUCall.conversation.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  OUTLINED_FUNCTION_10_27();
  a25 = v27;
  a26 = v28;
  uint64_t v30 = v29;
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  outlined init with copy of CallStateProvider((uint64_t)static CallStateProvider.instance, (uint64_t)&a11);
  uint64_t v31 = OUTLINED_FUNCTION_15_17();
  *(void *)(v31 + 16) = v26;
  uint64_t v32 = a11;
  uint64_t v36 = a11;
  uint64_t v33 = OUTLINED_FUNCTION_18_1();
  *(void *)(v33 + 16) = partial apply for closure #1 in TUCall.conversation.getter;
  *(void *)(v33 + 24) = v31;
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for TUCallCenter);
  id v34 = v26;
  id v35 = v32;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TUConversation?);
  SPHCallCenter.onQueue<A>(_:)();
  swift_release();
  swift_release();

  outlined destroy of CallStateProvider((uint64_t)&a11);
  if (a10)
  {
    *(void *)(v30 + 24) = type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for TUConversation);
    *(void *)(v30 + 32) = &protocol witness table for TUConversation;
    *(void *)uint64_t v30 = a10;
  }
  else
  {
    *(void *)(v30 + 32) = 0;
    *(_OWORD *)uint64_t v30 = 0u;
    *(_OWORD *)(v30 + 16) = 0u;
  }
  OUTLINED_FUNCTION_8_46();
}

id closure #1 in TUCall.conversation.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  id result = [a1 activeConversationForCall:a2];
  *a3 = result;
  return result;
}

id TUCall.maxRemoteParticipants.getter()
{
  id v1 = [v0 provider];
  unsigned int v2 = [v1 isFaceTimeProvider];

  if (!v2 || ![v0 isConversation]) {
    return &dword_0 + 1;
  }
  uint64_t v3 = self;

  return [v3 maximumNumberOfInvitedMembers];
}

id TUCall.isMicrophoneMuted.getter()
{
  return [v0 isUplinkMuted];
}

void TUCall.isMicrophoneMuted.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  OUTLINED_FUNCTION_10_27();
  a25 = v29;
  a26 = v30;
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  outlined init with copy of CallStateProvider((uint64_t)static CallStateProvider.instance, (uint64_t)&a11);
  uint64_t v31 = swift_allocObject();
  OUTLINED_FUNCTION_6_38(v31);
  uint64_t v32 = OUTLINED_FUNCTION_18_1();
  *(void *)(v32 + 16) = partial apply for closure #1 in TUCall.isMicrophoneMuted.setter;
  *(void *)(v32 + 24) = v26;
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for TUCallCenter);
  id v33 = v27;
  id v34 = v28;
  swift_retain();
  OUTLINED_FUNCTION_1_51();
  swift_release();
  OUTLINED_FUNCTION_7_42();

  outlined destroy of CallStateProvider((uint64_t)&a11);
  OUTLINED_FUNCTION_8_46();
}

uint64_t (*TUCall.isMicrophoneMuted.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = [v1 isUplinkMuted];
  return TUCall.isMicrophoneMuted.modify;
}

#error "177E8C: call analysis failed (funcsize=10)"

uint64_t TUCall.isSpeakerphoneEnabled.getter()
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  outlined init with copy of CallStateProvider((uint64_t)static CallStateProvider.instance, (uint64_t)v4);
  uint64_t v0 = (void *)v4[0];
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for TUCallCenter);
  id v1 = v0;
  SPHCallCenter.onQueue<A>(_:)();

  outlined destroy of CallStateProvider((uint64_t)v4);
  return v3;
}

uint64_t TUCall.isSpeakerphoneEnabled.setter(char a1)
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  outlined init with copy of CallStateProvider((uint64_t)static CallStateProvider.instance, (uint64_t)v8);
  uint64_t v2 = swift_allocObject();
  *(unsigned char *)(v2 + 16) = a1 & 1;
  unsigned __int8 v3 = (void *)v8[0];
  id v7 = (void *)v8[0];
  uint64_t v4 = OUTLINED_FUNCTION_18_1();
  *(void *)(v4 + 16) = partial apply for closure #1 in TUCall.isSpeakerphoneEnabled.setter;
  *(void *)(v4 + 24) = v2;
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for TUCallCenter);
  id v5 = v3;
  swift_retain();
  SPHCallCenter.onQueue<A>(_:)();
  swift_release();
  swift_release();

  return outlined destroy of CallStateProvider((uint64_t)v8);
}

void closure #1 in TUCall.isSpeakerphoneEnabled.getter(void *a1@<X0>, unsigned __int8 *a2@<X8>)
{
  id v3 = [a1 routeController];
  id v4 = [v3 speakerRoute];

  if (v4)
  {
    unsigned __int8 v5 = [v4 isCurrentlyPicked];
  }
  else
  {
    unsigned __int8 v5 = 0;
  }
  *a2 = v5;
}

void closure #1 in TUCall.isSpeakerphoneEnabled.setter(void *a1, char a2)
{
  id v4 = [a1 routeController];
  unsigned __int8 v5 = [v4 speakerRoute];
  if (v5)
  {
    char v14 = v5;
    char v6 = [v4 receiverRoute];
    if (v6)
    {
      id v7 = v6;
      id v8 = [a1 routeController];
      unint64_t v9 = v8;
      if (a2) {
        char v10 = v14;
      }
      else {
        char v10 = v7;
      }
      [v8 pickRoute:v10];

      goto LABEL_13;
    }
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.siriPhone);
  id v7 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    swift_slowDealloc();
  }
  char v14 = v4;
LABEL_13:
}

uint64_t (*TUCall.isSpeakerphoneEnabled.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = TUCall.isSpeakerphoneEnabled.getter() & 1;
  return TUCall.isSpeakerphoneEnabled.modify;
}

uint64_t TUCall.isSpeakerphoneEnabled.modify(uint64_t a1)
{
  return TUCall.isSpeakerphoneEnabled.setter(*(unsigned char *)(a1 + 8));
}

id TUCall.isCameraEnabled.getter()
{
  return [v0 isSendingVideo];
}

void TUCall.isCameraEnabled.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  OUTLINED_FUNCTION_10_27();
  a25 = v29;
  a26 = v30;
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  outlined init with copy of CallStateProvider((uint64_t)static CallStateProvider.instance, (uint64_t)&a11);
  uint64_t v31 = swift_allocObject();
  OUTLINED_FUNCTION_6_38(v31);
  uint64_t v32 = OUTLINED_FUNCTION_18_1();
  *(void *)(v32 + 16) = partial apply for closure #1 in TUCall.isCameraEnabled.setter;
  *(void *)(v32 + 24) = v26;
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for TUCallCenter);
  id v33 = v27;
  id v34 = v28;
  swift_retain();
  OUTLINED_FUNCTION_1_51();
  swift_release();
  OUTLINED_FUNCTION_7_42();

  outlined destroy of CallStateProvider((uint64_t)&a11);
  OUTLINED_FUNCTION_8_46();
}

void closure #1 in TUCall.isCameraEnabled.setter(int a1, id a2, char a3)
{
  [a2 setIsSendingVideo:a3 & 1];
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.siriPhone);
  id v8 = a2;
  unsigned __int8 v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    id v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v7 = 67109120;
    [v8 isSendingVideo];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_0, v5, v6, "#SPHCall toggled camera state to %{BOOL}d", v7, 8u);
    swift_slowDealloc();
  }
  else
  {
  }
}

uint64_t (*TUCall.isCameraEnabled.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = [v1 isSendingVideo];
  return TUCall.isCameraEnabled.modify;
}

#error "178674: call analysis failed (funcsize=10)"

Swift::Void __swiftcall TUCall.switchToFaceTime()()
{
  OUTLINED_FUNCTION_10_27();
  uint64_t v16 = v3;
  uint64_t v17 = v4;
  if ([v1 isVideo])
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.siriPhone);
    oslog = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v6))
    {
      id v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v7 = 0;
      _os_log_impl(&dword_0, oslog, v6, "#SPHCall cannot switch to FaceTime because the call is already a FaceTime call", v7, 2u);
      swift_slowDealloc();
    }
    OUTLINED_FUNCTION_8_46();
  }
  else
  {
    if (one-time initialization token for instance != -1) {
      swift_once();
    }
    outlined init with copy of CallStateProvider((uint64_t)static CallStateProvider.instance, (uint64_t)v15);
    uint64_t v10 = OUTLINED_FUNCTION_15_17();
    OUTLINED_FUNCTION_3_47(v10);
    uint64_t v11 = OUTLINED_FUNCTION_18_1();
    *(void *)(v11 + 16) = partial apply for closure #1 in TUCall.switchToFaceTime();
    *(void *)(v11 + 24) = v0;
    type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for TUCallCenter);
    id v12 = v1;
    id v13 = v2;
    swift_retain();
    OUTLINED_FUNCTION_1_51();
    swift_release();
    OUTLINED_FUNCTION_7_42();

    outlined destroy of CallStateProvider((uint64_t)v15);
    OUTLINED_FUNCTION_8_46();
  }
}

id closure #1 in TUCall.switchToFaceTime()(void *a1, void *a2)
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.siriPhone);
  id v5 = a2;
  os_log_type_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v8 = 67109120;
    [v5 isConversation];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_0, v6, v7, "#SPHCall call is conversation %{BOOL}d", v8, 8u);
    swift_slowDealloc();
  }
  else
  {
  }
  return [a1 requestVideoUpgradeForCall:v5];
}

id TUCall.supportsHolding.getter()
{
  return TUCall.isFaceTime.getter((SEL *)&selRef_model, (SEL *)&selRef_supportsHolding);
}

id TUCall.isFaceTime.getter(SEL *a1, SEL *a2)
{
  id v4 = [v2 *a1];
  id v5 = [v4 *a2];

  return v5;
}

Swift::Void __swiftcall TUCall.hold()()
{
  OUTLINED_FUNCTION_10_27();
  uint64_t v10 = v3;
  uint64_t v11 = v4;
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  outlined init with copy of CallStateProvider((uint64_t)static CallStateProvider.instance, (uint64_t)v9);
  uint64_t v5 = OUTLINED_FUNCTION_15_17();
  OUTLINED_FUNCTION_3_47(v5);
  uint64_t v6 = OUTLINED_FUNCTION_18_1();
  *(void *)(v6 + 16) = partial apply for closure #1 in TUCall.hold();
  *(void *)(v6 + 24) = v0;
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for TUCallCenter);
  id v7 = v1;
  id v8 = v2;
  swift_retain();
  OUTLINED_FUNCTION_1_51();
  swift_release();
  OUTLINED_FUNCTION_7_42();

  outlined destroy of CallStateProvider((uint64_t)v9);
  OUTLINED_FUNCTION_8_46();
}

Swift::Void __swiftcall TUCall.unhold()()
{
  OUTLINED_FUNCTION_10_27();
  uint64_t v10 = v3;
  uint64_t v11 = v4;
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  outlined init with copy of CallStateProvider((uint64_t)static CallStateProvider.instance, (uint64_t)v9);
  uint64_t v5 = OUTLINED_FUNCTION_15_17();
  OUTLINED_FUNCTION_3_47(v5);
  uint64_t v6 = OUTLINED_FUNCTION_18_1();
  *(void *)(v6 + 16) = partial apply for closure #1 in TUCall.unhold();
  *(void *)(v6 + 24) = v0;
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for TUCallCenter);
  id v7 = v1;
  id v8 = v2;
  swift_retain();
  OUTLINED_FUNCTION_1_51();
  swift_release();
  OUTLINED_FUNCTION_7_42();

  outlined destroy of CallStateProvider((uint64_t)v9);
  OUTLINED_FUNCTION_8_46();
}

uint64_t @nonobjc TUCall.callUUID.getter()
{
  id v1 = [v0 callUUID];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

id @nonobjc TUCall.status.getter()
{
  return [v0 status];
}

id @nonobjc TUCall.isVideo.getter()
{
  return [v0 isVideo];
}

uint64_t protocol witness for SPHCall.remoteParticipantHandles.getter in conformance TUCall()
{
  return @nonobjc TUCall.remoteParticipantHandles.getter((SEL *)&selRef_remoteParticipantHandles, &lazy cache variable for type metadata for TUHandle, (uint64_t)TUHandle_ptr, (unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject);
}

id @nonobjc TUCall.localSenderIdentity.getter()
{
  id v1 = [v0 localSenderIdentity];

  return v1;
}

id @nonobjc TUCall.isConversation.getter()
{
  return [v0 isConversation];
}

uint64_t protocol witness for SPHCall.isSpeakerphoneEnabled.getter in conformance TUCall()
{
  return TUCall.isSpeakerphoneEnabled.getter() & 1;
}

uint64_t protocol witness for SPHCall.isSpeakerphoneEnabled.setter in conformance TUCall(char a1)
{
  return TUCall.isSpeakerphoneEnabled.setter(a1);
}

id @nonobjc TUCall.isBlocked.getter()
{
  return [v0 isBlocked];
}

uint64_t SPHCall.isBlockedOrHasNoHandles.getter(uint64_t a1, uint64_t a2)
{
  if ((*(uint64_t (**)(void))(a2 + 168))()) {
    return 1;
  }
  uint64_t v3 = OUTLINED_FUNCTION_2_56();
  uint64_t v5 = v4(v3);
  BOOL v6 = specialized Set.isEmpty.getter(v5);
  swift_bridgeObjectRelease();
  return v6;
}

unint64_t protocol witness for SPHConversation.isOneToOneModeEnabled.getter in conformance TUConversation()
{
  return (unint64_t)@nonobjc TUConversation.isOneToOneModeEnabled.getter() & 1;
}

id @nonobjc TUConversation.isOneToOneModeEnabled.getter()
{
  return [v0 isOneToOneModeEnabled];
}

uint64_t protocol witness for SPHConversation.remoteMembers.getter in conformance TUConversation()
{
  return @nonobjc TUCall.remoteParticipantHandles.getter((SEL *)&selRef_remoteMembers, &lazy cache variable for type metadata for TUConversationMember, (uint64_t)TUConversationMember_ptr, &lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject);
}

uint64_t protocol witness for SPHConversation.activeRemoteParticipants.getter in conformance TUConversation()
{
  return @nonobjc TUCall.remoteParticipantHandles.getter((SEL *)&selRef_activeRemoteParticipants, &lazy cache variable for type metadata for TUConversationParticipant, (uint64_t)TUConversationParticipant_ptr, &lazy protocol witness table cache variable for type TUConversationParticipant and conformance NSObject);
}

uint64_t @nonobjc TUCall.remoteParticipantHandles.getter(SEL *a1, unint64_t *a2, uint64_t a3, unint64_t *a4)
{
  id v7 = [v4 *a1];
  type metadata accessor for CNContactStore(0, a2);
  lazy protocol witness table accessor for type TUConversationParticipant and conformance NSObject(a4, a2);
  uint64_t v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  return v8;
}

id protocol witness for SPHConversation.localMember.getter in conformance TUConversation()
{
  return @nonobjc TUConversation.localMember.getter();
}

id @nonobjc TUConversation.localMember.getter()
{
  id v1 = [v0 localMember];

  return v1;
}

BOOL specialized Set.isEmpty.getter(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0) {
    uint64_t v1 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v1 = *(void *)(a1 + 16);
  }
  return v1 == 0;
}

INCallRecord __swiftcall SPHCall.toINCallRecord()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  __chkstk_darwin(v4 - 8);
  BOOL v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v3, v2);
  uint64_t v9 = v8;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = 1;
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 1, 1, v10);
  uint64_t v12 = SPHCall.inCallRecordType.getter(v3, v2);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v3, v2)) {
    uint64_t v11 = 2;
  }
  uint64_t v13 = SPHCall.inCallProvider.getter(v3, v2);
  char v14 = SPHCall.inParticipants.getter(v3, v2);
  id v15 = [objc_allocWithZone((Class)NSNumber) initWithInteger:1];
  id v16 = objc_allocWithZone((Class)INCallRecord);
  return (INCallRecord)@nonobjc INCallRecord.init(__identifier:dateCreated:callRecordType:callCapability:callDuration:unseen:preferredCallProvider:participants:numberOfCalls:providerId:providerBundleId:isCallerIdBlocked:)(v7, v9, (uint64_t)v6, v12, v11, 0, 0, v13, (uint64_t)v14, v15, 0, 0, 0, 0, 0);
}

uint64_t SPHCall.inCallRecordType.getter(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = (*(uint64_t (**)(void))(a2 + 16))() - 1;
  if (v2 > 3) {
    return 0;
  }
  else {
    return *(void *)&asc_4707E8[8 * v2];
  }
}

uint64_t SPHCall.inCallProvider.getter(uint64_t a1, uint64_t a2)
{
  if ((*(uint64_t (**)(void))(a2 + 32))()) {
    return 2;
  }
  else {
    return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2) & 1;
  }
}

void *SPHCall.inParticipants.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(void))(a2 + 56))();
  uint64_t v3 = specialized Set.count.getter(v2);
  if (!v3)
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = v3;
  uint64_t v30 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)();
  unint64_t v5 = v2 & 0xC000000000000001;
  if ((v2 & 0xC000000000000001) != 0)
  {
    id result = (void *)__CocoaSet.startIndex.getter();
    char v8 = 1;
  }
  else
  {
    id result = (void *)specialized _NativeSet.startIndex.getter(v2);
    char v8 = v10 & 1;
  }
  uint64_t v27 = result;
  uint64_t v28 = v7;
  char v29 = v8;
  if ((v4 & 0x8000000000000000) == 0)
  {
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INPerson);
    uint64_t v25 = v2;
    uint64_t p_name = &TemplatingOperationManager.name;
    do
    {
      specialized Set.subscript.getter((uint64_t)v27, v28, v29, v2);
      uint64_t v13 = v12;
      INPerson.init(personHandle:)((INPersonHandle)objc_msgSend(v12, p_name[420]));

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      id result = (void *)specialized ContiguousArray._endMutation()();
      if (v5)
      {
        if ((v29 & 1) == 0) {
          goto LABEL_18;
        }
        if (__CocoaSet.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Set<TUHandle>.Index);
        char v24 = (void (*)(unsigned char *, void))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v24(v26, 0);
      }
      else
      {
        uint64_t v14 = (uint64_t)v27;
        uint64_t v15 = v28;
        char v16 = v29;
        int64_t v17 = specialized _NativeSet.index(after:)((int64_t)v27, v28, v29, v2);
        uint64_t v19 = v18;
        uint64_t v20 = p_name;
        char v22 = v21;
        outlined consume of Set<TUHandle>.Index._Variant(v14, v15, v16);
        uint64_t v27 = (void *)v17;
        uint64_t v28 = v19;
        char v23 = v22 & 1;
        uint64_t p_name = v20;
        unint64_t v5 = 0;
        uint64_t v2 = v25;
        char v29 = v23;
      }
      --v4;
    }
    while (v4);
    outlined consume of Set<TUHandle>.Index._Variant((uint64_t)v27, v28, v29);
    uint64_t v9 = v30;
    swift_bridgeObjectRelease();
    return v9;
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

id @nonobjc INCallRecord.init(__identifier:dateCreated:callRecordType:callCapability:callDuration:unseen:preferredCallProvider:participants:numberOfCalls:providerId:providerBundleId:isCallerIdBlocked:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v19 = type metadata accessor for Date();
  Class isa = 0;
  if (__swift_getEnumTagSinglePayload(a3, 1, v19) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(a3, v19);
  }
  if (a9)
  {
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INPerson);
    v21.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v21.super.Class isa = 0;
  }
  if (a12)
  {
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v22 = 0;
  }
  if (a14)
  {
    NSString v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v23 = 0;
  }
  id v24 = [v28 initWithIdentifier:v18 dateCreated:isa callRecordType:a4 callCapability:a5 callDuration:a6 unseen:a7 preferredCallProvider:a8 participants:v21.super.isa numberOfCalls:a10 providerId:v22 providerBundleId:v23 isCallerIdBlocked:a15];

  return v24;
}

uint64_t outlined destroy of SPHConversation?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SPHConversation?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_179778()
{
  return _swift_deallocObject(v0, 24, 7);
}

id partial apply for closure #1 in TUCall.conversation.getter@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return closure #1 in TUCall.conversation.getter(a1, *(void *)(v2 + 16), a2);
}

void specialized thunk for @escaping @callee_guaranteed (@guaranteed TUCallCenter) -> (@out A)(void **a1@<X0>, unsigned char *a2@<X8>)
{
  closure #1 in TUCall.isSpeakerphoneEnabled.getter(*a1, &v3);
  *a2 = v3;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (id result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  if (v5 + 1 < (unint64_t)(result + 63) >> 6)
  {
    unint64_t v10 = *(void *)(v6 + 8 * v9);
    if (v10) {
      return __clz(__rbit64(v10)) + (v9 << 6);
    }
    unint64_t v11 = (unint64_t)(result + 63) >> 6;
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v11)
    {
      unint64_t v10 = *(void *)(v6 + 8 * v9);
      if (v10) {
        return __clz(__rbit64(v10)) + (v9 << 6);
      }
      while (v5 + 3 < v11)
      {
        unint64_t v10 = *(void *)(a4 + 80 + 8 * v5++);
        if (v10)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v10)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

void specialized Set.subscript.getter(uint64_t a1, int a2, char a3, uint64_t a4)
{
  unint64_t v6 = a1;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a3)
    {
      __CocoaSet.element(at:)();
      type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for TUHandle);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      return;
    }
    goto LABEL_24;
  }
  if (a3) {
    goto LABEL_10;
  }
  if (a1 < 0 || 1 << *(unsigned char *)(a4 + 32) <= a1)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 56) >> a1) & 1) == 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    goto LABEL_17;
  }
  __break(1u);
LABEL_10:
  if (__CocoaSet.Index.age.getter() != *(_DWORD *)(a4 + 36))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  __CocoaSet.Index.element.getter();
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for TUHandle);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  unint64_t v4 = v16;
  swift_unknownObjectRelease();
  Swift::Int v7 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
  uint64_t v8 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v6 = v7 & ~v8;
  if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
  {
LABEL_23:

    __break(1u);
LABEL_24:
    __break(1u);
    return;
  }
  id v9 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
  char v10 = static NSObject.== infix(_:_:)();

  if ((v10 & 1) == 0)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v6 = (v6 + 1) & v11;
      if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        goto LABEL_23;
      }
      id v12 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
      char v13 = static NSObject.== infix(_:_:)();
    }
    while ((v13 & 1) == 0);
  }

LABEL_17:
  uint64_t v14 = *(void **)(*(void *)(a4 + 48) + 8 * v6);

  id v15 = v14;
}

uint64_t specialized _NativeSet.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  uint64_t v2 = 64;
  for (uint64_t i = 9; i - 7 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

void *partial apply for specialized thunk for @escaping @callee_guaranteed (@guaranteed TUCallCenter) -> (@out A)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id result = (*(void *(**)(uint64_t *__return_ptr, void))(v2 + 16))(&v5, *a1);
  *a2 = v5;
  return result;
}

id partial apply for closure #1 in TUCall.isMicrophoneMuted.setter()
{
  return [*(id *)(v0 + 16) setUplinkMuted:*(unsigned __int8 *)(v0 + 24)];
}

uint64_t partial apply for specialized thunk for @escaping @callee_guaranteed (@guaranteed TUCallCenter) -> (@out A)(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_179C54()
{
  return _swift_deallocObject(v0, 17, 7);
}

void partial apply for closure #1 in TUCall.isSpeakerphoneEnabled.setter(void *a1)
{
  closure #1 in TUCall.isSpeakerphoneEnabled.setter(a1, *(unsigned char *)(v1 + 16));
}

uint64_t sub_179C6C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_179CA4()
{
  return _swift_deallocObject(v0, 25, 7);
}

void partial apply for closure #1 in TUCall.isCameraEnabled.setter(int a1)
{
  closure #1 in TUCall.isCameraEnabled.setter(a1, *(id *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

id partial apply for closure #1 in TUCall.switchToFaceTime()(void *a1)
{
  return closure #1 in TUCall.switchToFaceTime()(a1, *(void **)(v1 + 16));
}

id partial apply for closure #1 in TUCall.hold()(void *a1)
{
  return [a1 holdCall:*(void *)(v1 + 16)];
}

id partial apply for closure #1 in TUCall.unhold()(void *a1)
{
  return [a1 unholdCall:*(void *)(v1 + 16)];
}

id sub_179D10@<X0>(unsigned char *a1@<X8>)
{
  id result = TUCall.isMicrophoneMuted.getter();
  *a1 = result & 1;
  return result;
}

#error "179D58: call analysis failed (funcsize=10)"

uint64_t sub_179D68@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = TUCall.isSpeakerphoneEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_179D94(char *a1)
{
  return TUCall.isSpeakerphoneEnabled.setter(*a1);
}

id sub_179DB0@<X0>(unsigned char *a1@<X8>)
{
  id result = TUCall.isCameraEnabled.getter();
  *a1 = result & 1;
  return result;
}

#error "179DF8: call analysis failed (funcsize=10)"

uint64_t lazy protocol witness table accessor for type TUConversationParticipant and conformance NSObject(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CNContactStore(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined consume of Set<TUHandle>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_51()
{
  return SPHCallCenter.onQueue<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_2_56()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_3_47(uint64_t result)
{
  *(void *)(result + 16) = v1;
  return result;
}

uint64_t OUTLINED_FUNCTION_6_38(uint64_t result)
{
  *(void *)(result + 16) = v1;
  *(unsigned char *)(result + 24) = v2 & 1;
  return result;
}

uint64_t OUTLINED_FUNCTION_7_42()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_11_32()
{
  return v0;
}

void static StartCallViewBuilders.makeDefaultDisambiguationBuilder<A>(app:intent:parameterName:disambiguationList:deviceIsLocked:sharedGlobals:displayTextCats:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  OUTLINED_FUNCTION_20_20();
  a26 = v27;
  a27 = v28;
  uint64_t v30 = v29;
  uint64_t v52 = v31;
  char v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v46 = type metadata accessor for Logger();
  uint64_t v47 = (void *)OUTLINED_FUNCTION_25_0(v46, (uint64_t)static Logger.siriPhone);
  os_log_type_t v48 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_48_2(v48))
  {
    *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
    OUTLINED_FUNCTION_22_4(&dword_0, v49, v50, "#StartCallViewBuilders Providing DefaultDisambiguationBuilder");
    OUTLINED_FUNCTION_6();
  }

  outlined init with copy of SignalProviding(v52, (uint64_t)&a12);
  *(void *)uint64_t v45 = v43;
  *(void *)(v45 + 8) = v41;
  *(void *)(v45 + 16) = v39;
  *(void *)(v45 + 24) = v37;
  *(void *)(v45 + 32) = v35;
  *(unsigned char *)(v45 + 40) = v33 & 1;
  outlined init with take of AppSelectionSignalComponent(&a12, v45 + 48);
  *(void *)(v45 + 88) = v30;
  swift_retain();
  id v51 = v41;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  OUTLINED_FUNCTION_15_22();
}

uint64_t DefaultDisambiguationBuilder.makeViewsForWatch(utteranceViews:_:)(uint64_t a1, void (*a2)(uint64_t, void))
{
  SiriKitDisambiguationList.disambiguationItems.getter();
  uint64_t v4 = v2[9];
  uint64_t v5 = v2[10];
  __swift_project_boxed_opaque_existential_1(v2 + 6, v4);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 8))(v11, v4, v5);
  __swift_project_boxed_opaque_existential_1(v11, v11[3]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  unsigned int v6 = (void *)static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetForWatch(disambiguationItems:textToSpeechIsEnabled:)();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  type metadata accessor for SiriKitAceViewBuilder();
  uint64_t v8 = v2[9];
  uint64_t v7 = v2[10];
  __swift_project_boxed_opaque_existential_1(v2 + 6, v8);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v11, v8, v7);
  dispatch thunk of static SiriKitAceViewBuilder.makeBuilder(deviceState:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  dispatch thunk of SiriKitAceViewBuilder.withUtteranceViews(utteranceViews:)();
  swift_release();
  dispatch thunk of SiriKitAceViewBuilder.addSnippet(snippet:)();
  swift_release();
  uint64_t v9 = dispatch thunk of SiriKitAceViewBuilder.build()();
  swift_release();
  a2(v9, 0);

  return swift_bridgeObjectRelease();
}

uint64_t DefaultDisambiguationBuilder.makeViewsForMac(utteranceViews:_:)(uint64_t a1, void (*a2)(uint64_t, void))
{
  SiriKitDisambiguationList.disambiguationItems.getter();
  uint64_t v4 = (void *)static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetForMac(disambiguationItems:deviceIsLocked:)();
  swift_bridgeObjectRelease();
  type metadata accessor for SiriKitAceViewBuilder();
  uint64_t v6 = v2[9];
  uint64_t v5 = v2[10];
  __swift_project_boxed_opaque_existential_1(v2 + 6, v6);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 8))(v9, v6, v5);
  dispatch thunk of static SiriKitAceViewBuilder.makeBuilder(deviceState:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  dispatch thunk of SiriKitAceViewBuilder.withUtteranceViews(utteranceViews:)();
  swift_release();
  dispatch thunk of SiriKitAceViewBuilder.withDisambiguationList(disambiguationList:)();
  swift_release();
  uint64_t v7 = dispatch thunk of SiriKitAceViewBuilder.build()();
  swift_release();
  a2(v7, 0);

  return swift_bridgeObjectRelease();
}

uint64_t DefaultDisambiguationBuilder.makeViewsForCar(utteranceViews:_:)(unint64_t a1, void (*a2)(uint64_t, void))
{
  SiriKitDisambiguationList.disambiguationItems.getter();
  uint64_t v4 = (void *)static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetForCarPlay(disambiguationItems:deviceIsLocked:)();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_46A030;
  *(void *)(v5 + 32) = v4;
  uint64_t v9 = v5;
  specialized Array._endMutation()();
  if (a1 >> 62)
  {
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for SAAceView);
    id v8 = v4;
    swift_bridgeObjectRetain();
    _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v6 = v4;
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for SAAceView);
  }
  specialized Array.append<A>(contentsOf:)();
  a2(v9, 0);

  return swift_bridgeObjectRelease();
}

uint64_t specialized DefaultDisambiguationBuilder.makeViewsForIOS(utteranceViews:_:)(uint64_t a1, uint64_t a2)
{
  return specialized DefaultDisambiguationBuilder.makeViewsForIOS(utteranceViews:_:)(a1, a2);
}

{
  return specialized DefaultDisambiguationBuilder.makeViewsForIOS(utteranceViews:_:)(a1, a2);
}

uint64_t specialized DefaultDisambiguationBuilder.makeViewsForIOS(utteranceViews:_:)(uint64_t a1)
{
  return specialized DefaultDisambiguationBuilder.makeViewsForIOS(utteranceViews:_:)(a1);
}

#error "17A718: call analysis failed (funcsize=138)"

#error "17A998: call analysis failed (funcsize=141)"

uint64_t DefaultDisambiguationBuilder.makeViewsForIOS(utteranceViews:_:)(uint64_t a1, void (*a2)(uint64_t, void), uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  while (1)
  {
    do
    {
      uint64_t v7 = v5[2];
      id v8 = (void *)v5[3];
      swift_bridgeObjectRetain();
      v9._uint64_t countAndFlagsBits = v7;
      v9._object = v8;
      v10.value = PhoneCallSlotNames.init(rawValue:)(v9).value;
      uint64_t v11 = SiriKitDisambiguationList.rawItems.getter();
      id v12 = specialized _arrayConditionalCast<A, B>(_:)(v11);
      swift_bridgeObjectRelease();
    }
    while (!v12);
    if (v10.value == PhoneCallFlowDelegatePlugin_PhoneCallSlotNames_unknownDefault) {
      goto LABEL_14;
    }
    if (PhoneCallSlotNames.rawValue.getter(v10.value) == 0x746361746E6F63 && v13 == 0xE700000000000000) {
      break;
    }
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_16;
    }
    if (PhoneCallSlotNames.rawValue.getter(v10.value) == 0x73746361746E6F63 && v16 == 0xE800000000000000) {
      break;
    }
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v18) {
      goto LABEL_16;
    }
LABEL_14:
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
LABEL_16:
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.siriPhone);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    NSString v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)NSString v22 = 0;
    _os_log_impl(&dword_0, v20, v21, "#DefaultDisambiguationBuilder Prepending header items for contact handle disambiguation", v22, 2u);
    swift_slowDealloc();
  }

  uint64_t v23 = v5[9];
  uint64_t v24 = v5[10];
  __swift_project_boxed_opaque_existential_1(v5 + 6, v23);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v24 + 8))(v30, v23, v24);
  uint64_t v25 = PhoneContactDisambiguationHeaderItemFactory.makeHeaderItems(persons:)((unint64_t)v12);
  outlined destroy of PhoneContactDisambiguationHeaderItemFactory((uint64_t)v30);
  SiriKitDisambiguationList.disambiguationItems.getter();
  v30[0] = (uint64_t)v25;
  specialized Array.append<A>(contentsOf:)();
  uint64_t v26 = DefaultDisambiguationBuilder.makeViewsForIOSDisambiguation(utteranceViews:disambiguationItems:persons:)(a1, v30[0], (unint64_t)v12, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a2(v26, 0);
  return swift_bridgeObjectRelease();
}

void specialized DefaultDisambiguationBuilder.makeViewsForIOSDisambiguation(utteranceViews:disambiguationItems:persons:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = type metadata accessor for ImageSize();
  OUTLINED_FUNCTION_0_0();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_4();
  uint64_t v12 = v11 - v10;
  uint64_t v13 = (void *)(v3 + 48);
  if (static PicsUtils.shouldUsePicsDisambiguationFormat(persons:sharedGlobals:)(a3))
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    char v15 = OUTLINED_FUNCTION_25_0(v14, (uint64_t)static Logger.siriPhone);
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      int64_t v17 = (uint8_t *)OUTLINED_FUNCTION_7_2();
      *(_WORD *)int64_t v17 = 0;
      _os_log_impl(&dword_0, v15, v16, "#DefaultDisambiguationBuilder use mixed card section for PICS", v17, 2u);
      OUTLINED_FUNCTION_6();
    }

    uint64_t v18 = *(unsigned __int8 *)(v4 + 40);
    uint64_t v19 = OUTLINED_FUNCTION_13_21();
    v20(v19);
    type metadata accessor for SiriKitDisambiguationItem();
    unint64_t v21 = dispatch thunk of static SiriKitDisambiguationItem.allowedItems(disambiguationItems:deviceLockedForDisambiguation:)();
    static PicsDisambiguationBuilder.mixedCardSectionsFromDetailedSelectionItems(disambiguationItems:deviceIsLocked:sharedGlobals:persons:imageSize:)(v21, v18, (uint64_t)v13, a3);
    uint64_t v23 = v22;
    swift_bridgeObjectRelease();
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for SACardSnippet);
    uint64_t v24 = (void *)static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:)();
    swift_bridgeObjectRelease();
    outlined bridged method (mbnn) of @objc SACardSnippet.referencedCommands.setter(v23, v24);
  }
  else
  {
    uint64_t v25 = OUTLINED_FUNCTION_13_21();
    v26(v25);
    uint64_t v24 = (void *)static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetPhone(disambiguationItems:deviceIsLocked:imageSize:)();
  }
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v12, v6);
  uint64_t v28 = *(void *)v4;
  uint64_t v27 = *(void **)(v4 + 8);
  __swift_project_boxed_opaque_existential_1(v13, *(void *)(v4 + 72));
  OUTLINED_FUNCTION_24_2();
  v29();
  uint64_t v30 = static UserFacingCallingAppUtils.getCommAppForLaunch(originalApp:preferredCallProvider:deviceState:)(v28, (uint64_t)[v27 preferredCallProvider], v45);
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for SAUISash);
  id v31 = SAUISash.init(app:)(v30);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
  [v24 setSash:v31];

  uint64_t v32 = *(void *)(v4 + 16);
  char v33 = *(void **)(v4 + 24);
  uint64_t v34 = SiriKitDisambiguationList.rawItems.getter();
  LOBYTE(v31) = specialized DefaultDisambiguationBuilder.shouldShowOpenContactsAppButton(parameterName:rawItems:)(v32, v33, v34);
  swift_bridgeObjectRelease();
  if (v31)
  {
    self;
    uint64_t v35 = swift_dynamicCastObjCClass();
    if (v35)
    {
      uint64_t v36 = (void *)v35;
      uint64_t v37 = one-time initialization token for siriPhone;
      id v38 = v24;
      if (v37 != -1) {
        swift_once();
      }
      uint64_t v39 = type metadata accessor for Logger();
      uint64_t v40 = (void *)OUTLINED_FUNCTION_25_0(v39, (uint64_t)static Logger.siriPhone);
      os_log_type_t v41 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_48_2(v41))
      {
        *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
        OUTLINED_FUNCTION_22_4(&dword_0, v42, v43, "#DefaultDisambiguationBuilder appending Open Contacts button on disambiguation snippet");
        OUTLINED_FUNCTION_6();
      }

      specialized DefaultDisambiguationBuilder.appendLaunchAppButton(to:)(v36);
    }
  }
  type metadata accessor for SiriKitAceViewBuilder();
  __swift_project_boxed_opaque_existential_1(v13, *(void *)(v4 + 72));
  OUTLINED_FUNCTION_21_20();
  OUTLINED_FUNCTION_24_2();
  v44();
  dispatch thunk of static SiriKitAceViewBuilder.makeBuilder(deviceState:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
  dispatch thunk of SiriKitAceViewBuilder.withUtteranceViews(utteranceViews:)();
  OUTLINED_FUNCTION_24_22();
  dispatch thunk of SiriKitAceViewBuilder.addSnippet(snippet:)();
  swift_release();
  dispatch thunk of SiriKitAceViewBuilder.build()();
  OUTLINED_FUNCTION_24_22();

  OUTLINED_FUNCTION_26_1();
}

void specialized DefaultDisambiguationBuilder.makeViewsForIOSDisambiguation(utteranceViews:disambiguationItems:persons:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = v4;
  uint64_t v8 = type metadata accessor for ImageSize();
  OUTLINED_FUNCTION_0_0();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_4();
  uint64_t v14 = v13 - v12;
  char v15 = (void *)(v4 + 48);
  uint64_t v46 = a4;
  if (static PicsUtils.shouldUsePicsDisambiguationFormat(persons:sharedGlobals:)(a3))
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    int64_t v17 = OUTLINED_FUNCTION_25_0(v16, (uint64_t)static Logger.siriPhone);
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)OUTLINED_FUNCTION_7_2();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl(&dword_0, v17, v18, "#DefaultDisambiguationBuilder use mixed card section for PICS", v19, 2u);
      OUTLINED_FUNCTION_6();
    }

    uint64_t v20 = *(unsigned __int8 *)(v6 + 40);
    uint64_t v21 = OUTLINED_FUNCTION_12_23();
    v22(v21);
    type metadata accessor for SiriKitDisambiguationItem();
    unint64_t v23 = dispatch thunk of static SiriKitDisambiguationItem.allowedItems(disambiguationItems:deviceLockedForDisambiguation:)();
    static PicsDisambiguationBuilder.mixedCardSectionsFromDetailedSelectionItems(disambiguationItems:deviceIsLocked:sharedGlobals:persons:imageSize:)(v23, v20, (uint64_t)v15, a3);
    uint64_t v25 = v24;
    swift_bridgeObjectRelease();
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for SACardSnippet);
    uint64_t v26 = (void *)static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:)();
    swift_bridgeObjectRelease();
    outlined bridged method (mbnn) of @objc SACardSnippet.referencedCommands.setter(v25, v26);
  }
  else
  {
    uint64_t v27 = OUTLINED_FUNCTION_12_23();
    v28(v27);
    uint64_t v26 = (void *)static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetPhone(disambiguationItems:deviceIsLocked:imageSize:)();
  }
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v14, v8);
  uint64_t v29 = *(void *)v6;
  uint64_t v30 = *(void *)(v6 + 80);
  __swift_project_boxed_opaque_existential_1(v15, *(void *)(v6 + 72));
  OUTLINED_FUNCTION_21_20();
  OUTLINED_FUNCTION_24_2();
  v31();
  uint64_t v32 = static UserFacingCallingAppUtils.getCommAppForLaunch(originalApp:preferredCallProvider:deviceState:)(v29, v46, v47);
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for SAUISash);
  id v33 = SAUISash.init(app:)(v32);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
  [v26 setSash:v33];

  uint64_t v34 = *(void *)(v6 + 16);
  uint64_t v35 = *(void **)(v6 + 24);
  uint64_t v36 = SiriKitDisambiguationList.rawItems.getter();
  LOBYTE(v34) = specialized DefaultDisambiguationBuilder.shouldShowOpenContactsAppButton(parameterName:rawItems:)(v34, v35, v36);
  swift_bridgeObjectRelease();
  if (v34)
  {
    self;
    uint64_t v37 = swift_dynamicCastObjCClass();
    if (v37)
    {
      id v38 = (void *)v37;
      uint64_t v39 = one-time initialization token for siriPhone;
      id v40 = v26;
      if (v39 != -1) {
        swift_once();
      }
      uint64_t v41 = type metadata accessor for Logger();
      uint64_t v42 = OUTLINED_FUNCTION_25_0(v41, (uint64_t)static Logger.siriPhone);
      os_log_type_t v43 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_48_2(v43))
      {
        uint64_t v44 = (uint8_t *)OUTLINED_FUNCTION_7_2();
        *(_WORD *)uint64_t v44 = 0;
        _os_log_impl(&dword_0, v42, (os_log_type_t)v30, "#DefaultDisambiguationBuilder appending Open Contacts button on disambiguation snippet", v44, 2u);
        OUTLINED_FUNCTION_6();
      }

      specialized DefaultDisambiguationBuilder.appendLaunchAppButton(to:)(v38);
    }
  }
  type metadata accessor for SiriKitAceViewBuilder();
  __swift_project_boxed_opaque_existential_1(v15, *(void *)(v6 + 72));
  OUTLINED_FUNCTION_24_2();
  v45();
  dispatch thunk of static SiriKitAceViewBuilder.makeBuilder(deviceState:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
  dispatch thunk of SiriKitAceViewBuilder.withUtteranceViews(utteranceViews:)();
  OUTLINED_FUNCTION_24_22();
  dispatch thunk of SiriKitAceViewBuilder.addSnippet(snippet:)();
  swift_release();
  dispatch thunk of SiriKitAceViewBuilder.build()();
  OUTLINED_FUNCTION_24_22();

  OUTLINED_FUNCTION_26_1();
}

uint64_t DefaultDisambiguationBuilder.makeViewsForIOSDisambiguation(utteranceViews:disambiguationItems:persons:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v43 = a4;
  uint64_t v8 = type metadata accessor for ImageSize();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)(v4 + 48);
  if (static PicsUtils.shouldUsePicsDisambiguationFormat(persons:sharedGlobals:)(a3))
  {
    v42[1] = a1;
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.siriPhone);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_0, v14, v15, "#DefaultDisambiguationBuilder use mixed card section for PICS", v16, 2u);
      swift_slowDealloc();
    }

    uint64_t v17 = *(unsigned __int8 *)(v5 + 40);
    (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for ImageSize.contactDisambiguation(_:), v8);
    type metadata accessor for SiriKitDisambiguationItem();
    unint64_t v18 = dispatch thunk of static SiriKitDisambiguationItem.allowedItems(disambiguationItems:deviceLockedForDisambiguation:)();
    static PicsDisambiguationBuilder.mixedCardSectionsFromDetailedSelectionItems(disambiguationItems:deviceIsLocked:sharedGlobals:persons:imageSize:)(v18, v17, (uint64_t)v12, a3);
    uint64_t v20 = v19;
    swift_bridgeObjectRelease();
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for SACardSnippet);
    uint64_t v21 = (void *)static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:)();
    swift_bridgeObjectRelease();
    outlined bridged method (mbnn) of @objc SACardSnippet.referencedCommands.setter(v20, v21);
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for ImageSize.contactDisambiguation(_:), v8);
    uint64_t v21 = (void *)static SiriKitDisambiguationSnippetFactory.makeDisambiguationSnippetPhone(disambiguationItems:deviceIsLocked:imageSize:)();
  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v23 = *(void *)v5;
  uint64_t v22 = *(void *)(v5 + 8);
  uint64_t v24 = *(void *)(v5 + 72);
  uint64_t v25 = *(void *)(v5 + 80);
  __swift_project_boxed_opaque_existential_1(v12, v24);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v25 + 8))(v44, v24, v25);
  id v26 = static PhoneCasinoFactory.makeSash<A>(intent:app:deviceState:)(v22, v23, v44, *(void *)(v43 + 16), *(void *)(v43 + 24));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  [v21 setSash:v26];

  uint64_t v27 = *(void *)(v5 + 16);
  uint64_t v28 = *(void **)(v5 + 24);
  uint64_t v29 = SiriKitDisambiguationList.rawItems.getter();
  LOBYTE(v27) = DefaultDisambiguationBuilder.shouldShowOpenContactsAppButton(parameterName:rawItems:)(v27, v28, v29);
  swift_bridgeObjectRelease();
  if (v27)
  {
    self;
    uint64_t v30 = swift_dynamicCastObjCClass();
    if (v30)
    {
      id v31 = v30;
      uint64_t v32 = one-time initialization token for siriPhone;
      id v33 = v21;
      if (v32 != -1) {
        swift_once();
      }
      uint64_t v34 = type metadata accessor for Logger();
      __swift_project_value_buffer(v34, (uint64_t)static Logger.siriPhone);
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v35, v36))
      {
        uint64_t v37 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v37 = 0;
        _os_log_impl(&dword_0, v35, v36, "#DefaultDisambiguationBuilder appending Open Contacts button on disambiguation snippet", v37, 2u);
        swift_slowDealloc();
      }

      DefaultDisambiguationBuilder.appendLaunchAppButton(to:)(v31);
    }
  }
  type metadata accessor for SiriKitAceViewBuilder();
  uint64_t v39 = *(void *)(v5 + 72);
  uint64_t v38 = *(void *)(v5 + 80);
  __swift_project_boxed_opaque_existential_1(v12, v39);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v38 + 8))(v44, v39, v38);
  dispatch thunk of static SiriKitAceViewBuilder.makeBuilder(deviceState:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  dispatch thunk of SiriKitAceViewBuilder.withUtteranceViews(utteranceViews:)();
  swift_release();
  dispatch thunk of SiriKitAceViewBuilder.addSnippet(snippet:)();
  swift_release();
  uint64_t v40 = dispatch thunk of SiriKitAceViewBuilder.build()();
  swift_release();

  return v40;
}

uint64_t specialized DefaultDisambiguationBuilder.shouldShowOpenContactsAppButton(parameterName:rawItems:)(uint64_t a1, void *a2, uint64_t a3)
{
  __swift_project_boxed_opaque_existential_1((void *)(v3 + 48), *(void *)(v3 + 72));
  OUTLINED_FUNCTION_24_2();
  v7();
  __swift_project_boxed_opaque_existential_1(v15, v15[3]);
  char v8 = DeviceState.isAuthenticatedForPhone.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  if (v8)
  {
    swift_bridgeObjectRetain();
    v9._uint64_t countAndFlagsBits = a1;
    v9._object = a2;
    if ((PhoneCallSlotNames.init(rawValue:)(v9).value & 0xFE) == 4)
    {
      uint64_t v10 = specialized _arrayConditionalCast<A, B>(_:)(a3);
      if (v10)
      {
        unint64_t v11 = (unint64_t)v10;
        if ((PhoneContactDisambiguationProperties.isHandleDisambiguation.getter((unint64_t)v10) & 1) == 0
          && ((specialized Sequence.contains(where:)(v11, (char *)&dword_0 + 2) & 1) == 0
           || (specialized Sequence.contains(where:)(v11, (char *)&dword_0 + 1) & 1) == 0))
        {
          char v14 = specialized Sequence.allSatisfy(_:)(v11, (char *)&dword_0 + 1);
          swift_bridgeObjectRelease();
          char v12 = v14 ^ 1;
          return v12 & 1;
        }
        swift_bridgeObjectRelease();
      }
    }
  }
  char v12 = 0;
  return v12 & 1;
}

uint64_t DefaultDisambiguationBuilder.shouldShowOpenContactsAppButton(parameterName:rawItems:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v7 = v3[9];
  uint64_t v8 = v3[10];
  __swift_project_boxed_opaque_existential_1(v3 + 6, v7);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v8 + 8))(v16, v7, v8);
  __swift_project_boxed_opaque_existential_1(v16, v16[3]);
  char v9 = DeviceState.isAuthenticatedForPhone.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  if (v9)
  {
    swift_bridgeObjectRetain();
    v10._uint64_t countAndFlagsBits = a1;
    v10._object = a2;
    if ((PhoneCallSlotNames.init(rawValue:)(v10).value & 0xFE) == 4)
    {
      unint64_t v11 = specialized _arrayConditionalCast<A, B>(_:)(a3);
      if (v11)
      {
        unint64_t v12 = (unint64_t)v11;
        if ((PhoneContactDisambiguationProperties.isHandleDisambiguation.getter((unint64_t)v11) & 1) == 0
          && ((specialized Sequence.contains(where:)(v12, (char *)&dword_0 + 2) & 1) == 0
           || (specialized Sequence.contains(where:)(v12, (char *)&dword_0 + 1) & 1) == 0))
        {
          char v15 = specialized Sequence.allSatisfy(_:)(v12, (char *)&dword_0 + 1);
          swift_bridgeObjectRelease();
          char v13 = v15 ^ 1;
          return v13 & 1;
        }
        swift_bridgeObjectRelease();
      }
    }
  }
  char v13 = 0;
  return v13 & 1;
}

void specialized DefaultDisambiguationBuilder.appendLaunchAppButton(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_0();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_4();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v11 - 8);
  OUTLINED_FUNCTION_4();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_4();
  uint64_t v18 = v17 - v16;
  uint64_t v70 = a1;
  id v19 = [a1 cardData];
  if (v19)
  {
    uint64_t v20 = v19;
    uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v23 = v22;
  }
  else
  {
    uint64_t v21 = 0;
    unint64_t v23 = 0xF000000000000000;
  }
  id v24 = objc_allocWithZone((Class)_SFPBCard);
  id v25 = @nonobjc _INPBContact.init(data:)(v21, v23);
  if (v25)
  {
    id v26 = v25;
    id v27 = [objc_allocWithZone((Class)SFCard) initWithProtobuf:v25];

    if (v27)
    {
      (*(void (**)(void))(class metadata base offset for PhoneCallDisplayTextCATs + **(void **)(v2 + 88) + 504))();
      uint64_t v28 = Result<>.firstPrint.getter();
      uint64_t v30 = v29;
      outlined destroy of Result<TemplatingResult, Error>(v18);
      if (v30)
      {
        id v31 = [objc_allocWithZone((Class)SFButtonCardSection) init];
        [v31 setSeparatorStyle:0];
        type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for SFRichText);
        id v32 = @nonobjc SFRichText.__allocating_init(string:)(v28, v30);
        [v31 setTitle:v32];

        id v33 = [objc_allocWithZone((Class)SAUIAppPunchOut) init];
        URL.init(string:)();
        uint64_t v34 = type metadata accessor for URL();
        os_log_type_t v36 = 0;
        if (__swift_getEnumTagSinglePayload(v14, 1, v34) != 1)
        {
          URL._bridgeToObjectiveC()(v35);
          os_log_type_t v36 = v37;
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v34 - 8) + 8))(v14, v34);
        }
        [v33 setPunchOutUri:v36];

        id v38 = v33;
        UUID.init()();
        UUID.uuidString.getter();
        (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, v4);
        NSString v39 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v38 setAceId:v39];

        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v40 = swift_allocObject();
        *(_OWORD *)(v40 + 16) = xmmword_46A030;
        id v41 = v38;
        id v42 = v31;
        uint64_t v43 = static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();

        *(void *)(v40 + 32) = v43;
        specialized Array._endMutation()();
        type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for SFAbstractCommand);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v42 setCommands:isa];

        id v45 = [v27 cardSections];
        if (v45)
        {
          uint64_t v46 = v45;
          type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for SFCardSection);
          uint64_t v47 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          id v48 = v42;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          uint64_t v49 = v70;
          if (*(void *)((char *)&dword_10 + (v47 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                         + (v47 & 0xFFFFFFFFFFFFFF8)) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          if (v47)
          {
            v50.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
          }
          else
          {
            v50.super.Class isa = 0;
          }
          [v27 setCardSections:v50.super.isa];
        }
        else
        {
          [v27 setCardSections:0];
          swift_bridgeObjectRelease();
          uint64_t v49 = v70;
        }
        uint64_t v60 = (objc_class *)[objc_allocWithZone((Class)_SFPBCard) initWithFacade:v27];
        Class v61 = v60;
        if (v60)
        {
          id v62 = [(objc_class *)v60 data];

          if (v62)
          {
            uint64_t v63 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v65 = v64;

            Class v61 = Data._bridgeToObjectiveC()().super.isa;
            outlined consume of Data._Representation(v63, v65);
          }
          else
          {
            Class v61 = 0;
          }
        }
        [v49 setCardData:v61];

        id v66 = [v49 referencedCommands];
        if (v66)
        {
          uint64_t v67 = v66;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
          uint64_t v68 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          id v41 = v41;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((char *)&dword_10 + (v68 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                         + (v68 & 0xFFFFFFFFFFFFFF8)) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          if (v68)
          {
            v69.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
          }
          else
          {
            v69.super.Class isa = 0;
          }
          [v49 setReferencedCommands:v69.super.isa];
        }
        else
        {
          [v49 setReferencedCommands:0];
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        if (one-time initialization token for siriPhone != -1) {
          swift_once();
        }
        uint64_t v56 = type metadata accessor for Logger();
        uint64_t v57 = OUTLINED_FUNCTION_25_0(v56, (uint64_t)static Logger.siriPhone);
        os_log_type_t v58 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v57, v58))
        {
          uint64_t v59 = (uint8_t *)OUTLINED_FUNCTION_7_2();
          *(_WORD *)uint64_t v59 = 0;
          _os_log_impl(&dword_0, v57, v58, "#DefaultDisambiguationBuilder failed to generate Open Contacts button label", v59, 2u);
          OUTLINED_FUNCTION_6();
        }
        else
        {
        }
      }
      OUTLINED_FUNCTION_26_1();
    }
    else
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v51 = type metadata accessor for Logger();
      uint64_t v71 = OUTLINED_FUNCTION_25_0(v51, (uint64_t)static Logger.siriPhone);
      os_log_type_t v52 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v71, v52))
      {
        uint64_t v53 = (uint8_t *)OUTLINED_FUNCTION_7_2();
        *(_WORD *)uint64_t v53 = 0;
        _os_log_impl(&dword_0, v71, v52, "#DefaultDisambiguationBuilder failed to get SFCard from SFCardSnippet", v53, 2u);
        OUTLINED_FUNCTION_6();
      }
      OUTLINED_FUNCTION_26_1();
    }
  }
  else
  {
    __break(1u);
  }
}

void DefaultDisambiguationBuilder.appendLaunchAppButton(to:)(NSObject *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_t v64 = a1;
  id v14 = [a1 cardData];
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v18 = v17;
  }
  else
  {
    uint64_t v16 = 0;
    unint64_t v18 = 0xF000000000000000;
  }
  id v19 = objc_allocWithZone((Class)_SFPBCard);
  id v20 = @nonobjc _INPBContact.init(data:)(v16, v18);
  if (v20)
  {
    uint64_t v21 = v20;
    id v22 = [objc_allocWithZone((Class)SFCard) initWithProtobuf:v20];

    if (v22)
    {
      (*(void (**)(void))(class metadata base offset for PhoneCallDisplayTextCATs + **(void **)(v2 + 88) + 504))();
      uint64_t v23 = Result<>.firstPrint.getter();
      uint64_t v25 = v24;
      outlined destroy of Result<TemplatingResult, Error>((uint64_t)v13);
      if (v25)
      {
        id v26 = [objc_allocWithZone((Class)SFButtonCardSection) init];
        [v26 setSeparatorStyle:0];
        type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for SFRichText);
        id v27 = @nonobjc SFRichText.__allocating_init(string:)(v23, v25);
        [v26 setTitle:v27];

        id v28 = [objc_allocWithZone((Class)SAUIAppPunchOut) init];
        URL.init(string:)();
        uint64_t v29 = type metadata accessor for URL();
        id v31 = 0;
        if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v29) != 1)
        {
          URL._bridgeToObjectiveC()(v30);
          id v31 = v32;
          (*(void (**)(char *, uint64_t))(*(void *)(v29 - 8) + 8))(v10, v29);
        }
        [v28 setPunchOutUri:v31];

        id v33 = v28;
        UUID.init()();
        UUID.uuidString.getter();
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        NSString v34 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v33 setAceId:v34];

        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v35 = swift_allocObject();
        *(_OWORD *)(v35 + 16) = xmmword_46A030;
        id v36 = v33;
        id v37 = v26;
        uint64_t v38 = static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();

        *(void *)(v35 + 32) = v38;
        uint64_t v65 = v35;
        specialized Array._endMutation()();
        type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for SFAbstractCommand);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v37 setCommands:isa];

        id v40 = [v22 cardSections];
        if (v40)
        {
          id v41 = v40;
          type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for SFCardSection);
          uint64_t v42 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v65 = v42;
          id v43 = v37;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          os_log_t v44 = v64;
          if (*(void *)((char *)&dword_10 + (v65 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                         + (v65 & 0xFFFFFFFFFFFFFF8)) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          if (v65)
          {
            v45.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
          }
          else
          {
            v45.super.Class isa = 0;
          }
          [v22 setCardSections:v45.super.isa];
        }
        else
        {
          [v22 setCardSections:0];
          swift_bridgeObjectRelease();
          os_log_t v44 = v64;
        }
        uint64_t v54 = (objc_class *)[objc_allocWithZone((Class)_SFPBCard) initWithFacade:v22];
        Class v55 = v54;
        if (v54)
        {
          id v56 = [(objc_class *)v54 data];

          if (v56)
          {
            uint64_t v57 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v59 = v58;

            Class v55 = Data._bridgeToObjectiveC()().super.isa;
            outlined consume of Data._Representation(v57, v59);
          }
          else
          {
            Class v55 = 0;
          }
        }
        [v44 setCardData:v55];

        id v60 = [v44 referencedCommands];
        if (v60)
        {
          Class v61 = v60;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
          uint64_t v62 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v65 = v62;
          id v36 = v36;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((char *)&dword_10 + (v65 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                         + (v65 & 0xFFFFFFFFFFFFFF8)) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          if (v65)
          {
            v63.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
          }
          else
          {
            v63.super.Class isa = 0;
          }
          [v44 setReferencedCommands:v63.super.isa];
        }
        else
        {
          [v44 setReferencedCommands:0];
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        if (one-time initialization token for siriPhone != -1) {
          swift_once();
        }
        uint64_t v50 = type metadata accessor for Logger();
        __swift_project_value_buffer(v50, (uint64_t)static Logger.siriPhone);
        uint64_t v51 = Logger.logObject.getter();
        os_log_type_t v52 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v51, v52))
        {
          uint64_t v53 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v53 = 0;
          _os_log_impl(&dword_0, v51, v52, "#DefaultDisambiguationBuilder failed to generate Open Contacts button label", v53, 2u);
          swift_slowDealloc();
        }
        else
        {
        }
      }
    }
    else
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v46 = type metadata accessor for Logger();
      __swift_project_value_buffer(v46, (uint64_t)static Logger.siriPhone);
      os_log_t v64 = (os_log_t)Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v64, v47))
      {
        id v48 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v48 = 0;
        _os_log_impl(&dword_0, v64, v47, "#DefaultDisambiguationBuilder failed to get SFCard from SFCardSnippet", v48, 2u);
        swift_slowDealloc();
      }
      os_log_t v49 = v64;
    }
  }
  else
  {
    __break(1u);
  }
}

id @nonobjc SFRichText.__allocating_init(string:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    NSString v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v2 = 0;
  }
  id v3 = [(id)swift_getObjCClassFromMetadata() textWithString:v2];

  return v3;
}

uint64_t protocol witness for IdiomSensitiveViewBuilder.sharedGlobals.getter in conformance DefaultDisambiguationBuilder<A>@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + 48, a1);
}

_UNKNOWN **sub_17CE54()
{
  return &protocol witness table for DefaultDisambiguationBuilder<A>;
}

uint64_t destroy for DefaultDisambiguationBuilder(uint64_t a1)
{
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1 + 48);

  return swift_release();
}

uint64_t initializeWithCopy for DefaultDisambiguationBuilder(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v6 = a2 + 48;
  long long v7 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v7;
  uint64_t v8 = v7;
  uint64_t v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_retain();
  id v10 = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  v9(a1 + 48, v6, v8);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DefaultDisambiguationBuilder(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  id v6 = v4;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 48), (uint64_t *)(a2 + 48));
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_retain();
  swift_release();
  return a1;
}

void *__swift_memcpy96_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x60uLL);
}

uint64_t assignWithTake for DefaultDisambiguationBuilder(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  uint64_t v4 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  __swift_destroy_boxed_opaque_existential_1(a1 + 48);
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DefaultDisambiguationBuilder(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 96))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DefaultDisambiguationBuilder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for DefaultDisambiguationBuilder()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined destroy of PhoneContactDisambiguationHeaderItemFactory(uint64_t a1)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_1_52()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_6_39()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_7_43()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_8_47()
{
  return v0;
}

void OUTLINED_FUNCTION_10_28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (*a10)(void, void), uint64_t a11)
{
  closure #1 in IdiomSensitiveViewBuilder.makeViews(utteranceViews:_:)(v11, 0, v12, v13, a11, v14 & 0x1FF, a10);
}

uint64_t OUTLINED_FUNCTION_12_23()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_13_21()
{
  return v0;
}

unint64_t OUTLINED_FUNCTION_16_29()
{
  return PhoneCallSlotNames.rawValue.getter(v0);
}

unint64_t OUTLINED_FUNCTION_17_18()
{
  return PhoneCallSlotNames.rawValue.getter(v0);
}

uint64_t OUTLINED_FUNCTION_19_22()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_24_22()
{
  return swift_release();
}

id static AnswerCallIntentConversion.convertToIntent(phoneCallNLIntent:app:sharedGlobals:previousIntent:previousIntentResponse:groupResolver:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  long long v6 = (void *)OUTLINED_FUNCTION_0_12(a1, a2, a3, a4, a5, a6);

  return specialized static AnswerCallIntentConversion.convertToIntent(phoneCallNLIntent:app:sharedGlobals:previousIntent:previousIntentResponse:groupResolver:)(v6, v7, v8, v9, v10);
}

uint64_t static AnswerCallIntentConversion.getCallIdentifierFromCallNotifications(sharedGlobals:app:)(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 56))(v2, v3);
  LOBYTE(v2) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 160))(v4);
  swift_release();
  if ((v2 & 1) != 0 && !App.isFirstParty()())
  {
    uint64_t v7 = a1[3];
    uint64_t v8 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    if (!(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 112))(v7, v8)) {
      return 0;
    }
    uint64_t v9 = CurrentRequest.refId.getter();
    uint64_t v11 = v10;
    swift_release();
    if (v11)
    {
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      uint64_t v12 = OUTLINED_FUNCTION_3_48();
      v13(v12);
      uint64_t v14 = v22;
      uint64_t v15 = v23;
      __swift_project_boxed_opaque_existential_1(v21, v22);
      char v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 16))(v9, v11, v14, v15);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
      if (v16)
      {
        __swift_project_boxed_opaque_existential_1(a1, a1[3]);
        uint64_t v17 = OUTLINED_FUNCTION_3_48();
        v18(v17);
        uint64_t v19 = v22;
        uint64_t v20 = v23;
        __swift_project_boxed_opaque_existential_1(v21, v22);
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 32))(v9, v11, v19, v20);
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
        return v5;
      }
      swift_bridgeObjectRelease();
    }
  }
  return 0;
}

id specialized static AnswerCallIntentConversion.convertToIntent(phoneCallNLIntent:app:sharedGlobals:previousIntent:previousIntentResponse:groupResolver:)(void *a1, uint64_t a2, uint64_t a3, id a4, void *a5)
{
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, String?>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v50 = v9;
  __chkstk_darwin(v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<PhoneCallNLIntent, INCallAudioRoute>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v51 = v11;
  __chkstk_darwin(v12);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v13 = a4;
  if (PhoneCallNLIntent.hasAnyConfirmation()())
  {
    if (a4)
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      __swift_project_value_buffer(v14, (uint64_t)static Logger.siriPhone);
      id v15 = a4;
      char v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v16, v17))
      {
        unint64_t v18 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v55 = swift_slowAlloc();
        *(_DWORD *)unint64_t v18 = 136315138;
        id v19 = v15;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INAnswerCallIntent?);
        uint64_t v20 = String.init<A>(describing:)();
        uint64_t v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, (uint64_t *)&v55);
        OUTLINED_FUNCTION_6_40(v22);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_0, v16, v17, "#AnswerCallIntentConversion is confirmation, returning previousIntent: %s.", v18, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_6();
        OUTLINED_FUNCTION_6();
      }
      else
      {
      }
      id v31 = v15;
      return a4;
    }
    uint64_t v13 = 0;
  }
  outlined init with copy of SignalProviding(a3, (uint64_t)&v55);
  uint64_t v23 = swift_allocObject();
  outlined init with take of AppSelectionSignalComponent(&v55, v23 + 16);
  *(void *)(v23 + 56) = v13;
  id v24 = v13;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PhoneCallNLIntent);
  type metadata accessor for INCallAudioRoute(0);
  Transformer.init(transform:)();
  *(void *)(swift_allocObject() + 16) = a5;
  id v25 = a5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  Transformer.init(transform:)();
  Transformer.transform.getter();
  uint64_t v26 = OUTLINED_FUNCTION_7();
  v27(v26);
  swift_release();
  uint64_t v28 = v55;
  Transformer.transform.getter();
  uint64_t v29 = OUTLINED_FUNCTION_7();
  v30(v29);
  swift_release();
  uint64_t v33 = *((void *)&v55 + 1);
  uint64_t v32 = v55;
  outlined init with copy of SignalProviding(a3, (uint64_t)&v55);
  if (!v33)
  {
    uint64_t v32 = static AnswerCallIntentConversion.getCallIdentifierFromCallNotifications(sharedGlobals:app:)(&v55);
    uint64_t v33 = v34;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
  id v35 = objc_allocWithZone((Class)INAnswerCallIntent);
  id v36 = @nonobjc INAnswerCallIntent.init(audioRoute:callIdentifier:)(v28, v32, v33);
  a4 = specialized static NLv4IntentConversion.setIntentMetadata(for:sharedGlobals:app:previousIntent:)((int)v36, a3, a2, (int)a4, v37, v38, v39, v40, v46, v47, v48, a2, v50, v51, v52, v53, v54, v55, *((uint64_t *)&v55 + 1),
         v56,
         v57,
         v58,
         v59,
         v60);

  uint64_t v41 = OUTLINED_FUNCTION_1_53();
  v42(v41);
  uint64_t v43 = OUTLINED_FUNCTION_4_48();
  v44(v43);
  return a4;
}

ValueMetadata *type metadata accessor for AnswerCallIntentConversion()
{
  return &type metadata for AnswerCallIntentConversion;
}

uint64_t sub_17DD04()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t partial apply for specialized closure #1 in static Transformer<>.transformer<A>(intentType:sharedGlobals:previousIntent:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return specialized closure #1 in static Transformer<>.transformer<A>(intentType:sharedGlobals:previousIntent:)(a1, (void *)(v2 + 16), *(void **)(v2 + 56), a2);
}

{
  uint64_t v2;

  return specialized closure #1 in static Transformer<>.transformer<A>(intentType:sharedGlobals:previousIntent:)(a1, (void *)(v2 + 16), *(void **)(v2 + 56), a2);
}

uint64_t sub_17DD64()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t OUTLINED_FUNCTION_1_53()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_3_48()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_4_48()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_6_40(uint64_t a1)
{
  *(void *)(v1 - 136) = a1;
  return v1 - 136;
}

void *PhoneContactDisambiguationHeaderItemFactory.makeHeaderItems(persons:)(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Image();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (uint64_t *)((char *)&v30 - v9);
  if (!(a1 >> 62))
  {
    uint64_t v11 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (v11) {
      goto LABEL_3;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_14;
  }
LABEL_3:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (a1 & 0xC000000000000001) == 0, a1);
  if ((a1 & 0xC000000000000001) != 0) {
    id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v12 = *(id *)(a1 + 32);
  }
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_40();
  if ((v14 & 1) == 0
    || (unint64_t v15 = swift_bridgeObjectRetain(),
        char v16 = PhoneContactDisambiguationProperties.isHandleDisambiguation.getter(v15),
        swift_bridgeObjectRelease(),
        (v16 & 1) == 0))
  {

    return _swiftEmptyArrayStorage;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.siriPhone);
  unint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl(&dword_0, v18, v19, "#PhoneContactDisambiguationHeaderItemFactory Building header item", v20, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for SiriKitDisambiguationItemComponent();
  id v21 = [v13 displayName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  dispatch thunk of static SiriKitDisambiguationItemComponent.makeBuilder(_:)();
  swift_bridgeObjectRelease();
  uint64_t v22 = dispatch thunk of SiriKitDisambiguationItemComponent.Builder.build()();
  swift_release();
  OUTLINED_FUNCTION_0_40();
  char v24 = v23;
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  char v25 = DeviceState.isAuthenticatedForPhone.getter();
  INPerson.buildDisplayImage(supportsCompactView:isDeviceLocked:)(v24 & 1, (v25 & 1) == 0, v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v26 = swift_allocObject();
  long long v30 = xmmword_46A030;
  *(_OWORD *)(v26 + 16) = xmmword_46A030;
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = v30;
  *(void *)(v27 + 32) = v22;
  uint64_t v31 = v27;
  specialized Array._endMutation()();
  (*(void (**)(char *, uint64_t *, uint64_t))(v5 + 16))(v8, v10, v4);
  type metadata accessor for SiriKitDisambiguationItem();
  swift_allocObject();
  swift_retain();
  *(void *)(v26 + 32) = SiriKitDisambiguationItem.init(components:image:utterance:allowLineWrapForDisplayText:)();
  uint64_t v31 = v26;
  specialized Array._endMutation()();
  uint64_t v28 = v31;
  swift_release();

  (*(void (**)(uint64_t *, uint64_t))(v5 + 8))(v10, v4);
  return (void *)v28;
}

ValueMetadata *type metadata accessor for PhoneContactDisambiguationHeaderItemFactory()
{
  return &type metadata for PhoneContactDisambiguationHeaderItemFactory;
}

void OUTLINED_FUNCTION_0_40()
{
  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  DeviceState.isStandaloneIOS.getter();
}

uint64_t StartAudioCallAceViewProvider.__allocating_init(templatingService:sharedGlobals:)(uint64_t a1, uint64_t a2)
{
  return StartAudioCallAceViewProvider.init(templatingService:sharedGlobals:)(a1, a2);
}

uint64_t StartAudioCallAceViewProvider.init(templatingService:sharedGlobals:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + direct field offset for StartAudioCallAceViewProvider.templatingService) = a1;
  outlined init with copy of SignalProviding(a2, v2 + direct field offset for StartAudioCallAceViewProvider.sharedGlobals);
  uint64_t v4 = DefaultAceViewProvider.init()();
  __swift_destroy_boxed_opaque_existential_1(a2);
  return v4;
}

uint64_t StartAudioCallAceViewProvider.makeAceViewsForResolveNeedsDisambiguation(app:parameterName:intent:utteranceViews:disambiguationList:deviceIsLocked:_:)(uint64_t a1, uint64_t a2, void *a3, void *a4, unint64_t a5, uint64_t a6, char a7, void (*a8)(uint64_t, void), uint64_t a9)
{
  uint64_t v17 = type metadata accessor for CATOption();
  __chkstk_darwin(v17 - 8);
  swift_bridgeObjectRetain();
  v18._uint64_t countAndFlagsBits = a2;
  v18._object = a3;
  if (PhoneCallSlotNames.init(rawValue:)(v18).value == PhoneCallFlowDelegatePlugin_PhoneCallSlotNames_contact)
  {
    uint64_t v31 = v9 + direct field offset for StartAudioCallAceViewProvider.sharedGlobals;
    type metadata accessor for PhoneCallDisplayTextCATs();
    static CATOption.defaultMode.getter();
    uint64_t v19 = CATWrapper.__allocating_init(options:globals:)();
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.siriPhone);
    id v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      char v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v23 = 0;
      _os_log_impl(&dword_0, v21, v22, "#StartCallViewBuilders Providing DefaultDisambiguationBuilder", v23, 2u);
      swift_slowDealloc();
    }

    outlined init with copy of SignalProviding(v31, (uint64_t)v35);
    v33[0] = a1;
    v33[1] = a4;
    v33[2] = a2;
    v33[3] = a3;
    v33[4] = a6;
    char v34 = a7 & 1;
    v35[5] = v19;
    swift_bridgeObjectRetain();
    swift_retain();
    id v24 = a4;
    swift_retain();
    specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:_:)(a5, a8, a9);
    return outlined destroy of DefaultDisambiguationBuilder<INStartAudioCallIntent>((uint64_t)v33);
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.siriPhone);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl(&dword_0, v27, v28, "Not disambiguating contact - not building a disambiguation snippet", v29, 2u);
      swift_slowDealloc();
    }

    if (a5 >> 62)
    {
      type metadata accessor for SAAceView();
      swift_bridgeObjectRetain();
      uint64_t v30 = _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for SAAceView();
      uint64_t v30 = a5;
    }
    a8(v30, 0);
    return swift_bridgeObjectRelease();
  }
}

void StartAudioCallAceViewProvider.init()()
{
}

uint64_t StartAudioCallAceViewProvider.__ivar_destroyer()
{
  swift_release();
  uint64_t v1 = v0 + direct field offset for StartAudioCallAceViewProvider.sharedGlobals;

  return __swift_destroy_boxed_opaque_existential_1(v1);
}

uint64_t StartAudioCallAceViewProvider.deinit()
{
  uint64_t v0 = DefaultAceViewProvider.deinit();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + direct field offset for StartAudioCallAceViewProvider.sharedGlobals);
  return v0;
}

uint64_t StartAudioCallAceViewProvider.__deallocating_deinit()
{
  StartAudioCallAceViewProvider.deinit();

  return swift_deallocClassInstance();
}

uint64_t outlined destroy of DefaultDisambiguationBuilder<INStartAudioCallIntent>(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DefaultDisambiguationBuilder<INStartAudioCallIntent>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for StartAudioCallAceViewProvider()
{
  uint64_t result = type metadata singleton initialization cache for StartAudioCallAceViewProvider;
  if (!type metadata singleton initialization cache for StartAudioCallAceViewProvider) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for StartAudioCallAceViewProvider()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for StartAudioCallAceViewProvider()
{
  return type metadata accessor for StartAudioCallAceViewProvider();
}

PhoneCallFlowDelegatePlugin::AnnounceCallBellCATs::Properties_optional __swiftcall AnnounceCallBellCATs.Properties.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AnnounceCallBellCATs.Properties.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return (PhoneCallFlowDelegatePlugin::AnnounceCallBellCATs::Properties_optional)3;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::AnnounceCallBellCATs::Properties_optional)v3;
  }
}

unint64_t AnnounceCallBellCATs.Properties.rawValue.getter(char a1)
{
  if (!a1) {
    return 0xD000000000000026;
  }
  if (a1 == 1) {
    return 0xD000000000000028;
  }
  return 0xD000000000000025;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnnounceCallBellCATs.Properties(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnnounceCallBellCATs.Properties()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnnounceCallBellCATs.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::AnnounceCallBellCATs::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AnnounceCallBellCATs.Properties@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::AnnounceCallBellCATs::Properties_optional *a2@<X8>)
{
  result.value = AnnounceCallBellCATs.Properties.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AnnounceCallBellCATs.Properties@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = AnnounceCallBellCATs.Properties.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t AnnounceCallBellCATs.announceCallBellEnded(completion:)()
{
  return OUTLINED_FUNCTION_6_10();
}

uint64_t AnnounceCallBellCATs.announceCallBellEnded()(uint64_t a1)
{
  uint64_t v2 = OUTLINED_FUNCTION_3_0();
  unint64_t v3 = (void *)OUTLINED_FUNCTION_14(v2);
  *unint64_t v3 = v4;
  v3[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return v6(a1, 0xD000000000000026, 0x800000000048D450, _swiftEmptyArrayStorage);
}

uint64_t AnnounceCallBellCATs.announceCallBellEnded()()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *uint64_t v1 = v2;
  v1[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return v4(0xD000000000000026, 0x800000000048D450, _swiftEmptyArrayStorage);
}

{
  return OUTLINED_FUNCTION_7_12();
}

uint64_t AnnounceCallBellCATs.announceCallBellStarted(device:completion:)(unint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_31_0();
  OUTLINED_FUNCTION_27_0(v2, (__n128)xmmword_467710);
  if (a1)
  {
    uint64_t v3 = type metadata accessor for SirikitDeviceState();
    unint64_t v4 = a1;
  }
  else
  {
    unint64_t v4 = 0;
    uint64_t v3 = 0;
    v2[3].n128_u64[1] = 0;
    v2[4].n128_u64[0] = 0;
  }
  v2[3].n128_u64[0] = v4;
  v2[4].n128_u64[1] = v3;
  swift_retain();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();

  return swift_bridgeObjectRelease();
}

uint64_t AnnounceCallBellCATs.announceCallBellStarted(device:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  void v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_21_1((uint64_t)AnnounceCallBellCATs.announceCallBellStarted(device:));
}

uint64_t AnnounceCallBellCATs.announceCallBellStarted(device:)()
{
  unint64_t v1 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_31_0();
  v0[5] = v2;
  uint64_t v3 = OUTLINED_FUNCTION_24_7(v2, (__n128)xmmword_467710);
  if (v1)
  {
    uint64_t v3 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v2[3].n128_u64[1] = 0;
    v2[4].n128_u64[0] = 0;
  }
  v2[3].n128_u64[0] = v1;
  v2[4].n128_u64[1] = v3;
  OUTLINED_FUNCTION_8_1();
  unint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *unint64_t v4 = v0;
  v4[1] = AnnounceCallBellCATs.announceCallBellStarted(device:);
  uint64_t v5 = v0[2];
  return v7(v5, 0xD000000000000028, 0x800000000048D480, v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  unint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_2();
  void *v5 = v4;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(PhoneCallCommonCATs.orList(items:), 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_47_0();
    return v6();
  }
}

{
  void *v0;
  unint64_t v1;
  __n128 *v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v6)(unint64_t, unint64_t, __n128 *);
  uint64_t v7;

  unint64_t v1 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_31_0();
  v0[4] = v2;
  uint64_t v3 = OUTLINED_FUNCTION_24_7(v2, (__n128)xmmword_467710);
  if (v1)
  {
    uint64_t v3 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v2[3].n128_u64[1] = 0;
    v2[4].n128_u64[0] = 0;
  }
  v2[3].n128_u64[0] = v1;
  v2[4].n128_u64[1] = v3;
  OUTLINED_FUNCTION_8_1();
  unint64_t v4 = (void *)swift_task_alloc();
  v0[5] = v4;
  *unint64_t v4 = v0;
  v4[1] = AnnounceCallBellCATs.announceCallBellStarted(device:);
  return v6(0xD000000000000028, 0x800000000048D480, v2);
}

uint64_t AnnounceCallBellCATs.announceCallBellStarted(device:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_21_1((uint64_t)AnnounceCallBellCATs.announceCallBellStarted(device:));
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v10;

  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v7 = v6;
  *(void *)(v5 + 48) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return _swift_task_switch(UnsupportedFlowCATs.unsupportedOnDeviceType(device:), 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v8 = *(uint64_t (**)(uint64_t))(v6 + 8);
    return v8(a1);
  }
}

uint64_t AnnounceCallBellCATs.announceCallBellStarted(device:)(unint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_31_0();
  OUTLINED_FUNCTION_27_0(v2, (__n128)xmmword_467710);
  if (a1)
  {
    uint64_t v3 = type metadata accessor for SirikitDeviceState();
    unint64_t v4 = a1;
  }
  else
  {
    unint64_t v4 = 0;
    uint64_t v3 = 0;
    v2[3].n128_u64[1] = 0;
    v2[4].n128_u64[0] = 0;
  }
  v2[3].n128_u64[0] = v4;
  v2[4].n128_u64[1] = v3;
  swift_retain();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();

  return swift_bridgeObjectRelease();
}

uint64_t AnnounceCallBellCATs.informDoubleTapToEnd(completion:)()
{
  return OUTLINED_FUNCTION_6_10();
}

uint64_t AnnounceCallBellCATs.informDoubleTapToEnd()(uint64_t a1)
{
  uint64_t v2 = OUTLINED_FUNCTION_3_0();
  uint64_t v3 = (void *)OUTLINED_FUNCTION_14(v2);
  *uint64_t v3 = v4;
  v3[1] = UnsupportedFlowCATs.deleteVoicemail();
  return v6(a1, 0xD000000000000025, 0x800000000048D4B0, _swiftEmptyArrayStorage);
}

uint64_t AnnounceCallBellCATs.informDoubleTapToEnd()()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *uint64_t v1 = v2;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  return v4(0xD000000000000025, 0x800000000048D4B0, _swiftEmptyArrayStorage);
}

{
  return OUTLINED_FUNCTION_7_12();
}

uint64_t AnnounceCallBellCATs.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return AnnounceCallBellCATs.init(templateDir:options:globals:)(a1, a2);
}

uint64_t AnnounceCallBellCATs.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CATOption();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v8 - 8);
  outlined init with copy of URL?(a1, (uint64_t)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  uint64_t v10 = CATWrapper.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  outlined destroy of URL?(a1);
  return v10;
}

unint64_t lazy protocol witness table accessor for type AnnounceCallBellCATs.Properties and conformance AnnounceCallBellCATs.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type AnnounceCallBellCATs.Properties and conformance AnnounceCallBellCATs.Properties;
  if (!lazy protocol witness table cache variable for type AnnounceCallBellCATs.Properties and conformance AnnounceCallBellCATs.Properties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnounceCallBellCATs.Properties and conformance AnnounceCallBellCATs.Properties);
  }
  return result;
}

uint64_t type metadata accessor for AnnounceCallBellCATs()
{
  uint64_t result = type metadata singleton initialization cache for AnnounceCallBellCATs;
  if (!type metadata singleton initialization cache for AnnounceCallBellCATs) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for AnnounceCallBellCATs()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for AnnounceCallBellCATs()
{
  return type metadata accessor for AnnounceCallBellCATs();
}

unsigned char *storeEnumTagSinglePayload for AnnounceCallBellCATs.Properties(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x17F644);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnnounceCallBellCATs.Properties()
{
  return &type metadata for AnnounceCallBellCATs.Properties;
}

void *PhoneCallEntitlements.answerCallNotificationsFromBackground.unsafeMutableAddressor()
{
  return &static PhoneCallEntitlements.answerCallNotificationsFromBackground;
}

unint64_t static PhoneCallEntitlements.answerCallNotificationsFromBackground.getter()
{
  return 0xD000000000000038;
}

ValueMetadata *type metadata accessor for PhoneCallEntitlements()
{
  return &type metadata for PhoneCallEntitlements;
}

void *CallingIntentUnsupportedValueFlowStrategy.__allocating_init(delegate:startCallCATs:startCallCatPatterns:phoneCallCommonCATs:phoneCallCommonCatPatterns:startCallCatsSimple:phoneCallDisplayTextCATsSimple:siriKitEventSender:appInfoBuilder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return CallingIntentUnsupportedValueFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:phoneCallCommonCATs:phoneCallCommonCatPatterns:startCallCatsSimple:phoneCallDisplayTextCATsSimple:siriKitEventSender:appInfoBuilder:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void *CallingIntentUnsupportedValueFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:phoneCallCommonCATs:phoneCallCommonCatPatterns:startCallCatsSimple:phoneCallDisplayTextCATsSimple:siriKitEventSender:appInfoBuilder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13 = *v9;
  *(uint64_t *)((char *)v9 + direct field offset for CallingIntentUnsupportedValueFlowStrategy.startCallCatsSimple) = a6;
  outlined init with copy of SignalProviding(a3, (uint64_t)v28);
  outlined init with copy of SignalProviding(a5, (uint64_t)v27);
  outlined init with copy of SignalProviding(a8, (uint64_t)v26);
  outlined init with copy of SignalProviding(a9, (uint64_t)v25);
  uint64_t v14 = *(void *)(v13 + 264);
  uint64_t v15 = *(void *)(v13 + 272);
  swift_retain();
  uint64_t v16 = default argument 5 of CallingIntentUnsupportedValueFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:phoneCallCommonCATs:phoneCallCommonCatPatterns:startCallCatsSimple:phoneCallDisplayTextCATsSimple:siriKitEventSender:appInfoBuilder:)(v14, v15);
  uint64_t v17 = default argument 5 of CallingIntentBaseFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:startCallCATsSimple:phoneCallCommonCATs:phoneCallCommonCATsSimple:phoneCallCommonCatPatterns:phoneCallDisplayTextCATsSimple:responseGenerator:siriKitEventSender:appInfoBuilder:)(v14, v15);
  default argument 7 of InCallActionHandleIntentFlowStrategy.init(sharedGlobals:phoneCallBaseCatTemplatingService:aceViewProvider:nlContextProvider:canUseServerTTS:shouldShowDialogAfterIntentHandled:hangUpCallCATsSimple:responseGenerator:biomeEventSender:)();
  Swift::String v18 = CallingIntentBaseFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:startCallCATsSimple:phoneCallCommonCATs:phoneCallCommonCATsSimple:phoneCallCommonCatPatterns:phoneCallDisplayTextCATsSimple:responseGenerator:siriKitEventSender:appInfoBuilder:)(a1, a2, (uint64_t)v28, v16, a4, v17, (uint64_t)v27, a7, (uint64_t)v24, (uint64_t)v26, v25);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a9);
  __swift_destroy_boxed_opaque_existential_1(a8);
  __swift_destroy_boxed_opaque_existential_1(a5);
  __swift_destroy_boxed_opaque_existential_1(a3);
  return v18;
}

uint64_t CallingIntentUnsupportedValueFlowStrategy.makeUnsupportedValueTemplatingResultOutput(resolveRecord:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[20] = v2;
  v1[21] = v0;
  v1[19] = v3;
  OUTLINED_FUNCTION_2();
  v1[22] = v4;
  uint64_t v5 = type metadata accessor for TemplatingResult();
  v1[23] = v5;
  OUTLINED_FUNCTION_19_0(v5);
  v1[24] = v6;
  v1[25] = OUTLINED_FUNCTION_35();
  uint64_t v7 = type metadata accessor for UUID();
  v1[26] = v7;
  OUTLINED_FUNCTION_19_0(v7);
  v1[27] = v8;
  v1[28] = OUTLINED_FUNCTION_35();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_11_0(v9);
  v1[29] = OUTLINED_FUNCTION_28_2();
  v1[30] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for ParameterIdentifier();
  v1[31] = v10;
  OUTLINED_FUNCTION_19_0(v10);
  v1[32] = v11;
  v1[33] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v12, v13, v14);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  *(void *)(v3 + 288) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  void *v0;
  int8x16_t *v1;
  void *v2;
  uint64_t v4;

  OUTLINED_FUNCTION_1_0();
  v0[37] = v0[17];
  uint64_t v1 = (int8x16_t *)swift_task_alloc();
  v0[38] = v1;
  OUTLINED_FUNCTION_72_5(v1);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[39] = v2;
  *uint64_t v2 = v0;
  v2[1] = CallingIntentUnsupportedValueFlowStrategy.makeUnsupportedValueTemplatingResultOutput(resolveRecord:);
  OUTLINED_FUNCTION_62_7();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_40_10();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 320) = v0;
  swift_task_dealloc();
  if (v0) {
    swift_bridgeObjectRelease();
  }
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_18_3();
  swift_task_dealloc();
  OUTLINED_FUNCTION_101_0();
  outlined destroy of UsoBuilderOptions?(v0, &demangling cache variable for type metadata for NLContextUpdate?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_101_0();
  outlined destroy of UsoBuilderOptions?(v0, &demangling cache variable for type metadata for NLContextUpdate?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v1();
}

uint64_t CallingIntentUnsupportedValueFlowStrategy.makeUnsupportedValueTemplatingResultOutput(resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20)
{
  OUTLINED_FUNCTION_19_13();
  a19 = v21;
  a20 = v22;
  OUTLINED_FUNCTION_48();
  a18 = v20;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.siriPhone);
  id v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)OUTLINED_FUNCTION_47();
    a9 = OUTLINED_FUNCTION_14_0();
    *(_DWORD *)uint64_t v26 = 136315138;
    v20[18] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000003ALL, 0x8000000000494DA0, &a9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v24, v25, "#CallingIntentUnsupportedFlowStrategy %s", v26, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }

  uint64_t v27 = v20[30];
  swift_getAssociatedTypeWitness();
  OUTLINED_FUNCTION_94_2();
  ParameterResolutionRecord.parameter.getter();
  uint64_t v28 = ParameterIdentifier.name.getter();
  uint64_t v30 = v29;
  OUTLINED_FUNCTION_66_1();
  v31();
  v32._uint64_t countAndFlagsBits = v28;
  v32._object = v30;
  v33.value = PhoneCallSlotNames.init(rawValue:)(v32).value;
  uint64_t v34 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v27, 1, 1, v34);
  if (v33.value - 4 >= 2)
  {
    if (v33.value == PhoneCallFlowDelegatePlugin_PhoneCallSlotNames_preferredCallProvider)
    {
      int v38 = (int8x16_t *)swift_task_alloc();
      v20[34] = v38;
      OUTLINED_FUNCTION_72_5(v38);
      int v39 = (void *)swift_task_alloc();
      v20[35] = v39;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SAAceView]);
      *int v39 = v20;
      v39[1] = CallingIntentUnsupportedValueFlowStrategy.makeUnsupportedValueTemplatingResultOutput(resolveRecord:);
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v36 = v20[29];
    uint64_t v35 = v20[30];
    NLContextUpdate.init()();
    __swift_storeEnumTagSinglePayload(v36, 0, 1, v34);
    outlined assign with take of NLContextUpdate?(v36, v35);
    if (!__swift_getEnumTagSinglePayload(v35, 1, v34))
    {
      type metadata accessor for MachineUtteranceBuilder();
      swift_allocObject();
      MachineUtteranceBuilder.init()();
      if (one-time initialization token for callId != -1) {
        swift_once();
      }
      TerminalOntologyNode.name.getter();
      OUTLINED_FUNCTION_85_3();
      UUID.init()();
      UUID.uuidString.getter();
      OUTLINED_FUNCTION_26();
      v37();
      OUTLINED_FUNCTION_61();
      dispatch thunk of MachineUtteranceBuilder.addMapping(node:value:)();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      dispatch thunk of MachineUtteranceBuilder.build()();
      swift_release();
      OUTLINED_FUNCTION_20_7();
      NLContextUpdate.nlInput.setter();
    }
  }
  v20[37] = _swiftEmptyArrayStorage;
  int v40 = (int8x16_t *)swift_task_alloc();
  v20[38] = v40;
  OUTLINED_FUNCTION_72_5(v40);
  uint64_t v41 = (void *)swift_task_alloc();
  v20[39] = v41;
  *uint64_t v41 = v20;
  v41[1] = CallingIntentUnsupportedValueFlowStrategy.makeUnsupportedValueTemplatingResultOutput(resolveRecord:);
  OUTLINED_FUNCTION_62_7();
LABEL_13:
  OUTLINED_FUNCTION_4_3();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v42, v43, v44, v45, v46, v47, v48, v49, a9, a10, a11, a12);
}

void CallingIntentUnsupportedValueFlowStrategy.makeUnsupportedValueTemplatingResultOutput(resolveRecord:)()
{
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v11 = *(void *)(v0 + 240);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = *(uint64_t **)(v0 + 152);
  __swift_project_boxed_opaque_existential_1((void *)(v2 + 24), *(void *)(v2 + 48));
  OUTLINED_FUNCTION_24_2();
  v4();
  __swift_project_boxed_opaque_existential_1((void *)(v2 + 24), *(void *)(v2 + 48));
  OUTLINED_FUNCTION_24_2();
  v5();
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 56), *(void *)(v0 + 80));
  OUTLINED_FUNCTION_38();
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(v11, v1, &demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v6 = type metadata accessor for AceOutput();
  *(_OWORD *)(v0 + 112) = 0u;
  *(void *)(v0 + 128) = 0;
  *(_OWORD *)(v0 + 96) = 0u;
  v3[3] = v6;
  void v3[4] = (uint64_t)&protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v3);
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of UsoBuilderOptions?(v0 + 96, &demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of UsoBuilderOptions?(v1, &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v7 = OUTLINED_FUNCTION_69_2();
  v8(v7);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  outlined destroy of UsoBuilderOptions?(v11, &demangling cache variable for type metadata for NLContextUpdate?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_2_49();
  __asm { BRAA            X1, X16 }
}

uint64_t closure #1 in CallingIntentUnsupportedValueFlowStrategy.makeUnsupportedValueTemplatingResultOutput(resolveRecord:)(uint64_t a1)
{
  uint64_t v15 = a1;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[SAAceView], Error>);
  uint64_t v1 = *(void *)(v14 - 8);
  uint64_t v2 = *(void *)(v1 + 64);
  __chkstk_darwin(v14);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v4 = (char *)v12 - v3;
  dispatch thunk of RCHFlowDelegate.makeAceViewProvider()();
  swift_getAssociatedTypeWitness();
  type metadata accessor for ParameterResolutionRecord();
  v12[1] = ParameterResolutionRecord.app.getter();
  v12[0] = ParameterResolutionRecord.intent.getter();
  uint64_t v5 = (void *)ParameterResolutionRecord.result.getter();
  uint64_t v6 = v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))((char *)v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v15, v14);
  unint64_t v7 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v8 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(v8 + v7, (char *)v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  uint64_t v9 = AssociatedTypeWitness;
  swift_getAssociatedConformanceWitness();
  uint64_t v10 = (void *)v12[0];
  dispatch thunk of AceViewProviding.makeAceViewsForLaunchAppWithButton(app:intent:intentResolutionResult:intentResponse:utteranceViews:_:)();
  swift_release();

  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v4, v9);
}

uint64_t closure #2 in CallingIntentUnsupportedValueFlowStrategy.makeUnsupportedValueTemplatingResultOutput(resolveRecord:)(uint64_t a1)
{
  uint64_t v36 = a1;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TemplatingResult, Error>);
  uint64_t v1 = *(void *)(v35 - 8);
  uint64_t v34 = *(void *)(v1 + 64);
  __chkstk_darwin(v35);
  PhoneCallFlowDelegatePlugin::PhoneCallSlotNames_optional v33 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for ParameterIdentifier();
  uint64_t v3 = *(void *)(v30 - 8);
  uint64_t v4 = __chkstk_darwin(v30);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v24 - v7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v37 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  Swift::String v32 = (char *)&v24 - v9;
  dispatch thunk of RCHFlowDelegate.makeDialogTemplating()();
  swift_getAssociatedTypeWitness();
  type metadata accessor for ParameterResolutionRecord();
  uint64_t v29 = ParameterResolutionRecord.app.getter();
  ParameterResolutionRecord.parameter.getter();
  uint64_t v10 = ParameterIdentifier.name.getter();
  uint64_t v27 = v11;
  uint64_t v28 = v10;
  uint64_t v12 = *(void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v13 = v8;
  uint64_t v14 = v30;
  v12(v13, v30);
  uint64_t v26 = ParameterResolutionRecord.result.getter();
  uint64_t v25 = ParameterResolutionRecord.intent.getter();
  ParameterResolutionRecord.parameter.getter();
  ParameterIdentifier.multicardinalIndex.getter();
  v12(v6, v14);
  uint64_t v15 = v33;
  uint64_t v16 = v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v33, v36, v35);
  unint64_t v17 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v18 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(v18 + v17, v15, v16);
  uint64_t v23 = AssociatedTypeWitness;
  swift_getAssociatedConformanceWitness();
  uint64_t v19 = (void *)v26;
  uint64_t v20 = (void *)v25;
  uint64_t v21 = v32;
  dispatch thunk of DialogTemplating.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:)();
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v21, v23);
}

uint64_t closure #1 in closure #2 in CallingIntentUnsupportedValueFlowStrategy.makeUnsupportedValueTemplatingResultOutput(resolveRecord:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TemplatingResult();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin(v6);
  uint64_t v8 = (void *)((char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0(a1, (uint64_t)v8, &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10[1] = *v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TemplatingResult, Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    (*(void (**)(char *, void *, uint64_t))(v3 + 32))(v5, v8, v2);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TemplatingResult, Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t CallingIntentUnsupportedValueFlowStrategy.makePreferredCallProviderUnsupportedValueOutput(resolveRecord:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[23] = v2;
  v1[24] = v0;
  v1[22] = v3;
  OUTLINED_FUNCTION_2();
  v1[25] = v4;
  uint64_t v5 = type metadata accessor for ButtonConfigurationModel();
  OUTLINED_FUNCTION_19_0(v5);
  v1[26] = v6;
  v1[27] = OUTLINED_FUNCTION_28_2();
  v1[28] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Locale();
  v1[29] = v7;
  OUTLINED_FUNCTION_19_0(v7);
  v1[30] = v8;
  v1[31] = OUTLINED_FUNCTION_35();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v9);
  v1[32] = OUTLINED_FUNCTION_35();
  uint64_t v10 = type metadata accessor for OutputGenerationManifest();
  v1[33] = v10;
  OUTLINED_FUNCTION_19_0(v10);
  v1[34] = v11;
  v1[35] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v12, v13, v14);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v8 = v7;
  *(void *)(v5 + 328) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 336) = v3;
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_21_21();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v1;
  *(void *)(v5 + 376) = v0;
  swift_task_dealloc();
  swift_release();
  swift_release();
  if (v0) {
    swift_bridgeObjectRelease();
  }
  else {
    *(void *)(v5 + 384) = v3;
  }
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_20_2();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 136;
  OUTLINED_FUNCTION_44_11();
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_4_2();
  char *v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v3);
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(void);
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = *(void *)(v0 + 256);
  uint64_t v2 = *(void *)(v0 + 224);

  _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_2(v2, (void (*)(void))type metadata accessor for ButtonConfigurationModel);
  outlined destroy of UsoBuilderOptions?(v1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_66_1();
  v3();
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  return v4();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_18_3();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v8 = v7;
  *(void *)(v5 + 432) = v0;
  swift_task_dealloc();
  swift_release();
  swift_release();
  if (!v0) {
    *(void *)(v5 + 440) = v3;
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_16_1();

  uint64_t v1 = OUTLINED_FUNCTION_24_21();
  v2(v1);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  return v3();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t (*v4)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  outlined destroy of UsoBuilderOptions?(*(void *)(v0 + 256), &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v1 = OUTLINED_FUNCTION_79_2();
  v2(v1);
  OUTLINED_FUNCTION_67_4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_20_2();
  return v4(v3, v4, v5, v6, v7, v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  uint64_t v3;
  uint64_t (*v4)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = *(void *)(v0 + 256);
  _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_2(*(void *)(v0 + 224), (void (*)(void))type metadata accessor for ButtonConfigurationModel);
  outlined destroy of UsoBuilderOptions?(v1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_3_23();
  v2();
  OUTLINED_FUNCTION_67_4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_20_2();
  return v4(v3, v4, v5, v6, v7, v8, v9, v10);
}

{
  void (*v0)(void);
  uint64_t v1;
  uint64_t (*v2)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_22_13();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_12_20();
  v0();
  OUTLINED_FUNCTION_67_4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_20_2();
  return v2(v1, v2, v3, v4, v5, v6, v7, v8);
}

void CallingIntentUnsupportedValueFlowStrategy.makePreferredCallProviderUnsupportedValueOutput(resolveRecord:)()
{
  uint64_t v1 = v0[25];
  uint64_t v2 = *(void *)(v1 + 272);
  v0[36] = v2;
  uint64_t v3 = *(void *)(v1 + 264);
  v0[37] = v3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v0[38] = AssociatedTypeWitness;
  v0[39] = type metadata accessor for ParameterResolutionRecord();
  uint64_t v5 = (void *)ParameterResolutionRecord.intent.getter();
  default argument 3 of SAUISayIt.init(message:dialogIdentifier:canUseServerTTS:listenAfterSpeaking:)(v3, v2);
  OUTLINED_FUNCTION_42_10();
  v6();

  uint64_t v7 = (void *)ParameterResolutionRecord.intent.getter();
  self;
  uint64_t v8 = swift_dynamicCastObjCClass();

  if (v8)
  {
    uint64_t v9 = (void *)ParameterResolutionRecord.result.getter();
    uint64_t v10 = (char *)[v9 unsupportedReason];

    if (v10 == (unsigned char *)&dword_4 + 1)
    {
      uint64_t v11 = (void *)v0[24];
      __swift_project_boxed_opaque_existential_1(v11 + 38, v11[41]);
      ParameterResolutionRecord.app.getter();
      __swift_project_boxed_opaque_existential_1(v11 + 3, v11[6]);
      OUTLINED_FUNCTION_88_3();
      OUTLINED_FUNCTION_24_2();
      v12();
      __swift_project_boxed_opaque_existential_1(v0 + 7, v0[10]);
      OUTLINED_FUNCTION_78_2();
      dispatch thunk of DeviceState.siriLocale.getter();
      OUTLINED_FUNCTION_100();
      v13();
      uint64_t v15 = v14;
      swift_release();
      OUTLINED_FUNCTION_26_0();
      v16();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
      if (v15)
      {
        String.toSpeakableString.getter();
        swift_bridgeObjectRelease();
        uint64_t v17 = 0;
      }
      else
      {
        uint64_t v17 = 1;
      }
      uint64_t v26 = v0[32];
      uint64_t v27 = type metadata accessor for SpeakableString();
      __swift_storeEnumTagSinglePayload(v26, v17, 1, v27);
      uint64_t v28 = (void *)swift_task_alloc();
      v0[40] = v28;
      void *v28 = v0;
      v28[1] = CallingIntentUnsupportedValueFlowStrategy.makePreferredCallProviderUnsupportedValueOutput(resolveRecord:);
      OUTLINED_FUNCTION_77_2(v0[32]);
      OUTLINED_FUNCTION_39();
      __asm { BRAA            X2, X16 }
    }
  }
  uint64_t v18 = v0[24];
  uint64_t v19 = type metadata accessor for PhoneStartCallIntent(0);
  uint64_t v20 = (void *)ParameterResolutionRecord.intent.getter();
  OUTLINED_FUNCTION_38();
  uint64_t AssociatedConformanceWitness = (__CFString *)swift_getAssociatedConformanceWitness();
  v0[51] = specialized PhoneStartCallIntent.__allocating_init(intent:isRelationshipRequest:)(v20, 0, v19, AssociatedTypeWitness, AssociatedConformanceWitness);
  type metadata accessor for SirikitDeviceState();
  __swift_project_boxed_opaque_existential_1((void *)(v18 + 24), *(void *)(v18 + 48));
  OUTLINED_FUNCTION_24_2();
  v22();
  v0[52] = SirikitDeviceState.__allocating_init(from:)();
  uint64_t v23 = (void *)swift_task_alloc();
  v0[53] = v23;
  *uint64_t v23 = v0;
  v23[1] = CallingIntentUnsupportedValueFlowStrategy.makePreferredCallProviderUnsupportedValueOutput(resolveRecord:);
  OUTLINED_FUNCTION_39();
  __asm { BRAA            X3, X16 }
}

uint64_t CallingIntentUnsupportedValueFlowStrategy.makePreferredCallProviderUnsupportedValueOutput(resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  OUTLINED_FUNCTION_81_2();
  uint64_t v23 = v22[42];
  uint64_t v24 = v22[38];
  uint64_t v48 = v22[39];
  uint64_t v49 = v22[36];
  uint64_t v25 = v22[27];
  uint64_t v26 = v22[28];
  uint64_t v27 = v22[24];
  uint64_t v47 = v22[23];
  dispatch thunk of LabelExecutionResult.subscript.getter();
  swift_release();
  uint64_t v28 = OUTLINED_FUNCTION_78_2();
  ButtonConfigurationModel.init(label:url:)(v28, v29, v30);
  outlined init with copy of ButtonConfigurationModel(v26, v25);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ButtonConfigurationModel>);
  uint64_t v31 = OUTLINED_FUNCTION_47_2();
  v22[43] = v31;
  *(_OWORD *)(v31 + 16) = xmmword_467710;
  outlined init with take of ButtonConfigurationModel(v25, v31 + v23);
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  OutputGenerationManifest.responseViewId.setter();
  Swift::String v32 = *(void **)(v27 + direct field offset for CallingIntentUnsupportedValueFlowStrategy.startCallCatsSimple);
  uint64_t v33 = type metadata accessor for PhoneStartCallIntent(0);
  uint64_t v34 = (void *)ParameterResolutionRecord.intent.getter();
  uint64_t AssociatedConformanceWitness = (__CFString *)swift_getAssociatedConformanceWitness();
  v22[44] = specialized PhoneStartCallIntent.__allocating_init(intent:isRelationshipRequest:)(v34, 0, v33, v24, AssociatedConformanceWitness);
  type metadata accessor for SirikitDeviceState();
  __swift_project_boxed_opaque_existential_1((void *)(v27 + 24), *(void *)(v27 + 48));
  OUTLINED_FUNCTION_24_2();
  v36();
  v22[45] = SirikitDeviceState.__allocating_init(from:)();
  uint64_t v50 = *(void *)(class metadata base offset for StartCallCATsSimple + *v32 + 1008)
      + **(int **)(class metadata base offset for StartCallCATsSimple + *v32 + 1008);
  uint64_t v51 = class metadata base offset for StartCallCATsSimple + *v32 + 1008;
  uint64_t v37 = (void *)swift_task_alloc();
  v22[46] = v37;
  *uint64_t v37 = v22;
  v37[1] = CallingIntentUnsupportedValueFlowStrategy.makePreferredCallProviderUnsupportedValueOutput(resolveRecord:);
  OUTLINED_FUNCTION_28_3();
  return v41(v38, v39, v40, v41, v42, v43, v44, v45, a9, v47, v48, v49, v50, v51, 0, 0xE000000000000000, a17, a18, a19,
           a20,
           a21,
           a22);
}

uint64_t CallingIntentUnsupportedValueFlowStrategy.makePreferredCallProviderUnsupportedValueOutput(resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_40_0();
  uint64_t v11 = (void *)v10[48];
  uint64_t v12 = (void *)v10[24];
  uint64_t v13 = v12[6];
  uint64_t v14 = v12[7];
  __swift_project_boxed_opaque_existential_1(v12 + 3, v13);
  (*(void (**)(uint64_t, uint64_t))(v14 + 136))(v13, v14);
  __swift_project_boxed_opaque_existential_1(v10 + 12, v10[15]);
  v10[20] = type metadata accessor for PhoneSnippetDataModels();
  v10[21] = _s27PhoneCallFlowDelegatePlugin0A5ErrorOACs0F0AAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels and conformance PhoneSnippetDataModels, (void (*)(uint64_t))type metadata accessor for PhoneSnippetDataModels);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v10 + 17);
  OUTLINED_FUNCTION_69_4((uint64_t)boxed_opaque_existential_1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v16 = OUTLINED_FUNCTION_93();
  *(_OWORD *)(v16 + 16) = xmmword_46A030;
  *(void *)(v16 + 32) = v11;
  uint64_t v29 = v16;
  specialized Array._endMutation()();
  v10[49] = v29;
  id v17 = v11;
  swift_task_alloc();
  OUTLINED_FUNCTION_31_2();
  v10[50] = v18;
  *uint64_t v18 = v19;
  v18[1] = CallingIntentUnsupportedValueFlowStrategy.makePreferredCallProviderUnsupportedValueOutput(resolveRecord:);
  OUTLINED_FUNCTION_31_1();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)(v20, v21, v22, v23, v24, v25, v26, v27, v29, a10);
}

{
  void *v10;
  void *v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  __n128 *v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_40_0();
  uint64_t v11 = (void *)v10[55];
  uint64_t v12 = OUTLINED_FUNCTION_2_57((void *)(v10[24] + 24));
  v13(v12);
  OUTLINED_FUNCTION_13_22();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v14 = (__n128 *)OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_16_5(v14, (__n128)xmmword_46A030);
  v10[56] = a10;
  uint64_t v15 = v11;
  swift_task_alloc();
  OUTLINED_FUNCTION_31_2();
  v10[57] = v16;
  *uint64_t v16 = v17;
  v16[1] = CallingIntentUnsupportedValueFlowStrategy.makePreferredCallProviderUnsupportedValueOutput(resolveRecord:);
  OUTLINED_FUNCTION_10_29();
  OUTLINED_FUNCTION_30_2();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10);
}

uint64_t CallingIntentUnsupportedValueFlowStrategy.makeCallCapabilityUnsupportedValueOutput(intent:intentResolutionResult:app:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[16] = v2;
  v1[17] = v0;
  v1[14] = v3;
  v1[15] = v4;
  v1[13] = v5;
  OUTLINED_FUNCTION_2();
  v1[18] = v6;
  uint64_t v7 = type metadata accessor for OutputGenerationManifest();
  v1[19] = v7;
  OUTLINED_FUNCTION_19_0(v7);
  v1[20] = v8;
  v1[21] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  char *v3;
  void *v4;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  OUTLINED_FUNCTION_18_3();
  default argument 3 of SAUISayIt.init(message:dialogIdentifier:canUseServerTTS:listenAfterSpeaking:)(*(void *)(*(void *)(v0 + 144) + 264), *(void *)(*(void *)(v0 + 144) + 272));
  OUTLINED_FUNCTION_2();
  uint64_t v1 = OUTLINED_FUNCTION_50_5();
  v2(v1);
  self;
  if (!swift_dynamicCastObjCClass()) {
    goto LABEL_10;
  }
  uint64_t v3 = (char *)[*(id *)(v0 + 120) unsupportedReason];
  if ((unint64_t)(v3 - 2) >= 2)
  {
    if (v3 == (unsigned char *)&dword_0 + 1)
    {
      OUTLINED_FUNCTION_60_5();
      uint64_t v26 = *(void *)(class metadata base offset for StartCallCATsSimple + v6 + 784)
          + **(int **)(class metadata base offset for StartCallCATsSimple + v6 + 784);
      uint64_t v28 = class metadata base offset for StartCallCATsSimple + v6 + 784;
      uint64_t v7 = (void *)swift_task_alloc();
      *(void *)(v0 + 192) = v7;
      *uint64_t v7 = v0;
      v7[1] = CallingIntentUnsupportedValueFlowStrategy.makeCallCapabilityUnsupportedValueOutput(intent:intentResolutionResult:app:);
      OUTLINED_FUNCTION_46_1((uint64_t)v7, v8, v9, v10, v11, v12, v13, v14, v25, v26, v28);
      return v15();
    }
LABEL_10:
    OUTLINED_FUNCTION_60_5();
    uint64_t v27 = *(void *)(class metadata base offset for StartCallCATsSimple + v16 + 736)
        + **(int **)(class metadata base offset for StartCallCATsSimple + v16 + 736);
    uint64_t v29 = class metadata base offset for StartCallCATsSimple + v16 + 736;
    id v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 208) = v17;
    NSObject *v17 = v0;
    v17[1] = CallingIntentUnsupportedValueFlowStrategy.makeCallCapabilityUnsupportedValueOutput(intent:intentResolutionResult:app:);
    OUTLINED_FUNCTION_46_1((uint64_t)v17, v18, v19, v20, v21, v22, v23, v24, v25, v27, v29);
    return v15();
  }
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 176) = v4;
  *uint64_t v4 = v0;
  v4[1] = CallingIntentUnsupportedValueFlowStrategy.makeCallCapabilityUnsupportedValueOutput(intent:intentResolutionResult:app:);
  return CallingIntentUnsupportedValueFlowStrategy.generateOutputForCameraOrMicUnavailable(reason:app:outputManifest:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_2();
  void *v5 = v4;
  *(void *)(v6 + 184) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  void (*v0)(void);
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_12_20();
  v0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  return v1();
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  v2[7] = v1;
  v2[8] = v4;
  v2[9] = v0;
  OUTLINED_FUNCTION_44_11();
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  *(void *)(v7 + 200) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v3 = v2;
  v2[10] = v1;
  v2[11] = v4;
  v2[12] = v0;
  OUTLINED_FUNCTION_44_11();
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  *(void *)(v7 + 216) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_16_1();

  uint64_t v1 = OUTLINED_FUNCTION_24_21();
  v2(v1);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  return v3();
}

{
  void (*v0)(void);
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_12_20();
  v0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v1();
}

{
  void (*v0)(void);
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_12_20();
  v0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v1();
}

{
  void (*v0)(void);
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_12_20();
  v0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v1();
}

uint64_t CallingIntentUnsupportedValueFlowStrategy.makeCallCapabilityUnsupportedValueOutput(intent:intentResolutionResult:app:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_40_0();
  uint64_t v11 = (void *)v10[8];
  uint64_t v12 = v10[17];
  v10[28] = v11;
  uint64_t v13 = OUTLINED_FUNCTION_2_57((void *)(v12 + 24));
  v14(v13);
  OUTLINED_FUNCTION_13_22();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v15 = (__n128 *)OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_16_5(v15, (__n128)xmmword_46A030);
  v10[29] = a10;
  id v16 = v11;
  uint64_t v17 = swift_task_alloc();
  uint64_t v18 = (void *)OUTLINED_FUNCTION_70_2(v17);
  *uint64_t v18 = v19;
  v18[1] = CallingIntentUnsupportedValueFlowStrategy.makeCallCapabilityUnsupportedValueOutput(intent:intentResolutionResult:app:);
  OUTLINED_FUNCTION_10_29();
  OUTLINED_FUNCTION_30_2();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10);
}

{
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  __n128 *v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_40_0();
  uint64_t v11 = (void *)v10[11];
  uint64_t v12 = v10[17];
  v10[28] = v11;
  uint64_t v13 = OUTLINED_FUNCTION_2_57((void *)(v12 + 24));
  v14(v13);
  OUTLINED_FUNCTION_13_22();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v15 = (__n128 *)OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_16_5(v15, (__n128)xmmword_46A030);
  v10[29] = a10;
  id v16 = v11;
  uint64_t v17 = swift_task_alloc();
  uint64_t v18 = (void *)OUTLINED_FUNCTION_70_2(v17);
  *uint64_t v18 = v19;
  v18[1] = CallingIntentUnsupportedValueFlowStrategy.makeCallCapabilityUnsupportedValueOutput(intent:intentResolutionResult:app:);
  OUTLINED_FUNCTION_10_29();
  OUTLINED_FUNCTION_30_2();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10);
}

uint64_t CallingIntentUnsupportedValueFlowStrategy.makeContactsNoCallHistoryForRedialUnsupportedValueOutput(intent:intentResolutionResult:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[8] = v2;
  v1[9] = v0;
  v1[7] = v3;
  OUTLINED_FUNCTION_2();
  v1[10] = v4;
  uint64_t v5 = type metadata accessor for OutputGenerationManifest();
  v1[11] = v5;
  OUTLINED_FUNCTION_19_0(v5);
  v1[12] = v6;
  v1[13] = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = v0[9];
  default argument 3 of SAUISayIt.init(message:dialogIdentifier:canUseServerTTS:listenAfterSpeaking:)(*(void *)(v0[10] + 264), *(void *)(v0[10] + 272));
  OUTLINED_FUNCTION_2();
  uint64_t v2 = OUTLINED_FUNCTION_50_5();
  v3(v2);
  uint64_t v4 = (void *)(class metadata base offset for StartCallCATsSimple
                + **(void **)(v1
                              + direct field offset for CallingIntentUnsupportedValueFlowStrategy.startCallCatsSimple)
                + 848);
  id v16 = *v4 + *(int *)*v4;
  uint64_t v17 = (uint64_t)v4;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[14] = v5;
  void *v5 = v0;
  v5[1] = CallingIntentUnsupportedValueFlowStrategy.makeContactsNoCallHistoryForRedialUnsupportedValueOutput(intent:intentResolutionResult:);
  OUTLINED_FUNCTION_46_1((uint64_t)v5, v6, v7, v8, v9, v10, v11, v12, v15, v16, v17);
  return v13();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v8 = v7;
  *(void *)(v5 + 120) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 128) = v3;
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_16_1();

  uint64_t v1 = OUTLINED_FUNCTION_24_21();
  v2(v1);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  return v3();
}

{
  void (*v0)(void);
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_12_20();
  v0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v1();
}

uint64_t CallingIntentUnsupportedValueFlowStrategy.makeContactsNoCallHistoryForRedialUnsupportedValueOutput(intent:intentResolutionResult:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_40_0();
  uint64_t v11 = (void *)v10[16];
  uint64_t v12 = OUTLINED_FUNCTION_2_57((void *)(v10[9] + 24));
  v13(v12);
  OUTLINED_FUNCTION_13_22();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v14 = (__n128 *)OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_16_5(v14, (__n128)xmmword_46A030);
  v10[17] = a10;
  id v15 = v11;
  swift_task_alloc();
  OUTLINED_FUNCTION_31_2();
  v10[18] = v16;
  *id v16 = v17;
  v16[1] = CallingIntentUnsupportedValueFlowStrategy.makeContactsNoCallHistoryForRedialUnsupportedValueOutput(intent:intentResolutionResult:);
  OUTLINED_FUNCTION_10_29();
  OUTLINED_FUNCTION_30_2();
  return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10);
}

uint64_t CallingIntentUnsupportedValueFlowStrategy.generateOutputForCameraOrMicUnavailable(reason:app:outputManifest:)()
{
  OUTLINED_FUNCTION_1_0();
  *(void *)(v1 + 224) = v2;
  *(void *)(v1 + 232) = v0;
  *(void *)(v1 + 208) = v3;
  *(void *)(v1 + 216) = v4;
  *(unsigned char *)(v1 + 424) = v5;
  *(void *)(v1 + 200) = v6;
  uint64_t v7 = type metadata accessor for PhoneError();
  *(void *)(v1 + 240) = v7;
  OUTLINED_FUNCTION_11_0(v7);
  *(void *)(v1 + 248) = OUTLINED_FUNCTION_35();
  uint64_t v8 = type metadata accessor for OutputGenerationManifest();
  *(void *)(v1 + 256) = v8;
  OUTLINED_FUNCTION_19_0(v8);
  *(void *)(v1 + 264) = v9;
  *(void *)(v1 + 272) = OUTLINED_FUNCTION_35();
  uint64_t v10 = type metadata accessor for ButtonConfigurationModel();
  OUTLINED_FUNCTION_19_0(v10);
  *(void *)(v1 + 280) = v11;
  *(void *)(v1 + 288) = OUTLINED_FUNCTION_28_2();
  *(void *)(v1 + 296) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Locale();
  *(void *)(v1 + 304) = v12;
  OUTLINED_FUNCTION_19_0(v12);
  *(void *)(v1 + 312) = v13;
  *(void *)(v1 + 320) = OUTLINED_FUNCTION_35();
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v14);
  *(void *)(v1 + 328) = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v15, v16, v17);
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  v3[17] = v1;
  v3[18] = v5;
  v3[19] = v0;
  OUTLINED_FUNCTION_44_11();
  uint64_t v6 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v7 = v6;
  v3[44] = v0;
  swift_task_dealloc();
  if (v0) {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_90_2(*(void *)(v0 + 144));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 384) = v1;
  *uint64_t v1 = v0;
  v1[1] = CallingIntentUnsupportedValueFlowStrategy.generateOutputForCameraOrMicUnavailable(reason:app:outputManifest:);
  uint64_t v2 = OUTLINED_FUNCTION_91_4();
  return v3(v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  v3[20] = v1;
  v3[21] = v5;
  v3[22] = v0;
  OUTLINED_FUNCTION_44_11();
  uint64_t v6 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v7 = v6;
  v3[46] = v0;
  swift_task_dealloc();
  if (v0) {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_90_2(*(void *)(v0 + 168));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 384) = v1;
  *uint64_t v1 = v0;
  v1[1] = CallingIntentUnsupportedValueFlowStrategy.generateOutputForCameraOrMicUnavailable(reason:app:outputManifest:);
  uint64_t v2 = OUTLINED_FUNCTION_91_4();
  return v3(v2);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 392) = v5;
  *(void *)(v3 + 400) = v0;
  swift_task_dealloc();
  if (v0) {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_7();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 96;
  OUTLINED_FUNCTION_44_11();
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_4_2();
  void *v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v3);
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t CallingIntentUnsupportedValueFlowStrategy.generateOutputForCameraOrMicUnavailable(reason:app:outputManifest:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_30_12();
  uint64_t v15 = *(void **)(v14 + 232);
  __swift_project_boxed_opaque_existential_1(v15 + 38, v15[41]);
  __swift_project_boxed_opaque_existential_1(v15 + 3, v15[6]);
  OUTLINED_FUNCTION_88_3();
  OUTLINED_FUNCTION_24_2();
  v16();
  __swift_project_boxed_opaque_existential_1((void *)(v14 + 16), *(void *)(v14 + 40));
  dispatch thunk of DeviceState.siriLocale.getter();
  OUTLINED_FUNCTION_100();
  v17();
  uint64_t v19 = v18;
  OUTLINED_FUNCTION_5_30();
  v20();
  __swift_destroy_boxed_opaque_existential_1(v14 + 16);
  if (v19)
  {
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_83_1();
    uint64_t v21 = type metadata accessor for SpeakableString();
    OUTLINED_FUNCTION_48_8(v21);
  }
  else
  {
    uint64_t v22 = type metadata accessor for SpeakableString();
    OUTLINED_FUNCTION_93_3(v22);
  }
  *(void *)(v14 + 184) = App.settingsUrl.getter();
  *(void *)(v14 + 192) = v23;
  *(void *)(v14 + 336) = v23;
  uint64_t v24 = **(void **)(*(void *)(v14 + 232)
                    + direct field offset for CallingIntentUnsupportedValueFlowStrategy.startCallCatsSimple);
  if ((*(unsigned char *)(v14 + 424) & 1) != 0 || *(void *)(v14 + 208) != 3)
  {
    uint64_t v36 = *(void *)(class metadata base offset for StartCallCATsSimple + v24 + 768)
        + **(int **)(class metadata base offset for StartCallCATsSimple + v24 + 768);
    uint64_t v37 = class metadata base offset for StartCallCATsSimple + v24 + 768;
    uint64_t v34 = (void *)swift_task_alloc();
    *(void *)(v14 + 360) = v34;
    *uint64_t v34 = v14;
    v34[1] = CallingIntentUnsupportedValueFlowStrategy.generateOutputForCameraOrMicUnavailable(reason:app:outputManifest:);
    OUTLINED_FUNCTION_77_2(*(void *)(v14 + 328));
    OUTLINED_FUNCTION_28_1();
  }
  else
  {
    uint64_t v36 = *(void *)(class metadata base offset for StartCallCATsSimple + v24 + 752)
        + **(int **)(class metadata base offset for StartCallCATsSimple + v24 + 752);
    uint64_t v37 = class metadata base offset for StartCallCATsSimple + v24 + 752;
    uint64_t v25 = (void *)swift_task_alloc();
    *(void *)(v14 + 344) = v25;
    *uint64_t v25 = v14;
    v25[1] = CallingIntentUnsupportedValueFlowStrategy.generateOutputForCameraOrMicUnavailable(reason:app:outputManifest:);
    OUTLINED_FUNCTION_77_2(*(void *)(v14 + 328));
    OUTLINED_FUNCTION_28_1();
  }
  return v28(v26, v27, v28, v29, v30, v31, v32, v33, v36, v37, a11, a12, a13, a14);
}

uint64_t CallingIntentUnsupportedValueFlowStrategy.generateOutputForCameraOrMicUnavailable(reason:app:outputManifest:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  OUTLINED_FUNCTION_81_2();
  id v23 = [*(id *)(v22 + 392) dialog];
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for DialogElement);
  unint64_t v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v24 >> 62)
  {
    OUTLINED_FUNCTION_57_6();
    uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v25 = *(void *)((char *)&dword_10 + (v24 & 0xFFFFFFFFFFFFFF8));
  }
  if (v25)
  {
    uint64_t v26 = OUTLINED_FUNCTION_102_1();
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v26, v27, v28);
    uint64_t v29 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    uint64_t v79 = *(void **)(v22 + 376);
    uint64_t v31 = *(void *)(v22 + 288);
    uint64_t v30 = *(void *)(v22 + 296);
    uint64_t v32 = *(void *)(v22 + 264);
    uint64_t v77 = *(void *)(v22 + 272);
    uint64_t v78 = *(void *)(v22 + 256);
    uint64_t v33 = *(void **)(v22 + 232);
    uint64_t v75 = *(void *)(v22 + 336);
    uint64_t v76 = *(void *)(v22 + 224);
    swift_bridgeObjectRelease();
    id v34 = [v29 fullPrint];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_85_3();

    uint64_t v35 = OUTLINED_FUNCTION_61();
    ButtonConfigurationModel.init(label:url:)(v35, v36, v37);
    outlined init with copy of ButtonConfigurationModel(v30, v31);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ButtonConfigurationModel>);
    uint64_t v38 = OUTLINED_FUNCTION_47_2();
    *(_OWORD *)(v38 + 16) = xmmword_467710;
    outlined init with take of ButtonConfigurationModel(v31, (uint64_t)v34 + v38);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v77, v76, v78);
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    OutputGenerationManifest.responseViewId.setter();
    uint64_t v39 = v33[6];
    uint64_t v40 = v33[7];
    __swift_project_boxed_opaque_existential_1(v33 + 3, v39);
    (*(void (**)(uint64_t, uint64_t))(v40 + 136))(v39, v40);
    __swift_project_boxed_opaque_existential_1((void *)(v22 + 56), *(void *)(v22 + 80));
    *(void *)(v22 + 120) = type metadata accessor for PhoneSnippetDataModels();
    *(void *)(v22 + 128) = _s27PhoneCallFlowDelegatePlugin0A5ErrorOACs0F0AAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type PhoneSnippetDataModels and conformance PhoneSnippetDataModels, (void (*)(uint64_t))type metadata accessor for PhoneSnippetDataModels);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v22 + 96));
    OUTLINED_FUNCTION_69_4((uint64_t)boxed_opaque_existential_1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v42 = OUTLINED_FUNCTION_93();
    *(_OWORD *)(v42 + 16) = xmmword_46A030;
    *(void *)(v42 + 32) = v79;
    uint64_t v80 = v42;
    specialized Array._endMutation()();
    *(void *)(v22 + 408) = v80;
    id v43 = v79;
    swift_task_alloc();
    OUTLINED_FUNCTION_31_2();
    *(void *)(v22 + 416) = v44;
    *uint64_t v44 = v45;
    v44[1] = CallingIntentUnsupportedValueFlowStrategy.generateOutputForCameraOrMicUnavailable(reason:app:outputManifest:);
    OUTLINED_FUNCTION_95_2();
    OUTLINED_FUNCTION_28_3();
    return dispatch thunk of ResponseGenerating.makeResponseOutput(conversationModel:dialog:outputGenerationManifest:)(v46, v47, v48, v49, v50, v51, v52, v53, v75, v76);
  }
  else
  {
    uint64_t v54 = *(void **)(v22 + 392);
    long long v55 = *(void **)(v22 + 376);
    uint64_t v56 = *(uint64_t **)(v22 + 248);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v57 = [v54 catId];
    uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v60 = v59;

    uint64_t *v56 = v58;
    v56[1] = v60;
    OUTLINED_FUNCTION_134();
    v56[2] = v61;
    v56[3] = v62;
    OUTLINED_FUNCTION_134();
    v56[4] = v63;
    uint64_t v56[5] = v64;
    v56[6] = 278;
    OUTLINED_FUNCTION_20_7();
    swift_storeEnumTagMultiPayload();
    _s27PhoneCallFlowDelegatePlugin0A5ErrorOACs0F0AAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type PhoneError and conformance PhoneError, (void (*)(uint64_t))type metadata accessor for PhoneError);
    swift_allocError();
    PhoneError.logged()(v65);
    _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_2((uint64_t)v56, (void (*)(void))type metadata accessor for PhoneError);
    swift_willThrow();

    outlined destroy of UsoBuilderOptions?(*(void *)(v22 + 328), &demangling cache variable for type metadata for SpeakableString?);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_28_3();
    return v67(v66, v67, v68, v69, v70, v71, v72, v73, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22);
  }
}

uint64_t CallingIntentUnsupportedValueFlowStrategy.generateOutputForCameraOrMicUnavailable(reason:app:outputManifest:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OUTLINED_FUNCTION_19_13();
  OUTLINED_FUNCTION_48();
  uint64_t v13 = *(void **)(v12 + 376);
  uint64_t v14 = *(void *)(v12 + 328);
  uint64_t v15 = *(void *)(v12 + 296);
  uint64_t v26 = *(void *)(v12 + 248);

  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_26_0();
  v16();
  _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_2(v15, (void (*)(void))type metadata accessor for ButtonConfigurationModel);
  outlined destroy of UsoBuilderOptions?(v14, &demangling cache variable for type metadata for SpeakableString?);
  __swift_destroy_boxed_opaque_existential_1(v12 + 56);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_4_3();
  return v18(v17, v18, v19, v20, v21, v22, v23, v24, v26, a10, a11, a12);
}

uint64_t CallingIntentUnsupportedValueFlowStrategy.generateOutputForCameraOrMicUnavailable(reason:app:outputManifest:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_54_7();
  outlined destroy of UsoBuilderOptions?(v10, &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_31_1();
  return v12(v11, v12, v13, v14, v15, v16, v17, v18, a9, a10);
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_54_7();
  outlined destroy of UsoBuilderOptions?(v10, &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_31_1();
  return v12(v11, v12, v13, v14, v15, v16, v17, v18, a9, a10);
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_40_0();

  OUTLINED_FUNCTION_54_7();
  outlined destroy of UsoBuilderOptions?(v10, &demangling cache variable for type metadata for SpeakableString?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_31_1();
  return v13(v12, v13, v14, v15, v16, v17, v18, v19, a9, a10);
}

void CallingIntentUnsupportedValueFlowStrategy.__allocating_init(delegate:startCallCATs:startCallCatPatterns:startCallCATsSimple:phoneCallCommonCATs:phoneCallCommonCATsSimple:phoneCallCommonCatPatterns:phoneCallDisplayTextCATsSimple:responseGenerator:siriKitEventSender:appInfoBuilder:)()
{
}

void CallingIntentUnsupportedValueFlowStrategy.init(delegate:startCallCATs:startCallCatPatterns:startCallCATsSimple:phoneCallCommonCATs:phoneCallCommonCATsSimple:phoneCallCommonCatPatterns:phoneCallDisplayTextCATsSimple:responseGenerator:siriKitEventSender:appInfoBuilder:)()
{
}

uint64_t CallingIntentUnsupportedValueFlowStrategy.__ivar_destroyer()
{
  return swift_release();
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance CallingIntentUnsupportedValueFlowStrategy<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for CallingIntentUnsupportedValueFlowStrategy();
  *uint64_t v8 = v4;
  v8[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:)(a1, a2, v9, a4);
}

uint64_t type metadata completion function for CallingIntentUnsupportedValueFlowStrategy()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for CallingIntentUnsupportedValueFlowStrategy()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _s27PhoneCallFlowDelegatePlugin0A5ErrorOACs0F0AAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s27PhoneCallFlowDelegatePlugin0A5ErrorOWOhTm_2(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_15();
  uint64_t v3 = OUTLINED_FUNCTION_69_2();
  v4(v3);
  return a1;
}

uint64_t partial apply for closure #2 in CallingIntentUnsupportedValueFlowStrategy.makeUnsupportedValueTemplatingResultOutput(resolveRecord:)(uint64_t a1)
{
  return closure #2 in CallingIntentUnsupportedValueFlowStrategy.makeUnsupportedValueTemplatingResultOutput(resolveRecord:)(a1);
}

uint64_t partial apply for closure #1 in CallingIntentUnsupportedValueFlowStrategy.makeUnsupportedValueTemplatingResultOutput(resolveRecord:)(uint64_t a1)
{
  return closure #1 in CallingIntentUnsupportedValueFlowStrategy.makeUnsupportedValueTemplatingResultOutput(resolveRecord:)(a1);
}

uint64_t outlined assign with take of NLContextUpdate?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_184E94()
{
  return objectdestroyTm_8(&demangling cache variable for type metadata for CheckedContinuation<[SAAceView], Error>);
}

uint64_t sub_184EA0()
{
  return objectdestroyTm_8(&demangling cache variable for type metadata for CheckedContinuation<TemplatingResult, Error>);
}

uint64_t objectdestroyTm_8(uint64_t *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(a1);
  OUTLINED_FUNCTION_15();
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t))(v2 + 8))(v1 + v4);

  return _swift_deallocObject(v1, v5, v6);
}

uint64_t partial apply for closure #1 in closure #2 in CallingIntentUnsupportedValueFlowStrategy.makeUnsupportedValueTemplatingResultOutput(resolveRecord:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TemplatingResult, Error>);
  OUTLINED_FUNCTION_13(v2);

  return closure #1 in closure #2 in CallingIntentUnsupportedValueFlowStrategy.makeUnsupportedValueTemplatingResultOutput(resolveRecord:)(a1);
}

uint64_t OUTLINED_FUNCTION_2_57(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return v1;
}

void OUTLINED_FUNCTION_3_49()
{
  uint64_t v2 = *(void **)(v0 + 832);
}

uint64_t OUTLINED_FUNCTION_6_41()
{
  return swift_task_dealloc();
}

void *OUTLINED_FUNCTION_13_22()
{
  return __swift_project_boxed_opaque_existential_1(v1, v0);
}

uint64_t OUTLINED_FUNCTION_19_23()
{
  return *(void *)(v0 + 808);
}

void OUTLINED_FUNCTION_39_11(void *a1@<X8>)
{
}

uint64_t OUTLINED_FUNCTION_47_9@<X0>(uint64_t a1@<X8>)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000034, (a1 - 32) | 0x8000000000000000, (uint64_t *)(v1 - 80));
}

uint64_t OUTLINED_FUNCTION_48_8(uint64_t a1)
{
  __swift_storeEnumTagSinglePayload(v1, 0, 1, a1);
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_50_5()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_52_8()
{
  uint64_t v3 = v0[103];
  uint64_t v4 = v0[102];
  v0[150] = v1;
  return default argument 3 of SAUISayIt.init(message:dialogIdentifier:canUseServerTTS:listenAfterSpeaking:)(v3, v4);
}

uint64_t OUTLINED_FUNCTION_53_7()
{
  return *(void *)(v0 + 24);
}

uint64_t OUTLINED_FUNCTION_56_8()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_67_4()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_68_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_69_4(uint64_t a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = 1;
  return swift_storeEnumTagMultiPayload();
}

uint64_t OUTLINED_FUNCTION_70_2(uint64_t result)
{
  *(void *)(v1 + 240) = result;
  return result;
}

int8x16_t OUTLINED_FUNCTION_72_5(int8x16_t *a1)
{
  int8x16_t result = vextq_s8(v1[10], v1[10], 8uLL);
  a1[1] = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_76_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return a16;
}

uint64_t OUTLINED_FUNCTION_77_2@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_78_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_83_1()
{
  return SpeakableString.init(print:speak:)();
}

uint64_t OUTLINED_FUNCTION_84_3()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_89_4(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[2].n128_u64[0] = v2;
  return specialized Array._endMutation()();
}

void OUTLINED_FUNCTION_90_2(uint64_t a1@<X8>)
{
  *(void *)(v1 + 376) = a1;
}

uint64_t OUTLINED_FUNCTION_91_4()
{
  return *(void *)(v0 + 328);
}

uint64_t OUTLINED_FUNCTION_92_2(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_93_3(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_94_2()
{
  return type metadata accessor for ParameterResolutionRecord();
}

uint64_t OUTLINED_FUNCTION_98_2()
{
  return *(void *)(v0 + 24);
}

uint64_t OUTLINED_FUNCTION_102_1()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_103_0()
{
  return specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v0 & 0xC000000000000001) == 0, v0);
}

Swift::String __swiftcall SiriKitDisambiguationItem.toSpokenHandleDisambiguation(deviceLocked:)(Swift::Bool deviceLocked)
{
  if (dispatch thunk of SiriKitDisambiguationItem.getSecondComponent()())
  {
    if (!deviceLocked || (SiriKitDisambiguationItemComponent.allowedOnLockScreen.getter() & 1) != 0)
    {
      v2._uint64_t countAndFlagsBits = dispatch thunk of SiriKitDisambiguationItemComponent.toSpokenString(deviceLocked:)();
      String.append(_:)(v2);
      swift_bridgeObjectRelease();
    }
    swift_release();
  }
  if (dispatch thunk of SiriKitDisambiguationItem.getFirstComponent()())
  {
    if (!deviceLocked || (SiriKitDisambiguationItemComponent.allowedOnLockScreen.getter() & 1) != 0)
    {
      v3._uint64_t countAndFlagsBits = dispatch thunk of SiriKitDisambiguationItemComponent.toSpokenString(deviceLocked:)();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
    }
    swift_release();
  }
  uint64_t v4 = 0;
  uint64_t v5 = (void *)0xE000000000000000;
  result._object = v5;
  result._uint64_t countAndFlagsBits = v4;
  return result;
}

uint64_t SiriKitDisambiguationItem.ttsPause(_:)()
{
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 8224092;
  v1._object = (void *)0xE300000000000000;
  String.append(_:)(v1);
  return 0x5C1B237374747B40;
}

BOOL specialized == infix<A>(_:_:)(int a1, int a2)
{
  return a1 == a2;
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x6563696F76;
  }
  else {
    uint64_t v3 = 0x69616D6563696F76;
  }
  if (v2) {
    unint64_t v4 = 0xE90000000000006CLL;
  }
  else {
    unint64_t v4 = 0xE500000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x6563696F76;
  }
  else {
    uint64_t v5 = 0x69616D6563696F76;
  }
  if (a2) {
    unint64_t v6 = 0xE500000000000000;
  }
  else {
    unint64_t v6 = 0xE90000000000006CLL;
  }
  if (v3 == v5 && v4 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  char v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  unint64_t v4 = 0xE200000000000000;
  uint64_t v5 = 19534;
  switch(a1)
  {
    case 1:
      unint64_t v4 = 0xE300000000000000;
      uint64_t v5 = 5916994;
      break;
    case 2:
      unint64_t v4 = 0xE400000000000000;
      uint64_t v5 = 1464814662;
      break;
    case 3:
      unint64_t v4 = 0xE400000000000000;
      uint64_t v5 = 1396786515;
      break;
    case 4:
      unint64_t v4 = 0xE300000000000000;
      uint64_t v5 = 4735827;
      break;
    case 5:
      unint64_t v4 = 0xE300000000000000;
      uint64_t v5 = 5395011;
      break;
    case 6:
      uint64_t v5 = 5395027;
      unint64_t v4 = 0xE300000000000000;
      break;
    case 7:
      unint64_t v4 = 0xE300000000000000;
      uint64_t v5 = 5263425;
      break;
    case 8:
      uint64_t v5 = 21574;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE200000000000000;
  uint64_t v7 = 19534;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE300000000000000;
      uint64_t v7 = 5916994;
      break;
    case 2:
      unint64_t v6 = 0xE400000000000000;
      uint64_t v7 = 1464814662;
      break;
    case 3:
      unint64_t v6 = 0xE400000000000000;
      uint64_t v7 = 1396786515;
      break;
    case 4:
      unint64_t v6 = 0xE300000000000000;
      uint64_t v7 = 4735827;
      break;
    case 5:
      unint64_t v6 = 0xE300000000000000;
      uint64_t v7 = 5395011;
      break;
    case 6:
      uint64_t v7 = 5395027;
      unint64_t v6 = 0xE300000000000000;
      break;
    case 7:
      unint64_t v6 = 0xE300000000000000;
      uint64_t v7 = 5263425;
      break;
    case 8:
      uint64_t v7 = 21574;
      break;
    default:
      break;
  }
  if (v5 == v7 && v4 == v6) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    BOOL v2 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(uint64_t))AnnounceGroupFaceTimeInviteCATPatternsIdentifiers.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(uint64_t))IdentifyIncomingCallerCATsSimple.Properties.rawValue.getter);
}

{
  char v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  unint64_t v4 = 0xD000000000000017;
  uint64_t v5 = 0x80000000004907A0;
  switch(a1)
  {
    case 1:
      uint64_t v5 = 0x80000000004907C0;
      unint64_t v4 = 0xD000000000000016;
      break;
    case 2:
      unint64_t v4 = 0x6567617355707061;
      unint64_t v6 = 1701606738;
      goto LABEL_5;
    case 3:
      unint64_t v4 = 0x63656C6553707061;
      unint64_t v6 = 1852795252;
LABEL_5:
      uint64_t v5 = v6 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
      break;
    default:
      break;
  }
  uint64_t v7 = 0xD000000000000017;
  char v8 = 0x80000000004907A0;
  switch(a2)
  {
    case 1:
      char v8 = 0x80000000004907C0;
      uint64_t v7 = 0xD000000000000016;
      break;
    case 2:
      uint64_t v7 = 0x6567617355707061;
      uint64_t v9 = 1701606738;
      goto LABEL_10;
    case 3:
      uint64_t v7 = 0x63656C6553707061;
      uint64_t v9 = 1852795252;
LABEL_10:
      char v8 = v9 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
      break;
    default:
      break;
  }
  if (v4 == v7 && v5 == v8) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    BOOL v2 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(uint64_t))ForcedAppDisambiguationPhase.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(uint64_t))AnnounceVoicemailCATsSimple.Properties.rawValue.getter);
}

{
  char v2;
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  uint64_t v3 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v4 = 0xD000000000000015;
  }
  else {
    unint64_t v4 = 0x746163696C707041;
  }
  if (v3) {
    uint64_t v5 = 0xEC000000736E6F69;
  }
  else {
    uint64_t v5 = 0x800000000048BFF0;
  }
  if (a2) {
    unint64_t v6 = 0xD000000000000015;
  }
  else {
    unint64_t v6 = 0x746163696C707041;
  }
  if (a2) {
    uint64_t v7 = 0x800000000048BFF0;
  }
  else {
    uint64_t v7 = 0xEC000000736E6F69;
  }
  if (v4 == v6 && v5 == v7) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    BOOL v2 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(uint64_t))SpecifyingContactAddress.rawValue.getter);
}

{
  char v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;

  uint64_t v3 = 0xEF74706D6F72506CLL;
  unint64_t v4 = 0x6C6143724F646461;
  if (a1)
  {
    OUTLINED_FUNCTION_106_0();
    uint64_t v5 = OUTLINED_FUNCTION_161();
    if (v13) {
      char v8 = v6;
    }
    else {
      char v8 = v7;
    }
  }
  else
  {
    uint64_t v5 = 0x6C6143724F646461;
    char v8 = 0xEF74706D6F72506CLL;
  }
  if (a2)
  {
    OUTLINED_FUNCTION_106_0();
    OUTLINED_FUNCTION_41_0();
    if (v10 == 1) {
      unint64_t v4 = v11;
    }
    else {
      unint64_t v4 = 0xD000000000000011;
    }
    if (v10 == 1) {
      uint64_t v3 = v12;
    }
    else {
      uint64_t v3 = v9;
    }
  }
  uint64_t v13 = v5 == v4 && v8 == v3;
  if (v13) {
    OUTLINED_FUNCTION_20_21();
  }
  else {
    BOOL v2 = OUTLINED_FUNCTION_5_40();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(uint64_t))SlotResolutionError.rawValue.getter);
}

{
  char v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  uint64_t v3 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v4 = 0x6143657461657263;
  }
  else {
    unint64_t v4 = 0x73746E65636572;
  }
  if (v3) {
    uint64_t v5 = 0xE700000000000000;
  }
  else {
    uint64_t v5 = 0xEA00000000006C6CLL;
  }
  if (a2) {
    unint64_t v6 = 0x6143657461657263;
  }
  else {
    unint64_t v6 = 0x73746E65636572;
  }
  if (a2) {
    uint64_t v7 = 0xEA00000000006C6CLL;
  }
  else {
    uint64_t v7 = 0xE700000000000000;
  }
  if (v4 == v6 && v5 == v7) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    BOOL v2 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  uint64_t v3 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v4 = 0x6C61636F6CLL;
  }
  else {
    unint64_t v4 = 0x6E676965726F66;
  }
  if (v3) {
    uint64_t v5 = 0xE700000000000000;
  }
  else {
    uint64_t v5 = 0xE500000000000000;
  }
  if (a2) {
    unint64_t v6 = 0x6C61636F6CLL;
  }
  else {
    unint64_t v6 = 0x6E676965726F66;
  }
  if (a2) {
    uint64_t v7 = 0xE500000000000000;
  }
  else {
    uint64_t v7 = 0xE700000000000000;
  }
  if (v4 == v6 && v5 == v7) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    BOOL v2 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  uint64_t v3 = 0xD000000000000010;
  unint64_t v4 = 0x800000000048C170;
  if (a1)
  {
    OUTLINED_FUNCTION_128_0();
    if (v6 == 1) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = v3;
    }
    if (v6 == 1) {
      uint64_t v10 = v8;
    }
    else {
      uint64_t v10 = (v5 - 32) | 0x8000000000000000;
    }
  }
  else
  {
    uint64_t v9 = 0xD000000000000015;
    uint64_t v10 = 0x800000000048C170;
  }
  if (a2)
  {
    OUTLINED_FUNCTION_128_0();
    uint64_t v16 = (v15 - 32) | 0x8000000000000000;
    if (v12 == 1) {
      uint64_t v17 = v13;
    }
    else {
      uint64_t v17 = v11;
    }
    if (v12 == 1) {
      unint64_t v4 = v14;
    }
    else {
      unint64_t v4 = v16;
    }
  }
  else
  {
    uint64_t v17 = v3 + 5;
  }
  if (v9 == v17 && v10 == v4) {
    OUTLINED_FUNCTION_20_21();
  }
  else {
    BOOL v2 = OUTLINED_FUNCTION_5_40();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  uint64_t v3 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v4 = 0x6E6F697461727564;
  }
  else {
    unint64_t v4 = 0x73456F54656D6974;
  }
  if (v3) {
    uint64_t v5 = 0xEF6873696C626174;
  }
  else {
    uint64_t v5 = 0xE800000000000000;
  }
  if (a2) {
    unint64_t v6 = 0x6E6F697461727564;
  }
  else {
    unint64_t v6 = 0x73456F54656D6974;
  }
  if (a2) {
    uint64_t v7 = 0xE800000000000000;
  }
  else {
    uint64_t v7 = 0xEF6873696C626174;
  }
  if (v4 == v6 && v5 == v7) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    BOOL v2 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  uint64_t v3 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v4 = 0x7069636974726170;
  }
  else {
    unint64_t v4 = 0x7954657469766E69;
  }
  if (v3) {
    uint64_t v5 = 0xEA00000000006570;
  }
  else {
    uint64_t v5 = 0xEC00000073746E61;
  }
  if (a2) {
    unint64_t v6 = 0x7069636974726170;
  }
  else {
    unint64_t v6 = 0x7954657469766E69;
  }
  if (a2) {
    uint64_t v7 = 0xEC00000073746E61;
  }
  else {
    uint64_t v7 = 0xEA00000000006570;
  }
  if (v4 == v6 && v5 == v7) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    BOOL v2 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  uint64_t v3 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v4 = 0x644970756F7267;
  }
  else {
    unint64_t v4 = 0x6D614E70756F7267;
  }
  if (v3) {
    uint64_t v5 = 0xE900000000000065;
  }
  else {
    uint64_t v5 = 0xE700000000000000;
  }
  if (a2) {
    unint64_t v6 = 0x644970756F7267;
  }
  else {
    unint64_t v6 = 0x6D614E70756F7267;
  }
  if (a2) {
    uint64_t v7 = 0xE700000000000000;
  }
  else {
    uint64_t v7 = 0xE900000000000065;
  }
  if (v4 == v6 && v5 == v7) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    BOOL v2 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(uint64_t))PhoneCallCommonCATPatternsIdentifiers.rawValue.getter);
}

{
  char v2;
  unint64_t v3;
  unint64_t v4;

  uint64_t v3 = 0xEF31676F6C616964;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v4 = 0xEF32676F6C616964;
    }
    else {
      unint64_t v4 = 0xEF33676F6C616964;
    }
  }
  else
  {
    unint64_t v4 = 0xEF31676F6C616964;
  }
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v3 = 0xEF32676F6C616964;
    }
    else {
      uint64_t v3 = 0xEF33676F6C616964;
    }
  }
  if (v4 == v3) {
    OUTLINED_FUNCTION_20_21();
  }
  else {
    BOOL v2 = OUTLINED_FUNCTION_5_40();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  uint64_t v3 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v4 = 0x656E6F6850657375;
  }
  else {
    unint64_t v4 = 0x68506E6F4E657375;
  }
  if (v3) {
    uint64_t v5 = 0xEE00707041656E6FLL;
  }
  else {
    uint64_t v5 = 0xEB00000000707041;
  }
  if (a2) {
    unint64_t v6 = 0x656E6F6850657375;
  }
  else {
    unint64_t v6 = 0x68506E6F4E657375;
  }
  if (a2) {
    uint64_t v7 = 0xEB00000000707041;
  }
  else {
    uint64_t v7 = 0xEE00707041656E6FLL;
  }
  if (v4 == v6 && v5 == v7) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    BOOL v2 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  uint64_t v3 = 0x636972656E6567;
  if (a1)
  {
    unint64_t v4 = OUTLINED_FUNCTION_133_0(0xD000000000000016);
    if (v8) {
      uint64_t v7 = v5;
    }
    else {
      uint64_t v7 = v6;
    }
  }
  else
  {
    uint64_t v7 = 0xE700000000000000;
    unint64_t v4 = 0x636972656E6567;
  }
  if (a2)
  {
    OUTLINED_FUNCTION_168();
    if (v8) {
      uint64_t v3 = v9 + 1;
    }
    else {
      uint64_t v3 = v9;
    }
    if (v8) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = v10;
    }
  }
  else
  {
    uint64_t v12 = 0xE700000000000000;
  }
  if (v4 == v3 && v7 == v12) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    BOOL v2 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v7;

  if (a1)
  {
    if (a1 == 1) {
      BOOL v2 = 1836020326;
    }
    else {
      BOOL v2 = 1752459639;
    }
    uint64_t v3 = 0xE400000000000000;
  }
  else
  {
    uint64_t v3 = 0xE200000000000000;
    BOOL v2 = 28532;
  }
  if (a2)
  {
    if (a2 == 1) {
      unint64_t v4 = 1836020326;
    }
    else {
      unint64_t v4 = 1752459639;
    }
    uint64_t v5 = 0xE400000000000000;
  }
  else
  {
    uint64_t v5 = 0xE200000000000000;
    unint64_t v4 = 28532;
  }
  if (v2 == v4 && v3 == v5) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if (a1) {
    BOOL v2 = 0x6F65646976;
  }
  else {
    BOOL v2 = 0x6F69647561;
  }
  if (a2) {
    uint64_t v3 = 0x6F65646976;
  }
  else {
    uint64_t v3 = 0x6F69647561;
  }
  if (v2 == v3) {
    unint64_t v4 = 1;
  }
  else {
    unint64_t v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

{
  char v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;

  uint64_t v3 = 0xEC0000006C6C6143;
  unint64_t v4 = 0x676E696D6F636E69;
  if (a1)
  {
    OUTLINED_FUNCTION_80_2();
    uint64_t v5 = OUTLINED_FUNCTION_161();
    if (v13) {
      char v8 = v6;
    }
    else {
      char v8 = v7;
    }
  }
  else
  {
    uint64_t v5 = 0x676E696D6F636E69;
    char v8 = 0xEC0000006C6C6143;
  }
  if (a2)
  {
    OUTLINED_FUNCTION_80_2();
    OUTLINED_FUNCTION_41_0();
    if (v10 == 1) {
      unint64_t v4 = v11;
    }
    else {
      unint64_t v4 = 0xD000000000000010;
    }
    if (v10 == 1) {
      uint64_t v3 = v12;
    }
    else {
      uint64_t v3 = v9;
    }
  }
  uint64_t v13 = v5 == v4 && v8 == v3;
  if (v13) {
    OUTLINED_FUNCTION_20_21();
  }
  else {
    BOOL v2 = OUTLINED_FUNCTION_5_40();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(uint64_t))PhoneAppSelectionSignalsGathererType.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(uint64_t))PhoneAppResolutionLogger.CodePathId.rawValue.getter);
}

{
  char v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  uint64_t v3 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v4 = 0x32676F6C616964;
  }
  else {
    unint64_t v4 = 0x6573557473726946;
  }
  if (v3) {
    uint64_t v5 = 0xE800000000000000;
  }
  else {
    uint64_t v5 = 0xE700000000000000;
  }
  if (a2) {
    unint64_t v6 = 0x32676F6C616964;
  }
  else {
    unint64_t v6 = 0x6573557473726946;
  }
  if (a2) {
    uint64_t v7 = 0xE700000000000000;
  }
  else {
    uint64_t v7 = 0xE800000000000000;
  }
  if (v4 == v6 && v5 == v7) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    BOOL v2 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  uint64_t v3 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v4 = 0x6C61436F54646461;
  }
  else {
    unint64_t v4 = 0x6C6C614377656ELL;
  }
  if (v3) {
    uint64_t v5 = 0xE700000000000000;
  }
  else {
    uint64_t v5 = 0xE90000000000006CLL;
  }
  if (a2) {
    unint64_t v6 = 0x6C61436F54646461;
  }
  else {
    unint64_t v6 = 0x6C6C614377656ELL;
  }
  if (a2) {
    uint64_t v7 = 0xE90000000000006CLL;
  }
  else {
    uint64_t v7 = 0xE700000000000000;
  }
  if (v4 == v6 && v5 == v7) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    BOOL v2 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  uint64_t v3 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v4 = 0x636972656E6567;
  }
  else {
    unint64_t v4 = 0x656D695465636166;
  }
  if (v3) {
    uint64_t v5 = 0xE800000000000000;
  }
  else {
    uint64_t v5 = 0xE700000000000000;
  }
  if (a2) {
    unint64_t v6 = 0x636972656E6567;
  }
  else {
    unint64_t v6 = 0x656D695465636166;
  }
  if (a2) {
    uint64_t v7 = 0xE700000000000000;
  }
  else {
    uint64_t v7 = 0xE800000000000000;
  }
  if (v4 == v6 && v5 == v7) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    BOOL v2 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(uint64_t))SearchCallHistoryCATsSimple.ConfirmDateCreatedDialogIds.rawValue.getter);
}

{
  char v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  unint64_t v4 = 0xE200000000000000;
  uint64_t v5 = 28494;
  switch(a1)
  {
    case 1:
      unint64_t v4 = 0xE700000000000000;
      uint64_t v5 = 0x73746E65636552;
      break;
    case 2:
      uint64_t v5 = 0x69616D6563696F56;
      unint64_t v4 = 0xEE00656C7469546CLL;
      break;
    case 3:
      unint64_t v4 = 0xE300000000000000;
      uint64_t v5 = 7562585;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE200000000000000;
  uint64_t v7 = 28494;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE700000000000000;
      uint64_t v7 = 0x73746E65636552;
      break;
    case 2:
      uint64_t v7 = 0x69616D6563696F56;
      unint64_t v6 = 0xEE00656C7469546CLL;
      break;
    case 3:
      unint64_t v6 = 0xE300000000000000;
      uint64_t v7 = 7562585;
      break;
    default:
      break;
  }
  if (v5 == v7 && v4 == v6) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    BOOL v2 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  uint64_t v3 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v4 = 0xD000000000000015;
  }
  else {
    unint64_t v4 = 0x32676F6C616964;
  }
  if (v3) {
    uint64_t v5 = 0xE700000000000000;
  }
  else {
    uint64_t v5 = 0x8000000000490660;
  }
  if (a2) {
    unint64_t v6 = 0xD000000000000015;
  }
  else {
    unint64_t v6 = 0x32676F6C616964;
  }
  if (a2) {
    uint64_t v7 = 0x8000000000490660;
  }
  else {
    uint64_t v7 = 0xE700000000000000;
  }
  if (v4 == v6 && v5 == v7) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    BOOL v2 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(uint64_t))SearchCallHistoryCATsSimple.ShowCallHistoryIntroDialogIds.rawValue.getter);
}

{
  char v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v3 = 0xEC00000031676F6CLL;
  unint64_t v4 = 0xEC00000031676F6CLL;
  switch(a1)
  {
    case 1:
      uint64_t v5 = 845639532;
      goto LABEL_5;
    case 2:
      uint64_t v5 = 862416748;
      goto LABEL_5;
    case 3:
      uint64_t v5 = 879193964;
LABEL_5:
      unint64_t v4 = v5 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v6 = 845639532;
      goto LABEL_10;
    case 2:
      unint64_t v6 = 862416748;
      goto LABEL_10;
    case 3:
      unint64_t v6 = 879193964;
LABEL_10:
      uint64_t v3 = v6 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
      break;
    default:
      break;
  }
  if (v4 == v3) {
    OUTLINED_FUNCTION_20_21();
  }
  else {
    BOOL v2 = OUTLINED_FUNCTION_5_40();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(uint64_t))AnswerCallCATs.Properties.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(uint64_t))StartCallCATsSimple.IntentConfirmationWithRestrictedContactsDialogIds.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(uint64_t))StartCallCATsSimple.UnsupportedContactsInvalidHandleDialogIds.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(uint64_t))StartCallCATsSimple.IntentConfirmationEmergencyDialogIds.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(uint64_t))StartCallCATsSimple.DisambiguateAppsVoiceModeDialogIds.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(uint64_t))StartCallCATsSimple.DisambiguateContactsDialogIds.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(uint64_t))StartCallCATsSimple.ConfirmAppDialogIds.rawValue.getter);
}

{
  char v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  uint64_t v3 = 0x31676F6C616964;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v4 = 0xEE0031676F6C6169;
    }
    else {
      unint64_t v4 = 0xEE0032676F6C6169;
    }
    uint64_t v5 = OUTLINED_FUNCTION_179() & 0xFFFFFFFFFFFFLL | 0x6423000000000000;
  }
  else
  {
    unint64_t v4 = 0xE700000000000000;
    uint64_t v5 = 0x31676F6C616964;
  }
  if (a2)
  {
    if (a2 == 1) {
      unint64_t v6 = 0xEE0031676F6C6169;
    }
    else {
      unint64_t v6 = 0xEE0032676F6C6169;
    }
    OUTLINED_FUNCTION_170_0();
    uint64_t v3 = v7 & 0xFFFFFFFFFFFFLL | 0x6423000000000000;
  }
  else
  {
    unint64_t v6 = 0xE700000000000000;
  }
  if (v5 == v3 && v4 == v6) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    BOOL v2 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(uint64_t))PostCallInquiryAnswerCallCATs.Properties.rawValue.getter);
}

{
  char v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  uint64_t v3 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v4 = 1735289202;
  }
  else {
    unint64_t v4 = 6579297;
  }
  if (v3) {
    uint64_t v5 = 0xE300000000000000;
  }
  else {
    uint64_t v5 = 0xE400000000000000;
  }
  if (a2) {
    unint64_t v6 = 1735289202;
  }
  else {
    unint64_t v6 = 6579297;
  }
  if (a2) {
    uint64_t v7 = 0xE400000000000000;
  }
  else {
    uint64_t v7 = 0xE300000000000000;
  }
  if (v4 == v6 && v5 == v7) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    BOOL v2 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  uint64_t v3 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v4 = 0x6F725074726F6873;
  }
  else {
    unint64_t v4 = 0x6D6F7250676E6F6CLL;
  }
  if (v3) {
    uint64_t v5 = 0xEA00000000007470;
  }
  else {
    uint64_t v5 = 0xEB0000000074706DLL;
  }
  if (a2) {
    unint64_t v6 = 0x6F725074726F6873;
  }
  else {
    unint64_t v6 = 0x6D6F7250676E6F6CLL;
  }
  if (a2) {
    uint64_t v7 = 0xEB0000000074706DLL;
  }
  else {
    uint64_t v7 = 0xEA00000000007470;
  }
  if (v4 == v6 && v5 == v7) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    BOOL v2 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(uint64_t))AnnounceIncomingCallCATs.Properties.rawValue.getter);
}

{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if (a1) {
    BOOL v2 = 0x32676F6C616964;
  }
  else {
    BOOL v2 = 0x31676F6C616964;
  }
  if (a2) {
    uint64_t v3 = 0x32676F6C616964;
  }
  else {
    uint64_t v3 = 0x31676F6C616964;
  }
  if (v2 == v3) {
    unint64_t v4 = 1;
  }
  else {
    unint64_t v4 = OUTLINED_FUNCTION_110_0();
  }
  OUTLINED_FUNCTION_212_0();
  return v4 & 1;
}

{
  char v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  uint64_t v3 = 0xEF6C6C6143646574;
  unint64_t v4 = 0x726F707075736E75;
  if (a1)
  {
    uint64_t v5 = OUTLINED_FUNCTION_133_0(0xD000000000000016);
    if (v9) {
      char v8 = v6;
    }
    else {
      char v8 = v7;
    }
  }
  else
  {
    uint64_t v5 = 0x726F707075736E75;
    char v8 = 0xEF6C6C6143646574;
  }
  if (a2)
  {
    OUTLINED_FUNCTION_168();
    if (v9) {
      unint64_t v4 = v10 + 1;
    }
    else {
      unint64_t v4 = v10;
    }
    if (v9) {
      uint64_t v3 = v12;
    }
    else {
      uint64_t v3 = v11;
    }
  }
  if (v5 == v4 && v8 == v3) {
    OUTLINED_FUNCTION_20_21();
  }
  else {
    BOOL v2 = OUTLINED_FUNCTION_5_40();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))AnnounceGroupFaceTimeInviteCATsSimple.ReadGroupFaceTimeInviteAnnouncementDialogIds.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))UsoIdentifierNamespaceType.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))SuggestionsCATsSimple.Properties.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))SuggestionsCATs.Properties.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))DucFamilyNames.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))PhoneCallSlotNames.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))PhoneCallRecord.CodingKeys.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))PhoneCallDisplayTextCATsSimple.Properties.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))PhoneCallControlCATsSimple.UnsupportedSwitchToFaceTimeDialogIds.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))PhoneCallControlCATsSimple.Properties.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))PhoneCallCommonCATsSimple.Properties.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))PhoneCallDisplayTextCATs.Properties.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))PhoneCallControlAction.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))PhoneCallNLConstants.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))PhoneCallControlCATs.Properties.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))PhoneCallCommonCATs.Properties.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))AnnounceCallBellCATs.Properties.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))AnnounceCallBellCATsSimple.Properties.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))OngoingCallCATs.Properties.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))OngoingCallCATsSimple.Properties.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))SearchCallHistoryCATPatternsIdentifiers.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))SearchCallHistoryCATsSimple.Properties.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))SearchCallHistoryCATs.Properties.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))HangUpCallCATs.Properties.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))HangUpCallCATsSimple.Properties.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))StartCallCATs.Properties.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))StartCallCATPatternsIdentifiers.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))StartCallCATsSimple.UnsupportedContactsNoContactFoundDialogIds.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))StartCallCATsSimple.IntentHandledResponseDialogIds.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))StartCallCATsSimple.ConfirmContactsDialogIds.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))StartCallCATsSimple.RelationshipDialogIds.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))StartCallCATsSimple.Properties.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))SiriPhoneDefaultsKey.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))AddCallParticipantCATPatternsIdentifiers.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))AddCallParticipantCATsSimple.Properties.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))AddCallParticipantCATs.Properties.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))UnsupportedPhoneCall.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))UnsupportedFlowCATs.Properties.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))UnsupportedFlowCATPatternsIdentifiers.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))UnsupportedFlowCATsSimple.Properties.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (void (*)(void))&type metadata accessor for ContactActionType, &lazy protocol witness table cache variable for type ContactActionType and conformance ContactActionType, (void (*)(uint64_t))&type metadata accessor for ContactActionType);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (void (*)(void))&type metadata accessor for InteractionType, &lazy protocol witness table cache variable for type InteractionType and conformance InteractionType, (void (*)(uint64_t))&type metadata accessor for InteractionType);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (void (*)(void))&type metadata accessor for InputOrigin, &lazy protocol witness table cache variable for type InputOrigin and conformance InputOrigin, (void (*)(uint64_t))&type metadata accessor for InputOrigin);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (void (*)(void))&type metadata accessor for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues, &lazy protocol witness table cache variable for type UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues and conformance UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues, (void (*)(uint64_t))&type metadata accessor for UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (void (*)(void))&type metadata accessor for UsoEntity_common_PhoneCallMode.DefinedValues, &lazy protocol witness table cache variable for type UsoEntity_common_PhoneCallMode.DefinedValues and conformance UsoEntity_common_PhoneCallMode.DefinedValues, (void (*)(uint64_t))&type metadata accessor for UsoEntity_common_PhoneCallMode.DefinedValues);
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, char a2)
{
  uint64_t v3 = 0xD000000000000015;
  unint64_t v4 = (unint64_t)"emergencyConfirmation";
  unint64_t v5 = 0x8000000000491080;
  uint64_t v6 = a1;
  uint64_t v7 = "synchronousBurstIndex";
  uint64_t v8 = 0xD000000000000015;
  uint64_t v9 = "MessageIdentifier";
  switch(v6)
  {
    case 1:
      uint64_t v8 = 0xD000000000000011;
      uint64_t v10 = "VMVoicemailIdentifier";
      goto LABEL_5;
    case 2:
      uint64_t v8 = OUTLINED_FUNCTION_166() & 0xFFFFFFFFFFFFLL | 0x4974000000000000;
      unint64_t v5 = 0xEB000000006F666ELL;
      break;
    case 3:
      uint64_t v10 = "MessageIdentifier";
LABEL_5:
      unint64_t v5 = (unint64_t)v10 | 0x8000000000000000;
      break;
    default:
      break;
  }
  unint64_t v11 = v4 | 0x8000000000000000;
  switch(a2)
  {
    case 1:
      v3 -= 4;
      uint64_t v12 = v9 - 32;
      goto LABEL_10;
    case 2:
      OUTLINED_FUNCTION_165();
      uint64_t v3 = v13 & 0xFFFFFFFFFFFFLL | 0x4974000000000000;
      unint64_t v11 = 0xEB000000006F666ELL;
      break;
    case 3:
      uint64_t v12 = v7 - 32;
LABEL_10:
      unint64_t v11 = (unint64_t)v12 | 0x8000000000000000;
      break;
    default:
      break;
  }
  if (v8 == v3 && v5 == v11) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    char v2 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  uint64_t v3 = 0x7473726966;
  unint64_t v4 = 0xE500000000000000;
  unint64_t v5 = a1;
  uint64_t v6 = 0x7473726966;
  switch(v5)
  {
    case 1:
      unint64_t v4 = 0xE600000000000000;
      uint64_t v6 = 0x656C6464696DLL;
      break;
    case 2:
      unint64_t v4 = 0xE400000000000000;
      uint64_t v6 = OUTLINED_FUNCTION_58_8();
      break;
    case 3:
      unint64_t v4 = 0xE700000000000000;
      uint64_t v6 = 0x6E776F6E6B6E75;
      break;
    default:
      break;
  }
  uint64_t v7 = 0xE500000000000000;
  switch(a2)
  {
    case 1:
      uint64_t v7 = 0xE600000000000000;
      uint64_t v3 = 0x656C6464696DLL;
      break;
    case 2:
      uint64_t v7 = 0xE400000000000000;
      uint64_t v3 = 1953718636;
      break;
    case 3:
      uint64_t v7 = 0xE700000000000000;
      uint64_t v3 = 0x6E776F6E6B6E75;
      break;
    default:
      break;
  }
  if (v6 == v3 && v4 == v7) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    char v2 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  uint64_t v3 = 0xEE00796C6E4F746ELL;
  unint64_t v4 = 0x65746E4934764C4ELL;
  unint64_t v5 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v6 = 7304053;
    }
    else {
      uint64_t v6 = 0xD000000000000012;
    }
    if (v5 == 1) {
      uint64_t v7 = 0xE300000000000000;
    }
    else {
      uint64_t v7 = 0x8000000000490DE0;
    }
  }
  else
  {
    uint64_t v6 = 0x65746E4934764C4ELL;
    uint64_t v7 = 0xEE00796C6E4F746ELL;
  }
  if (a2)
  {
    OUTLINED_FUNCTION_175();
    if (v8) {
      unint64_t v4 = v11;
    }
    else {
      unint64_t v4 = v12;
    }
    if (v8) {
      uint64_t v3 = v10;
    }
    else {
      uint64_t v3 = v9;
    }
  }
  if (v6 == v4 && v7 == v3) {
    OUTLINED_FUNCTION_20_21();
  }
  else {
    char v2 = OUTLINED_FUNCTION_5_40();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  uint64_t v3 = 0x65756E69746E6F63;
  unint64_t v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v5 = 1886352499;
    }
    else {
      unint64_t v5 = 0x746165706572;
    }
    if (v4 == 1) {
      uint64_t v6 = 0xE400000000000000;
    }
    else {
      uint64_t v6 = 0xE600000000000000;
    }
  }
  else
  {
    uint64_t v6 = 0xE800000000000000;
    unint64_t v5 = 0x65756E69746E6F63;
  }
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v3 = 1886352499;
    }
    else {
      uint64_t v3 = 0x746165706572;
    }
    if (a2 == 1) {
      uint64_t v7 = 0xE400000000000000;
    }
    else {
      uint64_t v7 = 0xE600000000000000;
    }
  }
  else
  {
    uint64_t v7 = 0xE800000000000000;
  }
  if (v5 == v3 && v6 == v7) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    char v2 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  uint64_t v3 = 0x6C61636F6CLL;
  unint64_t v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v5 = 0x6C61636F4C6E6F6ELL;
    }
    else {
      unint64_t v5 = 1701736302;
    }
    if (v4 == 1) {
      uint64_t v6 = 0xE800000000000000;
    }
    else {
      uint64_t v6 = 0xE400000000000000;
    }
  }
  else
  {
    uint64_t v6 = 0xE500000000000000;
    unint64_t v5 = 0x6C61636F6CLL;
  }
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v3 = 0x6C61636F4C6E6F6ELL;
    }
    else {
      uint64_t v3 = 1701736302;
    }
    if (a2 == 1) {
      uint64_t v7 = 0xE800000000000000;
    }
    else {
      uint64_t v7 = 0xE400000000000000;
    }
  }
  else
  {
    uint64_t v7 = 0xE500000000000000;
  }
  if (v5 == v3 && v6 == v7) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    char v2 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;

  uint64_t v3 = 0xEB00000000656D69;
  unint64_t v4 = 0x546563614677656ELL;
  unint64_t v5 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v6 = 28532;
    }
    else {
      uint64_t v6 = 0x6F68576F74;
    }
    if (v5 == 1) {
      uint64_t v7 = 0xE200000000000000;
    }
    else {
      uint64_t v7 = 0xE500000000000000;
    }
  }
  else
  {
    uint64_t v6 = 0x546563614677656ELL;
    uint64_t v7 = 0xEB00000000656D69;
  }
  if (a2)
  {
    if (a2 == 1) {
      unint64_t v4 = 28532;
    }
    else {
      unint64_t v4 = 0x6F68576F74;
    }
    if (a2 == 1) {
      uint64_t v3 = 0xE200000000000000;
    }
    else {
      uint64_t v3 = 0xE500000000000000;
    }
  }
  if (v6 == v4 && v7 == v3) {
    OUTLINED_FUNCTION_20_21();
  }
  else {
    char v2 = OUTLINED_FUNCTION_5_40();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;

  uint64_t v3 = 0xEC000000656D756CLL;
  unint64_t v4 = 0x6F5665676E616863;
  unint64_t v5 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v6 = 0x6C6F566B63656863;
    }
    else {
      uint64_t v6 = 0x636972656E6567;
    }
    if (v5 == 1) {
      uint64_t v7 = 0xEB00000000656D75;
    }
    else {
      uint64_t v7 = 0xE700000000000000;
    }
  }
  else
  {
    uint64_t v6 = 0x6F5665676E616863;
    uint64_t v7 = 0xEC000000656D756CLL;
  }
  if (a2)
  {
    if (a2 == 1) {
      unint64_t v4 = 0x6C6F566B63656863;
    }
    else {
      unint64_t v4 = 0x636972656E6567;
    }
    if (a2 == 1) {
      uint64_t v3 = 0xEB00000000656D75;
    }
    else {
      uint64_t v3 = 0xE700000000000000;
    }
  }
  if (v6 == v4 && v7 == v3) {
    OUTLINED_FUNCTION_20_21();
  }
  else {
    char v2 = OUTLINED_FUNCTION_5_40();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  uint64_t v3 = 0xEC000000656E6F68;
  unint64_t v4 = 0x7072656B61657073;
  unint64_t v5 = a1;
  uint64_t v6 = 0x7072656B61657073;
  uint64_t v7 = 0xEC000000656E6F68;
  switch(v5)
  {
    case 1:
      uint64_t v7 = 0x800000000048D9A0;
      uint64_t v6 = OUTLINED_FUNCTION_123_0();
      break;
    case 2:
      uint64_t v6 = OUTLINED_FUNCTION_139_0();
      uint64_t v7 = 0xE900000000000068;
      break;
    case 3:
      uint64_t v6 = 0x65756C625F746F6ELL;
      uint64_t v7 = 0xED000068746F6F74;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      OUTLINED_FUNCTION_174();
      break;
    case 2:
      OUTLINED_FUNCTION_222();
      uint64_t v3 = 0xE900000000000068;
      break;
    case 3:
      unint64_t v4 = 0x65756C625F746F6ELL;
      uint64_t v3 = 0xED000068746F6F74;
      break;
    default:
      break;
  }
  if (v6 == v4 && v7 == v3) {
    OUTLINED_FUNCTION_20_21();
  }
  else {
    char v2 = OUTLINED_FUNCTION_5_40();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;

  uint64_t v3 = 0xE900000000000079;
  unint64_t v4 = 0x6E6F6870656C6574;
  unint64_t v5 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v6 = 0x656D697465636166;
    }
    else {
      uint64_t v6 = 0x7261506472696874;
    }
    if (v5 == 1) {
      uint64_t v7 = 0xE800000000000000;
    }
    else {
      uint64_t v7 = 0xEA00000000007974;
    }
  }
  else
  {
    uint64_t v6 = 0x6E6F6870656C6574;
    uint64_t v7 = 0xE900000000000079;
  }
  if (a2)
  {
    if (a2 == 1) {
      unint64_t v4 = 0x656D697465636166;
    }
    else {
      unint64_t v4 = 0x7261506472696874;
    }
    if (a2 == 1) {
      uint64_t v3 = 0xE800000000000000;
    }
    else {
      uint64_t v3 = 0xEA00000000007974;
    }
  }
  if (v6 == v4 && v7 == v3) {
    OUTLINED_FUNCTION_20_21();
  }
  else {
    char v2 = OUTLINED_FUNCTION_5_40();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;

  uint64_t v3 = 0xE900000000000065;
  unint64_t v4 = 0x707954616964656DLL;
  unint64_t v5 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v6 = 0x6563696F76;
    }
    else {
      uint64_t v6 = 0x656D756C6F76;
    }
    if (v5 == 1) {
      uint64_t v7 = 0xE500000000000000;
    }
    else {
      uint64_t v7 = 0xE600000000000000;
    }
  }
  else
  {
    uint64_t v6 = 0x707954616964656DLL;
    uint64_t v7 = 0xE900000000000065;
  }
  if (a2)
  {
    if (a2 == 1) {
      unint64_t v4 = 0x6563696F76;
    }
    else {
      unint64_t v4 = 0x656D756C6F76;
    }
    if (a2 == 1) {
      uint64_t v3 = 0xE500000000000000;
    }
    else {
      uint64_t v3 = 0xE600000000000000;
    }
  }
  if (v6 == v4 && v7 == v3) {
    OUTLINED_FUNCTION_20_21();
  }
  else {
    char v2 = OUTLINED_FUNCTION_5_40();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  uint64_t v3 = 6579297;
  unint64_t v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v5 = 0x654E646E41646E65;
    }
    else {
      unint64_t v5 = 0x4E646E41646C6F68;
    }
    if (v4 == 1) {
      uint64_t v6 = 0xED00006C6C614377;
    }
    else {
      uint64_t v6 = 0xEE006C6C61437765;
    }
  }
  else
  {
    uint64_t v6 = 0xE300000000000000;
    unint64_t v5 = 6579297;
  }
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v3 = 0x654E646E41646E65;
    }
    else {
      uint64_t v3 = 0x4E646E41646C6F68;
    }
    if (a2 == 1) {
      uint64_t v7 = 0xED00006C6C614377;
    }
    else {
      uint64_t v7 = 0xEE006C6C61437765;
    }
  }
  else
  {
    uint64_t v7 = 0xE300000000000000;
  }
  if (v5 == v3 && v6 == v7) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    char v2 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  uint64_t v3 = 0xEC00000073736572;
  unint64_t v4 = 0x6464416C69616D45;
  unint64_t v5 = a1;
  uint64_t v6 = 0x6464416C69616D45;
  uint64_t v7 = 0xEC00000073736572;
  switch(v5)
  {
    case 1:
      uint64_t v6 = 0x6E6F437974706D45;
      uint64_t v7 = 0xEC00000074636174;
      break;
    case 2:
      uint64_t v7 = 0xE700000000000000;
      uint64_t v6 = OUTLINED_FUNCTION_62_8();
      break;
    case 3:
      uint64_t v7 = 0x800000000048FF50;
      uint64_t v6 = OUTLINED_FUNCTION_123_0();
      break;
    case 4:
      uint64_t v6 = 0x6D754E656E6F6850;
      uint64_t v7 = 0xEB00000000726562;
      break;
    case 5:
      uint64_t v6 = 0x6F43656C676E6953;
      uint64_t v7 = 0xED0000746361746ELL;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v4 = 0x6E6F437974706D45;
      uint64_t v3 = 0xEC00000074636174;
      break;
    case 2:
      uint64_t v3 = 0xE700000000000000;
      OUTLINED_FUNCTION_61_6();
      break;
    case 3:
      OUTLINED_FUNCTION_174();
      break;
    case 4:
      unint64_t v4 = 0x6D754E656E6F6850;
      uint64_t v3 = 0xEB00000000726562;
      break;
    case 5:
      unint64_t v4 = 0x6F43656C676E6953;
      uint64_t v3 = 0xED0000746361746ELL;
      break;
    default:
      break;
  }
  if (v6 == v4 && v7 == v3) {
    OUTLINED_FUNCTION_20_21();
  }
  else {
    char v2 = OUTLINED_FUNCTION_5_40();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  uint64_t v3 = 0x800000000048F1C0;
  unint64_t v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v5 = 0xD000000000000019;
    }
    else {
      unint64_t v5 = 0x6574736575716552;
    }
    if (v4 == 1) {
      uint64_t v6 = 0x800000000048F1E0;
    }
    else {
      uint64_t v6 = 0xEF656C646E614864;
    }
  }
  else
  {
    unint64_t v5 = 0xD00000000000001BLL;
    uint64_t v6 = 0x800000000048F1C0;
  }
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v7 = 0xD000000000000019;
    }
    else {
      uint64_t v7 = 0x6574736575716552;
    }
    if (a2 == 1) {
      uint64_t v3 = 0x800000000048F1E0;
    }
    else {
      uint64_t v3 = 0xEF656C646E614864;
    }
  }
  else
  {
    uint64_t v7 = 0xD00000000000001BLL;
  }
  if (v5 == v7 && v6 == v3) {
    OUTLINED_FUNCTION_20_21();
  }
  else {
    char v2 = OUTLINED_FUNCTION_5_40();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  const char *v9;
  unint64_t v10;
  unint64_t v11;

  unint64_t v4 = 0xD000000000000012;
  unint64_t v5 = 0xD00000000000001CLL;
  uint64_t v6 = (unint64_t)"";
  uint64_t v7 = 0x800000000048FFD0;
  uint64_t v8 = a1;
  uint64_t v9 = "FaceTimeOnlyDevice";
  switch(v8)
  {
    case 1:
      uint64_t v7 = 0x800000000048FFF0;
      unint64_t v5 = 0xD000000000000012;
      break;
    case 2:
      uint64_t v7 = 0xE700000000000000;
      unint64_t v5 = OUTLINED_FUNCTION_62_8();
      break;
    case 3:
      uint64_t v7 = 0xE300000000000000;
      unint64_t v5 = 6512973;
      break;
    case 4:
      uint64_t v7 = 0xE500000000000000;
      unint64_t v5 = 0x6863746157;
      break;
    case 5:
      unint64_t v5 = 0x6976654468746957;
      uint64_t v7 = 0xEA00000000006563;
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + 10;
  unint64_t v11 = v6 | 0x8000000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v11 = (unint64_t)(v9 - 32) | 0x8000000000000000;
      uint64_t v10 = 0xD000000000000012;
      break;
    case 2:
      unint64_t v11 = 0xE700000000000000;
      OUTLINED_FUNCTION_61_6();
      break;
    case 3:
      unint64_t v11 = 0xE300000000000000;
      uint64_t v10 = 6512973;
      break;
    case 4:
      unint64_t v11 = 0xE500000000000000;
      uint64_t v10 = 0x6863746157;
      break;
    case 5:
      uint64_t v10 = 0x6976654468746957;
      unint64_t v11 = 0xEA00000000006563;
      break;
    default:
      break;
  }
  if (v5 == v10 && v7 == v11) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    char v2 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;

  uint64_t v3 = 0xEC00000065636976;
  unint64_t v4 = 0x6544687469575446;
  unint64_t v5 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v6 = 0x756F687469575446;
    }
    else {
      uint64_t v6 = 0x636972656E6547;
    }
    if (v5 == 1) {
      uint64_t v7 = 0xEF65636976654474;
    }
    else {
      uint64_t v7 = 0xE700000000000000;
    }
  }
  else
  {
    uint64_t v6 = 0x6544687469575446;
    uint64_t v7 = 0xEC00000065636976;
  }
  if (a2)
  {
    if (a2 == 1) {
      unint64_t v4 = 0x756F687469575446;
    }
    else {
      unint64_t v4 = 0x636972656E6547;
    }
    if (a2 == 1) {
      uint64_t v3 = 0xEF65636976654474;
    }
    else {
      uint64_t v3 = 0xE700000000000000;
    }
  }
  if (v6 == v4 && v7 == v3) {
    OUTLINED_FUNCTION_20_21();
  }
  else {
    char v2 = OUTLINED_FUNCTION_5_40();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  char v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;

  uint64_t v3 = 0xEB0000000064657ALL;
  unint64_t v4 = 0x696C616974696E69;
  unint64_t v5 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v6 = 0x46676E6974696177;
    }
    else {
      uint64_t v6 = 0x6365527475706E69;
    }
    if (v5 == 1) {
      uint64_t v7 = 0xEF7475706E49726FLL;
    }
    else {
      uint64_t v7 = 0xED00006465766965;
    }
  }
  else
  {
    uint64_t v6 = 0x696C616974696E69;
    uint64_t v7 = 0xEB0000000064657ALL;
  }
  if (a2)
  {
    if (a2 == 1) {
      unint64_t v4 = 0x46676E6974696177;
    }
    else {
      unint64_t v4 = 0x6365527475706E69;
    }
    if (a2 == 1) {
      uint64_t v3 = 0xEF7475706E49726FLL;
    }
    else {
      uint64_t v3 = 0xED00006465766965;
    }
  }
  if (v6 == v4 && v7 == v3) {
    OUTLINED_FUNCTION_20_21();
  }
  else {
    char v2 = OUTLINED_FUNCTION_5_40();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  unint64_t v2;
  char v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;

  unint64_t v4 = 0xD000000000000012;
  unint64_t v5 = 0x80000000004908E0;
  uint64_t v6 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v7 = 0x65756E69746E6F63;
    }
    else {
      uint64_t v7 = 0x43526C65636E6163;
    }
    if (v6 == 1) {
      char v2 = 0xEF776F6C46484352;
    }
    else {
      char v2 = 0xED0000776F6C4648;
    }
  }
  else
  {
    uint64_t v7 = OUTLINED_FUNCTION_223(18);
  }
  if (a2)
  {
    if (a2 == 1) {
      unint64_t v4 = 0x65756E69746E6F63;
    }
    else {
      unint64_t v4 = 0x43526C65636E6163;
    }
    if (a2 == 1) {
      unint64_t v5 = 0xEF776F6C46484352;
    }
    else {
      unint64_t v5 = 0xED0000776F6C4648;
    }
  }
  if (v7 == v4 && v2 == v5) {
    OUTLINED_FUNCTION_20_21();
  }
  else {
    uint64_t v3 = OUTLINED_FUNCTION_5_40();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  if ((unint64_t)a1 << 32 == (unint64_t)a2 << 32) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

{
  char v2;

  if ((unint64_t)a1 << 48 == (unint64_t)a2 << 48) {
    char v2 = 1;
  }
  else {
    char v2 = OUTLINED_FUNCTION_110_0();
  }
  OUTLINED_FUNCTION_212_0();
  return v2 & 1;
}

uint64_t specialized == infix<A>(_:_:)(char a1)
{
  unint64_t v3 = 0xE600000000000000;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 0xED0000746E617473;
      break;
    case 3:
      unint64_t v3 = 0xE700000000000000;
      break;
    case 4:
      unint64_t v3 = 0xE700000000000000;
      break;
    case 5:
      unint64_t v3 = 0xEA00000000006272;
      break;
    default:
      break;
  }
  OUTLINED_FUNCTION_189();
  switch(v6)
  {
    case 1:
      uint64_t v5 = 0x6973734169726953;
      unint64_t v1 = 0xED0000746E617473;
      break;
    case 2:
      uint64_t v5 = 0x6E6F69746361;
      break;
    case 3:
      unint64_t v1 = 0xE700000000000000;
      uint64_t v5 = 0x646E616D6D6F63;
      break;
    case 4:
      unint64_t v1 = 0xE700000000000000;
      uint64_t v5 = 0x7463656A627573;
      break;
    case 5:
      uint64_t v5 = 0x6556726564616572;
      unint64_t v1 = 0xEA00000000006272;
      break;
    default:
      break;
  }
  if (v4 == v5 && v3 == v1) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    char v2 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

{
  unint64_t v1;
  char v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  unint64_t v3 = 0xE600000000000000;
  switch(a1)
  {
    case 1:
      OUTLINED_FUNCTION_140_0();
      unint64_t v3 = 0xE900000000000079;
      break;
    case 2:
      unint64_t v3 = 0xE90000000000006CLL;
      break;
    case 4:
      unint64_t v3 = 0xE800000000000000;
      break;
    default:
      break;
  }
  OUTLINED_FUNCTION_189();
  switch(v6)
  {
    case 1:
      OUTLINED_FUNCTION_118_0();
      unint64_t v1 = 0xE900000000000079;
      break;
    case 2:
      uint64_t v5 = 0x69616D6563696F76;
      unint64_t v1 = 0xE90000000000006CLL;
      break;
    case 3:
      uint64_t v5 = 0x6C6169646572;
      break;
    case 4:
      unint64_t v1 = 0xE800000000000000;
      OUTLINED_FUNCTION_121();
      uint64_t v5 = v7 | 0x6B63616200000000;
      break;
    default:
      break;
  }
  if (v4 == v5 && v3 == v1) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    char v2 = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = a2 & 1;
  uint64_t v5 = a3(a1 & 1);
  uint64_t v7 = v6;
  if (v5 == a3(v4) && v7 == v8) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    LOBYTE(v5) = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3();
  uint64_t v7 = v6;
  if (v5 == ((uint64_t (*)(uint64_t))a3)(a2) && v7 == v8) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    LOBYTE(v5) = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2, void (*a3)(void), unint64_t *a4, void (*a5)(uint64_t))
{
  a3(0);
  lazy protocol witness table accessor for type ContactActionType and conformance ContactActionType(a4, a5);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v11 == v9 && v12 == v10) {
    OUTLINED_FUNCTION_6_42();
  }
  else {
    LOBYTE(a4) = OUTLINED_FUNCTION_3_50();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a4 & 1;
}

Swift::Bool __swiftcall PhoneCallNLIntent.hasCallConfirmation(_:)(PhoneCallFlowDelegatePlugin::PhoneCallConfirmation a1)
{
  (*(void (**)())(v1 + 64))();
  OUTLINED_FUNCTION_91_5();
  if (v9)
  {
    a1 = PhoneCallFlowDelegatePlugin_PhoneCallConfirmation_yes;
  }
  else
  {
    uint64_t v4 = PhoneCallConfirmation.rawValue.getter(v3);
    uint64_t v6 = v5;
    uint64_t v7 = PhoneCallConfirmation.rawValue.getter(a1);
    BOOL v9 = v4 == v7 && v6 == v8;
    if (v9) {
      OUTLINED_FUNCTION_6_42();
    }
    else {
      a1 = OUTLINED_FUNCTION_3_50();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return a1 & 1;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = OUTLINED_FUNCTION_5_40();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  BOOL v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (OUTLINED_FUNCTION_5_40() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

void specialized Sequence<>.contains(_:)()
{
  OUTLINED_FUNCTION_28();
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v1;
    char v4 = v0;
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
    while (1)
    {
      uint64_t v6 = v3 + v5++;
      unint64_t v7 = 0xE600000000000000;
      unint64_t v8 = 0x64657373696DLL;
      switch(*(unsigned char *)(v6 + 32))
      {
        case 1:
          unint64_t v7 = 0xE300000000000000;
          unint64_t v8 = OUTLINED_FUNCTION_52_9();
          break;
        case 2:
          unint64_t v8 = OUTLINED_FUNCTION_25_18();
          break;
        case 3:
          unint64_t v7 = 0xE700000000000000;
          unint64_t v8 = OUTLINED_FUNCTION_10_30();
          break;
        case 4:
          unint64_t v7 = 0xE800000000000000;
          unint64_t v8 = OUTLINED_FUNCTION_15_23();
          break;
        case 5:
          unint64_t v7 = 0xE800000000000000;
          unint64_t v8 = OUTLINED_FUNCTION_37_12();
          break;
        case 6:
          unint64_t v7 = 0xE400000000000000;
          unint64_t v8 = OUTLINED_FUNCTION_58_8();
          break;
        case 7:
          unint64_t v7 = 0xE800000000000000;
          unint64_t v8 = OUTLINED_FUNCTION_13_23();
          break;
        case 8:
          unint64_t v7 = 0xE700000000000000;
          unint64_t v8 = OUTLINED_FUNCTION_18_21();
          break;
        case 9:
          unint64_t v7 = 0xE700000000000000;
          unint64_t v8 = OUTLINED_FUNCTION_11_3();
          break;
        case 0xA:
          unint64_t v8 = OUTLINED_FUNCTION_22_20();
          break;
        case 0xB:
          unint64_t v8 = OUTLINED_FUNCTION_138_0();
          break;
        case 0xC:
          unint64_t v8 = OUTLINED_FUNCTION_115_0();
          break;
        case 0xD:
          unint64_t v7 = 0x800000000048D980;
          unint64_t v8 = OUTLINED_FUNCTION_51_7();
          break;
        default:
          break;
      }
      unint64_t v9 = 0xE600000000000000;
      unint64_t v10 = 0x64657373696DLL;
      switch(v4)
      {
        case 1:
          unint64_t v9 = 0xE300000000000000;
          unint64_t v10 = 7824750;
          break;
        case 2:
          unint64_t v10 = 0x746E65636572;
          break;
        case 3:
          unint64_t v9 = 0xE700000000000000;
          unint64_t v10 = 0x64657661736E75;
          break;
        case 4:
          unint64_t v9 = 0xE800000000000000;
          OUTLINED_FUNCTION_231();
          break;
        case 5:
          unint64_t v9 = 0xE800000000000000;
          unint64_t v10 = 0x676E696F6774756FLL;
          break;
        case 6:
          unint64_t v9 = 0xE400000000000000;
          unint64_t v10 = 1953718636;
          break;
        case 7:
          unint64_t v9 = 0xE800000000000000;
          OUTLINED_FUNCTION_109_0();
          break;
        case 8:
          unint64_t v9 = 0xE700000000000000;
          unint64_t v10 = 0x746E6572727563;
          break;
        case 9:
          unint64_t v9 = 0xE700000000000000;
          unint64_t v10 = 0x676E69676E6972;
          break;
        case 10:
          unint64_t v10 = 0x646C6F486E6FLL;
          break;
        case 11:
          OUTLINED_FUNCTION_213();
          unint64_t v9 = 0xE900000000000065;
          break;
        case 12:
          unint64_t v10 = 0x6563696F5677656ELL;
          unint64_t v9 = 0xEC0000006C69616DLL;
          break;
        case 13:
          unint64_t v9 = 0x800000000048D980;
          unint64_t v10 = 0xD000000000000014;
          break;
        default:
          break;
      }
      if (v8 == v10 && v7 == v9)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        goto LABEL_41;
      }
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v12) {
        break;
      }
      if (v2 == v5)
      {
        swift_bridgeObjectRelease();
        goto LABEL_41;
      }
    }
    swift_bridgeObjectRelease();
  }
LABEL_41:
  OUTLINED_FUNCTION_24();
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  if (*(void *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 5; ; ++i)
  {
    uint64_t v5 = i - 3;
    if (__OFADD__(i - 4, 1)) {
      break;
    }
    BOOL v6 = *(void *)(a2 + 8 * i) == result;
    BOOL v3 = v6;
    BOOL v6 = v6 || v5 == v2;
    if (v6) {
      return v3;
    }
  }
  __break(1u);
  return result;
}

BOOL specialized Sequence<>.contains(_:)(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

Swift::Bool __swiftcall PhoneCallNLIntent.hasAnyConfirmation()()
{
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_14_11();
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_12_0();
  BOOL v3 = *(void (**)(void))(v2 + 64);
  v3();
  OUTLINED_FUNCTION_91_5();
  if (v11)
  {
    uint64_t v5 = OUTLINED_FUNCTION_68_1();
    v6(v5);
  }
  else
  {
    uint64_t v9 = PhoneCallConfirmation.rawValue.getter(v4);
    BOOL v11 = v9 == 28526 && v10 == 0xE200000000000000;
    if (v11)
    {
      swift_bridgeObjectRelease();
      uint64_t v17 = OUTLINED_FUNCTION_4_49();
      v18(v17);
      goto LABEL_21;
    }
    _stringCompareWithSmolCheck(_:_:expecting:)();
    OUTLINED_FUNCTION_211_0();
    uint64_t v12 = OUTLINED_FUNCTION_4_49();
    v13(v12);
    if (v0) {
      goto LABEL_21;
    }
  }
  uint64_t v7 = OUTLINED_FUNCTION_36_0();
  ((void (*)(uint64_t))v3)(v7);
  OUTLINED_FUNCTION_91_5();
  if (!v11)
  {
    uint64_t v14 = PhoneCallConfirmation.rawValue.getter(v8);
    if (v14 != 7562617 || v15 != 0xE300000000000000) {
      _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
  }
LABEL_21:
  OUTLINED_FUNCTION_14_23();
  v19();
  OUTLINED_FUNCTION_40_11();
  OUTLINED_FUNCTION_26_1();
  return result;
}

void *PhoneCallNLIntent.getPersons()()
{
  OUTLINED_FUNCTION_21_22();
  uint64_t v1 = v0();
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v7 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v3 = v1 + 32;
    do
    {
      outlined init with copy of SiriPhoneContact();
      OUTLINED_FUNCTION_114(v6);
      SiriPhoneContact.toINPerson()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v3 += 40;
      --v2;
    }
    while (v2);
    char v4 = v7;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

Swift::Bool __swiftcall PhoneCallNLIntent.isNextAfterPlayingVoiceMail()()
{
  OUTLINED_FUNCTION_41_9();
  v0();
  OUTLINED_FUNCTION_148_0();
  if (v5) {
    return 0;
  }
  uint64_t v3 = VoiceMail.VoiceMailVerb.rawValue.getter(v1);
  BOOL v5 = v3 == 1885956979 && v4 == 0xE400000000000000;
  if (v5)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_35_16();
    OUTLINED_FUNCTION_15_0();
  }
  return 1;
}

Swift::Bool __swiftcall PhoneCallNLIntent.hasWantedToRepeat()()
{
  OUTLINED_FUNCTION_16_30();
  v0();
  OUTLINED_FUNCTION_24_23();
  if (v5) {
    return 0;
  }
  uint64_t v3 = PhoneCallVerb.rawValue.getter(v1);
  BOOL v5 = v3 == 0x65526F54746E6177 && v4 == 0xEC00000074616570;
  if (v5)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    _stringCompareWithSmolCheck(_:_:expecting:)();
    OUTLINED_FUNCTION_15_0();
    return 0;
  }
}

Swift::Bool __swiftcall PhoneCallNLIntent.isRepeatAfterPlayingVoiceMail()()
{
  OUTLINED_FUNCTION_41_9();
  v0();
  OUTLINED_FUNCTION_148_0();
  if (v5) {
    return 0;
  }
  uint64_t v3 = VoiceMail.VoiceMailVerb.rawValue.getter(v1);
  BOOL v5 = v3 == 0x746165706572 && v4 == 0xE600000000000000;
  if (v5)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    OUTLINED_FUNCTION_188();
    OUTLINED_FUNCTION_84_4();
    OUTLINED_FUNCTION_15_0();
    return 0;
  }
}

Swift::Bool __swiftcall PhoneCallNLIntent.isVoiceMailCallOrCallBack()()
{
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_14_11();
  uint64_t v1 = v0;
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_12_24();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_31_12();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_49_11();
  Swift::Bool v5 = PhoneCallNLIntent.hasCallVerb()();
  BOOL v6 = *(void (**)(void))(v1 + 16);
  OUTLINED_FUNCTION_8_48();
  v6();
  BOOL v7 = v5 && PhoneCallNLIntent.hasNoContactOrReference()();
  char v8 = *(void (**)(void))(v1 + 8);
  OUTLINED_FUNCTION_0_35();
  v8();
  OUTLINED_FUNCTION_8_48();
  v6();
  if (v7)
  {
    OUTLINED_FUNCTION_0_35();
    v8();
    OUTLINED_FUNCTION_8_48();
    v6();
  }
  else
  {
    OUTLINED_FUNCTION_227();
    Swift::Bool v9 = PhoneCallNLIntent.isCallBack()();
    OUTLINED_FUNCTION_0_35();
    v8();
    OUTLINED_FUNCTION_8_48();
    v6();
    if (!v9)
    {
      OUTLINED_FUNCTION_228();
      PhoneCallNLIntent.isCallWithReference()();
    }
  }
  OUTLINED_FUNCTION_0_35();
  v8();
  OUTLINED_FUNCTION_40_11();
  OUTLINED_FUNCTION_26_1();
  return result;
}

uint64_t PhoneCallNLIntent.getCallRecordType()(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_29_16();
  uint64_t result = v5();
  if (result)
  {
    uint64_t v7 = result;
    __chkstk_darwin(result);
    long long v11[2] = a1;
    v11[3] = a2;
    void v11[4] = v2;
    unint64_t v8 = specialized Collection.firstIndex(where:)((uint64_t (*)(char *))partial apply for closure #1 in PhoneCallNLIntent.getCallRecordType(), (uint64_t)v11, v7);
    if ((v9 & 1) == 0)
    {
      if ((v8 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v8 < *(void *)(v7 + 16))
      {
        unsigned __int8 v10 = *(unsigned char *)(v7 + v8 + 32);
        swift_bridgeObjectRelease();
        return PhoneCallNLIntent.getCallRecordType(attr:)(v10);
      }
      __break(1u);
      JUMPOUT(0x18C31CLL);
    }
    swift_bridgeObjectRelease();
    return 0;
  }
  return result;
}

PhoneCallFlowDelegatePlugin::PhoneCallAttribute_optional __swiftcall PhoneCallAttribute.init(rawValue:)(Swift::String rawValue)
{
  OUTLINED_FUNCTION_4_5();
  v3._object = v1;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PhoneCallAttribute.init(rawValue:), v3);
  OUTLINED_FUNCTION_15_0();
  if (v2 >= 0xE) {
    return (PhoneCallFlowDelegatePlugin::PhoneCallAttribute_optional)14;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::PhoneCallAttribute_optional)v2;
  }
}

_UNKNOWN **static PhoneCallAttribute.allCases.getter()
{
  return &outlined read-only object #0 of static PhoneCallAttribute.allCases.getter;
}

unint64_t PhoneCallAttribute.rawValue.getter(char a1)
{
  unint64_t result = 0x64657373696DLL;
  switch(a1)
  {
    case 1:
      unint64_t result = OUTLINED_FUNCTION_52_9();
      break;
    case 2:
      unint64_t result = OUTLINED_FUNCTION_25_18();
      break;
    case 3:
      unint64_t result = OUTLINED_FUNCTION_10_30();
      break;
    case 4:
      unint64_t result = OUTLINED_FUNCTION_15_23();
      break;
    case 5:
      uint64_t v3 = OUTLINED_FUNCTION_47_10();
      goto LABEL_13;
    case 6:
      unint64_t result = OUTLINED_FUNCTION_79_3();
      break;
    case 7:
      unint64_t result = OUTLINED_FUNCTION_13_23();
      break;
    case 8:
      unint64_t result = OUTLINED_FUNCTION_18_21();
      break;
    case 9:
      unint64_t result = OUTLINED_FUNCTION_11_3();
      break;
    case 10:
      unint64_t result = OUTLINED_FUNCTION_22_20();
      break;
    case 11:
      uint64_t v3 = OUTLINED_FUNCTION_46_8();
LABEL_13:
      unint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x676E000000000000;
      break;
    case 12:
      unint64_t result = OUTLINED_FUNCTION_17_19();
      break;
    case 13:
      unint64_t result = OUTLINED_FUNCTION_51_7();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallAttribute(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2, (uint64_t (*)(void))PhoneCallAttribute.rawValue.getter) & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PhoneCallAttribute()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneCallAttribute(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallAttribute(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::PhoneCallAttribute_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallAttribute@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallAttribute_optional *a2@<X8>)
{
  result.value = PhoneCallAttribute.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallAttribute()
{
  char v1 = OUTLINED_FUNCTION_32();
  unint64_t result = PhoneCallAttribute.rawValue.getter(v1);
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance PhoneCallAttribute(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static PhoneCallAttribute.allCases.getter;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance PhoneCallAttribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance PhoneCallAttribute(a1, a2, a3, (uint64_t)lazy protocol witness table accessor for type PhoneCallAttribute and conformance PhoneCallAttribute, (uint64_t)lazy protocol witness table accessor for type PhoneCallAttribute and conformance PhoneCallAttribute, (uint64_t)lazy protocol witness table accessor for type PhoneCallAttribute and conformance PhoneCallAttribute, a7, a8, a9, a10);
}

{
  void (*v10)(void);
  void (*v11)(void);
  void (*v12)(void);
  void (*v13)(void);
  void (*v14)(void);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  OUTLINED_FUNCTION_28();
  BOOL v11 = v10;
  uint64_t v13 = v12;
  v14();
  v13();
  v11();
  OUTLINED_FUNCTION_24();
  return static TerminalNodeBoundedSemanticValue<>.fromIntentNodeValue(_:)(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10);
}

PhoneCallFlowDelegatePlugin::PhoneCallAudioRoute_optional __swiftcall PhoneCallAudioRoute.init(rawValue:)(Swift::String rawValue)
{
  OUTLINED_FUNCTION_4_5();
  v3._object = v1;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PhoneCallAudioRoute.init(rawValue:), v3);
  OUTLINED_FUNCTION_15_0();
  if (v2 >= 4) {
    return (PhoneCallFlowDelegatePlugin::PhoneCallAudioRoute_optional)4;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::PhoneCallAudioRoute_optional)v2;
  }
}

_UNKNOWN **static PhoneCallAudioRoute.allCases.getter()
{
  return &outlined read-only object #0 of static PhoneCallAudioRoute.allCases.getter;
}

uint64_t PhoneCallAudioRoute.rawValue.getter(char a1)
{
  uint64_t result = 0x7072656B61657073;
  switch(a1)
  {
    case 1:
      uint64_t result = OUTLINED_FUNCTION_7_1();
      break;
    case 2:
      uint64_t result = OUTLINED_FUNCTION_139_0();
      break;
    case 3:
      uint64_t result = 0x65756C625F746F6ELL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallAudioRoute(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PhoneCallAudioRoute()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneCallAudioRoute()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallAudioRoute(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::PhoneCallAudioRoute_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallAudioRoute@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallAudioRoute_optional *a2@<X8>)
{
  result.value = PhoneCallAudioRoute.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallAudioRoute()
{
  char v1 = OUTLINED_FUNCTION_32();
  uint64_t result = PhoneCallAudioRoute.rawValue.getter(v1);
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance PhoneCallAudioRoute(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static PhoneCallAudioRoute.allCases.getter;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance PhoneCallAudioRoute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance PhoneCallAttribute(a1, a2, a3, (uint64_t)lazy protocol witness table accessor for type PhoneCallAudioRoute and conformance PhoneCallAudioRoute, (uint64_t)lazy protocol witness table accessor for type PhoneCallAudioRoute and conformance PhoneCallAudioRoute, (uint64_t)lazy protocol witness table accessor for type PhoneCallAudioRoute and conformance PhoneCallAudioRoute, a7, a8, a9, a10);
}

PhoneCallFlowDelegatePlugin::PhoneCallCapability_optional __swiftcall PhoneCallCapability.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of PhoneCallCapability.init(rawValue:);
  return (PhoneCallFlowDelegatePlugin::PhoneCallCapability_optional)PhoneCallCapability.init(rawValue:)(rawValue, v1);
}

_UNKNOWN **static PhoneCallCapability.allCases.getter()
{
  return &outlined read-only object #0 of static PhoneCallCapability.allCases.getter;
}

uint64_t PhoneCallCapability.rawValue.getter(char a1)
{
  if (a1) {
    return 0x6F65646976;
  }
  else {
    return 0x6F69647561;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallCapability(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PhoneCallCapability()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneCallCapability()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallCapability()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

PhoneCallFlowDelegatePlugin::PhoneCallCapability_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallCapability@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallCapability_optional *a2@<X8>)
{
  result.value = PhoneCallCapability.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallCapability()
{
  char v1 = OUTLINED_FUNCTION_32();
  uint64_t result = PhoneCallCapability.rawValue.getter(v1);
  *uint64_t v0 = result;
  v0[1] = 0xE500000000000000;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance PhoneCallCapability(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static PhoneCallCapability.allCases.getter;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance PhoneCallCapability(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance PhoneCallAttribute(a1, a2, a3, (uint64_t)lazy protocol witness table accessor for type PhoneCallCapability and conformance PhoneCallCapability, (uint64_t)lazy protocol witness table accessor for type PhoneCallCapability and conformance PhoneCallCapability, (uint64_t)lazy protocol witness table accessor for type PhoneCallCapability and conformance PhoneCallCapability, a7, a8, a9, a10);
}

uint64_t PhoneCallPreferredProvider.asINPreferredCallProvider.getter(unsigned __int8 a1)
{
  return a1 + 1;
}

PhoneCallFlowDelegatePlugin::PhoneCallPreferredProvider_optional __swiftcall PhoneCallPreferredProvider.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of PhoneCallPreferredProvider.init(rawValue:);
  return (PhoneCallFlowDelegatePlugin::PhoneCallPreferredProvider_optional)PhoneCallControlCATsSimple.UnsupportedHoldActionDialogIds.init(rawValue:)(rawValue, v1);
}

_UNKNOWN **static PhoneCallPreferredProvider.allCases.getter()
{
  return &outlined read-only object #0 of static PhoneCallPreferredProvider.allCases.getter;
}

uint64_t PhoneCallPreferredProvider.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x6E6F6870656C6574;
  }
  if (a1 == 1) {
    return 0x656D697465636166;
  }
  return 0x7261506472696874;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallPreferredProvider(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2) & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance PhoneCallPreferredProvider()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneCallPreferredProvider(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallPreferredProvider(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::PhoneCallPreferredProvider_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallPreferredProvider@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallPreferredProvider_optional *a2@<X8>)
{
  result.value = PhoneCallPreferredProvider.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallPreferredProvider()
{
  char v1 = OUTLINED_FUNCTION_32();
  uint64_t result = PhoneCallPreferredProvider.rawValue.getter(v1);
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance PhoneCallPreferredProvider(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static PhoneCallPreferredProvider.allCases.getter;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance PhoneCallPreferredProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance PhoneCallAttribute(a1, a2, a3, (uint64_t)lazy protocol witness table accessor for type PhoneCallPreferredProvider and conformance PhoneCallPreferredProvider, (uint64_t)lazy protocol witness table accessor for type PhoneCallPreferredProvider and conformance PhoneCallPreferredProvider, (uint64_t)lazy protocol witness table accessor for type PhoneCallPreferredProvider and conformance PhoneCallPreferredProvider, a7, a8, a9, a10);
}

uint64_t PhoneCallConfirmation.description.getter(char a1)
{
  uint64_t result = 7562617;
  switch(a1)
  {
    case 1:
      uint64_t result = OUTLINED_FUNCTION_208_0();
      break;
    case 2:
      uint64_t result = OUTLINED_FUNCTION_130_0();
      break;
    case 3:
      uint64_t result = OUTLINED_FUNCTION_59_5();
      break;
    case 4:
      uint64_t result = OUTLINED_FUNCTION_207();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t PhoneCallConfirmation.rawValue.getter(char a1)
{
  uint64_t result = 7562617;
  switch(a1)
  {
    case 1:
      uint64_t result = OUTLINED_FUNCTION_208_0();
      break;
    case 2:
      uint64_t result = OUTLINED_FUNCTION_130_0();
      break;
    case 3:
      uint64_t result = OUTLINED_FUNCTION_59_5();
      break;
    case 4:
      uint64_t result = OUTLINED_FUNCTION_207();
      break;
    default:
      return result;
  }
  return result;
}

PhoneCallFlowDelegatePlugin::PhoneCallConfirmation_optional __swiftcall PhoneCallConfirmation.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of PhoneCallConfirmation.init(rawValue:);
  return (PhoneCallFlowDelegatePlugin::PhoneCallConfirmation_optional)PhoneCallConfirmation.init(rawValue:)(rawValue, v1);
}

_UNKNOWN **static PhoneCallConfirmation.allCases.getter()
{
  return &outlined read-only object #0 of static PhoneCallConfirmation.allCases.getter;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallConfirmation()
{
  return specialized == infix<A>(_:_:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PhoneCallConfirmation()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneCallConfirmation()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallConfirmation(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::PhoneCallConfirmation_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallConfirmation@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallConfirmation_optional *a2@<X8>)
{
  result.value = PhoneCallConfirmation.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallConfirmation()
{
  char v1 = OUTLINED_FUNCTION_32();
  uint64_t result = PhoneCallConfirmation.rawValue.getter(v1);
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance PhoneCallConfirmation(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static PhoneCallConfirmation.allCases.getter;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PhoneCallConfirmation()
{
  return PhoneCallConfirmation.description.getter(*v0);
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance PhoneCallConfirmation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance PhoneCallAttribute(a1, a2, a3, (uint64_t)lazy protocol witness table accessor for type PhoneCallConfirmation and conformance PhoneCallConfirmation, (uint64_t)lazy protocol witness table accessor for type PhoneCallConfirmation and conformance PhoneCallConfirmation, (uint64_t)lazy protocol witness table accessor for type PhoneCallConfirmation and conformance PhoneCallConfirmation, a7, a8, a9, a10);
}

_UNKNOWN **static PhoneCallNoun.allCases.getter()
{
  return &outlined read-only object #0 of static PhoneCallNoun.allCases.getter;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallNoun()
{
  return specialized == infix<A>(_:_:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PhoneCallNoun()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneCallNoun()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallNoun(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallNoun()
{
  char v1 = OUTLINED_FUNCTION_32();
  uint64_t result = PhoneCallNoun.rawValue.getter(v1);
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance PhoneCallNoun(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static PhoneCallNoun.allCases.getter;
}

uint64_t PhoneCallReference.ordinalIndex.getter(char a1)
{
  PhoneCallReference.rawValue.getter(a1);
  BOOL v3 = v1 == 0x7473726966 && v2 == 0xE500000000000000;
  if (v3 || (uint64_t v4 = v1, v5 = v2, (OUTLINED_FUNCTION_5_40() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  BOOL v7 = v4 == 0x646E6F636573 && v5 == 0xE600000000000000;
  if (v7 || (OUTLINED_FUNCTION_5_40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  BOOL v8 = v4 == 0x6472696874 && v5 == 0xE500000000000000;
  if (v8 || (OUTLINED_FUNCTION_5_40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  BOOL v9 = v4 == 0x687472756F66 && v5 == 0xE600000000000000;
  if (v9 || (OUTLINED_FUNCTION_5_40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  BOOL v10 = v4 == 0x6874666966 && v5 == 0xE500000000000000;
  if (v10 || (OUTLINED_FUNCTION_5_40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  BOOL v11 = v4 == 0x6874786973 && v5 == 0xE500000000000000;
  if (v11 || (OUTLINED_FUNCTION_5_40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  BOOL v12 = v4 == 0x68746E65766573 && v5 == 0xE700000000000000;
  if (v12 || (OUTLINED_FUNCTION_5_40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  BOOL v13 = v4 == 0x687468676965 && v5 == 0xE600000000000000;
  if (v13 || (OUTLINED_FUNCTION_5_40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  BOOL v14 = v4 == 0x68746E696ELL && v5 == 0xE500000000000000;
  if (v14 || (OUTLINED_FUNCTION_5_40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  BOOL v15 = v4 == 0x68746E6574 && v5 == 0xE500000000000000;
  if (v15 || (OUTLINED_FUNCTION_5_40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  BOOL v16 = v4 == 0x68746E6576656C65 && v5 == 0xE800000000000000;
  if (v16 || (OUTLINED_FUNCTION_5_40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  BOOL v17 = v4 == 0x6874666C657774 && v5 == 0xE700000000000000;
  if (v17 || (OUTLINED_FUNCTION_5_40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  OUTLINED_FUNCTION_101_1();
  if (v3 && v5 == 0xEA00000000006874)
  {
    OUTLINED_FUNCTION_206();
LABEL_80:
    swift_bridgeObjectRelease();
    return 12;
  }
  if (OUTLINED_FUNCTION_5_40()) {
    goto LABEL_80;
  }
  OUTLINED_FUNCTION_101_1();
  if (v3 && v5 == 0xEA00000000006874)
  {
    OUTLINED_FUNCTION_206();
LABEL_88:
    swift_bridgeObjectRelease();
    return 13;
  }
  if (OUTLINED_FUNCTION_5_40()) {
    goto LABEL_88;
  }
  BOOL v20 = v4 == 0x746E656574666966 && v5 == 0xE900000000000068;
  if (v20 || (OUTLINED_FUNCTION_5_40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  BOOL v21 = v4 == 0x746E656574786973 && v5 == 0xE900000000000068;
  if (v21 || (OUTLINED_FUNCTION_5_40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  BOOL v22 = v4 == 0x6565746E65766573 && v5 == 0xEB0000000068746ELL;
  if (v22 || (OUTLINED_FUNCTION_5_40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  OUTLINED_FUNCTION_101_1();
  if (v3 && v5 == 0xEA00000000006874)
  {
    OUTLINED_FUNCTION_206();
LABEL_114:
    swift_bridgeObjectRelease();
    return 17;
  }
  if (OUTLINED_FUNCTION_5_40()) {
    goto LABEL_114;
  }
  OUTLINED_FUNCTION_101_1();
  if (v3 && v5 == 0xEA00000000006874)
  {
    OUTLINED_FUNCTION_206();
LABEL_122:
    swift_bridgeObjectRelease();
    return 18;
  }
  if (OUTLINED_FUNCTION_5_40()) {
    goto LABEL_122;
  }
  BOOL v25 = v4 == 0x746569746E657774 && v5 == 0xE900000000000068;
  if (v25 || (OUTLINED_FUNCTION_5_40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else
  {
    BOOL v26 = v4 == 0x662079746E657774 && v5 == 0xEC00000074737269;
    if (v26 || (OUTLINED_FUNCTION_103_1(), (OUTLINED_FUNCTION_5_40() & 1) != 0))
    {
      swift_bridgeObjectRelease();
      return 20;
    }
    else
    {
      BOOL v27 = v4 == 0x732079746E657774 && v5 == 0xED0000646E6F6365;
      if (v27 || (OUTLINED_FUNCTION_5_40() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 21;
      }
      else
      {
        BOOL v28 = v4 == 0x742079746E657774 && v5 == 0xEC00000064726968;
        if (v28 || (OUTLINED_FUNCTION_5_40() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 22;
        }
        else
        {
          BOOL v29 = v4 == 0x662079746E657774 && v5 == 0xED0000687472756FLL;
          if (v29 || (OUTLINED_FUNCTION_103_1(), (OUTLINED_FUNCTION_5_40() & 1) != 0))
          {
            swift_bridgeObjectRelease();
            return 23;
          }
          else if (v4 == 0x662079746E657774 && v5 == 0xEC00000068746669)
          {
            swift_bridgeObjectRelease();
            return 24;
          }
          else
          {
            OUTLINED_FUNCTION_103_1();
            OUTLINED_FUNCTION_5_40();
            OUTLINED_FUNCTION_15_0();
            if (v4) {
              return 24;
            }
            else {
              return 0;
            }
          }
        }
      }
    }
  }
}

void PhoneCallReference.rawValue.getter(char a1)
{
  switch(a1)
  {
    case 1:
      OUTLINED_FUNCTION_132_0();
      break;
    case 2:
      OUTLINED_FUNCTION_159();
      break;
    case 8:
      OUTLINED_FUNCTION_147_1();
      break;
    case 10:
      OUTLINED_FUNCTION_94_3();
      break;
    case 12:
      OUTLINED_FUNCTION_145_0(0x72696874u);
      break;
    case 13:
      OUTLINED_FUNCTION_145_0(0x72756F66u);
      break;
    case 14:
    case 15:
    case 19:
      OUTLINED_FUNCTION_199();
      break;
    case 16:
      OUTLINED_FUNCTION_70_3();
      break;
    case 17:
      OUTLINED_FUNCTION_145_0(0x68676965u);
      break;
    case 18:
      OUTLINED_FUNCTION_145_0(0x656E696Eu);
      break;
    case 20:
    case 23:
    case 24:
      OUTLINED_FUNCTION_103_1();
      break;
    case 21:
      OUTLINED_FUNCTION_55_8();
      break;
    case 22:
      OUTLINED_FUNCTION_67_5();
      break;
    case 25:
      OUTLINED_FUNCTION_79_3();
      break;
    case 26:
      OUTLINED_FUNCTION_131_0();
      break;
    case 27:
      OUTLINED_FUNCTION_151_0();
      break;
    case 28:
      OUTLINED_FUNCTION_95_3();
      break;
    case 29:
      OUTLINED_FUNCTION_65_4();
      break;
    case 30:
      OUTLINED_FUNCTION_64_2();
      break;
    case 32:
      OUTLINED_FUNCTION_150_0();
      break;
    default:
      return;
  }
}

PhoneCallFlowDelegatePlugin::PhoneCallReference_optional __swiftcall PhoneCallReference.init(rawValue:)(Swift::String rawValue)
{
  OUTLINED_FUNCTION_4_5();
  _findStringSwitchCaseWithCache(cases:string:cache:)();
  OUTLINED_FUNCTION_15_0();
  if (v1 >= 0x23) {
    return (PhoneCallFlowDelegatePlugin::PhoneCallReference_optional)35;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::PhoneCallReference_optional)v1;
  }
}

_UNKNOWN **static PhoneCallReference.allCases.getter()
{
  return &outlined read-only object #0 of static PhoneCallReference.allCases.getter;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallReference(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2, (uint64_t (*)(void))PhoneCallReference.rawValue.getter) & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PhoneCallReference()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneCallReference(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallReference(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::PhoneCallReference_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallReference@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallReference_optional *a2@<X8>)
{
  result.value = PhoneCallReference.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallReference()
{
  char v1 = OUTLINED_FUNCTION_32();
  PhoneCallReference.rawValue.getter(v1);
  *uint64_t v0 = v2;
  v0[1] = v3;
}

void protocol witness for static CaseIterable.allCases.getter in conformance PhoneCallReference(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static PhoneCallReference.allCases.getter;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance PhoneCallReference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance PhoneCallAttribute(a1, a2, a3, (uint64_t)lazy protocol witness table accessor for type PhoneCallReference and conformance PhoneCallReference, (uint64_t)lazy protocol witness table accessor for type PhoneCallReference and conformance PhoneCallReference, (uint64_t)lazy protocol witness table accessor for type PhoneCallReference and conformance PhoneCallReference, a7, a8, a9, a10);
}

PhoneCallFlowDelegatePlugin::PhoneCallContactReference_optional __swiftcall PhoneCallContactReference.init(rawValue:)(Swift::String rawValue)
{
  OUTLINED_FUNCTION_4_5();
  _findStringSwitchCaseWithCache(cases:string:cache:)();
  OUTLINED_FUNCTION_15_0();
  if (v1 >= 0x26) {
    return (PhoneCallFlowDelegatePlugin::PhoneCallContactReference_optional)38;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::PhoneCallContactReference_optional)v1;
  }
}

_UNKNOWN **static PhoneCallContactReference.allCases.getter()
{
  return &outlined read-only object #0 of static PhoneCallContactReference.allCases.getter;
}

void PhoneCallContactReference.rawValue.getter(char a1)
{
  switch(a1)
  {
    case 1:
      OUTLINED_FUNCTION_132_0();
      break;
    case 2:
      OUTLINED_FUNCTION_159();
      break;
    case 8:
      OUTLINED_FUNCTION_147_1();
      break;
    case 10:
      OUTLINED_FUNCTION_94_3();
      break;
    case 12:
      OUTLINED_FUNCTION_145_0(0x72696874u);
      break;
    case 13:
      OUTLINED_FUNCTION_145_0(0x72756F66u);
      break;
    case 14:
    case 15:
    case 19:
      OUTLINED_FUNCTION_199();
      break;
    case 16:
      OUTLINED_FUNCTION_70_3();
      break;
    case 17:
      OUTLINED_FUNCTION_145_0(0x68676965u);
      break;
    case 18:
      OUTLINED_FUNCTION_145_0(0x656E696Eu);
      break;
    case 20:
    case 23:
    case 24:
      OUTLINED_FUNCTION_103_1();
      break;
    case 21:
      OUTLINED_FUNCTION_55_8();
      break;
    case 22:
      OUTLINED_FUNCTION_67_5();
      break;
    case 25:
      OUTLINED_FUNCTION_79_3();
      break;
    case 26:
      OUTLINED_FUNCTION_131_0();
      break;
    case 27:
      OUTLINED_FUNCTION_151_0();
      break;
    case 28:
      OUTLINED_FUNCTION_95_3();
      break;
    case 29:
      OUTLINED_FUNCTION_65_4();
      break;
    case 30:
      OUTLINED_FUNCTION_64_2();
      break;
    case 32:
      OUTLINED_FUNCTION_150_0();
      break;
    default:
      return;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallContactReference(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2, (uint64_t (*)(void))PhoneCallContactReference.rawValue.getter) & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PhoneCallContactReference()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneCallContactReference(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallContactReference(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::PhoneCallContactReference_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallContactReference@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallContactReference_optional *a2@<X8>)
{
  result.value = PhoneCallContactReference.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallContactReference()
{
  char v1 = OUTLINED_FUNCTION_32();
  PhoneCallContactReference.rawValue.getter(v1);
  *uint64_t v0 = v2;
  v0[1] = v3;
}

void protocol witness for static CaseIterable.allCases.getter in conformance PhoneCallContactReference(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static PhoneCallContactReference.allCases.getter;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance PhoneCallContactReference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance PhoneCallAttribute(a1, a2, a3, (uint64_t)lazy protocol witness table accessor for type PhoneCallContactReference and conformance PhoneCallContactReference, (uint64_t)lazy protocol witness table accessor for type PhoneCallContactReference and conformance PhoneCallContactReference, (uint64_t)lazy protocol witness table accessor for type PhoneCallContactReference and conformance PhoneCallContactReference, a7, a8, a9, a10);
}

Swift::Bool __swiftcall PhoneCallVerb.isCallOrFaceTime()()
{
  uint64_t v1 = PhoneCallVerb.rawValue.getter(v0);
  if (v1 == 1819042147 && v2 == 0xE400000000000000) {
    goto LABEL_16;
  }
  uint64_t v4 = v1;
  uint64_t v5 = v2;
  char v6 = OUTLINED_FUNCTION_30_15();
  swift_bridgeObjectRelease();
  if (v6) {
    return 1;
  }
  if (v4 == 0x656D697465636166 && v5 == 0xE800000000000000)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    return 1;
  }
  char v8 = OUTLINED_FUNCTION_26_18();
  swift_bridgeObjectRelease();
  if ((v8 & 1) == 0)
  {
    if (v4 != 0x656D697465636166 || v5 != 0xEE006F6964756120)
    {
      OUTLINED_FUNCTION_23_18();
      OUTLINED_FUNCTION_15_0();
      return v4 & 1;
    }
    goto LABEL_16;
  }
  return 1;
}

_UNKNOWN **static PhoneCallVerb.allCases.getter()
{
  return &outlined read-only object #0 of static PhoneCallVerb.allCases.getter;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallVerb(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2, (uint64_t (*)(void))PhoneCallVerb.rawValue.getter) & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PhoneCallVerb()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneCallVerb(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallVerb(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallVerb()
{
  char v1 = OUTLINED_FUNCTION_32();
  uint64_t result = PhoneCallVerb.rawValue.getter(v1);
  *char v0 = result;
  v0[1] = v3;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance PhoneCallVerb(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static PhoneCallVerb.allCases.getter;
}

uint64_t one-time initialization function for voiceMailNoun(uint64_t a1)
{
  return OUTLINED_FUNCTION_143_0(a1, &demangling cache variable for type metadata for TerminalOntologyNode<VoiceMail.VoiceMailNoun>, 0x6E756F4E6CLL, &static VoiceMail.voiceMailNoun);
}

uint64_t *VoiceMail.voiceMailNoun.unsafeMutableAddressor()
{
  if (one-time initialization token for voiceMailNoun != -1) {
    swift_once();
  }
  return &static VoiceMail.voiceMailNoun;
}

uint64_t static VoiceMail.voiceMailNoun.getter()
{
  return static VoiceMail.voiceMailNoun.getter(&one-time initialization token for voiceMailNoun);
}

uint64_t one-time initialization function for voiceMailVerb(uint64_t a1)
{
  return OUTLINED_FUNCTION_143_0(a1, &demangling cache variable for type metadata for TerminalOntologyNode<VoiceMail.VoiceMailVerb>, 0x627265566CLL, &static VoiceMail.voiceMailVerb);
}

uint64_t one-time initialization function for voiceMailNoun(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  swift_allocObject();
  uint64_t result = TerminalOntologyNode.init(name:multicardinal:)();
  *a4 = result;
  return result;
}

uint64_t *VoiceMail.voiceMailVerb.unsafeMutableAddressor()
{
  if (one-time initialization token for voiceMailVerb != -1) {
    swift_once();
  }
  return &static VoiceMail.voiceMailVerb;
}

uint64_t static VoiceMail.voiceMailVerb.getter()
{
  return static VoiceMail.voiceMailNoun.getter(&one-time initialization token for voiceMailVerb);
}

uint64_t static VoiceMail.voiceMailNoun.getter(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }

  return swift_retain();
}

PhoneCallFlowDelegatePlugin::VoiceMail::VoiceMailNoun_optional __swiftcall VoiceMail.VoiceMailNoun.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of VoiceMail.VoiceMailNoun.init(rawValue:);
  return (PhoneCallFlowDelegatePlugin::VoiceMail::VoiceMailNoun_optional)PhoneCallCapability.init(rawValue:)(rawValue, v1);
}

uint64_t PhoneCallCapability.init(rawValue:)(Swift::String a1, Swift::OpaquePointer a2)
{
  OUTLINED_FUNCTION_35_6(a1, a2);
  OUTLINED_FUNCTION_15_0();
  if (v2 == 1) {
    unsigned int v3 = 1;
  }
  else {
    unsigned int v3 = 2;
  }
  if (v2) {
    return v3;
  }
  else {
    return 0;
  }
}

_UNKNOWN **static VoiceMail.VoiceMailNoun.allCases.getter()
{
  return &outlined read-only object #0 of static VoiceMail.VoiceMailNoun.allCases.getter;
}

uint64_t VoiceMail.VoiceMailNoun.rawValue.getter(char a1)
{
  if (a1) {
    return 0x6563696F76;
  }
  else {
    return 0x69616D6563696F76;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance VoiceMail.VoiceMailNoun(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance VoiceMail.VoiceMailNoun()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance VoiceMail.VoiceMailNoun()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance VoiceMail.VoiceMailNoun()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

PhoneCallFlowDelegatePlugin::VoiceMail::VoiceMailNoun_optional protocol witness for RawRepresentable.init(rawValue:) in conformance VoiceMail.VoiceMailNoun@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::VoiceMail::VoiceMailNoun_optional *a2@<X8>)
{
  result.value = VoiceMail.VoiceMailNoun.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance VoiceMail.VoiceMailNoun()
{
  char v1 = OUTLINED_FUNCTION_32();
  uint64_t result = VoiceMail.VoiceMailNoun.rawValue.getter(v1);
  *char v0 = result;
  v0[1] = v3;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance VoiceMail.VoiceMailNoun(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static VoiceMail.VoiceMailNoun.allCases.getter;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance VoiceMail.VoiceMailNoun(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance PhoneCallAttribute(a1, a2, a3, (uint64_t)lazy protocol witness table accessor for type VoiceMail.VoiceMailNoun and conformance VoiceMail.VoiceMailNoun, (uint64_t)lazy protocol witness table accessor for type VoiceMail.VoiceMailNoun and conformance VoiceMail.VoiceMailNoun, (uint64_t)lazy protocol witness table accessor for type VoiceMail.VoiceMailNoun and conformance VoiceMail.VoiceMailNoun, a7, a8, a9, a10);
}

PhoneCallFlowDelegatePlugin::VoiceMail::VoiceMailVerb_optional __swiftcall VoiceMail.VoiceMailVerb.init(rawValue:)(Swift::String rawValue)
{
  OUTLINED_FUNCTION_4_5();
  v3._object = v1;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of VoiceMail.VoiceMailVerb.init(rawValue:), v3);
  OUTLINED_FUNCTION_15_0();
  if (v2 >= 6) {
    return (PhoneCallFlowDelegatePlugin::VoiceMail::VoiceMailVerb_optional)6;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::VoiceMail::VoiceMailVerb_optional)v2;
  }
}

_UNKNOWN **static VoiceMail.VoiceMailVerb.allCases.getter()
{
  return &outlined read-only object #0 of static VoiceMail.VoiceMailVerb.allCases.getter;
}

uint64_t VoiceMail.VoiceMailVerb.rawValue.getter(char a1)
{
  uint64_t result = 2036427888;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x746165706572;
      break;
    case 2:
      uint64_t result = 1885956979;
      break;
    case 3:
      uint64_t result = 0x6573756170;
      break;
    case 4:
      uint64_t result = 0x656D75736572;
      break;
    case 5:
      uint64_t result = 0x6574656C6564;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance VoiceMail.VoiceMailVerb()
{
  return specialized == infix<A>(_:_:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance VoiceMail.VoiceMailVerb()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance VoiceMail.VoiceMailVerb()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance VoiceMail.VoiceMailVerb(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::VoiceMail::VoiceMailVerb_optional protocol witness for RawRepresentable.init(rawValue:) in conformance VoiceMail.VoiceMailVerb@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::VoiceMail::VoiceMailVerb_optional *a2@<X8>)
{
  result.value = VoiceMail.VoiceMailVerb.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance VoiceMail.VoiceMailVerb()
{
  char v1 = OUTLINED_FUNCTION_32();
  uint64_t result = VoiceMail.VoiceMailVerb.rawValue.getter(v1);
  *char v0 = result;
  v0[1] = v3;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance VoiceMail.VoiceMailVerb(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static VoiceMail.VoiceMailVerb.allCases.getter;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance VoiceMail.VoiceMailVerb(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance PhoneCallAttribute(a1, a2, a3, (uint64_t)lazy protocol witness table accessor for type VoiceMail.VoiceMailVerb and conformance VoiceMail.VoiceMailVerb, (uint64_t)lazy protocol witness table accessor for type VoiceMail.VoiceMailVerb and conformance VoiceMail.VoiceMailVerb, (uint64_t)lazy protocol witness table accessor for type VoiceMail.VoiceMailVerb and conformance VoiceMail.VoiceMailVerb, a7, a8, a9, a10);
}

PhoneCallFlowDelegatePlugin::PhoneCallDestinationType_optional __swiftcall PhoneCallDestinationType.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of PhoneCallDestinationType.init(rawValue:);
  return (PhoneCallFlowDelegatePlugin::PhoneCallDestinationType_optional)PhoneCallConfirmation.init(rawValue:)(rawValue, v1);
}

uint64_t PhoneCallConfirmation.init(rawValue:)(Swift::String a1, Swift::OpaquePointer a2)
{
  OUTLINED_FUNCTION_35_6(a1, a2);
  OUTLINED_FUNCTION_15_0();
  if (v2 >= 5) {
    return 5;
  }
  else {
    return v2;
  }
}

_UNKNOWN **static PhoneCallDestinationType.allCases.getter()
{
  return &outlined read-only object #0 of static PhoneCallDestinationType.allCases.getter;
}

void PhoneCallDestinationType.rawValue.getter(char a1)
{
  switch(a1)
  {
    case 1:
      OUTLINED_FUNCTION_140_0();
      break;
    case 2:
      OUTLINED_FUNCTION_199();
      break;
    case 3:
      OUTLINED_FUNCTION_191();
      break;
    default:
      return;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallDestinationType(char *a1)
{
  return specialized == infix<A>(_:_:)(*a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PhoneCallDestinationType()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneCallDestinationType(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallDestinationType(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::PhoneCallDestinationType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallDestinationType@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallDestinationType_optional *a2@<X8>)
{
  result.value = PhoneCallDestinationType.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallDestinationType()
{
  char v1 = OUTLINED_FUNCTION_32();
  PhoneCallDestinationType.rawValue.getter(v1);
  *char v0 = v2;
  v0[1] = v3;
}

void protocol witness for static CaseIterable.allCases.getter in conformance PhoneCallDestinationType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static PhoneCallDestinationType.allCases.getter;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance PhoneCallDestinationType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance PhoneCallAttribute(a1, a2, a3, (uint64_t)lazy protocol witness table accessor for type PhoneCallDestinationType and conformance PhoneCallDestinationType, (uint64_t)lazy protocol witness table accessor for type PhoneCallDestinationType and conformance PhoneCallDestinationType, (uint64_t)lazy protocol witness table accessor for type PhoneCallDestinationType and conformance PhoneCallDestinationType, a7, a8, a9, a10);
}

uint64_t PhoneCallContactRole.NLv3.asCommonRole.getter(char a1)
{
  return 0x10002u >> (8 * a1);
}

_UNKNOWN **static PhoneCallContactRole.NLv3.allCases.getter()
{
  return &outlined read-only object #0 of static PhoneCallContactRole.NLv3.allCases.getter;
}

uint64_t PhoneCallContactRole.NLv3.rawValue.getter(char a1)
{
  if (!a1) {
    return 28532;
  }
  if (a1 == 1) {
    return 1836020326;
  }
  return 1752459639;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallContactRole.NLv3(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PhoneCallContactRole.NLv3()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneCallContactRole.NLv3(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallContactRole.NLv3()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallContactRole.NLv3()
{
  char v1 = OUTLINED_FUNCTION_32();
  uint64_t result = PhoneCallContactRole.NLv3.rawValue.getter(v1);
  *char v0 = result;
  v0[1] = v3;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance PhoneCallContactRole.NLv3(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static PhoneCallContactRole.NLv3.allCases.getter;
}

id SmsGroup.asINCallGroup.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(a2 + 8))();
  uint64_t v6 = v5;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v9 = v8;
  id v10 = objc_allocWithZone((Class)INCallGroup);
  return @nonobjc INCallGroup.init(groupName:groupId:)(v4, v6, v7, v9);
}

Swift::Bool __swiftcall PhoneCallNLIntent.isPlayVoiceMail()()
{
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_14_11();
  uint64_t v1 = v0;
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_12_24();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_99_2();
  OUTLINED_FUNCTION_97_1();
  int v5 = v4();
  uint64_t v6 = *(void (**)(void))(v1 + 16);
  OUTLINED_FUNCTION_36_15();
  v6();
  if (v5 == 2)
  {
    BOOL v7 = 0;
  }
  else
  {
    OUTLINED_FUNCTION_184();
    BOOL v7 = !PhoneCallNLIntent.hasCallVerb()();
  }
  uint64_t v8 = *(void (**)(void))(v1 + 8);
  OUTLINED_FUNCTION_14_23();
  v8();
  OUTLINED_FUNCTION_36_15();
  v6();
  if (!v7)
  {
    uint64_t v9 = OUTLINED_FUNCTION_44_12();
    v10(v9);
    OUTLINED_FUNCTION_148_0();
  }
  OUTLINED_FUNCTION_14_23();
  v8();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_26_1();
  return result;
}

Swift::Bool __swiftcall PhoneCallNLIntent.hasVoiceMailNoun()()
{
  OUTLINED_FUNCTION_97_1();
  v0();
  OUTLINED_FUNCTION_194();
  return !v1;
}

Swift::Bool __swiftcall PhoneCallNLIntent.hasVoiceMailVerb()()
{
  OUTLINED_FUNCTION_41_9();
  v0();
  OUTLINED_FUNCTION_148_0();
  return !v1;
}

Swift::Bool __swiftcall PhoneCallNLIntent.isPlayIt()()
{
  OUTLINED_FUNCTION_28();
  OUTLINED_FUNCTION_14_11();
  __chkstk_darwin(v0);
  OUTLINED_FUNCTION_41_9();
  v1();
  OUTLINED_FUNCTION_148_0();
  if (v7)
  {
    uint64_t v3 = OUTLINED_FUNCTION_4_49();
    v4(v3);
  }
  else
  {
    uint64_t v5 = VoiceMail.VoiceMailVerb.rawValue.getter(v2);
    BOOL v7 = v5 == 2036427888 && v6 == 0xE400000000000000;
    if (v7)
    {
      swift_bridgeObjectRelease();
      uint64_t v10 = OUTLINED_FUNCTION_68_1();
      v11(v10);
      uint64_t v12 = OUTLINED_FUNCTION_92_3();
      v13(v12);
      OUTLINED_FUNCTION_194();
    }
    else
    {
      OUTLINED_FUNCTION_35_16();
      OUTLINED_FUNCTION_211_0();
      uint64_t v8 = OUTLINED_FUNCTION_4_49();
      v9(v8);
    }
  }
  OUTLINED_FUNCTION_14_23();
  v14();
  OUTLINED_FUNCTION_24();
  return result;
}

Swift::Bool __swiftcall PhoneCallNLIntent.hasRelationship()()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactRelationshipQuery?);
  __chkstk_darwin(v5 - 8);
  BOOL v7 = (char *)v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ContactQuery();
  OUTLINED_FUNCTION_1();
  uint64_t v58 = v9;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_1();
  uint64_t v64 = v13;
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_5_8();
  uint64_t v61 = v15;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v16);
  uint64_t v62 = (char *)v57 - v17;
  uint64_t v63 = v0;
  OUTLINED_FUNCTION_38_11();
  uint64_t v19 = v18();
  uint64_t v20 = *(void *)(v19 + 16);
  uint64_t v59 = v2;
  if (v20)
  {
    uint64_t v21 = v19 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of SiriPhoneContact();
      uint64_t v23 = v66;
      uint64_t v22 = v67;
      __swift_project_boxed_opaque_existential_1(v65, v66);
      uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 416))(v23, v22);
      if (v25)
      {
        uint64_t v26 = v24;
        unint64_t v27 = v25;
        swift_bridgeObjectRelease();
        if ((v27 & 0x2000000000000000) != 0) {
          uint64_t v28 = HIBYTE(v27) & 0xF;
        }
        else {
          uint64_t v28 = v26 & 0xFFFFFFFFFFFFLL;
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
        if (v28)
        {
          swift_bridgeObjectRelease_n();
          LOBYTE(v20) = 1;
          goto LABEL_13;
        }
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
      }
      v21 += 40;
      --v20;
    }
    while (v20);
    swift_bridgeObjectRelease_n();
LABEL_13:
    uint64_t v2 = v59;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v29 = v64;
  uint64_t v30 = v64 + 16;
  uint64_t v60 = *(void *)(v64 + 16);
  OUTLINED_FUNCTION_54_8();
  v31();
  if (v20)
  {
    char v32 = 1;
  }
  else
  {
    v57[1] = v30;
    uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 128))(v4, v2);
    uint64_t v34 = *(void *)(v33 + 16);
    if (v34)
    {
      v57[0] = v4;
      uint64_t v35 = v58 + 16;
      uint64_t v36 = *(void (**)(char *, unint64_t, uint64_t))(v58 + 16);
      unint64_t v37 = (*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80);
      uint64_t v58 = v33;
      unint64_t v38 = v33 + v37;
      uint64_t v39 = (void (**)(char *, uint64_t))(v35 - 8);
      uint64_t v40 = *(void *)(v35 + 56);
      while (1)
      {
        v36(v12, v38, v8);
        ContactQuery.relationship.getter();
        uint64_t v41 = type metadata accessor for ContactRelationshipQuery();
        int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v41);
        outlined destroy of SubmitCommandError?((uint64_t)v7, &demangling cache variable for type metadata for ContactRelationshipQuery?);
        (*v39)(v12, v8);
        if (EnumTagSinglePayload != 1) {
          break;
        }
        v38 += v40;
        if (!--v34)
        {
          swift_bridgeObjectRelease();
          char v32 = 0;
          goto LABEL_23;
        }
      }
      swift_bridgeObjectRelease();
      char v32 = 1;
LABEL_23:
      uint64_t v29 = v64;
    }
    else
    {
      swift_bridgeObjectRelease();
      char v32 = 0;
      uint64_t v29 = v64;
    }
  }
  uint64_t v45 = *(void (**)(void))(v29 + 8);
  uint64_t v43 = v29 + 8;
  uint64_t v44 = v45;
  OUTLINED_FUNCTION_3_23();
  v45();
  OUTLINED_FUNCTION_54_8();
  v46();
  if ((v32 & 1) == 0)
  {
    unint64_t v47 = (unint64_t)PhoneCallNLIntent.getPersons()();
    unint64_t v48 = v47;
    if (v47 >> 62) {
      goto LABEL_39;
    }
    uint64_t v49 = *(void *)((char *)&dword_10 + (v47 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    for (; v49; uint64_t v49 = _CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v64 = v43;
      uint64_t v50 = 4;
      while (1)
      {
        uint64_t v43 = v50 - 4;
        id v51 = (v48 & 0xC000000000000001) != 0
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
            : *(id *)(v48 + 8 * v50);
        uint64_t v52 = v51;
        uint64_t v53 = v50 - 3;
        if (__OFADD__(v43, 1)) {
          break;
        }
        id v54 = [v51 relationship];

        ++v50;
        if (v54) {
          BOOL v55 = 1;
        }
        else {
          BOOL v55 = v53 == v49;
        }
        if (v55) {
          goto LABEL_40;
        }
      }
      __break(1u);
LABEL_39:
      swift_bridgeObjectRetain();
    }
LABEL_40:
    swift_bridgeObjectRelease_n();
  }
  OUTLINED_FUNCTION_3_23();
  v44();
  OUTLINED_FUNCTION_26_1();
  return result;
}

Swift::Bool __swiftcall PhoneCallNLIntent.isInferredCallFromRedialOrCallBack()()
{
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_14_11();
  uint64_t v2 = v1;
  __chkstk_darwin(v3);
  uint64_t v26 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_233();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_49_11();
  uint64_t v8 = *(void (**)(void))(v7 + 104);
  uint64_t v27 = v7;
  unint64_t v25 = v8;
  v8();
  OUTLINED_FUNCTION_24_23();
  if (v11)
  {
    char v10 = 0;
  }
  else
  {
    OUTLINED_FUNCTION_78_3(v9);
    if (v11) {
      BOOL v13 = v12 == 0xE600000000000000;
    }
    else {
      BOOL v13 = 0;
    }
    if (v13)
    {
      swift_bridgeObjectRelease();
      char v10 = 1;
    }
    else
    {
      char v10 = OUTLINED_FUNCTION_84_4();
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v14 = *(void (**)(void))(v2 + 16);
  OUTLINED_FUNCTION_8_48();
  v14();
  BOOL v15 = (v10 & 1) != 0 && !PhoneCallNLIntent.isRedial()();
  uint64_t v16 = *(void (**)(void))(v2 + 8);
  OUTLINED_FUNCTION_3_23();
  v16();
  OUTLINED_FUNCTION_8_48();
  v14();
  if (!v15)
  {
    ((void (*)(uint64_t, uint64_t))v25)(v0, v27);
    OUTLINED_FUNCTION_24_23();
    if (v11)
    {
      uint64_t v18 = v26;
      OUTLINED_FUNCTION_8_48();
      v14();
    }
    else
    {
      uint64_t v19 = PhoneCallVerb.rawValue.getter(v17);
      if (v19 == 0x636162206C6C6163 && v20 == 0xE90000000000006BLL)
      {
        swift_bridgeObjectRelease();
        uint64_t v18 = v26;
        ((void (*)(char *))v14)(v26);
      }
      else
      {
        char v22 = OUTLINED_FUNCTION_81_4();
        swift_bridgeObjectRelease();
        uint64_t v18 = v26;
        OUTLINED_FUNCTION_8_48();
        v14();
        if ((v22 & 1) == 0) {
          goto LABEL_25;
        }
      }
      PhoneCallNLIntent.isCallBack()();
    }
LABEL_25:
    ((void (*)(char *))v16)(v18);
  }
  OUTLINED_FUNCTION_3_23();
  v16();
  OUTLINED_FUNCTION_40_11();
  OUTLINED_FUNCTION_26_1();
  return result;
}

Swift::Bool __swiftcall PhoneCallNLIntent.hasAnyContactReference()()
{
  OUTLINED_FUNCTION_21_22();
  v1();
  OUTLINED_FUNCTION_155();
  if (!v0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  OUTLINED_FUNCTION_116_0();
  while (1)
  {
    outlined init with copy of SiriPhoneContact();
    char v2 = v16;
    __swift_project_boxed_opaque_existential_1(v15, v15[3]);
    v3.value = OUTLINED_FUNCTION_202().value;
    if (v3.value == PhoneCallFlowDelegatePlugin_PhoneCallContactReference_unknownDefault)
    {
      OUTLINED_FUNCTION_136_0();
    }
    else
    {
      PhoneCallContactReference.rawValue.getter(v3.value);
      BOOL v6 = v5 == 6647407 && v4 == 0xE300000000000000;
      if (v6)
      {
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_136_0();
        goto LABEL_24;
      }
      OUTLINED_FUNCTION_210();
      OUTLINED_FUNCTION_77_3();
      OUTLINED_FUNCTION_136_0();
      if (v2) {
        goto LABEL_24;
      }
    }
    char v7 = v14;
    __swift_project_boxed_opaque_existential_1(v13, v13[3]);
    v8.value = OUTLINED_FUNCTION_202().value;
    if (v8.value == PhoneCallFlowDelegatePlugin_PhoneCallContactReference_unknownDefault)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
      goto LABEL_17;
    }
    PhoneCallContactReference.rawValue.getter(v8.value);
    if (v10 == 2037277037 && v9 == 0xE400000000000000) {
      break;
    }
    OUTLINED_FUNCTION_35_16();
    OUTLINED_FUNCTION_77_3();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    if (v7) {
      goto LABEL_25;
    }
LABEL_17:
    OUTLINED_FUNCTION_177();
    if (v6)
    {
      OUTLINED_FUNCTION_2_16();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
LABEL_24:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
LABEL_25:
  OUTLINED_FUNCTION_2_16();
  return 1;
}

Swift::Bool __swiftcall PhoneCallNLIntent.hasNoContactOrReference()()
{
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_14_11();
  uint64_t v1 = v0;
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_12_24();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_99_2();
  unint64_t v5 = (*(uint64_t (**)(void))(v4 + 144))();
  if (v5 >> 62) {
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v6 = *(void *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFFF8));
  }
  swift_bridgeObjectRelease();
  char v7 = *(void (**)(void))(v1 + 16);
  OUTLINED_FUNCTION_8_48();
  v7();
  if (v6)
  {
    BOOL v8 = 0;
  }
  else
  {
    OUTLINED_FUNCTION_198();
    OUTLINED_FUNCTION_38_11();
    uint64_t v10 = *(void *)(v9() + 16);
    swift_bridgeObjectRelease();
    BOOL v8 = v10 == 0;
  }
  char v11 = *(void (**)(void))(v1 + 8);
  OUTLINED_FUNCTION_0_35();
  v11();
  OUTLINED_FUNCTION_8_48();
  v7();
  if (v8)
  {
    uint64_t v12 = OUTLINED_FUNCTION_44_12();
    v13(v12);
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_0_35();
  v11();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_26_1();
  return result;
}

Swift::Bool __swiftcall PhoneCallNLIntent.isCallWithReference()()
{
  OUTLINED_FUNCTION_14_11();
  __chkstk_darwin(v0);
  OUTLINED_FUNCTION_12_0();
  Swift::Bool v1 = PhoneCallNLIntent.hasCallVerb()();
  uint64_t v2 = OUTLINED_FUNCTION_4_49();
  v3(v2);
  if (v1)
  {
    uint64_t v4 = OUTLINED_FUNCTION_44_12();
    unint64_t v6 = v5(v4);
    if (v6 >> 62) {
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    }
    else {
      uint64_t v7 = *(void *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFFF8));
    }
    swift_bridgeObjectRelease();
    Swift::Bool v8 = v7 != 0;
  }
  else
  {
    Swift::Bool v8 = 0;
  }
  OUTLINED_FUNCTION_53_8();
  v9();
  return v8;
}

Swift::Bool __swiftcall PhoneCallNLIntent.hasCancellation()()
{
  OUTLINED_FUNCTION_195();
  v0();
  OUTLINED_FUNCTION_91_5();
  if (v5) {
    return 0;
  }
  uint64_t v3 = PhoneCallConfirmation.rawValue.getter(v1);
  BOOL v5 = v3 == 0x6C65636E6163 && v4 == 0xE600000000000000;
  if (v5)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_84_4();
    OUTLINED_FUNCTION_15_0();
  }
  return 1;
}

Swift::Bool __swiftcall PhoneCallNLIntent.hasRejection()()
{
  OUTLINED_FUNCTION_195();
  v1();
  OUTLINED_FUNCTION_91_5();
  if (v6) {
    return 0;
  }
  uint64_t v4 = PhoneCallConfirmation.rawValue.getter(v2);
  BOOL v6 = v4 == 28526 && v5 == 0xE200000000000000;
  if (v6)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    _stringCompareWithSmolCheck(_:_:expecting:)();
    OUTLINED_FUNCTION_15_0();
    return v0 & 1;
  }
}

Swift::Bool __swiftcall PhoneCallNLIntent.isSearchCallHistoryWithDate()()
{
  char v1 = v0;
  OUTLINED_FUNCTION_29_16();
  uint64_t v3 = v2();
  if (v3)
  {
    uint64_t v4 = v3;
    if (PhoneCallNLIntent.isFind()() && (uint64_t v5 = *(void *)(v4 + 16)) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v6 = 0;
      while (2)
      {
        switch(*(unsigned char *)(v4 + v6 + 32))
        {
          case 1:
            OUTLINED_FUNCTION_52_9();
            goto LABEL_20;
          case 2:
            OUTLINED_FUNCTION_25_18();
            goto LABEL_20;
          case 3:
            OUTLINED_FUNCTION_10_30();
            goto LABEL_20;
          case 4:
            OUTLINED_FUNCTION_15_23();
            goto LABEL_20;
          case 5:
            OUTLINED_FUNCTION_37_12();
            goto LABEL_20;
          case 6:
            OUTLINED_FUNCTION_58_8();
            goto LABEL_20;
          case 7:
            OUTLINED_FUNCTION_13_23();
            goto LABEL_20;
          case 8:
            OUTLINED_FUNCTION_18_21();
            goto LABEL_20;
          case 9:
            OUTLINED_FUNCTION_11_3();
            goto LABEL_20;
          case 0xA:
            OUTLINED_FUNCTION_22_20();
            goto LABEL_20;
          case 0xB:
            swift_bridgeObjectRelease();
            char v1 = 1;
            goto LABEL_26;
          case 0xC:
            OUTLINED_FUNCTION_17_19();
            goto LABEL_20;
          case 0xD:
            OUTLINED_FUNCTION_51_7();
            goto LABEL_20;
          default:
LABEL_20:
            OUTLINED_FUNCTION_213();
            _stringCompareWithSmolCheck(_:_:expecting:)();
            OUTLINED_FUNCTION_124_0();
            if ((v1 & 1) == 0 && v5 - 1 != v6++) {
              continue;
            }
LABEL_26:
            swift_bridgeObjectRelease();
            break;
        }
        break;
      }
    }
    else
    {
      char v1 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v1 = 0;
  }
  return v1 & 1;
}

Swift::Bool __swiftcall PhoneCallNLIntent.isSearchCallHistoryWithAppName()()
{
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_14_11();
  uint64_t v2 = v1;
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_27();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_49_11();
  PhoneCallNLIntent.applicationId.getter();
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void (**)(void))(v2 + 16);
  OUTLINED_FUNCTION_8_48();
  v7();
  if (!v6)
  {
    uint64_t v11 = OUTLINED_FUNCTION_34_9();
    ((void (*)(uint64_t))v0)(v11);
    OUTLINED_FUNCTION_8_48();
    v7();
    goto LABEL_10;
  }
  uint64_t v8 = PhoneCallNLIntent.applicationId.getter();
  if (!v9)
  {
    uint64_t v12 = OUTLINED_FUNCTION_34_9();
    ((void (*)(uint64_t))v0)(v12);
    OUTLINED_FUNCTION_8_48();
    v7();
    goto LABEL_9;
  }
  if (v8 != 0xD000000000000015 || v9 != 0x80000000004932A0)
  {
    char v15 = OUTLINED_FUNCTION_173();
    uint64_t v13 = OUTLINED_FUNCTION_34_9();
    ((void (*)(uint64_t))v0)(v13);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_8_48();
    v7();
    if (v15) {
      goto LABEL_10;
    }
LABEL_9:
    PhoneCallNLIntent.isFind()();
    goto LABEL_10;
  }
  uint64_t v10 = OUTLINED_FUNCTION_34_9();
  ((void (*)(uint64_t))v0)(v10);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_8_48();
  v7();
LABEL_10:
  v0();
  OUTLINED_FUNCTION_40_11();
  OUTLINED_FUNCTION_26_1();
  return result;
}

Swift::Bool __swiftcall PhoneCallNLIntent.isSearchCallHistoryWithUnsupportedAttribute()()
{
  char v1 = v0;
  OUTLINED_FUNCTION_29_16();
  uint64_t v3 = v2();
  if (v3)
  {
    uint64_t v4 = v3;
    if (PhoneCallNLIntent.isFind()() && *(void *)(v4 + 16))
    {
      swift_bridgeObjectRetain();
      while (2)
      {
        OUTLINED_FUNCTION_157_0();
        switch(v5)
        {
          case 1:
            goto LABEL_19;
          case 2:
            OUTLINED_FUNCTION_25_18();
            goto LABEL_19;
          case 3:
            OUTLINED_FUNCTION_10_30();
            goto LABEL_19;
          case 4:
            OUTLINED_FUNCTION_15_23();
            goto LABEL_19;
          case 5:
            OUTLINED_FUNCTION_47_10();
            goto LABEL_19;
          case 6:
            OUTLINED_FUNCTION_58_8();
            goto LABEL_19;
          case 7:
            OUTLINED_FUNCTION_13_23();
            goto LABEL_19;
          case 8:
            OUTLINED_FUNCTION_18_21();
            goto LABEL_19;
          case 9:
            OUTLINED_FUNCTION_11_3();
            goto LABEL_19;
          case 10:
            OUTLINED_FUNCTION_22_20();
            goto LABEL_19;
          case 11:
            OUTLINED_FUNCTION_46_8();
            goto LABEL_19;
          case 12:
            OUTLINED_FUNCTION_17_19();
            goto LABEL_19;
          case 13:
            OUTLINED_FUNCTION_51_7();
LABEL_19:
            OUTLINED_FUNCTION_84_4();
            OUTLINED_FUNCTION_124_0();
            if ((v1 & 1) == 0) {
              continue;
            }
            goto LABEL_23;
          default:
            swift_bridgeObjectRelease();
LABEL_23:
            swift_bridgeObjectRelease();
            break;
        }
        break;
      }
    }
    swift_bridgeObjectRelease();
  }
  return 0;
}

Swift::Bool __swiftcall PhoneCallNLIntent.isWhoJustCalled()()
{
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_14_11();
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)v25 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_29_16();
  uint64_t v4 = v3();
  if (!v4) {
    goto LABEL_43;
  }
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_36_0();
  if (!PhoneCallNLIntent.isFind()() || (uint64_t v6 = *(void *)(v5 + 16)) == 0)
  {
LABEL_41:
    swift_bridgeObjectRelease();
    uint64_t v13 = OUTLINED_FUNCTION_68_1();
    v14(v13);
    goto LABEL_42;
  }
  v25[0] = v2;
  swift_bridgeObjectRetain();
  uint64_t v7 = 0;
  v25[1] = "onHold";
  while (2)
  {
    uint64_t v8 = v5 + v7++;
    switch(*(unsigned char *)(v8 + 32))
    {
      case 1:
        OUTLINED_FUNCTION_52_9();
        goto LABEL_19;
      case 2:
        OUTLINED_FUNCTION_25_18();
        goto LABEL_19;
      case 3:
        OUTLINED_FUNCTION_10_30();
        goto LABEL_19;
      case 4:
        OUTLINED_FUNCTION_15_23();
        goto LABEL_19;
      case 5:
        OUTLINED_FUNCTION_47_10();
        goto LABEL_19;
      case 6:
        swift_bridgeObjectRelease();
        goto LABEL_23;
      case 7:
        OUTLINED_FUNCTION_13_23();
        goto LABEL_19;
      case 8:
        OUTLINED_FUNCTION_18_21();
        goto LABEL_19;
      case 9:
        OUTLINED_FUNCTION_11_3();
        goto LABEL_19;
      case 0xA:
        OUTLINED_FUNCTION_22_20();
        goto LABEL_19;
      case 0xB:
        OUTLINED_FUNCTION_46_8();
        goto LABEL_19;
      case 0xC:
        OUTLINED_FUNCTION_17_19();
        goto LABEL_19;
      case 0xD:
        OUTLINED_FUNCTION_51_7();
        goto LABEL_19;
      default:
LABEL_19:
        char v9 = OUTLINED_FUNCTION_35_16();
        swift_bridgeObjectRelease();
        if ((v9 & 1) == 0)
        {
          if (v6 == v7)
          {
LABEL_40:
            swift_bridgeObjectRelease();
            goto LABEL_41;
          }
          continue;
        }
LABEL_23:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        uint64_t v10 = 0;
        while (2)
        {
          uint64_t v11 = v10 + 1;
          if (__OFADD__(v10, 1))
          {
            __break(1u);
            JUMPOUT(0x1902BCLL);
          }
          switch(*(unsigned char *)(v5 + v10 + 32))
          {
            case 1:
              OUTLINED_FUNCTION_52_9();
              goto LABEL_38;
            case 2:
              OUTLINED_FUNCTION_25_18();
              goto LABEL_38;
            case 3:
              OUTLINED_FUNCTION_10_30();
              goto LABEL_38;
            case 4:
              swift_bridgeObjectRelease();
              goto LABEL_44;
            case 5:
              OUTLINED_FUNCTION_47_10();
              goto LABEL_38;
            case 7:
              OUTLINED_FUNCTION_13_23();
              goto LABEL_38;
            case 8:
              OUTLINED_FUNCTION_18_21();
              goto LABEL_38;
            case 9:
              OUTLINED_FUNCTION_11_3();
              goto LABEL_38;
            case 0xA:
              OUTLINED_FUNCTION_22_20();
              goto LABEL_38;
            case 0xB:
              OUTLINED_FUNCTION_46_8();
              goto LABEL_38;
            case 0xC:
              OUTLINED_FUNCTION_17_19();
              goto LABEL_38;
            case 0xD:
              OUTLINED_FUNCTION_51_7();
              goto LABEL_38;
            default:
LABEL_38:
              OUTLINED_FUNCTION_231();
              char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v12 & 1) == 0)
              {
                ++v10;
                if (v11 == v6) {
                  goto LABEL_40;
                }
                continue;
              }
LABEL_44:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v18 = OUTLINED_FUNCTION_4_49();
              v19(v18);
              uint64_t v20 = OUTLINED_FUNCTION_93_4();
              v21(v20);
              OUTLINED_FUNCTION_129_0();
              if (!v24)
              {
                BOOL v24 = PhoneCallNoun.rawValue.getter(v22) == 1819042147 && v23 == 0xE400000000000000;
                if (!v24) {
                  OUTLINED_FUNCTION_30_15();
                }
                swift_bridgeObjectRelease();
              }
LABEL_42:
              uint64_t v15 = OUTLINED_FUNCTION_156_0();
              v16(v15);
LABEL_43:
              OUTLINED_FUNCTION_40_11();
              OUTLINED_FUNCTION_26_1();
              return result;
          }
        }
    }
  }
}

Swift::Bool __swiftcall PhoneCallNLIntent.isAnyCallToReference()()
{
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_14_11();
  uint64_t v1 = v0;
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_27();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_89_1();
  Swift::Bool v4 = PhoneCallNLIntent.isAudioCall()();
  uint64_t v5 = *(void (**)(void))(v1 + 16);
  OUTLINED_FUNCTION_36_15();
  v5();
  BOOL v6 = v4 || PhoneCallNLIntent.isVideoCall()();
  uint64_t v7 = *(void (**)(void))(v1 + 8);
  OUTLINED_FUNCTION_14_23();
  v7();
  OUTLINED_FUNCTION_36_15();
  v5();
  if (v6) {
    PhoneCallNLIntent.hasAnyContactReference()();
  }
  OUTLINED_FUNCTION_14_23();
  v7();
  OUTLINED_FUNCTION_40_11();
  OUTLINED_FUNCTION_26_1();
  return result;
}

Swift::Bool __swiftcall PhoneCallNLIntent.isBusinessRedirectCall()()
{
  OUTLINED_FUNCTION_28();
  OUTLINED_FUNCTION_29_16();
  uint64_t v1 = v0();
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)(v1 + 16);
    if (v3)
    {
      swift_bridgeObjectRetain();
      uint64_t v4 = 0;
      while (2)
      {
        switch(*(unsigned char *)(v2 + v4 + 32))
        {
          case 1:
            OUTLINED_FUNCTION_52_9();
            goto LABEL_19;
          case 2:
            OUTLINED_FUNCTION_25_18();
            goto LABEL_19;
          case 3:
            OUTLINED_FUNCTION_10_30();
            goto LABEL_19;
          case 4:
            OUTLINED_FUNCTION_15_23();
            goto LABEL_19;
          case 5:
            OUTLINED_FUNCTION_37_12();
            goto LABEL_19;
          case 6:
            OUTLINED_FUNCTION_58_8();
            goto LABEL_19;
          case 7:
            OUTLINED_FUNCTION_13_23();
            goto LABEL_19;
          case 8:
            OUTLINED_FUNCTION_18_21();
            goto LABEL_19;
          case 9:
            OUTLINED_FUNCTION_11_3();
            goto LABEL_19;
          case 0xA:
            OUTLINED_FUNCTION_22_20();
            goto LABEL_19;
          case 0xB:
            OUTLINED_FUNCTION_138_0();
            goto LABEL_19;
          case 0xC:
            OUTLINED_FUNCTION_115_0();
            goto LABEL_19;
          case 0xD:
            swift_bridgeObjectRelease();
            goto LABEL_25;
          default:
LABEL_19:
            char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v5 & 1) == 0 && v3 - 1 != v4++) {
              continue;
            }
LABEL_25:
            swift_bridgeObjectRelease();
            break;
        }
        break;
      }
    }
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_24();
  return result;
}

__C::INCallRecordTypeOptions_optional __swiftcall PhoneCallNLIntent.getCallRecordTypeOption(attr:)(PhoneCallFlowDelegatePlugin::PhoneCallAttribute attr)
{
  int v1 = attr;
  Swift::Bool v2 = 0;
  Swift::UInt v3 = 2;
  switch(v1)
  {
    case 0:
      break;
    case 4:
      Swift::Bool v2 = 0;
      Swift::UInt v3 = 4;
      break;
    case 5:
      Swift::Bool v2 = 0;
      Swift::UInt v3 = 1;
      break;
    case 6:
      Swift::Bool v2 = 0;
      Swift::UInt v3 = 8;
      break;
    case 8:
      Swift::Bool v2 = 0;
      Swift::UInt v3 = 64;
      break;
    case 9:
      Swift::Bool v2 = 0;
      Swift::UInt v3 = 32;
      break;
    case 10:
      Swift::Bool v2 = 0;
      Swift::UInt v3 = 128;
      break;
    default:
      Swift::UInt v3 = 0;
      Swift::Bool v2 = 1;
      break;
  }
  result.value.rawValue = v3;
  result.is_nil = v2;
  return result;
}

BOOL partial apply for closure #1 in PhoneCallNLIntent.getCallRecordType()(unsigned __int8 *a1)
{
  return PhoneCallNLIntent.getCallRecordType(attr:)(*a1) == 0;
}

uint64_t PhoneCallNLIntent.getCallRecordType(attr:)(unsigned __int8 a1)
{
  if (a1 > 0xAu) {
    return 0;
  }
  else {
    return qword_471CE8[(char)a1];
  }
}

uint64_t specialized Collection.firstIndex(where:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  if (!v4) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = a3 + 32;
  while (1)
  {
    char v10 = *(unsigned char *)(v7 + v6);
    char v8 = a1(&v10);
    if (v3 || (v8 & 1) != 0) {
      break;
    }
    if (v4 == ++v6) {
      return 0;
    }
  }
  return v6;
}

Swift::Bool __swiftcall PhoneCallNLIntent.hasUnsupportedSearchCallHistoryParameter()()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_14_11();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_12_24();
  __chkstk_darwin(v9);
  id v51 = (char *)&v41 - v10;
  OUTLINED_FUNCTION_18_0();
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_49_11();
  OUTLINED_FUNCTION_29_16();
  if (v12())
  {
    uint64_t v48 = v5;
    uint64_t v49 = v1;
    uint64_t v50 = v2;
    char v14 = 0;
    uint64_t v15 = 0;
    *(void *)&long long v13 = 136315138;
    long long v47 = v13;
    uint64_t v46 = (char *)&type metadata for Any + 8;
    uint64_t v44 = "onHold";
    do
    {
      uint64_t v16 = v15;
      while (1)
      {
        if (v16 >= 3)
        {
          __break(1u);
          JUMPOUT(0x190BE0);
        }
        uint64_t v17 = *((unsigned __int8 *)&outlined read-only object #0 of PhoneCallNLIntent.hasUnsupportedSearchCallHistoryParameter()
              + v16
              + 32);
        uint64_t v15 = v16 + 1;
        specialized Sequence<>.contains(_:)();
        if (v18) {
          break;
        }
        ++v16;
        if (v15 == 3) {
          goto LABEL_29;
        }
      }
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      __swift_project_value_buffer(v19, (uint64_t)static Logger.siriPhone);
      uint64_t v20 = Logger.logObject.getter();
      int v45 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v20, (os_log_type_t)v45))
      {
        uint64_t v42 = v3;
        uint64_t v21 = (_DWORD *)swift_slowAlloc();
        uint64_t v41 = swift_slowAlloc();
        uint64_t v52 = v41;
        uint64_t v43 = v21;
        _DWORD *v21 = v47;
        unint64_t v22 = 0xE600000000000000;
        uint64_t v23 = 0x64657373696DLL;
        switch(v17)
        {
          case 1:
            uint64_t v23 = OUTLINED_FUNCTION_52_9();
            break;
          case 2:
            uint64_t v23 = OUTLINED_FUNCTION_25_18();
            break;
          case 3:
            uint64_t v23 = OUTLINED_FUNCTION_10_30();
            break;
          case 4:
            uint64_t v23 = OUTLINED_FUNCTION_15_23();
            break;
          case 5:
            uint64_t v24 = OUTLINED_FUNCTION_47_10();
            goto LABEL_24;
          case 6:
            uint64_t v23 = OUTLINED_FUNCTION_58_8();
            break;
          case 7:
            uint64_t v23 = OUTLINED_FUNCTION_13_23();
            break;
          case 8:
            uint64_t v23 = OUTLINED_FUNCTION_18_21();
            break;
          case 9:
            uint64_t v23 = OUTLINED_FUNCTION_11_3();
            break;
          case 10:
            uint64_t v23 = OUTLINED_FUNCTION_22_20();
            break;
          case 11:
            uint64_t v24 = OUTLINED_FUNCTION_46_8();
LABEL_24:
            uint64_t v23 = v24 & 0xFFFFFFFFFFFFLL | 0x676E000000000000;
            break;
          case 12:
            uint64_t v23 = OUTLINED_FUNCTION_17_19();
            break;
          case 13:
            uint64_t v23 = OUTLINED_FUNCTION_51_7();
            break;
          default:
            break;
        }
        uint64_t v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v22, &v52);
        uint64_t v26 = (uint8_t *)v43;
        *(void *)(v43 + 1) = v25;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_0, v20, (os_log_type_t)v45, "#PhoneCallNLIntent find unsupported search call history parameter %s", v26, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_6();
        OUTLINED_FUNCTION_6();

        uint64_t v3 = v42;
      }
      else
      {
      }
      char v14 = 1;
    }
    while (v16 != 2);
LABEL_29:
    swift_bridgeObjectRelease();
    uint64_t v27 = *(void (**)(uint64_t))(v7 + 16);
    OUTLINED_FUNCTION_57_7();
    v27(v28);
    if (v14)
    {
      Swift::Bool v29 = 1;
      uint64_t v30 = v50;
      uint64_t v31 = v48;
    }
    else
    {
      uint64_t v31 = v48;
      Swift::Bool v29 = PhoneCallNLIntent.hasPhoneNumber()();
      uint64_t v30 = v50;
    }
    char v32 = *(void (**)(uint64_t))(v7 + 8);
    OUTLINED_FUNCTION_53_8();
    v32(v33);
    OUTLINED_FUNCTION_57_7();
    v27(v34);
    if (v29)
    {
      OUTLINED_FUNCTION_53_8();
      v32(v35);
      OUTLINED_FUNCTION_57_7();
      v27(v36);
    }
    else
    {
      int v37 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v31 + 56))(v0, v31);
      OUTLINED_FUNCTION_53_8();
      v32(v38);
      OUTLINED_FUNCTION_57_7();
      v27(v39);
      if (v37 == 2) {
        PhoneCallNLIntent.isSearchCallHistoryWithAppName()();
      }
    }
    v32(v30);
  }
  OUTLINED_FUNCTION_40_11();
  OUTLINED_FUNCTION_26_1();
  return result;
}

Swift::Bool __swiftcall PhoneCallNLIntent.isTelephonyTargetFromSrr()()
{
  OUTLINED_FUNCTION_21_22();
  uint64_t v2 = *(void *)(v1() + 16);
  if (v2)
  {
    OUTLINED_FUNCTION_116_0();
    while (2)
    {
      outlined init with copy of SiriPhoneContact();
      char v3 = v13;
      __swift_project_boxed_opaque_existential_1(v12, v13);
      uint64_t v4 = OUTLINED_FUNCTION_122_0();
      switch(v5(v4))
      {
        case 1u:
          goto LABEL_5;
        case 2u:
          OUTLINED_FUNCTION_88_4();
LABEL_5:
          OUTLINED_FUNCTION_197();
          _stringCompareWithSmolCheck(_:_:expecting:)();
          OUTLINED_FUNCTION_77_3();
          OUTLINED_FUNCTION_136_0();
          if (v3) {
            goto LABEL_19;
          }
          goto LABEL_8;
        case 3u:
          OUTLINED_FUNCTION_136_0();
LABEL_8:
          char v6 = v11;
          __swift_project_boxed_opaque_existential_1(v10, v11);
          uint64_t v7 = OUTLINED_FUNCTION_122_0();
          switch(v8(v7))
          {
            case 1u:
              swift_bridgeObjectRelease();
              goto LABEL_19;
            case 2u:
              OUTLINED_FUNCTION_88_4();
              goto LABEL_10;
            case 3u:
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
              goto LABEL_13;
            default:
LABEL_10:
              OUTLINED_FUNCTION_173();
              OUTLINED_FUNCTION_77_3();
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
              if (v6) {
                goto LABEL_20;
              }
LABEL_13:
              v0 += 40;
              if (--v2) {
                continue;
              }
              OUTLINED_FUNCTION_2_16();
              break;
          }
          return 0;
        default:
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_136_0();
LABEL_19:
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
LABEL_20:
          OUTLINED_FUNCTION_2_16();
          return 1;
      }
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

Swift::Bool __swiftcall PhoneCallNLIntent.hasOnlyCallVerb()()
{
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_14_11();
  uint64_t v1 = v0;
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_27();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_89_1();
  uint64_t v5 = *(void (**)(void))(v4 + 104);
  OUTLINED_FUNCTION_225_0();
  v5();
  OUTLINED_FUNCTION_24_23();
  if (v8)
  {
    char v7 = 0;
  }
  else
  {
    char v7 = 99;
    OUTLINED_FUNCTION_78_3(v6);
    if (v8) {
      BOOL v10 = v9 == 0xE400000000000000;
    }
    else {
      BOOL v10 = 0;
    }
    if (v10)
    {
      swift_bridgeObjectRelease();
      char v7 = 1;
    }
    else
    {
      OUTLINED_FUNCTION_30_15();
      OUTLINED_FUNCTION_193();
    }
  }
  uint64_t v11 = *(void (**)(void))(v1 + 16);
  OUTLINED_FUNCTION_8_48();
  v11();
  if (v7)
  {
    char v12 = 1;
  }
  else
  {
    OUTLINED_FUNCTION_228();
    OUTLINED_FUNCTION_225_0();
    v5();
    OUTLINED_FUNCTION_24_23();
    if (v8)
    {
      char v12 = 0;
    }
    else
    {
      char v12 = 102;
      OUTLINED_FUNCTION_78_3(v13);
      if (v14) {
        BOOL v16 = v15 == 0xE800000000000000;
      }
      else {
        BOOL v16 = 0;
      }
      if (v16)
      {
        swift_bridgeObjectRelease();
        char v12 = 1;
      }
      else
      {
        OUTLINED_FUNCTION_26_18();
        OUTLINED_FUNCTION_193();
      }
    }
  }
  uint64_t v17 = *(void (**)(void))(v1 + 8);
  OUTLINED_FUNCTION_0_35();
  v17();
  OUTLINED_FUNCTION_8_48();
  v11();
  if (v12)
  {
    OUTLINED_FUNCTION_228();
    PhoneCallNLIntent.hasNoContactOrReference()();
  }
  OUTLINED_FUNCTION_0_35();
  v17();
  OUTLINED_FUNCTION_40_11();
  OUTLINED_FUNCTION_26_1();
  return result;
}

id @nonobjc INCallGroup.init(groupName:groupId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2)
  {
    NSString v6 = 0;
    if (a4) {
      goto LABEL_3;
    }
LABEL_5:
    NSString v7 = 0;
    goto LABEL_6;
  }
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (!a4) {
    goto LABEL_5;
  }
LABEL_3:
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
LABEL_6:
  id v8 = [v4 initWithGroupName:v6 groupId:v7];

  return v8;
}

unint64_t lazy protocol witness table accessor for type PhoneCallAVMode and conformance PhoneCallAVMode()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallAVMode and conformance PhoneCallAVMode;
  if (!lazy protocol witness table cache variable for type PhoneCallAVMode and conformance PhoneCallAVMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallAVMode and conformance PhoneCallAVMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PhoneCallAttribute and conformance PhoneCallAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallAttribute and conformance PhoneCallAttribute;
  if (!lazy protocol witness table cache variable for type PhoneCallAttribute and conformance PhoneCallAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallAttribute and conformance PhoneCallAttribute);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallAttribute and conformance PhoneCallAttribute;
  if (!lazy protocol witness table cache variable for type PhoneCallAttribute and conformance PhoneCallAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallAttribute and conformance PhoneCallAttribute);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallAttribute and conformance PhoneCallAttribute;
  if (!lazy protocol witness table cache variable for type PhoneCallAttribute and conformance PhoneCallAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallAttribute and conformance PhoneCallAttribute);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallAttribute and conformance PhoneCallAttribute;
  if (!lazy protocol witness table cache variable for type PhoneCallAttribute and conformance PhoneCallAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallAttribute and conformance PhoneCallAttribute);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallAttribute and conformance PhoneCallAttribute;
  if (!lazy protocol witness table cache variable for type PhoneCallAttribute and conformance PhoneCallAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallAttribute and conformance PhoneCallAttribute);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallAttribute and conformance PhoneCallAttribute;
  if (!lazy protocol witness table cache variable for type PhoneCallAttribute and conformance PhoneCallAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallAttribute and conformance PhoneCallAttribute);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PhoneCallAttribute()
{
  return lazy protocol witness table accessor for type [SiriKitDisambiguationItem] and conformance [A](&lazy protocol witness table cache variable for type [PhoneCallAttribute] and conformance [A], &demangling cache variable for type metadata for [PhoneCallAttribute]);
}

unint64_t lazy protocol witness table accessor for type PhoneCallAudioRoute and conformance PhoneCallAudioRoute()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallAudioRoute and conformance PhoneCallAudioRoute;
  if (!lazy protocol witness table cache variable for type PhoneCallAudioRoute and conformance PhoneCallAudioRoute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallAudioRoute and conformance PhoneCallAudioRoute);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallAudioRoute and conformance PhoneCallAudioRoute;
  if (!lazy protocol witness table cache variable for type PhoneCallAudioRoute and conformance PhoneCallAudioRoute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallAudioRoute and conformance PhoneCallAudioRoute);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallAudioRoute and conformance PhoneCallAudioRoute;
  if (!lazy protocol witness table cache variable for type PhoneCallAudioRoute and conformance PhoneCallAudioRoute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallAudioRoute and conformance PhoneCallAudioRoute);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallAudioRoute and conformance PhoneCallAudioRoute;
  if (!lazy protocol witness table cache variable for type PhoneCallAudioRoute and conformance PhoneCallAudioRoute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallAudioRoute and conformance PhoneCallAudioRoute);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallAudioRoute and conformance PhoneCallAudioRoute;
  if (!lazy protocol witness table cache variable for type PhoneCallAudioRoute and conformance PhoneCallAudioRoute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallAudioRoute and conformance PhoneCallAudioRoute);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallAudioRoute and conformance PhoneCallAudioRoute;
  if (!lazy protocol witness table cache variable for type PhoneCallAudioRoute and conformance PhoneCallAudioRoute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallAudioRoute and conformance PhoneCallAudioRoute);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PhoneCallAudioRoute()
{
  return lazy protocol witness table accessor for type [SiriKitDisambiguationItem] and conformance [A](&lazy protocol witness table cache variable for type [PhoneCallAudioRoute] and conformance [A], &demangling cache variable for type metadata for [PhoneCallAudioRoute]);
}

unint64_t lazy protocol witness table accessor for type PhoneCallCapability and conformance PhoneCallCapability()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallCapability and conformance PhoneCallCapability;
  if (!lazy protocol witness table cache variable for type PhoneCallCapability and conformance PhoneCallCapability)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallCapability and conformance PhoneCallCapability);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallCapability and conformance PhoneCallCapability;
  if (!lazy protocol witness table cache variable for type PhoneCallCapability and conformance PhoneCallCapability)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallCapability and conformance PhoneCallCapability);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallCapability and conformance PhoneCallCapability;
  if (!lazy protocol witness table cache variable for type PhoneCallCapability and conformance PhoneCallCapability)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallCapability and conformance PhoneCallCapability);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallCapability and conformance PhoneCallCapability;
  if (!lazy protocol witness table cache variable for type PhoneCallCapability and conformance PhoneCallCapability)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallCapability and conformance PhoneCallCapability);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallCapability and conformance PhoneCallCapability;
  if (!lazy protocol witness table cache variable for type PhoneCallCapability and conformance PhoneCallCapability)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallCapability and conformance PhoneCallCapability);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallCapability and conformance PhoneCallCapability;
  if (!lazy protocol witness table cache variable for type PhoneCallCapability and conformance PhoneCallCapability)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallCapability and conformance PhoneCallCapability);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PhoneCallCapability()
{
  return lazy protocol witness table accessor for type [SiriKitDisambiguationItem] and conformance [A](&lazy protocol witness table cache variable for type [PhoneCallCapability] and conformance [A], &demangling cache variable for type metadata for [PhoneCallCapability]);
}

unint64_t lazy protocol witness table accessor for type PhoneCallPreferredProvider and conformance PhoneCallPreferredProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallPreferredProvider and conformance PhoneCallPreferredProvider;
  if (!lazy protocol witness table cache variable for type PhoneCallPreferredProvider and conformance PhoneCallPreferredProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallPreferredProvider and conformance PhoneCallPreferredProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallPreferredProvider and conformance PhoneCallPreferredProvider;
  if (!lazy protocol witness table cache variable for type PhoneCallPreferredProvider and conformance PhoneCallPreferredProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallPreferredProvider and conformance PhoneCallPreferredProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallPreferredProvider and conformance PhoneCallPreferredProvider;
  if (!lazy protocol witness table cache variable for type PhoneCallPreferredProvider and conformance PhoneCallPreferredProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallPreferredProvider and conformance PhoneCallPreferredProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallPreferredProvider and conformance PhoneCallPreferredProvider;
  if (!lazy protocol witness table cache variable for type PhoneCallPreferredProvider and conformance PhoneCallPreferredProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallPreferredProvider and conformance PhoneCallPreferredProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallPreferredProvider and conformance PhoneCallPreferredProvider;
  if (!lazy protocol witness table cache variable for type PhoneCallPreferredProvider and conformance PhoneCallPreferredProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallPreferredProvider and conformance PhoneCallPreferredProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallPreferredProvider and conformance PhoneCallPreferredProvider;
  if (!lazy protocol witness table cache variable for type PhoneCallPreferredProvider and conformance PhoneCallPreferredProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallPreferredProvider and conformance PhoneCallPreferredProvider);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PhoneCallPreferredProvider()
{
  return lazy protocol witness table accessor for type [SiriKitDisambiguationItem] and conformance [A](&lazy protocol witness table cache variable for type [PhoneCallPreferredProvider] and conformance [A], &demangling cache variable for type metadata for [PhoneCallPreferredProvider]);
}

unint64_t lazy protocol witness table accessor for type PhoneCallConfirmation and conformance PhoneCallConfirmation()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallConfirmation and conformance PhoneCallConfirmation;
  if (!lazy protocol witness table cache variable for type PhoneCallConfirmation and conformance PhoneCallConfirmation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallConfirmation and conformance PhoneCallConfirmation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallConfirmation and conformance PhoneCallConfirmation;
  if (!lazy protocol witness table cache variable for type PhoneCallConfirmation and conformance PhoneCallConfirmation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallConfirmation and conformance PhoneCallConfirmation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallConfirmation and conformance PhoneCallConfirmation;
  if (!lazy protocol witness table cache variable for type PhoneCallConfirmation and conformance PhoneCallConfirmation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallConfirmation and conformance PhoneCallConfirmation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallConfirmation and conformance PhoneCallConfirmation;
  if (!lazy protocol witness table cache variable for type PhoneCallConfirmation and conformance PhoneCallConfirmation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallConfirmation and conformance PhoneCallConfirmation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallConfirmation and conformance PhoneCallConfirmation;
  if (!lazy protocol witness table cache variable for type PhoneCallConfirmation and conformance PhoneCallConfirmation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallConfirmation and conformance PhoneCallConfirmation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallConfirmation and conformance PhoneCallConfirmation;
  if (!lazy protocol witness table cache variable for type PhoneCallConfirmation and conformance PhoneCallConfirmation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallConfirmation and conformance PhoneCallConfirmation);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PhoneCallConfirmation()
{
  return lazy protocol witness table accessor for type [SiriKitDisambiguationItem] and conformance [A](&lazy protocol witness table cache variable for type [PhoneCallConfirmation] and conformance [A], &demangling cache variable for type metadata for [PhoneCallConfirmation]);
}

unint64_t lazy protocol witness table accessor for type PhoneCallNoun and conformance PhoneCallNoun()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallNoun and conformance PhoneCallNoun;
  if (!lazy protocol witness table cache variable for type PhoneCallNoun and conformance PhoneCallNoun)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallNoun and conformance PhoneCallNoun);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallNoun and conformance PhoneCallNoun;
  if (!lazy protocol witness table cache variable for type PhoneCallNoun and conformance PhoneCallNoun)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallNoun and conformance PhoneCallNoun);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallNoun and conformance PhoneCallNoun;
  if (!lazy protocol witness table cache variable for type PhoneCallNoun and conformance PhoneCallNoun)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallNoun and conformance PhoneCallNoun);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallNoun and conformance PhoneCallNoun;
  if (!lazy protocol witness table cache variable for type PhoneCallNoun and conformance PhoneCallNoun)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallNoun and conformance PhoneCallNoun);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallNoun and conformance PhoneCallNoun;
  if (!lazy protocol witness table cache variable for type PhoneCallNoun and conformance PhoneCallNoun)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallNoun and conformance PhoneCallNoun);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallNoun and conformance PhoneCallNoun;
  if (!lazy protocol witness table cache variable for type PhoneCallNoun and conformance PhoneCallNoun)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallNoun and conformance PhoneCallNoun);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PhoneCallNoun()
{
  return lazy protocol witness table accessor for type [SiriKitDisambiguationItem] and conformance [A](&lazy protocol witness table cache variable for type [PhoneCallNoun] and conformance [A], &demangling cache variable for type metadata for [PhoneCallNoun]);
}

unint64_t lazy protocol witness table accessor for type PhoneCallReference and conformance PhoneCallReference()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallReference and conformance PhoneCallReference;
  if (!lazy protocol witness table cache variable for type PhoneCallReference and conformance PhoneCallReference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallReference and conformance PhoneCallReference);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallReference and conformance PhoneCallReference;
  if (!lazy protocol witness table cache variable for type PhoneCallReference and conformance PhoneCallReference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallReference and conformance PhoneCallReference);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallReference and conformance PhoneCallReference;
  if (!lazy protocol witness table cache variable for type PhoneCallReference and conformance PhoneCallReference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallReference and conformance PhoneCallReference);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallReference and conformance PhoneCallReference;
  if (!lazy protocol witness table cache variable for type PhoneCallReference and conformance PhoneCallReference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallReference and conformance PhoneCallReference);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallReference and conformance PhoneCallReference;
  if (!lazy protocol witness table cache variable for type PhoneCallReference and conformance PhoneCallReference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallReference and conformance PhoneCallReference);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallReference and conformance PhoneCallReference;
  if (!lazy protocol witness table cache variable for type PhoneCallReference and conformance PhoneCallReference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallReference and conformance PhoneCallReference);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PhoneCallReference()
{
  return lazy protocol witness table accessor for type [SiriKitDisambiguationItem] and conformance [A](&lazy protocol witness table cache variable for type [PhoneCallReference] and conformance [A], &demangling cache variable for type metadata for [PhoneCallReference]);
}

unint64_t lazy protocol witness table accessor for type PhoneCallContactReference and conformance PhoneCallContactReference()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallContactReference and conformance PhoneCallContactReference;
  if (!lazy protocol witness table cache variable for type PhoneCallContactReference and conformance PhoneCallContactReference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallContactReference and conformance PhoneCallContactReference);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallContactReference and conformance PhoneCallContactReference;
  if (!lazy protocol witness table cache variable for type PhoneCallContactReference and conformance PhoneCallContactReference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallContactReference and conformance PhoneCallContactReference);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallContactReference and conformance PhoneCallContactReference;
  if (!lazy protocol witness table cache variable for type PhoneCallContactReference and conformance PhoneCallContactReference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallContactReference and conformance PhoneCallContactReference);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallContactReference and conformance PhoneCallContactReference;
  if (!lazy protocol witness table cache variable for type PhoneCallContactReference and conformance PhoneCallContactReference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallContactReference and conformance PhoneCallContactReference);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallContactReference and conformance PhoneCallContactReference;
  if (!lazy protocol witness table cache variable for type PhoneCallContactReference and conformance PhoneCallContactReference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallContactReference and conformance PhoneCallContactReference);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallContactReference and conformance PhoneCallContactReference;
  if (!lazy protocol witness table cache variable for type PhoneCallContactReference and conformance PhoneCallContactReference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallContactReference and conformance PhoneCallContactReference);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PhoneCallContactReference()
{
  return lazy protocol witness table accessor for type [SiriKitDisambiguationItem] and conformance [A](&lazy protocol witness table cache variable for type [PhoneCallContactReference] and conformance [A], &demangling cache variable for type metadata for [PhoneCallContactReference]);
}

unint64_t lazy protocol witness table accessor for type PhoneCallVerb and conformance PhoneCallVerb()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallVerb and conformance PhoneCallVerb;
  if (!lazy protocol witness table cache variable for type PhoneCallVerb and conformance PhoneCallVerb)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallVerb and conformance PhoneCallVerb);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallVerb and conformance PhoneCallVerb;
  if (!lazy protocol witness table cache variable for type PhoneCallVerb and conformance PhoneCallVerb)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallVerb and conformance PhoneCallVerb);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallVerb and conformance PhoneCallVerb;
  if (!lazy protocol witness table cache variable for type PhoneCallVerb and conformance PhoneCallVerb)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallVerb and conformance PhoneCallVerb);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallVerb and conformance PhoneCallVerb;
  if (!lazy protocol witness table cache variable for type PhoneCallVerb and conformance PhoneCallVerb)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallVerb and conformance PhoneCallVerb);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallVerb and conformance PhoneCallVerb;
  if (!lazy protocol witness table cache variable for type PhoneCallVerb and conformance PhoneCallVerb)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallVerb and conformance PhoneCallVerb);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallVerb and conformance PhoneCallVerb;
  if (!lazy protocol witness table cache variable for type PhoneCallVerb and conformance PhoneCallVerb)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallVerb and conformance PhoneCallVerb);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PhoneCallVerb()
{
  return lazy protocol witness table accessor for type [SiriKitDisambiguationItem] and conformance [A](&lazy protocol witness table cache variable for type [PhoneCallVerb] and conformance [A], &demangling cache variable for type metadata for [PhoneCallVerb]);
}

unint64_t lazy protocol witness table accessor for type VoiceMail.VoiceMailNoun and conformance VoiceMail.VoiceMailNoun()
{
  unint64_t result = lazy protocol witness table cache variable for type VoiceMail.VoiceMailNoun and conformance VoiceMail.VoiceMailNoun;
  if (!lazy protocol witness table cache variable for type VoiceMail.VoiceMailNoun and conformance VoiceMail.VoiceMailNoun)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceMail.VoiceMailNoun and conformance VoiceMail.VoiceMailNoun);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceMail.VoiceMailNoun and conformance VoiceMail.VoiceMailNoun;
  if (!lazy protocol witness table cache variable for type VoiceMail.VoiceMailNoun and conformance VoiceMail.VoiceMailNoun)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceMail.VoiceMailNoun and conformance VoiceMail.VoiceMailNoun);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceMail.VoiceMailNoun and conformance VoiceMail.VoiceMailNoun;
  if (!lazy protocol witness table cache variable for type VoiceMail.VoiceMailNoun and conformance VoiceMail.VoiceMailNoun)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceMail.VoiceMailNoun and conformance VoiceMail.VoiceMailNoun);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceMail.VoiceMailNoun and conformance VoiceMail.VoiceMailNoun;
  if (!lazy protocol witness table cache variable for type VoiceMail.VoiceMailNoun and conformance VoiceMail.VoiceMailNoun)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceMail.VoiceMailNoun and conformance VoiceMail.VoiceMailNoun);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceMail.VoiceMailNoun and conformance VoiceMail.VoiceMailNoun;
  if (!lazy protocol witness table cache variable for type VoiceMail.VoiceMailNoun and conformance VoiceMail.VoiceMailNoun)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceMail.VoiceMailNoun and conformance VoiceMail.VoiceMailNoun);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceMail.VoiceMailNoun and conformance VoiceMail.VoiceMailNoun;
  if (!lazy protocol witness table cache variable for type VoiceMail.VoiceMailNoun and conformance VoiceMail.VoiceMailNoun)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceMail.VoiceMailNoun and conformance VoiceMail.VoiceMailNoun);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in VoiceMail.VoiceMailNoun()
{
  return lazy protocol witness table accessor for type [SiriKitDisambiguationItem] and conformance [A](&lazy protocol witness table cache variable for type [VoiceMail.VoiceMailNoun] and conformance [A], &demangling cache variable for type metadata for [VoiceMail.VoiceMailNoun]);
}

unint64_t lazy protocol witness table accessor for type VoiceMail.VoiceMailVerb and conformance VoiceMail.VoiceMailVerb()
{
  unint64_t result = lazy protocol witness table cache variable for type VoiceMail.VoiceMailVerb and conformance VoiceMail.VoiceMailVerb;
  if (!lazy protocol witness table cache variable for type VoiceMail.VoiceMailVerb and conformance VoiceMail.VoiceMailVerb)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceMail.VoiceMailVerb and conformance VoiceMail.VoiceMailVerb);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceMail.VoiceMailVerb and conformance VoiceMail.VoiceMailVerb;
  if (!lazy protocol witness table cache variable for type VoiceMail.VoiceMailVerb and conformance VoiceMail.VoiceMailVerb)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceMail.VoiceMailVerb and conformance VoiceMail.VoiceMailVerb);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceMail.VoiceMailVerb and conformance VoiceMail.VoiceMailVerb;
  if (!lazy protocol witness table cache variable for type VoiceMail.VoiceMailVerb and conformance VoiceMail.VoiceMailVerb)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceMail.VoiceMailVerb and conformance VoiceMail.VoiceMailVerb);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceMail.VoiceMailVerb and conformance VoiceMail.VoiceMailVerb;
  if (!lazy protocol witness table cache variable for type VoiceMail.VoiceMailVerb and conformance VoiceMail.VoiceMailVerb)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceMail.VoiceMailVerb and conformance VoiceMail.VoiceMailVerb);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceMail.VoiceMailVerb and conformance VoiceMail.VoiceMailVerb;
  if (!lazy protocol witness table cache variable for type VoiceMail.VoiceMailVerb and conformance VoiceMail.VoiceMailVerb)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceMail.VoiceMailVerb and conformance VoiceMail.VoiceMailVerb);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceMail.VoiceMailVerb and conformance VoiceMail.VoiceMailVerb;
  if (!lazy protocol witness table cache variable for type VoiceMail.VoiceMailVerb and conformance VoiceMail.VoiceMailVerb)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceMail.VoiceMailVerb and conformance VoiceMail.VoiceMailVerb);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in VoiceMail.VoiceMailVerb()
{
  return lazy protocol witness table accessor for type [SiriKitDisambiguationItem] and conformance [A](&lazy protocol witness table cache variable for type [VoiceMail.VoiceMailVerb] and conformance [A], &demangling cache variable for type metadata for [VoiceMail.VoiceMailVerb]);
}

unint64_t lazy protocol witness table accessor for type PhoneCallDestinationType and conformance PhoneCallDestinationType()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallDestinationType and conformance PhoneCallDestinationType;
  if (!lazy protocol witness table cache variable for type PhoneCallDestinationType and conformance PhoneCallDestinationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallDestinationType and conformance PhoneCallDestinationType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallDestinationType and conformance PhoneCallDestinationType;
  if (!lazy protocol witness table cache variable for type PhoneCallDestinationType and conformance PhoneCallDestinationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallDestinationType and conformance PhoneCallDestinationType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallDestinationType and conformance PhoneCallDestinationType;
  if (!lazy protocol witness table cache variable for type PhoneCallDestinationType and conformance PhoneCallDestinationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallDestinationType and conformance PhoneCallDestinationType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallDestinationType and conformance PhoneCallDestinationType;
  if (!lazy protocol witness table cache variable for type PhoneCallDestinationType and conformance PhoneCallDestinationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallDestinationType and conformance PhoneCallDestinationType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallDestinationType and conformance PhoneCallDestinationType;
  if (!lazy protocol witness table cache variable for type PhoneCallDestinationType and conformance PhoneCallDestinationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallDestinationType and conformance PhoneCallDestinationType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallDestinationType and conformance PhoneCallDestinationType;
  if (!lazy protocol witness table cache variable for type PhoneCallDestinationType and conformance PhoneCallDestinationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallDestinationType and conformance PhoneCallDestinationType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PhoneCallDestinationType()
{
  return lazy protocol witness table accessor for type [SiriKitDisambiguationItem] and conformance [A](&lazy protocol witness table cache variable for type [PhoneCallDestinationType] and conformance [A], &demangling cache variable for type metadata for [PhoneCallDestinationType]);
}

unint64_t lazy protocol witness table accessor for type PhoneCallContactRole.NLv3 and conformance PhoneCallContactRole.NLv3()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallContactRole.NLv3 and conformance PhoneCallContactRole.NLv3;
  if (!lazy protocol witness table cache variable for type PhoneCallContactRole.NLv3 and conformance PhoneCallContactRole.NLv3)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallContactRole.NLv3 and conformance PhoneCallContactRole.NLv3);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallContactRole.NLv3 and conformance PhoneCallContactRole.NLv3;
  if (!lazy protocol witness table cache variable for type PhoneCallContactRole.NLv3 and conformance PhoneCallContactRole.NLv3)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallContactRole.NLv3 and conformance PhoneCallContactRole.NLv3);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallContactRole.NLv3 and conformance PhoneCallContactRole.NLv3;
  if (!lazy protocol witness table cache variable for type PhoneCallContactRole.NLv3 and conformance PhoneCallContactRole.NLv3)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallContactRole.NLv3 and conformance PhoneCallContactRole.NLv3);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallContactRole.NLv3 and conformance PhoneCallContactRole.NLv3;
  if (!lazy protocol witness table cache variable for type PhoneCallContactRole.NLv3 and conformance PhoneCallContactRole.NLv3)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallContactRole.NLv3 and conformance PhoneCallContactRole.NLv3);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallContactRole.NLv3 and conformance PhoneCallContactRole.NLv3;
  if (!lazy protocol witness table cache variable for type PhoneCallContactRole.NLv3 and conformance PhoneCallContactRole.NLv3)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallContactRole.NLv3 and conformance PhoneCallContactRole.NLv3);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallContactRole.NLv3 and conformance PhoneCallContactRole.NLv3;
  if (!lazy protocol witness table cache variable for type PhoneCallContactRole.NLv3 and conformance PhoneCallContactRole.NLv3)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallContactRole.NLv3 and conformance PhoneCallContactRole.NLv3);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PhoneCallContactRole.NLv3()
{
  return lazy protocol witness table accessor for type [SiriKitDisambiguationItem] and conformance [A](&lazy protocol witness table cache variable for type [PhoneCallContactRole.NLv3] and conformance [A], &demangling cache variable for type metadata for [PhoneCallContactRole.NLv3]);
}

unint64_t lazy protocol witness table accessor for type PhoneCallContactRole and conformance PhoneCallContactRole()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallContactRole and conformance PhoneCallContactRole;
  if (!lazy protocol witness table cache variable for type PhoneCallContactRole and conformance PhoneCallContactRole)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallContactRole and conformance PhoneCallContactRole);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PhoneCallAttribute(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF2)
  {
    unsigned int v6 = ((a2 - 243) >> 8) + 1;
    *unint64_t result = a2 + 13;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x192008);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 13;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PhoneCallReference(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 34 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 34) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xDE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xDD)
  {
    unsigned int v6 = ((a2 - 222) >> 8) + 1;
    *unint64_t result = a2 + 34;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x19214CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 34;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PhoneCallContactReference(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xDB)
  {
    if (a2 + 37 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 37) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 38;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x26;
  int v5 = v6 - 38;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

void type metadata accessor for PhoneCallContactReference()
{
}

void type metadata accessor for VoiceMail()
{
}

unsigned char *storeEnumTagSinglePayload for PhoneCallAVMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        unint64_t result = (unsigned char *)OUTLINED_FUNCTION_219((uint64_t)result, v6);
        break;
      case 2:
        unint64_t result = (unsigned char *)OUTLINED_FUNCTION_216((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x192320);
      case 4:
        unint64_t result = (unsigned char *)OUTLINED_FUNCTION_217((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          unint64_t result = OUTLINED_FUNCTION_218(result, a2 + 1);
        break;
    }
  }
  return result;
}

void type metadata accessor for PhoneCallContactRole()
{
}

unsigned char *storeEnumTagSinglePayload for PhoneCallPreferredProvider(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        unint64_t result = (unsigned char *)OUTLINED_FUNCTION_219((uint64_t)result, v6);
        break;
      case 2:
        unint64_t result = (unsigned char *)OUTLINED_FUNCTION_216((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x192460);
      case 4:
        unint64_t result = (unsigned char *)OUTLINED_FUNCTION_217((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          unint64_t result = OUTLINED_FUNCTION_218(result, a2 + 2);
        break;
    }
  }
  return result;
}

void type metadata accessor for PhoneCallContactRole.NLv3()
{
}

uint64_t lazy protocol witness table accessor for type ContactActionType and conformance ContactActionType(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_3_50()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_4_49()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_10_30()
{
  return 0x64657661736E75;
}

uint64_t OUTLINED_FUNCTION_13_23()
{
  return 0x7373656E69737562;
}

uint64_t OUTLINED_FUNCTION_15_23()
{
  return 0x6465766965636572;
}

uint64_t OUTLINED_FUNCTION_17_19()
{
  return 0x6563696F5677656ELL;
}

uint64_t OUTLINED_FUNCTION_18_21()
{
  return 0x746E6572727563;
}

uint64_t OUTLINED_FUNCTION_22_20()
{
  return 0x646C6F486E6FLL;
}

uint64_t OUTLINED_FUNCTION_23_18()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_26_18()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_30_15()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_34_9()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_35_16()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_37_12()
{
  return 0x676E696F6774756FLL;
}

uint64_t OUTLINED_FUNCTION_44_12()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_46_8()
{
  return 0x615265746164;
}

uint64_t OUTLINED_FUNCTION_47_10()
{
  return 0x696F6774756FLL;
}

uint64_t OUTLINED_FUNCTION_48_9()
{
  return 0x7072656B61657073;
}

unint64_t OUTLINED_FUNCTION_51_7()
{
  return 0xD000000000000014;
}

uint64_t OUTLINED_FUNCTION_52_9()
{
  return 7824750;
}

uint64_t OUTLINED_FUNCTION_55_8()
{
  return 0x732079746E657774;
}

uint64_t OUTLINED_FUNCTION_58_8()
{
  return 1953718636;
}

uint64_t OUTLINED_FUNCTION_59_5()
{
  return 0x206D7269666E6F63;
}

uint64_t OUTLINED_FUNCTION_62_8()
{
  return 0x636972656E6547;
}

uint64_t OUTLINED_FUNCTION_67_5()
{
  return 0x742079746E657774;
}

uint64_t OUTLINED_FUNCTION_68_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_70_3()
{
  return 0x6565746E65766573;
}

uint64_t OUTLINED_FUNCTION_72_6()
{
  return 0x7261506472696854;
}

uint64_t OUTLINED_FUNCTION_73_3(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return SiriPhoneContact.getEmergencyType()(v1, v2);
}

uint64_t OUTLINED_FUNCTION_75_3()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_77_3()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_78_3(char a1)
{
  return PhoneCallVerb.rawValue.getter(a1);
}

uint64_t OUTLINED_FUNCTION_81_4()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_84_4()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_86_3()
{
  return 0x206D7269666E6F63;
}

uint64_t OUTLINED_FUNCTION_88_4()
{
  return 0x54746C7561666564;
}

uint64_t OUTLINED_FUNCTION_90_3()
{
  return 0x63207463656A6572;
}

uint64_t OUTLINED_FUNCTION_92_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_93_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_94_3()
{
  return 0x68746E6576656C65;
}

uint64_t OUTLINED_FUNCTION_102_2()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_103_1()
{
  return 0x662079746E657774;
}

uint64_t OUTLINED_FUNCTION_105_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_110_0()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_111_0()
{
  return 0x5F6C6172656E6567;
}

uint64_t OUTLINED_FUNCTION_114(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return v1;
}

uint64_t OUTLINED_FUNCTION_115_0()
{
  return 0x6563696F5677656ELL;
}

uint64_t OUTLINED_FUNCTION_116_0()
{
  return swift_bridgeObjectRetain();
}

unint64_t OUTLINED_FUNCTION_117_0()
{
  return 0xD000000000000010;
}

uint64_t OUTLINED_FUNCTION_122_0()
{
  return v0;
}

unint64_t OUTLINED_FUNCTION_123_0()
{
  return 0xD000000000000010;
}

uint64_t OUTLINED_FUNCTION_124_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_125_0()
{
  return 0x656D697465636166;
}

uint64_t OUTLINED_FUNCTION_130_0()
{
  return 0x6C65636E6163;
}

uint64_t OUTLINED_FUNCTION_131_0()
{
  return 0x656C6464696DLL;
}

uint64_t OUTLINED_FUNCTION_132_0()
{
  return 0x646E6F636573;
}

uint64_t OUTLINED_FUNCTION_133_0@<X0>(uint64_t a1@<X8>)
{
  if (v1 == 1) {
    return a1 + 1;
  }
  else {
    return a1;
  }
}

uint64_t OUTLINED_FUNCTION_136_0()
{
  return outlined init with copy of SiriPhoneContact();
}

uint64_t OUTLINED_FUNCTION_138_0()
{
  return 0x676E615265746164;
}

uint64_t OUTLINED_FUNCTION_139_0()
{
  return 0x746F6F7465756C62;
}

uint64_t OUTLINED_FUNCTION_140_0()
{
  return 0x636E656772656D65;
}

uint64_t OUTLINED_FUNCTION_143_0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  return one-time initialization function for voiceMailNoun(a1, a2, a3 & 0xFFFFFFFFFFFFLL | 0xED00000000000000, a4);
}

uint64_t OUTLINED_FUNCTION_145_0(unsigned int a1)
{
  return a1 | 0x6E65657400000000;
}

uint64_t OUTLINED_FUNCTION_147_1()
{
  return 0x68746E696ELL;
}

uint64_t OUTLINED_FUNCTION_149_0(uint64_t a1)
{
  *(void *)(v1 - 176) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_150_0()
{
  return 2037277037;
}

uint64_t OUTLINED_FUNCTION_153_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_154_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_156_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_166()
{
  return 0x6361746E6F63;
}

uint64_t OUTLINED_FUNCTION_173()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_179()
{
  return 0x317473726966;
}

uint64_t OUTLINED_FUNCTION_184()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_185()
{
  return v0;
}

unint64_t OUTLINED_FUNCTION_187_0()
{
  return 0xD000000000000015;
}

uint64_t OUTLINED_FUNCTION_191()
{
  return 0x6C6169646572;
}

uint64_t OUTLINED_FUNCTION_192()
{
  return 0x656D697465636166;
}

uint64_t OUTLINED_FUNCTION_200(uint64_t a1)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v1, (uint64_t *)(v2 - 168));
}

PhoneCallFlowDelegatePlugin::PhoneCallContactReference_optional OUTLINED_FUNCTION_202()
{
  return SiriPhoneContact.getContactReference()();
}

uint64_t OUTLINED_FUNCTION_203()
{
  return PhoneCallNLIntent.applicationId.getter();
}

uint64_t OUTLINED_FUNCTION_205()
{
  return v0;
}

unint64_t OUTLINED_FUNCTION_206()
{
  return 0xEA00000000006874;
}

uint64_t OUTLINED_FUNCTION_207()
{
  return 0x63207463656A6572;
}

uint64_t OUTLINED_FUNCTION_208_0()
{
  return 28526;
}

uint64_t OUTLINED_FUNCTION_211_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_212_0()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_216@<X0>(uint64_t result@<X0>, __int16 a2@<W8>)
{
  *(_WORD *)(result + 1) = a2;
  return result;
}

unsigned char *OUTLINED_FUNCTION_218@<X0>(unsigned char *result@<X0>, char a2@<W8>)
{
  *uint64_t result = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_219@<X0>(uint64_t result@<X0>, char a2@<W8>)
{
  *(unsigned char *)(result + 1) = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_220@<X0>(int a1@<W8>)
{
  return (a1 + 1);
}

unint64_t OUTLINED_FUNCTION_223(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

unint64_t OUTLINED_FUNCTION_224()
{
  return 0xD000000000000015;
}

uint64_t OUTLINED_FUNCTION_227()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_228()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_234()
{
  return 0x6573756170;
}

uint64_t OUTLINED_FUNCTION_235()
{
  return 0x656D75736572;
}

uint64_t OUTLINED_FUNCTION_236()
{
  return 0x746165706572;
}

uint64_t OUTLINED_FUNCTION_237()
{
  return 0x6574656C6564;
}

uint64_t OUTLINED_FUNCTION_238()
{
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for PhoneCallMetrics.Builder.timeToEstablish : PhoneCallMetrics.Builder@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 96))();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t key path setter for PhoneCallMetrics.Builder.timeToEstablish : PhoneCallMetrics.Builder(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void))(**(void **)a2 + 104))(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t PhoneCallMetrics.Builder.timeToEstablish.getter()
{
  OUTLINED_FUNCTION_5_21();
  return *(void *)(v0 + 16);
}

uint64_t PhoneCallMetrics.Builder.timeToEstablish.setter(uint64_t a1, char a2)
{
  uint64_t result = OUTLINED_FUNCTION_6_16();
  *(void *)(v2 + 16) = a1;
  *(unsigned char *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t key path getter for PhoneCallMetrics.Builder.duration : PhoneCallMetrics.Builder@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 120))();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t key path setter for PhoneCallMetrics.Builder.duration : PhoneCallMetrics.Builder(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void))(**(void **)a2 + 128))(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t PhoneCallMetrics.Builder.duration.getter()
{
  OUTLINED_FUNCTION_5_21();
  return *(void *)(v0 + 32);
}

uint64_t PhoneCallMetrics.Builder.duration.setter(uint64_t a1, char a2)
{
  uint64_t result = OUTLINED_FUNCTION_6_16();
  *(void *)(v2 + 32) = a1;
  *(unsigned char *)(v2 + 40) = a2 & 1;
  return result;
}

uint64_t (*PhoneCallMetrics.Builder.duration.modify())()
{
  return PhoneFlow.state.modify;
}

uint64_t PhoneCallMetrics.Builder.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(unsigned char *)(result + 24) = 1;
  *(void *)(result + 32) = 0;
  *(unsigned char *)(result + 40) = 1;
  return result;
}

uint64_t PhoneCallMetrics.Builder.init()()
{
  uint64_t result = v0;
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 24) = 1;
  *(void *)(v0 + 32) = 0;
  *(unsigned char *)(v0 + 40) = 1;
  return result;
}

uint64_t PhoneCallMetrics.Builder.withTimeToEstablish(_:)()
{
  OUTLINED_FUNCTION_22();
  (*(void (**)(void))(v0 + 104))();

  return swift_retain();
}

uint64_t PhoneCallMetrics.Builder.withDuration(_:)()
{
  OUTLINED_FUNCTION_22();
  (*(void (**)(void))(v0 + 128))();

  return swift_retain();
}

uint64_t PhoneCallMetrics.Builder.build()()
{
  type metadata accessor for PhoneCallMetrics();
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = swift_retain();
  PhoneCallMetrics.init(builder:)(v1);
  return v0;
}

uint64_t PhoneCallMetrics.__allocating_init(builder:)(uint64_t a1)
{
  OUTLINED_FUNCTION_3_51();
  uint64_t v2 = swift_allocObject();
  PhoneCallMetrics.init(builder:)(a1);
  return v2;
}

uint64_t type metadata accessor for PhoneCallMetrics()
{
  return self;
}

uint64_t PhoneCallMetrics.Builder.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

unint64_t static PhoneCallMetrics.catTypeName.getter()
{
  return 0xD000000000000011;
}

uint64_t key path setter for PhoneCallMetrics.mockGlobals : PhoneCallMetrics(id *a1, uint64_t a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))(**(void **)a2 + 128);
  id v4 = *a1;
  return v3(v2);
}

void PhoneCallMetrics.mockGlobals.setter(uint64_t a1)
{
  OUTLINED_FUNCTION_6_16();
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)(v1 + 16) = a1;
}

uint64_t PhoneCallMetrics.timeToEstablish.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t PhoneCallMetrics.duration.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t PhoneCallMetrics.init(builder:)(uint64_t a1)
{
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
  *(unsigned char *)(v1 + 32) = v2 & 1;
  OUTLINED_FUNCTION_22();
  uint64_t v4 = (*(uint64_t (**)(void))(v3 + 120))();
  char v6 = v5;
  swift_release();
  *(void *)(v1 + 40) = v4;
  *(unsigned char *)(v1 + 48) = v6 & 1;
  return v1;
}

uint64_t PhoneCallMetrics.__allocating_init(timeToEstablish:duration:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  type metadata accessor for PhoneCallMetrics.Builder();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = 0;
  *(unsigned char *)(v9 + 24) = 1;
  *(void *)(v9 + 32) = 0;
  *(unsigned char *)(v9 + 40) = 1;
  OUTLINED_FUNCTION_6_16();
  *(void *)(v9 + 16) = a1;
  *(unsigned char *)(v9 + 24) = a2 & 1;
  OUTLINED_FUNCTION_6_16();
  *(void *)(v9 + 32) = a3;
  *(unsigned char *)(v9 + 40) = a4 & 1;
  return (*(uint64_t (**)(uint64_t))(v4 + 144))(v9);
}

uint64_t type metadata accessor for PhoneCallMetrics.Builder()
{
  return self;
}

uint64_t PhoneCallMetrics.getProperty(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (result != 0x73456F54656D6974 || a2 != 0xEF6873696C626174)
  {
    uint64_t v7 = result;
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) == 0)
    {
      BOOL v9 = v7 == 0x6E6F697461727564 && a2 == 0xE800000000000000;
      if (v9 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        if ((*(unsigned char *)(v3 + 48) & 1) == 0)
        {
          uint64_t v8 = *(void *)(v3 + 40);
          goto LABEL_16;
        }
      }
LABEL_14:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      return result;
    }
  }
  if (*(unsigned char *)(v3 + 32)) {
    goto LABEL_14;
  }
  uint64_t v8 = *(void *)(v3 + 24);
LABEL_16:
  *(void *)(a3 + 24) = &type metadata for Double;
  *(void *)a3 = v8;
  return result;
}

PhoneCallFlowDelegatePlugin::PhoneCallMetrics::CodingKeys_optional __swiftcall PhoneCallMetrics.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PhoneCallMetrics.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.value = PhoneCallFlowDelegatePlugin_PhoneCallMetrics_CodingKeys_duration;
  }
  else {
    v4.value = PhoneCallFlowDelegatePlugin_PhoneCallMetrics_CodingKeys_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t PhoneCallMetrics.CodingKeys.rawValue.getter(char a1)
{
  if (a1) {
    return 0x6E6F697461727564;
  }
  else {
    return 0x73456F54656D6974;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhoneCallMetrics.CodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PhoneCallMetrics.CodingKeys()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhoneCallMetrics.CodingKeys()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PhoneCallMetrics.CodingKeys()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

PhoneCallFlowDelegatePlugin::PhoneCallMetrics::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PhoneCallMetrics.CodingKeys@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallMetrics::CodingKeys_optional *a2@<X8>)
{
  result.value = PhoneCallMetrics.CodingKeys.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PhoneCallMetrics.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = PhoneCallMetrics.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PhoneCallMetrics.CodingKeys()
{
  return PhoneCallMetrics.CodingKeys.rawValue.getter(*v0);
}

PhoneCallFlowDelegatePlugin::PhoneCallMetrics::CodingKeys_optional protocol witness for CodingKey.init(stringValue:) in conformance PhoneCallMetrics.CodingKeys@<W0>(uint64_t a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallMetrics::CodingKeys_optional *a2@<X8>)
{
  result.value = PhoneCallMetrics.CodingKeys.init(stringValue:)(*(Swift::String *)&a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance PhoneCallMetrics.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PhoneCallMetrics.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneCallMetrics.CodingKeys and conformance PhoneCallMetrics.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PhoneCallMetrics.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PhoneCallMetrics.CodingKeys and conformance PhoneCallMetrics.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t TrialSmartAppSelectionConfigProvider.deinit()
{
  return v0;
}

uint64_t PhoneCallMetrics.__deallocating_deinit()
{
  OUTLINED_FUNCTION_3_51();

  return swift_deallocClassInstance();
}

uint64_t PhoneCallMetrics.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PhoneCallMetrics.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PhoneCallMetrics.CodingKeys and conformance PhoneCallMetrics.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[15] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v1)
  {
    v10[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v8, v3);
}

unint64_t lazy protocol witness table accessor for type PhoneCallMetrics.CodingKeys and conformance PhoneCallMetrics.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneCallMetrics.CodingKeys and conformance PhoneCallMetrics.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneCallMetrics.CodingKeys and conformance PhoneCallMetrics.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallMetrics.CodingKeys and conformance PhoneCallMetrics.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallMetrics.CodingKeys and conformance PhoneCallMetrics.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneCallMetrics.CodingKeys and conformance PhoneCallMetrics.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallMetrics.CodingKeys and conformance PhoneCallMetrics.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallMetrics.CodingKeys and conformance PhoneCallMetrics.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneCallMetrics.CodingKeys and conformance PhoneCallMetrics.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallMetrics.CodingKeys and conformance PhoneCallMetrics.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhoneCallMetrics.CodingKeys and conformance PhoneCallMetrics.CodingKeys;
  if (!lazy protocol witness table cache variable for type PhoneCallMetrics.CodingKeys and conformance PhoneCallMetrics.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneCallMetrics.CodingKeys and conformance PhoneCallMetrics.CodingKeys);
  }
  return result;
}

uint64_t PhoneCallMetrics.__allocating_init(from:)(void *a1)
{
  OUTLINED_FUNCTION_3_51();
  uint64_t v2 = swift_allocObject();
  PhoneCallMetrics.init(from:)(a1);
  return v2;
}

uint64_t PhoneCallMetrics.init(from:)(void *a1)
{
  uint64_t v3 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PhoneCallMetrics.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  __chkstk_darwin(v5);
  *(void *)(v1 + 16) = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PhoneCallMetrics.CodingKeys and conformance PhoneCallMetrics.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {

    type metadata accessor for PhoneCallMetrics();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(void *)(v1 + 24) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *(unsigned char *)(v1 + 32) = v6 & 1;
    uint64_t v8 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    char v10 = v9;
    uint64_t v11 = OUTLINED_FUNCTION_8_3();
    v12(v11);
    *(void *)(v3 + 40) = v8;
    *(unsigned char *)(v3 + 48) = v10 & 1;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v3;
}

uint64_t base witness table accessor for Decodable in PhoneCallMetrics()
{
  return lazy protocol witness table accessor for type PhoneCallMetrics and conformance PhoneCallMetrics(&lazy protocol witness table cache variable for type PhoneCallMetrics and conformance PhoneCallMetrics);
}

uint64_t base witness table accessor for Encodable in PhoneCallMetrics()
{
  return lazy protocol witness table accessor for type PhoneCallMetrics and conformance PhoneCallMetrics(&lazy protocol witness table cache variable for type PhoneCallMetrics and conformance PhoneCallMetrics);
}

uint64_t lazy protocol witness table accessor for type PhoneCallMetrics and conformance PhoneCallMetrics(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for PhoneCallMetrics();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for static CATType.catTypeName.getter in conformance PhoneCallMetrics()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t protocol witness for static CATType.isDialogType.getter in conformance PhoneCallMetrics()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t protocol witness for CATType.mockGlobals.getter in conformance PhoneCallMetrics()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t protocol witness for CATType.mockGlobals.setter in conformance PhoneCallMetrics()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))();
}

void (*protocol witness for CATType.mockGlobals.modify in conformance PhoneCallMetrics(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  void v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 136))();
  return protocol witness for StaticAction.nextAction.modify in conformance PlayVoiceMailAction;
}

uint64_t protocol witness for CATType.getProperty(_:) in conformance PhoneCallMetrics()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 160))();
}

uint64_t protocol witness for Decodable.init(from:) in conformance PhoneCallMetrics@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 176))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PhoneCallMetrics()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 168))();
}

uint64_t sub_194F48@<X0>(uint64_t *a1@<X8>)
{
  OUTLINED_FUNCTION_22();
  uint64_t result = (*(uint64_t (**)(void))(v2 + 120))();
  *a1 = result;
  return result;
}

unsigned char *storeEnumTagSinglePayload for PhoneCallMetrics.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x195060);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PhoneCallMetrics.CodingKeys()
{
  return &type metadata for PhoneCallMetrics.CodingKeys;
}

uint64_t OUTLINED_FUNCTION_3_51()
{
  return v0;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay13SiriInference08ResolvedD10KitContactVG_So8INPersonCs5NeverOTg5035_s27PhoneCallFlowDelegatePlugin0A15h79ResolverC8signpost33_3D9467E65F3897762758A24265D9663FLL10configHash6aroundSay13d21Inference08Resolvedq3g39F0VGAA0fG14ConfigHashableV_AKyKXEtKFSo8I54CAJcfu_32c461fba76c558c5101ea1ecd6accfaeeAjOTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v4 = *(void *)(type metadata accessor for ResolvedSiriKitContact() - 8);
    uint64_t v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v6 = *(void *)(v4 + 72);
    do
    {
      ResolvedSiriKitContact.person.getter();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v5 += v6;
      --v2;
    }
    while (v2);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

void *specialized Sequence.compactMap<A>(_:)(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    int v3 = _swiftEmptyArrayStorage;
    uint64_t v4 = 4;
    while (1)
    {
      id v5 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v4);
      uint64_t v6 = v4 - 3;
      if (__OFADD__(v4 - 4, 1)) {
        break;
      }
      id v7 = v5;
      id v8 = [v7 personHandle];
      if (v8)
      {
        char v9 = v8;
        id v10 = [v8 faceTimeType];

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          int v3 = v12;
        }
        unint64_t v11 = v3[2];
        if (v11 >= v3[3] >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          int v3 = v13;
        }
        v3[2] = v11 + 1;
        v3[v11 + 4] = v10;
      }
      else
      {
      }
      ++v4;
      if (v6 == v2) {
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
  }
  int v3 = _swiftEmptyArrayStorage;
LABEL_20:
  swift_bridgeObjectRelease();
  return v3;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (**v15)(void);
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(void);
  unint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;

  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  __chkstk_darwin(v4 - 8);
  OUTLINED_FUNCTION_4();
  id v7 = v6 - v5;
  id v8 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_1();
  uint64_t v31 = v9;
  unint64_t v11 = __chkstk_darwin(v10);
  uint64_t v33 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v30 = (char *)&v27 - v13;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  char v14 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  for (; v14; char v14 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v27 = v2;
    char v32 = a1 & 0xC000000000000001;
    uint64_t v15 = (void (**)(void))(v31 + 32);
    BOOL v16 = _swiftEmptyArrayStorage;
    uint64_t v17 = 4;
    uint64_t v28 = v14;
    Swift::Bool v29 = a1;
    while (1)
    {
      if (v32)
      {
        uint64_t v2 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v2 = *(void *)(a1 + 8 * v17);
        swift_retain();
      }
      char v18 = v17 - 3;
      if (__OFADD__(v17 - 4, 1)) {
        break;
      }
      dispatch thunk of DialogPerson.toString.getter();
      swift_release();
      if (__swift_getEnumTagSinglePayload(v7, 1, v8) == 1)
      {
        _s16SiriDialogEngine15SpeakableStringVSgWOhTm_1(v7, &demangling cache variable for type metadata for SpeakableString?);
      }
      else
      {
        uint64_t v19 = *v15;
        OUTLINED_FUNCTION_2_110();
        v19();
        OUTLINED_FUNCTION_2_110();
        v19();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          unint64_t v22 = OUTLINED_FUNCTION_1_95();
          BOOL v16 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v22, v23, v24, v25);
        }
        uint64_t v21 = v16[2];
        uint64_t v20 = v16[3];
        if (v21 >= v20 >> 1) {
          BOOL v16 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1, (uint64_t)v16);
        }
        void v16[2] = v21 + 1;
        OUTLINED_FUNCTION_2_110();
        v19();
        char v14 = v28;
        a1 = v29;
      }
      ++v17;
      if (v18 == v14)
      {
        swift_bridgeObjectRelease();
        return v16;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t protocol witness for SiriKitContactResolverProtocol.resolve(queries:config:) in conformance SiriKitContactResolver()
{
  return SiriKitContactResolver.resolve(queries:config:)();
}

uint64_t PhoneContactResolver.__allocating_init(configCache:queryCache:resolver:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_allocObject();
  __swift_mutable_project_boxed_opaque_existential_1(a3, *(void *)(a3 + 24));
  OUTLINED_FUNCTION_0_41();
  __chkstk_darwin(v4);
  uint64_t v6 = OUTLINED_FUNCTION_7_38(v5, v10);
  v7(v6);
  uint64_t v8 = OUTLINED_FUNCTION_3_52();
  __swift_destroy_boxed_opaque_existential_1(a3);
  return v8;
}

uint64_t PhoneContactResolver.init(configCache:queryCache:resolver:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_mutable_project_boxed_opaque_existential_1(a3, *(void *)(a3 + 24));
  OUTLINED_FUNCTION_0_41();
  __chkstk_darwin(v4);
  uint64_t v6 = OUTLINED_FUNCTION_7_38(v5, v10);
  v7(v6);
  uint64_t v8 = OUTLINED_FUNCTION_3_52();
  __swift_destroy_boxed_opaque_existential_1(a3);
  return v8;
}

uint64_t PhoneContactResolver.resolve(queries:config:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of SignalProviding(v2 + 32, (uint64_t)v9);
  uint64_t v5 = v10;
  uint64_t v6 = v11;
  __swift_project_boxed_opaque_existential_1(v9, v10);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 8))(a1, a2, v5, v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  return v7;
}

uint64_t closure #1 in PhoneContactResolver.resolveContacts(queries:configHash:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  outlined init with copy of SignalProviding(a1 + 32, (uint64_t)v9);
  uint64_t v5 = v10;
  uint64_t v6 = v11;
  __swift_project_boxed_opaque_existential_1(v9, v10);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 16))(a2, a3, v5, v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  return v7;
}

uint64_t PhoneContactResolver.signpost(configHash:around:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = mach_continuous_time();
  long long v11[2] = a1;
  v11[3] = a2;
  void v11[4] = a3;
  uint64_t v8 = specialized static Signpost.wrap<A>(_:around:)("ResolveCRR", 10, 2, (void (*)(uint64_t *__return_ptr))partial apply for closure #1 in PhoneContactResolver.signpost(configHash:around:), (uint64_t)v11);
  if (!v3 && (ContactResolverConfigHashable.isFaceTime.getter() & 1) != 0)
  {
    char v9 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay13SiriInference08ResolvedD10KitContactVG_So8INPersonCs5NeverOTg5035_s27PhoneCallFlowDelegatePlugin0A15h79ResolverC8signpost33_3D9467E65F3897762758A24265D9663FLL10configHash6aroundSay13d21Inference08Resolvedq3g39F0VGAA0fG14ConfigHashableV_AKyKXEtKFSo8I54CAJcfu_32c461fba76c558c5101ea1ecd6accfaeeAjOTf3nnnpk_nTf1cn_n(v8);
    PhoneContactResolver.emitFaceTimeEvents(beginTimestamp:persons:)(v7, (unint64_t)v9);
    swift_bridgeObjectRelease();
  }
  return v8;
}

uint64_t closure #1 in PhoneContactResolver.signpost(configHash:around:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  static SiriKitEventSender.current.getter();
  uint64_t v6 = specialized static PhoneSelfPerformanceLogger.signpost<A>(domainExecutionType:taskType:siriKitEventSender:_:)(300, v4, v5, (uint64_t)v8, (void (*)(uint64_t *__return_ptr))partial apply for closure #1 in closure #1 in PhoneContactResolver.signpost(configHash:around:));
  if (!v2) {
    *a2 = v6;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
}

uint64_t specialized static PhoneSelfPerformanceLogger.signpost<A>(domainExecutionType:taskType:siriKitEventSender:_:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr))
{
  outlined init with copy of SignalProviding(a4, (uint64_t)v14);
  type metadata accessor for PhoneSelfPerformanceLogger();
  swift_initStackObject();
  swift_bridgeObjectRetain();
  uint64_t v10 = PhoneSelfPerformanceLogger.init(siriKitEventSender:domainExecutionType:taskType:)((uint64_t)v14, a1, a2, a3);
  a5(&v13);
  if (v5)
  {
    uint64_t v11 = v10;
    PhoneSelfPerformanceLogger.createAndLogFailureEvent()();
    swift_willThrow();
  }
  else
  {
    uint64_t v11 = v13;
  }
  swift_release();
  return v11;
}

{
  uint64_t v9;
  uint64_t v11;
  unsigned char v12[40];

  outlined init with copy of SignalProviding(a4, (uint64_t)v12);
  type metadata accessor for PhoneSelfPerformanceLogger();
  swift_initStackObject();
  swift_bridgeObjectRetain();
  PhoneSelfPerformanceLogger.init(siriKitEventSender:domainExecutionType:taskType:)((uint64_t)v12, a1, a2, a3);
  a5(&v11);
  char v9 = v11;
  swift_release();
  return v9;
}

uint64_t specialized static Signpost.wrap<A>(_:around:)(const char *a1, uint64_t a2, char a3, void (*a4)(uint64_t *__return_ptr), uint64_t a5)
{
  void (*v27)(uint64_t *__return_ptr);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;

  uint64_t v28 = a5;
  uint64_t v27 = a4;
  uint64_t v7 = type metadata accessor for OSSignpostID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OSSignposter();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  char v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v15 = __swift_project_value_buffer(v11, (uint64_t)static OSSignposter.siriPhone);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v15, v11);
  OSSignposter.logHandle.getter();
  uint64_t result = OSSignpostID.init(log:)();
  uint64_t v25 = v8;
  uint64_t v26 = v7;
  uint64_t v24 = v11;
  if (a3)
  {
LABEL_6:
    if ((unint64_t)a1 >> 32)
    {
      __break(1u);
    }
    else
    {
      if (a1 >> 11 == 27)
      {
LABEL_15:
        __break(1u);
        return result;
      }
      if (a1 >> 16 <= 0x10)
      {
        a1 = &v32;
        goto LABEL_10;
      }
    }
    __break(1u);
    goto LABEL_15;
  }
  if (!a1)
  {
    __break(1u);
    goto LABEL_6;
  }
LABEL_10:
  uint64_t v17 = (uint8_t *)swift_slowAlloc();
  uint64_t v18 = swift_slowAlloc();
  *(_DWORD *)uint64_t v17 = 136315138;
  uint64_t v31 = v18;
  uint64_t v19 = StaticString.description.getter();
  uint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v31);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  uint64_t v21 = v29;
  specialized closure #1 in OSSignposter.withIntervalSignpost<A>(_:id:_:around:)(v17, 0xCu, (uint64_t)v14, (uint64_t)v10, a1, "%s", v27);
  uint64_t v23 = v22;
  if (!v21)
  {
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  (*(void (**)(char *, uint64_t))(v25 + 8))(v10, v26);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v24);
  return v23;
}

void PhoneContactResolver.emitFaceTimeEvents(beginTimestamp:persons:)(uint64_t a1, unint64_t a2)
{
  static Signpost.emitSyntheticInterval(_:beginTimestamp:)();
  if (a2 >> 62) {
    goto LABEL_48;
  }
  uint64_t v3 = *(void *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFFF8));
  while (1)
  {
    if (v3 != 1) {
      return;
    }
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (a2 & 0xC000000000000001) == 0, a2);
    id v4 = (a2 & 0xC000000000000001) != 0
       ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
       : *(id *)(a2 + 32);
    unint64_t v5 = outlined bridged method (ob) of @objc INPerson.siriMatches.getter(v4);
    if (!v5) {
      return;
    }
    a2 = v5;
    if (v5 >> 62) {
      break;
    }
    uint64_t v6 = *(void *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (!v6) {
      goto LABEL_24;
    }
LABEL_9:
    uint64_t v7 = 4;
    while (1)
    {
      id v8 = (a2 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a2 + 8 * v7);
      uint64_t v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      id v11 = [v8 personHandle];
      if (!v11) {
        goto LABEL_22;
      }
      uint64_t v12 = outlined bridged method (ob) of @objc INPersonHandle.value.getter(v11);
      if (!v13) {
        goto LABEL_22;
      }
      uint64_t v14 = v12;
      unint64_t v15 = v13;
      swift_bridgeObjectRelease();
      uint64_t v16 = HIBYTE(v15) & 0xF;
      if ((v15 & 0x2000000000000000) == 0) {
        uint64_t v16 = v14 & 0xFFFFFFFFFFFFLL;
      }
      if (v16 && (id v17 = [v9 personHandle]) != 0)
      {
        uint64_t v18 = v17;
        id v19 = [v17 faceTimeType];

        if (!v19)
        {
          char v27 = 1;
          goto LABEL_25;
        }
      }
      else
      {
LABEL_22:
      }
      ++v7;
      if (v10 == v6) {
        goto LABEL_24;
      }
    }
LABEL_47:
    __break(1u);
LABEL_48:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  if (v6) {
    goto LABEL_9;
  }
LABEL_24:
  char v27 = 0;
LABEL_25:
  swift_bridgeObjectRelease();
  unint64_t v20 = specialized Sequence.compactMap<A>(_:)(a2);
  swift_bridgeObjectRelease();
  uint64_t v21 = v20[2];
  if (!v21) {
    goto LABEL_41;
  }
  uint64_t v22 = 0;
  a2 = 0;
  while (2)
  {
    uint64_t v23 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    while (2)
    {
      uint64_t v24 = v20[v22 + 4];
      uint64_t v22 = v23;
      if (v24 < -64 || v24 > 64) {
        goto LABEL_30;
      }
      if (v24 < 0)
      {
        if ((unint64_t)v24 > 0xFFFFFFFFFFFFFFC0)
        {
          uint64_t v26 = 0;
          goto LABEL_40;
        }
        goto LABEL_30;
      }
      if ((unint64_t)v24 >= 0x40)
      {
LABEL_30:
        if (v23 == v21) {
          goto LABEL_41;
        }
        if (__OFADD__(v23++, 1)) {
          goto LABEL_46;
        }
        continue;
      }
      break;
    }
    uint64_t v26 = 1 << v24;
LABEL_40:
    a2 |= v26;
    if (v23 != v21) {
      continue;
    }
    break;
  }
LABEL_41:
  swift_bridgeObjectRelease();
  static Signpost.event(_:number1:)();
  if (v27)
  {
    static Signpost.emitSyntheticInterval(_:beginTimestamp:)();
  }
}

uint64_t PhoneContactResolver.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  return v0;
}

uint64_t PhoneContactResolver.__deallocating_deinit()
{
  PhoneContactResolver.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for SiriKitContactResolverProtocol.resolve(queries:config:) in conformance PhoneContactResolver()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 184))();
}

void specialized closure #1 in OSSignposter.withIntervalSignpost<A>(_:id:_:around:)(uint8_t *a1, uint32_t a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6, void (*a7)(uint64_t *__return_ptr))
{
  id v11 = OSSignposter.logHandle.getter();
  os_signpost_type_t v12 = static os_signpost_type_t.begin.getter();
  os_signpost_id_t v13 = OSSignpostID.rawValue.getter();
  buf = a1;
  _os_signpost_emit_with_name_impl(&dword_0, v11, v12, v13, a5, a6, a1, a2);
  a7(&v19);
  if (!v18)
  {
    os_signpost_type_t v14 = static os_signpost_type_t.end.getter();
    os_signpost_id_t v15 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_0, v11, v14, v15, a5, a6, buf, a2);
  }
}

uint64_t specialized PhoneContactResolver.init(configCache:queryCache:resolver:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v14 = a5;
  uint64_t v15 = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v13);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(boxed_opaque_existential_1, a3, a5);
  *(void *)(a4 + 16) = a1;
  *(void *)(a4 + 24) = a2;
  outlined init with take of AppSelectionSignalComponent(&v13, a4 + 32);
  return a4;
}

uint64_t partial apply for closure #1 in PhoneContactResolver.resolveContacts(queries:configHash:)()
{
  return closure #1 in PhoneContactResolver.resolveContacts(queries:configHash:)(v0[2], v0[3], v0[4]);
}

uint64_t type metadata accessor for PhoneContactResolver()
{
  return self;
}

uint64_t partial apply for closure #1 in PhoneContactResolver.signpost(configHash:around:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in PhoneContactResolver.signpost(configHash:around:)(*(void *)(v1 + 16), a1);
}

uint64_t partial apply for closure #1 in closure #1 in PhoneContactResolver.signpost(configHash:around:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_3_52()
{
  return specialized PhoneContactResolver.init(configCache:queryCache:resolver:)(v2, v1, v5, v0, v3, v4);
}

uint64_t OUTLINED_FUNCTION_4_50()
{
  return swift_bridgeObjectRelease_n();
}

void (*static DICodableOverride.undoEncoding<A>(name:type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))(uint64_t *a1)
{
  os_signpost_type_t v12 = (void *)swift_allocObject();
  void v12[2] = a4;
  void v12[3] = a5;
  void v12[4] = a6;
  void v12[5] = a1;
  v12[6] = a2;
  v12[7] = a3;
  swift_bridgeObjectRetain();
  return partial apply for closure #1 in static DICodableOverride.undoEncoding<A>(name:type:);
}

void closure #1 in static DICodableOverride.undoEncoding<A>(name:type:)(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *a1;
  if (!*(void *)(*a1 + 16))
  {
    long long v25 = 0u;
    long long v26 = 0u;
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v10 & 1) == 0)
  {
    long long v25 = 0u;
    long long v26 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v9, (uint64_t)&v25);
  swift_bridgeObjectRelease();
  if (!*((void *)&v26 + 1))
  {
LABEL_9:
    outlined destroy of Any?((uint64_t)&v25);
    return;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if (swift_dynamicCast())
  {
    id v11 = self;
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    *(void *)&long long v25 = 0;
    id v13 = [v11 dataWithPropertyList:isa format:200 options:0 error:&v25];

    id v14 = (id)v25;
    if (v13)
    {
      uint64_t v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v17 = v16;

      type metadata accessor for PropertyListDecoder();
      swift_allocObject();
      PropertyListDecoder.init()();
      *((void *)&v26 + 1) = a5;
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v25);
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
      swift_release();
      swift_bridgeObjectRetain();
      specialized Dictionary.subscript.setter((uint64_t)&v25, a2, a3);
      outlined consume of Data._Representation(v15, v17);
    }
    else
    {
      uint64_t v18 = v14;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      __swift_project_value_buffer(v19, (uint64_t)static Logger.siriPhone);
      swift_bridgeObjectRetain_n();
      unint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = swift_slowAlloc();
        *(void *)&long long v25 = swift_slowAlloc();
        *(_DWORD *)uint64_t v22 = 136315394;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, (uint64_t *)&v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v22 + 12) = 2080;
        swift_getMetatypeMetadata();
        uint64_t v23 = String.init<A>(describing:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, (uint64_t *)&v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_0, v20, v21, "Could not undo encoding for property %s of type %s", (uint8_t *)v22, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }
      swift_errorRelease();
    }
  }
}

uint64_t sub_1966A8()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

void partial apply for closure #1 in static DICodableOverride.undoEncoding<A>(name:type:)(uint64_t *a1)
{
  closure #1 in static DICodableOverride.undoEncoding<A>(name:type:)(a1, *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 16));
}

uint64_t (*static DICodableOverride.transform<A, B>(name:transformer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7))(uint64_t a1)
{
  uint64_t v37 = a6;
  uint64_t v38 = a7;
  uint64_t v34 = a3;
  uint64_t v35 = a2;
  uint64_t v36 = a1;
  uint64_t v31 = a4;
  uint64_t v32 = a5;
  uint64_t v10 = type metadata accessor for Transformer();
  OUTLINED_FUNCTION_0_0();
  uint64_t v12 = v11;
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v16 = __chkstk_darwin(v15);
  unint64_t v17 = (char *)v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)v30 - v18;
  uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v33((char *)v30 - v18, a3, v10);
  uint64_t v20 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v21 = (v20 + 64) & ~v20;
  v30[1] = v20 | 7;
  uint64_t v22 = (char *)swift_allocObject();
  *((void *)v22 + 2) = a4;
  *((void *)v22 + 3) = a5;
  uint64_t v23 = v38;
  *((void *)v22 + 4) = v37;
  *((void *)v22 + 5) = v23;
  uint64_t v24 = v35;
  *((void *)v22 + 6) = v36;
  *((void *)v22 + 7) = v24;
  long long v25 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v25(&v22[v21], v19, v10);
  v33(v17, v34, v10);
  long long v26 = (char *)swift_allocObject();
  uint64_t v27 = v32;
  *((void *)v26 + 2) = v31;
  *((void *)v26 + 3) = v27;
  uint64_t v28 = v38;
  *((void *)v26 + 4) = v37;
  *((void *)v26 + 5) = v28;
  *((void *)v26 + 6) = v36;
  *((void *)v26 + 7) = v24;
  v25(&v26[v21], v17, v10);
  swift_bridgeObjectRetain_n();
  return partial apply for closure #1 in static DICodableOverride.transform<A, B>(name:transformer:);
}

void closure #1 in static DICodableOverride.transform<A, B>(name:transformer:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v37 = a4;
  uint64_t v35 = *(void *)(a6 - 8);
  __chkstk_darwin(a1);
  uint64_t v36 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v32 - v15;
  uint64_t v17 = *(void *)(a5 - 8);
  __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = a1;
  uint64_t v20 = *a1;
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  specialized Dictionary.subscript.getter(a2, a3, v20, &v39);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  if (swift_dynamicCast())
  {
    __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, a5);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v19, v16, a5);
    type metadata accessor for Transformer();
    uint64_t v21 = (void (*)(char *))Transformer.transform.getter();
    uint64_t v22 = v36;
    v21(v19);
    swift_release();
    uint64_t v40 = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v39);
    uint64_t v31 = v35;
    (*(void (**)(uint64_t *, char *, uint64_t))(v35 + 16))(boxed_opaque_existential_1, v22, a6);
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)&v39, v33, a3);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v22, a6);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, a5);
  }
  else
  {
    __swift_storeEnumTagSinglePayload((uint64_t)v16, 1, 1, a5);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.siriPhone);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      long long v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      uint64_t v38 = a5;
      *(void *)&long long v39 = v27;
      *(_DWORD *)long long v26 = 136315138;
      swift_getMetatypeMetadata();
      uint64_t v28 = String.init<A>(describing:)();
      uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, (uint64_t *)&v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v24, v25, "No entry in userData of type %s to override", v26, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
}

uint64_t partial apply for closure #1 in static DICodableOverride.transform<A, B>(name:transformer:)(uint64_t a1)
{
  return partial apply for closure #1 in static DICodableOverride.transform<A, B>(name:transformer:)(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in static DICodableOverride.transform<A, B>(name:transformer:));
}

void closure #2 in static DICodableOverride.transform<A, B>(name:transformer:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v37 = a4;
  uint64_t v35 = *(void *)(a5 - 8);
  __chkstk_darwin(a1);
  uint64_t v36 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v32 - v15;
  uint64_t v17 = *(void *)(a6 - 8);
  __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = a1;
  uint64_t v20 = *a1;
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  specialized Dictionary.subscript.getter(a2, a3, v20, &v39);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  if (swift_dynamicCast())
  {
    __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, a6);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v19, v16, a6);
    type metadata accessor for Transformer();
    uint64_t v21 = (void (*)(char *))Transformer.reverseTransform.getter();
    uint64_t v22 = v36;
    v21(v19);
    swift_release();
    uint64_t v40 = a5;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v39);
    uint64_t v31 = v35;
    (*(void (**)(uint64_t *, char *, uint64_t))(v35 + 16))(boxed_opaque_existential_1, v22, a5);
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)&v39, v33, a3);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v22, a5);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, a6);
  }
  else
  {
    __swift_storeEnumTagSinglePayload((uint64_t)v16, 1, 1, a6);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.siriPhone);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      long long v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      uint64_t v38 = a6;
      *(void *)&long long v39 = v27;
      *(_DWORD *)long long v26 = 136315138;
      swift_getMetatypeMetadata();
      uint64_t v28 = String.init<A>(describing:)();
      uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, (uint64_t *)&v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v24, v25, "No entry in userData of type %s to override", v26, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
}

uint64_t objectdestroy_2Tm_1()
{
  uint64_t v1 = type metadata accessor for Transformer();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = (v6 + 64) & ~v6;
  uint64_t v8 = v7 + *(void *)(v5 + 64);
  uint64_t v9 = v6 | 7;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v7, v1);

  return _swift_deallocObject(v0, v8, v9);
}

uint64_t partial apply for closure #2 in static DICodableOverride.transform<A, B>(name:transformer:)(uint64_t a1)
{
  return partial apply for closure #1 in static DICodableOverride.transform<A, B>(name:transformer:)(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))closure #2 in static DICodableOverride.transform<A, B>(name:transformer:));
}

uint64_t partial apply for closure #1 in static DICodableOverride.transform<A, B>(name:transformer:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = v2[2];
  uint64_t v5 = v2[3];
  uint64_t v6 = v2[4];
  uint64_t v7 = v2[5];
  uint64_t v8 = *(void *)(type metadata accessor for Transformer() - 8);
  uint64_t v9 = v2[6];
  uint64_t v10 = v2[7];
  uint64_t v11 = (char *)v2 + ((*(unsigned __int8 *)(v8 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));

  return a2(a1, v9, v10, v11, v4, v5, v6, v7);
}

Swift::Void __swiftcall DICodableOverride.applyAfterEncoding(_:)(Swift::OpaquePointer *a1)
{
  v1(a1);
}

Swift::Void __swiftcall DICodableOverride.applyBeforeDecoding(_:)(Swift::OpaquePointer *a1)
{
  v1(a1);
}

uint64_t destroy for DICodableOverride()
{
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for DICodableOverride(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for DICodableOverride(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for DICodableOverride(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for DICodableOverride()
{
  return &type metadata for DICodableOverride;
}

uint64_t __swift_deallocate_boxed_opaque_existential_0(uint64_t result)
{
  if ((*(_DWORD *)(*(void *)(*(void *)(result + 24) - 8) + 80) & 0x20000) != 0) {
    return swift_slowDealloc();
  }
  return result;
}

uint64_t SwitchToFaceTimeControlFlow.executeAction(currentCall:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  char v8 = *(unsigned char *)(v4 + 56);
  if ((PhoneCallControlAction.isSwitchToFaceTimeAction.getter(v8) & 1) == 0)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.siriPhone);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl(&dword_0, v16, v17, "#SwitchToFaceTimeControlFlow used to handle a call control not related to switch to FaceTime.", v18, 2u);
      OUTLINED_FUNCTION_4_46();
    }

    lazy protocol witness table accessor for type ActionableCallControlFlow.ActionableCallControlFlowError and conformance ActionableCallControlFlow.ActionableCallControlFlowError();
    swift_allocError();
    char v20 = 0;
    *(unsigned char *)uint64_t v19 = v8;
    goto LABEL_17;
  }
  uint64_t v9 = static PhoneCallControlRequestSupportPolicy.unsupportedSwitchToFaceTimeReason(for:action:sharedGlobals:)(a1, a2, v8, (void *)(v4 + 16));
  if (v9 != 10)
  {
    uint64_t v21 = v9;
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.siriPhone);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
      v42[0] = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v25 = 136315138;
      uint64_t v26 = specialized UnsupportedAction.description.getter(v21, (uint64_t)&type metadata for ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason, &demangling cache variable for type metadata for ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason.Type, (uint64_t (*)(uint64_t))ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason.rawValue.getter);
      v41[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v23, v24, "#SwitchToFaceTimeControlFlow cannot switch to facetime because %s", v25, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_4_46();
      swift_slowDealloc();
    }

    v42[3] = (uint64_t)&type metadata for ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason;
    unint64_t v28 = lazy protocol witness table accessor for type ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason and conformance ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason();
    v42[4] = v28;
    LOBYTE(v42[0]) = v21;
    outlined init with take of ActionableCallControlFlow.State((uint64_t)v42, (uint64_t)v41);
    swift_beginAccess();
    outlined assign with take of ActionableCallControlFlow.State((uint64_t)v41, v4 + 72);
    swift_endAccess();
    lazy protocol witness table accessor for type ActionableCallControlFlow.ActionableCallControlFlowError and conformance ActionableCallControlFlow.ActionableCallControlFlowError();
    swift_allocError();
    *(void *)(v19 + 24) = &type metadata for ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason;
    *(void *)(v19 + 32) = v28;
    *(unsigned char *)uint64_t v19 = v21;
    char v20 = 1;
LABEL_17:
    *(unsigned char *)(v19 + 40) = v20;
    return swift_willThrow();
  }
  uint64_t v43 = a3;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.siriPhone);
  swift_unknownObjectRetain();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 67109120;
    uint64_t ObjectType = swift_getObjectType();
    LODWORD(v42[0]) = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(ObjectType, a2) & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease();
    _os_log_impl(&dword_0, v11, v12, "#SwitchToFaceTimeControlFlow current call is FaceTime = %{BOOL}d", v13, 8u);
    OUTLINED_FUNCTION_4_46();
  }
  else
  {

    swift_unknownObjectRelease();
  }
  uint64_t v30 = swift_getObjectType();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(v30, a2) & 1) != 0
    || (SPHCall.isFTAudio.getter() & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(a2 + 184))(v30, a2);
  }
  if (PhoneCallControlAction.rawValue.getter(v8) == 0xD000000000000010 && v31 == 0x8000000000490E50)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_0_42();
    swift_bridgeObjectRelease();
  }
  uint64_t v32 = OUTLINED_FUNCTION_2_58();
  v33(v32);
  if (PhoneCallControlAction.rawValue.getter(v8) == 0xD000000000000010 && v34 == 0x8000000000490E50)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_0_42();
    swift_bridgeObjectRelease();
  }
  uint64_t v35 = OUTLINED_FUNCTION_2_58();
  v36(v35);
  if (PhoneCallControlAction.rawValue.getter(v8) == 0xD000000000000010 && v37 == 0x8000000000490E50)
  {
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v38 & 1) == 0)
    {
      long long v39 = v43;
      *uint64_t v43 = 0;
      v39[1] = 0;
      long long v39[2] = 0;
      long long v40 = xmmword_469B30;
      goto LABEL_36;
    }
  }
  long long v39 = v43;
  *uint64_t v43 = 0;
  v39[1] = 0;
  long long v39[2] = 0;
  long long v40 = xmmword_472040;
LABEL_36:
  *(_OWORD *)(v39 + 3) = v40;
  return result;
}

uint64_t specialized UnsupportedAction.description.getter(uint64_t a1)
{
  return specialized UnsupportedAction.description.getter(a1, (uint64_t)&type metadata for ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason, &demangling cache variable for type metadata for ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason.Type, (uint64_t (*)(uint64_t))ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason.rawValue.getter);
}

{
  return specialized UnsupportedAction.description.getter(a1, (uint64_t)&type metadata for ActionableCallControlFlow.UnsupportedHoldActionReason, &demangling cache variable for type metadata for ActionableCallControlFlow.UnsupportedHoldActionReason.Type, (uint64_t (*)(uint64_t))ActionableCallControlFlow.UnsupportedHoldActionReason.rawValue.getter);
}

ValueMetadata *specialized UnsupportedAction.description.getter()
{
  uint64_t result = &type metadata for ActionableCallControlFlow.UnsupportedActionReason;
  specialized UnsupportedAction.description.getter((uint64_t)&type metadata for ActionableCallControlFlow.UnsupportedActionReason, &demangling cache variable for type metadata for ActionableCallControlFlow.UnsupportedActionReason.Type, 0x6576697463416F6ELL, (void *)0xEC0000006C6C6143);
  return result;
}

{
  ValueMetadata *result;

  uint64_t result = &type metadata for ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason;
  specialized UnsupportedAction.description.getter((uint64_t)&type metadata for ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason, &demangling cache variable for type metadata for ActionableCallControlFlow.UnsupportedSpeakerphoneActionReason.Type, 0xD000000000000023, (void *)0x800000000048C480);
  return result;
}

uint64_t specialized UnsupportedAction.description.getter(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  String.init<A>(describing:)();
  OUTLINED_FUNCTION_3_53();
  v6._uint64_t countAndFlagsBits = a4(a1);
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  return a2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> specialized UnsupportedAction.description.getter(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  String.init<A>(describing:)();
  OUTLINED_FUNCTION_3_53();
  v6._uint64_t countAndFlagsBits = a3;
  v6._object = a4;
  String.append(_:)(v6);
}

unint64_t lazy protocol witness table accessor for type ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason and conformance ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason()
{
  unint64_t result = lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason and conformance ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason;
  if (!lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason and conformance ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason and conformance ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason and conformance ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason;
  if (!lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason and conformance ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason and conformance ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason and conformance ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason;
  if (!lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason and conformance ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason and conformance ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason and conformance ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason;
  if (!lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason and conformance ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason and conformance ActionableCallControlFlow.UnsupportedSwitchToFaceTimeReason);
  }
  return result;
}

uint64_t outlined init with take of ActionableCallControlFlow.State(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined assign with take of ActionableCallControlFlow.State(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t type metadata accessor for SwitchToFaceTimeControlFlow()
{
  return self;
}

uint64_t OUTLINED_FUNCTION_0_42()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_2_58()
{
  return v0 & 1;
}

void OUTLINED_FUNCTION_3_53()
{
  uint64_t v1 = 46;
  unint64_t v2 = 0xE100000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t IncomingCallIntentResponse.isIncomingCall.getter(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(uint64_t (**)(void))(a2 + 8);
  if (v2() == 2) {
    return 1;
  }
  uint64_t v4 = OUTLINED_FUNCTION_7_14();
  if (((uint64_t (*)(uint64_t))v2)(v4)) {
    return 0;
  }
  uint64_t v5 = OUTLINED_FUNCTION_7_14();
  uint64_t v7 = v6(v5);
  if (v7) {
    unint64_t v8 = v7;
  }
  else {
    unint64_t v8 = (unint64_t)_swiftEmptyArrayStorage;
  }
  if (v8 >> 62) {
    goto LABEL_22;
  }
  uint64_t v9 = *(void *)((char *)&dword_10 + (v8 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  for (; v9; uint64_t v9 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v10 = 4;
    while (1)
    {
      if ((v8 & 0xC000000000000001) != 0)
      {
        OUTLINED_FUNCTION_7_14();
        id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        id v11 = *(id *)(v8 + 8 * v10);
      }
      os_log_type_t v12 = v11;
      uint64_t v13 = v10 - 3;
      if (__OFADD__(v10 - 4, 1)) {
        break;
      }
      uint64_t v14 = (char *)[v11 callRecordType];

      BOOL v15 = v14 == (unsigned char *)&dword_4 + 2;
      BOOL v3 = v14 == (unsigned char *)&dword_4 + 2;
      ++v10;
      BOOL v15 = v15 || v13 == v9;
      if (v15) {
        goto LABEL_24;
      }
    }
    __break(1u);
LABEL_22:
    swift_bridgeObjectRetain();
  }
  BOOL v3 = 0;
LABEL_24:
  swift_bridgeObjectRelease_n();
  return v3;
}

uint64_t specialized IncomingCallIntentResponse.hasCallHistory.getter(uint64_t (*a1)(uint64_t))
{
  uint64_t result = a1(v1);
  if (result)
  {
    OUTLINED_FUNCTION_0_43();
    if (v4) {
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    }
    else {
      uint64_t v5 = *(void *)(v3 + 16);
    }
    swift_bridgeObjectRelease();
    return v5 != 0;
  }
  return result;
}

uint64_t IncomingCallIntentResponse.hasCallHistory.getter()
{
  OUTLINED_FUNCTION_2_59();
  uint64_t result = v0();
  if (result)
  {
    OUTLINED_FUNCTION_0_43();
    if (v3) {
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    }
    else {
      uint64_t v4 = *(void *)(v2 + 16);
    }
    swift_bridgeObjectRelease();
    return v4 != 0;
  }
  return result;
}

id specialized IncomingCallIntentResponse.latestCallRecord.getter(uint64_t (*a1)(uint64_t))
{
  if (!a1(v2)) {
    return 0;
  }
  OUTLINED_FUNCTION_0_43();
  if (v4)
  {
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  if (!*(void *)(v3 + 16))
  {
LABEL_8:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_4:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v1 & 0xC000000000000001) == 0, v1);
  if ((v1 & 0xC000000000000001) != 0) {
    id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v5 = *(id *)(v1 + 32);
  }
  id v6 = v5;
  swift_bridgeObjectRelease();
  return v6;
}

id IncomingCallIntentResponse.latestCallRecord.getter()
{
  OUTLINED_FUNCTION_2_59();
  if (!v1()) {
    return 0;
  }
  OUTLINED_FUNCTION_0_43();
  if (v3)
  {
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  if (!*(void *)(v2 + 16))
  {
LABEL_8:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_4:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v0 & 0xC000000000000001) == 0, v0);
  if ((v0 & 0xC000000000000001) != 0) {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v4 = *(id *)(v0 + 32);
  }
  id v5 = v4;
  swift_bridgeObjectRelease();
  return v5;
}

BOOL specialized IncomingCallIntentResponse.unknownCaller.getter(uint64_t (*a1)(uint64_t))
{
  id v1 = specialized IncomingCallIntentResponse.latestCallRecord.getter(a1);
  id v2 = [v1 caller];

  if (v2) {
  return v2 == 0;
  }
}

BOOL IncomingCallIntentResponse.unknownCaller.getter()
{
  id v0 = IncomingCallIntentResponse.latestCallRecord.getter();
  id v1 = [v0 caller];

  if (v1) {
  return v1 == 0;
  }
}

BOOL specialized IncomingCallIntentResponse.canCallBack.getter(uint64_t (*a1)(uint64_t))
{
  return (specialized IncomingCallIntentResponse.hasCallHistory.getter(a1) & 1) != 0
      && !specialized IncomingCallIntentResponse.unknownCaller.getter(a1);
}

BOOL IncomingCallIntentResponse.canCallBack.getter()
{
  if (IncomingCallIntentResponse.hasCallHistory.getter())
  {
    OUTLINED_FUNCTION_7_14();
    return !IncomingCallIntentResponse.unknownCaller.getter();
  }
  else
  {
    return 0;
  }
}

uint64_t INAnswerCallIntentResponse.followUpOfferType.getter()
{
  if ([v0 statusCode] != (char *)&dword_0 + 1) {
    return 0;
  }
  if (specialized IncomingCallIntentResponse.canCallBack.getter((uint64_t (*)(uint64_t))outlined bridged method (pb) of @objc INAnswerCallIntentResponse.callRecords.getter)) {
    return 3;
  }
  return (specialized IncomingCallIntentResponse.hasCallHistory.getter((uint64_t (*)(uint64_t))outlined bridged method (pb) of @objc INAnswerCallIntentResponse.callRecords.getter) & 1) == 0;
}

id @nonobjc INAnswerCallIntentResponse.statusCode.getter()
{
  return [v0 statusCode];
}

uint64_t @nonobjc INAnswerCallIntentResponse.callRecords.getter()
{
  return outlined bridged method (pb) of @objc INAnswerCallIntentResponse.callRecords.getter(v0);
}

char *INIdentifyIncomingCallerIntentResponse.followUpOfferType.getter()
{
  uint64_t result = (char *)[v0 statusCode];
  if (result != (unsigned char *)&dword_0 + 2)
  {
    if (result == (unsigned char *)&dword_0 + 1)
    {
      if (specialized IncomingCallIntentResponse.canCallBack.getter((uint64_t (*)(uint64_t))outlined bridged method (pb) of @objc INIdentifyIncomingCallerIntentResponse.callRecords.getter))
      {
        return (unsigned char *)(&dword_0 + 3);
      }
      else if (specialized IncomingCallIntentResponse.hasCallHistory.getter((uint64_t (*)(uint64_t))outlined bridged method (pb) of @objc INIdentifyIncomingCallerIntentResponse.callRecords.getter))
      {
        return (char *)&dword_4;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t @nonobjc INIdentifyIncomingCallerIntentResponse.callRecords.getter()
{
  return outlined bridged method (pb) of @objc INIdentifyIncomingCallerIntentResponse.callRecords.getter(v0);
}

uint64_t INSearchCallHistoryIntentResponse.followUpOfferType.getter()
{
  if (specialized IncomingCallIntentResponse.canCallBack.getter((uint64_t (*)(uint64_t))outlined bridged method (pb) of @objc INAnswerCallIntentResponse.callRecords.getter)) {
    return 3;
  }
  else {
    return 0;
  }
}

uint64_t outlined bridged method (pb) of @objc INIdentifyIncomingCallerIntentResponse.callRecords.getter(void *a1)
{
  id v1 = [a1 callRecords];
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  type metadata accessor for INCallRecord();
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

unint64_t type metadata accessor for INCallRecord()
{
  unint64_t result = lazy cache variable for type metadata for INCallRecord;
  if (!lazy cache variable for type metadata for INCallRecord)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for INCallRecord);
  }
  return result;
}

uint64_t static PicsUtils.shouldUsePicsDisambiguationFormat(persons:sharedGlobals:)(unint64_t a1)
{
  if (a1 >> 62)
  {
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    if (!v2) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (!v2) {
      goto LABEL_15;
    }
  }
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (a1 & 0xC000000000000001) == 0, a1);
  if ((a1 & 0xC000000000000001) != 0) {
    id v3 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v3 = *(id *)(a1 + 32);
  }
  id v4 = v3;
  BOOL v5 = INPerson.isProvidedByPlus.getter();

  if (v5)
  {
    uint64_t v2 = 1;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = v2 - 1;
    do
    {
      uint64_t v2 = v7 != v6;
      if (v7 == v6) {
        break;
      }
      unint64_t v8 = v6 + 1;
      if ((a1 & 0xC000000000000001) != 0)
      {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v8 >= *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8))) {
          goto LABEL_17;
        }
        id v9 = *(id *)(a1 + 8 * v6 + 40);
      }
      uint64_t v10 = v9;
      if (__OFADD__(v8, 1))
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      BOOL v11 = INPerson.isProvidedByPlus.getter();

      ++v6;
    }
    while (!v11);
  }
LABEL_15:
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t static PicsUtils.splitPicsPerson(persons:speakableStrings:)(unint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a1;
  BOOL v5 = (void *)(a1 >> 62);
  if (a1 >> 62)
  {
LABEL_32:
    swift_bridgeObjectRetain();
    unint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v6 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  }
  uint64_t v7 = *a2;
  if (v6 != *(void *)(*a2 + 16)) {
    goto LABEL_22;
  }
  if (v5)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (!v8) {
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((char *)&dword_10 + (v4 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (!v8) {
      goto LABEL_21;
    }
  }
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v4 & 0xC000000000000001) == 0);
  if ((v4 & 0xC000000000000001) != 0) {
LABEL_34:
  }
    id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  else {
    id v9 = *(id *)(v4 + 32);
  }
  BOOL v5 = v9;
  if (INPerson.isProvidedByPlus.getter())
  {
    swift_bridgeObjectRelease();
    unint64_t v10 = 0;
    goto LABEL_25;
  }

  if (v8 == 1)
  {
LABEL_21:
    swift_bridgeObjectRelease();
LABEL_22:
    swift_bridgeObjectRetain();
    return v7;
  }
  uint64_t v2 = v4 & 0xFFFFFFFFFFFFFF8;
  uint64_t v11 = 5;
  while (1)
  {
    unint64_t v12 = v11 - 4;
    if ((v4 & 0xC000000000000001) != 0)
    {
      id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v12 >= *(void *)((char *)&dword_10 + (v4 & 0xFFFFFFFFFFFFFF8)))
      {
        __break(1u);
        goto LABEL_34;
      }
      id v13 = *(id *)(v4 + 8 * v11);
    }
    BOOL v5 = v13;
    BOOL v14 = __OFADD__(v12, 1);
    uint64_t v15 = v11 - 3;
    if (v14)
    {
      __break(1u);
      goto LABEL_32;
    }
    if (INPerson.isProvidedByPlus.getter()) {
      break;
    }

    ++v11;
    if (v15 == v8) {
      goto LABEL_21;
    }
  }
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v10 = v11 - 4;
  if (v11 - 4 < 0) {
    goto LABEL_40;
  }
LABEL_25:
  unint64_t v17 = *(void *)(v7 + 16);
  if (v10 >= v17)
  {
    __break(1u);
  }
  else if (--v6 < v17)
  {
    uint64_t v31 = a2;
    uint64_t v18 = (uint64_t **)(v7 + 32 + 16 * v10);
    a2 = *v18;
    uint64_t v8 = (uint64_t)v18[1];
    uint64_t v19 = (uint64_t *)(v7 + 32 + 16 * v6);
    uint64_t v2 = *v19;
    uint64_t v4 = v19[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_28;
    }
    goto LABEL_37;
  }
  __break(1u);
LABEL_37:
  specialized _ArrayBuffer._consumeAndCreateNew()();
  uint64_t v7 = v30;
LABEL_28:
  char v20 = (uint64_t **)(v7 + 32 + 16 * v6);
  *char v20 = a2;
  v20[1] = (uint64_t *)v8;
  uint64_t result = swift_bridgeObjectRelease();
  if (v10 >= *(void *)(v7 + 16))
  {
    __break(1u);
  }
  else
  {
    uint64_t v21 = (uint64_t *)(v7 + 32 + 16 * v10);
    uint64_t *v21 = v2;
    v21[1] = v4;
    swift_bridgeObjectRelease();
    uint64_t *v31 = v7;
    uint64_t v22 = specialized Collection.prefix(_:)(v6, v7);
    uint64_t v24 = v23;
    uint64_t v26 = v25;
    unint64_t v28 = v27;
    swift_bridgeObjectRetain();
    uint64_t result = (uint64_t)specialized Array.init<A>(_:)(v22, v24, v26, v28);
    if (v6 < *(void *)(v7 + 16))
    {
      uint64_t v29 = result;
      swift_bridgeObjectRetain();

      return v29;
    }
  }
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for PicsUtils()
{
  return &type metadata for PicsUtils;
}

PhoneCallFlowDelegatePlugin::AnnounceIncomingCallCATs::Properties_optional __swiftcall AnnounceIncomingCallCATs.Properties.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AnnounceIncomingCallCATs.Properties.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.value = PhoneCallFlowDelegatePlugin_AnnounceIncomingCallCATs_Properties_offerFollowUpIntent;
  }
  else {
    v4.value = PhoneCallFlowDelegatePlugin_AnnounceIncomingCallCATs_Properties_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

PhoneCallFlowDelegatePlugin::AnnounceIncomingCallCATs::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AnnounceIncomingCallCATs.Properties@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::AnnounceIncomingCallCATs::Properties_optional *a2@<X8>)
{
  result.value = AnnounceIncomingCallCATs.Properties.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t AnnounceIncomingCallCATs.intentHandledResponse(incomingCallConcept:completion:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_31_0();
  *(_OWORD *)(v2 + 16) = xmmword_467710;
  *(void *)(v2 + 32) = 0xD000000000000013;
  *(void *)(v2 + 40) = 0x8000000000493CB0;
  if (a1)
  {
    uint64_t v3 = type metadata accessor for PhoneIncomingCall();
    uint64_t v4 = a1;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
    *(void *)(v2 + 56) = 0;
    *(void *)(v2 + 64) = 0;
  }
  *(void *)(v2 + 48) = v4;
  *(void *)(v2 + 72) = v3;
  swift_retain();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();

  return swift_bridgeObjectRelease();
}

uint64_t AnnounceIncomingCallCATs.intentHandledResponse(incomingCallConcept:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  void v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_21_1((uint64_t)AnnounceIncomingCallCATs.intentHandledResponse(incomingCallConcept:));
}

uint64_t AnnounceIncomingCallCATs.intentHandledResponse(incomingCallConcept:)()
{
  uint64_t v1 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_31_0();
  v0[5] = v2;
  *(_OWORD *)(v2 + 16) = xmmword_467710;
  uint64_t v3 = OUTLINED_FUNCTION_10_1(v2, (uint64_t)"incomingCallConcept");
  if (v1)
  {
    uint64_t v3 = type metadata accessor for PhoneIncomingCall();
  }
  else
  {
    *(void *)(v2 + 56) = 0;
    *(void *)(v2 + 64) = 0;
  }
  *(void *)(v2 + 48) = v1;
  *(void *)(v2 + 72) = v3;
  OUTLINED_FUNCTION_19_2();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *uint64_t v4 = v0;
  v4[1] = AnswerCallCATs.intentHandledResponse(incomingCallConcept:);
  uint64_t v5 = v0[2];
  return v7(v5, 0xD00000000000002ALL, 0x800000000048D130, v2);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;

  uint64_t v1 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_31_0();
  v0[4] = v2;
  *(_OWORD *)(v2 + 16) = xmmword_467710;
  uint64_t v3 = OUTLINED_FUNCTION_10_1(v2, (uint64_t)"incomingCallConcept");
  if (v1)
  {
    uint64_t v3 = type metadata accessor for PhoneIncomingCall();
  }
  else
  {
    *(void *)(v2 + 56) = 0;
    *(void *)(v2 + 64) = 0;
  }
  *(void *)(v2 + 48) = v1;
  *(void *)(v2 + 72) = v3;
  OUTLINED_FUNCTION_19_2();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[5] = v4;
  *uint64_t v4 = v0;
  v4[1] = AnswerCallCATs.intentHandledResponse(incomingCallConcept:);
  uint64_t v5 = OUTLINED_FUNCTION_11_6(0xD00000000000002ALL);
  return v7(v5);
}

uint64_t AnnounceIncomingCallCATs.intentHandledResponse(incomingCallConcept:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_21_1((uint64_t)AnnounceIncomingCallCATs.intentHandledResponse(incomingCallConcept:));
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_31_0();
  *(_OWORD *)(v2 + 16) = xmmword_467710;
  *(void *)(v2 + 32) = 0xD000000000000013;
  *(void *)(v2 + 40) = 0x8000000000493CB0;
  if (a1)
  {
    uint64_t v3 = type metadata accessor for PhoneIncomingCall();
    uint64_t v4 = a1;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
    *(void *)(v2 + 56) = 0;
    *(void *)(v2 + 64) = 0;
  }
  *(void *)(v2 + 48) = v4;
  *(void *)(v2 + 72) = v3;
  swift_retain();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();

  return swift_bridgeObjectRelease();
}

uint64_t AnnounceIncomingCallCATs.offerFollowUpIntent(followUpOfferType:completion:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v3 = OUTLINED_FUNCTION_11_0(v2);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_4();
  uint64_t v6 = v5 - v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v7 = OUTLINED_FUNCTION_31_0();
  *(_OWORD *)(v7 + 16) = xmmword_467710;
  uint64_t v8 = (uint64_t *)(v7 + 48);
  *(void *)(v7 + 32) = 0xD000000000000011;
  *(void *)(v7 + 40) = 0x8000000000493CD0;
  outlined init with copy of SpeakableString?(a1, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload(v6, 1, v9) == 1)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v6, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v8 = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
  }
  else
  {
    *(void *)(v7 + 72) = v9;
    __swift_allocate_boxed_opaque_existential_1(v8);
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v10 + 32))();
  }
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();
  return swift_bridgeObjectRelease();
}

uint64_t AnnounceIncomingCallCATs.offerFollowUpIntent(followUpOfferType:)()
{
  OUTLINED_FUNCTION_1_0();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v4);
  v1[5] = swift_task_alloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v5, v6, v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t (*v10)(uint64_t, unint64_t, unint64_t, uint64_t);
  uint64_t v11;

  uint64_t v1 = v0[5];
  uint64_t v2 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_31_0();
  v0[6] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_467710;
  uint64_t v4 = (uint64_t *)(v3 + 48);
  *(void *)(v3 + 32) = 0xD000000000000011;
  *(void *)(v3 + 40) = 0x8000000000493CD0;
  outlined init with copy of SpeakableString?(v2, v1, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  if (OUTLINED_FUNCTION_37_2(v5) == 1)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v0[5], &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v4 = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
  }
  else
  {
    *(void *)(v3 + 72) = v2;
    __swift_allocate_boxed_opaque_existential_1(v4);
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v6 + 32))();
  }
  uint64_t v7 = (void *)OUTLINED_FUNCTION_3_0();
  v0[7] = v7;
  *uint64_t v7 = v0;
  v7[1] = AnswerCallCATs.offerFollowUpIntent(followUpOfferType:);
  uint64_t v8 = v0[2];
  return v10(v8, 0xD000000000000028, 0x800000000048D160, v3);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_1_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_11_0(v3);
  v1[4] = swift_task_alloc();
  OUTLINED_FUNCTION_11_1();
  return _swift_task_switch(v4, v5, v6);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;

  uint64_t v1 = v0[4];
  uint64_t v2 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_31_0();
  v0[5] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_467710;
  uint64_t v4 = (uint64_t *)(v3 + 48);
  *(void *)(v3 + 32) = 0xD000000000000011;
  *(void *)(v3 + 40) = 0x8000000000493CD0;
  outlined init with copy of SpeakableString?(v2, v1, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  if (OUTLINED_FUNCTION_37_2(v5) == 1)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v0[4], &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v4 = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
  }
  else
  {
    *(void *)(v3 + 72) = v2;
    __swift_allocate_boxed_opaque_existential_1(v4);
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v6 + 32))();
  }
  uint64_t v7 = (void *)OUTLINED_FUNCTION_3_0();
  v0[6] = v7;
  *uint64_t v7 = v0;
  v7[1] = AnswerCallCATs.offerFollowUpIntent(followUpOfferType:);
  uint64_t v8 = OUTLINED_FUNCTION_11_6(0xD000000000000028);
  return v10(v8);
}

uint64_t AnnounceIncomingCallCATs.offerFollowUpIntent(followUpOfferType:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v3 = OUTLINED_FUNCTION_11_0(v2);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_4();
  uint64_t v6 = v5 - v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v7 = OUTLINED_FUNCTION_31_0();
  *(_OWORD *)(v7 + 16) = xmmword_467710;
  uint64_t v8 = (uint64_t *)(v7 + 48);
  *(void *)(v7 + 32) = 0xD000000000000011;
  *(void *)(v7 + 40) = 0x8000000000493CD0;
  outlined init with copy of SpeakableString?(a1, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload(v6, 1, v9) == 1)
  {
    _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(v6, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v8 = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
  }
  else
  {
    *(void *)(v7 + 72) = v9;
    __swift_allocate_boxed_opaque_existential_1(v8);
    OUTLINED_FUNCTION_10();
    (*(void (**)(void))(v10 + 32))();
  }
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  return swift_bridgeObjectRelease();
}

uint64_t AnnounceIncomingCallCATs.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return AnnounceIncomingCallCATs.init(templateDir:options:globals:)(a1, a2);
}

uint64_t AnnounceIncomingCallCATs.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CATOption();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_4();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  uint64_t v10 = OUTLINED_FUNCTION_11_0(v9);
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_4();
  outlined init with copy of SpeakableString?(a1, v12 - v11, (uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
  uint64_t v13 = CATWrapper.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  _s16SiriDialogEngine15SpeakableStringVSgWOhTm_0(a1, (uint64_t *)&demangling cache variable for type metadata for URL?);
  return v13;
}

unint64_t lazy protocol witness table accessor for type AnnounceIncomingCallCATs.Properties and conformance AnnounceIncomingCallCATs.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type AnnounceIncomingCallCATs.Properties and conformance AnnounceIncomingCallCATs.Properties;
  if (!lazy protocol witness table cache variable for type AnnounceIncomingCallCATs.Properties and conformance AnnounceIncomingCallCATs.Properties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnounceIncomingCallCATs.Properties and conformance AnnounceIncomingCallCATs.Properties);
  }
  return result;
}

uint64_t type metadata accessor for AnnounceIncomingCallCATs()
{
  uint64_t result = type metadata singleton initialization cache for AnnounceIncomingCallCATs;
  if (!type metadata singleton initialization cache for AnnounceIncomingCallCATs) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for AnnounceIncomingCallCATs()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for AnnounceIncomingCallCATs()
{
  return type metadata accessor for AnnounceIncomingCallCATs();
}

unsigned char *storeEnumTagSinglePayload for AnnounceIncomingCallCATs.Properties(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x199CFCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnnounceIncomingCallCATs.Properties()
{
  return &type metadata for AnnounceIncomingCallCATs.Properties;
}

uint64_t HangUpCallRCHFlowDelegate.__allocating_init(sharedGlobals:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  outlined init with copy of SignalProviding(a1, v2 + direct field offset for HangUpCallRCHFlowDelegate.sharedGlobals);
  uint64_t v3 = BaseRCHFlowDelegate.init()();
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v3;
}

uint64_t HangUpCallRCHFlowDelegate.sharedGlobals.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + direct field offset for HangUpCallRCHFlowDelegate.sharedGlobals, a1);
}

uint64_t HangUpCallRCHFlowDelegate.init(sharedGlobals:)(uint64_t a1)
{
  outlined init with copy of SignalProviding(a1, v1 + direct field offset for HangUpCallRCHFlowDelegate.sharedGlobals);
  uint64_t v3 = BaseRCHFlowDelegate.init()();
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v3;
}

uint64_t HangUpCallRCHFlowDelegate.makeDialogTemplating()()
{
  uint64_t v1 = type metadata accessor for CATOption();
  __chkstk_darwin(v1 - 8);
  outlined init with copy of SignalProviding(v0 + direct field offset for HangUpCallRCHFlowDelegate.sharedGlobals, (uint64_t)v8);
  type metadata accessor for HangUpCallCATs();
  static CATOption.defaultMode.getter();
  uint64_t v2 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for PhoneCallDisplayTextCATs();
  static CATOption.defaultMode.getter();
  uint64_t v3 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for PhoneCallCommonCATs();
  static CATOption.defaultMode.getter();
  uint64_t v4 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for AppInfoBuilder();
  uint64_t v5 = swift_allocObject();
  type metadata accessor for HangUpCallTemplatingService();
  unsigned int v6 = (void *)swift_allocObject();
  return specialized HangUpCallTemplatingService.init(sharedGlobals:hangUpCats:displayTextCats:phoneCallCommonCats:appInfoBuilder:)((uint64_t)v8, v2, v3, v4, v5, v6);
}

Swift::Bool __swiftcall HangUpCallRCHFlowDelegate.shouldShowDialogAfterIntentHandled(intent:intentResponse:)(INHangUpCallIntent intent, INHangUpCallIntentResponse intentResponse)
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.siriPhone);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "Suppress intentHandled dialog for HangUpCallIntent.", v5, 2u);
    swift_slowDealloc();
  }

  return 0;
}

void HangUpCallRCHFlowDelegate.init()()
{
}

uint64_t HangUpCallRCHFlowDelegate.__ivar_destroyer()
{
  return __swift_destroy_boxed_opaque_existential_1(v0 + direct field offset for HangUpCallRCHFlowDelegate.sharedGlobals);
}

uint64_t HangUpCallRCHFlowDelegate.deinit()
{
  uint64_t v0 = BaseRCHFlowDelegate.deinit();
  __swift_destroy_boxed_opaque_existential_1(v0 + direct field offset for HangUpCallRCHFlowDelegate.sharedGlobals);
  return v0;
}

uint64_t HangUpCallRCHFlowDelegate.__deallocating_deinit()
{
  uint64_t v0 = BaseRCHFlowDelegate.deinit();
  __swift_destroy_boxed_opaque_existential_1(v0 + direct field offset for HangUpCallRCHFlowDelegate.sharedGlobals);

  return swift_deallocClassInstance();
}

uint64_t protocol witness for SharedGlobalsHolding.sharedGlobals.getter in conformance HangUpCallRCHFlowDelegate@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(*v1 + direct field offset for HangUpCallRCHFlowDelegate.sharedGlobals, a1);
}

uint64_t specialized HangUpCallTemplatingService.init(sharedGlobals:hangUpCats:displayTextCats:phoneCallCommonCats:appInfoBuilder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v12 = type metadata accessor for CATOption();
  __chkstk_darwin(v12 - 8);
  *(void *)((char *)a6 + direct field offset for HangUpCallTemplatingService.hangUpCallCatFamily) = a2;
  outlined init with copy of SignalProviding(a1, (uint64_t)v16);
  type metadata accessor for StartCallCATs();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v13 = CATWrapper.__allocating_init(options:globals:)();
  swift_retain();
  uint64_t v14 = specialized PhoneCallBaseCatTemplatingService.init(ducFamily:sharedGlobals:displayTextCats:phoneCallCommonCats:appInfoBuilder:labelTemplating:startCallCats:)(0x61437055676E6168, 0xEF32764355446C6CLL, v16, a3, a4, a5, 0, 0, 0, 0, v13, a6);
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v14;
}

uint64_t instantiation function for generic protocol witness table for HangUpCallRCHFlowDelegate(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type HangUpCallRCHFlowDelegate and conformance BaseRCHFlowDelegate<A, B>(&lazy protocol witness table cache variable for type HangUpCallRCHFlowDelegate and conformance BaseRCHFlowDelegate<A, B>, (void (*)(uint64_t))type metadata accessor for HangUpCallRCHFlowDelegate);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for HangUpCallRCHFlowDelegate()
{
  uint64_t result = type metadata singleton initialization cache for HangUpCallRCHFlowDelegate;
  if (!type metadata singleton initialization cache for HangUpCallRCHFlowDelegate) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for HangUpCallRCHFlowDelegate()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for HangUpCallRCHFlowDelegate()
{
  return type metadata accessor for HangUpCallRCHFlowDelegate();
}

uint64_t sub_19A980()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t lazy protocol witness table accessor for type HangUpCallRCHFlowDelegate and conformance BaseRCHFlowDelegate<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ContactPromptResponse()
{
  return ContactPromptResponse.debugDescription.getter(*v0);
}

uint64_t getEnumTagSinglePayload for ContactPromptResponse(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF9)
  {
    unsigned int v2 = a2 + 7;
    if (a2 + 7 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 7;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 7;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x19AAC0);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 7;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  if (v7 >= 5) {
    unsigned int v8 = v7 - 4;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v8 >= 4) {
    return v8 - 3;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for ContactPromptResponse(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 7;
  if (a3 + 7 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xF9) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v7 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x19ABA8);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContactPromptResponse()
{
  return &type metadata for ContactPromptResponse;
}

ValueMetadata *type metadata accessor for ContactPromptResponseParser()
{
  return &type metadata for ContactPromptResponseParser;
}

uint64_t OUTLINED_FUNCTION_1_54()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_2_60()
{
  return v0;
}

uint64_t static CommonOutputs.genericError(sharedGlobals:startCallCATsSimple:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DialogPhase();
  __chkstk_darwin(v4 - 8);
  OUTLINED_FUNCTION_2_1();
  type metadata accessor for SirikitDeviceState();
  uint64_t v5 = OUTLINED_FUNCTION_1_55();
  v6(v5);
  uint64_t v7 = SirikitDeviceState.__allocating_init(from:)();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = v7;
  swift_retain();
  static DialogPhase.error.getter();
  outlined init with copy of SignalProviding(a1, (uint64_t)v10);
  type metadata accessor for DialogOutputFactory();
  swift_allocObject();
  return DialogOutputFactory.init(dialog:dialogPhase:sharedGlobals:)();
}

uint64_t static CommonOutputs.promptCancelled(sharedGlobals:phoneCallCommonCATsSimple:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DialogPhase();
  __chkstk_darwin(v2 - 8);
  swift_retain();
  static DialogPhase.canceled.getter();
  outlined init with copy of SignalProviding(a1, (uint64_t)v4);
  type metadata accessor for DialogOutputFactory();
  swift_allocObject();
  return DialogOutputFactory.init(dialog:dialogPhase:sharedGlobals:)();
}

uint64_t static CommonOutputs.conversionError(sharedGlobals:parse:startCallCATsSimple:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DialogPhase();
  __chkstk_darwin(v6 - 8);
  OUTLINED_FUNCTION_2_1();
  uint64_t v7 = type metadata accessor for PhoneError();
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = &v19[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v8);
  uint64_t v12 = &v19[-v11 - 8];
  outlined init with copy of Parse?(a2, (uint64_t)v10);
  swift_storeEnumTagMultiPayload();
  PhoneError.logged()((uint64_t)v12);
  outlined destroy of PhoneError((uint64_t)v10);
  outlined destroy of PhoneError((uint64_t)v12);
  type metadata accessor for SirikitDeviceState();
  uint64_t v13 = OUTLINED_FUNCTION_1_55();
  v14(v13);
  uint64_t v15 = SirikitDeviceState.__allocating_init(from:)();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a3;
  *(void *)(v16 + 24) = v15;
  swift_retain();
  static DialogPhase.error.getter();
  outlined init with copy of SignalProviding(a1, (uint64_t)v19);
  type metadata accessor for DialogOutputFactory();
  swift_allocObject();
  return DialogOutputFactory.init(dialog:dialogPhase:sharedGlobals:)();
}

uint64_t closure #1 in static CommonOutputs.genericError(sharedGlobals:startCallCATsSimple:)(void *a1, uint64_t a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(class metadata base offset for StartCallCATsSimple + *a1 + 464)
                                       + **(int **)(class metadata base offset for StartCallCATsSimple + *a1 + 464));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = closure #1 in static CommonOutputs.genericError(sharedGlobals:startCallCATsSimple:);
  return v6(a2);
}

uint64_t closure #1 in static CommonOutputs.genericError(sharedGlobals:startCallCATsSimple:)()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_44();
  uint64_t v6 = *v2;
  uint64_t v3 = swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v6 + 8);
  if (!v1) {
    uint64_t v3 = v0;
  }
  return v4(v3);
}

uint64_t partial apply for closure #1 in static CommonOutputs.genericError(sharedGlobals:startCallCATsSimple:)()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)OUTLINED_FUNCTION_14(v3);
  *uint64_t v4 = v5;
  v4[1] = partial apply for closure #1 in static CommonOutputs.genericError(sharedGlobals:startCallCATsSimple:);
  return closure #1 in static CommonOutputs.genericError(sharedGlobals:startCallCATsSimple:)(v1, v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_44();
  uint64_t v4 = *v1;
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v4 + 8);
  return v2(v0);
}

uint64_t closure #1 in static CommonOutputs.conversionError(sharedGlobals:parse:startCallCATsSimple:)(void *a1, uint64_t a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(class metadata base offset for StartCallCATsSimple + *a1 + 608)
                                       + **(int **)(class metadata base offset for StartCallCATsSimple + *a1 + 608));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = closure #1 in static CommonOutputs.conversionError(sharedGlobals:parse:startCallCATsSimple:);
  return v6(a2);
}

uint64_t closure #1 in static CommonOutputs.promptCancelled(sharedGlobals:phoneCallCommonCATsSimple:)(void *a1)
{
  uint64_t v5 = (uint64_t (*)(void))(*(void *)(class metadata base offset for PhoneCallCommonCATsSimple + *a1 + 48)
                         + **(int **)(class metadata base offset for PhoneCallCommonCATsSimple + *a1 + 48));
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_14(v1);
  *uint64_t v2 = v3;
  v2[1] = closure #1 in static CommonOutputs.conversionError(sharedGlobals:parse:startCallCATsSimple:);
  return v5();
}

uint64_t outlined init with copy of Parse?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t objectdestroyTm_9()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for closure #1 in static CommonOutputs.conversionError(sharedGlobals:parse:startCallCATsSimple:)()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)OUTLINED_FUNCTION_14(v3);
  *uint64_t v4 = v5;
  v4[1] = partial apply for closure #1 in static CommonOutputs.conversionError(sharedGlobals:parse:startCallCATsSimple:);
  return closure #1 in static CommonOutputs.conversionError(sharedGlobals:parse:startCallCATsSimple:)(v1, v2);
}

ValueMetadata *type metadata accessor for CommonOutputs()
{
  return &type metadata for CommonOutputs;
}

uint64_t OUTLINED_FUNCTION_1_55()
{
  uint64_t v1 = v0[3];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return v1;
}

uint64_t protocol witness for IncomingCallFlowOutputStrategy.makePromptForConfirmationFlow<A>(app:intentResponse:sharedGlobals:) in conformance AnswerCallOutputStrategy(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return IncomingCallFlowOutputStrategy.makePromptForConfirmationFlow<A>(app:intentResponse:sharedGlobals:)(a1, a2, a3, a6, a4, a7, a5);
}

uint64_t IncomingCallFlowOutputStrategy.makePromptForConfirmationFlow<A>(app:intentResponse:sharedGlobals:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void (*v13)(long long *__return_ptr, uint64_t, uint64_t);
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v22;
  uint64_t v23;
  long long v25;
  uint64_t v26;
  uint64_t v27;
  long long v28[2];
  long long v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;

  type metadata accessor for IncomingCallActionConfirmation();
  lazy protocol witness table accessor for type IncomingCallActionConfirmation and conformance IncomingCallActionConfirmation();
  type metadata accessor for PromptForConfirmationFlowAsync();
  uint64_t v32 = a2;
  type metadata accessor for IncomingCallActionConfirmationStrategy();
  uint64_t v13 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(a6 + 8);
  uint64_t v14 = a2;
  v13(&v25, a4, a6);
  outlined init with copy of SignalProviding((uint64_t)a3, (uint64_t)&v29);
  uint64_t v15 = default argument 4 of IncomingCallActionConfirmationStrategy.init(incomingCallIntentResponse:incomingCallCats:sharedGlobals:announceCallsContext:phoneCommonCats:phoneCallCommonCatPatterns:)(a5, a7);
  default argument 5 of IncomingCallActionConfirmationStrategy.init(incomingCallIntentResponse:incomingCallCats:sharedGlobals:announceCallsContext:phoneCommonCats:phoneCallCommonCatPatterns:)((uint64_t *)v28);
  IncomingCallActionConfirmationStrategy.__allocating_init(incomingCallIntentResponse:incomingCallCats:sharedGlobals:announceCallsContext:phoneCommonCats:phoneCallCommonCatPatterns:)((uint64_t)v14, &v25, &v29, 0, 0, v15, v28);
  uint64_t v16 = a3[3];
  unint64_t v17 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v16);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v17 + 16))(&v25, v16, v17);
  uint64_t v18 = v26;
  uint64_t v19 = v27;
  char v20 = __swift_project_boxed_opaque_existential_1(&v25, v26);
  uint64_t v30 = v18;
  uint64_t v31 = v19;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v29);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v18 - 8) + 16))(boxed_opaque_existential_1, v20, v18);
  swift_getWitnessTable();
  uint64_t v22 = PromptForConfirmationFlowAsync.__allocating_init<A>(itemToConfirm:strategy:outputPublisher:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v25);
  *(void *)&uint64_t v25 = v22;
  swift_getWitnessTable();
  uint64_t v23 = Flow.eraseToAnyValueFlow()();
  swift_release();
  return v23;
}

uint64_t IncomingCallFlowOutputStrategy.announceCallsContext.getter()
{
  return 0;
}

uint64_t AnnounceVoicemailHintHistory.daysSinceLastHint.getter()
{
  uint64_t v0 = type metadata accessor for Date();
  OUTLINED_FUNCTION_0_0();
  uint64_t v2 = v1;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v14 - v7;
  Date.init(timeIntervalSince1970:)();
  Date.init()();
  Date.distance(to:)();
  double v10 = v9;
  uint64_t v11 = *(void (**)(char *, uint64_t))(v2 + 8);
  v11(v6, v0);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v11)(v8, v0);
  double v13 = v10 / 86400.0;
  if (v10 / 86400.0 < 0.0) {
    double v13 = 0.0;
  }
  if ((~*(void *)&v13 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v13 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v13 < 9.22337204e18) {
    return (uint64_t)v13;
  }
LABEL_9:
  __break(1u);
  return result;
}

PhoneCallFlowDelegatePlugin::AnnounceVoicemailHintHistory __swiftcall AnnounceVoicemailHintHistory.init()()
{
  uint64_t v1 = type metadata accessor for Date();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_65_2();
  static Date.distantFuture.getter();
  Date.timeIntervalSince1970.getter();
  double v6 = v5;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
  Swift::Int v7 = 0;
  Swift::Int v8 = 0;
  double v9 = v6;
  result.lastHintTimestamp = v9;
  result.hintCount = v8;
  result.count = v7;
  return result;
}

double AnnounceVoicemailHintHistory.init(count:hintCount:lastHintDate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Date.timeIntervalSince1970.getter();
  double v5 = v4;
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a3, v6);
  return v5;
}

PhoneCallFlowDelegatePlugin::AnnounceVoicemailHintHistory __swiftcall AnnounceVoicemailHintHistory.makeUpdatedHistoryAfterAnnouncement(announcementCount:didReadHint:)(Swift::Int announcementCount, Swift::Bool didReadHint)
{
  double v6 = v5;
  Swift::Int v7 = v3;
  uint64_t v8 = v2;
  uint64_t v11 = type metadata accessor for Date();
  OUTLINED_FUNCTION_0_0();
  uint64_t v13 = v12;
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_65_2();
  BOOL v18 = __OFADD__(v8, announcementCount);
  Swift::Int v19 = v8 + announcementCount;
  if (v18)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (didReadHint)
  {
    BOOL v18 = __OFADD__(v7++, 1);
    if (!v18)
    {
      Date.init()();
      Date.timeIntervalSince1970.getter();
      double v6 = v20;
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v4, v11);
      goto LABEL_5;
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
LABEL_5:
  Swift::Int v15 = v19;
  Swift::Int v16 = v7;
  double v17 = v6;
LABEL_8:
  result.lastHintTimestamp = v17;
  result.hintCount = v16;
  result.count = v15;
  return result;
}

uint64_t AnnounceVoicemailHintHistory.description.getter()
{
  _StringGuts.grow(_:)(50);
  v0._uint64_t countAndFlagsBits = 0x3A746E756F630A7BLL;
  v0._object = (void *)0xE900000000000020;
  String.append(_:)(v0);
  v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 0x6F43746E69680A2CLL;
  v2._object = (void *)0xED0000203A746E75;
  String.append(_:)(v2);
  v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._object = (void *)0x80000000004950F0;
  v4._uint64_t countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v4);
  Double.write<A>(to:)();
  v5._uint64_t countAndFlagsBits = 32010;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  return 0;
}

BOOL static AnnounceVoicemailHintHistory.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  BOOL v7 = a1 == a3 && a2 == a4;
  return a5 == a6 && v7;
}

uint64_t AnnounceVoicemailHintHistory.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746E756F63 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6E756F43746E6968 && a2 == 0xE900000000000074;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000011 && a2 == 0x8000000000495110)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v7) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t AnnounceVoicemailHintHistory.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return 0x746E756F63;
  }
  if (a1 == 1) {
    return 0x6E756F43746E6968;
  }
  return 0xD000000000000011;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AnnounceVoicemailHintHistory.CodingKeys()
{
  return AnnounceVoicemailHintHistory.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AnnounceVoicemailHintHistory.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = AnnounceVoicemailHintHistory.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

PhoneCallFlowDelegatePlugin::PhoneCallProvider::CodingKeys_optional protocol witness for CodingKey.init(intValue:) in conformance AnnounceVoicemailHintHistory.CodingKeys@<W0>(Swift::Int a1@<X0>, PhoneCallFlowDelegatePlugin::PhoneCallProvider::CodingKeys_optional *a2@<X8>)
{
  result.value = PhoneCallProvider.CodingKeys.init(intValue:)(a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnnounceVoicemailHintHistory.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnnounceVoicemailHintHistory.CodingKeys and conformance AnnounceVoicemailHintHistory.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnnounceVoicemailHintHistory.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnnounceVoicemailHintHistory.CodingKeys and conformance AnnounceVoicemailHintHistory.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AnnounceVoicemailHintHistory.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AnnounceVoicemailHintHistory.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AnnounceVoicemailHintHistory.CodingKeys and conformance AnnounceVoicemailHintHistory.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v10[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v8, v3);
}

unint64_t lazy protocol witness table accessor for type AnnounceVoicemailHintHistory.CodingKeys and conformance AnnounceVoicemailHintHistory.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory.CodingKeys and conformance AnnounceVoicemailHintHistory.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory.CodingKeys and conformance AnnounceVoicemailHintHistory.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory.CodingKeys and conformance AnnounceVoicemailHintHistory.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory.CodingKeys and conformance AnnounceVoicemailHintHistory.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory.CodingKeys and conformance AnnounceVoicemailHintHistory.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory.CodingKeys and conformance AnnounceVoicemailHintHistory.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory.CodingKeys and conformance AnnounceVoicemailHintHistory.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory.CodingKeys and conformance AnnounceVoicemailHintHistory.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory.CodingKeys and conformance AnnounceVoicemailHintHistory.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory.CodingKeys and conformance AnnounceVoicemailHintHistory.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory.CodingKeys and conformance AnnounceVoicemailHintHistory.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnounceVoicemailHintHistory.CodingKeys and conformance AnnounceVoicemailHintHistory.CodingKeys);
  }
  return result;
}

double AnnounceVoicemailHintHistory.init(from:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AnnounceVoicemailHintHistory.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  __chkstk_darwin(v2);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AnnounceVoicemailHintHistory.CodingKeys and conformance AnnounceVoicemailHintHistory.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  KeyedDecodingContainer.decode(_:forKey:)();
  KeyedDecodingContainer.decode(_:forKey:)();
  KeyedDecodingContainer.decode(_:forKey:)();
  double v5 = v4;
  uint64_t v6 = OUTLINED_FUNCTION_2_61();
  v7(v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v5;
}

Swift::Int protocol witness for SiriPhoneDefaultsCodable.init() in conformance AnnounceVoicemailHintHistory@<X0>(uint64_t a1@<X8>)
{
  PhoneCallFlowDelegatePlugin::AnnounceVoicemailHintHistory v3 = AnnounceVoicemailHintHistory.init()();
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(Swift::Double *)(a1 + 16) = v3.lastHintTimestamp;
  return v3.count;
}

unint64_t instantiation function for generic protocol witness table for AnnounceVoicemailHintHistory(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory();
  a1[2] = lazy protocol witness table accessor for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory();
  unint64_t result = lazy protocol witness table accessor for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory();
  a1[3] = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for AnnounceVoicemailHintHistory(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory();
  unint64_t result = lazy protocol witness table accessor for type AnnounceVoicemailHintHistory and conformance AnnounceVoicemailHintHistory();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnnounceVoicemailHintHistory()
{
  return AnnounceVoicemailHintHistory.description.getter();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AnnounceVoicemailHintHistory(uint64_t a1, uint64_t a2)
{
  return static AnnounceVoicemailHintHistory.__derived_struct_equals(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8), *(double *)(a1 + 16), *(double *)(a2 + 16));
}

void protocol witness for Decodable.init(from:) in conformance AnnounceVoicemailHintHistory(void *a1@<X0>, uint64_t a2@<X8>)
{
  double v6 = AnnounceVoicemailHintHistory.init(from:)(a1);
  if (!v2)
  {
    *(void *)a2 = v4;
    *(void *)(a2 + 8) = v5;
    *(double *)(a2 + 16) = v6;
  }
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AnnounceVoicemailHintHistory(void *a1)
{
  return AnnounceVoicemailHintHistory.encode(to:)(a1);
}

uint64_t getEnumTagSinglePayload for AnnounceVoicemailHintHistory(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AnnounceVoicemailHintHistory(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AnnounceVoicemailHintHistory()
{
  return &type metadata for AnnounceVoicemailHintHistory;
}

unsigned char *storeEnumTagSinglePayload for AnnounceVoicemailHintHistory.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x19C6FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for AnnounceVoicemailHintHistory.CodingKeys()
{
  return &unk_5593C0;
}

uint64_t OUTLINED_FUNCTION_2_61()
{
  return v0;
}

void *PhoneAppResolutionHelper.appUsageLookUpDays.unsafeMutableAddressor()
{
  return &static PhoneAppResolutionHelper.appUsageLookUpDays;
}

uint64_t static PhoneAppResolutionHelper.appUsageLookUpDays.getter()
{
  return 7;
}

uint64_t PhoneAppResolutionHelper.sharedGlobals.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SharedGlobalsProviding(v1 + 56, a1);
}

#error "19C8F8: call analysis failed (funcsize=56)"

#error "19C9C8: call analysis failed (funcsize=52)"

Swift::Bool __swiftcall PhoneAppResolutionHelper.areFirstPartyAppsOnly(apps:)(Swift::OpaquePointer apps)
{
  if ((unint64_t)apps._rawValue >> 62) {
    goto LABEL_19;
  }
  uint64_t v2 = *(void *)((char *)&dword_10 + ((unint64_t)apps._rawValue & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  if (v2)
  {
    while (1)
    {
      if (((unint64_t)apps._rawValue & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      Swift::Bool v3 = App.isFirstParty()();
      swift_release();
      if (!v3) {
        break;
      }
      if (v2 != 1)
      {
        uint64_t v6 = 5;
        while (1)
        {
          if (((unint64_t)apps._rawValue & 0xC000000000000001) != 0)
          {
            OUTLINED_FUNCTION_96();
            specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            swift_retain();
          }
          uint64_t v7 = v6 - 3;
          if (__OFADD__(v6 - 4, 1)) {
            break;
          }
          Swift::Bool v4 = App.isFirstParty()();
          swift_release();
          if (v4)
          {
            ++v6;
            if (v7 != v2) {
              continue;
            }
          }
          goto LABEL_9;
        }
        __break(1u);
LABEL_19:
        OUTLINED_FUNCTION_32_3();
        uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
        if (v2) {
          continue;
        }
      }
      goto LABEL_7;
    }
    Swift::Bool v4 = 0;
  }
  else
  {
LABEL_7:
    Swift::Bool v4 = 1;
  }
LABEL_9:
  swift_bridgeObjectRelease();
  return v4;
}

Swift::String __swiftcall PhoneAppResolutionHelper.mapInCallServiceToMobile(appId:)(Swift::String appId)
{
  Swift::String v1 = String.lowercased()();
  Swift::String v2 = String.lowercased()();
  if (v1._countAndFlagsBits == v2._countAndFlagsBits && v1._object == v2._object)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v4 = OUTLINED_FUNCTION_7_44();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v4 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
  }
  OUTLINED_FUNCTION_96();
  Swift::String v5 = String.lowercased()();
  swift_bridgeObjectRelease();
  uint64_t countAndFlagsBits = v5._countAndFlagsBits;
  object = v5._object;
  result._object = object;
  result._uint64_t countAndFlagsBits = countAndFlagsBits;
  return result;
}

Swift::String __swiftcall PhoneAppResolutionHelper.mapMobileToInCallService(appId:)(Swift::String appId)
{
  object = appId._object;
  uint64_t countAndFlagsBits = appId._countAndFlagsBits;
  unint64_t v3 = 0xD000000000000017;
  Swift::String v4 = String.lowercased()();
  Swift::String v5 = String.lowercased()();
  if (v4._countAndFlagsBits == v5._countAndFlagsBits && v4._object == v5._object)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_8;
  }
  char v7 = OUTLINED_FUNCTION_7_44();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v7)
  {
LABEL_8:
    object = (void *)0x8000000000493240;
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  unint64_t v3 = countAndFlagsBits;
LABEL_9:
  uint64_t v8 = v3;
  double v9 = object;
  result._object = v9;
  result._uint64_t countAndFlagsBits = v8;
  return result;
}

uint64_t PhoneAppResolutionHelper.isSameAppId(app:appId:)()
{
  uint64_t countAndFlagsBits = App.appIdentifier.getter();
  if (v1)
  {
    Swift::String v2 = String.lowercased()();
    uint64_t countAndFlagsBits = v2._countAndFlagsBits;
    object = v2._object;
    swift_bridgeObjectRelease();
  }
  else
  {
    object = 0;
  }
  Swift::String v4 = String.lowercased()();
  if (object)
  {
    if (countAndFlagsBits == v4._countAndFlagsBits && object == v4._object)
    {
      char v6 = 1;
    }
    else
    {
      OUTLINED_FUNCTION_96();
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v6 = 0;
  }
  swift_bridgeObjectRelease();
  return v6 & 1;
}

uint64_t PhoneAppResolutionHelper.rankBasedOnAppUsageTime(apps:)(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v3 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
  }
  unint64_t v18 = v2;
  if (v3)
  {
    if (v3 < 1)
    {
      __break(1u);
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t result = swift_release();
      __break(1u);
      return result;
    }
    uint64_t v4 = 0;
    Swift::String v5 = _swiftEmptyArrayStorage;
    do
    {
      if ((a1 & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      uint64_t v6 = App.appIdentifier.getter();
      unint64_t v8 = v7;
      swift_release();
      if (!v8)
      {
        uint64_t v6 = 0;
        unint64_t v8 = 0xE000000000000000;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_8_49();
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        Swift::String v5 = v12;
      }
      unint64_t v10 = v5[2];
      unint64_t v9 = v5[3];
      if (v10 >= v9 >> 1)
      {
        OUTLINED_FUNCTION_6_43(v9);
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        Swift::String v5 = v13;
      }
      ++v4;
      long long v5[2] = v10 + 1;
      uint64_t v11 = &v5[2 * v10];
      void v11[4] = v6;
      v11[5] = v8;
    }
    while (v3 != v4);
  }
  else
  {
    Swift::String v5 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_22();
  uint64_t v15 = (*(uint64_t (**)(void *, uint64_t))(v14 + 80))(v5, 7);
  swift_bridgeObjectRelease();
  if (v18)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v16 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(a1);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  uint64_t v20 = v16;
  swift_retain();
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)(&v20, v19, v15);
  swift_release();
  swift_bridgeObjectRelease_n();
  return v20;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *a1;
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v7 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v7);
    *a1 = v7;
  }
  uint64_t v9 = *(void *)(v7 + 16);
  v11[0] = v7 + 32;
  v11[1] = v9;
  swift_retain();
  swift_bridgeObjectRetain();
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v11, a2, a3);
  specialized ContiguousArray._endMutation()();
  if (v3)
  {
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_release();
    return swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    return swift_release_n();
  }
}

uint64_t specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  Swift::Int v8 = a1[1];
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  Swift::Int v9 = _minimumMergeRunLength(_:)(v8);
  if (v9 >= v8)
  {
    if (v8 < 0) {
      goto LABEL_132;
    }
    if (v8)
    {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v8, 1, a1, a2, a3);
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_release_n();
    }
    goto LABEL_109;
  }
  Swift::Int v10 = v9;
  uint64_t v115 = a2;
  uint64_t v11 = specialized static Array._allocateUninitialized(_:)(v8 / 2);
  long long v114 = v12;
  uint64_t v127 = v11;
  uint64_t v113 = v8;
  uint64_t v110 = a1;
  if (v8 <= 0)
  {
    uint64_t v14 = (char *)_swiftEmptyArrayStorage;
    unint64_t v37 = _swiftEmptyArrayStorage[2];
LABEL_93:
    uint64_t v99 = v4;
    if (v37 >= 2)
    {
      uint64_t v100 = *v110;
      uint64_t v120 = *v110;
      while (1)
      {
        unint64_t v101 = v37 - 2;
        if (v37 < 2) {
          break;
        }
        if (!v100) {
          goto LABEL_141;
        }
        uint64_t v102 = v99;
        uint64_t v103 = *(void *)&v14[16 * v101 + 32];
        uint64_t v104 = *(void *)&v14[16 * v37 + 24];
        uint64_t v123 = (void *)(v100 + 8 * *(void *)&v14[16 * v37 + 16]);
        uint64_t v125 = (void *)(v100 + 8 * v103);
        unint64_t v105 = v100 + 8 * v104;
        swift_retain();
        swift_bridgeObjectRetain();
        specialized _merge<A>(low:mid:high:buffer:by:)(v125, v123, v105, v114, v115, a3);
        uint64_t v99 = v102;
        if (v102)
        {
          uint64_t v98 = v113;
          goto LABEL_90;
        }
        if (v104 < v103) {
          goto LABEL_127;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v14);
        }
        if (v101 >= *((void *)v14 + 2)) {
          goto LABEL_128;
        }
        uint64_t v106 = &v14[16 * v101 + 32];
        *(void *)uint64_t v106 = v103;
        *((void *)v106 + 1) = v104;
        unint64_t v107 = *((void *)v14 + 2);
        if (v37 > v107) {
          goto LABEL_129;
        }
        memmove(&v14[16 * v37 + 16], &v14[16 * v37 + 32], 16 * (v107 - v37));
        *((void *)v14 + 2) = v107 - 1;
        unint64_t v37 = v107 - 1;
        uint64_t v100 = v120;
        if (v107 <= 2) {
          goto LABEL_106;
        }
      }
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
LABEL_106:
    swift_bridgeObjectRelease();
    if (v113 < -1) {
      goto LABEL_137;
    }
    *(void *)((char *)&dword_10 + (v127 & 0xFFFFFFFFFFFFFF8)) = 0;
LABEL_108:
    specialized Array._endMutation()();
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_bridgeObjectRelease();
LABEL_109:
    swift_release_n();
    return swift_bridgeObjectRelease_n();
  }
  Swift::Int v111 = v10;
  uint64_t v13 = 0;
  uint64_t v124 = *a1;
  uint64_t v109 = *a1 - 8;
  uint64_t v14 = (char *)_swiftEmptyArrayStorage;
  uint64_t v126 = a3;
  while (1)
  {
    Swift::Int v15 = v13;
    Swift::Int v16 = v13 + 1;
    if (v13 + 1 < v8)
    {
      swift_retain();
      swift_retain();
      PhoneAppResolutionHelper.getUsageTime(relativeAppUsage:app:)(a3);
      double v18 = v17;
      PhoneAppResolutionHelper.getUsageTime(relativeAppUsage:app:)(a3);
      double v20 = v19;
      swift_release();
      Swift::Int v8 = v113;
      swift_release();
      Swift::Int v16 = v15 + 2;
      if (v15 + 2 < v113)
      {
        Swift::Int v21 = v15;
        while (1)
        {
          swift_retain();
          swift_retain();
          PhoneAppResolutionHelper.getUsageTime(relativeAppUsage:app:)(a3);
          double v23 = v22;
          PhoneAppResolutionHelper.getUsageTime(relativeAppUsage:app:)(a3);
          double v25 = v24;
          swift_release();
          swift_release();
          if (v20 < v18 == v25 >= v23) {
            break;
          }
          uint64_t v26 = v21 + 3;
          ++v21;
          Swift::Int v8 = v113;
          if (v26 >= v113)
          {
            Swift::Int v16 = v113;
            goto LABEL_11;
          }
        }
        Swift::Int v16 = v21 + 2;
        Swift::Int v8 = v113;
      }
LABEL_11:
      if (v20 < v18)
      {
        if (v16 < v15) {
          goto LABEL_134;
        }
        if (v15 < v16)
        {
          unint64_t v27 = (uint64_t *)(v109 + 8 * v16);
          Swift::Int v28 = v16;
          Swift::Int v29 = v15;
          uint64_t v30 = (uint64_t *)(v124 + 8 * v15);
          do
          {
            if (v29 != --v28)
            {
              if (!v124) {
                goto LABEL_140;
              }
              uint64_t v31 = *v30;
              *uint64_t v30 = *v27;
              uint64_t *v27 = v31;
            }
            ++v29;
            --v27;
            ++v30;
          }
          while (v29 < v28);
        }
      }
    }
    if (v16 >= v8) {
      goto LABEL_28;
    }
    if (__OFSUB__(v16, v15)) {
      goto LABEL_131;
    }
    if (v16 - v15 >= v111)
    {
LABEL_28:
      uint64_t v33 = v4;
      uint64_t v34 = v124;
      goto LABEL_29;
    }
    if (__OFADD__(v15, v111)) {
      goto LABEL_135;
    }
    Swift::Int v32 = v15 + v111 >= v8 ? v8 : v15 + v111;
    if (v32 < v15) {
      break;
    }
    if (v16 == v32) {
      goto LABEL_28;
    }
    uint64_t v117 = v4;
    uint64_t v119 = v14;
    uint64_t v89 = (uint64_t *)(v109 + 8 * v16);
    uint64_t v34 = v124;
    Swift::Int v122 = v32;
    do
    {
      Swift::Int v90 = v16;
      Swift::Int v91 = v15;
      uint64_t v92 = v89;
      do
      {
        swift_retain();
        swift_retain();
        PhoneAppResolutionHelper.getUsageTime(relativeAppUsage:app:)(a3);
        double v94 = v93;
        PhoneAppResolutionHelper.getUsageTime(relativeAppUsage:app:)(a3);
        double v96 = v95;
        swift_release();
        swift_release();
        if (v96 >= v94) {
          break;
        }
        if (!v124) {
          goto LABEL_138;
        }
        uint64_t v97 = *v92;
        *uint64_t v92 = v92[1];
        v92[1] = v97;
        --v92;
        ++v91;
      }
      while (v16 != v91);
      ++v16;
      ++v89;
    }
    while (v90 + 1 != v122);
    Swift::Int v16 = v122;
    uint64_t v33 = v117;
    uint64_t v14 = v119;
LABEL_29:
    if (v16 < v15) {
      goto LABEL_130;
    }
    uint64_t v112 = v16;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v14 + 2) + 1, 1, v14);
    }
    unint64_t v36 = *((void *)v14 + 2);
    unint64_t v35 = *((void *)v14 + 3);
    unint64_t v37 = v36 + 1;
    if (v36 >= v35 >> 1) {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v35 > 1), v36 + 1, 1, v14);
    }
    *((void *)v14 + 2) = v37;
    char v38 = v14 + 32;
    long long v39 = &v14[16 * v36 + 32];
    *(void *)long long v39 = v15;
    *((void *)v39 + 1) = v16;
    if (v36)
    {
      while (1)
      {
        unint64_t v40 = v37 - 1;
        if (v37 >= 4)
        {
          int v45 = &v38[16 * v37];
          uint64_t v46 = *((void *)v45 - 8);
          uint64_t v47 = *((void *)v45 - 7);
          BOOL v51 = __OFSUB__(v47, v46);
          uint64_t v48 = v47 - v46;
          if (v51) {
            goto LABEL_115;
          }
          uint64_t v50 = *((void *)v45 - 6);
          uint64_t v49 = *((void *)v45 - 5);
          BOOL v51 = __OFSUB__(v49, v50);
          uint64_t v43 = v49 - v50;
          char v44 = v51;
          if (v51) {
            goto LABEL_116;
          }
          unint64_t v52 = v37 - 2;
          uint64_t v53 = &v38[16 * v37 - 32];
          uint64_t v55 = *(void *)v53;
          uint64_t v54 = *((void *)v53 + 1);
          BOOL v51 = __OFSUB__(v54, v55);
          uint64_t v56 = v54 - v55;
          if (v51) {
            goto LABEL_117;
          }
          BOOL v51 = __OFADD__(v43, v56);
          uint64_t v57 = v43 + v56;
          if (v51) {
            goto LABEL_119;
          }
          if (v57 >= v48)
          {
            uint64_t v75 = &v38[16 * v40];
            uint64_t v77 = *(void *)v75;
            uint64_t v76 = *((void *)v75 + 1);
            BOOL v51 = __OFSUB__(v76, v77);
            uint64_t v78 = v76 - v77;
            if (v51) {
              goto LABEL_125;
            }
            BOOL v68 = v43 < v78;
            goto LABEL_66;
          }
        }
        else
        {
          if (v37 != 3)
          {
            uint64_t v69 = *((void *)v14 + 4);
            uint64_t v70 = *((void *)v14 + 5);
            BOOL v51 = __OFSUB__(v70, v69);
            uint64_t v62 = v70 - v69;
            char v63 = v51;
            goto LABEL_60;
          }
          uint64_t v42 = *((void *)v14 + 4);
          uint64_t v41 = *((void *)v14 + 5);
          BOOL v51 = __OFSUB__(v41, v42);
          uint64_t v43 = v41 - v42;
          char v44 = v51;
        }
        if (v44) {
          goto LABEL_118;
        }
        unint64_t v52 = v37 - 2;
        uint64_t v58 = &v38[16 * v37 - 32];
        uint64_t v60 = *(void *)v58;
        uint64_t v59 = *((void *)v58 + 1);
        BOOL v61 = __OFSUB__(v59, v60);
        uint64_t v62 = v59 - v60;
        char v63 = v61;
        if (v61) {
          goto LABEL_120;
        }
        uint64_t v64 = &v38[16 * v40];
        uint64_t v66 = *(void *)v64;
        uint64_t v65 = *((void *)v64 + 1);
        BOOL v51 = __OFSUB__(v65, v66);
        uint64_t v67 = v65 - v66;
        if (v51) {
          goto LABEL_122;
        }
        if (__OFADD__(v62, v67)) {
          goto LABEL_124;
        }
        if (v62 + v67 >= v43)
        {
          BOOL v68 = v43 < v67;
LABEL_66:
          if (v68) {
            unint64_t v40 = v52;
          }
          goto LABEL_68;
        }
LABEL_60:
        if (v63) {
          goto LABEL_121;
        }
        uint64_t v71 = &v38[16 * v40];
        uint64_t v73 = *(void *)v71;
        uint64_t v72 = *((void *)v71 + 1);
        BOOL v51 = __OFSUB__(v72, v73);
        uint64_t v74 = v72 - v73;
        if (v51) {
          goto LABEL_123;
        }
        if (v74 < v62) {
          goto LABEL_77;
        }
LABEL_68:
        unint64_t v79 = v40 - 1;
        if (v40 - 1 >= v37)
        {
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
          goto LABEL_126;
        }
        if (!v34) {
          goto LABEL_139;
        }
        uint64_t v80 = v34;
        uint64_t v81 = &v38[16 * v79];
        uint64_t v82 = v38;
        uint64_t v83 = *(void *)v81;
        unint64_t v84 = v40;
        uint64_t v85 = &v82[16 * v40];
        uint64_t v86 = *((void *)v85 + 1);
        uint64_t v118 = (void *)(v80 + 8 * *(void *)v85);
        uint64_t v121 = (void *)(v80 + 8 * *(void *)v81);
        unint64_t v116 = v80 + 8 * v86;
        swift_retain();
        swift_bridgeObjectRetain();
        specialized _merge<A>(low:mid:high:buffer:by:)(v121, v118, v116, v114, v115, v126);
        if (v33)
        {
          uint64_t v98 = v113;
LABEL_90:
          swift_bridgeObjectRelease();
          if (v98 >= -1)
          {
            *(void *)((char *)&dword_10 + (v127 & 0xFFFFFFFFFFFFFF8)) = 0;
            goto LABEL_108;
          }
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
          goto LABEL_136;
        }
        if (v86 < v83) {
          goto LABEL_112;
        }
        if (v84 > *((void *)v14 + 2)) {
          goto LABEL_113;
        }
        unint64_t v87 = v84;
        *(void *)uint64_t v81 = v83;
        char v38 = v14 + 32;
        *(void *)&v14[16 * v79 + 40] = v86;
        unint64_t v88 = *((void *)v14 + 2);
        if (v84 >= v88) {
          goto LABEL_114;
        }
        unint64_t v37 = v88 - 1;
        memmove(v85, v85 + 16, 16 * (v88 - 1 - v87));
        *((void *)v14 + 2) = v88 - 1;
        uint64_t v34 = v124;
        a3 = v126;
        if (v88 <= 2) {
          goto LABEL_77;
        }
      }
    }
    unint64_t v37 = 1;
LABEL_77:
    uint64_t v4 = v33;
    uint64_t v13 = v112;
    Swift::Int v8 = v113;
    if (v112 >= v113) {
      goto LABEL_93;
    }
  }
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  swift_bridgeObjectRelease_n();
  swift_release_n();
  __break(1u);
LABEL_139:
  swift_bridgeObjectRelease_n();
  swift_release_n();
  __break(1u);
LABEL_140:
  swift_bridgeObjectRelease_n();
  swift_release_n();
  __break(1u);
LABEL_141:
  swift_bridgeObjectRelease_n();
  uint64_t result = swift_release_n();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  if (a3 != a2)
  {
    uint64_t v7 = a3;
    uint64_t v9 = *a4;
    uint64_t v10 = *a4 + 8 * a3 - 8;
    while (2)
    {
      uint64_t v11 = a1;
      uint64_t v12 = (uint64_t *)v10;
      do
      {
        swift_retain();
        swift_retain();
        PhoneAppResolutionHelper.getUsageTime(relativeAppUsage:app:)(a6);
        double v14 = v13;
        PhoneAppResolutionHelper.getUsageTime(relativeAppUsage:app:)(a6);
        double v16 = v15;
        swift_release();
        uint64_t result = swift_release();
        if (v16 >= v14) {
          break;
        }
        if (!v9)
        {
          __break(1u);
          return result;
        }
        uint64_t v18 = *v12;
        uint64_t *v12 = v12[1];
        v12[1] = v18;
        --v12;
        ++v11;
      }
      while (v7 != v11);
      ++v7;
      v10 += 8;
      if (v7 != a2) {
        continue;
      }
      break;
    }
  }
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(void *a1, void *a2, unint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a4;
  Swift::Int v8 = a2;
  uint64_t v9 = a1;
  uint64_t v10 = (char *)a2 - (char *)a1;
  uint64_t v11 = a2 - a1;
  uint64_t v12 = a3 - (void)a2;
  uint64_t v13 = (uint64_t)(a3 - (void)a2) / 8;
  if (v11 >= v13)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - (void)a2) / 8, a4);
    double v14 = &v6[v13];
    if (v9 >= v8 || v12 < 8) {
      goto LABEL_38;
    }
    double v25 = (void *)(a3 - 8);
    unint64_t v37 = v6;
    while (1)
    {
      char v38 = v25 + 1;
      uint64_t v26 = v14 - 1;
      unint64_t v27 = v8 - 1;
      unint64_t v28 = (unint64_t)v14;
      swift_retain();
      swift_retain();
      PhoneAppResolutionHelper.getUsageTime(relativeAppUsage:app:)(a6);
      double v30 = v29;
      PhoneAppResolutionHelper.getUsageTime(relativeAppUsage:app:)(a6);
      double v32 = v31;
      swift_release();
      swift_release();
      if (v32 >= v30)
      {
        uint64_t v6 = v37;
        BOOL v34 = v38 != (void *)v28 || (unint64_t)v25 >= v28;
        unint64_t v27 = v26;
        double v14 = v26;
        if (!v34) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v6 = v37;
        BOOL v33 = v38 != v8 || v25 >= v8;
        --v8;
        double v14 = (void *)v28;
        if (!v33) {
          goto LABEL_34;
        }
      }
      *double v25 = *v27;
LABEL_34:
      --v25;
      if (v8 <= v9 || v14 <= v6) {
        goto LABEL_38;
      }
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2 - a1, a4);
  double v14 = &v6[v11];
  if ((unint64_t)v8 < a3 && v10 >= 8)
  {
    do
    {
      unint64_t v16 = (unint64_t)v14;
      swift_retain();
      swift_retain();
      PhoneAppResolutionHelper.getUsageTime(relativeAppUsage:app:)(a6);
      double v18 = v17;
      PhoneAppResolutionHelper.getUsageTime(relativeAppUsage:app:)(a6);
      double v20 = v19;
      swift_release();
      swift_release();
      if (v20 >= v18)
      {
        Swift::Int v21 = v6;
        BOOL v22 = v9 == v6++;
      }
      else
      {
        Swift::Int v21 = v8;
        BOOL v22 = v9 == v8++;
      }
      double v14 = (void *)v16;
      if (!v22) {
        *uint64_t v9 = *v21;
      }
      ++v9;
    }
    while ((unint64_t)v6 < v16 && (unint64_t)v8 < a3);
  }
  Swift::Int v8 = v9;
LABEL_38:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v6, v14 - v6, v8);
  swift_bridgeObjectRelease();
  swift_release();
  return 1;
}

uint64_t specialized PhoneAppResolutionHelper.init(sharedGlobals:eligibleAppsFinder:smartAppSelection:phoneAppResolutionLogger:appUsageProvider:appResolver:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void v43[3] = a8;
  v43[4] = a9;
  __swift_allocate_boxed_opaque_existential_1(v43);
  OUTLINED_FUNCTION_10();
  (*(void (**)(void))(v15 + 32))();
  unint64_t v16 = (uint64_t *)(a7 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin24PhoneAppResolutionHelper_logPrefix);
  *unint64_t v16 = type metadata accessor for PhoneAppResolutionHelper();
  v16[1] = (uint64_t)&outlined read-only object #0 of specialized PhoneAppResolutionHelper.init(sharedGlobals:eligibleAppsFinder:smartAppSelection:phoneAppResolutionLogger:appUsageProvider:appResolver:);
  void v16[2] = 0;
  v16[3] = 0;
  outlined init with copy of SharedGlobalsProviding(a1, a7 + 56);
  outlined init with copy of SharedGlobalsProviding((uint64_t)v43, a7 + 16);
  uint64_t v17 = a7 + OBJC_IVAR____TtC27PhoneCallFlowDelegatePlugin24PhoneAppResolutionHelper_appResolver;
  uint64_t v18 = type metadata accessor for AppResolver();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v17, a6, v18);
  *(void *)(a7 + 144) = a5;
  if (a3)
  {
    swift_retain();
    double v19 = a3;
  }
  else
  {
    outlined init with copy of SharedGlobalsProviding(a1, (uint64_t)&v40);
    double v20 = self;
    swift_retain();
    id v21 = [v20 clientWithIdentifier:112];
    type metadata accessor for TrialSmartAppSelectionConfigProvider();
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = v21;
    type metadata accessor for DiagnosticLogPermission();
    uint64_t v23 = swift_allocObject();
    type metadata accessor for SmartAppSelectionFeatureManager();
    swift_allocObject();
    double v19 = SmartAppSelectionFeatureManager.init(sharedGlobals:trialSmartAppSelectionConfigProvider:diagnosticLogPermission:)(&v40, v22, v23);
  }
  *(void *)(a7 + 96) = v19;
  outlined init with copy of PhoneAppResolutionLogging?(a4, (uint64_t)&v38);
  if (v39)
  {
    swift_release();
    uint64_t v24 = OUTLINED_FUNCTION_9_39();
    v25(v24);
    outlined destroy of PhoneAppResolutionLogging?(a4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
    __swift_destroy_boxed_opaque_existential_1(a1);
    outlined init with take of AppSelectionSignalComponent(&v38, (uint64_t)&v40);
  }
  else
  {
    uint64_t v34 = a4;
    swift_retain();
    outlined destroy of PhoneAppResolutionLogging?((uint64_t)&v38);
    outlined init with copy of SharedGlobalsProviding(a1, (uint64_t)&v38);
    id v26 = [self sharedAnalytics];
    id v27 = [v26 defaultMessageStream];

    if (one-time initialization token for instance != -1) {
      swift_once();
    }
    uint64_t v28 = static EligibleAppFinder.instance;
    uint64_t v36 = type metadata accessor for EligibleAppFinder();
    unint64_t v37 = &protocol witness table for EligibleAppFinder;
    *(void *)&long long v35 = v28;
    uint64_t v41 = &type metadata for PhoneAppResolutionLogger;
    uint64_t v42 = &protocol witness table for PhoneAppResolutionLogger;
    uint64_t v29 = swift_allocObject();
    double v30 = (void *)(v29 + 16);
    *(void *)&long long v40 = v29;
    swift_retain();
    PhoneAppResolutionLogger.init(sharedGlobals:messageStream:eligibleAppsFinder:)(&v38, (uint64_t)v27, &v35, v30);
    swift_release();
    swift_release();
    uint64_t v31 = OUTLINED_FUNCTION_9_39();
    v32(v31);
    outlined destroy of PhoneAppResolutionLogging?(v34);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  outlined init with take of AppSelectionSignalComponent(&v40, a7 + 104);
  return a7;
}

uint64_t ObjC metadata update function for PhoneAppResolutionHelper()
{
  return type metadata accessor for PhoneAppResolutionHelper();
}

uint64_t type metadata completion function for PhoneAppResolutionHelper()
{
  uint64_t result = type metadata accessor for AppResolver();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t outlined destroy of PhoneAppResolutionLogging?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneAppResolutionLogging?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_19E198()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  __swift_destroy_boxed_opaque_existential_1(v0 + 80);
  __swift_destroy_boxed_opaque_existential_1(v0 + 120);

  return _swift_deallocObject(v0, 160, 7);
}

uint64_t OUTLINED_FUNCTION_1_56(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return v1;
}

BOOL OUTLINED_FUNCTION_6_43@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t OUTLINED_FUNCTION_7_44()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_8_49()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_9_39()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_13_24()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_18_22()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_23_19()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_24_24()
{
  return v0;
}

uint64_t IdiomKeyedHintHistory<>.hintCount(deviceState:)(void *a1, uint64_t a2)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  int v3 = DeviceState.idiom.getter();
  uint64_t result = specialized Dictionary.subscript.getter(v3, a2);
  if (v5) {
    return 0;
  }
  return result;
}

uint64_t IdiomKeyedHintHistory<>.incrementHintCount(deviceState:)(void *a1)
{
  uint64_t v3 = *v1;
  int v4 = OUTLINED_FUNCTION_1_57(a1);
  uint64_t result = specialized Dictionary.subscript.getter(v4, v3);
  if (v6) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = result;
  }
  if (__OFADD__(v7, 1))
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_1_57(a1);
    return specialized Dictionary._Variant.setValue(_:forKey:)();
  }
  return result;
}

unint64_t OneTimeHintHistory.description.getter()
{
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 32010;
  v1._object = (void *)0xE200000000000000;
  String.append(_:)(v1);
  return 0xD000000000000011;
}

uint64_t OneTimeHintHistory.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x6E756F43746E6968 && a2 == 0xE900000000000074)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t OneTimeHintHistory.CodingKeys.stringValue.getter()
{
  return 0x6E756F43746E6968;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance OneTimeHintHistory.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = OneTimeHintHistory.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance OneTimeHintHistory.CodingKeys()
{
  return AnnounceVoicemailDirectAction.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance OneTimeHintHistory.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CallingIntentContinueInAppStrategy.shouldCheckResponseModeToOutputIntentHandledDialog.getter();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance OneTimeHintHistory.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OneTimeHintHistory.CodingKeys and conformance OneTimeHintHistory.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance OneTimeHintHistory.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OneTimeHintHistory.CodingKeys and conformance OneTimeHintHistory.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t OneTimeHintHistory.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<OneTimeHintHistory.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type OneTimeHintHistory.CodingKeys and conformance OneTimeHintHistory.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v2);
}

uint64_t OneTimeHintHistory.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<OneTimeHintHistory.CodingKeys>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  Swift::Int v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (uint64_t)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type OneTimeHintHistory.CodingKeys and conformance OneTimeHintHistory.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v3);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v9;
}

void protocol witness for SiriPhoneDefaultsCodable.init() in conformance OneTimeHintHistory(void *a1@<X8>)
{
  *a1 = 0;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance OneTimeHintHistory()
{
  return OneTimeHintHistory.description.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance OneTimeHintHistory@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = OneTimeHintHistory.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance OneTimeHintHistory(void *a1)
{
  return OneTimeHintHistory.encode(to:)(a1);
}

unint64_t lazy protocol witness table accessor for type OneTimeHintHistory.CodingKeys and conformance OneTimeHintHistory.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type OneTimeHintHistory.CodingKeys and conformance OneTimeHintHistory.CodingKeys;
  if (!lazy protocol witness table cache variable for type OneTimeHintHistory.CodingKeys and conformance OneTimeHintHistory.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneTimeHintHistory.CodingKeys and conformance OneTimeHintHistory.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OneTimeHintHistory.CodingKeys and conformance OneTimeHintHistory.CodingKeys;
  if (!lazy protocol witness table cache variable for type OneTimeHintHistory.CodingKeys and conformance OneTimeHintHistory.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneTimeHintHistory.CodingKeys and conformance OneTimeHintHistory.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OneTimeHintHistory.CodingKeys and conformance OneTimeHintHistory.CodingKeys;
  if (!lazy protocol witness table cache variable for type OneTimeHintHistory.CodingKeys and conformance OneTimeHintHistory.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneTimeHintHistory.CodingKeys and conformance OneTimeHintHistory.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OneTimeHintHistory.CodingKeys and conformance OneTimeHintHistory.CodingKeys;
  if (!lazy protocol witness table cache variable for type OneTimeHintHistory.CodingKeys and conformance OneTimeHintHistory.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneTimeHintHistory.CodingKeys and conformance OneTimeHintHistory.CodingKeys);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for OneTimeHintHistory(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type OneTimeHintHistory and conformance OneTimeHintHistory();
  a1[2] = lazy protocol witness table accessor for type OneTimeHintHistory and conformance OneTimeHintHistory();
  unint64_t result = lazy protocol witness table accessor for type OneTimeHintHistory and conformance OneTimeHintHistory();
  a1[3] = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for OneTimeHintHistory(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type OneTimeHintHistory and conformance OneTimeHintHistory();
  unint64_t result = lazy protocol witness table accessor for type OneTimeHintHistory and conformance OneTimeHintHistory();
  *(void *)(a1 + 16) = result;
  return result;
}

ValueMetadata *type metadata accessor for OneTimeHintHistory()
{
  return &type metadata for OneTimeHintHistory;
}

unsigned char *storeEnumTagSinglePayload for OneTimeHintHistory.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x19EADCLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for OneTimeHintHistory.CodingKeys()
{
  return &unk_5594F0;
}

uint64_t OUTLINED_FUNCTION_1_57(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return DeviceState.idiom.getter();
}

char **PhoneSignpost.searchForBurstVoicemails.unsafeMutableAddressor()
{
  return &static PhoneSignpost.searchForBurstVoicemails;
}

char **PhoneSignpost.nLv4SettingsForCallControlNLIntent.unsafeMutableAddressor()
{
  return &static PhoneSignpost.nLv4SettingsForCallControlNLIntent;
}

char **PhoneSignpost.nLv3TransformNLIntent.unsafeMutableAddressor()
{
  return &static PhoneSignpost.nLv3TransformNLIntent;
}

char **PhoneSignpost.nLv4TransformNLIntent.unsafeMutableAddressor()
{
  return &static PhoneSignpost.nLv4TransformNLIntent;
}

char **PhoneSignpost.announceVoicemailBurstUpdate.unsafeMutableAddressor()
{
  return &static PhoneSignpost.announceVoicemailBurstUpdate;
}

char **PhoneSignpost.findApp.unsafeMutableAddressor()
{
  return &static PhoneSignpost.findApp;
}

char **PhoneSignpost.skTransformer.unsafeMutableAddressor()
{
  return &static PhoneSignpost.skTransformer;
}

char **PhoneSignpost.skTransformerForIntent.unsafeMutableAddressor()
{
  return &static PhoneSignpost.skTransformerForIntent;
}

char **PhoneSignpost.resolveCRR.unsafeMutableAddressor()
{
  return &static PhoneSignpost.resolveCRR;
}

uint64_t static Signpost.wrap<A>(_:around:)@<X0>(const char *a1@<X0>, char a2@<W2>, void (*a3)(void)@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v8 = *(void *)(a4 - 8);
  __chkstk_darwin(a1);
  OUTLINED_FUNCTION_4();
  uint64_t v32 = v11 - v10;
  type metadata accessor for OSSignpostID();
  OUTLINED_FUNCTION_0_0();
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_4();
  uint64_t v15 = v14 - v13;
  uint64_t v16 = type metadata accessor for OSSignposter();
  OUTLINED_FUNCTION_0_0();
  uint64_t v18 = v17;
  __chkstk_darwin(v19);
  OUTLINED_FUNCTION_5_1();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v16, (uint64_t)static OSSignposter.siriPhone);
  OUTLINED_FUNCTION_12();
  v20();
  OSSignposter.logHandle.getter();
  uint64_t result = OSSignpostID.init(log:)();
  if (a2)
  {
    if (!((unint64_t)a1 >> 32))
    {
      if (a1 >> 11 == 27)
      {
LABEL_16:
        __break(1u);
        return result;
      }
      if (a1 >> 16 <= 0x10)
      {
        uint64_t v22 = a4;
        uint64_t v29 = &v34;
        goto LABEL_10;
      }
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (!a1)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v22 = a4;
  uint64_t v29 = a1;
LABEL_10:
  uint64_t v23 = (uint8_t *)swift_slowAlloc();
  uint64_t v24 = swift_slowAlloc();
  *(_DWORD *)uint64_t v23 = 136315138;
  uint64_t v33 = v24;
  uint64_t v25 = StaticString.description.getter();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v33);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  closure #1 in OSSignposter.withIntervalSignpost<A>(_:id:_:around:)(v23, 0xCu, v5, v15, v29, "%s", a3);
  if (!v31)
  {
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(a5, v32, v22);
  }
  OUTLINED_FUNCTION_11();
  v27();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v5, v16);
}

char **PhoneSignpost.resolveCRRFaceTime.unsafeMutableAddressor()
{
  return &static PhoneSignpost.resolveCRRFaceTime;
}

void static Signpost.emitSyntheticInterval(_:beginTimestamp:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v32 = v2;
  uint64_t v33 = v1;
  char v4 = v3;
  uint64_t v5 = type metadata accessor for OSSignpostID();
  OUTLINED_FUNCTION_0_0();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_12_25();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v30 - v10;
  uint64_t v12 = type metadata accessor for OSSignposter();
  OUTLINED_FUNCTION_0_0();
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_53();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v12, (uint64_t)static OSSignposter.siriPhone);
  OUTLINED_FUNCTION_13_25();
  OUTLINED_FUNCTION_12();
  v14();
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  lazy protocol witness table accessor for type UInt64 and conformance UInt64();
  default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v15);
  uint64_t v16 = OSSignposter.logHandle.getter();
  int v31 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0) {
    goto LABEL_7;
  }
  if ((v4 & 1) == 0)
  {
    if (!v33)
    {
      __break(1u);
LABEL_7:

      OUTLINED_FUNCTION_14_4();
      v17();
      uint64_t v18 = OUTLINED_FUNCTION_26_7();
      v19(v18);
LABEL_13:
      OUTLINED_FUNCTION_26_1();
      return;
    }
LABEL_12:
    v30[1] = v11;
    OUTLINED_FUNCTION_12();
    v20();
    uint64_t v21 = swift_slowAlloc();
    uint64_t v22 = OUTLINED_FUNCTION_14_0();
    v30[0] = v0;
    *(_DWORD *)uint64_t v21 = 134218242;
    uint64_t v34 = v32;
    uint64_t v35 = v22;
    OUTLINED_FUNCTION_8_50();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v21 + 12) = 2080;
    uint64_t v32 = v5;
    uint64_t v23 = StaticString.description.getter();
    uint64_t v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v35);
    OUTLINED_FUNCTION_9_40(v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_signpost_id_t v26 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_0, v16, (os_signpost_type_t)v31, v26, v33, "%{public, signpost.description:begin_time}llu%s", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();

    id v27 = *(void (**)(void))(v7 + 8);
    OUTLINED_FUNCTION_14_4();
    v27();
    uint64_t v28 = OUTLINED_FUNCTION_26_7();
    v29(v28);
    OUTLINED_FUNCTION_14_4();
    v27();
    goto LABEL_13;
  }
  if ((unint64_t)v33 >> 32)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v33 >> 11 != 27)
  {
    if (v33 >> 16 <= 0x10)
    {
      uint64_t v33 = (const char *)&v36;
      goto LABEL_12;
    }
    goto LABEL_15;
  }
LABEL_16:
  __break(1u);
}

char **PhoneSignpost.resolveCRRFaceTimeHandleType.unsafeMutableAddressor()
{
  return &static PhoneSignpost.resolveCRRFaceTimeHandleType;
}

void static Signpost.event(_:number1:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v33 = v1;
  uint64_t v34 = v2;
  unint64_t v4 = v3;
  LODWORD(v35) = v5;
  uint64_t v36 = v6;
  uint64_t v7 = type metadata accessor for OSSignpostID();
  OUTLINED_FUNCTION_0_0();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_46_0();
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v31 - v12;
  uint64_t v14 = type metadata accessor for OSSignposter();
  OUTLINED_FUNCTION_0_0();
  uint64_t v16 = v15;
  __chkstk_darwin(v17);
  OUTLINED_FUNCTION_53();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v14, (uint64_t)static OSSignposter.siriPhone);
  OUTLINED_FUNCTION_13_25();
  OUTLINED_FUNCTION_12();
  v18();
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  swift_bridgeObjectRetain_n();
  default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v19);
  double v20 = OSSignposter.logHandle.getter();
  int v32 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0) {
    goto LABEL_7;
  }
  v31[1] = v0;
  v31[2] = v16;
  void v31[3] = v14;
  if ((v35 & 1) == 0)
  {
    if (!v36)
    {
      swift_bridgeObjectRelease_n();
      __break(1u);
LABEL_7:

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v7);
      OUTLINED_FUNCTION_11_33();
      v21();
LABEL_13:
      OUTLINED_FUNCTION_26_1();
      return;
    }
LABEL_12:
    uint64_t v22 = v9;
    OUTLINED_FUNCTION_12();
    v23();
    uint64_t v24 = OUTLINED_FUNCTION_14_0();
    uint64_t v38 = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 136315650;
    uint64_t v35 = v7;
    swift_bridgeObjectRetain();
    uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v4, &v38);
    OUTLINED_FUNCTION_8_50();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v24 + 12) = 2048;
    uint64_t v37 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v24 + 22) = 2080;
    uint64_t v25 = StaticString.description.getter();
    uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v38);
    OUTLINED_FUNCTION_9_40(v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_signpost_id_t v28 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_0, v20, (os_signpost_type_t)v32, v28, v36, "%s=%{public, signpost.telemetry:number1}lu %s", (uint8_t *)v24, 0x20u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();

    uint64_t v29 = *(void (**)(void))(v22 + 8);
    OUTLINED_FUNCTION_14_4();
    v29();
    OUTLINED_FUNCTION_11();
    v30();
    OUTLINED_FUNCTION_14_4();
    v29();
    goto LABEL_13;
  }
  if ((unint64_t)v36 >> 32)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v36 >> 11 != 27)
  {
    if (v36 >> 16 <= 0x10)
    {
      uint64_t v36 = (const char *)&v39;
      goto LABEL_12;
    }
    goto LABEL_15;
  }
LABEL_16:
  __break(1u);
}

char **PhoneSignpost.resolveCRRFaceTimeUndefined.unsafeMutableAddressor()
{
  return &static PhoneSignpost.resolveCRRFaceTimeUndefined;
}

char **PhoneSignpost.appsToDisambiguate.unsafeMutableAddressor()
{
  return &static PhoneSignpost.appsToDisambiguate;
}

uint64_t one-time initialization function for siriPhone()
{
  uint64_t v0 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_0_0();
  uint64_t v2 = v1;
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_4();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = type metadata accessor for OSSignposter();
  __swift_allocate_value_buffer(v7, static OSSignposter.siriPhone);
  __swift_project_value_buffer(v7, (uint64_t)static OSSignposter.siriPhone);
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v8 = __swift_project_value_buffer(v0, (uint64_t)static Logger.siriPhone);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v6, v8, v0);
  return OSSignposter.init(logger:)();
}

uint64_t OSSignposter.siriPhone.unsafeMutableAddressor()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for OSSignposter();

  return __swift_project_value_buffer(v0, (uint64_t)static OSSignposter.siriPhone);
}

uint64_t static OSSignposter.siriPhone.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for OSSignposter();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OSSignposter.siriPhone);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

void PhoneSignpost.enableTelemetry.getter()
{
}

void static Signpost.begin(_:message:)()
{
  OUTLINED_FUNCTION_24_0();
  unint64_t v2 = v1;
  uint64_t v43 = v3;
  int v49 = v4;
  uint64_t v48 = v5;
  uint64_t v7 = v6;
  uint64_t v8 = type metadata accessor for OSSignpostID();
  OUTLINED_FUNCTION_0_0();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_46_0();
  uint64_t v14 = v12 - v13;
  uint64_t v16 = __chkstk_darwin(v15);
  char v44 = (char *)&v37 - v17;
  __chkstk_darwin(v16);
  uint64_t v18 = OUTLINED_FUNCTION_21_23();
  OUTLINED_FUNCTION_0_0();
  uint64_t v20 = v19;
  __chkstk_darwin(v21);
  OUTLINED_FUNCTION_4();
  uint64_t v24 = v23 - v22;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v25 = __swift_project_value_buffer(v18, (uint64_t)static OSSignposter.siriPhone);
  uint64_t v45 = v20;
  uint64_t v46 = v18;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v24, v25, v18);
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  swift_bridgeObjectRetain_n();
  unint64_t v26 = OSSignposter.logHandle.getter();
  int v27 = static os_signpost_type_t.begin.getter();
  char v28 = OS_os_log.signpostsEnabled.getter();
  uint64_t v47 = v14;
  if ((v28 & 1) == 0)
  {
    swift_bridgeObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v47, v0, v8);
LABEL_13:
    type metadata accessor for OSSignpostIntervalState();
    swift_allocObject();
    OUTLINED_FUNCTION_14_24();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0, v8);
    OUTLINED_FUNCTION_11();
    v36();
    OUTLINED_FUNCTION_22_21();
    OUTLINED_FUNCTION_26_1();
    return;
  }
  uint64_t v41 = v24;
  uint64_t v42 = v7;
  int v40 = v27;
  if (v49)
  {
    if ((unint64_t)v7 >> 32)
    {
      __break(1u);
    }
    else
    {
      if (v7 >> 11 == 27)
      {
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
      if (v7 >> 16 <= 0x10)
      {
        uint64_t v38 = (const char *)&v52;
        goto LABEL_12;
      }
    }
    __break(1u);
    goto LABEL_16;
  }
  if (v7)
  {
    uint64_t v38 = v7;
LABEL_12:
    uint64_t v29 = v43;
    uint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
    OUTLINED_FUNCTION_12();
    v30();
    uint64_t v31 = swift_slowAlloc();
    uint64_t v51 = swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v2, &v51);
    uint64_t v43 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v31 + 12) = 2080;
    uint64_t v32 = StaticString.description.getter();
    uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v51);
    uint64_t v8 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v34 = v44;
    os_signpost_id_t v35 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_0, v26, (os_signpost_type_t)v40, v35, v38, "%s%s", (uint8_t *)v31, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();

    (*(void (**)(char *, uint64_t))(v10 + 8))(v34, v8);
    v39(v47, v0, v8);
    goto LABEL_13;
  }
LABEL_17:
  swift_bridgeObjectRelease_n();
  __break(1u);
}

void static Signpost.event(_:)()
{
  OUTLINED_FUNCTION_24_0();
  char v1 = v0;
  uint64_t v3 = v2;
  type metadata accessor for OSSignpostID();
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_46_0();
  __chkstk_darwin(v7);
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for OSSignposter();
  __swift_project_value_buffer(v8, (uint64_t)static OSSignposter.siriPhone);
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  uint64_t v9 = OSSignposter.logHandle.getter();
  os_signpost_type_t v10 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {

    OUTLINED_FUNCTION_11_33();
    v11();
LABEL_13:
    OUTLINED_FUNCTION_26_1();
    return;
  }
  if ((v1 & 1) == 0)
  {
    if (v3)
    {
      uint64_t v20 = v3;
LABEL_12:
      OUTLINED_FUNCTION_12();
      v12();
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = OUTLINED_FUNCTION_14_0();
      *(_DWORD *)uint64_t v13 = 136315138;
      uint64_t v21 = v14;
      uint64_t v15 = StaticString.description.getter();
      uint64_t v17 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v21);
      OUTLINED_FUNCTION_7_22(v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      os_signpost_id_t v18 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_0, v9, v10, v18, v20, "%s", v13, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();

      uint64_t v19 = *(void (**)(void))(v5 + 8);
      OUTLINED_FUNCTION_11_33();
      v19();
      OUTLINED_FUNCTION_11_33();
      v19();
      goto LABEL_13;
    }
    __break(1u);
    goto LABEL_15;
  }
  if ((unint64_t)v3 >> 32)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v3 >> 11 != 27)
  {
    if (v3 >> 16 <= 0x10)
    {
      uint64_t v20 = (const char *)&v22;
      goto LABEL_12;
    }
    goto LABEL_16;
  }
LABEL_17:
  __break(1u);
}

uint64_t default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)()
{
  return static OSLogIntegerFormatting.decimal.getter();
}

uint64_t Signpost.OpenSignpost.signpost.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

char **PhoneSignpost.makeFlow.unsafeMutableAddressor()
{
  return &static PhoneSignpost.makeFlow;
}

void static PhoneSignpost.makeFlow.getter()
{
}

void static PhoneSignpost.findApp.getter()
{
}

char **PhoneSignpost.entitlementCheckWithRBS.unsafeMutableAddressor()
{
  return &static PhoneSignpost.entitlementCheckWithRBS;
}

void static PhoneSignpost.entitlementCheckWithRBS.getter()
{
}

char **PhoneSignpost.pluginWarmup.unsafeMutableAddressor()
{
  return &static PhoneSignpost.pluginWarmup;
}

void static PhoneSignpost.pluginWarmup.getter()
{
}

void static PhoneSignpost.skTransformer.getter()
{
}

void static PhoneSignpost.skTransformerForIntent.getter()
{
}

char **PhoneSignpost.startCallDelegatePrewarm.unsafeMutableAddressor()
{
  return &static PhoneSignpost.startCallDelegatePrewarm;
}

void static PhoneSignpost.startCallDelegatePrewarm.getter()
{
}

char **PhoneSignpost.makeAceViewProvider.unsafeMutableAddressor()
{
  return &static PhoneSignpost.makeAceViewProvider;
}

void static PhoneSignpost.makeAceViewProvider.getter()
{
}

char **PhoneSignpost.makeNLContextProvider.unsafeMutableAddressor()
{
  return &static PhoneSignpost.makeNLContextProvider;
}

void static PhoneSignpost.makeNLContextProvider.getter()
{
}

char **PhoneSignpost.makeDialogTemplating.unsafeMutableAddressor()
{
  return &static PhoneSignpost.makeDialogTemplating;
}

void static PhoneSignpost.makeDialogTemplating.getter()
{
}

char **PhoneSignpost.meCardFetch.unsafeMutableAddressor()
{
  return &static PhoneSignpost.meCardFetch;
}

void static PhoneSignpost.meCardFetch.getter()
{
}

char **PhoneSignpost.fetchContactById.unsafeMutableAddressor()
{
  return &static PhoneSignpost.fetchContactById;
}

void static PhoneSignpost.fetchContactById.getter()
{
}

char **PhoneSignpost.fetchContactByHandle.unsafeMutableAddressor()
{
  return &static PhoneSignpost.fetchContactByHandle;
}

void static PhoneSignpost.fetchContactByHandle.getter()
{
}

char **PhoneSignpost.labelMapping.unsafeMutableAddressor()
{
  return &static PhoneSignpost.labelMapping;
}

void static PhoneSignpost.labelMapping.getter()
{
}

char **PhoneSignpost.idiomSensitiveViewBuilder.unsafeMutableAddressor()
{
  return &static PhoneSignpost.idiomSensitiveViewBuilder;
}

void static PhoneSignpost.idiomSensitiveViewBuilder.getter()
{
}

char **PhoneSignpost.resolveEntitySRR.unsafeMutableAddressor()
{
  return &static PhoneSignpost.resolveEntitySRR;
}

void static PhoneSignpost.resolveEntitySRR.getter()
{
}

char **PhoneSignpost.convertDataSRR.unsafeMutableAddressor()
{
  return &static PhoneSignpost.convertDataSRR;
}

void static PhoneSignpost.convertDataSRR.getter()
{
}

char **PhoneSignpost.lazyContainerLazyInit.unsafeMutableAddressor()
{
  return &static PhoneSignpost.lazyContainerLazyInit;
}

void static PhoneSignpost.lazyContainerLazyInit.getter()
{
}

char **PhoneSignpost.templatingOperationManager.unsafeMutableAddressor()
{
  return &static PhoneSignpost.templatingOperationManager;
}

void static PhoneSignpost.templatingOperationManager.getter()
{
}

char **PhoneSignpost.templatingOperation.unsafeMutableAddressor()
{
  return &static PhoneSignpost.templatingOperation;
}

void static PhoneSignpost.templatingOperation.getter()
{
}

char **PhoneSignpost.callCancel.unsafeMutableAddressor()
{
  return &static PhoneSignpost.callCancel;
}

void static PhoneSignpost.callCancel.getter()
{
}

char **PhoneSignpost.makeInterstitialDialog.unsafeMutableAddressor()
{
  return &static PhoneSignpost.makeInterstitialDialog;
}

void static PhoneSignpost.makeInterstitialDialog.getter()
{
}

char **PhoneSignpost.parameterPrompt.unsafeMutableAddressor()
{
  return &static PhoneSignpost.parameterPrompt;
}

void static PhoneSignpost.parameterPrompt.getter()
{
}

char **PhoneSignpost.parameterConfirmation.unsafeMutableAddressor()
{
  return &static PhoneSignpost.parameterConfirmation;
}

void static PhoneSignpost.parameterConfirmation.getter()
{
}

char **PhoneSignpost.parameterDisambiguation.unsafeMutableAddressor()
{
  return &static PhoneSignpost.parameterDisambiguation;
}

void static PhoneSignpost.parameterDisambiguation.getter()
{
}

char **PhoneSignpost.parameterUnsupported.unsafeMutableAddressor()
{
  return &static PhoneSignpost.parameterUnsupported;
}

void static PhoneSignpost.parameterUnsupported.getter()
{
}

char **PhoneSignpost.intentConfirmation.unsafeMutableAddressor()
{
  return &static PhoneSignpost.intentConfirmation;
}

void static PhoneSignpost.intentConfirmation.getter()
{
}

char **PhoneSignpost.intentHandled.unsafeMutableAddressor()
{
  return &static PhoneSignpost.intentHandled;
}

void static PhoneSignpost.intentHandled.getter()
{
}

char **PhoneSignpost.intentHandledHelper.unsafeMutableAddressor()
{
  return &static PhoneSignpost.intentHandledHelper;
}

void static PhoneSignpost.intentHandledHelper.getter()
{
}

char **PhoneSignpost.emergencyContactResolution.unsafeMutableAddressor()
{
  return &static PhoneSignpost.emergencyContactResolution;
}

void static PhoneSignpost.emergencyContactResolution.getter()
{
}

void static PhoneSignpost.resolveCRR.getter()
{
}

void static PhoneSignpost.resolveCRRFaceTime.getter()
{
}

void static PhoneSignpost.resolveCRRFaceTimeHandleType.getter()
{
}

void static PhoneSignpost.resolveCRRFaceTimeUndefined.getter()
{
}

char **PhoneSignpost.updateSiriKitIntentContactResolution.unsafeMutableAddressor()
{
  return &static PhoneSignpost.updateSiriKitIntentContactResolution;
}

void static PhoneSignpost.updateSiriKitIntentContactResolution.getter()
{
}

void static PhoneSignpost.announceVoicemailBurstUpdate.getter()
{
}

void static PhoneSignpost.searchForBurstVoicemails.getter()
{
}

char **PhoneSignpost.fetchCallState.unsafeMutableAddressor()
{
  return &static PhoneSignpost.fetchCallState;
}

void static PhoneSignpost.fetchCallState.getter()
{
}

char **PhoneSignpost.NLv3PlusServerConversion.unsafeMutableAddressor()
{
  return &static PhoneSignpost.NLv3PlusServerConversion;
}

void static PhoneSignpost.NLv3PlusServerConversion.getter()
{
}

char **PhoneSignpost.transformSiriPhoneContactToINPerson.unsafeMutableAddressor()
{
  return &static PhoneSignpost.transformSiriPhoneContactToINPerson;
}

void static PhoneSignpost.transformSiriPhoneContactToINPerson.getter()
{
}

void static PhoneSignpost.nLv3TransformNLIntent.getter()
{
}

char **PhoneSignpost.nLv3TransformPhoneCallNLIntentToTTYType.unsafeMutableAddressor()
{
  return &static PhoneSignpost.nLv3TransformPhoneCallNLIntentToTTYType;
}

void static PhoneSignpost.nLv3TransformPhoneCallNLIntentToTTYType.getter()
{
}

char **PhoneSignpost.nLv3TransformIncomingCallIntentResponseToInput.unsafeMutableAddressor()
{
  return &static PhoneSignpost.nLv3TransformIncomingCallIntentResponseToInput;
}

void static PhoneSignpost.nLv3TransformIncomingCallIntentResponseToInput.getter()
{
}

void static PhoneSignpost.nLv4TransformNLIntent.getter()
{
}

void static PhoneSignpost.nLv4SettingsForCallControlNLIntent.getter()
{
}

char **PhoneSignpost.nLv4TransformIncomingCall.unsafeMutableAddressor()
{
  return &static PhoneSignpost.nLv4TransformIncomingCall;
}

void static PhoneSignpost.nLv4TransformIncomingCall.getter()
{
}

char **PhoneSignpost.nLv4FindPositionReference.unsafeMutableAddressor()
{
  return &static PhoneSignpost.nLv4FindPositionReference;
}

void static PhoneSignpost.nLv4FindPositionReference.getter()
{
}

char **PhoneSignpost.nLv4CreateNLIntent.unsafeMutableAddressor()
{
  return &static PhoneSignpost.nLv4CreateNLIntent;
}

void static PhoneSignpost.nLv4CreateNLIntent.getter()
{
}

char **PhoneSignpost.nLv4TransformerInputToPhoneCallNLIntent.unsafeMutableAddressor()
{
  return &static PhoneSignpost.nLv4TransformerInputToPhoneCallNLIntent;
}

void static PhoneSignpost.nLv4TransformerInputToPhoneCallNLIntent.getter()
{
}

char **PhoneSignpost.nLv4TransformIncomingCallIntentResponseToInput.unsafeMutableAddressor()
{
  return &static PhoneSignpost.nLv4TransformIncomingCallIntentResponseToInput;
}

void static PhoneSignpost.nLv4TransformIncomingCallIntentResponseToInput.getter()
{
}

char **PhoneSignpost.nLv4TransformUserDialogActToUserDialogActParse.unsafeMutableAddressor()
{
  return &static PhoneSignpost.nLv4TransformUserDialogActToUserDialogActParse;
}

void static PhoneSignpost.nLv4TransformUserDialogActToUserDialogActParse.getter()
{
}

char **PhoneSignpost.nLv4ToPhoneCallAudioRoute.unsafeMutableAddressor()
{
  return &static PhoneSignpost.nLv4ToPhoneCallAudioRoute;
}

void static PhoneSignpost.nLv4ToPhoneCallAudioRoute.getter()
{
}

char **PhoneSignpost.nLv4TransformUsoTaskToPhoneCallAudioRoute.unsafeMutableAddressor()
{
  return &static PhoneSignpost.nLv4TransformUsoTaskToPhoneCallAudioRoute;
}

void static PhoneSignpost.nLv4TransformUsoTaskToPhoneCallAudioRoute.getter()
{
}

char **PhoneSignpost.nLv4TransformUsoTaskToTargetContacts.unsafeMutableAddressor()
{
  return &static PhoneSignpost.nLv4TransformUsoTaskToTargetContacts;
}

void static PhoneSignpost.nLv4TransformUsoTaskToTargetContacts.getter()
{
}

char **PhoneSignpost.nLv4GetINPersonsFromAgents.unsafeMutableAddressor()
{
  return &static PhoneSignpost.nLv4GetINPersonsFromAgents;
}

void static PhoneSignpost.nLv4GetINPersonsFromAgents.getter()
{
}

char **PhoneSignpost.nLv4TransformUsoTaskToPhoneCallVerb.unsafeMutableAddressor()
{
  return &static PhoneSignpost.nLv4TransformUsoTaskToPhoneCallVerb;
}

void static PhoneSignpost.nLv4TransformUsoTaskToPhoneCallVerb.getter()
{
}

char **PhoneSignpost.nLv4TransformUsoTaskToVoicemailVerb.unsafeMutableAddressor()
{
  return &static PhoneSignpost.nLv4TransformUsoTaskToVoicemailVerb;
}

void static PhoneSignpost.nLv4TransformUsoTaskToVoicemailVerb.getter()
{
}

char **PhoneSignpost.nLv4TransformPhoneNumberToUsoTask.unsafeMutableAddressor()
{
  return &static PhoneSignpost.nLv4TransformPhoneNumberToUsoTask;
}

void static PhoneSignpost.nLv4TransformPhoneNumberToUsoTask.getter()
{
}

char **PhoneSignpost.nLv4TransformContactAddressToPersonHandle.unsafeMutableAddressor()
{
  return &static PhoneSignpost.nLv4TransformContactAddressToPersonHandle;
}

void static PhoneSignpost.nLv4TransformContactAddressToPersonHandle.getter()
{
}

char **PhoneSignpost.nLv4CheckUnsupported.unsafeMutableAddressor()
{
  return &static PhoneSignpost.nLv4CheckUnsupported;
}

void static PhoneSignpost.nLv4CheckUnsupported.getter()
{
}

char **PhoneSignpost.nLv4TransformUsoTaskToSiriPhoneContacts.unsafeMutableAddressor()
{
  return &static PhoneSignpost.nLv4TransformUsoTaskToSiriPhoneContacts;
}

void static PhoneSignpost.nLv4TransformUsoTaskToSiriPhoneContacts.getter()
{
}

char **PhoneSignpost.appSelectionSignalCollection.unsafeMutableAddressor()
{
  return &static PhoneSignpost.appSelectionSignalCollection;
}

void static PhoneSignpost.appSelectionSignalCollection.getter()
{
}

char **PhoneSignpost.findEligibleAppsForIntent.unsafeMutableAddressor()
{
  return &static PhoneSignpost.findEligibleAppsForIntent;
}

void static PhoneSignpost.findEligibleAppsForIntent.getter()
{
}

char **PhoneSignpost.appFinderListApps.unsafeMutableAddressor()
{
  return &static PhoneSignpost.appFinderListApps;
}

void static PhoneSignpost.appFinderListApps.getter()
{
}

void static PhoneSignpost.appsToDisambiguate.getter()
{
}

char **PhoneSignpost.executeSmartAppSelect.unsafeMutableAddressor()
{
  return &static PhoneSignpost.executeSmartAppSelect;
}

void static PhoneSignpost.executeSmartAppSelect.getter()
{
}

char **PhoneSignpost.unnamed.unsafeMutableAddressor()
{
  return &static PhoneSignpost.unnamed;
}

void static PhoneSignpost.unnamed.getter()
{
}

void closure #1 in OSSignposter.withIntervalSignpost<A>(_:id:_:around:)(uint8_t *a1, uint32_t a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6, void (*a7)(void))
{
  uint64_t v11 = OSSignposter.logHandle.getter();
  os_signpost_type_t v12 = static os_signpost_type_t.begin.getter();
  os_signpost_id_t v13 = OSSignpostID.rawValue.getter();
  unint64_t v16 = a5;
  _os_signpost_emit_with_name_impl(&dword_0, v11, v12, v13, a5, a6, a1, a2);
  a7();
  if (!v18)
  {
    os_signpost_type_t v14 = static os_signpost_type_t.end.getter();
    os_signpost_id_t v15 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_0, v11, v14, v15, v16, a6, a1, a2);
  }
}

unint64_t lazy protocol witness table accessor for type UInt64 and conformance UInt64()
{
  unint64_t result = lazy protocol witness table cache variable for type UInt64 and conformance UInt64;
  if (!lazy protocol witness table cache variable for type UInt64 and conformance UInt64)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt64 and conformance UInt64);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UInt and conformance UInt()
{
  unint64_t result = lazy protocol witness table cache variable for type UInt and conformance UInt;
  if (!lazy protocol witness table cache variable for type UInt and conformance UInt)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt and conformance UInt);
  }
  return result;
}

void type metadata accessor for Signpost()
{
}

uint64_t initializeWithCopy for Signpost.OpenSignpost(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Signpost.OpenSignpost(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  return a1;
}

__n128 __swift_memcpy26_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for Signpost.OpenSignpost(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  return a1;
}

uint64_t getEnumTagSinglePayload for Signpost.OpenSignpost(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 26))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Signpost.OpenSignpost(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 26) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 26) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for Signpost.OpenSignpost()
{
}

__n128 __swift_memcpy18_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for PhoneSignpost(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(unsigned char *)(a1 + 18))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 17);
      BOOL v4 = v3 >= 2;
      int v2 = (v3 + 2147483646) & 0x7FFFFFFF;
      if (!v4) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PhoneSignpost(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 18) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 18) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 17) = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for PhoneSignpost()
{
}

uint64_t OUTLINED_FUNCTION_8_50()
{
  return v0 - 104;
}

uint64_t OUTLINED_FUNCTION_9_40(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return v1 - 104;
}

uint64_t OUTLINED_FUNCTION_13_25()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_14_24()
{
  return OSSignpostIntervalState.init(id:isOpen:)(v0, 1);
}

uint64_t OUTLINED_FUNCTION_22_21()
{
  return v0;
}

uint64_t key path setter for IntentConversionFlow.exitValue : <A>IntentConversionFlow<A>(id *a1, uint64_t a2)
{
  id v2 = *a1;
  unsigned int v3 = *(uint64_t (**)(id))(**(void **)a2 + 136);
  id v4 = *a1;
  return v3(v2);
}

uint64_t key path setter for IntentConversionFlow.input : <A>IntentConversionFlow<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Input();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 160))(v6);
}

uint64_t IntentConversionFlow.input.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + direct field offset for IntentConversionFlow.input;
  swift_beginAccess();
  type metadata accessor for Input();
  OUTLINED_FUNCTION_15();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(a1, v3);
}

uint64_t IntentConversionFlow.input.setter(uint64_t a1)
{
  uint64_t v3 = v1 + direct field offset for IntentConversionFlow.input;
  swift_beginAccess();
  type metadata accessor for Input();
  OUTLINED_FUNCTION_15();
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v3, a1);
  return swift_endAccess();
}

uint64_t (*IntentConversionFlow.input.modify())()
{
  return static SingleResultVoicemailModel.resultViewID.modify;
}

uint64_t IntentConversionFlow.sharedGlobals.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + direct field offset for IntentConversionFlow.sharedGlobals, a1);
}

uint64_t IntentConversionFlow.__allocating_init(input:app:sharedGlobals:)(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v6 = swift_allocObject();
  IntentConversionFlow.init(input:app:sharedGlobals:)(a1, a2, a3);
  return v6;
}

uint64_t IntentConversionFlow.init(input:app:sharedGlobals:)(uint64_t a1, uint64_t a2, long long *a3)
{
  *(void *)(v3 + 16) = 0;
  uint64_t v7 = (uint64_t *)(v3 + direct field offset for IntentConversionFlow.logPrefix);
  *uint64_t v7 = type metadata accessor for IntentConversionFlow();
  v7[1] = (uint64_t)&outlined read-only object #0 of IntentConversionFlow.init(input:app:sharedGlobals:);
  v7[2] = 0;
  v7[3] = 0;
  uint64_t v8 = v3 + direct field offset for IntentConversionFlow.input;
  type metadata accessor for Input();
  OUTLINED_FUNCTION_15();
  (*(void (**)(uint64_t, uint64_t))(v9 + 32))(v8, a1);
  *(void *)(v3 + direct field offset for IntentConversionFlow.appResolved) = a2;
  outlined init with take of AppSelectionSignalComponent(a3, v3 + direct field offset for IntentConversionFlow.sharedGlobals);
  return v3;
}

uint64_t type metadata accessor for IntentConversionFlow()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t IntentConversionFlow.on(input:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Input();
  OUTLINED_FUNCTION_0_0();
  uint64_t v6 = v5;
  uint64_t v8 = __chkstk_darwin(v7);
  os_signpost_type_t v10 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  os_signpost_type_t v12 = (char *)v29 - v11;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.siriPhone);
  os_signpost_type_t v14 = *(void (**)(void))(v6 + 16);
  OUTLINED_FUNCTION_9_41();
  v14();
  swift_retain();
  os_signpost_id_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  int v17 = v16;
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v31 = v12;
    uint64_t v19 = v18;
    uint64_t v34 = swift_slowAlloc();
    uint64_t v39 = v34;
    *(_DWORD *)uint64_t v19 = 136315394;
    v29[1] = v19 + 4;
    int v33 = v17;
    os_signpost_id_t v35 = v10;
    uint64_t v36 = a1;
    uint64_t v21 = *(void *)(v2 + direct field offset for IntentConversionFlow.logPrefix);
    uint64_t v20 = *(void *)(v2 + direct field offset for IntentConversionFlow.logPrefix + 8);
    uint64_t v32 = v6;
    uint64_t v22 = *(void *)(v2 + direct field offset for IntentConversionFlow.logPrefix + 16);
    uint64_t v23 = *(void *)(v2 + direct field offset for IntentConversionFlow.logPrefix + 24);
    uint64_t v37 = 0;
    unint64_t v38 = 0xE000000000000000;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    os_log_t v30 = v15;
    DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v21, v20, v22, v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2080;
    lazy protocol witness table accessor for type Input and conformance Input();
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v39);
    os_signpost_type_t v10 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_11();
    v26();
    os_log_t v27 = v30;
    _os_log_impl(&dword_0, v30, (os_log_type_t)v33, "%s.on: %s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {
    swift_release();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v4);
  }
  OUTLINED_FUNCTION_9_41();
  v14();
  (*(void (**)(char *))(*(void *)v2 + 160))(v10);
  return 1;
}

uint64_t IntentConversionFlow.prepare(completion:)(void (*a1)(uint64_t))
{
  void *(*v26)(uint64_t *__return_ptr, uint64_t, uint64_t);
  void *v27;
  uint64_t v28;
  void (*v29)(void);
  uint64_t (*v30)(void);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[5];

  uint64_t v2 = v1;
  OUTLINED_FUNCTION_2();
  uint64_t v4 = v3;
  type metadata accessor for PrepareResponse();
  OUTLINED_FUNCTION_0_0();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_4();
  uint64_t v34 = v7 - v6;
  type metadata accessor for Input();
  OUTLINED_FUNCTION_0_0();
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_4();
  uint64_t v11 = (uint8_t *)(v10 - v9);
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  int v33 = v4;
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.siriPhone);
  swift_retain();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    os_signpost_id_t v35 = swift_slowAlloc();
    v36[0] = 0;
    *(_DWORD *)uint64_t v15 = 136315394;
    uint64_t v17 = *(void *)(v1 + direct field offset for IntentConversionFlow.logPrefix);
    uint64_t v16 = *(void *)(v1 + direct field offset for IntentConversionFlow.logPrefix + 8);
    uint64_t v19 = *(void *)(v1 + direct field offset for IntentConversionFlow.logPrefix + 16);
    uint64_t v18 = *(void *)(v1 + direct field offset for IntentConversionFlow.logPrefix + 24);
    v36[1] = 0xE000000000000000;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v17, v16, v19, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v36[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36[0], 0xE000000000000000, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2080;
    uint64_t v20 = v33;
    uint64_t v21 = _typeName(_:qualified:)();
    v36[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v13, v14, "%s.prepare: intent type: %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {

    swift_release();
    uint64_t v20 = v4;
  }
  uint64_t v23 = *(void *)(v1 + direct field offset for IntentConversionFlow.appResolved);
  uint64_t v24 = *(void *)(v1 + direct field offset for IntentConversionFlow.sharedGlobals + 24);
  uint64_t v25 = *(void *)(v1 + direct field offset for IntentConversionFlow.sharedGlobals + 32);
  __swift_project_boxed_opaque_existential_1((void *)(v1 + direct field offset for IntentConversionFlow.sharedGlobals), v24);
  unint64_t v26 = *(void *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v25 + 80);
  swift_retain();
  os_log_t v27 = v26(v36, v24, v25);
  (*(void (**)(void *))(*(void *)v1 + 152))(v27);
  char v28 = SKTransformer.convertToSKIntent<A>(input:rchFlowContext:)(v11, v23, 0, 0, *(void *)(v20 + 80));
  OUTLINED_FUNCTION_11();
  v29();
  outlined destroy of SKTransformer((uint64_t)v36);
  (*(void (**)(uint64_t))(*(void *)v2 + 136))(v28);
  static PrepareResponse.complete()();
  a1(v34);
  swift_release();
  OUTLINED_FUNCTION_11();
  return v30();
}

uint64_t IntentConversionFlow.execute(completion:)(void (*a1)(void))
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ExecuteResponse();
  OUTLINED_FUNCTION_0_0();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_4();
  uint64_t v10 = v9 - v8;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.siriPhone);
  swift_retain();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    unint64_t v26 = a1;
    os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v14 = 136315138;
    uint64_t v24 = v14;
    uint64_t v15 = v2 + direct field offset for IntentConversionFlow.logPrefix;
    uint64_t v16 = v4;
    uint64_t v18 = *(void *)(v2 + direct field offset for IntentConversionFlow.logPrefix);
    uint64_t v17 = *(void *)(v2 + direct field offset for IntentConversionFlow.logPrefix + 8);
    uint64_t v19 = v6;
    uint64_t v21 = *(void *)(v15 + 16);
    uint64_t v20 = *(void *)(v15 + 24);
    uint64_t v27 = v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v22 = v18;
    uint64_t v4 = v16;
    DefaultStringInterpolation.appendInterpolation(type:tags:function:)(v22, v17, v21, v20);
    uint64_t v6 = v19;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v12, v13, "%s.execute", v24, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    a1 = v26;
    OUTLINED_FUNCTION_6();
  }
  else
  {

    swift_release();
  }
  static ExecuteResponse.complete()();
  a1(v10);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v10, v4);
}

uint64_t IntentConversionFlow.deinit()
{
  type metadata accessor for Input();
  OUTLINED_FUNCTION_15();
  OUTLINED_FUNCTION_11();
  v1();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + direct field offset for IntentConversionFlow.sharedGlobals);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t IntentConversionFlow.__deallocating_deinit()
{
  IntentConversionFlow.deinit();
  OUTLINED_FUNCTION_2();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Flow.on(input:) in conformance IntentConversionFlow<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 184))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance IntentConversionFlow<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200))();
}

uint64_t protocol witness for Flow.execute() in conformance IntentConversionFlow<A1>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for Flow.execute() in conformance PhoneFlow<A, B>;
  return Flow.execute()(a1, a2, a3);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance IntentConversionFlow<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 128))();
  *a1 = result;
  return result;
}

uint64_t protocol witness for PreparableFlow.prepare(completion:) in conformance IntentConversionFlow<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 192))();
}

uint64_t protocol witness for SharedGlobalsHolding.sharedGlobals.getter in conformance IntentConversionFlow<A>@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(*v1 + direct field offset for IntentConversionFlow.sharedGlobals, a1);
}

unint64_t lazy protocol witness table accessor for type Input and conformance Input()
{
  unint64_t result = lazy protocol witness table cache variable for type Input and conformance Input;
  if (!lazy protocol witness table cache variable for type Input and conformance Input)
  {
    type metadata accessor for Input();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input);
  }
  return result;
}

uint64_t sub_1A1D28@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 128))();
  *a2 = result;
  return result;
}

void *sub_1A1D7C(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1A1D88(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 152))();
}

uint64_t type metadata completion function for IntentConversionFlow()
{
  uint64_t result = type metadata accessor for Input();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_7_45()
{
  return 8;
}

void *specialized _ArrayProtocol.filter(_:)(id *a1, uint64_t a2)
{
  unint64_t v3 = (unint64_t)a1;
  if ((unint64_t)a1 >> 62) {
    goto LABEL_36;
  }
  for (uint64_t i = *(void *)((char *)&dword_10 + ((unint64_t)a1 & 0xFFFFFFFFFFFFFF8));
        i;
        uint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v5 = 0;
    unint64_t v6 = v3 & 0xC000000000000001;
    uint64_t v7 = v3 & 0xFFFFFFFFFFFFFF8;
    v3 += 32;
    uint64_t v24 = i;
    uint64_t v25 = a2;
    uint64_t v22 = v7;
    unint64_t v23 = v6;
    uint64_t v21 = (id *)v3;
    while (1)
    {
      if (v6)
      {
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v5 >= *(void *)(v7 + 16))
        {
          __break(1u);
LABEL_34:
          __break(1u);
          goto LABEL_35;
        }
        id v8 = *(id *)(v3 + 8 * v5);
      }
      uint64_t v9 = v8;
      if (__OFADD__(v5++, 1)) {
        goto LABEL_34;
      }
      if (a2)
      {
        unint64_t v11 = outlined bridged method (pb) of @objc INStartCallIntentResponse.restrictedContacts.getter((void *)a2);
        if (v11) {
          break;
        }
      }

LABEL_27:
      if (v5 == i) {
        goto LABEL_37;
      }
    }
    unint64_t v12 = v11;
    if (v11 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
      if (!v13)
      {
LABEL_25:
        swift_bridgeObjectRelease_n();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v13 = *(void *)((char *)&dword_10 + (v11 & 0xFFFFFFFFFFFFFF8));
      swift_bridgeObjectRetain();
      if (!v13) {
        goto LABEL_25;
      }
    }
    if ((v12 & 0xC000000000000001) != 0) {
      id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v14 = *(id *)(v12 + 32);
    }
    uint64_t v15 = v14;
    type metadata accessor for INPerson();
    char v16 = static NSObject.== infix(_:_:)();

    if (v16)
    {
LABEL_15:

      swift_bridgeObjectRelease_n();
LABEL_26:
      uint64_t i = v24;
      a2 = v25;
      uint64_t v7 = v22;
      unint64_t v6 = v23;
      unint64_t v3 = (unint64_t)v21;
      goto LABEL_27;
    }
    if (v13 == 1) {
      goto LABEL_25;
    }
    a2 = 5;
    while (1)
    {
      uint64_t v17 = (v12 & 0xC000000000000001) != 0
          ? (id *)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : (id *)*(id *)(v12 + 8 * a2);
      unint64_t v3 = (unint64_t)v17;
      uint64_t v18 = a2 - 3;
      if (__OFADD__(a2 - 4, 1)) {
        break;
      }
      char v19 = static NSObject.== infix(_:_:)();

      if (v19) {
        goto LABEL_15;
      }
      ++a2;
      if (v18 == v13) {
        goto LABEL_25;
      }
    }
LABEL_35:
    __break(1u);
LABEL_36:
    ;
  }
LABEL_37:

  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void specialized Result<>.merge(with:behaviorAfterSpeaking:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  unint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for TemplatingResult();
  OUTLINED_FUNCTION_0_0();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_4();
  uint64_t v13 = v12 - v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_53();
  outlined init with copy of ResponseMode?(v2, (uint64_t)v1, &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  OUTLINED_FUNCTION_25_10();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *unint64_t v6 = *v1;
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v9 + 32))(v13, v1, v7);
    specialized closure #1 in Result<>.merge(with:behaviorAfterSpeaking:)(v13, v4, (uint64_t)v6);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v13, v7);
  }
  OUTLINED_FUNCTION_26_1();
}

uint64_t specialized closure #1 in Result<>.merge(with:behaviorAfterSpeaking:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v21 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BehaviorAfterSpeaking?);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TemplatingResult();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (uint64_t *)((char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13);
  uint64_t v17 = (uint64_t *)((char *)&v20 - v16);
  outlined init with copy of ResponseMode?(a2, (uint64_t)v15, &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    void *v17 = *v15;
  }
  else
  {
    (*(void (**)(char *, void *, uint64_t))(v9 + 32))(v11, v15, v8);
    uint64_t v18 = type metadata accessor for BehaviorAfterSpeaking();
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 1, 1, v18);
    TemplatingResult.merge(with:behaviorAfterSpeaking:)((uint64_t)v11, (uint64_t)v7, (uint64_t)v17);
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v7, &demangling cache variable for type metadata for BehaviorAfterSpeaking?);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  swift_storeEnumTagMultiPayload();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v21, a1, v8);
    swift_storeEnumTagMultiPayload();
    return swift_errorRelease();
  }
  else
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v9 + 32))(v21, v17, v8);
    return swift_storeEnumTagMultiPayload();
  }
}

uint64_t StartCallCatTemplatingService.startCallCatFamily.getter()
{
  return OUTLINED_FUNCTION_32_12();
}

uint64_t StartCallCatTemplatingService.unsupportedFlowCats.getter()
{
  return OUTLINED_FUNCTION_32_12();
}

void StartCallCatTemplatingService.__allocating_init(sharedGlobals:startCallCats:displayTextCats:phoneCallCommonCats:unsupportedFlowCats:appInfoBuilder:operationManager:)()
{
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  OUTLINED_FUNCTION_24_0();
  unint64_t v23 = v0;
  uint64_t v24 = v1;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = *(void *)(v4 + 24);
  uint64_t v16 = *(void *)(v4 + 32);
  uint64_t v18 = __swift_mutable_project_boxed_opaque_existential_1(v4, v17);
  __chkstk_darwin(v18);
  OUTLINED_FUNCTION_4();
  uint64_t v21 = v20 - v19;
  (*(void (**)(uint64_t))(v22 + 16))(v20 - v19);
  v24(v15, v13, v11, v9, v7, v21, v3, v23, v17, v16);
  OUTLINED_FUNCTION_7_20();
  __swift_destroy_boxed_opaque_existential_1(v5);
  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_26_1();
}

void StartCallCatTemplatingService.init(sharedGlobals:startCallCats:displayTextCats:phoneCallCommonCats:unsupportedFlowCats:appInfoBuilder:operationManager:)()
{
}

__n128 StartCallCatTemplatingService.slotTemplating(for:)@<Q0>(char a1@<W0>, _OWORD *a2@<X8>)
{
  type metadata accessor for Logger();
  OUTLINED_FUNCTION_0_0();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_4();
  uint64_t v11 = (void *)(v10 - v9);
  switch(a1)
  {
    case 2:
      OUTLINED_FUNCTION_31_17(class metadata base offset for PhoneCallBaseCatTemplatingService + *v2);
      OUTLINED_FUNCTION_49_12(direct field offset for StartCallCatTemplatingService.startCallCatFamily);
      OUTLINED_FUNCTION_29_17();
      specialized SlotTemplating.toAnySlotTemplating()();
      uint64_t v12 = (uint64_t *)&demangling cache variable for type metadata for DestinationTypeSlotTemplating<INStartCallIntent, INIntentResponse>;
      goto LABEL_5;
    case 3:
      OUTLINED_FUNCTION_31_17(class metadata base offset for PhoneCallBaseCatTemplatingService + *v2);
      OUTLINED_FUNCTION_49_12(direct field offset for StartCallCatTemplatingService.startCallCatFamily);
      OUTLINED_FUNCTION_29_17();
      specialized SlotTemplating.toAnySlotTemplating()();
      uint64_t v12 = (uint64_t *)&demangling cache variable for type metadata for PreferredCallProviderSlotTemplating<INStartCallIntent, INIntentResponse>;
LABEL_5:
      uint64_t v13 = v30;
      goto LABEL_7;
    case 5:
      outlined init with copy of SignalProviding((uint64_t)v2 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *v2 + 40), (uint64_t)v29);
      uint64_t v14 = *(void *)((char *)v2 + direct field offset for StartCallCatTemplatingService.startCallCatFamily);
      swift_retain();
      uint64_t v15 = DucTemplatingService.locale.getter();
      uint64_t v17 = v16;
      uint64_t v18 = type metadata accessor for AppInfoBuilder();
      uint64_t v19 = swift_allocObject();
      v29[11] = v18;
      v29[12] = (uint64_t)&protocol witness table for AppInfoBuilder;
      void v29[5] = v14;
      v29[6] = v15;
      v29[7] = v17;
      v29[8] = v19;
      uint64_t v11 = v30;
      specialized SlotTemplating.toAnySlotTemplating()();
      uint64_t v12 = &demangling cache variable for type metadata for ContactsSlotTemplating<INStartCallIntent, INIntentResponse>;
      uint64_t v13 = v29;
LABEL_7:
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v13, v12);
      break;
    case 8:
      OUTLINED_FUNCTION_31_17(class metadata base offset for PhoneCallBaseCatTemplatingService + *v2);
      OUTLINED_FUNCTION_49_12(direct field offset for StartCallCatTemplatingService.startCallCatFamily);
      OUTLINED_FUNCTION_29_17();
      specialized SlotTemplating.toAnySlotTemplating()();
      outlined destroy of CallCapabilitySlotTemplating((uint64_t)v30);
      break;
    case 13:
      OUTLINED_FUNCTION_31_17(class metadata base offset for PhoneCallBaseCatTemplatingService + *v2);
      OUTLINED_FUNCTION_49_12(direct field offset for StartCallCatTemplatingService.startCallCatFamily);
      OUTLINED_FUNCTION_29_17();
      specialized SlotTemplating.toAnySlotTemplating()();
      outlined destroy of CallRecordToCallBackSlotTemplating((uint64_t)v30);
      break;
    default:
      uint64_t v24 = v8;
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v25 = __swift_project_value_buffer(v24, (uint64_t)static Logger.siriPhone);
      (*(void (**)(void *, uint64_t, uint64_t))(v6 + 16))(v11, v25, v24);
      unint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v26, v27))
      {
        char v28 = (uint8_t *)swift_slowAlloc();
        v29[0] = swift_slowAlloc();
        *(_DWORD *)char v28 = 136315138;
        v30[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000004DLL, 0x8000000000495A60, v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_0, v26, v27, "%s", v28, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_6();
        OUTLINED_FUNCTION_6();
      }

      static SiriKitLifecycle._logCrashToEventBus(_:)();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x1A2B28);
  }
  __n128 result = *(__n128 *)v11;
  long long v21 = *((_OWORD *)v11 + 1);
  long long v22 = *((_OWORD *)v11 + 2);
  long long v23 = *((_OWORD *)v11 + 3);
  *a2 = *(_OWORD *)v11;
  a2[1] = v21;
  a2[2] = v22;
  a2[3] = v23;
  return result;
}

uint64_t StartCallCatTemplatingService.makeParameterValueConfirmationDialog(app:parameterName:intentResolutionResult:intent:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long a15, void (*a16)(uint64_t, uint64_t, void *, uint64_t, uint64_t, void, uint64_t (*)(), uint64_t), uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  OUTLINED_FUNCTION_26_12();
  a32 = v34;
  a33 = v35;
  uint64_t v37 = v36;
  uint64_t v67 = v39;
  uint64_t v68 = v38;
  uint64_t v41 = v40;
  uint64_t v69 = v42;
  char v44 = v43;
  uint64_t v46 = v45;
  uint64_t v47 = static Signpost.begin(_:parameterName:)((uint64_t)"ParameterConfirmation", 21, 2, v45, v43);
  uint64_t v65 = v49;
  uint64_t v66 = v48;
  __int16 v51 = v50;
  OUTLINED_FUNCTION_2();
  uint64_t v53 = (void *)(v33 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + v52 + 72));
  uint64_t v54 = v53[3];
  uint64_t v55 = v53[4];
  __swift_project_boxed_opaque_existential_1(v53, v54);
  uint64_t v56 = (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 56))(v54, v55);
  OUTLINED_FUNCTION_19_24();
  char v58 = (*(uint64_t (**)(uint64_t, uint64_t))(class metadata base offset for StartCallCatTemplatingService
                                                    + v57
                                                    + 56))(v41, v56);
  swift_release();
  swift_bridgeObjectRetain();
  v59._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_25_10();
  v60.value = PhoneCallSlotNames.init(rawValue:)(v59).value;
  StartCallCatTemplatingService.slotTemplating(for:)(v60.value, &a15);
  uint64_t v61 = OUTLINED_FUNCTION_60_1();
  *(void *)(v61 + 16) = v47;
  *(void *)(v61 + 24) = v66;
  *(void *)(v61 + 32) = v65;
  *(unsigned char *)(v61 + 40) = v51;
  *(unsigned char *)(v61 + 41) = HIBYTE(v51) & 1;
  *(void *)(v61 + 48) = v67;
  *(void *)(v61 + 56) = v37;
  uint64_t v62 = a16;
  swift_retain();
  swift_retain();
  v62(v68, v46, v44, v69, v41, v58 & 1, partial apply for closure #1 in Signpost.OpenSignpost.end(_:), v61);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_30_10();
  return swift_release();
}

uint64_t static Signpost.begin(_:parameterName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = a4;
  v7._object = a5;
  String.append(_:)(v7);
  OUTLINED_FUNCTION_25_10();
  static Signpost.begin(_:message:)();
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t (*Signpost.OpenSignpost.end(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int16 a6))()
{
  uint64_t v12 = OUTLINED_FUNCTION_60_1();
  *(void *)(v12 + 16) = a3;
  *(void *)(v12 + 24) = a4;
  *(void *)(v12 + 32) = a5;
  *(unsigned char *)(v12 + 40) = a6;
  *(unsigned char *)(v12 + 41) = HIBYTE(a6) & 1;
  *(void *)(v12 + 48) = a1;
  *(void *)(v12 + 56) = a2;
  swift_retain();
  swift_retain();
  return partial apply for closure #1 in Signpost.OpenSignpost.end(_:);
}

uint64_t StartCallCatTemplatingService.makeParameterValueDisambiguationDialog(app:parameterName:intentResolutionResult:disambiguationList:deviceIsLocked:intent:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long a15, uint64_t a16, uint64_t a17, void (*a18)(uint64_t, uint64_t, void *, uint64_t, uint64_t, void, uint64_t, uint64_t (*)()), uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  OUTLINED_FUNCTION_26_12();
  a32 = v35;
  a33 = v36;
  uint64_t v38 = v37;
  uint64_t v70 = v39;
  unsigned int v69 = v40;
  uint64_t v42 = v41;
  uint64_t v67 = v43;
  uint64_t v68 = v44;
  uint64_t v46 = v45;
  uint64_t v48 = v47;
  uint64_t v49 = a34;
  uint64_t v50 = static Signpost.begin(_:parameterName:)((uint64_t)"ParameterDisambiguation", 23, 2, v47, v45);
  uint64_t v52 = v51;
  uint64_t v54 = v53;
  __int16 v56 = v55;
  swift_bridgeObjectRetain();
  v57._uint64_t countAndFlagsBits = v48;
  v57._object = v46;
  v58.value = PhoneCallSlotNames.init(rawValue:)(v57).value;
  __n128 v59 = StartCallCatTemplatingService.slotTemplating(for:)(v58.value, &a15);
  uint64_t v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(class metadata base offset for PhoneCallBaseCatTemplatingService
                                                                     + *v34
                                                                     + 216))(v42, v38, v49, v59);
  uint64_t v62 = v61;
  uint64_t v63 = OUTLINED_FUNCTION_60_1();
  *(void *)(v63 + 16) = v50;
  *(void *)(v63 + 24) = v52;
  *(void *)(v63 + 32) = v54;
  *(unsigned char *)(v63 + 40) = v56;
  *(unsigned char *)(v63 + 41) = HIBYTE(v56) & 1;
  *(void *)(v63 + 48) = v60;
  *(void *)(v63 + 56) = v62;
  uint64_t v64 = a18;
  swift_retain();
  v64(v67, v48, v46, v68, v42, v69, v70, partial apply for closure #1 in Signpost.OpenSignpost.end(_:));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_30_10();
  return swift_release();
}

uint64_t StartCallCatTemplatingService.makeParameterValueUnsupportedDialog(app:parameterName:intentResolutionResult:intent:multicardinalValueIndex:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void (*a20)(uint64_t, uint64_t, void *, uint64_t, uint64_t, uint64_t, void, uint64_t (*)()),uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  OUTLINED_FUNCTION_26_12();
  a32 = v34;
  a33 = v35;
  uint64_t v37 = v36;
  uint64_t v64 = v38;
  uint64_t v65 = v39;
  uint64_t v63 = v40;
  uint64_t v42 = v41;
  uint64_t v44 = v43;
  uint64_t v61 = v45;
  uint64_t v46 = a34;
  unsigned int v62 = v47 & 1;
  uint64_t v48 = static Signpost.begin(_:parameterName:)((uint64_t)"ParameterUnsupported", 20, 2, v43, v41);
  uint64_t v50 = v49;
  uint64_t v52 = v51;
  __int16 v54 = v53;
  swift_bridgeObjectRetain();
  v55._uint64_t countAndFlagsBits = v44;
  v55._object = v42;
  v56.value = PhoneCallSlotNames.init(rawValue:)(v55).value;
  StartCallCatTemplatingService.slotTemplating(for:)(v56.value, &a15);
  uint64_t v57 = OUTLINED_FUNCTION_60_1();
  *(void *)(v57 + 16) = v48;
  *(void *)(v57 + 24) = v50;
  *(void *)(v57 + 32) = v52;
  *(unsigned char *)(v57 + 40) = v54;
  *(unsigned char *)(v57 + 41) = HIBYTE(v54) & 1;
  *(void *)(v57 + 48) = v37;
  *(void *)(v57 + 56) = v46;
  PhoneCallFlowDelegatePlugin::PhoneCallSlotNames_optional v58 = a20;
  swift_retain();
  swift_retain();
  v58(v61, v44, v42, v63, v64, v65, v62, partial apply for closure #1 in Signpost.OpenSignpost.end(_:));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_30_10();
  return swift_release();
}

void StartCallCatTemplatingService.makeIntentConfirmationDialog(app:intent:intentResponse:_:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v2 = v1;
  uint64_t v134 = v3;
  uint64_t v137 = v4;
  uint64_t v6 = v5;
  uint64_t v136 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_0_0();
  uint64_t v125 = v7;
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_3_1();
  uint64_t v135 = v9;
  uint64_t v10 = type metadata accessor for ResponseMode();
  OUTLINED_FUNCTION_0_0();
  uint64_t v128 = v11;
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_35_17(v13, v124);
  uint64_t v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ResponseMode?, ResponseMode?));
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_34_10(v15, v124);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseMode?);
  uint64_t v17 = OUTLINED_FUNCTION_11_0(v16);
  __chkstk_darwin(v17);
  OUTLINED_FUNCTION_46_0();
  uint64_t v129 = v18 - v19;
  uint64_t v21 = __chkstk_darwin(v20);
  long long v23 = (char *)&v124 - v22;
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v124 - v24;
  static Signpost.begin(_:)();
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  __int16 v33 = v32;
  uint64_t v34 = OUTLINED_FUNCTION_60_1();
  *(void *)(v34 + 16) = v27;
  *(void *)(v34 + 24) = v29;
  uint64_t v35 = v137;
  *(void *)(v34 + 32) = v31;
  *(unsigned char *)(v34 + 40) = v33;
  *(unsigned char *)(v34 + 41) = HIBYTE(v33) & 1;
  *(void *)(v34 + 48) = v134;
  *(void *)(v34 + 56) = v2;
  uint64_t v132 = v34;
  uint64_t v133 = v27;
  swift_retain();
  swift_retain();
  uint64_t v134 = v6;
  if (static EmergencyUtils.requiresEmergencyConfirmation(intent:intentResponse:)(v6, v35))
  {
    OUTLINED_FUNCTION_2();
    uint64_t v37 = *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + v36 + 72);
    uint64_t v127 = v0;
    uint64_t v38 = *(void *)(v0 + v37 + 32);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + v37), *(void *)(v0 + v37 + 24));
    uint64_t v39 = OUTLINED_FUNCTION_18_22();
    if (v40(v39, v38))
    {
      CurrentRequest.responseMode.getter();
      swift_release();
      uint64_t v41 = 0;
    }
    else
    {
      uint64_t v41 = 1;
    }
    uint64_t v64 = v131;
    __swift_storeEnumTagSinglePayload((uint64_t)v25, v41, 1, v10);
    static ResponseMode.voiceOnly.getter();
    __swift_storeEnumTagSinglePayload((uint64_t)v23, 0, 1, v10);
    uint64_t v65 = v64 + *(int *)(v130 + 48);
    outlined init with copy of ResponseMode?((uint64_t)v25, v64, &demangling cache variable for type metadata for ResponseMode?);
    outlined init with copy of ResponseMode?((uint64_t)v23, v65, &demangling cache variable for type metadata for ResponseMode?);
    OUTLINED_FUNCTION_9_29(v64);
    if (v67)
    {
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v23, &demangling cache variable for type metadata for ResponseMode?);
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v25, &demangling cache variable for type metadata for ResponseMode?);
      OUTLINED_FUNCTION_9_29(v65);
      if (v67)
      {
        outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v64, &demangling cache variable for type metadata for ResponseMode?);
LABEL_38:
        uint64_t v72 = v127;
        uint64_t v73 = *(void **)(v127 + direct field offset for StartCallCatTemplatingService.startCallCatFamily);
        uint64_t v74 = (void *)swift_allocObject();
        uint64_t v75 = v134;
        uint64_t v76 = v137;
        v74[2] = v134;
        v74[3] = v76;
        v74[4] = v72;
        v74[5] = partial apply for closure #1 in Signpost.OpenSignpost.end(_:);
        v74[6] = v132;
        uint64_t v77 = *(void (**)(uint64_t (*)(), void *))(class metadata base offset for StartCallCATs
                                                                        + *v73
                                                                        + 1056);
        id v78 = v76;
        swift_retain();
        swift_retain();
        id v79 = v75;
        v77(partial apply for closure #2 in StartCallCatTemplatingService.makeIntentConfirmationDialog(app:intent:intentResponse:_:), v74);
        swift_release();
LABEL_69:
        swift_release();
        goto LABEL_70;
      }
    }
    else
    {
      uint64_t v66 = v129;
      outlined init with copy of ResponseMode?(v64, v129, &demangling cache variable for type metadata for ResponseMode?);
      OUTLINED_FUNCTION_9_29(v65);
      if (!v67)
      {
        uint64_t v68 = v128;
        uint64_t v69 = v126;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v128 + 32))(v126, v65, v10);
        lazy protocol witness table accessor for type ResponseMode and conformance ResponseMode();
        char v70 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v71 = *(void (**)(uint64_t, uint64_t))(v68 + 8);
        v71(v69, v10);
        outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v23, &demangling cache variable for type metadata for ResponseMode?);
        outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v25, &demangling cache variable for type metadata for ResponseMode?);
        v71(v66, v10);
        outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v64, &demangling cache variable for type metadata for ResponseMode?);
        if (v70) {
          goto LABEL_38;
        }
LABEL_39:
        uint64_t v80 = v127;
        uint64_t v81 = *(void **)(v127 + direct field offset for StartCallCatTemplatingService.startCallCatFamily);
        uint64_t v82 = v134;
        specialized PhoneStartCallIntent.__allocating_init(intent:isRelationshipRequest:)();
        uint64_t v84 = v83;
        type metadata accessor for SirikitDeviceState();
        OUTLINED_FUNCTION_19_24();
        outlined init with copy of SignalProviding(v80 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + v85 + 40), (uint64_t)v138);
        uint64_t v86 = SirikitDeviceState.__allocating_init(from:)();
        unint64_t v87 = (void *)swift_allocObject();
        unint64_t v88 = v137;
        v87[2] = v82;
        v87[3] = v88;
        v87[4] = v80;
        v87[5] = partial apply for closure #1 in Signpost.OpenSignpost.end(_:);
        v87[6] = v132;
        uint64_t v89 = *(void (**)(uint64_t, uint64_t, uint64_t (*)(), void *))(class metadata base offset for StartCallCATs
                                                                                          + *v81
                                                                                          + 1024);
        id v90 = v88;
        swift_retain();
        swift_retain();
        id v91 = v82;
        v89(v84, v86, partial apply for closure #2 in StartCallCatTemplatingService.makeIntentConfirmationDialog(app:intent:intentResponse:_:), v87);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
LABEL_70:
        swift_release();
        OUTLINED_FUNCTION_26_1();
        return;
      }
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v23, &demangling cache variable for type metadata for ResponseMode?);
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v25, &demangling cache variable for type metadata for ResponseMode?);
      (*(void (**)(uint64_t, uint64_t))(v128 + 8))(v66, v10);
    }
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v64, &demangling cache variable for type metadata for (ResponseMode?, ResponseMode?));
    goto LABEL_39;
  }
  uint64_t v42 = v0;
  if (v35)
  {
    id v43 = [v35 confirmationReason];
    if (v43 == (id)_INStartCallIntentConfirmationReasonHasRestrictedContacts)
    {
      if (outlined bridged method (pb) of @objc INStartCallIntentResponse.restrictedContacts.getter(v35))
      {
        OUTLINED_FUNCTION_24_16();
        uint64_t v46 = v45 ? _CocoaArrayWrapper.endIndex.getter() : *(void *)(v44 + 16);
        swift_bridgeObjectRelease();
        if (v46)
        {
          uint64_t v47 = outlined bridged method (pb) of @objc INStartCallIntentResponse.restrictedContacts.getter(v35);
          uint64_t v48 = _swiftEmptyArrayStorage;
          uint64_t v127 = v42;
          if (!v47) {
            goto LABEL_44;
          }
          uint64_t v49 = v47;
          uint64_t v140 = (uint64_t)_swiftEmptyArrayStorage;
          OUTLINED_FUNCTION_24_16();
          if (v51)
          {
            swift_bridgeObjectRetain();
            uint64_t v52 = _CocoaArrayWrapper.endIndex.getter();
            if (v52) {
              goto LABEL_13;
            }
          }
          else
          {
            uint64_t v52 = *(void *)(v50 + 16);
            swift_bridgeObjectRetain();
            if (v52)
            {
LABEL_13:
              uint64_t v131 = type metadata accessor for PhonePerson(0);
              if (v52 < 1)
              {
                __break(1u);
LABEL_72:
                __break(1u);
                return;
              }
              uint64_t v53 = 0;
              unint64_t v54 = v49 & 0xC000000000000001;
              Swift::String v55 = (void (**)(uint64_t, uint64_t))(v125 + 8);
              uint64_t v56 = v49;
              uint64_t v57 = v135;
              do
              {
                if (v54) {
                  id v58 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                }
                else {
                  id v58 = *(id *)(v49 + 8 * v53 + 32);
                }
                uint64_t v59 = v58;
                static Device.current.getter();
                __swift_project_boxed_opaque_existential_1(v138, v139);
                dispatch thunk of DeviceState.siriLocale.getter();
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v138);
                uint64_t v60 = static PhonePerson.make(phonePerson:options:locale:)(v59, 0, v57);
                (*v55)(v57, v136);

                if (v60)
                {
                  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                  if (*(void *)((char *)&dword_10 + (v140 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                                  + (v140 & 0xFFFFFFFFFFFFFF8)) >> 1)
                    OUTLINED_FUNCTION_4_21();
                  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                  specialized Array._endMutation()();
                }
                ++v53;
                uint64_t v49 = v56;
              }
              while (v52 != v53);
              swift_bridgeObjectRelease();
              uint64_t v48 = (void *)v140;
              uint64_t v42 = v127;
              uint64_t v35 = v137;
              goto LABEL_43;
            }
          }
          swift_bridgeObjectRelease();
LABEL_43:
          swift_bridgeObjectRelease();
LABEL_44:
          uint64_t v92 = type metadata accessor for PhonePersonList();
          uint64_t v93 = PhonePersonList.__allocating_init(list:)((uint64_t)v48);
          uint64_t v94 = outlined bridged method (pb) of @objc INStartCallIntent.contacts.getter(v134);
          double v95 = _swiftEmptyArrayStorage;
          if (!v94)
          {
LABEL_61:
            uint64_t v107 = PhonePersonList.__allocating_init(list:)((uint64_t)v95);
            if (v94)
            {
              if (one-time initialization token for siriPhone != -1) {
                swift_once();
              }
              uint64_t v108 = type metadata accessor for Logger();
              __swift_project_value_buffer(v108, (uint64_t)static Logger.siriPhone);
              id v109 = v35;
              swift_bridgeObjectRetain_n();
              id v110 = v109;
              Swift::Int v111 = Logger.logObject.getter();
              os_log_type_t v112 = static os_log_type_t.debug.getter();
              if (os_log_type_enabled(v111, v112))
              {
                uint64_t v113 = swift_slowAlloc();
                v138[0] = swift_slowAlloc();
                *(_DWORD *)uint64_t v113 = 136315394;
                uint64_t v130 = v93;
                type metadata accessor for INPerson();
                swift_bridgeObjectRetain();
                uint64_t v114 = Array.description.getter();
                unint64_t v116 = v115;
                swift_bridgeObjectRelease();
                uint64_t v140 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v114, v116, v138);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease();
                *(_WORD *)(v113 + 12) = 2080;
                uint64_t v140 = outlined bridged method (pb) of @objc INStartCallIntentResponse.restrictedContacts.getter(v110);
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]?);
                uint64_t v117 = String.init<A>(describing:)();
                uint64_t v140 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v117, v118, v138);
                uint64_t v42 = v127;
                uint64_t v93 = v130;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                swift_bridgeObjectRelease();
                _os_log_impl(&dword_0, v111, v112, "User needs to confirm by Yes/No the updated contacts: %s because of the restricted contacts: %s", (uint8_t *)v113, 0x16u);
                swift_arrayDestroy();
                OUTLINED_FUNCTION_6();
                OUTLINED_FUNCTION_6();
              }
              else
              {

                swift_bridgeObjectRelease_n();
              }
              uint64_t v139 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
              v138[0] = v94;
              NSObject.update(with:at:)((uint64_t)v138, 0x73746361746E6F63, 0xE800000000000000);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v138);
            }
            uint64_t v119 = *(void **)(v42 + direct field offset for StartCallCatTemplatingService.startCallCatFamily);
            id v120 = v134;
            specialized PhoneStartCallIntent.__allocating_init(intent:isRelationshipRequest:)();
            uint64_t v122 = v121;
            uint64_t v123 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)(), uint64_t))(class metadata base offset for StartCallCATs + *v119 + 1088);
            swift_retain();
            swift_retain();
            v123(v122, v107, v93, partial apply for closure #1 in Signpost.OpenSignpost.end(_:), v132);
            swift_release();
            swift_release_n();
            swift_release_n();
            goto LABEL_69;
          }
          id v96 = v35;
          unint64_t v97 = (unint64_t)specialized _ArrayProtocol.filter(_:)((id *)v94, (uint64_t)v35);
          uint64_t v94 = v97;
          uint64_t v140 = (uint64_t)_swiftEmptyArrayStorage;
          if (v97 >> 62)
          {
            swift_bridgeObjectRetain_n();
            uint64_t v98 = _CocoaArrayWrapper.endIndex.getter();
            if (v98)
            {
LABEL_47:
              uint64_t v129 = v92;
              uint64_t v130 = v93;
              uint64_t v131 = type metadata accessor for PhonePerson(0);
              if (v98 >= 1)
              {
                uint64_t v99 = 0;
                unint64_t v100 = v94 & 0xC000000000000001;
                unint64_t v101 = (void (**)(uint64_t, uint64_t))(v125 + 8);
                uint64_t v102 = v94;
                do
                {
                  if (v100) {
                    id v103 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                  }
                  else {
                    id v103 = *(id *)(v94 + 8 * v99 + 32);
                  }
                  uint64_t v104 = v103;
                  static Device.current.getter();
                  __swift_project_boxed_opaque_existential_1(v138, v139);
                  uint64_t v105 = v135;
                  OUTLINED_FUNCTION_94_0();
                  dispatch thunk of DeviceState.siriLocale.getter();
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v138);
                  uint64_t v106 = static PhonePerson.make(phonePerson:options:locale:)(v104, 0, v105);
                  (*v101)(v105, v136);

                  if (v106)
                  {
                    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                    if (*(void *)((char *)&dword_10 + (v140 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18 + (v140 & 0xFFFFFFFFFFFFFF8)) >> 1) {
                      OUTLINED_FUNCTION_4_21();
                    }
                    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                    specialized Array._endMutation()();
                  }
                  ++v99;
                  uint64_t v94 = v102;
                }
                while (v98 != v99);
                swift_bridgeObjectRelease();
                double v95 = (void *)v140;
                uint64_t v42 = v127;
                uint64_t v35 = v137;
                uint64_t v93 = v130;
                goto LABEL_60;
              }
              goto LABEL_72;
            }
          }
          else
          {
            uint64_t v98 = *(void *)((char *)&dword_10 + (v97 & 0xFFFFFFFFFFFFFF8));
            swift_bridgeObjectRetain_n();
            if (v98) {
              goto LABEL_47;
            }
          }
          swift_bridgeObjectRelease();
          double v95 = _swiftEmptyArrayStorage;
LABEL_60:
          swift_bridgeObjectRelease();
          goto LABEL_61;
        }
      }
    }
  }
  uint64_t v61 = *(void **)(v42 + direct field offset for StartCallCatTemplatingService.startCallCatFamily);
  id v62 = v134;
  specialized PhoneStartCallIntent.__allocating_init(intent:isRelationshipRequest:)();
  (*(void (**)(void))(class metadata base offset for StartCallCATs + *v61 + 992))();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_26_1();
  swift_release();
}

void closure #1 in StartCallCatTemplatingService.makeIntentConfirmationDialog(app:intent:intentResponse:_:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v38 = v1;
  uint64_t v39 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v37 = v8;
  uint64_t v9 = type metadata accessor for BehaviorAfterSpeaking();
  OUTLINED_FUNCTION_0_0();
  uint64_t v36 = v10;
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_4();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = type metadata accessor for TemplatingResult();
  OUTLINED_FUNCTION_0_0();
  uint64_t v35 = v16;
  __chkstk_darwin(v17);
  OUTLINED_FUNCTION_4();
  uint64_t v20 = v19 - v18;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  OUTLINED_FUNCTION_15();
  __chkstk_darwin(v22);
  OUTLINED_FUNCTION_46_0();
  uint64_t v25 = (void *)(v23 - v24);
  __chkstk_darwin(v26);
  uint64_t v28 = (void *)((char *)v34 - v27);
  uint64_t v29 = (uint64_t)v3 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *v3 + 40);
  LOBYTE(v5) = static EmergencyUtils.requiresEmergencyConfirmation(intent:intentResponse:)(v7, v5);
  outlined init with copy of SignalProviding(v29, (uint64_t)v40);
  if ((v5 & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
    goto LABEL_6;
  }
  v34[1] = v21;
  uint64_t v30 = v35;
  uint64_t v31 = v36;
  char v32 = static EmergencyUtils.shouldOpenMicForEmergency(intent:deviceState:)(v7, (uint64_t)v40);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
  if (v32)
  {
LABEL_6:
    v39(v37);
    goto LABEL_9;
  }
  outlined init with copy of ResponseMode?(v37, (uint64_t)v25, &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    void *v28 = *v25;
  }
  else
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v30 + 32))(v20, v25, v15);
    uint64_t v37 = TemplatingResult.templateIdentifier.getter();
    v34[0] = v33;
    TemplatingResult.speak.getter();
    TemplatingResult.print.getter();
    (*(void (**)(uint64_t, void, uint64_t))(v31 + 104))(v14, enum case for BehaviorAfterSpeaking.continueWithoutListening(_:), v9);
    TemplatingResult.init(templateIdentifier:speak:print:behaviorAfterSpeaking:)();
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v20, v15);
  }
  swift_storeEnumTagMultiPayload();
  v39((uint64_t)v28);
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v28, &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
LABEL_9:
  OUTLINED_FUNCTION_26_1();
}

uint64_t StartCallCatTemplatingService.makeInterstitialDialog(app:intent:intentResponse:_:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  static Signpost.event(_:)();
  uint64_t v12 = outlined bridged method (pb) of @objc INIntent.intentId.getter(a2);
  if (v13)
  {
    uint64_t v14 = v12;
    uint64_t v15 = v13;
    if (App.isFirstParty()() && !INStartCallIntent.isThirdPartyCallKitCallBack.getter())
    {
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v27 = v14;
      uint64_t v16 = type metadata accessor for Logger();
      __swift_project_value_buffer(v16, (uint64_t)static Logger.siriPhone);
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v19 = 0;
        _os_log_impl(&dword_0, v17, v18, "Eagerly calling IntentHandled", v19, 2u);
        OUTLINED_FUNCTION_6();
      }

      uint64_t v20 = *(void *)(v6 + direct field offset for StartCallCatTemplatingService.operationManager);
      uint64_t v21 = (void *)swift_allocObject();
      void v21[2] = v6;
      void v21[3] = a1;
      void v21[4] = a2;
      uint64_t v21[5] = a3;
      uint64_t v26 = *(void (**)(uint64_t, uint64_t, void (*)(), void *))(*(void *)v20 + 160);
      id v22 = a3;
      swift_retain();
      swift_retain();
      id v23 = a2;
      v26(v27, v15, partial apply for closure #1 in StartCallCatTemplatingService.makeInterstitialDialog(app:intent:intentResponse:_:), v21);
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallBaseCatTemplatingService<INStartCallIntent, INStartCallIntentResponse>);
  uint64_t v24 = (uint64_t (*)(uint64_t, void *, void *, uint64_t, uint64_t))method lookup function for DucTemplatingService();

  return v24(a1, a2, a3, a4, a5);
}

uint64_t StartCallCatTemplatingService.makeIntentHandledDialog(app:intent:intentResponse:_:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  static Signpost.begin(_:)();
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  __int16 v18 = v17;
  uint64_t v19 = OUTLINED_FUNCTION_60_1();
  *(void *)(v19 + 16) = v12;
  *(void *)(v19 + 24) = v14;
  *(void *)(v19 + 32) = v16;
  *(unsigned char *)(v19 + 40) = v18;
  *(unsigned char *)(v19 + 41) = HIBYTE(v18) & 1;
  *(void *)(v19 + 48) = a4;
  *(void *)(v19 + 56) = a5;
  uint64_t v20 = *(void *)(v6 + direct field offset for StartCallCatTemplatingService.operationManager);
  swift_retain();
  swift_retain();
  uint64_t v28 = outlined bridged method (pb) of @objc INIntent.intentId.getter(a2);
  uint64_t v22 = v21;
  id v23 = (void *)OUTLINED_FUNCTION_60_1();
  v23[2] = partial apply for closure #1 in Signpost.OpenSignpost.end(_:);
  v23[3] = v19;
  void v23[4] = v6;
  v23[5] = a1;
  v23[6] = a2;
  v23[7] = a3;
  uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t), void *))(*(void *)v20 + 176);
  id v25 = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  id v26 = a2;
  v24(v28, v22, partial apply for closure #1 in StartCallCatTemplatingService.makeIntentHandledDialog(app:intent:intentResponse:_:), v23);
  swift_release();
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

void closure #1 in StartCallCatTemplatingService.makeIntentHandledDialog(app:intent:intentResponse:_:)(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  v16[1] = a4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>?);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ResponseMode?(a1, (uint64_t)v8, &demangling cache variable for type metadata for Result<TemplatingResult, Error>?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9) == 1)
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v8, &demangling cache variable for type metadata for Result<TemplatingResult, Error>?);
    StartCallCatTemplatingService.makeIntentHandledDialogHelper(app:intent:intentResponse:_:)();
  }
  else
  {
    outlined init with take of Result<TemplatingResult, Error>((uint64_t)v8, (uint64_t)v11);
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.siriPhone);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_0, v13, v14, "Retrieving result from eagerly calling IntentHandled", v15, 2u);
      swift_slowDealloc();
    }

    a2(v11);
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v11, &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  }
}

void StartCallCatTemplatingService.makeIntentHandledDialogHelper(app:intent:intentResponse:_:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v106 = v10;
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = OUTLINED_FUNCTION_11_0(v11);
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_34_10(v13, v94);
  type metadata accessor for DispatchTimeInterval();
  OUTLINED_FUNCTION_0_0();
  uint64_t v104 = v15;
  uint64_t v105 = v14;
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_3_1();
  uint64_t v102 = v16;
  type metadata accessor for Locale();
  OUTLINED_FUNCTION_0_0();
  uint64_t v99 = v18;
  uint64_t v100 = v17;
  __chkstk_darwin(v17);
  OUTLINED_FUNCTION_35_17(v19, v95);
  static Signpost.begin(_:)();
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  __int16 v27 = v26;
  uint64_t v28 = OUTLINED_FUNCTION_60_1();
  *(void *)(v28 + 16) = v21;
  *(void *)(v28 + 24) = v23;
  *(void *)(v28 + 32) = v25;
  *(unsigned char *)(v28 + 40) = v27;
  *(unsigned char *)(v28 + 41) = HIBYTE(v27) & 1;
  *(void *)(v28 + 48) = v5;
  *(void *)(v28 + 56) = v3;
  swift_retain();
  swift_retain();
  if (static EmergencyUtils.requiresEmergencyConfirmation(intent:intentResponse:)(v9, v7))
  {
    OUTLINED_FUNCTION_1_58();
    uint64_t v30 = (void *)(v1 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + v29 + 72));
    uint64_t v31 = v30[3];
    uint64_t v32 = v30[4];
    __swift_project_boxed_opaque_existential_1(v30, v31);
    uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 224))(v31, v32);
    char v34 = (*(uint64_t (**)(uint64_t))(*(void *)v33 + 120))(1);
    swift_release();
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)static Logger.siriPhone);
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 67109120;
      LODWORD(v108[0]) = v34 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_0, v36, v37, "#StartCallCatTemplatingService is emergency confirmation reprompt: %{BOOL}d", v38, 8u);
      OUTLINED_FUNCTION_6();
    }

    if (v34)
    {
      uint64_t v39 = v30[3];
      uint64_t v40 = v30[4];
      __swift_project_boxed_opaque_existential_1(v30, v39);
      uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 224))(v39, v40);
      (*(void (**)(uint64_t))(*(void *)v41 + 128))(v41);
      swift_release();
    }
    uint64_t v42 = *(void **)(v1 + direct field offset for StartCallCatTemplatingService.startCallCatFamily);
    id v43 = v9;
    specialized PhoneStartCallIntent.__allocating_init(intent:isRelationshipRequest:)();
    uint64_t v45 = v44;
    OUTLINED_FUNCTION_1_58();
    uint64_t v47 = v1 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + v46 + 40);
    char v48 = static EmergencyUtils.requiresEmergencyConfirmation(intent:intentResponse:)(v43, v7);
    outlined init with copy of SignalProviding(v47, (uint64_t)v108);
    char v49 = 0;
    if (v48) {
      char v49 = static EmergencyUtils.shouldOpenMicForEmergency(intent:deviceState:)(v43, (uint64_t)v108);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v108);
    type metadata accessor for SirikitDeviceState();
    outlined init with copy of SignalProviding(v47, (uint64_t)v108);
    uint64_t v50 = SirikitDeviceState.__allocating_init(from:)();
    (*(void (**)(uint64_t, void, void, void, uint64_t, uint64_t (*)(), uint64_t))(class metadata base offset for StartCallCATs + *v42 + 1152))(v45, v49 & 1, 0, v34 & 1, v50, partial apply for closure #1 in Signpost.OpenSignpost.end(_:), v28);
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_32;
  }
  uint64_t v97 = v28;
  if (INStartCallIntent.isThirdPartyCallKitCallBack.getter()
    && v7
    && (id v51 = INStartCallIntentResponse.thirdPartyCallKitCallBackBundleId.getter(), v52))
  {
    uint64_t v53 = (uint64_t)v51;
    unint64_t v54 = v52;
    Swift::String v55 = v9;
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v56 = type metadata accessor for Logger();
    __swift_project_value_buffer(v56, (uint64_t)static Logger.siriPhone);
    swift_bridgeObjectRetain_n();
    uint64_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v57, v58))
    {
      uint64_t v59 = (uint8_t *)swift_slowAlloc();
      v108[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v59 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_0, v57, v58, "CallKitCallBack case: using bundleId from userActivity launchId: %s", v59, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_6();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v9 = v55;
    type metadata accessor for App();
    OUTLINED_FUNCTION_18_22();
    uint64_t v60 = App.__allocating_init(appIdentifier:)();
  }
  else
  {
    uint64_t v60 = v106;
    swift_retain();
  }
  OUTLINED_FUNCTION_1_58();
  (*(void (**)(void *))(class metadata base offset for StartCallCatTemplatingService + v61 + 48))(v9);
  id v62 = v9;
  specialized PhoneStartCallIntent.__allocating_init(intent:isRelationshipRequest:)();
  uint64_t v101 = v63;
  uint64_t v107 = v62;
  if (!App.isFirstParty()()) {
    goto LABEL_27;
  }
  uint64_t v64 = App.appIdentifier.getter();
  if (!v65) {
    goto LABEL_28;
  }
  if (v64 != 0xD000000000000010 || v65 != 0x8000000000495A40)
  {
    char v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v66) {
      goto LABEL_27;
    }
LABEL_28:
    uint64_t v96 = 0;
    uint64_t v74 = 0;
    uint64_t v75 = v103;
    goto LABEL_29;
  }
  swift_bridgeObjectRelease();
LABEL_27:
  OUTLINED_FUNCTION_1_58();
  uint64_t v68 = (void *)(v1 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + v67 + 48));
  uint64_t v69 = v68[3];
  uint64_t v70 = v68[4];
  __swift_project_boxed_opaque_existential_1(v68, v69);
  OUTLINED_FUNCTION_1_58();
  uint64_t v72 = (void *)OUTLINED_FUNCTION_57_8(class metadata base offset for PhoneCallBaseCatTemplatingService + v71);
  __swift_project_boxed_opaque_existential_1(v72, v72[3]);
  OUTLINED_FUNCTION_94_0();
  dispatch thunk of DeviceState.siriLocale.getter();
  uint64_t v96 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v70 + 16))(v60, v98, v69, v70);
  uint64_t v74 = v73;
  (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v98, v100);
  uint64_t v75 = v103;
LABEL_29:
  type metadata accessor for SirikitDeviceState();
  OUTLINED_FUNCTION_1_58();
  uint64_t v77 = OUTLINED_FUNCTION_57_8(class metadata base offset for PhoneCallBaseCatTemplatingService + v76);
  outlined init with copy of SignalProviding(v77, (uint64_t)v108);
  uint64_t v78 = SirikitDeviceState.__allocating_init(from:)();
  *uint64_t v102 = 500;
  (*(void (**)(void *, void, uint64_t))(v104 + 104))(v102, enum case for DispatchTimeInterval.milliseconds(_:), v105);
  static DispatchQoS.userInteractive.getter();
  type metadata accessor for TemplatingParallelizer();
  swift_allocObject();
  uint64_t v79 = TemplatingParallelizer.init(name:timeout:qos:)((uint64_t)"IntentHandled", 13, 2, (uint64_t)v102, v75);
  uint64_t v80 = (void *)swift_allocObject();
  v80[2] = v107;
  v80[3] = v1;
  v80[4] = v101;
  v80[5] = v78;
  v80[6] = v96;
  v80[7] = v74;
  v80[8] = v60;
  uint64_t v81 = *(void (**)(uint64_t (*)(uint64_t, uint64_t), void *))(*(void *)v79 + 176);
  id v82 = v107;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v81(partial apply for closure #1 in StartCallCatTemplatingService.makeIntentHandledDialogHelper(app:intent:intentResponse:_:), v80);
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_1_58();
  outlined init with copy of SignalProviding(v1 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + v83 + 72), (uint64_t)&v109);
  LOBYTE(v108[0]) = 1;
  v108[1] = 0xD000000000000013;
  v108[2] = 0x800000000048E2A0;
  unint64_t v84 = specialized SiriPhoneHintGenerator.generateHint()();
  uint64_t v86 = v85;
  uint64_t v88 = v87;
  uint64_t v90 = v89;
  outlined destroy of HangUpTipGenerator((uint64_t)v108);
  if (v86)
  {
    id v91 = (void *)OUTLINED_FUNCTION_60_1();
    v91[2] = v1;
    v91[3] = v78;
    v91[4] = v84;
    v91[5] = v86;
    v91[6] = v88;
    v91[7] = v90;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    v81(partial apply for closure #2 in StartCallCatTemplatingService.makeIntentHandledDialogHelper(app:intent:intentResponse:_:), v91);
    OUTLINED_FUNCTION_94_0();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  uint64_t v92 = swift_allocObject();
  *(void *)(v92 + 16) = partial apply for closure #1 in Signpost.OpenSignpost.end(_:);
  *(void *)(v92 + 24) = v97;
  uint64_t v93 = *(void (**)(uint64_t (*)(uint64_t), uint64_t))(*(void *)v79 + 184);
  swift_retain();
  v93(partial apply for closure #3 in StartCallCatTemplatingService.makeIntentHandledDialogHelper(app:intent:intentResponse:_:), v92);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
LABEL_32:
  swift_release();
  OUTLINED_FUNCTION_26_1();
}

uint64_t closure #1 in StartCallCatTemplatingService.makeIntentHandledDialogHelper(app:intent:intentResponse:_:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = a7;
  uint64_t v44 = a4;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for Locale();
  uint64_t v17 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v20 = outlined bridged method (pb) of @objc INStartCallIntent.contacts.getter(a3);
  uint64_t v45 = a2;
  if (v20)
  {
    unint64_t v21 = v20;
    unint64_t v49 = (unint64_t)_swiftEmptyArrayStorage;
    if (v20 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      if (v22) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v22 = *(void *)((char *)&dword_10 + (v20 & 0xFFFFFFFFFFFFFF8));
      swift_bridgeObjectRetain();
      if (v22)
      {
LABEL_4:
        uint64_t v42 = a8;
        uint64_t result = type metadata accessor for PhonePerson(0);
        uint64_t v46 = result;
        if (v22 < 1)
        {
          __break(1u);
          return result;
        }
        uint64_t v38 = v16;
        uint64_t v39 = a5;
        uint64_t v40 = a6;
        uint64_t v41 = a1;
        for (uint64_t i = 0; i != v22; ++i)
        {
          if ((v21 & 0xC000000000000001) != 0) {
            id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v25 = *(id *)(v21 + 8 * i + 32);
          }
          __int16 v26 = v25;
          static Device.current.getter();
          __swift_project_boxed_opaque_existential_1(v48, v48[3]);
          dispatch thunk of DeviceState.siriLocale.getter();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
          uint64_t v27 = static PhonePerson.make(phonePerson:options:locale:)(v26, 0, (uint64_t)v19);
          (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v47);

          if (v27)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((char *)&dword_10 + (v49 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                           + (v49 & 0xFFFFFFFFFFFFFF8)) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v28 = (void *)v49;
        a6 = v40;
        a1 = v41;
        uint64_t v16 = v38;
        a5 = v39;
        a8 = v42;
        goto LABEL_18;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v28 = _swiftEmptyArrayStorage;
LABEL_18:
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  uint64_t v28 = _swiftEmptyArrayStorage;
LABEL_19:
  type metadata accessor for PhonePersonList.Builder();
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = _swiftEmptyArrayStorage;
  swift_beginAccess();
  *(void *)(v29 + 16) = v28;
  swift_bridgeObjectRelease();
  type metadata accessor for PhonePersonList();
  swift_allocObject();
  uint64_t v30 = PhonePersonList.init(builder:)(v29);
  uint64_t v31 = *(void **)(v44 + direct field offset for StartCallCatTemplatingService.startCallCatFamily);
  if (a8)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    SpeakableString.init(print:speak:)();
    uint64_t v32 = type metadata accessor for SpeakableString();
    __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v32);
  }
  else
  {
    uint64_t v33 = type metadata accessor for SpeakableString();
    __swift_storeEnumTagSinglePayload((uint64_t)v16, 1, 1, v33);
    swift_retain();
  }
  Swift::Bool v34 = App.isFirstParty()();
  uint64_t v35 = App.appIdentifier.getter();
  if (v36)
  {
    if (v35 == 0xD000000000000010 && v36 == 0x8000000000495A40) {
      char v37 = 1;
    }
    else {
      char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v37 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, char *, Swift::Bool, void, void, uint64_t, uint64_t))(class metadata base offset for StartCallCATs + *v31 + 1120))(a5, v30, a6, v16, v34, v37 & 1, 0, a1, v45);
  swift_release_n();
  return outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v16, &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t closure #2 in StartCallCatTemplatingService.makeIntentHandledDialogHelper(app:intent:intentResponse:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void **)(a3 + direct field offset for StartCallCatTemplatingService.startCallCatFamily);
  String.toSpeakableString.getter();
  uint64_t v20 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v20);
  unint64_t v21 = (void *)swift_allocObject();
  void v21[2] = a5;
  void v21[3] = a6;
  void v21[4] = a7;
  uint64_t v21[5] = a8;
  v21[6] = a1;
  v21[7] = a2;
  uint64_t v22 = *(void (**)(uint64_t, char *, uint64_t (*)(uint64_t), void *))(class metadata base offset for StartCallCATs
                                                                                          + *v19
                                                                                          + 960);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v22(a4, v18, partial apply for closure #1 in closure #2 in StartCallCatTemplatingService.makeIntentHandledDialogHelper(app:intent:intentResponse:_:), v21);
  swift_release();
  return outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v18, &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t closure #1 in closure #2 in StartCallCatTemplatingService.makeIntentHandledDialogHelper(app:intent:intentResponse:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t))
{
  return a6(a1);
}

uint64_t closure #3 in StartCallCatTemplatingService.makeIntentHandledDialogHelper(app:intent:intentResponse:_:)(uint64_t a1, void (*a2)(char *))
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BehaviorAfterSpeaking?);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7 - 8);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v17 - v13;
  uint64_t v15 = *(void *)(a1 + 16);
  if (v15)
  {
    outlined init with copy of ResponseMode?(a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)), (uint64_t)v11, &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
    if (v15 == 1)
    {
      outlined init with copy of ResponseMode?((uint64_t)v11, (uint64_t)v14, &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
    }
    else
    {
      uint64_t v16 = type metadata accessor for BehaviorAfterSpeaking();
      __swift_storeEnumTagSinglePayload((uint64_t)v6, 1, 1, v16);
      specialized Result<>.merge(with:behaviorAfterSpeaking:)();
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v6, &demangling cache variable for type metadata for BehaviorAfterSpeaking?);
    }
    a2(v14);
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v11, &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
    return outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v14, &demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void StartCallCatTemplatingService.makeFailureHandlingIntentDialog(app:intent:intentResponse:_:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v3 = v0;
  uint64_t v74 = v4;
  uint64_t v75 = v5;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  type metadata accessor for Locale();
  OUTLINED_FUNCTION_0_0();
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_53();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v12 = OUTLINED_FUNCTION_11_0(v11);
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_25_19();
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v70 - v14;
  switch((unint64_t)[v7 code])
  {
    case 6uLL:
      OUTLINED_FUNCTION_36_16();
      (*(void (**)(uint64_t, uint64_t))(class metadata base offset for StartCallCATs + v16 + 704))(v74, v75);
      goto LABEL_33;
    case 7uLL:
      OUTLINED_FUNCTION_1_58();
      uint64_t v20 = (void *)(v0 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + v19 + 48));
      uint64_t v21 = v20[3];
      uint64_t v73 = v20[4];
      uint64_t v72 = __swift_project_boxed_opaque_existential_1(v20, v21);
      OUTLINED_FUNCTION_1_58();
      uint64_t v23 = (void *)OUTLINED_FUNCTION_57_8(class metadata base offset for PhoneCallBaseCatTemplatingService + v22);
      __swift_project_boxed_opaque_existential_1(v23, v23[3]);
      dispatch thunk of DeviceState.siriLocale.getter();
      uint64_t v24 = OUTLINED_FUNCTION_21_24();
      v25(v24);
      uint64_t v26 = OUTLINED_FUNCTION_28_16();
      v27(v26);
      if (v21)
      {
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_3_54();
        uint64_t v28 = type metadata accessor for SpeakableString();
        __swift_storeEnumTagSinglePayload(v2, 0, 1, v28);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v58 = type metadata accessor for SpeakableString();
        __swift_storeEnumTagSinglePayload(v2, 1, 1, v58);
      }
      OUTLINED_FUNCTION_36_16();
      (*(void (**)(uint64_t))(class metadata base offset for StartCallCATs + v59 + 736))(v2);
      uint64_t v60 = v2;
      goto LABEL_32;
    case 8uLL:
      char v29 = static EmergencyUtils.requiresEmergencyConfirmation(intent:intentResponse:)(v9, v7);
      uint64_t v30 = *(void **)(v0 + direct field offset for StartCallCatTemplatingService.startCallCatFamily);
      type metadata accessor for SirikitDeviceState();
      OUTLINED_FUNCTION_42_12();
      OUTLINED_FUNCTION_30_16(class metadata base offset for PhoneCallBaseCatTemplatingService + v31);
      uint64_t v32 = SirikitDeviceState.__allocating_init(from:)();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(class metadata base offset for StartCallCATs
                                                                + *v30
                                                                + 576))(v32, v29 & 1, v74, v75);
      goto LABEL_12;
    case 9uLL:
      OUTLINED_FUNCTION_36_16();
      (*(void (**)(uint64_t, uint64_t))(class metadata base offset for StartCallCATs + v33 + 864))(v74, v75);
      goto LABEL_33;
    case 0xAuLL:
      OUTLINED_FUNCTION_1_58();
      uint64_t v35 = (void *)(v0 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + v34 + 48));
      uint64_t v36 = v35[3];
      uint64_t v73 = v35[4];
      uint64_t v72 = __swift_project_boxed_opaque_existential_1(v35, v36);
      OUTLINED_FUNCTION_1_58();
      uint64_t v38 = (void *)OUTLINED_FUNCTION_57_8(class metadata base offset for PhoneCallBaseCatTemplatingService + v37);
      __swift_project_boxed_opaque_existential_1(v38, v38[3]);
      OUTLINED_FUNCTION_94_0();
      dispatch thunk of DeviceState.siriLocale.getter();
      uint64_t v39 = OUTLINED_FUNCTION_21_24();
      v40(v39);
      uint64_t v41 = OUTLINED_FUNCTION_28_16();
      v42(v41);
      if (v36)
      {
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_3_54();
        uint64_t v43 = type metadata accessor for SpeakableString();
        __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v43);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v61 = type metadata accessor for SpeakableString();
        __swift_storeEnumTagSinglePayload((uint64_t)v15, 1, 1, v61);
      }
      OUTLINED_FUNCTION_36_16();
      (*(void (**)(char *))(class metadata base offset for StartCallCATs + v62 + 608))(v15);
      uint64_t v60 = (uint64_t)v15;
LABEL_32:
      outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v60, &demangling cache variable for type metadata for SpeakableString?);
      goto LABEL_33;
    case 0xBuLL:
    case 0xCuLL:
      goto LABEL_11;
    default:
      id v17 = [v7 code];
      if ((id)_INStartCallIntentResponseCodeFailureScreenTimeRestrictionEnabled == v17)
      {
        OUTLINED_FUNCTION_36_16();
        (*(void (**)(uint64_t, uint64_t))(class metadata base offset for StartCallCATs + v18 + 832))(v74, v75);
        goto LABEL_33;
      }
      if ((id)_INStartCallIntentResponseCodeFailureDownTimeRestrictionEnabled != v17)
      {
LABEL_11:
        type metadata accessor for SirikitDeviceState();
        OUTLINED_FUNCTION_42_12();
        OUTLINED_FUNCTION_30_16(class metadata base offset for PhoneCallBaseCatTemplatingService + v44);
        SirikitDeviceState.__allocating_init(from:)();
        OUTLINED_FUNCTION_45_10();
        v45();
        goto LABEL_12;
      }
      uint64_t v46 = outlined bridged method (pb) of @objc INStartCallIntent.contacts.getter(v9);
      if (!v46) {
        goto LABEL_37;
      }
      uint64_t v47 = v46;
      unint64_t v76 = (unint64_t)_swiftEmptyArrayStorage;
      OUTLINED_FUNCTION_24_16();
      if (v49)
      {
        swift_bridgeObjectRetain();
        uint64_t v50 = _CocoaArrayWrapper.endIndex.getter();
        if (!v50) {
          goto LABEL_36;
        }
      }
      else
      {
        uint64_t v50 = *(void *)(v48 + 16);
        swift_bridgeObjectRetain();
        if (!v50) {
          goto LABEL_36;
        }
      }
      uint64_t v73 = type metadata accessor for PhonePerson(0);
      if (v50 < 1)
      {
        __break(1u);
        JUMPOUT(0x1A6538);
      }
      uint64_t v51 = 0;
      unint64_t v70 = v47 & 0xC000000000000001;
      uint64_t v71 = v50;
      uint64_t v72 = (void *)v47;
      do
      {
        if (v70)
        {
          OUTLINED_FUNCTION_7_0();
          id v52 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          id v52 = *(id *)(v47 + 8 * v51 + 32);
        }
        uint64_t v53 = v52;
        static Device.current.getter();
        __swift_project_boxed_opaque_existential_1(v77, v77[3]);
        dispatch thunk of DeviceState.siriLocale.getter();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
        uint64_t v54 = static PhonePerson.make(phonePerson:options:locale:)(v53, 0, v1);
        uint64_t v55 = OUTLINED_FUNCTION_25_10();
        v56(v55);

        uint64_t v57 = v71;
        if (v54)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((char *)&dword_10 + (v76 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                         + (v76 & 0xFFFFFFFFFFFFFF8)) >> 1)
            OUTLINED_FUNCTION_4_21();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        ++v51;
        uint64_t v47 = (uint64_t)v72;
      }
      while (v57 != v51);
LABEL_36:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_37:
      uint64_t v64 = v74;
      uint64_t v63 = v75;
      uint64_t v65 = *(void **)(v3 + direct field offset for StartCallCatTemplatingService.startCallCatFamily);
      id v66 = v9;
      specialized PhoneStartCallIntent.__allocating_init(intent:isRelationshipRequest:)();
      uint64_t v68 = v67;
      type metadata accessor for PhonePersonList();
      uint64_t v69 = OUTLINED_FUNCTION_54_9();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(class metadata base offset for StartCallCATs
                                                                 + *v65
                                                                 + 768))(v68, v69, v64, v63);
      swift_release();
LABEL_12:
      swift_release();
LABEL_33:
      OUTLINED_FUNCTION_26_1();
      return;
  }
}

uint64_t StartCallCatTemplatingService.makeGenericErrorDialog(app:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)((char *)v3 + direct field offset for StartCallCatTemplatingService.startCallCatFamily);
  type metadata accessor for SirikitDeviceState();
  outlined init with copy of SignalProviding((uint64_t)v3 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + *v3 + 40), (uint64_t)v9);
  uint64_t v7 = SirikitDeviceState.__allocating_init(from:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(class metadata base offset for StartCallCATs + *v6 + 928))(v7, a2, a3);
  return swift_release();
}

Swift::Bool __swiftcall StartCallCatTemplatingService.isRelationshipRequest(intent:)(INStartCallIntent intent)
{
  Swift::Bool v24 = 0;
  uint64_t v2 = outlined bridged method (pb) of @objc INStartCallIntent.contacts.getter(intent.super.super.isa);
  if (v2)
  {
    uint64_t v3 = v2;
    OUTLINED_FUNCTION_24_16();
    if (v5) {
      goto LABEL_17;
    }
    uint64_t v6 = *(void *)(v4 + 16);
    swift_bridgeObjectRetain();
    for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v7 = 4;
      while (1)
      {
        id v8 = (v3 & 0xC000000000000001) != 0
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
           : *(id *)(v3 + 8 * v7);
        uint64_t v9 = v8;
        uint64_t v10 = v7 - 3;
        if (__OFADD__(v7 - 4, 1)) {
          break;
        }
        id v11 = [v8 relationship];

        BOOL v12 = v11 != 0;
        ++v7;
        if (v11) {
          BOOL v13 = 1;
        }
        else {
          BOOL v13 = v10 == v6;
        }
        if (v13) {
          goto LABEL_19;
        }
      }
      __break(1u);
LABEL_17:
      swift_bridgeObjectRetain();
    }
    BOOL v12 = 0;
LABEL_19:
    swift_bridgeObjectRelease_n();
    Swift::Bool v24 = v12;
  }
  else
  {
    BOOL v12 = 0;
  }
  (*(void (**)(long long *__return_ptr))(class metadata base offset for PhoneCallBaseCatTemplatingService
                                                 + *v1
                                                 + 88))(&v21);
  if (v22)
  {
    outlined init with take of AppSelectionSignalComponent(&v21, (uint64_t)v23);
    outlined init with copy of SignalProviding((uint64_t)v23, (uint64_t)&v21);
    if (v12)
    {
      Swift::Bool v14 = 1;
    }
    else
    {
      __swift_project_boxed_opaque_existential_1(&v21, v22);
      OUTLINED_FUNCTION_7_0();
      Swift::Bool v14 = PhoneCallNLIntent.hasRelationship()();
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v21);
    Swift::Bool v24 = v14;
  }
  else
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)&v21, &demangling cache variable for type metadata for PhoneCallNLIntent?);
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.siriPhone);
  BOOL v16 = v24;
  id v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 67109120;
    v23[0] = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_0, v17, v18, "#StartCallCatTemplatingService isRelationshipRequest: %{BOOL}d", v19, 8u);
    OUTLINED_FUNCTION_6();
  }

  swift_beginAccess();
  return v24;
}

uint64_t StartCallCatTemplatingService.getContactsInferenceSource(intent:featureManager:)(void *a1)
{
  uint64_t v1 = outlined bridged method (pb) of @objc INStartCallIntent.contacts.getter(a1);
  if (!v1) {
    return 1;
  }
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_24_16();
  if (v4)
  {
    if (v2 >= 0) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = v2;
    }
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_18_22();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)(v3 + 16);
  }
  if (v5 != 1
    || ((specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v2 & 0xC000000000000001) == 0, v2),
         (v2 & 0xC000000000000001) != 0)
      ? (id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)())
      : (id v6 = *(id *)(v2 + 32)),
        (uint64_t v7 = outlined bridged method (ob) of @objc INPerson.siriMatches.getter(v6)) == 0))
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  uint64_t v8 = v7;
  unint64_t v9 = v7 & 0xC000000000000001;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v7 & 0xC000000000000001) == 0, v7);
  if (v9) {
    id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v10 = *(id *)(v8 + 32);
  }
  id v11 = v10;
  swift_bridgeObjectRelease();
  if (!INPerson.isProvidedByPlus.getter())
  {
    swift_bridgeObjectRelease();

    return 1;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.siriPhone);
  OUTLINED_FUNCTION_18_22();
  swift_bridgeObjectRetain();
  BOOL v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    BOOL v16 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 138412290;
    if ((v2 & 0xC000000000000001) != 0) {
      id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v17 = *(id *)(v2 + 32);
    }
    id v19 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *BOOL v16 = v19;
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_0, v13, v14, "#StartCallCatTemplatingService Found a contact that is inferred by PLUS: %@", v15, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return 0;
}

void StartCallCatTemplatingService.init(ducFamily:sharedGlobals:displayTextCats:phoneCallCommonCats:appInfoBuilder:labelTemplating:startCallCats:)()
{
}

uint64_t StartCallCatTemplatingService.__ivar_destroyer()
{
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t StartCallCatTemplatingService.deinit()
{
  uint64_t v0 = specialized PhoneCallBaseCatTemplatingService.deinit();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t specialized PhoneCallBaseCatTemplatingService.deinit()
{
  uint64_t v0 = DucTemplatingService.deinit();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_26_6();
  swift_release();
  OUTLINED_FUNCTION_26_6();
  swift_release();
  OUTLINED_FUNCTION_26_6();
  __swift_destroy_boxed_opaque_existential_1(v0 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService
                                                            + v1
                                                            + 40));
  OUTLINED_FUNCTION_26_6();
  __swift_destroy_boxed_opaque_existential_1(v0 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService
                                                            + v2
                                                            + 48));
  OUTLINED_FUNCTION_26_6();
  outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)(v0 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService + v3 + 56), &demangling cache variable for type metadata for PhoneCallNLIntent?);
  OUTLINED_FUNCTION_26_6();
  __swift_destroy_boxed_opaque_existential_1(v0 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService
                                                            + v4
                                                            + 64));
  OUTLINED_FUNCTION_26_6();
  __swift_destroy_boxed_opaque_existential_1(v0 + *(void *)(class metadata base offset for PhoneCallBaseCatTemplatingService
                                                            + v5
                                                            + 72));
  OUTLINED_FUNCTION_26_6();
  swift_release();
  return v0;
}

uint64_t StartCallCatTemplatingService.__deallocating_deinit()
{
  StartCallCatTemplatingService.deinit();

  return swift_deallocClassInstance();
}

uint64_t closure #1 in Signpost.OpenSignpost.end(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t))
{
  return a6(a1);
}

uint64_t outlined bridged method (ob) of @objc INPerson.siriMatches.getter(void *a1)
{
  id v2 = [a1 siriMatches];

  if (!v2) {
    return 0;
  }
  type metadata accessor for INPerson();
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined bridged method (pb) of @objc INCallGroup.groupName.getter(void *a1)
{
  return outlined bridged method (pb) of @objc INCallGroup.groupName.getter(a1, (SEL *)&selRef_groupName);
}

uint64_t outlined bridged method (pb) of @objc INCallGroup.groupId.getter(void *a1)
{
  return outlined bridged method (pb) of @objc INCallGroup.groupName.getter(a1, (SEL *)&selRef_groupId);
}

uint64_t outlined bridged method (pb) of @objc INCallGroup.groupName.getter(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (v2)
  {
    uint64_t v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return OUTLINED_FUNCTION_7_0();
}

uint64_t outlined bridged method (pb) of @objc INStartCallIntentResponse.restrictedContacts.getter(void *a1)
{
  id v1 = [a1 restrictedContacts];
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  type metadata accessor for INPerson();
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void specialized PhoneStartCallIntent.__allocating_init(intent:isRelationshipRequest:)()
{
  OUTLINED_FUNCTION_24_0();
  uint64_t v4 = v3;
  id v6 = v5;
  type metadata accessor for Locale();
  OUTLINED_FUNCTION_0_0();
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_11_34(v8, v66);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v10 = OUTLINED_FUNCTION_11_0(v9);
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_12_26();
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_27_15();
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_25_19();
  uint64_t v14 = __chkstk_darwin(v13);
  OUTLINED_FUNCTION_26_19(v14, v15, v16, v17, v18, v19, v20, v21, v67);
  if (![v6 callCapability])
  {
    uint64_t v23 = (__CFString *)0xE700000000000000;
    OUTLINED_FUNCTION_48_10();
    goto LABEL_10;
  }
  uint64_t BackingType = INCallCapabilityGetBackingType();
  if (BackingType == 2)
  {
    uint64_t v4 = @"VIDEO_CALL";
  }
  else
  {
    if (BackingType != 1)
    {
      +[NSString stringWithFormat:@"(unknown: %i)", BackingType];
      objc_claimAutoreleasedReturnValue();
      OUTLINED_FUNCTION_7_20();
      goto LABEL_9;
    }
    uint64_t v4 = @"AUDIO_CALL";
  }
  Swift::Bool v24 = v4;
LABEL_9:
  id v25 = v4;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v23 = v26;

LABEL_10:
  OUTLINED_FUNCTION_3_54();
  type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_11_24(v72);
  if (![v6 audioRoute])
  {
    OUTLINED_FUNCTION_4_51();
    goto LABEL_21;
  }
  uint64_t v27 = INCallAudioRouteGetBackingType();
  switch(v27)
  {
    case 4:
      uint64_t v23 = @"HEY_SIRI_AUDIO_ROUTE";
      break;
    case 3:
      uint64_t v23 = @"BLUETOOTH_AUDIO_ROUTE";
      break;
    case 2:
      uint64_t v23 = @"SPEAKERPHONE_AUDIO_ROUTE";
      break;
    default:
      +[NSString stringWithFormat:@"(unknown: %i)", v27];
      objc_claimAutoreleasedReturnValue();
      OUTLINED_FUNCTION_7_20();
      goto LABEL_20;
  }
  uint64_t v28 = v23;
LABEL_20:
  char v29 = v23;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_43_11();
LABEL_21:
  OUTLINED_FUNCTION_3_54();
  OUTLINED_FUNCTION_11_24(v1);
  if (![v6 preferredCallProvider])
  {
    OUTLINED_FUNCTION_4_51();
    goto LABEL_32;
  }
  int v30 = INPreferredCallProviderGetBackingType();
  switch(v30)
  {
    case 4:
      uint64_t v23 = @"THIRD_PARTY_PROVIDER";
      break;
    case 3:
      uint64_t v23 = @"FACETIME_PROVIDER";
      break;
    case 2:
      uint64_t v23 = @"TELEPHONY_PROVIDER";
      break;
    default:
      OUTLINED_FUNCTION_13_26();
      [v32 stringWithFormat:@"(unknown: %i)"];
      objc_claimAutoreleasedReturnValue();
      OUTLINED_FUNCTION_7_20();
      goto LABEL_31;
  }
  uint64_t v31 = v23;
LABEL_31:
  uint64_t v33 = v23;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_43_11();
LABEL_32:
  OUTLINED_FUNCTION_3_54();
  OUTLINED_FUNCTION_11_24(v2);
  if ([v6 destinationType])
  {
    switch(INCallDestinationTypeGetBackingType())
    {
      case 1u:
        uint64_t v23 = @"NORMAL_DESTINATION";
        goto LABEL_41;
      case 2u:
        uint64_t v23 = @"EMERGENCY_DESTINATION";
        goto LABEL_41;
      case 3u:
        uint64_t v23 = @"VOICEMAIL_DESTINATION";
        goto LABEL_41;
      case 4u:
        uint64_t v23 = @"REDIAL_DESTINATION";
        goto LABEL_41;
      case 5u:
        uint64_t v23 = @"CALL_BACK_DESTINATION";
LABEL_41:
        uint64_t v35 = v23;
        break;
      default:
        OUTLINED_FUNCTION_13_26();
        [v34 stringWithFormat:@"(unknown: %i)"];
        objc_claimAutoreleasedReturnValue();
        OUTLINED_FUNCTION_7_20();
        break;
    }
    uint64_t v36 = v23;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  OUTLINED_FUNCTION_3_54();
  OUTLINED_FUNCTION_11_24(v0);
  uint64_t v37 = outlined bridged method (pb) of @objc INStartCallIntent.contacts.getter(v6);
  uint64_t v68 = v1;
  uint64_t v69 = v0;
  uint64_t v70 = v2;
  uint64_t v71 = v6;
  if (v37)
  {
    uint64_t v38 = v37;
    unint64_t v78 = (unint64_t)_swiftEmptyArrayStorage;
    OUTLINED_FUNCTION_24_16();
    if (v40)
    {
      swift_bridgeObjectRetain();
      uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
      if (v41) {
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v41 = *(void *)(v39 + 16);
      swift_bridgeObjectRetain();
      if (v41)
      {
LABEL_46:
        uint64_t v74 = type metadata accessor for PhonePerson(0);
        if (v41 < 1)
        {
          __break(1u);
          goto LABEL_80;
        }
        unint64_t v73 = v38 & 0xC000000000000001;
        do
        {
          if (v73) {
            uint64_t v42 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            uint64_t v42 = *(id *)(v38 + 32);
          }
          uint64_t v43 = v42;
          static Device.current.getter();
          __swift_project_boxed_opaque_existential_1(v77, v77[3]);
          OUTLINED_FUNCTION_18_22();
          dispatch thunk of DeviceState.siriLocale.getter();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
          uint64_t v44 = (void *)OUTLINED_FUNCTION_25_10();
          uint64_t v38 = v74;
          uint64_t v46 = static PhonePerson.make(phonePerson:options:locale:)(v44, v45, v75);
          uint64_t v47 = OUTLINED_FUNCTION_14_25();
          v48(v47);

          if (v46)
          {
            uint64_t v38 = (uint64_t)&v78;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((char *)&dword_10 + (v78 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                           + (v78 & 0xFFFFFFFFFFFFFF8)) >> 1)
              OUTLINED_FUNCTION_4_21();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          OUTLINED_FUNCTION_47_11();
        }
        while (!v49);
        swift_bridgeObjectRelease();
        id v6 = v71;
        goto LABEL_60;
      }
    }
    swift_bridgeObjectRelease();
LABEL_60:
    swift_bridgeObjectRelease();
  }
  type metadata accessor for PhonePersonList();
  uint64_t v50 = OUTLINED_FUNCTION_54_9();
  uint64_t v51 = outlined bridged method (pb) of @objc INStartCallIntent.callGroups.getter(v6);
  id v52 = _swiftEmptyArrayStorage;
  if (v51)
  {
    uint64_t v53 = v51;
    v77[0] = _swiftEmptyArrayStorage;
    OUTLINED_FUNCTION_24_16();
    if (v55)
    {
      swift_bridgeObjectRetain();
      uint64_t v56 = _CocoaArrayWrapper.endIndex.getter();
      if (v56)
      {
LABEL_64:
        type metadata accessor for PhoneCallGroup(0);
        if (v56 >= 1)
        {
          uint64_t v76 = v50;
          for (uint64_t i = 0; i != v56; ++i)
          {
            if ((v53 & 0xC000000000000001) != 0) {
              id v58 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v58 = *(id *)(v53 + 8 * i + 32);
            }
            uint64_t v59 = v58;
            uint64_t v60 = outlined bridged method (pb) of @objc INCallGroup.groupName.getter(v58, (SEL *)&selRef_groupName);
            unint64_t v62 = v61;
            uint64_t v63 = outlined bridged method (pb) of @objc INCallGroup.groupName.getter(v59, (SEL *)&selRef_groupId);
            uint64_t v65 = static PhoneCallGroup.make(groupName:groupId:)(v60, v62, v63, v64);

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v65)
            {
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              if (*(void *)((char *)&dword_10 + (v77[0] & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                                + (v77[0] & 0xFFFFFFFFFFFFFF8)) >> 1)
                OUTLINED_FUNCTION_4_21();
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
            }
          }
          swift_bridgeObjectRelease();
          uint64_t v50 = v76;
          id v52 = (void *)v77[0];
          goto LABEL_77;
        }
LABEL_80:
        __break(1u);
        JUMPOUT(0x1A76B4);
      }
    }
    else
    {
      uint64_t v56 = *(void *)(v54 + 16);
      swift_bridgeObjectRetain();
      if (v56) {
        goto LABEL_64;
      }
    }
    swift_bridgeObjectRelease();
    id v52 = _swiftEmptyArrayStorage;
LABEL_77:
    swift_bridgeObjectRelease();
    uint64_t v2 = v70;
    id v6 = v71;
  }
  type metadata accessor for PhoneStartCallIntent(0);
  PhoneStartCallIntent.__allocating_init(callCapability:audioRoute:preferredCallProvider:destinationType:contacts:callGroups:)(v72, v68, v2, v69, v50, (uint64_t)v52);

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_26_1();
}

{
  __CFString *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int BackingType;
  __CFString *v23;
  id v24;
  __CFString *v25;
  __CFString *v26;
  uint64_t v27;
  int v28;
  __CFString *v29;
  id v30;
  int v31;
  __CFString *v32;
  id v33;
  id v34;
  __CFString *v35;
  __CFString *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t);
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void v59[5];
  unint64_t v60;

  OUTLINED_FUNCTION_24_0();
  uint64_t v54 = v4;
  id v6 = v5;
  type metadata accessor for Locale();
  OUTLINED_FUNCTION_0_0();
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_11_34(v8, v52);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v10 = OUTLINED_FUNCTION_11_0(v9);
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_12_26();
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_25_19();
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_27_15();
  uint64_t v14 = __chkstk_darwin(v13);
  OUTLINED_FUNCTION_26_19(v14, v15, v16, v17, v18, v19, v20, v21, v53);
  uint64_t BackingType = INCallCapabilityGetBackingType();
  if (BackingType == 2)
  {
    uint64_t v0 = @"VIDEO_CALL";
    goto LABEL_5;
  }
  if (BackingType == 1)
  {
    uint64_t v0 = @"AUDIO_CALL";
LABEL_5:
    uint64_t v23 = v0;
    goto LABEL_7;
  }
  OUTLINED_FUNCTION_13_26();
  [v24 stringWithFormat:@"(unknown: %i)"];
  objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_7_20();
LABEL_7:
  OUTLINED_FUNCTION_48_10();
  id v25 = v0;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_56_9();
  uint64_t v26 = (__CFString *)v55;
  OUTLINED_FUNCTION_11_2();
  uint64_t v27 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_23_20(v55);
  if (![v6 audioRoute])
  {
    OUTLINED_FUNCTION_4_51();
    goto LABEL_18;
  }
  uint64_t v28 = INCallAudioRouteGetBackingType();
  switch(v28)
  {
    case 4:
      uint64_t v26 = @"HEY_SIRI_AUDIO_ROUTE";
      break;
    case 3:
      uint64_t v26 = @"BLUETOOTH_AUDIO_ROUTE";
      break;
    case 2:
      uint64_t v26 = @"SPEAKERPHONE_AUDIO_ROUTE";
      break;
    default:
      OUTLINED_FUNCTION_13_26();
      [v30 stringWithFormat:@"(unknown: %i)"];
      objc_claimAutoreleasedReturnValue();
      OUTLINED_FUNCTION_7_20();
      goto LABEL_17;
  }
  char v29 = v26;
LABEL_17:
  v26;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_43_11();
LABEL_18:
  OUTLINED_FUNCTION_3_54();
  OUTLINED_FUNCTION_23_20(v3);
  if (![v6 preferredCallProvider])
  {
    OUTLINED_FUNCTION_4_51();
    goto LABEL_29;
  }
  uint64_t v31 = INPreferredCallProviderGetBackingType();
  switch(v31)
  {
    case 4:
      uint64_t v26 = @"THIRD_PARTY_PROVIDER";
      break;
    case 3:
      uint64_t v26 = @"FACETIME_PROVIDER";
      break;
    case 2:
      uint64_t v26 = @"TELEPHONY_PROVIDER";
      break;
    default:
      OUTLINED_FUNCTION_13_26();
      [v33 stringWithFormat:@"(unknown: %i)"];
      objc_claimAutoreleasedReturnValue();
      OUTLINED_FUNCTION_7_20();
      goto LABEL_28;
  }
  id v32 = v26;
LABEL_28:
  v26;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_43_11();
LABEL_29:
  OUTLINED_FUNCTION_3_54();
  OUTLINED_FUNCTION_23_20(v2);
  if ([v6 destinationType])
  {
    switch(INCallDestinationTypeGetBackingType())
    {
      case 1u:
        uint64_t v26 = @"NORMAL_DESTINATION";
        goto LABEL_38;
      case 2u:
        uint64_t v26 = @"EMERGENCY_DESTINATION";
        goto LABEL_38;
      case 3u:
        uint64_t v26 = @"VOICEMAIL_DESTINATION";
        goto LABEL_38;
      case 4u:
        uint64_t v26 = @"REDIAL_DESTINATION";
        goto LABEL_38;
      case 5u:
        uint64_t v26 = @"CALL_BACK_DESTINATION";
LABEL_38:
        uint64_t v35 = v26;
        break;
      default:
        OUTLINED_FUNCTION_13_26();
        [v34 stringWithFormat:@"(unknown: %i)"];
        objc_claimAutoreleasedReturnValue();
        OUTLINED_FUNCTION_7_20();
        break;
    }
    uint64_t v36 = v26;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  OUTLINED_FUNCTION_3_54();
  __swift_storeEnumTagSinglePayload(v1, 0, 1, v27);
  uint64_t v37 = outlined bridged method (pb) of @objc INStartVideoCallIntent.contacts.getter(v6);
  if (v37)
  {
    uint64_t v38 = v37;
    uint64_t v60 = (unint64_t)_swiftEmptyArrayStorage;
    OUTLINED_FUNCTION_24_16();
    if (v40)
    {
      swift_bridgeObjectRetain();
      uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
      if (v41) {
        goto LABEL_43;
      }
    }
    else
    {
      uint64_t v41 = *(void *)(v39 + 16);
      swift_bridgeObjectRetain();
      if (v41)
      {
LABEL_43:
        uint64_t v57 = type metadata accessor for PhonePerson(0);
        if (v41 < 1)
        {
          __break(1u);
          JUMPOUT(0x1A7C5CLL);
        }
        uint64_t v56 = v38 & 0xC000000000000001;
        do
        {
          if (v56) {
            uint64_t v42 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            uint64_t v42 = *(id *)(v38 + 32);
          }
          uint64_t v43 = v42;
          static Device.current.getter();
          __swift_project_boxed_opaque_existential_1(v59, v59[3]);
          dispatch thunk of DeviceState.siriLocale.getter();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
          uint64_t v38 = v57;
          uint64_t v44 = static PhonePerson.make(phonePerson:options:locale:)(v43, v54 & 1, v58);
          char v45 = OUTLINED_FUNCTION_14_25();
          v46(v45);

          if (v44)
          {
            uint64_t v38 = (uint64_t)&v60;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((char *)&dword_10 + (v60 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                           + (v60 & 0xFFFFFFFFFFFFFF8)) >> 1)
              OUTLINED_FUNCTION_4_21();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          OUTLINED_FUNCTION_47_11();
        }
        while (!v47);
        swift_bridgeObjectRelease();
        goto LABEL_57;
      }
    }
    swift_bridgeObjectRelease();
LABEL_57:
    swift_bridgeObjectRelease();
  }
  type metadata accessor for PhoneStartCallIntent(0);
  type metadata accessor for PhonePersonList();
  uint64_t v48 = OUTLINED_FUNCTION_54_9();
  OUTLINED_FUNCTION_44_13(v48, v49, v50, v51, v48, (uint64_t)_swiftEmptyArrayStorage);

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_26_1();
}

{
  __CFString *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int BackingType;
  __CFString *v23;
  id v24;
  __CFString *v25;
  __CFString *v26;
  uint64_t v27;
  int v28;
  __CFString *v29;
  id v30;
  int v31;
  __CFString *v32;
  id v33;
  __CFString *v34;
  id v35;
  __CFString *v36;
  __CFString *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  void v60[5];
  unint64_t v61;

  OUTLINED_FUNCTION_24_0();
  uint64_t v56 = v4;
  id v6 = v5;
  type metadata accessor for Locale();
  OUTLINED_FUNCTION_0_0();
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_11_34(v8, v54);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v10 = OUTLINED_FUNCTION_11_0(v9);
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_12_26();
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_25_19();
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_27_15();
  uint64_t v14 = __chkstk_darwin(v13);
  OUTLINED_FUNCTION_26_19(v14, v15, v16, v17, v18, v19, v20, v21, v55);
  uint64_t BackingType = INCallCapabilityGetBackingType();
  if (BackingType == 2)
  {
    uint64_t v0 = @"VIDEO_CALL";
    goto LABEL_5;
  }
  if (BackingType == 1)
  {
    uint64_t v0 = @"AUDIO_CALL";
LABEL_5:
    uint64_t v23 = v0;
    goto LABEL_7;
  }
  OUTLINED_FUNCTION_13_26();
  [v24 stringWithFormat:@"(unknown: %i)"];
  objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_7_20();
LABEL_7:
  id v25 = v0;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_56_9();
  uint64_t v26 = (__CFString *)v57;
  OUTLINED_FUNCTION_11_2();
  uint64_t v27 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_23_20(v57);
  if (![v6 audioRoute])
  {
    OUTLINED_FUNCTION_4_51();
    goto LABEL_18;
  }
  uint64_t v28 = INCallAudioRouteGetBackingType();
  switch(v28)
  {
    case 4:
      uint64_t v26 = @"HEY_SIRI_AUDIO_ROUTE";
      break;
    case 3:
      uint64_t v26 = @"BLUETOOTH_AUDIO_ROUTE";
      break;
    case 2:
      uint64_t v26 = @"SPEAKERPHONE_AUDIO_ROUTE";
      break;
    default:
      OUTLINED_FUNCTION_13_26();
      [v30 stringWithFormat:@"(unknown: %i)"];
      objc_claimAutoreleasedReturnValue();
      OUTLINED_FUNCTION_7_20();
      goto LABEL_17;
  }
  char v29 = v26;
LABEL_17:
  v26;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_43_11();
LABEL_18:
  OUTLINED_FUNCTION_3_54();
  __swift_storeEnumTagSinglePayload(v3, 0, 1, v27);
  uint64_t v31 = INPreferredCallProviderGetBackingType();
  switch(v31)
  {
    case 4:
      uint64_t v26 = @"THIRD_PARTY_PROVIDER";
      goto LABEL_24;
    case 3:
      uint64_t v26 = @"FACETIME_PROVIDER";
      goto LABEL_24;
    case 2:
      uint64_t v26 = @"TELEPHONY_PROVIDER";
LABEL_24:
      id v32 = v26;
      goto LABEL_26;
  }
  OUTLINED_FUNCTION_13_26();
  [v33 stringWithFormat:@"(unknown: %i)"];
  objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_7_20();
LABEL_26:
  id v34 = v26;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_56_9();
  OUTLINED_FUNCTION_11_2();
  __swift_storeEnumTagSinglePayload(v2, 0, 1, v27);
  switch(INCallDestinationTypeGetBackingType())
  {
    case 1u:
      id v34 = @"NORMAL_DESTINATION";
      goto LABEL_33;
    case 2u:
      id v34 = @"EMERGENCY_DESTINATION";
      goto LABEL_33;
    case 3u:
      id v34 = @"VOICEMAIL_DESTINATION";
      goto LABEL_33;
    case 4u:
      id v34 = @"REDIAL_DESTINATION";
      goto LABEL_33;
    case 5u:
      id v34 = @"CALL_BACK_DESTINATION";
LABEL_33:
      uint64_t v36 = v34;
      break;
    default:
      OUTLINED_FUNCTION_13_26();
      [v35 stringWithFormat:@"(unknown: %i)"];
      objc_claimAutoreleasedReturnValue();
      OUTLINED_FUNCTION_7_20();
      break;
  }
  uint64_t v37 = v34;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_56_9();
  OUTLINED_FUNCTION_11_2();
  __swift_storeEnumTagSinglePayload(v1, 0, 1, v27);
  uint64_t v38 = outlined bridged method (pb) of @objc INStartVideoCallIntent.contacts.getter(v6);
  if (v38)
  {
    uint64_t v39 = v38;
    unint64_t v61 = (unint64_t)_swiftEmptyArrayStorage;
    OUTLINED_FUNCTION_24_16();
    if (v41)
    {
      swift_bridgeObjectRetain();
      uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
      if (v42) {
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v42 = *(void *)(v40 + 16);
      swift_bridgeObjectRetain();
      if (v42)
      {
LABEL_37:
        type metadata accessor for PhonePerson(0);
        if (v42 < 1)
        {
          __break(1u);
          JUMPOUT(0x1A81F0);
        }
        uint64_t v43 = 0;
        id v58 = v39 & 0xC000000000000001;
        uint64_t v44 = v39;
        do
        {
          if (v58) {
            char v45 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            char v45 = *(id *)(v39 + 8 * v43 + 32);
          }
          uint64_t v46 = v45;
          static Device.current.getter();
          __swift_project_boxed_opaque_existential_1(v60, v60[3]);
          dispatch thunk of DeviceState.siriLocale.getter();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
          uint64_t v47 = static PhonePerson.make(phonePerson:options:locale:)(v46, v56 & 1, v59);
          uint64_t v48 = OUTLINED_FUNCTION_14_25();
          v49(v48);

          if (v47)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((char *)&dword_10 + (v61 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                           + (v61 & 0xFFFFFFFFFFFFFF8)) >> 1)
              OUTLINED_FUNCTION_4_21();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          ++v43;
          uint64_t v39 = v44;
        }
        while (v42 != v43);
        swift_bridgeObjectRelease();
        goto LABEL_50;
      }
    }
    swift_bridgeObjectRelease();
LABEL_50:
    swift_bridgeObjectRelease();
  }
  type metadata accessor for PhoneStartCallIntent(0);
  type metadata accessor for PhonePersonList();
  uint64_t v50 = OUTLINED_FUNCTION_54_9();
  OUTLINED_FUNCTION_44_13(v50, v51, v52, v53, v50, (uint64_t)_swiftEmptyArrayStorage);

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_26_1();
}

uint64_t specialized StartCallCatTemplatingService.init(sharedGlobals:startCallCats:displayTextCats:phoneCallCommonCats:unsupportedFlowCats:appInfoBuilder:operationManager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v24 = a1;
  uint64_t v16 = *(void *)(a9 - 8);
  uint64_t v25 = a10;
  __chkstk_darwin(a1);
  uint64_t v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for CATOption();
  __chkstk_darwin(v19 - 8);
  *(void *)(a8 + direct field offset for StartCallCatTemplatingService.startCallCatFamily) = a2;
  *(void *)(a8 + direct field offset for StartCallCatTemplatingService.unsupportedFlowCats) = a5;
  *(void *)(a8 + direct field offset for StartCallCatTemplatingService.operationManager) = a7;
  outlined init with copy of SignalProviding(a1, (uint64_t)v28);
  type metadata accessor for StartCallCATs();
  swift_retain();
  swift_retain();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v20 = CATWrapper.__allocating_init(options:globals:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a6, a9);
  uint64_t v21 = specialized PhoneCallBaseCatTemplatingService.init(ducFamily:sharedGlobals:displayTextCats:phoneCallCommonCats:appInfoBuilder:labelTemplating:startCallCats:)(0x6C61437472617473, 0xEF3256736375446CLL, v28, v26, v27, v18, 0, 0, 0, 0, v20, a8, a9, v25);
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a6, a9);
  __swift_destroy_boxed_opaque_existential_1(v24);
  return v21;
}

uint64_t specialized StartCallCatTemplatingService.__allocating_init(sharedGlobals:startCallCats:displayTextCats:phoneCallCommonCats:unsupportedFlowCats:appInfoBuilder:operationManager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v21 = a5;
  uint64_t v22 = a7;
  uint64_t v15 = *(void *)(a9 - 8);
  __chkstk_darwin(a1);
  uint64_t v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for StartCallCatTemplatingService();
  uint64_t v18 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a6, a9);
  uint64_t v19 = specialized StartCallCatTemplatingService.init(sharedGlobals:startCallCats:displayTextCats:phoneCallCommonCats:unsupportedFlowCats:appInfoBuilder:operationManager:)(a1, a2, a3, a4, v21, (uint64_t)v17, v22, v18, a9, a10);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a6, a9);
  return v19;
}

uint64_t objectdestroy_18Tm()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void partial apply for closure #2 in StartCallCatTemplatingService.makeIntentConfirmationDialog(app:intent:intentResponse:_:)()
{
}

unint64_t lazy protocol witness table accessor for type ResponseMode and conformance ResponseMode()
{
  unint64_t result = lazy protocol witness table cache variable for type ResponseMode and conformance ResponseMode;
  if (!lazy protocol witness table cache variable for type ResponseMode and conformance ResponseMode)
  {
    type metadata accessor for ResponseMode();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResponseMode and conformance ResponseMode);
  }
  return result;
}

uint64_t sub_1A8674()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void partial apply for closure #1 in StartCallCatTemplatingService.makeInterstitialDialog(app:intent:intentResponse:_:)()
{
}

uint64_t sub_1A86FC()
{
  swift_release();
  swift_release();
  swift_release();

  uint64_t v1 = OUTLINED_FUNCTION_22_22();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t partial apply for closure #1 in StartCallCatTemplatingService.makeIntentHandledDialog(app:intent:intentResponse:_:)(uint64_t a1)
{
  return partial apply for closure #1 in StartCallCatTemplatingService.makeIntentHandledDialog(app:intent:intentResponse:_:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void))closure #1 in StartCallCatTemplatingService.makeIntentHandledDialog(app:intent:intentResponse:_:));
}

uint64_t type metadata accessor for StartCallCatTemplatingService()
{
  uint64_t result = type metadata singleton initialization cache for StartCallCatTemplatingService;
  if (!type metadata singleton initialization cache for StartCallCatTemplatingService) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for StartCallCatTemplatingService()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for StartCallCatTemplatingService()
{
  return type metadata accessor for StartCallCatTemplatingService();
}

uint64_t objectdestroyTm_10()
{
  swift_release();
  swift_release();
  uint64_t v0 = OUTLINED_FUNCTION_22_22();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t partial apply for closure #1 in Signpost.OpenSignpost.end(_:)(uint64_t a1)
{
  if (*(unsigned char *)(v1 + 41)) {
    int v2 = 256;
  }
  else {
    int v2 = 0;
  }
  return closure #1 in Signpost.OpenSignpost.end(_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), v2 | *(unsigned __int8 *)(v1 + 40), *(uint64_t (**)(uint64_t))(v1 + 48));
}

uint64_t sub_1A886C()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t partial apply for closure #1 in StartCallCatTemplatingService.makeIntentHandledDialogHelper(app:intent:intentResponse:_:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in StartCallCatTemplatingService.makeIntentHandledDialogHelper(app:intent:intentResponse:_:)(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56));
}

uint64_t sub_1A8900()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for closure #3 in StartCallCatTemplatingService.makeIntentHandledDialogHelper(app:intent:intentResponse:_:)(uint64_t a1)
{
  return closure #3 in StartCallCatTemplatingService.makeIntentHandledDialogHelper(app:intent:intentResponse:_:)(a1, *(void (**)(char *))(v1 + 16));
}

uint64_t sub_1A8940()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v0 = OUTLINED_FUNCTION_22_22();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t partial apply for closure #2 in StartCallCatTemplatingService.makeIntentHandledDialogHelper(app:intent:intentResponse:_:)(uint64_t a1, uint64_t a2)
{
  return closure #2 in StartCallCatTemplatingService.makeIntentHandledDialogHelper(app:intent:intentResponse:_:)(a1, a2, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7]);
}

uint64_t sub_1A8998()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v0 = OUTLINED_FUNCTION_22_22();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t partial apply for closure #1 in closure #2 in StartCallCatTemplatingService.makeIntentHandledDialogHelper(app:intent:intentResponse:_:)(uint64_t a1)
{
  return partial apply for closure #1 in StartCallCatTemplatingService.makeIntentHandledDialog(app:intent:intentResponse:_:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void))closure #1 in closure #2 in StartCallCatTemplatingService.makeIntentHandledDialogHelper(app:intent:intentResponse:_:));
}

uint64_t partial apply for closure #1 in StartCallCatTemplatingService.makeIntentHandledDialog(app:intent:intentResponse:_:)(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7]);
}

uint64_t outlined init with copy of ResponseMode?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_15();
  uint64_t v4 = OUTLINED_FUNCTION_7_0();
  v5(v4);
  return a2;
}

uint64_t outlined init with take of Result<TemplatingResult, Error>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of CallRecordToCallBackSlotTemplating(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of CallCapabilitySlotTemplating(uint64_t a1)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_3_54()
{
  return SpeakableString.init(print:speak:)();
}

void OUTLINED_FUNCTION_11_34(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 144) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_14_25()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_22_22()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_23_20(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(a1, 0, 1, v1);
}

void OUTLINED_FUNCTION_26_19(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 168) = (char *)&a9 - v9;
}

uint64_t OUTLINED_FUNCTION_28_16()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_30_16@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = v1 + *(void *)(a1 + 40);
  return outlined init with copy of SignalProviding(v4, v2 - 120);
}

uint64_t OUTLINED_FUNCTION_31_17@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = v1 + *(void *)(a1 + 40);
  return outlined init with copy of SignalProviding(v4, v2 - 128);
}

uint64_t OUTLINED_FUNCTION_32_12()
{
  return swift_retain();
}

void OUTLINED_FUNCTION_34_10(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 200) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void OUTLINED_FUNCTION_35_17(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 240) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void OUTLINED_FUNCTION_43_11()
{
}

void OUTLINED_FUNCTION_44_13(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(void *)(v9 - 168);
  PhoneStartCallIntent.__allocating_init(callCapability:audioRoute:preferredCallProvider:destinationType:contacts:callGroups:)(v11, v8, v7, v6, a5, a6);
}

uint64_t OUTLINED_FUNCTION_49_12@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 88) = *(void *)(v1 + a1);
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_50_6()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_54_9()
{
  return PhonePersonList.__allocating_init(list:)(v0);
}

void OUTLINED_FUNCTION_56_9()
{
}

uint64_t *CallHistoryImage.videoCallImage.unsafeMutableAddressor()
{
  if (one-time initialization token for videoCallImage != -1) {
    swift_once();
  }
  return &static CallHistoryImage.videoCallImage;
}

uint64_t *CallHistoryImage.outgoingCallImage.unsafeMutableAddressor()
{
  if (one-time initialization token for outgoingCallImage != -1) {
    swift_once();
  }
  return &static CallHistoryImage.outgoingCallImage;
}

uint64_t *CallHistoryImage.emptyImage.unsafeMutableAddressor()
{
  if (one-time initialization token for emptyImage != -1) {
    swift_once();
  }
  return &static CallHistoryImage.emptyImage;
}

uint64_t *CallHistoryImage.unreadImage.unsafeMutableAddressor()
{
  if (one-time initialization token for unreadImage != -1) {
    swift_once();
  }
  return &static CallHistoryImage.unreadImage;
}

uint64_t *CallHistoryImage.emptyImageVoicemail.unsafeMutableAddressor()
{
  if (one-time initialization token for emptyImageVoicemail != -1) {
    swift_once();
  }
  return &static CallHistoryImage.emptyImageVoicemail;
}

id one-time initialization function for videoCallImage(uint64_t a1)
{
  return one-time initialization function for videoCallImage(15.0, 10.0, a1, 0, &static CallHistoryImage.videoCallImage);
}

id static CallHistoryImage.videoCallImage.getter()
{
  return static CallHistoryImage.videoCallImage.getter(&one-time initialization token for videoCallImage, (void **)&static CallHistoryImage.videoCallImage);
}

id one-time initialization function for outgoingCallImage(uint64_t a1)
{
  return one-time initialization function for videoCallImage(15.0, 15.0, a1, 1, &static CallHistoryImage.outgoingCallImage);
}

id static CallHistoryImage.outgoingCallImage.getter()
{
  return static CallHistoryImage.videoCallImage.getter(&one-time initialization token for outgoingCallImage, (void **)&static CallHistoryImage.outgoingCallImage);
}

id one-time initialization function for emptyImage(uint64_t a1)
{
  return one-time initialization function for emptyImage(15.0, 15.0, a1, &static CallHistoryImage.emptyImage);
}

id static CallHistoryImage.emptyImage.getter()
{
  return static CallHistoryImage.videoCallImage.getter(&one-time initialization token for emptyImage, (void **)&static CallHistoryImage.emptyImage);
}

id one-time initialization function for unreadImage(uint64_t a1)
{
  return one-time initialization function for videoCallImage(10.0, 10.0, a1, 2, &static CallHistoryImage.unreadImage);
}

id one-time initialization function for videoCallImage(double a1, double a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9 = [objc_allocWithZone((Class)SFLocalImage) init];
  [v9 setLocalImageType:a4];
  id result = objc_msgSend(v9, "setSize:", a1, a2);
  *a5 = v9;
  return result;
}

id static CallHistoryImage.unreadImage.getter()
{
  return static CallHistoryImage.videoCallImage.getter(&one-time initialization token for unreadImage, (void **)&static CallHistoryImage.unreadImage);
}

id one-time initialization function for emptyImageVoicemail(uint64_t a1)
{
  return one-time initialization function for emptyImage(10.0, 10.0, a1, &static CallHistoryImage.emptyImageVoicemail);
}

id one-time initialization function for emptyImage(double a1, double a2, uint64_t a3, void *a4)
{
  id v7 = [objc_allocWithZone((Class)SFLocalImage) init];
  id result = objc_msgSend(v7, "setSize:", a1, a2);
  *a4 = v7;
  return result;
}

id static CallHistoryImage.emptyImageVoicemail.getter()
{
  return static CallHistoryImage.videoCallImage.getter(&one-time initialization token for emptyImageVoicemail, (void **)&static CallHistoryImage.emptyImageVoicemail);
}

id static CallHistoryImage.videoCallImage.getter(void *a1, void **a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = *a2;

  return v3;
}

ValueMetadata *type metadata accessor for CallHistoryImage()
{
  return &type metadata for CallHistoryImage;
}

uint64_t UsoTask.hasFaceTimeAudioSemantics.getter()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_PhoneCallMode.DefinedValues?);
  __chkstk_darwin(v3 - 8);
  OUTLINED_FUNCTION_37();
  type metadata accessor for UsoEntity_common_PhoneCallMode.DefinedValues();
  OUTLINED_FUNCTION_14_11();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_6_44();
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)v31 - v9 + 64;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v31 - v11 + 64;
  static UsoTask_CodegenConverter.convert(task:)();
  if (!v31[3])
  {
    uint64_t v26 = &demangling cache variable for type metadata for Any?;
    uint64_t v27 = v31;
LABEL_13:
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v27, v26);
    goto LABEL_18;
  }
  type metadata accessor for UsoTask_update_common_PhoneCall();
  if ((OUTLINED_FUNCTION_5_42() & 1) == 0)
  {
LABEL_18:
    LOBYTE(v13) = 0;
    return v13 & 1;
  }
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_ReferenceTarget.target.getter();
  swift_release();
  if (!v31[0])
  {
LABEL_17:
    swift_release();
    goto LABEL_18;
  }
  swift_retain();
  uint64_t v13 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
  swift_release();
  if (!v13)
  {
    swift_release();
    swift_release();
    return v13 & 1;
  }
  UsoEntity_common_App.applicationId.getter();
  uint64_t v30 = v14;
  uint64_t v16 = v15;
  swift_release();
  if (!v16)
  {
    swift_release();
    goto LABEL_17;
  }
  if (!dispatch thunk of UsoEntity_common_PhoneCall.mode.getter())
  {
    __swift_storeEnumTagSinglePayload(v2, 1, 1, v0);
    goto LABEL_21;
  }
  dispatch thunk of UsoEntity_common_PhoneCallMode.definedValue.getter();
  swift_release();
  OUTLINED_FUNCTION_2_63(v2);
  if (v17)
  {
LABEL_21:
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v26 = &demangling cache variable for type metadata for UsoEntity_common_PhoneCallMode.DefinedValues?;
    uint64_t v27 = (void *)v2;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_7_46();
  v18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_467720;
  *(void *)(inited + 32) = 0xD000000000000012;
  *(void *)(inited + 40) = 0x8000000000492070;
  if (one-time initialization token for macFaceTimeBundleId != -1) {
    swift_once();
  }
  uint64_t v20 = unk_5D4E10;
  *(void *)(inited + 48) = static PhoneCallAppNameConstants.macFaceTimeBundleId;
  *(void *)(inited + 56) = v20;
  swift_bridgeObjectRetain();
  specialized Set.init(_nonEmptyArrayLiteral:)();
  specialized Set.contains(_:)(v30, v16, v21);
  char v23 = v22;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v10, v12, v0);
  if ((v23 & 1) == 0)
  {
    swift_release();
    swift_release();
    char v29 = *(void (**)(void))(v5 + 8);
    OUTLINED_FUNCTION_10_11();
    v29();
    OUTLINED_FUNCTION_10_11();
    v29();
    goto LABEL_18;
  }
  OUTLINED_FUNCTION_8_51();
  v24();
  LOBYTE(v13) = specialized == infix<A>(_:_:)((uint64_t)v10, v1);
  swift_release();
  swift_release();
  uint64_t v25 = *(void (**)(void))(v5 + 8);
  OUTLINED_FUNCTION_10_11();
  v25();
  OUTLINED_FUNCTION_10_11();
  v25();
  OUTLINED_FUNCTION_10_11();
  v25();
  return v13 & 1;
}

uint64_t UsoTask.isSettingsTask.getter()
{
  if (UsoTask.baseEntityAsString.getter() == 0x535F6E6F6D6D6F63 && v0 == 0xEE00676E69747465)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    return v2 & 1;
  }
}

uint64_t UsoTask.usoCodeGenConvertedTask.getter()
{
  return static UsoTask_CodegenConverter.convert(task:)();
}

uint64_t UsoTask.isReadOrSummarizeVoicemail.getter()
{
  return UsoTask.isReadOrSummarizeVoicemail.getter((void (*)(void))&type metadata accessor for UsoTask_summarise_common_Voicemail, (void (*)(void))&type metadata accessor for UsoTask_read_common_Voicemail);
}

uint64_t UsoTask.isReadOrSummarizeCallHistory.getter()
{
  return UsoTask.isReadOrSummarizeVoicemail.getter((void (*)(void))&type metadata accessor for UsoTask_summarise_common_PhoneCall, (void (*)(void))&type metadata accessor for UsoTask_read_common_PhoneCall);
}

uint64_t UsoTask.isReadOrSummarizeVoicemail.getter(void (*a1)(void), void (*a2)(void))
{
  static UsoTask_CodegenConverter.convert(task:)();
  _ss6ResultOy11SiriKitFlow010TemplatingA0Vs5Error_pGWOcTm_0((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for Any?);
  if (v8)
  {
    a1(0);
    if (swift_dynamicCast())
    {
      uint64_t v4 = v6[0];
      goto LABEL_6;
    }
  }
  else
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v7, &demangling cache variable for type metadata for Any?);
  }
  uint64_t v4 = 0;
LABEL_6:
  outlined init with take of Any?((uint64_t)v9, (uint64_t)v7);
  if (v4)
  {
    swift_release();
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v7, &demangling cache variable for type metadata for Any?);
    return 1;
  }
  outlined init with take of Any?((uint64_t)v7, (uint64_t)v6);
  if (v6[3])
  {
    a2(0);
    if (swift_dynamicCast())
    {
      swift_release();
      return 1;
    }
  }
  else
  {
    outlined destroy of (UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?, UsoEntity_applePhoneCall_PhoneCallAttribute.DefinedValues?)((uint64_t)v6, &demangling cache variable for type metadata for Any?);
  }
  return 0;
}

uint64_t lazy protocol witness table accessor for type UsoEntity_common_PhoneCallMode.DefinedValues and conformance UsoEntity_common_PhoneCallMode.DefinedValues(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_59()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_2_63(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_13_27()
{
  return swift_dynamicCast();
}

uint64_t HandleIntentSubmitter.aceServiceInvoker.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SignalProviding(v1 + 16, a1);
}

uint64_t CallStateGuardFlow.checks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for CallStateGuardFlow.exitValue : CallStateGuardFlow(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 64) = v2;
  return result;
}

uint64_t CallStateGuardFlow.exitValue.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t CallStateGuardFlow.__allocating_init(checks:sharedGlobals:)(uint64_t a1, long long *a2)
{
  uint64_t v4 = swift_allocObject();
  CallStateGuardFlow.init(checks:sharedGlobals:)(a1, a2);
  return v4;
}

uint64_t CallStateGuardFlow.init(checks:sharedGlobals:)(uint64_t a1, long long *a2)
{
  *(unsigned char *)(v2 + 64) = 1;
  *(void *)(v2 + 56) = a1;
  outlined init with take of AppSelectionSignalComponent(a2, v2 + 16);
  return v2;
}

uint64_t static CallStateGuardFlow.expectNoRingingCall(else:sharedGlobals:)(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CallStateGuardCheck>);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_467710;
  uint64_t v5 = OUTLINED_FUNCTION_1_60();
  *(_OWORD *)(v5 + 16) = xmmword_472A20;
  *(unsigned char *)(v5 + 32) = 0;
  uint64_t v6 = OUTLINED_FUNCTION_1_60();
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = 0;
  *(unsigned char *)(v6 + 32) = 3;
  uint64_t v7 = OUTLINED_FUNCTION_1_60();
  *(void *)(v7 + 16) = v5;
  *(void *)(v7 + 24) = 0;
  *(unsigned char *)(v7 + 32) = 3;
  uint64_t v8 = OUTLINED_FUNCTION_18_1();
  *(void *)(v8 + 16) = partial apply for implicit closure #1 in static CallStateGuardFlow.expectNoRingingCall(else:sharedGlobals:);
  *(void *)(v8 + 24) = a1;
  uint64_t v9 = (void *)OUTLINED_FUNCTION_65();
  v9[2] = partial apply for implicit closure #3 in CallStateGuardCheck.init(_:onFail:);
  void v9[3] = v7;
  void v9[4] = implicit closure #4 in CallStateGuardCheck.init(_:onFail:)partial apply;
  void v9[5] = v8;
  *(void *)(v4 + 32) = partial apply for implicit closure #2 in implicit closure #1 in CallStateGuardCheck.init(_:onFail:);
  *(void *)(v4 + 40) = v6;
  *(void *)(v4 + 48) = partial apply for closure #1 in CallStateGuardCheck.init(_:description:onFail:);
  *(void *)(v4 + 56) = v9;
  outlined init with copy of SignalProviding(a2, (uint64_t)v12);
  type metadata accessor for CallStateGuardFlow();
  uint64_t v10 = swift_allocObject();
  CallStateGuardFlow.init(checks:sharedGlobals:)(v4, v12);
  swift_retain();
  swift_retain();
  return v10;
}

uint64_t outlined consume of CommonCallStatePredicate(uint64_t a1, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      uint64_t result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t (*CallStateGuardCheck.init(_:onFail:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5))()
{
  uint64_t v10 = OUTLINED_FUNCTION_1_60();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  *(unsigned char *)(v10 + 32) = a3;
  uint64_t v11 = OUTLINED_FUNCTION_1_60();
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = a2;
  *(unsigned char *)(v11 + 32) = a3;
  uint64_t v12 = OUTLINED_FUNCTION_18_1();
  *(void *)(v12 + 16) = a4;
  *(void *)(v12 + 24) = a5;
  uint64_t v13 = (void *)OUTLINED_FUNCTION_65();
  void v13[2] = implicit closure #3 in CallStateGuardCheck.init(_:onFail:)partial apply;
  void v13[3] = v11;
  void v13[4] = implicit closure #4 in CallStateGuardCheck.init(_:onFail:)partial apply;
  void v13[5] = v12;
  outlined copy of CommonCallStatePredicate(a1, a2, a3);
  return partial apply for implicit closure #2 in implicit closure #1 in CallStateGuardCheck.init(_:onFail:);
}

uint64_t static CallStateGuardFlow.expectActiveCall(else:sharedGlobals:)(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CallStateGuardCheck>);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_467710;
  uint64_t v5 = OUTLINED_FUNCTION_1_60();
  *(_OWORD *)(v5 + 16) = xmmword_467740;
  *(unsigned char *)(v5 + 32) = 0;
  uint64_t v6 = OUTLINED_FUNCTION_1_60();
  *(_OWORD *)(v6 + 16) = xmmword_467740;
  *(unsigned char *)(v6 + 32) = 0;
  uint64_t v7 = OUTLINED_FUNCTION_18_1();
  *(void *)(v7 + 16) = partial apply for implicit closure #1 in static CallStateGuardFlow.expectNoRingingCall(else:sharedGlobals:);
  *(void *)(v7 + 24) = a1;
  uint64_t v8 = (void *)OUTLINED_FUNCTION_65();
  v8[2] = implicit closure #3 in CallStateGuardCheck.init(_:onFail:)partial apply;
  void v8[3] = v6;
  v8[4] = implicit closure #4 in CallStateGuardCheck.init(_:onFail:)partial apply;
  uint64_t v8[5] = v7;
  *(void *)(v4 + 32) = partial apply for implicit closure #2 in implicit closure #1 in CallStateGuardCheck.init(_:onFail:);
  *(void *)(v4 + 40) = v5;
  *(void *)(v4 + 48) = closure #1 in CallStateGuardCheck.init(_:description:onFail:)partial apply;
  *(void *)(v4 + 56) = v8;
  outlined init with copy of SignalProviding(a2, (uint64_t)v11);
  type metadata accessor for CallStateGuardFlow();
  uint64_t v9 = swift_allocObject();
  CallStateGuardFlow.init(checks:sharedGlobals:)(v4, v11);
  swift_retain();
  return v9;
}

uint64_t CallStateGuardFlow.execute(completion:)()
{
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t CallStateGuardFlow.execute()(uint64_t a1)
{
  *(void *)(v2 + 104) = a1;
  *(void *)(v2 + 112) = v1;
  return _swift_task_switch(CallStateGuardFlow.execute(), 0, 0);
}

uint64_t CallStateGuardFlow.execute()()
{
  uint64_t v1 = *(void **)(v0 + 112);
  uint64_t v2 = v1[5];
  uint64_t v3 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v2);
  uint64_t v24 = v0 + 16;
  (*(void (**)(uint64_t, uint64_t))(v3 + 120))(v2, v3);
  uint64_t v4 = (void *)v1[7];
  uint64_t v5 = v4[2];
  if (!v5) {
    goto LABEL_9;
  }
  uint64_t v6 = (uint64_t (*)(uint64_t))v4[4];
  uint64_t v7 = (void (*)(uint64_t))v4[6];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  if (v6(v24))
  {
    swift_release();
    swift_release();
    if (v5 != 1)
    {
      uint64_t v8 = v4 + 11;
      unint64_t v9 = 1;
      while (v9 < v4[2])
      {
        uint64_t v7 = (void (*)(uint64_t))*(v8 - 1);
        uint64_t v10 = (uint64_t (*)(uint64_t))*(v8 - 3);
        swift_retain();
        swift_retain();
        if ((v10(v24) & 1) == 0) {
          goto LABEL_13;
        }
        swift_release();
        swift_release();
        ++v9;
        v8 += 4;
        if (v5 == v9) {
          goto LABEL_8;
        }
      }
      __break(1u);
      goto LABEL_22;
    }
LABEL_8:
    swift_bridgeObjectRelease();
LABEL_9:
    if (one-time initialization token for siriPhone == -1)
    {
LABEL_10:
      uint64_t v11 = type metadata accessor for Logger();
      __swift_project_value_buffer(v11, (uint64_t)static Logger.siriPhone);
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v14 = 0;
        _os_log_impl(&dword_0, v12, v13, "#CallStateGuardFlow: Passed!", v14, 2u);
        OUTLINED_FUNCTION_6();
      }
      uint64_t v15 = *(void *)(v0 + 112);

      swift_beginAccess();
      *(unsigned char *)(v15 + 64) = 0;
      static ExecuteResponse.complete()();
      goto LABEL_18;
    }
LABEL_22:
    swift_once();
    goto LABEL_10;
  }
LABEL_13:
  swift_bridgeObjectRelease();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.siriPhone);
  char v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl(&dword_0, v17, v18, "#CallStateGuardFlow: Failed! Executing wrapped precondition flow.", v19, 2u);
    OUTLINED_FUNCTION_6();
  }
  uint64_t v20 = *(void *)(v0 + 112);

  uint64_t v21 = swift_beginAccess();
  *(unsigned char *)(v20 + 64) = 1;
  v7(v21);
  static ExecuteResponse.complete(next:)();
  swift_release();
  swift_release();
  swift_release();
LABEL_18:
  __swift_destroy_boxed_opaque_existential_1(v24);
  char v22 = *(uint64_t (**)(void))(v0 + 8);
  return v22();
}

uint64_t CallStateGuardFlow.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t CallStateGuardFlow.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Flow.on(input:) in conformance CallStateGuardFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance CallStateGuardFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))();
}

uint64_t protocol witness for Flow.execute() in conformance CallStateGuardFlow(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 152) + **(int **)(**(void **)v1 + 152));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for Flow.execute() in conformance PhoneFlow<A, B>;
  return v6(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance CallStateGuardFlow@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 104))();
  *a1 = result & 1;
  return result;
}

uint64_t key path getter for CallStateGuardCheck.condition : CallStateGuardCheck@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CallStateProviding) -> (@unowned Bool);
  a2[1] = v5;

  return swift_retain();
}

uint64_t key path setter for CallStateGuardCheck.condition : CallStateGuardCheck(uint64_t *a1, uint64_t (**a2)())
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  swift_retain();
  uint64_t result = swift_release();
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CallStateProviding) -> (@out Bool);
  a2[1] = (uint64_t (*)())v5;
  return result;
}

uint64_t CallStateGuardCheck.condition.getter(uint64_t a1)
{
  return a1;
}

uint64_t key path getter for CallStateGuardCheck.flowOnFailure : CallStateGuardCheck@<X0>(uint64_t a1@<X0>, uint64_t (**a2)@<X0>(uint64_t *a1@<X8>)@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed () -> (@owned AnyFlow);
  a2[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v5;

  return swift_retain();
}

uint64_t key path setter for CallStateGuardCheck.flowOnFailure : CallStateGuardCheck(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  swift_retain();
  uint64_t result = swift_release();
  *(void *)(a2 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@out AnyFlow);
  *(void *)(a2 + 24) = v5;
  return result;
}

uint64_t closure #1 in CallStateGuardCheck.init(_:description:onFail:)(uint64_t (*a1)(void), uint64_t a2, uint64_t (*a3)(uint64_t))
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.siriPhone);
  swift_retain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v9 = a1();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v6, v7, "#CallStateGuardCheck Condition failed! %s", v8, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {

    uint64_t v11 = swift_release_n();
  }
  return a3(v11);
}

uint64_t CommonCallStatePredicate.test(_:)(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  void (*v19)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  char v30;
  void v31[3];
  uint64_t v32;
  uint64_t v33;

  switch(a4)
  {
    case 1:
      uint64_t v12 = a1[3];
      uint64_t v13 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v12);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 24);
      swift_retain();
      if (!v14(v12, v13))
      {
        outlined consume of CommonCallStatePredicate(a2, a3, 1);
        goto LABEL_19;
      }
      char v15 = ((uint64_t (*)(void))a2)();
      swift_unknownObjectRelease();
      outlined consume of CommonCallStatePredicate(a2, a3, 1);
      return v15 & 1;
    case 2:
      uint64_t v17 = a1[3];
      uint64_t v18 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v17);
      uint64_t v19 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v18 + 40);
      swift_retain();
      v19(v31, v17, v18);
      swift_getAtKeyPath();
      outlined consume of CommonCallStatePredicate(a2, a3, 2);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
      char v11 = v30;
      return v11 & 1;
    case 3:
      uint64_t v20 = *(void *)(a2 + 16);
      uint64_t v21 = *(void *)(a2 + 24);
      char v22 = *(unsigned __int8 *)(a2 + 32);
      outlined copy of CommonCallStatePredicate(v20, v21, v22);
      char v23 = CommonCallStatePredicate.test(_:)(a1, v20, v21, v22);
      outlined consume of CommonCallStatePredicate(v20, v21, v22);
      char v11 = v23 ^ 1;
      return v11 & 1;
    case 4:
      uint64_t v24 = *(void *)(a2 + 16);
      uint64_t v25 = *(void *)(v24 + 16);
      if (!v25) {
        goto LABEL_12;
      }
      swift_bridgeObjectRetain();
      uint64_t v26 = (unsigned __int8 *)(v24 + 48);
      while ((CommonCallStatePredicate.test(_:)(a1, *((void *)v26 - 2), *((void *)v26 - 1), *v26) & 1) != 0)
      {
        v26 += 24;
        if (!--v25) {
          goto LABEL_11;
        }
      }
      goto LABEL_17;
    case 5:
      uint64_t v27 = *(void *)(a2 + 16);
      uint64_t v28 = *(void *)(v27 + 16);
      if (!v28) {
        goto LABEL_19;
      }
      swift_bridgeObjectRetain();
      char v29 = (unsigned __int8 *)(v27 + 48);
      break;
    default:
      uint64_t v7 = a1[3];
      uint64_t v8 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v7);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v8 + 16))(v31, v7, v8);
      uint64_t v9 = v32;
      uint64_t v10 = v33;
      __swift_project_boxed_opaque_existential_1(v31, v32);
      char v11 = (a2 & ~(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10)) == 0;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
      return v11 & 1;
  }
  do
  {
    if (CommonCallStatePredicate.test(_:)(a1, *((void *)v29 - 2), *((void *)v29 - 1), *v29))
    {
LABEL_11:
      swift_bridgeObjectRelease();
LABEL_12:
      char v11 = 1;
      return v11 & 1;
    }
    v29 += 24;
    --v28;
  }
  while (v28);
LABEL_17:
  swift_bridgeObjectRelease();
LABEL_19:
  char v11 = 0;
  return v11 & 1;
}

unint64_t partial apply for implicit closure #3 in CallStateGuardCheck.init(_:onFail:)()
{
  return CommonCallStatePredicate.debugDescription.getter(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
}

unint64_t CommonCallStatePredicate.debugDescription.getter(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t result = 0xD000000000000016;
  switch(a3)
  {
    case 1:
      return result;
    case 2:
      uint64_t v23 = 0;
      swift_retain();
      _StringGuts.grow(_:)(21);
      v8._object = (void *)0x8000000000495B90;
      v8._uint64_t countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v8);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyPath<SPHCallCapabilities, Bool>);
      _print_unlocked<A, B>(_:_:)();
      v9._uint64_t countAndFlagsBits = 41;
      v9._object = (void *)0xE100000000000000;
      String.append(_:)(v9);
      outlined consume of CommonCallStatePredicate(a1, a2, 2);
      return v23;
    case 3:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v11 = *(void *)(a1 + 24);
      char v12 = *(unsigned char *)(a1 + 32);
      outlined copy of CommonCallStatePredicate(v10, v11, v12);
      v13._uint64_t countAndFlagsBits = 0x28746F6E2ELL;
      v13._object = (void *)0xE500000000000000;
      String.append(_:)(v13);
      _print_unlocked<A, B>(_:_:)();
      v14._uint64_t countAndFlagsBits = 41;
      v14._object = (void *)0xE100000000000000;
      String.append(_:)(v14);
      outlined consume of CommonCallStatePredicate(v10, v11, v12);
      return 0;
    case 4:
      uint64_t v23 = 0x28646E612ELL;
      if (*(void *)(*(void *)(a1 + 16) + 16))
      {
        OUTLINED_FUNCTION_5_43();
        do
        {
          OUTLINED_FUNCTION_2_64();
          OUTLINED_FUNCTION_3_56();
          if (v15) {
            OUTLINED_FUNCTION_7_47();
          }
          OUTLINED_FUNCTION_8_52();
        }
        while (!v16);
      }
      goto LABEL_19;
    case 5:
      uint64_t v23 = 678588206;
      if (*(void *)(*(void *)(a1 + 16) + 16))
      {
        OUTLINED_FUNCTION_5_43();
        do
        {
          OUTLINED_FUNCTION_2_64();
          OUTLINED_FUNCTION_3_56();
          if (v15) {
            OUTLINED_FUNCTION_7_47();
          }
          OUTLINED_FUNCTION_8_52();
        }
        while (!v16);
      }
LABEL_19:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      uint64_t v17 = BidirectionalCollection<>.joined(separator:)();
      uint64_t v19 = v18;
      swift_bridgeObjectRelease();
      v20._uint64_t countAndFlagsBits = v17;
      v20._object = v19;
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      v21._uint64_t countAndFlagsBits = 41;
      v21._object = (void *)0xE100000000000000;
      String.append(_:)(v21);
      break;
    default:
      uint64_t v23 = 0x6174536C6C61632ELL;
      id v6 = (id)AFCallStateGetNames();
      if (v6)
      {
        uint64_t v7 = v6;
        static Array._unconditionallyBridgeFromObjectiveC(_:)();
      }
      v22._uint64_t countAndFlagsBits = Array.description.getter();
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      break;
  }
  return v23;
}

uint64_t implicit closure #4 in CallStateGuardCheck.init(_:onFail:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t partial apply for closure #1 in CallStateGuardCheck.init(_:description:onFail:)()
{
  return closure #1 in CallStateGuardCheck.init(_:description:onFail:)(*(uint64_t (**)(void))(v0 + 16), *(void *)(v0 + 24), *(uint64_t (**)(uint64_t))(v0 + 32));
}

uint64_t type metadata accessor for CallStateGuardFlow()
{
  return self;
}

uint64_t sub_1AAEA0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t outlined copy of CommonCallStatePredicate(uint64_t a1, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      uint64_t result = swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CallStateGuardFlow and conformance CallStateGuardFlow()
{
  unint64_t result = lazy protocol witness table cache variable for type CallStateGuardFlow and conformance CallStateGuardFlow;
  if (!lazy protocol witness table cache variable for type CallStateGuardFlow and conformance CallStateGuardFlow)
  {
    type metadata accessor for CallStateGuardFlow();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallStateGuardFlow and conformance CallStateGuardFlow);
  }
  return result;
}

uint64_t (*CallStateGuardCheck.init(_:description:onFail:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7))()
{
  uint64_t v14 = OUTLINED_FUNCTION_1_60();
  *(void *)(v14 + 16) = a1;
  *(void *)(v14 + 24) = a2;
  *(unsigned char *)(v14 + 32) = a3;
  uint64_t v15 = OUTLINED_FUNCTION_18_1();
  *(void *)(v15 + 16) = a4;
  *(void *)(v15 + 24) = a5;
  uint64_t v16 = OUTLINED_FUNCTION_18_1();
  *(void *)(v16 + 16) = a6;
  *(void *)(v16 + 24) = a7;
  uint64_t v17 = (void *)OUTLINED_FUNCTION_65();
  v17[2] = partial apply for implicit closure #3 in CallStateGuardCheck.init(_:description:onFail:);
  v17[3] = v15;
  void v17[4] = partial apply for implicit closure #4 in CallStateGuardCheck.init(_:description:onFail:);
  void v17[5] = v16;
  return partial apply for implicit closure #2 in implicit closure #1 in CallStateGuardCheck.init(_:onFail:);
}

uint64_t specialized implicit closure #3 in CallStateGuardCheck.init(_:description:onFail:)()
{
  return 0x5465636146207349;
}

unint64_t specialized implicit closure #3 in CallStateGuardCheck.init(_:description:onFail:)()
{
  return 0xD000000000000014;
}

{
  return 0xD000000000000010;
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CommonCallStatePredicate()
{
  return CommonCallStatePredicate.debugDescription.getter(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

uint64_t objectdestroyTm_11()
{
  outlined consume of CommonCallStatePredicate(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));

  return _swift_deallocObject(v0, 33, 7);
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in CallStateGuardCheck.init(_:onFail:)(void *a1)
{
  return CommonCallStatePredicate.test(_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32));
}

uint64_t partial apply for implicit closure #3 in CallStateGuardCheck.init(_:description:onFail:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t partial apply for implicit closure #4 in CallStateGuardCheck.init(_:description:onFail:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t objectdestroy_11Tm()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1AB1C4@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 104))();
  *a2 = result & 1;
  return result;
}

ValueMetadata *type metadata accessor for CallStateGuardCheck()
{
  return &type metadata for CallStateGuardCheck;
}

uint64_t destroy for CommonCallStatePredicate(uint64_t a1)
{
  return outlined consume of CommonCallStatePredicate(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for CommonCallStatePredicate(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of CommonCallStatePredicate(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for CommonCallStatePredicate(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of CommonCallStatePredicate(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of CommonCallStatePredicate(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for CommonCallStatePredicate(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of CommonCallStatePredicate(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for CommonCallStatePredicate(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFB && *(unsigned char *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 250;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 5) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CommonCallStatePredicate(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 251;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for CommonCallStatePredicate(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for CommonCallStatePredicate(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CommonCallStatePredicate()
{
  return &type metadata for CommonCallStatePredicate;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@out AnyFlow)()
{
  (*(void (**)(uint64_t *__return_ptr))(v0 + 16))(&v2);
  return v2;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@owned AnyFlow)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CallStateProviding) -> (@out Bool)()
{
  (*(void (**)(uint64_t *__return_ptr))(v0 + 16))(&v2);
  return v2;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CallStateProviding) -> (@unowned Bool)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result & 1;
  return result;
}

uint64_t OUTLINED_FUNCTION_1_60()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_2_64()
{
  uint64_t v1 = *((void *)v0 - 2);
  uint64_t v2 = *((void *)v0 - 1);
  uint64_t v3 = *v0;
  outlined copy of CommonCallStatePredicate(v1, v2, *v0);
  return CommonCallStatePredicate.debugDescription.getter(v1, v2, v3);
}

uint64_t OUTLINED_FUNCTION_3_56()
{
  return outlined consume of CommonCallStatePredicate(v0, v1, v2);
}

uint64_t UsoEntity_common_Person.usoPerson.getter()
{
  return swift_retain();
}

void OUTLINED_FUNCTION_7_47()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_8_52()
{
  *(void *)(v0 + 16) = v3;
  uint64_t v5 = v0 + 16 * v4;
  *(void *)(v5 + 32) = v1;
  *(void *)(v5 + 40) = v2;
}

uint64_t StartCallAceViewProvider.__allocating_init(templatingService:isDirectInvocation:sharedGlobals:)(uint64_t a1, char a2, uint64_t a3)
{
  return StartCallAceViewProvider.init(templatingService:isDirectInvocation:sharedGlobals:)(a1, a2, a3);
}

uint64_t StartCallAceViewProvider.init(templatingService:isDirectInvocation:sharedGlobals:)(uint64_t a1, char a2, uint64_t a3)
{
  *(void *)(v3 + direct field offset for StartCallAceViewProvider.templatingService) = a1;
  outlined init with copy of SignalProviding(a3, v3 + direct field offset for StartCallAceViewProvider.sharedGlobals);
  *(unsigned char *)(v3 + direct field offset for StartCallAceViewProvider.isDirectInvocation) = a2;
  uint64_t v6 = DefaultAceViewProvider.init()();
  __swift_destroy_boxed_opaque_existential_1(a3);
  return v6;
}

uint64_t StartCallAceViewProvider.makeAceViewsForResolveNeedsConfirmation(app:parameterName:intent:intentResolutionResult:_:)(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void (*a6)(void, void), uint64_t a7)
{
  void (*v30)(void *__return_ptr, uint64_t, uint64_t);
  id v31;
  id v32;
  uint64_t (*v34)(uint64_t, uint64_t, void *, void *, void *, void (*)(void, void), uint64_t);
  char v35;
  void *v36;
  void (*v37)(void, void);
  void v38[2];
  void v39[7];
  char v40;
  uint64_t v41;
  uint64_t vars8;

  uint64_t v9 = v7;
  swift_bridgeObjectRetain();
  v17._uint64_t countAndFlagsBits = a2;
  v17._object = a3;
  if (PhoneCallSlotNames.init(rawValue:)(v17).value == PhoneCallFlowDelegatePlugin_PhoneCallSlotNames_contacts)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    uint64_t v19 = OUTLINED_FUNCTION_25_0(v18, (uint64_t)static Logger.siriPhone);
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      Swift::String v21 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_5_44(v21);
      OUTLINED_FUNCTION_2_65(&dword_0, v19, v22, "#StartCallAceViewProvider Building call/cancel confirmation buttons");
      OUTLINED_FUNCTION_6();
    }
    uint64_t v36 = a5;
    uint64_t v37 = a6;

    uint64_t v23 = *(void *)(v9 + direct field offset for StartCallAceViewProvider.templatingService);
    uint64_t v24 = (void *)(v9 + direct field offset for StartCallAceViewProvider.sharedGlobals);
    uint64_t v35 = *(unsigned char *)(v9 + direct field offset for StartCallAceViewProvider.isDirectInvocation);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_5_44(v27);
      _os_log_impl(&dword_0, v25, v26, "#StartCallViewBuilders Providing CallCancelSlotConfirmationButtonsBuilder", v8, 2u);
      OUTLINED_FUNCTION_6();
    }

    uint64_t v29 = v24[3];
    uint64_t v28 = v24[4];
    __swift_project_boxed_opaque_existential_1(v24, v29);
    uint64_t v30 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v28 + 8);
    uint64_t v31 = a4;
    swift_retain();
    v30(v39, v29, v28);
    outlined init with copy of SignalProviding((uint64_t)v24, (uint64_t)&v41);
    v38[0] = v31;
    v38[1] = v23;
    v39[5] = a1;
    v39[6] = v36;
    uint64_t v40 = v35;
    swift_retain();
    id v32 = v36;
    specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:_:)((uint64_t)_swiftEmptyArrayStorage, v37, a7);
    return outlined destroy of CallCancelSlotConfirmationButtonsBuilder((uint64_t)v38);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DefaultAceViewProvider<INStartCallIntent, INStartCallIntentResponse>);
    id v34 = (uint64_t (*)(uint64_t, uint64_t, void *, void *, void *, void (*)(void, void), uint64_t))method lookup function for DefaultAceViewProvider();
    return v34(a1, a2, a3, a4, a5, a6, a7);
  }
}

uint64_t outlined destroy of CallCancelSlotConfirmationButtonsBuilder(uint64_t a1)
{
  return a1;
}

void StartCallAceViewProvider.makeAceViewsForResolveNeedsDisambiguation(app:parameterName:intent:utteranceViews:disambiguationList:deviceIsLocked:_:)(uint64_t a1, uint64_t a2, void *a3, void *a4, unint64_t a5, void *a6, char a7, void (*a8)(void, void), uint64_t a9)
{
  uint64_t v10 = v9;
  uint64_t v19 = type metadata accessor for CATOption();
  __chkstk_darwin(v19 - 8);
  swift_bridgeObjectRetain();
  v20._uint64_t countAndFlagsBits = a2;
  v20._object = a3;
  if (PhoneCallSlotNames.init(rawValue:)(v20).value == PhoneCallFlowDelegatePlugin_PhoneCallSlotNames_contacts)
  {
    char v50 = a7;
    uint64_t v51 = a8;
    uint64_t v21 = SiriKitDisambiguationList.rawItems.getter();
    uint64_t v22 = specialized _arrayConditionalCast<A, B>(_:)(v21);
    swift_bridgeObjectRelease();
    if (v22)
    {
      if (specialized Sequence.contains(where:)((unint64_t)v22, (char *)&dword_0 + 2))
      {
        char v23 = specialized Sequence.contains(where:)((unint64_t)v22, (char *)&dword_0 + 1);
        swift_bridgeObjectRelease();
        if (v23)
        {
          uint64_t v24 = *(void *)(v10 + direct field offset for StartCallAceViewProvider.templatingService);
          uint64_t v25 = v10 + direct field offset for StartCallAceViewProvider.sharedGlobals;
          char v26 = *(unsigned char *)(v10 + direct field offset for StartCallAceViewProvider.isDirectInvocation);
          if (one-time initialization token for siriPhone != -1) {
            swift_once();
          }
          uint64_t v27 = type metadata accessor for Logger();
          uint64_t v28 = OUTLINED_FUNCTION_25_0(v27, (uint64_t)static Logger.siriPhone);
          os_log_type_t v29 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v28, v29))
          {
            uint64_t v30 = (uint8_t *)OUTLINED_FUNCTION_7_2();
            *(_WORD *)uint64_t v30 = 0;
            _os_log_impl(&dword_0, v28, v29, "#StartCallViewBuilders Providing ForeignEmergencyButtonsBuilder", v30, 2u);
            OUTLINED_FUNCTION_6();
          }

          outlined init with copy of SignalProviding(v25, (uint64_t)v54);
          uint64_t v52 = v24;
          uint64_t v53 = a6;
          v56[8] = v26;
          swift_retain();
          swift_retain();
          specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:_:)(a5);
          outlined destroy of ForeignEmergencyButtonsBuilder((uint64_t)&v52);
LABEL_31:
          OUTLINED_FUNCTION_26_1();
          return;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      uint64_t v49 = v10 + direct field offset for StartCallAceViewProvider.sharedGlobals;
      type metadata accessor for PhoneCallDisplayTextCATs();
      static CATOption.defaultMode.getter();
      uint64_t v43 = CATWrapper.__allocating_init(options:globals:)();
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v44 = type metadata accessor for Logger();
      char v45 = OUTLINED_FUNCTION_25_0(v44, (uint64_t)static Logger.siriPhone);
      os_log_type_t v46 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = (uint8_t *)OUTLINED_FUNCTION_7_2();
        *(_WORD *)uint64_t v47 = 0;
        _os_log_impl(&dword_0, v45, v46, "#StartCallViewBuilders Providing DefaultDisambiguationBuilder", v47, 2u);
        OUTLINED_FUNCTION_6();
      }

      outlined init with copy of SignalProviding(v49, (uint64_t)v56);
      uint64_t v52 = a1;
      uint64_t v53 = a4;
      v54[0] = a2;
      v54[1] = a3;
      v54[2] = a6;
      char v55 = v50 & 1;
      uint64_t v57 = v43;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      id v48 = a4;
      specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:_:)(a5, v51, a9);
      outlined destroy of DefaultDisambiguationBuilder<INStartCallIntent>((uint64_t)&v52);
      goto LABEL_31;
    }
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    uint64_t v39 = OUTLINED_FUNCTION_25_0(v38, (uint64_t)static Logger.siriPhone);
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
      OUTLINED_FUNCTION_1_3(&dword_0, v41, v42, "#StartCallAceViewProvider DisambiguationItem for contacts slot was not an INPerson");
      OUTLINED_FUNCTION_6();
    }

    if (a5 >> 62) {
      goto LABEL_24;
    }
  }
  else
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    id v32 = OUTLINED_FUNCTION_25_0(v31, (uint64_t)static Logger.siriPhone);
    os_log_type_t v33 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v32, v33))
    {
      *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
      OUTLINED_FUNCTION_1_3(&dword_0, v34, v35, "#StartCallAceViewProvider Not building disambiguation snippet - not disambiguating contacts");
      OUTLINED_FUNCTION_6();
    }

    if (a5 >> 62)
    {
LABEL_24:
      type metadata accessor for SAAceView();
      swift_bridgeObjectRetain();
      uint64_t v36 = _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
  }
  swift_bridgeObjectRetain();
  dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
  type metadata accessor for SAAceView();
  uint64_t v36 = a5;
LABEL_16:
  a8(v36, 0);
  OUTLINED_FUNCTION_26_1();
  swift_bridgeObjectRelease();
}

uint64_t StartCallAceViewProvider.makeAceViewsForConfirmIntentWithUser(app:intent:intentResponse:_:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = v5 + direct field offset for StartCallAceViewProvider.sharedGlobals;
  uint64_t v13 = *(void *)(v5 + direct field offset for StartCallAceViewProvider.sharedGlobals + 24);
  uint64_t v14 = *(void *)(v5 + direct field offset for StartCallAceViewProvider.sharedGlobals + 32);
  __swift_project_boxed_opaque_existential_1((void *)(v5 + direct field offset for StartCallAceViewProvider.sharedGlobals), v13);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v14 + 8))(v28, v13, v14);
  char v15 = static EmergencyUtils.requiresEmergencyConfirmation(intent:intentResponse:)(a2, a3);
  outlined init with copy of SignalProviding((uint64_t)v28, (uint64_t)v30);
  if ((v15 & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    goto LABEL_9;
  }
  char v16 = static EmergencyUtils.shouldOpenMicForEmergency(intent:deviceState:)(a2, (uint64_t)v30);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  if (v16)
  {
LABEL_9:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DefaultAceViewProvider<INStartCallIntent, INStartCallIntentResponse>);
    uint64_t v27 = (uint64_t (*)(uint64_t, void *, void *, uint64_t, uint64_t))method lookup function for DefaultAceViewProvider();
    return v27(a1, a2, a3, a4, a5);
  }
  uint64_t v17 = *(void *)(v6 + direct field offset for StartCallAceViewProvider.templatingService);
  char v18 = *(unsigned char *)(v6 + direct field offset for StartCallAceViewProvider.isDirectInvocation);
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  Swift::String v20 = OUTLINED_FUNCTION_25_0(v19, (uint64_t)static Logger.siriPhone);
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (_WORD *)OUTLINED_FUNCTION_7_2();
    OUTLINED_FUNCTION_5_44(v22);
    OUTLINED_FUNCTION_2_65(&dword_0, v20, v23, "#StartCallViewBuilders Providing EmergencyCountdownBuilder");
    OUTLINED_FUNCTION_6();
  }

  outlined init with copy of SignalProviding(v12, (uint64_t)v29);
  v28[0] = v17;
  v28[1] = a1;
  void v28[2] = a2;
  uint64_t v28[3] = a3;
  v29[40] = v18;
  swift_retain();
  swift_retain();
  id v24 = a2;
  id v25 = a3;
  specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:_:)((uint64_t)_swiftEmptyArrayStorage, a4, a5);
  return outlined destroy of EmergencyCountdownBuilder((uint64_t)v28);
}

void StartCallAceViewProvider.makeAceViewsForLaunchAppWithButton(app:intent:intentResolutionResult:intentResponse:utteranceViews:_:)(uint64_t a1, void *a2, void *a3, void *a4, unint64_t a5, void (*a6)(uint64_t, void), uint64_t a7)
{
  uint64_t v15 = type metadata accessor for CATOption();
  __chkstk_darwin(v15 - 8);
  if (!a3
    || [a3 resolutionResultCode] != (char *)&dword_0 + 1
    || (self, (uint64_t v16 = swift_dynamicCastObjCClass()) == 0))
  {
    uint64_t v26 = *(void *)(v7 + direct field offset for StartCallAceViewProvider.templatingService);
    void v37[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhoneCallBaseCatTemplatingService<INStartCallIntent, INStartCallIntentResponse>);
    v37[4] = &protocol witness table for PhoneCallBaseCatTemplatingService<A, B>;
    v37[0] = v26;
    uint64_t v27 = (void *)(v7 + direct field offset for StartCallAceViewProvider.sharedGlobals);
    swift_retain();
    static StartCallViewBuilders.makeErrorButtonBuilder(templatingService:app:intent:intentResponse:sharedGlobals:)(a1, a2, a4, v27, &v32);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
    uint64_t v28 = v34;
    uint64_t v29 = v35;
    __swift_project_boxed_opaque_existential_1(&v32, v34);
    (*(void (**)(unint64_t, void (*)(uint64_t, void), uint64_t, uint64_t, uint64_t))(v29 + 8))(a5, a6, a7, v28, v29);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
LABEL_12:
    OUTLINED_FUNCTION_26_1();
    return;
  }
  uint64_t v17 = (void *)v16;
  id v18 = a3;
  if ([a2 preferredCallProvider] == (char *)&dword_0 + 2
    && (char *)[v17 unsupportedReason] - 5 <= (unsigned char *)&dword_0 + 1)
  {
    uint64_t v19 = *(void *)(v7 + direct field offset for StartCallAceViewProvider.templatingService);
    uint64_t v20 = v7 + direct field offset for StartCallAceViewProvider.sharedGlobals;
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    uint64_t v22 = OUTLINED_FUNCTION_25_0(v21, (uint64_t)static Logger.siriPhone);
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      id v24 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_5_44(v24);
      OUTLINED_FUNCTION_2_65(&dword_0, v22, v25, "#StartCallViewBuilders Providing FaceTimeSettingsBuilder");
      OUTLINED_FUNCTION_6();
    }

    outlined init with copy of SignalProviding(v20, (uint64_t)&v33);
    uint64_t v32 = v19;
    type metadata accessor for PhoneCallDisplayTextCATs();
    swift_retain();
    static CATOption.defaultMode.getter();
    uint64_t v36 = CATWrapper.__allocating_init(options:globals:)();
    specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:_:)(a5, a6, a7);

    outlined destroy of FaceTimeSettingsBuilder((uint64_t)&v32);
    goto LABEL_12;
  }
  if (a5 >> 62)
  {
    type metadata accessor for SAAceView();
    swift_bridgeObjectRetain();
    uint64_t v30 = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for SAAceView();
    uint64_t v30 = a5;
  }
  a6(v30, 0);

  OUTLINED_FUNCTION_26_1();
  swift_bridgeObjectRelease();
}

void StartCallAceViewProvider.init()()
{
}

uint64_t StartCallAceViewProvider.__ivar_destroyer()
{
  swift_release();
  uint64_t v1 = v0 + direct field offset for StartCallAceViewProvider.sharedGlobals;

  return __swift_destroy_boxed_opaque_existential_1(v1);
}

uint64_t StartCallAceViewProvider.deinit()
{
  uint64_t v0 = DefaultAceViewProvider.deinit();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + direct field offset for StartCallAceViewProvider.sharedGlobals);
  return v0;
}

uint64_t StartCallAceViewProvider.__deallocating_deinit()
{
  StartCallAceViewProvider.deinit();

  return swift_deallocClassInstance();
}

uint64_t outlined destroy of DefaultDisambiguationBuilder<INStartCallIntent>(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DefaultDisambiguationBuilder<INStartCallIntent>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of ForeignEmergencyButtonsBuilder(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of EmergencyCountdownBuilder(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of FaceTimeSettingsBuilder(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for StartCallAceViewProvider()
{
  uint64_t result = type metadata singleton initialization cache for StartCallAceViewProvider;
  if (!type metadata singleton initialization cache for StartCallAceViewProvider) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for StartCallAceViewProvider()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for StartCallAceViewProvider()
{
  return type metadata accessor for StartCallAceViewProvider();
}

void OUTLINED_FUNCTION_2_65(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, a2, v4, a4, v5, 2u);
}

uint64_t PhoneIncomingCall.__allocating_init(intentResponse:siriLocale:options:appInfoBuilder:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t ObjectType = swift_getObjectType();

  return specialized PhoneIncomingCall.__allocating_init(intentResponse:siriLocale:options:appInfoBuilder:)(a1, a3, a4, a5, v5, ObjectType, a2);
}

uint64_t specialized PhoneIncomingCall.__allocating_init(intentResponse:siriLocale:options:appInfoBuilder:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v47 = a5;
  uint64_t v48 = a2;
  uint64_t v12 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_1();
  uint64_t v14 = v13;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = a6;
  uint64_t v46 = a7;
  id v18 = (__CFString *)IncomingCallIntentResponse.latestCallRecord.getter();
  if (v18)
  {
    uint64_t v42 = v18;
    uint64_t v44 = v14;
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v43 = a1;
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.siriPhone);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      v50[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315138;
      uint64_t v23 = PhoneCallRecord.Options.description.getter(a3);
      uint64_t v41 = v12;
      uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v12 = v41;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v20, v21, "#PhoneIncomingCall PhoneCallRecord w/ options: %s", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v25 = type metadata accessor for PhoneCallRecord(0);
    outlined init with copy of SignalProviding(a4, (uint64_t)v50);
    uint64_t v14 = v44;
    (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v17, v48, v12);
    unint64_t v26 = v51;
    uint64_t v27 = v52;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v50, v51);
    OUTLINED_FUNCTION_1();
    __chkstk_darwin(v28);
    uint64_t v30 = (char *)&v41 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v31 + 16))(v30);
    uint64_t v32 = specialized PhoneCallRecord.__allocating_init(callRecord:options:appInfoBuilder:locale:)(v42, a3, (uint64_t)v30, (uint64_t)v17, v25, v26, v27);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
    a1 = v43;
  }
  else
  {
    uint64_t v32 = 0;
  }
  type metadata accessor for PhoneIncomingCall.Builder();
  swift_allocObject();
  uint64_t v33 = PhoneIncomingCall.Builder.init()();
  char v34 = IncomingCallIntentResponse.isIncomingCall.getter(v45, v46);
  uint64_t v35 = (*(uint64_t (**)(void))(*(void *)v33 + 184))(v34 & 1);
  swift_release();
  BOOL v36 = IncomingCallIntentResponse.unknownCaller.getter();
  uint64_t v37 = (*(uint64_t (**)(BOOL))(*(void *)v35 + 192))(v36);
  swift_release();
  uint64_t v38 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 200))(v32);
  swift_release();
  uint64_t v39 = (*(uint64_t (**)(uint64_t))(v47 + 152))(v38);

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a4);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v48, v12);
  return v39;
}

PhoneCallFlowDelegatePlugin::OngoingCallCATs::Properties_optional __swiftcall OngoingCallCATs.Properties.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of OngoingCallCATs.Properties.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return (PhoneCallFlowDelegatePlugin::OngoingCallCATs::Properties_optional)5;
  }
  else {
    return (PhoneCallFlowDelegatePlugin::OngoingCallCATs::Properties_optional)v3;
  }
}

unint64_t OngoingCallCATs.Properties.rawValue.getter(char a1)
{
  unint64_t result = 0xD00000000000001BLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD00000000000002CLL;
      break;
    case 2:
      unint64_t result = 0xD00000000000002ALL;
      break;
    case 3:
      unint64_t result = 0xD000000000000024;
      break;
    case 4:
      unint64_t result = 0xD000000000000019;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance OngoingCallCATs.Properties(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance OngoingCallCATs.Properties()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance OngoingCallCATs.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance OngoingCallCATs.Properties(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

PhoneCallFlowDelegatePlugin::OngoingCallCATs::Properties_optional protocol witness for RawRepresentable.init(rawValue:) in conformance OngoingCallCATs.Properties@<W0>(Swift::String *a1@<X0>, PhoneCallFlowDelegatePlugin::OngoingCallCATs::Properties_optional *a2@<X8>)
{
  result.value = OngoingCallCATs.Properties.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance OngoingCallCATs.Properties@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = OngoingCallCATs.Properties.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t OngoingCallCATs.addOrCallPrompt(completion:)()
{
  return OUTLINED_FUNCTION_6_10();
}

uint64_t OngoingCallCATs.addOrCallPrompt()()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v1 = v0;
  uint64_t v2 = OUTLINED_FUNCTION_3_0();
  unint64_t v3 = (void *)OUTLINED_FUNCTION_14(v2);
  *unint64_t v3 = v4;
  v3[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return v6(v1, 0xD00000000000001BLL, 0x800000000048DBC0, _swiftEmptyArrayStorage);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v4)(unint64_t, unint64_t, void *);
  uint64_t v5;

  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *uint64_t v1 = v2;
  v1[1] = UnsupportedFlowCATs.startCallEmergencyInRetailStore();
  return v4(0xD00000000000001BLL, 0x800000000048DBC0, _swiftEmptyArrayStorage);
}

{
  return OUTLINED_FUNCTION_7_12();
}

uint64_t OngoingCallCATs.confirmHangUpForForeignEmergency(currentCall:completion:)(unint64_t a1)
{
  return OUTLINED_FUNCTION_14_26(a1);
}

{
  __n128 *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t vars8;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_31_0();
  OUTLINED_FUNCTION_1_61(v2, (__n128)xmmword_467710);
  if (a1)
  {
    unint64_t v3 = type metadata accessor for PhoneCallRecord(0);
    uint64_t v4 = a1;
  }
  else
  {
    unint64_t v3 = OUTLINED_FUNCTION_34();
    v2[3].n128_u64[1] = 0;
    v2[4].n128_u64[0] = 0;
  }
  v2[3].n128_u64[0] = v4;
  v2[4].n128_u64[1] = v3;
  swift_retain();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();

  return swift_bridgeObjectRelease();
}

uint64_t OngoingCallCATs.confirmHangUpForForeignEmergency(currentCall:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  void v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_21_1((uint64_t)OngoingCallCATs.confirmHangUpForForeignEmergency(currentCall:));
}

uint64_t OngoingCallCATs.confirmHangUpForForeignEmergency(currentCall:)()
{
  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_31_0();
  v0[5] = v2;
  uint64_t v3 = OUTLINED_FUNCTION_2_66(v2, (__n128)xmmword_467710);
  if (v1)
  {
    uint64_t v3 = type metadata accessor for PhoneCallRecord(v3);
  }
  else
  {
    v2[3].n128_u64[1] = 0;
    v2[4].n128_u64[0] = 0;
  }
  OUTLINED_FUNCTION_27_16(v3);
  OUTLINED_FUNCTION_8_1();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *uint64_t v4 = v0;
  v4[1] = OngoingCallCATs.confirmHangUpForForeignEmergency(currentCall:);
  OUTLINED_FUNCTION_23_13();
  return v6();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_47_0();
    return v10();
  }
}

{
  void *v0;
  uint64_t v1;
  __n128 *v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v6)(unint64_t);
  uint64_t v7;

  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_31_0();
  v0[4] = v2;
  uint64_t v3 = OUTLINED_FUNCTION_2_66(v2, (__n128)xmmword_467710);
  if (v1)
  {
    uint64_t v3 = type metadata accessor for PhoneCallRecord(v3);
  }
  else
  {
    v2[3].n128_u64[1] = 0;
    v2[4].n128_u64[0] = 0;
  }
  OUTLINED_FUNCTION_27_16(v3);
  OUTLINED_FUNCTION_8_1();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[5] = v4;
  *uint64_t v4 = v0;
  v4[1] = OngoingCallCATs.confirmHangUpForForeignEmergency(currentCall:);
  OUTLINED_FUNCTION_10_16();
  return v6(0xD00000000000002CLL);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  *(void *)(v3 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = OUTLINED_FUNCTION_18_2();
    return v11(v10);
  }
}

uint64_t OngoingCallCATs.confirmHangUpForForeignEmergency(currentCall:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_21_1((uint64_t)OngoingCallCATs.confirmHangUpForForeignEmergency(currentCall:));
}

uint64_t OngoingCallCATs.confirmHangUpForForeignEmergency(currentCall:)(unint64_t a1)
{
  return OUTLINED_FUNCTION_15_24(a1);
}

{
  __n128 *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t vars8;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_31_0();
  OUTLINED_FUNCTION_1_61(v2, (__n128)xmmword_467710);
  if (a1)
  {
    uint64_t v3 = type metadata accessor for PhoneCallRecord(0);
    uint64_t v4 = a1;
  }
  else
  {
    uint64_t v3 = OUTLINED_FUNCTION_22_23();
  }
  v2[3].n128_u64[0] = v4;
  v2[4].n128_u64[1] = v3;
  swift_retain();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();

  return swift_bridgeObjectRelease();
}

uint64_t OngoingCallCATs.confirmHangUpForLocalEmergency(completion:)()
{
  return OUTLINED_FUNCTION_6_10();
}

uint64_t OngoingCallCATs.confirmHangUpForLocalEmergency()()
{
  OUTLINED_FUNCTION_16_1();
  uint64_t v1 = v0;
  uint64_t v2 = OUTLINED_FUNCTION_3_0();
  uint64_t v3 = (void *)OUTLINED_FUNCTION_14(v2);
  *uint64_t v3 = v4;
  v3[1] = UnsupportedFlowCATs.deleteVoicemail();
  return v6(v1, 0xD00000000000002ALL, 0x800000000048DC10, _swiftEmptyArrayStorage);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v4)(unint64_t, unint64_t, void *);
  uint64_t v5;

  OUTLINED_FUNCTION_1_0();
  uint64_t v0 = OUTLINED_FUNCTION_9_0();
  uint64_t v1 = (void *)OUTLINED_FUNCTION_14(v0);
  *uint64_t v1 = v2;
  v1[1] = UnsupportedFlowCATs.deleteVoicemail();
  return v4(0xD00000000000002ALL, 0x800000000048DC10, _swiftEmptyArrayStorage);
}

{
  return OUTLINED_FUNCTION_7_12();
}

uint64_t OngoingCallCATs.informHangUpForEmergency(currentCall:completion:)(unint64_t a1)
{
  return OUTLINED_FUNCTION_14_26(a1);
}

uint64_t OngoingCallCATs.informHangUpForEmergency(currentCall:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  void v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_21_1((uint64_t)OngoingCallCATs.informHangUpForEmergency(currentCall:));
}

uint64_t OngoingCallCATs.informHangUpForEmergency(currentCall:)()
{
  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_31_0();
  v0[5] = v2;
  uint64_t v3 = OUTLINED_FUNCTION_2_66(v2, (__n128)xmmword_467710);
  if (v1)
  {
    uint64_t v3 = type metadata accessor for PhoneCallRecord(v3);
  }
  else
  {
    v2[3].n128_u64[1] = 0;
    v2[4].n128_u64[0] = 0;
  }
  OUTLINED_FUNCTION_27_16(v3);
  OUTLINED_FUNCTION_8_1();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *uint64_t v4 = v0;
  v4[1] = UnsupportedFlowCATs.unsupportedOnDeviceType(device:);
  OUTLINED_FUNCTION_23_13();
  return v6();
}

{
  void *v0;
  uint64_t v1;
  __n128 *v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v6)(unint64_t);
  uint64_t v7;

  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_31_0();
  v0[4] = v2;
  uint64_t v3 = OUTLINED_FUNCTION_2_66(v2, (__n128)xmmword_467710);
  if (v1)
  {
    uint64_t v3 = type metadata accessor for PhoneCallRecord(v3);
  }
  else
  {
    v2[3].n128_u64[1] = 0;
    v2[4].n128_u64[0] = 0;
  }
  OUTLINED_FUNCTION_27_16(v3);
  OUTLINED_FUNCTION_8_1();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[5] = v4;
  *uint64_t v4 = v0;
  v4[1] = OngoingCallCATs.informHangUpForEmergency(currentCall:);
  OUTLINED_FUNCTION_10_16();
  return v6(0xD000000000000024);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  *(void *)(v3 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = OUTLINED_FUNCTION_18_2();
    return v11(v10);
  }
}

uint64_t OngoingCallCATs.informHangUpForEmergency(currentCall:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_21_1((uint64_t)OngoingCallCATs.informHangUpForEmergency(currentCall:));
}

uint64_t OngoingCallCATs.informHangUpForEmergency(currentCall:)(unint64_t a1)
{
  return OUTLINED_FUNCTION_15_24(a1);
}

uint64_t OngoingCallCATs.newCallPrompt(currentCall:targetCall:completion:)(unint64_t a1, unint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = (__n128 *)OUTLINED_FUNCTION_36_2();
  OUTLINED_FUNCTION_1_61(v4, (__n128)xmmword_467720);
  if (a1)
  {
    type metadata accessor for PhoneCallRecord(0);
    unint64_t v5 = a1;
  }
  else
  {
    OUTLINED_FUNCTION_34();
    v4[3].n128_u64[1] = 0;
    v4[4].n128_u64[0] = 0;
  }
  v4[3].n128_u64[0] = v5;
  OUTLINED_FUNCTION_29_18();
  v4[4].n128_u64[1] = v6;
  v4[5].n128_u64[0] = v7;
  v4[5].n128_u64[1] = 0xEA00000000006C6CLL;
  if (a2)
  {
    uint64_t v8 = type metadata accessor for PhoneCallRecord(0);
    unint64_t v9 = a2;
  }
  else
  {
    uint64_t v8 = OUTLINED_FUNCTION_34();
    v4[6].n128_u64[1] = 0;
    v4[7].n128_u64[0] = 0;
  }
  v4[6].n128_u64[0] = v9;
  v4[7].n128_u64[1] = v8;
  swift_retain();
  swift_retain();
  dispatch thunk of CATWrapper.execute(catId:parameters:completion:)();

  return swift_bridgeObjectRelease();
}

uint64_t OngoingCallCATs.newCallPrompt(currentCall:targetCall:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return OUTLINED_FUNCTION_21_1((uint64_t)OngoingCallCATs.newCallPrompt(currentCall:targetCall:));
}

uint64_t OngoingCallCATs.newCallPrompt(currentCall:targetCall:)()
{
  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_36_2();
  v0[6] = v2;
  OUTLINED_FUNCTION_1_61(v2, (__n128)xmmword_467720);
  if (v1)
  {
    uint64_t v3 = type metadata accessor for PhoneCallRecord(0);
    uint64_t v4 = v1;
  }
  else
  {
    uint64_t v3 = OUTLINED_FUNCTION_22_23();
  }
  unint64_t v5 = v0[4];
  uint64_t v6 = OUTLINED_FUNCTION_8_53(v3, v4);
  if (v5)
  {
    uint64_t v6 = type metadata accessor for PhoneCallRecord(v6);
  }
  else
  {
    v2[6].n128_u64[1] = 0;
    v2[7].n128_u64[0] = 0;
  }
  v2[6].n128_u64[0] = v5;
  v2[7].n128_u64[1] = v6;
  OUTLINED_FUNCTION_19_3();
  swift_retain();
  unint64_t v7 = (void *)swift_task_alloc();
  v0[7] = v7;
  *unint64_t v7 = v0;
  v7[1] = OngoingCallCATs.newCallPrompt(currentCall:targetCall:);
  OUTLINED_FUNCTION_23_13();
  return v9();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  unint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_47_0();
    return v10();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_1_0();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_47_0();
  return v0();
}

{
  void *v0;
  uint64_t v1;
  __n128 *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t (*v9)(unint64_t);
  uint64_t v10;

  OUTLINED_FUNCTION_18_3();
  uint64_t v1 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_36_2();
  v0[5] = v2;
  OUTLINED_FUNCTION_1_61(v2, (__n128)xmmword_467720);
  if (v1)
  {
    uint64_t v3 = type metadata accessor for PhoneCallRecord(0);
    uint64_t v4 = v1;
  }
  else
  {
    uint64_t v3 = OUTLINED_FUNCTION_22_23();
  }
  unint64_t v5 = v0[3];
  uint64_t v6 = OUTLINED_FUNCTION_8_53(v3, v4);
  if (v5)
  {
    uint64_t v6 = type metadata accessor for PhoneCallRecord(v6);
  }
  else
  {
    v2[6].n128_u64[1] = 0;
    v2[7].n128_u64[0] = 0;
  }
  v2[6].n128_u64[0] = v5;
  v2[7].n128_u64[1] = v6;
  OUTLINED_FUNCTION_19_3();
  swift_retain();
  unint64_t v7 = (void *)swift_task_alloc();
  v0[6] = v7;
  *unint64_t v7 = v0;
  v7[1] = OngoingCallCATs.newCallPrompt(currentCall:targetCall:);
  OUTLINED_FUNCTION_10_16();
  return v9(0xD000000000000019);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_7();
  *uint64_t v4 = v3;
  unint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_11_1();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = OUTLINED_FUNCTION_18_2();
    return v11(v10);
  }
}

uint64_t OngoingCallCATs.newCallPrompt(currentCall:targetCall:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  void v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_21_1((uint64_t)OngoingCallCATs.newCallPrompt(currentCall:targetCall:));
}

uint64_t OngoingCallCATs.newCallPrompt(currentCall:targetCall:)(unint64_t a1, unint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = (__n128 *)OUTLINED_FUNCTION_36_2();
  OUTLINED_FUNCTION_1_61(v4, (__n128)xmmword_467720);
  if (a1)
  {
    type metadata accessor for PhoneCallRecord(0);
    unint64_t v5 = a1;
  }
  else
  {
    OUTLINED_FUNCTION_34();
    v4[3].n128_u64[1] = 0;
    v4[4].n128_u64[0] = 0;
  }
  v4[3].n128_u64[0] = v5;
  OUTLINED_FUNCTION_29_18();
  v4[4].n128_u64[1] = v6;
  v4[5].n128_u64[0] = v7;
  v4[5].n128_u64[1] = 0xEA00000000006C6CLL;
  if (a2)
  {
    uint64_t v8 = type metadata accessor for PhoneCallRecord(0);
    unint64_t v9 = a2;
  }
  else
  {
    uint64_t v8 = OUTLINED_FUNCTION_34();
    v4[6].n128_u64[1] = 0;
    v4[7].n128_u64[0] = 0;
  }
  v4[6].n128_u64[0] = v9;
  v4[7].n128_u64[1] = v8;
  swift_retain();
  swift_retain();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();

  return swift_bridgeObjectRelease();
}

uint64_t OngoingCallCATs.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return OngoingCallCATs.init(templateDir:options:globals:)(a1, a2);
}

uint64_t OngoingCallCATs.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CATOption();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v8 - 8);
  outlined init with copy of URL?(a1, (uint64_t)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  uint64_t v10 = CATWrapper.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  outlined destroy of URL?(a1);
  return v10;
}

unint64_t lazy protocol witness table accessor for type OngoingCallCATs.Properties and conformance OngoingCallCATs.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type OngoingCallCATs.Properties and conformance OngoingCallCATs.Properties;
  if (!lazy protocol witness table cache variable for type OngoingCallCATs.Properties and conformance OngoingCallCATs.Properties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OngoingCallCATs.Properties and conformance OngoingCallCATs.Properties);
  }
  return result;
}

uint64_t type metadata accessor for OngoingCallCATs()
{
  uint64_t result = type metadata singleton initialization cache for OngoingCallCATs;
  if (!type metadata singleton initialization cache for OngoingCallCATs) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for OngoingCallCATs()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for OngoingCallCATs()
{
  return type metadata accessor for OngoingCallCATs();
}

unsigned char *storeEnumTagSinglePayload for OngoingCallCATs.Properties(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1AE478);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OngoingCallCATs.Properties()
{
  return &type metadata for OngoingCallCATs.Properties;
}

__n128 *OUTLINED_FUNCTION_1_61(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x43746E6572727563;
  result[2].n128_u64[1] = 0xEB000000006C6C61;
  return result;
}

uint64_t OUTLINED_FUNCTION_2_66(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[2].n128_u64[0] = 0x43746E6572727563;
  a1[2].n128_u64[1] = 0xEB000000006C6C61;
  return 0;
}

uint64_t OUTLINED_FUNCTION_8_53@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v2[6] = a2;
  v2[9] = a1;
  v2[10] = 0x6143746567726174;
  v2[11] = 0xEA00000000006C6CLL;
  return 0;
}

uint64_t OUTLINED_FUNCTION_14_26(unint64_t a1)
{
  return OngoingCallCATs.confirmHangUpForForeignEmergency(currentCall:completion:)(a1);
}

uint64_t OUTLINED_FUNCTION_15_24(unint64_t a1)
{
  return OngoingCallCATs.confirmHangUpForForeignEmergency(currentCall:)(a1);
}

uint64_t OUTLINED_FUNCTION_22_23()
{
  uint64_t result = 0;
  *(void *)(v0 + 56) = 0;
  *(void *)(v0 + 64) = 0;
  return result;
}

void *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 256);
    int v3 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
    unsigned int v4 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v5 = *(v3 - 1);
      uint64_t v6 = *v3;
      swift_bridgeObjectRetain();
      uint64_t v7 = v15(v5, v6);
      uint64_t v9 = v8;
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        unsigned int v4 = v12;
      }
      unint64_t v10 = v4[2];
      if (v10 >= v4[3] >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        unsigned int v4 = v13;
      }
      v3 += 2;
      v4[2] = v10 + 1;
      uint64_t v11 = &v4[2 * v10];
      void v11[4] = v7;
      v11[5] = v9;
      --v2;
    }
    while (v2);
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void *v15;
  uint64_t v16;

  int v3 = v2;
  unsigned int v4 = a2;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v15 = (void *)(a2 + 16);
    uint64_t v6 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
    uint64_t v16 = v4;
    while (1)
    {
      uint64_t v7 = *(v6 - 1);
      uint64_t v8 = *v6;
      unint64_t v10 = *(void *)(v4 + 40);
      uint64_t v9 = *(void *)(v4 + 48);
      __swift_project_boxed_opaque_existential_1(v15, v10);
      uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 8);
      swift_bridgeObjectRetain();
      uint64_t v12 = v11(v7, v8, v10, v9);
      if (v3)
      {
        swift_errorRelease();
        swift_bridgeObjectRelease();
        int v3 = 0;
      }
      else
      {
        uint64_t v13 = v12;
        swift_bridgeObjectRelease();
        if (v13)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          unsigned int v4 = v16;
          if (*(void *)((char *)&dword_10 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          goto LABEL_10;
        }
      }
      unsigned int v4 = v16;
LABEL_10:
      v6 += 2;
      if (!--v5)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  swift_release();
  return _swiftEmptyArrayStorage;
}

uint64_t static AppSelectionSignalsGatheringHelper.triggerSignalCollection(sharedGlobals:contacts:phoneCallNLIntent:smartAppSelection:eligibleAppsFinder:skIntent:)(void *a1, unint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = a5[3];
  uint64_t v14 = a5[4];
  uint64_t v15 = __swift_project_boxed_opaque_existential_1(a5, v13);
  return specialized static AppSelectionSignalsGatheringHelper.triggerSignalCollection(sharedGlobals:contacts:phoneCallNLIntent:smartAppSelection:eligibleAppsFinder:skIntent:)(a1, a2, a3, a4, (uint64_t)v15, a6, a7, v13, v14);
}

uint64_t static AppSelectionSignalsGatheringHelper.getCommunicationType(phoneCallNLIntent:skIntent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a2)
  {
    uint64_t ObjectType = swift_getObjectType();
    char v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 136))(ObjectType, a3);
    outlined init with copy of SignalProviding(a1, (uint64_t)v17);
    if (v8)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
      goto LABEL_6;
    }
  }
  else
  {
    outlined init with copy of SignalProviding(a1, (uint64_t)v17);
  }
  __swift_project_boxed_opaque_existential_1(v17, v17[3]);
  Swift::Bool v9 = PhoneCallNLIntent.isGroupFaceTimeCall()();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  if (v9)
  {
LABEL_6:
    BOOL v10 = OUTLINED_FUNCTION_7_48();
    type metadata accessor for CommunicationTypeSignal.CommunicationType();
    OUTLINED_FUNCTION_1_1();
    uint64_t v12 = *(uint64_t (**)(uint64_t, void))(v11 + 104);
    if (v10) {
      uint64_t v13 = (unsigned int *)&enum case for CommunicationTypeSignal.CommunicationType.groupVideoCall(_:);
    }
    else {
      uint64_t v13 = (unsigned int *)&enum case for CommunicationTypeSignal.CommunicationType.groupAudioCall(_:);
    }
    return v12(a4, *v13);
  }
  BOOL v14 = OUTLINED_FUNCTION_7_48();
  type metadata accessor for CommunicationTypeSignal.CommunicationType();
  OUTLINED_FUNCTION_1_1();
  uint64_t v12 = *(uint64_t (**)(uint64_t, void))(v15 + 104);
  if (v14) {
    uint64_t v13 = (unsigned int *)&enum case for CommunicationTypeSignal.CommunicationType.videoCall(_:);
  }
  else {
    uint64_t v13 = (unsigned int *)&enum case for CommunicationTypeSignal.CommunicationType.audioCall(_:);
  }
  return v12(a4, *v13);
}

void *static AppSelectionSignalsGatheringHelper.getShowedForcedAppDisambiguationList(sharedGlobals:)(void *a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_4();
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v5 + 64))(v44, v4, v5);
  uint64_t v6 = v45;
  uint64_t v7 = v46;
  __swift_project_boxed_opaque_existential_1(v44, v45);
  static Date.distantPast.getter();
  Date.timeIntervalSince1970.getter();
  uint64_t v9 = v8;
  BOOL v10 = *(void (**)(uint64_t))(v3 + 8);
  uint64_t v11 = OUTLINED_FUNCTION_16_31();
  v10(v11);
  v40[0] = 0;
  uint64_t v41 = v9;
  uint64_t v42 = _swiftEmptyArrayStorage;
  unint64_t v12 = lazy protocol witness table accessor for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory();
  SiriPhoneDefaultsProviding.getOrDefault<A>(key:defaultValue:)(2, (uint64_t)v40, v6, (uint64_t)&type metadata for ForcedAppDisambiguationHistory, v7, v12, (uint64_t)v43);
  LODWORD(v7) = LOBYTE(v43[0]);
  double v13 = *(double *)&v43[1];
  uint64_t v14 = v43[2];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  if (v7 != 1 || 0x8000000000490B70 == 0x8000000000490B50)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      if (one-time initialization token for siriPhone != -1) {
        swift_once();
      }
      uint64_t v16 = type metadata accessor for Logger();
      uint64_t v17 = OUTLINED_FUNCTION_25_0(v16, (uint64_t)static Logger.siriPhone);
      os_log_type_t v18 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v17, v18)) {
        goto LABEL_15;
      }
      uint64_t v19 = (_WORD *)OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_32_2(v19);
      uint64_t v20 = "#AppSelectionSignalsGatheringHelper: don't find showedForcedAppDisambiguation from user default, return empt"
            "y apps list and will not trigger data collection";
      os_log_type_t v21 = v17;
      os_log_type_t v22 = v18;
      uint64_t v23 = (uint8_t *)v2;
      uint32_t v24 = 2;
LABEL_14:
      _os_log_impl(&dword_0, v21, v22, v20, v23, v24);
      OUTLINED_FUNCTION_5_16();
LABEL_15:

      return _swiftEmptyArrayStorage;
    }
  }
  Date.init()();
  Date.timeIntervalSince1970.getter();
  double v26 = v25;
  uint64_t v27 = OUTLINED_FUNCTION_16_31();
  v10(v27);
  double v28 = v26 - v13;
  if (v28 > 10.0)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    uint64_t v17 = OUTLINED_FUNCTION_25_0(v29, (uint64_t)static Logger.siriPhone);
    os_log_type_t v30 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v17, v30)) {
      goto LABEL_15;
    }
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 134217984;
    *(double *)uint64_t v44 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v20 = "#AppSelectionSignalsGatheringHelper: interval since app disambiguation is showed %fs ago, which exceeds 10s";
    os_log_type_t v21 = v17;
    os_log_type_t v22 = v30;
    uint64_t v23 = v31;
    uint32_t v24 = 12;
    goto LABEL_14;
  }
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  __swift_project_value_buffer(v32, (uint64_t)static Logger.siriPhone);
  swift_bridgeObjectRetain_n();
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    v44[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v35 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v36 = Array.description.getter();
    unint64_t v38 = v37;
    swift_bridgeObjectRelease();
    v43[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v38, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v33, v34, "#AppSelectionSignalsGatheringHelper: retrieve app list %s", v35, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_5_16();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return (void *)v14;
}

void static AppSelectionSignalsGatheringHelper.triggerForcedAppDisambiguationSignalCollection(sharedGlobals:contacts:phoneCallNLIntent:phoneAppResolutionHelper:appBundleIds:selectedAppId:skIntent:)(uint64_t a1, unint64_t a2, uint64_t a3, uint8_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v14 - 8);
  OUTLINED_FUNCTION_4();
  uint64_t v17 = v16 - v15;
  if (!a2) {
    goto LABEL_23;
  }
  if (!(a2 >> 62))
  {
    uint64_t v18 = *(void *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (v18) {
      goto LABEL_4;
    }
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter())
  {
LABEL_22:
    swift_bridgeObjectRelease();
LABEL_23:
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    os_log_type_t v34 = OUTLINED_FUNCTION_25_0(v31, (uint64_t)static Logger.siriPhone);
    os_log_type_t v32 = static os_log_type_t.debug.getter();
    if (!OUTLINED_FUNCTION_12_27(v32)) {
      goto LABEL_28;
    }
    uint64_t v33 = (_WORD *)OUTLINED_FUNCTION_7_2();
    OUTLINED_FUNCTION_4_32(v33);
    double v25 = "#AppSelectionSignalsGatheringHelper triggerForcedAppDisambiguationSignalCollection doesn't expect contacts is "
          "empty, cancel signal collection";
    goto LABEL_27;
  }
  swift_bridgeObjectRetain();
  uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_4:
  if (v18 != 1)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    os_log_type_t v34 = OUTLINED_FUNCTION_25_0(v26, (uint64_t)static Logger.siriPhone);
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (!OUTLINED_FUNCTION_12_27(v27)) {
      goto LABEL_28;
    }
    double v28 = (_WORD *)OUTLINED_FUNCTION_7_2();
    OUTLINED_FUNCTION_4_32(v28);
    double v25 = "#AppSelectionSignalsGatheringHelper triggerForcedAppDisambiguationSignalCollection there are more than one con"
          "tacts, ForcedAppDisambiguation shouldn't triggered, cancel signal collection";
    goto LABEL_27;
  }
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (a2 & 0xC000000000000001) == 0, a2);
  if ((a2 & 0xC000000000000001) != 0) {
    id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v19 = *(id *)(a2 + 32);
  }
  unint64_t v20 = outlined bridged method (ob) of @objc INPerson.siriMatches.getter(v19);
  if (!v20
    || (v20 >> 62
      ? (uint64_t v21 = _CocoaArrayWrapper.endIndex.getter())
      : (uint64_t v21 = *(void *)((char *)&dword_10 + (v20 & 0xFFFFFFFFFFFFFF8))),
        swift_bridgeObjectRelease(),
        v21 < 2))
  {
    uint64_t v29 = type metadata accessor for TaskPriority();
    __swift_storeEnumTagSinglePayload(v17, 1, 1, v29);
    outlined init with copy of SignalProviding(a1, (uint64_t)v36);
    outlined init with copy of SignalProviding(a3, (uint64_t)v35);
    os_log_type_t v30 = (void *)swift_allocObject();
    void v30[2] = 0;
    v30[3] = 0;
    outlined init with take of AppSelectionSignalComponent(v36, (uint64_t)(v30 + 4));
    v30[9] = a5;
    v30[10] = a4;
    v30[11] = a6;
    v30[12] = a7;
    v30[13] = a2;
    outlined init with take of AppSelectionSignalComponent(v35, (uint64_t)(v30 + 14));
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v17, (uint64_t)&async function pointer to partial apply for closure #1 in static AppSelectionSignalsGatheringHelper.triggerForcedAppDisambiguationSignalCollection(sharedGlobals:contacts:phoneCallNLIntent:phoneAppResolutionHelper:appBundleIds:selectedAppId:skIntent:), (uint64_t)v30);
    swift_release();
    return;
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  os_log_type_t v34 = OUTLINED_FUNCTION_25_0(v22, (uint64_t)static Logger.siriPhone);
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_12_27(v23))
  {
    uint32_t v24 = (_WORD *)OUTLINED_FUNCTION_7_2();
    OUTLINED_FUNCTION_4_32(v24);
    double v25 = "#AppSelectionSignalsGatheringHelper triggerForcedAppDisambiguationSignalCollection requests needs disambiguati"
          "on, waiting signal collection after disambiguation";
LABEL_27:
    _os_log_impl(&dword_0, v34, (os_log_type_t)a7, v25, a4, 2u);
    OUTLINED_FUNCTION_6();
  }
LABEL_28:
}

void static AppSelectionSignalsGatheringHelper.triggerAppNameSpecifiedSignalCollection(sharedGlobals:contacts:phoneCallNLIntent:phoneAppResolutionHelper:skIntent:)(uint64_t a1, unint64_t a2, uint64_t a3, uint8_t *a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v8 - 8);
  OUTLINED_FUNCTION_4();
  uint64_t v11 = v10 - v9;
  if (!a2) {
    goto LABEL_13;
  }
  if (!(a2 >> 62))
  {
    uint64_t v12 = *(void *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (v12) {
      goto LABEL_4;
    }
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter())
  {
LABEL_12:
    swift_bridgeObjectRelease();
LABEL_13:
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    uint64_t v21 = OUTLINED_FUNCTION_25_0(v19, (uint64_t)static Logger.siriPhone);
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v21, v14)) {
      goto LABEL_18;
    }
    unint64_t v20 = (_WORD *)OUTLINED_FUNCTION_7_2();
    OUTLINED_FUNCTION_4_32(v20);
    uint64_t v16 = "#AppSelectionSignalsGatheringHelper doesn't expect contacts is empty, return";
    goto LABEL_17;
  }
  swift_bridgeObjectRetain();
  uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_4:
  if (v12 < 2)
  {
    uint64_t v17 = type metadata accessor for TaskPriority();
    __swift_storeEnumTagSinglePayload(v11, 1, 1, v17);
    outlined init with copy of SignalProviding(a1, (uint64_t)v23);
    outlined init with copy of SignalProviding(a3, (uint64_t)v22);
    uint64_t v18 = (void *)swift_allocObject();
    long long v18[2] = 0;
    v18[3] = 0;
    outlined init with take of AppSelectionSignalComponent(v23, (uint64_t)(v18 + 4));
    v18[9] = a4;
    outlined init with take of AppSelectionSignalComponent(v22, (uint64_t)(v18 + 10));
    v18[15] = a2;
    swift_retain();
    _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v11, (uint64_t)&async function pointer to partial apply for closure #1 in static AppSelectionSignalsGatheringHelper.triggerAppNameSpecifiedSignalCollection(sharedGlobals:contacts:phoneCallNLIntent:phoneAppResolutionHelper:skIntent:), (uint64_t)v18);
    swift_release();
    return;
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v21 = OUTLINED_FUNCTION_25_0(v13, (uint64_t)static Logger.siriPhone);
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v14))
  {
    uint64_t v15 = (_WORD *)OUTLINED_FUNCTION_7_2();
    OUTLINED_FUNCTION_4_32(v15);
    uint64_t v16 = "#AppSelectionSignalsGatheringHelper there are more than one match, wait logging after disambiguation";
LABEL_17:
    _os_log_impl(&dword_0, v21, v14, v16, a4, 2u);
    OUTLINED_FUNCTION_6();
  }
LABEL_18:
}

uint64_t closure #1 in static AppSelectionSignalsGatheringHelper.triggerForcedAppDisambiguationSignalCollection(sharedGlobals:contacts:phoneCallNLIntent:phoneAppResolutionHelper:appBundleIds:selectedAppId:skIntent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[15] = v12;
  v8[16] = v13;
  v8[13] = a7;
  v8[14] = a8;
  v8[11] = a5;
  v8[12] = a6;
  v8[10] = a4;
  uint64_t v9 = type metadata accessor for Date();
  v8[17] = v9;
  v8[18] = *(void *)(v9 - 8);
  v8[19] = swift_task_alloc();
  return _swift_task_switch(closure #1 in static AppSelectionSignalsGatheringHelper.triggerForcedAppDisambiguationSignalCollection(sharedGlobals:contacts:phoneCallNLIntent:phoneAppResolutionHelper:appBundleIds:selectedAppId:skIntent:), 0, 0);
}

uint64_t closure #1 in static AppSelectionSignalsGatheringHelper.triggerForcedAppDisambiguationSignalCollection(sharedGlobals:contacts:phoneCallNLIntent:phoneAppResolutionHelper:appBundleIds:selectedAppId:skIntent:)()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.siriPhone);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_18(v4))
  {
    uint64_t v5 = (uint8_t *)OUTLINED_FUNCTION_7_2();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v0, "#AppSelectionSignalsGatheringHelper triggerSignalCollection for ForcedAppDisambiguationSignalCollection asynchronously", v5, 2u);
    OUTLINED_FUNCTION_6();
  }
  uint64_t v6 = *(void *)(v1 + 144);
  uint64_t v7 = *(void *)(v1 + 152);
  uint64_t v33 = *(void *)(v1 + 112);
  uint64_t v34 = *(void *)(v1 + 120);
  uint64_t v8 = *(void *)(v1 + 96);
  uint64_t v32 = *(void *)(v1 + 104);
  uint64_t v9 = *(void **)(v1 + 80);
  uint64_t v30 = *(void *)(v1 + 136);
  uint64_t v31 = *(void *)(v1 + 88);

  static Signpost.begin(_:)();
  uint64_t v11 = v9[3];
  uint64_t v10 = v9[4];
  __swift_project_boxed_opaque_existential_1(v9, v11);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 192))(v11, v10);
  uint64_t v13 = v9[3];
  uint64_t v14 = v9[4];
  __swift_project_boxed_opaque_existential_1(v9, v13);
  (*(void (**)(uint64_t, uint64_t))(v14 + 64))(v13, v14);
  uint64_t v15 = *(void *)(v1 + 40);
  uint64_t v16 = *(void *)(v1 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 16), v15);
  Date.init()();
  Date.timeIntervalSince1970.getter();
  uint64_t v18 = v17;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v30);
  *(unsigned char *)(v1 + 56) = 1;
  *(void *)(v1 + 64) = v18;
  *(void *)(v1 + 72) = _swiftEmptyArrayStorage;
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v16 + 16);
  unint64_t v20 = lazy protocol witness table accessor for type ForcedAppDisambiguationHistory and conformance ForcedAppDisambiguationHistory();
  v19(2, v1 + 56, &type metadata for ForcedAppDisambiguationHistory, v20, v15, v16);
  __swift_destroy_boxed_opaque_existential_1(v1 + 16);
  swift_retain();
  specialized Sequence.compactMap<A>(_:)(v31, v8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 256))(v32, v33);
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v34 & 0xC000000000000001) == 0, v34);
  if ((v34 & 0xC000000000000001) != 0) {
    id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v21 = *(id *)(*(void *)(v1 + 120) + 32);
  }
  uint64_t v22 = v21;
  (*(void (**)(void))(*(void *)v12 + 144))();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  Signpost.OpenSignpost.end()();
  os_log_type_t v23 = (void *)Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_18(v24))
  {
    double v25 = (_WORD *)OUTLINED_FUNCTION_7_2();
    OUTLINED_FUNCTION_32_2(v25);
    OUTLINED_FUNCTION_25_4(&dword_0, v26, v27, "#AppSelectionSignalsGatheringHelper triggerSignalCollection finished");
    OUTLINED_FUNCTION_5_16();
  }

  swift_release();
  swift_release();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v28();
}

uint64_t closure #1 in static AppSelectionSignalsGatheringHelper.triggerAppNameSpecifiedSignalCollection(sharedGlobals:contacts:phoneCallNLIntent:phoneAppResolutionHelper:skIntent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[11] = a6;
  v7[12] = a7;
  v7[9] = a4;
  v7[10] = a5;
  uint64_t v8 = type metadata accessor for Date();
  v7[13] = v8;
  v7[14] = *(void *)(v8 - 8);
  v7[15] = swift_task_alloc();
  return _swift_task_switch(closure #1 in static AppSelectionSignalsGatheringHelper.triggerAppNameSpecifiedSignalCollection(sharedGlobals:contacts:phoneCallNLIntent:phoneAppResolutionHelper:skIntent:), 0, 0);
}

uint64_t closure #1 in static AppSelectionSignalsGatheringHelper.triggerAppNameSpecifiedSignalCollection(sharedGlobals:contacts:phoneCallNLIntent:phoneAppResolutionHelper:skIntent:)()
{
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[16] = __swift_project_value_buffer(v1, (uint64_t)static Logger.siriPhone);
  uint64_t v2 = (void *)Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_18(v3))
  {
    os_log_type_t v4 = (_WORD *)OUTLINED_FUNCTION_7_2();
    OUTLINED_FUNCTION_32_2(v4);
    OUTLINED_FUNCTION_25_4(&dword_0, v5, v6, "#AppSelectionSignalsGatheringHelper triggerSignalCollection for specified app name asynchronously");
    OUTLINED_FUNCTION_5_16();
  }
  uint64_t v7 = (void *)v0[9];
  uint64_t v8 = v0[10];

  uint64_t v9 = v7[3];
  uint64_t v10 = v7[4];
  __swift_project_boxed_opaque_existential_1(v7, v9);
  v0[17] = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 192))(v9, v10);
  uint64_t v14 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v8 + 168) + **(int **)(*(void *)v8 + 168));
  uint64_t v11 = (void *)swift_task_alloc();
  v0[18] = v11;
  *uint64_t v11 = v0;
  v11[1] = closure #1 in static AppSelectionSignalsGatheringHelper.triggerAppNameSpecifiedSignalCollection(sharedGlobals:contacts:phoneCallNLIntent:phoneAppResolutionHelper:skIntent:);
  uint64_t v12 = v0[11];
  return v14(v12);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  void *v19;
  void *v20;
  os_log_type_t v21;
  _WORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(void);
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;

  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 112);
  os_log_type_t v3 = *(void *)(v0 + 120);
  uint64_t v29 = *(void *)(v0 + 96);
  os_log_type_t v4 = *(void *)(v0 + 80);
  uint64_t v27 = *(void *)(v0 + 104);
  double v28 = *(void **)(v0 + 88);
  uint64_t v5 = *(void **)(v0 + 72);
  swift_retain();
  uint64_t v6 = specialized Sequence.compactMap<A>(_:)(v1, v4);
  swift_bridgeObjectRelease();
  uint64_t v7 = v5[3];
  uint64_t v8 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v8 + 64))(v7, v8);
  uint64_t v9 = *(void *)(v0 + 40);
  uint64_t v10 = *(void *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v9);
  Date.init()();
  swift_bridgeObjectRetain();
  Date.timeIntervalSince1970.getter();
  uint64_t v12 = v11;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v27);
  *(void *)(v0 + 56) = v12;
  *(void *)(v0 + 64) = v6;
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v10 + 16);
  uint64_t v14 = lazy protocol witness table accessor for type AppNameSpecifiedByUserSignalCollectionHistory and conformance AppNameSpecifiedByUserSignalCollectionHistory();
  v13(3, v0 + 56, &type metadata for AppNameSpecifiedByUserSignalCollectionHistory, v14, v9, v10);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_project_boxed_opaque_existential_1(v28, v28[3]);
  uint64_t v15 = PhoneCallNLIntent.applicationId.getter();
  if (v16)
  {
    uint64_t v17 = v16;
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v17 = 0xE000000000000000;
  }
  (*(void (**)(uint64_t, unint64_t))(*(void *)v4 + 256))(v15, v17);
  swift_bridgeObjectRelease();
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v29 & 0xC000000000000001) == 0, v29);
  if ((v29 & 0xC000000000000001) != 0) {
    uint64_t v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    uint64_t v18 = *(id *)(*(void *)(v0 + 96) + 32);
  }
  uint64_t v19 = v18;
  (*(void (**)(void))(**(void **)(v0 + 136) + 144))();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  unint64_t v20 = (void *)Logger.logObject.getter();
  id v21 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_18(v21))
  {
    uint64_t v22 = (_WORD *)OUTLINED_FUNCTION_7_2();
    OUTLINED_FUNCTION_32_2(v22);
    OUTLINED_FUNCTION_25_4(&dword_0, v23, v24, "#AppSelectionSignalsGatheringHelper triggerSignalCollection finished ");
    OUTLINED_FUNCTION_5_16();
  }
  swift_release();

  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v25();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  swift_release();
  swift_task_dealloc();
  OUTLINED_FUNCTION_47_0();
  return v0();
}

uint64_t closure #1 in static AppSelectionSignalsGatheringHelper.triggerAppNameSpecifiedSignalCollection(sharedGlobals:contacts:phoneCallNLIntent:phoneAppResolutionHelper:skIntent:)(uint64_t a1)
{
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_4_2();
  *uint64_t v7 = v6;
  *(void *)(v5 + 152) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v8 = closure #1 in static AppSelectionSignalsGatheringHelper.triggerAppNameSpecifiedSignalCollection(sharedGlobals:contacts:phoneCallNLIntent:phoneAppResolutionHelper:skIntent:);
  }
  else
  {
    *(void *)(v5 + 160) = a1;
    uint64_t v8 = closure #1 in static AppSelectionSignalsGatheringHelper.triggerAppNameSpecifiedSignalCollection(sharedGlobals:contacts:phoneCallNLIntent:phoneAppResolutionHelper:skIntent:);
  }
  return _swift_task_switch(v8, 0, 0);
}

uint64_t specialized static AppSelectionSignalsGatheringHelper.triggerSignalCollection(sharedGlobals:contacts:phoneCallNLIntent:smartAppSelection:eligibleAppsFinder:skIntent:)(void *a1, unint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v44 = a7;
  uint64_t v45 = a6;
  uint64_t v47 = a3;
  unint64_t v43 = a2;
  uint64_t v46 = a9;
  uint64_t v12 = type metadata accessor for AppResolver();
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(a8 - 8);
  uint64_t v17 = __chkstk_darwin(v13);
  uint64_t v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v48 = v16;
  unint64_t v20 = *(void (**)(void))(v16 + 16);
  uint64_t v49 = (char *)&v42 - v21;
  v20();
  uint64_t v22 = static AppSelectionSignalsGatheringHelper.getShowedForcedAppDisambiguationList(sharedGlobals:)(a1);
  outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v53);
  if (a4)
  {
    swift_retain();
  }
  else
  {
    outlined init with copy of SignalProviding((uint64_t)v53, (uint64_t)&v58);
    id v23 = [self clientWithIdentifier:112];
    type metadata accessor for TrialSmartAppSelectionConfigProvider();
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = v23;
    type metadata accessor for DiagnosticLogPermission();
    uint64_t v25 = swift_allocObject();
    type metadata accessor for SmartAppSelectionFeatureManager();
    swift_allocObject();
    a4 = SmartAppSelectionFeatureManager.init(sharedGlobals:trialSmartAppSelectionConfigProvider:diagnosticLogPermission:)(&v58, v24, v25);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
  outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)&v58);
  type metadata accessor for AppUsageProvider();
  long long v55 = 0u;
  long long v56 = 0u;
  *(void *)&long long v57 = 0;
  uint64_t v26 = swift_allocObject();
  swift_retain();
  AppResolver.init(appResolutionRules:)();
  type metadata accessor for PhoneAppResolutionHelper();
  uint64_t v27 = swift_allocObject();
  ((void (*)(char *, char *, uint64_t))v20)(v19, v49, a8);
  double v28 = (uint8_t *)specialized PhoneAppResolutionHelper.init(sharedGlobals:eligibleAppsFinder:smartAppSelection:phoneAppResolutionLogger:appUsageProvider:appResolver:)((uint64_t)&v58, (uint64_t)v19, a4, (uint64_t)&v55, v26, (uint64_t)v15, v27, a8, v46);
  if (v22[2])
  {
    uint64_t v29 = a1[3];
    uint64_t v30 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v29);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v30 + 152))(v50, v29, v30);
    uint64_t v31 = v51;
    uint64_t v32 = v52;
    __swift_project_boxed_opaque_existential_1(v50, v51);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v32 + 24))(v54, v31, v32);
    _s27PhoneCallFlowDelegatePlugin12AnnotatedAppVSgWObTm_1((uint64_t)v54, (uint64_t)&v55, &demangling cache variable for type metadata for AnnotatedApp?);
    uint64_t v33 = v47;
    if ((void)v55)
    {
      long long v58 = v55;
      long long v59 = v56;
      long long v60 = v57;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
      if (v60 == 4)
      {
        uint64_t v34 = App.appIdentifier.getter();
        if (v35) {
          uint64_t v36 = v34;
        }
        else {
          uint64_t v36 = 0;
        }
        if (v35) {
          uint64_t v37 = v35;
        }
        else {
          uint64_t v37 = 0xE000000000000000;
        }
        static AppSelectionSignalsGatheringHelper.triggerForcedAppDisambiguationSignalCollection(sharedGlobals:contacts:phoneCallNLIntent:phoneAppResolutionHelper:appBundleIds:selectedAppId:skIntent:)((uint64_t)a1, v43, (uint64_t)v33, v28, (uint64_t)v22, v36, v37);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        uint64_t v61 = *((void *)&v58 + 1);
        outlined release of Set<String>((uint64_t)&v61);
        _s27PhoneCallFlowDelegatePlugin12AnnotatedAppVSgWObTm_1((uint64_t)&v59, (uint64_t)v50, &demangling cache variable for type metadata for String?);
        outlined release of String?((uint64_t)v50);
        uint64_t v62 = *((void *)&v60 + 1);
        outlined release of Set<String>((uint64_t)&v62);
        swift_bridgeObjectRelease();
        return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v49, a8);
      }
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v61 = *((void *)&v58 + 1);
      outlined release of Set<String>((uint64_t)&v61);
      _s27PhoneCallFlowDelegatePlugin12AnnotatedAppVSgWObTm_1((uint64_t)&v59, (uint64_t)v50, &demangling cache variable for type metadata for String?);
      outlined release of String?((uint64_t)v50);
      uint64_t v62 = *((void *)&v60 + 1);
      outlined release of Set<String>((uint64_t)&v62);
    }
    else
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v33 = v47;
  }
  __swift_project_boxed_opaque_existential_1(v33, v33[3]);
  PhoneCallNLIntent.applicationId.getter();
  uint64_t v39 = v38;
  uint64_t v40 = swift_bridgeObjectRelease();
  if (v39 && ((*(uint64_t (**)(uint64_t))(*a4 + 128))(v40) & 1) != 0) {
    static AppSelectionSignalsGatheringHelper.triggerAppNameSpecifiedSignalCollection(sharedGlobals:contacts:phoneCallNLIntent:phoneAppResolutionHelper:skIntent:)((uint64_t)a1, v43, (uint64_t)v33, v28);
  }
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v49, a8);
}

ValueMetadata *type metadata accessor for AppSelectionSignalsGatheringHelper()
{
  return &type metadata for AppSelectionSignalsGatheringHelper;
}

uint64_t sub_1B0780()
{
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 112);

  return _swift_deallocObject(v0, 152, 7);
}

uint64_t partial apply for closure #1 in static AppSelectionSignalsGatheringHelper.triggerForcedAppDisambiguationSignalCollection(sharedGlobals:contacts:phoneCallNLIntent:phoneAppResolutionHelper:appBundleIds:selectedAppId:skIntent:)()
{
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = protocol witness for Flow.execute() in conformance PhoneIntentRCHFlow<A, B>;
  OUTLINED_FUNCTION_15_25();
  return closure #1 in static AppSelectionSignalsGatheringHelper.triggerForcedAppDisambiguationSignalCollection(sharedGlobals:contacts:phoneCallNLIntent:phoneAppResolutionHelper:appBundleIds:selectedAppId:skIntent:)(v5, v6, v7, v8, v9, v10, v2, v3);
}

uint64_t sub_1B08D4()
{
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 80);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 128, 7);
}

uint64_t partial apply for closure #1 in static AppSelectionSignalsGatheringHelper.triggerAppNameSpecifiedSignalCollection(sharedGlobals:contacts:phoneCallNLIntent:phoneAppResolutionHelper:skIntent:)()
{
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = protocol witness for Flow.execute() in conformance PhoneIntentRCHFlow<A, B>;
  OUTLINED_FUNCTION_15_25();
  return closure #1 in static AppSelectionSignalsGatheringHelper.triggerAppNameSpecifiedSignalCollection(sharedGlobals:contacts:phoneCallNLIntent:phoneAppResolutionHelper:skIntent:)(v4, v5, v6, v7, v8, v9, v2);
}

uint64_t _s27PhoneCallFlowDelegatePlugin12AnnotatedAppVSgWObTm_1(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_1_1();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

BOOL OUTLINED_FUNCTION_7_48()
{
  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  return PhoneCallNLIntent.isVideoCall()();
}

BOOL OUTLINED_FUNCTION_12_27(os_log_type_t a1)
{
  uint64_t v4 = *(NSObject **)(v1 - 168);
  return os_log_type_enabled(v4, a1);
}

uint64_t OUTLINED_FUNCTION_16_31()
{
  return v0;
}

uint64_t *BiomeEventSender.instance.unsafeMutableAddressor()
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  return &static BiomeEventSender.instance;
}

unint64_t PhoneDiscoverabilityEvent.identifier.getter(char a1)
{
  if (a1) {
    return 0xD00000000000001CLL;
  }
  else {
    return 0xD000000000000025;
  }
}

uint64_t PhoneDiscoverabilityEvent.userInfo.getter()
{
  return Dictionary.init(dictionaryLiteral:)();
}

id one-time initialization function for instance()
{
  id result = variable initialization expression of BiomeEventSender.discoverabilitySource();
  static BiomeEventSender.instance = (uint64_t)result;
  return result;
}

{
  id v0;
  id result;

  uint64_t v0 = objc_allocWithZone((Class)NSUserDefaults);
  id result = @nonobjc NSUserDefaults.init(suiteName:)(0xD000000000000014, 0x8000000000491380);
  static SiriPhoneDefaults.instance = (uint64_t)result;
  return result;
}

id static BiomeEventSender.instance.getter()
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static BiomeEventSender.instance;

  return v0;
}

Swift::Void __swiftcall BiomeEventSender.donateTipKitEvent(_:)(PhoneCallFlowDelegatePlugin::PhoneDiscoverabilityEvent a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v4 = 0xD00000000000001CLL;
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.siriPhone);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    if (a1)
    {
      unint64_t v9 = 0x8000000000495D50;
    }
    else
    {
      uint64_t v4 = 0xD000000000000025;
      unint64_t v9 = 0x8000000000495D70;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v6, v7, "#BiomeEventSender Donating %s event to discoverabilitySignal", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    if ((a1 & 1) == 0) {
      uint64_t v4 = 0xD000000000000025;
    }
  }
  if (a1) {
    uint64_t v10 = 0x8000000000495D50;
  }
  else {
    uint64_t v10 = 0x8000000000495D70;
  }
  id v11 = objc_allocWithZone((Class)BMDiscoverabilitySignals);
  id v12 = @nonobjc BMDiscoverabilitySignals.init(contentIdentifier:context:osBuild:userInfo:)(v4, v10, 0, 0, 0, 0, 0, 0xF000000000000000);
  [v2 sendEvent:v12];
}

void protocol witness for BiomeEventSending.donateTipKitEvent(_:) in conformance BiomeEventSender(char a1)
{
}

id @nonobjc BMDiscoverabilitySignals.init(contentIdentifier:context:osBuild:userInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  if (a2)
  {
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    if (a4) {
      goto LABEL_3;
    }
LABEL_6:
    NSString v14 = 0;
    if (a6) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  NSString v13 = 0;
  if (!a4) {
    goto LABEL_6;
  }
LABEL_3:
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a6)
  {
LABEL_4:
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
LABEL_7:
  NSString v15 = 0;
LABEL_8:
  if (a8 >> 60 == 15)
  {
    Class isa = 0;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data?(a7, a8);
  }
  id v17 = [v8 initWithContentIdentifier:v13 context:v14 osBuild:v15 userInfo:isa];

  return v17;
}

unint64_t lazy protocol witness table accessor for type PhoneDiscoverabilityEvent and conformance PhoneDiscoverabilityEvent()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneDiscoverabilityEvent and conformance PhoneDiscoverabilityEvent;
  if (!lazy protocol witness table cache variable for type PhoneDiscoverabilityEvent and conformance PhoneDiscoverabilityEvent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneDiscoverabilityEvent and conformance PhoneDiscoverabilityEvent);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PhoneDiscoverabilityEvent(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B10A4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PhoneDiscoverabilityEvent()
{
  return &type metadata for PhoneDiscoverabilityEvent;
}

ValueMetadata *type metadata accessor for BiomeEventSender()
{
  return &type metadata for BiomeEventSender;
}

uint64_t IncomingCallNLContextProvider.makeOfferFollowUpIntentContext(intentResponse:isAnnouncement:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  if (a1)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(*(void *)v3 + 88) + 24))(*(void *)(*(void *)v3 + 80));
    os_log_type_t v7 = *(uint64_t (**)(uint64_t, void))(*(void *)v3 + 104);
    return v7(v6, a2 & 1);
  }
  else
  {
    uint64_t v9 = type metadata accessor for NLContextUpdate();
    return __swift_storeEnumTagSinglePayload(a3, 1, 1, v9);
  }
}

uint64_t IncomingCallNLContextProvider.makeOfferFollowUpIntentContext(followUpOfferType:isAnnouncement:)@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for NLContextUpdate();
  OUTLINED_FUNCTION_0_0();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_4();
  uint64_t v12 = v11 - v10;
  if (FollowUpOfferType.requiresConfirmation.getter(a1))
  {
    IncomingCallNLContextProvider.makeFollowUpConfirmationContext(followUpOfferType:)(a1);
    switch(a1)
    {
      case 1:
        OUTLINED_FUNCTION_13_28();
        if (!v13) {
          swift_once();
        }
        uint64_t v20 = type metadata accessor for Logger();
        uint64_t v21 = (void *)OUTLINED_FUNCTION_25_0(v20, (uint64_t)static Logger.siriPhone);
        os_log_type_t v22 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_5_32(v22))
        {
          *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
          OUTLINED_FUNCTION_2_3(&dword_0, v23, v24, "#IncomingCallNLContextProvider: Adding NLv4 context for startCall");
          OUTLINED_FUNCTION_6();
        }

        IncomingCallNLContextProvider.nlContextUpdateForCall()();
        break;
      case 2:
        OUTLINED_FUNCTION_13_28();
        if (!v13) {
          swift_once();
        }
        uint64_t v25 = type metadata accessor for Logger();
        uint64_t v26 = (void *)OUTLINED_FUNCTION_25_0(v25, (uint64_t)static Logger.siriPhone);
        os_log_type_t v27 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_5_32(v27))
        {
          *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
          OUTLINED_FUNCTION_2_3(&dword_0, v28, v29, "#IncomingCallNLContextProvider: Adding NLv4 context for answerCall");
          OUTLINED_FUNCTION_6();
        }

        IncomingCallNLContextProvider.nlContextUpdateForAnswer()();
        break;
      case 3:
        OUTLINED_FUNCTION_13_28();
        if (!v13) {
          swift_once();
        }
        uint64_t v14 = type metadata accessor for Logger();
        NSString v15 = (void *)OUTLINED_FUNCTION_25_0(v14, (uint64_t)static Logger.siriPhone);
        os_log_type_t v16 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_5_32(v16))
        {
          *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
          OUTLINED_FUNCTION_2_3(&dword_0, v17, v18, "#IncomingCallNLContextProvider: Adding NLv4 context for callBack");
          OUTLINED_FUNCTION_6();
        }

        IncomingCallNLContextProvider.nlContextUpdateForCallBack()();
        break;
      default:
LABEL_24:
        if (a2)
        {
          OUTLINED_FUNCTION_13_28();
          if (!v13) {
            swift_once();
          }
          uint64_t v30 = type metadata accessor for Logger();
          uint64_t v31 = OUTLINED_FUNCTION_25_0(v30, (uint64_t)static Logger.siriPhone);
          os_log_type_t v32 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v31, v32))
          {
            uint64_t v33 = (uint8_t *)OUTLINED_FUNCTION_7_2();
            *(_WORD *)uint64_t v33 = 0;
            _os_log_impl(&dword_0, v31, v32, "#NLContextUpdate: Setting Announce Calls NLContextUpdate fields", v33, 2u);
            OUTLINED_FUNCTION_6();
          }

          NLContextUpdate.submitAsSpokenNotificationContext.setter();
          NLContextUpdate.weightedPromptStrict.setter();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          uint64_t v34 = swift_allocObject();
          *(_OWORD *)(v34 + 16) = xmmword_46A030;
          uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v37 = v36;
          id v38 = [objc_allocWithZone((Class)SAAceConfirmationContext) init];
          outlined bridged method (mbnn) of @objc SAAceConfirmationContext.reason.setter(v35, v37, v38);
          *(void *)(v34 + 32) = v38;
          specialized Array._endMutation()();
          NLContextUpdate.conversationStateAttachments.setter();
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(a3, v12, v6);
        return __swift_storeEnumTagSinglePayload(a3, 0, 1, v6);
    }
    NLContextUpdate.nluSystemDialogActs.setter();
    goto LABEL_24;
  }

  return __swift_storeEnumTagSinglePayload(a3, 1, 1, v6);
}

id IncomingCallNLContextProvider.makeFollowUpConfirmationContext(followUpOfferType:)(unsigned __int8 a1)
{
  int v2 = a1;
  type metadata accessor for INIntent();
  type metadata accessor for PhoneCallNLContextProvider();
  static PhoneCallNLContextProvider.makeGenericConfirmationNLv3Context()();
  if (v2 == 2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_467710;
    *(void *)(v3 + 32) = PhoneCallNLConstants.canonicalName.getter(15);
    *(void *)(v3 + 40) = v4;
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_467720;
    Swift::String v6 = String.uppercased()();
    lazy protocol witness table accessor for type String and conformance String();
    OUTLINED_FUNCTION_6_45();
    swift_bridgeObjectRelease();
    PhoneCallNLConstants.canonicalName.getter(15);
    OUTLINED_FUNCTION_3_57();
    Swift::String v7 = String.uppercased()();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(Swift::String *)(v5 + 32) = v6;
    Swift::String v8 = String.uppercased()();
    OUTLINED_FUNCTION_6_45();
    swift_bridgeObjectRelease();
    PhoneCallNLConstants.canonicalName.getter(15);
    OUTLINED_FUNCTION_3_57();
    Swift::String v9 = String.uppercased()();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(Swift::String *)(v5 + 48) = v8;
  }
  NLContextUpdate.weightedPromptResponseTargets.getter();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  NLContextUpdate.weightedPromptResponseTargets.setter();
  NLContextUpdate.weightedPromptResponseOptions.getter();
  swift_bridgeObjectRelease();
  specialized Array.append<A>(contentsOf:)();
  NLContextUpdate.weightedPromptResponseOptions.setter();
  id result = IncomingCallNLContextProvider.getConfirmationAttachment(for:)(a1);
  if (result)
  {
    id v11 = result;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_46A030;
    *(void *)(v12 + 32) = v11;
    specialized Array._endMutation()();
    return (id)NLContextUpdate.conversationStateAttachments.setter();
  }
  return result;
}

id IncomingCallNLContextProvider.getConfirmationAttachment(for:)(char a1)
{
  if (a1 == 1)
  {
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    int v2 = OUTLINED_FUNCTION_25_0(v6, (uint64_t)static Logger.siriPhone);
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v2, v7))
    {
      *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
      OUTLINED_FUNCTION_1_3(&dword_0, v8, v9, "#IncomingCallNLContextProvider: Adding NLv3 context for startCall");
      OUTLINED_FUNCTION_6();
    }
  }
  else
  {
    if (a1 != 3) {
      return 0;
    }
    if (one-time initialization token for siriPhone != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    int v2 = OUTLINED_FUNCTION_25_0(v1, (uint64_t)static Logger.siriPhone);
    os_log_type_t v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v2, v3))
    {
      *(_WORD *)OUTLINED_FUNCTION_7_2() = 0;
      OUTLINED_FUNCTION_1_3(&dword_0, v4, v5, "#IncomingCallNLContextProvider: Adding NLv3 context for callBack");
      OUTLINED_FUNCTION_6();
    }
  }

  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;
  id v13 = [objc_allocWithZone((Class)SAAceConfirmationContext) init];
  outlined bridged method (mbnn) of @objc SAAceConfirmationContext.reason.setter(v10, v12, v13);
  return v13;
}

uint64_t IncomingCallNLContextProvider.nlContextUpdateForCallBack()()
{
  return IncomingCallNLContextProvider.nlContextUpdateForCallBack()((void (*)(void))&type metadata accessor for UsoTaskBuilder_callback_common_PhoneCall, (uint64_t (*)(void))&UsoTaskBuilder_callback_common_PhoneCall.init(), 0x636162206C6C6163, 0xE90000000000006BLL);
}

uint64_t IncomingCallNLContextProvider.nlContextUpdateForAnswer()()
{
  return IncomingCallNLContextProvider.nlContextUpdateForCallBack()((void (*)(void))&type metadata accessor for UsoTaskBuilder_answer_common_PhoneCall, (uint64_t (*)(void))&UsoTaskBuilder_answer_common_PhoneCall.init(), 0x6320726577736E61, 0xEB000000006C6C61);
}

uint64_t IncomingCallNLContextProvider.nlContextUpdateForCall()()
{
  return IncomingCallNLContextProvider.nlContextUpdateForCallBack()((void (*)(void))&type metadata accessor for UsoTaskBuilder_call_common_PhoneCall, (uint64_t (*)(void))&UsoTaskBuilder_call_common_PhoneCall.init(), 0x6163207472617473, 0xEA00000000006C6CLL);
}

uint64_t IncomingCallNLContextProvider.nlContextUpdateForCallBack()(void (*a1)(void), uint64_t (*a2)(void), uint64_t a3, unint64_t a4)
{
  a1(0);
  swift_allocObject();
  uint64_t v7 = a2();
  uint64_t v8 = IncomingCallNLContextProvider.createNLUSystemDialogAct(taskBuilder:typeForLogging:)(v7, a3, a4);
  swift_release();
  return v8;
}

uint64_t IncomingCallNLContextProvider.createNLUSystemDialogAct(taskBuilder:typeForLogging:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v74 = a3;
  uint64_t v67 = a2;
  uint64_t v76 = type metadata accessor for PhoneError();
  __chkstk_darwin(v76);
  OUTLINED_FUNCTION_5_8();
  uint64_t v75 = v4;
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_20_15((uint64_t)v65 - v6);
  uint64_t v71 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_0_0();
  v65[1] = v7;
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_20_15(v10 - v9);
  uint64_t v79 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  OUTLINED_FUNCTION_0_0();
  uint64_t v77 = v11;
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_5_8();
  uint64_t v66 = v13;
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_20_15((uint64_t)v65 - v15);
  uint64_t v78 = type metadata accessor for Siri_Nlu_External_SystemOffered();
  OUTLINED_FUNCTION_0_0();
  uint64_t v68 = v16;
  __chkstk_darwin(v17);
  OUTLINED_FUNCTION_5_8();
  uint64_t v72 = v18;
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)v65 - v20;
  type metadata accessor for Siri_Nlu_External_UserDialogAct();
  OUTLINED_FUNCTION_0_0();
  uint64_t v81 = v23;
  uint64_t v82 = v22;
  uint64_t v24 = __chkstk_darwin(v22);
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)v65 - v25;
  uint64_t v27 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  __chkstk_darwin(v27 - 8);
  OUTLINED_FUNCTION_4();
  uint64_t v28 = type metadata accessor for Siri_Nlu_External_UserWantedToProceed();
  OUTLINED_FUNCTION_0_0();
  uint64_t v80 = v29;
  uint64_t v31 = __chkstk_darwin(v30);
  __chkstk_darwin(v31);
  uint64_t v33 = (char *)v65 - v32;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoBuilderOptions?);
  __chkstk_darwin(v34 - 8);
  OUTLINED_FUNCTION_4();
  uint64_t v37 = v36 - v35;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_46A030;
  *(void *)(v38 + 32) = a1;
  v84[0] = v38;
  specialized Array._endMutation()();
  uint64_t v39 = type metadata accessor for UsoBuilderOptions();
  __swift_storeEnumTagSinglePayload(v37, 1, 1, v39);
  swift_retain();
  uint64_t v40 = static UsoGraphBuilder.buildGraphWithOptions(taskBuilders:options:)();
  swift_bridgeObjectRelease();
  outlined destroy of UsoBuilderOptions?(v37);
  Siri_Nlu_External_UserWantedToProceed.init()();
  uint64_t v70 = v40;
  static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)();
  Siri_Nlu_External_UserWantedToProceed.reference.setter();
  Siri_Nlu_External_UserDialogAct.init()();
  unint64_t v73 = v33;
  uint64_t v75 = v28;
  OUTLINED_FUNCTION_12();
  v41();
  Siri_Nlu_External_UserDialogAct.wantedToProceed.setter();
  Siri_Nlu_External_SystemOffered.init()();
  uint64_t v76 = (uint64_t)v26;
  OUTLINED_FUNCTION_12();
  v42();
  Siri_Nlu_External_SystemOffered.offeredAct.setter();
  uint64_t v43 = v69;
  Siri_Nlu_External_SystemDialogAct.init()();
  uint64_t v44 = v68;
  uint64_t v45 = v78;
  OUTLINED_FUNCTION_12();
  v46();
  Siri_Nlu_External_SystemDialogAct.offered.setter();
  if (one-time initialization token for siriPhone != -1) {
    swift_once();
  }
  uint64_t v72 = v21;
  __swift_project_value_buffer(v71, (uint64_t)static Logger.siriPhone);
  unint64_t v47 = v74;
  swift_bridgeObjectRetain_n();
  uint64_t v48 = Logger.logObject.getter();
  os_log_type_t v49 = static os_log_type_t.debug.getter();
  BOOL v50 = os_log_type_enabled(v48, v49);
  uint64_t v51 = v79;
  if (v50)
  {
    uint64_t v52 = swift_slowAlloc();
    v84[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v52 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v47, v84);
    OUTLINED_FUNCTION_14_27(v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v52 + 12) = 2080;
    swift_beginAccess();
    uint64_t v54 = v77;
    uint64_t v55 = v66;
    OUTLINED_FUNCTION_12();
    v56();
    uint64_t v57 = specialized String.init(describing:)(v55);
    uint64_t v83 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v58, v84);
    uint64_t v45 = v78;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v51 = v79;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v48, v49, "Returning NLUUserDialogAct.NLUSystemOffered for %s: %s", (uint8_t *)v52, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_6();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v54 = v77;
  }
  uint64_t v59 = v43;
  uint64_t v61 = v75;
  uint64_t v60 = v76;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  uint64_t v62 = swift_allocObject();
  *(_OWORD *)(v62 + 16) = xmmword_467710;
  swift_beginAccess();
  OUTLINED_FUNCTION_12();
  v63();
  swift_release();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v72, v45);
  (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v60, v82);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v73, v61);
  (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v59, v51);
  return v62;
}